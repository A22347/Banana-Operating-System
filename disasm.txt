
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 89 fa 00 00       	call   c000faa9 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 93 8a 02 00       	call   c0028ab8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 0c 97 02 c0       	mov    ebx,0xc002970c
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 18 97 02 c0    	cmp    ebx,0xc0029718
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 78 dc 02 c0       	mov    eax,0xc002dc78
c0000049:	3d 78 dc 02 c0       	cmp    eax,0xc002dc78
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 78 dc 02 c0       	push   0xc002dc78
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 78 dc 02 c0       	mov    eax,0xc002dc78
c0000075:	2d 78 dc 02 c0       	sub    eax,0xc002dc78
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 78 dc 02 c0       	push   0xc002dc78
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d a8 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2a8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 20 97 02 c0       	mov    ebx,0xc0029720
c00000bb:	81 eb 1c 97 02 c0    	sub    ebx,0xc002971c
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 1c 97 02 c0       	mov    esi,0xc002971c
c00000ca:	a1 ac e2 02 c0       	mov    eax,ds:0xc002e2ac
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ac e2 02 c0       	mov    ds:0xc002e2ac,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ac e2 02 c0       	mov    eax,ds:0xc002e2ac
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 78 dc 02 c0       	push   0xc002dc78
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 a8 e2 02 c0 01 	mov    BYTE PTR ds:0xc002e2a8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 b0 e2 02 c0       	push   0xc002e2b0
c000012c:	68 78 dc 02 c0       	push   0xc002dc78
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 93 d4 01 00       	call   c001d836 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 f6 23 01 00       	call   c00127b1 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 71 d4 01 00       	call   c001d836 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 19 d9 01 00       	call   c001dcfd <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 3e df 01 00       	call   c001e32b <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 f0 e6 02 c0 	lgdtd  ds:0xc002e6f0
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 5f 41 01 00       	call   c0014741 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 15 e1 00 00       	jmp    c000e760 <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 c8 e2 02 c0       	mov    ds:0xc002e2c8,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 c8 e2 02 c0    	mov    DWORD PTR ds:0xc002e2c8,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d c8 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2c8
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 40 97 02 c0 02 	test   BYTE PTR [edx-0x3ffd68c0],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 40 97 02 c0 01 	test   BYTE PTR [edx-0x3ffd68c0],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 40 97 02 c0 08 	test   BYTE PTR [edx-0x3ffd68c0],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 40 97 02 c0 04 	test   BYTE PTR [ebx-0x3ffd68c0],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 40 97 02 c0 01 	test   BYTE PTR [edx-0x3ffd68c0],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d e0 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e2e0
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d e0 e2 02 c0    	mov    DWORD PTR ds:0xc002e2e0,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 e4 e2 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1d1c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 e4 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1d1c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d e0 e2 02 c0    	mov    DWORD PTR ds:0xc002e2e0,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 0c e3 02 c0    	cmp    DWORD PTR ds:0xc002e30c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 1c e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e31c
c0000e38:	c7 42 0c 14 e3 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e314
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 1c e3 02 c0    	mov    DWORD PTR ds:0xc002e31c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 0c e3 02 c0    	mov    DWORD PTR ds:0xc002e30c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 e0 e2 02 c0 02 	test   BYTE PTR ds:0xc002e2e0,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 db e7 00 00       	call   c000f6f4 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 1d e7 00 00       	call   c000f6f4 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 07 e7 00 00       	call   c000f6f4 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 e3 e6 00 00       	call   c000f6f4 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d e0 e2 02 c0    	mov    edi,DWORD PTR ds:0xc002e2e0
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 e4 e2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1d1c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 e4 e2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1d1c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 14 e3 02 c0 	lea    edx,[eax*8-0x3ffd1cec]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 20 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e320
c00011ba:	81 fb 14 e3 02 c0    	cmp    ebx,0xc002e314
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 14 e3 02 c0       	cmp    eax,0xc002e314
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 10 e3 02 c0    	cmp    DWORD PTR ds:0xc002e310,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 1c e3 02 c0       	mov    ds:0xc002e31c,eax
c00011f6:	a3 20 e3 02 c0       	mov    ds:0xc002e320,eax
c00011fb:	a3 10 e3 02 c0       	mov    ds:0xc002e310,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 14 e3 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e314
c0001209:	c7 40 0c 14 e3 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e314
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 20 e3 02 c0       	mov    ds:0xc002e320,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 14 e3 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e314
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 d8 e2 02 c0 	lea    ebp,[edx*4-0x3ffd1d28]
c000125a:	8b 14 95 e0 e2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1d20]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 e0 e2 02 c0 	lea    ecx,[edx*4-0x3ffd1d20]
c0001275:	8b 14 95 e0 e2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1d20]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 14 e6 02 c0 	or     DWORD PTR [edi*4-0x3ffd19ec],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 14 e3 02 c0 	lea    eax,[eax*8-0x3ffd1cec]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 1c e3 02 c0    	mov    DWORD PTR ds:0xc002e31c,ecx
c000132f:	89 0d 20 e3 02 c0    	mov    DWORD PTR ds:0xc002e320,ecx
c0001335:	c7 41 08 14 e3 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e314
c000133c:	c7 41 0c 14 e3 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e314
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 0c e3 02 c0 	lea    edx,[ecx*8-0x3ffd1cf4]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 14 e6 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd19ec]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 14 e6 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd19ec]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 0c e3 02 c0 	lea    edx,[eax*4-0x3ffd1cf4]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 14 e6 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd19ec],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 1c e3 02 c0    	mov    DWORD PTR ds:0xc002e31c,edi
c0001402:	89 3d 20 e3 02 c0    	mov    DWORD PTR ds:0xc002e320,edi
c0001408:	c7 47 08 14 e3 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e314
c000140f:	c7 47 0c 14 e3 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e314
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 10 e3 02 c0    	mov    DWORD PTR ds:0xc002e310,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 0c e3 02 c0       	mov    eax,ds:0xc002e30c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 0c e3 02 c0    	mov    DWORD PTR ds:0xc002e30c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba e0 e2 02 c0       	mov    edx,0xc002e2e0
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d e0 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e2e0,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 34 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e634
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 34 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e634,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 34 e6 02 c0    	mov    DWORD PTR ds:0xc002e634,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 0c e3 02 c0    	cmp    DWORD PTR ds:0xc002e30c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 0c e3 02 c0    	mov    DWORD PTR ds:0xc002e30c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d e0 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e2e0,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 3c e6 02 c0    	push   DWORD PTR ds:0xc002e63c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d e0 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e2e0,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 3c e6 02 c0       	mov    eax,ds:0xc002e63c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 0c e3 02 c0 00 	cmp    DWORD PTR ds:0xc002e30c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 0c e3 02 c0       	mov    eax,ds:0xc002e30c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 e4 e2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1d1c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 14 e3 02 c0       	mov    eax,0xc002e314
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 0c e6 02 c0       	cmp    eax,0xc002e60c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 30 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e630
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 44 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e644
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 54 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e654
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 44 98 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd67bc]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 e0 e2 02 c0       	mov    eax,ds:0xc002e2e0
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 e0 e2 02 c0       	mov    ds:0xc002e2e0,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 24 e6 02 c0    	mov    DWORD PTR ds:0xc002e624,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 28 e6 02 c0    	mov    DWORD PTR ds:0xc002e628,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 2c e6 02 c0    	mov    DWORD PTR ds:0xc002e62c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 34 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e634,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 80 fd 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0280]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 30 f2 01 00       	jmp    c0020e22 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 80 fd 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0280]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 61 f2 01 00       	jmp    c0020e69 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 80 fd 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0280]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 89 f2 01 00       	jmp    c0020eb0 <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 0a 4f 02 00       	call   c0026e14 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 60 99 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd66a0]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 60 99 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd66a0]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 60 98 02 c0       	mov    edx,0xc0029860
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 80 99 02 c0       	mov    edx,0xc0029980
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 74 cb 02 c0       	mov    edx,0xc002cb74
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 8c 99 02 c0       	mov    edx,0xc002998c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 70 99 02 c0       	mov    edx,0xc0029970
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 80 e6 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1980]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 60 e6 02 c0    	mov    ax,ds:0xc002e660
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 60 e6 02 c0    	mov    ds:0xc002e660,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 07 3d 02 00       	call   c0026e14 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 6b 50 00 00       	call   c0008690 <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 fd 4f 00 00       	call   c00086a6 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 92 99 02 c0       	mov    eax,0xc0029992
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 7e 48 00 00       	call   c00086bd <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad e0 98 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6720]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 9b 99 02 c0       	mov    eax,0xc002999b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 54 48 00 00       	call   c00087b9 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 60 99 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd66a0]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 30 47 00 00       	call   c00087b9 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 17 47 00 00       	call   c00087b9 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 44 46 00 00       	call   c00087b9 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 31 46 00 00       	call   c00087b9 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 d2 26 02 00       	call   c0026e14 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 70 99 02 c0       	mov    edx,0xc0029970
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 60 98 02 c0       	mov    edx,0xc0029860
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 70 98 02 c0       	mov    edx,0xc0029870
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 7c 3a 00 00       	call   c000874d <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 80 e6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1980]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 80 e6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1980],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 d9 36 00 00       	call   c0008690 <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 2a 33 00 00       	call   c00086a6 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 26 2d 00 00       	call   c0008690 <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 65 2c 00 00       	call   c00086a6 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 99 10 02 00       	call   c0026e14 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 7f 10 02 00       	call   c0026e14 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 c1 26 00 00       	call   c0008690 <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 38 26 00 00       	call   c00086a6 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 a4 25 00 00       	call   c0008690 <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 66 25 00 00       	call   c00086a6 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 11 25 00 00       	call   c0008690 <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 d5 24 00 00       	call   c00086a6 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 b6 21 00 00       	call   c0008690 <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 93 20 00 00       	call   c00086a6 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 2e 20 00 00       	call   c0008690 <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 c5 1f 00 00       	call   c00086a6 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 f9 1d 00 00       	call   c0008690 <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 76 1b 00 00       	call   c00086a6 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 11 1b 00 00       	call   c0008690 <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 94 1a 00 00       	call   c00086a6 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 38 1a 00 00       	call   c0008690 <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 b5 19 00 00       	call   c00086a6 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 39 19 00 00       	call   c000874d <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 b7 98 02 c0       	mov    eax,0xc00298b7
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 cd 17 00 00       	call   c00087b9 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 c4 16 00 00       	call   c00086bd <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 b0 98 02 c0       	mov    eax,0xc00298b0
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_expand>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 3c             	sub    esp,0x3c
c0007160:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007164:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007168:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000716c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007170:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007174:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007178:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000717c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007180:	89 d8                	mov    eax,ebx
c0007182:	e8 a3 b1 ff ff       	call   c000232a <validate>
c0007187:	89 c5                	mov    ebp,eax
c0007189:	85 c0                	test   eax,eax
c000718b:	0f 85 f4 01 00 00    	jne    c0007385 <f_expand+0x22c>
c0007191:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007195:	85 ed                	test   ebp,ebp
c0007197:	0f 85 e8 01 00 00    	jne    c0007385 <f_expand+0x22c>
c000719d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00071a1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00071a5:	75 0a                	jne    c00071b1 <f_expand+0x58>
c00071a7:	bd 07 00 00 00       	mov    ebp,0x7
c00071ac:	e9 d4 01 00 00       	jmp    c0007385 <f_expand+0x22c>
c00071b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00071b4:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00071b7:	75 ee                	jne    c00071a7 <f_expand+0x4e>
c00071b9:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00071bd:	74 e8                	je     c00071a7 <f_expand+0x4e>
c00071bf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00071c3:	8a 0e                	mov    cl,BYTE PTR [esi]
c00071c5:	80 f9 04             	cmp    cl,0x4
c00071c8:	74 07                	je     c00071d1 <f_expand+0x78>
c00071ca:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00071cf:	77 d6                	ja     c00071a7 <f_expand+0x4e>
c00071d1:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00071d5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00071d9:	c1 e0 09             	shl    eax,0x9
c00071dc:	8d 50 ff             	lea    edx,[eax-0x1]
c00071df:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c00071e3:	0f 95 c2             	setne  dl
c00071e6:	0f b6 d2             	movzx  edx,dl
c00071e9:	89 d7                	mov    edi,edx
c00071eb:	31 d2                	xor    edx,edx
c00071ed:	52                   	push   edx
c00071ee:	50                   	push   eax
c00071ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00071f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00071f7:	e8 18 fc 01 00       	call   c0026e14 <__udivdi3>
c00071fc:	83 c4 10             	add    esp,0x10
c00071ff:	01 f8                	add    eax,edi
c0007201:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007205:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0007208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000720c:	83 ff 01             	cmp    edi,0x1
c000720f:	76 05                	jbe    c0007216 <f_expand+0xbd>
c0007211:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007214:	77 05                	ja     c000721b <f_expand+0xc2>
c0007216:	bf 02 00 00 00       	mov    edi,0x2
c000721b:	80 f9 04             	cmp    cl,0x4
c000721e:	75 19                	jne    c0007239 <f_expand+0xe0>
c0007220:	89 f0                	mov    eax,esi
c0007222:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007226:	89 fa                	mov    edx,edi
c0007228:	e8 f3 b9 ff ff       	call   c0002c20 <find_bitmap>
c000722d:	89 c6                	mov    esi,eax
c000722f:	85 c0                	test   eax,eax
c0007231:	0f 84 70 ff ff ff    	je     c00071a7 <f_expand+0x4e>
c0007237:	eb 7f                	jmp    c00072b8 <f_expand+0x15f>
c0007239:	89 fe                	mov    esi,edi
c000723b:	89 f9                	mov    ecx,edi
c000723d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007245:	89 ca                	mov    edx,ecx
c0007247:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000724b:	89 d8                	mov    eax,ebx
c000724d:	e8 3b bd ff ff       	call   c0002f8d <get_fat>
c0007252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007256:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000725a:	41                   	inc    ecx
c000725b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000725f:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007262:	77 05                	ja     c0007269 <f_expand+0x110>
c0007264:	b9 02 00 00 00       	mov    ecx,0x2
c0007269:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c000726e:	74 3e                	je     c00072ae <f_expand+0x155>
c0007270:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0007275:	75 0a                	jne    c0007281 <f_expand+0x128>
c0007277:	bd 01 00 00 00       	mov    ebp,0x1
c000727c:	e9 04 01 00 00       	jmp    c0007385 <f_expand+0x22c>
c0007281:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007286:	75 13                	jne    c000729b <f_expand+0x142>
c0007288:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000728c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007290:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c0007294:	75 0f                	jne    c00072a5 <f_expand+0x14c>
c0007296:	e9 ce 00 00 00       	jmp    c0007369 <f_expand+0x210>
c000729b:	89 ce                	mov    esi,ecx
c000729d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072a5:	39 f9                	cmp    ecx,edi
c00072a7:	75 9c                	jne    c0007245 <f_expand+0xec>
c00072a9:	e9 f9 fe ff ff       	jmp    c00071a7 <f_expand+0x4e>
c00072ae:	bd 02 00 00 00       	mov    ebp,0x2
c00072b3:	e9 cd 00 00 00       	jmp    c0007385 <f_expand+0x22c>
c00072b8:	83 f8 ff             	cmp    eax,0xffffffff
c00072bb:	74 ba                	je     c0007277 <f_expand+0x11e>
c00072bd:	8d 7e ff             	lea    edi,[esi-0x1]
c00072c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00072c4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00072c8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072cd:	74 51                	je     c0007320 <f_expand+0x1c7>
c00072cf:	83 ec 0c             	sub    esp,0xc
c00072d2:	89 f2                	mov    edx,esi
c00072d4:	6a 01                	push   0x1
c00072d6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00072da:	e8 f4 b9 ff ff       	call   c0002cd3 <change_bitmap>
c00072df:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00072e3:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c00072e7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00072eb:	83 c4 10             	add    esp,0x10
c00072ee:	85 c0                	test   eax,eax
c00072f0:	74 2e                	je     c0007320 <f_expand+0x1c7>
c00072f2:	eb 71                	jmp    c0007365 <f_expand+0x20c>
c00072f4:	83 c9 ff             	or     ecx,0xffffffff
c00072f7:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00072fc:	74 03                	je     c0007301 <f_expand+0x1a8>
c00072fe:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007301:	89 fa                	mov    edx,edi
c0007303:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007307:	e8 7c ba ff ff       	call   c0002d88 <put_fat>
c000730c:	85 c0                	test   eax,eax
c000730e:	75 55                	jne    c0007365 <f_expand+0x20c>
c0007310:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007314:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0007318:	47                   	inc    edi
c0007319:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000731e:	75 d4                	jne    c00072f4 <f_expand+0x19b>
c0007320:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007324:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007328:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000732d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007330:	74 53                	je     c0007385 <f_expand+0x22c>
c0007332:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007335:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0007339:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c000733d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007341:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007345:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0007348:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000734b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000734e:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007351:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007354:	39 ca                	cmp    edx,ecx
c0007356:	77 2d                	ja     c0007385 <f_expand+0x22c>
c0007358:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c000735c:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007360:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007363:	eb 20                	jmp    c0007385 <f_expand+0x22c>
c0007365:	89 c5                	mov    ebp,eax
c0007367:	eb 1c                	jmp    c0007385 <f_expand+0x22c>
c0007369:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000736e:	74 0c                	je     c000737c <f_expand+0x223>
c0007370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007374:	89 f7                	mov    edi,esi
c0007376:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000737a:	eb 9d                	jmp    c0007319 <f_expand+0x1c0>
c000737c:	8d 46 ff             	lea    eax,[esi-0x1]
c000737f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007383:	eb 9b                	jmp    c0007320 <f_expand+0x1c7>
c0007385:	83 c4 3c             	add    esp,0x3c
c0007388:	89 e8                	mov    eax,ebp
c000738a:	5b                   	pop    ebx
c000738b:	5e                   	pop    esi
c000738c:	5f                   	pop    edi
c000738d:	5d                   	pop    ebp
c000738e:	c3                   	ret    

c000738f <f_forward>:
c000738f:	55                   	push   ebp
c0007390:	57                   	push   edi
c0007391:	56                   	push   esi
c0007392:	53                   	push   ebx
c0007393:	83 ec 2c             	sub    esp,0x2c
c0007396:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000739a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000739e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00073a4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00073a8:	89 d8                	mov    eax,ebx
c00073aa:	e8 7b af ff ff       	call   c000232a <validate>
c00073af:	89 c5                	mov    ebp,eax
c00073b1:	85 c0                	test   eax,eax
c00073b3:	0f 85 aa 01 00 00    	jne    c0007563 <f_forward+0x1d4>
c00073b9:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00073bd:	85 ed                	test   ebp,ebp
c00073bf:	0f 85 9e 01 00 00    	jne    c0007563 <f_forward+0x1d4>
c00073c5:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00073c9:	0f 84 8f 01 00 00    	je     c000755e <f_forward+0x1cf>
c00073cf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00073d2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00073d5:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00073d8:	bf 00 00 00 00       	mov    edi,0x0
c00073dd:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00073e0:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00073e4:	89 d1                	mov    ecx,edx
c00073e6:	19 f9                	sbb    ecx,edi
c00073e8:	0f 83 cf 00 00 00    	jae    c00074bd <f_forward+0x12e>
c00073ee:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00073f2:	e9 c6 00 00 00       	jmp    c00074bd <f_forward+0x12e>
c00073f7:	50                   	push   eax
c00073f8:	50                   	push   eax
c00073f9:	6a 00                	push   0x0
c00073fb:	6a 00                	push   0x0
c00073fd:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007401:	83 c4 10             	add    esp,0x10
c0007404:	85 c0                	test   eax,eax
c0007406:	0f 84 57 01 00 00    	je     c0007563 <f_forward+0x1d4>
c000740c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000740f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007416:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000741a:	89 d7                	mov    edi,edx
c000741c:	8d 4e ff             	lea    ecx,[esi-0x1]
c000741f:	89 c6                	mov    esi,eax
c0007421:	0f ac fe 09          	shrd   esi,edi,0x9
c0007425:	21 ce                	and    esi,ecx
c0007427:	89 c1                	mov    ecx,eax
c0007429:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000742f:	0f 84 98 00 00 00    	je     c00074cd <f_forward+0x13e>
c0007435:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007439:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000743c:	89 c8                	mov    eax,ecx
c000743e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007442:	e8 79 aa ff ff       	call   c0001ec0 <clst2sect>
c0007447:	89 d7                	mov    edi,edx
c0007449:	09 c7                	or     edi,eax
c000744b:	0f 84 9e 00 00 00    	je     c00074ef <f_forward+0x160>
c0007451:	31 ff                	xor    edi,edi
c0007453:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007456:	01 c6                	add    esi,eax
c0007458:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000745c:	11 d7                	adc    edi,edx
c000745e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007461:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007464:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007468:	39 fa                	cmp    edx,edi
c000746a:	0f 85 a2 00 00 00    	jne    c0007512 <f_forward+0x183>
c0007470:	39 f0                	cmp    eax,esi
c0007472:	0f 85 9a 00 00 00    	jne    c0007512 <f_forward+0x183>
c0007478:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000747b:	ba 00 02 00 00       	mov    edx,0x200
c0007480:	25 ff 01 00 00       	and    eax,0x1ff
c0007485:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007489:	29 c2                	sub    edx,eax
c000748b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000748e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007491:	39 d1                	cmp    ecx,edx
c0007493:	76 02                	jbe    c0007497 <f_forward+0x108>
c0007495:	89 d1                	mov    ecx,edx
c0007497:	8d 73 50             	lea    esi,[ebx+0x50]
c000749a:	52                   	push   edx
c000749b:	01 c6                	add    esi,eax
c000749d:	52                   	push   edx
c000749e:	51                   	push   ecx
c000749f:	56                   	push   esi
c00074a0:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00074a4:	83 c4 10             	add    esp,0x10
c00074a7:	85 c0                	test   eax,eax
c00074a9:	74 44                	je     c00074ef <f_forward+0x160>
c00074ab:	31 ff                	xor    edi,edi
c00074ad:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00074b0:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00074b3:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00074b7:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00074bb:	01 07                	add    DWORD PTR [edi],eax
c00074bd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00074c2:	0f 85 2f ff ff ff    	jne    c00073f7 <f_forward+0x68>
c00074c8:	e9 96 00 00 00       	jmp    c0007563 <f_forward+0x1d4>
c00074cd:	85 f6                	test   esi,esi
c00074cf:	0f 85 60 ff ff ff    	jne    c0007435 <f_forward+0xa6>
c00074d5:	89 d7                	mov    edi,edx
c00074d7:	09 c7                	or     edi,eax
c00074d9:	75 05                	jne    c00074e0 <f_forward+0x151>
c00074db:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00074de:	eb 0a                	jmp    c00074ea <f_forward+0x15b>
c00074e0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00074e3:	89 d8                	mov    eax,ebx
c00074e5:	e8 a3 ba ff ff       	call   c0002f8d <get_fat>
c00074ea:	83 f8 01             	cmp    eax,0x1
c00074ed:	77 0b                	ja     c00074fa <f_forward+0x16b>
c00074ef:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00074f3:	bd 02 00 00 00       	mov    ebp,0x2
c00074f8:	eb 69                	jmp    c0007563 <f_forward+0x1d4>
c00074fa:	83 f8 ff             	cmp    eax,0xffffffff
c00074fd:	75 0b                	jne    c000750a <f_forward+0x17b>
c00074ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007503:	bd 01 00 00 00       	mov    ebp,0x1
c0007508:	eb 59                	jmp    c0007563 <f_forward+0x1d4>
c000750a:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000750d:	e9 23 ff ff ff       	jmp    c0007435 <f_forward+0xa6>
c0007512:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007516:	79 20                	jns    c0007538 <f_forward+0x1a9>
c0007518:	83 ec 0c             	sub    esp,0xc
c000751b:	6a 01                	push   0x1
c000751d:	52                   	push   edx
c000751e:	50                   	push   eax
c000751f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007523:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007527:	50                   	push   eax
c0007528:	e8 c5 a6 ff ff       	call   c0001bf2 <disk_write>
c000752d:	83 c4 20             	add    esp,0x20
c0007530:	85 c0                	test   eax,eax
c0007532:	75 cb                	jne    c00074ff <f_forward+0x170>
c0007534:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007538:	83 ec 0c             	sub    esp,0xc
c000753b:	6a 01                	push   0x1
c000753d:	57                   	push   edi
c000753e:	56                   	push   esi
c000753f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007543:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007547:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000754b:	50                   	push   eax
c000754c:	e8 8b a6 ff ff       	call   c0001bdc <disk_read>
c0007551:	83 c4 20             	add    esp,0x20
c0007554:	85 c0                	test   eax,eax
c0007556:	0f 84 1c ff ff ff    	je     c0007478 <f_forward+0xe9>
c000755c:	eb a1                	jmp    c00074ff <f_forward+0x170>
c000755e:	bd 07 00 00 00       	mov    ebp,0x7
c0007563:	83 c4 2c             	add    esp,0x2c
c0007566:	89 e8                	mov    eax,ebp
c0007568:	5b                   	pop    ebx
c0007569:	5e                   	pop    esi
c000756a:	5f                   	pop    edi
c000756b:	5d                   	pop    ebp
c000756c:	c3                   	ret    

c000756d <f_mkfs>:
c000756d:	55                   	push   ebp
c000756e:	57                   	push   edi
c000756f:	56                   	push   esi
c0007570:	53                   	push   ebx
c0007571:	bb 0b 00 00 00       	mov    ebx,0xb
c0007576:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000757c:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007583:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000758a:	e8 7a ac ff ff       	call   c0002209 <get_ldnumber>
c000758f:	85 c0                	test   eax,eax
c0007591:	0f 88 ec 10 00 00    	js     c0008683 <f_mkfs+0x1116>
c0007597:	8b 14 85 80 e6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1980]
c000759e:	85 d2                	test   edx,edx
c00075a0:	74 03                	je     c00075a5 <f_mkfs+0x38>
c00075a2:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00075a5:	85 f6                	test   esi,esi
c00075a7:	75 05                	jne    c00075ae <f_mkfs+0x41>
c00075a9:	be a0 98 02 c0       	mov    esi,0xc00298a0
c00075ae:	83 ec 0c             	sub    esp,0xc
c00075b1:	0f b6 c0             	movzx  eax,al
c00075b4:	bb 03 00 00 00       	mov    ebx,0x3
c00075b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00075bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075c1:	e8 13 a6 ff ff       	call   c0001bd9 <disk_initialize>
c00075c6:	83 c4 10             	add    esp,0x10
c00075c9:	a8 01                	test   al,0x1
c00075cb:	0f 85 b2 10 00 00    	jne    c0008683 <f_mkfs+0x1116>
c00075d1:	bb 0a 00 00 00       	mov    ebx,0xa
c00075d6:	a8 04                	test   al,0x4
c00075d8:	0f 85 a5 10 00 00    	jne    c0008683 <f_mkfs+0x1116>
c00075de:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00075e1:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00075e5:	85 c0                	test   eax,eax
c00075e7:	75 20                	jne    c0007609 <f_mkfs+0x9c>
c00075e9:	51                   	push   ecx
c00075ea:	8d 44 24 78          	lea    eax,[esp+0x78]
c00075ee:	50                   	push   eax
c00075ef:	6a 03                	push   0x3
c00075f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f5:	e8 0e a6 ff ff       	call   c0001c08 <disk_ioctl>
c00075fa:	83 c4 10             	add    esp,0x10
c00075fd:	85 c0                	test   eax,eax
c00075ff:	74 08                	je     c0007609 <f_mkfs+0x9c>
c0007601:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007609:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000760d:	8d 42 ff             	lea    eax,[edx-0x1]
c0007610:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007615:	77 04                	ja     c000761b <f_mkfs+0xae>
c0007617:	85 c2                	test   edx,eax
c0007619:	74 08                	je     c0007623 <f_mkfs+0xb6>
c000761b:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007623:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007626:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000762a:	48                   	dec    eax
c000762b:	3c 01                	cmp    al,0x1
c000762d:	76 05                	jbe    c0007634 <f_mkfs+0xc7>
c000762f:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007634:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007637:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000763b:	48                   	dec    eax
c000763c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007641:	77 07                	ja     c000764a <f_mkfs+0xdd>
c0007643:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007648:	74 08                	je     c0007652 <f_mkfs+0xe5>
c000764a:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007652:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007655:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000765b:	77 07                	ja     c0007664 <f_mkfs+0xf7>
c000765d:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007660:	85 d8                	test   eax,ebx
c0007662:	74 02                	je     c0007666 <f_mkfs+0xf9>
c0007664:	31 db                	xor    ebx,ebx
c0007666:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007671:	77 0a                	ja     c000767d <f_mkfs+0x110>
c0007673:	bb 11 00 00 00       	mov    ebx,0x11
c0007678:	e9 06 10 00 00       	jmp    c0008683 <f_mkfs+0x1116>
c000767d:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007684:	8b 36                	mov    esi,DWORD PTR [esi]
c0007686:	85 ed                	test   ebp,ebp
c0007688:	75 1e                	jne    c00076a8 <f_mkfs+0x13b>
c000768a:	83 ec 0c             	sub    esp,0xc
c000768d:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007694:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007699:	50                   	push   eax
c000769a:	e8 f1 0f 00 00       	call   c0008690 <ff_memalloc>
c000769f:	83 c4 10             	add    esp,0x10
c00076a2:	89 c5                	mov    ebp,eax
c00076a4:	85 c0                	test   eax,eax
c00076a6:	74 cb                	je     c0007673 <f_mkfs+0x106>
c00076a8:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00076b0:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00076b8:	52                   	push   edx
c00076b9:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00076bd:	50                   	push   eax
c00076be:	6a 01                	push   0x1
c00076c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00076c4:	e8 3f a5 ff ff       	call   c0001c08 <disk_ioctl>
c00076c9:	83 c4 10             	add    esp,0x10
c00076cc:	85 c0                	test   eax,eax
c00076ce:	0f 85 4a 0f 00 00    	jne    c000861e <f_mkfs+0x10b1>
c00076d4:	89 f1                	mov    ecx,esi
c00076d6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00076de:	83 e1 0f             	and    ecx,0xf
c00076e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00076e9:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00076ed:	83 e6 08             	and    esi,0x8
c00076f0:	75 56                	jne    c0007748 <f_mkfs+0x1db>
c00076f2:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00076f6:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00076fa:	83 ff 00             	cmp    edi,0x0
c00076fd:	76 20                	jbe    c000771f <f_mkfs+0x1b2>
c00076ff:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007704:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000770c:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007712:	83 d7 ff             	adc    edi,0xffffffff
c0007715:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007719:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000771d:	eb 21                	jmp    c0007740 <f_mkfs+0x1d3>
c000771f:	ba 3f 00 00 00       	mov    edx,0x3f
c0007724:	39 f2                	cmp    edx,esi
c0007726:	19 f8                	sbb    eax,edi
c0007728:	73 1e                	jae    c0007748 <f_mkfs+0x1db>
c000772a:	83 c6 c1             	add    esi,0xffffffc1
c000772d:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007735:	83 d7 ff             	adc    edi,0xffffffff
c0007738:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000773c:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007740:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007748:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000774c:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007750:	89 04 24             	mov    DWORD PTR [esp],eax
c0007753:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007757:	31 c0                	xor    eax,eax
c0007759:	ba 7f 00 00 00       	mov    edx,0x7f
c000775e:	89 c7                	mov    edi,eax
c0007760:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007763:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007767:	0f 83 c5 0a 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c000776d:	89 df                	mov    edi,ebx
c000776f:	c1 ef 09             	shr    edi,0x9
c0007772:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007776:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000777d:	c1 ef 09             	shr    edi,0x9
c0007780:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007785:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007789:	74 29                	je     c00077b4 <f_mkfs+0x247>
c000778b:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007791:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007796:	0f 97 c2             	seta   dl
c0007799:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c000779c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00077a0:	0f 92 c0             	setb   al
c00077a3:	08 c2                	or     dl,al
c00077a5:	75 5b                	jne    c0007802 <f_mkfs+0x295>
c00077a7:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00077ab:	83 e0 07             	and    eax,0x7
c00077ae:	3c 04                	cmp    al,0x4
c00077b0:	74 50                	je     c0007802 <f_mkfs+0x295>
c00077b2:	eb 1b                	jmp    c00077cf <f_mkfs+0x262>
c00077b4:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00077b9:	0f 87 73 0a 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c00077bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00077c5:	76 08                	jbe    c00077cf <f_mkfs+0x262>
c00077c7:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00077cf:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00077d3:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00077d7:	83 e0 01             	and    eax,0x1
c00077da:	80 e1 02             	and    cl,0x2
c00077dd:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00077e1:	74 0d                	je     c00077f0 <f_mkfs+0x283>
c00077e3:	84 c0                	test   al,al
c00077e5:	0f 84 53 09 00 00    	je     c000813e <f_mkfs+0xbd1>
c00077eb:	e9 12 08 00 00       	jmp    c0008002 <f_mkfs+0xa95>
c00077f0:	bb 13 00 00 00       	mov    ebx,0x13
c00077f5:	84 c0                	test   al,al
c00077f7:	0f 85 05 08 00 00    	jne    c0008002 <f_mkfs+0xa95>
c00077fd:	e9 39 0e 00 00       	jmp    c000863b <f_mkfs+0x10ce>
c0007802:	31 c0                	xor    eax,eax
c0007804:	ba ff 0f 00 00       	mov    edx,0xfff
c0007809:	89 c7                	mov    edi,eax
c000780b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000780e:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007812:	0f 83 1a 0a 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c0007818:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000781e:	77 39                	ja     c0007859 <f_mkfs+0x2ec>
c0007820:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007825:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000782d:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007830:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007834:	73 08                	jae    c000783e <f_mkfs+0x2d1>
c0007836:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000783e:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007843:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007846:	b8 00 00 00 00       	mov    eax,0x0
c000784b:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000784f:	73 08                	jae    c0007859 <f_mkfs+0x2ec>
c0007851:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000785d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007861:	83 c0 20             	add    eax,0x20
c0007864:	83 d2 00             	adc    edx,0x0
c0007867:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000786b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000786f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007873:	31 d2                	xor    edx,edx
c0007875:	31 ff                	xor    edi,edi
c0007877:	52                   	push   edx
c0007878:	89 fb                	mov    ebx,edi
c000787a:	50                   	push   eax
c000787b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000787f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007883:	e8 8c f5 01 00       	call   c0026e14 <__udivdi3>
c0007888:	83 c4 10             	add    esp,0x10
c000788b:	c1 e0 02             	shl    eax,0x2
c000788e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007892:	05 07 02 00 00       	add    eax,0x207
c0007897:	89 f1                	mov    ecx,esi
c0007899:	c1 e8 09             	shr    eax,0x9
c000789c:	83 c1 ff             	add    ecx,0xffffffff
c000789f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00078a3:	83 d3 ff             	adc    ebx,0xffffffff
c00078a6:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00078aa:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00078ae:	31 d2                	xor    edx,edx
c00078b0:	01 c8                	add    eax,ecx
c00078b2:	11 da                	adc    edx,ebx
c00078b4:	89 c1                	mov    ecx,eax
c00078b6:	f7 de                	neg    esi
c00078b8:	89 d0                	mov    eax,edx
c00078ba:	83 d7 00             	adc    edi,0x0
c00078bd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00078c1:	f7 df                	neg    edi
c00078c3:	21 f1                	and    ecx,esi
c00078c5:	21 f8                	and    eax,edi
c00078c7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00078cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00078cf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00078d3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00078d7:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00078db:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00078de:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00078e2:	0f ac d0 01          	shrd   eax,edx,0x1
c00078e6:	89 df                	mov    edi,ebx
c00078e8:	d1 ea                	shr    edx,1
c00078ea:	39 c1                	cmp    ecx,eax
c00078ec:	19 d7                	sbb    edi,edx
c00078ee:	0f 83 3e 09 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c00078f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00078f8:	31 d2                	xor    edx,edx
c00078fa:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00078fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007902:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007906:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007909:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000790d:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007911:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007915:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007919:	83 f8 0f             	cmp    eax,0xf
c000791c:	0f 86 10 09 00 00    	jbe    c0008232 <f_mkfs+0xcc5>
c0007922:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000792a:	0f 87 02 09 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c0007930:	31 d2                	xor    edx,edx
c0007932:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007936:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000793e:	83 c0 07             	add    eax,0x7
c0007941:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007949:	c1 e8 03             	shr    eax,0x3
c000794c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007953:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007957:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000795b:	c1 e0 09             	shl    eax,0x9
c000795e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007962:	48                   	dec    eax
c0007963:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007967:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000796b:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000796f:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007973:	31 d2                	xor    edx,edx
c0007975:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007979:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007980:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007984:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007989:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000798d:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007991:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007995:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007999:	31 ff                	xor    edi,edi
c000799b:	31 f6                	xor    esi,esi
c000799d:	31 db                	xor    ebx,ebx
c000799f:	85 ff                	test   edi,edi
c00079a1:	74 05                	je     c00079a8 <f_mkfs+0x43b>
c00079a3:	4f                   	dec    edi
c00079a4:	74 44                	je     c00079ea <f_mkfs+0x47d>
c00079a6:	eb 4f                	jmp    c00079f7 <f_mkfs+0x48a>
c00079a8:	83 ec 0c             	sub    esp,0xc
c00079ab:	0f b7 c3             	movzx  eax,bx
c00079ae:	50                   	push   eax
c00079af:	e8 05 0e 00 00       	call   c00087b9 <ff_wtoupper>
c00079b4:	83 c4 10             	add    esp,0x10
c00079b7:	89 c1                	mov    ecx,eax
c00079b9:	8d 53 01             	lea    edx,[ebx+0x1]
c00079bc:	66 39 c3             	cmp    bx,ax
c00079bf:	75 3e                	jne    c00079ff <f_mkfs+0x492>
c00079c1:	be 01 00 00 00       	mov    esi,0x1
c00079c6:	89 df                	mov    edi,ebx
c00079c8:	66 01 f7             	add    di,si
c00079cb:	75 07                	jne    c00079d4 <f_mkfs+0x467>
c00079cd:	83 fe 7f             	cmp    esi,0x7f
c00079d0:	77 31                	ja     c0007a03 <f_mkfs+0x496>
c00079d2:	eb 16                	jmp    c00079ea <f_mkfs+0x47d>
c00079d4:	83 ec 0c             	sub    esp,0xc
c00079d7:	0f b7 ff             	movzx  edi,di
c00079da:	57                   	push   edi
c00079db:	e8 d9 0d 00 00       	call   c00087b9 <ff_wtoupper>
c00079e0:	83 c4 10             	add    esp,0x10
c00079e3:	39 c7                	cmp    edi,eax
c00079e5:	75 e6                	jne    c00079cd <f_mkfs+0x460>
c00079e7:	46                   	inc    esi
c00079e8:	eb dc                	jmp    c00079c6 <f_mkfs+0x459>
c00079ea:	31 c0                	xor    eax,eax
c00079ec:	89 d9                	mov    ecx,ebx
c00079ee:	4e                   	dec    esi
c00079ef:	0f 95 c0             	setne  al
c00079f2:	43                   	inc    ebx
c00079f3:	89 c7                	mov    edi,eax
c00079f5:	eb 14                	jmp    c0007a0b <f_mkfs+0x49e>
c00079f7:	89 f1                	mov    ecx,esi
c00079f9:	01 f3                	add    ebx,esi
c00079fb:	31 ff                	xor    edi,edi
c00079fd:	eb 0c                	jmp    c0007a0b <f_mkfs+0x49e>
c00079ff:	89 d3                	mov    ebx,edx
c0007a01:	eb 08                	jmp    c0007a0b <f_mkfs+0x49e>
c0007a03:	bf 02 00 00 00       	mov    edi,0x2
c0007a08:	83 c9 ff             	or     ecx,0xffffffff
c0007a0b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a12:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007a16:	0f b6 c1             	movzx  eax,cl
c0007a19:	e8 04 a7 ff ff       	call   c0002122 <xsum32>
c0007a1e:	66 c1 e9 08          	shr    cx,0x8
c0007a22:	89 c2                	mov    edx,eax
c0007a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a27:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007a2b:	0f b7 c1             	movzx  eax,cx
c0007a2e:	e8 ef a6 ff ff       	call   c0002122 <xsum32>
c0007a33:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007a38:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007a3c:	66 85 db             	test   bx,bx
c0007a3f:	74 1f                	je     c0007a60 <f_mkfs+0x4f3>
c0007a41:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a44:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007a4b:	83 c0 02             	add    eax,0x2
c0007a4e:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007a54:	39 c2                	cmp    edx,eax
c0007a56:	74 08                	je     c0007a60 <f_mkfs+0x4f3>
c0007a58:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a5b:	e9 3f ff ff ff       	jmp    c000799f <f_mkfs+0x432>
c0007a60:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a63:	83 ec 0c             	sub    esp,0xc
c0007a66:	05 01 02 00 00       	add    eax,0x201
c0007a6b:	c1 e8 09             	shr    eax,0x9
c0007a6e:	50                   	push   eax
c0007a6f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007a73:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007a77:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007a7b:	55                   	push   ebp
c0007a7c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a80:	e8 6d a1 ff ff       	call   c0001bf2 <disk_write>
c0007a85:	83 c4 20             	add    esp,0x20
c0007a88:	85 c0                	test   eax,eax
c0007a8a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007a8d:	0f 85 8b 0b 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007a93:	89 d0                	mov    eax,edx
c0007a95:	31 d2                	xor    edx,edx
c0007a97:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007a9b:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007a9f:	66 85 db             	test   bx,bx
c0007aa2:	74 04                	je     c0007aa8 <f_mkfs+0x53b>
c0007aa4:	31 c0                	xor    eax,eax
c0007aa6:	eb b0                	jmp    c0007a58 <f_mkfs+0x4eb>
c0007aa8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007aac:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007ab0:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007ab4:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007aba:	31 d2                	xor    edx,edx
c0007abc:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007ac7:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007acb:	c1 eb 09             	shr    ebx,0x9
c0007ace:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007ad5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007ad9:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007add:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ae1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007ae5:	8d 70 01             	lea    esi,[eax+0x1]
c0007ae8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007aec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007af0:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007af7:	31 d2                	xor    edx,edx
c0007af9:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007afe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b01:	89 c1                	mov    ecx,eax
c0007b03:	89 e8                	mov    eax,ebp
c0007b05:	e8 b1 a1 ff ff       	call   c0001cbb <mem_set>
c0007b0a:	31 c0                	xor    eax,eax
c0007b0c:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007b0f:	76 10                	jbe    c0007b21 <f_mkfs+0x5b4>
c0007b11:	83 fe 07             	cmp    esi,0x7
c0007b14:	76 0b                	jbe    c0007b21 <f_mkfs+0x5b4>
c0007b16:	40                   	inc    eax
c0007b17:	83 ee 08             	sub    esi,0x8
c0007b1a:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007b1f:	eb eb                	jmp    c0007b0c <f_mkfs+0x59f>
c0007b21:	b2 01                	mov    dl,0x1
c0007b23:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007b27:	85 f6                	test   esi,esi
c0007b29:	74 0c                	je     c0007b37 <f_mkfs+0x5ca>
c0007b2b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007b2e:	76 07                	jbe    c0007b37 <f_mkfs+0x5ca>
c0007b30:	08 11                	or     BYTE PTR [ecx],dl
c0007b32:	4e                   	dec    esi
c0007b33:	d1 e2                	shl    edx,1
c0007b35:	eb f0                	jmp    c0007b27 <f_mkfs+0x5ba>
c0007b37:	89 df                	mov    edi,ebx
c0007b39:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007b3d:	76 04                	jbe    c0007b43 <f_mkfs+0x5d6>
c0007b3f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007b43:	83 ec 0c             	sub    esp,0xc
c0007b46:	57                   	push   edi
c0007b47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007b4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007b4f:	55                   	push   ebp
c0007b50:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b54:	e8 99 a0 ff ff       	call   c0001bf2 <disk_write>
c0007b59:	83 c4 20             	add    esp,0x20
c0007b5c:	85 c0                	test   eax,eax
c0007b5e:	0f 85 ba 0a 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007b64:	31 d2                	xor    edx,edx
c0007b66:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007b6a:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007b6e:	29 fb                	sub    ebx,edi
c0007b70:	0f 85 7a ff ff ff    	jne    c0007af0 <f_mkfs+0x583>
c0007b76:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007b7a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007b82:	31 f6                	xor    esi,esi
c0007b84:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007b88:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b8b:	31 d2                	xor    edx,edx
c0007b8d:	89 e8                	mov    eax,ebp
c0007b8f:	e8 27 a1 ff ff       	call   c0001cbb <mem_set>
c0007b94:	31 c9                	xor    ecx,ecx
c0007b96:	85 db                	test   ebx,ebx
c0007b98:	75 40                	jne    c0007bda <f_mkfs+0x66d>
c0007b9a:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007b9f:	89 e8                	mov    eax,ebp
c0007ba1:	bb 02 00 00 00       	mov    ebx,0x2
c0007ba6:	e8 f2 a0 ff ff       	call   c0001c9d <st_dword>
c0007bab:	8d 45 04             	lea    eax,[ebp+0x4]
c0007bae:	83 ca ff             	or     edx,0xffffffff
c0007bb1:	e8 e7 a0 ff ff       	call   c0001c9d <st_dword>
c0007bb6:	b9 08 00 00 00       	mov    ecx,0x8
c0007bbb:	eb 1d                	jmp    c0007bda <f_mkfs+0x66d>
c0007bbd:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007bc0:	76 3b                	jbe    c0007bfd <f_mkfs+0x690>
c0007bc2:	43                   	inc    ebx
c0007bc3:	83 fe 01             	cmp    esi,0x1
c0007bc6:	89 da                	mov    edx,ebx
c0007bc8:	77 03                	ja     c0007bcd <f_mkfs+0x660>
c0007bca:	83 ca ff             	or     edx,0xffffffff
c0007bcd:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007bd1:	4e                   	dec    esi
c0007bd2:	e8 c6 a0 ff ff       	call   c0001c9d <st_dword>
c0007bd7:	83 c1 04             	add    ecx,0x4
c0007bda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bde:	85 f6                	test   esi,esi
c0007be0:	75 db                	jne    c0007bbd <f_mkfs+0x650>
c0007be2:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007be7:	77 14                	ja     c0007bfd <f_mkfs+0x690>
c0007be9:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007bed:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007bf4:	85 f6                	test   esi,esi
c0007bf6:	74 05                	je     c0007bfd <f_mkfs+0x690>
c0007bf8:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007bfb:	77 dd                	ja     c0007bda <f_mkfs+0x66d>
c0007bfd:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007c01:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007c05:	39 cf                	cmp    edi,ecx
c0007c07:	76 02                	jbe    c0007c0b <f_mkfs+0x69e>
c0007c09:	89 cf                	mov    edi,ecx
c0007c0b:	83 ec 0c             	sub    esp,0xc
c0007c0e:	57                   	push   edi
c0007c0f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007c13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007c17:	55                   	push   ebp
c0007c18:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c1c:	e8 d1 9f ff ff       	call   c0001bf2 <disk_write>
c0007c21:	83 c4 20             	add    esp,0x20
c0007c24:	85 c0                	test   eax,eax
c0007c26:	0f 85 f2 09 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007c2c:	31 d2                	xor    edx,edx
c0007c2e:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007c32:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007c36:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007c3a:	0f 85 48 ff ff ff    	jne    c0007b88 <f_mkfs+0x61b>
c0007c40:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c43:	31 d2                	xor    edx,edx
c0007c45:	89 e8                	mov    eax,ebp
c0007c47:	31 ff                	xor    edi,edi
c0007c49:	e8 6d a0 ff ff       	call   c0001cbb <mem_set>
c0007c4e:	8d 45 34             	lea    eax,[ebp+0x34]
c0007c51:	ba 02 00 00 00       	mov    edx,0x2
c0007c56:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007c5a:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007c5e:	e8 3a a0 ff ff       	call   c0001c9d <st_dword>
c0007c63:	8d 45 38             	lea    eax,[ebp+0x38]
c0007c66:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007c6a:	e8 2e a0 ff ff       	call   c0001c9d <st_dword>
c0007c6f:	8d 45 44             	lea    eax,[ebp+0x44]
c0007c72:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007c76:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007c7a:	e8 1e a0 ff ff       	call   c0001c9d <st_dword>
c0007c7f:	8d 45 54             	lea    eax,[ebp+0x54]
c0007c82:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007c86:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c8a:	83 c2 02             	add    edx,0x2
c0007c8d:	e8 0b a0 ff ff       	call   c0001c9d <st_dword>
c0007c92:	8d 45 58             	lea    eax,[ebp+0x58]
c0007c95:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007c99:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007c9d:	e8 fb 9f ff ff       	call   c0001c9d <st_dword>
c0007ca2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ca6:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007cab:	89 c6                	mov    esi,eax
c0007cad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cb1:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007cb5:	89 04 24             	mov    DWORD PTR [esp],eax
c0007cb8:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007cbc:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007cbf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007cc3:	39 cb                	cmp    ebx,ecx
c0007cc5:	76 02                	jbe    c0007cc9 <f_mkfs+0x75c>
c0007cc7:	89 cb                	mov    ebx,ecx
c0007cc9:	83 ec 0c             	sub    esp,0xc
c0007ccc:	53                   	push   ebx
c0007ccd:	57                   	push   edi
c0007cce:	56                   	push   esi
c0007ccf:	55                   	push   ebp
c0007cd0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cd4:	e8 19 9f ff ff       	call   c0001bf2 <disk_write>
c0007cd9:	83 c4 20             	add    esp,0x20
c0007cdc:	85 c0                	test   eax,eax
c0007cde:	0f 85 3a 09 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007ce4:	31 d2                	xor    edx,edx
c0007ce6:	b9 00 02 00 00       	mov    ecx,0x200
c0007ceb:	89 e8                	mov    eax,ebp
c0007ced:	e8 c9 9f ff ff       	call   c0001cbb <mem_set>
c0007cf2:	31 d2                	xor    edx,edx
c0007cf4:	01 de                	add    esi,ebx
c0007cf6:	11 d7                	adc    edi,edx
c0007cf8:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007cfb:	75 bf                	jne    c0007cbc <f_mkfs+0x74f>
c0007cfd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007d01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007d05:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007d0d:	b9 00 02 00 00       	mov    ecx,0x200
c0007d12:	31 d2                	xor    edx,edx
c0007d14:	89 e8                	mov    eax,ebp
c0007d16:	e8 a0 9f ff ff       	call   c0001cbb <mem_set>
c0007d1b:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d20:	ba 80 99 02 c0       	mov    edx,0xc0029980
c0007d25:	89 e8                	mov    eax,ebp
c0007d27:	e8 7a 9f ff ff       	call   c0001ca6 <mem_cpy>
c0007d2c:	8d 45 40             	lea    eax,[ebp+0x40]
c0007d2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007d33:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007d37:	e8 64 9f ff ff       	call   c0001ca0 <st_qword>
c0007d3c:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007d40:	8d 45 48             	lea    eax,[ebp+0x48]
c0007d43:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007d47:	e8 54 9f ff ff       	call   c0001ca0 <st_qword>
c0007d4c:	8d 45 50             	lea    eax,[ebp+0x50]
c0007d4f:	ba 20 00 00 00       	mov    edx,0x20
c0007d54:	e8 44 9f ff ff       	call   c0001c9d <st_dword>
c0007d59:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007d5d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007d61:	e8 37 9f ff ff       	call   c0001c9d <st_dword>
c0007d66:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007d6a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007d6e:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007d72:	e8 26 9f ff ff       	call   c0001c9d <st_dword>
c0007d77:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007d7a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007d7e:	e8 1a 9f ff ff       	call   c0001c9d <st_dword>
c0007d83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007d87:	8d 50 02             	lea    edx,[eax+0x2]
c0007d8a:	8d 45 60             	lea    eax,[ebp+0x60]
c0007d8d:	e8 0b 9f ff ff       	call   c0001c9d <st_dword>
c0007d92:	8d 45 64             	lea    eax,[ebp+0x64]
c0007d95:	ba 00 00 21 50       	mov    edx,0x50210000
c0007d9a:	e8 fe 9e ff ff       	call   c0001c9d <st_dword>
c0007d9f:	8d 45 68             	lea    eax,[ebp+0x68]
c0007da2:	ba 00 01 00 00       	mov    edx,0x100
c0007da7:	e8 ed 9e ff ff       	call   c0001c99 <st_word>
c0007dac:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007db0:	b8 0a 00 00 00       	mov    eax,0xa
c0007db5:	48                   	dec    eax
c0007db6:	74 05                	je     c0007dbd <f_mkfs+0x850>
c0007db8:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007dbb:	eb f8                	jmp    c0007db5 <f_mkfs+0x848>
c0007dbd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc1:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007dc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dc9:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007dcd:	74 05                	je     c0007dd4 <f_mkfs+0x867>
c0007dcf:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007dd2:	eb f5                	jmp    c0007dc9 <f_mkfs+0x85c>
c0007dd4:	8d 45 78             	lea    eax,[ebp+0x78]
c0007dd7:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ddc:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007de2:	31 db                	xor    ebx,ebx
c0007de4:	e8 b0 9e ff ff       	call   c0001c99 <st_word>
c0007de9:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007def:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007df4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007df7:	e8 9d 9e ff ff       	call   c0001c99 <st_word>
c0007dfc:	31 c9                	xor    ecx,ecx
c0007dfe:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007e01:	83 f8 01             	cmp    eax,0x1
c0007e04:	76 13                	jbe    c0007e19 <f_mkfs+0x8ac>
c0007e06:	83 f9 70             	cmp    ecx,0x70
c0007e09:	74 0e                	je     c0007e19 <f_mkfs+0x8ac>
c0007e0b:	89 da                	mov    edx,ebx
c0007e0d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007e12:	e8 0b a3 ff ff       	call   c0002122 <xsum32>
c0007e17:	89 c3                	mov    ebx,eax
c0007e19:	41                   	inc    ecx
c0007e1a:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e20:	75 dc                	jne    c0007dfe <f_mkfs+0x891>
c0007e22:	89 f0                	mov    eax,esi
c0007e24:	89 fa                	mov    edx,edi
c0007e26:	83 c0 01             	add    eax,0x1
c0007e29:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e2d:	83 d2 00             	adc    edx,0x0
c0007e30:	83 ec 0c             	sub    esp,0xc
c0007e33:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007e37:	6a 01                	push   0x1
c0007e39:	57                   	push   edi
c0007e3a:	56                   	push   esi
c0007e3b:	55                   	push   ebp
c0007e3c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e40:	e8 ad 9d ff ff       	call   c0001bf2 <disk_write>
c0007e45:	83 c4 20             	add    esp,0x20
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	0f 85 ce 07 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	b9 00 02 00 00       	mov    ecx,0x200
c0007e57:	89 e8                	mov    eax,ebp
c0007e59:	e8 5d 9e ff ff       	call   c0001cbb <mem_set>
c0007e5e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007e63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e66:	e8 2e 9e ff ff       	call   c0001c99 <st_word>
c0007e6b:	89 f0                	mov    eax,esi
c0007e6d:	89 fa                	mov    edx,edi
c0007e6f:	83 c0 09             	add    eax,0x9
c0007e72:	83 d2 00             	adc    edx,0x0
c0007e75:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e78:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007e7c:	31 c9                	xor    ecx,ecx
c0007e7e:	41                   	inc    ecx
c0007e7f:	89 da                	mov    edx,ebx
c0007e81:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e86:	e8 97 a2 ff ff       	call   c0002122 <xsum32>
c0007e8b:	89 c3                	mov    ebx,eax
c0007e8d:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e93:	75 e9                	jne    c0007e7e <f_mkfs+0x911>
c0007e95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e99:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ea4:	83 d2 00             	adc    edx,0x0
c0007ea7:	83 ec 0c             	sub    esp,0xc
c0007eaa:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007eae:	6a 01                	push   0x1
c0007eb0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007eb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007eb8:	55                   	push   ebp
c0007eb9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ebd:	e8 30 9d ff ff       	call   c0001bf2 <disk_write>
c0007ec2:	83 c4 20             	add    esp,0x20
c0007ec5:	85 c0                	test   eax,eax
c0007ec7:	0f 85 51 07 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007ecd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ed1:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ed5:	75 09                	jne    c0007ee0 <f_mkfs+0x973>
c0007ed7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007eda:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ede:	74 12                	je     c0007ef2 <f_mkfs+0x985>
c0007ee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ee4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ee8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007eec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ef0:	eb 8a                	jmp    c0007e7c <f_mkfs+0x90f>
c0007ef2:	31 d2                	xor    edx,edx
c0007ef4:	b9 00 02 00 00       	mov    ecx,0x200
c0007ef9:	89 e8                	mov    eax,ebp
c0007efb:	e8 bb 9d ff ff       	call   c0001cbb <mem_set>
c0007f00:	83 c6 0b             	add    esi,0xb
c0007f03:	83 d7 00             	adc    edi,0x0
c0007f06:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007f0a:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007f0e:	31 c9                	xor    ecx,ecx
c0007f10:	41                   	inc    ecx
c0007f11:	89 da                	mov    edx,ebx
c0007f13:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007f18:	e8 05 a2 ff ff       	call   c0002122 <xsum32>
c0007f1d:	89 c3                	mov    ebx,eax
c0007f1f:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007f25:	75 e9                	jne    c0007f10 <f_mkfs+0x9a3>
c0007f27:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007f2a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007f2e:	83 c6 01             	add    esi,0x1
c0007f31:	83 d7 00             	adc    edi,0x0
c0007f34:	83 ec 0c             	sub    esp,0xc
c0007f37:	6a 01                	push   0x1
c0007f39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007f3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007f41:	55                   	push   ebp
c0007f42:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f46:	e8 a7 9c ff ff       	call   c0001bf2 <disk_write>
c0007f4b:	83 c4 20             	add    esp,0x20
c0007f4e:	85 c0                	test   eax,eax
c0007f50:	0f 85 c8 06 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007f56:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007f5a:	75 06                	jne    c0007f62 <f_mkfs+0x9f5>
c0007f5c:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007f60:	74 09                	je     c0007f6b <f_mkfs+0x9fe>
c0007f62:	89 34 24             	mov    DWORD PTR [esp],esi
c0007f65:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007f69:	eb a3                	jmp    c0007f0e <f_mkfs+0x9a1>
c0007f6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007f6f:	89 da                	mov    edx,ebx
c0007f71:	01 e8                	add    eax,ebp
c0007f73:	e8 25 9d ff ff       	call   c0001c9d <st_dword>
c0007f78:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007f7d:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007f85:	75 e4                	jne    c0007f6b <f_mkfs+0x9fe>
c0007f87:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007f8a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007f8e:	83 c6 02             	add    esi,0x2
c0007f91:	83 d7 00             	adc    edi,0x0
c0007f94:	83 ec 0c             	sub    esp,0xc
c0007f97:	6a 01                	push   0x1
c0007f99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007f9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007fa1:	55                   	push   ebp
c0007fa2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fa6:	e8 47 9c ff ff       	call   c0001bf2 <disk_write>
c0007fab:	83 c4 20             	add    esp,0x20
c0007fae:	85 c0                	test   eax,eax
c0007fb0:	0f 85 68 06 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007fb6:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007fbb:	74 0d                	je     c0007fca <f_mkfs+0xa5d>
c0007fbd:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007fc5:	e9 43 fd ff ff       	jmp    c0007d0d <f_mkfs+0x7a0>
c0007fca:	b1 07                	mov    cl,0x7
c0007fcc:	e9 e3 05 00 00       	jmp    c00085b4 <f_mkfs+0x1047>
c0007fd1:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007fd6:	0f 85 4f 02 00 00    	jne    c000822b <f_mkfs+0xcbe>
c0007fdc:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007fe1:	0f 86 22 02 00 00    	jbe    c0008209 <f_mkfs+0xc9c>
c0007fe7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fec:	0f 85 81 06 00 00    	jne    c0008673 <f_mkfs+0x1106>
c0007ff2:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ff5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ff9:	83 f8 40             	cmp    eax,0x40
c0007ffc:	0f 87 51 06 00 00    	ja     c0008653 <f_mkfs+0x10e6>
c0008002:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008006:	85 ff                	test   edi,edi
c0008008:	75 1c                	jne    c0008026 <f_mkfs+0xab9>
c000800a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000800d:	ba 80 98 02 c0       	mov    edx,0xc0029880
c0008012:	c1 e9 0c             	shr    ecx,0xc
c0008015:	bf 01 00 00 00       	mov    edi,0x1
c000801a:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000801d:	66 85 c0             	test   ax,ax
c0008020:	0f 85 95 01 00 00    	jne    c00081bb <f_mkfs+0xc4e>
c0008026:	31 d2                	xor    edx,edx
c0008028:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000802b:	f7 f7                	div    edi
c000802d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008032:	0f 86 95 01 00 00    	jbe    c00081cd <f_mkfs+0xc60>
c0008038:	83 c0 02             	add    eax,0x2
c000803b:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0008040:	01 c0                	add    eax,eax
c0008042:	05 ff 01 00 00       	add    eax,0x1ff
c0008047:	be 01 00 00 00       	mov    esi,0x1
c000804c:	c1 e8 09             	shr    eax,0x9
c000804f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0008053:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008057:	c1 e0 05             	shl    eax,0x5
c000805a:	c1 e8 09             	shr    eax,0x9
c000805d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0008061:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0008066:	31 d2                	xor    edx,edx
c0008068:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000806c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0008070:	89 f0                	mov    eax,esi
c0008072:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0008076:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c000807a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000807e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0008082:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008086:	31 d2                	xor    edx,edx
c0008088:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c000808d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0008091:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0008095:	31 db                	xor    ebx,ebx
c0008097:	01 c8                	add    eax,ecx
c0008099:	11 da                	adc    edx,ebx
c000809b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000809f:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c00080a3:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c00080a7:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00080ab:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c00080af:	f7 da                	neg    edx
c00080b1:	21 d1                	and    ecx,edx
c00080b3:	29 d9                	sub    ecx,ebx
c00080b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080ba:	0f 85 20 01 00 00    	jne    c00081e0 <f_mkfs+0xc73>
c00080c0:	31 db                	xor    ebx,ebx
c00080c2:	01 ce                	add    esi,ecx
c00080c4:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c00080c8:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c00080cc:	31 d2                	xor    edx,edx
c00080ce:	89 f8                	mov    eax,edi
c00080d0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00080d4:	c1 e0 04             	shl    eax,0x4
c00080d7:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00080db:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00080df:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c00080e3:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c00080e7:	39 04 24             	cmp    DWORD PTR [esp],eax
c00080ea:	19 d3                	sbb    ebx,edx
c00080ec:	0f 82 40 01 00 00    	jb     c0008232 <f_mkfs+0xcc5>
c00080f2:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00080f5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080f9:	89 c8                	mov    eax,ecx
c00080fb:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008100:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008104:	29 f0                	sub    eax,esi
c0008106:	29 d0                	sub    eax,edx
c0008108:	31 d2                	xor    edx,edx
c000810a:	f7 f7                	div    edi
c000810c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008111:	89 c3                	mov    ebx,eax
c0008113:	0f 85 b8 fe ff ff    	jne    c0007fd1 <f_mkfs+0xa64>
c0008119:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000811e:	0f 87 1d 01 00 00    	ja     c0008241 <f_mkfs+0xcd4>
c0008124:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008129:	0f 85 03 01 00 00    	jne    c0008232 <f_mkfs+0xcc5>
c000812f:	83 ff 01             	cmp    edi,0x1
c0008132:	0f 86 fa 00 00 00    	jbe    c0008232 <f_mkfs+0xcc5>
c0008138:	d1 ef                	shr    edi,1
c000813a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000813e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008142:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008145:	85 db                	test   ebx,ebx
c0008147:	75 2d                	jne    c0008176 <f_mkfs+0xc09>
c0008149:	89 cb                	mov    ebx,ecx
c000814b:	ba 90 98 02 c0       	mov    edx,0xc0029890
c0008150:	c1 eb 11             	shr    ebx,0x11
c0008153:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000815b:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000815e:	66 85 c0             	test   ax,ax
c0008161:	74 11                	je     c0008174 <f_mkfs+0xc07>
c0008163:	83 c2 02             	add    edx,0x2
c0008166:	39 d8                	cmp    eax,ebx
c0008168:	77 0a                	ja     c0008174 <f_mkfs+0xc07>
c000816a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000816e:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0008172:	eb e7                	jmp    c000815b <f_mkfs+0xbee>
c0008174:	31 db                	xor    ebx,ebx
c0008176:	31 d2                	xor    edx,edx
c0008178:	89 c8                	mov    eax,ecx
c000817a:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c000817e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0008185:	2d f6 ff 00 00       	sub    eax,0xfff6
c000818a:	c1 ea 09             	shr    edx,0x9
c000818d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0008192:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0008196:	0f 87 96 00 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c000819c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00081a0:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00081a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00081ac:	be 20 00 00 00       	mov    esi,0x20
c00081b1:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00081b6:	e9 a6 fe ff ff       	jmp    c0008061 <f_mkfs+0xaf4>
c00081bb:	83 c2 02             	add    edx,0x2
c00081be:	39 c8                	cmp    eax,ecx
c00081c0:	0f 87 60 fe ff ff    	ja     c0008026 <f_mkfs+0xab9>
c00081c6:	01 ff                	add    edi,edi
c00081c8:	e9 4d fe ff ff       	jmp    c000801a <f_mkfs+0xaad>
c00081cd:	8d 04 40             	lea    eax,[eax+eax*2]
c00081d0:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c00081d5:	40                   	inc    eax
c00081d6:	d1 e8                	shr    eax,1
c00081d8:	83 c0 03             	add    eax,0x3
c00081db:	e9 62 fe ff ff       	jmp    c0008042 <f_mkfs+0xad5>
c00081e0:	31 d2                	xor    edx,edx
c00081e2:	89 c8                	mov    eax,ecx
c00081e4:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c00081e8:	85 d2                	test   edx,edx
c00081ea:	74 0c                	je     c00081f8 <f_mkfs+0xc8b>
c00081ec:	49                   	dec    ecx
c00081ed:	46                   	inc    esi
c00081ee:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00081f3:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c00081f8:	89 c8                	mov    eax,ecx
c00081fa:	31 d2                	xor    edx,edx
c00081fc:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008200:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008204:	e9 c3 fe ff ff       	jmp    c00080cc <f_mkfs+0xb5f>
c0008209:	3d f5 0f 00 00       	cmp    eax,0xff5
c000820e:	77 31                	ja     c0008241 <f_mkfs+0xcd4>
c0008210:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008215:	75 1b                	jne    c0008232 <f_mkfs+0xcc5>
c0008217:	8d 04 3f             	lea    eax,[edi+edi*1]
c000821a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000821e:	3d 80 00 00 00       	cmp    eax,0x80
c0008223:	0f 86 d9 fd ff ff    	jbe    c0008002 <f_mkfs+0xa95>
c0008229:	eb 07                	jmp    c0008232 <f_mkfs+0xcc5>
c000822b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008230:	76 0a                	jbe    c000823c <f_mkfs+0xccf>
c0008232:	bb 0e 00 00 00       	mov    ebx,0xe
c0008237:	e9 ff 03 00 00       	jmp    c000863b <f_mkfs+0x10ce>
c000823c:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008241:	31 d2                	xor    edx,edx
c0008243:	b9 00 02 00 00       	mov    ecx,0x200
c0008248:	89 e8                	mov    eax,ebp
c000824a:	e8 6c 9a ff ff       	call   c0001cbb <mem_set>
c000824f:	b9 0b 00 00 00       	mov    ecx,0xb
c0008254:	ba a2 99 02 c0       	mov    edx,0xc00299a2
c0008259:	89 e8                	mov    eax,ebp
c000825b:	e8 46 9a ff ff       	call   c0001ca6 <mem_cpy>
c0008260:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008263:	ba 00 02 00 00       	mov    edx,0x200
c0008268:	e8 2c 9a ff ff       	call   c0001c99 <st_word>
c000826d:	89 f8                	mov    eax,edi
c000826f:	0f b7 d6             	movzx  edx,si
c0008272:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008275:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008278:	e8 1c 9a ff ff       	call   c0001c99 <st_word>
c000827d:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008281:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008286:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008289:	75 08                	jne    c0008293 <f_mkfs+0xd26>
c000828b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008293:	8d 45 11             	lea    eax,[ebp+0x11]
c0008296:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000829a:	e8 fa 99 ff ff       	call   c0001c99 <st_word>
c000829f:	b8 ff ff 00 00       	mov    eax,0xffff
c00082a4:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00082a8:	39 d0                	cmp    eax,edx
c00082aa:	b8 00 00 00 00       	mov    eax,0x0
c00082af:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00082b3:	72 0a                	jb     c00082bf <f_mkfs+0xd52>
c00082b5:	8d 45 13             	lea    eax,[ebp+0x13]
c00082b8:	e8 dc 99 ff ff       	call   c0001c99 <st_word>
c00082bd:	eb 08                	jmp    c00082c7 <f_mkfs+0xd5a>
c00082bf:	8d 45 20             	lea    eax,[ebp+0x20]
c00082c2:	e8 d6 99 ff ff       	call   c0001c9d <st_dword>
c00082c7:	8d 45 18             	lea    eax,[ebp+0x18]
c00082ca:	ba 3f 00 00 00       	mov    edx,0x3f
c00082cf:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00082d3:	e8 c1 99 ff ff       	call   c0001c99 <st_word>
c00082d8:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00082db:	ba ff 00 00 00       	mov    edx,0xff
c00082e0:	e8 b4 99 ff ff       	call   c0001c99 <st_word>
c00082e5:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00082e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00082ec:	e8 ac 99 ff ff       	call   c0001c9d <st_dword>
c00082f1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f6:	75 57                	jne    c000834f <f_mkfs+0xde2>
c00082f8:	8d 45 43             	lea    eax,[ebp+0x43]
c00082fb:	ba 00 00 21 50       	mov    edx,0x50210000
c0008300:	e8 98 99 ff ff       	call   c0001c9d <st_dword>
c0008305:	8d 45 24             	lea    eax,[ebp+0x24]
c0008308:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000830c:	e8 8c 99 ff ff       	call   c0001c9d <st_dword>
c0008311:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008314:	ba 02 00 00 00       	mov    edx,0x2
c0008319:	e8 7f 99 ff ff       	call   c0001c9d <st_dword>
c000831e:	8d 45 30             	lea    eax,[ebp+0x30]
c0008321:	ba 01 00 00 00       	mov    edx,0x1
c0008326:	e8 6e 99 ff ff       	call   c0001c99 <st_word>
c000832b:	8d 45 32             	lea    eax,[ebp+0x32]
c000832e:	ba 06 00 00 00       	mov    edx,0x6
c0008333:	e8 61 99 ff ff       	call   c0001c99 <st_word>
c0008338:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c000833c:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008340:	8d 45 47             	lea    eax,[ebp+0x47]
c0008343:	b9 13 00 00 00       	mov    ecx,0x13
c0008348:	ba ae 99 02 c0       	mov    edx,0xc00299ae
c000834d:	eb 2f                	jmp    c000837e <f_mkfs+0xe11>
c000834f:	8d 45 27             	lea    eax,[ebp+0x27]
c0008352:	ba 00 00 21 50       	mov    edx,0x50210000
c0008357:	e8 41 99 ff ff       	call   c0001c9d <st_dword>
c000835c:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008361:	8d 45 16             	lea    eax,[ebp+0x16]
c0008364:	e8 30 99 ff ff       	call   c0001c99 <st_word>
c0008369:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c000836d:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008371:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008374:	b9 13 00 00 00       	mov    ecx,0x13
c0008379:	ba c2 99 02 c0       	mov    edx,0xc00299c2
c000837e:	e8 23 99 ff ff       	call   c0001ca6 <mem_cpy>
c0008383:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008389:	ba 55 aa 00 00       	mov    edx,0xaa55
c000838e:	89 f0                	mov    eax,esi
c0008390:	e8 04 99 ff ff       	call   c0001c99 <st_word>
c0008395:	83 ec 0c             	sub    esp,0xc
c0008398:	6a 01                	push   0x1
c000839a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000839e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00083a2:	55                   	push   ebp
c00083a3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a7:	e8 46 98 ff ff       	call   c0001bf2 <disk_write>
c00083ac:	83 c4 20             	add    esp,0x20
c00083af:	85 c0                	test   eax,eax
c00083b1:	0f 85 67 02 00 00    	jne    c000861e <f_mkfs+0x10b1>
c00083b7:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083bc:	0f 85 b7 00 00 00    	jne    c0008479 <f_mkfs+0xf0c>
c00083c2:	83 ec 0c             	sub    esp,0xc
c00083c5:	6a 01                	push   0x1
c00083c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083cb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00083cf:	83 c0 06             	add    eax,0x6
c00083d2:	83 d2 00             	adc    edx,0x0
c00083d5:	52                   	push   edx
c00083d6:	50                   	push   eax
c00083d7:	55                   	push   ebp
c00083d8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083dc:	e8 11 98 ff ff       	call   c0001bf2 <disk_write>
c00083e1:	83 c4 20             	add    esp,0x20
c00083e4:	b9 00 02 00 00       	mov    ecx,0x200
c00083e9:	31 d2                	xor    edx,edx
c00083eb:	89 e8                	mov    eax,ebp
c00083ed:	e8 c9 98 ff ff       	call   c0001cbb <mem_set>
c00083f2:	ba 52 52 61 41       	mov    edx,0x41615252
c00083f7:	89 e8                	mov    eax,ebp
c00083f9:	e8 9f 98 ff ff       	call   c0001c9d <st_dword>
c00083fe:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008404:	ba 72 72 41 61       	mov    edx,0x61417272
c0008409:	e8 8f 98 ff ff       	call   c0001c9d <st_dword>
c000840e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008411:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008417:	e8 81 98 ff ff       	call   c0001c9d <st_dword>
c000841c:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008422:	ba 02 00 00 00       	mov    edx,0x2
c0008427:	e8 71 98 ff ff       	call   c0001c9d <st_dword>
c000842c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008431:	89 f0                	mov    eax,esi
c0008433:	e8 61 98 ff ff       	call   c0001c99 <st_word>
c0008438:	83 ec 0c             	sub    esp,0xc
c000843b:	6a 01                	push   0x1
c000843d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008441:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008445:	83 c0 07             	add    eax,0x7
c0008448:	83 d2 00             	adc    edx,0x0
c000844b:	52                   	push   edx
c000844c:	50                   	push   eax
c000844d:	55                   	push   ebp
c000844e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008452:	e8 9b 97 ff ff       	call   c0001bf2 <disk_write>
c0008457:	83 c4 14             	add    esp,0x14
c000845a:	6a 01                	push   0x1
c000845c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008460:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008464:	83 c0 01             	add    eax,0x1
c0008467:	83 d2 00             	adc    edx,0x0
c000846a:	52                   	push   edx
c000846b:	50                   	push   eax
c000846c:	55                   	push   ebp
c000846d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008471:	e8 7c 97 ff ff       	call   c0001bf2 <disk_write>
c0008476:	83 c4 20             	add    esp,0x20
c0008479:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008480:	31 d2                	xor    edx,edx
c0008482:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008488:	31 db                	xor    ebx,ebx
c000848a:	89 e8                	mov    eax,ebp
c000848c:	e8 2a 98 ff ff       	call   c0001cbb <mem_set>
c0008491:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008496:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000849d:	0f 94 c3             	sete   bl
c00084a0:	4b                   	dec    ebx
c00084a1:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00084a7:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00084ad:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084b2:	75 21                	jne    c00084d5 <f_mkfs+0xf68>
c00084b4:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00084b9:	89 e8                	mov    eax,ebp
c00084bb:	e8 dd 97 ff ff       	call   c0001c9d <st_dword>
c00084c0:	8d 45 04             	lea    eax,[ebp+0x4]
c00084c3:	83 ca ff             	or     edx,0xffffffff
c00084c6:	e8 d2 97 ff ff       	call   c0001c9d <st_dword>
c00084cb:	8d 45 08             	lea    eax,[ebp+0x8]
c00084ce:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00084d3:	eb 04                	jmp    c00084d9 <f_mkfs+0xf6c>
c00084d5:	89 da                	mov    edx,ebx
c00084d7:	89 e8                	mov    eax,ebp
c00084d9:	e8 bf 97 ff ff       	call   c0001c9d <st_dword>
c00084de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00084e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00084e6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00084ea:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00084ee:	39 ce                	cmp    esi,ecx
c00084f0:	76 02                	jbe    c00084f4 <f_mkfs+0xf87>
c00084f2:	89 ce                	mov    esi,ecx
c00084f4:	83 ec 0c             	sub    esp,0xc
c00084f7:	56                   	push   esi
c00084f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00084fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008500:	55                   	push   ebp
c0008501:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008505:	e8 e8 96 ff ff       	call   c0001bf2 <disk_write>
c000850a:	83 c4 20             	add    esp,0x20
c000850d:	85 c0                	test   eax,eax
c000850f:	0f 85 09 01 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0008515:	31 d2                	xor    edx,edx
c0008517:	b9 00 02 00 00       	mov    ecx,0x200
c000851c:	89 e8                	mov    eax,ebp
c000851e:	e8 98 97 ff ff       	call   c0001cbb <mem_set>
c0008523:	31 d2                	xor    edx,edx
c0008525:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008529:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000852d:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008531:	75 b3                	jne    c00084e6 <f_mkfs+0xf79>
c0008533:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008536:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000853d:	40                   	inc    eax
c000853e:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008542:	0f 87 65 ff ff ff    	ja     c00084ad <f_mkfs+0xf40>
c0008548:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000854d:	74 04                	je     c0008553 <f_mkfs+0xfe6>
c000854f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008553:	89 fb                	mov    ebx,edi
c0008555:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008559:	76 04                	jbe    c000855f <f_mkfs+0xff2>
c000855b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000855f:	83 ec 0c             	sub    esp,0xc
c0008562:	53                   	push   ebx
c0008563:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008567:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000856b:	55                   	push   ebp
c000856c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008570:	e8 7d 96 ff ff       	call   c0001bf2 <disk_write>
c0008575:	83 c4 20             	add    esp,0x20
c0008578:	85 c0                	test   eax,eax
c000857a:	0f 85 9e 00 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0008580:	31 d2                	xor    edx,edx
c0008582:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008586:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000858a:	29 df                	sub    edi,ebx
c000858c:	75 c5                	jne    c0008553 <f_mkfs+0xfe6>
c000858e:	b1 0c                	mov    cl,0xc
c0008590:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008595:	74 1d                	je     c00085b4 <f_mkfs+0x1047>
c0008597:	b8 ff ff 00 00       	mov    eax,0xffff
c000859c:	b1 06                	mov    cl,0x6
c000859e:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00085a2:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00085a6:	72 0c                	jb     c00085b4 <f_mkfs+0x1047>
c00085a8:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00085ad:	0f 94 c1             	sete   cl
c00085b0:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00085b4:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00085b9:	75 4c                	jne    c0008607 <f_mkfs+0x109a>
c00085bb:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00085bf:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00085c3:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00085ca:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00085d1:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00085dc:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00085e7:	0f b6 c9             	movzx  ecx,cl
c00085ea:	83 ec 0c             	sub    esp,0xc
c00085ed:	55                   	push   ebp
c00085ee:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00085f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085f9:	e8 f9 bf ff ff       	call   c00045f7 <create_partition>
c00085fe:	83 c4 10             	add    esp,0x10
c0008601:	89 c3                	mov    ebx,eax
c0008603:	85 c0                	test   eax,eax
c0008605:	75 34                	jne    c000863b <f_mkfs+0x10ce>
c0008607:	31 db                	xor    ebx,ebx
c0008609:	50                   	push   eax
c000860a:	6a 00                	push   0x0
c000860c:	6a 00                	push   0x0
c000860e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008612:	e8 f1 95 ff ff       	call   c0001c08 <disk_ioctl>
c0008617:	83 c4 10             	add    esp,0x10
c000861a:	85 c0                	test   eax,eax
c000861c:	74 1d                	je     c000863b <f_mkfs+0x10ce>
c000861e:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008626:	75 0c                	jne    c0008634 <f_mkfs+0x10c7>
c0008628:	83 ec 0c             	sub    esp,0xc
c000862b:	55                   	push   ebp
c000862c:	e8 75 00 00 00       	call   c00086a6 <ff_memfree>
c0008631:	83 c4 10             	add    esp,0x10
c0008634:	bb 01 00 00 00       	mov    ebx,0x1
c0008639:	eb 48                	jmp    c0008683 <f_mkfs+0x1116>
c000863b:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008643:	75 3e                	jne    c0008683 <f_mkfs+0x1116>
c0008645:	83 ec 0c             	sub    esp,0xc
c0008648:	55                   	push   ebp
c0008649:	e8 58 00 00 00       	call   c00086a6 <ff_memfree>
c000864e:	83 c4 10             	add    esp,0x10
c0008651:	eb 30                	jmp    c0008683 <f_mkfs+0x1116>
c0008653:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008658:	0f 85 eb fa ff ff    	jne    c0008149 <f_mkfs+0xbdc>
c000865e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008662:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008668:	0f 86 b8 f9 ff ff    	jbe    c0008026 <f_mkfs+0xab9>
c000866e:	e9 bf fb ff ff       	jmp    c0008232 <f_mkfs+0xcc5>
c0008673:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008678:	0f 85 c0 fa ff ff    	jne    c000813e <f_mkfs+0xbd1>
c000867e:	e9 af fb ff ff       	jmp    c0008232 <f_mkfs+0xcc5>
c0008683:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008689:	89 d8                	mov    eax,ebx
c000868b:	5b                   	pop    ebx
c000868c:	5e                   	pop    esi
c000868d:	5f                   	pop    edi
c000868e:	5d                   	pop    ebp
c000868f:	c3                   	ret    

c0008690 <ff_memalloc>:
c0008690:	83 ec 0c             	sub    esp,0xc
c0008693:	83 ec 0c             	sub    esp,0xc
c0008696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000869a:	e8 44 73 00 00       	call   c000f9e3 <malloc>
c000869f:	83 c4 10             	add    esp,0x10
c00086a2:	83 c4 0c             	add    esp,0xc
c00086a5:	c3                   	ret    

c00086a6 <ff_memfree>:
c00086a6:	83 ec 0c             	sub    esp,0xc
c00086a9:	83 ec 0c             	sub    esp,0xc
c00086ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00086b0:	e8 3e 73 00 00       	call   c000f9f3 <free>
c00086b5:	83 c4 10             	add    esp,0x10
c00086b8:	90                   	nop
c00086b9:	83 c4 0c             	add    esp,0xc
c00086bc:	c3                   	ret    

c00086bd <ff_uni2oem>:
c00086bd:	83 ec 14             	sub    esp,0x14
c00086c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00086c4:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086c8:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00086cf:	c7 44 24 0c e0 9c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029ce0
c00086d7:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00086dc:	77 0b                	ja     c00086e9 <ff_uni2oem+0x2c>
c00086de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00086e2:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00086e7:	eb 5b                	jmp    c0008744 <ff_uni2oem+0x87>
c00086e9:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00086f1:	77 51                	ja     c0008744 <ff_uni2oem+0x87>
c00086f3:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086f9:	75 49                	jne    c0008744 <ff_uni2oem+0x87>
c00086fb:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008702:	eb 0b                	jmp    c000870f <ff_uni2oem+0x52>
c0008704:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008709:	40                   	inc    eax
c000870a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000870f:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008715:	77 1b                	ja     c0008732 <ff_uni2oem+0x75>
c0008717:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000871c:	01 c0                	add    eax,eax
c000871e:	89 c2                	mov    edx,eax
c0008720:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008724:	01 d0                	add    eax,edx
c0008726:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008729:	0f b7 c0             	movzx  eax,ax
c000872c:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008730:	75 d2                	jne    c0008704 <ff_uni2oem+0x47>
c0008732:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008737:	83 e8 80             	sub    eax,0xffffff80
c000873a:	25 ff 00 00 00       	and    eax,0xff
c000873f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008744:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008749:	83 c4 14             	add    esp,0x14
c000874c:	c3                   	ret    

c000874d <ff_oem2uni>:
c000874d:	83 ec 18             	sub    esp,0x18
c0008750:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008754:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008758:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000875d:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008761:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008768:	c7 44 24 10 e0 9c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029ce0
c0008770:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008776:	77 0b                	ja     c0008783 <ff_oem2uni+0x36>
c0008778:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000877c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008781:	eb 2d                	jmp    c00087b0 <ff_oem2uni+0x63>
c0008783:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008789:	75 25                	jne    c00087b0 <ff_oem2uni+0x63>
c000878b:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008792:	77 1c                	ja     c00087b0 <ff_oem2uni+0x63>
c0008794:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008799:	05 80 ff ff 7f       	add    eax,0x7fffff80
c000879e:	01 c0                	add    eax,eax
c00087a0:	89 c2                	mov    edx,eax
c00087a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00087a6:	01 d0                	add    eax,edx
c00087a8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087ab:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00087b0:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00087b5:	83 c4 18             	add    esp,0x18
c00087b8:	c3                   	ret    

c00087b9 <ff_wtoupper>:
c00087b9:	83 ec 10             	sub    esp,0x10
c00087bc:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00087c4:	0f 87 3e 01 00 00    	ja     c0008908 <ff_wtoupper+0x14f>
c00087ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087ce:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087d3:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00087da:	77 07                	ja     c00087e3 <ff_wtoupper+0x2a>
c00087dc:	b8 e0 9a 02 c0       	mov    eax,0xc0029ae0
c00087e1:	eb 05                	jmp    c00087e8 <ff_wtoupper+0x2f>
c00087e3:	b8 20 9a 02 c0       	mov    eax,0xc0029a20
c00087e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087f0:	8d 50 02             	lea    edx,[eax+0x2]
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087fa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00087ff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008805:	0f 84 f4 00 00 00    	je     c00088ff <ff_wtoupper+0x146>
c000880b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008810:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008815:	0f 82 e4 00 00 00    	jb     c00088ff <ff_wtoupper+0x146>
c000881b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000881f:	8d 50 02             	lea    edx,[eax+0x2]
c0008822:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008826:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008829:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000882e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008833:	66 c1 e8 08          	shr    ax,0x8
c0008837:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000883c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008843:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008848:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000884d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008852:	01 ca                	add    edx,ecx
c0008854:	39 d0                	cmp    eax,edx
c0008856:	0f 8d 86 00 00 00    	jge    c00088e2 <ff_wtoupper+0x129>
c000885c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008861:	83 f8 08             	cmp    eax,0x8
c0008864:	0f 87 94 00 00 00    	ja     c00088fe <ff_wtoupper+0x145>
c000886a:	8b 04 85 e0 99 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6620]
c0008871:	ff e0                	jmp    eax
c0008873:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008878:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000887d:	29 c2                	sub    edx,eax
c000887f:	89 d0                	mov    eax,edx
c0008881:	01 c0                	add    eax,eax
c0008883:	89 c2                	mov    edx,eax
c0008885:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008889:	01 d0                	add    eax,edx
c000888b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000888e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008893:	eb 4b                	jmp    c00088e0 <ff_wtoupper+0x127>
c0008895:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000889a:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000889e:	83 e0 01             	and    eax,0x1
c00088a1:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00088a6:	eb 38                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088a8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00088ae:	eb 30                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088b0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00088b6:	eb 28                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088b8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00088be:	eb 20                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088c0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00088c6:	eb 18                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088c8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00088ce:	eb 10                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088d0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00088d6:	eb 08                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088d8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00088df:	90                   	nop
c00088e0:	eb 1c                	jmp    c00088fe <ff_wtoupper+0x145>
c00088e2:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00088e8:	0f 85 fe fe ff ff    	jne    c00087ec <ff_wtoupper+0x33>
c00088ee:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00088f3:	01 c0                	add    eax,eax
c00088f5:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00088f9:	e9 ee fe ff ff       	jmp    c00087ec <ff_wtoupper+0x33>
c00088fe:	90                   	nop
c00088ff:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008904:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008908:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000890c:	83 c4 10             	add    esp,0x10
c000890f:	c3                   	ret    

c0008910 <psrc_set_converter>:
c0008910:	56                   	push   esi
c0008911:	89 d6                	mov    esi,edx
c0008913:	53                   	push   ebx
c0008914:	89 c3                	mov    ebx,eax
c0008916:	83 ec 0c             	sub    esp,0xc
c0008919:	52                   	push   edx
c000891a:	50                   	push   eax
c000891b:	e8 6f 55 00 00       	call   c000de8f <sinc_set_converter>
c0008920:	83 c4 10             	add    esp,0x10
c0008923:	85 c0                	test   eax,eax
c0008925:	74 25                	je     c000894c <psrc_set_converter+0x3c>
c0008927:	50                   	push   eax
c0008928:	50                   	push   eax
c0008929:	56                   	push   esi
c000892a:	53                   	push   ebx
c000892b:	e8 17 5d 00 00       	call   c000e647 <zoh_set_converter>
c0008930:	83 c4 10             	add    esp,0x10
c0008933:	85 c0                	test   eax,eax
c0008935:	74 15                	je     c000894c <psrc_set_converter+0x3c>
c0008937:	51                   	push   ecx
c0008938:	51                   	push   ecx
c0008939:	56                   	push   esi
c000893a:	53                   	push   ebx
c000893b:	e8 0f 11 00 00       	call   c0009a4f <linear_set_converter>
c0008940:	83 c4 10             	add    esp,0x10
c0008943:	ba 0a 00 00 00       	mov    edx,0xa
c0008948:	85 c0                	test   eax,eax
c000894a:	75 02                	jne    c000894e <psrc_set_converter+0x3e>
c000894c:	31 d2                	xor    edx,edx
c000894e:	89 d0                	mov    eax,edx
c0008950:	5a                   	pop    edx
c0008951:	5b                   	pop    ebx
c0008952:	5e                   	pop    esi
c0008953:	c3                   	ret    

c0008954 <src_delete>:
c0008954:	53                   	push   ebx
c0008955:	83 ec 08             	sub    esp,0x8
c0008958:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000895c:	85 db                	test   ebx,ebx
c000895e:	74 29                	je     c0008989 <src_delete+0x35>
c0008960:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008963:	85 c0                	test   eax,eax
c0008965:	74 0c                	je     c0008973 <src_delete+0x1f>
c0008967:	83 ec 0c             	sub    esp,0xc
c000896a:	50                   	push   eax
c000896b:	e8 83 70 00 00       	call   c000f9f3 <free>
c0008970:	83 c4 10             	add    esp,0x10
c0008973:	50                   	push   eax
c0008974:	6a 3c                	push   0x3c
c0008976:	6a 00                	push   0x0
c0008978:	53                   	push   ebx
c0008979:	e8 d2 7d ff ff       	call   c0000750 <memset>
c000897e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008981:	e8 6d 70 00 00       	call   c000f9f3 <free>
c0008986:	83 c4 10             	add    esp,0x10
c0008989:	31 c0                	xor    eax,eax
c000898b:	83 c4 08             	add    esp,0x8
c000898e:	5b                   	pop    ebx
c000898f:	c3                   	ret    

c0008990 <src_process>:
c0008990:	55                   	push   ebp
c0008991:	57                   	push   edi
c0008992:	56                   	push   esi
c0008993:	53                   	push   ebx
c0008994:	83 ec 1c             	sub    esp,0x1c
c0008997:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000899b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000899f:	85 ed                	test   ebp,ebp
c00089a1:	0f 84 6f 01 00 00    	je     c0008b16 <src_process+0x186>
c00089a7:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00089ab:	0f 84 6c 01 00 00    	je     c0008b1d <src_process+0x18d>
c00089b1:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00089b5:	0f 84 62 01 00 00    	je     c0008b1d <src_process+0x18d>
c00089bb:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00089c2:	0f 85 5c 01 00 00    	jne    c0008b24 <src_process+0x194>
c00089c8:	85 db                	test   ebx,ebx
c00089ca:	0f 84 5b 01 00 00    	je     c0008b2b <src_process+0x19b>
c00089d0:	8b 33                	mov    esi,DWORD PTR [ebx]
c00089d2:	85 f6                	test   esi,esi
c00089d4:	0f 84 58 01 00 00    	je     c0008b32 <src_process+0x1a2>
c00089da:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00089dd:	85 ff                	test   edi,edi
c00089df:	0f 84 4d 01 00 00    	je     c0008b32 <src_process+0x1a2>
c00089e5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00089e8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00089eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00089f3:	68 00 00 70 3f       	push   0x3f700000
c00089f8:	6a 00                	push   0x0
c00089fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00089fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a02:	e8 e0 fe 01 00       	call   c00288e7 <__ltdf2>
c0008a07:	83 c4 10             	add    esp,0x10
c0008a0a:	85 c0                	test   eax,eax
c0008a0c:	0f 88 27 01 00 00    	js     c0008b39 <src_process+0x1a9>
c0008a12:	68 00 00 70 40       	push   0x40700000
c0008a17:	6a 00                	push   0x0
c0008a19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a21:	e8 a3 fe 01 00       	call   c00288c9 <__gtdf2>
c0008a26:	83 c4 10             	add    esp,0x10
c0008a29:	85 c0                	test   eax,eax
c0008a2b:	0f 8f 08 01 00 00    	jg     c0008b39 <src_process+0x1a9>
c0008a31:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008a35:	79 07                	jns    c0008a3e <src_process+0xae>
c0008a37:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008a3e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008a41:	85 c0                	test   eax,eax
c0008a43:	79 50                	jns    c0008a95 <src_process+0x105>
c0008a45:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008a4c:	39 fe                	cmp    esi,edi
c0008a4e:	72 37                	jb     c0008a87 <src_process+0xf7>
c0008a50:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008a57:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008a5e:	68 00 00 70 3f       	push   0x3f700000
c0008a63:	6a 00                	push   0x0
c0008a65:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008a68:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008a6b:	e8 77 fe 01 00       	call   c00288e7 <__ltdf2>
c0008a70:	83 c4 10             	add    esp,0x10
c0008a73:	85 c0                	test   eax,eax
c0008a75:	79 37                	jns    c0008aae <src_process+0x11e>
c0008a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008a7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008a7f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008a82:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008a85:	eb 27                	jmp    c0008aae <src_process+0x11e>
c0008a87:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008a8a:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008a8e:	8d 04 86             	lea    eax,[esi+eax*4]
c0008a91:	39 c7                	cmp    edi,eax
c0008a93:	eb 0d                	jmp    c0008aa2 <src_process+0x112>
c0008a95:	39 fe                	cmp    esi,edi
c0008a97:	72 ee                	jb     c0008a87 <src_process+0xf7>
c0008a99:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008a9d:	8d 04 87             	lea    eax,[edi+eax*4]
c0008aa0:	39 c6                	cmp    esi,eax
c0008aa2:	73 ac                	jae    c0008a50 <src_process+0xc0>
c0008aa4:	b8 10 00 00 00       	mov    eax,0x10
c0008aa9:	e9 90 00 00 00       	jmp    c0008b3e <src_process+0x1ae>
c0008aae:	83 ec 10             	sub    esp,0x10
c0008ab1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008ab4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008ab7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008aba:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008abd:	e8 2a f5 01 00       	call   c0027fec <__subdf3>
c0008ac2:	83 c4 18             	add    esp,0x18
c0008ac5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ac9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008acd:	52                   	push   edx
c0008ace:	50                   	push   eax
c0008acf:	e8 ac ff 01 00       	call   c0028a80 <fabs>
c0008ad4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ad8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008adc:	83 c4 10             	add    esp,0x10
c0008adf:	68 af 03 d2 3c       	push   0x3cd203af
c0008ae4:	68 16 56 e7 9e       	push   0x9ee75616
c0008ae9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008aed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008af1:	e8 f1 fd 01 00       	call   c00288e7 <__ltdf2>
c0008af6:	83 c4 10             	add    esp,0x10
c0008af9:	85 c0                	test   eax,eax
c0008afb:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008aff:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008b03:	79 05                	jns    c0008b0a <src_process+0x17a>
c0008b05:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c0008b08:	eb 03                	jmp    c0008b0d <src_process+0x17d>
c0008b0a:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008b0d:	83 c4 1c             	add    esp,0x1c
c0008b10:	5b                   	pop    ebx
c0008b11:	5e                   	pop    esi
c0008b12:	5f                   	pop    edi
c0008b13:	5d                   	pop    ebp
c0008b14:	ff e0                	jmp    eax
c0008b16:	b8 02 00 00 00       	mov    eax,0x2
c0008b1b:	eb 21                	jmp    c0008b3e <src_process+0x1ae>
c0008b1d:	b8 07 00 00 00       	mov    eax,0x7
c0008b22:	eb 1a                	jmp    c0008b3e <src_process+0x1ae>
c0008b24:	b8 12 00 00 00       	mov    eax,0x12
c0008b29:	eb 13                	jmp    c0008b3e <src_process+0x1ae>
c0008b2b:	b8 03 00 00 00       	mov    eax,0x3
c0008b30:	eb 0c                	jmp    c0008b3e <src_process+0x1ae>
c0008b32:	b8 04 00 00 00       	mov    eax,0x4
c0008b37:	eb 05                	jmp    c0008b3e <src_process+0x1ae>
c0008b39:	b8 06 00 00 00       	mov    eax,0x6
c0008b3e:	83 c4 1c             	add    esp,0x1c
c0008b41:	5b                   	pop    ebx
c0008b42:	5e                   	pop    esi
c0008b43:	5f                   	pop    edi
c0008b44:	5d                   	pop    ebp
c0008b45:	c3                   	ret    

c0008b46 <src_callback_read>:
c0008b46:	55                   	push   ebp
c0008b47:	57                   	push   edi
c0008b48:	56                   	push   esi
c0008b49:	53                   	push   ebx
c0008b4a:	83 ec 3c             	sub    esp,0x3c
c0008b4d:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008b51:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008b55:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008b59:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008b5d:	85 ed                	test   ebp,ebp
c0008b5f:	0f 8e 52 01 00 00    	jle    c0008cb7 <src_callback_read+0x171>
c0008b65:	85 db                	test   ebx,ebx
c0008b67:	0f 84 4a 01 00 00    	je     c0008cb7 <src_callback_read+0x171>
c0008b6d:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008b74:	74 0c                	je     c0008b82 <src_callback_read+0x3c>
c0008b76:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008b7d:	e9 35 01 00 00       	jmp    c0008cb7 <src_callback_read+0x171>
c0008b82:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008b86:	75 0c                	jne    c0008b94 <src_callback_read+0x4e>
c0008b88:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008b8f:	e9 23 01 00 00       	jmp    c0008cb7 <src_callback_read+0x171>
c0008b94:	51                   	push   ecx
c0008b95:	6a 24                	push   0x24
c0008b97:	6a 00                	push   0x0
c0008b99:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008b9d:	50                   	push   eax
c0008b9e:	e8 ad 7b ff ff       	call   c0000750 <memset>
c0008ba3:	83 c4 10             	add    esp,0x10
c0008ba6:	68 00 00 70 3f       	push   0x3f700000
c0008bab:	6a 00                	push   0x0
c0008bad:	57                   	push   edi
c0008bae:	56                   	push   esi
c0008baf:	e8 33 fd 01 00       	call   c00288e7 <__ltdf2>
c0008bb4:	83 c4 10             	add    esp,0x10
c0008bb7:	85 c0                	test   eax,eax
c0008bb9:	78 3e                	js     c0008bf9 <src_callback_read+0xb3>
c0008bbb:	68 00 00 70 40       	push   0x40700000
c0008bc0:	6a 00                	push   0x0
c0008bc2:	57                   	push   edi
c0008bc3:	56                   	push   esi
c0008bc4:	e8 00 fd 01 00       	call   c00288c9 <__gtdf2>
c0008bc9:	83 c4 10             	add    esp,0x10
c0008bcc:	85 c0                	test   eax,eax
c0008bce:	7f 29                	jg     c0008bf9 <src_callback_read+0xb3>
c0008bd0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008bd4:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0008bd8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bdc:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008be0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008be3:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0008be7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008beb:	31 f6                	xor    esi,esi
c0008bed:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0008bf0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008bf4:	e9 97 00 00 00       	jmp    c0008c90 <src_callback_read+0x14a>
c0008bf9:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008c00:	e9 b2 00 00 00       	jmp    c0008cb7 <src_callback_read+0x171>
c0008c05:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008c09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c0d:	52                   	push   edx
c0008c0e:	52                   	push   edx
c0008c0f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008c13:	50                   	push   eax
c0008c14:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008c17:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008c1a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008c1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008c22:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008c26:	83 c4 10             	add    esp,0x10
c0008c29:	85 c0                	test   eax,eax
c0008c2b:	75 08                	jne    c0008c35 <src_callback_read+0xef>
c0008c2d:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008c35:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008c3c:	50                   	push   eax
c0008c3d:	50                   	push   eax
c0008c3e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008c42:	50                   	push   eax
c0008c43:	53                   	push   ebx
c0008c44:	e8 47 fd ff ff       	call   c0008990 <src_process>
c0008c49:	83 c4 10             	add    esp,0x10
c0008c4c:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c53:	85 c0                	test   eax,eax
c0008c55:	75 49                	jne    c0008ca0 <src_callback_read+0x15a>
c0008c57:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008c5b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008c5e:	89 f9                	mov    ecx,edi
c0008c60:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008c64:	0f af ca             	imul   ecx,edx
c0008c67:	c1 e1 02             	shl    ecx,0x2
c0008c6a:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008c6e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008c72:	0f af d1             	imul   edx,ecx
c0008c75:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008c79:	c1 e2 02             	shl    edx,0x2
c0008c7c:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008c80:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008c83:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008c88:	74 12                	je     c0008c9c <src_callback_read+0x156>
c0008c8a:	39 d5                	cmp    ebp,edx
c0008c8c:	7e 14                	jle    c0008ca2 <src_callback_read+0x15c>
c0008c8e:	89 d6                	mov    esi,edx
c0008c90:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008c95:	75 9e                	jne    c0008c35 <src_callback_read+0xef>
c0008c97:	e9 69 ff ff ff       	jmp    c0008c05 <src_callback_read+0xbf>
c0008c9c:	85 c9                	test   ecx,ecx
c0008c9e:	75 ea                	jne    c0008c8a <src_callback_read+0x144>
c0008ca0:	89 f2                	mov    edx,esi
c0008ca2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008ca6:	85 c0                	test   eax,eax
c0008ca8:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008cab:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008caf:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008cb2:	74 05                	je     c0008cb9 <src_callback_read+0x173>
c0008cb4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008cb7:	31 d2                	xor    edx,edx
c0008cb9:	83 c4 3c             	add    esp,0x3c
c0008cbc:	89 d0                	mov    eax,edx
c0008cbe:	5b                   	pop    ebx
c0008cbf:	5e                   	pop    esi
c0008cc0:	5f                   	pop    edi
c0008cc1:	5d                   	pop    ebp
c0008cc2:	c3                   	ret    

c0008cc3 <src_set_ratio>:
c0008cc3:	57                   	push   edi
c0008cc4:	ba 02 00 00 00       	mov    edx,0x2
c0008cc9:	56                   	push   esi
c0008cca:	53                   	push   ebx
c0008ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ccf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008cd3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008cd7:	85 db                	test   ebx,ebx
c0008cd9:	74 4c                	je     c0008d27 <src_set_ratio+0x64>
c0008cdb:	ba 07 00 00 00       	mov    edx,0x7
c0008ce0:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ce4:	74 41                	je     c0008d27 <src_set_ratio+0x64>
c0008ce6:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008cea:	74 3b                	je     c0008d27 <src_set_ratio+0x64>
c0008cec:	68 00 00 70 3f       	push   0x3f700000
c0008cf1:	6a 00                	push   0x0
c0008cf3:	57                   	push   edi
c0008cf4:	56                   	push   esi
c0008cf5:	e8 ed fb 01 00       	call   c00288e7 <__ltdf2>
c0008cfa:	83 c4 10             	add    esp,0x10
c0008cfd:	ba 06 00 00 00       	mov    edx,0x6
c0008d02:	85 c0                	test   eax,eax
c0008d04:	78 21                	js     c0008d27 <src_set_ratio+0x64>
c0008d06:	68 00 00 70 40       	push   0x40700000
c0008d0b:	6a 00                	push   0x0
c0008d0d:	57                   	push   edi
c0008d0e:	56                   	push   esi
c0008d0f:	e8 b5 fb 01 00       	call   c00288c9 <__gtdf2>
c0008d14:	83 c4 10             	add    esp,0x10
c0008d17:	ba 06 00 00 00       	mov    edx,0x6
c0008d1c:	85 c0                	test   eax,eax
c0008d1e:	7f 07                	jg     c0008d27 <src_set_ratio+0x64>
c0008d20:	89 33                	mov    DWORD PTR [ebx],esi
c0008d22:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008d25:	31 d2                	xor    edx,edx
c0008d27:	5b                   	pop    ebx
c0008d28:	89 d0                	mov    eax,edx
c0008d2a:	5e                   	pop    esi
c0008d2b:	5f                   	pop    edi
c0008d2c:	c3                   	ret    

c0008d2d <src_get_channels>:
c0008d2d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d31:	b8 02 00 00 00       	mov    eax,0x2
c0008d36:	85 d2                	test   edx,edx
c0008d38:	74 14                	je     c0008d4e <src_get_channels+0x21>
c0008d3a:	b8 07 00 00 00       	mov    eax,0x7
c0008d3f:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008d43:	74 09                	je     c0008d4e <src_get_channels+0x21>
c0008d45:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008d49:	74 03                	je     c0008d4e <src_get_channels+0x21>
c0008d4b:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008d4e:	c3                   	ret    

c0008d4f <src_reset>:
c0008d4f:	53                   	push   ebx
c0008d50:	b8 02 00 00 00       	mov    eax,0x2
c0008d55:	83 ec 08             	sub    esp,0x8
c0008d58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008d5c:	85 db                	test   ebx,ebx
c0008d5e:	74 36                	je     c0008d96 <src_reset+0x47>
c0008d60:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008d63:	85 c0                	test   eax,eax
c0008d65:	74 09                	je     c0008d70 <src_reset+0x21>
c0008d67:	83 ec 0c             	sub    esp,0xc
c0008d6a:	53                   	push   ebx
c0008d6b:	ff d0                	call   eax
c0008d6d:	83 c4 10             	add    esp,0x10
c0008d70:	31 c0                	xor    eax,eax
c0008d72:	31 d2                	xor    edx,edx
c0008d74:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008d77:	89 03                	mov    DWORD PTR [ebx],eax
c0008d79:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008d7c:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008d7f:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008d86:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008d8d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008d94:	31 c0                	xor    eax,eax
c0008d96:	83 c4 08             	add    esp,0x8
c0008d99:	5b                   	pop    ebx
c0008d9a:	c3                   	ret    

c0008d9b <src_new>:
c0008d9b:	57                   	push   edi
c0008d9c:	56                   	push   esi
c0008d9d:	53                   	push   ebx
c0008d9e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008da2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008da6:	85 f6                	test   esi,esi
c0008da8:	74 73                	je     c0008e1d <src_new+0x82>
c0008daa:	85 ff                	test   edi,edi
c0008dac:	7f 08                	jg     c0008db6 <src_new+0x1b>
c0008dae:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008db4:	eb 1e                	jmp    c0008dd4 <src_new+0x39>
c0008db6:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008dbc:	50                   	push   eax
c0008dbd:	50                   	push   eax
c0008dbe:	6a 3c                	push   0x3c
c0008dc0:	6a 01                	push   0x1
c0008dc2:	e8 4c 6c 00 00       	call   c000fa13 <calloc>
c0008dc7:	83 c4 10             	add    esp,0x10
c0008dca:	89 c3                	mov    ebx,eax
c0008dcc:	85 c0                	test   eax,eax
c0008dce:	75 10                	jne    c0008de0 <src_new+0x45>
c0008dd0:	85 f6                	test   esi,esi
c0008dd2:	75 04                	jne    c0008dd8 <src_new+0x3d>
c0008dd4:	31 db                	xor    ebx,ebx
c0008dd6:	eb 4b                	jmp    c0008e23 <src_new+0x88>
c0008dd8:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008dde:	eb 43                	jmp    c0008e23 <src_new+0x88>
c0008de0:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008de3:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008dea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008dee:	e8 1d fb ff ff       	call   c0008910 <psrc_set_converter>
c0008df3:	85 c0                	test   eax,eax
c0008df5:	74 18                	je     c0008e0f <src_new+0x74>
c0008df7:	85 f6                	test   esi,esi
c0008df9:	74 06                	je     c0008e01 <src_new+0x66>
c0008dfb:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008e01:	83 ec 0c             	sub    esp,0xc
c0008e04:	53                   	push   ebx
c0008e05:	31 db                	xor    ebx,ebx
c0008e07:	e8 e7 6b 00 00       	call   c000f9f3 <free>
c0008e0c:	83 c4 10             	add    esp,0x10
c0008e0f:	83 ec 0c             	sub    esp,0xc
c0008e12:	53                   	push   ebx
c0008e13:	e8 37 ff ff ff       	call   c0008d4f <src_reset>
c0008e18:	83 c4 10             	add    esp,0x10
c0008e1b:	eb 06                	jmp    c0008e23 <src_new+0x88>
c0008e1d:	85 ff                	test   edi,edi
c0008e1f:	7f 9b                	jg     c0008dbc <src_new+0x21>
c0008e21:	eb b1                	jmp    c0008dd4 <src_new+0x39>
c0008e23:	89 d8                	mov    eax,ebx
c0008e25:	5b                   	pop    ebx
c0008e26:	5e                   	pop    esi
c0008e27:	5f                   	pop    edi
c0008e28:	c3                   	ret    

c0008e29 <src_callback_new>:
c0008e29:	56                   	push   esi
c0008e2a:	53                   	push   ebx
c0008e2b:	53                   	push   ebx
c0008e2c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008e30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008e34:	85 f6                	test   esi,esi
c0008e36:	75 0e                	jne    c0008e46 <src_callback_new+0x1d>
c0008e38:	31 db                	xor    ebx,ebx
c0008e3a:	85 c0                	test   eax,eax
c0008e3c:	74 47                	je     c0008e85 <src_callback_new+0x5c>
c0008e3e:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008e44:	eb 3f                	jmp    c0008e85 <src_callback_new+0x5c>
c0008e46:	85 c0                	test   eax,eax
c0008e48:	74 06                	je     c0008e50 <src_callback_new+0x27>
c0008e4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008e50:	51                   	push   ecx
c0008e51:	50                   	push   eax
c0008e52:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008e56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008e5a:	e8 3c ff ff ff       	call   c0008d9b <src_new>
c0008e5f:	83 c4 10             	add    esp,0x10
c0008e62:	89 c3                	mov    ebx,eax
c0008e64:	85 c0                	test   eax,eax
c0008e66:	74 1d                	je     c0008e85 <src_callback_new+0x5c>
c0008e68:	83 ec 0c             	sub    esp,0xc
c0008e6b:	50                   	push   eax
c0008e6c:	e8 de fe ff ff       	call   c0008d4f <src_reset>
c0008e71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e75:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008e7c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008e7f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008e82:	83 c4 10             	add    esp,0x10
c0008e85:	89 d8                	mov    eax,ebx
c0008e87:	5a                   	pop    edx
c0008e88:	5b                   	pop    ebx
c0008e89:	5e                   	pop    esi
c0008e8a:	c3                   	ret    

c0008e8b <src_get_name>:
c0008e8b:	53                   	push   ebx
c0008e8c:	83 ec 14             	sub    esp,0x14
c0008e8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008e93:	53                   	push   ebx
c0008e94:	e8 d0 4f 00 00       	call   c000de69 <sinc_get_name>
c0008e99:	83 c4 10             	add    esp,0x10
c0008e9c:	85 c0                	test   eax,eax
c0008e9e:	75 1d                	jne    c0008ebd <src_get_name+0x32>
c0008ea0:	83 ec 0c             	sub    esp,0xc
c0008ea3:	53                   	push   ebx
c0008ea4:	e8 80 57 00 00       	call   c000e629 <zoh_get_name>
c0008ea9:	83 c4 10             	add    esp,0x10
c0008eac:	85 c0                	test   eax,eax
c0008eae:	75 0d                	jne    c0008ebd <src_get_name+0x32>
c0008eb0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008eb4:	83 c4 08             	add    esp,0x8
c0008eb7:	5b                   	pop    ebx
c0008eb8:	e9 74 0b 00 00       	jmp    c0009a31 <linear_get_name>
c0008ebd:	83 c4 08             	add    esp,0x8
c0008ec0:	5b                   	pop    ebx
c0008ec1:	c3                   	ret    

c0008ec2 <src_get_description>:
c0008ec2:	53                   	push   ebx
c0008ec3:	83 ec 14             	sub    esp,0x14
c0008ec6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008eca:	53                   	push   ebx
c0008ecb:	e8 ac 4f 00 00       	call   c000de7c <sinc_get_description>
c0008ed0:	83 c4 10             	add    esp,0x10
c0008ed3:	85 c0                	test   eax,eax
c0008ed5:	75 1d                	jne    c0008ef4 <src_get_description+0x32>
c0008ed7:	83 ec 0c             	sub    esp,0xc
c0008eda:	53                   	push   ebx
c0008edb:	e8 58 57 00 00       	call   c000e638 <zoh_get_description>
c0008ee0:	83 c4 10             	add    esp,0x10
c0008ee3:	85 c0                	test   eax,eax
c0008ee5:	75 0d                	jne    c0008ef4 <src_get_description+0x32>
c0008ee7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008eeb:	83 c4 08             	add    esp,0x8
c0008eee:	5b                   	pop    ebx
c0008eef:	e9 4c 0b 00 00       	jmp    c0009a40 <linear_get_description>
c0008ef4:	83 c4 08             	add    esp,0x8
c0008ef7:	5b                   	pop    ebx
c0008ef8:	c3                   	ret    

c0008ef9 <src_get_version>:
c0008ef9:	b8 e0 9d 02 c0       	mov    eax,0xc0029de0
c0008efe:	c3                   	ret    

c0008eff <src_is_valid_ratio>:
c0008eff:	83 ec 1c             	sub    esp,0x1c
c0008f02:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f0a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	68 00 00 70 3f       	push   0x3f700000
c0008f17:	6a 00                	push   0x0
c0008f19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	e8 c1 f9 01 00       	call   c00288e7 <__ltdf2>
c0008f26:	83 c4 10             	add    esp,0x10
c0008f29:	31 d2                	xor    edx,edx
c0008f2b:	85 c0                	test   eax,eax
c0008f2d:	78 1e                	js     c0008f4d <src_is_valid_ratio+0x4e>
c0008f2f:	68 00 00 70 40       	push   0x40700000
c0008f34:	6a 00                	push   0x0
c0008f36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3e:	e8 86 f9 01 00       	call   c00288c9 <__gtdf2>
c0008f43:	31 d2                	xor    edx,edx
c0008f45:	83 c4 10             	add    esp,0x10
c0008f48:	85 c0                	test   eax,eax
c0008f4a:	0f 9e c2             	setle  dl
c0008f4d:	89 d0                	mov    eax,edx
c0008f4f:	83 c4 1c             	add    esp,0x1c
c0008f52:	c3                   	ret    

c0008f53 <src_error>:
c0008f53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008f57:	31 c0                	xor    eax,eax
c0008f59:	85 d2                	test   edx,edx
c0008f5b:	74 03                	je     c0008f60 <src_error+0xd>
c0008f5d:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008f60:	c3                   	ret    

c0008f61 <src_strerror>:
c0008f61:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008f65:	31 c0                	xor    eax,eax
c0008f67:	83 fa 17             	cmp    edx,0x17
c0008f6a:	77 07                	ja     c0008f73 <src_strerror+0x12>
c0008f6c:	8b 04 95 40 a2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5dc0]
c0008f73:	c3                   	ret    

c0008f74 <src_simple>:
c0008f74:	56                   	push   esi
c0008f75:	53                   	push   ebx
c0008f76:	83 ec 18             	sub    esp,0x18
c0008f79:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f7d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008f81:	50                   	push   eax
c0008f82:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008f86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008f8a:	e8 0c fe ff ff       	call   c0008d9b <src_new>
c0008f8f:	83 c4 10             	add    esp,0x10
c0008f92:	85 c0                	test   eax,eax
c0008f94:	75 06                	jne    c0008f9c <src_simple+0x28>
c0008f96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008f9a:	eb 25                	jmp    c0008fc1 <src_simple+0x4d>
c0008f9c:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008fa3:	89 c3                	mov    ebx,eax
c0008fa5:	50                   	push   eax
c0008fa6:	50                   	push   eax
c0008fa7:	56                   	push   esi
c0008fa8:	53                   	push   ebx
c0008fa9:	e8 e2 f9 ff ff       	call   c0008990 <src_process>
c0008fae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008fb1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fb5:	e8 9a f9 ff ff       	call   c0008954 <src_delete>
c0008fba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fbe:	83 c4 10             	add    esp,0x10
c0008fc1:	83 c4 14             	add    esp,0x14
c0008fc4:	5b                   	pop    ebx
c0008fc5:	5e                   	pop    esi
c0008fc6:	c3                   	ret    

c0008fc7 <src_short_to_float_array>:
c0008fc7:	53                   	push   ebx
c0008fc8:	83 ec 18             	sub    esp,0x18
c0008fcb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008fcf:	85 db                	test   ebx,ebx
c0008fd1:	74 54                	je     c0009027 <src_short_to_float_array+0x60>
c0008fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fd7:	4b                   	dec    ebx
c0008fd8:	83 ec 0c             	sub    esp,0xc
c0008fdb:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008fdf:	50                   	push   eax
c0008fe0:	e8 96 f6 01 00       	call   c002867b <__floatsidf>
c0008fe5:	83 c4 10             	add    esp,0x10
c0008fe8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ff0:	68 00 00 00 3f       	push   0x3f000000
c0008ff5:	6a 00                	push   0x0
c0008ff7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ffb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fff:	e8 14 f0 01 00       	call   c0028018 <__muldf3>
c0009004:	59                   	pop    ecx
c0009005:	59                   	pop    ecx
c0009006:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000900a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000900e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009012:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009016:	e8 d0 f8 01 00       	call   c00288eb <__truncdfsf2>
c000901b:	83 c4 10             	add    esp,0x10
c000901e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009022:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0009025:	eb a8                	jmp    c0008fcf <src_short_to_float_array+0x8>
c0009027:	83 c4 18             	add    esp,0x18
c000902a:	5b                   	pop    ebx
c000902b:	c3                   	ret    

c000902c <src_float_to_short_array>:
c000902c:	56                   	push   esi
c000902d:	53                   	push   ebx
c000902e:	83 ec 14             	sub    esp,0x14
c0009031:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009035:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0009039:	85 db                	test   ebx,ebx
c000903b:	0f 84 a4 00 00 00    	je     c00090e5 <src_float_to_short_array+0xb9>
c0009041:	83 ec 0c             	sub    esp,0xc
c0009044:	4b                   	dec    ebx
c0009045:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009049:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c000904c:	e8 be f9 01 00       	call   c0028a0f <__extendsfdf2>
c0009051:	83 c4 10             	add    esp,0x10
c0009054:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009058:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000905c:	68 00 00 e0 41       	push   0x41e00000
c0009061:	6a 00                	push   0x0
c0009063:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009067:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000906b:	e8 a8 ef 01 00       	call   c0028018 <__muldf3>
c0009070:	83 c4 10             	add    esp,0x10
c0009073:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009077:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000907b:	68 ff ff df 41       	push   0x41dfffff
c0009080:	68 00 00 c0 ff       	push   0xffc00000
c0009085:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009089:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000908d:	e8 53 f8 01 00       	call   c00288e5 <__gedf2>
c0009092:	83 c4 10             	add    esp,0x10
c0009095:	85 c0                	test   eax,eax
c0009097:	78 08                	js     c00090a1 <src_float_to_short_array+0x75>
c0009099:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c000909f:	eb 98                	jmp    c0009039 <src_float_to_short_array+0xd>
c00090a1:	68 00 00 e0 c1       	push   0xc1e00000
c00090a6:	6a 00                	push   0x0
c00090a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b0:	e8 34 f8 01 00       	call   c00288e9 <__ledf2>
c00090b5:	83 c4 10             	add    esp,0x10
c00090b8:	85 c0                	test   eax,eax
c00090ba:	7f 0b                	jg     c00090c7 <src_float_to_short_array+0x9b>
c00090bc:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c00090c2:	e9 72 ff ff ff       	jmp    c0009039 <src_float_to_short_array+0xd>
c00090c7:	50                   	push   eax
c00090c8:	50                   	push   eax
c00090c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090d1:	e8 ca f9 01 00       	call   c0028aa0 <lrint>
c00090d6:	83 c4 10             	add    esp,0x10
c00090d9:	c1 f8 10             	sar    eax,0x10
c00090dc:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c00090e0:	e9 54 ff ff ff       	jmp    c0009039 <src_float_to_short_array+0xd>
c00090e5:	83 c4 14             	add    esp,0x14
c00090e8:	5b                   	pop    ebx
c00090e9:	5e                   	pop    esi
c00090ea:	c3                   	ret    

c00090eb <src_int_to_float_array>:
c00090eb:	53                   	push   ebx
c00090ec:	83 ec 18             	sub    esp,0x18
c00090ef:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00090f3:	85 db                	test   ebx,ebx
c00090f5:	74 52                	je     c0009149 <src_int_to_float_array+0x5e>
c00090f7:	83 ec 0c             	sub    esp,0xc
c00090fa:	4b                   	dec    ebx
c00090fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00090ff:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0009102:	e8 74 f5 01 00       	call   c002867b <__floatsidf>
c0009107:	83 c4 10             	add    esp,0x10
c000910a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000910e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009112:	68 00 00 00 3e       	push   0x3e000000
c0009117:	6a 00                	push   0x0
c0009119:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000911d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009121:	e8 f2 ee 01 00       	call   c0028018 <__muldf3>
c0009126:	59                   	pop    ecx
c0009127:	59                   	pop    ecx
c0009128:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000912c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009138:	e8 ae f7 01 00       	call   c00288eb <__truncdfsf2>
c000913d:	83 c4 10             	add    esp,0x10
c0009140:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009144:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0009147:	eb aa                	jmp    c00090f3 <src_int_to_float_array+0x8>
c0009149:	83 c4 18             	add    esp,0x18
c000914c:	5b                   	pop    ebx
c000914d:	c3                   	ret    

c000914e <src_float_to_int_array>:
c000914e:	56                   	push   esi
c000914f:	53                   	push   ebx
c0009150:	83 ec 14             	sub    esp,0x14
c0009153:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009157:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000915b:	85 db                	test   ebx,ebx
c000915d:	0f 84 a2 00 00 00    	je     c0009205 <src_float_to_int_array+0xb7>
c0009163:	83 ec 0c             	sub    esp,0xc
c0009166:	4b                   	dec    ebx
c0009167:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000916b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c000916e:	e8 9c f8 01 00       	call   c0028a0f <__extendsfdf2>
c0009173:	83 c4 10             	add    esp,0x10
c0009176:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000917a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000917e:	68 00 00 e0 41       	push   0x41e00000
c0009183:	6a 00                	push   0x0
c0009185:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009189:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000918d:	e8 86 ee 01 00       	call   c0028018 <__muldf3>
c0009192:	83 c4 10             	add    esp,0x10
c0009195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000919d:	68 ff ff df 41       	push   0x41dfffff
c00091a2:	68 00 00 c0 ff       	push   0xffc00000
c00091a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091af:	e8 31 f7 01 00       	call   c00288e5 <__gedf2>
c00091b4:	83 c4 10             	add    esp,0x10
c00091b7:	85 c0                	test   eax,eax
c00091b9:	78 09                	js     c00091c4 <src_float_to_int_array+0x76>
c00091bb:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c00091c2:	eb 97                	jmp    c000915b <src_float_to_int_array+0xd>
c00091c4:	68 00 00 e0 c1       	push   0xc1e00000
c00091c9:	6a 00                	push   0x0
c00091cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091d3:	e8 11 f7 01 00       	call   c00288e9 <__ledf2>
c00091d8:	83 c4 10             	add    esp,0x10
c00091db:	85 c0                	test   eax,eax
c00091dd:	7f 0c                	jg     c00091eb <src_float_to_int_array+0x9d>
c00091df:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c00091e6:	e9 70 ff ff ff       	jmp    c000915b <src_float_to_int_array+0xd>
c00091eb:	50                   	push   eax
c00091ec:	50                   	push   eax
c00091ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f5:	e8 a6 f8 01 00       	call   c0028aa0 <lrint>
c00091fa:	83 c4 10             	add    esp,0x10
c00091fd:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009200:	e9 56 ff ff ff       	jmp    c000915b <src_float_to_int_array+0xd>
c0009205:	83 c4 14             	add    esp,0x14
c0009208:	5b                   	pop    ebx
c0009209:	5e                   	pop    esi
c000920a:	c3                   	ret    

c000920b <linear_vari_process>:
c000920b:	55                   	push   ebp
c000920c:	31 d2                	xor    edx,edx
c000920e:	57                   	push   edi
c000920f:	56                   	push   esi
c0009210:	53                   	push   ebx
c0009211:	83 ec 3c             	sub    esp,0x3c
c0009214:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0009218:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000921c:	0f 8e d3 07 00 00    	jle    c00099f5 <linear_vari_process+0x7ea>
c0009222:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009226:	ba 05 00 00 00       	mov    edx,0x5
c000922b:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000922e:	85 db                	test   ebx,ebx
c0009230:	0f 84 bf 07 00 00    	je     c00099f5 <linear_vari_process+0x7ea>
c0009236:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009239:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000923d:	74 19                	je     c0009258 <linear_vari_process+0x4d>
c000923f:	31 d2                	xor    edx,edx
c0009241:	39 c2                	cmp    edx,eax
c0009243:	7d 0c                	jge    c0009251 <linear_vari_process+0x46>
c0009245:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009247:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000924a:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000924e:	42                   	inc    edx
c000924f:	eb f0                	jmp    c0009241 <linear_vari_process+0x36>
c0009251:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009258:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000925b:	0f af d0             	imul   edx,eax
c000925e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009261:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009265:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000926c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000926f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009276:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000927a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000927d:	8b 00                	mov    eax,DWORD PTR [eax]
c000927f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009283:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009287:	68 00 00 70 3f       	push   0x3f700000
c000928c:	6a 00                	push   0x0
c000928e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009296:	e8 4c f6 01 00       	call   c00288e7 <__ltdf2>
c000929b:	83 c4 10             	add    esp,0x10
c000929e:	ba 16 00 00 00       	mov    edx,0x16
c00092a3:	85 c0                	test   eax,eax
c00092a5:	0f 88 4a 07 00 00    	js     c00099f5 <linear_vari_process+0x7ea>
c00092ab:	68 00 00 70 40       	push   0x40700000
c00092b0:	6a 00                	push   0x0
c00092b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092ba:	e8 0a f6 01 00       	call   c00288c9 <__gtdf2>
c00092bf:	83 c4 10             	add    esp,0x10
c00092c2:	ba 16 00 00 00       	mov    edx,0x16
c00092c7:	85 c0                	test   eax,eax
c00092c9:	0f 8f 26 07 00 00    	jg     c00099f5 <linear_vari_process+0x7ea>
c00092cf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00092d3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00092d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00092d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092e1:	68 00 00 f0 3f       	push   0x3ff00000
c00092e6:	6a 00                	push   0x0
c00092e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092f0:	e8 f2 f5 01 00       	call   c00288e7 <__ltdf2>
c00092f5:	83 c4 10             	add    esp,0x10
c00092f8:	85 c0                	test   eax,eax
c00092fa:	0f 89 89 02 00 00    	jns    c0009589 <linear_vari_process+0x37e>
c0009300:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009303:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0009306:	0f 8d 7d 02 00 00    	jge    c0009589 <linear_vari_process+0x37e>
c000930c:	83 ec 0c             	sub    esp,0xc
c000930f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009312:	e8 64 f3 01 00       	call   c002867b <__floatsidf>
c0009317:	83 c4 10             	add    esp,0x10
c000931a:	89 04 24             	mov    DWORD PTR [esp],eax
c000931d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009321:	68 00 00 f0 3f       	push   0x3ff00000
c0009326:	6a 00                	push   0x0
c0009328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000932c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009330:	e8 66 e6 01 00       	call   c002799b <__adddf3>
c0009335:	83 c4 10             	add    esp,0x10
c0009338:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000933c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009340:	52                   	push   edx
c0009341:	50                   	push   eax
c0009342:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000934a:	e8 c9 ec 01 00       	call   c0028018 <__muldf3>
c000934f:	5d                   	pop    ebp
c0009350:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009354:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009358:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000935b:	e8 1b f3 01 00       	call   c002867b <__floatsidf>
c0009360:	83 c4 10             	add    esp,0x10
c0009363:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009367:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000936b:	52                   	push   edx
c000936c:	50                   	push   eax
c000936d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009371:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009375:	e8 21 e6 01 00       	call   c002799b <__adddf3>
c000937a:	59                   	pop    ecx
c000937b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000937f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009383:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009386:	e8 f0 f2 01 00       	call   c002867b <__floatsidf>
c000938b:	83 c4 10             	add    esp,0x10
c000938e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009392:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009396:	52                   	push   edx
c0009397:	50                   	push   eax
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093a0:	e8 40 f5 01 00       	call   c00288e5 <__gedf2>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	85 c0                	test   eax,eax
c00093aa:	0f 89 d9 01 00 00    	jns    c0009589 <linear_vari_process+0x37e>
c00093b0:	85 ff                	test   edi,edi
c00093b2:	0f 8e f4 00 00 00    	jle    c00094ac <linear_vari_process+0x2a1>
c00093b8:	83 ec 10             	sub    esp,0x10
c00093bb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00093be:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00093c1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00093c5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00093c8:	ff 30                	push   DWORD PTR [eax]
c00093ca:	e8 1d ec 01 00       	call   c0027fec <__subdf3>
c00093cf:	83 c4 18             	add    esp,0x18
c00093d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093da:	52                   	push   edx
c00093db:	50                   	push   eax
c00093dc:	e8 9f f6 01 00       	call   c0028a80 <fabs>
c00093e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00093f1:	68 23 42 92 0c       	push   0xc924223
c00093f6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093fe:	e8 c6 f4 01 00       	call   c00288c9 <__gtdf2>
c0009403:	83 c4 10             	add    esp,0x10
c0009406:	85 c0                	test   eax,eax
c0009408:	0f 8e 9e 00 00 00    	jle    c00094ac <linear_vari_process+0x2a1>
c000940e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009412:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009415:	8b 00                	mov    eax,DWORD PTR [eax]
c0009417:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000941b:	89 04 24             	mov    DWORD PTR [esp],eax
c000941e:	52                   	push   edx
c000941f:	50                   	push   eax
c0009420:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009423:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009426:	e8 c1 eb 01 00       	call   c0027fec <__subdf3>
c000942b:	59                   	pop    ecx
c000942c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009430:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009434:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009437:	e8 3f f2 01 00       	call   c002867b <__floatsidf>
c000943c:	83 c4 10             	add    esp,0x10
c000943f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009443:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009447:	52                   	push   edx
c0009448:	50                   	push   eax
c0009449:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009451:	e8 c2 eb 01 00       	call   c0028018 <__muldf3>
c0009456:	5f                   	pop    edi
c0009457:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000945b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000945f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009462:	e8 14 f2 01 00       	call   c002867b <__floatsidf>
c0009467:	83 c4 10             	add    esp,0x10
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	52                   	push   edx
c0009473:	50                   	push   eax
c0009474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009478:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947c:	e8 7b ee 01 00       	call   c00282fc <__divdf3>
c0009481:	83 c4 10             	add    esp,0x10
c0009484:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009488:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000948c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009490:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000949c:	e8 fa e4 01 00       	call   c002799b <__adddf3>
c00094a1:	83 c4 10             	add    esp,0x10
c00094a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ac:	31 ff                	xor    edi,edi
c00094ae:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00094b1:	0f 8e 9d 00 00 00    	jle    c0009554 <linear_vari_process+0x349>
c00094b7:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00094ba:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00094be:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00094c1:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00094c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00094c8:	8b 06                	mov    eax,DWORD PTR [esi]
c00094ca:	52                   	push   edx
c00094cb:	52                   	push   edx
c00094cc:	55                   	push   ebp
c00094cd:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00094d0:	47                   	inc    edi
c00094d1:	e8 5a de 01 00       	call   c0027330 <__subsf3>
c00094d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00094d9:	e8 31 f5 01 00       	call   c0028a0f <__extendsfdf2>
c00094de:	83 c4 10             	add    esp,0x10
c00094e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094e5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f9:	e8 1a eb 01 00       	call   c0028018 <__muldf3>
c00094fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009501:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009505:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009509:	e8 01 f5 01 00       	call   c0028a0f <__extendsfdf2>
c000950e:	83 c4 10             	add    esp,0x10
c0009511:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009515:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009519:	52                   	push   edx
c000951a:	50                   	push   eax
c000951b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000951f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009523:	e8 73 e4 01 00       	call   c002799b <__adddf3>
c0009528:	59                   	pop    ecx
c0009529:	5d                   	pop    ebp
c000952a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000952e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009532:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009536:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000953a:	e8 ac f3 01 00       	call   c00288eb <__truncdfsf2>
c000953f:	83 c4 10             	add    esp,0x10
c0009542:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009545:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009549:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000954c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000954f:	e9 5a ff ff ff       	jmp    c00094ae <linear_vari_process+0x2a3>
c0009554:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009558:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000955c:	68 00 00 f0 3f       	push   0x3ff00000
c0009561:	6a 00                	push   0x0
c0009563:	e8 94 ed 01 00       	call   c00282fc <__divdf3>
c0009568:	83 c4 10             	add    esp,0x10
c000956b:	89 04 24             	mov    DWORD PTR [esp],eax
c000956e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009578:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000957c:	e8 1a e4 01 00       	call   c002799b <__adddf3>
c0009581:	83 c4 10             	add    esp,0x10
c0009584:	e9 50 fd ff ff       	jmp    c00092d9 <linear_vari_process+0xce>
c0009589:	50                   	push   eax
c000958a:	50                   	push   eax
c000958b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000958f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009593:	e8 08 f5 01 00       	call   c0028aa0 <lrint>
c0009598:	83 ec 0c             	sub    esp,0xc
c000959b:	50                   	push   eax
c000959c:	e8 da f0 01 00       	call   c002867b <__floatsidf>
c00095a1:	83 c4 10             	add    esp,0x10
c00095a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095ac:	52                   	push   edx
c00095ad:	50                   	push   eax
c00095ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095b6:	e8 31 ea 01 00       	call   c0027fec <__subdf3>
c00095bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00095bf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00095c3:	83 c4 20             	add    esp,0x20
c00095c6:	6a 00                	push   0x0
c00095c8:	6a 00                	push   0x0
c00095ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095d2:	e8 10 f3 01 00       	call   c00288e7 <__ltdf2>
c00095d7:	83 c4 10             	add    esp,0x10
c00095da:	85 c0                	test   eax,eax
c00095dc:	79 1e                	jns    c00095fc <linear_vari_process+0x3f1>
c00095de:	68 00 00 f0 3f       	push   0x3ff00000
c00095e3:	6a 00                	push   0x0
c00095e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095ed:	e8 a9 e3 01 00       	call   c002799b <__adddf3>
c00095f2:	83 c4 10             	add    esp,0x10
c00095f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00095f8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00095fc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00095ff:	83 ec 10             	sub    esp,0x10
c0009602:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000960a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000960e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009612:	e8 d5 e9 01 00       	call   c0027fec <__subdf3>
c0009617:	83 c4 18             	add    esp,0x18
c000961a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000961e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009622:	52                   	push   edx
c0009623:	50                   	push   eax
c0009624:	e8 77 f4 01 00       	call   c0028aa0 <lrint>
c0009629:	83 c4 10             	add    esp,0x10
c000962c:	0f af f8             	imul   edi,eax
c000962f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009632:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009635:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009638:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000963b:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000963e:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009642:	0f 8d 13 03 00 00    	jge    c000995b <linear_vari_process+0x750>
c0009648:	83 ec 0c             	sub    esp,0xc
c000964b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000964e:	e8 28 f0 01 00       	call   c002867b <__floatsidf>
c0009653:	83 c4 10             	add    esp,0x10
c0009656:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000965a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000965e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009662:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000966a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000966e:	e8 a5 e9 01 00       	call   c0028018 <__muldf3>
c0009673:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000967a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000967e:	e8 f8 ef 01 00       	call   c002867b <__floatsidf>
c0009683:	83 c4 10             	add    esp,0x10
c0009686:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000968a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000968e:	52                   	push   edx
c000968f:	50                   	push   eax
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	e8 fe e2 01 00       	call   c002799b <__adddf3>
c000969d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00096a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00096a4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00096a8:	e8 ce ef 01 00       	call   c002867b <__floatsidf>
c00096ad:	83 c4 10             	add    esp,0x10
c00096b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00096b4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00096b8:	52                   	push   edx
c00096b9:	50                   	push   eax
c00096ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c2:	e8 20 f2 01 00       	call   c00288e7 <__ltdf2>
c00096c7:	83 c4 10             	add    esp,0x10
c00096ca:	85 c0                	test   eax,eax
c00096cc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096d0:	0f 89 85 02 00 00    	jns    c000995b <linear_vari_process+0x750>
c00096d6:	85 c9                	test   ecx,ecx
c00096d8:	0f 8e f5 00 00 00    	jle    c00097d3 <linear_vari_process+0x5c8>
c00096de:	83 ec 10             	sub    esp,0x10
c00096e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00096e4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00096e7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00096eb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00096ee:	ff 30                	push   DWORD PTR [eax]
c00096f0:	e8 f7 e8 01 00       	call   c0027fec <__subdf3>
c00096f5:	83 c4 18             	add    esp,0x18
c00096f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096fc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009700:	52                   	push   edx
c0009701:	50                   	push   eax
c0009702:	e8 79 f3 01 00       	call   c0028a80 <fabs>
c0009707:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000970b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000970f:	83 c4 10             	add    esp,0x10
c0009712:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009717:	68 23 42 92 0c       	push   0xc924223
c000971c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009720:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009724:	e8 a0 f1 01 00       	call   c00288c9 <__gtdf2>
c0009729:	83 c4 10             	add    esp,0x10
c000972c:	85 c0                	test   eax,eax
c000972e:	0f 8e 9f 00 00 00    	jle    c00097d3 <linear_vari_process+0x5c8>
c0009734:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009738:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000973b:	8b 00                	mov    eax,DWORD PTR [eax]
c000973d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009741:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000974a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000974d:	e8 9a e8 01 00       	call   c0027fec <__subdf3>
c0009752:	5f                   	pop    edi
c0009753:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009757:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000975b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000975e:	e8 18 ef 01 00       	call   c002867b <__floatsidf>
c0009763:	83 c4 10             	add    esp,0x10
c0009766:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000976a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000976e:	52                   	push   edx
c000976f:	50                   	push   eax
c0009770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009778:	e8 9b e8 01 00       	call   c0028018 <__muldf3>
c000977d:	5d                   	pop    ebp
c000977e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009782:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009786:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009789:	e8 ed ee 01 00       	call   c002867b <__floatsidf>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009795:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009799:	52                   	push   edx
c000979a:	50                   	push   eax
c000979b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000979f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097a3:	e8 54 eb 01 00       	call   c00282fc <__divdf3>
c00097a8:	83 c4 10             	add    esp,0x10
c00097ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00097af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00097b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00097b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00097bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097c3:	e8 d3 e1 01 00       	call   c002799b <__adddf3>
c00097c8:	83 c4 10             	add    esp,0x10
c00097cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00097cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00097d3:	31 ff                	xor    edi,edi
c00097d5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00097d8:	39 f8                	cmp    eax,edi
c00097da:	0f 8e ac 00 00 00    	jle    c000988c <linear_vari_process+0x681>
c00097e0:	8b 16                	mov    edx,DWORD PTR [esi]
c00097e2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00097e5:	29 c1                	sub    ecx,eax
c00097e7:	89 c8                	mov    eax,ecx
c00097e9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00097ec:	01 f8                	add    eax,edi
c00097ee:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00097f2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00097f5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097fc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097ff:	51                   	push   ecx
c0009800:	01 f8                	add    eax,edi
c0009802:	51                   	push   ecx
c0009803:	47                   	inc    edi
c0009804:	55                   	push   ebp
c0009805:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c0009808:	e8 23 db 01 00       	call   c0027330 <__subsf3>
c000980d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009810:	e8 fa f1 01 00       	call   c0028a0f <__extendsfdf2>
c0009815:	83 c4 10             	add    esp,0x10
c0009818:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000981c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009820:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009824:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009828:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000982c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009830:	e8 e3 e7 01 00       	call   c0028018 <__muldf3>
c0009835:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009838:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000983c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009840:	e8 ca f1 01 00       	call   c0028a0f <__extendsfdf2>
c0009845:	83 c4 10             	add    esp,0x10
c0009848:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000984c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009850:	52                   	push   edx
c0009851:	50                   	push   eax
c0009852:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009856:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000985a:	e8 3c e1 01 00       	call   c002799b <__adddf3>
c000985f:	5d                   	pop    ebp
c0009860:	59                   	pop    ecx
c0009861:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009865:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009869:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000986d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009871:	e8 75 f0 01 00       	call   c00288eb <__truncdfsf2>
c0009876:	83 c4 10             	add    esp,0x10
c0009879:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000987d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009881:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009884:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009887:	e9 49 ff ff ff       	jmp    c00097d5 <linear_vari_process+0x5ca>
c000988c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009890:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009894:	68 00 00 f0 3f       	push   0x3ff00000
c0009899:	6a 00                	push   0x0
c000989b:	e8 5c ea 01 00       	call   c00282fc <__divdf3>
c00098a0:	83 c4 10             	add    esp,0x10
c00098a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ab:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00098af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00098b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098bb:	e8 db e0 01 00       	call   c002799b <__adddf3>
c00098c0:	59                   	pop    ecx
c00098c1:	5f                   	pop    edi
c00098c2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00098c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00098ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d2:	e8 c9 f1 01 00       	call   c0028aa0 <lrint>
c00098d7:	83 ec 0c             	sub    esp,0xc
c00098da:	50                   	push   eax
c00098db:	e8 9b ed 01 00       	call   c002867b <__floatsidf>
c00098e0:	83 c4 10             	add    esp,0x10
c00098e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00098e7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00098eb:	52                   	push   edx
c00098ec:	50                   	push   eax
c00098ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098f5:	e8 f2 e6 01 00       	call   c0027fec <__subdf3>
c00098fa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098fe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009902:	83 c4 20             	add    esp,0x20
c0009905:	6a 00                	push   0x0
c0009907:	6a 00                	push   0x0
c0009909:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000990d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009911:	e8 d1 ef 01 00       	call   c00288e7 <__ltdf2>
c0009916:	83 c4 10             	add    esp,0x10
c0009919:	85 c0                	test   eax,eax
c000991b:	79 1e                	jns    c000993b <linear_vari_process+0x730>
c000991d:	68 00 00 f0 3f       	push   0x3ff00000
c0009922:	6a 00                	push   0x0
c0009924:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009928:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000992c:	e8 6a e0 01 00       	call   c002799b <__adddf3>
c0009931:	83 c4 10             	add    esp,0x10
c0009934:	89 04 24             	mov    DWORD PTR [esp],eax
c0009937:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000993b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000993e:	83 ec 10             	sub    esp,0x10
c0009941:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009945:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009949:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000994d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009951:	e8 96 e6 01 00       	call   c0027fec <__subdf3>
c0009956:	e9 bc fc ff ff       	jmp    c0009617 <linear_vari_process+0x40c>
c000995b:	39 fd                	cmp    ebp,edi
c000995d:	7d 38                	jge    c0009997 <linear_vari_process+0x78c>
c000995f:	83 ec 0c             	sub    esp,0xc
c0009962:	89 f8                	mov    eax,edi
c0009964:	29 e8                	sub    eax,ebp
c0009966:	99                   	cdq    
c0009967:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000996a:	50                   	push   eax
c000996b:	e8 0b ed 01 00       	call   c002867b <__floatsidf>
c0009970:	83 c4 10             	add    esp,0x10
c0009973:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009977:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000997b:	52                   	push   edx
c000997c:	50                   	push   eax
c000997d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009981:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009985:	e8 11 e0 01 00       	call   c002799b <__adddf3>
c000998a:	83 c4 10             	add    esp,0x10
c000998d:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009990:	89 04 24             	mov    DWORD PTR [esp],eax
c0009993:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009997:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000999b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000999e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00099a2:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00099a5:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00099a8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00099ab:	85 c0                	test   eax,eax
c00099ad:	7f 29                	jg     c00099d8 <linear_vari_process+0x7cd>
c00099af:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00099b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00099bb:	89 01                	mov    DWORD PTR [ecx],eax
c00099bd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00099c0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00099c3:	99                   	cdq    
c00099c4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00099c7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00099ca:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00099cd:	99                   	cdq    
c00099ce:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00099d1:	31 d2                	xor    edx,edx
c00099d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00099d6:	eb 1d                	jmp    c00099f5 <linear_vari_process+0x7ea>
c00099d8:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00099db:	31 d2                	xor    edx,edx
c00099dd:	29 c8                	sub    eax,ecx
c00099df:	c1 e0 02             	shl    eax,0x2
c00099e2:	39 d1                	cmp    ecx,edx
c00099e4:	7e c9                	jle    c00099af <linear_vari_process+0x7a4>
c00099e6:	8b 3e                	mov    edi,DWORD PTR [esi]
c00099e8:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00099eb:	83 c0 04             	add    eax,0x4
c00099ee:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00099f2:	42                   	inc    edx
c00099f3:	eb ed                	jmp    c00099e2 <linear_vari_process+0x7d7>
c00099f5:	83 c4 3c             	add    esp,0x3c
c00099f8:	89 d0                	mov    eax,edx
c00099fa:	5b                   	pop    ebx
c00099fb:	5e                   	pop    esi
c00099fc:	5f                   	pop    edi
c00099fd:	5d                   	pop    ebp
c00099fe:	c3                   	ret    

c00099ff <linear_reset>:
c00099ff:	83 ec 0c             	sub    esp,0xc
c0009a02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a06:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0009a09:	85 c0                	test   eax,eax
c0009a0b:	74 20                	je     c0009a2d <linear_reset+0x2e>
c0009a0d:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009a10:	83 c0 1c             	add    eax,0x1c
c0009a13:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009a16:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009a1d:	c1 e2 02             	shl    edx,0x2
c0009a20:	51                   	push   ecx
c0009a21:	52                   	push   edx
c0009a22:	6a 00                	push   0x0
c0009a24:	50                   	push   eax
c0009a25:	e8 26 6d ff ff       	call   c0000750 <memset>
c0009a2a:	83 c4 10             	add    esp,0x10
c0009a2d:	83 c4 0c             	add    esp,0xc
c0009a30:	c3                   	ret    

c0009a31 <linear_get_name>:
c0009a31:	31 c0                	xor    eax,eax
c0009a33:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009a38:	75 05                	jne    c0009a3f <linear_get_name+0xe>
c0009a3a:	b8 a0 a2 02 c0       	mov    eax,0xc002a2a0
c0009a3f:	c3                   	ret    

c0009a40 <linear_get_description>:
c0009a40:	31 c0                	xor    eax,eax
c0009a42:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009a47:	75 05                	jne    c0009a4e <linear_get_description+0xe>
c0009a49:	b8 b4 a2 02 c0       	mov    eax,0xc002a2b4
c0009a4e:	c3                   	ret    

c0009a4f <linear_set_converter>:
c0009a4f:	53                   	push   ebx
c0009a50:	b8 0a 00 00 00       	mov    eax,0xa
c0009a55:	83 ec 08             	sub    esp,0x8
c0009a58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009a5c:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009a61:	75 6e                	jne    c0009ad1 <linear_set_converter+0x82>
c0009a63:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009a66:	85 c0                	test   eax,eax
c0009a68:	74 13                	je     c0009a7d <linear_set_converter+0x2e>
c0009a6a:	83 ec 0c             	sub    esp,0xc
c0009a6d:	50                   	push   eax
c0009a6e:	e8 80 5f 00 00       	call   c000f9f3 <free>
c0009a73:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009a7a:	83 c4 10             	add    esp,0x10
c0009a7d:	50                   	push   eax
c0009a7e:	50                   	push   eax
c0009a7f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009a82:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009a89:	50                   	push   eax
c0009a8a:	6a 01                	push   0x1
c0009a8c:	e8 82 5f 00 00       	call   c000fa13 <calloc>
c0009a91:	83 c4 10             	add    esp,0x10
c0009a94:	89 c2                	mov    edx,eax
c0009a96:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009a99:	85 d2                	test   edx,edx
c0009a9b:	b8 01 00 00 00       	mov    eax,0x1
c0009aa0:	74 2f                	je     c0009ad1 <linear_set_converter+0x82>
c0009aa2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009aa5:	83 ec 0c             	sub    esp,0xc
c0009aa8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009aab:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009ab1:	c7 43 24 0b 92 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000920b
c0009ab8:	c7 43 20 0b 92 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000920b
c0009abf:	c7 43 28 ff 99 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00099ff
c0009ac6:	53                   	push   ebx
c0009ac7:	e8 33 ff ff ff       	call   c00099ff <linear_reset>
c0009acc:	83 c4 10             	add    esp,0x10
c0009acf:	31 c0                	xor    eax,eax
c0009ad1:	83 c4 08             	add    esp,0x8
c0009ad4:	5b                   	pop    ebx
c0009ad5:	c3                   	ret    

c0009ad6 <int_to_fp>:
c0009ad6:	c1 e0 0c             	shl    eax,0xc
c0009ad9:	c3                   	ret    

c0009ada <fp_to_int>:
c0009ada:	c1 f8 0c             	sar    eax,0xc
c0009add:	c3                   	ret    

c0009ade <fp_fraction_part>:
c0009ade:	25 ff 0f 00 00       	and    eax,0xfff
c0009ae3:	c3                   	ret    

c0009ae4 <fp_to_double>:
c0009ae4:	83 ec 1c             	sub    esp,0x1c
c0009ae7:	e8 f2 ff ff ff       	call   c0009ade <fp_fraction_part>
c0009aec:	83 ec 0c             	sub    esp,0xc
c0009aef:	50                   	push   eax
c0009af0:	e8 86 eb 01 00       	call   c002867b <__floatsidf>
c0009af5:	83 c4 10             	add    esp,0x10
c0009af8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009afc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009b00:	68 00 00 30 3f       	push   0x3f300000
c0009b05:	6a 00                	push   0x0
c0009b07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b0f:	e8 04 e5 01 00       	call   c0028018 <__muldf3>
c0009b14:	83 c4 2c             	add    esp,0x2c
c0009b17:	c3                   	ret    

c0009b18 <calc_output_single>:
c0009b18:	55                   	push   ebp
c0009b19:	57                   	push   edi
c0009b1a:	56                   	push   esi
c0009b1b:	89 c6                	mov    esi,eax
c0009b1d:	53                   	push   ebx
c0009b1e:	89 d3                	mov    ebx,edx
c0009b20:	83 ec 4c             	sub    esp,0x4c
c0009b23:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009b27:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009b2a:	e8 a7 ff ff ff       	call   c0009ad6 <int_to_fp>
c0009b2f:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009b32:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b36:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009b3a:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009b3e:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009b41:	99                   	cdq    
c0009b42:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009b4a:	f7 fb                	idiv   ebx
c0009b4c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009b54:	89 da                	mov    edx,ebx
c0009b56:	0f af d0             	imul   edx,eax
c0009b59:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009b61:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009b65:	29 c2                	sub    edx,eax
c0009b67:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b6e:	83 c5 04             	add    ebp,0x4
c0009b71:	e8 6e ff ff ff       	call   c0009ae4 <fp_to_double>
c0009b76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009b7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b82:	e8 53 ff ff ff       	call   c0009ada <fp_to_int>
c0009b87:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009b8a:	52                   	push   edx
c0009b8b:	52                   	push   edx
c0009b8c:	51                   	push   ecx
c0009b8d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009b91:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009b95:	e8 96 d7 01 00       	call   c0027330 <__subsf3>
c0009b9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b9d:	e8 6d ee 01 00       	call   c0028a0f <__extendsfdf2>
c0009ba2:	83 c4 10             	add    esp,0x10
c0009ba5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009ba9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009bad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009bb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009bb5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bb9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bbd:	e8 56 e4 01 00       	call   c0028018 <__muldf3>
c0009bc2:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009bc6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bca:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009bcd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bd1:	e8 39 ee 01 00       	call   c0028a0f <__extendsfdf2>
c0009bd6:	83 c4 10             	add    esp,0x10
c0009bd9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009bdd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009be1:	52                   	push   edx
c0009be2:	50                   	push   eax
c0009be3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009be7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009beb:	e8 ab dd 01 00       	call   c002799b <__adddf3>
c0009bf0:	59                   	pop    ecx
c0009bf1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009bf5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009bf9:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009bff:	e8 0b ee 01 00       	call   c0028a0f <__extendsfdf2>
c0009c04:	83 c4 10             	add    esp,0x10
c0009c07:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c0b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c0f:	52                   	push   edx
c0009c10:	50                   	push   eax
c0009c11:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c19:	e8 fa e3 01 00       	call   c0028018 <__muldf3>
c0009c1e:	83 c4 10             	add    esp,0x10
c0009c21:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c25:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c29:	52                   	push   edx
c0009c2a:	50                   	push   eax
c0009c2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c33:	e8 63 dd 01 00       	call   c002799b <__adddf3>
c0009c38:	83 c4 10             	add    esp,0x10
c0009c3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c43:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009c47:	0f 89 1d ff ff ff    	jns    c0009b6a <calc_output_single+0x52>
c0009c4d:	89 d9                	mov    ecx,ebx
c0009c4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009c53:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009c57:	89 dd                	mov    ebp,ebx
c0009c59:	29 c8                	sub    eax,ecx
c0009c5b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009c63:	99                   	cdq    
c0009c64:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c6c:	f7 fb                	idiv   ebx
c0009c6e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009c72:	0f af e8             	imul   ebp,eax
c0009c75:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009c79:	01 cd                	add    ebp,ecx
c0009c7b:	8d 34 86             	lea    esi,[esi+eax*4]
c0009c7e:	89 e8                	mov    eax,ebp
c0009c80:	83 ee 04             	sub    esi,0x4
c0009c83:	e8 5c fe ff ff       	call   c0009ae4 <fp_to_double>
c0009c88:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009c90:	89 e8                	mov    eax,ebp
c0009c92:	29 dd                	sub    ebp,ebx
c0009c94:	e8 41 fe ff ff       	call   c0009ada <fp_to_int>
c0009c99:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009c9c:	52                   	push   edx
c0009c9d:	52                   	push   edx
c0009c9e:	51                   	push   ecx
c0009c9f:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009ca3:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009ca7:	e8 84 d6 01 00       	call   c0027330 <__subsf3>
c0009cac:	89 04 24             	mov    DWORD PTR [esp],eax
c0009caf:	e8 5b ed 01 00       	call   c0028a0f <__extendsfdf2>
c0009cb4:	83 c4 10             	add    esp,0x10
c0009cb7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cbb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ccb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ccf:	e8 44 e3 01 00       	call   c0028018 <__muldf3>
c0009cd4:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009cd8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cdc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009cdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ce3:	e8 27 ed 01 00       	call   c0028a0f <__extendsfdf2>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf3:	52                   	push   edx
c0009cf4:	50                   	push   eax
c0009cf5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009cf9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009cfd:	e8 99 dc 01 00       	call   c002799b <__adddf3>
c0009d02:	59                   	pop    ecx
c0009d03:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009d07:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009d0b:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009d11:	e8 f9 ec 01 00       	call   c0028a0f <__extendsfdf2>
c0009d16:	83 c4 10             	add    esp,0x10
c0009d19:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d1d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d21:	52                   	push   edx
c0009d22:	50                   	push   eax
c0009d23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009d27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009d2b:	e8 e8 e2 01 00       	call   c0028018 <__muldf3>
c0009d30:	83 c4 10             	add    esp,0x10
c0009d33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d37:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d3b:	52                   	push   edx
c0009d3c:	50                   	push   eax
c0009d3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d45:	e8 51 dc 01 00       	call   c002799b <__adddf3>
c0009d4a:	83 c4 10             	add    esp,0x10
c0009d4d:	85 ed                	test   ebp,ebp
c0009d4f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d53:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d57:	0f 8f 21 ff ff ff    	jg     c0009c7e <calc_output_single+0x166>
c0009d5d:	52                   	push   edx
c0009d5e:	50                   	push   eax
c0009d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d67:	e8 2f dc 01 00       	call   c002799b <__adddf3>
c0009d6c:	83 c4 5c             	add    esp,0x5c
c0009d6f:	5b                   	pop    ebx
c0009d70:	5e                   	pop    esi
c0009d71:	5f                   	pop    edi
c0009d72:	5d                   	pop    ebp
c0009d73:	c3                   	ret    

c0009d74 <calc_output_stereo>:
c0009d74:	55                   	push   ebp
c0009d75:	89 cd                	mov    ebp,ecx
c0009d77:	57                   	push   edi
c0009d78:	56                   	push   esi
c0009d79:	53                   	push   ebx
c0009d7a:	89 c3                	mov    ebx,eax
c0009d7c:	83 ec 6c             	sub    esp,0x6c
c0009d7f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d83:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009d8a:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009d91:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d95:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d99:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009d9c:	e8 35 fd ff ff       	call   c0009ad6 <int_to_fp>
c0009da1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009da9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dad:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009db5:	29 c8                	sub    eax,ecx
c0009db7:	99                   	cdq    
c0009db8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009dbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009dc0:	0f af d0             	imul   edx,eax
c0009dc3:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009dc6:	31 d2                	xor    edx,edx
c0009dc8:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009dcc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009dd0:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009dd3:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009dd7:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009dda:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009dde:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009de2:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009de5:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009dea:	29 c1                	sub    ecx,eax
c0009dec:	31 c0                	xor    eax,eax
c0009dee:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009df1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009df5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009df9:	83 c7 08             	add    edi,0x8
c0009dfc:	e8 e3 fc ff ff       	call   c0009ae4 <fp_to_double>
c0009e01:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009e05:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009e09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e0d:	e8 c8 fc ff ff       	call   c0009ada <fp_to_int>
c0009e12:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009e15:	52                   	push   edx
c0009e16:	52                   	push   edx
c0009e17:	51                   	push   ecx
c0009e18:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009e1c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009e20:	e8 0b d5 01 00       	call   c0027330 <__subsf3>
c0009e25:	89 04 24             	mov    DWORD PTR [esp],eax
c0009e28:	e8 e2 eb 01 00       	call   c0028a0f <__extendsfdf2>
c0009e2d:	83 c4 10             	add    esp,0x10
c0009e30:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009e34:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009e38:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009e3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009e40:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009e44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009e48:	e8 cb e1 01 00       	call   c0028018 <__muldf3>
c0009e4d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009e51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009e55:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e58:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009e5c:	e8 ae eb 01 00       	call   c0028a0f <__extendsfdf2>
c0009e61:	83 c4 10             	add    esp,0x10
c0009e64:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009e68:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009e6c:	52                   	push   edx
c0009e6d:	50                   	push   eax
c0009e6e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009e72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009e76:	e8 20 db 01 00       	call   c002799b <__adddf3>
c0009e7b:	59                   	pop    ecx
c0009e7c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009e80:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009e84:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009e8a:	e8 80 eb 01 00       	call   c0028a0f <__extendsfdf2>
c0009e8f:	83 c4 10             	add    esp,0x10
c0009e92:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009e96:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009e9a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009e9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ea2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ea6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009eaa:	e8 69 e1 01 00       	call   c0028018 <__muldf3>
c0009eaf:	83 c4 10             	add    esp,0x10
c0009eb2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009eb6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009eba:	52                   	push   edx
c0009ebb:	50                   	push   eax
c0009ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec4:	e8 d2 da 01 00       	call   c002799b <__adddf3>
c0009ec9:	59                   	pop    ecx
c0009eca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ece:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009ed2:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ed8:	e8 32 eb 01 00       	call   c0028a0f <__extendsfdf2>
c0009edd:	83 c4 10             	add    esp,0x10
c0009ee0:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ee4:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ee8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009eec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ef0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ef4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ef8:	e8 1b e1 01 00       	call   c0028018 <__muldf3>
c0009efd:	83 c4 10             	add    esp,0x10
c0009f00:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009f04:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009f08:	52                   	push   edx
c0009f09:	50                   	push   eax
c0009f0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f12:	e8 84 da 01 00       	call   c002799b <__adddf3>
c0009f17:	83 c4 10             	add    esp,0x10
c0009f1a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f1e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009f22:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009f26:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009f2a:	0f 89 c5 fe ff ff    	jns    c0009df5 <calc_output_stereo+0x81>
c0009f30:	29 e9                	sub    ecx,ebp
c0009f32:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009f3a:	29 c8                	sub    eax,ecx
c0009f3c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009f44:	99                   	cdq    
c0009f45:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f49:	31 d2                	xor    edx,edx
c0009f4b:	0f af f8             	imul   edi,eax
c0009f4e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f52:	40                   	inc    eax
c0009f53:	01 cf                	add    edi,ecx
c0009f55:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009f5a:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009f5e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009f66:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009f69:	31 c0                	xor    eax,eax
c0009f6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f6f:	89 f8                	mov    eax,edi
c0009f71:	83 eb 08             	sub    ebx,0x8
c0009f74:	e8 6b fb ff ff       	call   c0009ae4 <fp_to_double>
c0009f79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f81:	89 f8                	mov    eax,edi
c0009f83:	e8 52 fb ff ff       	call   c0009ada <fp_to_int>
c0009f88:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009f8b:	52                   	push   edx
c0009f8c:	52                   	push   edx
c0009f8d:	55                   	push   ebp
c0009f8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009f92:	e8 99 d3 01 00       	call   c0027330 <__subsf3>
c0009f97:	89 04 24             	mov    DWORD PTR [esp],eax
c0009f9a:	e8 70 ea 01 00       	call   c0028a0f <__extendsfdf2>
c0009f9f:	83 c4 10             	add    esp,0x10
c0009fa2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fa6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009faa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009fae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009fb2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009fb6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009fba:	e8 59 e0 01 00       	call   c0028018 <__muldf3>
c0009fbf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009fc2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009fc6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009fca:	e8 40 ea 01 00       	call   c0028a0f <__extendsfdf2>
c0009fcf:	83 c4 10             	add    esp,0x10
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	52                   	push   edx
c0009fdb:	50                   	push   eax
c0009fdc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fe0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fe4:	e8 b2 d9 01 00       	call   c002799b <__adddf3>
c0009fe9:	59                   	pop    ecx
c0009fea:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009fee:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009ff2:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009ff8:	e8 12 ea 01 00       	call   c0028a0f <__extendsfdf2>
c0009ffd:	83 c4 10             	add    esp,0x10
c000a000:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a004:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a008:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a00c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a010:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a014:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a018:	e8 fb df 01 00       	call   c0028018 <__muldf3>
c000a01d:	83 c4 10             	add    esp,0x10
c000a020:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a024:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a028:	52                   	push   edx
c000a029:	50                   	push   eax
c000a02a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a02e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a032:	e8 64 d9 01 00       	call   c002799b <__adddf3>
c000a037:	5d                   	pop    ebp
c000a038:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a03c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a040:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a046:	e8 c4 e9 01 00       	call   c0028a0f <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a052:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a056:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a05a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a05e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a062:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a066:	e8 ad df 01 00       	call   c0028018 <__muldf3>
c000a06b:	83 c4 10             	add    esp,0x10
c000a06e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a072:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a076:	52                   	push   edx
c000a077:	50                   	push   eax
c000a078:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a07c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a080:	e8 16 d9 01 00       	call   c002799b <__adddf3>
c000a085:	83 c4 10             	add    esp,0x10
c000a088:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c000a08c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a090:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a094:	85 ff                	test   edi,edi
c000a096:	0f 8f d3 fe ff ff    	jg     c0009f6f <calc_output_stereo+0x1fb>
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ac:	e8 ea d8 01 00       	call   c002799b <__adddf3>
c000a0b1:	83 c4 10             	add    esp,0x10
c000a0b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a0b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a0bc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0cc:	e8 47 df 01 00       	call   c0028018 <__muldf3>
c000a0d1:	59                   	pop    ecx
c000a0d2:	5b                   	pop    ebx
c000a0d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a0d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a0db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0e3:	e8 03 e8 01 00       	call   c00288eb <__truncdfsf2>
c000a0e8:	83 c4 10             	add    esp,0x10
c000a0eb:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c000a0f2:	89 03                	mov    DWORD PTR [ebx],eax
c000a0f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a100:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a104:	e8 92 d8 01 00       	call   c002799b <__adddf3>
c000a109:	83 c4 10             	add    esp,0x10
c000a10c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a110:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a114:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a118:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a11c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a120:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a124:	e8 ef de 01 00       	call   c0028018 <__muldf3>
c000a129:	5e                   	pop    esi
c000a12a:	5f                   	pop    edi
c000a12b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a12f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a133:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a137:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a13b:	e8 ab e7 01 00       	call   c00288eb <__truncdfsf2>
c000a140:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c000a147:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a14a:	83 c4 7c             	add    esp,0x7c
c000a14d:	5b                   	pop    ebx
c000a14e:	5e                   	pop    esi
c000a14f:	5f                   	pop    edi
c000a150:	5d                   	pop    ebp
c000a151:	c3                   	ret    

c000a152 <calc_output_quad>:
c000a152:	55                   	push   ebp
c000a153:	57                   	push   edi
c000a154:	56                   	push   esi
c000a155:	89 c6                	mov    esi,eax
c000a157:	53                   	push   ebx
c000a158:	83 ec 7c             	sub    esp,0x7c
c000a15b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a15f:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000a163:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000a16a:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000a171:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a175:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a179:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000a17c:	e8 55 f9 ff ff       	call   c0009ad6 <int_to_fp>
c000a181:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000a184:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000a187:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a18b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a18f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a193:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000a197:	99                   	cdq    
c000a198:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000a19c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1a0:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c000a1a3:	31 d2                	xor    edx,edx
c000a1a5:	0f af d8             	imul   ebx,eax
c000a1a8:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000a1b0:	0f af c7             	imul   eax,edi
c000a1b3:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c000a1b7:	29 c1                	sub    ecx,eax
c000a1b9:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000a1c1:	31 c0                	xor    eax,eax
c000a1c3:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c000a1c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a1ca:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a1ce:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a1d2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a1d6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a1da:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a1de:	89 d8                	mov    eax,ebx
c000a1e0:	83 c7 10             	add    edi,0x10
c000a1e3:	e8 fc f8 ff ff       	call   c0009ae4 <fp_to_double>
c000a1e8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1f0:	89 d8                	mov    eax,ebx
c000a1f2:	e8 e3 f8 ff ff       	call   c0009ada <fp_to_int>
c000a1f7:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c000a1fb:	52                   	push   edx
c000a1fc:	52                   	push   edx
c000a1fd:	51                   	push   ecx
c000a1fe:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a202:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a206:	e8 25 d1 01 00       	call   c0027330 <__subsf3>
c000a20b:	89 04 24             	mov    DWORD PTR [esp],eax
c000a20e:	e8 fc e7 01 00       	call   c0028a0f <__extendsfdf2>
c000a213:	83 c4 10             	add    esp,0x10
c000a216:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a21a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a21e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a226:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a22a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a22e:	e8 e5 dd 01 00       	call   c0028018 <__muldf3>
c000a233:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a237:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a23b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a23e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a242:	e8 c8 e7 01 00       	call   c0028a0f <__extendsfdf2>
c000a247:	83 c4 10             	add    esp,0x10
c000a24a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a24e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a252:	52                   	push   edx
c000a253:	50                   	push   eax
c000a254:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a258:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a25c:	e8 3a d7 01 00       	call   c002799b <__adddf3>
c000a261:	59                   	pop    ecx
c000a262:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a266:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a26a:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a270:	e8 9a e7 01 00       	call   c0028a0f <__extendsfdf2>
c000a275:	83 c4 10             	add    esp,0x10
c000a278:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a27c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a288:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a28c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a290:	e8 83 dd 01 00       	call   c0028018 <__muldf3>
c000a295:	83 c4 10             	add    esp,0x10
c000a298:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a0:	52                   	push   edx
c000a2a1:	50                   	push   eax
c000a2a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a2a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a2aa:	e8 ec d6 01 00       	call   c002799b <__adddf3>
c000a2af:	59                   	pop    ecx
c000a2b0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a2b4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a2b8:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a2be:	e8 4c e7 01 00       	call   c0028a0f <__extendsfdf2>
c000a2c3:	83 c4 10             	add    esp,0x10
c000a2c6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ca:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2de:	e8 35 dd 01 00       	call   c0028018 <__muldf3>
c000a2e3:	83 c4 10             	add    esp,0x10
c000a2e6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ea:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ee:	52                   	push   edx
c000a2ef:	50                   	push   eax
c000a2f0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a2f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a2f8:	e8 9e d6 01 00       	call   c002799b <__adddf3>
c000a2fd:	59                   	pop    ecx
c000a2fe:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a302:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a306:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a30c:	e8 fe e6 01 00       	call   c0028a0f <__extendsfdf2>
c000a311:	83 c4 10             	add    esp,0x10
c000a314:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a318:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a31c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a324:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a328:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a32c:	e8 e7 dc 01 00       	call   c0028018 <__muldf3>
c000a331:	83 c4 10             	add    esp,0x10
c000a334:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a338:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33c:	52                   	push   edx
c000a33d:	50                   	push   eax
c000a33e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a342:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a346:	e8 50 d6 01 00       	call   c002799b <__adddf3>
c000a34b:	59                   	pop    ecx
c000a34c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a350:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a354:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a35a:	e8 b0 e6 01 00       	call   c0028a0f <__extendsfdf2>
c000a35f:	83 c4 10             	add    esp,0x10
c000a362:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a366:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a36a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a36e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a372:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a376:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a37a:	e8 99 dc 01 00       	call   c0028018 <__muldf3>
c000a37f:	83 c4 10             	add    esp,0x10
c000a382:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a386:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38a:	52                   	push   edx
c000a38b:	50                   	push   eax
c000a38c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a390:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a394:	e8 02 d6 01 00       	call   c002799b <__adddf3>
c000a399:	83 c4 10             	add    esp,0x10
c000a39c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a3a0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a3a4:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3a8:	0f 89 30 fe ff ff    	jns    c000a1de <calc_output_quad+0x8c>
c000a3ae:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a3b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a3b6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a3ba:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a3be:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a3c6:	29 c8                	sub    eax,ecx
c000a3c8:	99                   	cdq    
c000a3c9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a3cd:	31 d2                	xor    edx,edx
c000a3cf:	0f af d8             	imul   ebx,eax
c000a3d2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a3d6:	40                   	inc    eax
c000a3d7:	01 cb                	add    ebx,ecx
c000a3d9:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a3de:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a3e2:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a3e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a3ea:	8d 34 86             	lea    esi,[esi+eax*4]
c000a3ed:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a3f5:	31 c0                	xor    eax,eax
c000a3f7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a3fb:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a3ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a403:	89 d8                	mov    eax,ebx
c000a405:	83 ee 10             	sub    esi,0x10
c000a408:	e8 d7 f6 ff ff       	call   c0009ae4 <fp_to_double>
c000a40d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a411:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a415:	89 d8                	mov    eax,ebx
c000a417:	e8 be f6 ff ff       	call   c0009ada <fp_to_int>
c000a41c:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a420:	52                   	push   edx
c000a421:	52                   	push   edx
c000a422:	57                   	push   edi
c000a423:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a427:	e8 04 cf 01 00       	call   c0027330 <__subsf3>
c000a42c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a42f:	e8 db e5 01 00       	call   c0028a0f <__extendsfdf2>
c000a434:	83 c4 10             	add    esp,0x10
c000a437:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a43b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a43f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a443:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a447:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a44b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a44f:	e8 c4 db 01 00       	call   c0028018 <__muldf3>
c000a454:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a457:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a45b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a45f:	e8 ab e5 01 00       	call   c0028a0f <__extendsfdf2>
c000a464:	83 c4 10             	add    esp,0x10
c000a467:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a46b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a46f:	52                   	push   edx
c000a470:	50                   	push   eax
c000a471:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a475:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a479:	e8 1d d5 01 00       	call   c002799b <__adddf3>
c000a47e:	59                   	pop    ecx
c000a47f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a483:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a487:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a48d:	e8 7d e5 01 00       	call   c0028a0f <__extendsfdf2>
c000a492:	83 c4 10             	add    esp,0x10
c000a495:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a499:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a49d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4a5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4ad:	e8 66 db 01 00       	call   c0028018 <__muldf3>
c000a4b2:	83 c4 10             	add    esp,0x10
c000a4b5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4b9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4bd:	52                   	push   edx
c000a4be:	50                   	push   eax
c000a4bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a4c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a4c7:	e8 cf d4 01 00       	call   c002799b <__adddf3>
c000a4cc:	5f                   	pop    edi
c000a4cd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a4d1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a4d5:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a4db:	e8 2f e5 01 00       	call   c0028a0f <__extendsfdf2>
c000a4e0:	83 c4 10             	add    esp,0x10
c000a4e3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4e7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4fb:	e8 18 db 01 00       	call   c0028018 <__muldf3>
c000a500:	83 c4 10             	add    esp,0x10
c000a503:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a507:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a50b:	52                   	push   edx
c000a50c:	50                   	push   eax
c000a50d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a511:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a515:	e8 81 d4 01 00       	call   c002799b <__adddf3>
c000a51a:	59                   	pop    ecx
c000a51b:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a51f:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a523:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a529:	e8 e1 e4 01 00       	call   c0028a0f <__extendsfdf2>
c000a52e:	83 c4 10             	add    esp,0x10
c000a531:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a535:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a539:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a53d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a541:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a545:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a549:	e8 ca da 01 00       	call   c0028018 <__muldf3>
c000a54e:	83 c4 10             	add    esp,0x10
c000a551:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a555:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a559:	52                   	push   edx
c000a55a:	50                   	push   eax
c000a55b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a55f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a563:	e8 33 d4 01 00       	call   c002799b <__adddf3>
c000a568:	5f                   	pop    edi
c000a569:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a56d:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a571:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a577:	e8 93 e4 01 00       	call   c0028a0f <__extendsfdf2>
c000a57c:	83 c4 10             	add    esp,0x10
c000a57f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a583:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a58b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a58f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a593:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a597:	e8 7c da 01 00       	call   c0028018 <__muldf3>
c000a59c:	83 c4 10             	add    esp,0x10
c000a59f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a7:	52                   	push   edx
c000a5a8:	50                   	push   eax
c000a5a9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a5ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a5b1:	e8 e5 d3 01 00       	call   c002799b <__adddf3>
c000a5b6:	83 c4 10             	add    esp,0x10
c000a5b9:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a5bd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a5c1:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a5c5:	85 db                	test   ebx,ebx
c000a5c7:	0f 8f 36 fe ff ff    	jg     c000a403 <calc_output_quad+0x2b1>
c000a5cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5dd:	e8 b9 d3 01 00       	call   c002799b <__adddf3>
c000a5e2:	83 c4 10             	add    esp,0x10
c000a5e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a5e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a5ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5fd:	e8 16 da 01 00       	call   c0028018 <__muldf3>
c000a602:	59                   	pop    ecx
c000a603:	5b                   	pop    ebx
c000a604:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a608:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a60c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a610:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a614:	e8 d2 e2 01 00       	call   c00288eb <__truncdfsf2>
c000a619:	83 c4 10             	add    esp,0x10
c000a61c:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a623:	89 06                	mov    DWORD PTR [esi],eax
c000a625:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a629:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a62d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a631:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a635:	e8 61 d3 01 00       	call   c002799b <__adddf3>
c000a63a:	83 c4 10             	add    esp,0x10
c000a63d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a641:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a655:	e8 be d9 01 00       	call   c0028018 <__muldf3>
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a660:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a664:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a668:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a66c:	e8 7a e2 01 00       	call   c00288eb <__truncdfsf2>
c000a671:	83 c4 10             	add    esp,0x10
c000a674:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a67b:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a67e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a682:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a686:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a68a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a68e:	e8 08 d3 01 00       	call   c002799b <__adddf3>
c000a693:	83 c4 10             	add    esp,0x10
c000a696:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a69a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a69e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ae:	e8 65 d9 01 00       	call   c0028018 <__muldf3>
c000a6b3:	5d                   	pop    ebp
c000a6b4:	59                   	pop    ecx
c000a6b5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a6b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a6bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6c5:	e8 21 e2 01 00       	call   c00288eb <__truncdfsf2>
c000a6ca:	83 c4 10             	add    esp,0x10
c000a6cd:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a6d4:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a6d7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6e7:	e8 af d2 01 00       	call   c002799b <__adddf3>
c000a6ec:	83 c4 10             	add    esp,0x10
c000a6ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a707:	e8 0c d9 01 00       	call   c0028018 <__muldf3>
c000a70c:	5b                   	pop    ebx
c000a70d:	5e                   	pop    esi
c000a70e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a712:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a716:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a71a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a71e:	e8 c8 e1 01 00       	call   c00288eb <__truncdfsf2>
c000a723:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a72a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a72d:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a733:	5b                   	pop    ebx
c000a734:	5e                   	pop    esi
c000a735:	5f                   	pop    edi
c000a736:	5d                   	pop    ebp
c000a737:	c3                   	ret    

c000a738 <calc_output_hex>:
c000a738:	55                   	push   ebp
c000a739:	89 cd                	mov    ebp,ecx
c000a73b:	57                   	push   edi
c000a73c:	56                   	push   esi
c000a73d:	53                   	push   ebx
c000a73e:	89 c3                	mov    ebx,eax
c000a740:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a746:	89 14 24             	mov    DWORD PTR [esp],edx
c000a749:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a750:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a757:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a75b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a75f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a762:	e8 6f f3 ff ff       	call   c0009ad6 <int_to_fp>
c000a767:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a76a:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a76e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a771:	29 c8                	sub    eax,ecx
c000a773:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a777:	99                   	cdq    
c000a778:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a780:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a783:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a78b:	0f af f8             	imul   edi,eax
c000a78e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a791:	01 cf                	add    edi,ecx
c000a793:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a797:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a79a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a79e:	0f af c2             	imul   eax,edx
c000a7a1:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a7a5:	29 c1                	sub    ecx,eax
c000a7a7:	31 d2                	xor    edx,edx
c000a7a9:	31 c0                	xor    eax,eax
c000a7ab:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a7ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a7b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a7b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a7ba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a7be:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a7c2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a7c6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a7ca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a7ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a7d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a7d6:	89 f8                	mov    eax,edi
c000a7d8:	e8 07 f3 ff ff       	call   c0009ae4 <fp_to_double>
c000a7dd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7e5:	89 f8                	mov    eax,edi
c000a7e7:	e8 ee f2 ff ff       	call   c0009ada <fp_to_int>
c000a7ec:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a7f0:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a7f3:	52                   	push   edx
c000a7f4:	52                   	push   edx
c000a7f5:	51                   	push   ecx
c000a7f6:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a7fa:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a801:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a805:	e8 26 cb 01 00       	call   c0027330 <__subsf3>
c000a80a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a80d:	e8 fd e1 01 00       	call   c0028a0f <__extendsfdf2>
c000a812:	83 c4 10             	add    esp,0x10
c000a815:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a819:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a81d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a825:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a829:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a82d:	e8 e6 d7 01 00       	call   c0028018 <__muldf3>
c000a832:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a836:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a83a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a83d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a841:	e8 c9 e1 01 00       	call   c0028a0f <__extendsfdf2>
c000a846:	83 c4 10             	add    esp,0x10
c000a849:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a84d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a851:	52                   	push   edx
c000a852:	50                   	push   eax
c000a853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a857:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a85b:	e8 3b d1 01 00       	call   c002799b <__adddf3>
c000a860:	59                   	pop    ecx
c000a861:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a865:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a869:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a86f:	e8 9b e1 01 00       	call   c0028a0f <__extendsfdf2>
c000a874:	83 c4 10             	add    esp,0x10
c000a877:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a87b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a87f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a883:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a887:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a88b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a88f:	e8 84 d7 01 00       	call   c0028018 <__muldf3>
c000a894:	83 c4 10             	add    esp,0x10
c000a897:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a89b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a89f:	52                   	push   edx
c000a8a0:	50                   	push   eax
c000a8a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8a9:	e8 ed d0 01 00       	call   c002799b <__adddf3>
c000a8ae:	59                   	pop    ecx
c000a8af:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a8b3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a8b7:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a8bd:	e8 4d e1 01 00       	call   c0028a0f <__extendsfdf2>
c000a8c2:	83 c4 10             	add    esp,0x10
c000a8c5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a8c9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8d5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a8d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a8dd:	e8 36 d7 01 00       	call   c0028018 <__muldf3>
c000a8e2:	83 c4 10             	add    esp,0x10
c000a8e5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a8e9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a8ed:	52                   	push   edx
c000a8ee:	50                   	push   eax
c000a8ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a8f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a8f7:	e8 9f d0 01 00       	call   c002799b <__adddf3>
c000a8fc:	59                   	pop    ecx
c000a8fd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a901:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a905:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a90b:	e8 ff e0 01 00       	call   c0028a0f <__extendsfdf2>
c000a910:	83 c4 10             	add    esp,0x10
c000a913:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a917:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a91b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a923:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a927:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a92b:	e8 e8 d6 01 00       	call   c0028018 <__muldf3>
c000a930:	83 c4 10             	add    esp,0x10
c000a933:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a937:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a93b:	52                   	push   edx
c000a93c:	50                   	push   eax
c000a93d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a941:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a945:	e8 51 d0 01 00       	call   c002799b <__adddf3>
c000a94a:	59                   	pop    ecx
c000a94b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a94f:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a953:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a959:	e8 b1 e0 01 00       	call   c0028a0f <__extendsfdf2>
c000a95e:	83 c4 10             	add    esp,0x10
c000a961:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a965:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a969:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a971:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a975:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a979:	e8 9a d6 01 00       	call   c0028018 <__muldf3>
c000a97e:	83 c4 10             	add    esp,0x10
c000a981:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a985:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a989:	52                   	push   edx
c000a98a:	50                   	push   eax
c000a98b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a98f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a993:	e8 03 d0 01 00       	call   c002799b <__adddf3>
c000a998:	59                   	pop    ecx
c000a999:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a99d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a9a1:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a9a7:	e8 63 e0 01 00       	call   c0028a0f <__extendsfdf2>
c000a9ac:	83 c4 10             	add    esp,0x10
c000a9af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a9b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a9b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9bf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9c7:	e8 4c d6 01 00       	call   c0028018 <__muldf3>
c000a9cc:	83 c4 10             	add    esp,0x10
c000a9cf:	83 c6 18             	add    esi,0x18
c000a9d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a9d6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a9da:	52                   	push   edx
c000a9db:	50                   	push   eax
c000a9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a9e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a9e4:	e8 b2 cf 01 00       	call   c002799b <__adddf3>
c000a9e9:	59                   	pop    ecx
c000a9ea:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a9ee:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a9f2:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a9f8:	e8 12 e0 01 00       	call   c0028a0f <__extendsfdf2>
c000a9fd:	83 c4 10             	add    esp,0x10
c000aa00:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000aa04:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000aa08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa18:	e8 fb d5 01 00       	call   c0028018 <__muldf3>
c000aa1d:	83 c4 10             	add    esp,0x10
c000aa20:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aa24:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aa28:	52                   	push   edx
c000aa29:	50                   	push   eax
c000aa2a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa2e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa32:	e8 64 cf 01 00       	call   c002799b <__adddf3>
c000aa37:	83 c4 10             	add    esp,0x10
c000aa3a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000aa3e:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000aa42:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000aa45:	0f 89 8b fd ff ff    	jns    c000a7d6 <calc_output_hex+0x9e>
c000aa4b:	31 f6                	xor    esi,esi
c000aa4d:	31 ff                	xor    edi,edi
c000aa4f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000aa53:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000aa56:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000aa5a:	29 e9                	sub    ecx,ebp
c000aa5c:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000aa60:	29 c8                	sub    eax,ecx
c000aa62:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000aa65:	99                   	cdq    
c000aa66:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000aa6a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000aa6d:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000aa71:	0f af e8             	imul   ebp,eax
c000aa74:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000aa78:	40                   	inc    eax
c000aa79:	01 cd                	add    ebp,ecx
c000aa7b:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000aa80:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000aa84:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000aa88:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000aa8c:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000aa8f:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000aa93:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000aa97:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000aa9b:	89 e8                	mov    eax,ebp
c000aa9d:	e8 42 f0 ff ff       	call   c0009ae4 <fp_to_double>
c000aaa2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaa6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaaa:	89 e8                	mov    eax,ebp
c000aaac:	e8 29 f0 ff ff       	call   c0009ada <fp_to_int>
c000aab1:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000aab5:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000aab8:	52                   	push   edx
c000aab9:	52                   	push   edx
c000aaba:	51                   	push   ecx
c000aabb:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000aac2:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000aac9:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000aacd:	e8 5e c8 01 00       	call   c0027330 <__subsf3>
c000aad2:	89 04 24             	mov    DWORD PTR [esp],eax
c000aad5:	e8 35 df 01 00       	call   c0028a0f <__extendsfdf2>
c000aada:	83 c4 10             	add    esp,0x10
c000aadd:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aae1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aae5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aae9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaed:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaf1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaf5:	e8 1e d5 01 00       	call   c0028018 <__muldf3>
c000aafa:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000ab01:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ab05:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ab08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ab0c:	e8 fe de 01 00       	call   c0028a0f <__extendsfdf2>
c000ab11:	83 c4 10             	add    esp,0x10
c000ab14:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab18:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab1c:	52                   	push   edx
c000ab1d:	50                   	push   eax
c000ab1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab26:	e8 70 ce 01 00       	call   c002799b <__adddf3>
c000ab2b:	59                   	pop    ecx
c000ab2c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ab30:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab34:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000ab3a:	e8 d0 de 01 00       	call   c0028a0f <__extendsfdf2>
c000ab3f:	83 c4 10             	add    esp,0x10
c000ab42:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab46:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab52:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ab56:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ab5a:	e8 b9 d4 01 00       	call   c0028018 <__muldf3>
c000ab5f:	83 c4 10             	add    esp,0x10
c000ab62:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab66:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab6a:	52                   	push   edx
c000ab6b:	50                   	push   eax
c000ab6c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ab70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ab74:	e8 22 ce 01 00       	call   c002799b <__adddf3>
c000ab79:	59                   	pop    ecx
c000ab7a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ab7e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ab82:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000ab88:	e8 82 de 01 00       	call   c0028a0f <__extendsfdf2>
c000ab8d:	83 c4 10             	add    esp,0x10
c000ab90:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab94:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aba0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aba4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aba8:	e8 6b d4 01 00       	call   c0028018 <__muldf3>
c000abad:	83 c4 10             	add    esp,0x10
c000abb0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000abb4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000abb8:	52                   	push   edx
c000abb9:	50                   	push   eax
c000abba:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000abbe:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000abc2:	e8 d4 cd 01 00       	call   c002799b <__adddf3>
c000abc7:	59                   	pop    ecx
c000abc8:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000abcc:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000abd0:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000abd6:	e8 34 de 01 00       	call   c0028a0f <__extendsfdf2>
c000abdb:	83 c4 10             	add    esp,0x10
c000abde:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000abe2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000abe6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abee:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000abf2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000abf6:	e8 1d d4 01 00       	call   c0028018 <__muldf3>
c000abfb:	83 c4 10             	add    esp,0x10
c000abfe:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac02:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac06:	52                   	push   edx
c000ac07:	50                   	push   eax
c000ac08:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ac0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ac10:	e8 86 cd 01 00       	call   c002799b <__adddf3>
c000ac15:	59                   	pop    ecx
c000ac16:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000ac1a:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000ac1e:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000ac24:	e8 e6 dd 01 00       	call   c0028a0f <__extendsfdf2>
c000ac29:	83 c4 10             	add    esp,0x10
c000ac2c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac30:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac3c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac44:	e8 cf d3 01 00       	call   c0028018 <__muldf3>
c000ac49:	83 c4 10             	add    esp,0x10
c000ac4c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac50:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac54:	52                   	push   edx
c000ac55:	50                   	push   eax
c000ac56:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ac5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ac5e:	e8 38 cd 01 00       	call   c002799b <__adddf3>
c000ac63:	59                   	pop    ecx
c000ac64:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000ac68:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000ac6c:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000ac72:	e8 98 dd 01 00       	call   c0028a0f <__extendsfdf2>
c000ac77:	83 c4 10             	add    esp,0x10
c000ac7a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac7e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac8a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac92:	e8 81 d3 01 00       	call   c0028018 <__muldf3>
c000ac97:	83 c4 10             	add    esp,0x10
c000ac9a:	83 eb 18             	sub    ebx,0x18
c000ac9d:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aca1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aca5:	52                   	push   edx
c000aca6:	50                   	push   eax
c000aca7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000acab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000acaf:	e8 e7 cc 01 00       	call   c002799b <__adddf3>
c000acb4:	59                   	pop    ecx
c000acb5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000acb9:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000acbd:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000acc3:	e8 47 dd 01 00       	call   c0028a0f <__extendsfdf2>
c000acc8:	83 c4 10             	add    esp,0x10
c000accb:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000accf:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000acd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acdb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000acdf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ace3:	e8 30 d3 01 00       	call   c0028018 <__muldf3>
c000ace8:	83 c4 10             	add    esp,0x10
c000aceb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acef:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000acf3:	52                   	push   edx
c000acf4:	50                   	push   eax
c000acf5:	57                   	push   edi
c000acf6:	56                   	push   esi
c000acf7:	e8 9f cc 01 00       	call   c002799b <__adddf3>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	89 c6                	mov    esi,eax
c000ad01:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ad04:	89 d7                	mov    edi,edx
c000ad06:	85 ed                	test   ebp,ebp
c000ad08:	0f 8f 8d fd ff ff    	jg     c000aa9b <calc_output_hex+0x363>
c000ad0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad1e:	e8 78 cc 01 00       	call   c002799b <__adddf3>
c000ad23:	83 c4 10             	add    esp,0x10
c000ad26:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad29:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ad2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad3d:	e8 d6 d2 01 00       	call   c0028018 <__muldf3>
c000ad42:	59                   	pop    ecx
c000ad43:	5b                   	pop    ebx
c000ad44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad54:	e8 92 db 01 00       	call   c00288eb <__truncdfsf2>
c000ad59:	83 c4 10             	add    esp,0x10
c000ad5c:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ad63:	89 03                	mov    DWORD PTR [ebx],eax
c000ad65:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ad69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ad6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ad71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ad75:	e8 21 cc 01 00       	call   c002799b <__adddf3>
c000ad7a:	83 c4 10             	add    esp,0x10
c000ad7d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad80:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ad84:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad94:	e8 7f d2 01 00       	call   c0028018 <__muldf3>
c000ad99:	5d                   	pop    ebp
c000ad9a:	59                   	pop    ecx
c000ad9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ada3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ada7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adab:	e8 3b db 01 00       	call   c00288eb <__truncdfsf2>
c000adb0:	83 c4 10             	add    esp,0x10
c000adb3:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000adba:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000adbd:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000adc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000adc5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adcd:	e8 c9 cb 01 00       	call   c002799b <__adddf3>
c000add2:	83 c4 10             	add    esp,0x10
c000add5:	89 04 24             	mov    DWORD PTR [esp],eax
c000add8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000addc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ade0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ade4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ade8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adec:	e8 27 d2 01 00       	call   c0028018 <__muldf3>
c000adf1:	5b                   	pop    ebx
c000adf2:	5d                   	pop    ebp
c000adf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000adf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000adfb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae03:	e8 e3 da 01 00       	call   c00288eb <__truncdfsf2>
c000ae08:	83 c4 10             	add    esp,0x10
c000ae0b:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ae12:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ae15:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ae19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ae1d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ae21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ae25:	e8 71 cb 01 00       	call   c002799b <__adddf3>
c000ae2a:	83 c4 10             	add    esp,0x10
c000ae2d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae30:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ae34:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae44:	e8 cf d1 01 00       	call   c0028018 <__muldf3>
c000ae49:	59                   	pop    ecx
c000ae4a:	5b                   	pop    ebx
c000ae4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ae53:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae5b:	e8 8b da 01 00       	call   c00288eb <__truncdfsf2>
c000ae60:	83 c4 10             	add    esp,0x10
c000ae63:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ae6a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ae6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae7d:	e8 19 cb 01 00       	call   c002799b <__adddf3>
c000ae82:	83 c4 10             	add    esp,0x10
c000ae85:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae88:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ae8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae9c:	e8 77 d1 01 00       	call   c0028018 <__muldf3>
c000aea1:	5d                   	pop    ebp
c000aea2:	59                   	pop    ecx
c000aea3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aea7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aeab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeb3:	e8 33 da 01 00       	call   c00288eb <__truncdfsf2>
c000aeb8:	83 c4 10             	add    esp,0x10
c000aebb:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aec2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aec5:	57                   	push   edi
c000aec6:	56                   	push   esi
c000aec7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aecb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aecf:	e8 c7 ca 01 00       	call   c002799b <__adddf3>
c000aed4:	83 c4 10             	add    esp,0x10
c000aed7:	89 04 24             	mov    DWORD PTR [esp],eax
c000aeda:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aede:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeee:	e8 25 d1 01 00       	call   c0028018 <__muldf3>
c000aef3:	5b                   	pop    ebx
c000aef4:	5e                   	pop    esi
c000aef5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aef9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aefd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000af01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000af05:	e8 e1 d9 01 00       	call   c00288eb <__truncdfsf2>
c000af0a:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000af11:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000af14:	81 c4 9c 00 00 00    	add    esp,0x9c
c000af1a:	5b                   	pop    ebx
c000af1b:	5e                   	pop    esi
c000af1c:	5f                   	pop    edi
c000af1d:	5d                   	pop    ebp
c000af1e:	c3                   	ret    

c000af1f <sinc_reset>:
c000af1f:	56                   	push   esi
c000af20:	53                   	push   ebx
c000af21:	51                   	push   ecx
c000af22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af26:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000af29:	85 db                	test   ebx,ebx
c000af2b:	74 59                	je     c000af86 <sinc_reset+0x67>
c000af2d:	31 d2                	xor    edx,edx
c000af2f:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000af36:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000af39:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000af3c:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000af43:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000af4a:	31 c0                	xor    eax,eax
c000af4c:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000af52:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000af55:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000af58:	52                   	push   edx
c000af59:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000af5c:	c1 e0 02             	shl    eax,0x2
c000af5f:	50                   	push   eax
c000af60:	6a 00                	push   0x0
c000af62:	56                   	push   esi
c000af63:	e8 e8 57 ff ff       	call   c0000750 <memset>
c000af68:	83 c4 0c             	add    esp,0xc
c000af6b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000af6e:	c1 e0 02             	shl    eax,0x2
c000af71:	50                   	push   eax
c000af72:	68 aa 00 00 00       	push   0xaa
c000af77:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000af7a:	8d 04 86             	lea    eax,[esi+eax*4]
c000af7d:	50                   	push   eax
c000af7e:	e8 cd 57 ff ff       	call   c0000750 <memset>
c000af83:	83 c4 10             	add    esp,0x10
c000af86:	58                   	pop    eax
c000af87:	5b                   	pop    ebx
c000af88:	5e                   	pop    esi
c000af89:	c3                   	ret    

c000af8a <calc_output_multi>:
c000af8a:	55                   	push   ebp
c000af8b:	57                   	push   edi
c000af8c:	56                   	push   esi
c000af8d:	89 c6                	mov    esi,eax
c000af8f:	53                   	push   ebx
c000af90:	83 ec 4c             	sub    esp,0x4c
c000af93:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000af97:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000af9b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000af9f:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000afa3:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000afa7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000afab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000afaf:	8d 46 44             	lea    eax,[esi+0x44]
c000afb2:	89 04 24             	mov    DWORD PTR [esp],eax
c000afb5:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000afbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000afbf:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000afc2:	e8 0f eb ff ff       	call   c0009ad6 <int_to_fp>
c000afc7:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000afca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000afce:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000afd2:	99                   	cdq    
c000afd3:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000afd7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000afdb:	0f af d0             	imul   edx,eax
c000afde:	0f af c3             	imul   eax,ebx
c000afe1:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000afe5:	29 c1                	sub    ecx,eax
c000afe7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000afeb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000afef:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000aff6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000affa:	57                   	push   edi
c000affb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afff:	6a 00                	push   0x0
c000b001:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b005:	e8 46 57 ff ff       	call   c0000750 <memset>
c000b00a:	83 c4 10             	add    esp,0x10
c000b00d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b011:	89 df                	mov    edi,ebx
c000b013:	e8 cc ea ff ff       	call   c0009ae4 <fp_to_double>
c000b018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b01c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b020:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b024:	e8 b1 ea ff ff       	call   c0009ada <fp_to_int>
c000b029:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b02c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b02f:	51                   	push   ecx
c000b030:	51                   	push   ecx
c000b031:	55                   	push   ebp
c000b032:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b036:	e8 f5 c2 01 00       	call   c0027330 <__subsf3>
c000b03b:	89 04 24             	mov    DWORD PTR [esp],eax
c000b03e:	e8 cc d9 01 00       	call   c0028a0f <__extendsfdf2>
c000b043:	83 c4 10             	add    esp,0x10
c000b046:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b04a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b04e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b052:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b056:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b05a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b05e:	e8 b5 cf 01 00       	call   c0028018 <__muldf3>
c000b063:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b066:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b06a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b06e:	e8 9c d9 01 00       	call   c0028a0f <__extendsfdf2>
c000b073:	83 c4 10             	add    esp,0x10
c000b076:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b07a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07e:	52                   	push   edx
c000b07f:	50                   	push   eax
c000b080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b088:	e8 0e c9 01 00       	call   c002799b <__adddf3>
c000b08d:	83 c4 10             	add    esp,0x10
c000b090:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b094:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b098:	89 f8                	mov    eax,edi
c000b09a:	b9 08 00 00 00       	mov    ecx,0x8
c000b09f:	99                   	cdq    
c000b0a0:	f7 f9                	idiv   ecx
c000b0a2:	4a                   	dec    edx
c000b0a3:	83 fa 06             	cmp    edx,0x6
c000b0a6:	77 07                	ja     c000b0af <calc_output_multi+0x125>
c000b0a8:	ff 24 95 e4 a2 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5d1c]
c000b0af:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b2:	4f                   	dec    edi
c000b0b3:	83 ec 0c             	sub    esp,0xc
c000b0b6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0bd:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0c8:	e8 42 d9 01 00       	call   c0028a0f <__extendsfdf2>
c000b0cd:	83 c4 10             	add    esp,0x10
c000b0d0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	e8 2b cf 01 00       	call   c0028018 <__muldf3>
c000b0ed:	83 c4 10             	add    esp,0x10
c000b0f0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0f8:	52                   	push   edx
c000b0f9:	50                   	push   eax
c000b0fa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0fd:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b100:	e8 96 c8 01 00       	call   c002799b <__adddf3>
c000b105:	83 c4 10             	add    esp,0x10
c000b108:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b10e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b111:	4f                   	dec    edi
c000b112:	83 ec 0c             	sub    esp,0xc
c000b115:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b118:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b11c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b123:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b127:	e8 e3 d8 01 00       	call   c0028a0f <__extendsfdf2>
c000b12c:	83 c4 10             	add    esp,0x10
c000b12f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b133:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b137:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	e8 cc ce 01 00       	call   c0028018 <__muldf3>
c000b14c:	83 c4 10             	add    esp,0x10
c000b14f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b153:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b157:	52                   	push   edx
c000b158:	50                   	push   eax
c000b159:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b15c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b15f:	e8 37 c8 01 00       	call   c002799b <__adddf3>
c000b164:	83 c4 10             	add    esp,0x10
c000b167:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b16d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b170:	4f                   	dec    edi
c000b171:	83 ec 0c             	sub    esp,0xc
c000b174:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b177:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b17b:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b182:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b186:	e8 84 d8 01 00       	call   c0028a0f <__extendsfdf2>
c000b18b:	83 c4 10             	add    esp,0x10
c000b18e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b192:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b196:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b1a2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b1a6:	e8 6d ce 01 00       	call   c0028018 <__muldf3>
c000b1ab:	83 c4 10             	add    esp,0x10
c000b1ae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b1b2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b1b6:	52                   	push   edx
c000b1b7:	50                   	push   eax
c000b1b8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1bb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1be:	e8 d8 c7 01 00       	call   c002799b <__adddf3>
c000b1c3:	83 c4 10             	add    esp,0x10
c000b1c6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1c9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1cc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b1cf:	4f                   	dec    edi
c000b1d0:	83 ec 0c             	sub    esp,0xc
c000b1d3:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1da:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1e1:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1e5:	e8 25 d8 01 00       	call   c0028a0f <__extendsfdf2>
c000b1ea:	83 c4 10             	add    esp,0x10
c000b1ed:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b1f1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b1f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1fd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b201:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b205:	e8 0e ce 01 00       	call   c0028018 <__muldf3>
c000b20a:	83 c4 10             	add    esp,0x10
c000b20d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b211:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b215:	52                   	push   edx
c000b216:	50                   	push   eax
c000b217:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b21a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b21d:	e8 79 c7 01 00       	call   c002799b <__adddf3>
c000b222:	83 c4 10             	add    esp,0x10
c000b225:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b228:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b22b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b22e:	4f                   	dec    edi
c000b22f:	83 ec 0c             	sub    esp,0xc
c000b232:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b235:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b239:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b240:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b244:	e8 c6 d7 01 00       	call   c0028a0f <__extendsfdf2>
c000b249:	83 c4 10             	add    esp,0x10
c000b24c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b250:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b258:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b25c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b260:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b264:	e8 af cd 01 00       	call   c0028018 <__muldf3>
c000b269:	83 c4 10             	add    esp,0x10
c000b26c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b270:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b274:	52                   	push   edx
c000b275:	50                   	push   eax
c000b276:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b279:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b27c:	e8 1a c7 01 00       	call   c002799b <__adddf3>
c000b281:	83 c4 10             	add    esp,0x10
c000b284:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b287:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b28a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b28d:	4f                   	dec    edi
c000b28e:	83 ec 0c             	sub    esp,0xc
c000b291:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b294:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b298:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b29f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2a3:	e8 67 d7 01 00       	call   c0028a0f <__extendsfdf2>
c000b2a8:	83 c4 10             	add    esp,0x10
c000b2ab:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b2af:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b2b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b2bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b2c3:	e8 50 cd 01 00       	call   c0028018 <__muldf3>
c000b2c8:	83 c4 10             	add    esp,0x10
c000b2cb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b2cf:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b2d3:	52                   	push   edx
c000b2d4:	50                   	push   eax
c000b2d5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2d8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2db:	e8 bb c6 01 00       	call   c002799b <__adddf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2e6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2e9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b2ec:	4f                   	dec    edi
c000b2ed:	83 ec 0c             	sub    esp,0xc
c000b2f0:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2f7:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2fe:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b302:	e8 08 d7 01 00       	call   c0028a0f <__extendsfdf2>
c000b307:	83 c4 10             	add    esp,0x10
c000b30a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b30e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b312:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b316:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b31a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b31e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b322:	e8 f1 cc 01 00       	call   c0028018 <__muldf3>
c000b327:	83 c4 10             	add    esp,0x10
c000b32a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b32e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b332:	52                   	push   edx
c000b333:	50                   	push   eax
c000b334:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b337:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b33a:	e8 5c c6 01 00       	call   c002799b <__adddf3>
c000b33f:	83 c4 10             	add    esp,0x10
c000b342:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b345:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b348:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b34b:	4f                   	dec    edi
c000b34c:	83 ec 0c             	sub    esp,0xc
c000b34f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b352:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b356:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b35d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b361:	e8 a9 d6 01 00       	call   c0028a0f <__extendsfdf2>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b36d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b371:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b375:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b379:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b37d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b381:	e8 92 cc 01 00       	call   c0028018 <__muldf3>
c000b386:	83 c4 10             	add    esp,0x10
c000b389:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b38d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b391:	52                   	push   edx
c000b392:	50                   	push   eax
c000b393:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b396:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b399:	e8 fd c5 01 00       	call   c002799b <__adddf3>
c000b39e:	83 c4 10             	add    esp,0x10
c000b3a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3a7:	85 ff                	test   edi,edi
c000b3a9:	0f 8f e9 fc ff ff    	jg     c000b098 <calc_output_multi+0x10e>
c000b3af:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b3b3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b3b7:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b3bb:	0f 89 4c fc ff ff    	jns    c000b00d <calc_output_multi+0x83>
c000b3c1:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b3c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b3c9:	29 c8                	sub    eax,ecx
c000b3cb:	99                   	cdq    
c000b3cc:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b3d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b3d4:	0f af d0             	imul   edx,eax
c000b3d7:	40                   	inc    eax
c000b3d8:	01 d1                	add    ecx,edx
c000b3da:	0f af c3             	imul   eax,ebx
c000b3dd:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b3e1:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b3e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3e8:	55                   	push   ebp
c000b3e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3ed:	6a 00                	push   0x0
c000b3ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b3f3:	e8 58 53 ff ff       	call   c0000750 <memset>
c000b3f8:	83 c4 10             	add    esp,0x10
c000b3fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b3ff:	e8 e0 e6 ff ff       	call   c0009ae4 <fp_to_double>
c000b404:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b40c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b410:	e8 c5 e6 ff ff       	call   c0009ada <fp_to_int>
c000b415:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b418:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b41b:	57                   	push   edi
c000b41c:	57                   	push   edi
c000b41d:	89 df                	mov    edi,ebx
c000b41f:	55                   	push   ebp
c000b420:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b424:	e8 07 bf 01 00       	call   c0027330 <__subsf3>
c000b429:	89 04 24             	mov    DWORD PTR [esp],eax
c000b42c:	e8 de d5 01 00       	call   c0028a0f <__extendsfdf2>
c000b431:	83 c4 10             	add    esp,0x10
c000b434:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b438:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b43c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b444:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b44c:	e8 c7 cb 01 00       	call   c0028018 <__muldf3>
c000b451:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b454:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b458:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b45c:	e8 ae d5 01 00       	call   c0028a0f <__extendsfdf2>
c000b461:	83 c4 10             	add    esp,0x10
c000b464:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b468:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46c:	52                   	push   edx
c000b46d:	50                   	push   eax
c000b46e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b476:	e8 20 c5 01 00       	call   c002799b <__adddf3>
c000b47b:	83 c4 10             	add    esp,0x10
c000b47e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b482:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b486:	89 f8                	mov    eax,edi
c000b488:	b9 08 00 00 00       	mov    ecx,0x8
c000b48d:	99                   	cdq    
c000b48e:	f7 f9                	idiv   ecx
c000b490:	4a                   	dec    edx
c000b491:	83 fa 06             	cmp    edx,0x6
c000b494:	77 07                	ja     c000b49d <calc_output_multi+0x513>
c000b496:	ff 24 95 00 a3 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5d00]
c000b49d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a1:	4f                   	dec    edi
c000b4a2:	83 ec 0c             	sub    esp,0xc
c000b4a5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4ac:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4b3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4b7:	e8 53 d5 01 00       	call   c0028a0f <__extendsfdf2>
c000b4bc:	83 c4 10             	add    esp,0x10
c000b4bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4d7:	e8 3c cb 01 00       	call   c0028018 <__muldf3>
c000b4dc:	83 c4 10             	add    esp,0x10
c000b4df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4e7:	52                   	push   edx
c000b4e8:	50                   	push   eax
c000b4e9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4ec:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4ef:	e8 a7 c4 01 00       	call   c002799b <__adddf3>
c000b4f4:	83 c4 10             	add    esp,0x10
c000b4f7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4fa:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b501:	4f                   	dec    edi
c000b502:	83 ec 0c             	sub    esp,0xc
c000b505:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b508:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b50c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b513:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b517:	e8 f3 d4 01 00       	call   c0028a0f <__extendsfdf2>
c000b51c:	83 c4 10             	add    esp,0x10
c000b51f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b523:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b527:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b533:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b537:	e8 dc ca 01 00       	call   c0028018 <__muldf3>
c000b53c:	83 c4 10             	add    esp,0x10
c000b53f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b543:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b547:	52                   	push   edx
c000b548:	50                   	push   eax
c000b549:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b54c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b54f:	e8 47 c4 01 00       	call   c002799b <__adddf3>
c000b554:	83 c4 10             	add    esp,0x10
c000b557:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b55a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b55d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b561:	4f                   	dec    edi
c000b562:	83 ec 0c             	sub    esp,0xc
c000b565:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b568:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b56c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b573:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b577:	e8 93 d4 01 00       	call   c0028a0f <__extendsfdf2>
c000b57c:	83 c4 10             	add    esp,0x10
c000b57f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b583:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b587:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b593:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b597:	e8 7c ca 01 00       	call   c0028018 <__muldf3>
c000b59c:	83 c4 10             	add    esp,0x10
c000b59f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b5a7:	52                   	push   edx
c000b5a8:	50                   	push   eax
c000b5a9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b5ac:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b5af:	e8 e7 c3 01 00       	call   c002799b <__adddf3>
c000b5b4:	83 c4 10             	add    esp,0x10
c000b5b7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b5ba:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5c1:	4f                   	dec    edi
c000b5c2:	83 ec 0c             	sub    esp,0xc
c000b5c5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b5c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b5cc:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b5d3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b5d7:	e8 33 d4 01 00       	call   c0028a0f <__extendsfdf2>
c000b5dc:	83 c4 10             	add    esp,0x10
c000b5df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b5f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b5f7:	e8 1c ca 01 00       	call   c0028018 <__muldf3>
c000b5fc:	83 c4 10             	add    esp,0x10
c000b5ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b603:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b607:	52                   	push   edx
c000b608:	50                   	push   eax
c000b609:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b60c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b60f:	e8 87 c3 01 00       	call   c002799b <__adddf3>
c000b614:	83 c4 10             	add    esp,0x10
c000b617:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b61a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b61d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b621:	4f                   	dec    edi
c000b622:	83 ec 0c             	sub    esp,0xc
c000b625:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b628:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b62c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b633:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b637:	e8 d3 d3 01 00       	call   c0028a0f <__extendsfdf2>
c000b63c:	83 c4 10             	add    esp,0x10
c000b63f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b643:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b647:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b653:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b657:	e8 bc c9 01 00       	call   c0028018 <__muldf3>
c000b65c:	83 c4 10             	add    esp,0x10
c000b65f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b663:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b667:	52                   	push   edx
c000b668:	50                   	push   eax
c000b669:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b66c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b66f:	e8 27 c3 01 00       	call   c002799b <__adddf3>
c000b674:	83 c4 10             	add    esp,0x10
c000b677:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b67a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b67d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b681:	4f                   	dec    edi
c000b682:	83 ec 0c             	sub    esp,0xc
c000b685:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b688:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b68c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b693:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b697:	e8 73 d3 01 00       	call   c0028a0f <__extendsfdf2>
c000b69c:	83 c4 10             	add    esp,0x10
c000b69f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b6a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b6a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6b7:	e8 5c c9 01 00       	call   c0028018 <__muldf3>
c000b6bc:	83 c4 10             	add    esp,0x10
c000b6bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b6c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b6c7:	52                   	push   edx
c000b6c8:	50                   	push   eax
c000b6c9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b6cc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b6cf:	e8 c7 c2 01 00       	call   c002799b <__adddf3>
c000b6d4:	83 c4 10             	add    esp,0x10
c000b6d7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b6da:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b6dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6e1:	4f                   	dec    edi
c000b6e2:	83 ec 0c             	sub    esp,0xc
c000b6e5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b6e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b6ec:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b6f3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b6f7:	e8 13 d3 01 00       	call   c0028a0f <__extendsfdf2>
c000b6fc:	83 c4 10             	add    esp,0x10
c000b6ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b703:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b707:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b70b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b70f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b713:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b717:	e8 fc c8 01 00       	call   c0028018 <__muldf3>
c000b71c:	83 c4 10             	add    esp,0x10
c000b71f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b723:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b727:	52                   	push   edx
c000b728:	50                   	push   eax
c000b729:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b72c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b72f:	e8 67 c2 01 00       	call   c002799b <__adddf3>
c000b734:	83 c4 10             	add    esp,0x10
c000b737:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b73a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b73d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b741:	4f                   	dec    edi
c000b742:	83 ec 0c             	sub    esp,0xc
c000b745:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b748:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b74c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b753:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b757:	e8 b3 d2 01 00       	call   c0028a0f <__extendsfdf2>
c000b75c:	83 c4 10             	add    esp,0x10
c000b75f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b763:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b767:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b76b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b76f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b773:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b777:	e8 9c c8 01 00       	call   c0028018 <__muldf3>
c000b77c:	83 c4 10             	add    esp,0x10
c000b77f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b783:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b787:	52                   	push   edx
c000b788:	50                   	push   eax
c000b789:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b78c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b78f:	e8 07 c2 01 00       	call   c002799b <__adddf3>
c000b794:	83 c4 10             	add    esp,0x10
c000b797:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b79a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b79d:	85 ff                	test   edi,edi
c000b79f:	0f 8f e1 fc ff ff    	jg     c000b486 <calc_output_multi+0x4fc>
c000b7a5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b7a9:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b7ad:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b7b1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b7b6:	0f 8f 3f fc ff ff    	jg     c000b3fb <calc_output_multi+0x471>
c000b7bc:	be 08 00 00 00       	mov    esi,0x8
c000b7c1:	89 d8                	mov    eax,ebx
c000b7c3:	99                   	cdq    
c000b7c4:	f7 fe                	idiv   esi
c000b7c6:	4a                   	dec    edx
c000b7c7:	83 fa 06             	cmp    edx,0x6
c000b7ca:	77 07                	ja     c000b7d3 <calc_output_multi+0x849>
c000b7cc:	ff 24 95 1c a3 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5ce4]
c000b7d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7d7:	4b                   	dec    ebx
c000b7d8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7dc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7e3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7e7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7ea:	e8 ac c1 01 00       	call   c002799b <__adddf3>
c000b7ef:	83 c4 10             	add    esp,0x10
c000b7f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b806:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b80a:	e8 09 c8 01 00       	call   c0028018 <__muldf3>
c000b80f:	5d                   	pop    ebp
c000b810:	59                   	pop    ecx
c000b811:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b815:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b819:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b81d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b821:	e8 c5 d0 01 00       	call   c00288eb <__truncdfsf2>
c000b826:	83 c4 10             	add    esp,0x10
c000b829:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b82d:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b830:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b834:	4b                   	dec    ebx
c000b835:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b839:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b840:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b844:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b847:	e8 4f c1 01 00       	call   c002799b <__adddf3>
c000b84c:	83 c4 10             	add    esp,0x10
c000b84f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b853:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b857:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b85b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b85f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b863:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b867:	e8 ac c7 01 00       	call   c0028018 <__muldf3>
c000b86c:	59                   	pop    ecx
c000b86d:	5f                   	pop    edi
c000b86e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b872:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b876:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b87a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b87e:	e8 68 d0 01 00       	call   c00288eb <__truncdfsf2>
c000b883:	83 c4 10             	add    esp,0x10
c000b886:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b88a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b88d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b891:	4b                   	dec    ebx
c000b892:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b896:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b899:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b89d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b8a1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b8a4:	e8 f2 c0 01 00       	call   c002799b <__adddf3>
c000b8a9:	83 c4 10             	add    esp,0x10
c000b8ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8c4:	e8 4f c7 01 00       	call   c0028018 <__muldf3>
c000b8c9:	5f                   	pop    edi
c000b8ca:	5d                   	pop    ebp
c000b8cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8db:	e8 0b d0 01 00       	call   c00288eb <__truncdfsf2>
c000b8e0:	83 c4 10             	add    esp,0x10
c000b8e3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b8e7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b8ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8ee:	4b                   	dec    ebx
c000b8ef:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b8f3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b8f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b8fa:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b8fe:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b901:	e8 95 c0 01 00       	call   c002799b <__adddf3>
c000b906:	83 c4 10             	add    esp,0x10
c000b909:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b90d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b911:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b91d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b921:	e8 f2 c6 01 00       	call   c0028018 <__muldf3>
c000b926:	5d                   	pop    ebp
c000b927:	59                   	pop    ecx
c000b928:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b92c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b930:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b934:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b938:	e8 ae cf 01 00       	call   c00288eb <__truncdfsf2>
c000b93d:	83 c4 10             	add    esp,0x10
c000b940:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b944:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b947:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b94b:	4b                   	dec    ebx
c000b94c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b950:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b953:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b957:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b95b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b95e:	e8 38 c0 01 00       	call   c002799b <__adddf3>
c000b963:	83 c4 10             	add    esp,0x10
c000b966:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b96a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b96e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97e:	e8 95 c6 01 00       	call   c0028018 <__muldf3>
c000b983:	59                   	pop    ecx
c000b984:	5f                   	pop    edi
c000b985:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b989:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b98d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b991:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b995:	e8 51 cf 01 00       	call   c00288eb <__truncdfsf2>
c000b99a:	83 c4 10             	add    esp,0x10
c000b99d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b9a1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b9a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9a8:	4b                   	dec    ebx
c000b9a9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b9ad:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b9b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9b4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b9b8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b9bb:	e8 db bf 01 00       	call   c002799b <__adddf3>
c000b9c0:	83 c4 10             	add    esp,0x10
c000b9c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b9c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b9cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9db:	e8 38 c6 01 00       	call   c0028018 <__muldf3>
c000b9e0:	5f                   	pop    edi
c000b9e1:	5d                   	pop    ebp
c000b9e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b9e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9f2:	e8 f4 ce 01 00       	call   c00288eb <__truncdfsf2>
c000b9f7:	83 c4 10             	add    esp,0x10
c000b9fa:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b9fe:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000ba01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba05:	4b                   	dec    ebx
c000ba06:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba0a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba11:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba15:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba18:	e8 7e bf 01 00       	call   c002799b <__adddf3>
c000ba1d:	83 c4 10             	add    esp,0x10
c000ba20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba24:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba38:	e8 db c5 01 00       	call   c0028018 <__muldf3>
c000ba3d:	5d                   	pop    ebp
c000ba3e:	59                   	pop    ecx
c000ba3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba43:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba4f:	e8 97 ce 01 00       	call   c00288eb <__truncdfsf2>
c000ba54:	83 c4 10             	add    esp,0x10
c000ba57:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000ba5b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000ba5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba62:	4b                   	dec    ebx
c000ba63:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba67:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba6e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba72:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba75:	e8 21 bf 01 00       	call   c002799b <__adddf3>
c000ba7a:	83 c4 10             	add    esp,0x10
c000ba7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba81:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba95:	e8 7e c5 01 00       	call   c0028018 <__muldf3>
c000ba9a:	59                   	pop    ecx
c000ba9b:	5f                   	pop    edi
c000ba9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000baa0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000baa4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baa8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baac:	e8 3a ce 01 00       	call   c00288eb <__truncdfsf2>
c000bab1:	83 c4 10             	add    esp,0x10
c000bab4:	85 db                	test   ebx,ebx
c000bab6:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000baba:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000babd:	0f 8f fe fc ff ff    	jg     c000b7c1 <calc_output_multi+0x837>
c000bac3:	83 c4 4c             	add    esp,0x4c
c000bac6:	5b                   	pop    ebx
c000bac7:	5e                   	pop    esi
c000bac8:	5f                   	pop    edi
c000bac9:	5d                   	pop    ebp
c000baca:	c3                   	ret    

c000bacb <double_to_fp>:
c000bacb:	83 ec 0c             	sub    esp,0xc
c000bace:	68 00 00 b0 40       	push   0x40b00000
c000bad3:	6a 00                	push   0x0
c000bad5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000badd:	e8 36 c5 01 00       	call   c0028018 <__muldf3>
c000bae2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bae6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000baea:	83 c4 1c             	add    esp,0x1c
c000baed:	e9 ae cf 01 00       	jmp    c0028aa0 <lrint>

c000baf2 <prepare_data>:
c000baf2:	55                   	push   ebp
c000baf3:	57                   	push   edi
c000baf4:	56                   	push   esi
c000baf5:	53                   	push   ebx
c000baf6:	83 ec 1c             	sub    esp,0x1c
c000baf9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000bafd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bb01:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000bb05:	0f 89 57 01 00 00    	jns    c000bc62 <prepare_data+0x170>
c000bb0b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000bb0e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000bb11:	85 d2                	test   edx,edx
c000bb13:	75 0d                	jne    c000bb22 <prepare_data+0x30>
c000bb15:	8d 14 36             	lea    edx,[esi+esi*1]
c000bb18:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000bb1b:	29 d0                	sub    eax,edx
c000bb1d:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000bb20:	eb 44                	jmp    c000bb66 <prepare_data+0x74>
c000bb22:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000bb25:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000bb28:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000bb2b:	39 c1                	cmp    ecx,eax
c000bb2d:	7d 04                	jge    c000bb33 <prepare_data+0x41>
c000bb2f:	29 d0                	sub    eax,edx
c000bb31:	eb 2d                	jmp    c000bb60 <prepare_data+0x6e>
c000bb33:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000bb39:	29 d7                	sub    edi,edx
c000bb3b:	01 f7                	add    edi,esi
c000bb3d:	51                   	push   ecx
c000bb3e:	29 f2                	sub    edx,esi
c000bb40:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000bb47:	8d 14 90             	lea    edx,[eax+edx*4]
c000bb4a:	51                   	push   ecx
c000bb4b:	52                   	push   edx
c000bb4c:	50                   	push   eax
c000bb4d:	e8 36 4b ff ff       	call   c0000688 <memmove>
c000bb52:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000bb55:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000bb58:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000bb5b:	29 f0                	sub    eax,esi
c000bb5d:	83 c4 10             	add    esp,0x10
c000bb60:	29 f0                	sub    eax,esi
c000bb62:	79 02                	jns    c000bb66 <prepare_data+0x74>
c000bb64:	31 c0                	xor    eax,eax
c000bb66:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000bb69:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000bb6c:	29 ef                	sub    edi,ebp
c000bb6e:	39 c7                	cmp    edi,eax
c000bb70:	7e 02                	jle    c000bb74 <prepare_data+0x82>
c000bb72:	89 c7                	mov    edi,eax
c000bb74:	89 f8                	mov    eax,edi
c000bb76:	99                   	cdq    
c000bb77:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb7a:	b8 15 00 00 00       	mov    eax,0x15
c000bb7f:	29 d7                	sub    edi,edx
c000bb81:	0f 88 dd 00 00 00    	js     c000bc64 <prepare_data+0x172>
c000bb87:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000bb8a:	8d 14 39             	lea    edx,[ecx+edi*1]
c000bb8d:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000bb90:	0f 8f ce 00 00 00    	jg     c000bc64 <prepare_data+0x172>
c000bb96:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000bb9c:	50                   	push   eax
c000bb9d:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000bba4:	50                   	push   eax
c000bba5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bba9:	8b 00                	mov    eax,DWORD PTR [eax]
c000bbab:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000bbae:	50                   	push   eax
c000bbaf:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bbb2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bbb6:	50                   	push   eax
c000bbb7:	e8 8a 4a ff ff       	call   c0000646 <memcpy>
c000bbbc:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000bbbf:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000bbc2:	01 fd                	add    ebp,edi
c000bbc4:	01 f9                	add    ecx,edi
c000bbc6:	83 c4 10             	add    esp,0x10
c000bbc9:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000bbcc:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000bbcf:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000bbd2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bbd6:	0f 85 86 00 00 00    	jne    c000bc62 <prepare_data+0x170>
c000bbdc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000bbdf:	89 e8                	mov    eax,ebp
c000bbe1:	8d 3c 36             	lea    edi,[esi+esi*1]
c000bbe4:	29 c8                	sub    eax,ecx
c000bbe6:	39 f8                	cmp    eax,edi
c000bbe8:	7d 78                	jge    c000bc62 <prepare_data+0x170>
c000bbea:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bbee:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000bbf2:	74 6e                	je     c000bc62 <prepare_data+0x170>
c000bbf4:	8d 7e 04             	lea    edi,[esi+0x4]
c000bbf7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000bbfb:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000bbfe:	29 ef                	sub    edi,ebp
c000bc00:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000bc04:	7c 29                	jl     c000bc2f <prepare_data+0x13d>
c000bc06:	8d 3c 30             	lea    edi,[eax+esi*1]
c000bc09:	29 f1                	sub    ecx,esi
c000bc0b:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000bc12:	55                   	push   ebp
c000bc13:	50                   	push   eax
c000bc14:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bc17:	50                   	push   eax
c000bc18:	52                   	push   edx
c000bc19:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc1d:	e8 66 4a ff ff       	call   c0000688 <memmove>
c000bc22:	83 c4 10             	add    esp,0x10
c000bc25:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000bc28:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000bc2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bc2f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bc32:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bc35:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000bc38:	83 c6 05             	add    esi,0x5
c000bc3b:	78 07                	js     c000bc44 <prepare_data+0x152>
c000bc3d:	8d 3c 30             	lea    edi,[eax+esi*1]
c000bc40:	39 cf                	cmp    edi,ecx
c000bc42:	7e 04                	jle    c000bc48 <prepare_data+0x156>
c000bc44:	89 ce                	mov    esi,ecx
c000bc46:	29 c6                	sub    esi,eax
c000bc48:	8d 04 82             	lea    eax,[edx+eax*4]
c000bc4b:	51                   	push   ecx
c000bc4c:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000bc53:	51                   	push   ecx
c000bc54:	6a 00                	push   0x0
c000bc56:	50                   	push   eax
c000bc57:	e8 f4 4a ff ff       	call   c0000750 <memset>
c000bc5c:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000bc5f:	83 c4 10             	add    esp,0x10
c000bc62:	31 c0                	xor    eax,eax
c000bc64:	83 c4 1c             	add    esp,0x1c
c000bc67:	5b                   	pop    ebx
c000bc68:	5e                   	pop    esi
c000bc69:	5f                   	pop    edi
c000bc6a:	5d                   	pop    ebp
c000bc6b:	c3                   	ret    

c000bc6c <sinc_multichan_vari_process>:
c000bc6c:	55                   	push   ebp
c000bc6d:	ba 05 00 00 00       	mov    edx,0x5
c000bc72:	57                   	push   edi
c000bc73:	56                   	push   esi
c000bc74:	53                   	push   ebx
c000bc75:	83 ec 4c             	sub    esp,0x4c
c000bc78:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000bc7c:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000bc80:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000bc83:	85 db                	test   ebx,ebx
c000bc85:	0f 84 9b 06 00 00    	je     c000c326 <sinc_multichan_vari_process+0x6ba>
c000bc8b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000bc8e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc91:	0f af c5             	imul   eax,ebp
c000bc94:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bc97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bc9a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bca1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bca8:	0f af c5             	imul   eax,ebp
c000bcab:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bcae:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bcb1:	8b 06                	mov    eax,DWORD PTR [esi]
c000bcb3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bcb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcbb:	68 00 00 70 3f       	push   0x3f700000
c000bcc0:	6a 00                	push   0x0
c000bcc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcca:	e8 18 cc 01 00       	call   c00288e7 <__ltdf2>
c000bccf:	83 c4 10             	add    esp,0x10
c000bcd2:	ba 16 00 00 00       	mov    edx,0x16
c000bcd7:	85 c0                	test   eax,eax
c000bcd9:	0f 88 47 06 00 00    	js     c000c326 <sinc_multichan_vari_process+0x6ba>
c000bcdf:	68 00 00 70 40       	push   0x40700000
c000bce4:	6a 00                	push   0x0
c000bce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcee:	e8 d6 cb 01 00       	call   c00288c9 <__gtdf2>
c000bcf3:	83 c4 10             	add    esp,0x10
c000bcf6:	ba 16 00 00 00       	mov    edx,0x16
c000bcfb:	85 c0                	test   eax,eax
c000bcfd:	0f 8f 23 06 00 00    	jg     c000c326 <sinc_multichan_vari_process+0x6ba>
c000bd03:	83 ec 0c             	sub    esp,0xc
c000bd06:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bd09:	e8 6d c9 01 00       	call   c002867b <__floatsidf>
c000bd0e:	83 c4 10             	add    esp,0x10
c000bd11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd19:	68 00 00 00 40       	push   0x40000000
c000bd1e:	6a 00                	push   0x0
c000bd20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd28:	e8 6e bc 01 00       	call   c002799b <__adddf3>
c000bd2d:	59                   	pop    ecx
c000bd2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bd32:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd36:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd39:	e8 3d c9 01 00       	call   c002867b <__floatsidf>
c000bd3e:	83 c4 10             	add    esp,0x10
c000bd41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd45:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd49:	52                   	push   edx
c000bd4a:	50                   	push   eax
c000bd4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd53:	e8 a4 c5 01 00       	call   c00282fc <__divdf3>
c000bd58:	83 c4 10             	add    esp,0x10
c000bd5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd63:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bd66:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bd69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd81:	e8 43 cb 01 00       	call   c00288c9 <__gtdf2>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	85 c0                	test   eax,eax
c000bd8b:	7e 2d                	jle    c000bdba <sinc_multichan_vari_process+0x14e>
c000bd8d:	68 00 00 f0 3f       	push   0x3ff00000
c000bd92:	6a 00                	push   0x0
c000bd94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd9c:	e8 46 cb 01 00       	call   c00288e7 <__ltdf2>
c000bda1:	83 c4 10             	add    esp,0x10
c000bda4:	85 c0                	test   eax,eax
c000bda6:	79 4d                	jns    c000bdf5 <sinc_multichan_vari_process+0x189>
c000bda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bdb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bdb4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bdb8:	eb 1b                	jmp    c000bdd5 <sinc_multichan_vari_process+0x169>
c000bdba:	68 00 00 f0 3f       	push   0x3ff00000
c000bdbf:	6a 00                	push   0x0
c000bdc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bdc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bdc9:	e8 19 cb 01 00       	call   c00288e7 <__ltdf2>
c000bdce:	83 c4 10             	add    esp,0x10
c000bdd1:	85 c0                	test   eax,eax
c000bdd3:	79 20                	jns    c000bdf5 <sinc_multichan_vari_process+0x189>
c000bdd5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bddd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bde1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bde5:	e8 12 c5 01 00       	call   c00282fc <__divdf3>
c000bdea:	83 c4 10             	add    esp,0x10
c000bded:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bdf1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bdf5:	50                   	push   eax
c000bdf6:	50                   	push   eax
c000bdf7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdff:	e8 9c cc 01 00       	call   c0028aa0 <lrint>
c000be04:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000be07:	40                   	inc    eax
c000be08:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be0c:	0f af c5             	imul   eax,ebp
c000be0f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000be13:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000be16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1a:	58                   	pop    eax
c000be1b:	5a                   	pop    edx
c000be1c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be24:	e8 77 cc 01 00       	call   c0028aa0 <lrint>
c000be29:	83 ec 0c             	sub    esp,0xc
c000be2c:	50                   	push   eax
c000be2d:	e8 49 c8 01 00       	call   c002867b <__floatsidf>
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be39:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be3d:	52                   	push   edx
c000be3e:	50                   	push   eax
c000be3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be47:	e8 a0 c1 01 00       	call   c0027fec <__subdf3>
c000be4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be54:	83 c4 20             	add    esp,0x20
c000be57:	6a 00                	push   0x0
c000be59:	6a 00                	push   0x0
c000be5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be63:	e8 7f ca 01 00       	call   c00288e7 <__ltdf2>
c000be68:	83 c4 10             	add    esp,0x10
c000be6b:	85 c0                	test   eax,eax
c000be6d:	79 1f                	jns    c000be8e <sinc_multichan_vari_process+0x222>
c000be6f:	68 00 00 f0 3f       	push   0x3ff00000
c000be74:	6a 00                	push   0x0
c000be76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7e:	e8 18 bb 01 00       	call   c002799b <__adddf3>
c000be83:	83 c4 10             	add    esp,0x10
c000be86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be8e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be91:	83 ec 10             	sub    esp,0x10
c000be94:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be98:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000be9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bea3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bea7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000beab:	e8 3c c1 01 00       	call   c0027fec <__subdf3>
c000beb0:	83 c4 18             	add    esp,0x18
c000beb3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000beb7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bebb:	52                   	push   edx
c000bebc:	50                   	push   eax
c000bebd:	e8 de cb 01 00       	call   c0028aa0 <lrint>
c000bec2:	0f af e8             	imul   ebp,eax
c000bec5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bec9:	01 e8                	add    eax,ebp
c000becb:	99                   	cdq    
c000becc:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000becf:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bed2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bed6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000beda:	68 00 00 f0 3f       	push   0x3ff00000
c000bedf:	6a 00                	push   0x0
c000bee1:	e8 16 c4 01 00       	call   c00282fc <__divdf3>
c000bee6:	83 c4 10             	add    esp,0x10
c000bee9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bef6:	68 23 42 92 0c       	push   0xc924223
c000befb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000beff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf03:	e8 93 ba 01 00       	call   c002799b <__adddf3>
c000bf08:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bf0c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bf10:	83 c4 20             	add    esp,0x20
c000bf13:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bf1b:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bf23:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bf26:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bf29:	7d 50                	jge    c000bf7b <sinc_multichan_vari_process+0x30f>
c000bf2b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bf2e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bf31:	01 c8                	add    eax,ecx
c000bf33:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bf36:	99                   	cdq    
c000bf37:	f7 f9                	idiv   ecx
c000bf39:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bf3d:	7d 0c                	jge    c000bf4b <sinc_multichan_vari_process+0x2df>
c000bf3f:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bf42:	85 ed                	test   ebp,ebp
c000bf44:	79 6b                	jns    c000bfb1 <sinc_multichan_vari_process+0x345>
c000bf46:	e9 e6 00 00 00       	jmp    c000c031 <sinc_multichan_vari_process+0x3c5>
c000bf4b:	50                   	push   eax
c000bf4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bf50:	57                   	push   edi
c000bf51:	53                   	push   ebx
c000bf52:	e8 9b fb ff ff       	call   c000baf2 <prepare_data>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	89 c2                	mov    edx,eax
c000bf5c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bf5f:	85 c0                	test   eax,eax
c000bf61:	0f 85 bf 03 00 00    	jne    c000c326 <sinc_multichan_vari_process+0x6ba>
c000bf67:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bf6a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bf6d:	01 c8                	add    eax,ecx
c000bf6f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bf72:	99                   	cdq    
c000bf73:	f7 f9                	idiv   ecx
c000bf75:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bf79:	7c c4                	jl     c000bf3f <sinc_multichan_vari_process+0x2d3>
c000bf7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bf83:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bf86:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bf89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf8d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bf91:	89 06                	mov    DWORD PTR [esi],eax
c000bf93:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bf96:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bf99:	99                   	cdq    
c000bf9a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bf9d:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bfa0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bfa3:	99                   	cdq    
c000bfa4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bfa7:	31 d2                	xor    edx,edx
c000bfa9:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bfac:	e9 75 03 00 00       	jmp    c000c326 <sinc_multichan_vari_process+0x6ba>
c000bfb1:	83 ec 0c             	sub    esp,0xc
c000bfb4:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bfb7:	e8 bf c6 01 00       	call   c002867b <__floatsidf>
c000bfbc:	83 c4 10             	add    esp,0x10
c000bfbf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bfc3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bfc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfd7:	e8 bf b9 01 00       	call   c002799b <__adddf3>
c000bfdc:	83 c4 10             	add    esp,0x10
c000bfdf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bfe3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bfe7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bff3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bff7:	e8 9f b9 01 00       	call   c002799b <__adddf3>
c000bffc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bfff:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c003:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c007:	e8 6f c6 01 00       	call   c002867b <__floatsidf>
c000c00c:	83 c4 10             	add    esp,0x10
c000c00f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c013:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c017:	52                   	push   edx
c000c018:	50                   	push   eax
c000c019:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c01d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c021:	e8 bf c8 01 00       	call   c00288e5 <__gedf2>
c000c026:	83 c4 10             	add    esp,0x10
c000c029:	85 c0                	test   eax,eax
c000c02b:	0f 89 4a ff ff ff    	jns    c000bf7b <sinc_multichan_vari_process+0x30f>
c000c031:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c035:	0f 8e ed 00 00 00    	jle    c000c128 <sinc_multichan_vari_process+0x4bc>
c000c03b:	83 ec 10             	sub    esp,0x10
c000c03e:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000c041:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000c044:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000c047:	ff 36                	push   DWORD PTR [esi]
c000c049:	e8 9e bf 01 00       	call   c0027fec <__subdf3>
c000c04e:	83 c4 18             	add    esp,0x18
c000c051:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c055:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c059:	52                   	push   edx
c000c05a:	50                   	push   eax
c000c05b:	e8 20 ca 01 00       	call   c0028a80 <fabs>
c000c060:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c064:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c068:	83 c4 10             	add    esp,0x10
c000c06b:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c070:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c075:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c079:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c07d:	e8 47 c8 01 00       	call   c00288c9 <__gtdf2>
c000c082:	83 c4 10             	add    esp,0x10
c000c085:	85 c0                	test   eax,eax
c000c087:	0f 8e 9b 00 00 00    	jle    c000c128 <sinc_multichan_vari_process+0x4bc>
c000c08d:	8b 06                	mov    eax,DWORD PTR [esi]
c000c08f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000c092:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c096:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c09a:	52                   	push   edx
c000c09b:	50                   	push   eax
c000c09c:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000c09f:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000c0a2:	e8 45 bf 01 00       	call   c0027fec <__subdf3>
c000c0a7:	59                   	pop    ecx
c000c0a8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0ac:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c0b0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c0b3:	e8 c3 c5 01 00       	call   c002867b <__floatsidf>
c000c0b8:	83 c4 10             	add    esp,0x10
c000c0bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0c3:	52                   	push   edx
c000c0c4:	50                   	push   eax
c000c0c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0cd:	e8 46 bf 01 00       	call   c0028018 <__muldf3>
c000c0d2:	5d                   	pop    ebp
c000c0d3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0d7:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c0db:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c0de:	e8 98 c5 01 00       	call   c002867b <__floatsidf>
c000c0e3:	83 c4 10             	add    esp,0x10
c000c0e6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0ee:	52                   	push   edx
c000c0ef:	50                   	push   eax
c000c0f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0f8:	e8 ff c1 01 00       	call   c00282fc <__divdf3>
c000c0fd:	83 c4 10             	add    esp,0x10
c000c100:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c104:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c10c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c110:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c114:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c118:	e8 7e b8 01 00       	call   c002799b <__adddf3>
c000c11d:	83 c4 10             	add    esp,0x10
c000c120:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c124:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c128:	83 ec 0c             	sub    esp,0xc
c000c12b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c12e:	e8 48 c5 01 00       	call   c002867b <__floatsidf>
c000c133:	83 c4 10             	add    esp,0x10
c000c136:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c13a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c13e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c14a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c14e:	e8 94 c7 01 00       	call   c00288e7 <__ltdf2>
c000c153:	83 c4 10             	add    esp,0x10
c000c156:	85 c0                	test   eax,eax
c000c158:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c15c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c160:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c164:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c168:	78 10                	js     c000c17a <sinc_multichan_vari_process+0x50e>
c000c16a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c16e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c172:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c176:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c17a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c17e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c182:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c186:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c18a:	e8 89 be 01 00       	call   c0028018 <__muldf3>
c000c18f:	59                   	pop    ecx
c000c190:	5d                   	pop    ebp
c000c191:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c195:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c199:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c19d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c1a1:	e8 25 f9 ff ff       	call   c000bacb <double_to_fp>
c000c1a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1aa:	89 c5                	mov    ebp,eax
c000c1ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1b8:	e8 5b be 01 00       	call   c0028018 <__muldf3>
c000c1bd:	83 c4 18             	add    esp,0x18
c000c1c0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c1c4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1c8:	52                   	push   edx
c000c1c9:	50                   	push   eax
c000c1ca:	e8 fc f8 ff ff       	call   c000bacb <double_to_fp>
c000c1cf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c1d2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c1d6:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c1d9:	8d 04 90             	lea    eax,[eax+edx*4]
c000c1dc:	50                   	push   eax
c000c1dd:	50                   	push   eax
c000c1de:	50                   	push   eax
c000c1df:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1e2:	e8 94 c4 01 00       	call   c002867b <__floatsidf>
c000c1e7:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c1eb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000c1ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1ff:	e8 f8 c0 01 00       	call   c00282fc <__divdf3>
c000c204:	83 c4 1c             	add    esp,0x1c
c000c207:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c20b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c20f:	52                   	push   edx
c000c210:	89 ea                	mov    edx,ebp
c000c212:	50                   	push   eax
c000c213:	89 d8                	mov    eax,ebx
c000c215:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c218:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c21c:	e8 69 ed ff ff       	call   c000af8a <calc_output_multi>
c000c221:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c224:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c227:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c22b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c22f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c233:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c237:	e8 c0 c0 01 00       	call   c00282fc <__divdf3>
c000c23c:	83 c4 10             	add    esp,0x10
c000c23f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c243:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c253:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c257:	e8 3f b7 01 00       	call   c002799b <__adddf3>
c000c25c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c260:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c264:	83 c4 28             	add    esp,0x28
c000c267:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26f:	e8 2c c8 01 00       	call   c0028aa0 <lrint>
c000c274:	83 ec 0c             	sub    esp,0xc
c000c277:	50                   	push   eax
c000c278:	e8 fe c3 01 00       	call   c002867b <__floatsidf>
c000c27d:	83 c4 10             	add    esp,0x10
c000c280:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c284:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c288:	52                   	push   edx
c000c289:	50                   	push   eax
c000c28a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c28e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c292:	e8 55 bd 01 00       	call   c0027fec <__subdf3>
c000c297:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c29b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29f:	83 c4 20             	add    esp,0x20
c000c2a2:	6a 00                	push   0x0
c000c2a4:	6a 00                	push   0x0
c000c2a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ae:	e8 34 c6 01 00       	call   c00288e7 <__ltdf2>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	85 c0                	test   eax,eax
c000c2b8:	79 20                	jns    c000c2da <sinc_multichan_vari_process+0x66e>
c000c2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ca:	e8 cc b6 01 00       	call   c002799b <__adddf3>
c000c2cf:	83 c4 10             	add    esp,0x10
c000c2d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c2da:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c2dd:	83 ec 10             	sub    esp,0x10
c000c2e0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c2e4:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c2e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c2f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c2f7:	e8 f0 bc 01 00       	call   c0027fec <__subdf3>
c000c2fc:	83 c4 18             	add    esp,0x18
c000c2ff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c303:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c307:	52                   	push   edx
c000c308:	50                   	push   eax
c000c309:	e8 92 c7 01 00       	call   c0028aa0 <lrint>
c000c30e:	0f af e8             	imul   ebp,eax
c000c311:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c315:	83 c4 10             	add    esp,0x10
c000c318:	01 e8                	add    eax,ebp
c000c31a:	99                   	cdq    
c000c31b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c31e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c321:	e9 fd fb ff ff       	jmp    c000bf23 <sinc_multichan_vari_process+0x2b7>
c000c326:	83 c4 4c             	add    esp,0x4c
c000c329:	89 d0                	mov    eax,edx
c000c32b:	5b                   	pop    ebx
c000c32c:	5e                   	pop    esi
c000c32d:	5f                   	pop    edi
c000c32e:	5d                   	pop    ebp
c000c32f:	c3                   	ret    

c000c330 <sinc_hex_vari_process>:
c000c330:	55                   	push   ebp
c000c331:	ba 05 00 00 00       	mov    edx,0x5
c000c336:	57                   	push   edi
c000c337:	56                   	push   esi
c000c338:	53                   	push   ebx
c000c339:	83 ec 4c             	sub    esp,0x4c
c000c33c:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c340:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c344:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c347:	85 db                	test   ebx,ebx
c000c349:	0f 84 9c 06 00 00    	je     c000c9eb <sinc_hex_vari_process+0x6bb>
c000c34f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c352:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c355:	0f af c7             	imul   eax,edi
c000c358:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c35b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c35e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c365:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c36c:	0f af c7             	imul   eax,edi
c000c36f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c372:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c375:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c378:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c37c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c380:	68 00 00 70 3f       	push   0x3f700000
c000c385:	6a 00                	push   0x0
c000c387:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c38f:	e8 53 c5 01 00       	call   c00288e7 <__ltdf2>
c000c394:	83 c4 10             	add    esp,0x10
c000c397:	ba 16 00 00 00       	mov    edx,0x16
c000c39c:	85 c0                	test   eax,eax
c000c39e:	0f 88 47 06 00 00    	js     c000c9eb <sinc_hex_vari_process+0x6bb>
c000c3a4:	68 00 00 70 40       	push   0x40700000
c000c3a9:	6a 00                	push   0x0
c000c3ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b3:	e8 11 c5 01 00       	call   c00288c9 <__gtdf2>
c000c3b8:	83 c4 10             	add    esp,0x10
c000c3bb:	ba 16 00 00 00       	mov    edx,0x16
c000c3c0:	85 c0                	test   eax,eax
c000c3c2:	0f 8f 23 06 00 00    	jg     c000c9eb <sinc_hex_vari_process+0x6bb>
c000c3c8:	83 ec 0c             	sub    esp,0xc
c000c3cb:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c3ce:	e8 a8 c2 01 00       	call   c002867b <__floatsidf>
c000c3d3:	83 c4 10             	add    esp,0x10
c000c3d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c3da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c3de:	68 00 00 00 40       	push   0x40000000
c000c3e3:	6a 00                	push   0x0
c000c3e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3ed:	e8 a9 b5 01 00       	call   c002799b <__adddf3>
c000c3f2:	59                   	pop    ecx
c000c3f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c3f7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c3fb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3fe:	e8 78 c2 01 00       	call   c002867b <__floatsidf>
c000c403:	83 c4 10             	add    esp,0x10
c000c406:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c40a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c40e:	52                   	push   edx
c000c40f:	50                   	push   eax
c000c410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c418:	e8 df be 01 00       	call   c00282fc <__divdf3>
c000c41d:	83 c4 10             	add    esp,0x10
c000c420:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c424:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c428:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c42b:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c42e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c432:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c436:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c43a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c43e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c442:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c446:	e8 7e c4 01 00       	call   c00288c9 <__gtdf2>
c000c44b:	83 c4 10             	add    esp,0x10
c000c44e:	85 c0                	test   eax,eax
c000c450:	7e 2d                	jle    c000c47f <sinc_hex_vari_process+0x14f>
c000c452:	68 00 00 f0 3f       	push   0x3ff00000
c000c457:	6a 00                	push   0x0
c000c459:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c45d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c461:	e8 81 c4 01 00       	call   c00288e7 <__ltdf2>
c000c466:	83 c4 10             	add    esp,0x10
c000c469:	85 c0                	test   eax,eax
c000c46b:	79 4d                	jns    c000c4ba <sinc_hex_vari_process+0x18a>
c000c46d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c471:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c475:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c479:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c47d:	eb 1b                	jmp    c000c49a <sinc_hex_vari_process+0x16a>
c000c47f:	68 00 00 f0 3f       	push   0x3ff00000
c000c484:	6a 00                	push   0x0
c000c486:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c48a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c48e:	e8 54 c4 01 00       	call   c00288e7 <__ltdf2>
c000c493:	83 c4 10             	add    esp,0x10
c000c496:	85 c0                	test   eax,eax
c000c498:	79 20                	jns    c000c4ba <sinc_hex_vari_process+0x18a>
c000c49a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c49e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c4a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4aa:	e8 4d be 01 00       	call   c00282fc <__divdf3>
c000c4af:	83 c4 10             	add    esp,0x10
c000c4b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4b6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c4ba:	50                   	push   eax
c000c4bb:	50                   	push   eax
c000c4bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4c4:	e8 d7 c5 01 00       	call   c0028aa0 <lrint>
c000c4c9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c4cc:	40                   	inc    eax
c000c4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4d1:	0f af c7             	imul   eax,edi
c000c4d4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c4d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4df:	58                   	pop    eax
c000c4e0:	5a                   	pop    edx
c000c4e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4e9:	e8 b2 c5 01 00       	call   c0028aa0 <lrint>
c000c4ee:	83 ec 0c             	sub    esp,0xc
c000c4f1:	50                   	push   eax
c000c4f2:	e8 84 c1 01 00       	call   c002867b <__floatsidf>
c000c4f7:	83 c4 10             	add    esp,0x10
c000c4fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4fe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c502:	52                   	push   edx
c000c503:	50                   	push   eax
c000c504:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c508:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c50c:	e8 db ba 01 00       	call   c0027fec <__subdf3>
c000c511:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c515:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c519:	83 c4 20             	add    esp,0x20
c000c51c:	6a 00                	push   0x0
c000c51e:	6a 00                	push   0x0
c000c520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c528:	e8 ba c3 01 00       	call   c00288e7 <__ltdf2>
c000c52d:	83 c4 10             	add    esp,0x10
c000c530:	85 c0                	test   eax,eax
c000c532:	79 1f                	jns    c000c553 <sinc_hex_vari_process+0x223>
c000c534:	68 00 00 f0 3f       	push   0x3ff00000
c000c539:	6a 00                	push   0x0
c000c53b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c53f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c543:	e8 53 b4 01 00       	call   c002799b <__adddf3>
c000c548:	83 c4 10             	add    esp,0x10
c000c54b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c54f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c553:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c556:	83 ec 10             	sub    esp,0x10
c000c559:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c55d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c568:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c56c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c570:	e8 77 ba 01 00       	call   c0027fec <__subdf3>
c000c575:	83 c4 18             	add    esp,0x18
c000c578:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c57c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	e8 19 c5 01 00       	call   c0028aa0 <lrint>
c000c587:	0f af f8             	imul   edi,eax
c000c58a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c58e:	01 f8                	add    eax,edi
c000c590:	99                   	cdq    
c000c591:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c594:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c597:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c59b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c59f:	68 00 00 f0 3f       	push   0x3ff00000
c000c5a4:	6a 00                	push   0x0
c000c5a6:	e8 51 bd 01 00       	call   c00282fc <__divdf3>
c000c5ab:	83 c4 10             	add    esp,0x10
c000c5ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c5bb:	68 23 42 92 0c       	push   0xc924223
c000c5c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c5c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c5c8:	e8 ce b3 01 00       	call   c002799b <__adddf3>
c000c5cd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c5d1:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c5d5:	83 c4 20             	add    esp,0x20
c000c5d8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c5e0:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c5e8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c5eb:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c5ee:	7d 50                	jge    c000c640 <sinc_hex_vari_process+0x310>
c000c5f0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c5f3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c5f6:	01 c8                	add    eax,ecx
c000c5f8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c5fb:	99                   	cdq    
c000c5fc:	f7 f9                	idiv   ecx
c000c5fe:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c602:	7d 0c                	jge    c000c610 <sinc_hex_vari_process+0x2e0>
c000c604:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c607:	85 ff                	test   edi,edi
c000c609:	79 6c                	jns    c000c677 <sinc_hex_vari_process+0x347>
c000c60b:	e9 e7 00 00 00       	jmp    c000c6f7 <sinc_hex_vari_process+0x3c7>
c000c610:	50                   	push   eax
c000c611:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c615:	56                   	push   esi
c000c616:	53                   	push   ebx
c000c617:	e8 d6 f4 ff ff       	call   c000baf2 <prepare_data>
c000c61c:	83 c4 10             	add    esp,0x10
c000c61f:	89 c2                	mov    edx,eax
c000c621:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c624:	85 c0                	test   eax,eax
c000c626:	0f 85 bf 03 00 00    	jne    c000c9eb <sinc_hex_vari_process+0x6bb>
c000c62c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c62f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c632:	01 c8                	add    eax,ecx
c000c634:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c637:	99                   	cdq    
c000c638:	f7 f9                	idiv   ecx
c000c63a:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c63e:	7c c4                	jl     c000c604 <sinc_hex_vari_process+0x2d4>
c000c640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c644:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c648:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c64b:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c652:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c656:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c659:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c65c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c65f:	99                   	cdq    
c000c660:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c663:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c666:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c669:	99                   	cdq    
c000c66a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c66d:	31 d2                	xor    edx,edx
c000c66f:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c672:	e9 74 03 00 00       	jmp    c000c9eb <sinc_hex_vari_process+0x6bb>
c000c677:	83 ec 0c             	sub    esp,0xc
c000c67a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c67d:	e8 f9 bf 01 00       	call   c002867b <__floatsidf>
c000c682:	83 c4 10             	add    esp,0x10
c000c685:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c689:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c68d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c691:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c695:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c699:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c69d:	e8 f9 b2 01 00       	call   c002799b <__adddf3>
c000c6a2:	83 c4 10             	add    esp,0x10
c000c6a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c6a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c6ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6bd:	e8 d9 b2 01 00       	call   c002799b <__adddf3>
c000c6c2:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c6c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6c9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6cd:	e8 a9 bf 01 00       	call   c002867b <__floatsidf>
c000c6d2:	83 c4 10             	add    esp,0x10
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	50                   	push   eax
c000c6df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6e7:	e8 f9 c1 01 00       	call   c00288e5 <__gedf2>
c000c6ec:	83 c4 10             	add    esp,0x10
c000c6ef:	85 c0                	test   eax,eax
c000c6f1:	0f 89 49 ff ff ff    	jns    c000c640 <sinc_hex_vari_process+0x310>
c000c6f7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c6fb:	0f 8e ef 00 00 00    	jle    c000c7f0 <sinc_hex_vari_process+0x4c0>
c000c701:	83 ec 10             	sub    esp,0x10
c000c704:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c707:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c70a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c70d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c710:	e8 d7 b8 01 00       	call   c0027fec <__subdf3>
c000c715:	83 c4 18             	add    esp,0x18
c000c718:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c71c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c720:	52                   	push   edx
c000c721:	50                   	push   eax
c000c722:	e8 59 c3 01 00       	call   c0028a80 <fabs>
c000c727:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c72b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c72f:	83 c4 10             	add    esp,0x10
c000c732:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c737:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c73c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c740:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c744:	e8 80 c1 01 00       	call   c00288c9 <__gtdf2>
c000c749:	83 c4 10             	add    esp,0x10
c000c74c:	85 c0                	test   eax,eax
c000c74e:	0f 8e 9c 00 00 00    	jle    c000c7f0 <sinc_hex_vari_process+0x4c0>
c000c754:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c757:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c75a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c75e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c762:	52                   	push   edx
c000c763:	50                   	push   eax
c000c764:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c767:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c76a:	e8 7d b8 01 00       	call   c0027fec <__subdf3>
c000c76f:	59                   	pop    ecx
c000c770:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c774:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c778:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c77b:	e8 fb be 01 00       	call   c002867b <__floatsidf>
c000c780:	83 c4 10             	add    esp,0x10
c000c783:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c787:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c78b:	52                   	push   edx
c000c78c:	50                   	push   eax
c000c78d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c791:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c795:	e8 7e b8 01 00       	call   c0028018 <__muldf3>
c000c79a:	5f                   	pop    edi
c000c79b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c79f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c7a3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c7a6:	e8 d0 be 01 00       	call   c002867b <__floatsidf>
c000c7ab:	83 c4 10             	add    esp,0x10
c000c7ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7b6:	52                   	push   edx
c000c7b7:	50                   	push   eax
c000c7b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7c0:	e8 37 bb 01 00       	call   c00282fc <__divdf3>
c000c7c5:	83 c4 10             	add    esp,0x10
c000c7c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7e0:	e8 b6 b1 01 00       	call   c002799b <__adddf3>
c000c7e5:	83 c4 10             	add    esp,0x10
c000c7e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c7ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c7f0:	83 ec 0c             	sub    esp,0xc
c000c7f3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c7f6:	e8 80 be 01 00       	call   c002867b <__floatsidf>
c000c7fb:	83 c4 10             	add    esp,0x10
c000c7fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c802:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c80a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c816:	e8 cc c0 01 00       	call   c00288e7 <__ltdf2>
c000c81b:	83 c4 10             	add    esp,0x10
c000c81e:	85 c0                	test   eax,eax
c000c820:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c824:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c828:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c82c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c830:	78 10                	js     c000c842 <sinc_hex_vari_process+0x512>
c000c832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c836:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c83a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c83e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c842:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c846:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c84a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c84e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c852:	e8 c1 b7 01 00       	call   c0028018 <__muldf3>
c000c857:	59                   	pop    ecx
c000c858:	5f                   	pop    edi
c000c859:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c85d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c861:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c865:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c869:	e8 5d f2 ff ff       	call   c000bacb <double_to_fp>
c000c86e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c872:	89 c7                	mov    edi,eax
c000c874:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c878:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c87c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c880:	e8 93 b7 01 00       	call   c0028018 <__muldf3>
c000c885:	83 c4 18             	add    esp,0x18
c000c888:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c88c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c890:	52                   	push   edx
c000c891:	50                   	push   eax
c000c892:	e8 34 f2 ff ff       	call   c000bacb <double_to_fp>
c000c897:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c89a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c89e:	83 c4 0c             	add    esp,0xc
c000c8a1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c8a4:	8d 04 90             	lea    eax,[eax+edx*4]
c000c8a7:	50                   	push   eax
c000c8a8:	50                   	push   eax
c000c8a9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8ac:	e8 ca bd 01 00       	call   c002867b <__floatsidf>
c000c8b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c8b5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c8b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c9:	e8 2e ba 01 00       	call   c00282fc <__divdf3>
c000c8ce:	83 c4 18             	add    esp,0x18
c000c8d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c8d9:	52                   	push   edx
c000c8da:	89 fa                	mov    edx,edi
c000c8dc:	50                   	push   eax
c000c8dd:	89 d8                	mov    eax,ebx
c000c8df:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c8e3:	e8 50 de ff ff       	call   c000a738 <calc_output_hex>
c000c8e8:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c8ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c8f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c8fc:	e8 fb b9 01 00       	call   c00282fc <__divdf3>
c000c901:	83 c4 10             	add    esp,0x10
c000c904:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c908:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c90c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c914:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c918:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c91c:	e8 7a b0 01 00       	call   c002799b <__adddf3>
c000c921:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c925:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c929:	83 c4 18             	add    esp,0x18
c000c92c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c930:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c934:	e8 67 c1 01 00       	call   c0028aa0 <lrint>
c000c939:	83 ec 0c             	sub    esp,0xc
c000c93c:	50                   	push   eax
c000c93d:	e8 39 bd 01 00       	call   c002867b <__floatsidf>
c000c942:	83 c4 10             	add    esp,0x10
c000c945:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c949:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c94d:	52                   	push   edx
c000c94e:	50                   	push   eax
c000c94f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c953:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c957:	e8 90 b6 01 00       	call   c0027fec <__subdf3>
c000c95c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c960:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c964:	83 c4 20             	add    esp,0x20
c000c967:	6a 00                	push   0x0
c000c969:	6a 00                	push   0x0
c000c96b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c96f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c973:	e8 6f bf 01 00       	call   c00288e7 <__ltdf2>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	85 c0                	test   eax,eax
c000c97d:	79 20                	jns    c000c99f <sinc_hex_vari_process+0x66f>
c000c97f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c983:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c987:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c98b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c98f:	e8 07 b0 01 00       	call   c002799b <__adddf3>
c000c994:	83 c4 10             	add    esp,0x10
c000c997:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c99b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c99f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9a2:	83 ec 10             	sub    esp,0x10
c000c9a5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c9a9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9b4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9bc:	e8 2b b6 01 00       	call   c0027fec <__subdf3>
c000c9c1:	83 c4 18             	add    esp,0x18
c000c9c4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9cc:	52                   	push   edx
c000c9cd:	50                   	push   eax
c000c9ce:	e8 cd c0 01 00       	call   c0028aa0 <lrint>
c000c9d3:	0f af f8             	imul   edi,eax
c000c9d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c9da:	83 c4 10             	add    esp,0x10
c000c9dd:	01 f8                	add    eax,edi
c000c9df:	99                   	cdq    
c000c9e0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c9e3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c9e6:	e9 fd fb ff ff       	jmp    c000c5e8 <sinc_hex_vari_process+0x2b8>
c000c9eb:	83 c4 4c             	add    esp,0x4c
c000c9ee:	89 d0                	mov    eax,edx
c000c9f0:	5b                   	pop    ebx
c000c9f1:	5e                   	pop    esi
c000c9f2:	5f                   	pop    edi
c000c9f3:	5d                   	pop    ebp
c000c9f4:	c3                   	ret    

c000c9f5 <sinc_quad_vari_process>:
c000c9f5:	55                   	push   ebp
c000c9f6:	ba 05 00 00 00       	mov    edx,0x5
c000c9fb:	57                   	push   edi
c000c9fc:	56                   	push   esi
c000c9fd:	53                   	push   ebx
c000c9fe:	83 ec 4c             	sub    esp,0x4c
c000ca01:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ca05:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ca09:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ca0c:	85 db                	test   ebx,ebx
c000ca0e:	0f 84 9c 06 00 00    	je     c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ca14:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ca17:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca1a:	0f af c7             	imul   eax,edi
c000ca1d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ca20:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ca23:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ca2a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ca31:	0f af c7             	imul   eax,edi
c000ca34:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ca37:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ca3a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ca3d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca41:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca45:	68 00 00 70 3f       	push   0x3f700000
c000ca4a:	6a 00                	push   0x0
c000ca4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca54:	e8 8e be 01 00       	call   c00288e7 <__ltdf2>
c000ca59:	83 c4 10             	add    esp,0x10
c000ca5c:	ba 16 00 00 00       	mov    edx,0x16
c000ca61:	85 c0                	test   eax,eax
c000ca63:	0f 88 47 06 00 00    	js     c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ca69:	68 00 00 70 40       	push   0x40700000
c000ca6e:	6a 00                	push   0x0
c000ca70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca78:	e8 4c be 01 00       	call   c00288c9 <__gtdf2>
c000ca7d:	83 c4 10             	add    esp,0x10
c000ca80:	ba 16 00 00 00       	mov    edx,0x16
c000ca85:	85 c0                	test   eax,eax
c000ca87:	0f 8f 23 06 00 00    	jg     c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ca8d:	83 ec 0c             	sub    esp,0xc
c000ca90:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ca93:	e8 e3 bb 01 00       	call   c002867b <__floatsidf>
c000ca98:	83 c4 10             	add    esp,0x10
c000ca9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000caa3:	68 00 00 00 40       	push   0x40000000
c000caa8:	6a 00                	push   0x0
c000caaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000caae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cab2:	e8 e4 ae 01 00       	call   c002799b <__adddf3>
c000cab7:	59                   	pop    ecx
c000cab8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cabc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cac0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cac3:	e8 b3 bb 01 00       	call   c002867b <__floatsidf>
c000cac8:	83 c4 10             	add    esp,0x10
c000cacb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cacf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cad3:	52                   	push   edx
c000cad4:	50                   	push   eax
c000cad5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cad9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cadd:	e8 1a b8 01 00       	call   c00282fc <__divdf3>
c000cae2:	83 c4 10             	add    esp,0x10
c000cae5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cae9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000caed:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000caf0:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000caf3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000caf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cafb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000caff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb0b:	e8 b9 bd 01 00       	call   c00288c9 <__gtdf2>
c000cb10:	83 c4 10             	add    esp,0x10
c000cb13:	85 c0                	test   eax,eax
c000cb15:	7e 2d                	jle    c000cb44 <sinc_quad_vari_process+0x14f>
c000cb17:	68 00 00 f0 3f       	push   0x3ff00000
c000cb1c:	6a 00                	push   0x0
c000cb1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb26:	e8 bc bd 01 00       	call   c00288e7 <__ltdf2>
c000cb2b:	83 c4 10             	add    esp,0x10
c000cb2e:	85 c0                	test   eax,eax
c000cb30:	79 4d                	jns    c000cb7f <sinc_quad_vari_process+0x18a>
c000cb32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cb42:	eb 1b                	jmp    c000cb5f <sinc_quad_vari_process+0x16a>
c000cb44:	68 00 00 f0 3f       	push   0x3ff00000
c000cb49:	6a 00                	push   0x0
c000cb4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb53:	e8 8f bd 01 00       	call   c00288e7 <__ltdf2>
c000cb58:	83 c4 10             	add    esp,0x10
c000cb5b:	85 c0                	test   eax,eax
c000cb5d:	79 20                	jns    c000cb7f <sinc_quad_vari_process+0x18a>
c000cb5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6f:	e8 88 b7 01 00       	call   c00282fc <__divdf3>
c000cb74:	83 c4 10             	add    esp,0x10
c000cb77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cb7b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cb7f:	50                   	push   eax
c000cb80:	50                   	push   eax
c000cb81:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb85:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb89:	e8 12 bf 01 00       	call   c0028aa0 <lrint>
c000cb8e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000cb91:	40                   	inc    eax
c000cb92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb96:	0f af c7             	imul   eax,edi
c000cb99:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000cb9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cba0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba4:	58                   	pop    eax
c000cba5:	5a                   	pop    edx
c000cba6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbaa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbae:	e8 ed be 01 00       	call   c0028aa0 <lrint>
c000cbb3:	83 ec 0c             	sub    esp,0xc
c000cbb6:	50                   	push   eax
c000cbb7:	e8 bf ba 01 00       	call   c002867b <__floatsidf>
c000cbbc:	83 c4 10             	add    esp,0x10
c000cbbf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbc3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbc7:	52                   	push   edx
c000cbc8:	50                   	push   eax
c000cbc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbcd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbd1:	e8 16 b4 01 00       	call   c0027fec <__subdf3>
c000cbd6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbda:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbde:	83 c4 20             	add    esp,0x20
c000cbe1:	6a 00                	push   0x0
c000cbe3:	6a 00                	push   0x0
c000cbe5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbe9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbed:	e8 f5 bc 01 00       	call   c00288e7 <__ltdf2>
c000cbf2:	83 c4 10             	add    esp,0x10
c000cbf5:	85 c0                	test   eax,eax
c000cbf7:	79 1f                	jns    c000cc18 <sinc_quad_vari_process+0x223>
c000cbf9:	68 00 00 f0 3f       	push   0x3ff00000
c000cbfe:	6a 00                	push   0x0
c000cc00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc08:	e8 8e ad 01 00       	call   c002799b <__adddf3>
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc18:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc1b:	83 ec 10             	sub    esp,0x10
c000cc1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cc22:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc35:	e8 b2 b3 01 00       	call   c0027fec <__subdf3>
c000cc3a:	83 c4 18             	add    esp,0x18
c000cc3d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	e8 54 be 01 00       	call   c0028aa0 <lrint>
c000cc4c:	0f af f8             	imul   edi,eax
c000cc4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc53:	01 f8                	add    eax,edi
c000cc55:	99                   	cdq    
c000cc56:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc59:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc5c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc64:	68 00 00 f0 3f       	push   0x3ff00000
c000cc69:	6a 00                	push   0x0
c000cc6b:	e8 8c b6 01 00       	call   c00282fc <__divdf3>
c000cc70:	83 c4 10             	add    esp,0x10
c000cc73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc77:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cc80:	68 23 42 92 0c       	push   0xc924223
c000cc85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc8d:	e8 09 ad 01 00       	call   c002799b <__adddf3>
c000cc92:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cc96:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cc9a:	83 c4 20             	add    esp,0x20
c000cc9d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cca5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ccad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ccb0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ccb3:	7d 50                	jge    c000cd05 <sinc_quad_vari_process+0x310>
c000ccb5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ccb8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ccbb:	01 c8                	add    eax,ecx
c000ccbd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ccc0:	99                   	cdq    
c000ccc1:	f7 f9                	idiv   ecx
c000ccc3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ccc7:	7d 0c                	jge    c000ccd5 <sinc_quad_vari_process+0x2e0>
c000ccc9:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cccc:	85 ff                	test   edi,edi
c000ccce:	79 6c                	jns    c000cd3c <sinc_quad_vari_process+0x347>
c000ccd0:	e9 e7 00 00 00       	jmp    c000cdbc <sinc_quad_vari_process+0x3c7>
c000ccd5:	50                   	push   eax
c000ccd6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ccda:	56                   	push   esi
c000ccdb:	53                   	push   ebx
c000ccdc:	e8 11 ee ff ff       	call   c000baf2 <prepare_data>
c000cce1:	83 c4 10             	add    esp,0x10
c000cce4:	89 c2                	mov    edx,eax
c000cce6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cce9:	85 c0                	test   eax,eax
c000cceb:	0f 85 bf 03 00 00    	jne    c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ccf1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ccf4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ccf7:	01 c8                	add    eax,ecx
c000ccf9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ccfc:	99                   	cdq    
c000ccfd:	f7 f9                	idiv   ecx
c000ccff:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cd03:	7c c4                	jl     c000ccc9 <sinc_quad_vari_process+0x2d4>
c000cd05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd09:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd0d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cd10:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd17:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cd1b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cd1e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cd21:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cd24:	99                   	cdq    
c000cd25:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd28:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cd2b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cd2e:	99                   	cdq    
c000cd2f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd32:	31 d2                	xor    edx,edx
c000cd34:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cd37:	e9 74 03 00 00       	jmp    c000d0b0 <sinc_quad_vari_process+0x6bb>
c000cd3c:	83 ec 0c             	sub    esp,0xc
c000cd3f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cd42:	e8 34 b9 01 00       	call   c002867b <__floatsidf>
c000cd47:	83 c4 10             	add    esp,0x10
c000cd4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd4e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cd56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cd5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd62:	e8 34 ac 01 00       	call   c002799b <__adddf3>
c000cd67:	83 c4 10             	add    esp,0x10
c000cd6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd72:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd82:	e8 14 ac 01 00       	call   c002799b <__adddf3>
c000cd87:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cd8a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd8e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd92:	e8 e4 b8 01 00       	call   c002867b <__floatsidf>
c000cd97:	83 c4 10             	add    esp,0x10
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	50                   	push   eax
c000cda4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cda8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdac:	e8 34 bb 01 00       	call   c00288e5 <__gedf2>
c000cdb1:	83 c4 10             	add    esp,0x10
c000cdb4:	85 c0                	test   eax,eax
c000cdb6:	0f 89 49 ff ff ff    	jns    c000cd05 <sinc_quad_vari_process+0x310>
c000cdbc:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cdc0:	0f 8e ef 00 00 00    	jle    c000ceb5 <sinc_quad_vari_process+0x4c0>
c000cdc6:	83 ec 10             	sub    esp,0x10
c000cdc9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cdcc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cdcf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cdd2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cdd5:	e8 12 b2 01 00       	call   c0027fec <__subdf3>
c000cdda:	83 c4 18             	add    esp,0x18
c000cddd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cde1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cde5:	52                   	push   edx
c000cde6:	50                   	push   eax
c000cde7:	e8 94 bc 01 00       	call   c0028a80 <fabs>
c000cdec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdf0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdf4:	83 c4 10             	add    esp,0x10
c000cdf7:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cdfc:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000ce01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce09:	e8 bb ba 01 00       	call   c00288c9 <__gtdf2>
c000ce0e:	83 c4 10             	add    esp,0x10
c000ce11:	85 c0                	test   eax,eax
c000ce13:	0f 8e 9c 00 00 00    	jle    c000ceb5 <sinc_quad_vari_process+0x4c0>
c000ce19:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce1c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ce1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce23:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ce27:	52                   	push   edx
c000ce28:	50                   	push   eax
c000ce29:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce2c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce2f:	e8 b8 b1 01 00       	call   c0027fec <__subdf3>
c000ce34:	59                   	pop    ecx
c000ce35:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ce39:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ce3d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ce40:	e8 36 b8 01 00       	call   c002867b <__floatsidf>
c000ce45:	83 c4 10             	add    esp,0x10
c000ce48:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce4c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce50:	52                   	push   edx
c000ce51:	50                   	push   eax
c000ce52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce5a:	e8 b9 b1 01 00       	call   c0028018 <__muldf3>
c000ce5f:	5f                   	pop    edi
c000ce60:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ce64:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ce68:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ce6b:	e8 0b b8 01 00       	call   c002867b <__floatsidf>
c000ce70:	83 c4 10             	add    esp,0x10
c000ce73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce77:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce7b:	52                   	push   edx
c000ce7c:	50                   	push   eax
c000ce7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce85:	e8 72 b4 01 00       	call   c00282fc <__divdf3>
c000ce8a:	83 c4 10             	add    esp,0x10
c000ce8d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ce91:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ce95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cea1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cea5:	e8 f1 aa 01 00       	call   c002799b <__adddf3>
c000ceaa:	83 c4 10             	add    esp,0x10
c000cead:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ceb1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ceb5:	83 ec 0c             	sub    esp,0xc
c000ceb8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cebb:	e8 bb b7 01 00       	call   c002867b <__floatsidf>
c000cec0:	83 c4 10             	add    esp,0x10
c000cec3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cec7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cecb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cecf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedb:	e8 07 ba 01 00       	call   c00288e7 <__ltdf2>
c000cee0:	83 c4 10             	add    esp,0x10
c000cee3:	85 c0                	test   eax,eax
c000cee5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cee9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ceed:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000cef1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cef5:	78 10                	js     c000cf07 <sinc_quad_vari_process+0x512>
c000cef7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cefb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ceff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cf03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cf07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf0f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf17:	e8 fc b0 01 00       	call   c0028018 <__muldf3>
c000cf1c:	59                   	pop    ecx
c000cf1d:	5f                   	pop    edi
c000cf1e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf2e:	e8 98 eb ff ff       	call   c000bacb <double_to_fp>
c000cf33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf37:	89 c7                	mov    edi,eax
c000cf39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf3d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf45:	e8 ce b0 01 00       	call   c0028018 <__muldf3>
c000cf4a:	83 c4 18             	add    esp,0x18
c000cf4d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cf51:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cf55:	52                   	push   edx
c000cf56:	50                   	push   eax
c000cf57:	e8 6f eb ff ff       	call   c000bacb <double_to_fp>
c000cf5c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cf5f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cf63:	83 c4 0c             	add    esp,0xc
c000cf66:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cf69:	8d 04 90             	lea    eax,[eax+edx*4]
c000cf6c:	50                   	push   eax
c000cf6d:	50                   	push   eax
c000cf6e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf71:	e8 05 b7 01 00       	call   c002867b <__floatsidf>
c000cf76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cf7a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cf7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf8e:	e8 69 b3 01 00       	call   c00282fc <__divdf3>
c000cf93:	83 c4 18             	add    esp,0x18
c000cf96:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf9e:	52                   	push   edx
c000cf9f:	89 fa                	mov    edx,edi
c000cfa1:	50                   	push   eax
c000cfa2:	89 d8                	mov    eax,ebx
c000cfa4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cfa8:	e8 a5 d1 ff ff       	call   c000a152 <calc_output_quad>
c000cfad:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cfb1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cfb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cfb9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfc1:	e8 36 b3 01 00       	call   c00282fc <__divdf3>
c000cfc6:	83 c4 10             	add    esp,0x10
c000cfc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cfcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cfd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfd9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfdd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfe1:	e8 b5 a9 01 00       	call   c002799b <__adddf3>
c000cfe6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cfea:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cfee:	83 c4 18             	add    esp,0x18
c000cff1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff9:	e8 a2 ba 01 00       	call   c0028aa0 <lrint>
c000cffe:	83 ec 0c             	sub    esp,0xc
c000d001:	50                   	push   eax
c000d002:	e8 74 b6 01 00       	call   c002867b <__floatsidf>
c000d007:	83 c4 10             	add    esp,0x10
c000d00a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d012:	52                   	push   edx
c000d013:	50                   	push   eax
c000d014:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d018:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d01c:	e8 cb af 01 00       	call   c0027fec <__subdf3>
c000d021:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d025:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d029:	83 c4 20             	add    esp,0x20
c000d02c:	6a 00                	push   0x0
c000d02e:	6a 00                	push   0x0
c000d030:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d034:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d038:	e8 aa b8 01 00       	call   c00288e7 <__ltdf2>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	85 c0                	test   eax,eax
c000d042:	79 20                	jns    c000d064 <sinc_quad_vari_process+0x66f>
c000d044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d04c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d050:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d054:	e8 42 a9 01 00       	call   c002799b <__adddf3>
c000d059:	83 c4 10             	add    esp,0x10
c000d05c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d060:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d064:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d067:	83 ec 10             	sub    esp,0x10
c000d06a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d06e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d071:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d075:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d079:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d07d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d081:	e8 66 af 01 00       	call   c0027fec <__subdf3>
c000d086:	83 c4 18             	add    esp,0x18
c000d089:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d08d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d091:	52                   	push   edx
c000d092:	50                   	push   eax
c000d093:	e8 08 ba 01 00       	call   c0028aa0 <lrint>
c000d098:	0f af f8             	imul   edi,eax
c000d09b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d09f:	83 c4 10             	add    esp,0x10
c000d0a2:	01 f8                	add    eax,edi
c000d0a4:	99                   	cdq    
c000d0a5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0a8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0ab:	e9 fd fb ff ff       	jmp    c000ccad <sinc_quad_vari_process+0x2b8>
c000d0b0:	83 c4 4c             	add    esp,0x4c
c000d0b3:	89 d0                	mov    eax,edx
c000d0b5:	5b                   	pop    ebx
c000d0b6:	5e                   	pop    esi
c000d0b7:	5f                   	pop    edi
c000d0b8:	5d                   	pop    ebp
c000d0b9:	c3                   	ret    

c000d0ba <sinc_stereo_vari_process>:
c000d0ba:	55                   	push   ebp
c000d0bb:	ba 05 00 00 00       	mov    edx,0x5
c000d0c0:	57                   	push   edi
c000d0c1:	56                   	push   esi
c000d0c2:	53                   	push   ebx
c000d0c3:	83 ec 4c             	sub    esp,0x4c
c000d0c6:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d0ca:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d0ce:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d0d1:	85 db                	test   ebx,ebx
c000d0d3:	0f 84 9c 06 00 00    	je     c000d775 <sinc_stereo_vari_process+0x6bb>
c000d0d9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d0dc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0df:	0f af c7             	imul   eax,edi
c000d0e2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d0e5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d0e8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d0ef:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d0f6:	0f af c7             	imul   eax,edi
c000d0f9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d0fc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d0ff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d102:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d106:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d10a:	68 00 00 70 3f       	push   0x3f700000
c000d10f:	6a 00                	push   0x0
c000d111:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d115:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d119:	e8 c9 b7 01 00       	call   c00288e7 <__ltdf2>
c000d11e:	83 c4 10             	add    esp,0x10
c000d121:	ba 16 00 00 00       	mov    edx,0x16
c000d126:	85 c0                	test   eax,eax
c000d128:	0f 88 47 06 00 00    	js     c000d775 <sinc_stereo_vari_process+0x6bb>
c000d12e:	68 00 00 70 40       	push   0x40700000
c000d133:	6a 00                	push   0x0
c000d135:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d139:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d13d:	e8 87 b7 01 00       	call   c00288c9 <__gtdf2>
c000d142:	83 c4 10             	add    esp,0x10
c000d145:	ba 16 00 00 00       	mov    edx,0x16
c000d14a:	85 c0                	test   eax,eax
c000d14c:	0f 8f 23 06 00 00    	jg     c000d775 <sinc_stereo_vari_process+0x6bb>
c000d152:	83 ec 0c             	sub    esp,0xc
c000d155:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d158:	e8 1e b5 01 00       	call   c002867b <__floatsidf>
c000d15d:	83 c4 10             	add    esp,0x10
c000d160:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d164:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d168:	68 00 00 00 40       	push   0x40000000
c000d16d:	6a 00                	push   0x0
c000d16f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d173:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d177:	e8 1f a8 01 00       	call   c002799b <__adddf3>
c000d17c:	59                   	pop    ecx
c000d17d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d181:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d185:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d188:	e8 ee b4 01 00       	call   c002867b <__floatsidf>
c000d18d:	83 c4 10             	add    esp,0x10
c000d190:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d194:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d198:	52                   	push   edx
c000d199:	50                   	push   eax
c000d19a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d19e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1a2:	e8 55 b1 01 00       	call   c00282fc <__divdf3>
c000d1a7:	83 c4 10             	add    esp,0x10
c000d1aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d1ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d1b2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d1b5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d1b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d1c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1d0:	e8 f4 b6 01 00       	call   c00288c9 <__gtdf2>
c000d1d5:	83 c4 10             	add    esp,0x10
c000d1d8:	85 c0                	test   eax,eax
c000d1da:	7e 2d                	jle    c000d209 <sinc_stereo_vari_process+0x14f>
c000d1dc:	68 00 00 f0 3f       	push   0x3ff00000
c000d1e1:	6a 00                	push   0x0
c000d1e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1eb:	e8 f7 b6 01 00       	call   c00288e7 <__ltdf2>
c000d1f0:	83 c4 10             	add    esp,0x10
c000d1f3:	85 c0                	test   eax,eax
c000d1f5:	79 4d                	jns    c000d244 <sinc_stereo_vari_process+0x18a>
c000d1f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d203:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d207:	eb 1b                	jmp    c000d224 <sinc_stereo_vari_process+0x16a>
c000d209:	68 00 00 f0 3f       	push   0x3ff00000
c000d20e:	6a 00                	push   0x0
c000d210:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d218:	e8 ca b6 01 00       	call   c00288e7 <__ltdf2>
c000d21d:	83 c4 10             	add    esp,0x10
c000d220:	85 c0                	test   eax,eax
c000d222:	79 20                	jns    c000d244 <sinc_stereo_vari_process+0x18a>
c000d224:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d228:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d22c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d230:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d234:	e8 c3 b0 01 00       	call   c00282fc <__divdf3>
c000d239:	83 c4 10             	add    esp,0x10
c000d23c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d240:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d244:	50                   	push   eax
c000d245:	50                   	push   eax
c000d246:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d24a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d24e:	e8 4d b8 01 00       	call   c0028aa0 <lrint>
c000d253:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d256:	40                   	inc    eax
c000d257:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d25b:	0f af c7             	imul   eax,edi
c000d25e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d262:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d265:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d269:	58                   	pop    eax
c000d26a:	5a                   	pop    edx
c000d26b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d26f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d273:	e8 28 b8 01 00       	call   c0028aa0 <lrint>
c000d278:	83 ec 0c             	sub    esp,0xc
c000d27b:	50                   	push   eax
c000d27c:	e8 fa b3 01 00       	call   c002867b <__floatsidf>
c000d281:	83 c4 10             	add    esp,0x10
c000d284:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d288:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d28c:	52                   	push   edx
c000d28d:	50                   	push   eax
c000d28e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d292:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d296:	e8 51 ad 01 00       	call   c0027fec <__subdf3>
c000d29b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d29f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2a3:	83 c4 20             	add    esp,0x20
c000d2a6:	6a 00                	push   0x0
c000d2a8:	6a 00                	push   0x0
c000d2aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2b2:	e8 30 b6 01 00       	call   c00288e7 <__ltdf2>
c000d2b7:	83 c4 10             	add    esp,0x10
c000d2ba:	85 c0                	test   eax,eax
c000d2bc:	79 1f                	jns    c000d2dd <sinc_stereo_vari_process+0x223>
c000d2be:	68 00 00 f0 3f       	push   0x3ff00000
c000d2c3:	6a 00                	push   0x0
c000d2c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2cd:	e8 c9 a6 01 00       	call   c002799b <__adddf3>
c000d2d2:	83 c4 10             	add    esp,0x10
c000d2d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2dd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d2e0:	83 ec 10             	sub    esp,0x10
c000d2e3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2fa:	e8 ed ac 01 00       	call   c0027fec <__subdf3>
c000d2ff:	83 c4 18             	add    esp,0x18
c000d302:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d306:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	e8 8f b7 01 00       	call   c0028aa0 <lrint>
c000d311:	0f af f8             	imul   edi,eax
c000d314:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d318:	01 f8                	add    eax,edi
c000d31a:	99                   	cdq    
c000d31b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d31e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d321:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d325:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d329:	68 00 00 f0 3f       	push   0x3ff00000
c000d32e:	6a 00                	push   0x0
c000d330:	e8 c7 af 01 00       	call   c00282fc <__divdf3>
c000d335:	83 c4 10             	add    esp,0x10
c000d338:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d33c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d340:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d345:	68 23 42 92 0c       	push   0xc924223
c000d34a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d34e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d352:	e8 44 a6 01 00       	call   c002799b <__adddf3>
c000d357:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d35b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d35f:	83 c4 20             	add    esp,0x20
c000d362:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d36a:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d372:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d375:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d378:	7d 50                	jge    c000d3ca <sinc_stereo_vari_process+0x310>
c000d37a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d37d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d380:	01 c8                	add    eax,ecx
c000d382:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d385:	99                   	cdq    
c000d386:	f7 f9                	idiv   ecx
c000d388:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d38c:	7d 0c                	jge    c000d39a <sinc_stereo_vari_process+0x2e0>
c000d38e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d391:	85 ff                	test   edi,edi
c000d393:	79 6c                	jns    c000d401 <sinc_stereo_vari_process+0x347>
c000d395:	e9 e7 00 00 00       	jmp    c000d481 <sinc_stereo_vari_process+0x3c7>
c000d39a:	50                   	push   eax
c000d39b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d39f:	56                   	push   esi
c000d3a0:	53                   	push   ebx
c000d3a1:	e8 4c e7 ff ff       	call   c000baf2 <prepare_data>
c000d3a6:	83 c4 10             	add    esp,0x10
c000d3a9:	89 c2                	mov    edx,eax
c000d3ab:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d3ae:	85 c0                	test   eax,eax
c000d3b0:	0f 85 bf 03 00 00    	jne    c000d775 <sinc_stereo_vari_process+0x6bb>
c000d3b6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d3b9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d3bc:	01 c8                	add    eax,ecx
c000d3be:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d3c1:	99                   	cdq    
c000d3c2:	f7 f9                	idiv   ecx
c000d3c4:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d3c8:	7c c4                	jl     c000d38e <sinc_stereo_vari_process+0x2d4>
c000d3ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d3ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d3d2:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d3d5:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d3d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d3e0:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d3e3:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d3e6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d3e9:	99                   	cdq    
c000d3ea:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d3ed:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d3f0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d3f3:	99                   	cdq    
c000d3f4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d3f7:	31 d2                	xor    edx,edx
c000d3f9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d3fc:	e9 74 03 00 00       	jmp    c000d775 <sinc_stereo_vari_process+0x6bb>
c000d401:	83 ec 0c             	sub    esp,0xc
c000d404:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d407:	e8 6f b2 01 00       	call   c002867b <__floatsidf>
c000d40c:	83 c4 10             	add    esp,0x10
c000d40f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d413:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d417:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d41b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d41f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d423:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d427:	e8 6f a5 01 00       	call   c002799b <__adddf3>
c000d42c:	83 c4 10             	add    esp,0x10
c000d42f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d433:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d437:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d43b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d43f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d443:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d447:	e8 4f a5 01 00       	call   c002799b <__adddf3>
c000d44c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d44f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d453:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d457:	e8 1f b2 01 00       	call   c002867b <__floatsidf>
c000d45c:	83 c4 10             	add    esp,0x10
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	50                   	push   eax
c000d469:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d46d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d471:	e8 6f b4 01 00       	call   c00288e5 <__gedf2>
c000d476:	83 c4 10             	add    esp,0x10
c000d479:	85 c0                	test   eax,eax
c000d47b:	0f 89 49 ff ff ff    	jns    c000d3ca <sinc_stereo_vari_process+0x310>
c000d481:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d485:	0f 8e ef 00 00 00    	jle    c000d57a <sinc_stereo_vari_process+0x4c0>
c000d48b:	83 ec 10             	sub    esp,0x10
c000d48e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d491:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d494:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d497:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d49a:	e8 4d ab 01 00       	call   c0027fec <__subdf3>
c000d49f:	83 c4 18             	add    esp,0x18
c000d4a2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4aa:	52                   	push   edx
c000d4ab:	50                   	push   eax
c000d4ac:	e8 cf b5 01 00       	call   c0028a80 <fabs>
c000d4b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d4b5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d4b9:	83 c4 10             	add    esp,0x10
c000d4bc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d4c1:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d4c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ce:	e8 f6 b3 01 00       	call   c00288c9 <__gtdf2>
c000d4d3:	83 c4 10             	add    esp,0x10
c000d4d6:	85 c0                	test   eax,eax
c000d4d8:	0f 8e 9c 00 00 00    	jle    c000d57a <sinc_stereo_vari_process+0x4c0>
c000d4de:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d4e1:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d4e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d4e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d4ec:	52                   	push   edx
c000d4ed:	50                   	push   eax
c000d4ee:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d4f1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d4f4:	e8 f3 aa 01 00       	call   c0027fec <__subdf3>
c000d4f9:	59                   	pop    ecx
c000d4fa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d4fe:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d502:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d505:	e8 71 b1 01 00       	call   c002867b <__floatsidf>
c000d50a:	83 c4 10             	add    esp,0x10
c000d50d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d511:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d515:	52                   	push   edx
c000d516:	50                   	push   eax
c000d517:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d51b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d51f:	e8 f4 aa 01 00       	call   c0028018 <__muldf3>
c000d524:	5f                   	pop    edi
c000d525:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d529:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d52d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d530:	e8 46 b1 01 00       	call   c002867b <__floatsidf>
c000d535:	83 c4 10             	add    esp,0x10
c000d538:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d53c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d540:	52                   	push   edx
c000d541:	50                   	push   eax
c000d542:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d546:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d54a:	e8 ad ad 01 00       	call   c00282fc <__divdf3>
c000d54f:	83 c4 10             	add    esp,0x10
c000d552:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d556:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d55a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d55e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d562:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d566:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d56a:	e8 2c a4 01 00       	call   c002799b <__adddf3>
c000d56f:	83 c4 10             	add    esp,0x10
c000d572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d576:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d57a:	83 ec 0c             	sub    esp,0xc
c000d57d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d580:	e8 f6 b0 01 00       	call   c002867b <__floatsidf>
c000d585:	83 c4 10             	add    esp,0x10
c000d588:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d58c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d594:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a0:	e8 42 b3 01 00       	call   c00288e7 <__ltdf2>
c000d5a5:	83 c4 10             	add    esp,0x10
c000d5a8:	85 c0                	test   eax,eax
c000d5aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5ae:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d5b2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d5b6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d5ba:	78 10                	js     c000d5cc <sinc_stereo_vari_process+0x512>
c000d5bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d5c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d5c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d5c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d5cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5dc:	e8 37 aa 01 00       	call   c0028018 <__muldf3>
c000d5e1:	59                   	pop    ecx
c000d5e2:	5f                   	pop    edi
c000d5e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d5ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d5f3:	e8 d3 e4 ff ff       	call   c000bacb <double_to_fp>
c000d5f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5fc:	89 c7                	mov    edi,eax
c000d5fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d602:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d606:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d60a:	e8 09 aa 01 00       	call   c0028018 <__muldf3>
c000d60f:	83 c4 18             	add    esp,0x18
c000d612:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d616:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d61a:	52                   	push   edx
c000d61b:	50                   	push   eax
c000d61c:	e8 aa e4 ff ff       	call   c000bacb <double_to_fp>
c000d621:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d624:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d628:	83 c4 0c             	add    esp,0xc
c000d62b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d62e:	8d 04 90             	lea    eax,[eax+edx*4]
c000d631:	50                   	push   eax
c000d632:	50                   	push   eax
c000d633:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d636:	e8 40 b0 01 00       	call   c002867b <__floatsidf>
c000d63b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d63f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d643:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d647:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d64b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d64f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d653:	e8 a4 ac 01 00       	call   c00282fc <__divdf3>
c000d658:	83 c4 18             	add    esp,0x18
c000d65b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d65f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d663:	52                   	push   edx
c000d664:	89 fa                	mov    edx,edi
c000d666:	50                   	push   eax
c000d667:	89 d8                	mov    eax,ebx
c000d669:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d66d:	e8 02 c7 ff ff       	call   c0009d74 <calc_output_stereo>
c000d672:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d676:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d67a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d67e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d682:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d686:	e8 71 ac 01 00       	call   c00282fc <__divdf3>
c000d68b:	83 c4 10             	add    esp,0x10
c000d68e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d692:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d69a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d69e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6a6:	e8 f0 a2 01 00       	call   c002799b <__adddf3>
c000d6ab:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d6af:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d6b3:	83 c4 18             	add    esp,0x18
c000d6b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d6ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d6be:	e8 dd b3 01 00       	call   c0028aa0 <lrint>
c000d6c3:	83 ec 0c             	sub    esp,0xc
c000d6c6:	50                   	push   eax
c000d6c7:	e8 af af 01 00       	call   c002867b <__floatsidf>
c000d6cc:	83 c4 10             	add    esp,0x10
c000d6cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d7:	52                   	push   edx
c000d6d8:	50                   	push   eax
c000d6d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6e1:	e8 06 a9 01 00       	call   c0027fec <__subdf3>
c000d6e6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6ee:	83 c4 20             	add    esp,0x20
c000d6f1:	6a 00                	push   0x0
c000d6f3:	6a 00                	push   0x0
c000d6f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6fd:	e8 e5 b1 01 00       	call   c00288e7 <__ltdf2>
c000d702:	83 c4 10             	add    esp,0x10
c000d705:	85 c0                	test   eax,eax
c000d707:	79 20                	jns    c000d729 <sinc_stereo_vari_process+0x66f>
c000d709:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d70d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d711:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d715:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d719:	e8 7d a2 01 00       	call   c002799b <__adddf3>
c000d71e:	83 c4 10             	add    esp,0x10
c000d721:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d725:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d729:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d72c:	83 ec 10             	sub    esp,0x10
c000d72f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d733:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d73a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d73e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d742:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d746:	e8 a1 a8 01 00       	call   c0027fec <__subdf3>
c000d74b:	83 c4 18             	add    esp,0x18
c000d74e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d752:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d756:	52                   	push   edx
c000d757:	50                   	push   eax
c000d758:	e8 43 b3 01 00       	call   c0028aa0 <lrint>
c000d75d:	0f af f8             	imul   edi,eax
c000d760:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d764:	83 c4 10             	add    esp,0x10
c000d767:	01 f8                	add    eax,edi
c000d769:	99                   	cdq    
c000d76a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d76d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d770:	e9 fd fb ff ff       	jmp    c000d372 <sinc_stereo_vari_process+0x2b8>
c000d775:	83 c4 4c             	add    esp,0x4c
c000d778:	89 d0                	mov    eax,edx
c000d77a:	5b                   	pop    ebx
c000d77b:	5e                   	pop    esi
c000d77c:	5f                   	pop    edi
c000d77d:	5d                   	pop    ebp
c000d77e:	c3                   	ret    

c000d77f <sinc_mono_vari_process>:
c000d77f:	55                   	push   ebp
c000d780:	ba 05 00 00 00       	mov    edx,0x5
c000d785:	57                   	push   edi
c000d786:	56                   	push   esi
c000d787:	53                   	push   ebx
c000d788:	83 ec 4c             	sub    esp,0x4c
c000d78b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d78f:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d793:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d796:	85 db                	test   ebx,ebx
c000d798:	0f 84 c1 06 00 00    	je     c000de5f <sinc_mono_vari_process+0x6e0>
c000d79e:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d7a1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7a4:	0f af c7             	imul   eax,edi
c000d7a7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d7aa:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d7ad:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d7b4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d7bb:	0f af c7             	imul   eax,edi
c000d7be:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d7c1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d7c5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d7c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7d2:	68 00 00 70 3f       	push   0x3f700000
c000d7d7:	6a 00                	push   0x0
c000d7d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7e1:	e8 01 b1 01 00       	call   c00288e7 <__ltdf2>
c000d7e6:	83 c4 10             	add    esp,0x10
c000d7e9:	ba 16 00 00 00       	mov    edx,0x16
c000d7ee:	85 c0                	test   eax,eax
c000d7f0:	0f 88 69 06 00 00    	js     c000de5f <sinc_mono_vari_process+0x6e0>
c000d7f6:	68 00 00 70 40       	push   0x40700000
c000d7fb:	6a 00                	push   0x0
c000d7fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d801:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d805:	e8 bf b0 01 00       	call   c00288c9 <__gtdf2>
c000d80a:	83 c4 10             	add    esp,0x10
c000d80d:	ba 16 00 00 00       	mov    edx,0x16
c000d812:	85 c0                	test   eax,eax
c000d814:	0f 8f 45 06 00 00    	jg     c000de5f <sinc_mono_vari_process+0x6e0>
c000d81a:	83 ec 0c             	sub    esp,0xc
c000d81d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d820:	e8 56 ae 01 00       	call   c002867b <__floatsidf>
c000d825:	83 c4 10             	add    esp,0x10
c000d828:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d82c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d830:	68 00 00 00 40       	push   0x40000000
c000d835:	6a 00                	push   0x0
c000d837:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d83b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d83f:	e8 57 a1 01 00       	call   c002799b <__adddf3>
c000d844:	59                   	pop    ecx
c000d845:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d849:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d84d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d850:	e8 26 ae 01 00       	call   c002867b <__floatsidf>
c000d855:	83 c4 10             	add    esp,0x10
c000d858:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d85c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d860:	52                   	push   edx
c000d861:	50                   	push   eax
c000d862:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d866:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d86a:	e8 8d aa 01 00       	call   c00282fc <__divdf3>
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d876:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d87a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d87d:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d880:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d884:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d888:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d88c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d890:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d894:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d898:	e8 2c b0 01 00       	call   c00288c9 <__gtdf2>
c000d89d:	83 c4 10             	add    esp,0x10
c000d8a0:	85 c0                	test   eax,eax
c000d8a2:	7e 2d                	jle    c000d8d1 <sinc_mono_vari_process+0x152>
c000d8a4:	68 00 00 f0 3f       	push   0x3ff00000
c000d8a9:	6a 00                	push   0x0
c000d8ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8b3:	e8 2f b0 01 00       	call   c00288e7 <__ltdf2>
c000d8b8:	83 c4 10             	add    esp,0x10
c000d8bb:	85 c0                	test   eax,eax
c000d8bd:	79 4d                	jns    c000d90c <sinc_mono_vari_process+0x18d>
c000d8bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d8cf:	eb 1b                	jmp    c000d8ec <sinc_mono_vari_process+0x16d>
c000d8d1:	68 00 00 f0 3f       	push   0x3ff00000
c000d8d6:	6a 00                	push   0x0
c000d8d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8e0:	e8 02 b0 01 00       	call   c00288e7 <__ltdf2>
c000d8e5:	83 c4 10             	add    esp,0x10
c000d8e8:	85 c0                	test   eax,eax
c000d8ea:	79 20                	jns    c000d90c <sinc_mono_vari_process+0x18d>
c000d8ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8fc:	e8 fb a9 01 00       	call   c00282fc <__divdf3>
c000d901:	83 c4 10             	add    esp,0x10
c000d904:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d908:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d90c:	50                   	push   eax
c000d90d:	50                   	push   eax
c000d90e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d912:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d916:	e8 85 b1 01 00       	call   c0028aa0 <lrint>
c000d91b:	40                   	inc    eax
c000d91c:	0f af c7             	imul   eax,edi
c000d91f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d923:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d927:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d92a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d92d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d931:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d935:	58                   	pop    eax
c000d936:	5a                   	pop    edx
c000d937:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d93b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d93f:	e8 5c b1 01 00       	call   c0028aa0 <lrint>
c000d944:	83 ec 0c             	sub    esp,0xc
c000d947:	50                   	push   eax
c000d948:	e8 2e ad 01 00       	call   c002867b <__floatsidf>
c000d94d:	83 c4 10             	add    esp,0x10
c000d950:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d954:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d958:	52                   	push   edx
c000d959:	50                   	push   eax
c000d95a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d962:	e8 85 a6 01 00       	call   c0027fec <__subdf3>
c000d967:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d96b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d96f:	83 c4 20             	add    esp,0x20
c000d972:	6a 00                	push   0x0
c000d974:	6a 00                	push   0x0
c000d976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d97a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d97e:	e8 64 af 01 00       	call   c00288e7 <__ltdf2>
c000d983:	83 c4 10             	add    esp,0x10
c000d986:	85 c0                	test   eax,eax
c000d988:	79 1f                	jns    c000d9a9 <sinc_mono_vari_process+0x22a>
c000d98a:	68 00 00 f0 3f       	push   0x3ff00000
c000d98f:	6a 00                	push   0x0
c000d991:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d995:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d999:	e8 fd 9f 01 00       	call   c002799b <__adddf3>
c000d99e:	83 c4 10             	add    esp,0x10
c000d9a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9a9:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9ac:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d9af:	83 ec 10             	sub    esp,0x10
c000d9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9c2:	e8 25 a6 01 00       	call   c0027fec <__subdf3>
c000d9c7:	83 c4 18             	add    esp,0x18
c000d9ca:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d9ce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d9d2:	52                   	push   edx
c000d9d3:	50                   	push   eax
c000d9d4:	e8 c7 b0 01 00       	call   c0028aa0 <lrint>
c000d9d9:	0f af f8             	imul   edi,eax
c000d9dc:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d9df:	31 ff                	xor    edi,edi
c000d9e1:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d9e6:	99                   	cdq    
c000d9e7:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d9ea:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d9ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d9f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d9f5:	55                   	push   ebp
c000d9f6:	57                   	push   edi
c000d9f7:	e8 00 a9 01 00       	call   c00282fc <__divdf3>
c000d9fc:	83 c4 10             	add    esp,0x10
c000d9ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da03:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da07:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000da0c:	68 23 42 92 0c       	push   0xc924223
c000da11:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da19:	e8 7d 9f 01 00       	call   c002799b <__adddf3>
c000da1e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000da22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000da26:	83 c4 20             	add    esp,0x20
c000da29:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000da2d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000da31:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000da34:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000da37:	7d 54                	jge    c000da8d <sinc_mono_vari_process+0x30e>
c000da39:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000da3c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000da3f:	01 c8                	add    eax,ecx
c000da41:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000da44:	99                   	cdq    
c000da45:	f7 f9                	idiv   ecx
c000da47:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000da4b:	7d 0c                	jge    c000da59 <sinc_mono_vari_process+0x2da>
c000da4d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000da50:	85 ff                	test   edi,edi
c000da52:	79 73                	jns    c000dac7 <sinc_mono_vari_process+0x348>
c000da54:	e9 ee 00 00 00       	jmp    c000db47 <sinc_mono_vari_process+0x3c8>
c000da59:	50                   	push   eax
c000da5a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000da5e:	56                   	push   esi
c000da5f:	53                   	push   ebx
c000da60:	e8 8d e0 ff ff       	call   c000baf2 <prepare_data>
c000da65:	89 c2                	mov    edx,eax
c000da67:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000da6b:	83 c4 10             	add    esp,0x10
c000da6e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000da71:	85 d2                	test   edx,edx
c000da73:	0f 85 e6 03 00 00    	jne    c000de5f <sinc_mono_vari_process+0x6e0>
c000da79:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000da7c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000da7f:	01 c8                	add    eax,ecx
c000da81:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000da84:	99                   	cdq    
c000da85:	f7 f9                	idiv   ecx
c000da87:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000da8b:	7c c0                	jl     c000da4d <sinc_mono_vari_process+0x2ce>
c000da8d:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000da91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000da95:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000da99:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000da9c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000da9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daa3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000daa7:	89 01                	mov    DWORD PTR [ecx],eax
c000daa9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000daac:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000daaf:	99                   	cdq    
c000dab0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000dab3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000dab6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000dab9:	99                   	cdq    
c000daba:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000dabd:	31 d2                	xor    edx,edx
c000dabf:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000dac2:	e9 98 03 00 00       	jmp    c000de5f <sinc_mono_vari_process+0x6e0>
c000dac7:	83 ec 0c             	sub    esp,0xc
c000daca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000dacd:	e8 a9 ab 01 00       	call   c002867b <__floatsidf>
c000dad2:	83 c4 10             	add    esp,0x10
c000dad5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dad9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dadd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dae1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dae5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dae9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000daed:	e8 a9 9e 01 00       	call   c002799b <__adddf3>
c000daf2:	83 c4 10             	add    esp,0x10
c000daf5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000daf9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dafd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000db01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000db05:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db0d:	e8 89 9e 01 00       	call   c002799b <__adddf3>
c000db12:	89 3c 24             	mov    DWORD PTR [esp],edi
c000db15:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db19:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db1d:	e8 59 ab 01 00       	call   c002867b <__floatsidf>
c000db22:	83 c4 10             	add    esp,0x10
c000db25:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000db29:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000db2d:	52                   	push   edx
c000db2e:	50                   	push   eax
c000db2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db37:	e8 8d ad 01 00       	call   c00288c9 <__gtdf2>
c000db3c:	83 c4 10             	add    esp,0x10
c000db3f:	85 c0                	test   eax,eax
c000db41:	0f 8f 46 ff ff ff    	jg     c000da8d <sinc_mono_vari_process+0x30e>
c000db47:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000db4b:	0f 8e f5 00 00 00    	jle    c000dc46 <sinc_mono_vari_process+0x4c7>
c000db51:	83 ec 10             	sub    esp,0x10
c000db54:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000db57:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000db5a:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000db5e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000db61:	ff 30                	push   DWORD PTR [eax]
c000db63:	e8 84 a4 01 00       	call   c0027fec <__subdf3>
c000db68:	83 c4 18             	add    esp,0x18
c000db6b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000db6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000db73:	52                   	push   edx
c000db74:	50                   	push   eax
c000db75:	e8 06 af 01 00       	call   c0028a80 <fabs>
c000db7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db82:	83 c4 10             	add    esp,0x10
c000db85:	68 df 7c db 3d       	push   0x3ddb7cdf
c000db8a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000db8f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db93:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db97:	e8 2d ad 01 00       	call   c00288c9 <__gtdf2>
c000db9c:	83 c4 10             	add    esp,0x10
c000db9f:	85 c0                	test   eax,eax
c000dba1:	0f 8e 9f 00 00 00    	jle    c000dc46 <sinc_mono_vari_process+0x4c7>
c000dba7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000dbab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dbae:	8b 00                	mov    eax,DWORD PTR [eax]
c000dbb0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbb4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbb8:	52                   	push   edx
c000dbb9:	50                   	push   eax
c000dbba:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dbbd:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dbc0:	e8 27 a4 01 00       	call   c0027fec <__subdf3>
c000dbc5:	5f                   	pop    edi
c000dbc6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dbca:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000dbce:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dbd1:	e8 a5 aa 01 00       	call   c002867b <__floatsidf>
c000dbd6:	83 c4 10             	add    esp,0x10
c000dbd9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dbdd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dbe1:	52                   	push   edx
c000dbe2:	50                   	push   eax
c000dbe3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbe7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbeb:	e8 28 a4 01 00       	call   c0028018 <__muldf3>
c000dbf0:	5d                   	pop    ebp
c000dbf1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dbf5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000dbf9:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dbfc:	e8 7a aa 01 00       	call   c002867b <__floatsidf>
c000dc01:	83 c4 10             	add    esp,0x10
c000dc04:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc08:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc0c:	52                   	push   edx
c000dc0d:	50                   	push   eax
c000dc0e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc16:	e8 e1 a6 01 00       	call   c00282fc <__divdf3>
c000dc1b:	83 c4 10             	add    esp,0x10
c000dc1e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dc22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dc26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc2e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc36:	e8 60 9d 01 00       	call   c002799b <__adddf3>
c000dc3b:	83 c4 10             	add    esp,0x10
c000dc3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc42:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dc46:	83 ec 0c             	sub    esp,0xc
c000dc49:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dc4c:	e8 2a aa 01 00       	call   c002867b <__floatsidf>
c000dc51:	83 c4 10             	add    esp,0x10
c000dc54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc6c:	e8 76 ac 01 00       	call   c00288e7 <__ltdf2>
c000dc71:	83 c4 10             	add    esp,0x10
c000dc74:	85 c0                	test   eax,eax
c000dc76:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000dc7a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000dc7e:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000dc82:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000dc86:	78 10                	js     c000dc98 <sinc_mono_vari_process+0x519>
c000dc88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dc8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dc90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dc94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dc98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dca0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dca4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dca8:	e8 6b a3 01 00       	call   c0028018 <__muldf3>
c000dcad:	59                   	pop    ecx
c000dcae:	5f                   	pop    edi
c000dcaf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dcb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dcb7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dcbb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dcbf:	e8 07 de ff ff       	call   c000bacb <double_to_fp>
c000dcc4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dcc8:	89 c7                	mov    edi,eax
c000dcca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dcce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dcd2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dcd6:	e8 3d a3 01 00       	call   c0028018 <__muldf3>
c000dcdb:	83 c4 18             	add    esp,0x18
c000dcde:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dce2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dce6:	52                   	push   edx
c000dce7:	50                   	push   eax
c000dce8:	e8 de dd ff ff       	call   c000bacb <double_to_fp>
c000dced:	83 ec 0c             	sub    esp,0xc
c000dcf0:	89 c5                	mov    ebp,eax
c000dcf2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dcf5:	e8 81 a9 01 00       	call   c002867b <__floatsidf>
c000dcfa:	83 c4 10             	add    esp,0x10
c000dcfd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd01:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dd05:	52                   	push   edx
c000dd06:	50                   	push   eax
c000dd07:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd0f:	e8 e8 a5 01 00       	call   c00282fc <__divdf3>
c000dd14:	83 c4 10             	add    esp,0x10
c000dd17:	89 e9                	mov    ecx,ebp
c000dd19:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd1d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dd21:	89 d8                	mov    eax,ebx
c000dd23:	89 fa                	mov    edx,edi
c000dd25:	e8 ee bd ff ff       	call   c0009b18 <calc_output_single>
c000dd2a:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dd2d:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dd30:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dd34:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dd38:	52                   	push   edx
c000dd39:	50                   	push   eax
c000dd3a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dd3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dd42:	e8 d1 a2 01 00       	call   c0028018 <__muldf3>
c000dd47:	59                   	pop    ecx
c000dd48:	59                   	pop    ecx
c000dd49:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dd4d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd51:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd59:	e8 8d ab 01 00       	call   c00288eb <__truncdfsf2>
c000dd5e:	83 c4 10             	add    esp,0x10
c000dd61:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000dd64:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000dd67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dd6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dd6f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dd73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dd77:	e8 80 a5 01 00       	call   c00282fc <__divdf3>
c000dd7c:	83 c4 10             	add    esp,0x10
c000dd7f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dd83:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dd87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd97:	e8 ff 9b 01 00       	call   c002799b <__adddf3>
c000dd9c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dda0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dda4:	83 c4 18             	add    esp,0x18
c000dda7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ddab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ddaf:	e8 ec ac 01 00       	call   c0028aa0 <lrint>
c000ddb4:	83 ec 0c             	sub    esp,0xc
c000ddb7:	50                   	push   eax
c000ddb8:	e8 be a8 01 00       	call   c002867b <__floatsidf>
c000ddbd:	83 c4 10             	add    esp,0x10
c000ddc0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ddc4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ddc8:	52                   	push   edx
c000ddc9:	50                   	push   eax
c000ddca:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ddce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ddd2:	e8 15 a2 01 00       	call   c0027fec <__subdf3>
c000ddd7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dddb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dddf:	83 c4 20             	add    esp,0x20
c000dde2:	6a 00                	push   0x0
c000dde4:	6a 00                	push   0x0
c000dde6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddee:	e8 f4 aa 01 00       	call   c00288e7 <__ltdf2>
c000ddf3:	83 c4 10             	add    esp,0x10
c000ddf6:	85 c0                	test   eax,eax
c000ddf8:	79 20                	jns    c000de1a <sinc_mono_vari_process+0x69b>
c000ddfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de0a:	e8 8c 9b 01 00       	call   c002799b <__adddf3>
c000de0f:	83 c4 10             	add    esp,0x10
c000de12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000de1a:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000de1d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000de20:	83 ec 10             	sub    esp,0x10
c000de23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de33:	e8 b4 a1 01 00       	call   c0027fec <__subdf3>
c000de38:	83 c4 18             	add    esp,0x18
c000de3b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000de3f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de43:	52                   	push   edx
c000de44:	50                   	push   eax
c000de45:	e8 56 ac 01 00       	call   c0028aa0 <lrint>
c000de4a:	83 c4 10             	add    esp,0x10
c000de4d:	0f af f8             	imul   edi,eax
c000de50:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000de53:	99                   	cdq    
c000de54:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000de57:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000de5a:	e9 d2 fb ff ff       	jmp    c000da31 <sinc_mono_vari_process+0x2b2>
c000de5f:	83 c4 4c             	add    esp,0x4c
c000de62:	89 d0                	mov    eax,edx
c000de64:	5b                   	pop    ebx
c000de65:	5e                   	pop    esi
c000de66:	5f                   	pop    edi
c000de67:	5d                   	pop    ebp
c000de68:	c3                   	ret    

c000de69 <sinc_get_name>:
c000de69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000de6d:	31 c0                	xor    eax,eax
c000de6f:	83 fa 02             	cmp    edx,0x2
c000de72:	77 07                	ja     c000de7b <sinc_get_name+0x12>
c000de74:	8b 04 95 44 a3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5cbc]
c000de7b:	c3                   	ret    

c000de7c <sinc_get_description>:
c000de7c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000de80:	31 c0                	xor    eax,eax
c000de82:	83 fa 02             	cmp    edx,0x2
c000de85:	77 07                	ja     c000de8e <sinc_get_description+0x12>
c000de87:	8b 04 95 38 a3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5cc8]
c000de8e:	c3                   	ret    

c000de8f <sinc_set_converter>:
c000de8f:	53                   	push   ebx
c000de90:	81 ec 58 08 00 00    	sub    esp,0x858
c000de96:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000de9d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dea0:	85 c0                	test   eax,eax
c000dea2:	74 13                	je     c000deb7 <sinc_set_converter+0x28>
c000dea4:	83 ec 0c             	sub    esp,0xc
c000dea7:	50                   	push   eax
c000dea8:	e8 46 1b 00 00       	call   c000f9f3 <free>
c000dead:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000deb4:	83 c4 10             	add    esp,0x10
c000deb7:	50                   	push   eax
c000deb8:	68 44 08 00 00       	push   0x844
c000debd:	6a 00                	push   0x0
c000debf:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dec3:	50                   	push   eax
c000dec4:	e8 87 28 ff ff       	call   c0000750 <memset>
c000dec9:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000decc:	83 c4 10             	add    esp,0x10
c000decf:	b8 0b 00 00 00       	mov    eax,0xb
c000ded4:	81 fa 80 00 00 00    	cmp    edx,0x80
c000deda:	7f 6e                	jg     c000df4a <sinc_set_converter+0xbb>
c000dedc:	83 fa 01             	cmp    edx,0x1
c000dedf:	75 10                	jne    c000def1 <sinc_set_converter+0x62>
c000dee1:	c7 43 24 7f d7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d77f
c000dee8:	c7 43 20 7f d7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d77f
c000deef:	eb 4d                	jmp    c000df3e <sinc_set_converter+0xaf>
c000def1:	83 fa 02             	cmp    edx,0x2
c000def4:	75 10                	jne    c000df06 <sinc_set_converter+0x77>
c000def6:	c7 43 24 ba d0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d0ba
c000defd:	c7 43 20 ba d0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d0ba
c000df04:	eb 38                	jmp    c000df3e <sinc_set_converter+0xaf>
c000df06:	83 fa 04             	cmp    edx,0x4
c000df09:	75 10                	jne    c000df1b <sinc_set_converter+0x8c>
c000df0b:	c7 43 24 f5 c9 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c9f5
c000df12:	c7 43 20 f5 c9 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c9f5
c000df19:	eb 23                	jmp    c000df3e <sinc_set_converter+0xaf>
c000df1b:	83 fa 06             	cmp    edx,0x6
c000df1e:	75 10                	jne    c000df30 <sinc_set_converter+0xa1>
c000df20:	c7 43 24 30 c3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c330
c000df27:	c7 43 20 30 c3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c330
c000df2e:	eb 0e                	jmp    c000df3e <sinc_set_converter+0xaf>
c000df30:	c7 43 24 6c bc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bc6c
c000df37:	c7 43 20 6c bc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bc6c
c000df3e:	c7 43 28 1f af 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000af1f
c000df45:	b8 0a 00 00 00       	mov    eax,0xa
c000df4a:	81 c4 58 08 00 00    	add    esp,0x858
c000df50:	5b                   	pop    ebx
c000df51:	c3                   	ret    

c000df52 <zoh_vari_process>:
c000df52:	55                   	push   ebp
c000df53:	31 d2                	xor    edx,edx
c000df55:	57                   	push   edi
c000df56:	56                   	push   esi
c000df57:	53                   	push   ebx
c000df58:	83 ec 3c             	sub    esp,0x3c
c000df5b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000df5f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000df63:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000df67:	0f 8e 80 06 00 00    	jle    c000e5ed <zoh_vari_process+0x69b>
c000df6d:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000df70:	ba 05 00 00 00       	mov    edx,0x5
c000df75:	85 db                	test   ebx,ebx
c000df77:	0f 84 70 06 00 00    	je     c000e5ed <zoh_vari_process+0x69b>
c000df7d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000df80:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000df84:	74 19                	je     c000df9f <zoh_vari_process+0x4d>
c000df86:	31 d2                	xor    edx,edx
c000df88:	39 c2                	cmp    edx,eax
c000df8a:	7d 0c                	jge    c000df98 <zoh_vari_process+0x46>
c000df8c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000df8e:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000df91:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000df95:	42                   	inc    edx
c000df96:	eb f0                	jmp    c000df88 <zoh_vari_process+0x36>
c000df98:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000df9f:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dfa2:	0f af d0             	imul   edx,eax
c000dfa5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dfa8:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dfac:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dfb3:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dfb6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dfbd:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dfc0:	8b 07                	mov    eax,DWORD PTR [edi]
c000dfc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	68 00 00 70 3f       	push   0x3f700000
c000dfcf:	6a 00                	push   0x0
c000dfd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfd9:	e8 09 a9 01 00       	call   c00288e7 <__ltdf2>
c000dfde:	83 c4 10             	add    esp,0x10
c000dfe1:	ba 16 00 00 00       	mov    edx,0x16
c000dfe6:	85 c0                	test   eax,eax
c000dfe8:	0f 88 ff 05 00 00    	js     c000e5ed <zoh_vari_process+0x69b>
c000dfee:	68 00 00 70 40       	push   0x40700000
c000dff3:	6a 00                	push   0x0
c000dff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dffd:	e8 c7 a8 01 00       	call   c00288c9 <__gtdf2>
c000e002:	83 c4 10             	add    esp,0x10
c000e005:	ba 16 00 00 00       	mov    edx,0x16
c000e00a:	85 c0                	test   eax,eax
c000e00c:	0f 8f db 05 00 00    	jg     c000e5ed <zoh_vari_process+0x69b>
c000e012:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e015:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000e018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e01c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e020:	68 00 00 f0 3f       	push   0x3ff00000
c000e025:	6a 00                	push   0x0
c000e027:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02f:	e8 b3 a8 01 00       	call   c00288e7 <__ltdf2>
c000e034:	83 c4 10             	add    esp,0x10
c000e037:	85 c0                	test   eax,eax
c000e039:	0f 89 da 01 00 00    	jns    c000e219 <zoh_vari_process+0x2c7>
c000e03f:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000e042:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000e045:	0f 8d ce 01 00 00    	jge    c000e219 <zoh_vari_process+0x2c7>
c000e04b:	83 ec 0c             	sub    esp,0xc
c000e04e:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e051:	e8 25 a6 01 00       	call   c002867b <__floatsidf>
c000e056:	83 c4 10             	add    esp,0x10
c000e059:	89 04 24             	mov    DWORD PTR [esp],eax
c000e05c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e068:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e070:	e8 a3 9f 01 00       	call   c0028018 <__muldf3>
c000e075:	59                   	pop    ecx
c000e076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e07a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e07e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000e081:	e8 f5 a5 01 00       	call   c002867b <__floatsidf>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e08d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e091:	52                   	push   edx
c000e092:	50                   	push   eax
c000e093:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e097:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e09b:	e8 fb 98 01 00       	call   c002799b <__adddf3>
c000e0a0:	59                   	pop    ecx
c000e0a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e0a5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e0a9:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000e0ac:	e8 ca a5 01 00       	call   c002867b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	52                   	push   edx
c000e0bd:	50                   	push   eax
c000e0be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c6:	e8 1a a8 01 00       	call   c00288e5 <__gedf2>
c000e0cb:	83 c4 10             	add    esp,0x10
c000e0ce:	85 c0                	test   eax,eax
c000e0d0:	0f 89 43 01 00 00    	jns    c000e219 <zoh_vari_process+0x2c7>
c000e0d6:	85 ed                	test   ebp,ebp
c000e0d8:	0f 8e ec 00 00 00    	jle    c000e1ca <zoh_vari_process+0x278>
c000e0de:	83 ec 10             	sub    esp,0x10
c000e0e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e0e4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e0e7:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e0ea:	ff 37                	push   DWORD PTR [edi]
c000e0ec:	e8 fb 9e 01 00       	call   c0027fec <__subdf3>
c000e0f1:	83 c4 18             	add    esp,0x18
c000e0f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e0f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e0fc:	52                   	push   edx
c000e0fd:	50                   	push   eax
c000e0fe:	e8 7d a9 01 00       	call   c0028a80 <fabs>
c000e103:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e107:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e10b:	83 c4 10             	add    esp,0x10
c000e10e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e113:	68 23 42 92 0c       	push   0xc924223
c000e118:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e11c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e120:	e8 a4 a7 01 00       	call   c00288c9 <__gtdf2>
c000e125:	83 c4 10             	add    esp,0x10
c000e128:	85 c0                	test   eax,eax
c000e12a:	0f 8e 9a 00 00 00    	jle    c000e1ca <zoh_vari_process+0x278>
c000e130:	8b 07                	mov    eax,DWORD PTR [edi]
c000e132:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e135:	89 04 24             	mov    DWORD PTR [esp],eax
c000e138:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e13c:	52                   	push   edx
c000e13d:	50                   	push   eax
c000e13e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e141:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e144:	e8 a3 9e 01 00       	call   c0027fec <__subdf3>
c000e149:	59                   	pop    ecx
c000e14a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e14e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e152:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e155:	e8 21 a5 01 00       	call   c002867b <__floatsidf>
c000e15a:	83 c4 10             	add    esp,0x10
c000e15d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e161:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e165:	52                   	push   edx
c000e166:	50                   	push   eax
c000e167:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e16b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e16f:	e8 a4 9e 01 00       	call   c0028018 <__muldf3>
c000e174:	5d                   	pop    ebp
c000e175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e179:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e17d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e180:	e8 f6 a4 01 00       	call   c002867b <__floatsidf>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e18c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e190:	52                   	push   edx
c000e191:	50                   	push   eax
c000e192:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e196:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e19a:	e8 5d a1 01 00       	call   c00282fc <__divdf3>
c000e19f:	83 c4 10             	add    esp,0x10
c000e1a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e1ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e1b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e1b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e1ba:	e8 dc 97 01 00       	call   c002799b <__adddf3>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1ca:	31 c0                	xor    eax,eax
c000e1cc:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000e1cf:	7e 13                	jle    c000e1e4 <zoh_vari_process+0x292>
c000e1d1:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000e1d5:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e1d8:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000e1db:	40                   	inc    eax
c000e1dc:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000e1df:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e1e2:	eb e8                	jmp    c000e1cc <zoh_vari_process+0x27a>
c000e1e4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e1e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e1ec:	68 00 00 f0 3f       	push   0x3ff00000
c000e1f1:	6a 00                	push   0x0
c000e1f3:	e8 04 a1 01 00       	call   c00282fc <__divdf3>
c000e1f8:	83 c4 10             	add    esp,0x10
c000e1fb:	89 04 24             	mov    DWORD PTR [esp],eax
c000e1fe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e202:	52                   	push   edx
c000e203:	50                   	push   eax
c000e204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e208:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20c:	e8 8a 97 01 00       	call   c002799b <__adddf3>
c000e211:	83 c4 10             	add    esp,0x10
c000e214:	e9 ff fd ff ff       	jmp    c000e018 <zoh_vari_process+0xc6>
c000e219:	55                   	push   ebp
c000e21a:	55                   	push   ebp
c000e21b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e223:	e8 78 a8 01 00       	call   c0028aa0 <lrint>
c000e228:	83 ec 0c             	sub    esp,0xc
c000e22b:	50                   	push   eax
c000e22c:	e8 4a a4 01 00       	call   c002867b <__floatsidf>
c000e231:	83 c4 10             	add    esp,0x10
c000e234:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e238:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e23c:	52                   	push   edx
c000e23d:	50                   	push   eax
c000e23e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e242:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e246:	e8 a1 9d 01 00       	call   c0027fec <__subdf3>
c000e24b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e24f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e253:	83 c4 20             	add    esp,0x20
c000e256:	6a 00                	push   0x0
c000e258:	6a 00                	push   0x0
c000e25a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e25e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e262:	e8 80 a6 01 00       	call   c00288e7 <__ltdf2>
c000e267:	83 c4 10             	add    esp,0x10
c000e26a:	85 c0                	test   eax,eax
c000e26c:	79 1e                	jns    c000e28c <zoh_vari_process+0x33a>
c000e26e:	68 00 00 f0 3f       	push   0x3ff00000
c000e273:	6a 00                	push   0x0
c000e275:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e279:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e27d:	e8 19 97 01 00       	call   c002799b <__adddf3>
c000e282:	83 c4 10             	add    esp,0x10
c000e285:	89 04 24             	mov    DWORD PTR [esp],eax
c000e288:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e28c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e28f:	83 ec 10             	sub    esp,0x10
c000e292:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e296:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e29a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e29e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2a2:	e8 45 9d 01 00       	call   c0027fec <__subdf3>
c000e2a7:	83 c4 18             	add    esp,0x18
c000e2aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2b2:	52                   	push   edx
c000e2b3:	50                   	push   eax
c000e2b4:	e8 e7 a7 01 00       	call   c0028aa0 <lrint>
c000e2b9:	83 c4 10             	add    esp,0x10
c000e2bc:	0f af e8             	imul   ebp,eax
c000e2bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e2c2:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e2c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e2c9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e2cc:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e2cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2d3:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e2d6:	0f 8d 7a 02 00 00    	jge    c000e556 <zoh_vari_process+0x604>
c000e2dc:	83 ec 0c             	sub    esp,0xc
c000e2df:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e2e2:	e8 94 a3 01 00       	call   c002867b <__floatsidf>
c000e2e7:	83 c4 10             	add    esp,0x10
c000e2ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2f2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e2fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e302:	e8 11 9d 01 00       	call   c0028018 <__muldf3>
c000e307:	59                   	pop    ecx
c000e308:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e30c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e310:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e314:	e8 62 a3 01 00       	call   c002867b <__floatsidf>
c000e319:	83 c4 10             	add    esp,0x10
c000e31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e324:	52                   	push   edx
c000e325:	50                   	push   eax
c000e326:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e32a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e32e:	e8 68 96 01 00       	call   c002799b <__adddf3>
c000e333:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e336:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e33a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e33e:	e8 38 a3 01 00       	call   c002867b <__floatsidf>
c000e343:	83 c4 10             	add    esp,0x10
c000e346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e34a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e34e:	52                   	push   edx
c000e34f:	50                   	push   eax
c000e350:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e354:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e358:	e8 8c a5 01 00       	call   c00288e9 <__ledf2>
c000e35d:	83 c4 10             	add    esp,0x10
c000e360:	85 c0                	test   eax,eax
c000e362:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e366:	0f 8f ea 01 00 00    	jg     c000e556 <zoh_vari_process+0x604>
c000e36c:	85 c9                	test   ecx,ecx
c000e36e:	0f 8e ed 00 00 00    	jle    c000e461 <zoh_vari_process+0x50f>
c000e374:	83 ec 10             	sub    esp,0x10
c000e377:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e37a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e37d:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e380:	ff 37                	push   DWORD PTR [edi]
c000e382:	e8 65 9c 01 00       	call   c0027fec <__subdf3>
c000e387:	83 c4 18             	add    esp,0x18
c000e38a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e38e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e392:	52                   	push   edx
c000e393:	50                   	push   eax
c000e394:	e8 e7 a6 01 00       	call   c0028a80 <fabs>
c000e399:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e39d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e3a1:	83 c4 10             	add    esp,0x10
c000e3a4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e3a9:	68 23 42 92 0c       	push   0xc924223
c000e3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3b6:	e8 0e a5 01 00       	call   c00288c9 <__gtdf2>
c000e3bb:	83 c4 10             	add    esp,0x10
c000e3be:	85 c0                	test   eax,eax
c000e3c0:	0f 8e 9b 00 00 00    	jle    c000e461 <zoh_vari_process+0x50f>
c000e3c6:	8b 07                	mov    eax,DWORD PTR [edi]
c000e3c8:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e3cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e3cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e3d3:	52                   	push   edx
c000e3d4:	50                   	push   eax
c000e3d5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e3d8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e3db:	e8 0c 9c 01 00       	call   c0027fec <__subdf3>
c000e3e0:	5d                   	pop    ebp
c000e3e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e3e5:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e3e9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e3ec:	e8 8a a2 01 00       	call   c002867b <__floatsidf>
c000e3f1:	83 c4 10             	add    esp,0x10
c000e3f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e3f8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e3fc:	52                   	push   edx
c000e3fd:	50                   	push   eax
c000e3fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e406:	e8 0d 9c 01 00       	call   c0028018 <__muldf3>
c000e40b:	59                   	pop    ecx
c000e40c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e410:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e414:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e417:	e8 5f a2 01 00       	call   c002867b <__floatsidf>
c000e41c:	83 c4 10             	add    esp,0x10
c000e41f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e423:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e427:	52                   	push   edx
c000e428:	50                   	push   eax
c000e429:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e42d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e431:	e8 c6 9e 01 00       	call   c00282fc <__divdf3>
c000e436:	83 c4 10             	add    esp,0x10
c000e439:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e43d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e441:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e445:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e449:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e44d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e451:	e8 45 95 01 00       	call   c002799b <__adddf3>
c000e456:	83 c4 10             	add    esp,0x10
c000e459:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e45d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e461:	31 d2                	xor    edx,edx
c000e463:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e466:	39 d0                	cmp    eax,edx
c000e468:	7e 1d                	jle    c000e487 <zoh_vari_process+0x535>
c000e46a:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e46d:	29 c1                	sub    ecx,eax
c000e46f:	89 c8                	mov    eax,ecx
c000e471:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e473:	01 d0                	add    eax,edx
c000e475:	42                   	inc    edx
c000e476:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e479:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e47c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e47f:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e482:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e485:	eb dc                	jmp    c000e463 <zoh_vari_process+0x511>
c000e487:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e48b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e48f:	68 00 00 f0 3f       	push   0x3ff00000
c000e494:	6a 00                	push   0x0
c000e496:	e8 61 9e 01 00       	call   c00282fc <__divdf3>
c000e49b:	83 c4 10             	add    esp,0x10
c000e49e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e4a2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e4a6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e4aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e4ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4b6:	e8 e0 94 01 00       	call   c002799b <__adddf3>
c000e4bb:	5d                   	pop    ebp
c000e4bc:	59                   	pop    ecx
c000e4bd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e4c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e4c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4cd:	e8 ce a5 01 00       	call   c0028aa0 <lrint>
c000e4d2:	83 ec 0c             	sub    esp,0xc
c000e4d5:	50                   	push   eax
c000e4d6:	e8 a0 a1 01 00       	call   c002867b <__floatsidf>
c000e4db:	83 c4 10             	add    esp,0x10
c000e4de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e4e2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e4e6:	52                   	push   edx
c000e4e7:	50                   	push   eax
c000e4e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e4ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e4f0:	e8 f7 9a 01 00       	call   c0027fec <__subdf3>
c000e4f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e4f9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e4fd:	83 c4 20             	add    esp,0x20
c000e500:	6a 00                	push   0x0
c000e502:	6a 00                	push   0x0
c000e504:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e508:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e50c:	e8 d6 a3 01 00       	call   c00288e7 <__ltdf2>
c000e511:	83 c4 10             	add    esp,0x10
c000e514:	85 c0                	test   eax,eax
c000e516:	79 1e                	jns    c000e536 <zoh_vari_process+0x5e4>
c000e518:	68 00 00 f0 3f       	push   0x3ff00000
c000e51d:	6a 00                	push   0x0
c000e51f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e523:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e527:	e8 6f 94 01 00       	call   c002799b <__adddf3>
c000e52c:	83 c4 10             	add    esp,0x10
c000e52f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e532:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e536:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e539:	83 ec 10             	sub    esp,0x10
c000e53c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e540:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e548:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e54c:	e8 9b 9a 01 00       	call   c0027fec <__subdf3>
c000e551:	e9 51 fd ff ff       	jmp    c000e2a7 <zoh_vari_process+0x355>
c000e556:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e55a:	7d 3a                	jge    c000e596 <zoh_vari_process+0x644>
c000e55c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e560:	83 ec 0c             	sub    esp,0xc
c000e563:	29 e8                	sub    eax,ebp
c000e565:	99                   	cdq    
c000e566:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e569:	50                   	push   eax
c000e56a:	e8 0c a1 01 00       	call   c002867b <__floatsidf>
c000e56f:	83 c4 10             	add    esp,0x10
c000e572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e576:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e57a:	52                   	push   edx
c000e57b:	50                   	push   eax
c000e57c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e580:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e584:	e8 12 94 01 00       	call   c002799b <__adddf3>
c000e589:	83 c4 10             	add    esp,0x10
c000e58c:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e58f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e592:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e596:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e599:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e59d:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e5a0:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e5a3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e5a6:	85 c0                	test   eax,eax
c000e5a8:	7f 25                	jg     c000e5cf <zoh_vari_process+0x67d>
c000e5aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e5ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e5b2:	89 07                	mov    DWORD PTR [edi],eax
c000e5b4:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e5b7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e5ba:	99                   	cdq    
c000e5bb:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e5be:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e5c1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e5c4:	99                   	cdq    
c000e5c5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e5c8:	31 d2                	xor    edx,edx
c000e5ca:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e5cd:	eb 1e                	jmp    c000e5ed <zoh_vari_process+0x69b>
c000e5cf:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e5d2:	31 d2                	xor    edx,edx
c000e5d4:	29 c8                	sub    eax,ecx
c000e5d6:	c1 e0 02             	shl    eax,0x2
c000e5d9:	39 d1                	cmp    ecx,edx
c000e5db:	7e cd                	jle    c000e5aa <zoh_vari_process+0x658>
c000e5dd:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e5df:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e5e3:	83 c0 04             	add    eax,0x4
c000e5e6:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e5ea:	42                   	inc    edx
c000e5eb:	eb ec                	jmp    c000e5d9 <zoh_vari_process+0x687>
c000e5ed:	83 c4 3c             	add    esp,0x3c
c000e5f0:	89 d0                	mov    eax,edx
c000e5f2:	5b                   	pop    ebx
c000e5f3:	5e                   	pop    esi
c000e5f4:	5f                   	pop    edi
c000e5f5:	5d                   	pop    ebp
c000e5f6:	c3                   	ret    

c000e5f7 <zoh_reset>:
c000e5f7:	83 ec 0c             	sub    esp,0xc
c000e5fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e5fe:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e601:	85 c0                	test   eax,eax
c000e603:	74 20                	je     c000e625 <zoh_reset+0x2e>
c000e605:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e608:	83 c0 1c             	add    eax,0x1c
c000e60b:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e60e:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e615:	c1 e2 02             	shl    edx,0x2
c000e618:	51                   	push   ecx
c000e619:	52                   	push   edx
c000e61a:	6a 00                	push   0x0
c000e61c:	50                   	push   eax
c000e61d:	e8 2e 21 ff ff       	call   c0000750 <memset>
c000e622:	83 c4 10             	add    esp,0x10
c000e625:	83 c4 0c             	add    esp,0xc
c000e628:	c3                   	ret    

c000e629 <zoh_get_name>:
c000e629:	31 c0                	xor    eax,eax
c000e62b:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e630:	75 05                	jne    c000e637 <zoh_get_name+0xe>
c000e632:	b8 5e a4 02 c0       	mov    eax,0xc002a45e
c000e637:	c3                   	ret    

c000e638 <zoh_get_description>:
c000e638:	31 c0                	xor    eax,eax
c000e63a:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e63f:	75 05                	jne    c000e646 <zoh_get_description+0xe>
c000e641:	b8 6f a4 02 c0       	mov    eax,0xc002a46f
c000e646:	c3                   	ret    

c000e647 <zoh_set_converter>:
c000e647:	53                   	push   ebx
c000e648:	b8 0a 00 00 00       	mov    eax,0xa
c000e64d:	83 ec 08             	sub    esp,0x8
c000e650:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e654:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e659:	75 6e                	jne    c000e6c9 <zoh_set_converter+0x82>
c000e65b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e65e:	85 c0                	test   eax,eax
c000e660:	74 13                	je     c000e675 <zoh_set_converter+0x2e>
c000e662:	83 ec 0c             	sub    esp,0xc
c000e665:	50                   	push   eax
c000e666:	e8 88 13 00 00       	call   c000f9f3 <free>
c000e66b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e672:	83 c4 10             	add    esp,0x10
c000e675:	50                   	push   eax
c000e676:	50                   	push   eax
c000e677:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e67a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e681:	50                   	push   eax
c000e682:	6a 01                	push   0x1
c000e684:	e8 8a 13 00 00       	call   c000fa13 <calloc>
c000e689:	83 c4 10             	add    esp,0x10
c000e68c:	89 c2                	mov    edx,eax
c000e68e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e691:	85 d2                	test   edx,edx
c000e693:	b8 01 00 00 00       	mov    eax,0x1
c000e698:	74 2f                	je     c000e6c9 <zoh_set_converter+0x82>
c000e69a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e69d:	83 ec 0c             	sub    esp,0xc
c000e6a0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e6a3:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e6a9:	c7 43 24 52 df 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000df52
c000e6b0:	c7 43 20 52 df 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000df52
c000e6b7:	c7 43 28 f7 e5 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e5f7
c000e6be:	53                   	push   ebx
c000e6bf:	e8 33 ff ff ff       	call   c000e5f7 <zoh_reset>
c000e6c4:	83 c4 10             	add    esp,0x10
c000e6c7:	31 c0                	xor    eax,eax
c000e6c9:	83 c4 08             	add    esp,0x8
c000e6cc:	5b                   	pop    ebx
c000e6cd:	c3                   	ret    

c000e6ce <CPU::current()>:
c000e6ce:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c000e6d3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e6d9:	c3                   	ret    

c000e6da <operator new(unsigned long)>:
c000e6da:	e9 04 13 00 00       	jmp    c000f9e3 <malloc>

c000e6df <operator delete(void*)>:
c000e6df:	e9 1f 13 00 00       	jmp    c000fa03 <rfree>

c000e6e4 <disableIRQs()>:
c000e6e4:	fa                   	cli    
c000e6e5:	ff 05 e8 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe8
c000e6eb:	c3                   	ret    

c000e6ec <enableIRQs()>:
c000e6ec:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c000e6f1:	48                   	dec    eax
c000e6f2:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c000e6f7:	75 01                	jne    c000e6fa <enableIRQs()+0xe>
c000e6f9:	fb                   	sti    
c000e6fa:	c3                   	ret    

c000e6fb <lockScheduler()>:
c000e6fb:	fa                   	cli    
c000e6fc:	ff 05 e8 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe8
c000e702:	c3                   	ret    

c000e703 <unlockScheduler()>:
c000e703:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c000e708:	48                   	dec    eax
c000e709:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c000e70e:	75 01                	jne    c000e711 <unlockScheduler()+0xe>
c000e710:	fb                   	sti    
c000e711:	c3                   	ret    

c000e712 <lockStuff()>:
c000e712:	fa                   	cli    
c000e713:	ff 05 e8 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe8
c000e719:	ff 05 e4 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe4
c000e71f:	c3                   	ret    

c000e720 <unlockStuff()>:
c000e720:	83 ec 0c             	sub    esp,0xc
c000e723:	a1 e4 fb 02 c0       	mov    eax,ds:0xc002fbe4
c000e728:	48                   	dec    eax
c000e729:	a3 e4 fb 02 c0       	mov    ds:0xc002fbe4,eax
c000e72e:	75 18                	jne    c000e748 <unlockStuff()+0x28>
c000e730:	83 3d e0 fb 02 c0 00 	cmp    DWORD PTR ds:0xc002fbe0,0x0
c000e737:	74 0f                	je     c000e748 <unlockStuff()+0x28>
c000e739:	c7 05 e0 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fbe0,0x0
c000e743:	e8 23 f8 00 00       	call   c001df6b <schedule()>
c000e748:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c000e74d:	48                   	dec    eax
c000e74e:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c000e753:	75 01                	jne    c000e756 <unlockStuff()+0x36>
c000e755:	fb                   	sti    
c000e756:	83 c4 0c             	add    esp,0xc
c000e759:	c3                   	ret    

c000e75a <Virt::getAKernelVAS()>:
c000e75a:	a1 50 e8 02 c0       	mov    eax,ds:0xc002e850
c000e75f:	c3                   	ret    

c000e760 <__not_memcpy>:
c000e760:	57                   	push   edi
c000e761:	56                   	push   esi
c000e762:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e76a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e76e:	89 c7                	mov    edi,eax
c000e770:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e772:	5e                   	pop    esi
c000e773:	5f                   	pop    edi
c000e774:	c3                   	ret    

c000e775 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e775:	83 ec 0c             	sub    esp,0xc
c000e778:	83 ec 08             	sub    esp,0x8
c000e77b:	68 a6 a4 02 c0       	push   0xc002a4a6
c000e780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e784:	e8 0f 21 ff ff       	call   c0000898 <strcmp>
c000e789:	83 c4 10             	add    esp,0x10
c000e78c:	85 c0                	test   eax,eax
c000e78e:	0f 94 c0             	sete   al
c000e791:	84 c0                	test   al,al
c000e793:	74 0a                	je     c000e79f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e795:	b8 e8 e6 02 c0       	mov    eax,0xc002e6e8
c000e79a:	e9 e3 00 00 00       	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e79f:	83 ec 08             	sub    esp,0x8
c000e7a2:	68 af a4 02 c0       	push   0xc002a4af
c000e7a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7ab:	e8 e8 20 ff ff       	call   c0000898 <strcmp>
c000e7b0:	83 c4 10             	add    esp,0x10
c000e7b3:	85 c0                	test   eax,eax
c000e7b5:	0f 94 c0             	sete   al
c000e7b8:	84 c0                	test   al,al
c000e7ba:	74 0a                	je     c000e7c6 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e7bc:	b8 14 6e 02 c0       	mov    eax,0xc0026e14
c000e7c1:	e9 bc 00 00 00       	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e7c6:	83 ec 08             	sub    esp,0x8
c000e7c9:	68 b9 a4 02 c0       	push   0xc002a4b9
c000e7ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7d2:	e8 c1 20 ff ff       	call   c0000898 <strcmp>
c000e7d7:	83 c4 10             	add    esp,0x10
c000e7da:	85 c0                	test   eax,eax
c000e7dc:	0f 94 c0             	sete   al
c000e7df:	84 c0                	test   al,al
c000e7e1:	74 0a                	je     c000e7ed <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e7e3:	b8 48 6b 02 c0       	mov    eax,0xc0026b48
c000e7e8:	e9 95 00 00 00       	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e7ed:	83 ec 08             	sub    esp,0x8
c000e7f0:	68 c2 a4 02 c0       	push   0xc002a4c2
c000e7f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7f9:	e8 9a 20 ff ff       	call   c0000898 <strcmp>
c000e7fe:	83 c4 10             	add    esp,0x10
c000e801:	85 c0                	test   eax,eax
c000e803:	0f 94 c0             	sete   al
c000e806:	84 c0                	test   al,al
c000e808:	74 07                	je     c000e811 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e80a:	b8 14 6f 02 c0       	mov    eax,0xc0026f14
c000e80f:	eb 71                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e811:	83 ec 08             	sub    esp,0x8
c000e814:	68 cc a4 02 c0       	push   0xc002a4cc
c000e819:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e81d:	e8 76 20 ff ff       	call   c0000898 <strcmp>
c000e822:	83 c4 10             	add    esp,0x10
c000e825:	85 c0                	test   eax,eax
c000e827:	0f 94 c0             	sete   al
c000e82a:	84 c0                	test   al,al
c000e82c:	74 07                	je     c000e835 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e82e:	b8 94 6c 02 c0       	mov    eax,0xc0026c94
c000e833:	eb 4d                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e835:	83 ec 08             	sub    esp,0x8
c000e838:	68 d5 a4 02 c0       	push   0xc002a4d5
c000e83d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e841:	e8 52 20 ff ff       	call   c0000898 <strcmp>
c000e846:	83 c4 10             	add    esp,0x10
c000e849:	85 c0                	test   eax,eax
c000e84b:	0f 94 c0             	sete   al
c000e84e:	84 c0                	test   al,al
c000e850:	74 07                	je     c000e859 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e852:	b8 ec e6 02 c0       	mov    eax,0xc002e6ec
c000e857:	eb 29                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e859:	83 ec 08             	sub    esp,0x8
c000e85c:	68 e2 a4 02 c0       	push   0xc002a4e2
c000e861:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e865:	e8 2e 20 ff ff       	call   c0000898 <strcmp>
c000e86a:	83 c4 10             	add    esp,0x10
c000e86d:	85 c0                	test   eax,eax
c000e86f:	0f 94 c0             	sete   al
c000e872:	84 c0                	test   al,al
c000e874:	74 07                	je     c000e87d <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e876:	b8 ed e6 02 c0       	mov    eax,0xc002e6ed
c000e87b:	eb 05                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e87d:	b8 00 00 00 00       	mov    eax,0x0
c000e882:	83 c4 0c             	add    esp,0xc
c000e885:	c3                   	ret    

c000e886 <Computer::close(int, int, void*)>:
c000e886:	57                   	push   edi
c000e887:	56                   	push   esi
c000e888:	53                   	push   ebx
c000e889:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e88d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e891:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e895:	83 ec 0c             	sub    esp,0xc
c000e898:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e89e:	e8 5b 57 00 00       	call   c0013ffe <Device::closeAll()>
c000e8a3:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e8a9:	83 c4 10             	add    esp,0x10
c000e8ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000e8ae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e8b2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e8ba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e8be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8c2:	5b                   	pop    ebx
c000e8c3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e8c6:	5e                   	pop    esi
c000e8c7:	5f                   	pop    edi
c000e8c8:	ff e0                	jmp    eax

c000e8ca <Krnl::firstTask()>:
c000e8ca:	53                   	push   ebx
c000e8cb:	83 ec 14             	sub    esp,0x14
c000e8ce:	68 ef a4 02 c0       	push   0xc002a4ef
c000e8d3:	e8 65 11 00 00       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c000e8d8:	fb                   	sti    
c000e8d9:	c7 04 24 06 a5 02 c0 	mov    DWORD PTR [esp],0xc002a506
c000e8e0:	e8 58 11 00 00       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c000e8e5:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e8ec:	e8 f2 10 00 00       	call   c000f9e3 <malloc>
c000e8f1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e8f8:	89 c3                	mov    ebx,eax
c000e8fa:	ff 35 10 fc 02 c0    	push   DWORD PTR ds:0xc002fc10
c000e900:	68 1f a5 02 c0       	push   0xc002a51f
c000e905:	6a 01                	push   0x1
c000e907:	50                   	push   eax
c000e908:	e8 41 f2 00 00       	call   c001db4e <Process::Process(bool, char const*, Process*, char**)>
c000e90d:	83 c4 20             	add    esp,0x20
c000e910:	68 ff 00 00 00       	push   0xff
c000e915:	6a 00                	push   0x0
c000e917:	68 2b f2 00 c0       	push   0xc000f22b
c000e91c:	53                   	push   ebx
c000e91d:	e8 24 f4 00 00       	call   c001dd46 <Process::createThread(void (*)(void*), void*, int)>
c000e922:	6a 7a                	push   0x7a
c000e924:	6a 00                	push   0x0
c000e926:	68 39 e7 01 c0       	push   0xc001e739
c000e92b:	ff 35 10 fc 02 c0    	push   DWORD PTR ds:0xc002fc10
c000e931:	e8 10 f4 00 00       	call   c001dd46 <Process::createThread(void (*)(void*), void*, int)>
c000e936:	83 c4 14             	add    esp,0x14
c000e939:	a3 c8 fb 02 c0       	mov    ds:0xc002fbc8,eax
c000e93e:	68 c4 a6 02 c0       	push   0xc002a6c4
c000e943:	c6 05 ed e6 02 c0 01 	mov    BYTE PTR ds:0xc002e6ed,0x1
c000e94a:	e8 ee 10 00 00       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c000e94f:	e8 91 01 01 00       	call   c001eae5 <Vm::initialise8086()>
c000e954:	e8 6d 44 00 00       	call   c0012dc6 <Fs::initVFS()>
c000e959:	c7 04 24 2c a5 02 c0 	mov    DWORD PTR [esp],0xc002a52c
c000e960:	e8 d8 10 00 00       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c000e965:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c000e96a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e970:	8b 10                	mov    edx,DWORD PTR [eax]
c000e972:	6a 00                	push   0x0
c000e974:	6a 00                	push   0x0
c000e976:	6a 00                	push   0x0
c000e978:	50                   	push   eax
c000e979:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e97c:	83 c4 14             	add    esp,0x14
c000e97f:	68 c4 a6 02 c0       	push   0xc002a6c4
c000e984:	e8 b4 10 00 00       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c000e989:	e8 48 da 00 00       	call   c001c3d6 <Sys::loadSyscalls()>
c000e98e:	e8 3d b9 00 00       	call   c001a2d0 <Krnl::loadSystemEnv()>
c000e993:	83 c4 0c             	add    esp,0xc
c000e996:	6a 3a                	push   0x3a
c000e998:	68 46 a5 02 c0       	push   0xc002a546
c000e99d:	68 4f a5 02 c0       	push   0xc002a54f
c000e9a2:	e8 ee c7 00 00       	call   c001b195 <Reg::readIntWithDefault(char*, char*, int)>
c000e9a7:	89 04 24             	mov    DWORD PTR [esp],eax
c000e9aa:	e8 07 4f 00 00       	call   c00138b6 <User::loadClockSettings(int)>
c000e9af:	c7 04 24 e8 a6 02 c0 	mov    DWORD PTR [esp],0xc002a6e8
c000e9b6:	e8 82 10 00 00       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c000e9bb:	58                   	pop    eax
c000e9bc:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c000e9c1:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e9c7:	e8 f2 55 00 00       	call   c0013fbe <Device::loadDriversForAll()>
c000e9cc:	c7 04 24 57 a5 02 c0 	mov    DWORD PTR [esp],0xc002a557
c000e9d3:	e8 65 10 00 00       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c000e9d8:	e8 5b b4 00 00       	call   c0019e38 <Krnl::startCPUs()>
c000e9dd:	c7 04 24 71 a5 02 c0 	mov    DWORD PTR [esp],0xc002a571
c000e9e4:	e8 54 10 00 00       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c000e9e9:	5a                   	pop    edx
c000e9ea:	8b 1d e8 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6e8
c000e9f0:	59                   	pop    ecx
c000e9f1:	6a 01                	push   0x1
c000e9f3:	68 82 a5 02 c0       	push   0xc002a582
c000e9f8:	e8 a9 eb 00 00       	call   c001d5a6 <Thr::loadDLL(char const*, bool)>
c000e9fd:	5a                   	pop    edx
c000e9fe:	59                   	pop    ecx
c000e9ff:	53                   	push   ebx
c000ea00:	50                   	push   eax
c000ea01:	e8 d1 ed 00 00       	call   c001d7d7 <Thr::executeDLL(unsigned long, void*)>
c000ea06:	83 c4 10             	add    esp,0x10
c000ea09:	83 ec 0c             	sub    esp,0xc
c000ea0c:	6a 02                	push   0x2
c000ea0e:	e8 2e f7 00 00       	call   c001e141 <blockTask(TaskState)>
c000ea13:	83 c4 10             	add    esp,0x10
c000ea16:	eb f1                	jmp    c000ea09 <Krnl::firstTask()+0x13f>

c000ea18 <Computer::Computer()>:
c000ea18:	83 ec 0c             	sub    esp,0xc
c000ea1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea1f:	83 ec 08             	sub    esp,0x8
c000ea22:	68 9e a5 02 c0       	push   0xc002a59e
c000ea27:	50                   	push   eax
c000ea28:	e8 4b 56 00 00       	call   c0014078 <Device::Device(char const*)>
c000ea2d:	83 c4 10             	add    esp,0x10
c000ea30:	ba 98 a7 02 c0       	mov    edx,0xc002a798
c000ea35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea39:	89 10                	mov    DWORD PTR [eax],edx
c000ea3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea3f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ea49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea4d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ea57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea5b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000ea61:	83 ca 04             	or     edx,0x4
c000ea64:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000ea6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea6e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ea74:	0f b6 d0             	movzx  edx,al
c000ea77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea7b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ea82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea86:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ea8c:	0f b6 d0             	movzx  edx,al
c000ea8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea93:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000ea98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea9c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eaa2:	8d 50 01             	lea    edx,[eax+0x1]
c000eaa5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000eaa9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000eaaf:	0f b6 d0             	movzx  edx,al
c000eab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eab6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000eaba:	83 e1 3f             	and    ecx,0x3f
c000eabd:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000eac1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eac5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eacb:	0f b6 d0             	movzx  edx,al
c000eace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ead2:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000ead9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eadd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eae3:	0f b6 d0             	movzx  edx,al
c000eae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaea:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000eaef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaf3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eaf9:	8d 50 01             	lea    edx,[eax+0x1]
c000eafc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000eb00:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000eb06:	0f b6 d0             	movzx  edx,al
c000eb09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb0d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000eb11:	83 e1 3f             	and    ecx,0x3f
c000eb14:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000eb18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb1c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eb22:	0f b6 d0             	movzx  edx,al
c000eb25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb29:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000eb30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb34:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eb3a:	0f b6 d0             	movzx  edx,al
c000eb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb41:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000eb46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb4a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eb50:	8d 50 01             	lea    edx,[eax+0x1]
c000eb53:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000eb57:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000eb5d:	0f b6 d0             	movzx  edx,al
c000eb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb64:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000eb68:	83 e1 3f             	and    ecx,0x3f
c000eb6b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000eb6f:	90                   	nop
c000eb70:	83 c4 0c             	add    esp,0xc
c000eb73:	c3                   	ret    

c000eb74 <Computer::setBootMessage(char const*)>:
c000eb74:	c3                   	ret    
c000eb75:	90                   	nop

c000eb76 <Computer::detectFeatures()>:
c000eb76:	55                   	push   ebp
c000eb77:	57                   	push   edi
c000eb78:	56                   	push   esi
c000eb79:	53                   	push   ebx
c000eb7a:	83 ec 1c             	sub    esp,0x1c
c000eb7d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000eb81:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000eb8b:	e8 54 17 ff ff       	call   c00002e4 <detectCPUID>
c000eb90:	85 c0                	test   eax,eax
c000eb92:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb98:	0f 95 c2             	setne  dl
c000eb9b:	83 e0 fd             	and    eax,0xfffffffd
c000eb9e:	d1 e2                	shl    edx,1
c000eba0:	09 d0                	or     eax,edx
c000eba2:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eba8:	a8 02                	test   al,0x2
c000ebaa:	75 46                	jne    c000ebf2 <Computer::detectFeatures()+0x7c>
c000ebac:	f6 05 01 e7 02 c0 04 	test   BYTE PTR ds:0xc002e701,0x4
c000ebb3:	74 07                	je     c000ebbc <Computer::detectFeatures()+0x46>
c000ebb5:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000ebbc:	e8 15 7f 01 00       	call   c0026ad6 <x87Detect>
c000ebc1:	83 e0 01             	and    eax,0x1
c000ebc4:	c1 e0 04             	shl    eax,0x4
c000ebc7:	88 c2                	mov    dl,al
c000ebc9:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ebcf:	83 e0 ef             	and    eax,0xffffffef
c000ebd2:	09 d0                	or     eax,edx
c000ebd4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ebda:	a8 10                	test   al,0x10
c000ebdc:	0f 85 2a 01 00 00    	jne    c000ed0c <Computer::detectFeatures()+0x196>
c000ebe2:	84 c0                	test   al,al
c000ebe4:	0f 88 45 01 00 00    	js     c000ed2f <Computer::detectFeatures()+0x1b9>
c000ebea:	83 c4 1c             	add    esp,0x1c
c000ebed:	5b                   	pop    ebx
c000ebee:	5e                   	pop    esi
c000ebef:	5f                   	pop    edi
c000ebf0:	5d                   	pop    ebp
c000ebf1:	c3                   	ret    
c000ebf2:	83 ec 0c             	sub    esp,0xc
c000ebf5:	6a 20                	push   0x20
c000ebf7:	e8 3e a1 00 00       	call   c0018d3a <CPU::cpuidCheckEDX(unsigned int)>
c000ebfc:	83 e0 01             	and    eax,0x1
c000ebff:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ec06:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ec0c:	83 e0 f7             	and    eax,0xfffffff7
c000ec0f:	09 d0                	or     eax,edx
c000ec11:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ec17:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000ec1e:	e8 17 a1 00 00       	call   c0018d3a <CPU::cpuidCheckEDX(unsigned int)>
c000ec23:	83 e0 01             	and    eax,0x1
c000ec26:	88 c2                	mov    dl,al
c000ec28:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ec2e:	83 e0 fe             	and    eax,0xfffffffe
c000ec31:	09 d0                	or     eax,edx
c000ec33:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ec39:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000ec40:	e8 f5 a0 00 00       	call   c0018d3a <CPU::cpuidCheckEDX(unsigned int)>
c000ec45:	c1 e0 07             	shl    eax,0x7
c000ec48:	88 c2                	mov    dl,al
c000ec4a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ec50:	83 e0 7f             	and    eax,0x7f
c000ec53:	09 d0                	or     eax,edx
c000ec55:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ec5b:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ec62:	e8 d3 a0 00 00       	call   c0018d3a <CPU::cpuidCheckEDX(unsigned int)>
c000ec67:	83 c4 10             	add    esp,0x10
c000ec6a:	83 e0 01             	and    eax,0x1
c000ec6d:	c1 e0 05             	shl    eax,0x5
c000ec70:	88 c2                	mov    dl,al
c000ec72:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ec78:	83 e0 df             	and    eax,0xffffffdf
c000ec7b:	09 d0                	or     eax,edx
c000ec7d:	f7 05 00 e7 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e700,0x401
c000ec87:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ec8d:	0f 84 c2 00 00 00    	je     c000ed55 <Computer::detectFeatures()+0x1df>
c000ec93:	83 e0 fe             	and    eax,0xfffffffe
c000ec96:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ec9c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eca2:	88 c2                	mov    dl,al
c000eca4:	83 e2 09             	and    edx,0x9
c000eca7:	fe ca                	dec    dl
c000eca9:	75 09                	jne    c000ecb4 <Computer::detectFeatures()+0x13e>
c000ecab:	83 e0 fe             	and    eax,0xfffffffe
c000ecae:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ecb4:	83 ec 0c             	sub    esp,0xc
c000ecb7:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ecbb:	50                   	push   eax
c000ecbc:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ecc0:	55                   	push   ebp
c000ecc1:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ecc5:	57                   	push   edi
c000ecc6:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ecca:	56                   	push   esi
c000eccb:	68 00 00 00 80       	push   0x80000000
c000ecd0:	e8 e1 9f 00 00       	call   c0018cb6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ecd5:	83 c4 20             	add    esp,0x20
c000ecd8:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ecdf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ece3:	0f 86 c3 fe ff ff    	jbe    c000ebac <Computer::detectFeatures()+0x36>
c000ece9:	83 ec 0c             	sub    esp,0xc
c000ecec:	50                   	push   eax
c000eced:	55                   	push   ebp
c000ecee:	57                   	push   edi
c000ecef:	56                   	push   esi
c000ecf0:	68 01 00 00 80       	push   0x80000001
c000ecf5:	e8 bc 9f 00 00       	call   c0018cb6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ecfa:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ed04:	83 c4 20             	add    esp,0x20
c000ed07:	e9 a0 fe ff ff       	jmp    c000ebac <Computer::detectFeatures()+0x36>
c000ed0c:	e8 7f 7d 01 00       	call   c0026a90 <absolutelyNoChanceInHell>
c000ed11:	88 c2                	mov    dl,al
c000ed13:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ed19:	c1 e2 07             	shl    edx,0x7
c000ed1c:	83 e0 7f             	and    eax,0x7f
c000ed1f:	09 d0                	or     eax,edx
c000ed21:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ed27:	84 c0                	test   al,al
c000ed29:	0f 89 bb fe ff ff    	jns    c000ebea <Computer::detectFeatures()+0x74>
c000ed2f:	e8 3c 7d 01 00       	call   c0026a70 <avxDetect>
c000ed34:	83 e0 01             	and    eax,0x1
c000ed37:	c1 e0 05             	shl    eax,0x5
c000ed3a:	88 c2                	mov    dl,al
c000ed3c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ed42:	83 e0 df             	and    eax,0xffffffdf
c000ed45:	09 d0                	or     eax,edx
c000ed47:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ed4d:	83 c4 1c             	add    esp,0x1c
c000ed50:	5b                   	pop    ebx
c000ed51:	5e                   	pop    esi
c000ed52:	5f                   	pop    edi
c000ed53:	5d                   	pop    ebp
c000ed54:	c3                   	ret    
c000ed55:	83 ec 0c             	sub    esp,0xc
c000ed58:	68 00 02 00 00       	push   0x200
c000ed5d:	e8 d8 9f 00 00       	call   c0018d3a <CPU::cpuidCheckEDX(unsigned int)>
c000ed62:	83 c4 10             	add    esp,0x10
c000ed65:	83 e0 01             	and    eax,0x1
c000ed68:	88 c2                	mov    dl,al
c000ed6a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ed70:	83 e0 fe             	and    eax,0xfffffffe
c000ed73:	09 d0                	or     eax,edx
c000ed75:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ed7b:	e9 1c ff ff ff       	jmp    c000ec9c <Computer::detectFeatures()+0x126>

c000ed80 <Computer::displayFeatures()>:
c000ed80:	c3                   	ret    
c000ed81:	90                   	nop

c000ed82 <Computer::rdmsr(unsigned int)>:
c000ed82:	83 ec 0c             	sub    esp,0xc
c000ed85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed89:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ed90:	74 0a                	je     c000ed9c <Computer::rdmsr(unsigned int)+0x1a>
c000ed92:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ed96:	0f 32                	rdmsr  
c000ed98:	83 c4 0c             	add    esp,0xc
c000ed9b:	c3                   	ret    
c000ed9c:	83 ec 0c             	sub    esp,0xc
c000ed9f:	68 a7 a5 02 c0       	push   0xc002a5a7
c000eda4:	e8 30 b6 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c000eda9:	83 c4 10             	add    esp,0x10
c000edac:	eb e4                	jmp    c000ed92 <Computer::rdmsr(unsigned int)+0x10>

c000edae <Computer::wrmsr(unsigned int, unsigned long long)>:
c000edae:	57                   	push   edi
c000edaf:	56                   	push   esi
c000edb0:	52                   	push   edx
c000edb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edb5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000edb9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000edbd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edc4:	74 0e                	je     c000edd4 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000edc6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edca:	89 f0                	mov    eax,esi
c000edcc:	89 fa                	mov    edx,edi
c000edce:	0f 30                	wrmsr  
c000edd0:	58                   	pop    eax
c000edd1:	5e                   	pop    esi
c000edd2:	5f                   	pop    edi
c000edd3:	c3                   	ret    
c000edd4:	83 ec 0c             	sub    esp,0xc
c000edd7:	68 ad a5 02 c0       	push   0xc002a5ad
c000eddc:	e8 f8 b5 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c000ede1:	83 c4 10             	add    esp,0x10
c000ede4:	eb e0                	jmp    c000edc6 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ede6 <Computer::nmiEnabled()>:
c000ede6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edea:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000edf0:	c3                   	ret    
c000edf1:	90                   	nop

c000edf2 <Computer::readCMOS(unsigned char)>:
c000edf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edf6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000edfd:	19 c0                	sbb    eax,eax
c000edff:	83 e0 80             	and    eax,0xffffff80
c000ee02:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee06:	e6 70                	out    0x70,al
c000ee08:	e4 71                	in     al,0x71
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <Computer::enableNMI(bool)>:
c000ee0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee14:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee1a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee22:	eb ce                	jmp    c000edf2 <Computer::readCMOS(unsigned char)>

c000ee24 <Computer::open(int, int, void*)>:
c000ee24:	56                   	push   esi
c000ee25:	53                   	push   ebx
c000ee26:	83 ec 10             	sub    esp,0x10
c000ee29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee2d:	68 08 a7 02 c0       	push   0xc002a708
c000ee32:	e8 06 0c 00 00       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c000ee37:	58                   	pop    eax
c000ee38:	f6 05 00 e7 02 c0 04 	test   BYTE PTR ds:0xc002e700,0x4
c000ee3f:	5a                   	pop    edx
c000ee40:	0f 94 05 20 d6 02 c0 	sete   BYTE PTR ds:0xc002d620
c000ee47:	68 58 01 00 00       	push   0x158
c000ee4c:	68 b3 a5 02 c0       	push   0xc002a5b3
c000ee51:	e8 e5 3b 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000ee56:	59                   	pop    ecx
c000ee57:	5e                   	pop    esi
c000ee58:	68 14 01 00 00       	push   0x114
c000ee5d:	68 c9 a5 02 c0       	push   0xc002a5c9
c000ee62:	e8 d4 3b 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000ee67:	58                   	pop    eax
c000ee68:	5a                   	pop    edx
c000ee69:	6a 14                	push   0x14
c000ee6b:	68 dd a5 02 c0       	push   0xc002a5dd
c000ee70:	e8 c6 3b 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000ee75:	59                   	pop    ecx
c000ee76:	5e                   	pop    esi
c000ee77:	68 3f 07 00 00       	push   0x73f
c000ee7c:	68 dd a5 02 c0       	push   0xc002a5dd
c000ee81:	e8 b5 3b 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000ee86:	58                   	pop    eax
c000ee87:	5a                   	pop    edx
c000ee88:	68 3f 07 00 00       	push   0x73f
c000ee8d:	68 f0 a5 02 c0       	push   0xc002a5f0
c000ee92:	e8 a4 3b 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000ee97:	59                   	pop    ecx
c000ee98:	5e                   	pop    esi
c000ee99:	6a 63                	push   0x63
c000ee9b:	68 07 a6 02 c0       	push   0xc002a607
c000eea0:	e8 96 3b 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000eea5:	c7 04 24 1d a6 02 c0 	mov    DWORD PTR [esp],0xc002a61d
c000eeac:	e8 8a 3b 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000eeb1:	c7 04 24 2f a6 02 c0 	mov    DWORD PTR [esp],0xc002a62f
c000eeb8:	e8 80 0b 00 00       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c000eebd:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000eec4:	e8 1a 0b 00 00       	call   c000f9e3 <malloc>
c000eec9:	89 04 24             	mov    DWORD PTR [esp],eax
c000eecc:	89 c6                	mov    esi,eax
c000eece:	e8 cb 90 00 00       	call   c0017f9e <ACPI::ACPI()>
c000eed3:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eed9:	c7 04 24 49 a6 02 c0 	mov    DWORD PTR [esp],0xc002a649
c000eee0:	e8 58 0b 00 00       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c000eee5:	58                   	pop    eax
c000eee6:	5a                   	pop    edx
c000eee7:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000eeed:	53                   	push   ebx
c000eeee:	e8 81 4f 00 00       	call   c0013e74 <Device::addChild(Device*)>
c000eef3:	c7 04 24 2c a7 02 c0 	mov    DWORD PTR [esp],0xc002a72c
c000eefa:	e8 3e 0b 00 00       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c000eeff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef02:	e8 6f fc ff ff       	call   c000eb76 <Computer::detectFeatures()>
c000ef07:	c7 04 24 4c a7 02 c0 	mov    DWORD PTR [esp],0xc002a74c
c000ef0e:	e8 2a 0b 00 00       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c000ef13:	c7 04 24 63 a6 02 c0 	mov    DWORD PTR [esp],0xc002a663
c000ef1a:	e8 1e 0b 00 00       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c000ef1f:	59                   	pop    ecx
c000ef20:	5e                   	pop    esi
c000ef21:	6a 01                	push   0x1
c000ef23:	53                   	push   ebx
c000ef24:	e8 e3 fe ff ff       	call   c000ee0c <Computer::enableNMI(bool)>
c000ef29:	c7 04 24 57 a5 02 c0 	mov    DWORD PTR [esp],0xc002a557
c000ef30:	e8 08 0b 00 00       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c000ef35:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef3c:	e8 a2 0a 00 00       	call   c000f9e3 <malloc>
c000ef41:	89 c6                	mov    esi,eax
c000ef43:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef46:	e8 a7 9e 00 00       	call   c0018df2 <CPU::CPU()>
c000ef4b:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef51:	58                   	pop    eax
c000ef52:	5a                   	pop    edx
c000ef53:	56                   	push   esi
c000ef54:	53                   	push   ebx
c000ef55:	e8 1a 4f 00 00       	call   c0013e74 <Device::addChild(Device*)>
c000ef5a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef60:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef66:	6a 00                	push   0x0
c000ef68:	6a 00                	push   0x0
c000ef6a:	50                   	push   eax
c000ef6b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef6e:	83 c4 14             	add    esp,0x14
c000ef71:	68 6c a7 02 c0       	push   0xc002a76c
c000ef76:	e8 c2 0a 00 00       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c000ef7b:	e8 8c 54 00 00       	call   c001440c <setupFPU()>
c000ef80:	83 c4 10             	add    esp,0x10
c000ef83:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef89:	85 c0                	test   eax,eax
c000ef8b:	74 1f                	je     c000efac <Computer::open(int, int, void*)+0x188>
c000ef8d:	83 ec 08             	sub    esp,0x8
c000ef90:	50                   	push   eax
c000ef91:	53                   	push   ebx
c000ef92:	e8 dd 4e 00 00       	call   c0013e74 <Device::addChild(Device*)>
c000ef97:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef9d:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef9f:	6a 00                	push   0x0
c000efa1:	6a 00                	push   0x0
c000efa3:	6a 00                	push   0x0
c000efa5:	50                   	push   eax
c000efa6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000efa9:	83 c4 20             	add    esp,0x20
c000efac:	83 ec 0c             	sub    esp,0xc
c000efaf:	68 74 a6 02 c0       	push   0xc002a674
c000efb4:	e8 84 0a 00 00       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c000efb9:	c7 04 24 ca e8 00 c0 	mov    DWORD PTR [esp],0xc000e8ca
c000efc0:	e8 a3 ee 00 00       	call   c001de68 <setupMultitasking(void (*)())>
c000efc5:	83 c4 14             	add    esp,0x14
c000efc8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efcd:	5b                   	pop    ebx
c000efce:	5e                   	pop    esi
c000efcf:	c3                   	ret    

c000efd0 <Computer::disableNMI()>:
c000efd0:	6a 00                	push   0x0
c000efd2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000efd6:	e8 31 fe ff ff       	call   c000ee0c <Computer::enableNMI(bool)>
c000efdb:	58                   	pop    eax
c000efdc:	5a                   	pop    edx
c000efdd:	c3                   	ret    

c000efde <Computer::writeCMOS(unsigned char, unsigned char)>:
c000efde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efe2:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000efe9:	19 c0                	sbb    eax,eax
c000efeb:	83 e0 80             	and    eax,0xffffff80
c000efee:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eff2:	e6 70                	out    0x70,al
c000eff4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eff8:	e6 71                	out    0x71,al
c000effa:	c3                   	ret    
c000effb:	90                   	nop

c000effc <Computer::handleNMI()>:
c000effc:	56                   	push   esi
c000effd:	53                   	push   ebx
c000effe:	83 ec 10             	sub    esp,0x10
c000f001:	e4 92                	in     al,0x92
c000f003:	89 c6                	mov    esi,eax
c000f005:	e4 61                	in     al,0x61
c000f007:	68 8f a6 02 c0       	push   0xc002a68f
c000f00c:	88 c3                	mov    bl,al
c000f00e:	e8 28 3a 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000f013:	83 c4 10             	add    esp,0x10
c000f016:	83 e6 10             	and    esi,0x10
c000f019:	75 0d                	jne    c000f028 <Computer::handleNMI()+0x2c>
c000f01b:	f6 c3 40             	test   bl,0x40
c000f01e:	75 1d                	jne    c000f03d <Computer::handleNMI()+0x41>
c000f020:	84 db                	test   bl,bl
c000f022:	78 2d                	js     c000f051 <Computer::handleNMI()+0x55>
c000f024:	58                   	pop    eax
c000f025:	5b                   	pop    ebx
c000f026:	5e                   	pop    esi
c000f027:	c3                   	ret    
c000f028:	83 ec 0c             	sub    esp,0xc
c000f02b:	68 a0 a6 02 c0       	push   0xc002a6a0
c000f030:	e8 a4 b3 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c000f035:	83 c4 10             	add    esp,0x10
c000f038:	f6 c3 40             	test   bl,0x40
c000f03b:	74 e3                	je     c000f020 <Computer::handleNMI()+0x24>
c000f03d:	83 ec 0c             	sub    esp,0xc
c000f040:	68 ad a6 02 c0       	push   0xc002a6ad
c000f045:	e8 8f b3 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c000f04a:	83 c4 10             	add    esp,0x10
c000f04d:	84 db                	test   bl,bl
c000f04f:	79 d3                	jns    c000f024 <Computer::handleNMI()+0x28>
c000f051:	c7 44 24 10 b7 a6 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a6b7
c000f059:	5a                   	pop    edx
c000f05a:	5b                   	pop    ebx
c000f05b:	5e                   	pop    esi
c000f05c:	e9 78 b3 00 00       	jmp    c001a3d9 <Krnl::panic(char const*)>
c000f061:	90                   	nop

c000f062 <Computer::setDiskActivityLight(int, bool)>:
c000f062:	56                   	push   esi
c000f063:	53                   	push   ebx
c000f064:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f068:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f06d:	77 1b                	ja     c000f08a <Computer::setDiskActivityLight(int, bool)+0x28>
c000f06f:	e4 92                	in     al,0x92
c000f071:	bb 40 00 00 00       	mov    ebx,0x40
c000f076:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f07a:	89 da                	mov    edx,ebx
c000f07c:	d3 e2                	shl    edx,cl
c000f07e:	89 f1                	mov    ecx,esi
c000f080:	f7 d2                	not    edx
c000f082:	d3 e3                	shl    ebx,cl
c000f084:	21 d0                	and    eax,edx
c000f086:	09 d8                	or     eax,ebx
c000f088:	e6 92                	out    0x92,al
c000f08a:	5b                   	pop    ebx
c000f08b:	5e                   	pop    esi
c000f08c:	c3                   	ret    
c000f08d:	90                   	nop

c000f08e <GDTEntry::setBase(unsigned int)>:
c000f08e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f092:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f096:	89 c1                	mov    ecx,eax
c000f098:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f09c:	c1 e9 10             	shr    ecx,0x10
c000f09f:	c1 e8 18             	shr    eax,0x18
c000f0a2:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f0a5:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f0a8:	c3                   	ret    
c000f0a9:	90                   	nop

c000f0aa <GDTEntry::setLimit(unsigned int)>:
c000f0aa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0b2:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f0b5:	66 89 01             	mov    WORD PTR [ecx],ax
c000f0b8:	83 e2 f0             	and    edx,0xfffffff0
c000f0bb:	c1 e8 10             	shr    eax,0x10
c000f0be:	83 e0 0f             	and    eax,0xf
c000f0c1:	09 d0                	or     eax,edx
c000f0c3:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f0c6:	c3                   	ret    
c000f0c7:	90                   	nop

c000f0c8 <GDT::GDT()>:
c000f0c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0dc:	90                   	nop
c000f0dd:	c3                   	ret    

c000f0de <GDT::addEntry(GDTEntry)>:
c000f0de:	53                   	push   ebx
c000f0df:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f0e3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f0e7:	8b 02                	mov    eax,DWORD PTR [edx]
c000f0e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f0ed:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000f0f1:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000f0f5:	8d 48 01             	lea    ecx,[eax+0x1]
c000f0f8:	c1 e0 03             	shl    eax,0x3
c000f0fb:	89 0a                	mov    DWORD PTR [edx],ecx
c000f0fd:	5b                   	pop    ebx
c000f0fe:	c3                   	ret    
c000f0ff:	90                   	nop

c000f100 <GDT::getNumberOfEntries()>:
c000f100:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f104:	8b 00                	mov    eax,DWORD PTR [eax]
c000f106:	c3                   	ret    
c000f107:	90                   	nop

c000f108 <GDT::flush()>:
c000f108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f10c:	8b 10                	mov    edx,DWORD PTR [eax]
c000f10e:	83 c0 04             	add    eax,0x4
c000f111:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f118:	a3 f2 e6 02 c0       	mov    ds:0xc002e6f2,eax
c000f11d:	66 89 15 f0 e6 02 c0 	mov    WORD PTR ds:0xc002e6f0,dx
c000f124:	e9 27 13 ff ff       	jmp    c0000450 <loadGDT>
c000f129:	90                   	nop

c000f12a <GDT::setup()>:
c000f12a:	55                   	push   ebp
c000f12b:	57                   	push   edi
c000f12c:	56                   	push   esi
c000f12d:	53                   	push   ebx
c000f12e:	83 ec 3c             	sub    esp,0x3c
c000f131:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f135:	6a 00                	push   0x0
c000f137:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f13b:	53                   	push   ebx
c000f13c:	e8 4d ff ff ff       	call   c000f08e <GDTEntry::setBase(unsigned int)>
c000f141:	6a 00                	push   0x0
c000f143:	53                   	push   ebx
c000f144:	e8 61 ff ff ff       	call   c000f0aa <GDTEntry::setLimit(unsigned int)>
c000f149:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f151:	6a 00                	push   0x0
c000f153:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f157:	53                   	push   ebx
c000f158:	e8 31 ff ff ff       	call   c000f08e <GDTEntry::setBase(unsigned int)>
c000f15d:	68 ff ff ff 00       	push   0xffffff
c000f162:	53                   	push   ebx
c000f163:	e8 42 ff ff ff       	call   c000f0aa <GDTEntry::setLimit(unsigned int)>
c000f168:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f16c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f171:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f176:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f17a:	83 c4 20             	add    esp,0x20
c000f17d:	6a 00                	push   0x0
c000f17f:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f183:	53                   	push   ebx
c000f184:	e8 05 ff ff ff       	call   c000f08e <GDTEntry::setBase(unsigned int)>
c000f189:	68 ff ff ff 00       	push   0xffffff
c000f18e:	53                   	push   ebx
c000f18f:	e8 16 ff ff ff       	call   c000f0aa <GDTEntry::setLimit(unsigned int)>
c000f194:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f198:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f19c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f1a0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f1a4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f1a8:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1ad:	0d 00 92 c0 00       	or     eax,0xc09200
c000f1b2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f1b6:	89 d8                	mov    eax,ebx
c000f1b8:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f1bc:	80 cc 60             	or     ah,0x60
c000f1bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f1c3:	83 c4 0c             	add    esp,0xc
c000f1c6:	89 f8                	mov    eax,edi
c000f1c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1cc:	80 cc 60             	or     ah,0x60
c000f1cf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1d3:	89 c7                	mov    edi,eax
c000f1d5:	55                   	push   ebp
c000f1d6:	e8 03 ff ff ff       	call   c000f0de <GDT::addEntry(GDTEntry)>
c000f1db:	83 c4 0c             	add    esp,0xc
c000f1de:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1e6:	55                   	push   ebp
c000f1e7:	e8 f2 fe ff ff       	call   c000f0de <GDT::addEntry(GDTEntry)>
c000f1ec:	83 c4 0c             	add    esp,0xc
c000f1ef:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1f3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1f7:	55                   	push   ebp
c000f1f8:	e8 e1 fe ff ff       	call   c000f0de <GDT::addEntry(GDTEntry)>
c000f1fd:	83 c4 0c             	add    esp,0xc
c000f200:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f204:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f208:	53                   	push   ebx
c000f209:	51                   	push   ecx
c000f20a:	55                   	push   ebp
c000f20b:	e8 ce fe ff ff       	call   c000f0de <GDT::addEntry(GDTEntry)>
c000f210:	83 c4 0c             	add    esp,0xc
c000f213:	57                   	push   edi
c000f214:	56                   	push   esi
c000f215:	55                   	push   ebp
c000f216:	e8 c3 fe ff ff       	call   c000f0de <GDT::addEntry(GDTEntry)>
c000f21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f21e:	e8 e5 fe ff ff       	call   c000f108 <GDT::flush()>
c000f223:	83 c4 4c             	add    esp,0x4c
c000f226:	5b                   	pop    ebx
c000f227:	5e                   	pop    esi
c000f228:	5f                   	pop    edi
c000f229:	5d                   	pop    ebp
c000f22a:	c3                   	ret    

c000f22b <idleFunction(void*)>:
c000f22b:	53                   	push   ebx
c000f22c:	83 ec 08             	sub    esp,0x8
c000f22f:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c000f234:	48                   	dec    eax
c000f235:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c000f23a:	75 01                	jne    c000f23d <idleFunction(void*)+0x12>
c000f23c:	fb                   	sti    
c000f23d:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c000f242:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f248:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f24f:	74 3c                	je     c000f28d <idleFunction(void*)+0x62>
c000f251:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f258:	74 33                	je     c000f28d <idleFunction(void*)+0x62>
c000f25a:	31 db                	xor    ebx,ebx
c000f25c:	52                   	push   edx
c000f25d:	52                   	push   edx
c000f25e:	68 e1 00 00 00       	push   0xe1
c000f263:	50                   	push   eax
c000f264:	e8 19 fb ff ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c000f269:	53                   	push   ebx
c000f26a:	83 e0 02             	and    eax,0x2
c000f26d:	50                   	push   eax
c000f26e:	68 e1 00 00 00       	push   0xe1
c000f273:	ff 35 e8 e6 02 c0    	push   DWORD PTR ds:0xc002e6e8
c000f279:	e8 30 fb ff ff       	call   c000edae <Computer::wrmsr(unsigned int, unsigned long long)>
c000f27e:	83 c4 20             	add    esp,0x20
c000f281:	e8 f9 0f ff ff       	call   c000027f <doTPAUSE>
c000f286:	e8 95 98 01 00       	call   c0028b20 <idleCommon()>
c000f28b:	eb f4                	jmp    c000f281 <idleFunction(void*)+0x56>
c000f28d:	fb                   	sti    
c000f28e:	f4                   	hlt    
c000f28f:	e8 8c 98 01 00       	call   c0028b20 <idleCommon()>
c000f294:	eb f7                	jmp    c000f28d <idleFunction(void*)+0x62>

c000f296 <IDTEntry::IDTEntry(bool)>:
c000f296:	83 ec 04             	sub    esp,0x4
c000f299:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f29d:	88 04 24             	mov    BYTE PTR [esp],al
c000f2a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2a4:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f2b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2b6:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2b9:	83 e2 f0             	and    edx,0xfffffff0
c000f2bc:	83 ca 0e             	or     edx,0xe
c000f2bf:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c6:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2c9:	83 e2 ef             	and    edx,0xffffffef
c000f2cc:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2cf:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f2d3:	74 04                	je     c000f2d9 <IDTEntry::IDTEntry(bool)+0x43>
c000f2d5:	b2 03                	mov    dl,0x3
c000f2d7:	eb 02                	jmp    c000f2db <IDTEntry::IDTEntry(bool)+0x45>
c000f2d9:	b2 00                	mov    dl,0x0
c000f2db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2df:	83 e2 03             	and    edx,0x3
c000f2e2:	88 d1                	mov    cl,dl
c000f2e4:	c1 e1 05             	shl    ecx,0x5
c000f2e7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ea:	83 e2 9f             	and    edx,0xffffff9f
c000f2ed:	09 ca                	or     edx,ecx
c000f2ef:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2f6:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2f9:	83 ca 80             	or     edx,0xffffff80
c000f2fc:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2ff:	90                   	nop
c000f300:	83 c4 04             	add    esp,0x4
c000f303:	c3                   	ret    

c000f304 <IDTEntry::setOffset(unsigned int)>:
c000f304:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f308:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f30c:	66 89 02             	mov    WORD PTR [edx],ax
c000f30f:	c1 e8 10             	shr    eax,0x10
c000f312:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f316:	c3                   	ret    
c000f317:	90                   	nop

c000f318 <IDT::IDT()>:
c000f318:	90                   	nop
c000f319:	c3                   	ret    

c000f31a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f31a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31e:	83 c0 30             	add    eax,0x30
c000f321:	c3                   	ret    

c000f322 <IDT::addEntry(IDTEntry, int)>:
c000f322:	53                   	push   ebx
c000f323:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f327:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f32b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f32f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f333:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f336:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f33a:	5b                   	pop    ebx
c000f33b:	c3                   	ret    

c000f33c <IDT::addEntry(int, void (*)(), bool)>:
c000f33c:	53                   	push   ebx
c000f33d:	83 ec 10             	sub    esp,0x10
c000f340:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f345:	50                   	push   eax
c000f346:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f34a:	53                   	push   ebx
c000f34b:	e8 46 ff ff ff       	call   c000f296 <IDTEntry::IDTEntry(bool)>
c000f350:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f354:	53                   	push   ebx
c000f355:	e8 aa ff ff ff       	call   c000f304 <IDTEntry::setOffset(unsigned int)>
c000f35a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f35e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f362:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f366:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f36a:	e8 b3 ff ff ff       	call   c000f322 <IDT::addEntry(IDTEntry, int)>
c000f36f:	83 c4 30             	add    esp,0x30
c000f372:	5b                   	pop    ebx
c000f373:	c3                   	ret    

c000f374 <IDT::flush()>:
c000f374:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f378:	66 c7 05 f8 e6 02 c0 ff 07 	mov    WORD PTR ds:0xc002e6f8,0x7ff
c000f381:	a3 fa e6 02 c0       	mov    ds:0xc002e6fa,eax
c000f386:	0f 01 1d f8 e6 02 c0 	lidtd  ds:0xc002e6f8
c000f38d:	c3                   	ret    

c000f38e <IDT::setup()>:
c000f38e:	57                   	push   edi
c000f38f:	56                   	push   esi
c000f390:	53                   	push   ebx
c000f391:	83 ec 10             	sub    esp,0x10
c000f394:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f398:	6a 00                	push   0x0
c000f39a:	68 70 04 00 c0       	push   0xc0000470
c000f39f:	6a 00                	push   0x0
c000f3a1:	53                   	push   ebx
c000f3a2:	e8 95 ff ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f3a7:	6a 00                	push   0x0
c000f3a9:	68 80 04 00 c0       	push   0xc0000480
c000f3ae:	6a 01                	push   0x1
c000f3b0:	53                   	push   ebx
c000f3b1:	e8 86 ff ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f3b6:	83 c4 20             	add    esp,0x20
c000f3b9:	6a 00                	push   0x0
c000f3bb:	68 8a 04 00 c0       	push   0xc000048a
c000f3c0:	6a 02                	push   0x2
c000f3c2:	53                   	push   ebx
c000f3c3:	e8 74 ff ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f3c8:	6a 00                	push   0x0
c000f3ca:	68 94 04 00 c0       	push   0xc0000494
c000f3cf:	6a 03                	push   0x3
c000f3d1:	53                   	push   ebx
c000f3d2:	e8 65 ff ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f3d7:	83 c4 20             	add    esp,0x20
c000f3da:	6a 00                	push   0x0
c000f3dc:	68 9e 04 00 c0       	push   0xc000049e
c000f3e1:	6a 04                	push   0x4
c000f3e3:	53                   	push   ebx
c000f3e4:	e8 53 ff ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f3e9:	6a 00                	push   0x0
c000f3eb:	68 a8 04 00 c0       	push   0xc00004a8
c000f3f0:	6a 05                	push   0x5
c000f3f2:	53                   	push   ebx
c000f3f3:	e8 44 ff ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f3f8:	83 c4 20             	add    esp,0x20
c000f3fb:	6a 00                	push   0x0
c000f3fd:	68 b2 04 00 c0       	push   0xc00004b2
c000f402:	6a 06                	push   0x6
c000f404:	53                   	push   ebx
c000f405:	e8 32 ff ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f40a:	6a 00                	push   0x0
c000f40c:	68 bc 04 00 c0       	push   0xc00004bc
c000f411:	6a 07                	push   0x7
c000f413:	53                   	push   ebx
c000f414:	e8 23 ff ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f419:	83 c4 20             	add    esp,0x20
c000f41c:	6a 00                	push   0x0
c000f41e:	68 c6 04 00 c0       	push   0xc00004c6
c000f423:	6a 08                	push   0x8
c000f425:	53                   	push   ebx
c000f426:	e8 11 ff ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f42b:	6a 00                	push   0x0
c000f42d:	68 ce 04 00 c0       	push   0xc00004ce
c000f432:	6a 09                	push   0x9
c000f434:	53                   	push   ebx
c000f435:	e8 02 ff ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f43a:	83 c4 20             	add    esp,0x20
c000f43d:	6a 00                	push   0x0
c000f43f:	68 d8 04 00 c0       	push   0xc00004d8
c000f444:	6a 0a                	push   0xa
c000f446:	53                   	push   ebx
c000f447:	e8 f0 fe ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f44c:	6a 00                	push   0x0
c000f44e:	68 e0 04 00 c0       	push   0xc00004e0
c000f453:	6a 0b                	push   0xb
c000f455:	53                   	push   ebx
c000f456:	e8 e1 fe ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f45b:	83 c4 20             	add    esp,0x20
c000f45e:	6a 00                	push   0x0
c000f460:	68 e8 04 00 c0       	push   0xc00004e8
c000f465:	6a 0c                	push   0xc
c000f467:	53                   	push   ebx
c000f468:	e8 cf fe ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f46d:	6a 00                	push   0x0
c000f46f:	68 f0 04 00 c0       	push   0xc00004f0
c000f474:	6a 0d                	push   0xd
c000f476:	53                   	push   ebx
c000f477:	e8 c0 fe ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f47c:	83 c4 20             	add    esp,0x20
c000f47f:	6a 00                	push   0x0
c000f481:	68 f8 04 00 c0       	push   0xc00004f8
c000f486:	6a 0e                	push   0xe
c000f488:	53                   	push   ebx
c000f489:	e8 ae fe ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f48e:	6a 00                	push   0x0
c000f490:	68 00 05 00 c0       	push   0xc0000500
c000f495:	6a 0f                	push   0xf
c000f497:	53                   	push   ebx
c000f498:	e8 9f fe ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f49d:	83 c4 20             	add    esp,0x20
c000f4a0:	6a 00                	push   0x0
c000f4a2:	68 0a 05 00 c0       	push   0xc000050a
c000f4a7:	6a 10                	push   0x10
c000f4a9:	53                   	push   ebx
c000f4aa:	e8 8d fe ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f4af:	6a 00                	push   0x0
c000f4b1:	68 14 05 00 c0       	push   0xc0000514
c000f4b6:	6a 11                	push   0x11
c000f4b8:	53                   	push   ebx
c000f4b9:	e8 7e fe ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f4be:	83 c4 20             	add    esp,0x20
c000f4c1:	6a 00                	push   0x0
c000f4c3:	68 1e 05 00 c0       	push   0xc000051e
c000f4c8:	6a 12                	push   0x12
c000f4ca:	53                   	push   ebx
c000f4cb:	e8 6c fe ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f4d0:	6a 01                	push   0x1
c000f4d2:	68 b8 05 00 c0       	push   0xc00005b8
c000f4d7:	6a 60                	push   0x60
c000f4d9:	53                   	push   ebx
c000f4da:	e8 5d fe ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f4df:	83 c4 20             	add    esp,0x20
c000f4e2:	6a 00                	push   0x0
c000f4e4:	68 bf 05 00 c0       	push   0xc00005bf
c000f4e9:	6a 20                	push   0x20
c000f4eb:	53                   	push   ebx
c000f4ec:	e8 4b fe ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f4f1:	6a 00                	push   0x0
c000f4f3:	68 aa 05 00 c0       	push   0xc00005aa
c000f4f8:	6a 21                	push   0x21
c000f4fa:	53                   	push   ebx
c000f4fb:	e8 3c fe ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f500:	83 c4 20             	add    esp,0x20
c000f503:	6a 00                	push   0x0
c000f505:	68 b1 05 00 c0       	push   0xc00005b1
c000f50a:	6a 22                	push   0x22
c000f50c:	53                   	push   ebx
c000f50d:	e8 2a fe ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f512:	6a 00                	push   0x0
c000f514:	68 28 05 00 c0       	push   0xc0000528
c000f519:	6a 23                	push   0x23
c000f51b:	53                   	push   ebx
c000f51c:	e8 1b fe ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f521:	83 c4 20             	add    esp,0x20
c000f524:	6a 00                	push   0x0
c000f526:	68 32 05 00 c0       	push   0xc0000532
c000f52b:	6a 24                	push   0x24
c000f52d:	53                   	push   ebx
c000f52e:	e8 09 fe ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f533:	6a 00                	push   0x0
c000f535:	68 3c 05 00 c0       	push   0xc000053c
c000f53a:	6a 25                	push   0x25
c000f53c:	53                   	push   ebx
c000f53d:	e8 fa fd ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f542:	83 c4 20             	add    esp,0x20
c000f545:	6a 00                	push   0x0
c000f547:	68 46 05 00 c0       	push   0xc0000546
c000f54c:	6a 26                	push   0x26
c000f54e:	53                   	push   ebx
c000f54f:	e8 e8 fd ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f554:	6a 00                	push   0x0
c000f556:	68 50 05 00 c0       	push   0xc0000550
c000f55b:	6a 27                	push   0x27
c000f55d:	53                   	push   ebx
c000f55e:	e8 d9 fd ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f563:	83 c4 20             	add    esp,0x20
c000f566:	6a 00                	push   0x0
c000f568:	68 5a 05 00 c0       	push   0xc000055a
c000f56d:	6a 28                	push   0x28
c000f56f:	53                   	push   ebx
c000f570:	e8 c7 fd ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f575:	6a 00                	push   0x0
c000f577:	68 64 05 00 c0       	push   0xc0000564
c000f57c:	6a 29                	push   0x29
c000f57e:	53                   	push   ebx
c000f57f:	e8 b8 fd ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f584:	83 c4 20             	add    esp,0x20
c000f587:	6a 00                	push   0x0
c000f589:	68 6e 05 00 c0       	push   0xc000056e
c000f58e:	6a 2a                	push   0x2a
c000f590:	53                   	push   ebx
c000f591:	e8 a6 fd ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f596:	6a 00                	push   0x0
c000f598:	68 78 05 00 c0       	push   0xc0000578
c000f59d:	6a 2b                	push   0x2b
c000f59f:	53                   	push   ebx
c000f5a0:	e8 97 fd ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f5a5:	83 c4 20             	add    esp,0x20
c000f5a8:	6a 00                	push   0x0
c000f5aa:	68 82 05 00 c0       	push   0xc0000582
c000f5af:	6a 2c                	push   0x2c
c000f5b1:	53                   	push   ebx
c000f5b2:	e8 85 fd ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f5b7:	6a 00                	push   0x0
c000f5b9:	68 8c 05 00 c0       	push   0xc000058c
c000f5be:	6a 2d                	push   0x2d
c000f5c0:	53                   	push   ebx
c000f5c1:	e8 76 fd ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f5c6:	83 c4 20             	add    esp,0x20
c000f5c9:	6a 00                	push   0x0
c000f5cb:	68 96 05 00 c0       	push   0xc0000596
c000f5d0:	6a 2e                	push   0x2e
c000f5d2:	53                   	push   ebx
c000f5d3:	e8 64 fd ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f5d8:	6a 00                	push   0x0
c000f5da:	68 a0 05 00 c0       	push   0xc00005a0
c000f5df:	6a 2f                	push   0x2f
c000f5e1:	53                   	push   ebx
c000f5e2:	e8 55 fd ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f5e7:	83 c4 20             	add    esp,0x20
c000f5ea:	6a 00                	push   0x0
c000f5ec:	68 f6 05 00 c0       	push   0xc00005f6
c000f5f1:	6a 30                	push   0x30
c000f5f3:	53                   	push   ebx
c000f5f4:	e8 43 fd ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f5f9:	6a 00                	push   0x0
c000f5fb:	68 00 06 00 c0       	push   0xc0000600
c000f600:	6a 31                	push   0x31
c000f602:	53                   	push   ebx
c000f603:	e8 34 fd ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f608:	83 c4 20             	add    esp,0x20
c000f60b:	6a 00                	push   0x0
c000f60d:	68 0a 06 00 c0       	push   0xc000060a
c000f612:	6a 32                	push   0x32
c000f614:	53                   	push   ebx
c000f615:	e8 22 fd ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f61a:	6a 00                	push   0x0
c000f61c:	68 14 06 00 c0       	push   0xc0000614
c000f621:	6a 33                	push   0x33
c000f623:	53                   	push   ebx
c000f624:	e8 13 fd ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f629:	83 c4 20             	add    esp,0x20
c000f62c:	6a 00                	push   0x0
c000f62e:	68 1e 06 00 c0       	push   0xc000061e
c000f633:	6a 34                	push   0x34
c000f635:	53                   	push   ebx
c000f636:	e8 01 fd ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f63b:	6a 00                	push   0x0
c000f63d:	68 28 06 00 c0       	push   0xc0000628
c000f642:	6a 35                	push   0x35
c000f644:	53                   	push   ebx
c000f645:	e8 f2 fc ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f64a:	83 c4 20             	add    esp,0x20
c000f64d:	6a 00                	push   0x0
c000f64f:	68 32 06 00 c0       	push   0xc0000632
c000f654:	6a 36                	push   0x36
c000f656:	53                   	push   ebx
c000f657:	e8 e0 fc ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f65c:	6a 00                	push   0x0
c000f65e:	68 3c 06 00 c0       	push   0xc000063c
c000f663:	6a 37                	push   0x37
c000f665:	53                   	push   ebx
c000f666:	e8 d1 fc ff ff       	call   c000f33c <IDT::addEntry(int, void (*)(), bool)>
c000f66b:	83 c4 1c             	add    esp,0x1c
c000f66e:	6a 03                	push   0x3
c000f670:	6a 02                	push   0x2
c000f672:	ff 35 50 e8 02 c0    	push   DWORD PTR ds:0xc002e850
c000f678:	e8 95 27 00 00       	call   c0011e12 <VAS::allocatePages(int, int)>
c000f67d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f684:	89 c6                	mov    esi,eax
c000f686:	e8 58 03 00 00       	call   c000f9e3 <malloc>
c000f68b:	81 c6 00 20 00 00    	add    esi,0x2000
c000f691:	89 04 24             	mov    DWORD PTR [esp],eax
c000f694:	89 c7                	mov    edi,eax
c000f696:	e8 15 19 00 00       	call   c0010fb0 <TSS::TSS()>
c000f69b:	83 c4 0c             	add    esp,0xc
c000f69e:	68 c6 04 00 c0       	push   0xc00004c6
c000f6a3:	56                   	push   esi
c000f6a4:	57                   	push   edi
c000f6a5:	e8 46 19 00 00       	call   c0010ff0 <TSS::setup(unsigned long, unsigned long)>
c000f6aa:	89 c6                	mov    esi,eax
c000f6ac:	58                   	pop    eax
c000f6ad:	5a                   	pop    edx
c000f6ae:	6a 00                	push   0x0
c000f6b0:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f6b4:	50                   	push   eax
c000f6b5:	e8 dc fb ff ff       	call   c000f296 <IDTEntry::IDTEntry(bool)>
c000f6ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6be:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f6c3:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f6ca:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f6d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6d4:	80 ce 05             	or     dh,0x5
c000f6d7:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f6da:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f6de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6e2:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f6e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6e8:	e8 87 fc ff ff       	call   c000f374 <IDT::flush()>
c000f6ed:	83 c4 20             	add    esp,0x20
c000f6f0:	5b                   	pop    ebx
c000f6f1:	5e                   	pop    esi
c000f6f2:	5f                   	pop    edi
c000f6f3:	c3                   	ret    

c000f6f4 <sbrk>:
c000f6f4:	55                   	push   ebp
c000f6f5:	57                   	push   edi
c000f6f6:	56                   	push   esi
c000f6f7:	53                   	push   ebx
c000f6f8:	83 ec 24             	sub    esp,0x24
c000f6fb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000f6ff:	53                   	push   ebx
c000f700:	68 bc a7 02 c0       	push   0xc002a7bc
c000f705:	e8 31 33 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000f70a:	83 c4 10             	add    esp,0x10
c000f70d:	85 db                	test   ebx,ebx
c000f70f:	0f 84 b1 00 00 00    	je     c000f7c6 <sbrk+0xd2>
c000f715:	0f 88 b5 00 00 00    	js     c000f7d0 <sbrk+0xdc>
c000f71b:	83 ec 0c             	sub    esp,0xc
c000f71e:	68 da a7 02 c0       	push   0xc002a7da
c000f723:	e8 13 33 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000f728:	c7 04 24 e0 a7 02 c0 	mov    DWORD PTR [esp],0xc002a7e0
c000f72f:	e8 07 33 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000f734:	83 c4 08             	add    esp,0x8
c000f737:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c000f73c:	ff b0 60 01 00 00    	push   DWORD PTR [eax+0x160]
c000f742:	68 e7 a7 02 c0       	push   0xc002a7e7
c000f747:	e8 ef 32 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000f74c:	83 c4 08             	add    esp,0x8
c000f74f:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c000f754:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f75a:	ff b0 90 11 00 00    	push   DWORD PTR [eax+0x1190]
c000f760:	68 fc a7 02 c0       	push   0xc002a7fc
c000f765:	e8 d1 32 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000f76a:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c000f76f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f775:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000f77b:	83 e0 01             	and    eax,0x1
c000f77e:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000f782:	c7 04 24 11 a8 02 c0 	mov    DWORD PTR [esp],0xc002a811
c000f789:	e8 ad 32 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000f78e:	a1 a8 d4 02 c0       	mov    eax,ds:0xc002d4a8
c000f793:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f797:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000f79d:	89 d8                	mov    eax,ebx
c000f79f:	83 c4 10             	add    esp,0x10
c000f7a2:	85 db                	test   ebx,ebx
c000f7a4:	78 45                	js     c000f7eb <sbrk+0xf7>
c000f7a6:	c1 f8 0c             	sar    eax,0xc
c000f7a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f7ad:	89 c7                	mov    edi,eax
c000f7af:	83 ec 0c             	sub    esp,0xc
c000f7b2:	68 17 a8 02 c0       	push   0xc002a817
c000f7b7:	e8 7f 32 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000f7bc:	83 c4 10             	add    esp,0x10
c000f7bf:	be 00 00 00 00       	mov    esi,0x0
c000f7c4:	eb 65                	jmp    c000f82b <sbrk+0x137>
c000f7c6:	a1 a8 d4 02 c0       	mov    eax,ds:0xc002d4a8
c000f7cb:	e9 ec 00 00 00       	jmp    c000f8bc <sbrk+0x1c8>
c000f7d0:	83 ec 08             	sub    esp,0x8
c000f7d3:	53                   	push   ebx
c000f7d4:	68 74 a8 02 c0       	push   0xc002a874
c000f7d9:	e8 5d 32 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000f7de:	83 c4 10             	add    esp,0x10
c000f7e1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f7e6:	e9 d1 00 00 00       	jmp    c000f8bc <sbrk+0x1c8>
c000f7eb:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000f7f1:	eb b3                	jmp    c000f7a6 <sbrk+0xb2>
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	68 29 a8 02 c0       	push   0xc002a829
c000f7fb:	e8 3b 32 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000f800:	8b 1d a8 d4 02 c0    	mov    ebx,DWORD PTR ds:0xc002d4a8
c000f806:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f809:	83 c4 10             	add    esp,0x10
c000f80c:	83 ec 0c             	sub    esp,0xc
c000f80f:	68 2f a8 02 c0       	push   0xc002a82f
c000f814:	e8 22 32 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000f819:	81 05 a8 d4 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d4a8,0x1000
c000f823:	46                   	inc    esi
c000f824:	83 c4 10             	add    esp,0x10
c000f827:	39 f7                	cmp    edi,esi
c000f829:	74 44                	je     c000f86f <sbrk+0x17b>
c000f82b:	83 ec 0c             	sub    esp,0xc
c000f82e:	68 1d a8 02 c0       	push   0xc002a81d
c000f833:	e8 03 32 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000f838:	8b 1d 50 e8 02 c0    	mov    ebx,DWORD PTR ds:0xc002e850
c000f83e:	8b 2d a8 d4 02 c0    	mov    ebp,DWORD PTR ds:0xc002d4a8
c000f844:	e8 96 05 00 00       	call   c000fddf <Phys::allocatePage()>
c000f849:	68 01 04 00 00       	push   0x401
c000f84e:	55                   	push   ebp
c000f84f:	50                   	push   eax
c000f850:	53                   	push   ebx
c000f851:	e8 ba 24 00 00       	call   c0011d10 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f856:	83 c4 14             	add    esp,0x14
c000f859:	68 23 a8 02 c0       	push   0xc002a823
c000f85e:	e8 d8 31 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000f863:	83 c4 10             	add    esp,0x10
c000f866:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f86b:	74 9f                	je     c000f80c <sbrk+0x118>
c000f86d:	eb 84                	jmp    c000f7f3 <sbrk+0xff>
c000f86f:	83 ec 0c             	sub    esp,0xc
c000f872:	68 35 a8 02 c0       	push   0xc002a835
c000f877:	e8 bf 31 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000f87c:	83 c4 10             	add    esp,0x10
c000f87f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f884:	75 3e                	jne    c000f8c4 <sbrk+0x1d0>
c000f886:	83 ec 0c             	sub    esp,0xc
c000f889:	68 d4 bd 02 c0       	push   0xc002bdd4
c000f88e:	e8 a8 31 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000f893:	0f 20 d8             	mov    eax,cr3
c000f896:	0f 22 d8             	mov    cr3,eax
c000f899:	c7 04 24 3b a8 02 c0 	mov    DWORD PTR [esp],0xc002a83b
c000f8a0:	e8 96 31 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000f8a5:	83 c4 10             	add    esp,0x10
c000f8a8:	83 ec 0c             	sub    esp,0xc
c000f8ab:	68 5f a8 02 c0       	push   0xc002a85f
c000f8b0:	e8 86 31 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000f8b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f8b9:	83 c4 10             	add    esp,0x10
c000f8bc:	83 c4 1c             	add    esp,0x1c
c000f8bf:	5b                   	pop    ebx
c000f8c0:	5e                   	pop    esi
c000f8c1:	5f                   	pop    edi
c000f8c2:	5d                   	pop    ebp
c000f8c3:	c3                   	ret    
c000f8c4:	83 ec 0c             	sub    esp,0xc
c000f8c7:	68 41 a8 02 c0       	push   0xc002a841
c000f8cc:	e8 6a 31 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000f8d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f8d5:	89 c3                	mov    ebx,eax
c000f8d7:	c1 eb 0a             	shr    ebx,0xa
c000f8da:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f8e0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f8e6:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f8ea:	c1 e6 0c             	shl    esi,0xc
c000f8ed:	01 c6                	add    esi,eax
c000f8ef:	c1 ee 0a             	shr    esi,0xa
c000f8f2:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000f8f8:	81 ee 00 00 40 00    	sub    esi,0x400000
c000f8fe:	c7 04 24 47 a8 02 c0 	mov    DWORD PTR [esp],0xc002a847
c000f905:	e8 31 31 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000f90a:	83 c4 10             	add    esp,0x10
c000f90d:	39 f3                	cmp    ebx,esi
c000f90f:	77 29                	ja     c000f93a <sbrk+0x246>
c000f911:	83 ec 0c             	sub    esp,0xc
c000f914:	68 4d a8 02 c0       	push   0xc002a84d
c000f919:	e8 1d 31 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000f91e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f921:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f927:	c7 04 24 53 a8 02 c0 	mov    DWORD PTR [esp],0xc002a853
c000f92e:	e8 08 31 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000f933:	83 c4 10             	add    esp,0x10
c000f936:	39 de                	cmp    esi,ebx
c000f938:	73 d7                	jae    c000f911 <sbrk+0x21d>
c000f93a:	83 ec 0c             	sub    esp,0xc
c000f93d:	68 59 a8 02 c0       	push   0xc002a859
c000f942:	e8 f4 30 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000f947:	83 c4 10             	add    esp,0x10
c000f94a:	e9 59 ff ff ff       	jmp    c000f8a8 <sbrk+0x1b4>

c000f94f <mmap>:
c000f94f:	83 ec 18             	sub    esp,0x18
c000f952:	68 65 a8 02 c0       	push   0xc002a865
c000f957:	e8 7d aa 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c000f95c:	b8 00 00 00 00       	mov    eax,0x0
c000f961:	83 c4 1c             	add    esp,0x1c
c000f964:	c3                   	ret    

c000f965 <munmap>:
c000f965:	83 ec 18             	sub    esp,0x18
c000f968:	68 6a a8 02 c0       	push   0xc002a86a
c000f96d:	e8 67 aa 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c000f972:	b8 00 00 00 00       	mov    eax,0x0
c000f977:	83 c4 1c             	add    esp,0x1c
c000f97a:	c3                   	ret    

c000f97b <liballoc_lock()>:
c000f97b:	fa                   	cli    
c000f97c:	ff 05 e8 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe8
c000f982:	b8 00 00 00 00       	mov    eax,0x0
c000f987:	c3                   	ret    

c000f988 <liballoc_unlock()>:
c000f988:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c000f98d:	48                   	dec    eax
c000f98e:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c000f993:	75 01                	jne    c000f996 <liballoc_unlock()+0xe>
c000f995:	fb                   	sti    
c000f996:	b8 00 00 00 00       	mov    eax,0x0
c000f99b:	c3                   	ret    

c000f99c <liballoc_alloc(int)>:
c000f99c:	83 ec 10             	sub    esp,0x10
c000f99f:	6a 01                	push   0x1
c000f9a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f9a5:	ff 35 50 e8 02 c0    	push   DWORD PTR ds:0xc002e850
c000f9ab:	e8 62 24 00 00       	call   c0011e12 <VAS::allocatePages(int, int)>
c000f9b0:	83 c4 1c             	add    esp,0x1c
c000f9b3:	c3                   	ret    

c000f9b4 <liballoc_free(void*, int)>:
c000f9b4:	83 ec 14             	sub    esp,0x14
c000f9b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f9bb:	ff 35 50 e8 02 c0    	push   DWORD PTR ds:0xc002e850
c000f9c1:	e8 f6 20 00 00       	call   c0011abc <VAS::freeAllocatedPages(unsigned long)>
c000f9c6:	b8 00 00 00 00       	mov    eax,0x0
c000f9cb:	83 c4 1c             	add    esp,0x1c
c000f9ce:	c3                   	ret    

c000f9cf <realloc>:
c000f9cf:	83 ec 14             	sub    esp,0x14
c000f9d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9da:	e8 4d 1c ff ff       	call   c000162c <dlrealloc>
c000f9df:	83 c4 1c             	add    esp,0x1c
c000f9e2:	c3                   	ret    

c000f9e3 <malloc>:
c000f9e3:	83 ec 18             	sub    esp,0x18
c000f9e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9ea:	e8 00 17 ff ff       	call   c00010ef <dlmalloc>
c000f9ef:	83 c4 1c             	add    esp,0x1c
c000f9f2:	c3                   	ret    

c000f9f3 <free>:
c000f9f3:	83 ec 18             	sub    esp,0x18
c000f9f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9fa:	e8 95 13 ff ff       	call   c0000d94 <dlfree>
c000f9ff:	83 c4 1c             	add    esp,0x1c
c000fa02:	c3                   	ret    

c000fa03 <rfree>:
c000fa03:	83 ec 18             	sub    esp,0x18
c000fa06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa0a:	e8 85 13 ff ff       	call   c0000d94 <dlfree>
c000fa0f:	83 c4 1c             	add    esp,0x1c
c000fa12:	c3                   	ret    

c000fa13 <calloc>:
c000fa13:	56                   	push   esi
c000fa14:	53                   	push   ebx
c000fa15:	83 ec 10             	sub    esp,0x10
c000fa18:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fa1c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000fa21:	53                   	push   ebx
c000fa22:	e8 bc ff ff ff       	call   c000f9e3 <malloc>
c000fa27:	89 c6                	mov    esi,eax
c000fa29:	83 c4 0c             	add    esp,0xc
c000fa2c:	53                   	push   ebx
c000fa2d:	6a 00                	push   0x0
c000fa2f:	50                   	push   eax
c000fa30:	e8 1b 0d ff ff       	call   c0000750 <memset>
c000fa35:	89 f0                	mov    eax,esi
c000fa37:	83 c4 14             	add    esp,0x14
c000fa3a:	5b                   	pop    ebx
c000fa3b:	5e                   	pop    esi
c000fa3c:	c3                   	ret    

c000fa3d <Krnl::setBootMessage(char const*)>:
c000fa3d:	57                   	push   edi
c000fa3e:	56                   	push   esi
c000fa3f:	53                   	push   ebx
c000fa40:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fa46:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fa4d:	68 9e 00 00 00       	push   0x9e
c000fa52:	6a 00                	push   0x0
c000fa54:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fa58:	56                   	push   esi
c000fa59:	e8 f2 0c ff ff       	call   c0000750 <memset>
c000fa5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa61:	e8 06 0d ff ff       	call   c000076c <strlen>
c000fa66:	ba 50 00 00 00       	mov    edx,0x50
c000fa6b:	83 c4 10             	add    esp,0x10
c000fa6e:	29 c2                	sub    edx,eax
c000fa70:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000fa74:	d1 ea                	shr    edx,1
c000fa76:	84 c0                	test   al,al
c000fa78:	74 19                	je     c000fa93 <Krnl::setBootMessage(char const*)+0x56>
c000fa7a:	01 d2                	add    edx,edx
c000fa7c:	43                   	inc    ebx
c000fa7d:	01 f2                	add    edx,esi
c000fa7f:	80 cc 0f             	or     ah,0xf
c000fa82:	83 c2 02             	add    edx,0x2
c000fa85:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000fa89:	43                   	inc    ebx
c000fa8a:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000fa8f:	84 c0                	test   al,al
c000fa91:	75 ec                	jne    c000fa7f <Krnl::setBootMessage(char const*)+0x42>
c000fa93:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fa98:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fa9d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa9f:	81 c4 a0 00 00 00    	add    esp,0xa0
c000faa5:	5b                   	pop    ebx
c000faa6:	5e                   	pop    esi
c000faa7:	5f                   	pop    edi
c000faa8:	c3                   	ret    

c000faa9 <kernel_main>:
c000faa9:	57                   	push   edi
c000faaa:	bf f9 03 00 00       	mov    edi,0x3f9
c000faaf:	56                   	push   esi
c000fab0:	89 fa                	mov    edx,edi
c000fab2:	53                   	push   ebx
c000fab3:	31 f6                	xor    esi,esi
c000fab5:	83 ec 2c             	sub    esp,0x2c
c000fab8:	89 f0                	mov    eax,esi
c000faba:	ee                   	out    dx,al
c000fabb:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fac0:	b0 80                	mov    al,0x80
c000fac2:	89 da                	mov    edx,ebx
c000fac4:	ee                   	out    dx,al
c000fac5:	b1 03                	mov    cl,0x3
c000fac7:	ba f8 03 00 00       	mov    edx,0x3f8
c000facc:	88 c8                	mov    al,cl
c000face:	ee                   	out    dx,al
c000facf:	89 f0                	mov    eax,esi
c000fad1:	89 fa                	mov    edx,edi
c000fad3:	ee                   	out    dx,al
c000fad4:	88 c8                	mov    al,cl
c000fad6:	89 da                	mov    edx,ebx
c000fad8:	ee                   	out    dx,al
c000fad9:	b0 c7                	mov    al,0xc7
c000fadb:	ba fa 03 00 00       	mov    edx,0x3fa
c000fae0:	ee                   	out    dx,al
c000fae1:	b0 0b                	mov    al,0xb
c000fae3:	ba fc 03 00 00       	mov    edx,0x3fc
c000fae8:	ee                   	out    dx,al
c000fae9:	68 a4 a8 02 c0       	push   0xc002a8a4
c000faee:	e8 48 2f 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000faf3:	e8 b8 09 00 00       	call   c00104b0 <installVgaTextImplementation()>
c000faf8:	0f b6 05 c0 d4 02 c0 	movzx  eax,BYTE PTR ds:0xc002d4c0
c000faff:	83 c4 10             	add    esp,0x10
c000fb02:	84 c0                	test   al,al
c000fb04:	74 6c                	je     c000fb72 <kernel_main+0xc9>
c000fb06:	31 db                	xor    ebx,ebx
c000fb08:	bf 0a 00 00 00       	mov    edi,0xa
c000fb0d:	be 05 00 00 00       	mov    esi,0x5
c000fb12:	31 c9                	xor    ecx,ecx
c000fb14:	eb 2a                	jmp    c000fb40 <kernel_main+0x97>
c000fb16:	3c 0d                	cmp    al,0xd
c000fb18:	74 1a                	je     c000fb34 <kernel_main+0x8b>
c000fb1a:	3c 0a                	cmp    al,0xa
c000fb1c:	74 40                	je     c000fb5e <kernel_main+0xb5>
c000fb1e:	8d 14 b6             	lea    edx,[esi+esi*4]
c000fb21:	80 cc 0e             	or     ah,0xe
c000fb24:	c1 e2 04             	shl    edx,0x4
c000fb27:	01 ca                	add    edx,ecx
c000fb29:	41                   	inc    ecx
c000fb2a:	01 fa                	add    edx,edi
c000fb2c:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000fb34:	43                   	inc    ebx
c000fb35:	0f b6 83 c0 d4 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd2b40]
c000fb3c:	84 c0                	test   al,al
c000fb3e:	74 32                	je     c000fb72 <kernel_main+0xc9>
c000fb40:	80 b9 f6 d4 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd2b0a],0xdb
c000fb47:	75 cd                	jne    c000fb16 <kernel_main+0x6d>
c000fb49:	0f b6 91 f5 d4 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd2b0b]
c000fb50:	83 e2 fe             	and    edx,0xfffffffe
c000fb53:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fb59:	75 bb                	jne    c000fb16 <kernel_main+0x6d>
c000fb5b:	47                   	inc    edi
c000fb5c:	eb b8                	jmp    c000fb16 <kernel_main+0x6d>
c000fb5e:	43                   	inc    ebx
c000fb5f:	46                   	inc    esi
c000fb60:	31 c9                	xor    ecx,ecx
c000fb62:	0f b6 83 c0 d4 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd2b40]
c000fb69:	bf 0a 00 00 00       	mov    edi,0xa
c000fb6e:	84 c0                	test   al,al
c000fb70:	75 ce                	jne    c000fb40 <kernel_main+0x97>
c000fb72:	83 ec 0c             	sub    esp,0xc
c000fb75:	68 bc a8 02 c0       	push   0xc002a8bc
c000fb7a:	e8 be fe ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c000fb7f:	a1 00 05 00 00       	mov    eax,ds:0x500
c000fb84:	a3 00 e7 02 c0       	mov    ds:0xc002e700,eax
c000fb89:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fb8e:	05 ff 0f 00 00       	add    eax,0xfff
c000fb93:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fb98:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb9b:	e8 cb 03 00 00       	call   c000ff6b <Phys::physicalMemorySetup(unsigned int)>
c000fba0:	e8 83 1c 00 00       	call   c0011828 <Virt::virtualMemorySetup()>
c000fba5:	58                   	pop    eax
c000fba6:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fbaa:	53                   	push   ebx
c000fbab:	e8 34 1d 00 00       	call   c00118e4 <VAS::VAS()>
c000fbb0:	89 1d 50 e8 02 c0    	mov    DWORD PTR ds:0xc002e850,ebx
c000fbb6:	e8 65 04 ff ff       	call   c0000020 <callGlobalConstructors>
c000fbbb:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fbc2:	e8 1c fe ff ff       	call   c000f9e3 <malloc>
c000fbc7:	89 04 24             	mov    DWORD PTR [esp],eax
c000fbca:	89 c6                	mov    esi,eax
c000fbcc:	e8 47 ee ff ff       	call   c000ea18 <Computer::Computer()>
c000fbd1:	6a 00                	push   0x0
c000fbd3:	89 35 e8 e6 02 c0    	mov    DWORD PTR ds:0xc002e6e8,esi
c000fbd9:	6a 00                	push   0x0
c000fbdb:	6a 00                	push   0x0
c000fbdd:	56                   	push   esi
c000fbde:	e8 41 f2 ff ff       	call   c000ee24 <Computer::open(int, int, void*)>
c000fbe3:	83 c4 14             	add    esp,0x14
c000fbe6:	53                   	push   ebx
c000fbe7:	e8 a8 1f 00 00       	call   c0011b94 <VAS::~VAS()>
c000fbec:	83 c4 30             	add    esp,0x30
c000fbef:	5b                   	pop    ebx
c000fbf0:	5e                   	pop    esi
c000fbf1:	5f                   	pop    edi
c000fbf2:	c3                   	ret    

c000fbf3 <Phys::allocateDMA(unsigned long)>:
c000fbf3:	55                   	push   ebp
c000fbf4:	31 ed                	xor    ebp,ebp
c000fbf6:	57                   	push   edi
c000fbf7:	56                   	push   esi
c000fbf8:	53                   	push   ebx
c000fbf9:	31 db                	xor    ebx,ebx
c000fbfb:	83 ec 18             	sub    esp,0x18
c000fbfe:	68 db a8 02 c0       	push   0xc002a8db
c000fc03:	e8 33 2e 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000fc08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fc0c:	31 d2                	xor    edx,edx
c000fc0e:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fc14:	83 c4 10             	add    esp,0x10
c000fc17:	c1 ee 0c             	shr    esi,0xc
c000fc1a:	31 c9                	xor    ecx,ecx
c000fc1c:	eb 17                	jmp    c000fc35 <Phys::allocateDMA(unsigned long)+0x42>
c000fc1e:	85 c9                	test   ecx,ecx
c000fc20:	75 04                	jne    c000fc26 <Phys::allocateDMA(unsigned long)+0x33>
c000fc22:	89 d5                	mov    ebp,edx
c000fc24:	89 d3                	mov    ebx,edx
c000fc26:	8d 41 01             	lea    eax,[ecx+0x1]
c000fc29:	39 c6                	cmp    esi,eax
c000fc2b:	74 23                	je     c000fc50 <Phys::allocateDMA(unsigned long)+0x5d>
c000fc2d:	42                   	inc    edx
c000fc2e:	89 c1                	mov    ecx,eax
c000fc30:	83 fa 2f             	cmp    edx,0x2f
c000fc33:	7f 11                	jg     c000fc46 <Phys::allocateDMA(unsigned long)+0x53>
c000fc35:	80 ba 40 e7 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd18c0],0x0
c000fc3c:	74 e0                	je     c000fc1e <Phys::allocateDMA(unsigned long)+0x2b>
c000fc3e:	31 c9                	xor    ecx,ecx
c000fc40:	42                   	inc    edx
c000fc41:	83 fa 2f             	cmp    edx,0x2f
c000fc44:	7e ef                	jle    c000fc35 <Phys::allocateDMA(unsigned long)+0x42>
c000fc46:	83 c4 0c             	add    esp,0xc
c000fc49:	31 c0                	xor    eax,eax
c000fc4b:	5b                   	pop    ebx
c000fc4c:	5e                   	pop    esi
c000fc4d:	5f                   	pop    edi
c000fc4e:	5d                   	pop    ebp
c000fc4f:	c3                   	ret    
c000fc50:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fc53:	89 d7                	mov    edi,edx
c000fc55:	4f                   	dec    edi
c000fc56:	79 03                	jns    c000fc5b <Phys::allocateDMA(unsigned long)+0x68>
c000fc58:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fc5b:	c1 ff 04             	sar    edi,0x4
c000fc5e:	89 da                	mov    edx,ebx
c000fc60:	c1 fa 04             	sar    edx,0x4
c000fc63:	39 fa                	cmp    edx,edi
c000fc65:	75 43                	jne    c000fcaa <Phys::allocateDMA(unsigned long)+0xb7>
c000fc67:	85 c0                	test   eax,eax
c000fc69:	74 1a                	je     c000fc85 <Phys::allocateDMA(unsigned long)+0x92>
c000fc6b:	be 40 e7 02 c0       	mov    esi,0xc002e740
c000fc70:	8d 93 40 e7 02 c0    	lea    edx,[ebx-0x3ffd18c0]
c000fc76:	f7 d6                	not    esi
c000fc78:	29 de                	sub    esi,ebx
c000fc7a:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fc7d:	42                   	inc    edx
c000fc7e:	8d 04 16             	lea    eax,[esi+edx*1]
c000fc81:	39 c1                	cmp    ecx,eax
c000fc83:	7f f5                	jg     c000fc7a <Phys::allocateDMA(unsigned long)+0x87>
c000fc85:	83 ec 0c             	sub    esp,0xc
c000fc88:	68 f4 a8 02 c0       	push   0xc002a8f4
c000fc8d:	e8 a9 2d 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000fc92:	83 c4 10             	add    esp,0x10
c000fc95:	85 ff                	test   edi,edi
c000fc97:	74 17                	je     c000fcb0 <Phys::allocateDMA(unsigned long)+0xbd>
c000fc99:	83 c4 0c             	add    esp,0xc
c000fc9c:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c000fca2:	5b                   	pop    ebx
c000fca3:	c1 e0 0c             	shl    eax,0xc
c000fca6:	5e                   	pop    esi
c000fca7:	5f                   	pop    edi
c000fca8:	5d                   	pop    ebp
c000fca9:	c3                   	ret    
c000fcaa:	89 ea                	mov    edx,ebp
c000fcac:	31 c9                	xor    ecx,ecx
c000fcae:	eb 90                	jmp    c000fc40 <Phys::allocateDMA(unsigned long)+0x4d>
c000fcb0:	83 c4 0c             	add    esp,0xc
c000fcb3:	c1 e3 0c             	shl    ebx,0xc
c000fcb6:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c000fcbc:	5b                   	pop    ebx
c000fcbd:	5e                   	pop    esi
c000fcbe:	5f                   	pop    edi
c000fcbf:	5d                   	pop    ebp
c000fcc0:	c3                   	ret    

c000fcc1 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fcc1:	83 ec 18             	sub    esp,0x18
c000fcc4:	68 0b a9 02 c0       	push   0xc002a90b
c000fcc9:	e8 6d 2d 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000fcce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcd2:	83 c4 10             	add    esp,0x10
c000fcd5:	8d 88 ff 0f 00 00    	lea    ecx,[eax+0xfff]
c000fcdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcdf:	c1 e9 0c             	shr    ecx,0xc
c000fce2:	81 7c 24 10 ff ff 05 c2 	cmp    DWORD PTR [esp+0x10],0xc205ffff
c000fcea:	76 29                	jbe    c000fd15 <Phys::freeDMA(unsigned long, unsigned long)+0x54>
c000fcec:	8d 90 00 00 fa 3d    	lea    edx,[eax+0x3dfa0000]
c000fcf2:	c1 ea 0c             	shr    edx,0xc
c000fcf5:	83 c2 10             	add    edx,0x10
c000fcf8:	85 c9                	test   ecx,ecx
c000fcfa:	74 15                	je     c000fd11 <Phys::freeDMA(unsigned long, unsigned long)+0x50>
c000fcfc:	8d 82 40 e7 02 c0    	lea    eax,[edx-0x3ffd18c0]
c000fd02:	8d 94 11 40 e7 02 c0 	lea    edx,[ecx+edx*1-0x3ffd18c0]
c000fd09:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fd0c:	40                   	inc    eax
c000fd0d:	39 d0                	cmp    eax,edx
c000fd0f:	75 f8                	jne    c000fd09 <Phys::freeDMA(unsigned long, unsigned long)+0x48>
c000fd11:	83 c4 0c             	add    esp,0xc
c000fd14:	c3                   	ret    
c000fd15:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fd1b:	c1 ea 0c             	shr    edx,0xc
c000fd1e:	eb d8                	jmp    c000fcf8 <Phys::freeDMA(unsigned long, unsigned long)+0x37>

c000fd20 <Phys::setPageState(unsigned long, bool)>:
c000fd20:	56                   	push   esi
c000fd21:	ba 01 00 00 00       	mov    edx,0x1
c000fd26:	53                   	push   ebx
c000fd27:	8b 35 04 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d604
c000fd2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fd31:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fd35:	89 c8                	mov    eax,ecx
c000fd37:	83 e1 07             	and    ecx,0x7
c000fd3a:	c1 e8 03             	shr    eax,0x3
c000fd3d:	d3 e3                	shl    ebx,cl
c000fd3f:	01 c6                	add    esi,eax
c000fd41:	d3 e2                	shl    edx,cl
c000fd43:	f7 d2                	not    edx
c000fd45:	20 16                	and    BYTE PTR [esi],dl
c000fd47:	03 05 04 d6 02 c0    	add    eax,DWORD PTR ds:0xc002d604
c000fd4d:	08 18                	or     BYTE PTR [eax],bl
c000fd4f:	5b                   	pop    ebx
c000fd50:	5e                   	pop    esi
c000fd51:	c3                   	ret    

c000fd52 <Phys::getPageState(unsigned long)>:
c000fd52:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fd56:	8b 15 04 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d604
c000fd5c:	89 c8                	mov    eax,ecx
c000fd5e:	83 e1 07             	and    ecx,0x7
c000fd61:	c1 e8 03             	shr    eax,0x3
c000fd64:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fd68:	d3 f8                	sar    eax,cl
c000fd6a:	83 e0 01             	and    eax,0x1
c000fd6d:	c3                   	ret    

c000fd6e <Phys::freePage(unsigned long)>:
c000fd6e:	53                   	push   ebx
c000fd6f:	83 ec 10             	sub    esp,0x10
c000fd72:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fd76:	53                   	push   ebx
c000fd77:	68 21 a9 02 c0       	push   0xc002a921
c000fd7c:	e8 ba 2c 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000fd81:	83 c4 10             	add    esp,0x10
c000fd84:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fd8a:	76 3d                	jbe    c000fdc9 <Phys::freePage(unsigned long)+0x5b>
c000fd8c:	83 ec 0c             	sub    esp,0xc
c000fd8f:	c1 eb 0c             	shr    ebx,0xc
c000fd92:	53                   	push   ebx
c000fd93:	e8 ba ff ff ff       	call   c000fd52 <Phys::getPageState(unsigned long)>
c000fd98:	83 c4 10             	add    esp,0x10
c000fd9b:	84 c0                	test   al,al
c000fd9d:	74 19                	je     c000fdb8 <Phys::freePage(unsigned long)+0x4a>
c000fd9f:	83 ec 08             	sub    esp,0x8
c000fda2:	ff 0d 30 e7 02 c0    	dec    DWORD PTR ds:0xc002e730
c000fda8:	6a 00                	push   0x0
c000fdaa:	53                   	push   ebx
c000fdab:	e8 70 ff ff ff       	call   c000fd20 <Phys::setPageState(unsigned long, bool)>
c000fdb0:	83 c4 10             	add    esp,0x10
c000fdb3:	83 c4 08             	add    esp,0x8
c000fdb6:	5b                   	pop    ebx
c000fdb7:	c3                   	ret    
c000fdb8:	c7 44 24 10 34 a9 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a934
c000fdc0:	83 c4 08             	add    esp,0x8
c000fdc3:	5b                   	pop    ebx
c000fdc4:	e9 10 a6 00 00       	jmp    c001a3d9 <Krnl::panic(char const*)>
c000fdc9:	83 ec 08             	sub    esp,0x8
c000fdcc:	68 00 10 00 00       	push   0x1000
c000fdd1:	53                   	push   ebx
c000fdd2:	e8 ea fe ff ff       	call   c000fcc1 <Phys::freeDMA(unsigned long, unsigned long)>
c000fdd7:	83 c4 10             	add    esp,0x10
c000fdda:	83 c4 08             	add    esp,0x8
c000fddd:	5b                   	pop    ebx
c000fdde:	c3                   	ret    

c000fddf <Phys::allocatePage()>:
c000fddf:	56                   	push   esi
c000fde0:	53                   	push   ebx
c000fde1:	83 ec 14             	sub    esp,0x14
c000fde4:	8b 35 24 e7 02 c0    	mov    esi,DWORD PTR ds:0xc002e724
c000fdea:	89 f3                	mov    ebx,esi
c000fdec:	eb 0a                	jmp    c000fdf8 <Phys::allocatePage()+0x19>
c000fdee:	89 1d 24 e7 02 c0    	mov    DWORD PTR ds:0xc002e724,ebx
c000fdf4:	39 de                	cmp    esi,ebx
c000fdf6:	74 24                	je     c000fe1c <Phys::allocatePage()+0x3d>
c000fdf8:	53                   	push   ebx
c000fdf9:	e8 54 ff ff ff       	call   c000fd52 <Phys::getPageState(unsigned long)>
c000fdfe:	5a                   	pop    edx
c000fdff:	84 c0                	test   al,al
c000fe01:	74 76                	je     c000fe79 <Phys::allocatePage()+0x9a>
c000fe03:	43                   	inc    ebx
c000fe04:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fe0a:	75 e2                	jne    c000fdee <Phys::allocatePage()+0xf>
c000fe0c:	31 db                	xor    ebx,ebx
c000fe0e:	c7 05 24 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e724,0x0
c000fe18:	39 de                	cmp    esi,ebx
c000fe1a:	75 dc                	jne    c000fdf8 <Phys::allocatePage()+0x19>
c000fe1c:	83 ec 0c             	sub    esp,0xc
c000fe1f:	68 68 a9 02 c0       	push   0xc002a968
c000fe24:	e8 12 2c 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000fe29:	58                   	pop    eax
c000fe2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fe2f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fe32:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000fe38:	e8 8d 28 00 00       	call   c00126ca <VAS::scanForEviction()>
c000fe3d:	83 c4 10             	add    esp,0x10
c000fe40:	85 c0                	test   eax,eax
c000fe42:	75 76                	jne    c000feba <Phys::allocatePage()+0xdb>
c000fe44:	83 ec 0c             	sub    esp,0xc
c000fe47:	68 00 10 00 00       	push   0x1000
c000fe4c:	e8 a2 fd ff ff       	call   c000fbf3 <Phys::allocateDMA(unsigned long)>
c000fe51:	83 c4 10             	add    esp,0x10
c000fe54:	85 c0                	test   eax,eax
c000fe56:	75 5c                	jne    c000feb4 <Phys::allocatePage()+0xd5>
c000fe58:	83 ec 0c             	sub    esp,0xc
c000fe5b:	68 80 a9 02 c0       	push   0xc002a980
c000fe60:	e8 74 a5 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c000fe65:	83 c4 10             	add    esp,0x10
c000fe68:	8b 1d 24 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e724
c000fe6e:	53                   	push   ebx
c000fe6f:	e8 de fe ff ff       	call   c000fd52 <Phys::getPageState(unsigned long)>
c000fe74:	5a                   	pop    edx
c000fe75:	84 c0                	test   al,al
c000fe77:	75 8a                	jne    c000fe03 <Phys::allocatePage()+0x24>
c000fe79:	6a 01                	push   0x1
c000fe7b:	53                   	push   ebx
c000fe7c:	e8 9f fe ff ff       	call   c000fd20 <Phys::setPageState(unsigned long, bool)>
c000fe81:	5a                   	pop    edx
c000fe82:	a1 30 e7 02 c0       	mov    eax,ds:0xc002e730
c000fe87:	59                   	pop    ecx
c000fe88:	40                   	inc    eax
c000fe89:	8b 15 24 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e724
c000fe8f:	a3 30 e7 02 c0       	mov    ds:0xc002e730,eax
c000fe94:	c1 e2 0c             	shl    edx,0xc
c000fe97:	52                   	push   edx
c000fe98:	ff 35 34 e7 02 c0    	push   DWORD PTR ds:0xc002e734
c000fe9e:	50                   	push   eax
c000fe9f:	68 4a a9 02 c0       	push   0xc002a94a
c000fea4:	e8 92 2b 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000fea9:	a1 24 e7 02 c0       	mov    eax,ds:0xc002e724
c000feae:	83 c4 10             	add    esp,0x10
c000feb1:	c1 e0 0c             	shl    eax,0xc
c000feb4:	83 c4 14             	add    esp,0x14
c000feb7:	5b                   	pop    ebx
c000feb8:	5e                   	pop    esi
c000feb9:	c3                   	ret    
c000feba:	83 ec 08             	sub    esp,0x8
c000febd:	89 c2                	mov    edx,eax
c000febf:	6a 01                	push   0x1
c000fec1:	c1 ea 0c             	shr    edx,0xc
c000fec4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fec8:	52                   	push   edx
c000fec9:	e8 52 fe ff ff       	call   c000fd20 <Phys::setPageState(unsigned long, bool)>
c000fece:	83 c4 10             	add    esp,0x10
c000fed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fed5:	eb dd                	jmp    c000feb4 <Phys::allocatePage()+0xd5>

c000fed7 <Phys::allocateContiguousPages(int)>:
c000fed7:	57                   	push   edi
c000fed8:	56                   	push   esi
c000fed9:	53                   	push   ebx
c000feda:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fede:	fa                   	cli    
c000fedf:	ff 05 e8 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe8
c000fee5:	31 db                	xor    ebx,ebx
c000fee7:	85 db                	test   ebx,ebx
c000fee9:	75 11                	jne    c000fefc <Phys::allocateContiguousPages(int)+0x25>
c000feeb:	e8 ef fe ff ff       	call   c000fddf <Phys::allocatePage()>
c000fef0:	83 fe 01             	cmp    esi,0x1
c000fef3:	89 c7                	mov    edi,eax
c000fef5:	74 21                	je     c000ff18 <Phys::allocateContiguousPages(int)+0x41>
c000fef7:	bb 01 00 00 00       	mov    ebx,0x1
c000fefc:	e8 de fe ff ff       	call   c000fddf <Phys::allocatePage()>
c000ff01:	89 da                	mov    edx,ebx
c000ff03:	c1 e2 0c             	shl    edx,0xc
c000ff06:	01 fa                	add    edx,edi
c000ff08:	39 c2                	cmp    edx,eax
c000ff0a:	74 20                	je     c000ff2c <Phys::allocateContiguousPages(int)+0x55>
c000ff0c:	bb 01 00 00 00       	mov    ebx,0x1
c000ff11:	89 c7                	mov    edi,eax
c000ff13:	83 fe 01             	cmp    esi,0x1
c000ff16:	75 e4                	jne    c000fefc <Phys::allocateContiguousPages(int)+0x25>
c000ff18:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c000ff1d:	48                   	dec    eax
c000ff1e:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c000ff23:	75 01                	jne    c000ff26 <Phys::allocateContiguousPages(int)+0x4f>
c000ff25:	fb                   	sti    
c000ff26:	89 f8                	mov    eax,edi
c000ff28:	5b                   	pop    ebx
c000ff29:	5e                   	pop    esi
c000ff2a:	5f                   	pop    edi
c000ff2b:	c3                   	ret    
c000ff2c:	43                   	inc    ebx
c000ff2d:	39 f3                	cmp    ebx,esi
c000ff2f:	75 b6                	jne    c000fee7 <Phys::allocateContiguousPages(int)+0x10>
c000ff31:	eb e5                	jmp    c000ff18 <Phys::allocateContiguousPages(int)+0x41>

c000ff33 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000ff33:	56                   	push   esi
c000ff34:	53                   	push   ebx
c000ff35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff39:	39 1d 28 e7 02 c0    	cmp    DWORD PTR ds:0xc002e728,ebx
c000ff3f:	73 06                	jae    c000ff47 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000ff41:	89 1d 28 e7 02 c0    	mov    DWORD PTR ds:0xc002e728,ebx
c000ff47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ff4b:	c1 eb 0c             	shr    ebx,0xc
c000ff4e:	c1 e8 0c             	shr    eax,0xc
c000ff51:	39 d8                	cmp    eax,ebx
c000ff53:	73 13                	jae    c000ff68 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000ff55:	6a 00                	push   0x0
c000ff57:	8d 70 01             	lea    esi,[eax+0x1]
c000ff5a:	50                   	push   eax
c000ff5b:	e8 c0 fd ff ff       	call   c000fd20 <Phys::setPageState(unsigned long, bool)>
c000ff60:	5a                   	pop    edx
c000ff61:	89 f0                	mov    eax,esi
c000ff63:	59                   	pop    ecx
c000ff64:	39 f3                	cmp    ebx,esi
c000ff66:	75 ed                	jne    c000ff55 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000ff68:	5b                   	pop    ebx
c000ff69:	5e                   	pop    esi
c000ff6a:	c3                   	ret    

c000ff6b <Phys::physicalMemorySetup(unsigned int)>:
c000ff6b:	55                   	push   ebp
c000ff6c:	57                   	push   edi
c000ff6d:	56                   	push   esi
c000ff6e:	53                   	push   ebx
c000ff6f:	83 ec 40             	sub    esp,0x40
c000ff72:	6a 30                	push   0x30
c000ff74:	6a 00                	push   0x0
c000ff76:	68 40 e7 02 c0       	push   0xc002e740
c000ff7b:	e8 d0 07 ff ff       	call   c0000750 <memset>
c000ff80:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ff84:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ff89:	05 00 10 00 00       	add    eax,0x1000
c000ff8e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ff92:	5b                   	pop    ebx
c000ff93:	31 db                	xor    ebx,ebx
c000ff95:	5e                   	pop    esi
c000ff96:	50                   	push   eax
c000ff97:	68 8e a9 02 c0       	push   0xc002a98e
c000ff9c:	e8 9a 2a 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c000ffa1:	83 c4 10             	add    esp,0x10
c000ffa4:	83 ec 08             	sub    esp,0x8
c000ffa7:	6a 01                	push   0x1
c000ffa9:	53                   	push   ebx
c000ffaa:	43                   	inc    ebx
c000ffab:	e8 70 fd ff ff       	call   c000fd20 <Phys::setPageState(unsigned long, bool)>
c000ffb0:	83 c4 10             	add    esp,0x10
c000ffb3:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ffb9:	75 e9                	jne    c000ffa4 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000ffbb:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000ffc2:	66 85 c0             	test   ax,ax
c000ffc5:	0f 84 8e 01 00 00    	je     c0010159 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000ffcb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ffcf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000ffd7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffdb:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000ffe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ffe4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000ffec:	eb 15                	jmp    c0010003 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000ffee:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fff2:	83 c3 18             	add    ebx,0x18
c000fff5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fff9:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fffd:	0f 84 66 01 00 00    	je     c0010169 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c0010003:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010006:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010009:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001000c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010010:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010014:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010016:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010019:	01 f0                	add    eax,esi
c001001b:	55                   	push   ebp
c001001c:	11 fa                	adc    edx,edi
c001001e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010022:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010026:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001002a:	56                   	push   esi
c001002b:	68 d0 a9 02 c0       	push   0xc002a9d0
c0010030:	e8 06 2a 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0010035:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010039:	83 c4 10             	add    esp,0x10
c001003c:	09 f8                	or     eax,edi
c001003e:	0f 85 25 01 00 00    	jne    c0010169 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c0010044:	4d                   	dec    ebp
c0010045:	75 a7                	jne    c000ffee <Phys::physicalMemorySetup(unsigned int)+0x83>
c0010047:	ba 00 00 08 00       	mov    edx,0x80000
c001004c:	89 c1                	mov    ecx,eax
c001004e:	39 f2                	cmp    edx,esi
c0010050:	19 f9                	sbb    ecx,edi
c0010052:	0f 82 a7 00 00 00    	jb     c00100ff <Phys::physicalMemorySetup(unsigned int)+0x194>
c0010058:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001005c:	89 c1                	mov    ecx,eax
c001005e:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010062:	0f 83 97 00 00 00    	jae    c00100ff <Phys::physicalMemorySetup(unsigned int)+0x194>
c0010068:	ba 00 00 0a 00       	mov    edx,0xa0000
c001006d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010071:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010075:	39 fa                	cmp    edx,edi
c0010077:	19 e8                	sbb    eax,ebp
c0010079:	0f 82 14 01 00 00    	jb     c0010193 <Phys::physicalMemorySetup(unsigned int)+0x228>
c001007f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010083:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010087:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c001008d:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010092:	83 d5 ff             	adc    ebp,0xffffffff
c0010095:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010099:	31 c0                	xor    eax,eax
c001009b:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c001009f:	39 fa                	cmp    edx,edi
c00100a1:	89 c1                	mov    ecx,eax
c00100a3:	19 e9                	sbb    ecx,ebp
c00100a5:	0f 83 43 ff ff ff    	jae    c000ffee <Phys::physicalMemorySetup(unsigned int)+0x83>
c00100ab:	be 00 00 08 00       	mov    esi,0x80000
c00100b0:	50                   	push   eax
c00100b1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00100b5:	57                   	push   edi
c00100b6:	56                   	push   esi
c00100b7:	68 f4 a9 02 c0       	push   0xc002a9f4
c00100bc:	e8 7a 29 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c00100c1:	5a                   	pop    edx
c00100c2:	59                   	pop    ecx
c00100c3:	57                   	push   edi
c00100c4:	56                   	push   esi
c00100c5:	e8 69 fe ff ff       	call   c000ff33 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00100ca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00100ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00100d2:	83 c4 0c             	add    esp,0xc
c00100d5:	0f ac d0 0c          	shrd   eax,edx,0xc
c00100d9:	03 05 34 e7 02 c0    	add    eax,DWORD PTR ds:0xc002e734
c00100df:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00100e6:	a3 34 e7 02 c0       	mov    ds:0xc002e734,eax
c00100eb:	52                   	push   edx
c00100ec:	50                   	push   eax
c00100ed:	68 b4 a9 02 c0       	push   0xc002a9b4
c00100f2:	e8 44 29 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c00100f7:	83 c4 10             	add    esp,0x10
c00100fa:	e9 ef fe ff ff       	jmp    c000ffee <Phys::physicalMemorySetup(unsigned int)+0x83>
c00100ff:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010103:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010107:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001010b:	39 ea                	cmp    edx,ebp
c001010d:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010111:	0f 82 d7 fe ff ff    	jb     c000ffee <Phys::physicalMemorySetup(unsigned int)+0x83>
c0010117:	ba ff 1f 00 00       	mov    edx,0x1fff
c001011c:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010120:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010124:	0f 83 c4 fe ff ff    	jae    c000ffee <Phys::physicalMemorySetup(unsigned int)+0x83>
c001012a:	39 ee                	cmp    esi,ebp
c001012c:	89 f8                	mov    eax,edi
c001012e:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010132:	0f 83 78 ff ff ff    	jae    c00100b0 <Phys::physicalMemorySetup(unsigned int)+0x145>
c0010138:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001013c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010140:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010144:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010148:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c001014c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010154:	e9 57 ff ff ff       	jmp    c00100b0 <Phys::physicalMemorySetup(unsigned int)+0x145>
c0010159:	83 ec 0c             	sub    esp,0xc
c001015c:	68 a6 a9 02 c0       	push   0xc002a9a6
c0010161:	e8 73 a2 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c0010166:	83 c4 10             	add    esp,0x10
c0010169:	bb 40 01 00 00       	mov    ebx,0x140
c001016e:	83 ec 08             	sub    esp,0x8
c0010171:	6a 00                	push   0x0
c0010173:	53                   	push   ebx
c0010174:	43                   	inc    ebx
c0010175:	e8 a6 fb ff ff       	call   c000fd20 <Phys::setPageState(unsigned long, bool)>
c001017a:	ff 05 34 e7 02 c0    	inc    DWORD PTR ds:0xc002e734
c0010180:	83 c4 10             	add    esp,0x10
c0010183:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010189:	75 e3                	jne    c001016e <Phys::physicalMemorySetup(unsigned int)+0x203>
c001018b:	83 c4 3c             	add    esp,0x3c
c001018e:	5b                   	pop    ebx
c001018f:	5e                   	pop    esi
c0010190:	5f                   	pop    edi
c0010191:	5d                   	pop    ebp
c0010192:	c3                   	ret    
c0010193:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c001019b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00101a3:	e9 d7 fe ff ff       	jmp    c001007f <Phys::physicalMemorySetup(unsigned int)+0x114>

c00101a8 <Pipe::isAtty()>:
c00101a8:	31 c0                	xor    eax,eax
c00101aa:	c3                   	ret    
c00101ab:	90                   	nop

c00101ac <Pipe::~Pipe()>:
c00101ac:	83 ec 0c             	sub    esp,0xc
c00101af:	ba 60 aa 02 c0       	mov    edx,0xc002aa60
c00101b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101b8:	89 10                	mov    DWORD PTR [eax],edx
c00101ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101be:	83 ec 0c             	sub    esp,0xc
c00101c1:	50                   	push   eax
c00101c2:	e8 41 12 00 00       	call   c0011408 <UnixFile::~UnixFile()>
c00101c7:	83 c4 10             	add    esp,0x10
c00101ca:	90                   	nop
c00101cb:	83 c4 0c             	add    esp,0xc
c00101ce:	c3                   	ret    
c00101cf:	90                   	nop

c00101d0 <Pipe::~Pipe()>:
c00101d0:	83 ec 0c             	sub    esp,0xc
c00101d3:	83 ec 0c             	sub    esp,0xc
c00101d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101da:	e8 cd ff ff ff       	call   c00101ac <Pipe::~Pipe()>
c00101df:	83 c4 10             	add    esp,0x10
c00101e2:	83 ec 08             	sub    esp,0x8
c00101e5:	6a 20                	push   0x20
c00101e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101eb:	e8 73 27 00 00       	call   c0012963 <operator delete(void*, unsigned long)>
c00101f0:	83 c4 10             	add    esp,0x10
c00101f3:	83 c4 0c             	add    esp,0xc
c00101f6:	c3                   	ret    
c00101f7:	90                   	nop

c00101f8 <Pipe::read(unsigned long long, void*, int*)>:
c00101f8:	55                   	push   ebp
c00101f9:	57                   	push   edi
c00101fa:	56                   	push   esi
c00101fb:	53                   	push   ebx
c00101fc:	83 ec 1c             	sub    esp,0x1c
c00101ff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010203:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010207:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001020b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001020e:	89 c8                	mov    eax,ecx
c0010210:	99                   	cdq    
c0010211:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010215:	74 24                	je     c001023b <Pipe::read(unsigned long long, void*, int*)+0x43>
c0010217:	39 f9                	cmp    ecx,edi
c0010219:	89 d1                	mov    ecx,edx
c001021b:	19 f1                	sbb    ecx,esi
c001021d:	73 1c                	jae    c001023b <Pipe::read(unsigned long long, void*, int*)+0x43>
c001021f:	fa                   	cli    
c0010220:	ff 05 e8 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe8
c0010226:	e8 40 dd 00 00       	call   c001df6b <schedule()>
c001022b:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c0010230:	48                   	dec    eax
c0010231:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c0010236:	75 d3                	jne    c001020b <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010238:	fb                   	sti    
c0010239:	eb d0                	jmp    c001020b <Pipe::read(unsigned long long, void*, int*)+0x13>
c001023b:	39 f8                	cmp    eax,edi
c001023d:	89 d1                	mov    ecx,edx
c001023f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010242:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010246:	19 f1                	sbb    ecx,esi
c0010248:	73 07                	jae    c0010251 <Pipe::read(unsigned long long, void*, int*)+0x59>
c001024a:	89 04 24             	mov    DWORD PTR [esp],eax
c001024d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010251:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0010254:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0010257:	29 f7                	sub    edi,esi
c0010259:	89 f8                	mov    eax,edi
c001025b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001025f:	99                   	cdq    
c0010260:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0010263:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010267:	19 d0                	sbb    eax,edx
c0010269:	73 07                	jae    c0010272 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c001026b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001026e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010272:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0010275:	89 ea                	mov    edx,ebp
c0010277:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c001027b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010280:	74 0d                	je     c001028f <Pipe::read(unsigned long long, void*, int*)+0x97>
c0010282:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010285:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0010289:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001028d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001028f:	85 d2                	test   edx,edx
c0010291:	74 11                	je     c00102a4 <Pipe::read(unsigned long long, void*, int*)+0xac>
c0010293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010297:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001029a:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001029e:	89 d1                	mov    ecx,edx
c00102a0:	89 c7                	mov    edi,eax
c00102a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00102a7:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00102aa:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00102ad:	99                   	cdq    
c00102ae:	89 f7                	mov    edi,esi
c00102b0:	03 04 24             	add    eax,DWORD PTR [esp]
c00102b3:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00102b7:	c1 ff 1f             	sar    edi,0x1f
c00102ba:	57                   	push   edi
c00102bb:	56                   	push   esi
c00102bc:	52                   	push   edx
c00102bd:	50                   	push   eax
c00102be:	e8 51 6c 01 00       	call   c0026f14 <__umoddi3>
c00102c3:	83 c4 10             	add    esp,0x10
c00102c6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00102c9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00102ce:	75 10                	jne    c00102e0 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c00102d0:	83 ec 0c             	sub    esp,0xc
c00102d3:	68 1d aa 02 c0       	push   0xc002aa1d
c00102d8:	e8 fc a0 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c00102dd:	83 c4 10             	add    esp,0x10
c00102e0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00102e4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00102e7:	89 10                	mov    DWORD PTR [eax],edx
c00102e9:	83 c4 1c             	add    esp,0x1c
c00102ec:	31 c0                	xor    eax,eax
c00102ee:	5b                   	pop    ebx
c00102ef:	5e                   	pop    esi
c00102f0:	5f                   	pop    edi
c00102f1:	5d                   	pop    ebp
c00102f2:	c3                   	ret    
c00102f3:	90                   	nop

c00102f4 <Pipe::write(unsigned long long, void*, int*)>:
c00102f4:	55                   	push   ebp
c00102f5:	57                   	push   edi
c00102f6:	56                   	push   esi
c00102f7:	53                   	push   ebx
c00102f8:	83 ec 1c             	sub    esp,0x1c
c00102fb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00102ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010303:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0010306:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001030a:	89 04 24             	mov    DWORD PTR [esp],eax
c001030d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010311:	89 d8                	mov    eax,ebx
c0010313:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010316:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001031a:	89 d6                	mov    esi,edx
c001031c:	89 d7                	mov    edi,edx
c001031e:	c1 ff 1f             	sar    edi,0x1f
c0010321:	03 34 24             	add    esi,DWORD PTR [esp]
c0010324:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0010328:	c1 f8 1f             	sar    eax,0x1f
c001032b:	39 f3                	cmp    ebx,esi
c001032d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010331:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010335:	19 f8                	sbb    eax,edi
c0010337:	b8 01 00 00 00       	mov    eax,0x1
c001033c:	72 6e                	jb     c00103ac <Pipe::write(unsigned long long, void*, int*)+0xb8>
c001033e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010341:	01 d0                	add    eax,edx
c0010343:	99                   	cdq    
c0010344:	f7 fb                	idiv   ebx
c0010346:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001034a:	29 d3                	sub    ebx,edx
c001034c:	89 d7                	mov    edi,edx
c001034e:	89 de                	mov    esi,ebx
c0010350:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010353:	c1 fb 1f             	sar    ebx,0x1f
c0010356:	39 f2                	cmp    edx,esi
c0010358:	19 d8                	sbb    eax,ebx
c001035a:	b8 00 00 00 00       	mov    eax,0x0
c001035f:	72 04                	jb     c0010365 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0010361:	89 d0                	mov    eax,edx
c0010363:	29 f0                	sub    eax,esi
c0010365:	89 d3                	mov    ebx,edx
c0010367:	29 c3                	sub    ebx,eax
c0010369:	74 0b                	je     c0010376 <Pipe::write(unsigned long long, void*, int*)+0x82>
c001036b:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001036e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010372:	89 d9                	mov    ecx,ebx
c0010374:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010376:	85 c0                	test   eax,eax
c0010378:	74 0d                	je     c0010387 <Pipe::write(unsigned long long, void*, int*)+0x93>
c001037a:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001037e:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0010381:	89 de                	mov    esi,ebx
c0010383:	89 c1                	mov    ecx,eax
c0010385:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010387:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c001038a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001038f:	75 10                	jne    c00103a1 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0010391:	83 ec 0c             	sub    esp,0xc
c0010394:	68 39 aa 02 c0       	push   0xc002aa39
c0010399:	e8 3b a0 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c001039e:	83 c4 10             	add    esp,0x10
c00103a1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103a5:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00103a8:	89 08                	mov    DWORD PTR [eax],ecx
c00103aa:	31 c0                	xor    eax,eax
c00103ac:	83 c4 1c             	add    esp,0x1c
c00103af:	5b                   	pop    ebx
c00103b0:	5e                   	pop    esi
c00103b1:	5f                   	pop    edi
c00103b2:	5d                   	pop    ebp
c00103b3:	c3                   	ret    

c00103b4 <Pipe::Pipe(int)>:
c00103b4:	83 ec 0c             	sub    esp,0xc
c00103b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103bb:	83 ec 08             	sub    esp,0x8
c00103be:	6a 00                	push   0x0
c00103c0:	50                   	push   eax
c00103c1:	e8 60 0e 00 00       	call   c0011226 <UnixFile::UnixFile(int)>
c00103c6:	83 c4 10             	add    esp,0x10
c00103c9:	ba 60 aa 02 c0       	mov    edx,0xc002aa60
c00103ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103d2:	89 10                	mov    DWORD PTR [eax],edx
c00103d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00103dc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00103df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103e3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00103ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103ee:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00103f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103f9:	83 ec 0c             	sub    esp,0xc
c00103fc:	50                   	push   eax
c00103fd:	e8 e1 f5 ff ff       	call   c000f9e3 <malloc>
c0010402:	83 c4 10             	add    esp,0x10
c0010405:	89 c2                	mov    edx,eax
c0010407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001040b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001040e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010412:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010416:	90                   	nop
c0010417:	83 c4 0c             	add    esp,0xc
c001041a:	c3                   	ret    
c001041b:	90                   	nop

c001041c <VgaText::isAtty()>:
c001041c:	b0 01                	mov    al,0x1
c001041e:	c3                   	ret    
c001041f:	90                   	nop

c0010420 <VgaText::~VgaText()>:
c0010420:	83 ec 0c             	sub    esp,0xc
c0010423:	ba e8 aa 02 c0       	mov    edx,0xc002aae8
c0010428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001042c:	89 10                	mov    DWORD PTR [eax],edx
c001042e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010432:	83 ec 0c             	sub    esp,0xc
c0010435:	50                   	push   eax
c0010436:	e8 cd 0f 00 00       	call   c0011408 <UnixFile::~UnixFile()>
c001043b:	83 c4 10             	add    esp,0x10
c001043e:	90                   	nop
c001043f:	83 c4 0c             	add    esp,0xc
c0010442:	c3                   	ret    
c0010443:	90                   	nop

c0010444 <VgaText::~VgaText()>:
c0010444:	83 ec 0c             	sub    esp,0xc
c0010447:	83 ec 0c             	sub    esp,0xc
c001044a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001044e:	e8 cd ff ff ff       	call   c0010420 <VgaText::~VgaText()>
c0010453:	83 c4 10             	add    esp,0x10
c0010456:	83 ec 08             	sub    esp,0x8
c0010459:	68 c4 02 00 00       	push   0x2c4
c001045e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010462:	e8 fc 24 00 00       	call   c0012963 <operator delete(void*, unsigned long)>
c0010467:	83 c4 10             	add    esp,0x10
c001046a:	83 c4 0c             	add    esp,0xc
c001046d:	c3                   	ret    

c001046e <VgaText::read(unsigned long long, void*, int*)>:
c001046e:	83 ec 10             	sub    esp,0x10
c0010471:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010475:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010479:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001047d:	e8 86 5a 00 00       	call   c0015f08 <readKeyboard(VgaText*, char*, unsigned long)>
c0010482:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010486:	89 02                	mov    DWORD PTR [edx],eax
c0010488:	31 c0                	xor    eax,eax
c001048a:	83 c4 1c             	add    esp,0x1c
c001048d:	c3                   	ret    

c001048e <setTerminalScrollLock(bool)>:
c001048e:	c3                   	ret    

c001048f <addToTerminalCycle(VgaText*)>:
c001048f:	8b 15 a0 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e7a0
c0010495:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010499:	85 d2                	test   edx,edx
c001049b:	75 09                	jne    c00104a6 <addToTerminalCycle(VgaText*)+0x17>
c001049d:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c00104a0:	a3 a0 e7 02 c0       	mov    ds:0xc002e7a0,eax
c00104a5:	c3                   	ret    
c00104a6:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c00104a9:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00104ac:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c00104af:	c3                   	ret    

c00104b0 <installVgaTextImplementation()>:
c00104b0:	83 ec 10             	sub    esp,0x10
c00104b3:	6a 20                	push   0x20
c00104b5:	6a 00                	push   0x0
c00104b7:	68 80 e7 02 c0       	push   0xc002e780
c00104bc:	e8 8f 02 ff ff       	call   c0000750 <memset>
c00104c1:	83 c4 1c             	add    esp,0x1c
c00104c4:	c3                   	ret    

c00104c5 <scrollTerminalScrollLock(int)>:
c00104c5:	c3                   	ret    

c00104c6 <VgaText::updateTitle()>:
c00104c6:	53                   	push   ebx
c00104c7:	31 c0                	xor    eax,eax
c00104c9:	83 ec 58             	sub    esp,0x58
c00104cc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00104d0:	89 e1                	mov    ecx,esp
c00104d2:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c00104d6:	40                   	inc    eax
c00104d7:	83 f8 50             	cmp    eax,0x50
c00104da:	75 f6                	jne    c00104d2 <VgaText::updateTitle()+0xc>
c00104dc:	31 c0                	xor    eax,eax
c00104de:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c00104e5:	84 db                	test   bl,bl
c00104e7:	74 06                	je     c00104ef <VgaText::updateTitle()+0x29>
c00104e9:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00104ec:	40                   	inc    eax
c00104ed:	eb ef                	jmp    c00104de <VgaText::updateTitle()+0x18>
c00104ef:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c00104f2:	85 c0                	test   eax,eax
c00104f4:	74 09                	je     c00104ff <VgaText::updateTitle()+0x39>
c00104f6:	53                   	push   ebx
c00104f7:	53                   	push   ebx
c00104f8:	51                   	push   ecx
c00104f9:	52                   	push   edx
c00104fa:	ff d0                	call   eax
c00104fc:	83 c4 10             	add    esp,0x10
c00104ff:	83 c4 58             	add    esp,0x58
c0010502:	5b                   	pop    ebx
c0010503:	c3                   	ret    

c0010504 <VgaText::load()>:
c0010504:	53                   	push   ebx
c0010505:	31 c0                	xor    eax,eax
c0010507:	83 ec 58             	sub    esp,0x58
c001050a:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001050e:	89 e2                	mov    edx,esp
c0010510:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010514:	40                   	inc    eax
c0010515:	83 f8 50             	cmp    eax,0x50
c0010518:	75 f6                	jne    c0010510 <VgaText::load()+0xc>
c001051a:	31 c0                	xor    eax,eax
c001051c:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c0010523:	84 c9                	test   cl,cl
c0010525:	74 06                	je     c001052d <VgaText::load()+0x29>
c0010527:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001052a:	40                   	inc    eax
c001052b:	eb ef                	jmp    c001051c <VgaText::load()+0x18>
c001052d:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c0010530:	85 c0                	test   eax,eax
c0010532:	74 09                	je     c001053d <VgaText::load()+0x39>
c0010534:	51                   	push   ecx
c0010535:	51                   	push   ecx
c0010536:	52                   	push   edx
c0010537:	53                   	push   ebx
c0010538:	ff d0                	call   eax
c001053a:	83 c4 10             	add    esp,0x10
c001053d:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c0010540:	85 c0                	test   eax,eax
c0010542:	74 09                	je     c001054d <VgaText::load()+0x49>
c0010544:	83 ec 0c             	sub    esp,0xc
c0010547:	53                   	push   ebx
c0010548:	ff d0                	call   eax
c001054a:	83 c4 10             	add    esp,0x10
c001054d:	83 c4 58             	add    esp,0x58
c0010550:	5b                   	pop    ebx
c0010551:	c3                   	ret    

c0010552 <VgaText::updateCursor()>:
c0010552:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010556:	39 05 a4 e7 02 c0    	cmp    DWORD PTR ds:0xc002e7a4,eax
c001055c:	75 09                	jne    c0010567 <VgaText::updateCursor()+0x15>
c001055e:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0010561:	85 c0                	test   eax,eax
c0010563:	74 02                	je     c0010567 <VgaText::updateCursor()+0x15>
c0010565:	ff e0                	jmp    eax
c0010567:	c3                   	ret    

c0010568 <VgaText::doANSI_SGR(int)>:
c0010568:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001056c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010570:	85 d2                	test   edx,edx
c0010572:	75 0b                	jne    c001057f <VgaText::doANSI_SGR(int)+0x17>
c0010574:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010577:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001057a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001057d:	eb 59                	jmp    c00105d8 <VgaText::doANSI_SGR(int)+0x70>
c001057f:	83 fa 07             	cmp    edx,0x7
c0010582:	75 0b                	jne    c001058f <VgaText::doANSI_SGR(int)+0x27>
c0010584:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010587:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c001058a:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c001058d:	eb 49                	jmp    c00105d8 <VgaText::doANSI_SGR(int)+0x70>
c001058f:	83 fa 1b             	cmp    edx,0x1b
c0010592:	74 e0                	je     c0010574 <VgaText::doANSI_SGR(int)+0xc>
c0010594:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010597:	83 f9 07             	cmp    ecx,0x7
c001059a:	77 09                	ja     c00105a5 <VgaText::doANSI_SGR(int)+0x3d>
c001059c:	8b 14 8d 40 d6 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd29c0]
c00105a3:	eb 20                	jmp    c00105c5 <VgaText::doANSI_SGR(int)+0x5d>
c00105a5:	8d 4a d8             	lea    ecx,[edx-0x28]
c00105a8:	83 f9 07             	cmp    ecx,0x7
c00105ab:	77 09                	ja     c00105b6 <VgaText::doANSI_SGR(int)+0x4e>
c00105ad:	8b 14 8d 40 d6 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd29c0]
c00105b4:	eb 22                	jmp    c00105d8 <VgaText::doANSI_SGR(int)+0x70>
c00105b6:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00105b9:	83 f9 07             	cmp    ecx,0x7
c00105bc:	77 0b                	ja     c00105c9 <VgaText::doANSI_SGR(int)+0x61>
c00105be:	8b 14 95 f8 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2b08]
c00105c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00105c8:	c3                   	ret    
c00105c9:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00105cc:	83 f9 07             	cmp    ecx,0x7
c00105cf:	77 0a                	ja     c00105db <VgaText::doANSI_SGR(int)+0x73>
c00105d1:	8b 14 95 d0 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2b30]
c00105d8:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00105db:	c3                   	ret    

c00105dc <VgaText::setDefaultBgColour(VgaColour)>:
c00105dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105e4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00105e7:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00105ea:	c3                   	ret    
c00105eb:	90                   	nop

c00105ec <VgaText::setDefaultFgColour(VgaColour)>:
c00105ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105f4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00105f7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00105fa:	c3                   	ret    
c00105fb:	90                   	nop

c00105fc <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00105fc:	53                   	push   ebx
c00105fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010601:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010605:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010609:	51                   	push   ecx
c001060a:	e8 cd ff ff ff       	call   c00105dc <VgaText::setDefaultBgColour(VgaColour)>
c001060f:	58                   	pop    eax
c0010610:	5a                   	pop    edx
c0010611:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010615:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010619:	5b                   	pop    ebx
c001061a:	eb d0                	jmp    c00105ec <VgaText::setDefaultFgColour(VgaColour)>

c001061c <VgaText::setTitleTextColour(VgaColour)>:
c001061c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010620:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010624:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010627:	e9 9a fe ff ff       	jmp    c00104c6 <VgaText::updateTitle()>

c001062c <VgaText::setTitleColour(VgaColour)>:
c001062c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010630:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010634:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010637:	e9 8a fe ff ff       	jmp    c00104c6 <VgaText::updateTitle()>

c001063c <VgaText::setTitle(char*)>:
c001063c:	53                   	push   ebx
c001063d:	83 ec 10             	sub    esp,0x10
c0010640:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010644:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010648:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c001064e:	50                   	push   eax
c001064f:	e8 b8 01 ff ff       	call   c000080c <strcpy>
c0010654:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010658:	83 c4 18             	add    esp,0x18
c001065b:	5b                   	pop    ebx
c001065c:	e9 65 fe ff ff       	jmp    c00104c6 <VgaText::updateTitle()>
c0010661:	90                   	nop

c0010662 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010662:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010666:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001066b:	83 e0 0f             	and    eax,0xf
c001066e:	c1 e2 04             	shl    edx,0x4
c0010671:	09 d0                	or     eax,edx
c0010673:	c3                   	ret    

c0010674 <VgaText::scrollScreen()>:
c0010674:	55                   	push   ebp
c0010675:	b9 01 00 00 00       	mov    ecx,0x1
c001067a:	57                   	push   edi
c001067b:	56                   	push   esi
c001067c:	53                   	push   ebx
c001067d:	83 ec 0c             	sub    esp,0xc
c0010680:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010684:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c001068a:	31 ff                	xor    edi,edi
c001068c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001068f:	83 f9 17             	cmp    ecx,0x17
c0010692:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0010695:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c001069c:	75 27                	jne    c00106c5 <VgaText::scrollScreen()+0x51>
c001069e:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00106a1:	01 f5                	add    ebp,esi
c00106a3:	f7 c7 01 00 00 00    	test   edi,0x1
c00106a9:	74 16                	je     c00106c1 <VgaText::scrollScreen()+0x4d>
c00106ab:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00106af:	50                   	push   eax
c00106b0:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00106b4:	50                   	push   eax
c00106b5:	e8 a8 ff ff ff       	call   c0010662 <VgaText::combineColours(unsigned char, unsigned char)>
c00106ba:	5a                   	pop    edx
c00106bb:	5a                   	pop    edx
c00106bc:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00106bf:	eb 04                	jmp    c00106c5 <VgaText::scrollScreen()+0x51>
c00106c1:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00106c5:	47                   	inc    edi
c00106c6:	46                   	inc    esi
c00106c7:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00106cd:	75 bd                	jne    c001068c <VgaText::scrollScreen()+0x18>
c00106cf:	41                   	inc    ecx
c00106d0:	83 f9 18             	cmp    ecx,0x18
c00106d3:	75 af                	jne    c0010684 <VgaText::scrollScreen()+0x10>
c00106d5:	39 1d a4 e7 02 c0    	cmp    DWORD PTR ds:0xc002e7a4,ebx
c00106db:	75 1b                	jne    c00106f8 <VgaText::scrollScreen()+0x84>
c00106dd:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00106e1:	74 05                	je     c00106e8 <VgaText::scrollScreen()+0x74>
c00106e3:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00106e6:	eb 10                	jmp    c00106f8 <VgaText::scrollScreen()+0x84>
c00106e8:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00106eb:	85 c0                	test   eax,eax
c00106ed:	74 09                	je     c00106f8 <VgaText::scrollScreen()+0x84>
c00106ef:	83 ec 0c             	sub    esp,0xc
c00106f2:	53                   	push   ebx
c00106f3:	ff d0                	call   eax
c00106f5:	83 c4 10             	add    esp,0x10
c00106f8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00106fc:	83 c4 0c             	add    esp,0xc
c00106ff:	5b                   	pop    ebx
c0010700:	5e                   	pop    esi
c0010701:	5f                   	pop    edi
c0010702:	5d                   	pop    ebp
c0010703:	e9 4a fe ff ff       	jmp    c0010552 <VgaText::updateCursor()>

c0010708 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010708:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001070d:	c1 e0 08             	shl    eax,0x8
c0010710:	89 c2                	mov    edx,eax
c0010712:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010717:	09 d0                	or     eax,edx
c0010719:	c3                   	ret    

c001071a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001071a:	56                   	push   esi
c001071b:	53                   	push   ebx
c001071c:	51                   	push   ecx
c001071d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010721:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010726:	50                   	push   eax
c0010727:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001072c:	50                   	push   eax
c001072d:	e8 30 ff ff ff       	call   c0010662 <VgaText::combineColours(unsigned char, unsigned char)>
c0010732:	5b                   	pop    ebx
c0010733:	0f b6 c0             	movzx  eax,al
c0010736:	5e                   	pop    esi
c0010737:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001073c:	50                   	push   eax
c001073d:	53                   	push   ebx
c001073e:	e8 c5 ff ff ff       	call   c0010708 <VgaText::combineCharAndColour(char, unsigned char)>
c0010743:	5a                   	pop    edx
c0010744:	5e                   	pop    esi
c0010745:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c0010748:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001074e:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010752:	0f b7 d2             	movzx  edx,dx
c0010755:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c0010759:	39 0d a4 e7 02 c0    	cmp    DWORD PTR ds:0xc002e7a4,ecx
c001075f:	75 10                	jne    c0010771 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010761:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c0010764:	85 c0                	test   eax,eax
c0010766:	74 09                	je     c0010771 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010768:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001076c:	5a                   	pop    edx
c001076d:	5b                   	pop    ebx
c001076e:	5e                   	pop    esi
c001076f:	ff e0                	jmp    eax
c0010771:	58                   	pop    eax
c0010772:	5b                   	pop    ebx
c0010773:	5e                   	pop    esi
c0010774:	c3                   	ret    
c0010775:	90                   	nop

c0010776 <VgaText::getCursorX()>:
c0010776:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001077a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001077d:	c3                   	ret    

c001077e <VgaText::getCursorY()>:
c001077e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010782:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0010785:	c3                   	ret    

c0010786 <VgaText::setCursor(int, int)>:
c0010786:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001078a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001078e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010791:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010795:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010798:	e9 b5 fd ff ff       	jmp    c0010552 <VgaText::updateCursor()>

c001079d <setActiveTerminal(VgaText*)>:
c001079d:	53                   	push   ebx
c001079e:	83 ec 08             	sub    esp,0x8
c00107a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107a5:	85 db                	test   ebx,ebx
c00107a7:	75 11                	jne    c00107ba <setActiveTerminal(VgaText*)+0x1d>
c00107a9:	c7 44 24 10 74 aa 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aa74
c00107b1:	83 c4 08             	add    esp,0x8
c00107b4:	5b                   	pop    ebx
c00107b5:	e9 1f 9c 00 00       	jmp    c001a3d9 <Krnl::panic(char const*)>
c00107ba:	a1 a4 e7 02 c0       	mov    eax,ds:0xc002e7a4
c00107bf:	85 c0                	test   eax,eax
c00107c1:	74 0c                	je     c00107cf <setActiveTerminal(VgaText*)+0x32>
c00107c3:	83 ec 0c             	sub    esp,0xc
c00107c6:	50                   	push   eax
c00107c7:	e8 86 fd ff ff       	call   c0010552 <VgaText::updateCursor()>
c00107cc:	83 c4 10             	add    esp,0x10
c00107cf:	89 1d a4 e7 02 c0    	mov    DWORD PTR ds:0xc002e7a4,ebx
c00107d5:	51                   	push   ecx
c00107d6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00107d9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00107dc:	53                   	push   ebx
c00107dd:	e8 a4 ff ff ff       	call   c0010786 <VgaText::setCursor(int, int)>
c00107e2:	83 c4 10             	add    esp,0x10
c00107e5:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00107e9:	75 07                	jne    c00107f2 <setActiveTerminal(VgaText*)+0x55>
c00107eb:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c00107f2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00107f6:	83 c4 08             	add    esp,0x8
c00107f9:	5b                   	pop    ebx
c00107fa:	e9 05 fd ff ff       	jmp    c0010504 <VgaText::load()>

c00107ff <doTerminalCycle()>:
c00107ff:	83 ec 18             	sub    esp,0x18
c0010802:	a1 a0 e7 02 c0       	mov    eax,ds:0xc002e7a0
c0010807:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001080a:	50                   	push   eax
c001080b:	a3 a0 e7 02 c0       	mov    ds:0xc002e7a0,eax
c0010810:	e8 88 ff ff ff       	call   c001079d <setActiveTerminal(VgaText*)>
c0010815:	83 c4 1c             	add    esp,0x1c
c0010818:	c3                   	ret    
c0010819:	90                   	nop

c001081a <VgaText::setCursorX(int)>:
c001081a:	83 ec 10             	sub    esp,0x10
c001081d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010821:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0010824:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010828:	50                   	push   eax
c0010829:	e8 58 ff ff ff       	call   c0010786 <VgaText::setCursor(int, int)>
c001082e:	83 c4 1c             	add    esp,0x1c
c0010831:	c3                   	ret    

c0010832 <VgaText::setCursorY(int)>:
c0010832:	83 ec 10             	sub    esp,0x10
c0010835:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010839:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001083d:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010840:	50                   	push   eax
c0010841:	e8 40 ff ff ff       	call   c0010786 <VgaText::setCursor(int, int)>
c0010846:	83 c4 1c             	add    esp,0x1c
c0010849:	c3                   	ret    

c001084a <VgaText::incrementCursor(bool)>:
c001084a:	56                   	push   esi
c001084b:	53                   	push   ebx
c001084c:	51                   	push   ecx
c001084d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010851:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010855:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0010858:	40                   	inc    eax
c0010859:	83 f8 50             	cmp    eax,0x50
c001085c:	74 05                	je     c0010863 <VgaText::incrementCursor(bool)+0x19>
c001085e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010861:	eb 24                	jmp    c0010887 <VgaText::incrementCursor(bool)+0x3d>
c0010863:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010866:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001086d:	8d 50 01             	lea    edx,[eax+0x1]
c0010870:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010873:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010876:	75 0f                	jne    c0010887 <VgaText::incrementCursor(bool)+0x3d>
c0010878:	83 ec 0c             	sub    esp,0xc
c001087b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001087e:	53                   	push   ebx
c001087f:	e8 f0 fd ff ff       	call   c0010674 <VgaText::scrollScreen()>
c0010884:	83 c4 10             	add    esp,0x10
c0010887:	89 f0                	mov    eax,esi
c0010889:	84 c0                	test   al,al
c001088b:	74 0c                	je     c0010899 <VgaText::incrementCursor(bool)+0x4f>
c001088d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010891:	5a                   	pop    edx
c0010892:	5b                   	pop    ebx
c0010893:	5e                   	pop    esi
c0010894:	e9 b9 fc ff ff       	jmp    c0010552 <VgaText::updateCursor()>
c0010899:	58                   	pop    eax
c001089a:	5b                   	pop    ebx
c001089b:	5e                   	pop    esi
c001089c:	c3                   	ret    
c001089d:	90                   	nop

c001089e <VgaText::decrementCursor(bool)>:
c001089e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00108a2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00108a6:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00108a9:	85 c0                	test   eax,eax
c00108ab:	74 04                	je     c00108b1 <VgaText::decrementCursor(bool)+0x13>
c00108ad:	48                   	dec    eax
c00108ae:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00108b1:	84 c9                	test   cl,cl
c00108b3:	74 09                	je     c00108be <VgaText::decrementCursor(bool)+0x20>
c00108b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00108b9:	e9 94 fc ff ff       	jmp    c0010552 <VgaText::updateCursor()>
c00108be:	c3                   	ret    
c00108bf:	90                   	nop

c00108c0 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00108c0:	53                   	push   ebx
c00108c1:	83 ec 08             	sub    esp,0x8
c00108c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00108d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00108d4:	3c 07                	cmp    al,0x7
c00108d6:	75 2a                	jne    c0010902 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c00108d8:	a1 58 e8 02 c0       	mov    eax,ds:0xc002e858
c00108dd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00108e5:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00108ed:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00108f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00108f9:	83 c4 08             	add    esp,0x8
c00108fc:	5b                   	pop    ebx
c00108fd:	e9 46 2f 00 00       	jmp    c0013848 <Buzzer::beep(int, int, bool)>
c0010902:	3c 0d                	cmp    al,0xd
c0010904:	75 09                	jne    c001090f <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010906:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001090d:	eb 2c                	jmp    c001093b <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c001090f:	3c 0a                	cmp    al,0xa
c0010911:	75 31                	jne    c0010944 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010913:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010916:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001091d:	8d 50 01             	lea    edx,[eax+0x1]
c0010920:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010923:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010926:	75 0f                	jne    c0010937 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010928:	83 ec 0c             	sub    esp,0xc
c001092b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001092e:	53                   	push   ebx
c001092f:	e8 40 fd ff ff       	call   c0010674 <VgaText::scrollScreen()>
c0010934:	83 c4 10             	add    esp,0x10
c0010937:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001093b:	83 c4 08             	add    esp,0x8
c001093e:	5b                   	pop    ebx
c001093f:	e9 0e fc ff ff       	jmp    c0010552 <VgaText::updateCursor()>
c0010944:	3c 08                	cmp    al,0x8
c0010946:	75 25                	jne    c001096d <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010948:	50                   	push   eax
c0010949:	50                   	push   eax
c001094a:	6a 01                	push   0x1
c001094c:	53                   	push   ebx
c001094d:	e8 4c ff ff ff       	call   c001089e <VgaText::decrementCursor(bool)>
c0010952:	5a                   	pop    edx
c0010953:	59                   	pop    ecx
c0010954:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010957:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001095a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001095d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010960:	6a 20                	push   0x20
c0010962:	53                   	push   ebx
c0010963:	e8 b2 fd ff ff       	call   c001071a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010968:	83 c4 28             	add    esp,0x28
c001096b:	5b                   	pop    ebx
c001096c:	c3                   	ret    
c001096d:	83 ec 08             	sub    esp,0x8
c0010970:	0f be c0             	movsx  eax,al
c0010973:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010976:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010979:	51                   	push   ecx
c001097a:	52                   	push   edx
c001097b:	50                   	push   eax
c001097c:	53                   	push   ebx
c001097d:	e8 98 fd ff ff       	call   c001071a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010982:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010986:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001098e:	83 c4 28             	add    esp,0x28
c0010991:	5b                   	pop    ebx
c0010992:	e9 b3 fe ff ff       	jmp    c001084a <VgaText::incrementCursor(bool)>
c0010997:	90                   	nop

c0010998 <VgaText::doUpdate()>:
c0010998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001099c:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c001099f:	85 c0                	test   eax,eax
c00109a1:	74 02                	je     c00109a5 <VgaText::doUpdate()+0xd>
c00109a3:	ff e0                	jmp    eax
c00109a5:	c3                   	ret    

c00109a6 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00109a6:	55                   	push   ebp
c00109a7:	31 ed                	xor    ebp,ebp
c00109a9:	57                   	push   edi
c00109aa:	56                   	push   esi
c00109ab:	53                   	push   ebx
c00109ac:	83 ec 1c             	sub    esp,0x1c
c00109af:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00109b3:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00109b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00109bf:	50                   	push   eax
c00109c0:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00109c5:	50                   	push   eax
c00109c6:	e8 97 fc ff ff       	call   c0010662 <VgaText::combineColours(unsigned char, unsigned char)>
c00109cb:	59                   	pop    ecx
c00109cc:	0f b6 c0             	movzx  eax,al
c00109cf:	5e                   	pop    esi
c00109d0:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00109d5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00109d9:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00109dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00109e0:	0f b7 f6             	movzx  esi,si
c00109e3:	01 f6                	add    esi,esi
c00109e5:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00109e8:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00109eb:	84 c0                	test   al,al
c00109ed:	0f 84 fd 00 00 00    	je     c0010af0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c00109f3:	3c 0d                	cmp    al,0xd
c00109f5:	75 0c                	jne    c0010a03 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c00109f7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00109fe:	e9 e7 00 00 00       	jmp    c0010aea <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010a03:	3c 0a                	cmp    al,0xa
c0010a05:	75 47                	jne    c0010a4e <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010a07:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010a0a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010a11:	8d 48 01             	lea    ecx,[eax+0x1]
c0010a14:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010a17:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010a1a:	75 0f                	jne    c0010a2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010a1c:	83 ec 0c             	sub    esp,0xc
c0010a1f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010a22:	53                   	push   ebx
c0010a23:	e8 4c fc ff ff       	call   c0010674 <VgaText::scrollScreen()>
c0010a28:	83 c4 10             	add    esp,0x10
c0010a2b:	83 ec 0c             	sub    esp,0xc
c0010a2e:	31 ed                	xor    ebp,ebp
c0010a30:	53                   	push   ebx
c0010a31:	e8 1c fb ff ff       	call   c0010552 <VgaText::updateCursor()>
c0010a36:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010a3b:	83 c4 10             	add    esp,0x10
c0010a3e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010a41:	0f b7 f6             	movzx  esi,si
c0010a44:	01 f6                	add    esi,esi
c0010a46:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010a49:	e9 9c 00 00 00       	jmp    c0010aea <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010a4e:	3c 08                	cmp    al,0x8
c0010a50:	75 35                	jne    c0010a87 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010a52:	56                   	push   esi
c0010a53:	56                   	push   esi
c0010a54:	6a 01                	push   0x1
c0010a56:	53                   	push   ebx
c0010a57:	e8 42 fe ff ff       	call   c001089e <VgaText::decrementCursor(bool)>
c0010a5c:	58                   	pop    eax
c0010a5d:	5a                   	pop    edx
c0010a5e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010a61:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010a64:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010a67:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010a6a:	6a 20                	push   0x20
c0010a6c:	53                   	push   ebx
c0010a6d:	e8 a8 fc ff ff       	call   c001071a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a72:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010a77:	83 c4 20             	add    esp,0x20
c0010a7a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010a7d:	0f b7 f6             	movzx  esi,si
c0010a80:	01 f6                	add    esi,esi
c0010a82:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010a85:	eb 63                	jmp    c0010aea <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010a87:	51                   	push   ecx
c0010a88:	51                   	push   ecx
c0010a89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010a8d:	50                   	push   eax
c0010a8e:	e8 75 fc ff ff       	call   c0010708 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a93:	83 c4 10             	add    esp,0x10
c0010a96:	66 89 06             	mov    WORD PTR [esi],ax
c0010a99:	39 1d a4 e7 02 c0    	cmp    DWORD PTR ds:0xc002e7a4,ebx
c0010a9f:	75 21                	jne    c0010ac2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010aa1:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010aa4:	85 c0                	test   eax,eax
c0010aa6:	74 1a                	je     c0010ac2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010aa8:	52                   	push   edx
c0010aa9:	52                   	push   edx
c0010aaa:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010aad:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010ab0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010ab4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010ab8:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010abb:	51                   	push   ecx
c0010abc:	53                   	push   ebx
c0010abd:	ff d0                	call   eax
c0010abf:	83 c4 20             	add    esp,0x20
c0010ac2:	83 c6 02             	add    esi,0x2
c0010ac5:	50                   	push   eax
c0010ac6:	50                   	push   eax
c0010ac7:	6a 00                	push   0x0
c0010ac9:	53                   	push   ebx
c0010aca:	e8 7b fd ff ff       	call   c001084a <VgaText::incrementCursor(bool)>
c0010acf:	83 c4 10             	add    esp,0x10
c0010ad2:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010ad6:	75 0d                	jne    c0010ae5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010ad8:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010add:	0f b7 f6             	movzx  esi,si
c0010ae0:	01 f6                	add    esi,esi
c0010ae2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010ae5:	bd 01 00 00 00       	mov    ebp,0x1
c0010aea:	47                   	inc    edi
c0010aeb:	e9 f8 fe ff ff       	jmp    c00109e8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010af0:	83 ec 0c             	sub    esp,0xc
c0010af3:	53                   	push   ebx
c0010af4:	e8 59 fa ff ff       	call   c0010552 <VgaText::updateCursor()>
c0010af9:	83 c4 10             	add    esp,0x10
c0010afc:	89 e8                	mov    eax,ebp
c0010afe:	84 c0                	test   al,al
c0010b00:	74 0c                	je     c0010b0e <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010b02:	83 ec 0c             	sub    esp,0xc
c0010b05:	53                   	push   ebx
c0010b06:	e8 8d fe ff ff       	call   c0010998 <VgaText::doUpdate()>
c0010b0b:	83 c4 10             	add    esp,0x10
c0010b0e:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010b15:	83 c4 1c             	add    esp,0x1c
c0010b18:	5b                   	pop    ebx
c0010b19:	5e                   	pop    esi
c0010b1a:	5f                   	pop    edi
c0010b1b:	5d                   	pop    ebp
c0010b1c:	c3                   	ret    
c0010b1d:	90                   	nop

c0010b1e <VgaText::clearScreen()>:
c0010b1e:	57                   	push   edi
c0010b1f:	56                   	push   esi
c0010b20:	31 f6                	xor    esi,esi
c0010b22:	53                   	push   ebx
c0010b23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b27:	52                   	push   edx
c0010b28:	6a 00                	push   0x0
c0010b2a:	6a 00                	push   0x0
c0010b2c:	53                   	push   ebx
c0010b2d:	e8 54 fc ff ff       	call   c0010786 <VgaText::setCursor(int, int)>
c0010b32:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010b39:	83 c4 10             	add    esp,0x10
c0010b3c:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010b3f:	7e 20                	jle    c0010b61 <VgaText::clearScreen()+0x43>
c0010b41:	31 ff                	xor    edi,edi
c0010b43:	50                   	push   eax
c0010b44:	50                   	push   eax
c0010b45:	56                   	push   esi
c0010b46:	57                   	push   edi
c0010b47:	47                   	inc    edi
c0010b48:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010b4b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010b4e:	6a 20                	push   0x20
c0010b50:	53                   	push   ebx
c0010b51:	e8 c4 fb ff ff       	call   c001071a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010b56:	83 c4 20             	add    esp,0x20
c0010b59:	83 ff 50             	cmp    edi,0x50
c0010b5c:	75 e5                	jne    c0010b43 <VgaText::clearScreen()+0x25>
c0010b5e:	46                   	inc    esi
c0010b5f:	eb db                	jmp    c0010b3c <VgaText::clearScreen()+0x1e>
c0010b61:	83 ec 0c             	sub    esp,0xc
c0010b64:	53                   	push   ebx
c0010b65:	e8 2e fe ff ff       	call   c0010998 <VgaText::doUpdate()>
c0010b6a:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010b71:	83 c4 10             	add    esp,0x10
c0010b74:	5b                   	pop    ebx
c0010b75:	5e                   	pop    esi
c0010b76:	5f                   	pop    edi
c0010b77:	c3                   	ret    

c0010b78 <VgaText::putchar(char)>:
c0010b78:	56                   	push   esi
c0010b79:	53                   	push   ebx
c0010b7a:	83 ec 14             	sub    esp,0x14
c0010b7d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010b81:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010b85:	3c 5b                	cmp    al,0x5b
c0010b87:	75 18                	jne    c0010ba1 <VgaText::putchar(char)+0x29>
c0010b89:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010b8d:	74 1f                	je     c0010bae <VgaText::putchar(char)+0x36>
c0010b8f:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010b95:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010b9c:	e9 bd 00 00 00       	jmp    c0010c5e <VgaText::putchar(char)+0xe6>
c0010ba1:	3c 1b                	cmp    al,0x1b
c0010ba3:	75 09                	jne    c0010bae <VgaText::putchar(char)+0x36>
c0010ba5:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010ba9:	e9 b0 00 00 00       	jmp    c0010c5e <VgaText::putchar(char)+0xe6>
c0010bae:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010bb1:	84 c9                	test   cl,cl
c0010bb3:	0f 84 92 00 00 00    	je     c0010c4b <VgaText::putchar(char)+0xd3>
c0010bb9:	8d 50 c0             	lea    edx,[eax-0x40]
c0010bbc:	80 fa 3e             	cmp    dl,0x3e
c0010bbf:	77 76                	ja     c0010c37 <VgaText::putchar(char)+0xbf>
c0010bc1:	3c 6d                	cmp    al,0x6d
c0010bc3:	75 47                	jne    c0010c0c <VgaText::putchar(char)+0x94>
c0010bc5:	31 f6                	xor    esi,esi
c0010bc7:	31 d2                	xor    edx,edx
c0010bc9:	31 c0                	xor    eax,eax
c0010bcb:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010bce:	7e 2d                	jle    c0010bfd <VgaText::putchar(char)+0x85>
c0010bd0:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010bd5:	80 fa 3b             	cmp    dl,0x3b
c0010bd8:	75 17                	jne    c0010bf1 <VgaText::putchar(char)+0x79>
c0010bda:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010bde:	50                   	push   eax
c0010bdf:	53                   	push   ebx
c0010be0:	e8 83 f9 ff ff       	call   c0010568 <VgaText::doANSI_SGR(int)>
c0010be5:	59                   	pop    ecx
c0010be6:	31 d2                	xor    edx,edx
c0010be8:	58                   	pop    eax
c0010be9:	31 c0                	xor    eax,eax
c0010beb:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010bef:	eb 09                	jmp    c0010bfa <VgaText::putchar(char)+0x82>
c0010bf1:	6b c0 0a             	imul   eax,eax,0xa
c0010bf4:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010bf8:	88 ca                	mov    dl,cl
c0010bfa:	46                   	inc    esi
c0010bfb:	eb ce                	jmp    c0010bcb <VgaText::putchar(char)+0x53>
c0010bfd:	84 d2                	test   dl,dl
c0010bff:	74 2e                	je     c0010c2f <VgaText::putchar(char)+0xb7>
c0010c01:	50                   	push   eax
c0010c02:	53                   	push   ebx
c0010c03:	e8 60 f9 ff ff       	call   c0010568 <VgaText::doANSI_SGR(int)>
c0010c08:	58                   	pop    eax
c0010c09:	5a                   	pop    edx
c0010c0a:	eb 23                	jmp    c0010c2f <VgaText::putchar(char)+0xb7>
c0010c0c:	3c 4a                	cmp    al,0x4a
c0010c0e:	75 1f                	jne    c0010c2f <VgaText::putchar(char)+0xb7>
c0010c10:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010c14:	75 19                	jne    c0010c2f <VgaText::putchar(char)+0xb7>
c0010c16:	83 ec 0c             	sub    esp,0xc
c0010c19:	53                   	push   ebx
c0010c1a:	e8 ff fe ff ff       	call   c0010b1e <VgaText::clearScreen()>
c0010c1f:	83 c4 0c             	add    esp,0xc
c0010c22:	6a 00                	push   0x0
c0010c24:	6a 00                	push   0x0
c0010c26:	53                   	push   ebx
c0010c27:	e8 5a fb ff ff       	call   c0010786 <VgaText::setCursor(int, int)>
c0010c2c:	83 c4 10             	add    esp,0x10
c0010c2f:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010c35:	eb 27                	jmp    c0010c5e <VgaText::putchar(char)+0xe6>
c0010c37:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010c3a:	83 fa 0e             	cmp    edx,0xe
c0010c3d:	7f 1f                	jg     c0010c5e <VgaText::putchar(char)+0xe6>
c0010c3f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010c42:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010c45:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010c49:	eb 13                	jmp    c0010c5e <VgaText::putchar(char)+0xe6>
c0010c4b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010c4e:	0f be c0             	movsx  eax,al
c0010c51:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010c54:	50                   	push   eax
c0010c55:	53                   	push   ebx
c0010c56:	e8 65 fc ff ff       	call   c00108c0 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010c5b:	83 c4 10             	add    esp,0x10
c0010c5e:	83 c4 14             	add    esp,0x14
c0010c61:	5b                   	pop    ebx
c0010c62:	5e                   	pop    esi
c0010c63:	c3                   	ret    

c0010c64 <VgaText::putx(unsigned int)>:
c0010c64:	57                   	push   edi
c0010c65:	b9 11 00 00 00       	mov    ecx,0x11
c0010c6a:	56                   	push   esi
c0010c6b:	be 82 aa 02 c0       	mov    esi,0xc002aa82
c0010c70:	53                   	push   ebx
c0010c71:	83 ec 20             	sub    esp,0x20
c0010c74:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010c78:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010c7c:	fc                   	cld    
c0010c7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c7f:	be 08 00 00 00       	mov    esi,0x8
c0010c84:	50                   	push   eax
c0010c85:	50                   	push   eax
c0010c86:	89 d8                	mov    eax,ebx
c0010c88:	c1 e3 04             	shl    ebx,0x4
c0010c8b:	c1 e8 1c             	shr    eax,0x1c
c0010c8e:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010c93:	50                   	push   eax
c0010c94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010c98:	e8 db fe ff ff       	call   c0010b78 <VgaText::putchar(char)>
c0010c9d:	83 c4 10             	add    esp,0x10
c0010ca0:	4e                   	dec    esi
c0010ca1:	75 e1                	jne    c0010c84 <VgaText::putx(unsigned int)+0x20>
c0010ca3:	83 c4 20             	add    esp,0x20
c0010ca6:	5b                   	pop    ebx
c0010ca7:	5e                   	pop    esi
c0010ca8:	5f                   	pop    edi
c0010ca9:	c3                   	ret    

c0010caa <VgaText::puts(char const*)>:
c0010caa:	53                   	push   ebx
c0010cab:	83 ec 08             	sub    esp,0x8
c0010cae:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010cb2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010cb5:	84 c0                	test   al,al
c0010cb7:	74 12                	je     c0010ccb <VgaText::puts(char const*)+0x21>
c0010cb9:	43                   	inc    ebx
c0010cba:	51                   	push   ecx
c0010cbb:	51                   	push   ecx
c0010cbc:	50                   	push   eax
c0010cbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010cc1:	e8 b2 fe ff ff       	call   c0010b78 <VgaText::putchar(char)>
c0010cc6:	83 c4 10             	add    esp,0x10
c0010cc9:	eb e7                	jmp    c0010cb2 <VgaText::puts(char const*)+0x8>
c0010ccb:	83 c4 08             	add    esp,0x8
c0010cce:	5b                   	pop    ebx
c0010ccf:	c3                   	ret    

c0010cd0 <VgaText::VgaText(char const*)>:
c0010cd0:	57                   	push   edi
c0010cd1:	56                   	push   esi
c0010cd2:	53                   	push   ebx
c0010cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cd7:	83 ec 08             	sub    esp,0x8
c0010cda:	6a 00                	push   0x0
c0010cdc:	50                   	push   eax
c0010cdd:	e8 44 05 00 00       	call   c0011226 <UnixFile::UnixFile(int)>
c0010ce2:	83 c4 10             	add    esp,0x10
c0010ce5:	ba e8 aa 02 c0       	mov    edx,0xc002aae8
c0010cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cee:	89 10                	mov    DWORD PTR [eax],edx
c0010cf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cf4:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010cfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cff:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0010d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d0a:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0010d0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d12:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0010d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d1a:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0010d21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d25:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0010d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d30:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0010d37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d3b:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0010d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d46:	8d 50 60             	lea    edx,[eax+0x60]
c0010d49:	bb 80 e7 02 c0       	mov    ebx,0xc002e780
c0010d4e:	b8 08 00 00 00       	mov    eax,0x8
c0010d53:	fc                   	cld    
c0010d54:	89 d7                	mov    edi,edx
c0010d56:	89 de                	mov    esi,ebx
c0010d58:	89 c1                	mov    ecx,eax
c0010d5a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d60:	05 82 00 00 00       	add    eax,0x82
c0010d65:	83 ec 08             	sub    esp,0x8
c0010d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d6c:	50                   	push   eax
c0010d6d:	e8 9a fa fe ff       	call   c000080c <strcpy>
c0010d72:	83 c4 10             	add    esp,0x10
c0010d75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d79:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010d80:	83 ec 0c             	sub    esp,0xc
c0010d83:	6a 01                	push   0x1
c0010d85:	e8 df 08 00 00       	call   c0011669 <Virt::allocateKernelVirtualPages(int)>
c0010d8a:	83 c4 10             	add    esp,0x10
c0010d8d:	89 c2                	mov    edx,eax
c0010d8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d93:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010d96:	8b 1d 50 e8 02 c0    	mov    ebx,DWORD PTR ds:0xc002e850
c0010d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010da0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010da3:	89 c6                	mov    esi,eax
c0010da5:	e8 35 f0 ff ff       	call   c000fddf <Phys::allocatePage()>
c0010daa:	68 05 0c 00 00       	push   0xc05
c0010daf:	56                   	push   esi
c0010db0:	50                   	push   eax
c0010db1:	53                   	push   ebx
c0010db2:	e8 59 0f 00 00       	call   c0011d10 <VAS::mapPage(unsigned long, unsigned long, int)>
c0010db7:	83 c4 10             	add    esp,0x10
c0010dba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dbe:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010dc1:	83 ec 04             	sub    esp,0x4
c0010dc4:	68 00 0f 00 00       	push   0xf00
c0010dc9:	6a 00                	push   0x0
c0010dcb:	50                   	push   eax
c0010dcc:	e8 7f f9 fe ff       	call   c0000750 <memset>
c0010dd1:	83 c4 10             	add    esp,0x10
c0010dd4:	83 ec 04             	sub    esp,0x4
c0010dd7:	6a 00                	push   0x0
c0010dd9:	6a 07                	push   0x7
c0010ddb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ddf:	e8 18 f8 ff ff       	call   c00105fc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010de4:	83 c4 10             	add    esp,0x10
c0010de7:	83 ec 04             	sub    esp,0x4
c0010dea:	6a 00                	push   0x0
c0010dec:	6a 00                	push   0x0
c0010dee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010df2:	e8 8f f9 ff ff       	call   c0010786 <VgaText::setCursor(int, int)>
c0010df7:	83 c4 10             	add    esp,0x10
c0010dfa:	83 ec 0c             	sub    esp,0xc
c0010dfd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e01:	e8 18 fd ff ff       	call   c0010b1e <VgaText::clearScreen()>
c0010e06:	83 c4 10             	add    esp,0x10
c0010e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e0d:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0010e11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e15:	05 02 01 00 00       	add    eax,0x102
c0010e1a:	83 ec 04             	sub    esp,0x4
c0010e1d:	68 96 00 00 00       	push   0x96
c0010e22:	6a 00                	push   0x0
c0010e24:	50                   	push   eax
c0010e25:	e8 26 f9 fe ff       	call   c0000750 <memset>
c0010e2a:	83 c4 10             	add    esp,0x10
c0010e2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e31:	05 98 01 00 00       	add    eax,0x198
c0010e36:	83 ec 04             	sub    esp,0x4
c0010e39:	68 2c 01 00 00       	push   0x12c
c0010e3e:	6a 00                	push   0x0
c0010e40:	50                   	push   eax
c0010e41:	e8 0a f9 fe ff       	call   c0000750 <memset>
c0010e46:	83 c4 10             	add    esp,0x10
c0010e49:	90                   	nop
c0010e4a:	5b                   	pop    ebx
c0010e4b:	5e                   	pop    esi
c0010e4c:	5f                   	pop    edi
c0010e4d:	c3                   	ret    

c0010e4e <VgaText::receiveKey(unsigned char)>:
c0010e4e:	55                   	push   ebp
c0010e4f:	57                   	push   edi
c0010e50:	56                   	push   esi
c0010e51:	53                   	push   ebx
c0010e52:	83 ec 1c             	sub    esp,0x1c
c0010e55:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010e59:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e5d:	84 db                	test   bl,bl
c0010e5f:	0f 84 c9 00 00 00    	je     c0010f2e <VgaText::receiveKey(unsigned char)+0xe0>
c0010e65:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010e6b:	80 fb 08             	cmp    bl,0x8
c0010e6e:	75 2c                	jne    c0010e9c <VgaText::receiveKey(unsigned char)+0x4e>
c0010e70:	83 ec 0c             	sub    esp,0xc
c0010e73:	57                   	push   edi
c0010e74:	e8 f3 f8 fe ff       	call   c000076c <strlen>
c0010e79:	83 c4 10             	add    esp,0x10
c0010e7c:	85 c0                	test   eax,eax
c0010e7e:	74 41                	je     c0010ec1 <VgaText::receiveKey(unsigned char)+0x73>
c0010e80:	50                   	push   eax
c0010e81:	50                   	push   eax
c0010e82:	6a 08                	push   0x8
c0010e84:	56                   	push   esi
c0010e85:	e8 ee fc ff ff       	call   c0010b78 <VgaText::putchar(char)>
c0010e8a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010e8d:	e8 da f8 fe ff       	call   c000076c <strlen>
c0010e92:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010e9a:	eb 22                	jmp    c0010ebe <VgaText::receiveKey(unsigned char)+0x70>
c0010e9c:	0f be c3             	movsx  eax,bl
c0010e9f:	52                   	push   edx
c0010ea0:	52                   	push   edx
c0010ea1:	50                   	push   eax
c0010ea2:	56                   	push   esi
c0010ea3:	e8 d0 fc ff ff       	call   c0010b78 <VgaText::putchar(char)>
c0010ea8:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010eac:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010eb1:	59                   	pop    ecx
c0010eb2:	5d                   	pop    ebp
c0010eb3:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010eb7:	50                   	push   eax
c0010eb8:	57                   	push   edi
c0010eb9:	e8 8e fa fe ff       	call   c000094c <strcat>
c0010ebe:	83 c4 10             	add    esp,0x10
c0010ec1:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010ec8:	75 05                	jne    c0010ecf <VgaText::receiveKey(unsigned char)+0x81>
c0010eca:	80 fb 0a             	cmp    bl,0xa
c0010ecd:	75 53                	jne    c0010f22 <VgaText::receiveKey(unsigned char)+0xd4>
c0010ecf:	83 ec 0c             	sub    esp,0xc
c0010ed2:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010ed8:	53                   	push   ebx
c0010ed9:	e8 8e f8 fe ff       	call   c000076c <strlen>
c0010ede:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010ee1:	89 c5                	mov    ebp,eax
c0010ee3:	e8 84 f8 fe ff       	call   c000076c <strlen>
c0010ee8:	83 c4 10             	add    esp,0x10
c0010eeb:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010eef:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010ef4:	76 10                	jbe    c0010f06 <VgaText::receiveKey(unsigned char)+0xb8>
c0010ef6:	83 ec 0c             	sub    esp,0xc
c0010ef9:	68 93 aa 02 c0       	push   0xc002aa93
c0010efe:	e8 d6 94 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c0010f03:	83 c4 10             	add    esp,0x10
c0010f06:	50                   	push   eax
c0010f07:	50                   	push   eax
c0010f08:	57                   	push   edi
c0010f09:	53                   	push   ebx
c0010f0a:	e8 3d fa fe ff       	call   c000094c <strcat>
c0010f0f:	83 c4 0c             	add    esp,0xc
c0010f12:	68 96 00 00 00       	push   0x96
c0010f17:	6a 00                	push   0x0
c0010f19:	57                   	push   edi
c0010f1a:	e8 31 f8 fe ff       	call   c0000750 <memset>
c0010f1f:	83 c4 10             	add    esp,0x10
c0010f22:	83 ec 0c             	sub    esp,0xc
c0010f25:	56                   	push   esi
c0010f26:	e8 6d fa ff ff       	call   c0010998 <VgaText::doUpdate()>
c0010f2b:	83 c4 10             	add    esp,0x10
c0010f2e:	83 c4 1c             	add    esp,0x1c
c0010f31:	5b                   	pop    ebx
c0010f32:	5e                   	pop    esi
c0010f33:	5f                   	pop    edi
c0010f34:	5d                   	pop    ebp
c0010f35:	c3                   	ret    

c0010f36 <VgaText::write(unsigned long long, void*, int*)>:
c0010f36:	55                   	push   ebp
c0010f37:	57                   	push   edi
c0010f38:	56                   	push   esi
c0010f39:	53                   	push   ebx
c0010f3a:	83 ec 0c             	sub    esp,0xc
c0010f3d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010f41:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010f45:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010f49:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010f50:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010f53:	39 eb                	cmp    ebx,ebp
c0010f55:	74 13                	je     c0010f6a <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010f57:	43                   	inc    ebx
c0010f58:	50                   	push   eax
c0010f59:	50                   	push   eax
c0010f5a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010f5e:	50                   	push   eax
c0010f5f:	56                   	push   esi
c0010f60:	e8 13 fc ff ff       	call   c0010b78 <VgaText::putchar(char)>
c0010f65:	83 c4 10             	add    esp,0x10
c0010f68:	eb e9                	jmp    c0010f53 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010f6a:	83 ec 0c             	sub    esp,0xc
c0010f6d:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010f74:	56                   	push   esi
c0010f75:	e8 1e fa ff ff       	call   c0010998 <VgaText::doUpdate()>
c0010f7a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010f7e:	89 38                	mov    DWORD PTR [eax],edi
c0010f80:	83 c4 1c             	add    esp,0x1c
c0010f83:	31 c0                	xor    eax,eax
c0010f85:	5b                   	pop    ebx
c0010f86:	5e                   	pop    esi
c0010f87:	5f                   	pop    edi
c0010f88:	5d                   	pop    ebp
c0010f89:	c3                   	ret    

c0010f8a <newTerminal(char*)>:
c0010f8a:	83 ec 28             	sub    esp,0x28
c0010f8d:	68 c4 02 00 00       	push   0x2c4
c0010f92:	e8 4c ea ff ff       	call   c000f9e3 <malloc>
c0010f97:	5a                   	pop    edx
c0010f98:	59                   	pop    ecx
c0010f99:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010f9d:	50                   	push   eax
c0010f9e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010fa2:	e8 29 fd ff ff       	call   c0010cd0 <VgaText::VgaText(char const*)>
c0010fa7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fab:	83 c4 2c             	add    esp,0x2c
c0010fae:	c3                   	ret    
c0010faf:	90                   	nop

c0010fb0 <TSS::TSS()>:
c0010fb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fb4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010fbb:	90                   	nop
c0010fbc:	c3                   	ret    
c0010fbd:	90                   	nop

c0010fbe <TSS::setESP(unsigned long)>:
c0010fbe:	55                   	push   ebp
c0010fbf:	89 e5                	mov    ebp,esp
c0010fc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fc7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010fca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fcd:	90                   	nop
c0010fce:	5d                   	pop    ebp
c0010fcf:	c3                   	ret    

c0010fd0 <TSS::flush()>:
c0010fd0:	55                   	push   ebp
c0010fd1:	89 e5                	mov    ebp,esp
c0010fd3:	83 ec 10             	sub    esp,0x10
c0010fd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0010fdb:	83 c8 03             	or     eax,0x3
c0010fde:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010fe2:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010fe6:	66 89 d0             	mov    ax,dx
c0010fe9:	0f 00 d8             	ltr    ax
c0010fec:	90                   	nop
c0010fed:	c9                   	leave  
c0010fee:	c3                   	ret    
c0010fef:	90                   	nop

c0010ff0 <TSS::setup(unsigned long, unsigned long)>:
c0010ff0:	55                   	push   ebp
c0010ff1:	89 e5                	mov    ebp,esp
c0010ff3:	83 ec 18             	sub    esp,0x18
c0010ff6:	83 ec 0c             	sub    esp,0xc
c0010ff9:	6a 68                	push   0x68
c0010ffb:	e8 e3 e9 ff ff       	call   c000f9e3 <malloc>
c0011000:	83 c4 10             	add    esp,0x10
c0011003:	89 c2                	mov    edx,eax
c0011005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011008:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001100b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001100e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011011:	83 ec 04             	sub    esp,0x4
c0011014:	6a 68                	push   0x68
c0011016:	6a 00                	push   0x0
c0011018:	50                   	push   eax
c0011019:	e8 32 f7 fe ff       	call   c0000750 <memset>
c001101e:	83 c4 10             	add    esp,0x10
c0011021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011024:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011027:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001102d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011030:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011033:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001103c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001103f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011042:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011045:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011048:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001104b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011051:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011054:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011057:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001105d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011060:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011063:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011069:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001106c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001106f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011075:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011078:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001107b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011081:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011084:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011087:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001108d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011090:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011093:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011096:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011099:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001109c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001109f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00110a2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00110a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110ab:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00110b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110b8:	0f 20 da             	mov    edx,cr3
c00110bb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00110be:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00110c1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00110c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110ca:	83 ec 08             	sub    esp,0x8
c00110cd:	50                   	push   eax
c00110ce:	8d 45 ec             	lea    eax,[ebp-0x14]
c00110d1:	50                   	push   eax
c00110d2:	e8 b7 df ff ff       	call   c000f08e <GDTEntry::setBase(unsigned int)>
c00110d7:	83 c4 10             	add    esp,0x10
c00110da:	83 ec 08             	sub    esp,0x8
c00110dd:	6a 68                	push   0x68
c00110df:	8d 45 ec             	lea    eax,[ebp-0x14]
c00110e2:	50                   	push   eax
c00110e3:	e8 c2 df ff ff       	call   c000f0aa <GDTEntry::setLimit(unsigned int)>
c00110e8:	83 c4 10             	add    esp,0x10
c00110eb:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00110ef:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00110f2:	83 e0 0f             	and    eax,0xf
c00110f5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00110f8:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00110fb:	83 c8 40             	or     eax,0x40
c00110fe:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011101:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0011106:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001110c:	05 78 01 00 00       	add    eax,0x178
c0011111:	83 ec 04             	sub    esp,0x4
c0011114:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011117:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001111a:	50                   	push   eax
c001111b:	e8 be df ff ff       	call   c000f0de <GDT::addEntry(GDTEntry)>
c0011120:	83 c4 10             	add    esp,0x10
c0011123:	89 c2                	mov    edx,eax
c0011125:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011128:	89 10                	mov    DWORD PTR [eax],edx
c001112a:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c001112f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011135:	05 78 01 00 00       	add    eax,0x178
c001113a:	83 ec 0c             	sub    esp,0xc
c001113d:	50                   	push   eax
c001113e:	e8 c5 df ff ff       	call   c000f108 <GDT::flush()>
c0011143:	83 c4 10             	add    esp,0x10
c0011146:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011149:	8b 00                	mov    eax,DWORD PTR [eax]
c001114b:	c9                   	leave  
c001114c:	c3                   	ret    
c001114d:	90                   	nop

c001114e <ReservedFilename::read(unsigned long long, void*, int*)>:
c001114e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011152:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011156:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011159:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001115e:	75 08                	jne    c0011168 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011160:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011166:	eb 38                	jmp    c00111a0 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011168:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001116d:	75 17                	jne    c0011186 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c001116f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011174:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011177:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001117d:	8b 10                	mov    edx,DWORD PTR [eax]
c001117f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011183:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011186:	89 c1                	mov    ecx,eax
c0011188:	83 e1 fd             	and    ecx,0xfffffffd
c001118b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011191:	74 cd                	je     c0011160 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011193:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011198:	83 e0 ef             	and    eax,0xffffffef
c001119b:	83 f8 08             	cmp    eax,0x8
c001119e:	76 c0                	jbe    c0011160 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00111a0:	31 c0                	xor    eax,eax
c00111a2:	c3                   	ret    
c00111a3:	90                   	nop

c00111a4 <ReservedFilename::isAtty()>:
c00111a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111a8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00111ab:	31 c0                	xor    eax,eax
c00111ad:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00111b3:	74 09                	je     c00111be <ReservedFilename::isAtty()+0x1a>
c00111b5:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00111bb:	0f 94 c0             	sete   al
c00111be:	c3                   	ret    
c00111bf:	90                   	nop

c00111c0 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00111c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111c4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00111c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00111cf:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00111d4:	75 08                	jne    c00111de <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00111d6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00111dc:	eb 3d                	jmp    c001121b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00111de:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00111e3:	75 17                	jne    c00111fc <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00111e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111ea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00111ed:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00111f3:	8b 10                	mov    edx,DWORD PTR [eax]
c00111f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00111f9:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00111fc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011201:	75 04                	jne    c0011207 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011203:	89 0a                	mov    DWORD PTR [edx],ecx
c0011205:	eb 14                	jmp    c001121b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011207:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c001120c:	74 c8                	je     c00111d6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001120e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011213:	83 e0 ef             	and    eax,0xffffffef
c0011216:	83 f8 08             	cmp    eax,0x8
c0011219:	76 bb                	jbe    c00111d6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001121b:	31 c0                	xor    eax,eax
c001121d:	c3                   	ret    

c001121e <UnixFile::getFileDescriptor()>:
c001121e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011222:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011225:	c3                   	ret    

c0011226 <UnixFile::UnixFile(int)>:
c0011226:	53                   	push   ebx
c0011227:	83 ec 28             	sub    esp,0x28
c001122a:	ba b0 ab 02 c0       	mov    edx,0xc002abb0
c001122f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011233:	89 10                	mov    DWORD PTR [eax],edx
c0011235:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001123d:	0f 8f 8c 01 00 00    	jg     c00113cf <UnixFile::UnixFile(int)+0x1a9>
c0011243:	a1 80 d6 02 c0       	mov    eax,ds:0xc002d680
c0011248:	8d 50 01             	lea    edx,[eax+0x1]
c001124b:	89 15 80 d6 02 c0    	mov    DWORD PTR ds:0xc002d680,edx
c0011251:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011255:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011258:	83 ec 08             	sub    esp,0x8
c001125b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001125f:	68 38 e8 02 c0       	push   0xc002e838
c0011264:	e8 1d 79 01 00       	call   c0028b86 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011269:	83 c4 10             	add    esp,0x10
c001126c:	a0 34 e8 02 c0       	mov    al,ds:0xc002e834
c0011271:	83 f0 01             	xor    eax,0x1
c0011274:	84 c0                	test   al,al
c0011276:	0f 84 54 01 00 00    	je     c00113d0 <UnixFile::UnixFile(int)+0x1aa>
c001127c:	c6 05 34 e8 02 c0 01 	mov    BYTE PTR ds:0xc002e834,0x1
c0011283:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c001128b:	83 ec 0c             	sub    esp,0xc
c001128e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011292:	e8 4c e7 ff ff       	call   c000f9e3 <malloc>
c0011297:	83 c4 10             	add    esp,0x10
c001129a:	89 c3                	mov    ebx,eax
c001129c:	83 ec 08             	sub    esp,0x8
c001129f:	68 03 ff ff 0f       	push   0xfffff03
c00112a4:	53                   	push   ebx
c00112a5:	e8 2c 01 00 00       	call   c00113d6 <ReservedFilename::ReservedFilename(int)>
c00112aa:	83 c4 10             	add    esp,0x10
c00112ad:	89 1d 2c e8 02 c0    	mov    DWORD PTR ds:0xc002e82c,ebx
c00112b3:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00112bb:	83 ec 0c             	sub    esp,0xc
c00112be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112c2:	e8 1c e7 ff ff       	call   c000f9e3 <malloc>
c00112c7:	83 c4 10             	add    esp,0x10
c00112ca:	89 c3                	mov    ebx,eax
c00112cc:	83 ec 08             	sub    esp,0x8
c00112cf:	68 01 ff ff 0f       	push   0xfffff01
c00112d4:	53                   	push   ebx
c00112d5:	e8 fc 00 00 00       	call   c00113d6 <ReservedFilename::ReservedFilename(int)>
c00112da:	83 c4 10             	add    esp,0x10
c00112dd:	89 1d 30 e8 02 c0    	mov    DWORD PTR ds:0xc002e830,ebx
c00112e3:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00112eb:	83 ec 0c             	sub    esp,0xc
c00112ee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00112f2:	e8 ec e6 ff ff       	call   c000f9e3 <malloc>
c00112f7:	83 c4 10             	add    esp,0x10
c00112fa:	89 c3                	mov    ebx,eax
c00112fc:	83 ec 08             	sub    esp,0x8
c00112ff:	68 00 ff ff 0f       	push   0xfffff00
c0011304:	53                   	push   ebx
c0011305:	e8 cc 00 00 00       	call   c00113d6 <ReservedFilename::ReservedFilename(int)>
c001130a:	83 c4 10             	add    esp,0x10
c001130d:	89 1d 24 e8 02 c0    	mov    DWORD PTR ds:0xc002e824,ebx
c0011313:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c001131b:	83 ec 0c             	sub    esp,0xc
c001131e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011322:	e8 bc e6 ff ff       	call   c000f9e3 <malloc>
c0011327:	83 c4 10             	add    esp,0x10
c001132a:	89 c3                	mov    ebx,eax
c001132c:	83 ec 08             	sub    esp,0x8
c001132f:	68 02 ff ff 0f       	push   0xfffff02
c0011334:	53                   	push   ebx
c0011335:	e8 9c 00 00 00       	call   c00113d6 <ReservedFilename::ReservedFilename(int)>
c001133a:	83 c4 10             	add    esp,0x10
c001133d:	89 1d 28 e8 02 c0    	mov    DWORD PTR ds:0xc002e828,ebx
c0011343:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001134b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011350:	7f 7e                	jg     c00113d0 <UnixFile::UnixFile(int)+0x1aa>
c0011352:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001135a:	83 ec 0c             	sub    esp,0xc
c001135d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011361:	e8 7d e6 ff ff       	call   c000f9e3 <malloc>
c0011366:	83 c4 10             	add    esp,0x10
c0011369:	89 c3                	mov    ebx,eax
c001136b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001136f:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011374:	83 ec 08             	sub    esp,0x8
c0011377:	50                   	push   eax
c0011378:	53                   	push   ebx
c0011379:	e8 58 00 00 00       	call   c00113d6 <ReservedFilename::ReservedFilename(int)>
c001137e:	83 c4 10             	add    esp,0x10
c0011381:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011385:	89 1c 85 00 e8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1800],ebx
c001138c:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011394:	83 ec 0c             	sub    esp,0xc
c0011397:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001139b:	e8 43 e6 ff ff       	call   c000f9e3 <malloc>
c00113a0:	83 c4 10             	add    esp,0x10
c00113a3:	89 c3                	mov    ebx,eax
c00113a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113a9:	05 20 ff ff 0f       	add    eax,0xfffff20
c00113ae:	83 ec 08             	sub    esp,0x8
c00113b1:	50                   	push   eax
c00113b2:	53                   	push   ebx
c00113b3:	e8 1e 00 00 00       	call   c00113d6 <ReservedFilename::ReservedFilename(int)>
c00113b8:	83 c4 10             	add    esp,0x10
c00113bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113bf:	89 1c 85 c0 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1840],ebx
c00113c6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00113ca:	e9 7c ff ff ff       	jmp    c001134b <UnixFile::UnixFile(int)+0x125>
c00113cf:	90                   	nop
c00113d0:	83 c4 28             	add    esp,0x28
c00113d3:	5b                   	pop    ebx
c00113d4:	c3                   	ret    
c00113d5:	90                   	nop

c00113d6 <ReservedFilename::ReservedFilename(int)>:
c00113d6:	83 ec 0c             	sub    esp,0xc
c00113d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113dd:	83 ec 08             	sub    esp,0x8
c00113e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113e4:	50                   	push   eax
c00113e5:	e8 3c fe ff ff       	call   c0011226 <UnixFile::UnixFile(int)>
c00113ea:	83 c4 10             	add    esp,0x10
c00113ed:	ba cc ab 02 c0       	mov    edx,0xc002abcc
c00113f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113f6:	89 10                	mov    DWORD PTR [eax],edx
c00113f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011400:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011403:	90                   	nop
c0011404:	83 c4 0c             	add    esp,0xc
c0011407:	c3                   	ret    

c0011408 <UnixFile::~UnixFile()>:
c0011408:	83 ec 1c             	sub    esp,0x1c
c001140b:	ba b0 ab 02 c0       	mov    edx,0xc002abb0
c0011410:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011414:	89 10                	mov    DWORD PTR [eax],edx
c0011416:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001141a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001141d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011422:	7f 73                	jg     c0011497 <UnixFile::~UnixFile()+0x8f>
c0011424:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001142c:	83 ec 0c             	sub    esp,0xc
c001142f:	68 38 e8 02 c0       	push   0xc002e838
c0011434:	e8 21 78 01 00       	call   c0028c5a <LinkedList<UnixFile>::getFirstElement()>
c0011439:	83 c4 10             	add    esp,0x10
c001143c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011440:	83 ec 0c             	sub    esp,0xc
c0011443:	68 38 e8 02 c0       	push   0xc002e838
c0011448:	e8 15 78 01 00       	call   c0028c62 <LinkedList<UnixFile>::removeFirst()>
c001144d:	83 c4 10             	add    esp,0x10
c0011450:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011454:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011458:	74 40                	je     c001149a <UnixFile::~UnixFile()+0x92>
c001145a:	83 ec 08             	sub    esp,0x8
c001145d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011461:	68 38 e8 02 c0       	push   0xc002e838
c0011466:	e8 1b 77 01 00       	call   c0028b86 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001146b:	83 c4 10             	add    esp,0x10
c001146e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011472:	8d 50 01             	lea    edx,[eax+0x1]
c0011475:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011479:	3d 88 13 00 00       	cmp    eax,0x1388
c001147e:	0f 94 c0             	sete   al
c0011481:	84 c0                	test   al,al
c0011483:	74 a7                	je     c001142c <UnixFile::~UnixFile()+0x24>
c0011485:	83 ec 0c             	sub    esp,0xc
c0011488:	68 88 ab 02 c0       	push   0xc002ab88
c001148d:	e8 47 8f 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c0011492:	83 c4 10             	add    esp,0x10
c0011495:	eb 95                	jmp    c001142c <UnixFile::~UnixFile()+0x24>
c0011497:	90                   	nop
c0011498:	eb 01                	jmp    c001149b <UnixFile::~UnixFile()+0x93>
c001149a:	90                   	nop
c001149b:	90                   	nop
c001149c:	83 c4 1c             	add    esp,0x1c
c001149f:	c3                   	ret    

c00114a0 <UnixFile::~UnixFile()>:
c00114a0:	83 ec 0c             	sub    esp,0xc
c00114a3:	83 ec 0c             	sub    esp,0xc
c00114a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114aa:	e8 59 ff ff ff       	call   c0011408 <UnixFile::~UnixFile()>
c00114af:	83 c4 10             	add    esp,0x10
c00114b2:	83 ec 08             	sub    esp,0x8
c00114b5:	6a 0c                	push   0xc
c00114b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114bb:	e8 a3 14 00 00       	call   c0012963 <operator delete(void*, unsigned long)>
c00114c0:	83 c4 10             	add    esp,0x10
c00114c3:	83 c4 0c             	add    esp,0xc
c00114c6:	c3                   	ret    
c00114c7:	90                   	nop

c00114c8 <ReservedFilename::~ReservedFilename()>:
c00114c8:	83 ec 0c             	sub    esp,0xc
c00114cb:	ba cc ab 02 c0       	mov    edx,0xc002abcc
c00114d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114d4:	89 10                	mov    DWORD PTR [eax],edx
c00114d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114da:	83 ec 0c             	sub    esp,0xc
c00114dd:	50                   	push   eax
c00114de:	e8 25 ff ff ff       	call   c0011408 <UnixFile::~UnixFile()>
c00114e3:	83 c4 10             	add    esp,0x10
c00114e6:	90                   	nop
c00114e7:	83 c4 0c             	add    esp,0xc
c00114ea:	c3                   	ret    
c00114eb:	90                   	nop

c00114ec <ReservedFilename::~ReservedFilename()>:
c00114ec:	83 ec 0c             	sub    esp,0xc
c00114ef:	83 ec 0c             	sub    esp,0xc
c00114f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114f6:	e8 cd ff ff ff       	call   c00114c8 <ReservedFilename::~ReservedFilename()>
c00114fb:	83 c4 10             	add    esp,0x10
c00114fe:	83 ec 08             	sub    esp,0x8
c0011501:	6a 0c                	push   0xc
c0011503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011507:	e8 57 14 00 00       	call   c0012963 <operator delete(void*, unsigned long)>
c001150c:	83 c4 10             	add    esp,0x10
c001150f:	83 c4 0c             	add    esp,0xc
c0011512:	c3                   	ret    

c0011513 <getFromFileDescriptor(int)>:
c0011513:	53                   	push   ebx
c0011514:	83 ec 08             	sub    esp,0x8
c0011517:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001151b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011521:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011527:	7f 2c                	jg     c0011555 <getFromFileDescriptor(int)+0x42>
c0011529:	83 ec 0c             	sub    esp,0xc
c001152c:	68 38 e8 02 c0       	push   0xc002e838
c0011531:	e8 24 77 01 00       	call   c0028c5a <LinkedList<UnixFile>::getFirstElement()>
c0011536:	83 c4 10             	add    esp,0x10
c0011539:	85 c0                	test   eax,eax
c001153b:	75 04                	jne    c0011541 <getFromFileDescriptor(int)+0x2e>
c001153d:	31 c0                	xor    eax,eax
c001153f:	eb 6e                	jmp    c00115af <getFromFileDescriptor(int)+0x9c>
c0011541:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011544:	74 69                	je     c00115af <getFromFileDescriptor(int)+0x9c>
c0011546:	52                   	push   edx
c0011547:	52                   	push   edx
c0011548:	50                   	push   eax
c0011549:	68 38 e8 02 c0       	push   0xc002e838
c001154e:	e8 b1 77 01 00       	call   c0028d04 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011553:	eb e1                	jmp    c0011536 <getFromFileDescriptor(int)+0x23>
c0011555:	a1 2c e8 02 c0       	mov    eax,ds:0xc002e82c
c001155a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011560:	74 4d                	je     c00115af <getFromFileDescriptor(int)+0x9c>
c0011562:	a1 30 e8 02 c0       	mov    eax,ds:0xc002e830
c0011567:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c001156d:	74 40                	je     c00115af <getFromFileDescriptor(int)+0x9c>
c001156f:	a1 28 e8 02 c0       	mov    eax,ds:0xc002e828
c0011574:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c001157a:	74 33                	je     c00115af <getFromFileDescriptor(int)+0x9c>
c001157c:	a1 24 e8 02 c0       	mov    eax,ds:0xc002e824
c0011581:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011587:	74 26                	je     c00115af <getFromFileDescriptor(int)+0x9c>
c0011589:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c001158f:	83 f8 08             	cmp    eax,0x8
c0011592:	77 09                	ja     c001159d <getFromFileDescriptor(int)+0x8a>
c0011594:	8b 04 85 00 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1800]
c001159b:	eb 12                	jmp    c00115af <getFromFileDescriptor(int)+0x9c>
c001159d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00115a3:	83 fb 08             	cmp    ebx,0x8
c00115a6:	77 95                	ja     c001153d <getFromFileDescriptor(int)+0x2a>
c00115a8:	8b 04 9d c0 e7 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1840]
c00115af:	83 c4 08             	add    esp,0x8
c00115b2:	5b                   	pop    ebx
c00115b3:	c3                   	ret    

c00115b4 <__static_initialization_and_destruction_0(int, int)>:
c00115b4:	83 ec 0c             	sub    esp,0xc
c00115b7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00115bc:	75 34                	jne    c00115f2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00115be:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00115c6:	75 2a                	jne    c00115f2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00115c8:	83 ec 0c             	sub    esp,0xc
c00115cb:	68 38 e8 02 c0       	push   0xc002e838
c00115d0:	e8 6f 75 01 00       	call   c0028b44 <LinkedList<UnixFile>::LinkedList()>
c00115d5:	83 c4 10             	add    esp,0x10
c00115d8:	83 ec 04             	sub    esp,0x4
c00115db:	68 a4 d4 02 c0       	push   0xc002d4a4
c00115e0:	68 38 e8 02 c0       	push   0xc002e838
c00115e5:	68 42 8b 02 c0       	push   0xc0028b42
c00115ea:	e8 ee 12 00 00       	call   c00128dd <__cxa_atexit>
c00115ef:	83 c4 10             	add    esp,0x10
c00115f2:	90                   	nop
c00115f3:	83 c4 0c             	add    esp,0xc
c00115f6:	c3                   	ret    

c00115f7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00115f7:	83 ec 0c             	sub    esp,0xc
c00115fa:	83 ec 08             	sub    esp,0x8
c00115fd:	68 ff ff 00 00       	push   0xffff
c0011602:	6a 01                	push   0x1
c0011604:	e8 ab ff ff ff       	call   c00115b4 <__static_initialization_and_destruction_0(int, int)>
c0011609:	83 c4 10             	add    esp,0x10
c001160c:	83 c4 0c             	add    esp,0xc
c001160f:	c3                   	ret    

c0011610 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011610:	53                   	push   ebx
c0011611:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011615:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011619:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c001161f:	89 c8                	mov    eax,ecx
c0011621:	d1 e8                	shr    eax,1
c0011623:	03 05 88 d6 02 c0    	add    eax,DWORD PTR ds:0xc002d688
c0011629:	83 e1 01             	and    ecx,0x1
c001162c:	8a 10                	mov    dl,BYTE PTR [eax]
c001162e:	75 09                	jne    c0011639 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011630:	83 e2 f0             	and    edx,0xfffffff0
c0011633:	09 da                	or     edx,ebx
c0011635:	88 10                	mov    BYTE PTR [eax],dl
c0011637:	5b                   	pop    ebx
c0011638:	c3                   	ret    
c0011639:	c1 e3 04             	shl    ebx,0x4
c001163c:	83 e2 0f             	and    edx,0xf
c001163f:	09 da                	or     edx,ebx
c0011641:	88 10                	mov    BYTE PTR [eax],dl
c0011643:	5b                   	pop    ebx
c0011644:	c3                   	ret    

c0011645 <Virt::getPageState(unsigned long)>:
c0011645:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011649:	8b 0d 88 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d688
c001164f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011655:	89 d0                	mov    eax,edx
c0011657:	d1 e8                	shr    eax,1
c0011659:	83 e2 01             	and    edx,0x1
c001165c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001165f:	75 04                	jne    c0011665 <Virt::getPageState(unsigned long)+0x20>
c0011661:	83 e0 0f             	and    eax,0xf
c0011664:	c3                   	ret    
c0011665:	c0 e8 04             	shr    al,0x4
c0011668:	c3                   	ret    

c0011669 <Virt::allocateKernelVirtualPages(int)>:
c0011669:	55                   	push   ebp
c001166a:	31 ed                	xor    ebp,ebp
c001166c:	57                   	push   edi
c001166d:	56                   	push   esi
c001166e:	53                   	push   ebx
c001166f:	31 db                	xor    ebx,ebx
c0011671:	83 ec 1c             	sub    esp,0x1c
c0011674:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011678:	8b 3d 84 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d684
c001167e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011683:	57                   	push   edi
c0011684:	e8 bc ff ff ff       	call   c0011645 <Virt::getPageState(unsigned long)>
c0011689:	5a                   	pop    edx
c001168a:	84 c0                	test   al,al
c001168c:	75 3a                	jne    c00116c8 <Virt::allocateKernelVirtualPages(int)+0x5f>
c001168e:	85 db                	test   ebx,ebx
c0011690:	75 02                	jne    c0011694 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011692:	89 fd                	mov    ebp,edi
c0011694:	43                   	inc    ebx
c0011695:	39 f3                	cmp    ebx,esi
c0011697:	74 5a                	je     c00116f3 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011699:	47                   	inc    edi
c001169a:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00116a0:	76 31                	jbe    c00116d3 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00116a2:	c7 05 84 d6 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d684,0xc8000
c00116ac:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00116b1:	75 28                	jne    c00116db <Virt::allocateKernelVirtualPages(int)+0x72>
c00116b3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00116b8:	bf 00 80 0c 00       	mov    edi,0xc8000
c00116bd:	57                   	push   edi
c00116be:	e8 82 ff ff ff       	call   c0011645 <Virt::getPageState(unsigned long)>
c00116c3:	5a                   	pop    edx
c00116c4:	84 c0                	test   al,al
c00116c6:	74 c6                	je     c001168e <Virt::allocateKernelVirtualPages(int)+0x25>
c00116c8:	31 db                	xor    ebx,ebx
c00116ca:	47                   	inc    edi
c00116cb:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00116d1:	77 cf                	ja     c00116a2 <Virt::allocateKernelVirtualPages(int)+0x39>
c00116d3:	89 3d 84 d6 02 c0    	mov    DWORD PTR ds:0xc002d684,edi
c00116d9:	eb a8                	jmp    c0011683 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00116db:	83 ec 0c             	sub    esp,0xc
c00116de:	68 e0 ab 02 c0       	push   0xc002abe0
c00116e3:	e8 f1 8c 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c00116e8:	8b 3d 84 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d684
c00116ee:	83 c4 10             	add    esp,0x10
c00116f1:	eb 90                	jmp    c0011683 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00116f3:	89 2d 84 d6 02 c0    	mov    DWORD PTR ds:0xc002d684,ebp
c00116f9:	4b                   	dec    ebx
c00116fa:	74 5f                	je     c001175b <Virt::allocateKernelVirtualPages(int)+0xf2>
c00116fc:	85 f6                	test   esi,esi
c00116fe:	74 3d                	je     c001173d <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011700:	89 e8                	mov    eax,ebp
c0011702:	31 db                	xor    ebx,ebx
c0011704:	8d 7e ff             	lea    edi,[esi-0x1]
c0011707:	eb 14                	jmp    c001171d <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011709:	6a 01                	push   0x1
c001170b:	43                   	inc    ebx
c001170c:	50                   	push   eax
c001170d:	e8 fe fe ff ff       	call   c0011610 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011712:	58                   	pop    eax
c0011713:	39 f3                	cmp    ebx,esi
c0011715:	5a                   	pop    edx
c0011716:	74 25                	je     c001173d <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011718:	a1 84 d6 02 c0       	mov    eax,ds:0xc002d684
c001171d:	8d 50 01             	lea    edx,[eax+0x1]
c0011720:	85 db                	test   ebx,ebx
c0011722:	89 15 84 d6 02 c0    	mov    DWORD PTR ds:0xc002d684,edx
c0011728:	74 20                	je     c001174a <Virt::allocateKernelVirtualPages(int)+0xe1>
c001172a:	39 df                	cmp    edi,ebx
c001172c:	75 db                	jne    c0011709 <Virt::allocateKernelVirtualPages(int)+0xa0>
c001172e:	6a 03                	push   0x3
c0011730:	43                   	inc    ebx
c0011731:	50                   	push   eax
c0011732:	e8 d9 fe ff ff       	call   c0011610 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011737:	59                   	pop    ecx
c0011738:	39 f3                	cmp    ebx,esi
c001173a:	58                   	pop    eax
c001173b:	75 db                	jne    c0011718 <Virt::allocateKernelVirtualPages(int)+0xaf>
c001173d:	83 c4 1c             	add    esp,0x1c
c0011740:	89 e8                	mov    eax,ebp
c0011742:	5b                   	pop    ebx
c0011743:	c1 e0 0c             	shl    eax,0xc
c0011746:	5e                   	pop    esi
c0011747:	5f                   	pop    edi
c0011748:	5d                   	pop    ebp
c0011749:	c3                   	ret    
c001174a:	6a 02                	push   0x2
c001174c:	bb 01 00 00 00       	mov    ebx,0x1
c0011751:	50                   	push   eax
c0011752:	e8 b9 fe ff ff       	call   c0011610 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011757:	58                   	pop    eax
c0011758:	5a                   	pop    edx
c0011759:	eb bd                	jmp    c0011718 <Virt::allocateKernelVirtualPages(int)+0xaf>
c001175b:	6a 04                	push   0x4
c001175d:	8d 45 01             	lea    eax,[ebp+0x1]
c0011760:	55                   	push   ebp
c0011761:	a3 84 d6 02 c0       	mov    ds:0xc002d684,eax
c0011766:	e8 a5 fe ff ff       	call   c0011610 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001176b:	59                   	pop    ecx
c001176c:	89 e8                	mov    eax,ebp
c001176e:	5b                   	pop    ebx
c001176f:	c1 e0 0c             	shl    eax,0xc
c0011772:	83 c4 1c             	add    esp,0x1c
c0011775:	5b                   	pop    ebx
c0011776:	5e                   	pop    esi
c0011777:	5f                   	pop    edi
c0011778:	5d                   	pop    ebp
c0011779:	c3                   	ret    

c001177a <Virt::freeSwapfilePage(unsigned long)>:
c001177a:	53                   	push   ebx
c001177b:	8b 15 4c e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e84c
c0011781:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011785:	b8 01 00 00 00       	mov    eax,0x1
c001178a:	89 cb                	mov    ebx,ecx
c001178c:	d3 e0                	shl    eax,cl
c001178e:	c1 eb 05             	shr    ebx,0x5
c0011791:	f7 d0                	not    eax
c0011793:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011796:	5b                   	pop    ebx
c0011797:	c3                   	ret    

c0011798 <Virt::swapIDToSector(unsigned long)>:
c0011798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001179c:	0f af 05 8c d6 02 c0 	imul   eax,DWORD PTR ds:0xc002d68c
c00117a3:	03 05 94 d6 02 c0    	add    eax,DWORD PTR ds:0xc002d694
c00117a9:	c3                   	ret    

c00117aa <Virt::allocateSwapfilePage()>:
c00117aa:	55                   	push   ebp
c00117ab:	31 d2                	xor    edx,edx
c00117ad:	57                   	push   edi
c00117ae:	56                   	push   esi
c00117af:	53                   	push   ebx
c00117b0:	83 ec 0c             	sub    esp,0xc
c00117b3:	8b 0d 8c d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d68c
c00117b9:	a1 90 d6 02 c0       	mov    eax,ds:0xc002d690
c00117be:	f7 f1                	div    ecx
c00117c0:	39 0d 90 d6 02 c0    	cmp    DWORD PTR ds:0xc002d690,ecx
c00117c6:	72 2d                	jb     c00117f5 <Virt::allocateSwapfilePage()+0x4b>
c00117c8:	8b 35 4c e8 02 c0    	mov    esi,DWORD PTR ds:0xc002e84c
c00117ce:	8b 16                	mov    edx,DWORD PTR [esi]
c00117d0:	f6 c2 01             	test   dl,0x1
c00117d3:	74 3c                	je     c0011811 <Virt::allocateSwapfilePage()+0x67>
c00117d5:	31 c9                	xor    ecx,ecx
c00117d7:	bf 01 00 00 00       	mov    edi,0x1
c00117dc:	eb 12                	jmp    c00117f0 <Virt::allocateSwapfilePage()+0x46>
c00117de:	89 fd                	mov    ebp,edi
c00117e0:	89 ca                	mov    edx,ecx
c00117e2:	d3 e5                	shl    ebp,cl
c00117e4:	c1 ea 05             	shr    edx,0x5
c00117e7:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00117ea:	8b 13                	mov    edx,DWORD PTR [ebx]
c00117ec:	85 ea                	test   edx,ebp
c00117ee:	74 2a                	je     c001181a <Virt::allocateSwapfilePage()+0x70>
c00117f0:	41                   	inc    ecx
c00117f1:	39 c8                	cmp    eax,ecx
c00117f3:	77 e9                	ja     c00117de <Virt::allocateSwapfilePage()+0x34>
c00117f5:	83 ec 0c             	sub    esp,0xc
c00117f8:	68 c0 ad 02 c0       	push   0xc002adc0
c00117fd:	e8 d7 8b 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c0011802:	83 c4 10             	add    esp,0x10
c0011805:	31 c9                	xor    ecx,ecx
c0011807:	83 c4 0c             	add    esp,0xc
c001180a:	89 c8                	mov    eax,ecx
c001180c:	5b                   	pop    ebx
c001180d:	5e                   	pop    esi
c001180e:	5f                   	pop    edi
c001180f:	5d                   	pop    ebp
c0011810:	c3                   	ret    
c0011811:	89 f3                	mov    ebx,esi
c0011813:	bd 01 00 00 00       	mov    ebp,0x1
c0011818:	31 c9                	xor    ecx,ecx
c001181a:	09 ea                	or     edx,ebp
c001181c:	89 c8                	mov    eax,ecx
c001181e:	89 13                	mov    DWORD PTR [ebx],edx
c0011820:	83 c4 0c             	add    esp,0xc
c0011823:	5b                   	pop    ebx
c0011824:	5e                   	pop    esi
c0011825:	5f                   	pop    edi
c0011826:	5d                   	pop    ebp
c0011827:	c3                   	ret    

c0011828 <Virt::virtualMemorySetup()>:
c0011828:	53                   	push   ebx
c0011829:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001182e:	6a 0f                	push   0xf
c0011830:	53                   	push   ebx
c0011831:	43                   	inc    ebx
c0011832:	e8 d9 fd ff ff       	call   c0011610 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011837:	58                   	pop    eax
c0011838:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001183e:	5a                   	pop    edx
c001183f:	75 ed                	jne    c001182e <Virt::virtualMemorySetup()+0x6>
c0011841:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011846:	6a 00                	push   0x0
c0011848:	53                   	push   ebx
c0011849:	43                   	inc    ebx
c001184a:	e8 c1 fd ff ff       	call   c0011610 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001184f:	59                   	pop    ecx
c0011850:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011856:	58                   	pop    eax
c0011857:	75 ed                	jne    c0011846 <Virt::virtualMemorySetup()+0x1e>
c0011859:	bb 00 00 0d 00       	mov    ebx,0xd0000
c001185e:	6a 0f                	push   0xf
c0011860:	53                   	push   ebx
c0011861:	43                   	inc    ebx
c0011862:	e8 a9 fd ff ff       	call   c0011610 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011867:	58                   	pop    eax
c0011868:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c001186e:	5a                   	pop    edx
c001186f:	75 ed                	jne    c001185e <Virt::virtualMemorySetup()+0x36>
c0011871:	5b                   	pop    ebx
c0011872:	c3                   	ret    

c0011873 <Virt::setupPageSwapping(int)>:
c0011873:	53                   	push   ebx
c0011874:	83 ec 0c             	sub    esp,0xc
c0011877:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001187b:	a1 e8 ec 02 c0       	mov    eax,ds:0xc002ece8
c0011880:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011886:	8b 10                	mov    edx,DWORD PTR [eax]
c0011888:	53                   	push   ebx
c0011889:	c1 e3 0b             	shl    ebx,0xb
c001188c:	68 d7 ad 02 c0       	push   0xc002add7
c0011891:	50                   	push   eax
c0011892:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011895:	89 1d 90 d6 02 c0    	mov    DWORD PTR ds:0xc002d690,ebx
c001189b:	c6 05 98 d6 02 c0 43 	mov    BYTE PTR ds:0xc002d698,0x43
c00118a2:	c1 eb 08             	shr    ebx,0x8
c00118a5:	a3 94 d6 02 c0       	mov    ds:0xc002d694,eax
c00118aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118ad:	c7 05 8c d6 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002d68c,0x8
c00118b7:	e8 27 e1 ff ff       	call   c000f9e3 <malloc>
c00118bc:	83 c4 0c             	add    esp,0xc
c00118bf:	89 c1                	mov    ecx,eax
c00118c1:	a3 4c e8 02 c0       	mov    ds:0xc002e84c,eax
c00118c6:	31 d2                	xor    edx,edx
c00118c8:	a1 90 d6 02 c0       	mov    eax,ds:0xc002d690
c00118cd:	f7 35 8c d6 02 c0    	div    DWORD PTR ds:0xc002d68c
c00118d3:	c1 e8 05             	shr    eax,0x5
c00118d6:	50                   	push   eax
c00118d7:	6a 00                	push   0x0
c00118d9:	51                   	push   ecx
c00118da:	e8 71 ee fe ff       	call   c0000750 <memset>
c00118df:	83 c4 18             	add    esp,0x18
c00118e2:	5b                   	pop    ebx
c00118e3:	c3                   	ret    

c00118e4 <VAS::VAS()>:
c00118e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00118ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118f3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00118fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118fe:	a3 50 e8 02 c0       	mov    ds:0xc002e850,eax
c0011903:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011907:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001190b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001190f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011912:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011916:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c001191d:	90                   	nop
c001191e:	c3                   	ret    
c001191f:	90                   	nop

c0011920 <VAS::VAS(VAS*)>:
c0011920:	83 ec 0c             	sub    esp,0xc
c0011923:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011927:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001192e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011932:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011939:	83 ec 0c             	sub    esp,0xc
c001193c:	68 00 ac 02 c0       	push   0xc002ac00
c0011941:	e8 93 8a 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c0011946:	83 c4 10             	add    esp,0x10
c0011949:	90                   	nop
c001194a:	83 c4 0c             	add    esp,0xc
c001194d:	c3                   	ret    

c001194e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001194e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011952:	89 c2                	mov    edx,eax
c0011954:	c1 e8 0a             	shr    eax,0xa
c0011957:	c1 ea 16             	shr    edx,0x16
c001195a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001195f:	19 c9                	sbb    ecx,ecx
c0011961:	c1 e2 0c             	shl    edx,0xc
c0011964:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c001196a:	25 fc 0f 00 00       	and    eax,0xffc
c001196f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011976:	01 d0                	add    eax,edx
c0011978:	c3                   	ret    
c0011979:	90                   	nop

c001197a <VAS::getPageTableEntry(unsigned long)>:
c001197a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001197e:	89 ca                	mov    edx,ecx
c0011980:	c1 e9 0a             	shr    ecx,0xa
c0011983:	c1 ea 16             	shr    edx,0x16
c0011986:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c001198c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011992:	c1 e0 0c             	shl    eax,0xc
c0011995:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011998:	c3                   	ret    

c0011999 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011999:	57                   	push   edi
c001199a:	56                   	push   esi
c001199b:	be 01 00 00 00       	mov    esi,0x1
c00119a0:	53                   	push   ebx
c00119a1:	83 ec 10             	sub    esp,0x10
c00119a4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00119a8:	c1 eb 0c             	shr    ebx,0xc
c00119ab:	eb 3f                	jmp    c00119ec <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00119ad:	83 ec 08             	sub    esp,0x8
c00119b0:	57                   	push   edi
c00119b1:	ff 35 50 e8 02 c0    	push   DWORD PTR ds:0xc002e850
c00119b7:	e8 be ff ff ff       	call   c001197a <VAS::getPageTableEntry(unsigned long)>
c00119bc:	83 c4 10             	add    esp,0x10
c00119bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00119c1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00119c5:	f6 c4 04             	test   ah,0x4
c00119c8:	75 5f                	jne    c0011a29 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c00119ca:	80 fa 04             	cmp    dl,0x4
c00119cd:	74 78                	je     c0011a47 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c00119cf:	80 fa 02             	cmp    dl,0x2
c00119d2:	0f 84 88 00 00 00    	je     c0011a60 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00119d8:	80 fa 03             	cmp    dl,0x3
c00119db:	0f 84 ad 00 00 00    	je     c0011a8e <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c00119e1:	fe ca                	dec    dl
c00119e3:	0f 84 92 00 00 00    	je     c0011a7b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00119e9:	43                   	inc    ebx
c00119ea:	31 f6                	xor    esi,esi
c00119ec:	53                   	push   ebx
c00119ed:	89 df                	mov    edi,ebx
c00119ef:	e8 51 fc ff ff       	call   c0011645 <Virt::getPageState(unsigned long)>
c00119f4:	c1 e7 0c             	shl    edi,0xc
c00119f7:	59                   	pop    ecx
c00119f8:	84 c0                	test   al,al
c00119fa:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00119fe:	75 ad                	jne    c00119ad <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011a00:	83 ec 0c             	sub    esp,0xc
c0011a03:	68 ee ad 02 c0       	push   0xc002adee
c0011a08:	e8 cc 89 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c0011a0d:	58                   	pop    eax
c0011a0e:	5a                   	pop    edx
c0011a0f:	57                   	push   edi
c0011a10:	ff 35 50 e8 02 c0    	push   DWORD PTR ds:0xc002e850
c0011a16:	e8 5f ff ff ff       	call   c001197a <VAS::getPageTableEntry(unsigned long)>
c0011a1b:	83 c4 10             	add    esp,0x10
c0011a1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a20:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a24:	f6 c4 04             	test   ah,0x4
c0011a27:	74 c0                	je     c00119e9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a29:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011a2d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011a32:	83 ec 0c             	sub    esp,0xc
c0011a35:	50                   	push   eax
c0011a36:	e8 33 e3 ff ff       	call   c000fd6e <Phys::freePage(unsigned long)>
c0011a3b:	83 c4 10             	add    esp,0x10
c0011a3e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a42:	80 fa 04             	cmp    dl,0x4
c0011a45:	75 88                	jne    c00119cf <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011a47:	89 f0                	mov    eax,esi
c0011a49:	84 c0                	test   al,al
c0011a4b:	75 47                	jne    c0011a94 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011a4d:	c7 44 24 20 24 ac 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ac24
c0011a55:	83 c4 10             	add    esp,0x10
c0011a58:	5b                   	pop    ebx
c0011a59:	5e                   	pop    esi
c0011a5a:	5f                   	pop    edi
c0011a5b:	e9 79 89 00 00       	jmp    c001a3d9 <Krnl::panic(char const*)>
c0011a60:	89 f0                	mov    eax,esi
c0011a62:	84 c0                	test   al,al
c0011a64:	75 15                	jne    c0011a7b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011a66:	83 ec 0c             	sub    esp,0xc
c0011a69:	68 0a ae 02 c0       	push   0xc002ae0a
c0011a6e:	e8 66 89 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c0011a73:	83 c4 10             	add    esp,0x10
c0011a76:	e9 6e ff ff ff       	jmp    c00119e9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a7b:	83 ec 08             	sub    esp,0x8
c0011a7e:	6a 00                	push   0x0
c0011a80:	53                   	push   ebx
c0011a81:	e8 8a fb ff ff       	call   c0011610 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a86:	83 c4 10             	add    esp,0x10
c0011a89:	e9 5b ff ff ff       	jmp    c00119e9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a8e:	89 f0                	mov    eax,esi
c0011a90:	84 c0                	test   al,al
c0011a92:	75 15                	jne    c0011aa9 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011a94:	83 ec 08             	sub    esp,0x8
c0011a97:	6a 00                	push   0x0
c0011a99:	53                   	push   ebx
c0011a9a:	e8 71 fb ff ff       	call   c0011610 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a9f:	83 c4 10             	add    esp,0x10
c0011aa2:	83 c4 10             	add    esp,0x10
c0011aa5:	5b                   	pop    ebx
c0011aa6:	5e                   	pop    esi
c0011aa7:	5f                   	pop    edi
c0011aa8:	c3                   	ret    
c0011aa9:	c7 44 24 20 26 ae 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ae26
c0011ab1:	83 c4 10             	add    esp,0x10
c0011ab4:	5b                   	pop    ebx
c0011ab5:	5e                   	pop    esi
c0011ab6:	5f                   	pop    edi
c0011ab7:	e9 1d 89 00 00       	jmp    c001a3d9 <Krnl::panic(char const*)>

c0011abc <VAS::freeAllocatedPages(unsigned long)>:
c0011abc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ac0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011ac4:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011ac8:	74 09                	je     c0011ad3 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011aca:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011ace:	e9 c6 fe ff ff       	jmp    c0011999 <Virt::freeKernelVirtualPages(unsigned long)>
c0011ad3:	c7 44 24 04 48 ac 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ac48
c0011adb:	e9 5b 0f 00 00       	jmp    c0012a3b <Dbg::kprintf(char const*, ...)>

c0011ae0 <VAS::virtualToPhysical(unsigned long)>:
c0011ae0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011ae4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011ae8:	e8 8d fe ff ff       	call   c001197a <VAS::getPageTableEntry(unsigned long)>
c0011aed:	5a                   	pop    edx
c0011aee:	8b 00                	mov    eax,DWORD PTR [eax]
c0011af0:	59                   	pop    ecx
c0011af1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011af6:	c3                   	ret    
c0011af7:	90                   	nop

c0011af8 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011af8:	55                   	push   ebp
c0011af9:	57                   	push   edi
c0011afa:	56                   	push   esi
c0011afb:	53                   	push   ebx
c0011afc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011b00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011b04:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011b08:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011b0c:	85 db                	test   ebx,ebx
c0011b0e:	7e 22                	jle    c0011b32 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011b10:	c1 e3 0c             	shl    ebx,0xc
c0011b13:	01 f3                	add    ebx,esi
c0011b15:	56                   	push   esi
c0011b16:	81 c6 00 10 00 00    	add    esi,0x1000
c0011b1c:	55                   	push   ebp
c0011b1d:	e8 58 fe ff ff       	call   c001197a <VAS::getPageTableEntry(unsigned long)>
c0011b22:	5a                   	pop    edx
c0011b23:	59                   	pop    ecx
c0011b24:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011b26:	21 f9                	and    ecx,edi
c0011b28:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011b2c:	39 f3                	cmp    ebx,esi
c0011b2e:	89 08                	mov    DWORD PTR [eax],ecx
c0011b30:	75 e3                	jne    c0011b15 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011b32:	5b                   	pop    ebx
c0011b33:	5e                   	pop    esi
c0011b34:	5f                   	pop    edi
c0011b35:	5d                   	pop    ebp
c0011b36:	c3                   	ret    
c0011b37:	90                   	nop

c0011b38 <VAS::setToWriteCombining(unsigned long, int)>:
c0011b38:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0011b3d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011b43:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011b4a:	75 01                	jne    c0011b4d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011b4c:	c3                   	ret    
c0011b4d:	68 80 00 00 00       	push   0x80
c0011b52:	6a ff                	push   0xffffffff
c0011b54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b60:	e8 93 ff ff ff       	call   c0011af8 <VAS::reflagRange(unsigned long, int, int, int)>
c0011b65:	83 c4 14             	add    esp,0x14
c0011b68:	c3                   	ret    
c0011b69:	90                   	nop

c0011b6a <VAS::mapOtherVASIn(bool, VAS*)>:
c0011b6a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b73:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011b76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b7a:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0011b7d:	19 c0                	sbb    eax,eax
c0011b7f:	83 ca 03             	or     edx,0x3
c0011b82:	83 e0 fc             	and    eax,0xfffffffc
c0011b85:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011b8c:	0f 20 d8             	mov    eax,cr3
c0011b8f:	0f 22 d8             	mov    cr3,eax
c0011b92:	c3                   	ret    
c0011b93:	90                   	nop

c0011b94 <VAS::~VAS()>:
c0011b94:	83 ec 2c             	sub    esp,0x2c
c0011b97:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011b9f:	fa                   	cli    
c0011ba0:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c0011ba5:	40                   	inc    eax
c0011ba6:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c0011bab:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011bb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bb2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011bb5:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011bbb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011bbf:	6a 01                	push   0x1
c0011bc1:	50                   	push   eax
c0011bc2:	e8 a3 ff ff ff       	call   c0011b6a <VAS::mapOtherVASIn(bool, VAS*)>
c0011bc7:	83 c4 0c             	add    esp,0xc
c0011bca:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011bd2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011bda:	0f 8f d4 00 00 00    	jg     c0011cb4 <VAS::~VAS()+0x120>
c0011be0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011be4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011be7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011beb:	c1 e2 02             	shl    edx,0x2
c0011bee:	01 d0                	add    eax,edx
c0011bf0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bf2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011bf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bfa:	83 e0 01             	and    eax,0x1
c0011bfd:	0f 84 a8 00 00 00    	je     c0011cab <VAS::~VAS()+0x117>
c0011c03:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011c0b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011c13:	7f 72                	jg     c0011c87 <VAS::~VAS()+0xf3>
c0011c15:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c19:	c1 e0 0a             	shl    eax,0xa
c0011c1c:	89 c2                	mov    edx,eax
c0011c1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c22:	01 d0                	add    eax,edx
c0011c24:	c1 e0 0c             	shl    eax,0xc
c0011c27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c2b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011c30:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c32:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c35:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011c3b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011c3f:	6a 01                	push   0x1
c0011c41:	50                   	push   eax
c0011c42:	e8 07 fd ff ff       	call   c001194e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011c47:	83 c4 0c             	add    esp,0xc
c0011c4a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011c4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c52:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c54:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c5c:	25 01 04 00 00       	and    eax,0x401
c0011c61:	3d 01 04 00 00       	cmp    eax,0x401
c0011c66:	75 19                	jne    c0011c81 <VAS::~VAS()+0xed>
c0011c68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c6c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c71:	83 ec 0c             	sub    esp,0xc
c0011c74:	50                   	push   eax
c0011c75:	e8 f4 e0 ff ff       	call   c000fd6e <Phys::freePage(unsigned long)>
c0011c7a:	83 c4 10             	add    esp,0x10
c0011c7d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011c81:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011c85:	eb 84                	jmp    c0011c0b <VAS::~VAS()+0x77>
c0011c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c8b:	25 00 04 00 00       	and    eax,0x400
c0011c90:	74 19                	je     c0011cab <VAS::~VAS()+0x117>
c0011c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c96:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c9b:	83 ec 0c             	sub    esp,0xc
c0011c9e:	50                   	push   eax
c0011c9f:	e8 ca e0 ff ff       	call   c000fd6e <Phys::freePage(unsigned long)>
c0011ca4:	83 c4 10             	add    esp,0x10
c0011ca7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011cab:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011caf:	e9 1e ff ff ff       	jmp    c0011bd2 <VAS::~VAS()+0x3e>
c0011cb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cb8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011cbb:	83 ec 0c             	sub    esp,0xc
c0011cbe:	50                   	push   eax
c0011cbf:	e8 d5 fc ff ff       	call   c0011999 <Virt::freeKernelVirtualPages(unsigned long)>
c0011cc4:	83 c4 10             	add    esp,0x10
c0011cc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ccb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011cce:	83 ec 0c             	sub    esp,0xc
c0011cd1:	50                   	push   eax
c0011cd2:	e8 97 e0 ff ff       	call   c000fd6e <Phys::freePage(unsigned long)>
c0011cd7:	83 c4 10             	add    esp,0x10
c0011cda:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011cde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011ce2:	c1 e0 02             	shl    eax,0x2
c0011ce5:	83 ec 08             	sub    esp,0x8
c0011ce8:	50                   	push   eax
c0011ce9:	68 6c ac 02 c0       	push   0xc002ac6c
c0011cee:	e8 48 0d 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0011cf3:	83 c4 10             	add    esp,0x10
c0011cf6:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c0011cfb:	48                   	dec    eax
c0011cfc:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c0011d01:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c0011d06:	85 c0                	test   eax,eax
c0011d08:	75 01                	jne    c0011d0b <VAS::~VAS()+0x177>
c0011d0a:	fb                   	sti    
c0011d0b:	90                   	nop
c0011d0c:	83 c4 2c             	add    esp,0x2c
c0011d0f:	c3                   	ret    

c0011d10 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011d10:	55                   	push   ebp
c0011d11:	57                   	push   edi
c0011d12:	56                   	push   esi
c0011d13:	53                   	push   ebx
c0011d14:	83 ec 1c             	sub    esp,0x1c
c0011d17:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011d1b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011d1f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011d25:	77 08                	ja     c0011d2f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011d27:	0f 20 d8             	mov    eax,cr3
c0011d2a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011d2d:	75 47                	jne    c0011d76 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011d2f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d33:	09 d8                	or     eax,ebx
c0011d35:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d3a:	75 57                	jne    c0011d93 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011d3c:	89 de                	mov    esi,ebx
c0011d3e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011d41:	c1 ee 16             	shr    esi,0x16
c0011d44:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011d4b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011d4f:	74 54                	je     c0011da5 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011d51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d55:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011d5b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011d5f:	c1 e6 0c             	shl    esi,0xc
c0011d62:	c1 eb 0a             	shr    ebx,0xa
c0011d65:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011d6b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011d6e:	83 c4 1c             	add    esp,0x1c
c0011d71:	5b                   	pop    ebx
c0011d72:	5e                   	pop    esi
c0011d73:	5f                   	pop    edi
c0011d74:	5d                   	pop    ebp
c0011d75:	c3                   	ret    
c0011d76:	83 ec 0c             	sub    esp,0xc
c0011d79:	68 8c ac 02 c0       	push   0xc002ac8c
c0011d7e:	e8 b8 0c 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0011d83:	83 c4 10             	add    esp,0x10
c0011d86:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d8a:	09 d8                	or     eax,ebx
c0011d8c:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d91:	74 a9                	je     c0011d3c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011d93:	83 ec 0c             	sub    esp,0xc
c0011d96:	68 f4 ac 02 c0       	push   0xc002acf4
c0011d9b:	e8 39 86 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c0011da0:	83 c4 10             	add    esp,0x10
c0011da3:	eb 97                	jmp    c0011d3c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011da5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011da9:	e8 31 e0 ff ff       	call   c000fddf <Phys::allocatePage()>
c0011dae:	83 ec 0c             	sub    esp,0xc
c0011db1:	89 c5                	mov    ebp,eax
c0011db3:	8b 0d 50 e8 02 c0    	mov    ecx,DWORD PTR ds:0xc002e850
c0011db9:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011dbd:	6a 01                	push   0x1
c0011dbf:	e8 a5 f8 ff ff       	call   c0011669 <Virt::allocateKernelVirtualPages(int)>
c0011dc4:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011dcb:	6a 01                	push   0x1
c0011dcd:	50                   	push   eax
c0011dce:	55                   	push   ebp
c0011dcf:	81 cd 07 04 00 00    	or     ebp,0x407
c0011dd5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011dd9:	51                   	push   ecx
c0011dda:	e8 27 02 00 00       	call   c0012006 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011ddf:	83 c4 1c             	add    esp,0x1c
c0011de2:	68 00 10 00 00       	push   0x1000
c0011de7:	6a 00                	push   0x0
c0011de9:	50                   	push   eax
c0011dea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011dee:	e8 5d e9 fe ff       	call   c0000750 <memset>
c0011df3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011df7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011dfa:	e8 9a fb ff ff       	call   c0011999 <Virt::freeKernelVirtualPages(unsigned long)>
c0011dff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e03:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011e06:	83 c4 10             	add    esp,0x10
c0011e09:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011e0c:	e9 40 ff ff ff       	jmp    c0011d51 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011e11:	90                   	nop

c0011e12 <VAS::allocatePages(int, int)>:
c0011e12:	55                   	push   ebp
c0011e13:	57                   	push   edi
c0011e14:	56                   	push   esi
c0011e15:	53                   	push   ebx
c0011e16:	83 ec 1c             	sub    esp,0x1c
c0011e19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011e1d:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0011e22:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e28:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011e2e:	83 e0 01             	and    eax,0x1
c0011e31:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011e35:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011e39:	0f 85 cc 00 00 00    	jne    c0011f0b <VAS::allocatePages(int, int)+0xf9>
c0011e3f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011e42:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e46:	85 c0                	test   eax,eax
c0011e48:	0f 84 a1 00 00 00    	je     c0011eef <VAS::allocatePages(int, int)+0xdd>
c0011e4e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011e52:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e56:	c1 e6 0c             	shl    esi,0xc
c0011e59:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011e5d:	85 c0                	test   eax,eax
c0011e5f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011e62:	7e 33                	jle    c0011e97 <VAS::allocatePages(int, int)+0x85>
c0011e64:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011e68:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011e6c:	81 cd 00 04 00 00    	or     ebp,0x400
c0011e72:	e8 68 df ff ff       	call   c000fddf <Phys::allocatePage()>
c0011e77:	55                   	push   ebp
c0011e78:	53                   	push   ebx
c0011e79:	50                   	push   eax
c0011e7a:	57                   	push   edi
c0011e7b:	e8 90 fe ff ff       	call   c0011d10 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011e80:	83 c4 10             	add    esp,0x10
c0011e83:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011e88:	74 03                	je     c0011e8d <VAS::allocatePages(int, int)+0x7b>
c0011e8a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011e8d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011e93:	39 de                	cmp    esi,ebx
c0011e95:	75 db                	jne    c0011e72 <VAS::allocatePages(int, int)+0x60>
c0011e97:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011e9c:	75 12                	jne    c0011eb0 <VAS::allocatePages(int, int)+0x9e>
c0011e9e:	0f 20 d8             	mov    eax,cr3
c0011ea1:	0f 22 d8             	mov    cr3,eax
c0011ea4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ea8:	83 c4 1c             	add    esp,0x1c
c0011eab:	5b                   	pop    ebx
c0011eac:	5e                   	pop    esi
c0011ead:	5f                   	pop    edi
c0011eae:	5d                   	pop    ebp
c0011eaf:	c3                   	ret    
c0011eb0:	c1 ee 0a             	shr    esi,0xa
c0011eb3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011eb7:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011ebd:	c1 eb 0a             	shr    ebx,0xa
c0011ec0:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011ec6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011ecc:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011ed2:	39 c3                	cmp    ebx,eax
c0011ed4:	77 ce                	ja     c0011ea4 <VAS::allocatePages(int, int)+0x92>
c0011ed6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ed9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011edf:	39 d8                	cmp    eax,ebx
c0011ee1:	73 f3                	jae    c0011ed6 <VAS::allocatePages(int, int)+0xc4>
c0011ee3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ee7:	83 c4 1c             	add    esp,0x1c
c0011eea:	5b                   	pop    ebx
c0011eeb:	5e                   	pop    esi
c0011eec:	5f                   	pop    edi
c0011eed:	5d                   	pop    ebp
c0011eee:	c3                   	ret    
c0011eef:	83 ec 0c             	sub    esp,0xc
c0011ef2:	68 18 ad 02 c0       	push   0xc002ad18
c0011ef7:	e8 dd 84 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c0011efc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011eff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f03:	83 c4 10             	add    esp,0x10
c0011f06:	e9 43 ff ff ff       	jmp    c0011e4e <VAS::allocatePages(int, int)+0x3c>
c0011f0b:	83 ec 0c             	sub    esp,0xc
c0011f0e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011f12:	e8 52 f7 ff ff       	call   c0011669 <Virt::allocateKernelVirtualPages(int)>
c0011f17:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f1b:	83 c4 10             	add    esp,0x10
c0011f1e:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011f23:	0f 87 9b 00 00 00    	ja     c0011fc4 <VAS::allocatePages(int, int)+0x1b2>
c0011f29:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011f2d:	85 d2                	test   edx,edx
c0011f2f:	7e 3c                	jle    c0011f6d <VAS::allocatePages(int, int)+0x15b>
c0011f31:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011f35:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011f39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011f3d:	c1 e5 0c             	shl    ebp,0xc
c0011f40:	81 ce 00 04 00 00    	or     esi,0x400
c0011f46:	01 dd                	add    ebp,ebx
c0011f48:	e8 92 de ff ff       	call   c000fddf <Phys::allocatePage()>
c0011f4d:	56                   	push   esi
c0011f4e:	53                   	push   ebx
c0011f4f:	50                   	push   eax
c0011f50:	57                   	push   edi
c0011f51:	e8 ba fd ff ff       	call   c0011d10 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f56:	83 c4 10             	add    esp,0x10
c0011f59:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f5e:	74 03                	je     c0011f63 <VAS::allocatePages(int, int)+0x151>
c0011f60:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f63:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f69:	39 dd                	cmp    ebp,ebx
c0011f6b:	75 db                	jne    c0011f48 <VAS::allocatePages(int, int)+0x136>
c0011f6d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f72:	0f 84 26 ff ff ff    	je     c0011e9e <VAS::allocatePages(int, int)+0x8c>
c0011f78:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f7c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f80:	89 d3                	mov    ebx,edx
c0011f82:	c1 e0 0c             	shl    eax,0xc
c0011f85:	c1 eb 0a             	shr    ebx,0xa
c0011f88:	01 d0                	add    eax,edx
c0011f8a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011f90:	c1 e8 0a             	shr    eax,0xa
c0011f93:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011f99:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f9e:	2d 00 00 40 00       	sub    eax,0x400000
c0011fa3:	39 c3                	cmp    ebx,eax
c0011fa5:	0f 87 f9 fe ff ff    	ja     c0011ea4 <VAS::allocatePages(int, int)+0x92>
c0011fab:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011fae:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011fb4:	39 d8                	cmp    eax,ebx
c0011fb6:	73 f3                	jae    c0011fab <VAS::allocatePages(int, int)+0x199>
c0011fb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fbc:	83 c4 1c             	add    esp,0x1c
c0011fbf:	5b                   	pop    ebx
c0011fc0:	5e                   	pop    esi
c0011fc1:	5f                   	pop    edi
c0011fc2:	5d                   	pop    ebp
c0011fc3:	c3                   	ret    
c0011fc4:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0011fc9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fcf:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011fd6:	0f 84 4d ff ff ff    	je     c0011f29 <VAS::allocatePages(int, int)+0x117>
c0011fdc:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011fe4:	e9 40 ff ff ff       	jmp    c0011f29 <VAS::allocatePages(int, int)+0x117>
c0011fe9:	90                   	nop

c0011fea <VAS::setCPUSpecific(unsigned long)>:
c0011fea:	83 ec 0c             	sub    esp,0xc
c0011fed:	6a 05                	push   0x5
c0011fef:	68 00 00 40 c2       	push   0xc2400000
c0011ff4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ff8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ffc:	e8 0f fd ff ff       	call   c0011d10 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012001:	83 c4 1c             	add    esp,0x1c
c0012004:	c3                   	ret    
c0012005:	90                   	nop

c0012006 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012006:	55                   	push   ebp
c0012007:	57                   	push   edi
c0012008:	56                   	push   esi
c0012009:	53                   	push   ebx
c001200a:	83 ec 1c             	sub    esp,0x1c
c001200d:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0012012:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012016:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001201c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012020:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012026:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001202a:	83 e0 01             	and    eax,0x1
c001202d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012031:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012035:	85 c0                	test   eax,eax
c0012037:	7e 39                	jle    c0012072 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012039:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001203d:	89 f3                	mov    ebx,esi
c001203f:	c1 e0 0c             	shl    eax,0xc
c0012042:	01 f0                	add    eax,esi
c0012044:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012048:	55                   	push   ebp
c0012049:	53                   	push   ebx
c001204a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001204e:	29 f0                	sub    eax,esi
c0012050:	01 d8                	add    eax,ebx
c0012052:	50                   	push   eax
c0012053:	57                   	push   edi
c0012054:	e8 b7 fc ff ff       	call   c0011d10 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012059:	83 c4 10             	add    esp,0x10
c001205c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012061:	74 03                	je     c0012066 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012063:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012066:	81 c3 00 10 00 00    	add    ebx,0x1000
c001206c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012070:	75 d6                	jne    c0012048 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012072:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012077:	75 10                	jne    c0012089 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012079:	0f 20 d8             	mov    eax,cr3
c001207c:	0f 22 d8             	mov    cr3,eax
c001207f:	83 c4 1c             	add    esp,0x1c
c0012082:	89 f0                	mov    eax,esi
c0012084:	5b                   	pop    ebx
c0012085:	5e                   	pop    esi
c0012086:	5f                   	pop    edi
c0012087:	5d                   	pop    ebp
c0012088:	c3                   	ret    
c0012089:	89 f3                	mov    ebx,esi
c001208b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001208f:	c1 eb 0a             	shr    ebx,0xa
c0012092:	c1 e0 0c             	shl    eax,0xc
c0012095:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001209b:	01 f0                	add    eax,esi
c001209d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00120a3:	c1 e8 0a             	shr    eax,0xa
c00120a6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120ab:	2d 00 00 40 00       	sub    eax,0x400000
c00120b0:	39 c3                	cmp    ebx,eax
c00120b2:	77 cb                	ja     c001207f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00120b4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120b7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120bd:	39 d8                	cmp    eax,ebx
c00120bf:	73 f3                	jae    c00120b4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00120c1:	83 c4 1c             	add    esp,0x1c
c00120c4:	89 f0                	mov    eax,esi
c00120c6:	5b                   	pop    ebx
c00120c7:	5e                   	pop    esi
c00120c8:	5f                   	pop    edi
c00120c9:	5d                   	pop    ebp
c00120ca:	c3                   	ret    
c00120cb:	90                   	nop

c00120cc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00120cc:	55                   	push   ebp
c00120cd:	57                   	push   edi
c00120ce:	56                   	push   esi
c00120cf:	53                   	push   ebx
c00120d0:	83 ec 1c             	sub    esp,0x1c
c00120d3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00120d7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00120db:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00120df:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00120e3:	a9 ff 0f 00 00       	test   eax,0xfff
c00120e8:	75 4a                	jne    c0012134 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00120ea:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00120ee:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00120f1:	c1 eb 16             	shr    ebx,0x16
c00120f4:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00120fb:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00120ff:	74 4d                	je     c001214e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012101:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012105:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012109:	c1 e8 0a             	shr    eax,0xa
c001210c:	80 fa 01             	cmp    dl,0x1
c001210f:	19 d2                	sbb    edx,edx
c0012111:	c1 e3 0c             	shl    ebx,0xc
c0012114:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012118:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001211e:	25 fc 0f 00 00       	and    eax,0xffc
c0012123:	01 d8                	add    eax,ebx
c0012125:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001212c:	83 c4 1c             	add    esp,0x1c
c001212f:	5b                   	pop    ebx
c0012130:	5e                   	pop    esi
c0012131:	5f                   	pop    edi
c0012132:	5d                   	pop    ebp
c0012133:	c3                   	ret    
c0012134:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012138:	83 ec 0c             	sub    esp,0xc
c001213b:	68 44 ad 02 c0       	push   0xc002ad44
c0012140:	e8 94 82 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c0012145:	83 c4 10             	add    esp,0x10
c0012148:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001214c:	eb 9c                	jmp    c00120ea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001214e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012152:	e8 88 dc ff ff       	call   c000fddf <Phys::allocatePage()>
c0012157:	83 ec 0c             	sub    esp,0xc
c001215a:	89 c5                	mov    ebp,eax
c001215c:	8b 0d 50 e8 02 c0    	mov    ecx,DWORD PTR ds:0xc002e850
c0012162:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012166:	6a 01                	push   0x1
c0012168:	e8 fc f4 ff ff       	call   c0011669 <Virt::allocateKernelVirtualPages(int)>
c001216d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012174:	6a 01                	push   0x1
c0012176:	50                   	push   eax
c0012177:	55                   	push   ebp
c0012178:	81 cd 07 04 00 00    	or     ebp,0x407
c001217e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012182:	51                   	push   ecx
c0012183:	e8 7e fe ff ff       	call   c0012006 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012188:	83 c4 1c             	add    esp,0x1c
c001218b:	68 00 10 00 00       	push   0x1000
c0012190:	6a 00                	push   0x0
c0012192:	50                   	push   eax
c0012193:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012197:	e8 b4 e5 fe ff       	call   c0000750 <memset>
c001219c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00121a0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00121a3:	e8 f1 f7 ff ff       	call   c0011999 <Virt::freeKernelVirtualPages(unsigned long)>
c00121a8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00121ab:	83 c4 10             	add    esp,0x10
c00121ae:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00121b1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00121b5:	e9 47 ff ff ff       	jmp    c0012101 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c00121ba <VAS::VAS(bool)>:
c00121ba:	53                   	push   ebx
c00121bb:	83 ec 28             	sub    esp,0x28
c00121be:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00121c2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00121c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121ca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00121d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121d5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00121dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121e0:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00121e4:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00121e7:	e8 f3 db ff ff       	call   c000fddf <Phys::allocatePage()>
c00121ec:	89 c2                	mov    edx,eax
c00121ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121f2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00121f5:	8b 1d 50 e8 02 c0    	mov    ebx,DWORD PTR ds:0xc002e850
c00121fb:	83 ec 0c             	sub    esp,0xc
c00121fe:	6a 01                	push   0x1
c0012200:	e8 64 f4 ff ff       	call   c0011669 <Virt::allocateKernelVirtualPages(int)>
c0012205:	83 c4 10             	add    esp,0x10
c0012208:	89 c2                	mov    edx,eax
c001220a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001220e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012211:	83 ec 0c             	sub    esp,0xc
c0012214:	6a 03                	push   0x3
c0012216:	6a 01                	push   0x1
c0012218:	52                   	push   edx
c0012219:	50                   	push   eax
c001221a:	53                   	push   ebx
c001221b:	e8 e6 fd ff ff       	call   c0012006 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012220:	83 c4 20             	add    esp,0x20
c0012223:	89 c2                	mov    edx,eax
c0012225:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012229:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001222c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012234:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001223c:	7f 1c                	jg     c001225a <VAS::VAS(bool)+0xa0>
c001223e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012242:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012245:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012249:	c1 e2 02             	shl    edx,0x2
c001224c:	01 d0                	add    eax,edx
c001224e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012254:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012258:	eb da                	jmp    c0012234 <VAS::VAS(bool)+0x7a>
c001225a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012262:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001226a:	7f 7a                	jg     c00122e6 <VAS::VAS(bool)+0x12c>
c001226c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012270:	2d 00 02 00 00       	sub    eax,0x200
c0012275:	c1 e0 0c             	shl    eax,0xc
c0012278:	83 c8 03             	or     eax,0x3
c001227b:	89 c2                	mov    edx,eax
c001227d:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0012282:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012288:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001228e:	83 e0 10             	and    eax,0x10
c0012291:	84 c0                	test   al,al
c0012293:	74 07                	je     c001229c <VAS::VAS(bool)+0xe2>
c0012295:	b8 00 01 00 00       	mov    eax,0x100
c001229a:	eb 05                	jmp    c00122a1 <VAS::VAS(bool)+0xe7>
c001229c:	b8 00 00 00 00       	mov    eax,0x0
c00122a1:	09 d0                	or     eax,edx
c00122a3:	89 c1                	mov    ecx,eax
c00122a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122a9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00122ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122b0:	c1 e2 02             	shl    edx,0x2
c00122b3:	01 d0                	add    eax,edx
c00122b5:	89 ca                	mov    edx,ecx
c00122b7:	89 10                	mov    DWORD PTR [eax],edx
c00122b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122bd:	2d 40 03 00 00       	sub    eax,0x340
c00122c2:	83 f8 7f             	cmp    eax,0x7f
c00122c5:	77 16                	ja     c00122dd <VAS::VAS(bool)+0x123>
c00122c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122cb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00122ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122d2:	c1 e2 02             	shl    edx,0x2
c00122d5:	01 d0                	add    eax,edx
c00122d7:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00122dd:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00122e1:	e9 7c ff ff ff       	jmp    c0012262 <VAS::VAS(bool)+0xa8>
c00122e6:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c00122eb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122f1:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00122f7:	83 e0 10             	and    eax,0x10
c00122fa:	84 c0                	test   al,al
c00122fc:	74 07                	je     c0012305 <VAS::VAS(bool)+0x14b>
c00122fe:	b8 03 41 00 00       	mov    eax,0x4103
c0012303:	eb 05                	jmp    c001230a <VAS::VAS(bool)+0x150>
c0012305:	b8 03 40 00 00       	mov    eax,0x4003
c001230a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001230e:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012311:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012317:	89 02                	mov    DWORD PTR [edx],eax
c0012319:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c001231e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012324:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001232a:	83 ec 08             	sub    esp,0x8
c001232d:	50                   	push   eax
c001232e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012332:	e8 b3 fc ff ff       	call   c0011fea <VAS::setCPUSpecific(unsigned long)>
c0012337:	83 c4 10             	add    esp,0x10
c001233a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001233e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012341:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0012346:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001234c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012352:	83 e0 10             	and    eax,0x10
c0012355:	84 c0                	test   al,al
c0012357:	74 07                	je     c0012360 <VAS::VAS(bool)+0x1a6>
c0012359:	b8 00 01 00 00       	mov    eax,0x100
c001235e:	eb 05                	jmp    c0012365 <VAS::VAS(bool)+0x1ab>
c0012360:	b8 00 00 00 00       	mov    eax,0x0
c0012365:	09 c2                	or     edx,eax
c0012367:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001236b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001236e:	05 fc 0f 00 00       	add    eax,0xffc
c0012373:	83 ca 03             	or     edx,0x3
c0012376:	89 10                	mov    DWORD PTR [eax],edx
c0012378:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c001237d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012383:	83 ec 0c             	sub    esp,0xc
c0012386:	50                   	push   eax
c0012387:	e8 e8 1d 00 00       	call   c0014174 <Device::getName()>
c001238c:	83 c4 10             	add    esp,0x10
c001238f:	83 ec 08             	sub    esp,0x8
c0012392:	68 40 ae 02 c0       	push   0xc002ae40
c0012397:	50                   	push   eax
c0012398:	e8 fb e4 fe ff       	call   c0000898 <strcmp>
c001239d:	83 c4 10             	add    esp,0x10
c00123a0:	85 c0                	test   eax,eax
c00123a2:	0f 94 c0             	sete   al
c00123a5:	84 c0                	test   al,al
c00123a7:	0f 84 87 00 00 00    	je     c0012434 <VAS::VAS(bool)+0x27a>
c00123ad:	fa                   	cli    
c00123ae:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c00123b3:	40                   	inc    eax
c00123b4:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c00123b9:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c00123be:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123c4:	05 7c 09 00 00       	add    eax,0x97c
c00123c9:	83 ec 0c             	sub    esp,0xc
c00123cc:	50                   	push   eax
c00123cd:	e8 48 cf ff ff       	call   c000f31a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00123d2:	83 c4 10             	add    esp,0x10
c00123d5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00123da:	89 c3                	mov    ebx,eax
c00123dc:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c00123e1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123e7:	05 7c 09 00 00       	add    eax,0x97c
c00123ec:	83 ec 0c             	sub    esp,0xc
c00123ef:	50                   	push   eax
c00123f0:	e8 25 cf ff ff       	call   c000f31a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00123f5:	83 c4 10             	add    esp,0x10
c00123f8:	83 ec 08             	sub    esp,0x8
c00123fb:	50                   	push   eax
c00123fc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012400:	e8 75 f5 ff ff       	call   c001197a <VAS::getPageTableEntry(unsigned long)>
c0012405:	83 c4 10             	add    esp,0x10
c0012408:	8b 00                	mov    eax,DWORD PTR [eax]
c001240a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001240f:	6a 11                	push   0x11
c0012411:	53                   	push   ebx
c0012412:	50                   	push   eax
c0012413:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012417:	e8 f4 f8 ff ff       	call   c0011d10 <VAS::mapPage(unsigned long, unsigned long, int)>
c001241c:	83 c4 10             	add    esp,0x10
c001241f:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c0012424:	48                   	dec    eax
c0012425:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c001242a:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001242f:	85 c0                	test   eax,eax
c0012431:	75 01                	jne    c0012434 <VAS::VAS(bool)+0x27a>
c0012433:	fb                   	sti    
c0012434:	90                   	nop
c0012435:	83 c4 28             	add    esp,0x28
c0012438:	5b                   	pop    ebx
c0012439:	c3                   	ret    

c001243a <VAS::evict(unsigned long)>:
c001243a:	55                   	push   ebp
c001243b:	57                   	push   edi
c001243c:	56                   	push   esi
c001243d:	53                   	push   ebx
c001243e:	83 ec 28             	sub    esp,0x28
c0012441:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012445:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012449:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001244d:	68 4e ae 02 c0       	push   0xc002ae4e
c0012452:	e8 e4 05 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0012457:	e8 4e f3 ff ff       	call   c00117aa <Virt::allocateSwapfilePage()>
c001245c:	5a                   	pop    edx
c001245d:	89 c7                	mov    edi,eax
c001245f:	59                   	pop    ecx
c0012460:	50                   	push   eax
c0012461:	68 6b ae 02 c0       	push   0xc002ae6b
c0012466:	e8 d0 05 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001246b:	83 c4 10             	add    esp,0x10
c001246e:	8b 1d 8c d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d68c
c0012474:	85 db                	test   ebx,ebx
c0012476:	7e 3d                	jle    c00124b5 <VAS::evict(unsigned long)+0x7b>
c0012478:	89 ee                	mov    esi,ebp
c001247a:	31 db                	xor    ebx,ebx
c001247c:	83 ec 0c             	sub    esp,0xc
c001247f:	57                   	push   edi
c0012480:	e8 13 f3 ff ff       	call   c0011798 <Virt::swapIDToSector(unsigned long)>
c0012485:	89 34 24             	mov    DWORD PTR [esp],esi
c0012488:	01 d8                	add    eax,ebx
c001248a:	6a 01                	push   0x1
c001248c:	31 d2                	xor    edx,edx
c001248e:	43                   	inc    ebx
c001248f:	52                   	push   edx
c0012490:	81 c6 00 02 00 00    	add    esi,0x200
c0012496:	50                   	push   eax
c0012497:	0f be 05 98 d6 02 c0 	movsx  eax,BYTE PTR ds:0xc002d698
c001249e:	ff 34 85 dc eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd1424]
c00124a5:	e8 58 3f 00 00       	call   c0016402 <LogicalDisk::write(unsigned long long, int, void*)>
c00124aa:	83 c4 20             	add    esp,0x20
c00124ad:	39 1d 8c d6 02 c0    	cmp    DWORD PTR ds:0xc002d68c,ebx
c00124b3:	7f c7                	jg     c001247c <VAS::evict(unsigned long)+0x42>
c00124b5:	83 ec 08             	sub    esp,0x8
c00124b8:	c1 e7 0b             	shl    edi,0xb
c00124bb:	55                   	push   ebp
c00124bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00124c0:	e8 b5 f4 ff ff       	call   c001197a <VAS::getPageTableEntry(unsigned long)>
c00124c5:	5a                   	pop    edx
c00124c6:	89 c6                	mov    esi,eax
c00124c8:	59                   	pop    ecx
c00124c9:	ff 30                	push   DWORD PTR [eax]
c00124cb:	68 7b ae 02 c0       	push   0xc002ae7b
c00124d0:	e8 66 05 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c00124d5:	8b 16                	mov    edx,DWORD PTR [esi]
c00124d7:	89 d3                	mov    ebx,edx
c00124d9:	81 e2 fe 07 00 00    	and    edx,0x7fe
c00124df:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00124e5:	09 d7                	or     edi,edx
c00124e7:	89 3e                	mov    DWORD PTR [esi],edi
c00124e9:	5e                   	pop    esi
c00124ea:	58                   	pop    eax
c00124eb:	57                   	push   edi
c00124ec:	68 94 ae 02 c0       	push   0xc002ae94
c00124f1:	e8 45 05 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c00124f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00124f9:	ff 05 48 e8 02 c0    	inc    DWORD PTR ds:0xc002e848
c00124ff:	e8 6a d8 ff ff       	call   c000fd6e <Phys::freePage(unsigned long)>
c0012504:	0f 20 d8             	mov    eax,cr3
c0012507:	0f 22 d8             	mov    cr3,eax
c001250a:	ff 35 48 e8 02 c0    	push   DWORD PTR ds:0xc002e848
c0012510:	55                   	push   ebp
c0012511:	53                   	push   ebx
c0012512:	68 68 ad 02 c0       	push   0xc002ad68
c0012517:	e8 1f 05 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001251c:	a1 44 e8 02 c0       	mov    eax,ds:0xc002e844
c0012521:	c7 44 24 50 ad ae 02 c0 	mov    DWORD PTR [esp+0x50],0xc002aead
c0012529:	8d 50 01             	lea    edx,[eax+0x1]
c001252c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0012530:	89 15 44 e8 02 c0    	mov    DWORD PTR ds:0xc002e844,edx
c0012536:	83 c4 3c             	add    esp,0x3c
c0012539:	5b                   	pop    ebx
c001253a:	5e                   	pop    esi
c001253b:	5f                   	pop    edi
c001253c:	5d                   	pop    ebp
c001253d:	e9 f9 04 00 00       	jmp    c0012a3b <Dbg::kprintf(char const*, ...)>

c0012542 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012542:	55                   	push   ebp
c0012543:	57                   	push   edi
c0012544:	56                   	push   esi
c0012545:	53                   	push   ebx
c0012546:	83 ec 24             	sub    esp,0x24
c0012549:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001254d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012551:	68 be ae 02 c0       	push   0xc002aebe
c0012556:	e8 e0 04 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001255b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001255f:	58                   	pop    eax
c0012560:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c0012566:	5a                   	pop    edx
c0012567:	57                   	push   edi
c0012568:	53                   	push   ebx
c0012569:	e8 0c f4 ff ff       	call   c001197a <VAS::getPageTableEntry(unsigned long)>
c001256e:	59                   	pop    ecx
c001256f:	5e                   	pop    esi
c0012570:	89 c6                	mov    esi,eax
c0012572:	ff 30                	push   DWORD PTR [eax]
c0012574:	68 d1 ae 02 c0       	push   0xc002aed1
c0012579:	e8 bd 04 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001257e:	83 c4 10             	add    esp,0x10
c0012581:	85 ff                	test   edi,edi
c0012583:	74 0a                	je     c001258f <VAS::tryLoadBackOffDisk(unsigned long)+0x4d>
c0012585:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0012587:	f7 c5 01 00 00 00    	test   ebp,0x1
c001258d:	74 0a                	je     c0012599 <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c001258f:	83 c4 1c             	add    esp,0x1c
c0012592:	31 c0                	xor    eax,eax
c0012594:	5b                   	pop    ebx
c0012595:	5e                   	pop    esi
c0012596:	5f                   	pop    edi
c0012597:	5d                   	pop    ebp
c0012598:	c3                   	ret    
c0012599:	83 ec 08             	sub    esp,0x8
c001259c:	c1 ed 0b             	shr    ebp,0xb
c001259f:	55                   	push   ebp
c00125a0:	68 df ae 02 c0       	push   0xc002aedf
c00125a5:	e8 91 04 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c00125aa:	e8 30 d8 ff ff       	call   c000fddf <Phys::allocatePage()>
c00125af:	59                   	pop    ecx
c00125b0:	5a                   	pop    edx
c00125b1:	50                   	push   eax
c00125b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00125b6:	68 ea ae 02 c0       	push   0xc002aeea
c00125bb:	e8 7b 04 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c00125c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00125c4:	8b 16                	mov    edx,DWORD PTR [esi]
c00125c6:	81 e2 ff 0f 00 00    	and    edx,0xfff
c00125cc:	09 d0                	or     eax,edx
c00125ce:	0d 01 08 00 00       	or     eax,0x801
c00125d3:	89 06                	mov    DWORD PTR [esi],eax
c00125d5:	59                   	pop    ecx
c00125d6:	5e                   	pop    esi
c00125d7:	50                   	push   eax
c00125d8:	68 ff ae 02 c0       	push   0xc002aeff
c00125dd:	e8 59 04 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c00125e2:	0f 20 d8             	mov    eax,cr3
c00125e5:	83 c4 0c             	add    esp,0xc
c00125e8:	53                   	push   ebx
c00125e9:	50                   	push   eax
c00125ea:	68 17 af 02 c0       	push   0xc002af17
c00125ef:	e8 47 04 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c00125f4:	c7 04 24 2f af 02 c0 	mov    DWORD PTR [esp],0xc002af2f
c00125fb:	e8 3b 04 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0012600:	83 c4 10             	add    esp,0x10
c0012603:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c0012608:	85 c0                	test   eax,eax
c001260a:	7e 3d                	jle    c0012649 <VAS::tryLoadBackOffDisk(unsigned long)+0x107>
c001260c:	89 fe                	mov    esi,edi
c001260e:	31 db                	xor    ebx,ebx
c0012610:	83 ec 0c             	sub    esp,0xc
c0012613:	55                   	push   ebp
c0012614:	e8 7f f1 ff ff       	call   c0011798 <Virt::swapIDToSector(unsigned long)>
c0012619:	89 34 24             	mov    DWORD PTR [esp],esi
c001261c:	01 d8                	add    eax,ebx
c001261e:	6a 01                	push   0x1
c0012620:	31 d2                	xor    edx,edx
c0012622:	43                   	inc    ebx
c0012623:	52                   	push   edx
c0012624:	81 c6 00 02 00 00    	add    esi,0x200
c001262a:	50                   	push   eax
c001262b:	0f be 05 98 d6 02 c0 	movsx  eax,BYTE PTR ds:0xc002d698
c0012632:	ff 34 85 dc eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd1424]
c0012639:	e8 58 3d 00 00       	call   c0016396 <LogicalDisk::read(unsigned long long, int, void*)>
c001263e:	83 c4 20             	add    esp,0x20
c0012641:	39 1d 8c d6 02 c0    	cmp    DWORD PTR ds:0xc002d68c,ebx
c0012647:	7f c7                	jg     c0012610 <VAS::tryLoadBackOffDisk(unsigned long)+0xce>
c0012649:	a1 48 e8 02 c0       	mov    eax,ds:0xc002e848
c001264e:	48                   	dec    eax
c001264f:	52                   	push   edx
c0012650:	a3 48 e8 02 c0       	mov    ds:0xc002e848,eax
c0012655:	50                   	push   eax
c0012656:	57                   	push   edi
c0012657:	68 3f af 02 c0       	push   0xc002af3f
c001265c:	e8 da 03 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0012661:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012664:	e8 11 f1 ff ff       	call   c001177a <Virt::freeSwapfilePage(unsigned long)>
c0012669:	c7 04 24 54 af 02 c0 	mov    DWORD PTR [esp],0xc002af54
c0012670:	e8 c6 03 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0012675:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001267a:	83 c4 10             	add    esp,0x10
c001267d:	48                   	dec    eax
c001267e:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c0012683:	85 c0                	test   eax,eax
c0012685:	75 01                	jne    c0012688 <VAS::tryLoadBackOffDisk(unsigned long)+0x146>
c0012687:	fb                   	sti    
c0012688:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001268c:	25 ff 0f 00 00       	and    eax,0xfff
c0012691:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012696:	77 20                	ja     c00126b8 <VAS::tryLoadBackOffDisk(unsigned long)+0x176>
c0012698:	0f 20 d8             	mov    eax,cr3
c001269b:	0f 22 d8             	mov    cr3,eax
c001269e:	83 ec 0c             	sub    esp,0xc
c00126a1:	68 7a af 02 c0       	push   0xc002af7a
c00126a6:	e8 90 03 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c00126ab:	83 c4 10             	add    esp,0x10
c00126ae:	b0 01                	mov    al,0x1
c00126b0:	83 c4 1c             	add    esp,0x1c
c00126b3:	5b                   	pop    ebx
c00126b4:	5e                   	pop    esi
c00126b5:	5f                   	pop    edi
c00126b6:	5d                   	pop    ebp
c00126b7:	c3                   	ret    
c00126b8:	83 ec 0c             	sub    esp,0xc
c00126bb:	68 6a af 02 c0       	push   0xc002af6a
c00126c0:	e8 76 03 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c00126c5:	83 c4 10             	add    esp,0x10
c00126c8:	eb ce                	jmp    c0012698 <VAS::tryLoadBackOffDisk(unsigned long)+0x156>

c00126ca <VAS::scanForEviction()>:
c00126ca:	55                   	push   ebp
c00126cb:	31 ed                	xor    ebp,ebp
c00126cd:	57                   	push   edi
c00126ce:	56                   	push   esi
c00126cf:	53                   	push   ebx
c00126d0:	83 ec 0c             	sub    esp,0xc
c00126d3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00126d7:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00126da:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00126e0:	75 0e                	jne    c00126f0 <VAS::scanForEviction()+0x26>
c00126e2:	89 da                	mov    edx,ebx
c00126e4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00126e7:	c1 ea 16             	shr    edx,0x16
c00126ea:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00126ee:	74 4e                	je     c001273e <VAS::scanForEviction()+0x74>
c00126f0:	53                   	push   ebx
c00126f1:	56                   	push   esi
c00126f2:	e8 83 f2 ff ff       	call   c001197a <VAS::getPageTableEntry(unsigned long)>
c00126f7:	5f                   	pop    edi
c00126f8:	8b 38                	mov    edi,DWORD PTR [eax]
c00126fa:	5a                   	pop    edx
c00126fb:	89 fa                	mov    edx,edi
c00126fd:	81 e2 01 08 00 00    	and    edx,0x801
c0012703:	81 fa 01 08 00 00    	cmp    edx,0x801
c0012709:	74 3e                	je     c0012749 <VAS::scanForEviction()+0x7f>
c001270b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012711:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0012717:	76 2b                	jbe    c0012744 <VAS::scanForEviction()+0x7a>
c0012719:	45                   	inc    ebp
c001271a:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012721:	83 fd 04             	cmp    ebp,0x4
c0012724:	74 35                	je     c001275b <VAS::scanForEviction()+0x91>
c0012726:	31 db                	xor    ebx,ebx
c0012728:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001272e:	75 c0                	jne    c00126f0 <VAS::scanForEviction()+0x26>
c0012730:	89 da                	mov    edx,ebx
c0012732:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012735:	c1 ea 16             	shr    edx,0x16
c0012738:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001273c:	75 b2                	jne    c00126f0 <VAS::scanForEviction()+0x26>
c001273e:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012744:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012747:	eb 91                	jmp    c00126da <VAS::scanForEviction()+0x10>
c0012749:	f7 c7 20 00 00 00    	test   edi,0x20
c001274f:	74 22                	je     c0012773 <VAS::scanForEviction()+0xa9>
c0012751:	83 e7 df             	and    edi,0xffffffdf
c0012754:	89 38                	mov    DWORD PTR [eax],edi
c0012756:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012759:	eb b0                	jmp    c001270b <VAS::scanForEviction()+0x41>
c001275b:	83 ec 0c             	sub    esp,0xc
c001275e:	68 98 ad 02 c0       	push   0xc002ad98
c0012763:	e8 71 7c 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c0012768:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c001276b:	83 c4 10             	add    esp,0x10
c001276e:	e9 67 ff ff ff       	jmp    c00126da <VAS::scanForEviction()+0x10>
c0012773:	83 ec 08             	sub    esp,0x8
c0012776:	53                   	push   ebx
c0012777:	68 88 af 02 c0       	push   0xc002af88
c001277c:	e8 ba 02 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0012781:	58                   	pop    eax
c0012782:	5a                   	pop    edx
c0012783:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0012786:	56                   	push   esi
c0012787:	e8 ae fc ff ff       	call   c001243a <VAS::evict(unsigned long)>
c001278c:	59                   	pop    ecx
c001278d:	5b                   	pop    ebx
c001278e:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0012791:	68 9c af 02 c0       	push   0xc002af9c
c0012796:	e8 a0 02 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001279b:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c00127a2:	89 f8                	mov    eax,edi
c00127a4:	83 c4 1c             	add    esp,0x1c
c00127a7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00127ac:	5b                   	pop    ebx
c00127ad:	5e                   	pop    esi
c00127ae:	5f                   	pop    edi
c00127af:	5d                   	pop    ebp
c00127b0:	c3                   	ret    

c00127b1 <mapVASFirstTime>:
c00127b1:	55                   	push   ebp
c00127b2:	57                   	push   edi
c00127b3:	56                   	push   esi
c00127b4:	53                   	push   ebx
c00127b5:	83 ec 0c             	sub    esp,0xc
c00127b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00127bd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00127c0:	4a                   	dec    edx
c00127c1:	0f 84 fe 00 00 00    	je     c00128c5 <mapVASFirstTime+0x114>
c00127c7:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00127ca:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00127cd:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00127d2:	c1 e5 15             	shl    ebp,0x15
c00127d5:	bf 00 90 e7 01       	mov    edi,0x1e79000
c00127da:	8b b2 32 05 00 00    	mov    esi,DWORD PTR [edx+0x532]
c00127e0:	29 eb                	sub    ebx,ebp
c00127e2:	29 ef                	sub    edi,ebp
c00127e4:	83 ec 08             	sub    esp,0x8
c00127e7:	53                   	push   ebx
c00127e8:	68 c8 af 02 c0       	push   0xc002afc8
c00127ed:	e8 49 02 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c00127f2:	e8 e8 d5 ff ff       	call   c000fddf <Phys::allocatePage()>
c00127f7:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c00127fe:	6a 01                	push   0x1
c0012800:	53                   	push   ebx
c0012801:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012807:	50                   	push   eax
c0012808:	56                   	push   esi
c0012809:	e8 f8 f7 ff ff       	call   c0012006 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001280e:	83 c4 20             	add    esp,0x20
c0012811:	39 fb                	cmp    ebx,edi
c0012813:	75 cf                	jne    c00127e4 <mapVASFirstTime+0x33>
c0012815:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c001281a:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c001281f:	29 eb                	sub    ebx,ebp
c0012821:	29 ef                	sub    edi,ebp
c0012823:	83 ec 08             	sub    esp,0x8
c0012826:	53                   	push   ebx
c0012827:	68 e4 af 02 c0       	push   0xc002afe4
c001282c:	e8 0a 02 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0012831:	58                   	pop    eax
c0012832:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c0012836:	5a                   	pop    edx
c0012837:	19 c0                	sbb    eax,eax
c0012839:	83 e0 04             	and    eax,0x4
c001283c:	05 03 04 00 00       	add    eax,0x403
c0012841:	50                   	push   eax
c0012842:	68 09 af 02 c0       	push   0xc002af09
c0012847:	e8 ef 01 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001284c:	e8 8e d5 ff ff       	call   c000fddf <Phys::allocatePage()>
c0012851:	59                   	pop    ecx
c0012852:	89 c5                	mov    ebp,eax
c0012854:	58                   	pop    eax
c0012855:	55                   	push   ebp
c0012856:	68 f8 af 02 c0       	push   0xc002aff8
c001285b:	e8 db 01 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0012860:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c0012864:	19 d2                	sbb    edx,edx
c0012866:	83 e2 04             	and    edx,0x4
c0012869:	81 c2 03 04 00 00    	add    edx,0x403
c001286f:	89 14 24             	mov    DWORD PTR [esp],edx
c0012872:	6a 01                	push   0x1
c0012874:	53                   	push   ebx
c0012875:	55                   	push   ebp
c0012876:	56                   	push   esi
c0012877:	e8 8a f7 ff ff       	call   c0012006 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001287c:	83 c4 18             	add    esp,0x18
c001287f:	53                   	push   ebx
c0012880:	56                   	push   esi
c0012881:	e8 f4 f0 ff ff       	call   c001197a <VAS::getPageTableEntry(unsigned long)>
c0012886:	5a                   	pop    edx
c0012887:	59                   	pop    ecx
c0012888:	ff 30                	push   DWORD PTR [eax]
c001288a:	68 14 b0 02 c0       	push   0xc002b014
c001288f:	e8 a7 01 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0012894:	0f 20 d8             	mov    eax,cr3
c0012897:	83 c4 0c             	add    esp,0xc
c001289a:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00128a0:	56                   	push   esi
c00128a1:	50                   	push   eax
c00128a2:	68 17 af 02 c0       	push   0xc002af17
c00128a7:	e8 8f 01 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c00128ac:	83 c4 10             	add    esp,0x10
c00128af:	39 df                	cmp    edi,ebx
c00128b1:	0f 85 6c ff ff ff    	jne    c0012823 <mapVASFirstTime+0x72>
c00128b7:	0f 20 d8             	mov    eax,cr3
c00128ba:	0f 22 d8             	mov    cr3,eax
c00128bd:	83 c4 0c             	add    esp,0xc
c00128c0:	5b                   	pop    ebx
c00128c1:	5e                   	pop    esi
c00128c2:	5f                   	pop    edi
c00128c3:	5d                   	pop    ebp
c00128c4:	c3                   	ret    
c00128c5:	83 ec 0c             	sub    esp,0xc
c00128c8:	68 af af 02 c0       	push   0xc002afaf
c00128cd:	e8 69 01 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c00128d2:	83 c4 10             	add    esp,0x10
c00128d5:	83 c4 0c             	add    esp,0xc
c00128d8:	5b                   	pop    ebx
c00128d9:	5e                   	pop    esi
c00128da:	5f                   	pop    edi
c00128db:	5d                   	pop    ebp
c00128dc:	c3                   	ret    

c00128dd <__cxa_atexit>:
c00128dd:	31 c0                	xor    eax,eax
c00128df:	c3                   	ret    

c00128e0 <__cxa_finalize>:
c00128e0:	c3                   	ret    

c00128e1 <__stack_chk_fail>:
c00128e1:	55                   	push   ebp
c00128e2:	89 e5                	mov    ebp,esp
c00128e4:	83 ec 14             	sub    esp,0x14
c00128e7:	68 1f b0 02 c0       	push   0xc002b01f
c00128ec:	e8 4a 01 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c00128f1:	58                   	pop    eax
c00128f2:	5a                   	pop    edx
c00128f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00128f6:	68 6f b0 02 c0       	push   0xc002b06f
c00128fb:	e8 3b 01 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0012900:	59                   	pop    ecx
c0012901:	58                   	pop    eax
c0012902:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012905:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012908:	68 6f b0 02 c0       	push   0xc002b06f
c001290d:	e8 29 01 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0012912:	5a                   	pop    edx
c0012913:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012916:	59                   	pop    ecx
c0012917:	8b 00                	mov    eax,DWORD PTR [eax]
c0012919:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001291c:	68 6f b0 02 c0       	push   0xc002b06f
c0012921:	e8 15 01 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0012926:	5a                   	pop    edx
c0012927:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001292a:	59                   	pop    ecx
c001292b:	8b 00                	mov    eax,DWORD PTR [eax]
c001292d:	8b 00                	mov    eax,DWORD PTR [eax]
c001292f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012932:	68 6f b0 02 c0       	push   0xc002b06f
c0012937:	e8 ff 00 00 00       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001293c:	c7 04 24 77 b0 02 c0 	mov    DWORD PTR [esp],0xc002b077
c0012943:	e8 91 7a 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c0012948:	83 c4 10             	add    esp,0x10
c001294b:	c9                   	leave  
c001294c:	c3                   	ret    

c001294d <__cxa_pure_virtual>:
c001294d:	83 ec 18             	sub    esp,0x18
c0012950:	68 8f b0 02 c0       	push   0xc002b08f
c0012955:	e8 7f 7a 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c001295a:	83 c4 1c             	add    esp,0x1c
c001295d:	c3                   	ret    

c001295e <operator new[](unsigned long)>:
c001295e:	e9 80 d0 ff ff       	jmp    c000f9e3 <malloc>

c0012963 <operator delete(void*, unsigned long)>:
c0012963:	e9 9b d0 ff ff       	jmp    c000fa03 <rfree>

c0012968 <operator delete[](void*)>:
c0012968:	e9 96 d0 ff ff       	jmp    c000fa03 <rfree>

c001296d <operator delete[](void*, unsigned long)>:
c001296d:	e9 91 d0 ff ff       	jmp    c000fa03 <rfree>

c0012972 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012972:	55                   	push   ebp
c0012973:	b9 11 00 00 00       	mov    ecx,0x11
c0012978:	57                   	push   edi
c0012979:	56                   	push   esi
c001297a:	be 82 aa 02 c0       	mov    esi,0xc002aa82
c001297f:	53                   	push   ebx
c0012980:	83 ec 20             	sub    esp,0x20
c0012983:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012987:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001298b:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001298f:	fc                   	cld    
c0012990:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012992:	89 ee                	mov    esi,ebp
c0012994:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012998:	eb 02                	jmp    c001299c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c001299a:	89 c6                	mov    esi,eax
c001299c:	31 d2                	xor    edx,edx
c001299e:	41                   	inc    ecx
c001299f:	89 f0                	mov    eax,esi
c00129a1:	f7 f3                	div    ebx
c00129a3:	39 de                	cmp    esi,ebx
c00129a5:	73 f3                	jae    c001299a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c00129a7:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00129aa:	eb 02                	jmp    c00129ae <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c00129ac:	89 c5                	mov    ebp,eax
c00129ae:	31 d2                	xor    edx,edx
c00129b0:	49                   	dec    ecx
c00129b1:	89 e8                	mov    eax,ebp
c00129b3:	f7 f3                	div    ebx
c00129b5:	39 dd                	cmp    ebp,ebx
c00129b7:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c00129bb:	88 11                	mov    BYTE PTR [ecx],dl
c00129bd:	73 ed                	jae    c00129ac <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c00129bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00129c3:	83 c4 20             	add    esp,0x20
c00129c6:	5b                   	pop    ebx
c00129c7:	5e                   	pop    esi
c00129c8:	5f                   	pop    edi
c00129c9:	5d                   	pop    ebp
c00129ca:	c3                   	ret    

c00129cb <Dbg::logc(char)>:
c00129cb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00129cf:	ba fd 03 00 00       	mov    edx,0x3fd
c00129d4:	ec                   	in     al,dx
c00129d5:	a8 20                	test   al,0x20
c00129d7:	74 fb                	je     c00129d4 <Dbg::logc(char)+0x9>
c00129d9:	ba f8 03 00 00       	mov    edx,0x3f8
c00129de:	88 c8                	mov    al,cl
c00129e0:	ee                   	out    dx,al
c00129e1:	c3                   	ret    

c00129e2 <Dbg::logs(char*)>:
c00129e2:	53                   	push   ebx
c00129e3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00129e7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00129ea:	84 c0                	test   al,al
c00129ec:	74 0f                	je     c00129fd <Dbg::logs(char*)+0x1b>
c00129ee:	50                   	push   eax
c00129ef:	43                   	inc    ebx
c00129f0:	e8 d6 ff ff ff       	call   c00129cb <Dbg::logc(char)>
c00129f5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00129f8:	5a                   	pop    edx
c00129f9:	84 c0                	test   al,al
c00129fb:	75 f1                	jne    c00129ee <Dbg::logs(char*)+0xc>
c00129fd:	5b                   	pop    ebx
c00129fe:	c3                   	ret    

c00129ff <Dbg::logWriteInt(unsigned int)>:
c00129ff:	83 ec 10             	sub    esp,0x10
c0012a02:	6a 0a                	push   0xa
c0012a04:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012a08:	50                   	push   eax
c0012a09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a0d:	e8 60 ff ff ff       	call   c0012972 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012a12:	50                   	push   eax
c0012a13:	e8 ca ff ff ff       	call   c00129e2 <Dbg::logs(char*)>
c0012a18:	83 c4 20             	add    esp,0x20
c0012a1b:	c3                   	ret    

c0012a1c <Dbg::logWriteIntBase(unsigned int, int)>:
c0012a1c:	83 ec 10             	sub    esp,0x10
c0012a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a23:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012a27:	50                   	push   eax
c0012a28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a2c:	e8 41 ff ff ff       	call   c0012972 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012a31:	50                   	push   eax
c0012a32:	e8 ab ff ff ff       	call   c00129e2 <Dbg::logs(char*)>
c0012a37:	83 c4 20             	add    esp,0x20
c0012a3a:	c3                   	ret    

c0012a3b <Dbg::kprintf(char const*, ...)>:
c0012a3b:	55                   	push   ebp
c0012a3c:	57                   	push   edi
c0012a3d:	56                   	push   esi
c0012a3e:	53                   	push   ebx
c0012a3f:	83 ec 0c             	sub    esp,0xc
c0012a42:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012a46:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012a4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012a4e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012a51:	84 c0                	test   al,al
c0012a53:	74 4a                	je     c0012a9f <Dbg::kprintf(char const*, ...)+0x64>
c0012a55:	31 db                	xor    ebx,ebx
c0012a57:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012a5a:	3c 25                	cmp    al,0x25
c0012a5c:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012a5f:	0f 85 e4 00 00 00    	jne    c0012b49 <Dbg::kprintf(char const*, ...)+0x10e>
c0012a65:	83 c3 02             	add    ebx,0x2
c0012a68:	8a 07                	mov    al,BYTE PTR [edi]
c0012a6a:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012a6d:	83 e8 25             	sub    eax,0x25
c0012a70:	3c 53                	cmp    al,0x53
c0012a72:	0f 87 ba 00 00 00    	ja     c0012b32 <Dbg::kprintf(char const*, ...)+0xf7>
c0012a78:	0f b6 c0             	movzx  eax,al
c0012a7b:	ff 24 85 a4 b0 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4f5c]
c0012a82:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a86:	89 c8                	mov    eax,ecx
c0012a88:	83 c1 04             	add    ecx,0x4
c0012a8b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012a8f:	ff 30                	push   DWORD PTR [eax]
c0012a91:	e8 69 ff ff ff       	call   c00129ff <Dbg::logWriteInt(unsigned int)>
c0012a96:	5f                   	pop    edi
c0012a97:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012a9b:	84 c0                	test   al,al
c0012a9d:	75 b8                	jne    c0012a57 <Dbg::kprintf(char const*, ...)+0x1c>
c0012a9f:	83 c4 0c             	add    esp,0xc
c0012aa2:	5b                   	pop    ebx
c0012aa3:	5e                   	pop    esi
c0012aa4:	5f                   	pop    edi
c0012aa5:	5d                   	pop    ebp
c0012aa6:	c3                   	ret    
c0012aa7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012aab:	89 c8                	mov    eax,ecx
c0012aad:	83 c1 04             	add    ecx,0x4
c0012ab0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012ab4:	ff 30                	push   DWORD PTR [eax]
c0012ab6:	e8 27 ff ff ff       	call   c00129e2 <Dbg::logs(char*)>
c0012abb:	58                   	pop    eax
c0012abc:	eb d9                	jmp    c0012a97 <Dbg::kprintf(char const*, ...)+0x5c>
c0012abe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012ac2:	89 d0                	mov    eax,edx
c0012ac4:	83 c2 04             	add    edx,0x4
c0012ac7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012acb:	ff 30                	push   DWORD PTR [eax]
c0012acd:	e8 2d ff ff ff       	call   c00129ff <Dbg::logWriteInt(unsigned int)>
c0012ad2:	58                   	pop    eax
c0012ad3:	eb c2                	jmp    c0012a97 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ad5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012ad9:	89 d0                	mov    eax,edx
c0012adb:	83 c2 04             	add    edx,0x4
c0012ade:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012ae1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012ae5:	50                   	push   eax
c0012ae6:	e8 e0 fe ff ff       	call   c00129cb <Dbg::logc(char)>
c0012aeb:	58                   	pop    eax
c0012aec:	eb a9                	jmp    c0012a97 <Dbg::kprintf(char const*, ...)+0x5c>
c0012aee:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012af2:	89 c8                	mov    eax,ecx
c0012af4:	83 c1 04             	add    ecx,0x4
c0012af7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012afb:	6a 10                	push   0x10
c0012afd:	ff 30                	push   DWORD PTR [eax]
c0012aff:	e8 18 ff ff ff       	call   c0012a1c <Dbg::logWriteIntBase(unsigned int, int)>
c0012b04:	59                   	pop    ecx
c0012b05:	5f                   	pop    edi
c0012b06:	eb 8f                	jmp    c0012a97 <Dbg::kprintf(char const*, ...)+0x5c>
c0012b08:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012b0c:	89 d0                	mov    eax,edx
c0012b0e:	83 c2 08             	add    edx,0x8
c0012b11:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012b15:	6a 10                	push   0x10
c0012b17:	ff 30                	push   DWORD PTR [eax]
c0012b19:	e8 fe fe ff ff       	call   c0012a1c <Dbg::logWriteIntBase(unsigned int, int)>
c0012b1e:	58                   	pop    eax
c0012b1f:	5a                   	pop    edx
c0012b20:	e9 72 ff ff ff       	jmp    c0012a97 <Dbg::kprintf(char const*, ...)+0x5c>
c0012b25:	6a 25                	push   0x25
c0012b27:	e8 9f fe ff ff       	call   c00129cb <Dbg::logc(char)>
c0012b2c:	58                   	pop    eax
c0012b2d:	e9 65 ff ff ff       	jmp    c0012a97 <Dbg::kprintf(char const*, ...)+0x5c>
c0012b32:	6a 25                	push   0x25
c0012b34:	e8 92 fe ff ff       	call   c00129cb <Dbg::logc(char)>
c0012b39:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012b3c:	50                   	push   eax
c0012b3d:	e8 89 fe ff ff       	call   c00129cb <Dbg::logc(char)>
c0012b42:	5a                   	pop    edx
c0012b43:	59                   	pop    ecx
c0012b44:	e9 4e ff ff ff       	jmp    c0012a97 <Dbg::kprintf(char const*, ...)+0x5c>
c0012b49:	50                   	push   eax
c0012b4a:	89 eb                	mov    ebx,ebp
c0012b4c:	e8 7a fe ff ff       	call   c00129cb <Dbg::logc(char)>
c0012b51:	89 fd                	mov    ebp,edi
c0012b53:	58                   	pop    eax
c0012b54:	e9 3e ff ff ff       	jmp    c0012a97 <Dbg::kprintf(char const*, ...)+0x5c>
c0012b59:	90                   	nop

c0012b5a <File::read(unsigned long long, void*, int*)>:
c0012b5a:	53                   	push   ebx
c0012b5b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b5f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012b63:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012b6a:	3c 19                	cmp    al,0x19
c0012b6c:	77 35                	ja     c0012ba3 <File::read(unsigned long long, void*, int*)+0x49>
c0012b6e:	8b 04 85 e0 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1320]
c0012b75:	85 c0                	test   eax,eax
c0012b77:	74 2a                	je     c0012ba3 <File::read(unsigned long long, void*, int*)+0x49>
c0012b79:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012b7f:	85 c0                	test   eax,eax
c0012b81:	74 20                	je     c0012ba3 <File::read(unsigned long long, void*, int*)+0x49>
c0012b83:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012b87:	74 21                	je     c0012baa <File::read(unsigned long long, void*, int*)+0x50>
c0012b89:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012b8b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012b8f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012b95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012b99:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b9d:	5b                   	pop    ebx
c0012b9e:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012ba1:	ff e0                	jmp    eax
c0012ba3:	b8 0b 00 00 00       	mov    eax,0xb
c0012ba8:	eb 05                	jmp    c0012baf <File::read(unsigned long long, void*, int*)+0x55>
c0012baa:	b8 05 00 00 00       	mov    eax,0x5
c0012baf:	5b                   	pop    ebx
c0012bb0:	c3                   	ret    
c0012bb1:	90                   	nop

c0012bb2 <File::write(unsigned long long, void*, int*)>:
c0012bb2:	53                   	push   ebx
c0012bb3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012bb7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012bbb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012bc2:	3c 19                	cmp    al,0x19
c0012bc4:	77 35                	ja     c0012bfb <File::write(unsigned long long, void*, int*)+0x49>
c0012bc6:	8b 04 85 e0 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1320]
c0012bcd:	85 c0                	test   eax,eax
c0012bcf:	74 2a                	je     c0012bfb <File::write(unsigned long long, void*, int*)+0x49>
c0012bd1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012bd7:	85 c0                	test   eax,eax
c0012bd9:	74 20                	je     c0012bfb <File::write(unsigned long long, void*, int*)+0x49>
c0012bdb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012bdf:	74 21                	je     c0012c02 <File::write(unsigned long long, void*, int*)+0x50>
c0012be1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012be3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012be7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012bed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012bf1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012bf5:	5b                   	pop    ebx
c0012bf6:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012bf9:	ff e0                	jmp    eax
c0012bfb:	b8 0b 00 00 00       	mov    eax,0xb
c0012c00:	eb 05                	jmp    c0012c07 <File::write(unsigned long long, void*, int*)+0x55>
c0012c02:	b8 05 00 00 00       	mov    eax,0x5
c0012c07:	5b                   	pop    ebx
c0012c08:	c3                   	ret    
c0012c09:	90                   	nop

c0012c0a <Directory::read(unsigned long long, void*, int*)>:
c0012c0a:	53                   	push   ebx
c0012c0b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c0f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012c13:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012c1a:	3c 19                	cmp    al,0x19
c0012c1c:	77 35                	ja     c0012c53 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012c1e:	8b 04 85 e0 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1320]
c0012c25:	85 c0                	test   eax,eax
c0012c27:	74 2a                	je     c0012c53 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012c29:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012c2f:	85 c0                	test   eax,eax
c0012c31:	74 20                	je     c0012c53 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012c33:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012c37:	74 21                	je     c0012c5a <Directory::read(unsigned long long, void*, int*)+0x50>
c0012c39:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012c3b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012c3f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012c45:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012c49:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012c4d:	5b                   	pop    ebx
c0012c4e:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012c51:	ff e0                	jmp    eax
c0012c53:	b8 0b 00 00 00       	mov    eax,0xb
c0012c58:	eb 05                	jmp    c0012c5f <Directory::read(unsigned long long, void*, int*)+0x55>
c0012c5a:	b8 05 00 00 00       	mov    eax,0x5
c0012c5f:	5b                   	pop    ebx
c0012c60:	c3                   	ret    
c0012c61:	90                   	nop

c0012c62 <Directory::write(unsigned long long, void*, int*)>:
c0012c62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c66:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012c6d:	b8 0b 00 00 00       	mov    eax,0xb
c0012c72:	80 fa 19             	cmp    dl,0x19
c0012c75:	77 18                	ja     c0012c8f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012c77:	8b 14 95 e0 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1320]
c0012c7e:	85 d2                	test   edx,edx
c0012c80:	74 0d                	je     c0012c8f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012c82:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012c89:	19 c0                	sbb    eax,eax
c0012c8b:	83 e0 0a             	and    eax,0xa
c0012c8e:	40                   	inc    eax
c0012c8f:	c3                   	ret    

c0012c90 <File::isAtty()>:
c0012c90:	31 c0                	xor    eax,eax
c0012c92:	c3                   	ret    
c0012c93:	90                   	nop

c0012c94 <Directory::isAtty()>:
c0012c94:	31 c0                	xor    eax,eax
c0012c96:	c3                   	ret    
c0012c97:	90                   	nop

c0012c98 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012c98:	b8 0a 00 00 00       	mov    eax,0xa
c0012c9d:	c3                   	ret    

c0012c9e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012c9e:	b8 0a 00 00 00       	mov    eax,0xa
c0012ca3:	c3                   	ret    

c0012ca4 <Filesystem::allocateSwapfile(char const*, int)>:
c0012ca4:	31 c0                	xor    eax,eax
c0012ca6:	31 d2                	xor    edx,edx
c0012ca8:	c3                   	ret    
c0012ca9:	90                   	nop

c0012caa <File::~File()>:
c0012caa:	83 ec 0c             	sub    esp,0xc
c0012cad:	ba 64 b2 02 c0       	mov    edx,0xc002b264
c0012cb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cb6:	89 10                	mov    DWORD PTR [eax],edx
c0012cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cbc:	83 ec 0c             	sub    esp,0xc
c0012cbf:	50                   	push   eax
c0012cc0:	e8 43 e7 ff ff       	call   c0011408 <UnixFile::~UnixFile()>
c0012cc5:	83 c4 10             	add    esp,0x10
c0012cc8:	90                   	nop
c0012cc9:	83 c4 0c             	add    esp,0xc
c0012ccc:	c3                   	ret    
c0012ccd:	90                   	nop

c0012cce <File::~File()>:
c0012cce:	83 ec 0c             	sub    esp,0xc
c0012cd1:	83 ec 0c             	sub    esp,0xc
c0012cd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cd8:	e8 cd ff ff ff       	call   c0012caa <File::~File()>
c0012cdd:	83 c4 10             	add    esp,0x10
c0012ce0:	83 ec 08             	sub    esp,0x8
c0012ce3:	68 14 01 00 00       	push   0x114
c0012ce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cec:	e8 72 fc ff ff       	call   c0012963 <operator delete(void*, unsigned long)>
c0012cf1:	83 c4 10             	add    esp,0x10
c0012cf4:	83 c4 0c             	add    esp,0xc
c0012cf7:	c3                   	ret    

c0012cf8 <Directory::~Directory()>:
c0012cf8:	83 ec 0c             	sub    esp,0xc
c0012cfb:	ba 80 b2 02 c0       	mov    edx,0xc002b280
c0012d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d04:	89 10                	mov    DWORD PTR [eax],edx
c0012d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d0a:	83 ec 0c             	sub    esp,0xc
c0012d0d:	50                   	push   eax
c0012d0e:	e8 f5 e6 ff ff       	call   c0011408 <UnixFile::~UnixFile()>
c0012d13:	83 c4 10             	add    esp,0x10
c0012d16:	90                   	nop
c0012d17:	83 c4 0c             	add    esp,0xc
c0012d1a:	c3                   	ret    
c0012d1b:	90                   	nop

c0012d1c <Directory::~Directory()>:
c0012d1c:	83 ec 0c             	sub    esp,0xc
c0012d1f:	83 ec 0c             	sub    esp,0xc
c0012d22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d26:	e8 cd ff ff ff       	call   c0012cf8 <Directory::~Directory()>
c0012d2b:	83 c4 10             	add    esp,0x10
c0012d2e:	83 ec 08             	sub    esp,0x8
c0012d31:	68 14 01 00 00       	push   0x114
c0012d36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d3a:	e8 24 fc ff ff       	call   c0012963 <operator delete(void*, unsigned long)>
c0012d3f:	83 c4 10             	add    esp,0x10
c0012d42:	83 c4 0c             	add    esp,0xc
c0012d45:	c3                   	ret    

c0012d46 <Filesystem::Filesystem()>:
c0012d46:	ba fc b1 02 c0       	mov    edx,0xc002b1fc
c0012d4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d4f:	89 10                	mov    DWORD PTR [eax],edx
c0012d51:	8b 15 54 e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e854
c0012d57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d5b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012d5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d62:	a3 54 e8 02 c0       	mov    ds:0xc002e854,eax
c0012d67:	90                   	nop
c0012d68:	c3                   	ret    
c0012d69:	90                   	nop

c0012d6a <Filesystem::~Filesystem()>:
c0012d6a:	ba fc b1 02 c0       	mov    edx,0xc002b1fc
c0012d6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d73:	89 10                	mov    DWORD PTR [eax],edx
c0012d75:	90                   	nop
c0012d76:	c3                   	ret    
c0012d77:	90                   	nop

c0012d78 <Filesystem::~Filesystem()>:
c0012d78:	83 ec 0c             	sub    esp,0xc
c0012d7b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012d7f:	e8 e6 ff ff ff       	call   c0012d6a <Filesystem::~Filesystem()>
c0012d84:	83 c4 04             	add    esp,0x4
c0012d87:	83 ec 08             	sub    esp,0x8
c0012d8a:	6a 08                	push   0x8
c0012d8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d90:	e8 ce fb ff ff       	call   c0012963 <operator delete(void*, unsigned long)>
c0012d95:	83 c4 10             	add    esp,0x10
c0012d98:	83 c4 0c             	add    esp,0xc
c0012d9b:	c3                   	ret    

c0012d9c <Fs::getcwd(Process*, char*, int)>:
c0012d9c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012da0:	31 c0                	xor    eax,eax
c0012da2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012da5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012da9:	7d 15                	jge    c0012dc0 <Fs::getcwd(Process*, char*, int)+0x24>
c0012dab:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012daf:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012db6:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012db9:	84 c9                	test   cl,cl
c0012dbb:	74 06                	je     c0012dc3 <Fs::getcwd(Process*, char*, int)+0x27>
c0012dbd:	40                   	inc    eax
c0012dbe:	eb e2                	jmp    c0012da2 <Fs::getcwd(Process*, char*, int)+0x6>
c0012dc0:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012dc3:	31 c0                	xor    eax,eax
c0012dc5:	c3                   	ret    

c0012dc6 <Fs::initVFS()>:
c0012dc6:	83 ec 18             	sub    esp,0x18
c0012dc9:	6a 08                	push   0x8
c0012dcb:	e8 13 cc ff ff       	call   c000f9e3 <malloc>
c0012dd0:	89 04 24             	mov    DWORD PTR [esp],eax
c0012dd3:	e8 dc e1 00 00       	call   c0020fb4 <FAT::FAT()>
c0012dd8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012ddf:	e8 ff cb ff ff       	call   c000f9e3 <malloc>
c0012de4:	89 04 24             	mov    DWORD PTR [esp],eax
c0012de7:	e8 d4 f3 00 00       	call   c00221c0 <ISO9660::ISO9660()>
c0012dec:	83 c4 1c             	add    esp,0x1c
c0012def:	c3                   	ret    

c0012df0 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012df0:	55                   	push   ebp
c0012df1:	57                   	push   edi
c0012df2:	56                   	push   esi
c0012df3:	53                   	push   ebx
c0012df4:	81 ec 10 04 00 00    	sub    esp,0x410
c0012dfa:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012e01:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012e08:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012e0f:	68 00 04 00 00       	push   0x400
c0012e14:	6a 00                	push   0x0
c0012e16:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012e1a:	56                   	push   esi
c0012e1b:	e8 30 d9 fe ff       	call   c0000750 <memset>
c0012e20:	83 c4 10             	add    esp,0x10
c0012e23:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012e27:	75 0b                	jne    c0012e34 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012e29:	50                   	push   eax
c0012e2a:	50                   	push   eax
c0012e2b:	57                   	push   edi
c0012e2c:	56                   	push   esi
c0012e2d:	e8 da d9 fe ff       	call   c000080c <strcpy>
c0012e32:	eb 41                	jmp    c0012e75 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012e34:	8a 07                	mov    al,BYTE PTR [edi]
c0012e36:	3c 5c                	cmp    al,0x5c
c0012e38:	74 04                	je     c0012e3e <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012e3a:	3c 2f                	cmp    al,0x2f
c0012e3c:	75 18                	jne    c0012e56 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012e3e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012e41:	3c 60                	cmp    al,0x60
c0012e43:	7e 03                	jle    c0012e48 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012e45:	83 e8 20             	sub    eax,0x20
c0012e48:	88 04 24             	mov    BYTE PTR [esp],al
c0012e4b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012e52:	50                   	push   eax
c0012e53:	50                   	push   eax
c0012e54:	eb 18                	jmp    c0012e6e <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012e56:	50                   	push   eax
c0012e57:	50                   	push   eax
c0012e58:	55                   	push   ebp
c0012e59:	56                   	push   esi
c0012e5a:	e8 ad d9 fe ff       	call   c000080c <strcpy>
c0012e5f:	5a                   	pop    edx
c0012e60:	59                   	pop    ecx
c0012e61:	68 8a c8 02 c0       	push   0xc002c88a
c0012e66:	56                   	push   esi
c0012e67:	e8 e0 da fe ff       	call   c000094c <strcat>
c0012e6c:	5d                   	pop    ebp
c0012e6d:	58                   	pop    eax
c0012e6e:	57                   	push   edi
c0012e6f:	56                   	push   esi
c0012e70:	e8 d7 da fe ff       	call   c000094c <strcat>
c0012e75:	83 c4 10             	add    esp,0x10
c0012e78:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012e7b:	3c 60                	cmp    al,0x60
c0012e7d:	7e 03                	jle    c0012e82 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012e7f:	83 e8 20             	sub    eax,0x20
c0012e82:	88 04 24             	mov    BYTE PTR [esp],al
c0012e85:	88 03                	mov    BYTE PTR [ebx],al
c0012e87:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012e8e:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012e94:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012e98:	bf 03 00 00 00       	mov    edi,0x3
c0012e9d:	b8 03 00 00 00       	mov    eax,0x3
c0012ea2:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012ea5:	84 d2                	test   dl,dl
c0012ea7:	0f 84 91 00 00 00    	je     c0012f3e <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012ead:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012eb0:	80 fa 5c             	cmp    dl,0x5c
c0012eb3:	74 05                	je     c0012eba <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012eb5:	80 fa 2f             	cmp    dl,0x2f
c0012eb8:	75 12                	jne    c0012ecc <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012eba:	89 c5                	mov    ebp,eax
c0012ebc:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012ec1:	74 09                	je     c0012ecc <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012ec3:	40                   	inc    eax
c0012ec4:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012ec8:	89 cf                	mov    edi,ecx
c0012eca:	eb d6                	jmp    c0012ea2 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012ecc:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012ed1:	75 5b                	jne    c0012f2e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012ed3:	80 fa 2e             	cmp    dl,0x2e
c0012ed6:	75 56                	jne    c0012f2e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012ed8:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012edc:	74 19                	je     c0012ef7 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012ede:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012ee3:	74 53                	je     c0012f38 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012ee5:	89 f9                	mov    ecx,edi
c0012ee7:	41                   	inc    ecx
c0012ee8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012eeb:	80 fa 2f             	cmp    dl,0x2f
c0012eee:	74 f7                	je     c0012ee7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012ef0:	80 fa 5c             	cmp    dl,0x5c
c0012ef3:	74 f2                	je     c0012ee7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012ef5:	eb d1                	jmp    c0012ec8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ef7:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012efc:	74 3a                	je     c0012f38 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012efe:	83 f8 03             	cmp    eax,0x3
c0012f01:	74 c5                	je     c0012ec8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012f03:	41                   	inc    ecx
c0012f04:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012f07:	80 fa 2f             	cmp    dl,0x2f
c0012f0a:	74 f7                	je     c0012f03 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012f0c:	80 fa 5c             	cmp    dl,0x5c
c0012f0f:	74 f2                	je     c0012f03 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012f11:	48                   	dec    eax
c0012f12:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012f16:	75 06                	jne    c0012f1e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012f18:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012f1c:	eb f3                	jmp    c0012f11 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012f1e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012f22:	74 07                	je     c0012f2b <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012f24:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012f28:	48                   	dec    eax
c0012f29:	eb f3                	jmp    c0012f1e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012f2b:	40                   	inc    eax
c0012f2c:	eb 9a                	jmp    c0012ec8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012f2e:	80 fa 2f             	cmp    dl,0x2f
c0012f31:	74 95                	je     c0012ec8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012f33:	80 fa 5c             	cmp    dl,0x5c
c0012f36:	74 90                	je     c0012ec8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012f38:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012f3b:	40                   	inc    eax
c0012f3c:	eb 8a                	jmp    c0012ec8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012f3e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012f42:	83 ec 0c             	sub    esp,0xc
c0012f45:	53                   	push   ebx
c0012f46:	e8 21 d8 fe ff       	call   c000076c <strlen>
c0012f4b:	83 c4 10             	add    esp,0x10
c0012f4e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012f53:	75 26                	jne    c0012f7b <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012f55:	83 ec 0c             	sub    esp,0xc
c0012f58:	53                   	push   ebx
c0012f59:	e8 0e d8 fe ff       	call   c000076c <strlen>
c0012f5e:	83 c4 10             	add    esp,0x10
c0012f61:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012f66:	74 26                	je     c0012f8e <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012f68:	83 ec 0c             	sub    esp,0xc
c0012f6b:	53                   	push   ebx
c0012f6c:	e8 fb d7 fe ff       	call   c000076c <strlen>
c0012f71:	83 c4 10             	add    esp,0x10
c0012f74:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012f79:	eb c7                	jmp    c0012f42 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012f7b:	83 ec 0c             	sub    esp,0xc
c0012f7e:	53                   	push   ebx
c0012f7f:	e8 e8 d7 fe ff       	call   c000076c <strlen>
c0012f84:	83 c4 10             	add    esp,0x10
c0012f87:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012f8c:	74 c7                	je     c0012f55 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012f8e:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012f94:	5b                   	pop    ebx
c0012f95:	5e                   	pop    esi
c0012f96:	5f                   	pop    edi
c0012f97:	5d                   	pop    ebp
c0012f98:	c3                   	ret    
c0012f99:	90                   	nop

c0012f9a <File::File(char const*, Process*)>:
c0012f9a:	83 ec 0c             	sub    esp,0xc
c0012f9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fa1:	83 ec 08             	sub    esp,0x8
c0012fa4:	6a 00                	push   0x0
c0012fa6:	50                   	push   eax
c0012fa7:	e8 7a e2 ff ff       	call   c0011226 <UnixFile::UnixFile(int)>
c0012fac:	83 c4 10             	add    esp,0x10
c0012faf:	ba 64 b2 02 c0       	mov    edx,0xc002b264
c0012fb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fb8:	89 10                	mov    DWORD PTR [eax],edx
c0012fba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012fbe:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fc8:	83 c0 0d             	add    eax,0xd
c0012fcb:	83 ec 04             	sub    esp,0x4
c0012fce:	52                   	push   edx
c0012fcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fd3:	50                   	push   eax
c0012fd4:	e8 17 fe ff ff       	call   c0012df0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012fd9:	83 c4 10             	add    esp,0x10
c0012fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fe0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012fe3:	8d 50 bf             	lea    edx,[eax-0x41]
c0012fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fea:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012ff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ff4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012ff8:	90                   	nop
c0012ff9:	83 c4 0c             	add    esp,0xc
c0012ffc:	c3                   	ret    
c0012ffd:	90                   	nop

c0012ffe <File::open(FileOpenMode)>:
c0012ffe:	53                   	push   ebx
c0012fff:	b8 0b 00 00 00       	mov    eax,0xb
c0013004:	83 ec 08             	sub    esp,0x8
c0013007:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001300b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013012:	80 fa 19             	cmp    dl,0x19
c0013015:	77 40                	ja     c0013057 <File::open(FileOpenMode)+0x59>
c0013017:	8b 14 95 e0 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1320]
c001301e:	85 d2                	test   edx,edx
c0013020:	74 35                	je     c0013057 <File::open(FileOpenMode)+0x59>
c0013022:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013028:	85 d2                	test   edx,edx
c001302a:	74 2b                	je     c0013057 <File::open(FileOpenMode)+0x59>
c001302c:	b8 06 00 00 00       	mov    eax,0x6
c0013031:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013035:	75 20                	jne    c0013057 <File::open(FileOpenMode)+0x59>
c0013037:	8b 02                	mov    eax,DWORD PTR [edx]
c0013039:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001303f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013043:	51                   	push   ecx
c0013044:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013047:	51                   	push   ecx
c0013048:	52                   	push   edx
c0013049:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001304c:	83 c4 10             	add    esp,0x10
c001304f:	85 c0                	test   eax,eax
c0013051:	75 04                	jne    c0013057 <File::open(FileOpenMode)+0x59>
c0013053:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013057:	83 c4 08             	add    esp,0x8
c001305a:	5b                   	pop    ebx
c001305b:	c3                   	ret    

c001305c <File::close()>:
c001305c:	53                   	push   ebx
c001305d:	b8 0b 00 00 00       	mov    eax,0xb
c0013062:	83 ec 08             	sub    esp,0x8
c0013065:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013069:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013070:	80 fa 19             	cmp    dl,0x19
c0013073:	77 41                	ja     c00130b6 <File::close()+0x5a>
c0013075:	8b 1c 95 e0 ec 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1320]
c001307c:	85 db                	test   ebx,ebx
c001307e:	74 36                	je     c00130b6 <File::close()+0x5a>
c0013080:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013087:	74 2d                	je     c00130b6 <File::close()+0x5a>
c0013089:	b8 05 00 00 00       	mov    eax,0x5
c001308e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013092:	74 22                	je     c00130b6 <File::close()+0x5a>
c0013094:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013098:	8b 04 95 e0 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1320]
c001309f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130a5:	53                   	push   ebx
c00130a6:	53                   	push   ebx
c00130a7:	8b 10                	mov    edx,DWORD PTR [eax]
c00130a9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00130af:	50                   	push   eax
c00130b0:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00130b3:	83 c4 10             	add    esp,0x10
c00130b6:	83 c4 08             	add    esp,0x8
c00130b9:	5b                   	pop    ebx
c00130ba:	c3                   	ret    
c00130bb:	90                   	nop

c00130bc <File::seek(unsigned long long)>:
c00130bc:	56                   	push   esi
c00130bd:	53                   	push   ebx
c00130be:	b8 0b 00 00 00       	mov    eax,0xb
c00130c3:	51                   	push   ecx
c00130c4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00130c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00130cc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00130d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00130d7:	80 fa 19             	cmp    dl,0x19
c00130da:	77 31                	ja     c001310d <File::seek(unsigned long long)+0x51>
c00130dc:	8b 14 95 e0 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1320]
c00130e3:	85 d2                	test   edx,edx
c00130e5:	74 26                	je     c001310d <File::seek(unsigned long long)+0x51>
c00130e7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00130ed:	85 d2                	test   edx,edx
c00130ef:	74 1c                	je     c001310d <File::seek(unsigned long long)+0x51>
c00130f1:	b8 05 00 00 00       	mov    eax,0x5
c00130f6:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00130fa:	74 11                	je     c001310d <File::seek(unsigned long long)+0x51>
c00130fc:	8b 02                	mov    eax,DWORD PTR [edx]
c00130fe:	53                   	push   ebx
c00130ff:	51                   	push   ecx
c0013100:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0013106:	52                   	push   edx
c0013107:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001310a:	83 c4 10             	add    esp,0x10
c001310d:	5a                   	pop    edx
c001310e:	5b                   	pop    ebx
c001310f:	5e                   	pop    esi
c0013110:	c3                   	ret    
c0013111:	90                   	nop

c0013112 <File::tell(unsigned long long*)>:
c0013112:	83 ec 0c             	sub    esp,0xc
c0013115:	b8 0b 00 00 00       	mov    eax,0xb
c001311a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001311e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013125:	80 fa 19             	cmp    dl,0x19
c0013128:	77 34                	ja     c001315e <File::tell(unsigned long long*)+0x4c>
c001312a:	8b 14 95 e0 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1320]
c0013131:	85 d2                	test   edx,edx
c0013133:	74 29                	je     c001315e <File::tell(unsigned long long*)+0x4c>
c0013135:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001313b:	85 d2                	test   edx,edx
c001313d:	74 1f                	je     c001315e <File::tell(unsigned long long*)+0x4c>
c001313f:	b8 05 00 00 00       	mov    eax,0x5
c0013144:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013148:	74 14                	je     c001315e <File::tell(unsigned long long*)+0x4c>
c001314a:	50                   	push   eax
c001314b:	8b 02                	mov    eax,DWORD PTR [edx]
c001314d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013151:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013157:	52                   	push   edx
c0013158:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001315b:	83 c4 10             	add    esp,0x10
c001315e:	83 c4 0c             	add    esp,0xc
c0013161:	c3                   	ret    

c0013162 <File::rewind()>:
c0013162:	83 ec 10             	sub    esp,0x10
c0013165:	6a 00                	push   0x0
c0013167:	6a 00                	push   0x0
c0013169:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001316d:	e8 4a ff ff ff       	call   c00130bc <File::seek(unsigned long long)>
c0013172:	83 c4 1c             	add    esp,0x1c
c0013175:	c3                   	ret    

c0013176 <File::unlink()>:
c0013176:	83 ec 0c             	sub    esp,0xc
c0013179:	b8 0b 00 00 00       	mov    eax,0xb
c001317e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013182:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013189:	80 f9 19             	cmp    cl,0x19
c001318c:	77 2f                	ja     c00131bd <File::unlink()+0x47>
c001318e:	8b 0c 8d e0 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1320]
c0013195:	85 c9                	test   ecx,ecx
c0013197:	74 24                	je     c00131bd <File::unlink()+0x47>
c0013199:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001319f:	85 c9                	test   ecx,ecx
c00131a1:	74 1a                	je     c00131bd <File::unlink()+0x47>
c00131a3:	b8 06 00 00 00       	mov    eax,0x6
c00131a8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131ac:	75 0f                	jne    c00131bd <File::unlink()+0x47>
c00131ae:	83 c2 0d             	add    edx,0xd
c00131b1:	50                   	push   eax
c00131b2:	50                   	push   eax
c00131b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131b5:	52                   	push   edx
c00131b6:	51                   	push   ecx
c00131b7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00131ba:	83 c4 10             	add    esp,0x10
c00131bd:	83 c4 0c             	add    esp,0xc
c00131c0:	c3                   	ret    
c00131c1:	90                   	nop

c00131c2 <File::rename(char const*)>:
c00131c2:	83 ec 0c             	sub    esp,0xc
c00131c5:	b8 0b 00 00 00       	mov    eax,0xb
c00131ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131ce:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00131d5:	80 f9 19             	cmp    cl,0x19
c00131d8:	77 32                	ja     c001320c <File::rename(char const*)+0x4a>
c00131da:	8b 0c 8d e0 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1320]
c00131e1:	85 c9                	test   ecx,ecx
c00131e3:	74 27                	je     c001320c <File::rename(char const*)+0x4a>
c00131e5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00131eb:	85 c9                	test   ecx,ecx
c00131ed:	74 1d                	je     c001320c <File::rename(char const*)+0x4a>
c00131ef:	b8 06 00 00 00       	mov    eax,0x6
c00131f4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131f8:	75 12                	jne    c001320c <File::rename(char const*)+0x4a>
c00131fa:	83 c2 0d             	add    edx,0xd
c00131fd:	50                   	push   eax
c00131fe:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013200:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013204:	52                   	push   edx
c0013205:	51                   	push   ecx
c0013206:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013209:	83 c4 10             	add    esp,0x10
c001320c:	83 c4 0c             	add    esp,0xc
c001320f:	c3                   	ret    

c0013210 <File::chfatattr(unsigned char, unsigned char)>:
c0013210:	57                   	push   edi
c0013211:	b8 0b 00 00 00       	mov    eax,0xb
c0013216:	56                   	push   esi
c0013217:	53                   	push   ebx
c0013218:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001321c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013220:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013227:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001322b:	80 f9 19             	cmp    cl,0x19
c001322e:	77 37                	ja     c0013267 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013230:	8b 0c 8d e0 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1320]
c0013237:	85 c9                	test   ecx,ecx
c0013239:	74 2c                	je     c0013267 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001323b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013241:	85 c9                	test   ecx,ecx
c0013243:	74 22                	je     c0013267 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013245:	b8 06 00 00 00       	mov    eax,0x6
c001324a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001324e:	75 17                	jne    c0013267 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013250:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013252:	89 f0                	mov    eax,esi
c0013254:	83 c2 0d             	add    edx,0xd
c0013257:	0f b6 f0             	movzx  esi,al
c001325a:	0f b6 db             	movzx  ebx,bl
c001325d:	56                   	push   esi
c001325e:	53                   	push   ebx
c001325f:	52                   	push   edx
c0013260:	51                   	push   ecx
c0013261:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013264:	83 c4 10             	add    esp,0x10
c0013267:	5b                   	pop    ebx
c0013268:	5e                   	pop    esi
c0013269:	5f                   	pop    edi
c001326a:	c3                   	ret    
c001326b:	90                   	nop

c001326c <File::exists()>:
c001326c:	83 ec 0c             	sub    esp,0xc
c001326f:	31 c0                	xor    eax,eax
c0013271:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013275:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001327c:	80 f9 19             	cmp    cl,0x19
c001327f:	77 24                	ja     c00132a5 <File::exists()+0x39>
c0013281:	8b 0c 8d e0 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1320]
c0013288:	85 c9                	test   ecx,ecx
c001328a:	74 19                	je     c00132a5 <File::exists()+0x39>
c001328c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013292:	85 c9                	test   ecx,ecx
c0013294:	74 0f                	je     c00132a5 <File::exists()+0x39>
c0013296:	83 c2 0d             	add    edx,0xd
c0013299:	50                   	push   eax
c001329a:	50                   	push   eax
c001329b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001329d:	52                   	push   edx
c001329e:	51                   	push   ecx
c001329f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00132a2:	83 c4 10             	add    esp,0x10
c00132a5:	83 c4 0c             	add    esp,0xc
c00132a8:	c3                   	ret    
c00132a9:	90                   	nop

c00132aa <File::stat(unsigned long long*, bool*)>:
c00132aa:	56                   	push   esi
c00132ab:	53                   	push   ebx
c00132ac:	50                   	push   eax
c00132ad:	b8 0b 00 00 00       	mov    eax,0xb
c00132b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132b6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00132ba:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132c1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00132c5:	80 f9 19             	cmp    cl,0x19
c00132c8:	77 3d                	ja     c0013307 <File::stat(unsigned long long*, bool*)+0x5d>
c00132ca:	8b 0c 8d e0 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1320]
c00132d1:	85 c9                	test   ecx,ecx
c00132d3:	74 32                	je     c0013307 <File::stat(unsigned long long*, bool*)+0x5d>
c00132d5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132db:	85 c9                	test   ecx,ecx
c00132dd:	74 28                	je     c0013307 <File::stat(unsigned long long*, bool*)+0x5d>
c00132df:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132e1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132e5:	74 13                	je     c00132fa <File::stat(unsigned long long*, bool*)+0x50>
c00132e7:	83 ec 04             	sub    esp,0x4
c00132ea:	56                   	push   esi
c00132eb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00132f1:	51                   	push   ecx
c00132f2:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00132f5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00132f8:	eb 0a                	jmp    c0013304 <File::stat(unsigned long long*, bool*)+0x5a>
c00132fa:	53                   	push   ebx
c00132fb:	83 c2 0d             	add    edx,0xd
c00132fe:	56                   	push   esi
c00132ff:	52                   	push   edx
c0013300:	51                   	push   ecx
c0013301:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013304:	83 c4 10             	add    esp,0x10
c0013307:	5a                   	pop    edx
c0013308:	5b                   	pop    ebx
c0013309:	5e                   	pop    esi
c001330a:	c3                   	ret    

c001330b <Fs::setcwd(Process*, char*)>:
c001330b:	55                   	push   ebp
c001330c:	57                   	push   edi
c001330d:	56                   	push   esi
c001330e:	53                   	push   ebx
c001330f:	81 ec 20 02 00 00    	sub    esp,0x220
c0013315:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c001331c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013322:	57                   	push   edi
c0013323:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001332a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001332e:	56                   	push   esi
c001332f:	e8 bc fa ff ff       	call   c0012df0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013334:	89 34 24             	mov    DWORD PTR [esp],esi
c0013337:	e8 30 d4 fe ff       	call   c000076c <strlen>
c001333c:	83 c4 10             	add    esp,0x10
c001333f:	83 f8 02             	cmp    eax,0x2
c0013342:	77 17                	ja     c001335b <Fs::setcwd(Process*, char*)+0x50>
c0013344:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013349:	83 e8 41             	sub    eax,0x41
c001334c:	83 f8 19             	cmp    eax,0x19
c001334f:	76 24                	jbe    c0013375 <Fs::setcwd(Process*, char*)+0x6a>
c0013351:	b8 03 00 00 00       	mov    eax,0x3
c0013356:	e9 e0 00 00 00       	jmp    c001343b <Fs::setcwd(Process*, char*)+0x130>
c001335b:	83 ec 0c             	sub    esp,0xc
c001335e:	56                   	push   esi
c001335f:	e8 08 d4 fe ff       	call   c000076c <strlen>
c0013364:	83 c4 10             	add    esp,0x10
c0013367:	83 f8 03             	cmp    eax,0x3
c001336a:	75 34                	jne    c00133a0 <Fs::setcwd(Process*, char*)+0x95>
c001336c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013371:	75 2d                	jne    c00133a0 <Fs::setcwd(Process*, char*)+0x95>
c0013373:	eb cf                	jmp    c0013344 <Fs::setcwd(Process*, char*)+0x39>
c0013375:	8b 14 85 e0 ec 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1320]
c001337c:	b8 05 00 00 00       	mov    eax,0x5
c0013381:	85 d2                	test   edx,edx
c0013383:	0f 84 b2 00 00 00    	je     c001343b <Fs::setcwd(Process*, char*)+0x130>
c0013389:	b8 06 00 00 00       	mov    eax,0x6
c001338e:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013395:	0f 85 92 00 00 00    	jne    c001342d <Fs::setcwd(Process*, char*)+0x122>
c001339b:	e9 9b 00 00 00       	jmp    c001343b <Fs::setcwd(Process*, char*)+0x130>
c00133a0:	83 ec 0c             	sub    esp,0xc
c00133a3:	68 14 01 00 00       	push   0x114
c00133a8:	e8 36 c6 ff ff       	call   c000f9e3 <malloc>
c00133ad:	83 c4 0c             	add    esp,0xc
c00133b0:	89 c3                	mov    ebx,eax
c00133b2:	55                   	push   ebp
c00133b3:	56                   	push   esi
c00133b4:	50                   	push   eax
c00133b5:	e8 e0 fb ff ff       	call   c0012f9a <File::File(char const*, Process*)>
c00133ba:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00133bf:	83 c4 0c             	add    esp,0xc
c00133c2:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00133c6:	50                   	push   eax
c00133c7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00133cb:	50                   	push   eax
c00133cc:	53                   	push   ebx
c00133cd:	e8 d8 fe ff ff       	call   c00132aa <File::stat(unsigned long long*, bool*)>
c00133d2:	83 c4 10             	add    esp,0x10
c00133d5:	83 f8 02             	cmp    eax,0x2
c00133d8:	74 04                	je     c00133de <Fs::setcwd(Process*, char*)+0xd3>
c00133da:	85 c0                	test   eax,eax
c00133dc:	74 1c                	je     c00133fa <Fs::setcwd(Process*, char*)+0xef>
c00133de:	b8 01 00 00 00       	mov    eax,0x1
c00133e3:	85 db                	test   ebx,ebx
c00133e5:	74 54                	je     c001343b <Fs::setcwd(Process*, char*)+0x130>
c00133e7:	83 ec 0c             	sub    esp,0xc
c00133ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00133ec:	53                   	push   ebx
c00133ed:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00133f0:	83 c4 10             	add    esp,0x10
c00133f3:	b8 01 00 00 00       	mov    eax,0x1
c00133f8:	eb 41                	jmp    c001343b <Fs::setcwd(Process*, char*)+0x130>
c00133fa:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00133ff:	75 1c                	jne    c001341d <Fs::setcwd(Process*, char*)+0x112>
c0013401:	b8 02 00 00 00       	mov    eax,0x2
c0013406:	85 db                	test   ebx,ebx
c0013408:	74 31                	je     c001343b <Fs::setcwd(Process*, char*)+0x130>
c001340a:	83 ec 0c             	sub    esp,0xc
c001340d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001340f:	53                   	push   ebx
c0013410:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013413:	83 c4 10             	add    esp,0x10
c0013416:	b8 02 00 00 00       	mov    eax,0x2
c001341b:	eb 1e                	jmp    c001343b <Fs::setcwd(Process*, char*)+0x130>
c001341d:	85 db                	test   ebx,ebx
c001341f:	74 0c                	je     c001342d <Fs::setcwd(Process*, char*)+0x122>
c0013421:	83 ec 0c             	sub    esp,0xc
c0013424:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013426:	53                   	push   ebx
c0013427:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001342a:	83 c4 10             	add    esp,0x10
c001342d:	50                   	push   eax
c001342e:	50                   	push   eax
c001342f:	56                   	push   esi
c0013430:	57                   	push   edi
c0013431:	e8 d6 d3 fe ff       	call   c000080c <strcpy>
c0013436:	83 c4 10             	add    esp,0x10
c0013439:	31 c0                	xor    eax,eax
c001343b:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013441:	5b                   	pop    ebx
c0013442:	5e                   	pop    esi
c0013443:	5f                   	pop    edi
c0013444:	5d                   	pop    ebp
c0013445:	c3                   	ret    

c0013446 <Directory::Directory(char const*, Process*)>:
c0013446:	83 ec 0c             	sub    esp,0xc
c0013449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001344d:	83 ec 08             	sub    esp,0x8
c0013450:	6a 00                	push   0x0
c0013452:	50                   	push   eax
c0013453:	e8 ce dd ff ff       	call   c0011226 <UnixFile::UnixFile(int)>
c0013458:	83 c4 10             	add    esp,0x10
c001345b:	ba 80 b2 02 c0       	mov    edx,0xc002b280
c0013460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013464:	89 10                	mov    DWORD PTR [eax],edx
c0013466:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001346a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013474:	83 c0 0d             	add    eax,0xd
c0013477:	83 ec 04             	sub    esp,0x4
c001347a:	52                   	push   edx
c001347b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001347f:	50                   	push   eax
c0013480:	e8 6b f9 ff ff       	call   c0012df0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013485:	83 c4 10             	add    esp,0x10
c0013488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001348c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001348f:	8d 50 bf             	lea    edx,[eax-0x41]
c0013492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013496:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001349c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134a0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00134a4:	90                   	nop
c00134a5:	83 c4 0c             	add    esp,0xc
c00134a8:	c3                   	ret    
c00134a9:	90                   	nop

c00134aa <Directory::open()>:
c00134aa:	53                   	push   ebx
c00134ab:	b8 0b 00 00 00       	mov    eax,0xb
c00134b0:	83 ec 08             	sub    esp,0x8
c00134b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00134b7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00134be:	80 fa 19             	cmp    dl,0x19
c00134c1:	77 3d                	ja     c0013500 <Directory::open()+0x56>
c00134c3:	8b 14 95 e0 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1320]
c00134ca:	85 d2                	test   edx,edx
c00134cc:	74 32                	je     c0013500 <Directory::open()+0x56>
c00134ce:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00134d4:	85 d2                	test   edx,edx
c00134d6:	74 28                	je     c0013500 <Directory::open()+0x56>
c00134d8:	b8 06 00 00 00       	mov    eax,0x6
c00134dd:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00134e1:	75 1d                	jne    c0013500 <Directory::open()+0x56>
c00134e3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00134e9:	50                   	push   eax
c00134ea:	8b 02                	mov    eax,DWORD PTR [edx]
c00134ec:	51                   	push   ecx
c00134ed:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00134f0:	51                   	push   ecx
c00134f1:	52                   	push   edx
c00134f2:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00134f5:	83 c4 10             	add    esp,0x10
c00134f8:	85 c0                	test   eax,eax
c00134fa:	75 04                	jne    c0013500 <Directory::open()+0x56>
c00134fc:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013500:	83 c4 08             	add    esp,0x8
c0013503:	5b                   	pop    ebx
c0013504:	c3                   	ret    
c0013505:	90                   	nop

c0013506 <Directory::close()>:
c0013506:	53                   	push   ebx
c0013507:	b8 0b 00 00 00       	mov    eax,0xb
c001350c:	83 ec 08             	sub    esp,0x8
c001350f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013513:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001351a:	80 fa 19             	cmp    dl,0x19
c001351d:	77 41                	ja     c0013560 <Directory::close()+0x5a>
c001351f:	8b 1c 95 e0 ec 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1320]
c0013526:	85 db                	test   ebx,ebx
c0013528:	74 36                	je     c0013560 <Directory::close()+0x5a>
c001352a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013531:	74 2d                	je     c0013560 <Directory::close()+0x5a>
c0013533:	b8 05 00 00 00       	mov    eax,0x5
c0013538:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001353c:	74 22                	je     c0013560 <Directory::close()+0x5a>
c001353e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013542:	8b 04 95 e0 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1320]
c0013549:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001354f:	53                   	push   ebx
c0013550:	53                   	push   ebx
c0013551:	8b 10                	mov    edx,DWORD PTR [eax]
c0013553:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013559:	50                   	push   eax
c001355a:	ff 52 20             	call   DWORD PTR [edx+0x20]
c001355d:	83 c4 10             	add    esp,0x10
c0013560:	83 c4 08             	add    esp,0x8
c0013563:	5b                   	pop    ebx
c0013564:	c3                   	ret    
c0013565:	90                   	nop

c0013566 <Directory::unlink()>:
c0013566:	83 ec 0c             	sub    esp,0xc
c0013569:	b8 0b 00 00 00       	mov    eax,0xb
c001356e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013572:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013579:	80 f9 19             	cmp    cl,0x19
c001357c:	77 2f                	ja     c00135ad <Directory::unlink()+0x47>
c001357e:	8b 0c 8d e0 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1320]
c0013585:	85 c9                	test   ecx,ecx
c0013587:	74 24                	je     c00135ad <Directory::unlink()+0x47>
c0013589:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001358f:	85 c9                	test   ecx,ecx
c0013591:	74 1a                	je     c00135ad <Directory::unlink()+0x47>
c0013593:	b8 06 00 00 00       	mov    eax,0x6
c0013598:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001359c:	75 0f                	jne    c00135ad <Directory::unlink()+0x47>
c001359e:	83 c2 0d             	add    edx,0xd
c00135a1:	50                   	push   eax
c00135a2:	50                   	push   eax
c00135a3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135a5:	52                   	push   edx
c00135a6:	51                   	push   ecx
c00135a7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00135aa:	83 c4 10             	add    esp,0x10
c00135ad:	83 c4 0c             	add    esp,0xc
c00135b0:	c3                   	ret    
c00135b1:	90                   	nop

c00135b2 <Directory::rename(char const*)>:
c00135b2:	83 ec 0c             	sub    esp,0xc
c00135b5:	b8 0b 00 00 00       	mov    eax,0xb
c00135ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135be:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135c5:	80 f9 19             	cmp    cl,0x19
c00135c8:	77 32                	ja     c00135fc <Directory::rename(char const*)+0x4a>
c00135ca:	8b 0c 8d e0 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1320]
c00135d1:	85 c9                	test   ecx,ecx
c00135d3:	74 27                	je     c00135fc <Directory::rename(char const*)+0x4a>
c00135d5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135db:	85 c9                	test   ecx,ecx
c00135dd:	74 1d                	je     c00135fc <Directory::rename(char const*)+0x4a>
c00135df:	b8 06 00 00 00       	mov    eax,0x6
c00135e4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135e8:	75 12                	jne    c00135fc <Directory::rename(char const*)+0x4a>
c00135ea:	83 c2 0d             	add    edx,0xd
c00135ed:	50                   	push   eax
c00135ee:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00135f4:	52                   	push   edx
c00135f5:	51                   	push   ecx
c00135f6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00135f9:	83 c4 10             	add    esp,0x10
c00135fc:	83 c4 0c             	add    esp,0xc
c00135ff:	c3                   	ret    

c0013600 <Directory::exists()>:
c0013600:	83 ec 0c             	sub    esp,0xc
c0013603:	31 c0                	xor    eax,eax
c0013605:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013609:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013610:	80 f9 19             	cmp    cl,0x19
c0013613:	77 24                	ja     c0013639 <Directory::exists()+0x39>
c0013615:	8b 0c 8d e0 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1320]
c001361c:	85 c9                	test   ecx,ecx
c001361e:	74 19                	je     c0013639 <Directory::exists()+0x39>
c0013620:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013626:	85 c9                	test   ecx,ecx
c0013628:	74 0f                	je     c0013639 <Directory::exists()+0x39>
c001362a:	83 c2 0d             	add    edx,0xd
c001362d:	50                   	push   eax
c001362e:	50                   	push   eax
c001362f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013631:	52                   	push   edx
c0013632:	51                   	push   ecx
c0013633:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013636:	83 c4 10             	add    esp,0x10
c0013639:	83 c4 0c             	add    esp,0xc
c001363c:	c3                   	ret    
c001363d:	90                   	nop

c001363e <Directory::read(dirent*)>:
c001363e:	83 ec 1c             	sub    esp,0x1c
c0013641:	b8 0b 00 00 00       	mov    eax,0xb
c0013646:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001364a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013651:	80 fa 19             	cmp    dl,0x19
c0013654:	77 30                	ja     c0013686 <Directory::read(dirent*)+0x48>
c0013656:	8b 14 95 e0 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1320]
c001365d:	85 d2                	test   edx,edx
c001365f:	74 25                	je     c0013686 <Directory::read(dirent*)+0x48>
c0013661:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013668:	74 1c                	je     c0013686 <Directory::read(dirent*)+0x48>
c001366a:	83 ec 0c             	sub    esp,0xc
c001366d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001366f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013673:	52                   	push   edx
c0013674:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013678:	6a 00                	push   0x0
c001367a:	68 10 01 00 00       	push   0x110
c001367f:	51                   	push   ecx
c0013680:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013683:	83 c4 20             	add    esp,0x20
c0013686:	83 c4 1c             	add    esp,0x1c
c0013689:	c3                   	ret    

c001368a <Directory::create()>:
c001368a:	83 ec 0c             	sub    esp,0xc
c001368d:	b8 0b 00 00 00       	mov    eax,0xb
c0013692:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013696:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001369d:	80 f9 19             	cmp    cl,0x19
c00136a0:	77 2f                	ja     c00136d1 <Directory::create()+0x47>
c00136a2:	8b 0c 8d e0 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1320]
c00136a9:	85 c9                	test   ecx,ecx
c00136ab:	74 24                	je     c00136d1 <Directory::create()+0x47>
c00136ad:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136b3:	85 c9                	test   ecx,ecx
c00136b5:	74 1a                	je     c00136d1 <Directory::create()+0x47>
c00136b7:	b8 06 00 00 00       	mov    eax,0x6
c00136bc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136c0:	75 0f                	jne    c00136d1 <Directory::create()+0x47>
c00136c2:	83 c2 0d             	add    edx,0xd
c00136c5:	50                   	push   eax
c00136c6:	50                   	push   eax
c00136c7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136c9:	52                   	push   edx
c00136ca:	51                   	push   ecx
c00136cb:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00136ce:	83 c4 10             	add    esp,0x10
c00136d1:	83 c4 0c             	add    esp,0xc
c00136d4:	c3                   	ret    
c00136d5:	90                   	nop

c00136d6 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00136d6:	b8 0a 00 00 00       	mov    eax,0xa
c00136db:	c3                   	ret    

c00136dc <Bus::Bus(char const*)>:
c00136dc:	83 ec 0c             	sub    esp,0xc
c00136df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136e3:	83 ec 08             	sub    esp,0x8
c00136e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136ea:	50                   	push   eax
c00136eb:	e8 88 09 00 00       	call   c0014078 <Device::Device(char const*)>
c00136f0:	83 c4 10             	add    esp,0x10
c00136f3:	ba 9c b2 02 c0       	mov    edx,0xc002b29c
c00136f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136fc:	89 10                	mov    DWORD PTR [eax],edx
c00136fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013702:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001370c:	90                   	nop
c001370d:	83 c4 0c             	add    esp,0xc
c0013710:	c3                   	ret    
c0013711:	90                   	nop

c0013712 <Bus::~Bus()>:
c0013712:	83 ec 0c             	sub    esp,0xc
c0013715:	ba 9c b2 02 c0       	mov    edx,0xc002b29c
c001371a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001371e:	89 10                	mov    DWORD PTR [eax],edx
c0013720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013724:	83 ec 0c             	sub    esp,0xc
c0013727:	50                   	push   eax
c0013728:	e8 15 06 00 00       	call   c0013d42 <Device::~Device()>
c001372d:	83 c4 10             	add    esp,0x10
c0013730:	90                   	nop
c0013731:	83 c4 0c             	add    esp,0xc
c0013734:	c3                   	ret    
c0013735:	90                   	nop

c0013736 <Bus::~Bus()>:
c0013736:	83 ec 0c             	sub    esp,0xc
c0013739:	83 ec 0c             	sub    esp,0xc
c001373c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013740:	e8 cd ff ff ff       	call   c0013712 <Bus::~Bus()>
c0013745:	83 c4 10             	add    esp,0x10
c0013748:	83 ec 08             	sub    esp,0x8
c001374b:	68 58 01 00 00       	push   0x158
c0013750:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013754:	e8 0a f2 ff ff       	call   c0012963 <operator delete(void*, unsigned long)>
c0013759:	83 c4 10             	add    esp,0x10
c001375c:	83 c4 0c             	add    esp,0xc
c001375f:	c3                   	ret    

c0013760 <Buzzer::Buzzer(char const*)>:
c0013760:	83 ec 0c             	sub    esp,0xc
c0013763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013767:	83 ec 08             	sub    esp,0x8
c001376a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001376e:	50                   	push   eax
c001376f:	e8 04 09 00 00       	call   c0014078 <Device::Device(char const*)>
c0013774:	83 c4 10             	add    esp,0x10
c0013777:	ba c8 b2 02 c0       	mov    edx,0xc002b2c8
c001377c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013780:	89 10                	mov    DWORD PTR [eax],edx
c0013782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013786:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013794:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c001379e:	90                   	nop
c001379f:	83 c4 0c             	add    esp,0xc
c00137a2:	c3                   	ret    
c00137a3:	90                   	nop

c00137a4 <Buzzer::~Buzzer()>:
c00137a4:	83 ec 0c             	sub    esp,0xc
c00137a7:	ba c8 b2 02 c0       	mov    edx,0xc002b2c8
c00137ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137b0:	89 10                	mov    DWORD PTR [eax],edx
c00137b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137b6:	83 ec 0c             	sub    esp,0xc
c00137b9:	50                   	push   eax
c00137ba:	e8 83 05 00 00       	call   c0013d42 <Device::~Device()>
c00137bf:	83 c4 10             	add    esp,0x10
c00137c2:	90                   	nop
c00137c3:	83 c4 0c             	add    esp,0xc
c00137c6:	c3                   	ret    
c00137c7:	90                   	nop

c00137c8 <Buzzer::~Buzzer()>:
c00137c8:	83 ec 0c             	sub    esp,0xc
c00137cb:	83 ec 0c             	sub    esp,0xc
c00137ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137d2:	e8 cd ff ff ff       	call   c00137a4 <Buzzer::~Buzzer()>
c00137d7:	83 c4 10             	add    esp,0x10
c00137da:	83 ec 08             	sub    esp,0x8
c00137dd:	68 5c 01 00 00       	push   0x15c
c00137e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137e6:	e8 78 f1 ff ff       	call   c0012963 <operator delete(void*, unsigned long)>
c00137eb:	83 c4 10             	add    esp,0x10
c00137ee:	83 c4 0c             	add    esp,0xc
c00137f1:	c3                   	ret    

c00137f2 <Buzzer::stop()>:
c00137f2:	83 ec 14             	sub    esp,0x14
c00137f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00137f9:	8b 10                	mov    edx,DWORD PTR [eax]
c00137fb:	6a 00                	push   0x0
c00137fd:	50                   	push   eax
c00137fe:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013801:	83 c4 1c             	add    esp,0x1c
c0013804:	c3                   	ret    

c0013805 <beepThread(void*)>:
c0013805:	53                   	push   ebx
c0013806:	83 ec 08             	sub    esp,0x8
c0013809:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001380e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013812:	48                   	dec    eax
c0013813:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c0013818:	75 01                	jne    c001381b <beepThread(void*)+0x16>
c001381a:	fb                   	sti    
c001381b:	50                   	push   eax
c001381c:	50                   	push   eax
c001381d:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013822:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013828:	52                   	push   edx
c0013829:	50                   	push   eax
c001382a:	e8 16 aa 00 00       	call   c001e245 <nanoSleep(unsigned long long)>
c001382f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013832:	e8 bb ff ff ff       	call   c00137f2 <Buzzer::stop()>
c0013837:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001383f:	83 c4 18             	add    esp,0x18
c0013842:	5b                   	pop    ebx
c0013843:	e9 f9 a8 00 00       	jmp    c001e141 <blockTask(TaskState)>

c0013848 <Buzzer::beep(int, int, bool)>:
c0013848:	57                   	push   edi
c0013849:	56                   	push   esi
c001384a:	53                   	push   ebx
c001384b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001384f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013853:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013857:	52                   	push   edx
c0013858:	52                   	push   edx
c0013859:	8b 06                	mov    eax,DWORD PTR [esi]
c001385b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001385f:	56                   	push   esi
c0013860:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013863:	83 c4 10             	add    esp,0x10
c0013866:	89 f8                	mov    eax,edi
c0013868:	84 c0                	test   al,al
c001386a:	74 1f                	je     c001388b <Buzzer::beep(int, int, bool)+0x43>
c001386c:	50                   	push   eax
c001386d:	50                   	push   eax
c001386e:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013874:	99                   	cdq    
c0013875:	52                   	push   edx
c0013876:	50                   	push   eax
c0013877:	e8 c9 a9 00 00       	call   c001e245 <nanoSleep(unsigned long long)>
c001387c:	83 c4 10             	add    esp,0x10
c001387f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013883:	5b                   	pop    ebx
c0013884:	5e                   	pop    esi
c0013885:	5f                   	pop    edi
c0013886:	e9 67 ff ff ff       	jmp    c00137f2 <Buzzer::stop()>
c001388b:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013891:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0013896:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c001389e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00138a2:	c7 44 24 14 05 38 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013805
c00138aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00138ae:	5b                   	pop    ebx
c00138af:	5e                   	pop    esi
c00138b0:	5f                   	pop    edi
c00138b1:	e9 90 a4 00 00       	jmp    c001dd46 <Process::createThread(void (*)(void*), void*, int)>

c00138b6 <User::loadClockSettings(int)>:
c00138b6:	53                   	push   ebx
c00138b7:	83 ec 14             	sub    esp,0x14
c00138ba:	68 14 01 00 00       	push   0x114
c00138bf:	e8 1f c1 ff ff       	call   c000f9e3 <malloc>
c00138c4:	83 c4 0c             	add    esp,0xc
c00138c7:	89 c3                	mov    ebx,eax
c00138c9:	ff 35 10 fc 02 c0    	push   DWORD PTR ds:0xc002fc10
c00138cf:	68 f0 b2 02 c0       	push   0xc002b2f0
c00138d4:	50                   	push   eax
c00138d5:	e8 c0 f6 ff ff       	call   c0012f9a <File::File(char const*, Process*)>
c00138da:	58                   	pop    eax
c00138db:	5a                   	pop    edx
c00138dc:	6a 01                	push   0x1
c00138de:	53                   	push   ebx
c00138df:	e8 1a f7 ff ff       	call   c0012ffe <File::open(FileOpenMode)>
c00138e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00138e7:	e8 70 f7 ff ff       	call   c001305c <File::close()>
c00138ec:	83 c4 10             	add    esp,0x10
c00138ef:	85 db                	test   ebx,ebx
c00138f1:	74 0f                	je     c0013902 <User::loadClockSettings(int)+0x4c>
c00138f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138f5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00138f9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00138fc:	83 c4 08             	add    esp,0x8
c00138ff:	5b                   	pop    ebx
c0013900:	ff e0                	jmp    eax
c0013902:	83 c4 08             	add    esp,0x8
c0013905:	5b                   	pop    ebx
c0013906:	c3                   	ret    
c0013907:	90                   	nop

c0013908 <Clock::Clock(char const*)>:
c0013908:	83 ec 0c             	sub    esp,0xc
c001390b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001390f:	83 ec 08             	sub    esp,0x8
c0013912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013916:	50                   	push   eax
c0013917:	e8 5c 07 00 00       	call   c0014078 <Device::Device(char const*)>
c001391c:	83 c4 10             	add    esp,0x10
c001391f:	ba 18 b3 02 c0       	mov    edx,0xc002b318
c0013924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013928:	89 10                	mov    DWORD PTR [eax],edx
c001392a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001392e:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013938:	90                   	nop
c0013939:	83 c4 0c             	add    esp,0xc
c001393c:	c3                   	ret    
c001393d:	90                   	nop

c001393e <Clock::~Clock()>:
c001393e:	83 ec 0c             	sub    esp,0xc
c0013941:	ba 18 b3 02 c0       	mov    edx,0xc002b318
c0013946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001394a:	89 10                	mov    DWORD PTR [eax],edx
c001394c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013950:	83 ec 0c             	sub    esp,0xc
c0013953:	50                   	push   eax
c0013954:	e8 e9 03 00 00       	call   c0013d42 <Device::~Device()>
c0013959:	83 c4 10             	add    esp,0x10
c001395c:	90                   	nop
c001395d:	83 c4 0c             	add    esp,0xc
c0013960:	c3                   	ret    
c0013961:	90                   	nop

c0013962 <Clock::~Clock()>:
c0013962:	83 ec 0c             	sub    esp,0xc
c0013965:	83 ec 0c             	sub    esp,0xc
c0013968:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001396c:	e8 cd ff ff ff       	call   c001393e <Clock::~Clock()>
c0013971:	83 c4 10             	add    esp,0x10
c0013974:	83 ec 08             	sub    esp,0x8
c0013977:	68 58 01 00 00       	push   0x158
c001397c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013980:	e8 de ef ff ff       	call   c0012963 <operator delete(void*, unsigned long)>
c0013985:	83 c4 10             	add    esp,0x10
c0013988:	83 c4 0c             	add    esp,0xc
c001398b:	c3                   	ret    

c001398c <Clock::timeInSecondsLocal()>:
c001398c:	53                   	push   ebx
c001398d:	83 ec 14             	sub    esp,0x14
c0013990:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013994:	8b 10                	mov    edx,DWORD PTR [eax]
c0013996:	50                   	push   eax
c0013997:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001399a:	0f b6 0d 5c e8 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e85c
c00139a1:	03 0d 60 e8 02 c0    	add    ecx,DWORD PTR ds:0xc002e860
c00139a7:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00139ad:	89 cb                	mov    ebx,ecx
c00139af:	c1 fb 1f             	sar    ebx,0x1f
c00139b2:	01 c8                	add    eax,ecx
c00139b4:	11 da                	adc    edx,ebx
c00139b6:	83 c4 10             	add    esp,0x10
c00139b9:	31 c9                	xor    ecx,ecx
c00139bb:	80 3d 5d e8 02 c0 00 	cmp    BYTE PTR ds:0xc002e85d,0x0
c00139c2:	74 05                	je     c00139c9 <Clock::timeInSecondsLocal()+0x3d>
c00139c4:	b9 08 07 00 00       	mov    ecx,0x708
c00139c9:	31 db                	xor    ebx,ebx
c00139cb:	01 c8                	add    eax,ecx
c00139cd:	11 da                	adc    edx,ebx
c00139cf:	83 c4 08             	add    esp,0x8
c00139d2:	5b                   	pop    ebx
c00139d3:	c3                   	ret    

c00139d4 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00139d4:	57                   	push   edi
c00139d5:	56                   	push   esi
c00139d6:	53                   	push   ebx
c00139d7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00139db:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00139df:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139e1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00139e5:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00139e8:	0f b6 05 5c e8 02 c0 	movzx  eax,BYTE PTR ds:0xc002e85c
c00139ef:	03 05 60 e8 02 c0    	add    eax,DWORD PTR ds:0xc002e860
c00139f5:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00139fb:	99                   	cdq    
c00139fc:	29 c6                	sub    esi,eax
c00139fe:	19 d7                	sbb    edi,edx
c0013a00:	89 f0                	mov    eax,esi
c0013a02:	89 fa                	mov    edx,edi
c0013a04:	31 f6                	xor    esi,esi
c0013a06:	80 3d 5d e8 02 c0 00 	cmp    BYTE PTR ds:0xc002e85d,0x0
c0013a0d:	74 05                	je     c0013a14 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013a0f:	be 08 07 00 00       	mov    esi,0x708
c0013a14:	31 ff                	xor    edi,edi
c0013a16:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013a1a:	29 f0                	sub    eax,esi
c0013a1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a20:	19 fa                	sbb    edx,edi
c0013a22:	89 d8                	mov    eax,ebx
c0013a24:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013a28:	5b                   	pop    ebx
c0013a29:	5e                   	pop    esi
c0013a2a:	5f                   	pop    edi
c0013a2b:	ff e0                	jmp    eax

c0013a2d <datetimeToSeconds(datetime_t)>:
c0013a2d:	55                   	push   ebp
c0013a2e:	57                   	push   edi
c0013a2f:	56                   	push   esi
c0013a30:	53                   	push   ebx
c0013a31:	83 ec 14             	sub    esp,0x14
c0013a34:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013a38:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013a3c:	89 d3                	mov    ebx,edx
c0013a3e:	0f b6 c6             	movzx  eax,dh
c0013a41:	c1 eb 10             	shr    ebx,0x10
c0013a44:	48                   	dec    eax
c0013a45:	66 81 eb 6c 07       	sub    bx,0x76c
c0013a4a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013a4e:	0f b6 f5             	movzx  esi,ch
c0013a51:	89 cf                	mov    edi,ecx
c0013a53:	6b f6 3c             	imul   esi,esi,0x3c
c0013a56:	c1 ef 10             	shr    edi,0x10
c0013a59:	0f b6 c9             	movzx  ecx,cl
c0013a5c:	89 f8                	mov    eax,edi
c0013a5e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013a64:	0f b6 f8             	movzx  edi,al
c0013a67:	0f b6 d2             	movzx  edx,dl
c0013a6a:	01 fe                	add    esi,edi
c0013a6c:	01 f1                	add    ecx,esi
c0013a6e:	0f b7 f3             	movzx  esi,bx
c0013a71:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013a75:	c1 f9 1f             	sar    ecx,0x1f
c0013a78:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013a7d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013a81:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013a86:	8b 0c 8d 60 b3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4ca0]
c0013a8d:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013a91:	76 29                	jbe    c0013abc <datetimeToSeconds(datetime_t)+0x8f>
c0013a93:	f6 c3 03             	test   bl,0x3
c0013a96:	75 24                	jne    c0013abc <datetimeToSeconds(datetime_t)+0x8f>
c0013a98:	31 d2                	xor    edx,edx
c0013a9a:	bf 64 00 00 00       	mov    edi,0x64
c0013a9f:	89 d8                	mov    eax,ebx
c0013aa1:	66 f7 f7             	div    di
c0013aa4:	66 85 d2             	test   dx,dx
c0013aa7:	75 12                	jne    c0013abb <datetimeToSeconds(datetime_t)+0x8e>
c0013aa9:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013aaf:	bf 90 01 00 00       	mov    edi,0x190
c0013ab4:	99                   	cdq    
c0013ab5:	f7 ff                	idiv   edi
c0013ab7:	85 d2                	test   edx,edx
c0013ab9:	75 01                	jne    c0013abc <datetimeToSeconds(datetime_t)+0x8f>
c0013abb:	41                   	inc    ecx
c0013abc:	66 83 fb 46          	cmp    bx,0x46
c0013ac0:	76 45                	jbe    c0013b07 <datetimeToSeconds(datetime_t)+0xda>
c0013ac2:	bb 46 00 00 00       	mov    ebx,0x46
c0013ac7:	bf 64 00 00 00       	mov    edi,0x64
c0013acc:	bd 90 01 00 00       	mov    ebp,0x190
c0013ad1:	b8 6d 01 00 00       	mov    eax,0x16d
c0013ad6:	f6 c3 03             	test   bl,0x3
c0013ad9:	75 23                	jne    c0013afe <datetimeToSeconds(datetime_t)+0xd1>
c0013adb:	89 d8                	mov    eax,ebx
c0013add:	99                   	cdq    
c0013ade:	f7 ff                	idiv   edi
c0013ae0:	b8 6e 01 00 00       	mov    eax,0x16e
c0013ae5:	85 d2                	test   edx,edx
c0013ae7:	75 15                	jne    c0013afe <datetimeToSeconds(datetime_t)+0xd1>
c0013ae9:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013aef:	99                   	cdq    
c0013af0:	f7 fd                	idiv   ebp
c0013af2:	83 fa 01             	cmp    edx,0x1
c0013af5:	19 c0                	sbb    eax,eax
c0013af7:	f7 d0                	not    eax
c0013af9:	05 6e 01 00 00       	add    eax,0x16e
c0013afe:	01 c1                	add    ecx,eax
c0013b00:	43                   	inc    ebx
c0013b01:	39 f3                	cmp    ebx,esi
c0013b03:	7c cc                	jl     c0013ad1 <datetimeToSeconds(datetime_t)+0xa4>
c0013b05:	eb 35                	jmp    c0013b3c <datetimeToSeconds(datetime_t)+0x10f>
c0013b07:	74 33                	je     c0013b3c <datetimeToSeconds(datetime_t)+0x10f>
c0013b09:	b8 45 00 00 00       	mov    eax,0x45
c0013b0e:	89 c2                	mov    edx,eax
c0013b10:	83 e2 03             	and    edx,0x3
c0013b13:	39 f0                	cmp    eax,esi
c0013b15:	7e 0f                	jle    c0013b26 <datetimeToSeconds(datetime_t)+0xf9>
c0013b17:	83 fa 01             	cmp    edx,0x1
c0013b1a:	19 d2                	sbb    edx,edx
c0013b1c:	48                   	dec    eax
c0013b1d:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013b24:	eb e8                	jmp    c0013b0e <datetimeToSeconds(datetime_t)+0xe1>
c0013b26:	b8 6d 01 00 00       	mov    eax,0x16d
c0013b2b:	85 d2                	test   edx,edx
c0013b2d:	75 0b                	jne    c0013b3a <datetimeToSeconds(datetime_t)+0x10d>
c0013b2f:	66 83 fb 01          	cmp    bx,0x1
c0013b33:	19 c0                	sbb    eax,eax
c0013b35:	05 6e 01 00 00       	add    eax,0x16e
c0013b3a:	29 c1                	sub    ecx,eax
c0013b3c:	b8 80 51 01 00       	mov    eax,0x15180
c0013b41:	f7 e9                	imul   ecx
c0013b43:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013b47:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013b4b:	83 c4 14             	add    esp,0x14
c0013b4e:	5b                   	pop    ebx
c0013b4f:	5e                   	pop    esi
c0013b50:	5f                   	pop    edi
c0013b51:	5d                   	pop    ebp
c0013b52:	c3                   	ret    
c0013b53:	90                   	nop

c0013b54 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013b54:	57                   	push   edi
c0013b55:	56                   	push   esi
c0013b56:	53                   	push   ebx
c0013b57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013b5b:	8b 06                	mov    eax,DWORD PTR [esi]
c0013b5d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013b60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b64:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b68:	e8 c0 fe ff ff       	call   c0013a2d <datetimeToSeconds(datetime_t)>
c0013b6d:	59                   	pop    ecx
c0013b6e:	0f b6 0d 5c e8 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e85c
c0013b75:	5b                   	pop    ebx
c0013b76:	03 0d 60 e8 02 c0    	add    ecx,DWORD PTR ds:0xc002e860
c0013b7c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013b82:	89 cb                	mov    ebx,ecx
c0013b84:	c1 fb 1f             	sar    ebx,0x1f
c0013b87:	29 c8                	sub    eax,ecx
c0013b89:	19 da                	sbb    edx,ebx
c0013b8b:	31 c9                	xor    ecx,ecx
c0013b8d:	80 3d 5d e8 02 c0 00 	cmp    BYTE PTR ds:0xc002e85d,0x0
c0013b94:	74 05                	je     c0013b9b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013b96:	b9 08 07 00 00       	mov    ecx,0x708
c0013b9b:	31 db                	xor    ebx,ebx
c0013b9d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013ba1:	29 c8                	sub    eax,ecx
c0013ba3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ba7:	19 da                	sbb    edx,ebx
c0013ba9:	89 f8                	mov    eax,edi
c0013bab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013baf:	5b                   	pop    ebx
c0013bb0:	5e                   	pop    esi
c0013bb1:	5f                   	pop    edi
c0013bb2:	ff e0                	jmp    eax

c0013bb4 <secondsToDatetime(unsigned long long)>:
c0013bb4:	55                   	push   ebp
c0013bb5:	57                   	push   edi
c0013bb6:	56                   	push   esi
c0013bb7:	53                   	push   ebx
c0013bb8:	83 ec 1c             	sub    esp,0x1c
c0013bbb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013bbf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013bc3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013bc7:	6a 00                	push   0x0
c0013bc9:	68 80 51 01 00       	push   0x15180
c0013bce:	55                   	push   ebp
c0013bcf:	57                   	push   edi
c0013bd0:	e8 3f 32 01 00       	call   c0026e14 <__udivdi3>
c0013bd5:	83 c4 10             	add    esp,0x10
c0013bd8:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013bde:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013be2:	6a 00                	push   0x0
c0013be4:	68 80 51 01 00       	push   0x15180
c0013be9:	55                   	push   ebp
c0013bea:	57                   	push   edi
c0013beb:	bf 10 0e 00 00       	mov    edi,0xe10
c0013bf0:	e8 1f 33 01 00       	call   c0026f14 <__umoddi3>
c0013bf5:	83 c4 10             	add    esp,0x10
c0013bf8:	99                   	cdq    
c0013bf9:	f7 ff                	idiv   edi
c0013bfb:	bf 3c 00 00 00       	mov    edi,0x3c
c0013c00:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013c03:	89 d0                	mov    eax,edx
c0013c05:	99                   	cdq    
c0013c06:	f7 ff                	idiv   edi
c0013c08:	85 db                	test   ebx,ebx
c0013c0a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013c0d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013c10:	79 11                	jns    c0013c23 <secondsToDatetime(unsigned long long)+0x6f>
c0013c12:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013c16:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013c1c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013c21:	eb 07                	jmp    c0013c2a <secondsToDatetime(unsigned long long)+0x76>
c0013c23:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013c28:	89 d8                	mov    eax,ebx
c0013c2a:	bf b4 05 00 00       	mov    edi,0x5b4
c0013c2f:	99                   	cdq    
c0013c30:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013c35:	f7 f9                	idiv   ecx
c0013c37:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013c3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013c40:	31 d2                	xor    edx,edx
c0013c42:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013c4a:	01 c3                	add    ebx,eax
c0013c4c:	89 d8                	mov    eax,ebx
c0013c4e:	f7 f1                	div    ecx
c0013c50:	31 d2                	xor    edx,edx
c0013c52:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013c55:	89 d8                	mov    eax,ebx
c0013c57:	f7 f7                	div    edi
c0013c59:	31 d2                	xor    edx,edx
c0013c5b:	29 c1                	sub    ecx,eax
c0013c5d:	89 d8                	mov    eax,ebx
c0013c5f:	f7 f5                	div    ebp
c0013c61:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013c66:	29 c1                	sub    ecx,eax
c0013c68:	31 d2                	xor    edx,edx
c0013c6a:	89 c8                	mov    eax,ecx
c0013c6c:	f7 f5                	div    ebp
c0013c6e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013c73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013c77:	31 d2                	xor    edx,edx
c0013c79:	89 c8                	mov    eax,ecx
c0013c7b:	f7 f5                	div    ebp
c0013c7d:	31 d2                	xor    edx,edx
c0013c7f:	01 c3                	add    ebx,eax
c0013c81:	89 c8                	mov    eax,ecx
c0013c83:	f7 f7                	div    edi
c0013c85:	bf 99 00 00 00       	mov    edi,0x99
c0013c8a:	29 c3                	sub    ebx,eax
c0013c8c:	31 d2                	xor    edx,edx
c0013c8e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013c96:	29 c3                	sub    ebx,eax
c0013c98:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013c9b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013c9e:	bb 05 00 00 00       	mov    ebx,0x5
c0013ca3:	83 c1 02             	add    ecx,0x2
c0013ca6:	89 c8                	mov    eax,ecx
c0013ca8:	f7 f7                	div    edi
c0013caa:	31 d2                	xor    edx,edx
c0013cac:	89 c7                	mov    edi,eax
c0013cae:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013cb4:	83 c0 02             	add    eax,0x2
c0013cb7:	f7 f3                	div    ebx
c0013cb9:	89 eb                	mov    ebx,ebp
c0013cbb:	29 c3                	sub    ebx,eax
c0013cbd:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013cc3:	88 1e                	mov    BYTE PTR [esi],bl
c0013cc5:	19 c0                	sbb    eax,eax
c0013cc7:	31 d2                	xor    edx,edx
c0013cc9:	83 e0 0c             	and    eax,0xc
c0013ccc:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013cd0:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013cd8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013cdc:	83 f9 01             	cmp    ecx,0x1
c0013cdf:	0f 96 c2             	setbe  dl
c0013ce2:	41                   	inc    ecx
c0013ce3:	01 d0                	add    eax,edx
c0013ce5:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013ce8:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013cec:	83 c4 1c             	add    esp,0x1c
c0013cef:	89 f0                	mov    eax,esi
c0013cf1:	5b                   	pop    ebx
c0013cf2:	5e                   	pop    esi
c0013cf3:	5f                   	pop    edi
c0013cf4:	5d                   	pop    ebp
c0013cf5:	c2 04 00             	ret    0x4

c0013cf8 <Clock::timeInDatetimeLocal()>:
c0013cf8:	53                   	push   ebx
c0013cf9:	83 ec 14             	sub    esp,0x14
c0013cfc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d00:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013d04:	e8 83 fc ff ff       	call   c001398c <Clock::timeInSecondsLocal()>
c0013d09:	83 c4 0c             	add    esp,0xc
c0013d0c:	52                   	push   edx
c0013d0d:	50                   	push   eax
c0013d0e:	53                   	push   ebx
c0013d0f:	e8 a0 fe ff ff       	call   c0013bb4 <secondsToDatetime(unsigned long long)>
c0013d14:	89 d8                	mov    eax,ebx
c0013d16:	83 c4 14             	add    esp,0x14
c0013d19:	5b                   	pop    ebx
c0013d1a:	c2 04 00             	ret    0x4
c0013d1d:	90                   	nop

c0013d1e <Device::hibernate()>:
c0013d1e:	c3                   	ret    
c0013d1f:	90                   	nop

c0013d20 <Device::wake()>:
c0013d20:	c3                   	ret    
c0013d21:	90                   	nop

c0013d22 <Device::detect()>:
c0013d22:	c3                   	ret    
c0013d23:	90                   	nop

c0013d24 <Device::disableLegacy()>:
c0013d24:	c3                   	ret    
c0013d25:	90                   	nop

c0013d26 <Device::powerSaving(PowerSavingLevel)>:
c0013d26:	c3                   	ret    
c0013d27:	90                   	nop

c0013d28 <DriverlessDevice::close(int, int, void*)>:
c0013d28:	31 c0                	xor    eax,eax
c0013d2a:	c3                   	ret    
c0013d2b:	90                   	nop

c0013d2c <DriverlessDevice::detect()>:
c0013d2c:	c3                   	ret    
c0013d2d:	90                   	nop

c0013d2e <DriverlessDevice::open(int, int, void*)>:
c0013d2e:	83 ec 18             	sub    esp,0x18
c0013d31:	68 90 b3 02 c0       	push   0xc002b390
c0013d36:	e8 9e 66 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c0013d3b:	83 c8 ff             	or     eax,0xffffffff
c0013d3e:	83 c4 1c             	add    esp,0x1c
c0013d41:	c3                   	ret    

c0013d42 <Device::~Device()>:
c0013d42:	ba f0 b3 02 c0       	mov    edx,0xc002b3f0
c0013d47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d4b:	89 10                	mov    DWORD PTR [eax],edx
c0013d4d:	90                   	nop
c0013d4e:	c3                   	ret    
c0013d4f:	90                   	nop

c0013d50 <Device::~Device()>:
c0013d50:	83 ec 0c             	sub    esp,0xc
c0013d53:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013d57:	e8 e6 ff ff ff       	call   c0013d42 <Device::~Device()>
c0013d5c:	83 c4 04             	add    esp,0x4
c0013d5f:	83 ec 08             	sub    esp,0x8
c0013d62:	68 58 01 00 00       	push   0x158
c0013d67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d6b:	e8 f3 eb ff ff       	call   c0012963 <operator delete(void*, unsigned long)>
c0013d70:	83 c4 10             	add    esp,0x10
c0013d73:	83 c4 0c             	add    esp,0xc
c0013d76:	c3                   	ret    
c0013d77:	90                   	nop

c0013d78 <Device::findAndLoadDriver()>:
c0013d78:	c7 44 24 04 ae b3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b3ae
c0013d80:	e9 b6 ec ff ff       	jmp    c0012a3b <Dbg::kprintf(char const*, ...)>
c0013d85:	90                   	nop

c0013d86 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013d86:	57                   	push   edi
c0013d87:	b9 09 00 00 00       	mov    ecx,0x9
c0013d8c:	56                   	push   esi
c0013d8d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013d91:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013d95:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013d9f:	81 c7 18 01 00 00    	add    edi,0x118
c0013da5:	fc                   	cld    
c0013da6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013da8:	5e                   	pop    esi
c0013da9:	5f                   	pop    edi
c0013daa:	c3                   	ret    
c0013dab:	90                   	nop

c0013dac <Device::preOpenACPI(void*, char*, char*)>:
c0013dac:	57                   	push   edi
c0013dad:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013db2:	56                   	push   esi
c0013db3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013db7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013dbb:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013dc5:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013dcb:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013dd1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013dd5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013dd7:	b9 0e 00 00 00       	mov    ecx,0xe
c0013ddc:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013de2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013de6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013de8:	5e                   	pop    esi
c0013de9:	5f                   	pop    edi
c0013dea:	c3                   	ret    
c0013deb:	90                   	nop

c0013dec <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013dec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013df0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013df5:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013dfc:	75 0b                	jne    c0013e09 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013dfe:	8b 00                	mov    eax,DWORD PTR [eax]
c0013e00:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013e04:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013e07:	eb 1e                	jmp    c0013e27 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013e09:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0013e0e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013e14:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013e1a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013e1c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013e20:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013e24:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013e27:	ff e0                	jmp    eax
c0013e29:	90                   	nop

c0013e2a <Device::getParent()>:
c0013e2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e2e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013e34:	c3                   	ret    
c0013e35:	90                   	nop

c0013e36 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013e36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e3a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013e3f:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013e46:	75 0b                	jne    c0013e53 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013e48:	8b 00                	mov    eax,DWORD PTR [eax]
c0013e4a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013e4e:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013e51:	eb 1e                	jmp    c0013e71 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013e53:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0013e58:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013e5e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013e64:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013e66:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013e6a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013e6e:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013e71:	ff e0                	jmp    eax
c0013e73:	90                   	nop

c0013e74 <Device::addChild(Device*)>:
c0013e74:	53                   	push   ebx
c0013e75:	83 ec 08             	sub    esp,0x8
c0013e78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013e7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e80:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013e86:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013e8c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013e8e:	85 d2                	test   edx,edx
c0013e90:	74 04                	je     c0013e96 <Device::addChild(Device*)+0x22>
c0013e92:	89 d3                	mov    ebx,edx
c0013e94:	eb f6                	jmp    c0013e8c <Device::addChild(Device*)+0x18>
c0013e96:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013e99:	83 ec 0c             	sub    esp,0xc
c0013e9c:	6a 08                	push   0x8
c0013e9e:	e8 40 bb ff ff       	call   c000f9e3 <malloc>
c0013ea3:	89 03                	mov    DWORD PTR [ebx],eax
c0013ea5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013eab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013eb2:	83 c4 18             	add    esp,0x18
c0013eb5:	5b                   	pop    ebx
c0013eb6:	c3                   	ret    
c0013eb7:	90                   	nop

c0013eb8 <Device::removeAllChildren()>:
c0013eb8:	56                   	push   esi
c0013eb9:	53                   	push   ebx
c0013eba:	52                   	push   edx
c0013ebb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ebf:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013ec5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ec8:	74 17                	je     c0013ee1 <Device::removeAllChildren()+0x29>
c0013eca:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013ecd:	85 c0                	test   eax,eax
c0013ecf:	74 0c                	je     c0013edd <Device::removeAllChildren()+0x25>
c0013ed1:	83 ec 0c             	sub    esp,0xc
c0013ed4:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ed6:	50                   	push   eax
c0013ed7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013eda:	83 c4 10             	add    esp,0x10
c0013edd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013edf:	eb e4                	jmp    c0013ec5 <Device::removeAllChildren()+0xd>
c0013ee1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013ee7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013eed:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013ef3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013efa:	58                   	pop    eax
c0013efb:	5b                   	pop    ebx
c0013efc:	5e                   	pop    esi
c0013efd:	c3                   	ret    

c0013efe <Device::hibernateAll()>:
c0013efe:	53                   	push   ebx
c0013eff:	83 ec 14             	sub    esp,0x14
c0013f02:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f06:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f08:	53                   	push   ebx
c0013f09:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013f0c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013f12:	83 c4 10             	add    esp,0x10
c0013f15:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f18:	74 0f                	je     c0013f29 <Device::hibernateAll()+0x2b>
c0013f1a:	83 ec 0c             	sub    esp,0xc
c0013f1d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f20:	e8 d9 ff ff ff       	call   c0013efe <Device::hibernateAll()>
c0013f25:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f27:	eb e9                	jmp    c0013f12 <Device::hibernateAll()+0x14>
c0013f29:	83 c4 08             	add    esp,0x8
c0013f2c:	5b                   	pop    ebx
c0013f2d:	c3                   	ret    

c0013f2e <Device::wakeAll()>:
c0013f2e:	53                   	push   ebx
c0013f2f:	83 ec 14             	sub    esp,0x14
c0013f32:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f36:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f38:	53                   	push   ebx
c0013f39:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013f3c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013f42:	83 c4 10             	add    esp,0x10
c0013f45:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f48:	74 0f                	je     c0013f59 <Device::wakeAll()+0x2b>
c0013f4a:	83 ec 0c             	sub    esp,0xc
c0013f4d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f50:	e8 d9 ff ff ff       	call   c0013f2e <Device::wakeAll()>
c0013f55:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f57:	eb e9                	jmp    c0013f42 <Device::wakeAll()+0x14>
c0013f59:	83 c4 08             	add    esp,0x8
c0013f5c:	5b                   	pop    ebx
c0013f5d:	c3                   	ret    

c0013f5e <Device::detectAll()>:
c0013f5e:	53                   	push   ebx
c0013f5f:	83 ec 14             	sub    esp,0x14
c0013f62:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f66:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f68:	53                   	push   ebx
c0013f69:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013f6c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013f72:	83 c4 10             	add    esp,0x10
c0013f75:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f78:	74 0f                	je     c0013f89 <Device::detectAll()+0x2b>
c0013f7a:	83 ec 0c             	sub    esp,0xc
c0013f7d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f80:	e8 d9 ff ff ff       	call   c0013f5e <Device::detectAll()>
c0013f85:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f87:	eb e9                	jmp    c0013f72 <Device::detectAll()+0x14>
c0013f89:	83 c4 08             	add    esp,0x8
c0013f8c:	5b                   	pop    ebx
c0013f8d:	c3                   	ret    

c0013f8e <Device::disableLegacyAll()>:
c0013f8e:	53                   	push   ebx
c0013f8f:	83 ec 14             	sub    esp,0x14
c0013f92:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f96:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f98:	53                   	push   ebx
c0013f99:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013f9c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013fa2:	83 c4 10             	add    esp,0x10
c0013fa5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013fa8:	74 0f                	je     c0013fb9 <Device::disableLegacyAll()+0x2b>
c0013faa:	83 ec 0c             	sub    esp,0xc
c0013fad:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013fb0:	e8 d9 ff ff ff       	call   c0013f8e <Device::disableLegacyAll()>
c0013fb5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013fb7:	eb e9                	jmp    c0013fa2 <Device::disableLegacyAll()+0x14>
c0013fb9:	83 c4 08             	add    esp,0x8
c0013fbc:	5b                   	pop    ebx
c0013fbd:	c3                   	ret    

c0013fbe <Device::loadDriversForAll()>:
c0013fbe:	53                   	push   ebx
c0013fbf:	83 ec 08             	sub    esp,0x8
c0013fc2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013fc6:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013fcd:	75 0c                	jne    c0013fdb <Device::loadDriversForAll()+0x1d>
c0013fcf:	83 ec 0c             	sub    esp,0xc
c0013fd2:	53                   	push   ebx
c0013fd3:	e8 a0 fd ff ff       	call   c0013d78 <Device::findAndLoadDriver()>
c0013fd8:	83 c4 10             	add    esp,0x10
c0013fdb:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013fe1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013fe4:	74 12                	je     c0013ff8 <Device::loadDriversForAll()+0x3a>
c0013fe6:	83 ec 0c             	sub    esp,0xc
c0013fe9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013fec:	e8 cd ff ff ff       	call   c0013fbe <Device::loadDriversForAll()>
c0013ff1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ff3:	83 c4 10             	add    esp,0x10
c0013ff6:	eb e9                	jmp    c0013fe1 <Device::loadDriversForAll()+0x23>
c0013ff8:	83 c4 08             	add    esp,0x8
c0013ffb:	5b                   	pop    ebx
c0013ffc:	c3                   	ret    
c0013ffd:	90                   	nop

c0013ffe <Device::closeAll()>:
c0013ffe:	53                   	push   ebx
c0013fff:	83 ec 08             	sub    esp,0x8
c0014002:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014006:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014008:	6a 00                	push   0x0
c001400a:	6a 00                	push   0x0
c001400c:	6a 00                	push   0x0
c001400e:	53                   	push   ebx
c001400f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014012:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014018:	83 c4 10             	add    esp,0x10
c001401b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001401e:	74 0f                	je     c001402f <Device::closeAll()+0x31>
c0014020:	83 ec 0c             	sub    esp,0xc
c0014023:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014026:	e8 d3 ff ff ff       	call   c0013ffe <Device::closeAll()>
c001402b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001402d:	eb e9                	jmp    c0014018 <Device::closeAll()+0x1a>
c001402f:	83 c4 08             	add    esp,0x8
c0014032:	5b                   	pop    ebx
c0014033:	c3                   	ret    

c0014034 <Device::powerSavingAll(PowerSavingLevel)>:
c0014034:	56                   	push   esi
c0014035:	53                   	push   ebx
c0014036:	83 ec 0c             	sub    esp,0xc
c0014039:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001403d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014041:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014043:	56                   	push   esi
c0014044:	53                   	push   ebx
c0014045:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0014048:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001404e:	83 c4 10             	add    esp,0x10
c0014051:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014054:	74 0f                	je     c0014065 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014056:	52                   	push   edx
c0014057:	52                   	push   edx
c0014058:	56                   	push   esi
c0014059:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001405c:	e8 d3 ff ff ff       	call   c0014034 <Device::powerSavingAll(PowerSavingLevel)>
c0014061:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014063:	eb e9                	jmp    c001404e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014065:	58                   	pop    eax
c0014066:	5b                   	pop    ebx
c0014067:	5e                   	pop    esi
c0014068:	c3                   	ret    
c0014069:	90                   	nop

c001406a <Device::setName(char const*)>:
c001406a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014072:	e9 95 c7 fe ff       	jmp    c000080c <strcpy>
c0014077:	90                   	nop

c0014078 <Device::Device(char const*)>:
c0014078:	83 ec 1c             	sub    esp,0x1c
c001407b:	ba f0 b3 02 c0       	mov    edx,0xc002b3f0
c0014080:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014084:	89 10                	mov    DWORD PTR [eax],edx
c0014086:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001408a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014094:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014098:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00140a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140a6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00140b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140b4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00140be:	83 ec 08             	sub    esp,0x8
c00140c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00140c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00140c9:	e8 9c ff ff ff       	call   c001406a <Device::setName(char const*)>
c00140ce:	83 c4 10             	add    esp,0x10
c00140d1:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00140d9:	83 ec 0c             	sub    esp,0xc
c00140dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00140e0:	e8 fe b8 ff ff       	call   c000f9e3 <malloc>
c00140e5:	83 c4 10             	add    esp,0x10
c00140e8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00140ee:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00140f5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00140f9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00140ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014103:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014109:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001410f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014113:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014119:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014120:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014124:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001412b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001412f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014136:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001413a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014144:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014148:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014152:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014156:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014164:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001416e:	90                   	nop
c001416f:	83 c4 1c             	add    esp,0x1c
c0014172:	c3                   	ret    
c0014173:	90                   	nop

c0014174 <Device::getName()>:
c0014174:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014178:	05 d0 00 00 00       	add    eax,0xd0
c001417d:	c3                   	ret    

c001417e <DriverlessDevice::DriverlessDevice(char const*)>:
c001417e:	83 ec 0c             	sub    esp,0xc
c0014181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014185:	83 ec 08             	sub    esp,0x8
c0014188:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001418c:	50                   	push   eax
c001418d:	e8 e6 fe ff ff       	call   c0014078 <Device::Device(char const*)>
c0014192:	83 c4 10             	add    esp,0x10
c0014195:	ba 1c b4 02 c0       	mov    edx,0xc002b41c
c001419a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001419e:	89 10                	mov    DWORD PTR [eax],edx
c00141a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141a4:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00141ae:	90                   	nop
c00141af:	83 c4 0c             	add    esp,0xc
c00141b2:	c3                   	ret    
c00141b3:	90                   	nop

c00141b4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00141b4:	57                   	push   edi
c00141b5:	56                   	push   esi
c00141b6:	53                   	push   ebx
c00141b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00141bb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00141bf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00141c3:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00141c9:	75 0c                	jne    c00141d7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00141cb:	52                   	push   edx
c00141cc:	52                   	push   edx
c00141cd:	53                   	push   ebx
c00141ce:	56                   	push   esi
c00141cf:	e8 7c 4b 01 00       	call   c0028d50 <LinkedList<Device>::addElement(Device*)>
c00141d4:	83 c4 10             	add    esp,0x10
c00141d7:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00141dd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00141e0:	74 12                	je     c00141f4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00141e2:	50                   	push   eax
c00141e3:	57                   	push   edi
c00141e4:	56                   	push   esi
c00141e5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00141e8:	e8 c7 ff ff ff       	call   c00141b4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00141ed:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00141ef:	83 c4 10             	add    esp,0x10
c00141f2:	eb e9                	jmp    c00141dd <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00141f4:	5b                   	pop    ebx
c00141f5:	5e                   	pop    esi
c00141f6:	5f                   	pop    edi
c00141f7:	c3                   	ret    

c00141f8 <getDevicesOfType(DeviceType)>:
c00141f8:	53                   	push   ebx
c00141f9:	83 ec 14             	sub    esp,0x14
c00141fc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014200:	53                   	push   ebx
c0014201:	e8 26 4c 01 00       	call   c0028e2c <LinkedList<Device>::LinkedList()>
c0014206:	83 c4 0c             	add    esp,0xc
c0014209:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001420d:	53                   	push   ebx
c001420e:	ff 35 e8 e6 02 c0    	push   DWORD PTR ds:0xc002e6e8
c0014214:	e8 9b ff ff ff       	call   c00141b4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014219:	89 d8                	mov    eax,ebx
c001421b:	83 c4 18             	add    esp,0x18
c001421e:	5b                   	pop    ebx
c001421f:	c2 04 00             	ret    0x4

c0014222 <HardDiskController::HardDiskController(char const*)>:
c0014222:	83 ec 0c             	sub    esp,0xc
c0014225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014229:	83 ec 08             	sub    esp,0x8
c001422c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014230:	50                   	push   eax
c0014231:	e8 42 fe ff ff       	call   c0014078 <Device::Device(char const*)>
c0014236:	83 c4 10             	add    esp,0x10
c0014239:	ba 48 b4 02 c0       	mov    edx,0xc002b448
c001423e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014242:	89 10                	mov    DWORD PTR [eax],edx
c0014244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014248:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014252:	90                   	nop
c0014253:	83 c4 0c             	add    esp,0xc
c0014256:	c3                   	ret    
c0014257:	90                   	nop

c0014258 <HardDiskController::~HardDiskController()>:
c0014258:	83 ec 0c             	sub    esp,0xc
c001425b:	ba 48 b4 02 c0       	mov    edx,0xc002b448
c0014260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014264:	89 10                	mov    DWORD PTR [eax],edx
c0014266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001426a:	83 ec 0c             	sub    esp,0xc
c001426d:	50                   	push   eax
c001426e:	e8 cf fa ff ff       	call   c0013d42 <Device::~Device()>
c0014273:	83 c4 10             	add    esp,0x10
c0014276:	90                   	nop
c0014277:	83 c4 0c             	add    esp,0xc
c001427a:	c3                   	ret    
c001427b:	90                   	nop

c001427c <HardDiskController::~HardDiskController()>:
c001427c:	83 ec 0c             	sub    esp,0xc
c001427f:	83 ec 0c             	sub    esp,0xc
c0014282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014286:	e8 cd ff ff ff       	call   c0014258 <HardDiskController::~HardDiskController()>
c001428b:	83 c4 10             	add    esp,0x10
c001428e:	83 ec 08             	sub    esp,0x8
c0014291:	68 58 01 00 00       	push   0x158
c0014296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001429a:	e8 c4 e6 ff ff       	call   c0012963 <operator delete(void*, unsigned long)>
c001429f:	83 c4 10             	add    esp,0x10
c00142a2:	83 c4 0c             	add    esp,0xc
c00142a5:	c3                   	ret    

c00142a6 <PhysicalDisk::eject()>:
c00142a6:	83 c8 ff             	or     eax,0xffffffff
c00142a9:	c3                   	ret    

c00142aa <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00142aa:	83 ec 0c             	sub    esp,0xc
c00142ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142b1:	83 ec 08             	sub    esp,0x8
c00142b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142b8:	50                   	push   eax
c00142b9:	e8 ba fd ff ff       	call   c0014078 <Device::Device(char const*)>
c00142be:	83 c4 10             	add    esp,0x10
c00142c1:	ba 74 b4 02 c0       	mov    edx,0xc002b474
c00142c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142ca:	89 10                	mov    DWORD PTR [eax],edx
c00142cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142d0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00142d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142db:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00142e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142e6:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00142f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00142f8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00142fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014302:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001430c:	90                   	nop
c001430d:	83 c4 0c             	add    esp,0xc
c0014310:	c3                   	ret    
c0014311:	90                   	nop

c0014312 <PhysicalDisk::startCache()>:
c0014312:	56                   	push   esi
c0014313:	53                   	push   ebx
c0014314:	83 ec 10             	sub    esp,0x10
c0014317:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001431b:	6a 44                	push   0x44
c001431d:	e8 c1 b6 ff ff       	call   c000f9e3 <malloc>
c0014322:	89 c6                	mov    esi,eax
c0014324:	58                   	pop    eax
c0014325:	5a                   	pop    edx
c0014326:	53                   	push   ebx
c0014327:	56                   	push   esi
c0014328:	e8 77 28 00 00       	call   c0016ba4 <VCache::VCache(PhysicalDisk*)>
c001432d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014333:	83 c4 14             	add    esp,0x14
c0014336:	5b                   	pop    ebx
c0014337:	5e                   	pop    esi
c0014338:	c3                   	ret    
c0014339:	90                   	nop

c001433a <PhysicalDisk::~PhysicalDisk()>:
c001433a:	83 ec 0c             	sub    esp,0xc
c001433d:	ba 74 b4 02 c0       	mov    edx,0xc002b474
c0014342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014346:	89 10                	mov    DWORD PTR [eax],edx
c0014348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001434c:	83 ec 0c             	sub    esp,0xc
c001434f:	50                   	push   eax
c0014350:	e8 ed f9 ff ff       	call   c0013d42 <Device::~Device()>
c0014355:	83 c4 10             	add    esp,0x10
c0014358:	90                   	nop
c0014359:	83 c4 0c             	add    esp,0xc
c001435c:	c3                   	ret    
c001435d:	90                   	nop

c001435e <PhysicalDisk::~PhysicalDisk()>:
c001435e:	83 ec 0c             	sub    esp,0xc
c0014361:	83 ec 0c             	sub    esp,0xc
c0014364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014368:	e8 cd ff ff ff       	call   c001433a <PhysicalDisk::~PhysicalDisk()>
c001436d:	83 c4 10             	add    esp,0x10
c0014370:	83 ec 08             	sub    esp,0x8
c0014373:	68 6c 01 00 00       	push   0x16c
c0014378:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001437c:	e8 e2 e5 ff ff       	call   c0012963 <operator delete(void*, unsigned long)>
c0014381:	83 c4 10             	add    esp,0x10
c0014384:	83 c4 0c             	add    esp,0xc
c0014387:	c3                   	ret    

c0014388 <FPU::FPU(char const*)>:
c0014388:	83 ec 0c             	sub    esp,0xc
c001438b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001438f:	83 ec 08             	sub    esp,0x8
c0014392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014396:	50                   	push   eax
c0014397:	e8 dc fc ff ff       	call   c0014078 <Device::Device(char const*)>
c001439c:	83 c4 10             	add    esp,0x10
c001439f:	ba b8 b4 02 c0       	mov    edx,0xc002b4b8
c00143a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143a8:	89 10                	mov    DWORD PTR [eax],edx
c00143aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143ae:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00143b8:	90                   	nop
c00143b9:	83 c4 0c             	add    esp,0xc
c00143bc:	c3                   	ret    
c00143bd:	90                   	nop

c00143be <FPU::~FPU()>:
c00143be:	83 ec 0c             	sub    esp,0xc
c00143c1:	ba b8 b4 02 c0       	mov    edx,0xc002b4b8
c00143c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143ca:	89 10                	mov    DWORD PTR [eax],edx
c00143cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143d0:	83 ec 0c             	sub    esp,0xc
c00143d3:	50                   	push   eax
c00143d4:	e8 69 f9 ff ff       	call   c0013d42 <Device::~Device()>
c00143d9:	83 c4 10             	add    esp,0x10
c00143dc:	90                   	nop
c00143dd:	83 c4 0c             	add    esp,0xc
c00143e0:	c3                   	ret    
c00143e1:	90                   	nop

c00143e2 <FPU::~FPU()>:
c00143e2:	83 ec 0c             	sub    esp,0xc
c00143e5:	83 ec 0c             	sub    esp,0xc
c00143e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00143ec:	e8 cd ff ff ff       	call   c00143be <FPU::~FPU()>
c00143f1:	83 c4 10             	add    esp,0x10
c00143f4:	83 ec 08             	sub    esp,0x8
c00143f7:	68 58 01 00 00       	push   0x158
c00143fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014400:	e8 5e e5 ff ff       	call   c0012963 <operator delete(void*, unsigned long)>
c0014405:	83 c4 10             	add    esp,0x10
c0014408:	83 c4 0c             	add    esp,0xc
c001440b:	c3                   	ret    

c001440c <setupFPU()>:
c001440c:	53                   	push   ebx
c001440d:	83 ec 08             	sub    esp,0x8
c0014410:	8b 15 e8 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e6e8
c0014416:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c001441d:	74 19                	je     c0014438 <setupFPU()+0x2c>
c001441f:	83 ec 0c             	sub    esp,0xc
c0014422:	68 58 01 00 00       	push   0x158
c0014427:	e8 b7 b5 ff ff       	call   c000f9e3 <malloc>
c001442c:	89 c3                	mov    ebx,eax
c001442e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014431:	e8 5a 15 01 00       	call   c0025990 <AVX::AVX()>
c0014436:	eb 5b                	jmp    c0014493 <setupFPU()+0x87>
c0014438:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001443e:	84 c0                	test   al,al
c0014440:	79 19                	jns    c001445b <setupFPU()+0x4f>
c0014442:	83 ec 0c             	sub    esp,0xc
c0014445:	68 58 01 00 00       	push   0x158
c001444a:	e8 94 b5 ff ff       	call   c000f9e3 <malloc>
c001444f:	89 c3                	mov    ebx,eax
c0014451:	89 04 24             	mov    DWORD PTR [esp],eax
c0014454:	e8 5d 16 01 00       	call   c0025ab6 <SSE::SSE()>
c0014459:	eb 38                	jmp    c0014493 <setupFPU()+0x87>
c001445b:	a8 20                	test   al,0x20
c001445d:	74 19                	je     c0014478 <setupFPU()+0x6c>
c001445f:	83 ec 0c             	sub    esp,0xc
c0014462:	68 58 01 00 00       	push   0x158
c0014467:	e8 77 b5 ff ff       	call   c000f9e3 <malloc>
c001446c:	89 c3                	mov    ebx,eax
c001446e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014471:	e8 aa 15 01 00       	call   c0025a20 <MMX::MMX()>
c0014476:	eb 1b                	jmp    c0014493 <setupFPU()+0x87>
c0014478:	a8 10                	test   al,0x10
c001447a:	74 1c                	je     c0014498 <setupFPU()+0x8c>
c001447c:	83 ec 0c             	sub    esp,0xc
c001447f:	68 58 01 00 00       	push   0x158
c0014484:	e8 5a b5 ff ff       	call   c000f9e3 <malloc>
c0014489:	89 c3                	mov    ebx,eax
c001448b:	89 04 24             	mov    DWORD PTR [esp],eax
c001448e:	e8 b1 16 01 00       	call   c0025b44 <x87::x87()>
c0014493:	83 c4 10             	add    esp,0x10
c0014496:	eb 24                	jmp    c00144bc <setupFPU()+0xb0>
c0014498:	83 e0 ef             	and    eax,0xffffffef
c001449b:	83 ec 0c             	sub    esp,0xc
c001449e:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00144a4:	68 a4 b4 02 c0       	push   0xc002b4a4
c00144a9:	e8 8d e5 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c00144ae:	0f 20 c0             	mov    eax,cr0
c00144b1:	83 c8 04             	or     eax,0x4
c00144b4:	0f 22 c0             	mov    cr0,eax
c00144b7:	31 db                	xor    ebx,ebx
c00144b9:	83 c4 10             	add    esp,0x10
c00144bc:	89 d8                	mov    eax,ebx
c00144be:	83 c4 08             	add    esp,0x8
c00144c1:	5b                   	pop    ebx
c00144c2:	c3                   	ret    
c00144c3:	90                   	nop

c00144c4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00144c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00144c8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00144cc:	c1 e0 04             	shl    eax,0x4
c00144cf:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00144d3:	8d 50 10             	lea    edx,[eax+0x10]
c00144d6:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00144dc:	74 08                	je     c00144e6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00144de:	83 c0 04             	add    eax,0x4
c00144e1:	39 d0                	cmp    eax,edx
c00144e3:	75 f1                	jne    c00144d6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00144e5:	c3                   	ret    
c00144e6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00144f0:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00144fa:	eb e2                	jmp    c00144de <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00144fc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00144fc:	57                   	push   edi
c00144fd:	31 c0                	xor    eax,eax
c00144ff:	56                   	push   esi
c0014500:	53                   	push   ebx
c0014501:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014505:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014509:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001450d:	89 da                	mov    edx,ebx
c001450f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014513:	c1 e2 04             	shl    edx,0x4
c0014516:	01 ca                	add    edx,ecx
c0014518:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014520:	74 16                	je     c0014538 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014522:	40                   	inc    eax
c0014523:	83 f8 04             	cmp    eax,0x4
c0014526:	75 f0                	jne    c0014518 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014528:	c7 44 24 10 e8 b4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b4e8
c0014530:	5b                   	pop    ebx
c0014531:	5e                   	pop    esi
c0014532:	5f                   	pop    edi
c0014533:	e9 a1 5e 00 00       	jmp    c001a3d9 <Krnl::panic(char const*)>
c0014538:	8d 04 98             	lea    eax,[eax+ebx*4]
c001453b:	8d 04 81             	lea    eax,[ecx+eax*4]
c001453e:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014544:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c001454a:	5b                   	pop    ebx
c001454b:	5e                   	pop    esi
c001454c:	5f                   	pop    edi
c001454d:	c3                   	ret    

c001454e <doubleFault(regs*, void*)>:
c001454e:	55                   	push   ebp
c001454f:	89 e5                	mov    ebp,esp
c0014551:	83 ec 08             	sub    esp,0x8
c0014554:	83 ec 0c             	sub    esp,0xc
c0014557:	68 f5 b4 02 c0       	push   0xc002b4f5
c001455c:	e8 78 5e 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c0014561:	83 c4 10             	add    esp,0x10
c0014564:	90                   	nop
c0014565:	c9                   	leave  
c0014566:	c3                   	ret    
c0014567:	90                   	nop

c0014568 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014568:	56                   	push   esi
c0014569:	53                   	push   ebx
c001456a:	50                   	push   eax
c001456b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001456f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014573:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014578:	75 35                	jne    c00145af <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c001457a:	8d 43 20             	lea    eax,[ebx+0x20]
c001457d:	31 d2                	xor    edx,edx
c001457f:	89 c1                	mov    ecx,eax
c0014581:	c1 e1 04             	shl    ecx,0x4
c0014584:	01 f1                	add    ecx,esi
c0014586:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c001458e:	74 3e                	je     c00145ce <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014590:	42                   	inc    edx
c0014591:	83 fa 04             	cmp    edx,0x4
c0014594:	75 f0                	jne    c0014586 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014596:	83 ec 0c             	sub    esp,0xc
c0014599:	68 0f b5 02 c0       	push   0xc002b50f
c001459e:	e8 36 5e 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c00145a3:	83 c4 10             	add    esp,0x10
c00145a6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00145ab:	5a                   	pop    edx
c00145ac:	5b                   	pop    ebx
c00145ad:	5e                   	pop    esi
c00145ae:	c3                   	ret    
c00145af:	83 ec 0c             	sub    esp,0xc
c00145b2:	56                   	push   esi
c00145b3:	e8 bc fb ff ff       	call   c0014174 <Device::getName()>
c00145b8:	83 c4 10             	add    esp,0x10
c00145bb:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00145be:	75 ba                	jne    c001457a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00145c0:	83 fb 0f             	cmp    ebx,0xf
c00145c3:	7f 29                	jg     c00145ee <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00145c5:	0f b6 9b 40 d9 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd26c0]
c00145cc:	eb ac                	jmp    c001457a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00145ce:	8d 04 82             	lea    eax,[edx+eax*4]
c00145d1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00145d5:	8d 04 86             	lea    eax,[esi+eax*4]
c00145d8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00145de:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00145e2:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00145e8:	89 d8                	mov    eax,ebx
c00145ea:	5a                   	pop    edx
c00145eb:	5b                   	pop    ebx
c00145ec:	5e                   	pop    esi
c00145ed:	c3                   	ret    
c00145ee:	83 ec 0c             	sub    esp,0xc
c00145f1:	68 02 b5 02 c0       	push   0xc002b502
c00145f6:	e8 de 5d 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c00145fb:	83 c4 10             	add    esp,0x10
c00145fe:	e9 77 ff ff ff       	jmp    c001457a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014603:	90                   	nop

c0014604 <InterruptController::clearAllHandlers(int, bool)>:
c0014604:	56                   	push   esi
c0014605:	53                   	push   ebx
c0014606:	52                   	push   edx
c0014607:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001460b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001460f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014614:	75 61                	jne    c0014677 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014616:	8d 46 20             	lea    eax,[esi+0x20]
c0014619:	c1 e6 04             	shl    esi,0x4
c001461c:	c1 e0 04             	shl    eax,0x4
c001461f:	01 de                	add    esi,ebx
c0014621:	01 d8                	add    eax,ebx
c0014623:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c001462d:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014637:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014641:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001464b:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014655:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c001465f:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014669:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014673:	58                   	pop    eax
c0014674:	5b                   	pop    ebx
c0014675:	5e                   	pop    esi
c0014676:	c3                   	ret    
c0014677:	83 ec 0c             	sub    esp,0xc
c001467a:	53                   	push   ebx
c001467b:	e8 f4 fa ff ff       	call   c0014174 <Device::getName()>
c0014680:	83 c4 10             	add    esp,0x10
c0014683:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014686:	75 8e                	jne    c0014616 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014688:	83 fe 0f             	cmp    esi,0xf
c001468b:	7f 09                	jg     c0014696 <InterruptController::clearAllHandlers(int, bool)+0x92>
c001468d:	0f b6 b6 40 d9 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd26c0]
c0014694:	eb 80                	jmp    c0014616 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014696:	83 ec 0c             	sub    esp,0xc
c0014699:	68 1c b5 02 c0       	push   0xc002b51c
c001469e:	e8 36 5d 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c00146a3:	83 c4 10             	add    esp,0x10
c00146a6:	e9 6b ff ff ff       	jmp    c0014616 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00146ab:	90                   	nop

c00146ac <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c00146ac:	56                   	push   esi
c00146ad:	53                   	push   ebx
c00146ae:	52                   	push   edx
c00146af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00146b3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00146b7:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00146bc:	75 3a                	jne    c00146f8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c00146be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00146c2:	8d 50 20             	lea    edx,[eax+0x20]
c00146c5:	c1 e2 04             	shl    edx,0x4
c00146c8:	8d 04 16             	lea    eax,[esi+edx*1]
c00146cb:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c00146cf:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00146d5:	74 0b                	je     c00146e2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00146d7:	83 c0 04             	add    eax,0x4
c00146da:	39 d0                	cmp    eax,edx
c00146dc:	75 f1                	jne    c00146cf <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00146de:	58                   	pop    eax
c00146df:	5b                   	pop    ebx
c00146e0:	5e                   	pop    esi
c00146e1:	c3                   	ret    
c00146e2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00146ec:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00146f6:	eb df                	jmp    c00146d7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00146f8:	83 ec 0c             	sub    esp,0xc
c00146fb:	56                   	push   esi
c00146fc:	e8 73 fa ff ff       	call   c0014174 <Device::getName()>
c0014701:	83 c4 10             	add    esp,0x10
c0014704:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014707:	75 b5                	jne    c00146be <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014709:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001470e:	7f 11                	jg     c0014721 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014710:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014714:	0f b6 80 40 d9 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd26c0]
c001471b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001471f:	eb 9d                	jmp    c00146be <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014721:	83 ec 0c             	sub    esp,0xc
c0014724:	68 29 b5 02 c0       	push   0xc002b529
c0014729:	e8 ab 5c 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c001472e:	83 c4 10             	add    esp,0x10
c0014731:	eb 8b                	jmp    c00146be <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014733 <nmiHandler(regs*, void*)>:
c0014733:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0014738:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001473c:	e9 bb a8 ff ff       	jmp    c000effc <Computer::handleNMI()>

c0014741 <int_handler>:
c0014741:	55                   	push   ebp
c0014742:	57                   	push   edi
c0014743:	56                   	push   esi
c0014744:	53                   	push   ebx
c0014745:	83 ec 0c             	sub    esp,0xc
c0014748:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001474c:	80 3d 04 f2 02 c0 00 	cmp    BYTE PTR ds:0xc002f204,0x0
c0014753:	74 0b                	je     c0014760 <int_handler+0x1f>
c0014755:	fa                   	cli    
c0014756:	f4                   	hlt    
c0014757:	80 3d 04 f2 02 c0 00 	cmp    BYTE PTR ds:0xc002f204,0x0
c001475e:	75 f5                	jne    c0014755 <int_handler+0x14>
c0014760:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0014765:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014768:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001476e:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014774:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014777:	83 f8 17             	cmp    eax,0x17
c001477a:	77 13                	ja     c001478f <int_handler+0x4e>
c001477c:	83 ec 08             	sub    esp,0x8
c001477f:	8b 17                	mov    edx,DWORD PTR [edi]
c0014781:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014784:	0f b6 c0             	movzx  eax,al
c0014787:	50                   	push   eax
c0014788:	57                   	push   edi
c0014789:	ff 52 38             	call   DWORD PTR [edx+0x38]
c001478c:	83 c4 10             	add    esp,0x10
c001478f:	83 c3 15             	add    ebx,0x15
c0014792:	c1 e3 04             	shl    ebx,0x4
c0014795:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014799:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c00147a0:	31 db                	xor    ebx,ebx
c00147a2:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c00147a6:	85 c0                	test   eax,eax
c00147a8:	74 13                	je     c00147bd <int_handler+0x7c>
c00147aa:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00147ad:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c00147b1:	74 1c                	je     c00147cf <int_handler+0x8e>
c00147b3:	83 ec 08             	sub    esp,0x8
c00147b6:	52                   	push   edx
c00147b7:	56                   	push   esi
c00147b8:	ff d0                	call   eax
c00147ba:	83 c4 10             	add    esp,0x10
c00147bd:	43                   	inc    ebx
c00147be:	83 fb 04             	cmp    ebx,0x4
c00147c1:	75 df                	jne    c00147a2 <int_handler+0x61>
c00147c3:	83 c4 0c             	add    esp,0xc
c00147c6:	31 c0                	xor    eax,eax
c00147c8:	5b                   	pop    ebx
c00147c9:	31 d2                	xor    edx,edx
c00147cb:	5e                   	pop    esi
c00147cc:	5f                   	pop    edi
c00147cd:	5d                   	pop    ebp
c00147ce:	c3                   	ret    
c00147cf:	83 ec 08             	sub    esp,0x8
c00147d2:	52                   	push   edx
c00147d3:	56                   	push   esi
c00147d4:	ff d0                	call   eax
c00147d6:	83 c4 10             	add    esp,0x10
c00147d9:	83 c4 0c             	add    esp,0xc
c00147dc:	5b                   	pop    ebx
c00147dd:	5e                   	pop    esi
c00147de:	5f                   	pop    edi
c00147df:	5d                   	pop    ebp
c00147e0:	c3                   	ret    
c00147e1:	90                   	nop

c00147e2 <InterruptController::InterruptController(char const*)>:
c00147e2:	83 ec 1c             	sub    esp,0x1c
c00147e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00147e9:	83 ec 08             	sub    esp,0x8
c00147ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00147f0:	50                   	push   eax
c00147f1:	e8 82 f8 ff ff       	call   c0014078 <Device::Device(char const*)>
c00147f6:	83 c4 10             	add    esp,0x10
c00147f9:	ba f0 b7 02 c0       	mov    edx,0xc002b7f0
c00147fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014802:	89 10                	mov    DWORD PTR [eax],edx
c0014804:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014808:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014812:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001481a:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014822:	7f 5e                	jg     c0014882 <InterruptController::InterruptController(char const*)+0xa0>
c0014824:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001482c:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014831:	7f 49                	jg     c001487c <InterruptController::InterruptController(char const*)+0x9a>
c0014833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014837:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001483b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014842:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014846:	01 ca                	add    edx,ecx
c0014848:	83 c2 54             	add    edx,0x54
c001484b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014853:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014857:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001485b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014862:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014866:	01 ca                	add    edx,ecx
c0014868:	81 c2 54 04 00 00    	add    edx,0x454
c001486e:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014876:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001487a:	eb b0                	jmp    c001482c <InterruptController::InterruptController(char const*)+0x4a>
c001487c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014880:	eb 98                	jmp    c001481a <InterruptController::InterruptController(char const*)+0x38>
c0014882:	90                   	nop
c0014883:	83 c4 1c             	add    esp,0x1c
c0014886:	c3                   	ret    
c0014887:	90                   	nop

c0014888 <InterruptController::~InterruptController()>:
c0014888:	83 ec 0c             	sub    esp,0xc
c001488b:	ba f0 b7 02 c0       	mov    edx,0xc002b7f0
c0014890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014894:	89 10                	mov    DWORD PTR [eax],edx
c0014896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001489a:	83 ec 0c             	sub    esp,0xc
c001489d:	50                   	push   eax
c001489e:	e8 9f f4 ff ff       	call   c0013d42 <Device::~Device()>
c00148a3:	83 c4 10             	add    esp,0x10
c00148a6:	90                   	nop
c00148a7:	83 c4 0c             	add    esp,0xc
c00148aa:	c3                   	ret    
c00148ab:	90                   	nop

c00148ac <InterruptController::~InterruptController()>:
c00148ac:	83 ec 0c             	sub    esp,0xc
c00148af:	83 ec 0c             	sub    esp,0xc
c00148b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148b6:	e8 cd ff ff ff       	call   c0014888 <InterruptController::~InterruptController()>
c00148bb:	83 c4 10             	add    esp,0x10
c00148be:	83 ec 08             	sub    esp,0x8
c00148c1:	68 58 21 00 00       	push   0x2158
c00148c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148ca:	e8 94 e0 ff ff       	call   c0012963 <operator delete(void*, unsigned long)>
c00148cf:	83 c4 10             	add    esp,0x10
c00148d2:	83 c4 0c             	add    esp,0xc
c00148d5:	c3                   	ret    

c00148d6 <displayDebugInfo(regs*)>:
c00148d6:	55                   	push   ebp
c00148d7:	57                   	push   edi
c00148d8:	56                   	push   esi
c00148d9:	53                   	push   ebx
c00148da:	83 ec 24             	sub    esp,0x24
c00148dd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00148e1:	0f 20 c2             	mov    edx,cr0
c00148e4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00148e8:	0f 20 d7             	mov    edi,cr2
c00148eb:	0f 20 de             	mov    esi,cr3
c00148ee:	0f 20 e5             	mov    ebp,cr4
c00148f1:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00148f4:	68 36 b5 02 c0       	push   0xc002b536
c00148f9:	e8 3d e1 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c00148fe:	59                   	pop    ecx
c00148ff:	58                   	pop    eax
c0014900:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014903:	68 41 b5 02 c0       	push   0xc002b541
c0014908:	e8 2e e1 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001490d:	58                   	pop    eax
c001490e:	5a                   	pop    edx
c001490f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014912:	68 4c b5 02 c0       	push   0xc002b54c
c0014917:	e8 1f e1 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001491c:	59                   	pop    ecx
c001491d:	58                   	pop    eax
c001491e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014921:	68 57 b5 02 c0       	push   0xc002b557
c0014926:	e8 10 e1 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001492b:	58                   	pop    eax
c001492c:	5a                   	pop    edx
c001492d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014930:	68 62 b5 02 c0       	push   0xc002b562
c0014935:	e8 01 e1 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001493a:	59                   	pop    ecx
c001493b:	58                   	pop    eax
c001493c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c001493f:	68 6d b5 02 c0       	push   0xc002b56d
c0014944:	e8 f2 e0 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0014949:	58                   	pop    eax
c001494a:	5a                   	pop    edx
c001494b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001494e:	68 78 b5 02 c0       	push   0xc002b578
c0014953:	e8 e3 e0 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0014958:	59                   	pop    ecx
c0014959:	58                   	pop    eax
c001495a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001495d:	68 83 b5 02 c0       	push   0xc002b583
c0014962:	e8 d4 e0 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0014967:	58                   	pop    eax
c0014968:	5a                   	pop    edx
c0014969:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001496c:	68 8e b5 02 c0       	push   0xc002b58e
c0014971:	e8 c5 e0 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0014976:	59                   	pop    ecx
c0014977:	58                   	pop    eax
c0014978:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001497b:	68 9d b5 02 c0       	push   0xc002b59d
c0014980:	e8 b6 e0 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0014985:	58                   	pop    eax
c0014986:	5a                   	pop    edx
c0014987:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001498a:	68 a8 b5 02 c0       	push   0xc002b5a8
c001498f:	e8 a7 e0 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0014994:	59                   	pop    ecx
c0014995:	58                   	pop    eax
c0014996:	57                   	push   edi
c0014997:	68 b3 b5 02 c0       	push   0xc002b5b3
c001499c:	e8 9a e0 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c00149a1:	58                   	pop    eax
c00149a2:	5a                   	pop    edx
c00149a3:	56                   	push   esi
c00149a4:	68 be b5 02 c0       	push   0xc002b5be
c00149a9:	e8 8d e0 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c00149ae:	59                   	pop    ecx
c00149af:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c00149b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149ba:	e8 de bd ff ff       	call   c001079d <setActiveTerminal(VgaText*)>
c00149bf:	58                   	pop    eax
c00149c0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00149c3:	5a                   	pop    edx
c00149c4:	c1 e0 05             	shl    eax,0x5
c00149c7:	05 a0 d6 02 c0       	add    eax,0xc002d6a0
c00149cc:	50                   	push   eax
c00149cd:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c00149d2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149d8:	e8 cd c2 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c00149dd:	59                   	pop    ecx
c00149de:	58                   	pop    eax
c00149df:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c00149e4:	68 c9 b5 02 c0       	push   0xc002b5c9
c00149e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149ef:	e8 b6 c2 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c00149f4:	58                   	pop    eax
c00149f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149fa:	5a                   	pop    edx
c00149fb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00149fe:	83 c0 0c             	add    eax,0xc
c0014a01:	50                   	push   eax
c0014a02:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014a07:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a0d:	e8 98 c2 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c0014a12:	59                   	pop    ecx
c0014a13:	58                   	pop    eax
c0014a14:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014a19:	68 d2 b5 02 c0       	push   0xc002b5d2
c0014a1e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a24:	e8 81 c2 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c0014a29:	58                   	pop    eax
c0014a2a:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014a2f:	5a                   	pop    edx
c0014a30:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014a33:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a39:	e8 26 c2 ff ff       	call   c0010c64 <VgaText::putx(unsigned int)>
c0014a3e:	59                   	pop    ecx
c0014a3f:	58                   	pop    eax
c0014a40:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014a45:	68 da b5 02 c0       	push   0xc002b5da
c0014a4a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a50:	e8 55 c2 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c0014a55:	58                   	pop    eax
c0014a56:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014a5b:	5a                   	pop    edx
c0014a5c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014a5f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a65:	e8 fa c1 ff ff       	call   c0010c64 <VgaText::putx(unsigned int)>
c0014a6a:	59                   	pop    ecx
c0014a6b:	58                   	pop    eax
c0014a6c:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014a71:	68 e2 b5 02 c0       	push   0xc002b5e2
c0014a76:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a7c:	e8 29 c2 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c0014a81:	58                   	pop    eax
c0014a82:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014a87:	5a                   	pop    edx
c0014a88:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014a8b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a91:	e8 ce c1 ff ff       	call   c0010c64 <VgaText::putx(unsigned int)>
c0014a96:	59                   	pop    ecx
c0014a97:	58                   	pop    eax
c0014a98:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014a9d:	68 ea b5 02 c0       	push   0xc002b5ea
c0014aa2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aa8:	e8 fd c1 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c0014aad:	58                   	pop    eax
c0014aae:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014ab3:	5a                   	pop    edx
c0014ab4:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014ab7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014abd:	e8 a2 c1 ff ff       	call   c0010c64 <VgaText::putx(unsigned int)>
c0014ac2:	59                   	pop    ecx
c0014ac3:	58                   	pop    eax
c0014ac4:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014ac9:	68 f2 b5 02 c0       	push   0xc002b5f2
c0014ace:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ad4:	e8 d1 c1 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c0014ad9:	58                   	pop    eax
c0014ada:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014adf:	5a                   	pop    edx
c0014ae0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014ae3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ae9:	e8 76 c1 ff ff       	call   c0010c64 <VgaText::putx(unsigned int)>
c0014aee:	59                   	pop    ecx
c0014aef:	58                   	pop    eax
c0014af0:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014af5:	68 fa b5 02 c0       	push   0xc002b5fa
c0014afa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b00:	e8 a5 c1 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c0014b05:	58                   	pop    eax
c0014b06:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014b0b:	5a                   	pop    edx
c0014b0c:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014b0f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b15:	e8 4a c1 ff ff       	call   c0010c64 <VgaText::putx(unsigned int)>
c0014b1a:	59                   	pop    ecx
c0014b1b:	58                   	pop    eax
c0014b1c:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014b21:	68 02 b6 02 c0       	push   0xc002b602
c0014b26:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b2c:	e8 79 c1 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c0014b31:	58                   	pop    eax
c0014b32:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014b37:	5a                   	pop    edx
c0014b38:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014b3c:	52                   	push   edx
c0014b3d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b43:	e8 1c c1 ff ff       	call   c0010c64 <VgaText::putx(unsigned int)>
c0014b48:	59                   	pop    ecx
c0014b49:	58                   	pop    eax
c0014b4a:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014b4f:	68 0b b6 02 c0       	push   0xc002b60b
c0014b54:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b5a:	e8 4b c1 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c0014b5f:	58                   	pop    eax
c0014b60:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014b65:	5a                   	pop    edx
c0014b66:	57                   	push   edi
c0014b67:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b6d:	e8 f2 c0 ff ff       	call   c0010c64 <VgaText::putx(unsigned int)>
c0014b72:	59                   	pop    ecx
c0014b73:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014b78:	5f                   	pop    edi
c0014b79:	68 13 b6 02 c0       	push   0xc002b613
c0014b7e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b84:	e8 21 c1 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c0014b89:	58                   	pop    eax
c0014b8a:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014b8f:	5a                   	pop    edx
c0014b90:	56                   	push   esi
c0014b91:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b97:	e8 c8 c0 ff ff       	call   c0010c64 <VgaText::putx(unsigned int)>
c0014b9c:	59                   	pop    ecx
c0014b9d:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014ba2:	5e                   	pop    esi
c0014ba3:	68 1b b6 02 c0       	push   0xc002b61b
c0014ba8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bae:	e8 f7 c0 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c0014bb3:	5f                   	pop    edi
c0014bb4:	58                   	pop    eax
c0014bb5:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014bba:	55                   	push   ebp
c0014bbb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bc1:	e8 9e c0 ff ff       	call   c0010c64 <VgaText::putx(unsigned int)>
c0014bc6:	58                   	pop    eax
c0014bc7:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014bcc:	5a                   	pop    edx
c0014bcd:	68 23 b6 02 c0       	push   0xc002b623
c0014bd2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bd8:	e8 cd c0 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c0014bdd:	0f 21 c0             	mov    eax,db0
c0014be0:	59                   	pop    ecx
c0014be1:	5e                   	pop    esi
c0014be2:	50                   	push   eax
c0014be3:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014be8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bee:	e8 71 c0 ff ff       	call   c0010c64 <VgaText::putx(unsigned int)>
c0014bf3:	5f                   	pop    edi
c0014bf4:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014bf9:	5d                   	pop    ebp
c0014bfa:	68 2c b6 02 c0       	push   0xc002b62c
c0014bff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c05:	e8 a0 c0 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c0014c0a:	0f 21 c8             	mov    eax,db1
c0014c0d:	5a                   	pop    edx
c0014c0e:	59                   	pop    ecx
c0014c0f:	50                   	push   eax
c0014c10:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014c15:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c1b:	e8 44 c0 ff ff       	call   c0010c64 <VgaText::putx(unsigned int)>
c0014c20:	5e                   	pop    esi
c0014c21:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014c26:	5f                   	pop    edi
c0014c27:	68 34 b6 02 c0       	push   0xc002b634
c0014c2c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c32:	e8 73 c0 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c0014c37:	0f 21 d0             	mov    eax,db2
c0014c3a:	5d                   	pop    ebp
c0014c3b:	5a                   	pop    edx
c0014c3c:	50                   	push   eax
c0014c3d:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014c42:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c48:	e8 17 c0 ff ff       	call   c0010c64 <VgaText::putx(unsigned int)>
c0014c4d:	59                   	pop    ecx
c0014c4e:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014c53:	5e                   	pop    esi
c0014c54:	68 3c b6 02 c0       	push   0xc002b63c
c0014c59:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c5f:	e8 46 c0 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c0014c64:	0f 21 d8             	mov    eax,db3
c0014c67:	5f                   	pop    edi
c0014c68:	5d                   	pop    ebp
c0014c69:	50                   	push   eax
c0014c6a:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014c6f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c75:	e8 ea bf ff ff       	call   c0010c64 <VgaText::putx(unsigned int)>
c0014c7a:	58                   	pop    eax
c0014c7b:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014c80:	5a                   	pop    edx
c0014c81:	68 44 b6 02 c0       	push   0xc002b644
c0014c86:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c8c:	e8 19 c0 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c0014c91:	0f 21 f0             	mov    eax,db6
c0014c94:	59                   	pop    ecx
c0014c95:	5e                   	pop    esi
c0014c96:	50                   	push   eax
c0014c97:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014c9c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ca2:	e8 bd bf ff ff       	call   c0010c64 <VgaText::putx(unsigned int)>
c0014ca7:	5f                   	pop    edi
c0014ca8:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014cad:	5d                   	pop    ebp
c0014cae:	68 4c b6 02 c0       	push   0xc002b64c
c0014cb3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cb9:	e8 ec bf ff ff       	call   c0010caa <VgaText::puts(char const*)>
c0014cbe:	0f 21 f8             	mov    eax,db7
c0014cc1:	5a                   	pop    edx
c0014cc2:	59                   	pop    ecx
c0014cc3:	50                   	push   eax
c0014cc4:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014cc9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ccf:	e8 90 bf ff ff       	call   c0010c64 <VgaText::putx(unsigned int)>
c0014cd4:	5e                   	pop    esi
c0014cd5:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014cd8:	e8 78 88 00 00       	call   c001d555 <Thr::getDriverNameFromAddress(unsigned long)>
c0014cdd:	83 c4 10             	add    esp,0x10
c0014ce0:	85 c0                	test   eax,eax
c0014ce2:	74 7d                	je     c0014d61 <displayDebugInfo(regs*)+0x48b>
c0014ce4:	89 c6                	mov    esi,eax
c0014ce6:	50                   	push   eax
c0014ce7:	50                   	push   eax
c0014ce8:	56                   	push   esi
c0014ce9:	68 54 b6 02 c0       	push   0xc002b654
c0014cee:	e8 48 dd ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0014cf3:	5a                   	pop    edx
c0014cf4:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014cf9:	59                   	pop    ecx
c0014cfa:	68 62 b6 02 c0       	push   0xc002b662
c0014cff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d05:	e8 a0 bf ff ff       	call   c0010caa <VgaText::puts(char const*)>
c0014d0a:	5f                   	pop    edi
c0014d0b:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014d10:	5d                   	pop    ebp
c0014d11:	56                   	push   esi
c0014d12:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d18:	e8 8d bf ff ff       	call   c0010caa <VgaText::puts(char const*)>
c0014d1d:	58                   	pop    eax
c0014d1e:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014d23:	5a                   	pop    edx
c0014d24:	68 6e b6 02 c0       	push   0xc002b66e
c0014d29:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d2f:	e8 76 bf ff ff       	call   c0010caa <VgaText::puts(char const*)>
c0014d34:	59                   	pop    ecx
c0014d35:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0014d3a:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014d40:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014d43:	e8 44 88 00 00       	call   c001d58c <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014d48:	5b                   	pop    ebx
c0014d49:	5d                   	pop    ebp
c0014d4a:	50                   	push   eax
c0014d4b:	57                   	push   edi
c0014d4c:	e8 13 bf ff ff       	call   c0010c64 <VgaText::putx(unsigned int)>
c0014d51:	58                   	pop    eax
c0014d52:	5a                   	pop    edx
c0014d53:	56                   	push   esi
c0014d54:	68 7a b6 02 c0       	push   0xc002b67a
c0014d59:	e8 dd dc ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0014d5e:	83 c4 10             	add    esp,0x10
c0014d61:	fa                   	cli    
c0014d62:	f4                   	hlt    
c0014d63:	eb fe                	jmp    c0014d63 <displayDebugInfo(regs*)+0x48d>

c0014d65 <x87EmulHandler(regs*, void*)>:
c0014d65:	83 ec 0c             	sub    esp,0xc
c0014d68:	0f 20 c2             	mov    edx,cr0
c0014d6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d70:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014d74:	75 4b                	jne    c0014dc1 <x87EmulHandler(regs*, void*)+0x5c>
c0014d76:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0014d7b:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014d81:	85 c0                	test   eax,eax
c0014d83:	74 05                	je     c0014d8a <x87EmulHandler(regs*, void*)+0x25>
c0014d85:	83 e2 08             	and    edx,0x8
c0014d88:	75 17                	jne    c0014da1 <x87EmulHandler(regs*, void*)+0x3c>
c0014d8a:	83 ec 0c             	sub    esp,0xc
c0014d8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d91:	e8 a5 ab 00 00       	call   c001f93b <Vm::x87Handler(regs*)>
c0014d96:	83 c4 10             	add    esp,0x10
c0014d99:	84 c0                	test   al,al
c0014d9b:	74 24                	je     c0014dc1 <x87EmulHandler(regs*, void*)+0x5c>
c0014d9d:	83 c4 0c             	add    esp,0xc
c0014da0:	c3                   	ret    
c0014da1:	83 ec 0c             	sub    esp,0xc
c0014da4:	68 a0 b6 02 c0       	push   0xc002b6a0
c0014da9:	e8 8d dc ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0014dae:	0f 06                	clts   
c0014db0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014db5:	83 c4 10             	add    esp,0x10
c0014db8:	a3 68 e8 02 c0       	mov    ds:0xc002e868,eax
c0014dbd:	83 c4 0c             	add    esp,0xc
c0014dc0:	c3                   	ret    
c0014dc1:	83 ec 0c             	sub    esp,0xc
c0014dc4:	68 8a b6 02 c0       	push   0xc002b68a
c0014dc9:	e8 6d dc ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0014dce:	5a                   	pop    edx
c0014dcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014dd3:	e8 fe fa ff ff       	call   c00148d6 <displayDebugInfo(regs*)>

c0014dd8 <gpFault(regs*, void*)>:
c0014dd8:	53                   	push   ebx
c0014dd9:	83 ec 14             	sub    esp,0x14
c0014ddc:	c7 05 64 e8 02 c0 14 ee 01 c0 	mov    DWORD PTR ds:0xc002e864,0xc001ee14
c0014de6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014dea:	53                   	push   ebx
c0014deb:	e8 24 a0 00 00       	call   c001ee14 <Vm::faultHandler(regs*)>
c0014df0:	83 c4 10             	add    esp,0x10
c0014df3:	84 c0                	test   al,al
c0014df5:	74 05                	je     c0014dfc <gpFault(regs*, void*)+0x24>
c0014df7:	83 c4 08             	add    esp,0x8
c0014dfa:	5b                   	pop    ebx
c0014dfb:	c3                   	ret    
c0014dfc:	83 ec 0c             	sub    esp,0xc
c0014dff:	68 ad b6 02 c0       	push   0xc002b6ad
c0014e04:	e8 32 dc ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0014e09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e0c:	e8 c5 fa ff ff       	call   c00148d6 <displayDebugInfo(regs*)>

c0014e11 <pgFault(regs*, void*)>:
c0014e11:	53                   	push   ebx
c0014e12:	83 ec 10             	sub    esp,0x10
c0014e15:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014e19:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e1c:	68 c8 b6 02 c0       	push   0xc002b6c8
c0014e21:	e8 15 dc ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0014e26:	0f 20 d0             	mov    eax,cr2
c0014e29:	5a                   	pop    edx
c0014e2a:	59                   	pop    ecx
c0014e2b:	50                   	push   eax
c0014e2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e31:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e34:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0014e3a:	e8 03 d7 ff ff       	call   c0012542 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014e3f:	83 c4 10             	add    esp,0x10
c0014e42:	84 c0                	test   al,al
c0014e44:	74 05                	je     c0014e4b <pgFault(regs*, void*)+0x3a>
c0014e46:	83 c4 08             	add    esp,0x8
c0014e49:	5b                   	pop    ebx
c0014e4a:	c3                   	ret    
c0014e4b:	83 ec 0c             	sub    esp,0xc
c0014e4e:	68 dd b6 02 c0       	push   0xc002b6dd
c0014e53:	e8 e3 db ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0014e58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e5b:	e8 76 fa ff ff       	call   c00148d6 <displayDebugInfo(regs*)>

c0014e60 <otherISRHandler(regs*, void*)>:
c0014e60:	53                   	push   ebx
c0014e61:	83 ec 0c             	sub    esp,0xc
c0014e64:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014e68:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014e6b:	50                   	push   eax
c0014e6c:	50                   	push   eax
c0014e6d:	68 ea b6 02 c0       	push   0xc002b6ea
c0014e72:	e8 c4 db ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0014e77:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e7a:	e8 57 fa ff ff       	call   c00148d6 <displayDebugInfo(regs*)>

c0014e7f <opcodeFault(regs*, void*)>:
c0014e7f:	55                   	push   ebp
c0014e80:	89 e5                	mov    ebp,esp
c0014e82:	56                   	push   esi
c0014e83:	53                   	push   ebx
c0014e84:	83 ec 40             	sub    esp,0x40
c0014e87:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0014e8c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014e92:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014e98:	84 c0                	test   al,al
c0014e9a:	74 24                	je     c0014ec0 <opcodeFault(regs*, void*)+0x41>
c0014e9c:	83 ec 0c             	sub    esp,0xc
c0014e9f:	68 08 b7 02 c0       	push   0xc002b708
c0014ea4:	e8 92 db ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0014ea9:	83 c4 10             	add    esp,0x10
c0014eac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eaf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014eb2:	8d 50 19             	lea    edx,[eax+0x19]
c0014eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eb8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ebb:	e9 d5 05 00 00       	jmp    c0015495 <opcodeFault(regs*, void*)+0x616>
c0014ec0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ec6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014ec9:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014ecd:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014ed1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ed7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014eda:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014edd:	8a 00                	mov    al,BYTE PTR [eax]
c0014edf:	3c f0                	cmp    al,0xf0
c0014ee1:	75 17                	jne    c0014efa <opcodeFault(regs*, void*)+0x7b>
c0014ee3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ee6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014eec:	8d 50 01             	lea    edx,[eax+0x1]
c0014eef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ef5:	e9 da 00 00 00       	jmp    c0014fd4 <opcodeFault(regs*, void*)+0x155>
c0014efa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014efd:	8a 00                	mov    al,BYTE PTR [eax]
c0014eff:	3c f2                	cmp    al,0xf2
c0014f01:	74 09                	je     c0014f0c <opcodeFault(regs*, void*)+0x8d>
c0014f03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f06:	8a 00                	mov    al,BYTE PTR [eax]
c0014f08:	3c f3                	cmp    al,0xf3
c0014f0a:	75 1b                	jne    c0014f27 <opcodeFault(regs*, void*)+0xa8>
c0014f0c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f10:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f16:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f19:	8d 50 01             	lea    edx,[eax+0x1]
c0014f1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f1f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f22:	e9 ad 00 00 00       	jmp    c0014fd4 <opcodeFault(regs*, void*)+0x155>
c0014f27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f2a:	8a 00                	mov    al,BYTE PTR [eax]
c0014f2c:	3c 66                	cmp    al,0x66
c0014f2e:	75 1f                	jne    c0014f4f <opcodeFault(regs*, void*)+0xd0>
c0014f30:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f34:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014f38:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f3e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f41:	8d 50 01             	lea    edx,[eax+0x1]
c0014f44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f47:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f4a:	e9 85 00 00 00       	jmp    c0014fd4 <opcodeFault(regs*, void*)+0x155>
c0014f4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f52:	8a 00                	mov    al,BYTE PTR [eax]
c0014f54:	3c 67                	cmp    al,0x67
c0014f56:	75 18                	jne    c0014f70 <opcodeFault(regs*, void*)+0xf1>
c0014f58:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f5c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f62:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f65:	8d 50 01             	lea    edx,[eax+0x1]
c0014f68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f6b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f6e:	eb 64                	jmp    c0014fd4 <opcodeFault(regs*, void*)+0x155>
c0014f70:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f73:	8a 00                	mov    al,BYTE PTR [eax]
c0014f75:	3c 2e                	cmp    al,0x2e
c0014f77:	74 09                	je     c0014f82 <opcodeFault(regs*, void*)+0x103>
c0014f79:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f7c:	8a 00                	mov    al,BYTE PTR [eax]
c0014f7e:	3c 3e                	cmp    al,0x3e
c0014f80:	75 18                	jne    c0014f9a <opcodeFault(regs*, void*)+0x11b>
c0014f82:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f86:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f8c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f8f:	8d 50 01             	lea    edx,[eax+0x1]
c0014f92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f95:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f98:	eb 3a                	jmp    c0014fd4 <opcodeFault(regs*, void*)+0x155>
c0014f9a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f9d:	8a 00                	mov    al,BYTE PTR [eax]
c0014f9f:	3c 36                	cmp    al,0x36
c0014fa1:	74 1b                	je     c0014fbe <opcodeFault(regs*, void*)+0x13f>
c0014fa3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fa6:	8a 00                	mov    al,BYTE PTR [eax]
c0014fa8:	3c 26                	cmp    al,0x26
c0014faa:	74 12                	je     c0014fbe <opcodeFault(regs*, void*)+0x13f>
c0014fac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014faf:	8a 00                	mov    al,BYTE PTR [eax]
c0014fb1:	3c 64                	cmp    al,0x64
c0014fb3:	74 09                	je     c0014fbe <opcodeFault(regs*, void*)+0x13f>
c0014fb5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fb8:	8a 00                	mov    al,BYTE PTR [eax]
c0014fba:	3c 65                	cmp    al,0x65
c0014fbc:	75 16                	jne    c0014fd4 <opcodeFault(regs*, void*)+0x155>
c0014fbe:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014fc2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fcb:	8d 50 01             	lea    edx,[eax+0x1]
c0014fce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fd4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fd7:	8a 00                	mov    al,BYTE PTR [eax]
c0014fd9:	3c 0f                	cmp    al,0xf
c0014fdb:	0f 85 ad 00 00 00    	jne    c001508e <opcodeFault(regs*, void*)+0x20f>
c0014fe1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fe4:	40                   	inc    eax
c0014fe5:	8a 00                	mov    al,BYTE PTR [eax]
c0014fe7:	3c c2                	cmp    al,0xc2
c0014fe9:	74 0e                	je     c0014ff9 <opcodeFault(regs*, void*)+0x17a>
c0014feb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fee:	40                   	inc    eax
c0014fef:	8a 00                	mov    al,BYTE PTR [eax]
c0014ff1:	3c c3                	cmp    al,0xc3
c0014ff3:	0f 85 95 00 00 00    	jne    c001508e <opcodeFault(regs*, void*)+0x20f>
c0014ff9:	83 ec 0c             	sub    esp,0xc
c0014ffc:	68 2b b7 02 c0       	push   0xc002b72b
c0015001:	e8 35 da ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0015006:	83 c4 10             	add    esp,0x10
c0015009:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001500c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001500f:	8d 50 01             	lea    edx,[eax+0x1]
c0015012:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015015:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015018:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001501b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001501e:	8a 00                	mov    al,BYTE PTR [eax]
c0015020:	8d 50 fe             	lea    edx,[eax-0x2]
c0015023:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015026:	88 10                	mov    BYTE PTR [eax],dl
c0015028:	8d 45 c2             	lea    eax,[ebp-0x3e]
c001502b:	50                   	push   eax
c001502c:	8d 45 c3             	lea    eax,[ebp-0x3d]
c001502f:	50                   	push   eax
c0015030:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015033:	50                   	push   eax
c0015034:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015037:	e8 b6 4a 00 00       	call   c0019af2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001503c:	83 c4 10             	add    esp,0x10
c001503f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015042:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015045:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015048:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c001504b:	01 d0                	add    eax,edx
c001504d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0015050:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015053:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015056:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015059:	48                   	dec    eax
c001505a:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001505d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015060:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015063:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015069:	83 ec 04             	sub    esp,0x4
c001506c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001506f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015072:	50                   	push   eax
c0015073:	e8 3c b1 fe ff       	call   c00001b4 <voodooXADD>
c0015078:	83 c4 10             	add    esp,0x10
c001507b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001507e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015081:	01 c2                	add    edx,eax
c0015083:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015086:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015089:	e9 07 04 00 00       	jmp    c0015495 <opcodeFault(regs*, void*)+0x616>
c001508e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015091:	8a 00                	mov    al,BYTE PTR [eax]
c0015093:	3c 0f                	cmp    al,0xf
c0015095:	0f 85 8b 01 00 00    	jne    c0015226 <opcodeFault(regs*, void*)+0x3a7>
c001509b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001509e:	40                   	inc    eax
c001509f:	8a 00                	mov    al,BYTE PTR [eax]
c00150a1:	3c c7                	cmp    al,0xc7
c00150a3:	0f 86 7d 01 00 00    	jbe    c0015226 <opcodeFault(regs*, void*)+0x3a7>
c00150a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150ac:	40                   	inc    eax
c00150ad:	8a 00                	mov    al,BYTE PTR [eax]
c00150af:	3c cf                	cmp    al,0xcf
c00150b1:	0f 87 6f 01 00 00    	ja     c0015226 <opcodeFault(regs*, void*)+0x3a7>
c00150b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150ba:	40                   	inc    eax
c00150bb:	8a 00                	mov    al,BYTE PTR [eax]
c00150bd:	83 c0 38             	add    eax,0x38
c00150c0:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00150c3:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00150c7:	75 0b                	jne    c00150d4 <opcodeFault(regs*, void*)+0x255>
c00150c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150cc:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00150cf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00150d2:	eb 75                	jmp    c0015149 <opcodeFault(regs*, void*)+0x2ca>
c00150d4:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00150d8:	75 0b                	jne    c00150e5 <opcodeFault(regs*, void*)+0x266>
c00150da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150dd:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00150e0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00150e3:	eb 64                	jmp    c0015149 <opcodeFault(regs*, void*)+0x2ca>
c00150e5:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00150e9:	75 0b                	jne    c00150f6 <opcodeFault(regs*, void*)+0x277>
c00150eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ee:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00150f1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00150f4:	eb 53                	jmp    c0015149 <opcodeFault(regs*, void*)+0x2ca>
c00150f6:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00150fa:	75 0b                	jne    c0015107 <opcodeFault(regs*, void*)+0x288>
c00150fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015102:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015105:	eb 42                	jmp    c0015149 <opcodeFault(regs*, void*)+0x2ca>
c0015107:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001510b:	75 0b                	jne    c0015118 <opcodeFault(regs*, void*)+0x299>
c001510d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015110:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015113:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015116:	eb 31                	jmp    c0015149 <opcodeFault(regs*, void*)+0x2ca>
c0015118:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001511c:	75 0b                	jne    c0015129 <opcodeFault(regs*, void*)+0x2aa>
c001511e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015121:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015124:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015127:	eb 20                	jmp    c0015149 <opcodeFault(regs*, void*)+0x2ca>
c0015129:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001512d:	75 0b                	jne    c001513a <opcodeFault(regs*, void*)+0x2bb>
c001512f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015132:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015135:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015138:	eb 0f                	jmp    c0015149 <opcodeFault(regs*, void*)+0x2ca>
c001513a:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001513e:	75 09                	jne    c0015149 <opcodeFault(regs*, void*)+0x2ca>
c0015140:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015143:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015146:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015149:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001514d:	74 10                	je     c001515f <opcodeFault(regs*, void*)+0x2e0>
c001514f:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015156:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001515d:	eb 2d                	jmp    c001518c <opcodeFault(regs*, void*)+0x30d>
c001515f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015162:	c1 e0 18             	shl    eax,0x18
c0015165:	89 c2                	mov    edx,eax
c0015167:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001516a:	c1 e0 08             	shl    eax,0x8
c001516d:	25 00 00 ff 00       	and    eax,0xff0000
c0015172:	09 c2                	or     edx,eax
c0015174:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015177:	c1 e8 08             	shr    eax,0x8
c001517a:	25 00 ff 00 00       	and    eax,0xff00
c001517f:	09 c2                	or     edx,eax
c0015181:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015184:	c1 e8 18             	shr    eax,0x18
c0015187:	09 d0                	or     eax,edx
c0015189:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001518c:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015190:	75 0b                	jne    c001519d <opcodeFault(regs*, void*)+0x31e>
c0015192:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015195:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015198:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001519b:	eb 75                	jmp    c0015212 <opcodeFault(regs*, void*)+0x393>
c001519d:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00151a1:	75 0b                	jne    c00151ae <opcodeFault(regs*, void*)+0x32f>
c00151a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151a6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151a9:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00151ac:	eb 64                	jmp    c0015212 <opcodeFault(regs*, void*)+0x393>
c00151ae:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00151b2:	75 0b                	jne    c00151bf <opcodeFault(regs*, void*)+0x340>
c00151b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151b7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151ba:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00151bd:	eb 53                	jmp    c0015212 <opcodeFault(regs*, void*)+0x393>
c00151bf:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00151c3:	75 0b                	jne    c00151d0 <opcodeFault(regs*, void*)+0x351>
c00151c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151c8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151cb:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00151ce:	eb 42                	jmp    c0015212 <opcodeFault(regs*, void*)+0x393>
c00151d0:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00151d4:	75 0b                	jne    c00151e1 <opcodeFault(regs*, void*)+0x362>
c00151d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151dc:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00151df:	eb 31                	jmp    c0015212 <opcodeFault(regs*, void*)+0x393>
c00151e1:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00151e5:	75 0b                	jne    c00151f2 <opcodeFault(regs*, void*)+0x373>
c00151e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ea:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151ed:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00151f0:	eb 20                	jmp    c0015212 <opcodeFault(regs*, void*)+0x393>
c00151f2:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00151f6:	75 0b                	jne    c0015203 <opcodeFault(regs*, void*)+0x384>
c00151f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151fb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151fe:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015201:	eb 0f                	jmp    c0015212 <opcodeFault(regs*, void*)+0x393>
c0015203:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015207:	75 09                	jne    c0015212 <opcodeFault(regs*, void*)+0x393>
c0015209:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001520c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001520f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015215:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015218:	8d 50 02             	lea    edx,[eax+0x2]
c001521b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001521e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015221:	e9 6f 02 00 00       	jmp    c0015495 <opcodeFault(regs*, void*)+0x616>
c0015226:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015229:	8a 00                	mov    al,BYTE PTR [eax]
c001522b:	3c 0f                	cmp    al,0xf
c001522d:	0f 85 8d 01 00 00    	jne    c00153c0 <opcodeFault(regs*, void*)+0x541>
c0015233:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015236:	40                   	inc    eax
c0015237:	8a 00                	mov    al,BYTE PTR [eax]
c0015239:	3c c7                	cmp    al,0xc7
c001523b:	0f 85 7f 01 00 00    	jne    c00153c0 <opcodeFault(regs*, void*)+0x541>
c0015241:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015244:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015247:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001524a:	8d 50 01             	lea    edx,[eax+0x1]
c001524d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015250:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015253:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015256:	50                   	push   eax
c0015257:	8d 45 bb             	lea    eax,[ebp-0x45]
c001525a:	50                   	push   eax
c001525b:	8d 45 bc             	lea    eax,[ebp-0x44]
c001525e:	50                   	push   eax
c001525f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015262:	e8 8b 48 00 00       	call   c0019af2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015267:	83 c4 10             	add    esp,0x10
c001526a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001526d:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015270:	83 f0 01             	xor    eax,0x1
c0015273:	84 c0                	test   al,al
c0015275:	0f 84 45 01 00 00    	je     c00153c0 <opcodeFault(regs*, void*)+0x541>
c001527b:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001527e:	3c 01                	cmp    al,0x1
c0015280:	0f 85 3a 01 00 00    	jne    c00153c0 <opcodeFault(regs*, void*)+0x541>
c0015286:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015289:	83 f0 01             	xor    eax,0x1
c001528c:	84 c0                	test   al,al
c001528e:	0f 84 2c 01 00 00    	je     c00153c0 <opcodeFault(regs*, void*)+0x541>
c0015294:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015297:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001529a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001529d:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00152a4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00152a7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00152aa:	89 c2                	mov    edx,eax
c00152ac:	b8 00 00 00 00       	mov    eax,0x0
c00152b1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00152b4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00152b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ba:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00152bd:	ba 00 00 00 00       	mov    edx,0x0
c00152c2:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00152c5:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00152c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152cb:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00152ce:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00152d1:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00152d8:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00152db:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00152de:	89 c2                	mov    edx,eax
c00152e0:	b8 00 00 00 00       	mov    eax,0x0
c00152e5:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00152e8:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00152eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ee:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00152f1:	ba 00 00 00 00       	mov    edx,0x0
c00152f6:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00152f9:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00152fc:	fa                   	cli    
c00152fd:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c0015302:	40                   	inc    eax
c0015303:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c0015308:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001530b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001530e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015310:	89 c1                	mov    ecx,eax
c0015312:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015315:	89 cb                	mov    ebx,ecx
c0015317:	89 d0                	mov    eax,edx
c0015319:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c001531c:	89 c6                	mov    esi,eax
c001531e:	89 f0                	mov    eax,esi
c0015320:	09 d8                	or     eax,ebx
c0015322:	85 c0                	test   eax,eax
c0015324:	75 21                	jne    c0015347 <opcodeFault(regs*, void*)+0x4c8>
c0015326:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015329:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001532c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001532f:	89 01                	mov    DWORD PTR [ecx],eax
c0015331:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015334:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015337:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001533a:	83 c8 40             	or     eax,0x40
c001533d:	89 c2                	mov    edx,eax
c001533f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015342:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015345:	eb 3e                	jmp    c0015385 <opcodeFault(regs*, void*)+0x506>
c0015347:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001534a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001534d:	8b 00                	mov    eax,DWORD PTR [eax]
c001534f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015352:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015355:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015358:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001535b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001535e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015361:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015364:	89 d0                	mov    eax,edx
c0015366:	31 d2                	xor    edx,edx
c0015368:	89 c3                	mov    ebx,eax
c001536a:	89 d6                	mov    esi,edx
c001536c:	89 da                	mov    edx,ebx
c001536e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015371:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015374:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015377:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001537a:	83 e0 bf             	and    eax,0xffffffbf
c001537d:	89 c2                	mov    edx,eax
c001537f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015382:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015385:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001538a:	48                   	dec    eax
c001538b:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c0015390:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c0015395:	85 c0                	test   eax,eax
c0015397:	75 01                	jne    c001539a <opcodeFault(regs*, void*)+0x51b>
c0015399:	fb                   	sti    
c001539a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001539d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153a0:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00153a3:	01 c2                	add    edx,eax
c00153a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153ab:	83 ec 0c             	sub    esp,0xc
c00153ae:	68 3a b7 02 c0       	push   0xc002b73a
c00153b3:	e8 83 d6 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c00153b8:	83 c4 10             	add    esp,0x10
c00153bb:	e9 d5 00 00 00       	jmp    c0015495 <opcodeFault(regs*, void*)+0x616>
c00153c0:	83 ec 0c             	sub    esp,0xc
c00153c3:	68 4d b7 02 c0       	push   0xc002b74d
c00153c8:	e8 6e d6 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c00153cd:	83 c4 10             	add    esp,0x10
c00153d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d3:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00153d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153dc:	c1 e0 04             	shl    eax,0x4
c00153df:	01 d0                	add    eax,edx
c00153e1:	83 c0 03             	add    eax,0x3
c00153e4:	8a 00                	mov    al,BYTE PTR [eax]
c00153e6:	0f b6 d8             	movzx  ebx,al
c00153e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ec:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00153ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153f5:	c1 e0 04             	shl    eax,0x4
c00153f8:	01 d0                	add    eax,edx
c00153fa:	83 c0 02             	add    eax,0x2
c00153fd:	8a 00                	mov    al,BYTE PTR [eax]
c00153ff:	0f b6 c8             	movzx  ecx,al
c0015402:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015405:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015408:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001540b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001540e:	c1 e0 04             	shl    eax,0x4
c0015411:	01 d0                	add    eax,edx
c0015413:	40                   	inc    eax
c0015414:	8a 00                	mov    al,BYTE PTR [eax]
c0015416:	0f b6 d0             	movzx  edx,al
c0015419:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001541c:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001541f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015422:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015425:	c1 e0 04             	shl    eax,0x4
c0015428:	01 f0                	add    eax,esi
c001542a:	8a 00                	mov    al,BYTE PTR [eax]
c001542c:	0f b6 c0             	movzx  eax,al
c001542f:	83 ec 0c             	sub    esp,0xc
c0015432:	53                   	push   ebx
c0015433:	51                   	push   ecx
c0015434:	52                   	push   edx
c0015435:	50                   	push   eax
c0015436:	68 60 b7 02 c0       	push   0xc002b760
c001543b:	e8 fb d5 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0015440:	83 c4 20             	add    esp,0x20
c0015443:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015446:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015449:	83 c0 03             	add    eax,0x3
c001544c:	8a 00                	mov    al,BYTE PTR [eax]
c001544e:	0f b6 d8             	movzx  ebx,al
c0015451:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015454:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015457:	83 c0 02             	add    eax,0x2
c001545a:	8a 00                	mov    al,BYTE PTR [eax]
c001545c:	0f b6 c8             	movzx  ecx,al
c001545f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015462:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015465:	40                   	inc    eax
c0015466:	8a 00                	mov    al,BYTE PTR [eax]
c0015468:	0f b6 d0             	movzx  edx,al
c001546b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001546e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015471:	8a 00                	mov    al,BYTE PTR [eax]
c0015473:	0f b6 c0             	movzx  eax,al
c0015476:	83 ec 0c             	sub    esp,0xc
c0015479:	53                   	push   ebx
c001547a:	51                   	push   ecx
c001547b:	52                   	push   edx
c001547c:	50                   	push   eax
c001547d:	68 88 b7 02 c0       	push   0xc002b788
c0015482:	e8 b4 d5 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0015487:	83 c4 20             	add    esp,0x20
c001548a:	83 ec 0c             	sub    esp,0xc
c001548d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015490:	e8 41 f4 ff ff       	call   c00148d6 <displayDebugInfo(regs*)>
c0015495:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015498:	5b                   	pop    ebx
c0015499:	5e                   	pop    esi
c001549a:	5d                   	pop    ebp
c001549b:	c3                   	ret    

c001549c <displayProgramFault(char const*)>:
c001549c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154a1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00154a4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00154aa:	85 c0                	test   eax,eax
c00154ac:	74 15                	je     c00154c3 <displayProgramFault(char const*)+0x27>
c00154ae:	83 ec 0c             	sub    esp,0xc
c00154b1:	6a 04                	push   0x4
c00154b3:	6a 0f                	push   0xf
c00154b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00154b9:	50                   	push   eax
c00154ba:	e8 e7 b4 ff ff       	call   c00109a6 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00154bf:	83 c4 1c             	add    esp,0x1c
c00154c2:	c3                   	ret    
c00154c3:	c3                   	ret    

c00154c4 <setupInterruptController()>:
c00154c4:	55                   	push   ebp
c00154c5:	89 e5                	mov    ebp,esp
c00154c7:	53                   	push   ebx
c00154c8:	83 ec 24             	sub    esp,0x24
c00154cb:	b8 00 00 00 00       	mov    eax,0x0
c00154d0:	85 c0                	test   eax,eax
c00154d2:	0f 95 c0             	setne  al
c00154d5:	84 c0                	test   al,al
c00154d7:	74 5b                	je     c0015534 <setupInterruptController()+0x70>
c00154d9:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00154e0:	83 ec 0c             	sub    esp,0xc
c00154e3:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00154e6:	e8 f8 a4 ff ff       	call   c000f9e3 <malloc>
c00154eb:	83 c4 10             	add    esp,0x10
c00154ee:	89 c3                	mov    ebx,eax
c00154f0:	83 ec 0c             	sub    esp,0xc
c00154f3:	53                   	push   ebx
c00154f4:	e8 89 08 01 00       	call   c0025d82 <APIC::APIC()>
c00154f9:	83 c4 10             	add    esp,0x10
c00154fc:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00154ff:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015502:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015505:	8b 00                	mov    eax,DWORD PTR [eax]
c0015507:	83 c0 08             	add    eax,0x8
c001550a:	8b 00                	mov    eax,DWORD PTR [eax]
c001550c:	6a 00                	push   0x0
c001550e:	6a 00                	push   0x0
c0015510:	6a 00                	push   0x0
c0015512:	52                   	push   edx
c0015513:	ff d0                	call   eax
c0015515:	83 c4 10             	add    esp,0x10
c0015518:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c001551d:	83 ec 08             	sub    esp,0x8
c0015520:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015523:	50                   	push   eax
c0015524:	e8 4b e9 ff ff       	call   c0013e74 <Device::addChild(Device*)>
c0015529:	83 c4 10             	add    esp,0x10
c001552c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001552f:	e9 79 03 00 00       	jmp    c00158ad <setupInterruptController()+0x3e9>
c0015534:	a0 40 f0 02 c0       	mov    al,ds:0xc002f040
c0015539:	84 c0                	test   al,al
c001553b:	75 14                	jne    c0015551 <setupInterruptController()+0x8d>
c001553d:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0015542:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015548:	83 e2 fe             	and    edx,0xfffffffe
c001554b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015551:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0015556:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001555c:	83 e0 01             	and    eax,0x1
c001555f:	84 c0                	test   al,al
c0015561:	0f 95 c0             	setne  al
c0015564:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015567:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c001556e:	83 ec 0c             	sub    esp,0xc
c0015571:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015574:	e8 6a a4 ff ff       	call   c000f9e3 <malloc>
c0015579:	83 c4 10             	add    esp,0x10
c001557c:	89 c3                	mov    ebx,eax
c001557e:	83 ec 0c             	sub    esp,0xc
c0015581:	53                   	push   ebx
c0015582:	e8 53 0d 01 00       	call   c00262da <PIC::PIC()>
c0015587:	83 c4 10             	add    esp,0x10
c001558a:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001558d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015590:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015593:	8b 00                	mov    eax,DWORD PTR [eax]
c0015595:	83 c0 08             	add    eax,0x8
c0015598:	8b 00                	mov    eax,DWORD PTR [eax]
c001559a:	6a 00                	push   0x0
c001559c:	6a 00                	push   0x0
c001559e:	6a 00                	push   0x0
c00155a0:	52                   	push   edx
c00155a1:	ff d0                	call   eax
c00155a3:	83 c4 10             	add    esp,0x10
c00155a6:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00155aa:	74 73                	je     c001561f <setupInterruptController()+0x15b>
c00155ac:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00155af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00155b4:	83 c0 0c             	add    eax,0xc
c00155b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00155b9:	6a 00                	push   0x0
c00155bb:	6a 00                	push   0x0
c00155bd:	6a 00                	push   0x0
c00155bf:	52                   	push   edx
c00155c0:	ff d0                	call   eax
c00155c2:	83 c4 10             	add    esp,0x10
c00155c5:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00155c9:	74 15                	je     c00155e0 <setupInterruptController()+0x11c>
c00155cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00155d0:	83 c0 04             	add    eax,0x4
c00155d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00155d5:	83 ec 0c             	sub    esp,0xc
c00155d8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155db:	ff d0                	call   eax
c00155dd:	83 c4 10             	add    esp,0x10
c00155e0:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00155e7:	83 ec 0c             	sub    esp,0xc
c00155ea:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00155ed:	e8 f1 a3 ff ff       	call   c000f9e3 <malloc>
c00155f2:	83 c4 10             	add    esp,0x10
c00155f5:	89 c3                	mov    ebx,eax
c00155f7:	83 ec 0c             	sub    esp,0xc
c00155fa:	53                   	push   ebx
c00155fb:	e8 82 07 01 00       	call   c0025d82 <APIC::APIC()>
c0015600:	83 c4 10             	add    esp,0x10
c0015603:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015606:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015609:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001560c:	8b 00                	mov    eax,DWORD PTR [eax]
c001560e:	83 c0 08             	add    eax,0x8
c0015611:	8b 00                	mov    eax,DWORD PTR [eax]
c0015613:	6a 00                	push   0x0
c0015615:	6a 00                	push   0x0
c0015617:	6a 00                	push   0x0
c0015619:	52                   	push   edx
c001561a:	ff d0                	call   eax
c001561c:	83 c4 10             	add    esp,0x10
c001561f:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0015624:	83 ec 08             	sub    esp,0x8
c0015627:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001562a:	50                   	push   eax
c001562b:	e8 44 e8 ff ff       	call   c0013e74 <Device::addChild(Device*)>
c0015630:	83 c4 10             	add    esp,0x10
c0015633:	c7 05 68 e8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e868,0x0
c001563d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015640:	8b 00                	mov    eax,DWORD PTR [eax]
c0015642:	83 c0 24             	add    eax,0x24
c0015645:	8b 00                	mov    eax,DWORD PTR [eax]
c0015647:	6a 00                	push   0x0
c0015649:	68 60 4e 01 c0       	push   0xc0014e60
c001564e:	6a 00                	push   0x0
c0015650:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015653:	ff d0                	call   eax
c0015655:	83 c4 10             	add    esp,0x10
c0015658:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001565b:	8b 00                	mov    eax,DWORD PTR [eax]
c001565d:	83 c0 24             	add    eax,0x24
c0015660:	8b 00                	mov    eax,DWORD PTR [eax]
c0015662:	6a 00                	push   0x0
c0015664:	68 60 4e 01 c0       	push   0xc0014e60
c0015669:	6a 01                	push   0x1
c001566b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001566e:	ff d0                	call   eax
c0015670:	83 c4 10             	add    esp,0x10
c0015673:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015676:	8b 00                	mov    eax,DWORD PTR [eax]
c0015678:	83 c0 24             	add    eax,0x24
c001567b:	8b 00                	mov    eax,DWORD PTR [eax]
c001567d:	6a 00                	push   0x0
c001567f:	68 33 47 01 c0       	push   0xc0014733
c0015684:	6a 02                	push   0x2
c0015686:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015689:	ff d0                	call   eax
c001568b:	83 c4 10             	add    esp,0x10
c001568e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015691:	8b 00                	mov    eax,DWORD PTR [eax]
c0015693:	83 c0 24             	add    eax,0x24
c0015696:	8b 00                	mov    eax,DWORD PTR [eax]
c0015698:	6a 00                	push   0x0
c001569a:	68 60 4e 01 c0       	push   0xc0014e60
c001569f:	6a 03                	push   0x3
c00156a1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156a4:	ff d0                	call   eax
c00156a6:	83 c4 10             	add    esp,0x10
c00156a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00156ae:	83 c0 24             	add    eax,0x24
c00156b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00156b3:	6a 00                	push   0x0
c00156b5:	68 60 4e 01 c0       	push   0xc0014e60
c00156ba:	6a 04                	push   0x4
c00156bc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156bf:	ff d0                	call   eax
c00156c1:	83 c4 10             	add    esp,0x10
c00156c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00156c9:	83 c0 24             	add    eax,0x24
c00156cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00156ce:	6a 00                	push   0x0
c00156d0:	68 60 4e 01 c0       	push   0xc0014e60
c00156d5:	6a 05                	push   0x5
c00156d7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156da:	ff d0                	call   eax
c00156dc:	83 c4 10             	add    esp,0x10
c00156df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00156e4:	83 c0 24             	add    eax,0x24
c00156e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00156e9:	6a 00                	push   0x0
c00156eb:	68 7f 4e 01 c0       	push   0xc0014e7f
c00156f0:	6a 06                	push   0x6
c00156f2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156f5:	ff d0                	call   eax
c00156f7:	83 c4 10             	add    esp,0x10
c00156fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00156ff:	83 c0 24             	add    eax,0x24
c0015702:	8b 00                	mov    eax,DWORD PTR [eax]
c0015704:	6a 00                	push   0x0
c0015706:	68 65 4d 01 c0       	push   0xc0014d65
c001570b:	6a 07                	push   0x7
c001570d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015710:	ff d0                	call   eax
c0015712:	83 c4 10             	add    esp,0x10
c0015715:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015718:	8b 00                	mov    eax,DWORD PTR [eax]
c001571a:	83 c0 24             	add    eax,0x24
c001571d:	8b 00                	mov    eax,DWORD PTR [eax]
c001571f:	6a 00                	push   0x0
c0015721:	68 4e 45 01 c0       	push   0xc001454e
c0015726:	6a 08                	push   0x8
c0015728:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001572b:	ff d0                	call   eax
c001572d:	83 c4 10             	add    esp,0x10
c0015730:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015733:	8b 00                	mov    eax,DWORD PTR [eax]
c0015735:	83 c0 24             	add    eax,0x24
c0015738:	8b 00                	mov    eax,DWORD PTR [eax]
c001573a:	6a 00                	push   0x0
c001573c:	68 60 4e 01 c0       	push   0xc0014e60
c0015741:	6a 09                	push   0x9
c0015743:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015746:	ff d0                	call   eax
c0015748:	83 c4 10             	add    esp,0x10
c001574b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001574e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015750:	83 c0 24             	add    eax,0x24
c0015753:	8b 00                	mov    eax,DWORD PTR [eax]
c0015755:	6a 00                	push   0x0
c0015757:	68 60 4e 01 c0       	push   0xc0014e60
c001575c:	6a 0a                	push   0xa
c001575e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015761:	ff d0                	call   eax
c0015763:	83 c4 10             	add    esp,0x10
c0015766:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015769:	8b 00                	mov    eax,DWORD PTR [eax]
c001576b:	83 c0 24             	add    eax,0x24
c001576e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015770:	6a 00                	push   0x0
c0015772:	68 60 4e 01 c0       	push   0xc0014e60
c0015777:	6a 0b                	push   0xb
c0015779:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001577c:	ff d0                	call   eax
c001577e:	83 c4 10             	add    esp,0x10
c0015781:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015784:	8b 00                	mov    eax,DWORD PTR [eax]
c0015786:	83 c0 24             	add    eax,0x24
c0015789:	8b 00                	mov    eax,DWORD PTR [eax]
c001578b:	6a 00                	push   0x0
c001578d:	68 60 4e 01 c0       	push   0xc0014e60
c0015792:	6a 0c                	push   0xc
c0015794:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015797:	ff d0                	call   eax
c0015799:	83 c4 10             	add    esp,0x10
c001579c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001579f:	8b 00                	mov    eax,DWORD PTR [eax]
c00157a1:	83 c0 24             	add    eax,0x24
c00157a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00157a6:	6a 00                	push   0x0
c00157a8:	68 d8 4d 01 c0       	push   0xc0014dd8
c00157ad:	6a 0d                	push   0xd
c00157af:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157b2:	ff d0                	call   eax
c00157b4:	83 c4 10             	add    esp,0x10
c00157b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00157bc:	83 c0 24             	add    eax,0x24
c00157bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00157c1:	6a 00                	push   0x0
c00157c3:	68 11 4e 01 c0       	push   0xc0014e11
c00157c8:	6a 0e                	push   0xe
c00157ca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157cd:	ff d0                	call   eax
c00157cf:	83 c4 10             	add    esp,0x10
c00157d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00157d7:	83 c0 24             	add    eax,0x24
c00157da:	8b 00                	mov    eax,DWORD PTR [eax]
c00157dc:	6a 00                	push   0x0
c00157de:	68 60 4e 01 c0       	push   0xc0014e60
c00157e3:	6a 0f                	push   0xf
c00157e5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157e8:	ff d0                	call   eax
c00157ea:	83 c4 10             	add    esp,0x10
c00157ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00157f2:	83 c0 24             	add    eax,0x24
c00157f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00157f7:	6a 00                	push   0x0
c00157f9:	68 60 4e 01 c0       	push   0xc0014e60
c00157fe:	6a 10                	push   0x10
c0015800:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015803:	ff d0                	call   eax
c0015805:	83 c4 10             	add    esp,0x10
c0015808:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001580b:	8b 00                	mov    eax,DWORD PTR [eax]
c001580d:	83 c0 24             	add    eax,0x24
c0015810:	8b 00                	mov    eax,DWORD PTR [eax]
c0015812:	6a 00                	push   0x0
c0015814:	68 60 4e 01 c0       	push   0xc0014e60
c0015819:	6a 11                	push   0x11
c001581b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001581e:	ff d0                	call   eax
c0015820:	83 c4 10             	add    esp,0x10
c0015823:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015826:	8b 00                	mov    eax,DWORD PTR [eax]
c0015828:	83 c0 24             	add    eax,0x24
c001582b:	8b 00                	mov    eax,DWORD PTR [eax]
c001582d:	6a 00                	push   0x0
c001582f:	68 60 4e 01 c0       	push   0xc0014e60
c0015834:	6a 12                	push   0x12
c0015836:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015839:	ff d0                	call   eax
c001583b:	83 c4 10             	add    esp,0x10
c001583e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015841:	8b 00                	mov    eax,DWORD PTR [eax]
c0015843:	83 c0 24             	add    eax,0x24
c0015846:	8b 00                	mov    eax,DWORD PTR [eax]
c0015848:	6a 00                	push   0x0
c001584a:	68 60 4e 01 c0       	push   0xc0014e60
c001584f:	6a 13                	push   0x13
c0015851:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015854:	ff d0                	call   eax
c0015856:	83 c4 10             	add    esp,0x10
c0015859:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001585c:	8b 00                	mov    eax,DWORD PTR [eax]
c001585e:	83 c0 24             	add    eax,0x24
c0015861:	8b 00                	mov    eax,DWORD PTR [eax]
c0015863:	6a 00                	push   0x0
c0015865:	68 60 4e 01 c0       	push   0xc0014e60
c001586a:	6a 14                	push   0x14
c001586c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001586f:	ff d0                	call   eax
c0015871:	83 c4 10             	add    esp,0x10
c0015874:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015877:	8b 00                	mov    eax,DWORD PTR [eax]
c0015879:	83 c0 24             	add    eax,0x24
c001587c:	8b 00                	mov    eax,DWORD PTR [eax]
c001587e:	6a 00                	push   0x0
c0015880:	68 60 4e 01 c0       	push   0xc0014e60
c0015885:	6a 1e                	push   0x1e
c0015887:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001588a:	ff d0                	call   eax
c001588c:	83 c4 10             	add    esp,0x10
c001588f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015892:	8b 00                	mov    eax,DWORD PTR [eax]
c0015894:	83 c0 24             	add    eax,0x24
c0015897:	8b 00                	mov    eax,DWORD PTR [eax]
c0015899:	6a 00                	push   0x0
c001589b:	68 cb c5 01 c0       	push   0xc001c5cb
c00158a0:	6a 60                	push   0x60
c00158a2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158a5:	ff d0                	call   eax
c00158a7:	83 c4 10             	add    esp,0x10
c00158aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158ad:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00158b0:	c9                   	leave  
c00158b1:	c3                   	ret    

c00158b2 <InterruptController::convertLegacyIRQNumber(int)>:
c00158b2:	55                   	push   ebp
c00158b3:	89 e5                	mov    ebp,esp
c00158b5:	83 ec 08             	sub    esp,0x8
c00158b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158bb:	83 ec 0c             	sub    esp,0xc
c00158be:	50                   	push   eax
c00158bf:	e8 b0 e8 ff ff       	call   c0014174 <Device::getName()>
c00158c4:	83 c4 10             	add    esp,0x10
c00158c7:	8a 00                	mov    al,BYTE PTR [eax]
c00158c9:	3c 41                	cmp    al,0x41
c00158cb:	0f 94 c0             	sete   al
c00158ce:	84 c0                	test   al,al
c00158d0:	74 28                	je     c00158fa <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00158d2:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00158d6:	7f 12                	jg     c00158ea <InterruptController::convertLegacyIRQNumber(int)+0x38>
c00158d8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00158db:	05 40 d9 02 c0       	add    eax,0xc002d940
c00158e0:	8a 00                	mov    al,BYTE PTR [eax]
c00158e2:	0f b6 c0             	movzx  eax,al
c00158e5:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00158e8:	eb 10                	jmp    c00158fa <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00158ea:	83 ec 0c             	sub    esp,0xc
c00158ed:	68 b0 b7 02 c0       	push   0xc002b7b0
c00158f2:	e8 e2 4a 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c00158f7:	83 c4 10             	add    esp,0x10
c00158fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00158fd:	c9                   	leave  
c00158fe:	c3                   	ret    
c00158ff:	90                   	nop

c0015900 <startGUI(void*)>:
c0015900:	55                   	push   ebp
c0015901:	89 e5                	mov    ebp,esp
c0015903:	53                   	push   ebx
c0015904:	83 ec 04             	sub    esp,0x4
c0015907:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001590c:	48                   	dec    eax
c001590d:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c0015912:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c0015917:	85 c0                	test   eax,eax
c0015919:	75 01                	jne    c001591c <startGUI(void*)+0x1c>
c001591b:	fb                   	sti    
c001591c:	8b 1d e8 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6e8
c0015922:	83 ec 08             	sub    esp,0x8
c0015925:	6a 01                	push   0x1
c0015927:	68 30 b8 02 c0       	push   0xc002b830
c001592c:	e8 75 7c 00 00       	call   c001d5a6 <Thr::loadDLL(char const*, bool)>
c0015931:	83 c4 10             	add    esp,0x10
c0015934:	83 ec 08             	sub    esp,0x8
c0015937:	53                   	push   ebx
c0015938:	50                   	push   eax
c0015939:	e8 99 7e 00 00       	call   c001d7d7 <Thr::executeDLL(unsigned long, void*)>
c001593e:	83 c4 10             	add    esp,0x10
c0015941:	8b 1d e8 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6e8
c0015947:	83 ec 08             	sub    esp,0x8
c001594a:	6a 01                	push   0x1
c001594c:	68 4a b8 02 c0       	push   0xc002b84a
c0015951:	e8 50 7c 00 00       	call   c001d5a6 <Thr::loadDLL(char const*, bool)>
c0015956:	83 c4 10             	add    esp,0x10
c0015959:	83 ec 08             	sub    esp,0x8
c001595c:	53                   	push   ebx
c001595d:	50                   	push   eax
c001595e:	e8 74 7e 00 00       	call   c001d7d7 <Thr::executeDLL(unsigned long, void*)>
c0015963:	83 c4 10             	add    esp,0x10
c0015966:	90                   	nop
c0015967:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001596a:	c9                   	leave  
c001596b:	c3                   	ret    

c001596c <startGUIVESA(void*)>:
c001596c:	55                   	push   ebp
c001596d:	89 e5                	mov    ebp,esp
c001596f:	53                   	push   ebx
c0015970:	83 ec 04             	sub    esp,0x4
c0015973:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c0015978:	48                   	dec    eax
c0015979:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c001597e:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c0015983:	85 c0                	test   eax,eax
c0015985:	75 01                	jne    c0015988 <startGUIVESA(void*)+0x1c>
c0015987:	fb                   	sti    
c0015988:	8b 1d e8 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6e8
c001598e:	83 ec 08             	sub    esp,0x8
c0015991:	6a 01                	push   0x1
c0015993:	68 64 b8 02 c0       	push   0xc002b864
c0015998:	e8 09 7c 00 00       	call   c001d5a6 <Thr::loadDLL(char const*, bool)>
c001599d:	83 c4 10             	add    esp,0x10
c00159a0:	83 ec 08             	sub    esp,0x8
c00159a3:	53                   	push   ebx
c00159a4:	50                   	push   eax
c00159a5:	e8 2d 7e 00 00       	call   c001d7d7 <Thr::executeDLL(unsigned long, void*)>
c00159aa:	83 c4 10             	add    esp,0x10
c00159ad:	8b 1d e8 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6e8
c00159b3:	83 ec 08             	sub    esp,0x8
c00159b6:	6a 01                	push   0x1
c00159b8:	68 4a b8 02 c0       	push   0xc002b84a
c00159bd:	e8 e4 7b 00 00       	call   c001d5a6 <Thr::loadDLL(char const*, bool)>
c00159c2:	83 c4 10             	add    esp,0x10
c00159c5:	83 ec 08             	sub    esp,0x8
c00159c8:	53                   	push   ebx
c00159c9:	50                   	push   eax
c00159ca:	e8 08 7e 00 00       	call   c001d7d7 <Thr::executeDLL(unsigned long, void*)>
c00159cf:	83 c4 10             	add    esp,0x10
c00159d2:	90                   	nop
c00159d3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00159d6:	c9                   	leave  
c00159d7:	c3                   	ret    

c00159d8 <sendKeyToTerminal(unsigned char)>:
c00159d8:	55                   	push   ebp
c00159d9:	89 e5                	mov    ebp,esp
c00159db:	83 ec 28             	sub    esp,0x28
c00159de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159e1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00159e4:	a1 a4 e7 02 c0       	mov    eax,ds:0xc002e7a4
c00159e9:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00159ed:	83 ec 08             	sub    esp,0x8
c00159f0:	52                   	push   edx
c00159f1:	50                   	push   eax
c00159f2:	e8 57 b4 ff ff       	call   c0010e4e <VgaText::receiveKey(unsigned char)>
c00159f7:	83 c4 10             	add    esp,0x10
c00159fa:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00159fe:	0f 85 8f 00 00 00    	jne    c0015a93 <sendKeyToTerminal(unsigned char)+0xbb>
c0015a04:	fa                   	cli    
c0015a05:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c0015a0a:	40                   	inc    eax
c0015a0b:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c0015a10:	a1 e4 fb 02 c0       	mov    eax,ds:0xc002fbe4
c0015a15:	40                   	inc    eax
c0015a16:	a3 e4 fb 02 c0       	mov    ds:0xc002fbe4,eax
c0015a1b:	a1 80 e8 02 c0       	mov    eax,ds:0xc002e880
c0015a20:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015a23:	c7 05 80 e8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e880,0x0
c0015a2d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015a31:	74 1f                	je     c0015a52 <sendKeyToTerminal(unsigned char)+0x7a>
c0015a33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a36:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015a39:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015a3c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015a3f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015a42:	83 ec 0c             	sub    esp,0xc
c0015a45:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015a48:	e8 b0 89 00 00       	call   c001e3fd <unblockTask(ThreadControlBlock*)>
c0015a4d:	83 c4 10             	add    esp,0x10
c0015a50:	eb db                	jmp    c0015a2d <sendKeyToTerminal(unsigned char)+0x55>
c0015a52:	a1 e4 fb 02 c0       	mov    eax,ds:0xc002fbe4
c0015a57:	48                   	dec    eax
c0015a58:	a3 e4 fb 02 c0       	mov    ds:0xc002fbe4,eax
c0015a5d:	a1 e4 fb 02 c0       	mov    eax,ds:0xc002fbe4
c0015a62:	85 c0                	test   eax,eax
c0015a64:	75 18                	jne    c0015a7e <sendKeyToTerminal(unsigned char)+0xa6>
c0015a66:	a1 e0 fb 02 c0       	mov    eax,ds:0xc002fbe0
c0015a6b:	85 c0                	test   eax,eax
c0015a6d:	74 0f                	je     c0015a7e <sendKeyToTerminal(unsigned char)+0xa6>
c0015a6f:	c7 05 e0 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fbe0,0x0
c0015a79:	e8 ed 84 00 00       	call   c001df6b <schedule()>
c0015a7e:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c0015a83:	48                   	dec    eax
c0015a84:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c0015a89:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c0015a8e:	85 c0                	test   eax,eax
c0015a90:	75 01                	jne    c0015a93 <sendKeyToTerminal(unsigned char)+0xbb>
c0015a92:	fb                   	sti    
c0015a93:	90                   	nop
c0015a94:	c9                   	leave  
c0015a95:	c3                   	ret    

c0015a96 <sendKeyboardToken(KeyboardToken)>:
c0015a96:	55                   	push   ebp
c0015a97:	89 e5                	mov    ebp,esp
c0015a99:	83 ec 18             	sub    esp,0x18
c0015a9c:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015a9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aa2:	0f b7 c0             	movzx  eax,ax
c0015aa5:	83 f2 01             	xor    edx,0x1
c0015aa8:	88 90 a0 e8 02 c0    	mov    BYTE PTR [eax-0x3ffd1760],dl
c0015aae:	a1 88 e8 02 c0       	mov    eax,ds:0xc002e888
c0015ab3:	85 c0                	test   eax,eax
c0015ab5:	74 24                	je     c0015adb <sendKeyboardToken(KeyboardToken)+0x45>
c0015ab7:	8b 0d 88 e8 02 c0    	mov    ecx,DWORD PTR ds:0xc002e888
c0015abd:	83 ec 04             	sub    esp,0x4
c0015ac0:	68 a0 e8 02 c0       	push   0xc002e8a0
c0015ac5:	83 ec 08             	sub    esp,0x8
c0015ac8:	89 e2                	mov    edx,esp
c0015aca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015acd:	89 02                	mov    DWORD PTR [edx],eax
c0015acf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ad2:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015ad6:	ff d1                	call   ecx
c0015ad8:	83 c4 10             	add    esp,0x10
c0015adb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ade:	66 3d 03 02          	cmp    ax,0x203
c0015ae2:	75 07                	jne    c0015aeb <sendKeyboardToken(KeyboardToken)+0x55>
c0015ae4:	a0 a0 e9 02 c0       	mov    al,ds:0xc002e9a0
c0015ae9:	84 c0                	test   al,al
c0015aeb:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015aef:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015af2:	a0 a8 ec 02 c0       	mov    al,ds:0xc002eca8
c0015af7:	38 c2                	cmp    dl,al
c0015af9:	74 1c                	je     c0015b17 <sendKeyboardToken(KeyboardToken)+0x81>
c0015afb:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015afe:	a2 a8 ec 02 c0       	mov    ds:0xc002eca8,al
c0015b03:	a0 a8 ec 02 c0       	mov    al,ds:0xc002eca8
c0015b08:	0f b6 c0             	movzx  eax,al
c0015b0b:	83 ec 0c             	sub    esp,0xc
c0015b0e:	50                   	push   eax
c0015b0f:	e8 7a a9 ff ff       	call   c001048e <setTerminalScrollLock(bool)>
c0015b14:	83 c4 10             	add    esp,0x10
c0015b17:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015b1a:	84 c0                	test   al,al
c0015b1c:	0f 84 ae 00 00 00    	je     c0015bd0 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015b22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b25:	66 3d 10 03          	cmp    ax,0x310
c0015b29:	75 06                	jne    c0015b31 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015b2b:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015b31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b34:	66 3d 11 03          	cmp    ax,0x311
c0015b38:	75 06                	jne    c0015b40 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015b3a:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015b40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b43:	66 3d 12 03          	cmp    ax,0x312
c0015b47:	75 06                	jne    c0015b4f <sendKeyboardToken(KeyboardToken)+0xb9>
c0015b49:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015b4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b52:	66 3d 13 03          	cmp    ax,0x313
c0015b56:	75 06                	jne    c0015b5e <sendKeyboardToken(KeyboardToken)+0xc8>
c0015b58:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015b5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b61:	66 3d 14 03          	cmp    ax,0x314
c0015b65:	75 06                	jne    c0015b6d <sendKeyboardToken(KeyboardToken)+0xd7>
c0015b67:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015b6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b70:	66 3d 15 03          	cmp    ax,0x315
c0015b74:	75 06                	jne    c0015b7c <sendKeyboardToken(KeyboardToken)+0xe6>
c0015b76:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015b7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b7f:	66 3d 16 03          	cmp    ax,0x316
c0015b83:	75 06                	jne    c0015b8b <sendKeyboardToken(KeyboardToken)+0xf5>
c0015b85:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015b8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b8e:	66 3d 17 03          	cmp    ax,0x317
c0015b92:	75 06                	jne    c0015b9a <sendKeyboardToken(KeyboardToken)+0x104>
c0015b94:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015b9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b9d:	66 3d 18 03          	cmp    ax,0x318
c0015ba1:	75 06                	jne    c0015ba9 <sendKeyboardToken(KeyboardToken)+0x113>
c0015ba3:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015ba9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bac:	66 3d 19 03          	cmp    ax,0x319
c0015bb0:	75 06                	jne    c0015bb8 <sendKeyboardToken(KeyboardToken)+0x122>
c0015bb2:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015bb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bbb:	66 3d 1a 03          	cmp    ax,0x31a
c0015bbf:	0f 85 c9 00 00 00    	jne    c0015c8e <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015bc5:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015bcb:	e9 be 00 00 00       	jmp    c0015c8e <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015bd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bd3:	66 3d 10 03          	cmp    ax,0x310
c0015bd7:	75 0a                	jne    c0015be3 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015bd9:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015bdf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015be3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015be6:	66 3d 11 03          	cmp    ax,0x311
c0015bea:	75 0a                	jne    c0015bf6 <sendKeyboardToken(KeyboardToken)+0x160>
c0015bec:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015bf2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bf9:	66 3d 12 03          	cmp    ax,0x312
c0015bfd:	75 0a                	jne    c0015c09 <sendKeyboardToken(KeyboardToken)+0x173>
c0015bff:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015c05:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c0c:	66 3d 13 03          	cmp    ax,0x313
c0015c10:	75 0a                	jne    c0015c1c <sendKeyboardToken(KeyboardToken)+0x186>
c0015c12:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015c18:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c1f:	66 3d 14 03          	cmp    ax,0x314
c0015c23:	75 0a                	jne    c0015c2f <sendKeyboardToken(KeyboardToken)+0x199>
c0015c25:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015c2b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c32:	66 3d 15 03          	cmp    ax,0x315
c0015c36:	75 0a                	jne    c0015c42 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015c38:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015c3e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c45:	66 3d 16 03          	cmp    ax,0x316
c0015c49:	75 0a                	jne    c0015c55 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015c4b:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015c51:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c58:	66 3d 17 03          	cmp    ax,0x317
c0015c5c:	75 0a                	jne    c0015c68 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015c5e:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015c64:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c6b:	66 3d 18 03          	cmp    ax,0x318
c0015c6f:	75 0a                	jne    c0015c7b <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015c71:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015c77:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c7e:	66 3d 19 03          	cmp    ax,0x319
c0015c82:	75 0a                	jne    c0015c8e <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015c84:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015c8a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c91:	66 3d 00 02          	cmp    ax,0x200
c0015c95:	75 2c                	jne    c0015cc3 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015c97:	a0 a0 ec 02 c0       	mov    al,ds:0xc002eca0
c0015c9c:	83 f0 01             	xor    eax,0x1
c0015c9f:	84 c0                	test   al,al
c0015ca1:	74 20                	je     c0015cc3 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015ca3:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0015ca8:	6a 01                	push   0x1
c0015caa:	6a 00                	push   0x0
c0015cac:	68 00 59 01 c0       	push   0xc0015900
c0015cb1:	50                   	push   eax
c0015cb2:	e8 8f 80 00 00       	call   c001dd46 <Process::createThread(void (*)(void*), void*, int)>
c0015cb7:	83 c4 10             	add    esp,0x10
c0015cba:	c6 05 a0 ec 02 c0 01 	mov    BYTE PTR ds:0xc002eca0,0x1
c0015cc1:	eb 33                	jmp    c0015cf6 <sendKeyboardToken(KeyboardToken)+0x260>
c0015cc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cc6:	66 3d 01 02          	cmp    ax,0x201
c0015cca:	75 2a                	jne    c0015cf6 <sendKeyboardToken(KeyboardToken)+0x260>
c0015ccc:	a0 a0 ec 02 c0       	mov    al,ds:0xc002eca0
c0015cd1:	83 f0 01             	xor    eax,0x1
c0015cd4:	84 c0                	test   al,al
c0015cd6:	74 1e                	je     c0015cf6 <sendKeyboardToken(KeyboardToken)+0x260>
c0015cd8:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c0015cdd:	6a 01                	push   0x1
c0015cdf:	6a 00                	push   0x0
c0015ce1:	68 6c 59 01 c0       	push   0xc001596c
c0015ce6:	50                   	push   eax
c0015ce7:	e8 5a 80 00 00       	call   c001dd46 <Process::createThread(void (*)(void*), void*, int)>
c0015cec:	83 c4 10             	add    esp,0x10
c0015cef:	c6 05 a0 ec 02 c0 01 	mov    BYTE PTR ds:0xc002eca0,0x1
c0015cf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cf9:	66 3d 1d 03          	cmp    ax,0x31d
c0015cfd:	75 06                	jne    c0015d05 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015cff:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015d05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d08:	66 3d 1c 03          	cmp    ax,0x31c
c0015d0c:	75 06                	jne    c0015d14 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015d0e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015d14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d17:	66 3d 1b 03          	cmp    ax,0x31b
c0015d1b:	75 06                	jne    c0015d23 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015d1d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015d23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d26:	66 3d 1e 03          	cmp    ax,0x31e
c0015d2a:	75 06                	jne    c0015d32 <sendKeyboardToken(KeyboardToken)+0x29c>
c0015d2c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015d32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d35:	66 3d 1f 03          	cmp    ax,0x31f
c0015d39:	75 06                	jne    c0015d41 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015d3b:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015d41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d44:	66 3d 1a 03          	cmp    ax,0x31a
c0015d48:	75 06                	jne    c0015d50 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015d4a:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015d50:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015d54:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015d57:	83 f0 01             	xor    eax,0x1
c0015d5a:	84 c0                	test   al,al
c0015d5c:	74 77                	je     c0015dd5 <sendKeyboardToken(KeyboardToken)+0x33f>
c0015d5e:	a0 a1 e9 02 c0       	mov    al,ds:0xc002e9a1
c0015d63:	84 c0                	test   al,al
c0015d65:	74 41                	je     c0015da8 <sendKeyboardToken(KeyboardToken)+0x312>
c0015d67:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015d6b:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015d6f:	74 2b                	je     c0015d9c <sendKeyboardToken(KeyboardToken)+0x306>
c0015d71:	8b 15 a4 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002eca4
c0015d77:	89 d0                	mov    eax,edx
c0015d79:	c1 e0 02             	shl    eax,0x2
c0015d7c:	01 d0                	add    eax,edx
c0015d7e:	01 c0                	add    eax,eax
c0015d80:	a3 a4 ec 02 c0       	mov    ds:0xc002eca4,eax
c0015d85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d88:	0f b7 c0             	movzx  eax,ax
c0015d8b:	8d 50 d0             	lea    edx,[eax-0x30]
c0015d8e:	a1 a4 ec 02 c0       	mov    eax,ds:0xc002eca4
c0015d93:	01 d0                	add    eax,edx
c0015d95:	a3 a4 ec 02 c0       	mov    ds:0xc002eca4,eax
c0015d9a:	eb 6d                	jmp    c0015e09 <sendKeyboardToken(KeyboardToken)+0x373>
c0015d9c:	c7 05 a4 ec 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eca4,0x0
c0015da6:	eb 61                	jmp    c0015e09 <sendKeyboardToken(KeyboardToken)+0x373>
c0015da8:	a1 a4 ec 02 c0       	mov    eax,ds:0xc002eca4
c0015dad:	85 c0                	test   eax,eax
c0015daf:	74 18                	je     c0015dc9 <sendKeyboardToken(KeyboardToken)+0x333>
c0015db1:	a1 a4 ec 02 c0       	mov    eax,ds:0xc002eca4
c0015db6:	0f b6 c0             	movzx  eax,al
c0015db9:	83 ec 0c             	sub    esp,0xc
c0015dbc:	50                   	push   eax
c0015dbd:	e8 16 fc ff ff       	call   c00159d8 <sendKeyToTerminal(unsigned char)>
c0015dc2:	83 c4 10             	add    esp,0x10
c0015dc5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015dc9:	c7 05 a4 ec 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eca4,0x0
c0015dd3:	eb 34                	jmp    c0015e09 <sendKeyboardToken(KeyboardToken)+0x373>
c0015dd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dd8:	66 3d 01 01          	cmp    ax,0x101
c0015ddc:	75 2b                	jne    c0015e09 <sendKeyboardToken(KeyboardToken)+0x373>
c0015dde:	a1 a4 ec 02 c0       	mov    eax,ds:0xc002eca4
c0015de3:	85 c0                	test   eax,eax
c0015de5:	74 18                	je     c0015dff <sendKeyboardToken(KeyboardToken)+0x369>
c0015de7:	a1 a4 ec 02 c0       	mov    eax,ds:0xc002eca4
c0015dec:	0f b6 c0             	movzx  eax,al
c0015def:	83 ec 0c             	sub    esp,0xc
c0015df2:	50                   	push   eax
c0015df3:	e8 e0 fb ff ff       	call   c00159d8 <sendKeyToTerminal(unsigned char)>
c0015df8:	83 c4 10             	add    esp,0x10
c0015dfb:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015dff:	c7 05 a4 ec 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eca4,0x0
c0015e09:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015e0c:	83 f0 01             	xor    eax,0x1
c0015e0f:	84 c0                	test   al,al
c0015e11:	74 4c                	je     c0015e5f <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015e13:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015e16:	83 f0 01             	xor    eax,0x1
c0015e19:	84 c0                	test   al,al
c0015e1b:	74 42                	je     c0015e5f <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015e1d:	a0 a0 e9 02 c0       	mov    al,ds:0xc002e9a0
c0015e22:	83 f0 01             	xor    eax,0x1
c0015e25:	84 c0                	test   al,al
c0015e27:	74 36                	je     c0015e5f <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015e29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e2c:	66 83 f8 1f          	cmp    ax,0x1f
c0015e30:	76 09                	jbe    c0015e3b <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015e32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e35:	66 83 f8 7e          	cmp    ax,0x7e
c0015e39:	76 12                	jbe    c0015e4d <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015e3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e3e:	66 83 f8 0a          	cmp    ax,0xa
c0015e42:	74 09                	je     c0015e4d <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015e44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e47:	66 83 f8 08          	cmp    ax,0x8
c0015e4b:	75 12                	jne    c0015e5f <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015e4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e50:	0f b6 c0             	movzx  eax,al
c0015e53:	83 ec 0c             	sub    esp,0xc
c0015e56:	50                   	push   eax
c0015e57:	e8 7c fb ff ff       	call   c00159d8 <sendKeyToTerminal(unsigned char)>
c0015e5c:	83 c4 10             	add    esp,0x10
c0015e5f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015e62:	83 f0 01             	xor    eax,0x1
c0015e65:	84 c0                	test   al,al
c0015e67:	74 4f                	je     c0015eb8 <sendKeyboardToken(KeyboardToken)+0x422>
c0015e69:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015e6c:	83 f0 01             	xor    eax,0x1
c0015e6f:	84 c0                	test   al,al
c0015e71:	74 45                	je     c0015eb8 <sendKeyboardToken(KeyboardToken)+0x422>
c0015e73:	a0 a0 e9 02 c0       	mov    al,ds:0xc002e9a0
c0015e78:	84 c0                	test   al,al
c0015e7a:	74 3c                	je     c0015eb8 <sendKeyboardToken(KeyboardToken)+0x422>
c0015e7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e7f:	66 83 f8 3f          	cmp    ax,0x3f
c0015e83:	76 33                	jbe    c0015eb8 <sendKeyboardToken(KeyboardToken)+0x422>
c0015e85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e88:	66 83 f8 7f          	cmp    ax,0x7f
c0015e8c:	77 2a                	ja     c0015eb8 <sendKeyboardToken(KeyboardToken)+0x422>
c0015e8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e91:	88 c2                	mov    dl,al
c0015e93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e96:	66 83 f8 5f          	cmp    ax,0x5f
c0015e9a:	76 04                	jbe    c0015ea0 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015e9c:	b0 20                	mov    al,0x20
c0015e9e:	eb 02                	jmp    c0015ea2 <sendKeyboardToken(KeyboardToken)+0x40c>
c0015ea0:	b0 00                	mov    al,0x0
c0015ea2:	29 c2                	sub    edx,eax
c0015ea4:	88 d0                	mov    al,dl
c0015ea6:	83 e8 40             	sub    eax,0x40
c0015ea9:	0f b6 c0             	movzx  eax,al
c0015eac:	83 ec 0c             	sub    esp,0xc
c0015eaf:	50                   	push   eax
c0015eb0:	e8 23 fb ff ff       	call   c00159d8 <sendKeyToTerminal(unsigned char)>
c0015eb5:	83 c4 10             	add    esp,0x10
c0015eb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ebb:	66 3d 00 03          	cmp    ax,0x300
c0015ebf:	75 0f                	jne    c0015ed0 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015ec1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015ec4:	83 f0 01             	xor    eax,0x1
c0015ec7:	84 c0                	test   al,al
c0015ec9:	74 05                	je     c0015ed0 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015ecb:	e8 2f a9 ff ff       	call   c00107ff <doTerminalCycle()>
c0015ed0:	90                   	nop
c0015ed1:	c9                   	leave  
c0015ed2:	c3                   	ret    

c0015ed3 <clearInternalKeybuffer(VgaText*)>:
c0015ed3:	55                   	push   ebp
c0015ed4:	89 e5                	mov    ebp,esp
c0015ed6:	83 ec 08             	sub    esp,0x8
c0015ed9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015edc:	05 98 01 00 00       	add    eax,0x198
c0015ee1:	83 ec 0c             	sub    esp,0xc
c0015ee4:	50                   	push   eax
c0015ee5:	e8 82 a8 fe ff       	call   c000076c <strlen>
c0015eea:	83 c4 10             	add    esp,0x10
c0015eed:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ef0:	81 c2 98 01 00 00    	add    edx,0x198
c0015ef6:	83 ec 04             	sub    esp,0x4
c0015ef9:	50                   	push   eax
c0015efa:	6a 00                	push   0x0
c0015efc:	52                   	push   edx
c0015efd:	e8 4e a8 fe ff       	call   c0000750 <memset>
c0015f02:	83 c4 10             	add    esp,0x10
c0015f05:	90                   	nop
c0015f06:	c9                   	leave  
c0015f07:	c3                   	ret    

c0015f08 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015f08:	55                   	push   ebp
c0015f09:	89 e5                	mov    ebp,esp
c0015f0b:	83 ec 18             	sub    esp,0x18
c0015f0e:	a1 88 e8 02 c0       	mov    eax,ds:0xc002e888
c0015f13:	85 c0                	test   eax,eax
c0015f15:	74 2a                	je     c0015f41 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015f17:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015f1d:	8b 0d 88 e8 02 c0    	mov    ecx,DWORD PTR ds:0xc002e888
c0015f23:	83 ec 04             	sub    esp,0x4
c0015f26:	68 a0 e8 02 c0       	push   0xc002e8a0
c0015f2b:	83 ec 08             	sub    esp,0x8
c0015f2e:	89 e2                	mov    edx,esp
c0015f30:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015f33:	89 02                	mov    DWORD PTR [edx],eax
c0015f35:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015f38:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015f3c:	ff d1                	call   ecx
c0015f3e:	83 c4 10             	add    esp,0x10
c0015f41:	fb                   	sti    
c0015f42:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015f49:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015f4d:	0f 84 a1 00 00 00    	je     c0015ff4 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015f53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f56:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015f5c:	84 c0                	test   al,al
c0015f5e:	75 28                	jne    c0015f88 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015f60:	fa                   	cli    
c0015f61:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c0015f66:	40                   	inc    eax
c0015f67:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c0015f6c:	e8 fa 7f 00 00       	call   c001df6b <schedule()>
c0015f71:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c0015f76:	48                   	dec    eax
c0015f77:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c0015f7c:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c0015f81:	85 c0                	test   eax,eax
c0015f83:	75 ce                	jne    c0015f53 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015f85:	fb                   	sti    
c0015f86:	eb cb                	jmp    c0015f53 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015f88:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015f8b:	8d 50 01             	lea    edx,[eax+0x1]
c0015f8e:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015f91:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015f94:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015f9a:	88 10                	mov    BYTE PTR [eax],dl
c0015f9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f9f:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015fa5:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015fa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fab:	05 98 01 00 00       	add    eax,0x198
c0015fb0:	83 ec 0c             	sub    esp,0xc
c0015fb3:	50                   	push   eax
c0015fb4:	e8 b3 a7 fe ff       	call   c000076c <strlen>
c0015fb9:	83 c4 10             	add    esp,0x10
c0015fbc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015fbf:	81 c2 98 01 00 00    	add    edx,0x198
c0015fc5:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015fc8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015fcb:	81 c2 98 01 00 00    	add    edx,0x198
c0015fd1:	83 ec 04             	sub    esp,0x4
c0015fd4:	50                   	push   eax
c0015fd5:	51                   	push   ecx
c0015fd6:	52                   	push   edx
c0015fd7:	e8 ac a6 fe ff       	call   c0000688 <memmove>
c0015fdc:	83 c4 10             	add    esp,0x10
c0015fdf:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015fe2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015fe5:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015fe9:	0f 85 5a ff ff ff    	jne    c0015f49 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015fef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ff2:	eb 03                	jmp    c0015ff7 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015ff4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ff7:	c9                   	leave  
c0015ff8:	c3                   	ret    
c0015ff9:	90                   	nop

c0015ffa <Keyboard::Keyboard(char const*)>:
c0015ffa:	83 ec 0c             	sub    esp,0xc
c0015ffd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016001:	83 ec 08             	sub    esp,0x8
c0016004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016008:	50                   	push   eax
c0016009:	e8 6a e0 ff ff       	call   c0014078 <Device::Device(char const*)>
c001600e:	83 c4 10             	add    esp,0x10
c0016011:	ba 88 b8 02 c0       	mov    edx,0xc002b888
c0016016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001601a:	89 10                	mov    DWORD PTR [eax],edx
c001601c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016020:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001602a:	c6 05 84 e8 02 c0 01 	mov    BYTE PTR ds:0xc002e884,0x1
c0016031:	90                   	nop
c0016032:	83 c4 0c             	add    esp,0xc
c0016035:	c3                   	ret    

c0016036 <Keyboard::~Keyboard()>:
c0016036:	83 ec 0c             	sub    esp,0xc
c0016039:	ba 88 b8 02 c0       	mov    edx,0xc002b888
c001603e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016042:	89 10                	mov    DWORD PTR [eax],edx
c0016044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016048:	83 ec 0c             	sub    esp,0xc
c001604b:	50                   	push   eax
c001604c:	e8 f1 dc ff ff       	call   c0013d42 <Device::~Device()>
c0016051:	83 c4 10             	add    esp,0x10
c0016054:	90                   	nop
c0016055:	83 c4 0c             	add    esp,0xc
c0016058:	c3                   	ret    
c0016059:	90                   	nop

c001605a <Keyboard::~Keyboard()>:
c001605a:	83 ec 0c             	sub    esp,0xc
c001605d:	83 ec 0c             	sub    esp,0xc
c0016060:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016064:	e8 cd ff ff ff       	call   c0016036 <Keyboard::~Keyboard()>
c0016069:	83 c4 10             	add    esp,0x10
c001606c:	83 ec 08             	sub    esp,0x8
c001606f:	68 5c 01 00 00       	push   0x15c
c0016074:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016078:	e8 e6 c8 ff ff       	call   c0012963 <operator delete(void*, unsigned long)>
c001607d:	83 c4 10             	add    esp,0x10
c0016080:	83 c4 0c             	add    esp,0xc
c0016083:	c3                   	ret    

c0016084 <LogicalDisk::close(int, int, void*)>:
c0016084:	83 c8 ff             	or     eax,0xffffffff
c0016087:	c3                   	ret    

c0016088 <LogicalDisk::~LogicalDisk()>:
c0016088:	83 ec 0c             	sub    esp,0xc
c001608b:	ba 00 b9 02 c0       	mov    edx,0xc002b900
c0016090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016094:	89 10                	mov    DWORD PTR [eax],edx
c0016096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001609a:	83 ec 0c             	sub    esp,0xc
c001609d:	50                   	push   eax
c001609e:	e8 9f dc ff ff       	call   c0013d42 <Device::~Device()>
c00160a3:	83 c4 10             	add    esp,0x10
c00160a6:	90                   	nop
c00160a7:	83 c4 0c             	add    esp,0xc
c00160aa:	c3                   	ret    
c00160ab:	90                   	nop

c00160ac <LogicalDisk::~LogicalDisk()>:
c00160ac:	83 ec 0c             	sub    esp,0xc
c00160af:	83 ec 0c             	sub    esp,0xc
c00160b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160b6:	e8 cd ff ff ff       	call   c0016088 <LogicalDisk::~LogicalDisk()>
c00160bb:	83 c4 10             	add    esp,0x10
c00160be:	83 ec 08             	sub    esp,0x8
c00160c1:	68 74 01 00 00       	push   0x174
c00160c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160ca:	e8 94 c8 ff ff       	call   c0012963 <operator delete(void*, unsigned long)>
c00160cf:	83 c4 10             	add    esp,0x10
c00160d2:	83 c4 0c             	add    esp,0xc
c00160d5:	c3                   	ret    

c00160d6 <LogicalDisk::open(int, int, void*)>:
c00160d6:	83 ec 18             	sub    esp,0x18
c00160d9:	68 b4 b8 02 c0       	push   0xc002b8b4
c00160de:	e8 f6 42 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c00160e3:	83 c8 ff             	or     eax,0xffffffff
c00160e6:	83 c4 1c             	add    esp,0x1c
c00160e9:	c3                   	ret    

c00160ea <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00160ea:	53                   	push   ebx
c00160eb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00160ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00160f7:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00160fd:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016103:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016109:	77 10                	ja     c001611b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001610b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0016111:	89 d3                	mov    ebx,edx
c0016113:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016119:	72 05                	jb     c0016120 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001611b:	83 c8 ff             	or     eax,0xffffffff
c001611e:	89 c2                	mov    edx,eax
c0016120:	5b                   	pop    ebx
c0016121:	c3                   	ret    

c0016122 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0016122:	56                   	push   esi
c0016123:	83 c8 ff             	or     eax,0xffffffff
c0016126:	53                   	push   ebx
c0016127:	89 c2                	mov    edx,eax
c0016129:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001612d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016131:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016135:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001613b:	77 27                	ja     c0016164 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001613d:	89 d8                	mov    eax,ebx
c001613f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0016145:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001614b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016150:	89 c2                	mov    edx,eax
c0016152:	73 10                	jae    c0016164 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016154:	89 c8                	mov    eax,ecx
c0016156:	89 da                	mov    edx,ebx
c0016158:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001615e:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016164:	5b                   	pop    ebx
c0016165:	5e                   	pop    esi
c0016166:	c3                   	ret    
c0016167:	90                   	nop

c0016168 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016168:	83 ec 1c             	sub    esp,0x1c
c001616b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001616f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016173:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016177:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001617b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001617f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016182:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016186:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001618a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001618e:	83 ec 08             	sub    esp,0x8
c0016191:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016195:	50                   	push   eax
c0016196:	e8 dd de ff ff       	call   c0014078 <Device::Device(char const*)>
c001619b:	83 c4 10             	add    esp,0x10
c001619e:	ba 00 b9 02 c0       	mov    edx,0xc002b900
c00161a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161a7:	89 10                	mov    DWORD PTR [eax],edx
c00161a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161ad:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00161b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161b8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00161bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161c3:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00161cd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00161d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00161d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00161d9:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00161df:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00161e5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00161e9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00161ec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00161f0:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00161f6:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00161fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016200:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016204:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001620a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001620e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016218:	90                   	nop
c0016219:	83 c4 1c             	add    esp,0x1c
c001621c:	c3                   	ret    
c001621d:	90                   	nop

c001621e <LogicalDisk::assignDriveLetter()>:
c001621e:	55                   	push   ebp
c001621f:	57                   	push   edi
c0016220:	56                   	push   esi
c0016221:	53                   	push   ebx
c0016222:	83 ec 14             	sub    esp,0x14
c0016225:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016229:	8b 3d c0 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ecc0
c001622f:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0016235:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016239:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001623f:	8b 3d c4 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ecc4
c0016245:	3c 01                	cmp    al,0x1
c0016247:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001624b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001624f:	19 c0                	sbb    eax,eax
c0016251:	83 e0 02             	and    eax,0x2
c0016254:	83 c0 41             	add    eax,0x41
c0016257:	0f be e8             	movsx  ebp,al
c001625a:	3c 43                	cmp    al,0x43
c001625c:	75 10                	jne    c001626e <LogicalDisk::assignDriveLetter()+0x50>
c001625e:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016265:	75 5d                	jne    c00162c4 <LogicalDisk::assignDriveLetter()+0xa6>
c0016267:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001626c:	75 56                	jne    c00162c4 <LogicalDisk::assignDriveLetter()+0xa6>
c001626e:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016271:	ba 01 00 00 00       	mov    edx,0x1
c0016276:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001627a:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001627e:	d3 e2                	shl    edx,cl
c0016280:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016284:	89 d7                	mov    edi,edx
c0016286:	89 d6                	mov    esi,edx
c0016288:	c1 ff 1f             	sar    edi,0x1f
c001628b:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001628f:	21 f9                	and    ecx,edi
c0016291:	09 d1                	or     ecx,edx
c0016293:	75 2f                	jne    c00162c4 <LogicalDisk::assignDriveLetter()+0xa6>
c0016295:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016299:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001629d:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00162a3:	09 f2                	or     edx,esi
c00162a5:	89 15 c0 ec 02 c0    	mov    DWORD PTR ds:0xc002ecc0,edx
c00162ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162af:	09 fa                	or     edx,edi
c00162b1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00162b5:	89 15 c4 ec 02 c0    	mov    DWORD PTR ds:0xc002ecc4,edx
c00162bb:	89 1c bd e0 ec 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1320],ebx
c00162c2:	eb 08                	jmp    c00162cc <LogicalDisk::assignDriveLetter()+0xae>
c00162c4:	45                   	inc    ebp
c00162c5:	40                   	inc    eax
c00162c6:	3c 5b                	cmp    al,0x5b
c00162c8:	75 90                	jne    c001625a <LogicalDisk::assignDriveLetter()+0x3c>
c00162ca:	31 c0                	xor    eax,eax
c00162cc:	83 c4 14             	add    esp,0x14
c00162cf:	5b                   	pop    ebx
c00162d0:	5e                   	pop    esi
c00162d1:	5f                   	pop    edi
c00162d2:	5d                   	pop    ebp
c00162d3:	c3                   	ret    

c00162d4 <LogicalDisk::mount()>:
c00162d4:	56                   	push   esi
c00162d5:	53                   	push   ebx
c00162d6:	53                   	push   ebx
c00162d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162db:	8b 1d 54 e8 02 c0    	mov    ebx,DWORD PTR ds:0xc002e854
c00162e1:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00162eb:	85 db                	test   ebx,ebx
c00162ed:	74 27                	je     c0016316 <LogicalDisk::mount()+0x42>
c00162ef:	51                   	push   ecx
c00162f0:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00162f7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00162f9:	83 e8 41             	sub    eax,0x41
c00162fc:	50                   	push   eax
c00162fd:	56                   	push   esi
c00162fe:	53                   	push   ebx
c00162ff:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016302:	83 c4 10             	add    esp,0x10
c0016305:	84 c0                	test   al,al
c0016307:	74 08                	je     c0016311 <LogicalDisk::mount()+0x3d>
c0016309:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001630f:	eb 07                	jmp    c0016318 <LogicalDisk::mount()+0x44>
c0016311:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016314:	eb d5                	jmp    c00162eb <LogicalDisk::mount()+0x17>
c0016316:	31 c0                	xor    eax,eax
c0016318:	5a                   	pop    edx
c0016319:	5b                   	pop    ebx
c001631a:	5e                   	pop    esi
c001631b:	c3                   	ret    

c001631c <LogicalDisk::unmount()>:
c001631c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016320:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001632a:	c3                   	ret    
c001632b:	90                   	nop

c001632c <LogicalDisk::eject()>:
c001632c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016330:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016336:	8b 10                	mov    edx,DWORD PTR [eax]
c0016338:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001633c:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001633f:	90                   	nop

c0016340 <LogicalDisk::unassignDriveLetter()>:
c0016340:	57                   	push   edi
c0016341:	56                   	push   esi
c0016342:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016346:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001634d:	84 c9                	test   cl,cl
c001634f:	75 0f                	jne    c0016360 <LogicalDisk::unassignDriveLetter()+0x20>
c0016351:	c7 44 24 0c d8 b8 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b8d8
c0016359:	5e                   	pop    esi
c001635a:	5f                   	pop    edi
c001635b:	e9 79 40 00 00       	jmp    c001a3d9 <Krnl::panic(char const*)>
c0016360:	83 e9 41             	sub    ecx,0x41
c0016363:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001636a:	b8 01 00 00 00       	mov    eax,0x1
c001636f:	c7 04 8d e0 ec 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1320],0x0
c001637a:	d3 e0                	shl    eax,cl
c001637c:	89 c7                	mov    edi,eax
c001637e:	f7 d0                	not    eax
c0016380:	c1 ff 1f             	sar    edi,0x1f
c0016383:	21 05 c0 ec 02 c0    	and    DWORD PTR ds:0xc002ecc0,eax
c0016389:	89 fe                	mov    esi,edi
c001638b:	f7 d6                	not    esi
c001638d:	21 35 c4 ec 02 c0    	and    DWORD PTR ds:0xc002ecc4,esi
c0016393:	5e                   	pop    esi
c0016394:	5f                   	pop    edi
c0016395:	c3                   	ret    

c0016396 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016396:	57                   	push   edi
c0016397:	56                   	push   esi
c0016398:	53                   	push   ebx
c0016399:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001639d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00163a1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00163a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00163a9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00163af:	77 41                	ja     c00163f2 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00163b1:	99                   	cdq    
c00163b2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00163b8:	01 c8                	add    eax,ecx
c00163ba:	11 da                	adc    edx,ebx
c00163bc:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00163c2:	19 d7                	sbb    edi,edx
c00163c4:	72 33                	jb     c00163f9 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00163c6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00163cc:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00163d2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00163d6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00163da:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00163e0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00163e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00163ea:	5b                   	pop    ebx
c00163eb:	5e                   	pop    esi
c00163ec:	5f                   	pop    edi
c00163ed:	e9 1c 0b 00 00       	jmp    c0016f0e <VCache::read(unsigned long long, int, void*)>
c00163f2:	b8 05 00 00 00       	mov    eax,0x5
c00163f7:	eb 05                	jmp    c00163fe <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00163f9:	b8 07 00 00 00       	mov    eax,0x7
c00163fe:	5b                   	pop    ebx
c00163ff:	5e                   	pop    esi
c0016400:	5f                   	pop    edi
c0016401:	c3                   	ret    

c0016402 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016402:	57                   	push   edi
c0016403:	56                   	push   esi
c0016404:	53                   	push   ebx
c0016405:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016409:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001640d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016411:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016415:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001641b:	77 41                	ja     c001645e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001641d:	99                   	cdq    
c001641e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016424:	01 c8                	add    eax,ecx
c0016426:	11 da                	adc    edx,ebx
c0016428:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001642e:	19 d7                	sbb    edi,edx
c0016430:	72 33                	jb     c0016465 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016432:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016438:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001643e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016442:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016446:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001644c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016452:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016456:	5b                   	pop    ebx
c0016457:	5e                   	pop    esi
c0016458:	5f                   	pop    edi
c0016459:	e9 86 09 00 00       	jmp    c0016de4 <VCache::write(unsigned long long, int, void*)>
c001645e:	b8 05 00 00 00       	mov    eax,0x5
c0016463:	eb 05                	jmp    c001646a <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016465:	b8 07 00 00 00       	mov    eax,0x7
c001646a:	5b                   	pop    ebx
c001646b:	5e                   	pop    esi
c001646c:	5f                   	pop    edi
c001646d:	c3                   	ret    

c001646e <Mouse::Mouse(char const*)>:
c001646e:	83 ec 0c             	sub    esp,0xc
c0016471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016475:	83 ec 08             	sub    esp,0x8
c0016478:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001647c:	50                   	push   eax
c001647d:	e8 f6 db ff ff       	call   c0014078 <Device::Device(char const*)>
c0016482:	83 c4 10             	add    esp,0x10
c0016485:	ba 2c b9 02 c0       	mov    edx,0xc002b92c
c001648a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001648e:	89 10                	mov    DWORD PTR [eax],edx
c0016490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016494:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001649e:	90                   	nop
c001649f:	83 c4 0c             	add    esp,0xc
c00164a2:	c3                   	ret    
c00164a3:	90                   	nop

c00164a4 <Mouse::~Mouse()>:
c00164a4:	83 ec 0c             	sub    esp,0xc
c00164a7:	ba 2c b9 02 c0       	mov    edx,0xc002b92c
c00164ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164b0:	89 10                	mov    DWORD PTR [eax],edx
c00164b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164b6:	83 ec 0c             	sub    esp,0xc
c00164b9:	50                   	push   eax
c00164ba:	e8 83 d8 ff ff       	call   c0013d42 <Device::~Device()>
c00164bf:	83 c4 10             	add    esp,0x10
c00164c2:	90                   	nop
c00164c3:	83 c4 0c             	add    esp,0xc
c00164c6:	c3                   	ret    
c00164c7:	90                   	nop

c00164c8 <Mouse::~Mouse()>:
c00164c8:	83 ec 0c             	sub    esp,0xc
c00164cb:	83 ec 0c             	sub    esp,0xc
c00164ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164d2:	e8 cd ff ff ff       	call   c00164a4 <Mouse::~Mouse()>
c00164d7:	83 c4 10             	add    esp,0x10
c00164da:	83 ec 08             	sub    esp,0x8
c00164dd:	68 58 01 00 00       	push   0x158
c00164e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164e6:	e8 78 c4 ff ff       	call   c0012963 <operator delete(void*, unsigned long)>
c00164eb:	83 c4 10             	add    esp,0x10
c00164ee:	83 c4 0c             	add    esp,0xc
c00164f1:	c3                   	ret    

c00164f2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00164f2:	55                   	push   ebp
c00164f3:	57                   	push   edi
c00164f4:	56                   	push   esi
c00164f5:	53                   	push   ebx
c00164f6:	81 ec 28 01 00 00    	sub    esp,0x128
c00164fc:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016503:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001650a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016511:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016518:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001651c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016520:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016527:	e8 48 dc ff ff       	call   c0014174 <Device::getName()>
c001652c:	5a                   	pop    edx
c001652d:	59                   	pop    ecx
c001652e:	50                   	push   eax
c001652f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016533:	55                   	push   ebp
c0016534:	e8 d3 a2 fe ff       	call   c000080c <strcpy>
c0016539:	5b                   	pop    ebx
c001653a:	58                   	pop    eax
c001653b:	68 50 b9 02 c0       	push   0xc002b950
c0016540:	55                   	push   ebp
c0016541:	e8 06 a4 fe ff       	call   c000094c <strcat>
c0016546:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001654d:	e8 91 94 ff ff       	call   c000f9e3 <malloc>
c0016552:	83 c4 0c             	add    esp,0xc
c0016555:	89 c3                	mov    ebx,eax
c0016557:	57                   	push   edi
c0016558:	56                   	push   esi
c0016559:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001655d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016561:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016568:	55                   	push   ebp
c0016569:	50                   	push   eax
c001656a:	e8 f9 fb ff ff       	call   c0016168 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001656f:	83 c4 14             	add    esp,0x14
c0016572:	53                   	push   ebx
c0016573:	e8 a6 fc ff ff       	call   c001621e <LogicalDisk::assignDriveLetter()>
c0016578:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001657b:	e8 54 fd ff ff       	call   c00162d4 <LogicalDisk::mount()>
c0016580:	58                   	pop    eax
c0016581:	5a                   	pop    edx
c0016582:	53                   	push   ebx
c0016583:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001658a:	e8 e5 d8 ff ff       	call   c0013e74 <Device::addChild(Device*)>
c001658f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016595:	5b                   	pop    ebx
c0016596:	5e                   	pop    esi
c0016597:	5f                   	pop    edi
c0016598:	5d                   	pop    ebp
c0016599:	c3                   	ret    

c001659a <createPartitionsForDisk(PhysicalDisk*)>:
c001659a:	55                   	push   ebp
c001659b:	57                   	push   edi
c001659c:	56                   	push   esi
c001659d:	53                   	push   ebx
c001659e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00165a4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00165ab:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00165b1:	3d 00 02 00 00       	cmp    eax,0x200
c00165b6:	74 27                	je     c00165df <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00165b8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00165be:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00165c4:	83 ec 10             	sub    esp,0x10
c00165c7:	0f a4 f7 0a          	shld   edi,esi,0xa
c00165cb:	99                   	cdq    
c00165cc:	c1 e6 0a             	shl    esi,0xa
c00165cf:	52                   	push   edx
c00165d0:	89 fd                	mov    ebp,edi
c00165d2:	50                   	push   eax
c00165d3:	55                   	push   ebp
c00165d4:	56                   	push   esi
c00165d5:	e8 3a 08 01 00       	call   c0026e14 <__udivdi3>
c00165da:	e9 b1 00 00 00       	jmp    c0016690 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00165df:	83 ec 0c             	sub    esp,0xc
c00165e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00165e4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00165e8:	56                   	push   esi
c00165e9:	6a 01                	push   0x1
c00165eb:	6a 00                	push   0x0
c00165ed:	6a 00                	push   0x0
c00165ef:	53                   	push   ebx
c00165f0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00165f3:	83 c4 20             	add    esp,0x20
c00165f6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00165fe:	75 0a                	jne    c001660a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016600:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016608:	74 2c                	je     c0016636 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001660a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016610:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016616:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001661c:	83 ec 10             	sub    esp,0x10
c001661f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016623:	89 f7                	mov    edi,esi
c0016625:	c1 e0 0a             	shl    eax,0xa
c0016628:	c1 ff 1f             	sar    edi,0x1f
c001662b:	57                   	push   edi
c001662c:	56                   	push   esi
c001662d:	52                   	push   edx
c001662e:	50                   	push   eax
c001662f:	e8 e0 07 01 00       	call   c0026e14 <__udivdi3>
c0016634:	eb 5a                	jmp    c0016690 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016636:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001663d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016644:	83 e1 7f             	and    ecx,0x7f
c0016647:	83 e0 7f             	and    eax,0x7f
c001664a:	01 c1                	add    ecx,eax
c001664c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016653:	83 e0 7f             	and    eax,0x7f
c0016656:	01 c1                	add    ecx,eax
c0016658:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001665f:	83 e0 7f             	and    eax,0x7f
c0016662:	00 c1                	add    cl,al
c0016664:	74 41                	je     c00166a7 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016666:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001666c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016672:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016678:	83 ec 10             	sub    esp,0x10
c001667b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001667f:	89 f7                	mov    edi,esi
c0016681:	c1 e0 0a             	shl    eax,0xa
c0016684:	c1 ff 1f             	sar    edi,0x1f
c0016687:	57                   	push   edi
c0016688:	56                   	push   esi
c0016689:	52                   	push   edx
c001668a:	50                   	push   eax
c001668b:	e8 84 07 01 00       	call   c0026e14 <__udivdi3>
c0016690:	83 c4 14             	add    esp,0x14
c0016693:	52                   	push   edx
c0016694:	50                   	push   eax
c0016695:	6a 00                	push   0x0
c0016697:	6a 00                	push   0x0
c0016699:	53                   	push   ebx
c001669a:	e8 53 fe ff ff       	call   c00164f2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001669f:	83 c4 20             	add    esp,0x20
c00166a2:	e9 79 01 00 00       	jmp    c0016820 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00166a7:	89 f0                	mov    eax,esi
c00166a9:	31 f6                	xor    esi,esi
c00166ab:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00166b2:	75 02                	jne    c00166b6 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00166b4:	89 f1                	mov    ecx,esi
c00166b6:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00166bd:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00166c4:	c1 e2 08             	shl    edx,0x8
c00166c7:	c1 e7 10             	shl    edi,0x10
c00166ca:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00166d2:	09 fa                	or     edx,edi
c00166d4:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00166dc:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00166e3:	83 c0 10             	add    eax,0x10
c00166e6:	09 fa                	or     edx,edi
c00166e8:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00166ef:	c1 e7 18             	shl    edi,0x18
c00166f2:	09 fa                	or     edx,edi
c00166f4:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00166fb:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00166ff:	c1 e7 10             	shl    edi,0x10
c0016702:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016709:	c1 e2 08             	shl    edx,0x8
c001670c:	09 fa                	or     edx,edi
c001670e:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016715:	09 fa                	or     edx,edi
c0016717:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001671e:	c1 e7 18             	shl    edi,0x18
c0016721:	09 fa                	or     edx,edi
c0016723:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016727:	46                   	inc    esi
c0016728:	83 fe 04             	cmp    esi,0x4
c001672b:	0f 85 7a ff ff ff    	jne    c00166ab <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016731:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016735:	83 f0 01             	xor    eax,0x1
c0016738:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001673c:	75 57                	jne    c0016795 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001673e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016742:	83 f0 01             	xor    eax,0x1
c0016745:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016749:	75 4a                	jne    c0016795 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001674b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001674f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016757:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001675f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016765:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001676b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016771:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016775:	89 f7                	mov    edi,esi
c0016777:	c1 e0 0a             	shl    eax,0xa
c001677a:	c1 ff 1f             	sar    edi,0x1f
c001677d:	57                   	push   edi
c001677e:	56                   	push   esi
c001677f:	52                   	push   edx
c0016780:	50                   	push   eax
c0016781:	e8 8e 06 01 00       	call   c0026e14 <__udivdi3>
c0016786:	83 c4 10             	add    esp,0x10
c0016789:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001678d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016791:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016795:	84 c9                	test   cl,cl
c0016797:	74 53                	je     c00167ec <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016799:	0f b6 c9             	movzx  ecx,cl
c001679c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00167a4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00167a8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00167ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00167b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00167b4:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00167b8:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00167bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00167c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00167c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167cc:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00167d0:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00167d4:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00167d8:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00167dc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00167e0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00167e4:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00167e8:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00167ec:	31 ed                	xor    ebp,ebp
c00167ee:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00167f2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00167f6:	89 f8                	mov    eax,edi
c00167f8:	09 f0                	or     eax,esi
c00167fa:	74 1e                	je     c001681a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00167fc:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016800:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016804:	89 d1                	mov    ecx,edx
c0016806:	09 c1                	or     ecx,eax
c0016808:	74 10                	je     c001681a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001680a:	83 ec 0c             	sub    esp,0xc
c001680d:	57                   	push   edi
c001680e:	56                   	push   esi
c001680f:	52                   	push   edx
c0016810:	50                   	push   eax
c0016811:	53                   	push   ebx
c0016812:	e8 db fc ff ff       	call   c00164f2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016817:	83 c4 20             	add    esp,0x20
c001681a:	45                   	inc    ebp
c001681b:	83 fd 04             	cmp    ebp,0x4
c001681e:	75 ce                	jne    c00167ee <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016820:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016826:	5b                   	pop    ebx
c0016827:	5e                   	pop    esi
c0016828:	5f                   	pop    edi
c0016829:	5d                   	pop    ebp
c001682a:	c3                   	ret    
c001682b:	90                   	nop

c001682c <Serial::Serial(char const*)>:
c001682c:	83 ec 0c             	sub    esp,0xc
c001682f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016833:	83 ec 08             	sub    esp,0x8
c0016836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001683a:	50                   	push   eax
c001683b:	e8 38 d8 ff ff       	call   c0014078 <Device::Device(char const*)>
c0016840:	83 c4 10             	add    esp,0x10
c0016843:	ba 64 b9 02 c0       	mov    edx,0xc002b964
c0016848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001684c:	89 10                	mov    DWORD PTR [eax],edx
c001684e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016852:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001685c:	90                   	nop
c001685d:	83 c4 0c             	add    esp,0xc
c0016860:	c3                   	ret    
c0016861:	90                   	nop

c0016862 <Serial::~Serial()>:
c0016862:	83 ec 0c             	sub    esp,0xc
c0016865:	ba 64 b9 02 c0       	mov    edx,0xc002b964
c001686a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001686e:	89 10                	mov    DWORD PTR [eax],edx
c0016870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016874:	83 ec 0c             	sub    esp,0xc
c0016877:	50                   	push   eax
c0016878:	e8 c5 d4 ff ff       	call   c0013d42 <Device::~Device()>
c001687d:	83 c4 10             	add    esp,0x10
c0016880:	90                   	nop
c0016881:	83 c4 0c             	add    esp,0xc
c0016884:	c3                   	ret    
c0016885:	90                   	nop

c0016886 <Serial::~Serial()>:
c0016886:	83 ec 0c             	sub    esp,0xc
c0016889:	83 ec 0c             	sub    esp,0xc
c001688c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016890:	e8 cd ff ff ff       	call   c0016862 <Serial::~Serial()>
c0016895:	83 c4 10             	add    esp,0x10
c0016898:	83 ec 08             	sub    esp,0x8
c001689b:	68 58 01 00 00       	push   0x158
c00168a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168a4:	e8 ba c0 ff ff       	call   c0012963 <operator delete(void*, unsigned long)>
c00168a9:	83 c4 10             	add    esp,0x10
c00168ac:	83 c4 0c             	add    esp,0xc
c00168af:	c3                   	ret    

c00168b0 <Timer::Timer(char const*)>:
c00168b0:	83 ec 0c             	sub    esp,0xc
c00168b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168b7:	83 ec 08             	sub    esp,0x8
c00168ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168be:	50                   	push   eax
c00168bf:	e8 b4 d7 ff ff       	call   c0014078 <Device::Device(char const*)>
c00168c4:	83 c4 10             	add    esp,0x10
c00168c7:	ba a8 b9 02 c0       	mov    edx,0xc002b9a8
c00168cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168d0:	89 10                	mov    DWORD PTR [eax],edx
c00168d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168d6:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00168e0:	90                   	nop
c00168e1:	83 c4 0c             	add    esp,0xc
c00168e4:	c3                   	ret    
c00168e5:	90                   	nop

c00168e6 <Timer::~Timer()>:
c00168e6:	83 ec 0c             	sub    esp,0xc
c00168e9:	ba a8 b9 02 c0       	mov    edx,0xc002b9a8
c00168ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168f2:	89 10                	mov    DWORD PTR [eax],edx
c00168f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168f8:	83 ec 0c             	sub    esp,0xc
c00168fb:	50                   	push   eax
c00168fc:	e8 41 d4 ff ff       	call   c0013d42 <Device::~Device()>
c0016901:	83 c4 10             	add    esp,0x10
c0016904:	90                   	nop
c0016905:	83 c4 0c             	add    esp,0xc
c0016908:	c3                   	ret    
c0016909:	90                   	nop

c001690a <Timer::~Timer()>:
c001690a:	83 ec 0c             	sub    esp,0xc
c001690d:	83 ec 0c             	sub    esp,0xc
c0016910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016914:	e8 cd ff ff ff       	call   c00168e6 <Timer::~Timer()>
c0016919:	83 c4 10             	add    esp,0x10
c001691c:	83 ec 08             	sub    esp,0x8
c001691f:	68 5c 01 00 00       	push   0x15c
c0016924:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016928:	e8 36 c0 ff ff       	call   c0012963 <operator delete(void*, unsigned long)>
c001692d:	83 c4 10             	add    esp,0x10
c0016930:	83 c4 0c             	add    esp,0xc
c0016933:	c3                   	ret    

c0016934 <Timer::read()>:
c0016934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016938:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001693e:	c3                   	ret    

c001693f <timerHandler(unsigned long long)>:
c001693f:	55                   	push   ebp
c0016940:	57                   	push   edi
c0016941:	56                   	push   esi
c0016942:	53                   	push   ebx
c0016943:	83 ec 0c             	sub    esp,0xc
c0016946:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001694a:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001694e:	01 35 50 ed 02 c0    	add    DWORD PTR ds:0xc002ed50,esi
c0016954:	11 3d 54 ed 02 c0    	adc    DWORD PTR ds:0xc002ed54,edi
c001695a:	80 3d ed e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6ed,0x0
c0016961:	0f 84 42 01 00 00    	je     c0016aa9 <timerHandler(unsigned long long)+0x16a>
c0016967:	fa                   	cli    
c0016968:	ff 05 e8 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe8
c001696e:	83 ec 0c             	sub    esp,0xc
c0016971:	ff 05 e4 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe4
c0016977:	68 f8 fb 02 c0       	push   0xc002fbf8
c001697c:	e8 ed 24 01 00       	call   c0028e6e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016981:	83 c4 10             	add    esp,0x10
c0016984:	84 c0                	test   al,al
c0016986:	0f 85 a2 00 00 00    	jne    c0016a2e <timerHandler(unsigned long long)+0xef>
c001698c:	83 ec 0c             	sub    esp,0xc
c001698f:	68 f8 fb 02 c0       	push   0xc002fbf8
c0016994:	e8 f1 24 01 00       	call   c0028e8a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016999:	83 c4 10             	add    esp,0x10
c001699c:	89 c3                	mov    ebx,eax
c001699e:	83 ec 0c             	sub    esp,0xc
c00169a1:	68 f8 fb 02 c0       	push   0xc002fbf8
c00169a6:	e8 df 24 01 00       	call   c0028e8a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00169ab:	c7 04 24 f8 fb 02 c0 	mov    DWORD PTR [esp],0xc002fbf8
c00169b2:	89 c5                	mov    ebp,eax
c00169b4:	e8 d9 24 01 00       	call   c0028e92 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00169b9:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c00169bc:	83 c4 10             	add    esp,0x10
c00169bf:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c00169c2:	39 15 50 ed 02 c0    	cmp    DWORD PTR ds:0xc002ed50,edx
c00169c8:	a1 54 ed 02 c0       	mov    eax,ds:0xc002ed54
c00169cd:	19 c8                	sbb    eax,ecx
c00169cf:	72 21                	jb     c00169f2 <timerHandler(unsigned long long)+0xb3>
c00169d1:	83 ec 0c             	sub    esp,0xc
c00169d4:	55                   	push   ebp
c00169d5:	e8 23 7a 00 00       	call   c001e3fd <unblockTask(ThreadControlBlock*)>
c00169da:	83 c4 10             	add    esp,0x10
c00169dd:	39 eb                	cmp    ebx,ebp
c00169df:	75 21                	jne    c0016a02 <timerHandler(unsigned long long)+0xc3>
c00169e1:	83 ec 0c             	sub    esp,0xc
c00169e4:	68 f8 fb 02 c0       	push   0xc002fbf8
c00169e9:	e8 9c 24 01 00       	call   c0028e8a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00169ee:	89 c3                	mov    ebx,eax
c00169f0:	eb 0d                	jmp    c00169ff <timerHandler(unsigned long long)+0xc0>
c00169f2:	50                   	push   eax
c00169f3:	50                   	push   eax
c00169f4:	55                   	push   ebp
c00169f5:	68 f8 fb 02 c0       	push   0xc002fbf8
c00169fa:	e8 41 25 01 00       	call   c0028f40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00169ff:	83 c4 10             	add    esp,0x10
c0016a02:	83 ec 0c             	sub    esp,0xc
c0016a05:	68 f8 fb 02 c0       	push   0xc002fbf8
c0016a0a:	e8 5f 24 01 00       	call   c0028e6e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016a0f:	83 c4 10             	add    esp,0x10
c0016a12:	84 c0                	test   al,al
c0016a14:	75 18                	jne    c0016a2e <timerHandler(unsigned long long)+0xef>
c0016a16:	83 ec 0c             	sub    esp,0xc
c0016a19:	68 f8 fb 02 c0       	push   0xc002fbf8
c0016a1e:	e8 67 24 01 00       	call   c0028e8a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016a23:	83 c4 10             	add    esp,0x10
c0016a26:	39 d8                	cmp    eax,ebx
c0016a28:	0f 85 70 ff ff ff    	jne    c001699e <timerHandler(unsigned long long)+0x5f>
c0016a2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a33:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016a37:	74 3d                	je     c0016a76 <timerHandler(unsigned long long)+0x137>
c0016a39:	80 3d ec e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6ec,0x0
c0016a40:	74 34                	je     c0016a76 <timerHandler(unsigned long long)+0x137>
c0016a42:	fa                   	cli    
c0016a43:	ff 05 e8 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe8
c0016a49:	31 d2                	xor    edx,edx
c0016a4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a50:	89 f9                	mov    ecx,edi
c0016a52:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016a55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a5a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016a5d:	39 c6                	cmp    esi,eax
c0016a5f:	19 d1                	sbb    ecx,edx
c0016a61:	72 05                	jb     c0016a68 <timerHandler(unsigned long long)+0x129>
c0016a63:	e8 03 75 00 00       	call   c001df6b <schedule()>
c0016a68:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c0016a6d:	48                   	dec    eax
c0016a6e:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c0016a73:	75 01                	jne    c0016a76 <timerHandler(unsigned long long)+0x137>
c0016a75:	fb                   	sti    
c0016a76:	a1 e4 fb 02 c0       	mov    eax,ds:0xc002fbe4
c0016a7b:	48                   	dec    eax
c0016a7c:	a3 e4 fb 02 c0       	mov    ds:0xc002fbe4,eax
c0016a81:	75 18                	jne    c0016a9b <timerHandler(unsigned long long)+0x15c>
c0016a83:	83 3d e0 fb 02 c0 00 	cmp    DWORD PTR ds:0xc002fbe0,0x0
c0016a8a:	74 0f                	je     c0016a9b <timerHandler(unsigned long long)+0x15c>
c0016a8c:	c7 05 e0 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fbe0,0x0
c0016a96:	e8 d0 74 00 00       	call   c001df6b <schedule()>
c0016a9b:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c0016aa0:	48                   	dec    eax
c0016aa1:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c0016aa6:	75 01                	jne    c0016aa9 <timerHandler(unsigned long long)+0x16a>
c0016aa8:	fb                   	sti    
c0016aa9:	83 c4 0c             	add    esp,0xc
c0016aac:	5b                   	pop    ebx
c0016aad:	5e                   	pop    esi
c0016aae:	5f                   	pop    edi
c0016aaf:	5d                   	pop    ebp
c0016ab0:	c3                   	ret    

c0016ab1 <setupTimer(int)>:
c0016ab1:	57                   	push   edi
c0016ab2:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0016ab7:	56                   	push   esi
c0016ab8:	53                   	push   ebx
c0016ab9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016abd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ac3:	83 ec 0c             	sub    esp,0xc
c0016ac6:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016acc:	e8 a3 d6 ff ff       	call   c0014174 <Device::getName()>
c0016ad1:	83 c4 10             	add    esp,0x10
c0016ad4:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016ad7:	0f 85 8d 00 00 00    	jne    c0016b6a <setupTimer(int)+0xb9>
c0016add:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0016ae2:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016ae9:	74 7f                	je     c0016b6a <setupTimer(int)+0xb9>
c0016aeb:	83 ec 0c             	sub    esp,0xc
c0016aee:	68 5c 01 00 00       	push   0x15c
c0016af3:	e8 eb 8e ff ff       	call   c000f9e3 <malloc>
c0016af8:	89 04 24             	mov    DWORD PTR [esp],eax
c0016afb:	89 c3                	mov    ebx,eax
c0016afd:	e8 e2 fe 00 00       	call   c00269e4 <PIT::PIT()>
c0016b02:	59                   	pop    ecx
c0016b03:	5f                   	pop    edi
c0016b04:	53                   	push   ebx
c0016b05:	ff 35 e8 e6 02 c0    	push   DWORD PTR ds:0xc002e6e8
c0016b0b:	e8 64 d3 ff ff       	call   c0013e74 <Device::addChild(Device*)>
c0016b10:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b12:	6a 00                	push   0x0
c0016b14:	6a 00                	push   0x0
c0016b16:	56                   	push   esi
c0016b17:	53                   	push   ebx
c0016b18:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b1b:	83 c4 14             	add    esp,0x14
c0016b1e:	68 60 01 00 00       	push   0x160
c0016b23:	e8 bb 8e ff ff       	call   c000f9e3 <malloc>
c0016b28:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b2b:	89 c7                	mov    edi,eax
c0016b2d:	e8 62 fd 00 00       	call   c0026894 <APICTimer::APICTimer()>
c0016b32:	6a 00                	push   0x0
c0016b34:	6a 00                	push   0x0
c0016b36:	56                   	push   esi
c0016b37:	57                   	push   edi
c0016b38:	e8 59 fc 00 00       	call   c0026796 <APICTimer::open(int, int, void*)>
c0016b3d:	83 c4 20             	add    esp,0x20
c0016b40:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b42:	6a 00                	push   0x0
c0016b44:	6a 00                	push   0x0
c0016b46:	6a 00                	push   0x0
c0016b48:	53                   	push   ebx
c0016b49:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016b4c:	58                   	pop    eax
c0016b4d:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0016b52:	5a                   	pop    edx
c0016b53:	57                   	push   edi
c0016b54:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016b5a:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016b60:	e8 0f d3 ff ff       	call   c0013e74 <Device::addChild(Device*)>
c0016b65:	83 c4 10             	add    esp,0x10
c0016b68:	eb 33                	jmp    c0016b9d <setupTimer(int)+0xec>
c0016b6a:	83 ec 0c             	sub    esp,0xc
c0016b6d:	68 5c 01 00 00       	push   0x15c
c0016b72:	e8 6c 8e ff ff       	call   c000f9e3 <malloc>
c0016b77:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b7a:	89 c3                	mov    ebx,eax
c0016b7c:	e8 63 fe 00 00       	call   c00269e4 <PIT::PIT()>
c0016b81:	58                   	pop    eax
c0016b82:	5a                   	pop    edx
c0016b83:	53                   	push   ebx
c0016b84:	ff 35 e8 e6 02 c0    	push   DWORD PTR ds:0xc002e6e8
c0016b8a:	e8 e5 d2 ff ff       	call   c0013e74 <Device::addChild(Device*)>
c0016b8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b91:	6a 00                	push   0x0
c0016b93:	6a 00                	push   0x0
c0016b95:	56                   	push   esi
c0016b96:	53                   	push   ebx
c0016b97:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b9a:	83 c4 20             	add    esp,0x20
c0016b9d:	89 d8                	mov    eax,ebx
c0016b9f:	5b                   	pop    ebx
c0016ba0:	5e                   	pop    esi
c0016ba1:	5f                   	pop    edi
c0016ba2:	c3                   	ret    
c0016ba3:	90                   	nop

c0016ba4 <VCache::VCache(PhysicalDisk*)>:
c0016ba4:	53                   	push   ebx
c0016ba5:	83 ec 18             	sub    esp,0x18
c0016ba8:	ba f8 ba 02 c0       	mov    edx,0xc002baf8
c0016bad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bb1:	89 10                	mov    DWORD PTR [eax],edx
c0016bb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bb7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016bbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bc2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016bc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bcd:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016bd4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016bdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bdf:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016be6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016bed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bf1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016bf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bfc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016c00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c04:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016c0b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016c12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c16:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016c1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c1e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016c22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c26:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c2e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016c35:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016c3d:	83 ec 0c             	sub    esp,0xc
c0016c40:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016c44:	e8 9a 8d ff ff       	call   c000f9e3 <malloc>
c0016c49:	83 c4 10             	add    esp,0x10
c0016c4c:	89 c3                	mov    ebx,eax
c0016c4e:	83 ec 0c             	sub    esp,0xc
c0016c51:	53                   	push   ebx
c0016c52:	e8 dd 70 00 00       	call   c001dd34 <Mutex::Mutex()>
c0016c57:	83 c4 10             	add    esp,0x10
c0016c5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c5e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016c61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c65:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016c69:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016c6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c70:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016c77:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c7b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016c81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c85:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016c88:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c8c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016c92:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016c98:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016c9c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016c9f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016ca2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ca6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016caa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016cae:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016cb4:	05 00 01 00 00       	add    eax,0x100
c0016cb9:	c1 e0 04             	shl    eax,0x4
c0016cbc:	83 ec 0c             	sub    esp,0xc
c0016cbf:	50                   	push   eax
c0016cc0:	e8 1e 8d ff ff       	call   c000f9e3 <malloc>
c0016cc5:	83 c4 10             	add    esp,0x10
c0016cc8:	89 c2                	mov    edx,eax
c0016cca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cce:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016cd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cd5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016cdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ce0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016ce4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ce8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016cee:	c1 e0 07             	shl    eax,0x7
c0016cf1:	83 ec 0c             	sub    esp,0xc
c0016cf4:	50                   	push   eax
c0016cf5:	e8 e9 8c ff ff       	call   c000f9e3 <malloc>
c0016cfa:	83 c4 10             	add    esp,0x10
c0016cfd:	89 c2                	mov    edx,eax
c0016cff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d03:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016d06:	90                   	nop
c0016d07:	83 c4 18             	add    esp,0x18
c0016d0a:	5b                   	pop    ebx
c0016d0b:	c3                   	ret    

c0016d0c <VCache::invalidateReadBuffer()>:
c0016d0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d10:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016d16:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016d1a:	c3                   	ret    
c0016d1b:	90                   	nop

c0016d1c <VCache::writeWriteBuffer()>:
c0016d1c:	53                   	push   ebx
c0016d1d:	83 ec 0c             	sub    esp,0xc
c0016d20:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016d24:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016d27:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016d2a:	68 d0 b9 02 c0       	push   0xc002b9d0
c0016d2f:	e8 07 bd ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0016d34:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d37:	5a                   	pop    edx
c0016d38:	8b 10                	mov    edx,DWORD PTR [eax]
c0016d3a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016d3d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016d40:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016d43:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016d46:	50                   	push   eax
c0016d47:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016d4a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016d51:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016d58:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016d5c:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016d63:	83 c4 28             	add    esp,0x28
c0016d66:	5b                   	pop    ebx
c0016d67:	c3                   	ret    

c0016d68 <VCache::~VCache()>:
c0016d68:	83 ec 0c             	sub    esp,0xc
c0016d6b:	ba f8 ba 02 c0       	mov    edx,0xc002baf8
c0016d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d74:	89 10                	mov    DWORD PTR [eax],edx
c0016d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d7a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016d7d:	84 c0                	test   al,al
c0016d7f:	74 0f                	je     c0016d90 <VCache::~VCache()+0x28>
c0016d81:	83 ec 0c             	sub    esp,0xc
c0016d84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d88:	e8 8f ff ff ff       	call   c0016d1c <VCache::writeWriteBuffer()>
c0016d8d:	83 c4 10             	add    esp,0x10
c0016d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d94:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016d97:	83 ec 0c             	sub    esp,0xc
c0016d9a:	50                   	push   eax
c0016d9b:	e8 53 8c ff ff       	call   c000f9f3 <free>
c0016da0:	83 c4 10             	add    esp,0x10
c0016da3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016da7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016daa:	83 ec 0c             	sub    esp,0xc
c0016dad:	50                   	push   eax
c0016dae:	e8 40 8c ff ff       	call   c000f9f3 <free>
c0016db3:	83 c4 10             	add    esp,0x10
c0016db6:	90                   	nop
c0016db7:	83 c4 0c             	add    esp,0xc
c0016dba:	c3                   	ret    
c0016dbb:	90                   	nop

c0016dbc <VCache::~VCache()>:
c0016dbc:	83 ec 0c             	sub    esp,0xc
c0016dbf:	83 ec 0c             	sub    esp,0xc
c0016dc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dc6:	e8 9d ff ff ff       	call   c0016d68 <VCache::~VCache()>
c0016dcb:	83 c4 10             	add    esp,0x10
c0016dce:	83 ec 08             	sub    esp,0x8
c0016dd1:	6a 44                	push   0x44
c0016dd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dd7:	e8 87 bb ff ff       	call   c0012963 <operator delete(void*, unsigned long)>
c0016ddc:	83 c4 10             	add    esp,0x10
c0016ddf:	83 c4 0c             	add    esp,0xc
c0016de2:	c3                   	ret    
c0016de3:	90                   	nop

c0016de4 <VCache::write(unsigned long long, int, void*)>:
c0016de4:	55                   	push   ebp
c0016de5:	57                   	push   edi
c0016de6:	56                   	push   esi
c0016de7:	53                   	push   ebx
c0016de8:	83 ec 18             	sub    esp,0x18
c0016deb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016def:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016df3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016df7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0016dfb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016dfe:	e8 77 74 00 00       	call   c001e27a <Semaphore::acquire()>
c0016e03:	c7 04 24 f4 b9 02 c0 	mov    DWORD PTR [esp],0xc002b9f4
c0016e0a:	e8 2c bc ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0016e0f:	83 c4 10             	add    esp,0x10
c0016e12:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016e16:	74 0c                	je     c0016e24 <VCache::write(unsigned long long, int, void*)+0x40>
c0016e18:	83 ec 0c             	sub    esp,0xc
c0016e1b:	53                   	push   ebx
c0016e1c:	e8 eb fe ff ff       	call   c0016d0c <VCache::invalidateReadBuffer()>
c0016e21:	83 c4 10             	add    esp,0x10
c0016e24:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016e28:	74 66                	je     c0016e90 <VCache::write(unsigned long long, int, void*)+0xac>
c0016e2a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016e2d:	99                   	cdq    
c0016e2e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016e31:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016e34:	31 f0                	xor    eax,esi
c0016e36:	89 d1                	mov    ecx,edx
c0016e38:	89 ca                	mov    edx,ecx
c0016e3a:	31 fa                	xor    edx,edi
c0016e3c:	09 d0                	or     eax,edx
c0016e3e:	75 44                	jne    c0016e84 <VCache::write(unsigned long long, int, void*)+0xa0>
c0016e40:	83 fd 01             	cmp    ebp,0x1
c0016e43:	75 3f                	jne    c0016e84 <VCache::write(unsigned long long, int, void*)+0xa0>
c0016e45:	83 ec 0c             	sub    esp,0xc
c0016e48:	68 1b ba 02 c0       	push   0xc002ba1b
c0016e4d:	e8 e9 bb ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0016e52:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e55:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016e58:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016e5e:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016e62:	0f af f9             	imul   edi,ecx
c0016e65:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016e68:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e6a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016e6d:	83 c4 10             	add    esp,0x10
c0016e70:	40                   	inc    eax
c0016e71:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016e74:	83 c0 80             	add    eax,0xffffff80
c0016e77:	75 75                	jne    c0016eee <VCache::write(unsigned long long, int, void*)+0x10a>
c0016e79:	83 ec 0c             	sub    esp,0xc
c0016e7c:	53                   	push   ebx
c0016e7d:	e8 9a fe ff ff       	call   c0016d1c <VCache::writeWriteBuffer()>
c0016e82:	eb 41                	jmp    c0016ec5 <VCache::write(unsigned long long, int, void*)+0xe1>
c0016e84:	83 ec 0c             	sub    esp,0xc
c0016e87:	53                   	push   ebx
c0016e88:	e8 8f fe ff ff       	call   c0016d1c <VCache::writeWriteBuffer()>
c0016e8d:	83 c4 10             	add    esp,0x10
c0016e90:	83 fd 7f             	cmp    ebp,0x7f
c0016e93:	7f 35                	jg     c0016eca <VCache::write(unsigned long long, int, void*)+0xe6>
c0016e95:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016e98:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016e9b:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016e9e:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016ea2:	56                   	push   esi
c0016ea3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016ea7:	6a 01                	push   0x1
c0016ea9:	68 31 ba 02 c0       	push   0xc002ba31
c0016eae:	e8 88 bb ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0016eb3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016eb6:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016eb9:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016ebf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016ec3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ec5:	83 c4 10             	add    esp,0x10
c0016ec8:	eb 24                	jmp    c0016eee <VCache::write(unsigned long long, int, void*)+0x10a>
c0016eca:	52                   	push   edx
c0016ecb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016ecf:	55                   	push   ebp
c0016ed0:	68 52 ba 02 c0       	push   0xc002ba52
c0016ed5:	e8 61 bb ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0016eda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016edd:	59                   	pop    ecx
c0016ede:	8b 10                	mov    edx,DWORD PTR [eax]
c0016ee0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016ee4:	55                   	push   ebp
c0016ee5:	57                   	push   edi
c0016ee6:	56                   	push   esi
c0016ee7:	50                   	push   eax
c0016ee8:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016eeb:	83 c4 20             	add    esp,0x20
c0016eee:	83 ec 0c             	sub    esp,0xc
c0016ef1:	68 6f ba 02 c0       	push   0xc002ba6f
c0016ef6:	e8 40 bb ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0016efb:	58                   	pop    eax
c0016efc:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016eff:	e8 e2 79 00 00       	call   c001e8e6 <Semaphore::release()>
c0016f04:	83 c4 1c             	add    esp,0x1c
c0016f07:	31 c0                	xor    eax,eax
c0016f09:	5b                   	pop    ebx
c0016f0a:	5e                   	pop    esi
c0016f0b:	5f                   	pop    edi
c0016f0c:	5d                   	pop    ebp
c0016f0d:	c3                   	ret    

c0016f0e <VCache::read(unsigned long long, int, void*)>:
c0016f0e:	55                   	push   ebp
c0016f0f:	57                   	push   edi
c0016f10:	56                   	push   esi
c0016f11:	53                   	push   ebx
c0016f12:	83 ec 28             	sub    esp,0x28
c0016f15:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016f19:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0016f1d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016f21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f25:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016f29:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016f2d:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0016f31:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016f34:	e8 41 73 00 00       	call   c001e27a <Semaphore::acquire()>
c0016f39:	c7 04 24 8f ba 02 c0 	mov    DWORD PTR [esp],0xc002ba8f
c0016f40:	e8 f6 ba ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0016f45:	83 c4 10             	add    esp,0x10
c0016f48:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016f4c:	74 0c                	je     c0016f5a <VCache::read(unsigned long long, int, void*)+0x4c>
c0016f4e:	83 ec 0c             	sub    esp,0xc
c0016f51:	53                   	push   ebx
c0016f52:	e8 c5 fd ff ff       	call   c0016d1c <VCache::writeWriteBuffer()>
c0016f57:	83 c4 10             	add    esp,0x10
c0016f5a:	83 fe 01             	cmp    esi,0x1
c0016f5d:	75 79                	jne    c0016fd8 <VCache::read(unsigned long long, int, void*)+0xca>
c0016f5f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f62:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016f69:	75 6d                	jne    c0016fd8 <VCache::read(unsigned long long, int, void*)+0xca>
c0016f6b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016f6e:	89 d1                	mov    ecx,edx
c0016f70:	f7 d9                	neg    ecx
c0016f72:	89 cf                	mov    edi,ecx
c0016f74:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016f78:	c1 ff 1f             	sar    edi,0x1f
c0016f7b:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0016f7e:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016f82:	89 ce                	mov    esi,ecx
c0016f84:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f88:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0016f8c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016f90:	89 cf                	mov    edi,ecx
c0016f92:	74 0a                	je     c0016f9e <VCache::read(unsigned long long, int, void*)+0x90>
c0016f94:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016f97:	75 05                	jne    c0016f9e <VCache::read(unsigned long long, int, void*)+0x90>
c0016f99:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0016f9c:	74 1c                	je     c0016fba <VCache::read(unsigned long long, int, void*)+0xac>
c0016f9e:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016fa2:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0016fa5:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0016fa8:	83 ec 0c             	sub    esp,0xc
c0016fab:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016fad:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016fb0:	52                   	push   edx
c0016fb1:	57                   	push   edi
c0016fb2:	56                   	push   esi
c0016fb3:	50                   	push   eax
c0016fb4:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016fb7:	83 c4 20             	add    esp,0x20
c0016fba:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016fbd:	89 ef                	mov    edi,ebp
c0016fbf:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016fc5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016fc8:	8d 70 ff             	lea    esi,[eax-0x1]
c0016fcb:	23 34 24             	and    esi,DWORD PTR [esp]
c0016fce:	0f af f1             	imul   esi,ecx
c0016fd1:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016fd4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016fd6:	eb 30                	jmp    c0017008 <VCache::read(unsigned long long, int, void*)+0xfa>
c0016fd8:	83 ec 0c             	sub    esp,0xc
c0016fdb:	53                   	push   ebx
c0016fdc:	e8 2b fd ff ff       	call   c0016d0c <VCache::invalidateReadBuffer()>
c0016fe1:	83 c4 0c             	add    esp,0xc
c0016fe4:	55                   	push   ebp
c0016fe5:	56                   	push   esi
c0016fe6:	68 b5 ba 02 c0       	push   0xc002bab5
c0016feb:	e8 4b ba ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0016ff0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ff3:	8b 10                	mov    edx,DWORD PTR [eax]
c0016ff5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016ff8:	56                   	push   esi
c0016ff9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ffd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017001:	50                   	push   eax
c0017002:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0017005:	83 c4 20             	add    esp,0x20
c0017008:	83 ec 0c             	sub    esp,0xc
c001700b:	68 d1 ba 02 c0       	push   0xc002bad1
c0017010:	e8 26 ba ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0017015:	58                   	pop    eax
c0017016:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017019:	e8 c8 78 00 00       	call   c001e8e6 <Semaphore::release()>
c001701e:	83 c4 2c             	add    esp,0x2c
c0017021:	31 c0                	xor    eax,eax
c0017023:	5b                   	pop    ebx
c0017024:	5e                   	pop    esi
c0017025:	5f                   	pop    edi
c0017026:	5d                   	pop    ebp
c0017027:	c3                   	ret    

c0017028 <Video::putrect(int, int, int, int, unsigned int)>:
c0017028:	55                   	push   ebp
c0017029:	57                   	push   edi
c001702a:	56                   	push   esi
c001702b:	53                   	push   ebx
c001702c:	83 ec 1c             	sub    esp,0x1c
c001702f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017033:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017037:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001703b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001703f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017043:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017047:	01 df                	add    edi,ebx
c0017049:	39 fb                	cmp    ebx,edi
c001704b:	7d 1f                	jge    c001706c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001704d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017051:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0017055:	7d 12                	jge    c0017069 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017057:	8b 16                	mov    edx,DWORD PTR [esi]
c0017059:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001705d:	53                   	push   ebx
c001705e:	55                   	push   ebp
c001705f:	45                   	inc    ebp
c0017060:	56                   	push   esi
c0017061:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017064:	83 c4 10             	add    esp,0x10
c0017067:	eb e8                	jmp    c0017051 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017069:	43                   	inc    ebx
c001706a:	eb dd                	jmp    c0017049 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001706c:	83 c4 1c             	add    esp,0x1c
c001706f:	5b                   	pop    ebx
c0017070:	5e                   	pop    esi
c0017071:	5f                   	pop    edi
c0017072:	5d                   	pop    ebp
c0017073:	c3                   	ret    

c0017074 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0017074:	55                   	push   ebp
c0017075:	57                   	push   edi
c0017076:	31 ff                	xor    edi,edi
c0017078:	56                   	push   esi
c0017079:	53                   	push   ebx
c001707a:	83 ec 1c             	sub    esp,0x1c
c001707d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017081:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017085:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001708c:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0017091:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017095:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001709d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00170a0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00170a4:	01 f9                	add    ecx,edi
c00170a6:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00170aa:	7d 2f                	jge    c00170db <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00170ac:	31 f6                	xor    esi,esi
c00170ae:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00170b2:	01 f2                	add    edx,esi
c00170b4:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00170b8:	7d 1a                	jge    c00170d4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00170ba:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00170bd:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00170c0:	46                   	inc    esi
c00170c1:	51                   	push   ecx
c00170c2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00170c6:	52                   	push   edx
c00170c7:	55                   	push   ebp
c00170c8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00170cb:	83 c4 10             	add    esp,0x10
c00170ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00170d2:	eb da                	jmp    c00170ae <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00170d4:	47                   	inc    edi
c00170d5:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00170d9:	eb c5                	jmp    c00170a0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00170db:	83 c4 1c             	add    esp,0x1c
c00170de:	5b                   	pop    ebx
c00170df:	5e                   	pop    esi
c00170e0:	5f                   	pop    edi
c00170e1:	5d                   	pop    ebp
c00170e2:	c3                   	ret    
c00170e3:	90                   	nop

c00170e4 <Video::blit(unsigned int*, int, int, int, int)>:
c00170e4:	55                   	push   ebp
c00170e5:	57                   	push   edi
c00170e6:	56                   	push   esi
c00170e7:	53                   	push   ebx
c00170e8:	83 ec 1c             	sub    esp,0x1c
c00170eb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00170ef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00170f3:	85 c0                	test   eax,eax
c00170f5:	79 02                	jns    c00170f9 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00170f7:	31 c0                	xor    eax,eax
c00170f9:	c1 e0 02             	shl    eax,0x2
c00170fc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017100:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017104:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017108:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001710c:	39 d8                	cmp    eax,ebx
c001710e:	7e 49                	jle    c0017159 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017110:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017116:	7c 41                	jl     c0017159 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017118:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001711c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017120:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017124:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017128:	39 f9                	cmp    ecx,edi
c001712a:	7e 22                	jle    c001714e <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001712c:	83 c5 04             	add    ebp,0x4
c001712f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017135:	7c 14                	jl     c001714b <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017137:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017139:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001713c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017140:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017144:	56                   	push   esi
c0017145:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017148:	83 c4 10             	add    esp,0x10
c001714b:	47                   	inc    edi
c001714c:	eb d2                	jmp    c0017120 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001714e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017152:	43                   	inc    ebx
c0017153:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017157:	eb ab                	jmp    c0017104 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017159:	83 c4 1c             	add    esp,0x1c
c001715c:	5b                   	pop    ebx
c001715d:	5e                   	pop    esi
c001715e:	5f                   	pop    edi
c001715f:	5d                   	pop    ebp
c0017160:	c3                   	ret    
c0017161:	90                   	nop

c0017162 <Video::clearScreen(unsigned int)>:
c0017162:	57                   	push   edi
c0017163:	56                   	push   esi
c0017164:	53                   	push   ebx
c0017165:	31 db                	xor    ebx,ebx
c0017167:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001716b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017171:	7e 1f                	jle    c0017192 <Video::clearScreen(unsigned int)+0x30>
c0017173:	31 ff                	xor    edi,edi
c0017175:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001717b:	7e 12                	jle    c001718f <Video::clearScreen(unsigned int)+0x2d>
c001717d:	8b 06                	mov    eax,DWORD PTR [esi]
c001717f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017183:	53                   	push   ebx
c0017184:	57                   	push   edi
c0017185:	47                   	inc    edi
c0017186:	56                   	push   esi
c0017187:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001718a:	83 c4 10             	add    esp,0x10
c001718d:	eb e6                	jmp    c0017175 <Video::clearScreen(unsigned int)+0x13>
c001718f:	43                   	inc    ebx
c0017190:	eb d9                	jmp    c001716b <Video::clearScreen(unsigned int)+0x9>
c0017192:	5b                   	pop    ebx
c0017193:	5e                   	pop    esi
c0017194:	5f                   	pop    edi
c0017195:	c3                   	ret    

c0017196 <Video::putpixel(int, int, unsigned int)>:
c0017196:	c7 44 24 04 00 bb 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bb00
c001719e:	e9 36 32 00 00       	jmp    c001a3d9 <Krnl::panic(char const*)>
c00171a3:	90                   	nop

c00171a4 <Video::Video(char const*)>:
c00171a4:	83 ec 0c             	sub    esp,0xc
c00171a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171ab:	83 ec 08             	sub    esp,0x8
c00171ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171b2:	50                   	push   eax
c00171b3:	e8 c0 ce ff ff       	call   c0014078 <Device::Device(char const*)>
c00171b8:	83 c4 10             	add    esp,0x10
c00171bb:	ba 70 bb 02 c0       	mov    edx,0xc002bb70
c00171c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171c4:	89 10                	mov    DWORD PTR [eax],edx
c00171c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171ca:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00171d4:	90                   	nop
c00171d5:	83 c4 0c             	add    esp,0xc
c00171d8:	c3                   	ret    
c00171d9:	90                   	nop

c00171da <Video::~Video()>:
c00171da:	83 ec 0c             	sub    esp,0xc
c00171dd:	ba 70 bb 02 c0       	mov    edx,0xc002bb70
c00171e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171e6:	89 10                	mov    DWORD PTR [eax],edx
c00171e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171ec:	83 ec 0c             	sub    esp,0xc
c00171ef:	50                   	push   eax
c00171f0:	e8 4d cb ff ff       	call   c0013d42 <Device::~Device()>
c00171f5:	83 c4 10             	add    esp,0x10
c00171f8:	90                   	nop
c00171f9:	83 c4 0c             	add    esp,0xc
c00171fc:	c3                   	ret    
c00171fd:	90                   	nop

c00171fe <Video::~Video()>:
c00171fe:	83 ec 0c             	sub    esp,0xc
c0017201:	83 ec 0c             	sub    esp,0xc
c0017204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017208:	e8 cd ff ff ff       	call   c00171da <Video::~Video()>
c001720d:	83 c4 10             	add    esp,0x10
c0017210:	83 ec 08             	sub    esp,0x8
c0017213:	68 64 01 00 00       	push   0x164
c0017218:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001721c:	e8 42 b7 ff ff       	call   c0012963 <operator delete(void*, unsigned long)>
c0017221:	83 c4 10             	add    esp,0x10
c0017224:	83 c4 0c             	add    esp,0xc
c0017227:	c3                   	ret    

c0017228 <Video::isMonochrome()>:
c0017228:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001722c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0017232:	c3                   	ret    
c0017233:	90                   	nop

c0017234 <Video::getWidth()>:
c0017234:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017238:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001723e:	c3                   	ret    
c001723f:	90                   	nop

c0017240 <Video::getHeight()>:
c0017240:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017244:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001724a:	c3                   	ret    
c001724b:	90                   	nop

c001724c <Video::drawCursor(int, int, unsigned char*, int)>:
c001724c:	55                   	push   ebp
c001724d:	57                   	push   edi
c001724e:	56                   	push   esi
c001724f:	53                   	push   ebx
c0017250:	83 ec 2c             	sub    esp,0x2c
c0017253:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017257:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001725b:	83 f8 01             	cmp    eax,0x1
c001725e:	19 c9                	sbb    ecx,ecx
c0017260:	31 db                	xor    ebx,ebx
c0017262:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017266:	89 cd                	mov    ebp,ecx
c0017268:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017270:	f7 d5                	not    ebp
c0017272:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017278:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001727c:	01 d8                	add    eax,ebx
c001727e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017282:	56                   	push   esi
c0017283:	e8 b8 ff ff ff       	call   c0017240 <Video::getHeight()>
c0017288:	59                   	pop    ecx
c0017289:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001728d:	7e 70                	jle    c00172ff <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001728f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017293:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017297:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001729a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001729e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00172a2:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00172a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00172ad:	89 f8                	mov    eax,edi
c00172af:	83 c0 20             	add    eax,0x20
c00172b2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00172b6:	56                   	push   esi
c00172b7:	e8 78 ff ff ff       	call   c0017234 <Video::getWidth()>
c00172bc:	5a                   	pop    edx
c00172bd:	39 c7                	cmp    edi,eax
c00172bf:	7d 34                	jge    c00172f5 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00172c1:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00172c6:	74 05                	je     c00172cd <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00172c8:	8b 06                	mov    eax,DWORD PTR [esi]
c00172ca:	55                   	push   ebp
c00172cb:	eb 0d                	jmp    c00172da <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00172cd:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00172d2:	74 12                	je     c00172e6 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00172d4:	8b 06                	mov    eax,DWORD PTR [esi]
c00172d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00172da:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00172de:	57                   	push   edi
c00172df:	56                   	push   esi
c00172e0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00172e3:	83 c4 10             	add    esp,0x10
c00172e6:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00172ea:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00172ee:	47                   	inc    edi
c00172ef:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00172f3:	75 c1                	jne    c00172b6 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00172f5:	43                   	inc    ebx
c00172f6:	83 fb 20             	cmp    ebx,0x20
c00172f9:	0f 85 79 ff ff ff    	jne    c0017278 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00172ff:	83 c4 2c             	add    esp,0x2c
c0017302:	5b                   	pop    ebx
c0017303:	5e                   	pop    esi
c0017304:	5f                   	pop    edi
c0017305:	5d                   	pop    ebp
c0017306:	c3                   	ret    
c0017307:	90                   	nop

c0017308 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017308:	55                   	push   ebp
c0017309:	57                   	push   edi
c001730a:	56                   	push   esi
c001730b:	53                   	push   ebx
c001730c:	83 ec 28             	sub    esp,0x28
c001730f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017313:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017317:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c001731b:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001731f:	c1 e6 08             	shl    esi,0x8
c0017322:	01 c6                	add    esi,eax
c0017324:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017328:	c1 e0 08             	shl    eax,0x8
c001732b:	01 d0                	add    eax,edx
c001732d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017331:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017335:	0f af c6             	imul   eax,esi
c0017338:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001733f:	50                   	push   eax
c0017340:	e8 9e 86 ff ff       	call   c000f9e3 <malloc>
c0017345:	83 c4 10             	add    esp,0x10
c0017348:	89 c7                	mov    edi,eax
c001734a:	85 c0                	test   eax,eax
c001734c:	75 10                	jne    c001735e <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c001734e:	83 ec 0c             	sub    esp,0xc
c0017351:	68 21 bb 02 c0       	push   0xc002bb21
c0017356:	e8 7e 30 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c001735b:	83 c4 10             	add    esp,0x10
c001735e:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0017361:	ba 12 00 00 00       	mov    edx,0x12
c0017366:	84 c0                	test   al,al
c0017368:	74 11                	je     c001737b <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c001736a:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c001736e:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0017372:	c1 fa 03             	sar    edx,0x3
c0017375:	0f af d1             	imul   edx,ecx
c0017378:	83 c2 12             	add    edx,0x12
c001737b:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001737f:	74 04                	je     c0017385 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0017381:	85 f6                	test   esi,esi
c0017383:	75 12                	jne    c0017397 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0017385:	83 ec 0c             	sub    esp,0xc
c0017388:	68 31 bb 02 c0       	push   0xc002bb31
c001738d:	e8 a9 b6 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0017392:	e9 b8 00 00 00       	jmp    c001744f <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0017397:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001739b:	80 f9 02             	cmp    cl,0x2
c001739e:	0f 85 96 00 00 00    	jne    c001743a <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c00173a4:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00173a9:	75 0e                	jne    c00173b9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c00173ab:	84 c0                	test   al,al
c00173ad:	75 0a                	jne    c00173b9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c00173af:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00173b2:	83 e8 18             	sub    eax,0x18
c00173b5:	a8 f7                	test   al,0xf7
c00173b7:	74 0a                	je     c00173c3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c00173b9:	83 ec 0c             	sub    esp,0xc
c00173bc:	68 46 bb 02 c0       	push   0xc002bb46
c00173c1:	eb 7f                	jmp    c0017442 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c00173c3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00173cb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00173d3:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00173d7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00173df:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00173e3:	75 0c                	jne    c00173f1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00173e5:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c00173ea:	c1 e0 18             	shl    eax,0x18
c00173ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00173f1:	45                   	inc    ebp
c00173f2:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c00173f7:	c1 e1 10             	shl    ecx,0x10
c00173fa:	89 c8                	mov    eax,ecx
c00173fc:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0017401:	c1 e1 08             	shl    ecx,0x8
c0017404:	09 c1                	or     ecx,eax
c0017406:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c001740a:	09 c1                	or     ecx,eax
c001740c:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0017410:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0017414:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017418:	c1 f8 03             	sar    eax,0x3
c001741b:	01 c2                	add    edx,eax
c001741d:	89 e8                	mov    eax,ebp
c001741f:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017423:	39 c6                	cmp    esi,eax
c0017425:	7f b0                	jg     c00173d7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0017427:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001742b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001742f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0017432:	7e 22                	jle    c0017456 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0017434:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0017438:	eb 99                	jmp    c00173d3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001743a:	50                   	push   eax
c001743b:	50                   	push   eax
c001743c:	51                   	push   ecx
c001743d:	68 54 bb 02 c0       	push   0xc002bb54
c0017442:	e8 f4 b5 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0017447:	89 3c 24             	mov    DWORD PTR [esp],edi
c001744a:	e8 a4 85 ff ff       	call   c000f9f3 <free>
c001744f:	83 c4 10             	add    esp,0x10
c0017452:	31 ff                	xor    edi,edi
c0017454:	eb 0f                	jmp    c0017465 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0017456:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001745a:	89 30                	mov    DWORD PTR [eax],esi
c001745c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017460:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0017463:	89 30                	mov    DWORD PTR [eax],esi
c0017465:	83 c4 1c             	add    esp,0x1c
c0017468:	89 f8                	mov    eax,edi
c001746a:	5b                   	pop    ebx
c001746b:	5e                   	pop    esi
c001746c:	5f                   	pop    edi
c001746d:	5d                   	pop    ebp
c001746e:	c3                   	ret    
c001746f:	90                   	nop

c0017470 <Video::putTGA(int, int, unsigned char*, int)>:
c0017470:	55                   	push   ebp
c0017471:	57                   	push   edi
c0017472:	56                   	push   esi
c0017473:	53                   	push   ebx
c0017474:	83 ec 28             	sub    esp,0x28
c0017477:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001747b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001747f:	50                   	push   eax
c0017480:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017484:	50                   	push   eax
c0017485:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017489:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001748d:	56                   	push   esi
c001748e:	e8 75 fe ff ff       	call   c0017308 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017493:	83 c4 20             	add    esp,0x20
c0017496:	85 c0                	test   eax,eax
c0017498:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001749c:	74 35                	je     c00174d3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001749e:	89 c7                	mov    edi,eax
c00174a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00174a4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00174a8:	39 d8                	cmp    eax,ebx
c00174aa:	7e 27                	jle    c00174d3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00174ac:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00174b0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00174b4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00174b8:	39 e8                	cmp    eax,ebp
c00174ba:	7e 14                	jle    c00174d0 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00174bc:	8b 06                	mov    eax,DWORD PTR [esi]
c00174be:	83 c7 04             	add    edi,0x4
c00174c1:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00174c4:	53                   	push   ebx
c00174c5:	55                   	push   ebp
c00174c6:	45                   	inc    ebp
c00174c7:	56                   	push   esi
c00174c8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174cb:	83 c4 10             	add    esp,0x10
c00174ce:	eb e0                	jmp    c00174b0 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00174d0:	43                   	inc    ebx
c00174d1:	eb cd                	jmp    c00174a0 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00174d3:	83 c4 1c             	add    esp,0x1c
c00174d6:	5b                   	pop    ebx
c00174d7:	5e                   	pop    esi
c00174d8:	5f                   	pop    edi
c00174d9:	5d                   	pop    ebp
c00174da:	c3                   	ret    
c00174db:	90                   	nop

c00174dc <ACPI::close(int, int, void*)>:
c00174dc:	83 ec 1c             	sub    esp,0x1c
c00174df:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00174e7:	74 0a                	je     c00174f3 <ACPI::close(int, int, void*)+0x17>
c00174e9:	b8 00 00 00 00       	mov    eax,0x0
c00174ee:	e9 8a 00 00 00       	jmp    c001757d <ACPI::close(int, int, void*)+0xa1>
c00174f3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00174f8:	75 27                	jne    c0017521 <ACPI::close(int, int, void*)+0x45>
c00174fa:	a1 68 ed 02 c0       	mov    eax,ds:0xc002ed68
c00174ff:	85 c0                	test   eax,eax
c0017501:	74 07                	je     c001750a <ACPI::close(int, int, void*)+0x2e>
c0017503:	a1 68 ed 02 c0       	mov    eax,ds:0xc002ed68
c0017508:	ff d0                	call   eax
c001750a:	83 ec 0c             	sub    esp,0xc
c001750d:	68 b0 bb 02 c0       	push   0xc002bbb0
c0017512:	e8 c2 2e 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c0017517:	83 c4 10             	add    esp,0x10
c001751a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001751f:	eb 5c                	jmp    c001757d <ACPI::close(int, int, void*)+0xa1>
c0017521:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017526:	75 50                	jne    c0017578 <ACPI::close(int, int, void*)+0x9c>
c0017528:	a1 64 ed 02 c0       	mov    eax,ds:0xc002ed64
c001752d:	85 c0                	test   eax,eax
c001752f:	74 07                	je     c0017538 <ACPI::close(int, int, void*)+0x5c>
c0017531:	a1 64 ed 02 c0       	mov    eax,ds:0xc002ed64
c0017536:	ff d0                	call   eax
c0017538:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001753d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017542:	83 e0 02             	and    eax,0x2
c0017545:	74 1c                	je     c0017563 <ACPI::close(int, int, void*)+0x87>
c0017547:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001754e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017552:	89 c2                	mov    edx,eax
c0017554:	ec                   	in     al,dx
c0017555:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017559:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001755d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017561:	eb da                	jmp    c001753d <ACPI::close(int, int, void*)+0x61>
c0017563:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001756a:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001756f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017573:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017577:	ee                   	out    dx,al
c0017578:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001757d:	83 c4 1c             	add    esp,0x1c
c0017580:	c3                   	ret    

c0017581 <findRSDP()>:
c0017581:	83 ec 1c             	sub    esp,0x1c
c0017584:	83 ec 0c             	sub    esp,0xc
c0017587:	68 8b bc 02 c0       	push   0xc002bc8b
c001758c:	e8 ac 84 ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c0017591:	83 c4 10             	add    esp,0x10
c0017594:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0017599:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001759f:	83 e0 04             	and    eax,0x4
c00175a2:	84 c0                	test   al,al
c00175a4:	75 0a                	jne    c00175b0 <findRSDP()+0x2f>
c00175a6:	b8 00 00 00 00       	mov    eax,0x0
c00175ab:	e9 9a 00 00 00       	jmp    c001764a <findRSDP()+0xc9>
c00175b0:	a1 34 e7 02 c0       	mov    eax,ds:0xc002e734
c00175b5:	3d ff 07 00 00       	cmp    eax,0x7ff
c00175ba:	7f 1b                	jg     c00175d7 <findRSDP()+0x56>
c00175bc:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c00175c1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00175c7:	83 e2 fb             	and    edx,0xfffffffb
c00175ca:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00175d0:	b8 00 00 00 00       	mov    eax,0x0
c00175d5:	eb 73                	jmp    c001764a <findRSDP()+0xc9>
c00175d7:	83 ec 0c             	sub    esp,0xc
c00175da:	68 9b bc 02 c0       	push   0xc002bc9b
c00175df:	e8 59 84 ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c00175e4:	83 c4 10             	add    esp,0x10
c00175e7:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00175ef:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00175f7:	77 3c                	ja     c0017635 <findRSDP()+0xb4>
c00175f9:	83 ec 04             	sub    esp,0x4
c00175fc:	6a 08                	push   0x8
c00175fe:	68 b4 bc 02 c0       	push   0xc002bcb4
c0017603:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017607:	e8 40 90 fe ff       	call   c000064c <memcmp>
c001760c:	83 c4 10             	add    esp,0x10
c001760f:	85 c0                	test   eax,eax
c0017611:	0f 94 c0             	sete   al
c0017614:	84 c0                	test   al,al
c0017616:	74 16                	je     c001762e <findRSDP()+0xad>
c0017618:	83 ec 0c             	sub    esp,0xc
c001761b:	68 bd bc 02 c0       	push   0xc002bcbd
c0017620:	e8 18 84 ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c0017625:	83 c4 10             	add    esp,0x10
c0017628:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001762c:	eb 1c                	jmp    c001764a <findRSDP()+0xc9>
c001762e:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017633:	eb ba                	jmp    c00175ef <findRSDP()+0x6e>
c0017635:	83 ec 0c             	sub    esp,0xc
c0017638:	68 cb bc 02 c0       	push   0xc002bccb
c001763d:	e8 fb 83 ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c0017642:	83 c4 10             	add    esp,0x10
c0017645:	b8 00 00 00 00       	mov    eax,0x0
c001764a:	83 c4 1c             	add    esp,0x1c
c001764d:	c3                   	ret    

c001764e <loadACPITables(unsigned char*)>:
c001764e:	57                   	push   edi
c001764f:	56                   	push   esi
c0017650:	53                   	push   ebx
c0017651:	83 ec 60             	sub    esp,0x60
c0017654:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0017659:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001765f:	83 e0 04             	and    eax,0x4
c0017662:	84 c0                	test   al,al
c0017664:	0f 84 33 02 00 00    	je     c001789d <loadACPITables(unsigned char*)+0x24f>
c001766a:	a0 80 ef 02 c0       	mov    al,ds:0xc002ef80
c001766f:	84 c0                	test   al,al
c0017671:	74 75                	je     c00176e8 <loadACPITables(unsigned char*)+0x9a>
c0017673:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017677:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001767b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001767f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017682:	83 e8 24             	sub    eax,0x24
c0017685:	c1 e8 03             	shr    eax,0x3
c0017688:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001768c:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017694:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017698:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001769c:	0f 8d b2 00 00 00    	jge    c0017754 <loadACPITables(unsigned char*)+0x106>
c00176a2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00176a6:	83 c0 24             	add    eax,0x24
c00176a9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00176ad:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00176b1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00176b5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00176b9:	c1 e0 03             	shl    eax,0x3
c00176bc:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c00176c0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00176c4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00176c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00176c9:	89 c1                	mov    ecx,eax
c00176cb:	a1 6c ed 02 c0       	mov    eax,ds:0xc002ed6c
c00176d0:	8d 50 01             	lea    edx,[eax+0x1]
c00176d3:	89 15 6c ed 02 c0    	mov    DWORD PTR ds:0xc002ed6c,edx
c00176d9:	89 ca                	mov    edx,ecx
c00176db:	89 14 c5 84 ed 02 c0 	mov    DWORD PTR [eax*8-0x3ffd127c],edx
c00176e2:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00176e6:	eb ac                	jmp    c0017694 <loadACPITables(unsigned char*)+0x46>
c00176e8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00176ec:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00176f0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00176f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00176f7:	83 e8 24             	sub    eax,0x24
c00176fa:	c1 e8 02             	shr    eax,0x2
c00176fd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017701:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017709:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001770d:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017711:	7d 41                	jge    c0017754 <loadACPITables(unsigned char*)+0x106>
c0017713:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017717:	83 c0 24             	add    eax,0x24
c001771a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001771e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017722:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017726:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001772a:	c1 e0 02             	shl    eax,0x2
c001772d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017731:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017735:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017737:	a1 6c ed 02 c0       	mov    eax,ds:0xc002ed6c
c001773c:	8d 50 01             	lea    edx,[eax+0x1]
c001773f:	89 15 6c ed 02 c0    	mov    DWORD PTR ds:0xc002ed6c,edx
c0017745:	89 ca                	mov    edx,ecx
c0017747:	89 14 c5 84 ed 02 c0 	mov    DWORD PTR [eax*8-0x3ffd127c],edx
c001774e:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017752:	eb b5                	jmp    c0017709 <loadACPITables(unsigned char*)+0xbb>
c0017754:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001775c:	a1 6c ed 02 c0       	mov    eax,ds:0xc002ed6c
c0017761:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017765:	0f 8d 33 01 00 00    	jge    c001789e <loadACPITables(unsigned char*)+0x250>
c001776b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001776f:	8b 04 c5 84 ed 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd127c]
c0017776:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001777a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001777e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017782:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017786:	25 ff 0f 00 00       	and    eax,0xfff
c001778b:	89 c6                	mov    esi,eax
c001778d:	8b 1d 50 e8 02 c0    	mov    ebx,DWORD PTR ds:0xc002e850
c0017793:	83 ec 0c             	sub    esp,0xc
c0017796:	6a 01                	push   0x1
c0017798:	e8 cc 9e ff ff       	call   c0011669 <Virt::allocateKernelVirtualPages(int)>
c001779d:	83 c4 10             	add    esp,0x10
c00177a0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00177a4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00177aa:	83 ec 0c             	sub    esp,0xc
c00177ad:	6a 01                	push   0x1
c00177af:	6a 01                	push   0x1
c00177b1:	50                   	push   eax
c00177b2:	52                   	push   edx
c00177b3:	53                   	push   ebx
c00177b4:	e8 4d a8 ff ff       	call   c0012006 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00177b9:	83 c4 20             	add    esp,0x20
c00177bc:	09 f0                	or     eax,esi
c00177be:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00177c2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00177c6:	c1 e0 03             	shl    eax,0x3
c00177c9:	05 80 ed 02 c0       	add    eax,0xc002ed80
c00177ce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00177d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00177d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00177da:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c00177e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00177e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00177ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00177ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00177f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00177f6:	89 c6                	mov    esi,eax
c00177f8:	89 d7                	mov    edi,edx
c00177fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00177fc:	89 c8                	mov    eax,ecx
c00177fe:	89 fa                	mov    edx,edi
c0017800:	89 f3                	mov    ebx,esi
c0017802:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017806:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001780a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001780e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017812:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017815:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017819:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001781d:	05 00 10 00 00       	add    eax,0x1000
c0017822:	c1 e8 0c             	shr    eax,0xc
c0017825:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017829:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001782d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017831:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017835:	25 ff 0f 00 00       	and    eax,0xfff
c001783a:	89 c6                	mov    esi,eax
c001783c:	8b 1d 50 e8 02 c0    	mov    ebx,DWORD PTR ds:0xc002e850
c0017842:	83 ec 0c             	sub    esp,0xc
c0017845:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017849:	e8 1b 9e ff ff       	call   c0011669 <Virt::allocateKernelVirtualPages(int)>
c001784e:	83 c4 10             	add    esp,0x10
c0017851:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017855:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001785b:	83 ec 0c             	sub    esp,0xc
c001785e:	6a 01                	push   0x1
c0017860:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017864:	50                   	push   eax
c0017865:	52                   	push   edx
c0017866:	53                   	push   ebx
c0017867:	e8 9a a7 ff ff       	call   c0012006 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001786c:	83 c4 20             	add    esp,0x20
c001786f:	09 f0                	or     eax,esi
c0017871:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017875:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017879:	83 ec 0c             	sub    esp,0xc
c001787c:	50                   	push   eax
c001787d:	e8 17 a1 ff ff       	call   c0011999 <Virt::freeKernelVirtualPages(unsigned long)>
c0017882:	83 c4 10             	add    esp,0x10
c0017885:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017889:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001788d:	89 14 c5 84 ed 02 c0 	mov    DWORD PTR [eax*8-0x3ffd127c],edx
c0017894:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017898:	e9 bf fe ff ff       	jmp    c001775c <loadACPITables(unsigned char*)+0x10e>
c001789d:	90                   	nop
c001789e:	83 c4 60             	add    esp,0x60
c00178a1:	5b                   	pop    ebx
c00178a2:	5e                   	pop    esi
c00178a3:	5f                   	pop    edi
c00178a4:	c3                   	ret    

c00178a5 <findRSDT(unsigned char*)>:
c00178a5:	57                   	push   edi
c00178a6:	56                   	push   esi
c00178a7:	53                   	push   ebx
c00178a8:	83 ec 50             	sub    esp,0x50
c00178ab:	83 ec 0c             	sub    esp,0xc
c00178ae:	68 df bc 02 c0       	push   0xc002bcdf
c00178b3:	e8 85 81 ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c00178b8:	83 c4 10             	add    esp,0x10
c00178bb:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c00178c0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00178c6:	83 e0 04             	and    eax,0x4
c00178c9:	84 c0                	test   al,al
c00178cb:	75 0a                	jne    c00178d7 <findRSDT(unsigned char*)+0x32>
c00178cd:	b8 00 00 00 00       	mov    eax,0x0
c00178d2:	e9 81 01 00 00       	jmp    c0017a58 <findRSDT(unsigned char*)+0x1b3>
c00178d7:	83 ec 0c             	sub    esp,0xc
c00178da:	68 f1 bc 02 c0       	push   0xc002bcf1
c00178df:	e8 59 81 ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c00178e4:	83 c4 10             	add    esp,0x10
c00178e7:	89 e0                	mov    eax,esp
c00178e9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00178ed:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00178f1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00178f5:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c00178fd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017901:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017905:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017909:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001790d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0017911:	89 c6                	mov    esi,eax
c0017913:	89 d7                	mov    edi,edx
c0017915:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017917:	89 c8                	mov    eax,ecx
c0017919:	89 fa                	mov    edx,edi
c001791b:	89 f3                	mov    ebx,esi
c001791d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017921:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017925:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017929:	83 ec 0c             	sub    esp,0xc
c001792c:	68 03 bd 02 c0       	push   0xc002bd03
c0017931:	e8 07 81 ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c0017936:	83 c4 10             	add    esp,0x10
c0017939:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001793d:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017941:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017949:	83 ec 0c             	sub    esp,0xc
c001794c:	68 15 bd 02 c0       	push   0xc002bd15
c0017951:	e8 e7 80 ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c0017956:	83 c4 10             	add    esp,0x10
c0017959:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001795d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017961:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017969:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001796d:	83 ec 04             	sub    esp,0x4
c0017970:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017974:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017978:	68 d4 bb 02 c0       	push   0xc002bbd4
c001797d:	e8 b9 b0 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0017982:	83 c4 10             	add    esp,0x10
c0017985:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017989:	25 ff 0f 00 00       	and    eax,0xfff
c001798e:	89 c6                	mov    esi,eax
c0017990:	8b 1d 50 e8 02 c0    	mov    ebx,DWORD PTR ds:0xc002e850
c0017996:	83 ec 0c             	sub    esp,0xc
c0017999:	6a 02                	push   0x2
c001799b:	e8 c9 9c ff ff       	call   c0011669 <Virt::allocateKernelVirtualPages(int)>
c00179a0:	83 c4 10             	add    esp,0x10
c00179a3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00179a7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00179ad:	83 ec 0c             	sub    esp,0xc
c00179b0:	6a 01                	push   0x1
c00179b2:	6a 02                	push   0x2
c00179b4:	50                   	push   eax
c00179b5:	52                   	push   edx
c00179b6:	53                   	push   ebx
c00179b7:	e8 4a a6 ff ff       	call   c0012006 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00179bc:	83 c4 20             	add    esp,0x20
c00179bf:	09 f0                	or     eax,esi
c00179c1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00179c5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00179c9:	25 ff 0f 00 00       	and    eax,0xfff
c00179ce:	89 c6                	mov    esi,eax
c00179d0:	8b 1d 50 e8 02 c0    	mov    ebx,DWORD PTR ds:0xc002e850
c00179d6:	83 ec 0c             	sub    esp,0xc
c00179d9:	6a 02                	push   0x2
c00179db:	e8 89 9c ff ff       	call   c0011669 <Virt::allocateKernelVirtualPages(int)>
c00179e0:	83 c4 10             	add    esp,0x10
c00179e3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00179e7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00179ed:	83 ec 0c             	sub    esp,0xc
c00179f0:	6a 01                	push   0x1
c00179f2:	6a 02                	push   0x2
c00179f4:	50                   	push   eax
c00179f5:	52                   	push   edx
c00179f6:	53                   	push   ebx
c00179f7:	e8 0a a6 ff ff       	call   c0012006 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00179fc:	83 c4 20             	add    esp,0x20
c00179ff:	09 f0                	or     eax,esi
c0017a01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017a05:	83 ec 04             	sub    esp,0x4
c0017a08:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017a0c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017a10:	68 f4 bb 02 c0       	push   0xc002bbf4
c0017a15:	e8 21 b0 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0017a1a:	83 c4 10             	add    esp,0x10
c0017a1d:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017a22:	75 11                	jne    c0017a35 <findRSDT(unsigned char*)+0x190>
c0017a24:	c6 05 80 ef 02 c0 00 	mov    BYTE PTR ds:0xc002ef80,0x0
c0017a2b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017a2f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017a33:	eb 1f                	jmp    c0017a54 <findRSDT(unsigned char*)+0x1af>
c0017a35:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017a3a:	75 11                	jne    c0017a4d <findRSDT(unsigned char*)+0x1a8>
c0017a3c:	c6 05 80 ef 02 c0 01 	mov    BYTE PTR ds:0xc002ef80,0x1
c0017a43:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017a47:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017a4b:	eb 07                	jmp    c0017a54 <findRSDT(unsigned char*)+0x1af>
c0017a4d:	b8 00 00 00 00       	mov    eax,0x0
c0017a52:	eb 04                	jmp    c0017a58 <findRSDT(unsigned char*)+0x1b3>
c0017a54:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017a58:	83 c4 50             	add    esp,0x50
c0017a5b:	5b                   	pop    ebx
c0017a5c:	5e                   	pop    esi
c0017a5d:	5f                   	pop    edi
c0017a5e:	c3                   	ret    

c0017a5f <findDataTable(unsigned char*, char*)>:
c0017a5f:	83 ec 1c             	sub    esp,0x1c
c0017a62:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0017a67:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a6d:	83 e0 04             	and    eax,0x4
c0017a70:	84 c0                	test   al,al
c0017a72:	75 07                	jne    c0017a7b <findDataTable(unsigned char*, char*)+0x1c>
c0017a74:	b8 00 00 00 00       	mov    eax,0x0
c0017a79:	eb 52                	jmp    c0017acd <findDataTable(unsigned char*, char*)+0x6e>
c0017a7b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017a83:	a1 6c ed 02 c0       	mov    eax,ds:0xc002ed6c
c0017a88:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017a8c:	7d 3a                	jge    c0017ac8 <findDataTable(unsigned char*, char*)+0x69>
c0017a8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a92:	c1 e0 03             	shl    eax,0x3
c0017a95:	05 80 ed 02 c0       	add    eax,0xc002ed80
c0017a9a:	83 ec 04             	sub    esp,0x4
c0017a9d:	6a 04                	push   0x4
c0017a9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017aa3:	50                   	push   eax
c0017aa4:	e8 a3 8b fe ff       	call   c000064c <memcmp>
c0017aa9:	83 c4 10             	add    esp,0x10
c0017aac:	85 c0                	test   eax,eax
c0017aae:	0f 94 c0             	sete   al
c0017ab1:	84 c0                	test   al,al
c0017ab3:	74 0d                	je     c0017ac2 <findDataTable(unsigned char*, char*)+0x63>
c0017ab5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ab9:	8b 04 c5 84 ed 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd127c]
c0017ac0:	eb 0b                	jmp    c0017acd <findDataTable(unsigned char*, char*)+0x6e>
c0017ac2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017ac6:	eb bb                	jmp    c0017a83 <findDataTable(unsigned char*, char*)+0x24>
c0017ac8:	b8 00 00 00 00       	mov    eax,0x0
c0017acd:	83 c4 1c             	add    esp,0x1c
c0017ad0:	c3                   	ret    

c0017ad1 <scanMADT()>:
c0017ad1:	53                   	push   ebx
c0017ad2:	83 ec 38             	sub    esp,0x38
c0017ad5:	83 ec 0c             	sub    esp,0xc
c0017ad8:	68 27 bd 02 c0       	push   0xc002bd27
c0017add:	e8 5b 7f ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c0017ae2:	83 c4 10             	add    esp,0x10
c0017ae5:	a1 00 e7 02 c0       	mov    eax,ds:0xc002e700
c0017aea:	25 00 04 00 00       	and    eax,0x400
c0017aef:	74 14                	je     c0017b05 <scanMADT()+0x34>
c0017af1:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0017af6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017afc:	83 e2 fb             	and    edx,0xfffffffb
c0017aff:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017b05:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0017b0a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017b10:	83 e0 04             	and    eax,0x4
c0017b13:	84 c0                	test   al,al
c0017b15:	0f 84 7a 04 00 00    	je     c0017f95 <scanMADT()+0x4c4>
c0017b1b:	83 ec 0c             	sub    esp,0xc
c0017b1e:	68 34 bd 02 c0       	push   0xc002bd34
c0017b23:	e8 15 7f ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c0017b28:	83 c4 10             	add    esp,0x10
c0017b2b:	e8 51 fa ff ff       	call   c0017581 <findRSDP()>
c0017b30:	a3 8c ef 02 c0       	mov    ds:0xc002ef8c,eax
c0017b35:	a1 8c ef 02 c0       	mov    eax,ds:0xc002ef8c
c0017b3a:	85 c0                	test   eax,eax
c0017b3c:	75 19                	jne    c0017b57 <scanMADT()+0x86>
c0017b3e:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0017b43:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017b49:	83 e2 fb             	and    edx,0xfffffffb
c0017b4c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017b52:	e9 42 04 00 00       	jmp    c0017f99 <scanMADT()+0x4c8>
c0017b57:	83 ec 0c             	sub    esp,0xc
c0017b5a:	68 46 bd 02 c0       	push   0xc002bd46
c0017b5f:	e8 d9 7e ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c0017b64:	83 c4 10             	add    esp,0x10
c0017b67:	a1 8c ef 02 c0       	mov    eax,ds:0xc002ef8c
c0017b6c:	83 ec 0c             	sub    esp,0xc
c0017b6f:	50                   	push   eax
c0017b70:	e8 30 fd ff ff       	call   c00178a5 <findRSDT(unsigned char*)>
c0017b75:	83 c4 10             	add    esp,0x10
c0017b78:	a3 88 ef 02 c0       	mov    ds:0xc002ef88,eax
c0017b7d:	a1 88 ef 02 c0       	mov    eax,ds:0xc002ef88
c0017b82:	85 c0                	test   eax,eax
c0017b84:	75 19                	jne    c0017b9f <scanMADT()+0xce>
c0017b86:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0017b8b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017b91:	83 e2 fb             	and    edx,0xfffffffb
c0017b94:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017b9a:	e9 fa 03 00 00       	jmp    c0017f99 <scanMADT()+0x4c8>
c0017b9f:	83 ec 0c             	sub    esp,0xc
c0017ba2:	68 56 bd 02 c0       	push   0xc002bd56
c0017ba7:	e8 91 7e ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c0017bac:	83 c4 10             	add    esp,0x10
c0017baf:	a1 88 ef 02 c0       	mov    eax,ds:0xc002ef88
c0017bb4:	83 ec 0c             	sub    esp,0xc
c0017bb7:	50                   	push   eax
c0017bb8:	e8 91 fa ff ff       	call   c001764e <loadACPITables(unsigned char*)>
c0017bbd:	83 c4 10             	add    esp,0x10
c0017bc0:	a1 88 ef 02 c0       	mov    eax,ds:0xc002ef88
c0017bc5:	83 ec 08             	sub    esp,0x8
c0017bc8:	68 6e bd 02 c0       	push   0xc002bd6e
c0017bcd:	50                   	push   eax
c0017bce:	e8 8c fe ff ff       	call   c0017a5f <findDataTable(unsigned char*, char*)>
c0017bd3:	83 c4 10             	add    esp,0x10
c0017bd6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017bda:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017bdf:	75 19                	jne    c0017bfa <scanMADT()+0x129>
c0017be1:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0017be6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017bec:	83 e2 fe             	and    edx,0xfffffffe
c0017bef:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017bf5:	e9 9f 03 00 00       	jmp    c0017f99 <scanMADT()+0x4c8>
c0017bfa:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017c02:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c09:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017c0d:	0f 87 86 03 00 00    	ja     c0017f99 <scanMADT()+0x4c8>
c0017c13:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017c1b:	0f 87 78 03 00 00    	ja     c0017f99 <scanMADT()+0x4c8>
c0017c21:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c25:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017c29:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c2d:	8d 50 01             	lea    edx,[eax+0x1]
c0017c30:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c34:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c38:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c3c:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017c40:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c44:	8d 50 01             	lea    edx,[eax+0x1]
c0017c47:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c4b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c4f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c53:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017c57:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017c5c:	0f 86 36 03 00 00    	jbe    c0017f98 <scanMADT()+0x4c7>
c0017c62:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017c67:	75 57                	jne    c0017cc0 <scanMADT()+0x1ef>
c0017c69:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c6d:	8d 50 01             	lea    edx,[eax+0x1]
c0017c70:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c74:	8a 15 80 f1 02 c0    	mov    dl,BYTE PTR ds:0xc002f180
c0017c7a:	0f b6 d2             	movzx  edx,dl
c0017c7d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017c81:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017c85:	88 82 c0 f1 02 c0    	mov    BYTE PTR [edx-0x3ffd0e40],al
c0017c8b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c8f:	8d 50 01             	lea    edx,[eax+0x1]
c0017c92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c96:	8a 15 80 f1 02 c0    	mov    dl,BYTE PTR ds:0xc002f180
c0017c9c:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017c9f:	88 0d 80 f1 02 c0    	mov    BYTE PTR ds:0xc002f180,cl
c0017ca5:	0f b6 d2             	movzx  edx,dl
c0017ca8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017cac:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017cb0:	88 82 a0 f1 02 c0    	mov    BYTE PTR [edx-0x3ffd0e60],al
c0017cb6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017cbb:	e9 c1 02 00 00       	jmp    c0017f81 <scanMADT()+0x4b0>
c0017cc0:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017cc5:	0f 85 14 01 00 00    	jne    c0017ddf <scanMADT()+0x30e>
c0017ccb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ccf:	8d 50 01             	lea    edx,[eax+0x1]
c0017cd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017cd6:	8a 15 40 f0 02 c0    	mov    dl,BYTE PTR ds:0xc002f040
c0017cdc:	0f b6 d2             	movzx  edx,dl
c0017cdf:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ce3:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ce7:	88 82 60 f0 02 c0    	mov    BYTE PTR [edx-0x3ffd0fa0],al
c0017ced:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017cf1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cf5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cf9:	01 d0                	add    eax,edx
c0017cfb:	83 c0 2c             	add    eax,0x2c
c0017cfe:	8a 00                	mov    al,BYTE PTR [eax]
c0017d00:	0f b6 d0             	movzx  edx,al
c0017d03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d07:	8d 48 01             	lea    ecx,[eax+0x1]
c0017d0a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d0e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017d12:	0f b6 c0             	movzx  eax,al
c0017d15:	c1 e0 08             	shl    eax,0x8
c0017d18:	89 d1                	mov    ecx,edx
c0017d1a:	09 c1                	or     ecx,eax
c0017d1c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d20:	8d 50 02             	lea    edx,[eax+0x2]
c0017d23:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d27:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017d2b:	0f b6 c0             	movzx  eax,al
c0017d2e:	c1 e0 10             	shl    eax,0x10
c0017d31:	09 c1                	or     ecx,eax
c0017d33:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d37:	8d 50 03             	lea    edx,[eax+0x3]
c0017d3a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d3e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017d42:	0f b6 c0             	movzx  eax,al
c0017d45:	c1 e0 18             	shl    eax,0x18
c0017d48:	09 c1                	or     ecx,eax
c0017d4a:	89 ca                	mov    edx,ecx
c0017d4c:	a0 40 f0 02 c0       	mov    al,ds:0xc002f040
c0017d51:	0f b6 c0             	movzx  eax,al
c0017d54:	89 14 85 80 f0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0f80],edx
c0017d5b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017d60:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d64:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d68:	01 d0                	add    eax,edx
c0017d6a:	83 c0 2c             	add    eax,0x2c
c0017d6d:	8a 00                	mov    al,BYTE PTR [eax]
c0017d6f:	0f b6 d0             	movzx  edx,al
c0017d72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d76:	8d 48 01             	lea    ecx,[eax+0x1]
c0017d79:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d7d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017d81:	0f b6 c0             	movzx  eax,al
c0017d84:	c1 e0 08             	shl    eax,0x8
c0017d87:	89 d1                	mov    ecx,edx
c0017d89:	09 c1                	or     ecx,eax
c0017d8b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d8f:	8d 50 02             	lea    edx,[eax+0x2]
c0017d92:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d96:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017d9a:	0f b6 c0             	movzx  eax,al
c0017d9d:	c1 e0 10             	shl    eax,0x10
c0017da0:	09 c1                	or     ecx,eax
c0017da2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017da6:	8d 50 03             	lea    edx,[eax+0x3]
c0017da9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017dad:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017db1:	0f b6 c0             	movzx  eax,al
c0017db4:	c1 e0 18             	shl    eax,0x18
c0017db7:	09 c1                	or     ecx,eax
c0017db9:	89 ca                	mov    edx,ecx
c0017dbb:	a0 40 f0 02 c0       	mov    al,ds:0xc002f040
c0017dc0:	0f b6 c0             	movzx  eax,al
c0017dc3:	89 14 85 00 f1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0f00],edx
c0017dca:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017dcf:	a0 40 f0 02 c0       	mov    al,ds:0xc002f040
c0017dd4:	40                   	inc    eax
c0017dd5:	a2 40 f0 02 c0       	mov    ds:0xc002f040,al
c0017dda:	e9 a2 01 00 00       	jmp    c0017f81 <scanMADT()+0x4b0>
c0017ddf:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017de4:	0f 85 e9 00 00 00    	jne    c0017ed3 <scanMADT()+0x402>
c0017dea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dee:	8d 50 01             	lea    edx,[eax+0x1]
c0017df1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017df5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017df9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017dfd:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017e01:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e05:	8d 50 01             	lea    edx,[eax+0x1]
c0017e08:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e0c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e10:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e14:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017e18:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e1c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e20:	01 d0                	add    eax,edx
c0017e22:	83 c0 2c             	add    eax,0x2c
c0017e25:	8a 00                	mov    al,BYTE PTR [eax]
c0017e27:	0f b6 d0             	movzx  edx,al
c0017e2a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e2e:	8d 48 01             	lea    ecx,[eax+0x1]
c0017e31:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e35:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017e39:	0f b6 c0             	movzx  eax,al
c0017e3c:	c1 e0 08             	shl    eax,0x8
c0017e3f:	89 d1                	mov    ecx,edx
c0017e41:	09 c1                	or     ecx,eax
c0017e43:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e47:	8d 50 02             	lea    edx,[eax+0x2]
c0017e4a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e4e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e52:	0f b6 c0             	movzx  eax,al
c0017e55:	c1 e0 10             	shl    eax,0x10
c0017e58:	09 c1                	or     ecx,eax
c0017e5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e5e:	8d 50 03             	lea    edx,[eax+0x3]
c0017e61:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e65:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e69:	0f b6 c0             	movzx  eax,al
c0017e6c:	c1 e0 18             	shl    eax,0x18
c0017e6f:	09 c8                	or     eax,ecx
c0017e71:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017e75:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017e7a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e7e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e82:	01 d0                	add    eax,edx
c0017e84:	83 c0 2c             	add    eax,0x2c
c0017e87:	8a 00                	mov    al,BYTE PTR [eax]
c0017e89:	0f b6 c0             	movzx  eax,al
c0017e8c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017e90:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017e93:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e97:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017e9b:	0f b6 d2             	movzx  edx,dl
c0017e9e:	c1 e2 08             	shl    edx,0x8
c0017ea1:	09 d0                	or     eax,edx
c0017ea3:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017ea8:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017ead:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017eb2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017eb6:	88 90 40 d9 02 c0    	mov    BYTE PTR [eax-0x3ffd26c0],dl
c0017ebc:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017ec1:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017ec6:	66 89 84 12 20 f0 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd0fe0],ax
c0017ece:	e9 ae 00 00 00       	jmp    c0017f81 <scanMADT()+0x4b0>
c0017ed3:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017ed8:	0f 85 97 00 00 00    	jne    c0017f75 <scanMADT()+0x4a4>
c0017ede:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ee2:	8d 50 01             	lea    edx,[eax+0x1]
c0017ee5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ee9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017eed:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ef1:	0f b6 c0             	movzx  eax,al
c0017ef4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017ef8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017efc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f00:	01 d0                	add    eax,edx
c0017f02:	83 c0 2c             	add    eax,0x2c
c0017f05:	8a 00                	mov    al,BYTE PTR [eax]
c0017f07:	0f b6 d0             	movzx  edx,al
c0017f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f0e:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f11:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f15:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f19:	0f b6 c0             	movzx  eax,al
c0017f1c:	c1 e0 08             	shl    eax,0x8
c0017f1f:	09 d0                	or     eax,edx
c0017f21:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017f25:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017f2a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f2e:	8d 50 01             	lea    edx,[eax+0x1]
c0017f31:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f35:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f39:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f3d:	0f b6 c0             	movzx  eax,al
c0017f40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f48:	c1 e0 08             	shl    eax,0x8
c0017f4b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017f4f:	89 c1                	mov    ecx,eax
c0017f51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f55:	c1 e0 18             	shl    eax,0x18
c0017f58:	89 c3                	mov    ebx,eax
c0017f5a:	a1 90 ef 02 c0       	mov    eax,ds:0xc002ef90
c0017f5f:	8d 50 01             	lea    edx,[eax+0x1]
c0017f62:	89 15 90 ef 02 c0    	mov    DWORD PTR ds:0xc002ef90,edx
c0017f68:	09 d9                	or     ecx,ebx
c0017f6a:	89 ca                	mov    edx,ecx
c0017f6c:	89 14 85 a0 ef 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1060],edx
c0017f73:	eb 0c                	jmp    c0017f81 <scanMADT()+0x4b0>
c0017f75:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017f7a:	75 05                	jne    c0017f81 <scanMADT()+0x4b0>
c0017f7c:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017f81:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017f86:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f8a:	01 d0                	add    eax,edx
c0017f8c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017f90:	e9 6d fc ff ff       	jmp    c0017c02 <scanMADT()+0x131>
c0017f95:	90                   	nop
c0017f96:	eb 01                	jmp    c0017f99 <scanMADT()+0x4c8>
c0017f98:	90                   	nop
c0017f99:	83 c4 38             	add    esp,0x38
c0017f9c:	5b                   	pop    ebx
c0017f9d:	c3                   	ret    

c0017f9e <ACPI::ACPI()>:
c0017f9e:	83 ec 0c             	sub    esp,0xc
c0017fa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fa5:	83 ec 08             	sub    esp,0x8
c0017fa8:	68 73 bd 02 c0       	push   0xc002bd73
c0017fad:	50                   	push   eax
c0017fae:	e8 c5 c0 ff ff       	call   c0014078 <Device::Device(char const*)>
c0017fb3:	83 c4 10             	add    esp,0x10
c0017fb6:	ba dc be 02 c0       	mov    edx,0xc002bedc
c0017fbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fbf:	89 10                	mov    DWORD PTR [eax],edx
c0017fc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fc5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017fcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fd0:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017fda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fde:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017fe8:	83 ec 0c             	sub    esp,0xc
c0017feb:	68 78 bd 02 c0       	push   0xc002bd78
c0017ff0:	e8 48 7a ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c0017ff5:	83 c4 10             	add    esp,0x10
c0017ff8:	e8 d4 fa ff ff       	call   c0017ad1 <scanMADT()>
c0017ffd:	90                   	nop
c0017ffe:	83 c4 0c             	add    esp,0xc
c0018001:	c3                   	ret    

c0018002 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0018002:	83 ec 2c             	sub    esp,0x2c
c0018005:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0018009:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001800d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018011:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018015:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001801a:	88 d0                	mov    al,dl
c001801c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018020:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018025:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001802d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018031:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018037:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001803b:	0f 8d 97 00 00 00    	jge    c00180d8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0018041:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018045:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018049:	83 c2 2a             	add    edx,0x2a
c001804c:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0018050:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018055:	75 78                	jne    c00180cf <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018057:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001805b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001805f:	83 c2 2a             	add    edx,0x2a
c0018062:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018066:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001806a:	75 63                	jne    c00180cf <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001806c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018071:	74 3a                	je     c00180ad <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018073:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018077:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001807b:	83 c2 2a             	add    edx,0x2a
c001807e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018082:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018086:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018089:	39 c2                	cmp    edx,eax
c001808b:	74 10                	je     c001809d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001808d:	83 ec 0c             	sub    esp,0xc
c0018090:	68 14 bc 02 c0       	push   0xc002bc14
c0018095:	e8 3f 23 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c001809a:	83 c4 10             	add    esp,0x10
c001809d:	83 ec 0c             	sub    esp,0xc
c00180a0:	68 86 bd 02 c0       	push   0xc002bd86
c00180a5:	e8 2f 23 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c00180aa:	83 c4 10             	add    esp,0x10
c00180ad:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00180b1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00180b5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00180b9:	83 c2 2a             	add    edx,0x2a
c00180bc:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00180c0:	8b 02                	mov    eax,DWORD PTR [edx]
c00180c2:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00180c5:	89 01                	mov    DWORD PTR [ecx],eax
c00180c7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00180ca:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00180cf:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00180d3:	e9 55 ff ff ff       	jmp    c001802d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00180d8:	90                   	nop
c00180d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180dd:	83 c4 2c             	add    esp,0x2c
c00180e0:	c2 04 00             	ret    0x4
c00180e3:	90                   	nop

c00180e4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00180e4:	83 ec 1c             	sub    esp,0x1c
c00180e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180eb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00180ef:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00180f3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00180f8:	88 c8                	mov    al,cl
c00180fa:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00180fe:	88 d0                	mov    al,dl
c0018100:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018104:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018108:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001810e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018112:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018115:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0018119:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001811d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018121:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018127:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001812b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001812e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018132:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018137:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001813b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018141:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018145:	8d 48 01             	lea    ecx,[eax+0x1]
c0018148:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001814c:	83 c2 2a             	add    edx,0x2a
c001814f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018153:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018157:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001815d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018161:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018164:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018168:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001816c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018170:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018176:	8d 50 01             	lea    edx,[eax+0x1]
c0018179:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001817d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018187:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001818d:	3d 00 02 00 00       	cmp    eax,0x200
c0018192:	75 10                	jne    c00181a4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018194:	83 ec 0c             	sub    esp,0xc
c0018197:	68 95 bd 02 c0       	push   0xc002bd95
c001819c:	e8 38 22 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c00181a1:	83 c4 10             	add    esp,0x10
c00181a4:	90                   	nop
c00181a5:	83 c4 1c             	add    esp,0x1c
c00181a8:	c3                   	ret    
c00181a9:	90                   	nop

c00181aa <ACPI::setScreenBrightnessLevel(void*, int)>:
c00181aa:	b8 00 00 00 00       	mov    eax,0x0
c00181af:	c3                   	ret    

c00181b0 <ACPI::detectPCI()>:
c00181b0:	53                   	push   ebx
c00181b1:	83 ec 28             	sub    esp,0x28
c00181b4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00181b9:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c00181be:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c00181c3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00181c9:	83 e0 04             	and    eax,0x4
c00181cc:	84 c0                	test   al,al
c00181ce:	74 2b                	je     c00181fb <ACPI::detectPCI()+0x4b>
c00181d0:	a1 88 ef 02 c0       	mov    eax,ds:0xc002ef88
c00181d5:	83 ec 08             	sub    esp,0x8
c00181d8:	68 b2 bd 02 c0       	push   0xc002bdb2
c00181dd:	50                   	push   eax
c00181de:	e8 7c f8 ff ff       	call   c0017a5f <findDataTable(unsigned char*, char*)>
c00181e3:	83 c4 10             	add    esp,0x10
c00181e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00181ea:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00181ef:	74 0a                	je     c00181fb <ACPI::detectPCI()+0x4b>
c00181f1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00181f6:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c00181fb:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0018203:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018207:	8a 00                	mov    al,BYTE PTR [eax]
c0018209:	3c 01                	cmp    al,0x1
c001820b:	75 0c                	jne    c0018219 <ACPI::detectPCI()+0x69>
c001820d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018212:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0018217:	eb 26                	jmp    c001823f <ACPI::detectPCI()+0x8f>
c0018219:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001821d:	8a 00                	mov    al,BYTE PTR [eax]
c001821f:	3c 02                	cmp    al,0x2
c0018221:	75 1c                	jne    c001823f <ACPI::detectPCI()+0x8f>
c0018223:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018228:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c001822d:	74 10                	je     c001823f <ACPI::detectPCI()+0x8f>
c001822f:	83 ec 0c             	sub    esp,0xc
c0018232:	68 44 bc 02 c0       	push   0xc002bc44
c0018237:	e8 9d 21 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c001823c:	83 c4 10             	add    esp,0x10
c001823f:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018243:	83 f0 01             	xor    eax,0x1
c0018246:	84 c0                	test   al,al
c0018248:	74 3f                	je     c0018289 <ACPI::detectPCI()+0xd9>
c001824a:	e8 01 7f fe ff       	call   c0000150 <manualPCIProbe>
c001824f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018253:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018258:	75 0c                	jne    c0018266 <ACPI::detectPCI()+0xb6>
c001825a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001825f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0018264:	eb 23                	jmp    c0018289 <ACPI::detectPCI()+0xd9>
c0018266:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c001826b:	75 1c                	jne    c0018289 <ACPI::detectPCI()+0xd9>
c001826d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018272:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0018277:	74 10                	je     c0018289 <ACPI::detectPCI()+0xd9>
c0018279:	83 ec 0c             	sub    esp,0xc
c001827c:	68 44 bc 02 c0       	push   0xc002bc44
c0018281:	e8 53 21 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c0018286:	83 c4 10             	add    esp,0x10
c0018289:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001828e:	74 7e                	je     c001830e <ACPI::detectPCI()+0x15e>
c0018290:	83 ec 0c             	sub    esp,0xc
c0018293:	68 b7 bd 02 c0       	push   0xc002bdb7
c0018298:	e8 a0 77 ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c001829d:	83 c4 10             	add    esp,0x10
c00182a0:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c00182a8:	83 ec 0c             	sub    esp,0xc
c00182ab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00182af:	e8 2f 77 ff ff       	call   c000f9e3 <malloc>
c00182b4:	83 c4 10             	add    esp,0x10
c00182b7:	89 c3                	mov    ebx,eax
c00182b9:	83 ec 0c             	sub    esp,0xc
c00182bc:	53                   	push   ebx
c00182bd:	e8 18 a7 00 00       	call   c00229da <PCI::PCI()>
c00182c2:	83 c4 10             	add    esp,0x10
c00182c5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00182c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182cd:	83 ec 08             	sub    esp,0x8
c00182d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00182d4:	50                   	push   eax
c00182d5:	e8 9a bb ff ff       	call   c0013e74 <Device::addChild(Device*)>
c00182da:	83 c4 10             	add    esp,0x10
c00182dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00182e3:	83 c0 08             	add    eax,0x8
c00182e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00182e8:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00182ed:	74 07                	je     c00182f6 <ACPI::detectPCI()+0x146>
c00182ef:	ba 01 00 00 00       	mov    edx,0x1
c00182f4:	eb 05                	jmp    c00182fb <ACPI::detectPCI()+0x14b>
c00182f6:	ba 02 00 00 00       	mov    edx,0x2
c00182fb:	6a 00                	push   0x0
c00182fd:	6a 00                	push   0x0
c00182ff:	52                   	push   edx
c0018300:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018304:	ff d0                	call   eax
c0018306:	83 c4 10             	add    esp,0x10
c0018309:	e9 9e 00 00 00       	jmp    c00183ac <ACPI::detectPCI()+0x1fc>
c001830e:	83 ec 0c             	sub    esp,0xc
c0018311:	68 cf bd 02 c0       	push   0xc002bdcf
c0018316:	e8 20 a7 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001831b:	83 c4 10             	add    esp,0x10
c001831e:	83 ec 0c             	sub    esp,0xc
c0018321:	68 da bd 02 c0       	push   0xc002bdda
c0018326:	e8 12 77 ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c001832b:	83 c4 10             	add    esp,0x10
c001832e:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0018335:	83 ec 0c             	sub    esp,0xc
c0018338:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001833c:	e8 a2 76 ff ff       	call   c000f9e3 <malloc>
c0018341:	83 c4 10             	add    esp,0x10
c0018344:	89 c3                	mov    ebx,eax
c0018346:	83 ec 0c             	sub    esp,0xc
c0018349:	53                   	push   ebx
c001834a:	e8 f5 b1 00 00       	call   c0023544 <IDE::IDE()>
c001834f:	83 c4 10             	add    esp,0x10
c0018352:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0018356:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001835a:	83 ec 08             	sub    esp,0x8
c001835d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018361:	50                   	push   eax
c0018362:	e8 0d bb ff ff       	call   c0013e74 <Device::addChild(Device*)>
c0018367:	83 c4 10             	add    esp,0x10
c001836a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001836e:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0018378:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001837c:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0018385:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018389:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0018392:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018396:	8b 00                	mov    eax,DWORD PTR [eax]
c0018398:	83 c0 08             	add    eax,0x8
c001839b:	8b 00                	mov    eax,DWORD PTR [eax]
c001839d:	6a 00                	push   0x0
c001839f:	6a 00                	push   0x0
c00183a1:	6a 00                	push   0x0
c00183a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00183a7:	ff d0                	call   eax
c00183a9:	83 c4 10             	add    esp,0x10
c00183ac:	90                   	nop
c00183ad:	83 c4 28             	add    esp,0x28
c00183b0:	5b                   	pop    ebx
c00183b1:	c3                   	ret    

c00183b2 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00183b2:	83 ec 1c             	sub    esp,0x1c
c00183b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00183b9:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00183bc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00183c0:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c00183c5:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00183ca:	83 ec 08             	sub    esp,0x8
c00183cd:	52                   	push   edx
c00183ce:	50                   	push   eax
c00183cf:	e8 1e 6a ff ff       	call   c000edf2 <Computer::readCMOS(unsigned char)>
c00183d4:	83 c4 10             	add    esp,0x10
c00183d7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00183db:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c00183e0:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00183e5:	83 ec 04             	sub    esp,0x4
c00183e8:	6a 01                	push   0x1
c00183ea:	52                   	push   edx
c00183eb:	50                   	push   eax
c00183ec:	e8 ed 6b ff ff       	call   c000efde <Computer::writeCMOS(unsigned char, unsigned char)>
c00183f1:	83 c4 10             	add    esp,0x10
c00183f4:	90                   	nop
c00183f5:	83 c4 1c             	add    esp,0x1c
c00183f8:	c3                   	ret    
c00183f9:	90                   	nop

c00183fa <ACPI::sleep()>:
c00183fa:	83 ec 0c             	sub    esp,0xc
c00183fd:	a1 60 ed 02 c0       	mov    eax,ds:0xc002ed60
c0018402:	85 c0                	test   eax,eax
c0018404:	74 07                	je     c001840d <ACPI::sleep()+0x13>
c0018406:	a1 60 ed 02 c0       	mov    eax,ds:0xc002ed60
c001840b:	ff d0                	call   eax
c001840d:	90                   	nop
c001840e:	83 c4 0c             	add    esp,0xc
c0018411:	c3                   	ret    

c0018412 <ACPI::open(int, int, void*)>:
c0018412:	57                   	push   edi
c0018413:	56                   	push   esi
c0018414:	53                   	push   ebx
c0018415:	81 ec 60 01 00 00    	sub    esp,0x160
c001841b:	83 ec 0c             	sub    esp,0xc
c001841e:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0018425:	e8 86 fd ff ff       	call   c00181b0 <ACPI::detectPCI()>
c001842a:	83 c4 10             	add    esp,0x10
c001842d:	83 ec 0c             	sub    esp,0xc
c0018430:	68 6c bc 02 c0       	push   0xc002bc6c
c0018435:	e8 03 76 ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c001843a:	83 c4 10             	add    esp,0x10
c001843d:	83 ec 0c             	sub    esp,0xc
c0018440:	68 ef bd 02 c0       	push   0xc002bdef
c0018445:	e8 e5 46 00 00       	call   c001cb2f <Thr::loadKernelSymbolTable(char const*)>
c001844a:	83 c4 10             	add    esp,0x10
c001844d:	83 ec 0c             	sub    esp,0xc
c0018450:	68 0d be 02 c0       	push   0xc002be0d
c0018455:	e8 e3 75 ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c001845a:	83 c4 10             	add    esp,0x10
c001845d:	83 ec 04             	sub    esp,0x4
c0018460:	6a 0c                	push   0xc
c0018462:	68 28 be 02 c0       	push   0xc002be28
c0018467:	68 39 be 02 c0       	push   0xc002be39
c001846c:	e8 24 2d 00 00       	call   c001b195 <Reg::readIntWithDefault(char*, char*, int)>
c0018471:	83 c4 10             	add    esp,0x10
c0018474:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c001847b:	83 ec 0c             	sub    esp,0xc
c001847e:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0018485:	e8 e9 93 ff ff       	call   c0011873 <Virt::setupPageSwapping(int)>
c001848a:	83 c4 10             	add    esp,0x10
c001848d:	83 ec 0c             	sub    esp,0xc
c0018490:	68 2c a5 02 c0       	push   0xc002a52c
c0018495:	e8 a3 75 ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c001849a:	83 c4 10             	add    esp,0x10
c001849d:	8b 1d e8 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6e8
c00184a3:	83 ec 08             	sub    esp,0x8
c00184a6:	6a 01                	push   0x1
c00184a8:	68 40 be 02 c0       	push   0xc002be40
c00184ad:	e8 f4 50 00 00       	call   c001d5a6 <Thr::loadDLL(char const*, bool)>
c00184b2:	83 c4 10             	add    esp,0x10
c00184b5:	83 ec 08             	sub    esp,0x8
c00184b8:	53                   	push   ebx
c00184b9:	50                   	push   eax
c00184ba:	e8 18 53 00 00       	call   c001d7d7 <Thr::executeDLL(unsigned long, void*)>
c00184bf:	83 c4 10             	add    esp,0x10
c00184c2:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c00184c9:	83 ec 08             	sub    esp,0x8
c00184cc:	6a 12                	push   0x12
c00184ce:	50                   	push   eax
c00184cf:	e8 24 bd ff ff       	call   c00141f8 <getDevicesOfType(DeviceType)>
c00184d4:	83 c4 0c             	add    esp,0xc
c00184d7:	83 ec 0c             	sub    esp,0xc
c00184da:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00184e1:	50                   	push   eax
c00184e2:	e8 7d 0b 01 00       	call   c0029064 <LinkedList<Device>::isEmpty()>
c00184e7:	83 c4 10             	add    esp,0x10
c00184ea:	83 f0 01             	xor    eax,0x1
c00184ed:	84 c0                	test   al,al
c00184ef:	0f 84 43 01 00 00    	je     c0018638 <ACPI::open(int, int, void*)+0x226>
c00184f5:	83 ec 0c             	sub    esp,0xc
c00184f8:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00184ff:	50                   	push   eax
c0018500:	e8 7b 0b 01 00       	call   c0029080 <LinkedList<Device>::getFirstElement()>
c0018505:	83 c4 10             	add    esp,0x10
c0018508:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c001850f:	83 ec 0c             	sub    esp,0xc
c0018512:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018519:	50                   	push   eax
c001851a:	e8 69 0b 01 00       	call   c0029088 <LinkedList<Device>::removeFirst()>
c001851f:	83 c4 10             	add    esp,0x10
c0018522:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0018529:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0018530:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c0018537:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001853b:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0018541:	ba 09 00 00 00       	mov    edx,0x9
c0018546:	fc                   	cld    
c0018547:	89 c7                	mov    edi,eax
c0018549:	89 de                	mov    esi,ebx
c001854b:	89 d1                	mov    ecx,edx
c001854d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001854f:	83 ec 08             	sub    esp,0x8
c0018552:	8d 44 24 38          	lea    eax,[esp+0x38]
c0018556:	50                   	push   eax
c0018557:	83 ec 24             	sub    esp,0x24
c001855a:	89 e0                	mov    eax,esp
c001855c:	89 c3                	mov    ebx,eax
c001855e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018562:	ba 09 00 00 00       	mov    edx,0x9
c0018567:	89 df                	mov    edi,ebx
c0018569:	89 c6                	mov    esi,eax
c001856b:	89 d1                	mov    ecx,edx
c001856d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001856f:	e8 44 a9 00 00       	call   c0022eb8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0018574:	83 c4 30             	add    esp,0x30
c0018577:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c001857e:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0018586:	0f 84 4b ff ff ff    	je     c00184d7 <ACPI::open(int, int, void*)+0xc5>
c001858c:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0018597:	83 ec 0c             	sub    esp,0xc
c001859a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00185a1:	e8 3d 74 ff ff       	call   c000f9e3 <malloc>
c00185a6:	83 c4 10             	add    esp,0x10
c00185a9:	89 c3                	mov    ebx,eax
c00185ab:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c00185b0:	83 ec 04             	sub    esp,0x4
c00185b3:	50                   	push   eax
c00185b4:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00185bb:	53                   	push   ebx
c00185bc:	e8 d9 a9 ff ff       	call   c0012f9a <File::File(char const*, Process*)>
c00185c1:	83 c4 10             	add    esp,0x10
c00185c4:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00185cb:	83 ec 0c             	sub    esp,0xc
c00185ce:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00185d5:	e8 92 ac ff ff       	call   c001326c <File::exists()>
c00185da:	83 c4 10             	add    esp,0x10
c00185dd:	84 c0                	test   al,al
c00185df:	74 27                	je     c0018608 <ACPI::open(int, int, void*)+0x1f6>
c00185e1:	83 ec 08             	sub    esp,0x8
c00185e4:	6a 01                	push   0x1
c00185e6:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00185ed:	e8 b4 4f 00 00       	call   c001d5a6 <Thr::loadDLL(char const*, bool)>
c00185f2:	83 c4 10             	add    esp,0x10
c00185f5:	83 ec 08             	sub    esp,0x8
c00185f8:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00185ff:	50                   	push   eax
c0018600:	e8 d2 51 00 00       	call   c001d7d7 <Thr::executeDLL(unsigned long, void*)>
c0018605:	83 c4 10             	add    esp,0x10
c0018608:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0018610:	0f 84 c1 fe ff ff    	je     c00184d7 <ACPI::open(int, int, void*)+0xc5>
c0018616:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001861d:	8b 00                	mov    eax,DWORD PTR [eax]
c001861f:	83 c0 08             	add    eax,0x8
c0018622:	8b 00                	mov    eax,DWORD PTR [eax]
c0018624:	83 ec 0c             	sub    esp,0xc
c0018627:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001862e:	ff d0                	call   eax
c0018630:	83 c4 10             	add    esp,0x10
c0018633:	e9 9f fe ff ff       	jmp    c00184d7 <ACPI::open(int, int, void*)+0xc5>
c0018638:	83 ec 0c             	sub    esp,0xc
c001863b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018642:	50                   	push   eax
c0018643:	e8 1a 0a 01 00       	call   c0029062 <LinkedList<Device>::~LinkedList()>
c0018648:	83 c4 10             	add    esp,0x10
c001864b:	8b 1d e8 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6e8
c0018651:	83 ec 08             	sub    esp,0x8
c0018654:	6a 01                	push   0x1
c0018656:	68 5b be 02 c0       	push   0xc002be5b
c001865b:	e8 46 4f 00 00       	call   c001d5a6 <Thr::loadDLL(char const*, bool)>
c0018660:	83 c4 10             	add    esp,0x10
c0018663:	83 ec 08             	sub    esp,0x8
c0018666:	53                   	push   ebx
c0018667:	50                   	push   eax
c0018668:	e8 6a 51 00 00       	call   c001d7d7 <Thr::executeDLL(unsigned long, void*)>
c001866d:	83 c4 10             	add    esp,0x10
c0018670:	8b 1d e8 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6e8
c0018676:	83 ec 08             	sub    esp,0x8
c0018679:	6a 01                	push   0x1
c001867b:	68 78 be 02 c0       	push   0xc002be78
c0018680:	e8 21 4f 00 00       	call   c001d5a6 <Thr::loadDLL(char const*, bool)>
c0018685:	83 c4 10             	add    esp,0x10
c0018688:	83 ec 08             	sub    esp,0x8
c001868b:	53                   	push   ebx
c001868c:	50                   	push   eax
c001868d:	e8 45 51 00 00       	call   c001d7d7 <Thr::executeDLL(unsigned long, void*)>
c0018692:	83 c4 10             	add    esp,0x10
c0018695:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c001869a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00186a0:	83 e0 04             	and    eax,0x4
c00186a3:	84 c0                	test   al,al
c00186a5:	0f 84 0d 01 00 00    	je     c00187b8 <ACPI::open(int, int, void*)+0x3a6>
c00186ab:	83 ec 0c             	sub    esp,0xc
c00186ae:	68 95 be 02 c0       	push   0xc002be95
c00186b3:	e8 85 73 ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c00186b8:	83 c4 10             	add    esp,0x10
c00186bb:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00186c6:	83 ec 0c             	sub    esp,0xc
c00186c9:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00186d0:	e8 0e 73 ff ff       	call   c000f9e3 <malloc>
c00186d5:	83 c4 10             	add    esp,0x10
c00186d8:	89 c3                	mov    ebx,eax
c00186da:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c00186df:	83 ec 04             	sub    esp,0x4
c00186e2:	50                   	push   eax
c00186e3:	68 b2 be 02 c0       	push   0xc002beb2
c00186e8:	53                   	push   ebx
c00186e9:	e8 ac a8 ff ff       	call   c0012f9a <File::File(char const*, Process*)>
c00186ee:	83 c4 10             	add    esp,0x10
c00186f1:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c00186f8:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018700:	74 1a                	je     c001871c <ACPI::open(int, int, void*)+0x30a>
c0018702:	83 ec 0c             	sub    esp,0xc
c0018705:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001870c:	e8 5b ab ff ff       	call   c001326c <File::exists()>
c0018711:	83 c4 10             	add    esp,0x10
c0018714:	84 c0                	test   al,al
c0018716:	74 04                	je     c001871c <ACPI::open(int, int, void*)+0x30a>
c0018718:	b0 01                	mov    al,0x1
c001871a:	eb 02                	jmp    c001871e <ACPI::open(int, int, void*)+0x30c>
c001871c:	b0 00                	mov    al,0x0
c001871e:	84 c0                	test   al,al
c0018720:	74 25                	je     c0018747 <ACPI::open(int, int, void*)+0x335>
c0018722:	83 ec 08             	sub    esp,0x8
c0018725:	6a 01                	push   0x1
c0018727:	68 b2 be 02 c0       	push   0xc002beb2
c001872c:	e8 75 4e 00 00       	call   c001d5a6 <Thr::loadDLL(char const*, bool)>
c0018731:	83 c4 10             	add    esp,0x10
c0018734:	83 ec 08             	sub    esp,0x8
c0018737:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c001873e:	50                   	push   eax
c001873f:	e8 93 50 00 00       	call   c001d7d7 <Thr::executeDLL(unsigned long, void*)>
c0018744:	83 c4 10             	add    esp,0x10
c0018747:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001874f:	74 27                	je     c0018778 <ACPI::open(int, int, void*)+0x366>
c0018751:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018759:	74 1d                	je     c0018778 <ACPI::open(int, int, void*)+0x366>
c001875b:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0018762:	8b 00                	mov    eax,DWORD PTR [eax]
c0018764:	83 c0 08             	add    eax,0x8
c0018767:	8b 00                	mov    eax,DWORD PTR [eax]
c0018769:	83 ec 0c             	sub    esp,0xc
c001876c:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018773:	ff d0                	call   eax
c0018775:	83 c4 10             	add    esp,0x10
c0018778:	a1 88 ef 02 c0       	mov    eax,ds:0xc002ef88
c001877d:	83 ec 08             	sub    esp,0x8
c0018780:	68 cf be 02 c0       	push   0xc002becf
c0018785:	50                   	push   eax
c0018786:	e8 d4 f2 ff ff       	call   c0017a5f <findDataTable(unsigned char*, char*)>
c001878b:	83 c4 10             	add    esp,0x10
c001878e:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c0018795:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c001879d:	74 19                	je     c00187b8 <ACPI::open(int, int, void*)+0x3a6>
c001879f:	83 ec 08             	sub    esp,0x8
c00187a2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00187a9:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c00187b0:	e8 fd fb ff ff       	call   c00183b2 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00187b5:	83 c4 10             	add    esp,0x10
c00187b8:	b8 00 00 00 00       	mov    eax,0x0
c00187bd:	81 c4 60 01 00 00    	add    esp,0x160
c00187c3:	5b                   	pop    ebx
c00187c4:	5e                   	pop    esi
c00187c5:	5f                   	pop    edi
c00187c6:	c3                   	ret    
c00187c7:	90                   	nop

c00187c8 <CPU::close(int, int, void*)>:
c00187c8:	31 c0                	xor    eax,eax
c00187ca:	c3                   	ret    
c00187cb:	90                   	nop

c00187cc <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00187cc:	55                   	push   ebp
c00187cd:	57                   	push   edi
c00187ce:	56                   	push   esi
c00187cf:	53                   	push   ebx
c00187d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00187d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00187d8:	89 ce                	mov    esi,ecx
c00187da:	89 d5                	mov    ebp,edx
c00187dc:	80 f9 04             	cmp    cl,0x4
c00187df:	75 28                	jne    c0018809 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00187e1:	8d 42 f9             	lea    eax,[edx-0x7]
c00187e4:	3c 03                	cmp    al,0x3
c00187e6:	0f 86 63 01 00 00    	jbe    c001894f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00187ec:	80 fa 03             	cmp    dl,0x3
c00187ef:	0f 84 5a 01 00 00    	je     c001894f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00187f5:	8d 7a f2             	lea    edi,[edx-0xe]
c00187f8:	b8 10 db 02 c0       	mov    eax,0xc002db10
c00187fd:	89 fb                	mov    ebx,edi
c00187ff:	80 fb 01             	cmp    bl,0x1
c0018802:	77 4e                	ja     c0018852 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018804:	e9 52 01 00 00       	jmp    c001895b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018809:	80 f9 05             	cmp    cl,0x5
c001880c:	75 4d                	jne    c001885b <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001880e:	b8 20 db 02 c0       	mov    eax,0xc002db20
c0018813:	80 fa 03             	cmp    dl,0x3
c0018816:	0f 86 3f 01 00 00    	jbe    c001895b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001881c:	8d 7a fa             	lea    edi,[edx-0x6]
c001881f:	b8 30 db 02 c0       	mov    eax,0xc002db30
c0018824:	89 fb                	mov    ebx,edi
c0018826:	80 fb 01             	cmp    bl,0x1
c0018829:	0f 86 2c 01 00 00    	jbe    c001895b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001882f:	b8 40 db 02 c0       	mov    eax,0xc002db40
c0018834:	80 fa 08             	cmp    dl,0x8
c0018837:	0f 84 1e 01 00 00    	je     c001895b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001883d:	89 d7                	mov    edi,edx
c001883f:	b8 50 db 02 c0       	mov    eax,0xc002db50
c0018844:	83 e7 fb             	and    edi,0xfffffffb
c0018847:	89 fb                	mov    ebx,edi
c0018849:	80 fb 09             	cmp    bl,0x9
c001884c:	0f 84 09 01 00 00    	je     c001895b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018852:	31 c0                	xor    eax,eax
c0018854:	89 eb                	mov    ebx,ebp
c0018856:	0f b6 fb             	movzx  edi,bl
c0018859:	eb 30                	jmp    c001888b <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001885b:	31 c0                	xor    eax,eax
c001885d:	80 f9 06             	cmp    cl,0x6
c0018860:	75 f2                	jne    c0018854 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018862:	80 fa 0a             	cmp    dl,0xa
c0018865:	77 ed                	ja     c0018854 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018867:	bf de 05 00 00       	mov    edi,0x5de
c001886c:	0f a3 d7             	bt     edi,edx
c001886f:	73 e3                	jae    c0018854 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018871:	b8 60 db 02 c0       	mov    eax,0xc002db60
c0018876:	e9 e0 00 00 00       	jmp    c001895b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001887b:	39 c7                	cmp    edi,eax
c001887d:	0f 84 d3 00 00 00    	je     c0018956 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018883:	40                   	inc    eax
c0018884:	3d d0 00 00 00       	cmp    eax,0xd0
c0018889:	74 09                	je     c0018894 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001888b:	89 f3                	mov    ebx,esi
c001888d:	80 fb 0f             	cmp    bl,0xf
c0018890:	75 f1                	jne    c0018883 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018892:	eb e7                	jmp    c001887b <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018894:	80 f9 10             	cmp    cl,0x10
c0018897:	75 14                	jne    c00188ad <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018899:	8d 42 fc             	lea    eax,[edx-0x4]
c001889c:	83 e0 fb             	and    eax,0xfffffffb
c001889f:	3c 02                	cmp    al,0x2
c00188a1:	76 34                	jbe    c00188d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00188a3:	b8 55 c0 02 c0       	mov    eax,0xc002c055
c00188a8:	80 fa 02             	cmp    dl,0x2
c00188ab:	eb 24                	jmp    c00188d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00188ad:	80 f9 11             	cmp    cl,0x11
c00188b0:	75 13                	jne    c00188c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00188b2:	b8 55 c0 02 c0       	mov    eax,0xc002c055
c00188b7:	80 fa 03             	cmp    dl,0x3
c00188ba:	0f 85 9b 00 00 00    	jne    c001895b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188c0:	e9 91 00 00 00       	jmp    c0018956 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00188c5:	80 f9 12             	cmp    cl,0x12
c00188c8:	75 14                	jne    c00188de <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00188ca:	b8 55 c0 02 c0       	mov    eax,0xc002c055
c00188cf:	fe ca                	dec    dl
c00188d1:	0f 85 84 00 00 00    	jne    c001895b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188d7:	b8 80 db 02 c0       	mov    eax,0xc002db80
c00188dc:	eb 7d                	jmp    c001895b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188de:	80 f9 14             	cmp    cl,0x14
c00188e1:	75 12                	jne    c00188f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00188e3:	4a                   	dec    edx
c00188e4:	b8 55 c0 02 c0       	mov    eax,0xc002c055
c00188e9:	80 fa 01             	cmp    dl,0x1
c00188ec:	77 6d                	ja     c001895b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188ee:	b8 90 db 02 c0       	mov    eax,0xc002db90
c00188f3:	eb 66                	jmp    c001895b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188f5:	80 f9 15             	cmp    cl,0x15
c00188f8:	75 31                	jne    c001892b <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00188fa:	b8 a0 db 02 c0       	mov    eax,0xc002dba0
c00188ff:	80 fa 01             	cmp    dl,0x1
c0018902:	74 57                	je     c001895b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018904:	b8 55 c0 02 c0       	mov    eax,0xc002c055
c0018909:	80 fa 13             	cmp    dl,0x13
c001890c:	76 0c                	jbe    c001891a <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001890e:	80 fa 30             	cmp    dl,0x30
c0018911:	75 48                	jne    c001895b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018913:	b8 c0 db 02 c0       	mov    eax,0xc002dbc0
c0018918:	eb 41                	jmp    c001895b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001891a:	b9 04 00 09 00       	mov    ecx,0x90004
c001891f:	0f a3 d1             	bt     ecx,edx
c0018922:	73 37                	jae    c001895b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018924:	b8 b0 db 02 c0       	mov    eax,0xc002dbb0
c0018929:	eb 30                	jmp    c001895b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001892b:	b8 55 c0 02 c0       	mov    eax,0xc002c055
c0018930:	80 f9 16             	cmp    cl,0x16
c0018933:	75 26                	jne    c001895b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018935:	b8 d0 db 02 c0       	mov    eax,0xc002dbd0
c001893a:	84 d2                	test   dl,dl
c001893c:	74 1d                	je     c001895b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001893e:	b8 55 c0 02 c0       	mov    eax,0xc002c055
c0018943:	80 fa 30             	cmp    dl,0x30
c0018946:	75 13                	jne    c001895b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018948:	b8 e0 db 02 c0       	mov    eax,0xc002dbe0
c001894d:	eb 0c                	jmp    c001895b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001894f:	b8 00 db 02 c0       	mov    eax,0xc002db00
c0018954:	eb 05                	jmp    c001895b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018956:	b8 70 db 02 c0       	mov    eax,0xc002db70
c001895b:	5b                   	pop    ebx
c001895c:	5e                   	pop    esi
c001895d:	5f                   	pop    edi
c001895e:	5d                   	pop    ebp
c001895f:	c3                   	ret    

c0018960 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018960:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018964:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018968:	80 f9 04             	cmp    cl,0x4
c001896b:	75 6b                	jne    c00189d8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c001896d:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018972:	80 fa 01             	cmp    dl,0x1
c0018975:	0f 86 92 02 00 00    	jbe    c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001897b:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018980:	80 fa 02             	cmp    dl,0x2
c0018983:	0f 84 84 02 00 00    	je     c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018989:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c001898e:	80 fa 03             	cmp    dl,0x3
c0018991:	0f 84 76 02 00 00    	je     c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018997:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c001899c:	80 fa 04             	cmp    dl,0x4
c001899f:	0f 84 68 02 00 00    	je     c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189a5:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c00189aa:	80 fa 05             	cmp    dl,0x5
c00189ad:	0f 84 5a 02 00 00    	je     c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189b3:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c00189b8:	80 fa 07             	cmp    dl,0x7
c00189bb:	0f 84 4c 02 00 00    	je     c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189c1:	83 ea 08             	sub    edx,0x8
c00189c4:	b8 55 c0 02 c0       	mov    eax,0xc002c055
c00189c9:	80 fa 01             	cmp    dl,0x1
c00189cc:	0f 87 3b 02 00 00    	ja     c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189d2:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c00189d7:	c3                   	ret    
c00189d8:	80 f9 05             	cmp    cl,0x5
c00189db:	75 45                	jne    c0018a22 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00189dd:	8d 4a ff             	lea    ecx,[edx-0x1]
c00189e0:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c00189e5:	80 f9 02             	cmp    cl,0x2
c00189e8:	0f 86 1f 02 00 00    	jbe    c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ee:	80 fa 04             	cmp    dl,0x4
c00189f1:	0f 84 f3 01 00 00    	je     c0018bea <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00189f7:	80 fa 07             	cmp    dl,0x7
c00189fa:	0f 84 0d 02 00 00    	je     c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a00:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018a05:	80 fa 08             	cmp    dl,0x8
c0018a08:	0f 84 ff 01 00 00    	je     c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a0e:	b8 55 c0 02 c0       	mov    eax,0xc002c055
c0018a13:	80 fa 09             	cmp    dl,0x9
c0018a16:	0f 85 f1 01 00 00    	jne    c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a1c:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0018a21:	c3                   	ret    
c0018a22:	80 f9 06             	cmp    cl,0x6
c0018a25:	0f 85 85 01 00 00    	jne    c0018bb0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018a2b:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c0018a30:	80 fa 01             	cmp    dl,0x1
c0018a33:	0f 84 d4 01 00 00    	je     c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a39:	8d 42 fb             	lea    eax,[edx-0x5]
c0018a3c:	3c 01                	cmp    al,0x1
c0018a3e:	0f 86 ac 01 00 00    	jbe    c0018bf0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a44:	80 fa 03             	cmp    dl,0x3
c0018a47:	0f 84 a3 01 00 00    	je     c0018bf0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a4d:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018a50:	b8 10 da 02 c0       	mov    eax,0xc002da10
c0018a55:	80 f9 01             	cmp    cl,0x1
c0018a58:	0f 86 af 01 00 00    	jbe    c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a5e:	80 fa 09             	cmp    dl,0x9
c0018a61:	0f 84 8f 01 00 00    	je     c0018bf6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018a67:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018a6a:	80 f9 01             	cmp    cl,0x1
c0018a6d:	0f 86 9a 01 00 00    	jbe    c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a73:	b8 20 da 02 c0       	mov    eax,0xc002da20
c0018a78:	80 fa 0d             	cmp    dl,0xd
c0018a7b:	0f 84 8c 01 00 00    	je     c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a81:	b8 30 da 02 c0       	mov    eax,0xc002da30
c0018a86:	80 fa 0e             	cmp    dl,0xe
c0018a89:	0f 84 7e 01 00 00    	je     c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a8f:	b8 40 da 02 c0       	mov    eax,0xc002da40
c0018a94:	80 fa 0f             	cmp    dl,0xf
c0018a97:	0f 84 70 01 00 00    	je     c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a9d:	b8 20 da 02 c0       	mov    eax,0xc002da20
c0018aa2:	80 fa 15             	cmp    dl,0x15
c0018aa5:	0f 84 62 01 00 00    	je     c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aab:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018aae:	b8 40 da 02 c0       	mov    eax,0xc002da40
c0018ab3:	80 f9 01             	cmp    cl,0x1
c0018ab6:	0f 86 51 01 00 00    	jbe    c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018abc:	80 fa 1a             	cmp    dl,0x1a
c0018abf:	0f 84 37 01 00 00    	je     c0018bfc <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018ac5:	80 fa 1c             	cmp    dl,0x1c
c0018ac8:	0f 84 34 01 00 00    	je     c0018c02 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018ace:	80 fa 1d             	cmp    dl,0x1d
c0018ad1:	0f 84 36 01 00 00    	je     c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad7:	b8 70 da 02 c0       	mov    eax,0xc002da70
c0018adc:	80 fa 25             	cmp    dl,0x25
c0018adf:	0f 84 28 01 00 00    	je     c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae5:	8d 4a da             	lea    ecx,[edx-0x26]
c0018ae8:	b8 60 da 02 c0       	mov    eax,0xc002da60
c0018aed:	80 f9 01             	cmp    cl,0x1
c0018af0:	0f 86 17 01 00 00    	jbe    c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018af6:	b8 80 da 02 c0       	mov    eax,0xc002da80
c0018afb:	80 fa 2a             	cmp    dl,0x2a
c0018afe:	0f 84 09 01 00 00    	je     c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b04:	b8 70 da 02 c0       	mov    eax,0xc002da70
c0018b09:	80 fa 2c             	cmp    dl,0x2c
c0018b0c:	0f 84 fb 00 00 00    	je     c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b12:	b8 80 da 02 c0       	mov    eax,0xc002da80
c0018b17:	80 fa 2d             	cmp    dl,0x2d
c0018b1a:	0f 84 ed 00 00 00    	je     c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b20:	b8 50 da 02 c0       	mov    eax,0xc002da50
c0018b25:	80 fa 2e             	cmp    dl,0x2e
c0018b28:	0f 84 df 00 00 00    	je     c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b2e:	b8 70 da 02 c0       	mov    eax,0xc002da70
c0018b33:	80 fa 2f             	cmp    dl,0x2f
c0018b36:	0f 84 d1 00 00 00    	je     c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b3c:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018b3f:	b8 60 da 02 c0       	mov    eax,0xc002da60
c0018b44:	80 f9 01             	cmp    cl,0x1
c0018b47:	0f 86 c0 00 00 00    	jbe    c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b4d:	b8 90 da 02 c0       	mov    eax,0xc002da90
c0018b52:	80 fa 37             	cmp    dl,0x37
c0018b55:	0f 84 b2 00 00 00    	je     c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b5b:	b8 a0 da 02 c0       	mov    eax,0xc002daa0
c0018b60:	80 fa 3a             	cmp    dl,0x3a
c0018b63:	0f 84 a4 00 00 00    	je     c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b69:	b8 b0 da 02 c0       	mov    eax,0xc002dab0
c0018b6e:	80 fa 3c             	cmp    dl,0x3c
c0018b71:	0f 84 96 00 00 00    	je     c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b77:	b8 c0 da 02 c0       	mov    eax,0xc002dac0
c0018b7c:	80 fa 3d             	cmp    dl,0x3d
c0018b7f:	0f 84 88 00 00 00    	je     c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b85:	b8 a0 da 02 c0       	mov    eax,0xc002daa0
c0018b8a:	80 fa 3e             	cmp    dl,0x3e
c0018b8d:	74 7e                	je     c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b8f:	8d 42 bb             	lea    eax,[edx-0x45]
c0018b92:	3c 01                	cmp    al,0x1
c0018b94:	76 72                	jbe    c0018c08 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b96:	80 fa 3f             	cmp    dl,0x3f
c0018b99:	74 6d                	je     c0018c08 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b9b:	80 fa 4a             	cmp    dl,0x4a
c0018b9e:	74 0a                	je     c0018baa <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018ba0:	b8 55 c0 02 c0       	mov    eax,0xc002c055
c0018ba5:	80 fa 4d             	cmp    dl,0x4d
c0018ba8:	75 63                	jne    c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018baa:	b8 90 da 02 c0       	mov    eax,0xc002da90
c0018baf:	c3                   	ret    
c0018bb0:	b8 55 c0 02 c0       	mov    eax,0xc002c055
c0018bb5:	80 f9 0b             	cmp    cl,0xb
c0018bb8:	75 0a                	jne    c0018bc4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018bba:	fe ca                	dec    dl
c0018bbc:	75 4f                	jne    c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bbe:	b8 d0 da 02 c0       	mov    eax,0xc002dad0
c0018bc3:	c3                   	ret    
c0018bc4:	80 f9 0f             	cmp    cl,0xf
c0018bc7:	75 44                	jne    c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bc9:	b8 e0 da 02 c0       	mov    eax,0xc002dae0
c0018bce:	80 fa 02             	cmp    dl,0x2
c0018bd1:	76 3a                	jbe    c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bd3:	8d 42 fd             	lea    eax,[edx-0x3]
c0018bd6:	3c 01                	cmp    al,0x1
c0018bd8:	76 0a                	jbe    c0018be4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018bda:	b8 55 c0 02 c0       	mov    eax,0xc002c055
c0018bdf:	80 fa 06             	cmp    dl,0x6
c0018be2:	75 29                	jne    c0018c0d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018be4:	b8 f0 da 02 c0       	mov    eax,0xc002daf0
c0018be9:	c3                   	ret    
c0018bea:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018bef:	c3                   	ret    
c0018bf0:	b8 00 da 02 c0       	mov    eax,0xc002da00
c0018bf5:	c3                   	ret    
c0018bf6:	b8 20 da 02 c0       	mov    eax,0xc002da20
c0018bfb:	c3                   	ret    
c0018bfc:	b8 50 da 02 c0       	mov    eax,0xc002da50
c0018c01:	c3                   	ret    
c0018c02:	b8 60 da 02 c0       	mov    eax,0xc002da60
c0018c07:	c3                   	ret    
c0018c08:	b8 b0 da 02 c0       	mov    eax,0xc002dab0
c0018c0d:	c3                   	ret    

c0018c0e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018c0e:	60                   	pusha  
c0018c0f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c1b:	9c                   	pushf  
c0018c1c:	fa                   	cli    
c0018c1d:	0f 09                	wbinvd 
c0018c1f:	0f 30                	wrmsr  
c0018c21:	9d                   	popf   
c0018c22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018c26:	89 02                	mov    DWORD PTR [edx],eax
c0018c28:	61                   	popa   
c0018c29:	c3                   	ret    

c0018c2a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018c2a:	60                   	pusha  
c0018c2b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c2f:	9c                   	pushf  
c0018c30:	fa                   	cli    
c0018c31:	0f 09                	wbinvd 
c0018c33:	31 c0                	xor    eax,eax
c0018c35:	31 d2                	xor    edx,edx
c0018c37:	0f 32                	rdmsr  
c0018c39:	9d                   	popf   
c0018c3a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018c3e:	89 02                	mov    DWORD PTR [edx],eax
c0018c40:	61                   	popa   
c0018c41:	c3                   	ret    

c0018c42 <CPU::AMD_K6_writeback(int, int, int)>:
c0018c42:	56                   	push   esi
c0018c43:	53                   	push   ebx
c0018c44:	83 ec 10             	sub    esp,0x10
c0018c47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c4b:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018c50:	75 5d                	jne    c0018caf <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c52:	83 f8 08             	cmp    eax,0x8
c0018c55:	75 09                	jne    c0018c60 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018c57:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018c5c:	7e 13                	jle    c0018c71 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c5e:	eb 30                	jmp    c0018c90 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c60:	83 f8 06             	cmp    eax,0x6
c0018c63:	7c 4a                	jl     c0018caf <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c65:	83 f8 07             	cmp    eax,0x7
c0018c68:	7e 07                	jle    c0018c71 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c6a:	83 f8 09             	cmp    eax,0x9
c0018c6d:	74 21                	je     c0018c90 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c6f:	eb 3e                	jmp    c0018caf <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c71:	89 e6                	mov    esi,esp
c0018c73:	8b 1d 28 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e728
c0018c79:	56                   	push   esi
c0018c7a:	c1 eb 15             	shr    ebx,0x15
c0018c7d:	68 82 00 00 c0       	push   0xc0000082
c0018c82:	83 e3 7e             	and    ebx,0x7e
c0018c85:	e8 a0 ff ff ff       	call   c0018c2a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c8a:	56                   	push   esi
c0018c8b:	6a 00                	push   0x0
c0018c8d:	53                   	push   ebx
c0018c8e:	eb 12                	jmp    c0018ca2 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018c90:	89 e3                	mov    ebx,esp
c0018c92:	53                   	push   ebx
c0018c93:	68 82 00 00 c0       	push   0xc0000082
c0018c98:	e8 8d ff ff ff       	call   c0018c2a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c9d:	53                   	push   ebx
c0018c9e:	6a 00                	push   0x0
c0018ca0:	6a 00                	push   0x0
c0018ca2:	68 82 00 00 c0       	push   0xc0000082
c0018ca7:	e8 62 ff ff ff       	call   c0018c0e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018cac:	83 c4 18             	add    esp,0x18
c0018caf:	83 c4 10             	add    esp,0x10
c0018cb2:	5b                   	pop    ebx
c0018cb3:	5e                   	pop    esi
c0018cb4:	c3                   	ret    
c0018cb5:	90                   	nop

c0018cb6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018cb6:	55                   	push   ebp
c0018cb7:	57                   	push   edi
c0018cb8:	56                   	push   esi
c0018cb9:	53                   	push   ebx
c0018cba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cbe:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018cc2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018cc6:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018cca:	39 05 00 dc 02 c0    	cmp    DWORD PTR ds:0xc002dc00,eax
c0018cd0:	75 23                	jne    c0018cf5 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018cd2:	a1 ec f1 02 c0       	mov    eax,ds:0xc002f1ec
c0018cd7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018cdb:	89 06                	mov    DWORD PTR [esi],eax
c0018cdd:	a1 e8 f1 02 c0       	mov    eax,ds:0xc002f1e8
c0018ce2:	89 07                	mov    DWORD PTR [edi],eax
c0018ce4:	a1 e4 f1 02 c0       	mov    eax,ds:0xc002f1e4
c0018ce9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018cec:	a1 e0 f1 02 c0       	mov    eax,ds:0xc002f1e0
c0018cf1:	89 02                	mov    DWORD PTR [edx],eax
c0018cf3:	eb 3f                	jmp    c0018d34 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018cf5:	31 c9                	xor    ecx,ecx
c0018cf7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cfb:	0f a2                	cpuid  
c0018cfd:	89 06                	mov    DWORD PTR [esi],eax
c0018cff:	89 1f                	mov    DWORD PTR [edi],ebx
c0018d01:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d05:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018d08:	89 10                	mov    DWORD PTR [eax],edx
c0018d0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d0e:	a3 00 dc 02 c0       	mov    ds:0xc002dc00,eax
c0018d13:	8b 06                	mov    eax,DWORD PTR [esi]
c0018d15:	a3 ec f1 02 c0       	mov    ds:0xc002f1ec,eax
c0018d1a:	8b 07                	mov    eax,DWORD PTR [edi]
c0018d1c:	a3 e8 f1 02 c0       	mov    ds:0xc002f1e8,eax
c0018d21:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018d24:	a3 e4 f1 02 c0       	mov    ds:0xc002f1e4,eax
c0018d29:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d2f:	a3 e0 f1 02 c0       	mov    ds:0xc002f1e0,eax
c0018d34:	5b                   	pop    ebx
c0018d35:	5e                   	pop    esi
c0018d36:	5f                   	pop    edi
c0018d37:	5d                   	pop    ebp
c0018d38:	c3                   	ret    
c0018d39:	90                   	nop

c0018d3a <CPU::cpuidCheckEDX(unsigned int)>:
c0018d3a:	83 ec 10             	sub    esp,0x10
c0018d3d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d41:	50                   	push   eax
c0018d42:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d46:	50                   	push   eax
c0018d47:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d4b:	50                   	push   eax
c0018d4c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d50:	50                   	push   eax
c0018d51:	6a 01                	push   0x1
c0018d53:	e8 5e ff ff ff       	call   c0018cb6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d58:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d5c:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018d60:	0f 95 c0             	setne  al
c0018d63:	83 c4 24             	add    esp,0x24
c0018d66:	c3                   	ret    
c0018d67:	90                   	nop

c0018d68 <CPU::cpuidCheckECX(unsigned int)>:
c0018d68:	83 ec 10             	sub    esp,0x10
c0018d6b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d6f:	50                   	push   eax
c0018d70:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d74:	50                   	push   eax
c0018d75:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d79:	50                   	push   eax
c0018d7a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d7e:	50                   	push   eax
c0018d7f:	6a 01                	push   0x1
c0018d81:	e8 30 ff ff ff       	call   c0018cb6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d86:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d8a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d8e:	0f 95 c0             	setne  al
c0018d91:	83 c4 24             	add    esp,0x24
c0018d94:	c3                   	ret    
c0018d95:	90                   	nop

c0018d96 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018d96:	83 ec 10             	sub    esp,0x10
c0018d99:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d9d:	50                   	push   eax
c0018d9e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018da2:	50                   	push   eax
c0018da3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018da7:	50                   	push   eax
c0018da8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dac:	50                   	push   eax
c0018dad:	6a 07                	push   0x7
c0018daf:	e8 02 ff ff ff       	call   c0018cb6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018db4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018db8:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018dbc:	0f 95 c0             	setne  al
c0018dbf:	83 c4 24             	add    esp,0x24
c0018dc2:	c3                   	ret    
c0018dc3:	90                   	nop

c0018dc4 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018dc4:	83 ec 10             	sub    esp,0x10
c0018dc7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dcb:	50                   	push   eax
c0018dcc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dd0:	50                   	push   eax
c0018dd1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dd5:	50                   	push   eax
c0018dd6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dda:	50                   	push   eax
c0018ddb:	6a 07                	push   0x7
c0018ddd:	e8 d4 fe ff ff       	call   c0018cb6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018de2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018de6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018dea:	0f 95 c0             	setne  al
c0018ded:	83 c4 24             	add    esp,0x24
c0018df0:	c3                   	ret    
c0018df1:	90                   	nop

c0018df2 <CPU::CPU()>:
c0018df2:	83 ec 0c             	sub    esp,0xc
c0018df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018df9:	83 ec 08             	sub    esp,0x8
c0018dfc:	68 55 c0 02 c0       	push   0xc002c055
c0018e01:	50                   	push   eax
c0018e02:	e8 71 b2 ff ff       	call   c0014078 <Device::Device(char const*)>
c0018e07:	83 c4 10             	add    esp,0x10
c0018e0a:	ba 78 c2 02 c0       	mov    edx,0xc002c278
c0018e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e13:	89 10                	mov    DWORD PTR [eax],edx
c0018e15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e19:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018e23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e27:	05 78 01 00 00       	add    eax,0x178
c0018e2c:	83 ec 0c             	sub    esp,0xc
c0018e2f:	50                   	push   eax
c0018e30:	e8 93 62 ff ff       	call   c000f0c8 <GDT::GDT()>
c0018e35:	83 c4 10             	add    esp,0x10
c0018e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e3c:	05 7c 09 00 00       	add    eax,0x97c
c0018e41:	83 ec 0c             	sub    esp,0xc
c0018e44:	50                   	push   eax
c0018e45:	e8 ce 64 ff ff       	call   c000f318 <IDT::IDT()>
c0018e4a:	83 c4 10             	add    esp,0x10
c0018e4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e51:	05 7c 11 00 00       	add    eax,0x117c
c0018e56:	83 ec 0c             	sub    esp,0xc
c0018e59:	50                   	push   eax
c0018e5a:	e8 51 81 ff ff       	call   c0010fb0 <TSS::TSS()>
c0018e5f:	83 c4 10             	add    esp,0x10
c0018e62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e66:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018e6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e71:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018e7b:	90                   	nop
c0018e7c:	83 c4 0c             	add    esp,0xc
c0018e7f:	c3                   	ret    

c0018e80 <CPU::displayFeatures()>:
c0018e80:	c3                   	ret    
c0018e81:	90                   	nop

c0018e82 <CPU::detectFeatures()>:
c0018e82:	55                   	push   ebp
c0018e83:	57                   	push   edi
c0018e84:	56                   	push   esi
c0018e85:	53                   	push   ebx
c0018e86:	83 ec 50             	sub    esp,0x50
c0018e89:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018e8d:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018e97:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018e9e:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018ea4:	6a 0d                	push   0xd
c0018ea6:	6a 00                	push   0x0
c0018ea8:	55                   	push   ebp
c0018ea9:	e8 a2 78 fe ff       	call   c0000750 <memset>
c0018eae:	83 c4 10             	add    esp,0x10
c0018eb1:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0018eb6:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018ebd:	0f 84 22 09 00 00    	je     c00197e5 <CPU::detectFeatures()+0x963>
c0018ec3:	83 ec 0c             	sub    esp,0xc
c0018ec6:	89 ef                	mov    edi,ebp
c0018ec8:	6a 10                	push   0x10
c0018eca:	e8 6b fe ff ff       	call   c0018d3a <CPU::cpuidCheckEDX(unsigned int)>
c0018ecf:	83 e0 01             	and    eax,0x1
c0018ed2:	8d 14 00             	lea    edx,[eax+eax*1]
c0018ed5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018edb:	83 e0 fd             	and    eax,0xfffffffd
c0018ede:	09 d0                	or     eax,edx
c0018ee0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ee6:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018eed:	e8 48 fe ff ff       	call   c0018d3a <CPU::cpuidCheckEDX(unsigned int)>
c0018ef2:	83 e0 01             	and    eax,0x1
c0018ef5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018efc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018f02:	83 e0 fb             	and    eax,0xfffffffb
c0018f05:	09 d0                	or     eax,edx
c0018f07:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f0d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018f14:	e8 21 fe ff ff       	call   c0018d3a <CPU::cpuidCheckEDX(unsigned int)>
c0018f19:	83 e0 01             	and    eax,0x1
c0018f1c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018f23:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018f29:	83 e0 f7             	and    eax,0xfffffff7
c0018f2c:	09 d0                	or     eax,edx
c0018f2e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f34:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018f3b:	e8 fa fd ff ff       	call   c0018d3a <CPU::cpuidCheckEDX(unsigned int)>
c0018f40:	83 e0 01             	and    eax,0x1
c0018f43:	c1 e0 04             	shl    eax,0x4
c0018f46:	88 c2                	mov    dl,al
c0018f48:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018f4e:	83 e0 ef             	and    eax,0xffffffef
c0018f51:	09 d0                	or     eax,edx
c0018f53:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f59:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018f60:	e8 d5 fd ff ff       	call   c0018d3a <CPU::cpuidCheckEDX(unsigned int)>
c0018f65:	83 e0 01             	and    eax,0x1
c0018f68:	c1 e0 05             	shl    eax,0x5
c0018f6b:	88 c2                	mov    dl,al
c0018f6d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018f73:	83 e0 df             	and    eax,0xffffffdf
c0018f76:	09 d0                	or     eax,edx
c0018f78:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018f85:	e8 b0 fd ff ff       	call   c0018d3a <CPU::cpuidCheckEDX(unsigned int)>
c0018f8a:	83 e0 01             	and    eax,0x1
c0018f8d:	8d 14 00             	lea    edx,[eax+eax*1]
c0018f90:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018f96:	83 e0 fd             	and    eax,0xfffffffd
c0018f99:	09 d0                	or     eax,edx
c0018f9b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018fa1:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018fa8:	e8 8d fd ff ff       	call   c0018d3a <CPU::cpuidCheckEDX(unsigned int)>
c0018fad:	83 e0 01             	and    eax,0x1
c0018fb0:	c1 e0 06             	shl    eax,0x6
c0018fb3:	88 c2                	mov    dl,al
c0018fb5:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018fbb:	83 e0 bf             	and    eax,0xffffffbf
c0018fbe:	09 d0                	or     eax,edx
c0018fc0:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018fc6:	58                   	pop    eax
c0018fc7:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018fcb:	50                   	push   eax
c0018fcc:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018fd0:	50                   	push   eax
c0018fd1:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018fd5:	56                   	push   esi
c0018fd6:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018fda:	50                   	push   eax
c0018fdb:	6a 00                	push   0x0
c0018fdd:	e8 d4 fc ff ff       	call   c0018cb6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018fe2:	b8 04 00 00 00       	mov    eax,0x4
c0018fe7:	89 c1                	mov    ecx,eax
c0018fe9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018feb:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018ff1:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018ff5:	89 c1                	mov    ecx,eax
c0018ff7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018ff9:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018fff:	8d 74 24 38          	lea    esi,[esp+0x38]
c0019003:	89 c1                	mov    ecx,eax
c0019005:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019007:	83 c4 18             	add    esp,0x18
c001900a:	68 00 bf 02 c0       	push   0xc002bf00
c001900f:	55                   	push   ebp
c0019010:	e8 83 78 fe ff       	call   c0000898 <strcmp>
c0019015:	83 c4 10             	add    esp,0x10
c0019018:	85 c0                	test   eax,eax
c001901a:	75 0f                	jne    c001902b <CPU::detectFeatures()+0x1a9>
c001901c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019026:	e9 22 02 00 00       	jmp    c001924d <CPU::detectFeatures()+0x3cb>
c001902b:	50                   	push   eax
c001902c:	50                   	push   eax
c001902d:	68 0d bf 02 c0       	push   0xc002bf0d
c0019032:	55                   	push   ebp
c0019033:	e8 60 78 fe ff       	call   c0000898 <strcmp>
c0019038:	83 c4 10             	add    esp,0x10
c001903b:	85 c0                	test   eax,eax
c001903d:	74 dd                	je     c001901c <CPU::detectFeatures()+0x19a>
c001903f:	50                   	push   eax
c0019040:	50                   	push   eax
c0019041:	68 1a bf 02 c0       	push   0xc002bf1a
c0019046:	55                   	push   ebp
c0019047:	e8 4c 78 fe ff       	call   c0000898 <strcmp>
c001904c:	83 c4 10             	add    esp,0x10
c001904f:	85 c0                	test   eax,eax
c0019051:	74 2a                	je     c001907d <CPU::detectFeatures()+0x1fb>
c0019053:	50                   	push   eax
c0019054:	50                   	push   eax
c0019055:	68 27 bf 02 c0       	push   0xc002bf27
c001905a:	55                   	push   ebp
c001905b:	e8 38 78 fe ff       	call   c0000898 <strcmp>
c0019060:	83 c4 10             	add    esp,0x10
c0019063:	85 c0                	test   eax,eax
c0019065:	74 16                	je     c001907d <CPU::detectFeatures()+0x1fb>
c0019067:	50                   	push   eax
c0019068:	50                   	push   eax
c0019069:	68 34 bf 02 c0       	push   0xc002bf34
c001906e:	55                   	push   ebp
c001906f:	e8 24 78 fe ff       	call   c0000898 <strcmp>
c0019074:	83 c4 10             	add    esp,0x10
c0019077:	85 c0                	test   eax,eax
c0019079:	74 48                	je     c00190c3 <CPU::detectFeatures()+0x241>
c001907b:	eb 0f                	jmp    c001908c <CPU::detectFeatures()+0x20a>
c001907d:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019087:	e9 c1 01 00 00       	jmp    c001924d <CPU::detectFeatures()+0x3cb>
c001908c:	50                   	push   eax
c001908d:	50                   	push   eax
c001908e:	68 41 bf 02 c0       	push   0xc002bf41
c0019093:	55                   	push   ebp
c0019094:	e8 ff 77 fe ff       	call   c0000898 <strcmp>
c0019099:	83 c4 10             	add    esp,0x10
c001909c:	85 c0                	test   eax,eax
c001909e:	74 23                	je     c00190c3 <CPU::detectFeatures()+0x241>
c00190a0:	57                   	push   edi
c00190a1:	57                   	push   edi
c00190a2:	68 4e bf 02 c0       	push   0xc002bf4e
c00190a7:	55                   	push   ebp
c00190a8:	e8 eb 77 fe ff       	call   c0000898 <strcmp>
c00190ad:	83 c4 10             	add    esp,0x10
c00190b0:	85 c0                	test   eax,eax
c00190b2:	75 1e                	jne    c00190d2 <CPU::detectFeatures()+0x250>
c00190b4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00190be:	e9 8a 01 00 00       	jmp    c001924d <CPU::detectFeatures()+0x3cb>
c00190c3:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00190cd:	e9 7b 01 00 00       	jmp    c001924d <CPU::detectFeatures()+0x3cb>
c00190d2:	56                   	push   esi
c00190d3:	56                   	push   esi
c00190d4:	68 5b bf 02 c0       	push   0xc002bf5b
c00190d9:	55                   	push   ebp
c00190da:	e8 b9 77 fe ff       	call   c0000898 <strcmp>
c00190df:	83 c4 10             	add    esp,0x10
c00190e2:	85 c0                	test   eax,eax
c00190e4:	75 0f                	jne    c00190f5 <CPU::detectFeatures()+0x273>
c00190e6:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00190f0:	e9 58 01 00 00       	jmp    c001924d <CPU::detectFeatures()+0x3cb>
c00190f5:	51                   	push   ecx
c00190f6:	51                   	push   ecx
c00190f7:	68 1a bf 02 c0       	push   0xc002bf1a
c00190fc:	55                   	push   ebp
c00190fd:	e8 96 77 fe ff       	call   c0000898 <strcmp>
c0019102:	83 c4 10             	add    esp,0x10
c0019105:	85 c0                	test   eax,eax
c0019107:	75 0f                	jne    c0019118 <CPU::detectFeatures()+0x296>
c0019109:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0019113:	e9 35 01 00 00       	jmp    c001924d <CPU::detectFeatures()+0x3cb>
c0019118:	52                   	push   edx
c0019119:	52                   	push   edx
c001911a:	68 68 bf 02 c0       	push   0xc002bf68
c001911f:	55                   	push   ebp
c0019120:	e8 73 77 fe ff       	call   c0000898 <strcmp>
c0019125:	83 c4 10             	add    esp,0x10
c0019128:	85 c0                	test   eax,eax
c001912a:	75 0f                	jne    c001913b <CPU::detectFeatures()+0x2b9>
c001912c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019136:	e9 12 01 00 00       	jmp    c001924d <CPU::detectFeatures()+0x3cb>
c001913b:	50                   	push   eax
c001913c:	50                   	push   eax
c001913d:	68 75 bf 02 c0       	push   0xc002bf75
c0019142:	55                   	push   ebp
c0019143:	e8 50 77 fe ff       	call   c0000898 <strcmp>
c0019148:	83 c4 10             	add    esp,0x10
c001914b:	85 c0                	test   eax,eax
c001914d:	75 0f                	jne    c001915e <CPU::detectFeatures()+0x2dc>
c001914f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019159:	e9 ef 00 00 00       	jmp    c001924d <CPU::detectFeatures()+0x3cb>
c001915e:	50                   	push   eax
c001915f:	50                   	push   eax
c0019160:	68 82 bf 02 c0       	push   0xc002bf82
c0019165:	55                   	push   ebp
c0019166:	e8 2d 77 fe ff       	call   c0000898 <strcmp>
c001916b:	83 c4 10             	add    esp,0x10
c001916e:	85 c0                	test   eax,eax
c0019170:	75 0f                	jne    c0019181 <CPU::detectFeatures()+0x2ff>
c0019172:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001917c:	e9 cc 00 00 00       	jmp    c001924d <CPU::detectFeatures()+0x3cb>
c0019181:	50                   	push   eax
c0019182:	50                   	push   eax
c0019183:	68 8f bf 02 c0       	push   0xc002bf8f
c0019188:	55                   	push   ebp
c0019189:	e8 0a 77 fe ff       	call   c0000898 <strcmp>
c001918e:	83 c4 10             	add    esp,0x10
c0019191:	85 c0                	test   eax,eax
c0019193:	75 0f                	jne    c00191a4 <CPU::detectFeatures()+0x322>
c0019195:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001919f:	e9 a9 00 00 00       	jmp    c001924d <CPU::detectFeatures()+0x3cb>
c00191a4:	50                   	push   eax
c00191a5:	50                   	push   eax
c00191a6:	68 9c bf 02 c0       	push   0xc002bf9c
c00191ab:	55                   	push   ebp
c00191ac:	e8 e7 76 fe ff       	call   c0000898 <strcmp>
c00191b1:	83 c4 10             	add    esp,0x10
c00191b4:	85 c0                	test   eax,eax
c00191b6:	75 0f                	jne    c00191c7 <CPU::detectFeatures()+0x345>
c00191b8:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00191c2:	e9 86 00 00 00       	jmp    c001924d <CPU::detectFeatures()+0x3cb>
c00191c7:	50                   	push   eax
c00191c8:	50                   	push   eax
c00191c9:	68 a9 bf 02 c0       	push   0xc002bfa9
c00191ce:	55                   	push   ebp
c00191cf:	e8 c4 76 fe ff       	call   c0000898 <strcmp>
c00191d4:	83 c4 10             	add    esp,0x10
c00191d7:	85 c0                	test   eax,eax
c00191d9:	75 0c                	jne    c00191e7 <CPU::detectFeatures()+0x365>
c00191db:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00191e5:	eb 66                	jmp    c001924d <CPU::detectFeatures()+0x3cb>
c00191e7:	50                   	push   eax
c00191e8:	50                   	push   eax
c00191e9:	68 b6 bf 02 c0       	push   0xc002bfb6
c00191ee:	55                   	push   ebp
c00191ef:	e8 a4 76 fe ff       	call   c0000898 <strcmp>
c00191f4:	83 c4 10             	add    esp,0x10
c00191f7:	85 c0                	test   eax,eax
c00191f9:	75 0c                	jne    c0019207 <CPU::detectFeatures()+0x385>
c00191fb:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019205:	eb 46                	jmp    c001924d <CPU::detectFeatures()+0x3cb>
c0019207:	57                   	push   edi
c0019208:	57                   	push   edi
c0019209:	68 c3 bf 02 c0       	push   0xc002bfc3
c001920e:	55                   	push   ebp
c001920f:	e8 84 76 fe ff       	call   c0000898 <strcmp>
c0019214:	83 c4 10             	add    esp,0x10
c0019217:	85 c0                	test   eax,eax
c0019219:	74 e0                	je     c00191fb <CPU::detectFeatures()+0x379>
c001921b:	56                   	push   esi
c001921c:	56                   	push   esi
c001921d:	68 d0 bf 02 c0       	push   0xc002bfd0
c0019222:	55                   	push   ebp
c0019223:	e8 70 76 fe ff       	call   c0000898 <strcmp>
c0019228:	83 c4 10             	add    esp,0x10
c001922b:	85 c0                	test   eax,eax
c001922d:	74 cc                	je     c00191fb <CPU::detectFeatures()+0x379>
c001922f:	51                   	push   ecx
c0019230:	51                   	push   ecx
c0019231:	68 dd bf 02 c0       	push   0xc002bfdd
c0019236:	55                   	push   ebp
c0019237:	e8 5c 76 fe ff       	call   c0000898 <strcmp>
c001923c:	83 c4 10             	add    esp,0x10
c001923f:	85 c0                	test   eax,eax
c0019241:	74 b8                	je     c00191fb <CPU::detectFeatures()+0x379>
c0019243:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001924d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019252:	0f 86 be 00 00 00    	jbe    c0019316 <CPU::detectFeatures()+0x494>
c0019258:	83 ec 0c             	sub    esp,0xc
c001925b:	68 80 00 00 00       	push   0x80
c0019260:	e8 31 fb ff ff       	call   c0018d96 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019265:	83 e0 01             	and    eax,0x1
c0019268:	c1 e0 06             	shl    eax,0x6
c001926b:	88 c2                	mov    dl,al
c001926d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019273:	83 e0 bf             	and    eax,0xffffffbf
c0019276:	09 d0                	or     eax,edx
c0019278:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001927e:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019285:	e8 0c fb ff ff       	call   c0018d96 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001928a:	83 e0 01             	and    eax,0x1
c001928d:	c1 e0 04             	shl    eax,0x4
c0019290:	88 c2                	mov    dl,al
c0019292:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019298:	83 e0 ef             	and    eax,0xffffffef
c001929b:	09 d0                	or     eax,edx
c001929d:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00192a3:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00192aa:	e8 e7 fa ff ff       	call   c0018d96 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00192af:	c1 e0 07             	shl    eax,0x7
c00192b2:	88 c2                	mov    dl,al
c00192b4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00192ba:	83 e0 7f             	and    eax,0x7f
c00192bd:	09 d0                	or     eax,edx
c00192bf:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00192c5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00192cc:	e8 f3 fa ff ff       	call   c0018dc4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00192d1:	83 e0 01             	and    eax,0x1
c00192d4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00192db:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00192e1:	83 e0 f7             	and    eax,0xfffffff7
c00192e4:	09 d0                	or     eax,edx
c00192e6:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00192ec:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00192f3:	e8 cc fa ff ff       	call   c0018dc4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00192f8:	83 c4 10             	add    esp,0x10
c00192fb:	83 e0 01             	and    eax,0x1
c00192fe:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019305:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001930b:	83 e0 fb             	and    eax,0xfffffffb
c001930e:	09 d0                	or     eax,edx
c0019310:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019316:	83 ec 0c             	sub    esp,0xc
c0019319:	8d 44 24 28          	lea    eax,[esp+0x28]
c001931d:	50                   	push   eax
c001931e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019322:	50                   	push   eax
c0019323:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019327:	56                   	push   esi
c0019328:	8d 44 24 28          	lea    eax,[esp+0x28]
c001932c:	50                   	push   eax
c001932d:	6a 01                	push   0x1
c001932f:	e8 82 f9 ff ff       	call   c0018cb6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019334:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019338:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001933e:	88 ca                	mov    dl,cl
c0019340:	83 e0 f0             	and    eax,0xfffffff0
c0019343:	83 e2 0f             	and    edx,0xf
c0019346:	09 d0                	or     eax,edx
c0019348:	88 ca                	mov    dl,cl
c001934a:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019350:	c0 ea 04             	shr    dl,0x4
c0019353:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019357:	0f b6 c2             	movzx  eax,dl
c001935a:	83 c4 20             	add    esp,0x20
c001935d:	c1 e0 06             	shl    eax,0x6
c0019360:	89 c7                	mov    edi,eax
c0019362:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019368:	66 25 3f c0          	and    ax,0xc03f
c001936c:	09 f8                	or     eax,edi
c001936e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019375:	89 c8                	mov    eax,ecx
c0019377:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c001937e:	c1 e8 08             	shr    eax,0x8
c0019381:	83 e5 3f             	and    ebp,0x3f
c0019384:	83 e0 0f             	and    eax,0xf
c0019387:	89 c7                	mov    edi,eax
c0019389:	c1 e7 06             	shl    edi,0x6
c001938c:	09 ef                	or     edi,ebp
c001938e:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0019395:	89 fa                	mov    edx,edi
c0019397:	83 e5 c0             	and    ebp,0xffffffc0
c001939a:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00193a0:	88 c2                	mov    dl,al
c00193a2:	c0 ea 02             	shr    dl,0x2
c00193a5:	89 d7                	mov    edi,edx
c00193a7:	09 ef                	or     edi,ebp
c00193a9:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00193af:	89 fa                	mov    edx,edi
c00193b1:	83 e5 cf             	and    ebp,0xffffffcf
c00193b4:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00193ba:	89 cf                	mov    edi,ecx
c00193bc:	c1 ef 0c             	shr    edi,0xc
c00193bf:	83 e7 03             	and    edi,0x3
c00193c2:	c1 e7 04             	shl    edi,0x4
c00193c5:	09 ef                	or     edi,ebp
c00193c7:	3c 06                	cmp    al,0x6
c00193c9:	89 fa                	mov    edx,edi
c00193cb:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00193d1:	74 04                	je     c00193d7 <CPU::detectFeatures()+0x555>
c00193d3:	3c 0f                	cmp    al,0xf
c00193d5:	75 5c                	jne    c0019433 <CPU::detectFeatures()+0x5b1>
c00193d7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00193db:	89 cf                	mov    edi,ecx
c00193dd:	c1 ef 10             	shr    edi,0x10
c00193e0:	c1 e7 04             	shl    edi,0x4
c00193e3:	09 fa                	or     edx,edi
c00193e5:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c00193eb:	0f b6 d2             	movzx  edx,dl
c00193ee:	66 81 e7 3f c0       	and    di,0xc03f
c00193f3:	c1 e2 06             	shl    edx,0x6
c00193f6:	09 fa                	or     edx,edi
c00193f8:	3c 0f                	cmp    al,0xf
c00193fa:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019401:	75 30                	jne    c0019433 <CPU::detectFeatures()+0x5b1>
c0019403:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019409:	c1 e9 14             	shr    ecx,0x14
c001940c:	83 e0 3f             	and    eax,0x3f
c001940f:	83 c1 0f             	add    ecx,0xf
c0019412:	88 ca                	mov    dl,cl
c0019414:	c0 e9 02             	shr    cl,0x2
c0019417:	c1 e2 06             	shl    edx,0x6
c001941a:	09 d0                	or     eax,edx
c001941c:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019422:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019428:	83 e0 c0             	and    eax,0xffffffc0
c001942b:	09 c1                	or     ecx,eax
c001942d:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019433:	83 ec 0c             	sub    esp,0xc
c0019436:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001943d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019441:	50                   	push   eax
c0019442:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019446:	55                   	push   ebp
c0019447:	56                   	push   esi
c0019448:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001944c:	57                   	push   edi
c001944d:	68 00 00 00 80       	push   0x80000000
c0019452:	e8 5f f8 ff ff       	call   c0018cb6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019457:	83 c4 20             	add    esp,0x20
c001945a:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019462:	76 22                	jbe    c0019486 <CPU::detectFeatures()+0x604>
c0019464:	83 ec 0c             	sub    esp,0xc
c0019467:	8d 44 24 28          	lea    eax,[esp+0x28]
c001946b:	50                   	push   eax
c001946c:	55                   	push   ebp
c001946d:	56                   	push   esi
c001946e:	57                   	push   edi
c001946f:	68 01 00 00 80       	push   0x80000001
c0019474:	e8 3d f8 ff ff       	call   c0018cb6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019479:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019483:	83 c4 20             	add    esp,0x20
c0019486:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001948c:	83 f8 01             	cmp    eax,0x1
c001948f:	75 6f                	jne    c0019500 <CPU::detectFeatures()+0x67e>
c0019491:	51                   	push   ecx
c0019492:	51                   	push   ecx
c0019493:	68 e9 bf 02 c0       	push   0xc002bfe9
c0019498:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001949c:	56                   	push   esi
c001949d:	e8 6a 73 fe ff       	call   c000080c <strcpy>
c00194a2:	5f                   	pop    edi
c00194a3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00194a9:	5d                   	pop    ebp
c00194aa:	66 c1 e8 06          	shr    ax,0x6
c00194ae:	0f b6 c0             	movzx  eax,al
c00194b1:	50                   	push   eax
c00194b2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00194b8:	c1 e8 0e             	shr    eax,0xe
c00194bb:	0f b6 c0             	movzx  eax,al
c00194be:	50                   	push   eax
c00194bf:	e8 9c f4 ff ff       	call   c0018960 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00194c4:	5a                   	pop    edx
c00194c5:	59                   	pop    ecx
c00194c6:	50                   	push   eax
c00194c7:	56                   	push   esi
c00194c8:	e8 7f 74 fe ff       	call   c000094c <strcat>
c00194cd:	5f                   	pop    edi
c00194ce:	5d                   	pop    ebp
c00194cf:	56                   	push   esi
c00194d0:	53                   	push   ebx
c00194d1:	e8 94 ab ff ff       	call   c001406a <Device::setName(char const*)>
c00194d6:	58                   	pop    eax
c00194d7:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00194dd:	5a                   	pop    edx
c00194de:	68 f0 bf 02 c0       	push   0xc002bff0
c00194e3:	50                   	push   eax
c00194e4:	e8 af 73 fe ff       	call   c0000898 <strcmp>
c00194e9:	83 c4 10             	add    esp,0x10
c00194ec:	85 c0                	test   eax,eax
c00194ee:	0f 85 71 03 00 00    	jne    c0019865 <CPU::detectFeatures()+0x9e3>
c00194f4:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00194fb:	e9 65 03 00 00       	jmp    c0019865 <CPU::detectFeatures()+0x9e3>
c0019500:	83 f8 02             	cmp    eax,0x2
c0019503:	0f 85 b5 00 00 00    	jne    c00195be <CPU::detectFeatures()+0x73c>
c0019509:	57                   	push   edi
c001950a:	57                   	push   edi
c001950b:	68 02 c0 02 c0       	push   0xc002c002
c0019510:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019514:	56                   	push   esi
c0019515:	e8 f2 72 fe ff       	call   c000080c <strcpy>
c001951a:	5d                   	pop    ebp
c001951b:	58                   	pop    eax
c001951c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019522:	66 c1 e8 06          	shr    ax,0x6
c0019526:	0f b6 c0             	movzx  eax,al
c0019529:	50                   	push   eax
c001952a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019530:	c1 e8 0e             	shr    eax,0xe
c0019533:	0f b6 c0             	movzx  eax,al
c0019536:	50                   	push   eax
c0019537:	e8 90 f2 ff ff       	call   c00187cc <CPU::lookupAMDName(unsigned char, unsigned char)>
c001953c:	5a                   	pop    edx
c001953d:	59                   	pop    ecx
c001953e:	50                   	push   eax
c001953f:	56                   	push   esi
c0019540:	e8 07 74 fe ff       	call   c000094c <strcat>
c0019545:	5f                   	pop    edi
c0019546:	5d                   	pop    ebp
c0019547:	56                   	push   esi
c0019548:	53                   	push   ebx
c0019549:	e8 1c ab ff ff       	call   c001406a <Device::setName(char const*)>
c001954e:	58                   	pop    eax
c001954f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019555:	5a                   	pop    edx
c0019556:	68 07 c0 02 c0       	push   0xc002c007
c001955b:	50                   	push   eax
c001955c:	e8 37 73 fe ff       	call   c0000898 <strcmp>
c0019561:	83 c4 10             	add    esp,0x10
c0019564:	85 c0                	test   eax,eax
c0019566:	75 20                	jne    c0019588 <CPU::detectFeatures()+0x706>
c0019568:	8b 15 e8 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e6e8
c001956e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019574:	a8 01                	test   al,0x1
c0019576:	74 10                	je     c0019588 <CPU::detectFeatures()+0x706>
c0019578:	83 e0 fe             	and    eax,0xfffffffe
c001957b:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019581:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019588:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001958e:	c1 e8 0e             	shr    eax,0xe
c0019591:	3c 05                	cmp    al,0x5
c0019593:	0f 85 cc 02 00 00    	jne    c0019865 <CPU::detectFeatures()+0x9e3>
c0019599:	56                   	push   esi
c001959a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00195a0:	83 e0 0f             	and    eax,0xf
c00195a3:	50                   	push   eax
c00195a4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195aa:	66 c1 e8 06          	shr    ax,0x6
c00195ae:	0f b6 c0             	movzx  eax,al
c00195b1:	50                   	push   eax
c00195b2:	6a 05                	push   0x5
c00195b4:	e8 89 f6 ff ff       	call   c0018c42 <CPU::AMD_K6_writeback(int, int, int)>
c00195b9:	e9 1f 02 00 00       	jmp    c00197dd <CPU::detectFeatures()+0x95b>
c00195be:	8d 50 fd             	lea    edx,[eax-0x3]
c00195c1:	83 fa 01             	cmp    edx,0x1
c00195c4:	76 09                	jbe    c00195cf <CPU::detectFeatures()+0x74d>
c00195c6:	83 f8 06             	cmp    eax,0x6
c00195c9:	0f 85 91 01 00 00    	jne    c0019760 <CPU::detectFeatures()+0x8de>
c00195cf:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00195d5:	c1 ea 0e             	shr    edx,0xe
c00195d8:	80 fa 05             	cmp    dl,0x5
c00195db:	75 7b                	jne    c0019658 <CPU::detectFeatures()+0x7d6>
c00195dd:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00195e3:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00195e8:	66 81 fa 00 01       	cmp    dx,0x100
c00195ed:	75 0c                	jne    c00195fb <CPU::detectFeatures()+0x779>
c00195ef:	51                   	push   ecx
c00195f0:	51                   	push   ecx
c00195f1:	68 0e c0 02 c0       	push   0xc002c00e
c00195f6:	e9 dc 01 00 00       	jmp    c00197d7 <CPU::detectFeatures()+0x955>
c00195fb:	66 81 fa 00 02       	cmp    dx,0x200
c0019600:	75 0c                	jne    c001960e <CPU::detectFeatures()+0x78c>
c0019602:	52                   	push   edx
c0019603:	52                   	push   edx
c0019604:	68 21 c0 02 c0       	push   0xc002c021
c0019609:	e9 c9 01 00 00       	jmp    c00197d7 <CPU::detectFeatures()+0x955>
c001960e:	66 81 fa 40 02       	cmp    dx,0x240
c0019613:	75 0c                	jne    c0019621 <CPU::detectFeatures()+0x79f>
c0019615:	50                   	push   eax
c0019616:	50                   	push   eax
c0019617:	68 33 c0 02 c0       	push   0xc002c033
c001961c:	e9 b6 01 00 00       	jmp    c00197d7 <CPU::detectFeatures()+0x955>
c0019621:	83 f8 06             	cmp    eax,0x6
c0019624:	75 0c                	jne    c0019632 <CPU::detectFeatures()+0x7b0>
c0019626:	50                   	push   eax
c0019627:	50                   	push   eax
c0019628:	68 45 c0 02 c0       	push   0xc002c045
c001962d:	e9 a5 01 00 00       	jmp    c00197d7 <CPU::detectFeatures()+0x955>
c0019632:	83 f8 04             	cmp    eax,0x4
c0019635:	75 0c                	jne    c0019643 <CPU::detectFeatures()+0x7c1>
c0019637:	50                   	push   eax
c0019638:	50                   	push   eax
c0019639:	68 51 c0 02 c0       	push   0xc002c051
c001963e:	e9 94 01 00 00       	jmp    c00197d7 <CPU::detectFeatures()+0x955>
c0019643:	83 f8 03             	cmp    eax,0x3
c0019646:	0f 85 19 02 00 00    	jne    c0019865 <CPU::detectFeatures()+0x9e3>
c001964c:	50                   	push   eax
c001964d:	50                   	push   eax
c001964e:	68 59 c0 02 c0       	push   0xc002c059
c0019653:	e9 7f 01 00 00       	jmp    c00197d7 <CPU::detectFeatures()+0x955>
c0019658:	80 fa 06             	cmp    dl,0x6
c001965b:	0f 85 db 00 00 00    	jne    c001973c <CPU::detectFeatures()+0x8ba>
c0019661:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019667:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001966c:	66 81 fa 80 01       	cmp    dx,0x180
c0019671:	75 0c                	jne    c001967f <CPU::detectFeatures()+0x7fd>
c0019673:	50                   	push   eax
c0019674:	50                   	push   eax
c0019675:	68 64 c0 02 c0       	push   0xc002c064
c001967a:	e9 58 01 00 00       	jmp    c00197d7 <CPU::detectFeatures()+0x955>
c001967f:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019685:	66 f7 c1 80 ff       	test   cx,0xff80
c001968a:	75 0c                	jne    c0019698 <CPU::detectFeatures()+0x816>
c001968c:	50                   	push   eax
c001968d:	50                   	push   eax
c001968e:	68 74 c0 02 c0       	push   0xc002c074
c0019693:	e9 3f 01 00 00       	jmp    c00197d7 <CPU::detectFeatures()+0x955>
c0019698:	66 81 fa 40 02       	cmp    dx,0x240
c001969d:	75 0c                	jne    c00196ab <CPU::detectFeatures()+0x829>
c001969f:	55                   	push   ebp
c00196a0:	55                   	push   ebp
c00196a1:	68 7b c0 02 c0       	push   0xc002c07b
c00196a6:	e9 2c 01 00 00       	jmp    c00197d7 <CPU::detectFeatures()+0x955>
c00196ab:	66 81 fa 80 02       	cmp    dx,0x280
c00196b0:	75 0c                	jne    c00196be <CPU::detectFeatures()+0x83c>
c00196b2:	57                   	push   edi
c00196b3:	57                   	push   edi
c00196b4:	68 84 c0 02 c0       	push   0xc002c084
c00196b9:	e9 19 01 00 00       	jmp    c00197d7 <CPU::detectFeatures()+0x955>
c00196be:	66 81 fa 40 03       	cmp    dx,0x340
c00196c3:	74 ed                	je     c00196b2 <CPU::detectFeatures()+0x830>
c00196c5:	66 81 fa c0 03       	cmp    dx,0x3c0
c00196ca:	75 0c                	jne    c00196d8 <CPU::detectFeatures()+0x856>
c00196cc:	56                   	push   esi
c00196cd:	56                   	push   esi
c00196ce:	68 8b c0 02 c0       	push   0xc002c08b
c00196d3:	e9 ff 00 00 00       	jmp    c00197d7 <CPU::detectFeatures()+0x955>
c00196d8:	83 f8 06             	cmp    eax,0x6
c00196db:	0f 84 45 ff ff ff    	je     c0019626 <CPU::detectFeatures()+0x7a4>
c00196e1:	83 f8 04             	cmp    eax,0x4
c00196e4:	0f 84 4d ff ff ff    	je     c0019637 <CPU::detectFeatures()+0x7b5>
c00196ea:	83 f8 03             	cmp    eax,0x3
c00196ed:	0f 85 72 01 00 00    	jne    c0019865 <CPU::detectFeatures()+0x9e3>
c00196f3:	51                   	push   ecx
c00196f4:	51                   	push   ecx
c00196f5:	68 94 c0 02 c0       	push   0xc002c094
c00196fa:	53                   	push   ebx
c00196fb:	e8 6a a9 ff ff       	call   c001406a <Device::setName(char const*)>
c0019700:	b1 c1                	mov    cl,0xc1
c0019702:	88 c8                	mov    al,cl
c0019704:	e6 22                	out    0x22,al
c0019706:	e4 23                	in     al,0x23
c0019708:	88 c2                	mov    dl,al
c001970a:	88 c8                	mov    al,cl
c001970c:	e6 22                	out    0x22,al
c001970e:	88 d0                	mov    al,dl
c0019710:	83 c8 10             	or     eax,0x10
c0019713:	e6 23                	out    0x23,al
c0019715:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001971c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001971f:	89 d0                	mov    eax,edx
c0019721:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019727:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001972b:	40                   	inc    eax
c001972c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019732:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019737:	e9 a1 00 00 00       	jmp    c00197dd <CPU::detectFeatures()+0x95b>
c001973c:	83 f8 06             	cmp    eax,0x6
c001973f:	0f 84 e1 fe ff ff    	je     c0019626 <CPU::detectFeatures()+0x7a4>
c0019745:	83 f8 04             	cmp    eax,0x4
c0019748:	0f 84 e9 fe ff ff    	je     c0019637 <CPU::detectFeatures()+0x7b5>
c001974e:	83 f8 03             	cmp    eax,0x3
c0019751:	0f 85 0e 01 00 00    	jne    c0019865 <CPU::detectFeatures()+0x9e3>
c0019757:	52                   	push   edx
c0019758:	52                   	push   edx
c0019759:	68 9f c0 02 c0       	push   0xc002c09f
c001975e:	eb 77                	jmp    c00197d7 <CPU::detectFeatures()+0x955>
c0019760:	83 f8 07             	cmp    eax,0x7
c0019763:	75 09                	jne    c001976e <CPU::detectFeatures()+0x8ec>
c0019765:	50                   	push   eax
c0019766:	50                   	push   eax
c0019767:	68 a9 c0 02 c0       	push   0xc002c0a9
c001976c:	eb 69                	jmp    c00197d7 <CPU::detectFeatures()+0x955>
c001976e:	83 f8 0a             	cmp    eax,0xa
c0019771:	75 09                	jne    c001977c <CPU::detectFeatures()+0x8fa>
c0019773:	50                   	push   eax
c0019774:	50                   	push   eax
c0019775:	68 b4 c0 02 c0       	push   0xc002c0b4
c001977a:	eb 5b                	jmp    c00197d7 <CPU::detectFeatures()+0x955>
c001977c:	83 f8 0b             	cmp    eax,0xb
c001977f:	75 09                	jne    c001978a <CPU::detectFeatures()+0x908>
c0019781:	50                   	push   eax
c0019782:	50                   	push   eax
c0019783:	68 bc c0 02 c0       	push   0xc002c0bc
c0019788:	eb 4d                	jmp    c00197d7 <CPU::detectFeatures()+0x955>
c001978a:	83 f8 08             	cmp    eax,0x8
c001978d:	75 09                	jne    c0019798 <CPU::detectFeatures()+0x916>
c001978f:	50                   	push   eax
c0019790:	50                   	push   eax
c0019791:	68 c5 c0 02 c0       	push   0xc002c0c5
c0019796:	eb 3f                	jmp    c00197d7 <CPU::detectFeatures()+0x955>
c0019798:	83 f8 09             	cmp    eax,0x9
c001979b:	75 09                	jne    c00197a6 <CPU::detectFeatures()+0x924>
c001979d:	50                   	push   eax
c001979e:	50                   	push   eax
c001979f:	68 cd c0 02 c0       	push   0xc002c0cd
c00197a4:	eb 31                	jmp    c00197d7 <CPU::detectFeatures()+0x955>
c00197a6:	83 f8 05             	cmp    eax,0x5
c00197a9:	75 09                	jne    c00197b4 <CPU::detectFeatures()+0x932>
c00197ab:	50                   	push   eax
c00197ac:	50                   	push   eax
c00197ad:	68 d5 c0 02 c0       	push   0xc002c0d5
c00197b2:	eb 23                	jmp    c00197d7 <CPU::detectFeatures()+0x955>
c00197b4:	83 f8 0c             	cmp    eax,0xc
c00197b7:	75 09                	jne    c00197c2 <CPU::detectFeatures()+0x940>
c00197b9:	55                   	push   ebp
c00197ba:	55                   	push   ebp
c00197bb:	68 e3 c0 02 c0       	push   0xc002c0e3
c00197c0:	eb 15                	jmp    c00197d7 <CPU::detectFeatures()+0x955>
c00197c2:	83 f8 0d             	cmp    eax,0xd
c00197c5:	75 09                	jne    c00197d0 <CPU::detectFeatures()+0x94e>
c00197c7:	57                   	push   edi
c00197c8:	57                   	push   edi
c00197c9:	68 ee c0 02 c0       	push   0xc002c0ee
c00197ce:	eb 07                	jmp    c00197d7 <CPU::detectFeatures()+0x955>
c00197d0:	56                   	push   esi
c00197d1:	56                   	push   esi
c00197d2:	68 02 c1 02 c0       	push   0xc002c102
c00197d7:	53                   	push   ebx
c00197d8:	e8 8d a8 ff ff       	call   c001406a <Device::setName(char const*)>
c00197dd:	83 c4 10             	add    esp,0x10
c00197e0:	e9 80 00 00 00       	jmp    c0019865 <CPU::detectFeatures()+0x9e3>
c00197e5:	51                   	push   ecx
c00197e6:	51                   	push   ecx
c00197e7:	68 4e bf 02 c0       	push   0xc002bf4e
c00197ec:	55                   	push   ebp
c00197ed:	e8 1a 70 fe ff       	call   c000080c <strcpy>
c00197f2:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00197fc:	e8 ad 6a fe ff       	call   c00002ae <is486>
c0019801:	83 c4 10             	add    esp,0x10
c0019804:	85 c0                	test   eax,eax
c0019806:	74 2b                	je     c0019833 <CPU::detectFeatures()+0x9b1>
c0019808:	52                   	push   edx
c0019809:	52                   	push   edx
c001980a:	68 0e c1 02 c0       	push   0xc002c10e
c001980f:	53                   	push   ebx
c0019810:	e8 55 a8 ff ff       	call   c001406a <Device::setName(char const*)>
c0019815:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001981c:	0f 20 c0             	mov    eax,cr0
c001981f:	83 e0 14             	and    eax,0x14
c0019822:	83 c4 10             	add    esp,0x10
c0019825:	83 f8 04             	cmp    eax,0x4
c0019828:	75 1f                	jne    c0019849 <CPU::detectFeatures()+0x9c7>
c001982a:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019831:	eb 32                	jmp    c0019865 <CPU::detectFeatures()+0x9e3>
c0019833:	50                   	push   eax
c0019834:	50                   	push   eax
c0019835:	68 19 c1 02 c0       	push   0xc002c119
c001983a:	53                   	push   ebx
c001983b:	e8 2a a8 ff ff       	call   c001406a <Device::setName(char const*)>
c0019840:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019847:	eb d3                	jmp    c001981c <CPU::detectFeatures()+0x99a>
c0019849:	e8 3b 6a fe ff       	call   c0000289 <hasLegacyFPU>
c001984e:	83 e0 01             	and    eax,0x1
c0019851:	8d 14 00             	lea    edx,[eax+eax*1]
c0019854:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001985a:	83 e0 fd             	and    eax,0xfffffffd
c001985d:	09 d0                	or     eax,edx
c001985f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019865:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001986c:	83 c4 4c             	add    esp,0x4c
c001986f:	5b                   	pop    ebx
c0019870:	5e                   	pop    esi
c0019871:	5f                   	pop    edi
c0019872:	5d                   	pop    ebp
c0019873:	c3                   	ret    

c0019874 <CPU::setupSMEP()>:
c0019874:	0f 20 e0             	mov    eax,cr4
c0019877:	0d 00 00 10 00       	or     eax,0x100000
c001987c:	0f 22 e0             	mov    cr4,eax
c001987f:	c3                   	ret    

c0019880 <CPU::setupUMIP()>:
c0019880:	0f 20 e0             	mov    eax,cr4
c0019883:	80 cc 08             	or     ah,0x8
c0019886:	0f 22 e0             	mov    cr4,eax
c0019889:	c3                   	ret    

c001988a <CPU::setupTSC()>:
c001988a:	0f 20 e0             	mov    eax,cr4
c001988d:	83 c8 04             	or     eax,0x4
c0019890:	0f 22 e0             	mov    cr4,eax
c0019893:	c3                   	ret    

c0019894 <CPU::setupLargePages()>:
c0019894:	0f 20 e0             	mov    eax,cr4
c0019897:	83 c8 10             	or     eax,0x10
c001989a:	0f 22 e0             	mov    cr4,eax
c001989d:	c3                   	ret    

c001989e <CPU::setupPAT()>:
c001989e:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c00198a3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00198aa:	74 2c                	je     c00198d8 <CPU::setupPAT()+0x3a>
c00198ac:	53                   	push   ebx
c00198ad:	83 ec 10             	sub    esp,0x10
c00198b0:	68 77 02 00 00       	push   0x277
c00198b5:	50                   	push   eax
c00198b6:	e8 c7 54 ff ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c00198bb:	83 e2 f8             	and    edx,0xfffffff8
c00198be:	83 ca 01             	or     edx,0x1
c00198c1:	52                   	push   edx
c00198c2:	50                   	push   eax
c00198c3:	68 77 02 00 00       	push   0x277
c00198c8:	ff 35 e8 e6 02 c0    	push   DWORD PTR ds:0xc002e6e8
c00198ce:	e8 db 54 ff ff       	call   c000edae <Computer::wrmsr(unsigned int, unsigned long long)>
c00198d3:	83 c4 28             	add    esp,0x28
c00198d6:	5b                   	pop    ebx
c00198d7:	c3                   	ret    
c00198d8:	c3                   	ret    
c00198d9:	90                   	nop

c00198da <CPU::setupMTRR()>:
c00198da:	c3                   	ret    
c00198db:	90                   	nop

c00198dc <CPU::setupGlobalPages()>:
c00198dc:	0f 20 e0             	mov    eax,cr4
c00198df:	0c 80                	or     al,0x80
c00198e1:	0f 22 e0             	mov    cr4,eax
c00198e4:	c3                   	ret    
c00198e5:	90                   	nop

c00198e6 <CPU::allowUsermodeDataAccess()>:
c00198e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00198ea:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00198f1:	74 03                	je     c00198f6 <CPU::allowUsermodeDataAccess()+0x10>
c00198f3:	0f 01 cb             	stac   
c00198f6:	c3                   	ret    
c00198f7:	90                   	nop

c00198f8 <CPU::prohibitUsermodeDataAccess()>:
c00198f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00198fc:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019903:	74 03                	je     c0019908 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019905:	0f 01 ca             	clac   
c0019908:	c3                   	ret    
c0019909:	90                   	nop

c001990a <CPU::setupSMAP()>:
c001990a:	0f 20 e0             	mov    eax,cr4
c001990d:	0d 00 00 20 00       	or     eax,0x200000
c0019912:	0f 22 e0             	mov    cr4,eax
c0019915:	eb e1                	jmp    c00198f8 <CPU::prohibitUsermodeDataAccess()>
c0019917:	90                   	nop

c0019918 <CPU::setupFeatures()>:
c0019918:	83 ec 0c             	sub    esp,0xc
c001991b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001991f:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019926:	74 07                	je     c001992f <CPU::setupFeatures()+0x17>
c0019928:	52                   	push   edx
c0019929:	e8 46 ff ff ff       	call   c0019874 <CPU::setupSMEP()>
c001992e:	58                   	pop    eax
c001992f:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019936:	74 07                	je     c001993f <CPU::setupFeatures()+0x27>
c0019938:	52                   	push   edx
c0019939:	e8 cc ff ff ff       	call   c001990a <CPU::setupSMAP()>
c001993e:	58                   	pop    eax
c001993f:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019946:	74 07                	je     c001994f <CPU::setupFeatures()+0x37>
c0019948:	52                   	push   edx
c0019949:	e8 32 ff ff ff       	call   c0019880 <CPU::setupUMIP()>
c001994e:	58                   	pop    eax
c001994f:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019956:	74 07                	je     c001995f <CPU::setupFeatures()+0x47>
c0019958:	52                   	push   edx
c0019959:	e8 2c ff ff ff       	call   c001988a <CPU::setupTSC()>
c001995e:	58                   	pop    eax
c001995f:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019966:	74 07                	je     c001996f <CPU::setupFeatures()+0x57>
c0019968:	52                   	push   edx
c0019969:	e8 26 ff ff ff       	call   c0019894 <CPU::setupLargePages()>
c001996e:	59                   	pop    ecx
c001996f:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019976:	74 07                	je     c001997f <CPU::setupFeatures()+0x67>
c0019978:	52                   	push   edx
c0019979:	e8 5e ff ff ff       	call   c00198dc <CPU::setupGlobalPages()>
c001997e:	58                   	pop    eax
c001997f:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019986:	74 0c                	je     c0019994 <CPU::setupFeatures()+0x7c>
c0019988:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001998c:	83 c4 0c             	add    esp,0xc
c001998f:	e9 0a ff ff ff       	jmp    c001989e <CPU::setupPAT()>
c0019994:	83 c4 0c             	add    esp,0xc
c0019997:	c3                   	ret    

c0019998 <CPU::open(int, int, void*)>:
c0019998:	57                   	push   edi
c0019999:	56                   	push   esi
c001999a:	53                   	push   ebx
c001999b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001999f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00199a3:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00199a9:	83 ec 0c             	sub    esp,0xc
c00199ac:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00199b2:	68 24 c1 02 c0       	push   0xc002c124
c00199b7:	e8 81 60 ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c00199bc:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00199c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00199c5:	e8 60 57 ff ff       	call   c000f12a <GDT::setup()>
c00199ca:	c7 04 24 36 c1 02 c0 	mov    DWORD PTR [esp],0xc002c136
c00199d1:	e8 67 60 ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c00199d6:	83 c4 0c             	add    esp,0xc
c00199d9:	6a 00                	push   0x0
c00199db:	68 ef be ad de       	push   0xdeadbeef
c00199e0:	57                   	push   edi
c00199e1:	e8 0a 76 ff ff       	call   c0010ff0 <TSS::setup(unsigned long, unsigned long)>
c00199e6:	c7 04 24 48 c1 02 c0 	mov    DWORD PTR [esp],0xc002c148
c00199ed:	e8 4b 60 ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c00199f2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00199f5:	e8 d6 75 ff ff       	call   c0010fd0 <TSS::flush()>
c00199fa:	c7 04 24 5c c1 02 c0 	mov    DWORD PTR [esp],0xc002c15c
c0019a01:	e8 37 60 ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c0019a06:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019a0c:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a0f:	e8 7a 59 ff ff       	call   c000f38e <IDT::setup()>
c0019a14:	c7 04 24 6e c1 02 c0 	mov    DWORD PTR [esp],0xc002c16e
c0019a1b:	e8 1d 60 ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c0019a20:	b8 00 04 00 00       	mov    eax,0x400
c0019a25:	0f 23 f8             	mov    db7,eax
c0019a28:	c7 04 24 8c c1 02 c0 	mov    DWORD PTR [esp],0xc002c18c
c0019a2f:	e8 09 60 ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c0019a34:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019a3e:	e8 9c 63 ff ff       	call   c000fddf <Phys::allocatePage()>
c0019a43:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019a49:	89 30                	mov    DWORD PTR [eax],esi
c0019a4b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019a51:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019a54:	c7 04 24 ae c1 02 c0 	mov    DWORD PTR [esp],0xc002c1ae
c0019a5b:	e8 dd 5f ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c0019a60:	58                   	pop    eax
c0019a61:	5a                   	pop    edx
c0019a62:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019a68:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019a6c:	e8 79 85 ff ff       	call   c0011fea <VAS::setCPUSpecific(unsigned long)>
c0019a71:	c7 04 24 d6 c1 02 c0 	mov    DWORD PTR [esp],0xc002c1d6
c0019a78:	e8 c0 5f ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c0019a7d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a80:	e8 fd f3 ff ff       	call   c0018e82 <CPU::detectFeatures()>
c0019a85:	c7 04 24 f9 c1 02 c0 	mov    DWORD PTR [esp],0xc002c1f9
c0019a8c:	e8 ac 5f ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c0019a91:	e8 2e ba ff ff       	call   c00154c4 <setupInterruptController()>
c0019a96:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019a9c:	c7 04 24 1d c2 02 c0 	mov    DWORD PTR [esp],0xc002c21d
c0019aa3:	e8 95 5f ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c0019aa8:	a1 00 e7 02 c0       	mov    eax,ds:0xc002e700
c0019aad:	83 e0 10             	and    eax,0x10
c0019ab0:	83 f8 01             	cmp    eax,0x1
c0019ab3:	19 c0                	sbb    eax,eax
c0019ab5:	83 e0 46             	and    eax,0x46
c0019ab8:	83 c0 1e             	add    eax,0x1e
c0019abb:	89 04 24             	mov    DWORD PTR [esp],eax
c0019abe:	e8 ee cf ff ff       	call   c0016ab1 <setupTimer(int)>
c0019ac3:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019ac9:	c7 04 24 38 c2 02 c0 	mov    DWORD PTR [esp],0xc002c238
c0019ad0:	e8 68 5f ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c0019ad5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ad8:	e8 3b fe ff ff       	call   c0019918 <CPU::setupFeatures()>
c0019add:	c7 04 24 53 c2 02 c0 	mov    DWORD PTR [esp],0xc002c253
c0019ae4:	e8 54 5f ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c0019ae9:	83 c4 10             	add    esp,0x10
c0019aec:	31 c0                	xor    eax,eax
c0019aee:	5b                   	pop    ebx
c0019aef:	5e                   	pop    esi
c0019af0:	5f                   	pop    edi
c0019af1:	c3                   	ret    

c0019af2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019af2:	57                   	push   edi
c0019af3:	56                   	push   esi
c0019af4:	53                   	push   ebx
c0019af5:	51                   	push   ecx
c0019af6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019afa:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019afd:	0f 02 c0             	lar    eax,ax
c0019b00:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019b03:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019b07:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019b0a:	88 ca                	mov    dl,cl
c0019b0c:	c0 ea 06             	shr    dl,0x6
c0019b0f:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019b13:	89 ca                	mov    edx,ecx
c0019b15:	66 c1 ea 03          	shr    dx,0x3
c0019b19:	83 e2 07             	and    edx,0x7
c0019b1c:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019b21:	88 17                	mov    BYTE PTR [edi],dl
c0019b23:	0f 84 a6 01 00 00    	je     c0019ccf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019b29:	83 e1 07             	and    ecx,0x7
c0019b2c:	80 f9 04             	cmp    cl,0x4
c0019b2f:	0f 84 98 00 00 00    	je     c0019bcd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019b35:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019b3a:	0f 95 c0             	setne  al
c0019b3d:	80 f9 05             	cmp    cl,0x5
c0019b40:	0f 95 c2             	setne  dl
c0019b43:	08 c2                	or     dl,al
c0019b45:	74 79                	je     c0019bc0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019b47:	84 c9                	test   cl,cl
c0019b49:	75 05                	jne    c0019b50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019b4b:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019b4e:	eb 3c                	jmp    c0019b8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b50:	80 f9 01             	cmp    cl,0x1
c0019b53:	75 05                	jne    c0019b5a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019b55:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019b58:	eb 32                	jmp    c0019b8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b5a:	80 f9 02             	cmp    cl,0x2
c0019b5d:	75 05                	jne    c0019b64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019b5f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019b62:	eb 28                	jmp    c0019b8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b64:	31 c0                	xor    eax,eax
c0019b66:	80 f9 03             	cmp    cl,0x3
c0019b69:	75 05                	jne    c0019b70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019b6b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019b6e:	eb 1c                	jmp    c0019b8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b70:	80 f9 05             	cmp    cl,0x5
c0019b73:	75 05                	jne    c0019b7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019b75:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019b78:	eb 12                	jmp    c0019b8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b7a:	80 f9 06             	cmp    cl,0x6
c0019b7d:	75 05                	jne    c0019b84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019b7f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019b82:	eb 08                	jmp    c0019b8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b84:	80 f9 07             	cmp    cl,0x7
c0019b87:	75 03                	jne    c0019b8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b89:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019b8c:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019b91:	75 10                	jne    c0019ba3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019b93:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019b97:	b9 03 00 00 00       	mov    ecx,0x3
c0019b9c:	01 d0                	add    eax,edx
c0019b9e:	e9 37 01 00 00       	jmp    c0019cda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019ba3:	b9 02 00 00 00       	mov    ecx,0x2
c0019ba8:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019bad:	0f 85 27 01 00 00    	jne    c0019cda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019bb3:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019bb6:	b9 06 00 00 00       	mov    ecx,0x6
c0019bbb:	e9 1a 01 00 00       	jmp    c0019cda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019bc0:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019bc3:	b9 06 00 00 00       	mov    ecx,0x6
c0019bc8:	e9 0f 01 00 00       	jmp    c0019cdc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019bcd:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019bd0:	88 ca                	mov    dl,cl
c0019bd2:	c0 ea 06             	shr    dl,0x6
c0019bd5:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019bd9:	89 ca                	mov    edx,ecx
c0019bdb:	66 c1 ea 03          	shr    dx,0x3
c0019bdf:	83 e2 07             	and    edx,0x7
c0019be2:	80 e1 07             	and    cl,0x7
c0019be5:	75 05                	jne    c0019bec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019be7:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019bea:	eb 4c                	jmp    c0019c38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019bec:	80 f9 01             	cmp    cl,0x1
c0019bef:	75 05                	jne    c0019bf6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019bf1:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019bf4:	eb 42                	jmp    c0019c38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019bf6:	80 f9 02             	cmp    cl,0x2
c0019bf9:	75 05                	jne    c0019c00 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019bfb:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019bfe:	eb 38                	jmp    c0019c38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c00:	80 f9 03             	cmp    cl,0x3
c0019c03:	75 05                	jne    c0019c0a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019c05:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019c08:	eb 2e                	jmp    c0019c38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c0a:	80 f9 04             	cmp    cl,0x4
c0019c0d:	75 12                	jne    c0019c21 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019c0f:	f6 c4 60             	test   ah,0x60
c0019c12:	75 08                	jne    c0019c1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019c14:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019c17:	8d 78 14             	lea    edi,[eax+0x14]
c0019c1a:	eb 1c                	jmp    c0019c38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c1c:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019c1f:	eb 17                	jmp    c0019c38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c21:	80 f9 05             	cmp    cl,0x5
c0019c24:	75 05                	jne    c0019c2b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019c26:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019c29:	eb 0d                	jmp    c0019c38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c2b:	80 f9 06             	cmp    cl,0x6
c0019c2e:	75 05                	jne    c0019c35 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019c30:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019c33:	eb 03                	jmp    c0019c38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c35:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019c38:	84 d2                	test   dl,dl
c0019c3a:	75 05                	jne    c0019c41 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019c3c:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019c3f:	eb 3c                	jmp    c0019c7d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c41:	80 fa 01             	cmp    dl,0x1
c0019c44:	75 05                	jne    c0019c4b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019c46:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019c49:	eb 32                	jmp    c0019c7d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c4b:	80 fa 02             	cmp    dl,0x2
c0019c4e:	75 05                	jne    c0019c55 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019c50:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019c53:	eb 28                	jmp    c0019c7d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c55:	80 fa 03             	cmp    dl,0x3
c0019c58:	75 05                	jne    c0019c5f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019c5a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019c5d:	eb 1e                	jmp    c0019c7d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c5f:	31 c0                	xor    eax,eax
c0019c61:	80 fa 04             	cmp    dl,0x4
c0019c64:	74 17                	je     c0019c7d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c66:	80 fa 05             	cmp    dl,0x5
c0019c69:	75 05                	jne    c0019c70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019c6b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019c6e:	eb 0d                	jmp    c0019c7d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c70:	80 fa 06             	cmp    dl,0x6
c0019c73:	75 05                	jne    c0019c7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019c75:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019c78:	eb 03                	jmp    c0019c7d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c7a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019c7d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019c82:	0f 94 c2             	sete   dl
c0019c85:	80 f9 05             	cmp    cl,0x5
c0019c88:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019c8c:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019c91:	d3 e0                	shl    eax,cl
c0019c93:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019c97:	74 0a                	je     c0019ca3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019c99:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019c9c:	b9 07 00 00 00       	mov    ecx,0x7
c0019ca1:	eb 37                	jmp    c0019cda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019ca3:	01 f8                	add    eax,edi
c0019ca5:	b9 03 00 00 00       	mov    ecx,0x3
c0019caa:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019caf:	74 2b                	je     c0019cdc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019cb1:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019cb6:	75 0d                	jne    c0019cc5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019cb8:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019cbc:	01 c8                	add    eax,ecx
c0019cbe:	b9 04 00 00 00       	mov    ecx,0x4
c0019cc3:	eb 17                	jmp    c0019cdc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019cc5:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019cc8:	b9 07 00 00 00       	mov    ecx,0x7
c0019ccd:	eb 0d                	jmp    c0019cdc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ccf:	b9 02 00 00 00       	mov    ecx,0x2
c0019cd4:	b2 01                	mov    dl,0x1
c0019cd6:	31 c0                	xor    eax,eax
c0019cd8:	eb 02                	jmp    c0019cdc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019cda:	31 d2                	xor    edx,edx
c0019cdc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019ce0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019ce2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019ce6:	88 11                	mov    BYTE PTR [ecx],dl
c0019ce8:	5a                   	pop    edx
c0019ce9:	5b                   	pop    ebx
c0019cea:	5e                   	pop    esi
c0019ceb:	5f                   	pop    edi
c0019cec:	c3                   	ret    

c0019ced <Krnl::smpEntry()>:
c0019ced:	eb fe                	jmp    c0019ced <Krnl::smpEntry()>

c0019cef <Krnl::startCPU(int)>:
c0019cef:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0019cf4:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019cfb:	0f 84 36 01 00 00    	je     c0019e37 <Krnl::startCPU(int)+0x148>
c0019d01:	53                   	push   ebx
c0019d02:	83 ec 10             	sub    esp,0x10
c0019d05:	fa                   	cli    
c0019d06:	ff 05 e8 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe8
c0019d0c:	6a 1b                	push   0x1b
c0019d0e:	ff 35 e8 e6 02 c0    	push   DWORD PTR ds:0xc002e6e8
c0019d14:	e8 69 50 ff ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c0019d19:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019d1e:	89 c3                	mov    ebx,eax
c0019d20:	58                   	pop    eax
c0019d21:	5a                   	pop    edx
c0019d22:	53                   	push   ebx
c0019d23:	68 9c c2 02 c0       	push   0xc002c29c
c0019d28:	e8 0e 8d ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0019d2d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019d37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d3b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019d45:	c1 e0 18             	shl    eax,0x18
c0019d48:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019d4e:	83 c4 10             	add    esp,0x10
c0019d51:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019d57:	09 c2                	or     edx,eax
c0019d59:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019d5f:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019d65:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019d6b:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019d71:	80 cd c5             	or     ch,0xc5
c0019d74:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019d7a:	f3 90                	pause  
c0019d7c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019d7e:	0f ba e1 0c          	bt     ecx,0xc
c0019d82:	72 f6                	jb     c0019d7a <Krnl::startCPU(int)+0x8b>
c0019d84:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019d8a:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019d90:	09 c1                	or     ecx,eax
c0019d92:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019d98:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019d9e:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019da4:	80 cd 85             	or     ch,0x85
c0019da7:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019dad:	f3 90                	pause  
c0019daf:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019db1:	0f ba e1 0c          	bt     ecx,0xc
c0019db5:	72 f6                	jb     c0019dad <Krnl::startCPU(int)+0xbe>
c0019db7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019dc1:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019dc7:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019dcd:	09 c1                	or     ecx,eax
c0019dcf:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019dd5:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019ddb:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019de1:	81 c9 02 06 00 00    	or     ecx,0x602
c0019de7:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019ded:	f3 90                	pause  
c0019def:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019df1:	0f ba e1 0c          	bt     ecx,0xc
c0019df5:	72 f6                	jb     c0019ded <Krnl::startCPU(int)+0xfe>
c0019df7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019e01:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019e07:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019e0d:	09 c8                	or     eax,ecx
c0019e0f:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019e15:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019e1b:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019e20:	0d 02 06 00 00       	or     eax,0x602
c0019e25:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019e2b:	f3 90                	pause  
c0019e2d:	8b 02                	mov    eax,DWORD PTR [edx]
c0019e2f:	0f ba e0 0c          	bt     eax,0xc
c0019e33:	72 f6                	jb     c0019e2b <Krnl::startCPU(int)+0x13c>
c0019e35:	eb fe                	jmp    c0019e35 <Krnl::startCPU(int)+0x146>
c0019e37:	c3                   	ret    

c0019e38 <Krnl::startCPUs()>:
c0019e38:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0019e3d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019e43:	88 c2                	mov    dl,al
c0019e45:	83 e2 0a             	and    edx,0xa
c0019e48:	80 fa 0a             	cmp    dl,0xa
c0019e4b:	75 09                	jne    c0019e56 <Krnl::startCPUs()+0x1e>
c0019e4d:	a8 01                	test   al,0x1
c0019e4f:	74 05                	je     c0019e56 <Krnl::startCPUs()+0x1e>
c0019e51:	e9 45 63 fe ff       	jmp    c000019b <prepareTramp>
c0019e56:	c3                   	ret    
c0019e57:	90                   	nop

c0019e58 <EnvVarContainer::getEnv(char const*)>:
c0019e58:	57                   	push   edi
c0019e59:	56                   	push   esi
c0019e5a:	53                   	push   ebx
c0019e5b:	31 db                	xor    ebx,ebx
c0019e5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019e61:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019e63:	7e 2b                	jle    c0019e90 <EnvVarContainer::getEnv(char const*)+0x38>
c0019e65:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019e6c:	50                   	push   eax
c0019e6d:	50                   	push   eax
c0019e6e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019e71:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019e74:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019e78:	e8 1b 6a fe ff       	call   c0000898 <strcmp>
c0019e7d:	83 c4 10             	add    esp,0x10
c0019e80:	85 c0                	test   eax,eax
c0019e82:	75 09                	jne    c0019e8d <EnvVarContainer::getEnv(char const*)+0x35>
c0019e84:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019e87:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019e8b:	eb 05                	jmp    c0019e92 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019e8d:	43                   	inc    ebx
c0019e8e:	eb d1                	jmp    c0019e61 <EnvVarContainer::getEnv(char const*)+0x9>
c0019e90:	31 c0                	xor    eax,eax
c0019e92:	5b                   	pop    ebx
c0019e93:	5e                   	pop    esi
c0019e94:	5f                   	pop    edi
c0019e95:	c3                   	ret    

c0019e96 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019e96:	55                   	push   ebp
c0019e97:	57                   	push   edi
c0019e98:	56                   	push   esi
c0019e99:	53                   	push   ebx
c0019e9a:	83 ec 28             	sub    esp,0x28
c0019e9d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019ea1:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019ea5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019ea9:	56                   	push   esi
c0019eaa:	e8 bd 68 fe ff       	call   c000076c <strlen>
c0019eaf:	40                   	inc    eax
c0019eb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0019eb3:	e8 2b 5b ff ff       	call   c000f9e3 <malloc>
c0019eb8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ebb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019ebf:	e8 a8 68 fe ff       	call   c000076c <strlen>
c0019ec4:	40                   	inc    eax
c0019ec5:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ec8:	e8 16 5b ff ff       	call   c000f9e3 <malloc>
c0019ecd:	89 34 24             	mov    DWORD PTR [esp],esi
c0019ed0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019ed4:	e8 93 68 fe ff       	call   c000076c <strlen>
c0019ed9:	83 c4 0c             	add    esp,0xc
c0019edc:	40                   	inc    eax
c0019edd:	50                   	push   eax
c0019ede:	6a 00                	push   0x0
c0019ee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019ee4:	e8 67 68 fe ff       	call   c0000750 <memset>
c0019ee9:	89 34 24             	mov    DWORD PTR [esp],esi
c0019eec:	e8 7b 68 fe ff       	call   c000076c <strlen>
c0019ef1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019ef5:	8d 48 01             	lea    ecx,[eax+0x1]
c0019ef8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019efa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019efd:	89 de                	mov    esi,ebx
c0019eff:	e8 68 68 fe ff       	call   c000076c <strlen>
c0019f04:	83 c4 0c             	add    esp,0xc
c0019f07:	40                   	inc    eax
c0019f08:	50                   	push   eax
c0019f09:	6a 00                	push   0x0
c0019f0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f0f:	e8 3c 68 fe ff       	call   c0000750 <memset>
c0019f14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f17:	e8 50 68 fe ff       	call   c000076c <strlen>
c0019f1c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019f20:	8d 48 01             	lea    ecx,[eax+0x1]
c0019f23:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019f25:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019f28:	40                   	inc    eax
c0019f29:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019f2c:	c1 e0 03             	shl    eax,0x3
c0019f2f:	5a                   	pop    edx
c0019f30:	59                   	pop    ecx
c0019f31:	50                   	push   eax
c0019f32:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019f35:	e8 95 5a ff ff       	call   c000f9cf <realloc>
c0019f3a:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019f3e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019f41:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019f44:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019f48:	b9 08 00 00 00       	mov    ecx,0x8
c0019f4d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019f4f:	83 c4 2c             	add    esp,0x2c
c0019f52:	5b                   	pop    ebx
c0019f53:	5e                   	pop    esi
c0019f54:	5f                   	pop    edi
c0019f55:	5d                   	pop    ebp
c0019f56:	c3                   	ret    
c0019f57:	90                   	nop

c0019f58 <EnvVarContainer::deleteEnv(char const*)>:
c0019f58:	c3                   	ret    
c0019f59:	90                   	nop

c0019f5a <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019f5a:	55                   	push   ebp
c0019f5b:	57                   	push   edi
c0019f5c:	56                   	push   esi
c0019f5d:	53                   	push   ebx
c0019f5e:	81 ec 38 01 00 00    	sub    esp,0x138
c0019f64:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0019f6b:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0019f72:	68 14 01 00 00       	push   0x114
c0019f77:	e8 67 5a ff ff       	call   c000f9e3 <malloc>
c0019f7c:	83 c4 0c             	add    esp,0xc
c0019f7f:	89 c3                	mov    ebx,eax
c0019f81:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019f84:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019f8b:	50                   	push   eax
c0019f8c:	e8 09 90 ff ff       	call   c0012f9a <File::File(char const*, Process*)>
c0019f91:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f94:	e8 d3 92 ff ff       	call   c001326c <File::exists()>
c0019f99:	83 c4 10             	add    esp,0x10
c0019f9c:	84 c0                	test   al,al
c0019f9e:	75 31                	jne    c0019fd1 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019fa0:	50                   	push   eax
c0019fa1:	50                   	push   eax
c0019fa2:	6a 12                	push   0x12
c0019fa4:	53                   	push   ebx
c0019fa5:	e8 54 90 ff ff       	call   c0012ffe <File::open(FileOpenMode)>
c0019faa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019fac:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019faf:	89 34 24             	mov    DWORD PTR [esp],esi
c0019fb2:	e8 b5 67 fe ff       	call   c000076c <strlen>
c0019fb7:	5a                   	pop    edx
c0019fb8:	31 d2                	xor    edx,edx
c0019fba:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019fbe:	51                   	push   ecx
c0019fbf:	56                   	push   esi
c0019fc0:	52                   	push   edx
c0019fc1:	50                   	push   eax
c0019fc2:	53                   	push   ebx
c0019fc3:	ff d7                	call   edi
c0019fc5:	83 c4 14             	add    esp,0x14
c0019fc8:	53                   	push   ebx
c0019fc9:	e8 8e 90 ff ff       	call   c001305c <File::close()>
c0019fce:	83 c4 10             	add    esp,0x10
c0019fd1:	56                   	push   esi
c0019fd2:	31 f6                	xor    esi,esi
c0019fd4:	68 00 01 00 00       	push   0x100
c0019fd9:	6a 00                	push   0x0
c0019fdb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019fdf:	50                   	push   eax
c0019fe0:	e8 6b 67 fe ff       	call   c0000750 <memset>
c0019fe5:	5f                   	pop    edi
c0019fe6:	58                   	pop    eax
c0019fe7:	6a 01                	push   0x1
c0019fe9:	53                   	push   ebx
c0019fea:	e8 0f 90 ff ff       	call   c0012ffe <File::open(FileOpenMode)>
c0019fef:	83 c4 10             	add    esp,0x10
c0019ff2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019ffa:	83 ec 0c             	sub    esp,0xc
c0019ffd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019fff:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a003:	51                   	push   ecx
c001a004:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a008:	52                   	push   edx
c001a009:	6a 00                	push   0x0
c001a00b:	6a 01                	push   0x1
c001a00d:	53                   	push   ebx
c001a00e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a011:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a015:	83 c4 20             	add    esp,0x20
c001a018:	3c 0d                	cmp    al,0xd
c001a01a:	0f 84 09 01 00 00    	je     c001a129 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a020:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a025:	0f 84 ef 00 00 00    	je     c001a11a <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c001a02b:	3c 0a                	cmp    al,0xa
c001a02d:	74 13                	je     c001a042 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c001a02f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a034:	74 0c                	je     c001a042 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c001a036:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a03c:	0f 8e d8 00 00 00    	jle    c001a11a <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c001a042:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a046:	83 ec 0c             	sub    esp,0xc
c001a049:	8d 78 01             	lea    edi,[eax+0x1]
c001a04c:	57                   	push   edi
c001a04d:	e8 91 59 ff ff       	call   c000f9e3 <malloc>
c001a052:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001a056:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a05a:	8d 56 04             	lea    edx,[esi+0x4]
c001a05d:	89 14 24             	mov    DWORD PTR [esp],edx
c001a060:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a064:	e8 7a 59 ff ff       	call   c000f9e3 <malloc>
c001a069:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a06d:	83 c4 0c             	add    esp,0xc
c001a070:	57                   	push   edi
c001a071:	6a 00                	push   0x0
c001a073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a077:	e8 d4 66 fe ff       	call   c0000750 <memset>
c001a07c:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a080:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a084:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a088:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a08a:	83 c4 0c             	add    esp,0xc
c001a08d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a091:	52                   	push   edx
c001a092:	6a 00                	push   0x0
c001a094:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a098:	e8 b3 66 fe ff       	call   c0000750 <memset>
c001a09d:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a0a1:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001a0a5:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0a8:	e8 bf 66 fe ff       	call   c000076c <strlen>
c001a0ad:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a0b1:	89 c1                	mov    ecx,eax
c001a0b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a0b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a0b8:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001a0bb:	40                   	inc    eax
c001a0bc:	83 c4 10             	add    esp,0x10
c001a0bf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001a0c2:	85 d2                	test   edx,edx
c001a0c4:	75 0c                	jne    c001a0d2 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c001a0c6:	83 ec 0c             	sub    esp,0xc
c001a0c9:	6a 08                	push   0x8
c001a0cb:	e8 13 59 ff ff       	call   c000f9e3 <malloc>
c001a0d0:	eb 0c                	jmp    c001a0de <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c001a0d2:	c1 e0 03             	shl    eax,0x3
c001a0d5:	51                   	push   ecx
c001a0d6:	51                   	push   ecx
c001a0d7:	50                   	push   eax
c001a0d8:	52                   	push   edx
c001a0d9:	e8 f1 58 ff ff       	call   c000f9cf <realloc>
c001a0de:	83 c4 10             	add    esp,0x10
c001a0e1:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001a0e4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a0e7:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001a0ea:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a0ee:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a0f2:	b9 08 00 00 00       	mov    ecx,0x8
c001a0f7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a0f9:	31 f6                	xor    esi,esi
c001a0fb:	50                   	push   eax
c001a0fc:	68 00 01 00 00       	push   0x100
c001a101:	6a 00                	push   0x0
c001a103:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a107:	50                   	push   eax
c001a108:	e8 43 66 fe ff       	call   c0000750 <memset>
c001a10d:	83 c4 10             	add    esp,0x10
c001a110:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a118:	eb 0f                	jmp    c001a129 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a11a:	3c 3d                	cmp    al,0x3d
c001a11c:	74 07                	je     c001a125 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c001a11e:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001a122:	46                   	inc    esi
c001a123:	eb 04                	jmp    c001a129 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a125:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001a129:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a12e:	0f 85 c6 fe ff ff    	jne    c0019ffa <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001a134:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a13a:	5b                   	pop    ebx
c001a13b:	5e                   	pop    esi
c001a13c:	5f                   	pop    edi
c001a13d:	5d                   	pop    ebp
c001a13e:	c3                   	ret    
c001a13f:	90                   	nop

c001a140 <EnvVarContainer::__loadSystem()>:
c001a140:	83 ec 10             	sub    esp,0x10
c001a143:	68 20 dc 02 c0       	push   0xc002dc20
c001a148:	68 ad c2 02 c0       	push   0xc002c2ad
c001a14d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a151:	e8 04 fe ff ff       	call   c0019f5a <EnvVarContainer::loadFrom(char const*, char const*)>
c001a156:	83 c4 1c             	add    esp,0x1c
c001a159:	c3                   	ret    

c001a15a <EnvVarContainer::__loadUser()>:
c001a15a:	c3                   	ret    
c001a15b:	90                   	nop

c001a15c <EnvVarContainer::EnvVarContainer(Process*)>:
c001a15c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a160:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a166:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a16a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a16e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a171:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a175:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a17c:	90                   	nop
c001a17d:	c3                   	ret    

c001a17e <EnvVarContainer::~EnvVarContainer()>:
c001a17e:	83 ec 0c             	sub    esp,0xc
c001a181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a185:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a188:	85 c0                	test   eax,eax
c001a18a:	74 1d                	je     c001a1a9 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a18c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a190:	8b 00                	mov    eax,DWORD PTR [eax]
c001a192:	85 c0                	test   eax,eax
c001a194:	74 13                	je     c001a1a9 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a19a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a19d:	83 ec 0c             	sub    esp,0xc
c001a1a0:	50                   	push   eax
c001a1a1:	e8 4d 58 ff ff       	call   c000f9f3 <free>
c001a1a6:	83 c4 10             	add    esp,0x10
c001a1a9:	90                   	nop
c001a1aa:	83 c4 0c             	add    esp,0xc
c001a1ad:	c3                   	ret    

c001a1ae <Krnl::getEnv(Process*, char const*)>:
c001a1ae:	53                   	push   ebx
c001a1af:	83 ec 08             	sub    esp,0x8
c001a1b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1b6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a1ba:	39 05 10 fc 02 c0    	cmp    DWORD PTR ds:0xc002fc10,eax
c001a1c0:	74 04                	je     c001a1c6 <Krnl::getEnv(Process*, char const*)+0x18>
c001a1c2:	85 c0                	test   eax,eax
c001a1c4:	75 0b                	jne    c001a1d1 <Krnl::getEnv(Process*, char const*)+0x23>
c001a1c6:	a1 f4 f1 02 c0       	mov    eax,ds:0xc002f1f4
c001a1cb:	85 c0                	test   eax,eax
c001a1cd:	75 19                	jne    c001a1e8 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a1cf:	eb 27                	jmp    c001a1f8 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a1d1:	52                   	push   edx
c001a1d2:	52                   	push   edx
c001a1d3:	53                   	push   ebx
c001a1d4:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a1da:	e8 79 fc ff ff       	call   c0019e58 <EnvVarContainer::getEnv(char const*)>
c001a1df:	83 c4 10             	add    esp,0x10
c001a1e2:	85 c0                	test   eax,eax
c001a1e4:	75 28                	jne    c001a20e <Krnl::getEnv(Process*, char const*)+0x60>
c001a1e6:	eb de                	jmp    c001a1c6 <Krnl::getEnv(Process*, char const*)+0x18>
c001a1e8:	52                   	push   edx
c001a1e9:	52                   	push   edx
c001a1ea:	53                   	push   ebx
c001a1eb:	50                   	push   eax
c001a1ec:	e8 67 fc ff ff       	call   c0019e58 <EnvVarContainer::getEnv(char const*)>
c001a1f1:	83 c4 10             	add    esp,0x10
c001a1f4:	85 c0                	test   eax,eax
c001a1f6:	75 16                	jne    c001a20e <Krnl::getEnv(Process*, char const*)+0x60>
c001a1f8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a1fc:	a1 f8 f1 02 c0       	mov    eax,ds:0xc002f1f8
c001a201:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a205:	83 c4 08             	add    esp,0x8
c001a208:	5b                   	pop    ebx
c001a209:	e9 4a fc ff ff       	jmp    c0019e58 <EnvVarContainer::getEnv(char const*)>
c001a20e:	83 c4 08             	add    esp,0x8
c001a211:	5b                   	pop    ebx
c001a212:	c3                   	ret    

c001a213 <Krnl::setEnvSystem(char const*, char const*)>:
c001a213:	83 ec 10             	sub    esp,0x10
c001a216:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a21a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a21e:	ff 35 f8 f1 02 c0    	push   DWORD PTR ds:0xc002f1f8
c001a224:	e8 6d fc ff ff       	call   c0019e96 <EnvVarContainer::setEnv(char const*, char const*)>
c001a229:	83 c4 1c             	add    esp,0x1c
c001a22c:	c3                   	ret    

c001a22d <Krnl::setEnvUser(char const*, char const*)>:
c001a22d:	a1 f4 f1 02 c0       	mov    eax,ds:0xc002f1f4
c001a232:	85 c0                	test   eax,eax
c001a234:	74 15                	je     c001a24b <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a236:	83 ec 10             	sub    esp,0x10
c001a239:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a23d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a241:	50                   	push   eax
c001a242:	e8 4f fc ff ff       	call   c0019e96 <EnvVarContainer::setEnv(char const*, char const*)>
c001a247:	83 c4 1c             	add    esp,0x1c
c001a24a:	c3                   	ret    
c001a24b:	c3                   	ret    

c001a24c <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a24c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a250:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a256:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a25a:	e9 37 fc ff ff       	jmp    c0019e96 <EnvVarContainer::setEnv(char const*, char const*)>

c001a25f <Krnl::deleteEnvSystem(char const*)>:
c001a25f:	c3                   	ret    

c001a260 <Krnl::deleteEnvUser(char const*)>:
c001a260:	c3                   	ret    

c001a261 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a261:	c3                   	ret    

c001a262 <Krnl::newProcessEnv(Process*)>:
c001a262:	83 ec 28             	sub    esp,0x28
c001a265:	6a 0c                	push   0xc
c001a267:	e8 77 57 ff ff       	call   c000f9e3 <malloc>
c001a26c:	5a                   	pop    edx
c001a26d:	59                   	pop    ecx
c001a26e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a272:	50                   	push   eax
c001a273:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a277:	e8 e0 fe ff ff       	call   c001a15c <EnvVarContainer::EnvVarContainer(Process*)>
c001a27c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a280:	83 c4 2c             	add    esp,0x2c
c001a283:	c3                   	ret    

c001a284 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a284:	57                   	push   edi
c001a285:	56                   	push   esi
c001a286:	53                   	push   ebx
c001a287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a28b:	83 ec 0c             	sub    esp,0xc
c001a28e:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a294:	6a 0c                	push   0xc
c001a296:	e8 48 57 ff ff       	call   c000f9e3 <malloc>
c001a29b:	89 c3                	mov    ebx,eax
c001a29d:	58                   	pop    eax
c001a29e:	5a                   	pop    edx
c001a29f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2a3:	53                   	push   ebx
c001a2a4:	e8 b3 fe ff ff       	call   c001a15c <EnvVarContainer::EnvVarContainer(Process*)>
c001a2a9:	8b 07                	mov    eax,DWORD PTR [edi]
c001a2ab:	89 03                	mov    DWORD PTR [ebx],eax
c001a2ad:	c1 e0 03             	shl    eax,0x3
c001a2b0:	89 04 24             	mov    DWORD PTR [esp],eax
c001a2b3:	e8 2b 57 ff ff       	call   c000f9e3 <malloc>
c001a2b8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a2bb:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a2bd:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a2c0:	c1 e1 03             	shl    ecx,0x3
c001a2c3:	89 c7                	mov    edi,eax
c001a2c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a2c7:	83 c4 10             	add    esp,0x10
c001a2ca:	89 d8                	mov    eax,ebx
c001a2cc:	5b                   	pop    ebx
c001a2cd:	5e                   	pop    esi
c001a2ce:	5f                   	pop    edi
c001a2cf:	c3                   	ret    

c001a2d0 <Krnl::loadSystemEnv()>:
c001a2d0:	53                   	push   ebx
c001a2d1:	83 ec 14             	sub    esp,0x14
c001a2d4:	6a 0c                	push   0xc
c001a2d6:	e8 08 57 ff ff       	call   c000f9e3 <malloc>
c001a2db:	89 c3                	mov    ebx,eax
c001a2dd:	58                   	pop    eax
c001a2de:	5a                   	pop    edx
c001a2df:	ff 35 10 fc 02 c0    	push   DWORD PTR ds:0xc002fc10
c001a2e5:	53                   	push   ebx
c001a2e6:	e8 71 fe ff ff       	call   c001a15c <EnvVarContainer::EnvVarContainer(Process*)>
c001a2eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a2ee:	89 1d f8 f1 02 c0    	mov    DWORD PTR ds:0xc002f1f8,ebx
c001a2f4:	e8 47 fe ff ff       	call   c001a140 <EnvVarContainer::__loadSystem()>
c001a2f9:	83 c4 18             	add    esp,0x18
c001a2fc:	5b                   	pop    ebx
c001a2fd:	c3                   	ret    

c001a2fe <Krnl::loadUserEnv()>:
c001a2fe:	53                   	push   ebx
c001a2ff:	83 ec 14             	sub    esp,0x14
c001a302:	6a 0c                	push   0xc
c001a304:	e8 da 56 ff ff       	call   c000f9e3 <malloc>
c001a309:	89 c3                	mov    ebx,eax
c001a30b:	58                   	pop    eax
c001a30c:	5a                   	pop    edx
c001a30d:	ff 35 10 fc 02 c0    	push   DWORD PTR ds:0xc002fc10
c001a313:	53                   	push   ebx
c001a314:	e8 43 fe ff ff       	call   c001a15c <EnvVarContainer::EnvVarContainer(Process*)>
c001a319:	89 1d f4 f1 02 c0    	mov    DWORD PTR ds:0xc002f1f4,ebx
c001a31f:	83 c4 18             	add    esp,0x18
c001a322:	5b                   	pop    ebx
c001a323:	c3                   	ret    

c001a324 <Krnl::flushEnv()>:
c001a324:	c3                   	ret    

c001a325 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a329:	8b 15 f4 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f1f4
c001a32f:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a335:	a1 f8 f1 02 c0       	mov    eax,ds:0xc002f1f8
c001a33a:	8b 00                	mov    eax,DWORD PTR [eax]
c001a33c:	03 01                	add    eax,DWORD PTR [ecx]
c001a33e:	85 d2                	test   edx,edx
c001a340:	74 02                	je     c001a344 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a342:	03 02                	add    eax,DWORD PTR [edx]
c001a344:	c3                   	ret    

c001a345 <Krnl::getProcessEnvPair(Process*, int)>:
c001a345:	57                   	push   edi
c001a346:	56                   	push   esi
c001a347:	8b 35 f4 f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f1f4
c001a34d:	53                   	push   ebx
c001a34e:	85 f6                	test   esi,esi
c001a350:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a354:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a358:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a35e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a362:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a364:	75 16                	jne    c001a37c <Krnl::getProcessEnvPair(Process*, int)+0x37>
c001a366:	39 c2                	cmp    edx,eax
c001a368:	7c 16                	jl     c001a380 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001a36a:	8b 0d f8 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f1f8
c001a370:	8b 31                	mov    esi,DWORD PTR [ecx]
c001a372:	01 c6                	add    esi,eax
c001a374:	39 d6                	cmp    esi,edx
c001a376:	7e 3c                	jle    c001a3b4 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001a378:	29 c2                	sub    edx,eax
c001a37a:	eb 04                	jmp    c001a380 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001a37c:	39 c2                	cmp    edx,eax
c001a37e:	7d 05                	jge    c001a385 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001a380:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a383:	eb 20                	jmp    c001a3a5 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001a385:	8b 3e                	mov    edi,DWORD PTR [esi]
c001a387:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001a38a:	39 d1                	cmp    ecx,edx
c001a38c:	7e 04                	jle    c001a392 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c001a38e:	29 c2                	sub    edx,eax
c001a390:	eb 10                	jmp    c001a3a2 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001a392:	8b 35 f8 f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f1f8
c001a398:	03 0e                	add    ecx,DWORD PTR [esi]
c001a39a:	39 d1                	cmp    ecx,edx
c001a39c:	7e 16                	jle    c001a3b4 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001a39e:	29 c2                	sub    edx,eax
c001a3a0:	29 fa                	sub    edx,edi
c001a3a2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a3a5:	8d 14 d0             	lea    edx,[eax+edx*8]
c001a3a8:	8b 02                	mov    eax,DWORD PTR [edx]
c001a3aa:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001a3ad:	89 03                	mov    DWORD PTR [ebx],eax
c001a3af:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a3b2:	eb 1d                	jmp    c001a3d1 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001a3b4:	83 ec 0c             	sub    esp,0xc
c001a3b7:	68 cf c2 02 c0       	push   0xc002c2cf
c001a3bc:	e8 18 00 00 00       	call   c001a3d9 <Krnl::panic(char const*)>
c001a3c1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a3c7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a3ce:	83 c4 10             	add    esp,0x10
c001a3d1:	89 d8                	mov    eax,ebx
c001a3d3:	5b                   	pop    ebx
c001a3d4:	5e                   	pop    esi
c001a3d5:	5f                   	pop    edi
c001a3d6:	c2 04 00             	ret    0x4

c001a3d9 <Krnl::panic(char const*)>:
c001a3d9:	55                   	push   ebp
c001a3da:	89 e5                	mov    ebp,esp
c001a3dc:	53                   	push   ebx
c001a3dd:	83 ec 10             	sub    esp,0x10
c001a3e0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a3e3:	fa                   	cli    
c001a3e4:	c6 05 04 f2 02 c0 01 	mov    BYTE PTR ds:0xc002f204,0x1
c001a3eb:	53                   	push   ebx
c001a3ec:	e8 4c 56 ff ff       	call   c000fa3d <Krnl::setBootMessage(char const*)>
c001a3f1:	58                   	pop    eax
c001a3f2:	c6 05 20 d6 02 c0 00 	mov    BYTE PTR ds:0xc002d620,0x0
c001a3f9:	5a                   	pop    edx
c001a3fa:	53                   	push   ebx
c001a3fb:	68 e9 c2 02 c0       	push   0xc002c2e9
c001a400:	e8 36 86 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001a405:	59                   	pop    ecx
c001a406:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a40b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a411:	e8 87 63 ff ff       	call   c001079d <setActiveTerminal(VgaText*)>
c001a416:	83 c4 0c             	add    esp,0xc
c001a419:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a41e:	6a 01                	push   0x1
c001a420:	6a 0f                	push   0xf
c001a422:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a428:	e8 cf 61 ff ff       	call   c00105fc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a42d:	58                   	pop    eax
c001a42e:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a433:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a439:	e8 e0 66 ff ff       	call   c0010b1e <VgaText::clearScreen()>
c001a43e:	58                   	pop    eax
c001a43f:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a444:	5a                   	pop    edx
c001a445:	68 02 c3 02 c0       	push   0xc002c302
c001a44a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a450:	e8 55 68 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c001a455:	59                   	pop    ecx
c001a456:	58                   	pop    eax
c001a457:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a45c:	68 a8 c3 02 c0       	push   0xc002c3a8
c001a461:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a467:	e8 3e 68 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c001a46c:	58                   	pop    eax
c001a46d:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a472:	5a                   	pop    edx
c001a473:	68 1e c3 02 c0       	push   0xc002c31e
c001a478:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a47e:	e8 27 68 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c001a483:	59                   	pop    ecx
c001a484:	58                   	pop    eax
c001a485:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a48a:	53                   	push   ebx
c001a48b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a491:	e8 14 68 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c001a496:	58                   	pop    eax
c001a497:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a49c:	5a                   	pop    edx
c001a49d:	68 3e c3 02 c0       	push   0xc002c33e
c001a4a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4a8:	e8 fd 67 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c001a4ad:	a1 00 f2 02 c0       	mov    eax,ds:0xc002f200
c001a4b2:	83 c4 10             	add    esp,0x10
c001a4b5:	85 c0                	test   eax,eax
c001a4b7:	74 02                	je     c001a4bb <Krnl::panic(char const*)+0xe2>
c001a4b9:	ff d0                	call   eax
c001a4bb:	83 ec 0c             	sub    esp,0xc
c001a4be:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a4c1:	e8 8f 30 00 00       	call   c001d555 <Thr::getDriverNameFromAddress(unsigned long)>
c001a4c6:	83 c4 10             	add    esp,0x10
c001a4c9:	89 c3                	mov    ebx,eax
c001a4cb:	85 c0                	test   eax,eax
c001a4cd:	0f 84 4e 02 00 00    	je     c001a721 <Krnl::panic(char const*)+0x348>
c001a4d3:	83 ec 08             	sub    esp,0x8
c001a4d6:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a4db:	68 e4 c3 02 c0       	push   0xc002c3e4
c001a4e0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4e6:	e8 bf 67 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c001a4eb:	58                   	pop    eax
c001a4ec:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a4f1:	5a                   	pop    edx
c001a4f2:	68 1e c3 02 c0       	push   0xc002c31e
c001a4f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4fd:	e8 a8 67 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c001a502:	59                   	pop    ecx
c001a503:	58                   	pop    eax
c001a504:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a509:	53                   	push   ebx
c001a50a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a510:	e8 95 67 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c001a515:	83 c4 10             	add    esp,0x10
c001a518:	83 ec 08             	sub    esp,0x8
c001a51b:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a520:	68 3d c3 02 c0       	push   0xc002c33d
c001a525:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a52b:	e8 7a 67 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c001a530:	58                   	pop    eax
c001a531:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a536:	5a                   	pop    edx
c001a537:	68 3c c4 02 c0       	push   0xc002c43c
c001a53c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a542:	e8 63 67 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c001a547:	59                   	pop    ecx
c001a548:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a54d:	5b                   	pop    ebx
c001a54e:	68 7c c4 02 c0       	push   0xc002c47c
c001a553:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a559:	e8 4c 67 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c001a55e:	58                   	pop    eax
c001a55f:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a564:	5a                   	pop    edx
c001a565:	68 29 c3 02 c0       	push   0xc002c329
c001a56a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a570:	e8 35 67 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c001a575:	59                   	pop    ecx
c001a576:	5b                   	pop    ebx
c001a577:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a57a:	68 41 c3 02 c0       	push   0xc002c341
c001a57f:	e8 b7 84 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001a584:	58                   	pop    eax
c001a585:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a588:	5a                   	pop    edx
c001a589:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a58c:	68 4a c3 02 c0       	push   0xc002c34a
c001a591:	e8 a5 84 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001a596:	59                   	pop    ecx
c001a597:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a59a:	5b                   	pop    ebx
c001a59b:	8b 00                	mov    eax,DWORD PTR [eax]
c001a59d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a5a0:	68 53 c3 02 c0       	push   0xc002c353
c001a5a5:	e8 91 84 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001a5aa:	58                   	pop    eax
c001a5ab:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a5b0:	5a                   	pop    edx
c001a5b1:	68 c0 c4 02 c0       	push   0xc002c4c0
c001a5b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5bc:	e8 e9 66 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c001a5c1:	59                   	pop    ecx
c001a5c2:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a5c7:	5b                   	pop    ebx
c001a5c8:	68 5c c3 02 c0       	push   0xc002c35c
c001a5cd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5d3:	e8 d2 66 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c001a5d8:	0f 20 c0             	mov    eax,cr0
c001a5db:	5a                   	pop    edx
c001a5dc:	59                   	pop    ecx
c001a5dd:	50                   	push   eax
c001a5de:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a5e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5e9:	e8 76 66 ff ff       	call   c0010c64 <VgaText::putx(unsigned int)>
c001a5ee:	5b                   	pop    ebx
c001a5ef:	58                   	pop    eax
c001a5f0:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a5f5:	68 66 c3 02 c0       	push   0xc002c366
c001a5fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a600:	e8 a5 66 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c001a605:	0f 20 d0             	mov    eax,cr2
c001a608:	5a                   	pop    edx
c001a609:	59                   	pop    ecx
c001a60a:	50                   	push   eax
c001a60b:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a610:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a616:	e8 49 66 ff ff       	call   c0010c64 <VgaText::putx(unsigned int)>
c001a61b:	5b                   	pop    ebx
c001a61c:	58                   	pop    eax
c001a61d:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a622:	68 70 c3 02 c0       	push   0xc002c370
c001a627:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a62d:	e8 78 66 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c001a632:	0f 20 d8             	mov    eax,cr3
c001a635:	5a                   	pop    edx
c001a636:	59                   	pop    ecx
c001a637:	50                   	push   eax
c001a638:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a63d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a643:	e8 1c 66 ff ff       	call   c0010c64 <VgaText::putx(unsigned int)>
c001a648:	5b                   	pop    ebx
c001a649:	58                   	pop    eax
c001a64a:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a64f:	68 83 c3 02 c0       	push   0xc002c383
c001a654:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a65a:	e8 4b 66 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c001a65f:	0f 20 e0             	mov    eax,cr4
c001a662:	5a                   	pop    edx
c001a663:	59                   	pop    ecx
c001a664:	50                   	push   eax
c001a665:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a66a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a670:	e8 ef 65 ff ff       	call   c0010c64 <VgaText::putx(unsigned int)>
c001a675:	5b                   	pop    ebx
c001a676:	58                   	pop    eax
c001a677:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a67c:	68 8d c3 02 c0       	push   0xc002c38d
c001a681:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a687:	e8 1e 66 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c001a68c:	5a                   	pop    edx
c001a68d:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a692:	59                   	pop    ecx
c001a693:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a699:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a69c:	50                   	push   eax
c001a69d:	e8 c2 65 ff ff       	call   c0010c64 <VgaText::putx(unsigned int)>
c001a6a2:	5b                   	pop    ebx
c001a6a3:	58                   	pop    eax
c001a6a4:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a6a9:	68 a4 c3 02 c0       	push   0xc002c3a4
c001a6ae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6b4:	e8 f1 65 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c001a6b9:	5a                   	pop    edx
c001a6ba:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a6bf:	59                   	pop    ecx
c001a6c0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a6c6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a6c9:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a6cc:	50                   	push   eax
c001a6cd:	e8 92 65 ff ff       	call   c0010c64 <VgaText::putx(unsigned int)>
c001a6d2:	5b                   	pop    ebx
c001a6d3:	58                   	pop    eax
c001a6d4:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a6d9:	68 a4 c3 02 c0       	push   0xc002c3a4
c001a6de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6e4:	e8 c1 65 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c001a6e9:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a6ee:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a6f1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a6f7:	8b 12                	mov    edx,DWORD PTR [edx]
c001a6f9:	59                   	pop    ecx
c001a6fa:	5b                   	pop    ebx
c001a6fb:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a6fe:	50                   	push   eax
c001a6ff:	e8 60 65 ff ff       	call   c0010c64 <VgaText::putx(unsigned int)>
c001a704:	83 c4 10             	add    esp,0x10
c001a707:	b2 fe                	mov    dl,0xfe
c001a709:	e4 60                	in     al,0x60
c001a70b:	3c 1c                	cmp    al,0x1c
c001a70d:	74 04                	je     c001a713 <Krnl::panic(char const*)+0x33a>
c001a70f:	3c 5a                	cmp    al,0x5a
c001a711:	75 f6                	jne    c001a709 <Krnl::panic(char const*)+0x330>
c001a713:	e4 64                	in     al,0x64
c001a715:	a8 02                	test   al,0x2
c001a717:	75 fa                	jne    c001a713 <Krnl::panic(char const*)+0x33a>
c001a719:	88 d0                	mov    al,dl
c001a71b:	e6 64                	out    0x64,al
c001a71d:	fa                   	cli    
c001a71e:	f4                   	hlt    
c001a71f:	eb e8                	jmp    c001a709 <Krnl::panic(char const*)+0x330>
c001a721:	50                   	push   eax
c001a722:	50                   	push   eax
c001a723:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a728:	68 10 c4 02 c0       	push   0xc002c410
c001a72d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a733:	e8 72 65 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c001a738:	58                   	pop    eax
c001a739:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a73e:	5a                   	pop    edx
c001a73f:	68 1e c3 02 c0       	push   0xc002c31e
c001a744:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a74a:	e8 5b 65 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c001a74f:	59                   	pop    ecx
c001a750:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a755:	5b                   	pop    ebx
c001a756:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a759:	83 c0 0c             	add    eax,0xc
c001a75c:	50                   	push   eax
c001a75d:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001a762:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a768:	e8 3d 65 ff ff       	call   c0010caa <VgaText::puts(char const*)>
c001a76d:	83 c4 10             	add    esp,0x10
c001a770:	e9 a3 fd ff ff       	jmp    c001a518 <Krnl::panic(char const*)+0x13f>

c001a775 <Net::switchEndian16(unsigned short)>:
c001a775:	83 ec 04             	sub    esp,0x4
c001a778:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a77c:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a780:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a784:	c1 f8 08             	sar    eax,0x8
c001a787:	89 c2                	mov    edx,eax
c001a789:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a78d:	c1 e0 08             	shl    eax,0x8
c001a790:	09 d0                	or     eax,edx
c001a792:	83 c4 04             	add    esp,0x4
c001a795:	c3                   	ret    

c001a796 <Net::switchEndian32(unsigned int)>:
c001a796:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a79a:	c1 e8 18             	shr    eax,0x18
c001a79d:	89 c2                	mov    edx,eax
c001a79f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7a3:	c1 e0 08             	shl    eax,0x8
c001a7a6:	25 00 00 ff 00       	and    eax,0xff0000
c001a7ab:	09 c2                	or     edx,eax
c001a7ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7b1:	c1 e8 08             	shr    eax,0x8
c001a7b4:	25 00 ff 00 00       	and    eax,0xff00
c001a7b9:	09 c2                	or     edx,eax
c001a7bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7bf:	c1 e0 18             	shl    eax,0x18
c001a7c2:	09 d0                	or     eax,edx
c001a7c4:	c3                   	ret    

c001a7c5 <Net::crc32Calc(unsigned char*, int)>:
c001a7c5:	83 ec 10             	sub    esp,0x10
c001a7c8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a7cd:	75 07                	jne    c001a7d6 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a7cf:	b8 00 00 00 00       	mov    eax,0x0
c001a7d4:	eb 7c                	jmp    c001a852 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a7d6:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a7db:	7f 07                	jg     c001a7e4 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a7dd:	b8 00 00 00 00       	mov    eax,0x0
c001a7e2:	eb 6e                	jmp    c001a852 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a7e4:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a7ec:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a7f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7f8:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a7fc:	7d 4e                	jge    c001a84c <Net::crc32Calc(unsigned char*, int)+0x87>
c001a7fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a802:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a806:	01 d0                	add    eax,edx
c001a808:	8a 00                	mov    al,BYTE PTR [eax]
c001a80a:	0f b6 c0             	movzx  eax,al
c001a80d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a811:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a819:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a81e:	7f 26                	jg     c001a846 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a820:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a824:	83 e0 01             	and    eax,0x1
c001a827:	74 0d                	je     c001a836 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a829:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a82d:	d1 e8                	shr    eax,1
c001a82f:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a834:	eb 06                	jmp    c001a83c <Net::crc32Calc(unsigned char*, int)+0x77>
c001a836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a83a:	d1 e8                	shr    eax,1
c001a83c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a840:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a844:	eb d3                	jmp    c001a819 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a846:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a84a:	eb a8                	jmp    c001a7f4 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a84c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a850:	f7 d0                	not    eax
c001a852:	83 c4 10             	add    esp,0x10
c001a855:	c3                   	ret    

c001a856 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a856:	57                   	push   edi
c001a857:	56                   	push   esi
c001a858:	53                   	push   ebx
c001a859:	83 ec 60             	sub    esp,0x60
c001a85c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a863:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a867:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a86f:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a874:	7f 1a                	jg     c001a890 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a876:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a87d:	8d 50 01             	lea    edx,[eax+0x1]
c001a880:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a887:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a88a:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a88e:	eb df                	jmp    c001a86f <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a890:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a897:	8d 50 01             	lea    edx,[eax+0x1]
c001a89a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a8a1:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a8a4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a8ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a8af:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a8b3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a8b7:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a8bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a8c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a8c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a8cb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a8cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a8d3:	89 c6                	mov    esi,eax
c001a8d5:	89 d7                	mov    edi,edx
c001a8d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a8d9:	89 c8                	mov    eax,ecx
c001a8db:	89 fa                	mov    edx,edi
c001a8dd:	89 f3                	mov    ebx,esi
c001a8df:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a8e3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a8e7:	89 04 24             	mov    DWORD PTR [esp],eax
c001a8ea:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a8f2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a8f9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a8fd:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a901:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a905:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a90d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a911:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a915:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a919:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a91d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a921:	89 c6                	mov    esi,eax
c001a923:	89 d7                	mov    edi,edx
c001a925:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a927:	89 c8                	mov    eax,ecx
c001a929:	89 fa                	mov    edx,edi
c001a92b:	89 f3                	mov    ebx,esi
c001a92d:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a931:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a935:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a939:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a941:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a948:	0f b7 c0             	movzx  eax,ax
c001a94b:	c1 f8 08             	sar    eax,0x8
c001a94e:	89 c1                	mov    ecx,eax
c001a950:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a957:	8d 50 01             	lea    edx,[eax+0x1]
c001a95a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a961:	88 ca                	mov    dl,cl
c001a963:	88 10                	mov    BYTE PTR [eax],dl
c001a965:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a96c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a973:	8d 48 01             	lea    ecx,[eax+0x1]
c001a976:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a97d:	88 10                	mov    BYTE PTR [eax],dl
c001a97f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a983:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a987:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a98e:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a992:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a996:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a99a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a99e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a9a2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a9a6:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a9aa:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a9ae:	89 c6                	mov    esi,eax
c001a9b0:	89 d7                	mov    edi,edx
c001a9b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a9b4:	89 c8                	mov    eax,ecx
c001a9b6:	89 fa                	mov    edx,edi
c001a9b8:	89 f3                	mov    ebx,esi
c001a9ba:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a9be:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a9c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a9c6:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a9ca:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a9d1:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a9d8:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a9dc:	50                   	push   eax
c001a9dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a9e1:	e8 df fd ff ff       	call   c001a7c5 <Net::crc32Calc(unsigned char*, int)>
c001a9e6:	83 c4 08             	add    esp,0x8
c001a9e9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a9ed:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a9f1:	c1 e8 18             	shr    eax,0x18
c001a9f4:	89 c1                	mov    ecx,eax
c001a9f6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a9fd:	8d 50 01             	lea    edx,[eax+0x1]
c001aa00:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001aa07:	88 ca                	mov    dl,cl
c001aa09:	88 10                	mov    BYTE PTR [eax],dl
c001aa0b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001aa0f:	c1 e8 10             	shr    eax,0x10
c001aa12:	89 c1                	mov    ecx,eax
c001aa14:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aa1b:	8d 50 01             	lea    edx,[eax+0x1]
c001aa1e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001aa25:	88 ca                	mov    dl,cl
c001aa27:	88 10                	mov    BYTE PTR [eax],dl
c001aa29:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001aa2d:	c1 e8 08             	shr    eax,0x8
c001aa30:	89 c1                	mov    ecx,eax
c001aa32:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aa39:	8d 50 01             	lea    edx,[eax+0x1]
c001aa3c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001aa43:	88 ca                	mov    dl,cl
c001aa45:	88 10                	mov    BYTE PTR [eax],dl
c001aa47:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aa4e:	8d 50 01             	lea    edx,[eax+0x1]
c001aa51:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001aa58:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001aa5c:	88 10                	mov    BYTE PTR [eax],dl
c001aa5e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001aa62:	83 c4 60             	add    esp,0x60
c001aa65:	5b                   	pop    ebx
c001aa66:	5e                   	pop    esi
c001aa67:	5f                   	pop    edi
c001aa68:	c3                   	ret    

c001aa69 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001aa69:	57                   	push   edi
c001aa6a:	56                   	push   esi
c001aa6b:	53                   	push   ebx
c001aa6c:	83 ec 70             	sub    esp,0x70
c001aa6f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa76:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001aa7a:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001aa82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aa89:	83 c0 0e             	add    eax,0xe
c001aa8c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001aa90:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa97:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001aa9b:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001aaa3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aaa7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001aaab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aaaf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aab3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001aab7:	89 c6                	mov    esi,eax
c001aab9:	89 d7                	mov    edi,edx
c001aabb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aabd:	89 c8                	mov    eax,ecx
c001aabf:	89 fa                	mov    edx,edi
c001aac1:	89 f3                	mov    ebx,esi
c001aac3:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001aac7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001aacb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aacf:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001aad7:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aade:	83 c0 08             	add    eax,0x8
c001aae1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001aae5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aaec:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001aaf0:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001aaf8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001aafc:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ab00:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ab04:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001ab08:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001ab0c:	89 c6                	mov    esi,eax
c001ab0e:	89 d7                	mov    edi,edx
c001ab10:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab12:	89 c8                	mov    eax,ecx
c001ab14:	89 fa                	mov    edx,edi
c001ab16:	89 f3                	mov    ebx,esi
c001ab18:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001ab1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001ab20:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ab24:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001ab2c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab33:	8d 50 01             	lea    edx,[eax+0x1]
c001ab36:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ab3d:	8a 00                	mov    al,BYTE PTR [eax]
c001ab3f:	0f b6 c0             	movzx  eax,al
c001ab42:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001ab47:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab4e:	8d 50 01             	lea    edx,[eax+0x1]
c001ab51:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ab58:	8a 00                	mov    al,BYTE PTR [eax]
c001ab5a:	0f b6 c0             	movzx  eax,al
c001ab5d:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001ab62:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001ab67:	c1 e0 08             	shl    eax,0x8
c001ab6a:	89 c2                	mov    edx,eax
c001ab6c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ab70:	09 d0                	or     eax,edx
c001ab72:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001ab79:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ab7d:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001ab85:	75 46                	jne    c001abcd <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001ab87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ab8e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ab91:	66 3d dc 05          	cmp    ax,0x5dc
c001ab95:	77 16                	ja     c001abad <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001ab97:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ab9e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aba1:	0f b7 c0             	movzx  eax,ax
c001aba4:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001abab:	eb 20                	jmp    c001abcd <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001abad:	83 ec 0c             	sub    esp,0xc
c001abb0:	68 e8 c4 02 c0       	push   0xc002c4e8
c001abb5:	e8 81 7e ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001abba:	83 c4 10             	add    esp,0x10
c001abbd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001abc4:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001abc8:	e9 17 01 00 00       	jmp    c001ace4 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001abcd:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001abd4:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001abdb:	8b 12                	mov    edx,DWORD PTR [edx]
c001abdd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001abe1:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001abe8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001abec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001abf0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001abf4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001abf8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001abfc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ac00:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ac04:	89 c6                	mov    esi,eax
c001ac06:	89 d7                	mov    edi,edx
c001ac08:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac0a:	89 c8                	mov    eax,ecx
c001ac0c:	89 fa                	mov    edx,edi
c001ac0e:	89 f3                	mov    ebx,esi
c001ac10:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ac14:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ac18:	89 04 24             	mov    DWORD PTR [esp],eax
c001ac1b:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ac22:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001ac29:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac30:	8d 50 01             	lea    edx,[eax+0x1]
c001ac33:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ac3a:	8a 00                	mov    al,BYTE PTR [eax]
c001ac3c:	0f b6 c0             	movzx  eax,al
c001ac3f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001ac43:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac4a:	8d 50 01             	lea    edx,[eax+0x1]
c001ac4d:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ac54:	8a 00                	mov    al,BYTE PTR [eax]
c001ac56:	0f b6 c0             	movzx  eax,al
c001ac59:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001ac5d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac64:	8d 50 01             	lea    edx,[eax+0x1]
c001ac67:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ac6e:	8a 00                	mov    al,BYTE PTR [eax]
c001ac70:	0f b6 c0             	movzx  eax,al
c001ac73:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001ac77:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac7e:	8d 50 01             	lea    edx,[eax+0x1]
c001ac81:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ac88:	8a 00                	mov    al,BYTE PTR [eax]
c001ac8a:	0f b6 c0             	movzx  eax,al
c001ac8d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001ac91:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001ac95:	c1 e0 18             	shl    eax,0x18
c001ac98:	89 c2                	mov    edx,eax
c001ac9a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001ac9e:	c1 e0 10             	shl    eax,0x10
c001aca1:	09 c2                	or     edx,eax
c001aca3:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001aca7:	c1 e0 08             	shl    eax,0x8
c001acaa:	09 d0                	or     eax,edx
c001acac:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001acb0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001acb4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001acbb:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001acbf:	83 e8 04             	sub    eax,0x4
c001acc2:	83 ec 08             	sub    esp,0x8
c001acc5:	50                   	push   eax
c001acc6:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001acca:	e8 f6 fa ff ff       	call   c001a7c5 <Net::crc32Calc(unsigned char*, int)>
c001accf:	83 c4 10             	add    esp,0x10
c001acd2:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001acd6:	0f 94 c2             	sete   dl
c001acd9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ace0:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ace3:	90                   	nop
c001ace4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aceb:	83 c4 70             	add    esp,0x70
c001acee:	5b                   	pop    ebx
c001acef:	5e                   	pop    esi
c001acf0:	5f                   	pop    edi
c001acf1:	c2 04 00             	ret    0x4

c001acf4 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001acf4:	55                   	push   ebp
c001acf5:	57                   	push   edi
c001acf6:	56                   	push   esi
c001acf7:	53                   	push   ebx
c001acf8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001acfe:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ad05:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ad07:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ad0a:	80 fb 40             	cmp    bl,0x40
c001ad0d:	75 1b                	jne    c001ad2a <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ad0f:	8a 16                	mov    dl,BYTE PTR [esi]
c001ad11:	84 d2                	test   dl,dl
c001ad13:	0f 84 f1 00 00 00    	je     c001ae0a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad19:	8d 46 01             	lea    eax,[esi+0x1]
c001ad1c:	80 fa 3a             	cmp    dl,0x3a
c001ad1f:	74 04                	je     c001ad25 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ad21:	89 c6                	mov    esi,eax
c001ad23:	eb ea                	jmp    c001ad0f <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ad25:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ad28:	89 c6                	mov    esi,eax
c001ad2a:	50                   	push   eax
c001ad2b:	6a 40                	push   0x40
c001ad2d:	6a 00                	push   0x0
c001ad2f:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad33:	50                   	push   eax
c001ad34:	e8 17 5a fe ff       	call   c0000750 <memset>
c001ad39:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ad40:	31 c0                	xor    eax,eax
c001ad42:	83 c4 10             	add    esp,0x10
c001ad45:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ad47:	84 c9                	test   cl,cl
c001ad49:	0f 84 bb 00 00 00    	je     c001ae0a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad4f:	3d c7 00 00 00       	cmp    eax,0xc7
c001ad54:	0f 8f b0 00 00 00    	jg     c001ae0a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad5a:	80 f9 0a             	cmp    cl,0xa
c001ad5d:	0f 85 98 00 00 00    	jne    c001adfb <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ad63:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ad68:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ad6c:	a8 df                	test   al,0xdf
c001ad6e:	0f 94 c1             	sete   cl
c001ad71:	3c 23                	cmp    al,0x23
c001ad73:	0f 94 c2             	sete   dl
c001ad76:	08 d1                	or     cl,dl
c001ad78:	75 4a                	jne    c001adc4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad7a:	8d 50 f7             	lea    edx,[eax-0x9]
c001ad7d:	80 fa 01             	cmp    dl,0x1
c001ad80:	76 42                	jbe    c001adc4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad82:	3c 5b                	cmp    al,0x5b
c001ad84:	75 42                	jne    c001adc8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ad86:	80 fb 40             	cmp    bl,0x40
c001ad89:	75 39                	jne    c001adc4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad8b:	83 ec 0c             	sub    esp,0xc
c001ad8e:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ad92:	52                   	push   edx
c001ad93:	e8 d4 59 fe ff       	call   c000076c <strlen>
c001ad98:	83 c4 10             	add    esp,0x10
c001ad9b:	83 f8 3f             	cmp    eax,0x3f
c001ad9e:	77 6a                	ja     c001ae0a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ada0:	50                   	push   eax
c001ada1:	50                   	push   eax
c001ada2:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ada6:	52                   	push   edx
c001ada7:	8d 54 24 24          	lea    edx,[esp+0x24]
c001adab:	52                   	push   edx
c001adac:	e8 5b 5a fe ff       	call   c000080c <strcpy>
c001adb1:	58                   	pop    eax
c001adb2:	8d 54 24 24          	lea    edx,[esp+0x24]
c001adb6:	52                   	push   edx
c001adb7:	e8 b0 59 fe ff       	call   c000076c <strlen>
c001adbc:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001adc1:	83 c4 10             	add    esp,0x10
c001adc4:	31 d2                	xor    edx,edx
c001adc6:	eb 3a                	jmp    c001ae02 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001adc8:	80 fb 40             	cmp    bl,0x40
c001adcb:	74 06                	je     c001add3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001adcd:	8d 44 24 58          	lea    eax,[esp+0x58]
c001add1:	eb 20                	jmp    c001adf3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001add3:	50                   	push   eax
c001add4:	50                   	push   eax
c001add5:	55                   	push   ebp
c001add6:	8d 44 24 24          	lea    eax,[esp+0x24]
c001adda:	50                   	push   eax
c001addb:	e8 b8 5a fe ff       	call   c0000898 <strcmp>
c001ade0:	83 c4 10             	add    esp,0x10
c001ade3:	85 c0                	test   eax,eax
c001ade5:	75 dd                	jne    c001adc4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ade7:	eb e4                	jmp    c001adcd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ade9:	8d 50 01             	lea    edx,[eax+0x1]
c001adec:	80 f9 3d             	cmp    cl,0x3d
c001adef:	74 1d                	je     c001ae0e <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001adf1:	89 d0                	mov    eax,edx
c001adf3:	8a 08                	mov    cl,BYTE PTR [eax]
c001adf5:	84 c9                	test   cl,cl
c001adf7:	75 f0                	jne    c001ade9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001adf9:	eb 0f                	jmp    c001ae0a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adfb:	8d 50 01             	lea    edx,[eax+0x1]
c001adfe:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ae02:	47                   	inc    edi
c001ae03:	89 d0                	mov    eax,edx
c001ae05:	e9 3b ff ff ff       	jmp    c001ad45 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ae0a:	31 c0                	xor    eax,eax
c001ae0c:	eb 33                	jmp    c001ae41 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ae0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ae12:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ae15:	50                   	push   eax
c001ae16:	50                   	push   eax
c001ae17:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ae1b:	50                   	push   eax
c001ae1c:	56                   	push   esi
c001ae1d:	e8 76 5a fe ff       	call   c0000898 <strcmp>
c001ae22:	83 c4 10             	add    esp,0x10
c001ae25:	85 c0                	test   eax,eax
c001ae27:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae2b:	75 97                	jne    c001adc4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae2d:	51                   	push   ecx
c001ae2e:	51                   	push   ecx
c001ae2f:	52                   	push   edx
c001ae30:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ae37:	e8 d0 59 fe ff       	call   c000080c <strcpy>
c001ae3c:	83 c4 10             	add    esp,0x10
c001ae3f:	b0 01                	mov    al,0x1
c001ae41:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ae47:	5b                   	pop    ebx
c001ae48:	5e                   	pop    esi
c001ae49:	5f                   	pop    edi
c001ae4a:	5d                   	pop    ebp
c001ae4b:	c3                   	ret    

c001ae4c <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ae4c:	57                   	push   edi
c001ae4d:	56                   	push   esi
c001ae4e:	53                   	push   ebx
c001ae4f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ae55:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ae5c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ae63:	53                   	push   ebx
c001ae64:	e8 03 59 fe ff       	call   c000076c <strlen>
c001ae69:	89 34 24             	mov    DWORD PTR [esp],esi
c001ae6c:	89 c7                	mov    edi,eax
c001ae6e:	e8 f9 58 fe ff       	call   c000076c <strlen>
c001ae73:	83 c4 10             	add    esp,0x10
c001ae76:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001ae7a:	3d ff 00 00 00       	cmp    eax,0xff
c001ae7f:	0f 87 d3 00 00 00    	ja     c001af58 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ae85:	57                   	push   edi
c001ae86:	57                   	push   edi
c001ae87:	56                   	push   esi
c001ae88:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001ae8c:	56                   	push   esi
c001ae8d:	e8 7a 59 fe ff       	call   c000080c <strcpy>
c001ae92:	58                   	pop    eax
c001ae93:	5a                   	pop    edx
c001ae94:	68 8a c8 02 c0       	push   0xc002c88a
c001ae99:	56                   	push   esi
c001ae9a:	e8 ad 5a fe ff       	call   c000094c <strcat>
c001ae9f:	59                   	pop    ecx
c001aea0:	5f                   	pop    edi
c001aea1:	53                   	push   ebx
c001aea2:	56                   	push   esi
c001aea3:	e8 a4 5a fe ff       	call   c000094c <strcat>
c001aea8:	58                   	pop    eax
c001aea9:	5a                   	pop    edx
c001aeaa:	68 34 c5 02 c0       	push   0xc002c534
c001aeaf:	56                   	push   esi
c001aeb0:	e8 97 5a fe ff       	call   c000094c <strcat>
c001aeb5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001aebc:	e8 22 4b ff ff       	call   c000f9e3 <malloc>
c001aec1:	83 c4 0c             	add    esp,0xc
c001aec4:	89 c3                	mov    ebx,eax
c001aec6:	ff 35 10 fc 02 c0    	push   DWORD PTR ds:0xc002fc10
c001aecc:	56                   	push   esi
c001aecd:	50                   	push   eax
c001aece:	e8 c7 80 ff ff       	call   c0012f9a <File::File(char const*, Process*)>
c001aed3:	83 c4 10             	add    esp,0x10
c001aed6:	85 db                	test   ebx,ebx
c001aed8:	74 7e                	je     c001af58 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aeda:	51                   	push   ecx
c001aedb:	51                   	push   ecx
c001aedc:	6a 01                	push   0x1
c001aede:	53                   	push   ebx
c001aedf:	e8 1a 81 ff ff       	call   c0012ffe <File::open(FileOpenMode)>
c001aee4:	83 c4 10             	add    esp,0x10
c001aee7:	85 c0                	test   eax,eax
c001aee9:	74 08                	je     c001aef3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001aeeb:	83 ec 0c             	sub    esp,0xc
c001aeee:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aef0:	53                   	push   ebx
c001aef1:	eb 5f                	jmp    c001af52 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001aef3:	52                   	push   edx
c001aef4:	8d 44 24 17          	lea    eax,[esp+0x17]
c001aef8:	50                   	push   eax
c001aef9:	8d 44 24 20          	lea    eax,[esp+0x20]
c001aefd:	50                   	push   eax
c001aefe:	53                   	push   ebx
c001aeff:	e8 a6 83 ff ff       	call   c00132aa <File::stat(unsigned long long*, bool*)>
c001af04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af08:	83 c4 10             	add    esp,0x10
c001af0b:	89 c1                	mov    ecx,eax
c001af0d:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001af11:	74 31                	je     c001af44 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af13:	83 ec 0c             	sub    esp,0xc
c001af16:	50                   	push   eax
c001af17:	e8 c7 4a ff ff       	call   c000f9e3 <malloc>
c001af1c:	89 c6                	mov    esi,eax
c001af1e:	58                   	pop    eax
c001af1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af21:	8d 54 24 20          	lea    edx,[esp+0x20]
c001af25:	52                   	push   edx
c001af26:	56                   	push   esi
c001af27:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af2b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af2f:	53                   	push   ebx
c001af30:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af33:	83 c4 20             	add    esp,0x20
c001af36:	85 c0                	test   eax,eax
c001af38:	75 0a                	jne    c001af44 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af3a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af3e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001af42:	74 18                	je     c001af5c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001af44:	83 ec 0c             	sub    esp,0xc
c001af47:	53                   	push   ebx
c001af48:	e8 0f 81 ff ff       	call   c001305c <File::close()>
c001af4d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af52:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af55:	83 c4 10             	add    esp,0x10
c001af58:	31 c0                	xor    eax,eax
c001af5a:	eb 3b                	jmp    c001af97 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001af5c:	83 ec 0c             	sub    esp,0xc
c001af5f:	53                   	push   ebx
c001af60:	e8 f7 80 ff ff       	call   c001305c <File::close()>
c001af65:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af67:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af6a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af6d:	83 c4 0c             	add    esp,0xc
c001af70:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af77:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af7e:	56                   	push   esi
c001af7f:	e8 70 fd ff ff       	call   c001acf4 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001af84:	89 34 24             	mov    DWORD PTR [esp],esi
c001af87:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001af8b:	e8 63 4a ff ff       	call   c000f9f3 <free>
c001af90:	83 c4 10             	add    esp,0x10
c001af93:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001af97:	81 c4 20 01 00 00    	add    esp,0x120
c001af9d:	5b                   	pop    ebx
c001af9e:	5e                   	pop    esi
c001af9f:	5f                   	pop    edi
c001afa0:	c3                   	ret    

c001afa1 <Reg::getLine(char*, char*, char*)>:
c001afa1:	57                   	push   edi
c001afa2:	56                   	push   esi
c001afa3:	53                   	push   ebx
c001afa4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001afa8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001afac:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001afb0:	57                   	push   edi
c001afb1:	56                   	push   esi
c001afb2:	53                   	push   ebx
c001afb3:	68 39 c5 02 c0       	push   0xc002c539
c001afb8:	e8 8f fe ff ff       	call   c001ae4c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001afbd:	83 c4 10             	add    esp,0x10
c001afc0:	84 c0                	test   al,al
c001afc2:	75 10                	jne    c001afd4 <Reg::getLine(char*, char*, char*)+0x33>
c001afc4:	57                   	push   edi
c001afc5:	56                   	push   esi
c001afc6:	53                   	push   ebx
c001afc7:	68 5e c5 02 c0       	push   0xc002c55e
c001afcc:	e8 7b fe ff ff       	call   c001ae4c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001afd1:	83 c4 10             	add    esp,0x10
c001afd4:	5b                   	pop    ebx
c001afd5:	5e                   	pop    esi
c001afd6:	5f                   	pop    edi
c001afd7:	c3                   	ret    

c001afd8 <Reg::readInt(char*, char*, int*)>:
c001afd8:	55                   	push   ebp
c001afd9:	57                   	push   edi
c001afda:	56                   	push   esi
c001afdb:	53                   	push   ebx
c001afdc:	81 ec f0 00 00 00    	sub    esp,0xf0
c001afe2:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001afe6:	57                   	push   edi
c001afe7:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001afee:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aff5:	e8 a7 ff ff ff       	call   c001afa1 <Reg::getLine(char*, char*, char*)>
c001affa:	83 c4 10             	add    esp,0x10
c001affd:	84 c0                	test   al,al
c001afff:	0f 84 b3 00 00 00    	je     c001b0b8 <Reg::readInt(char*, char*, int*)+0xe0>
c001b005:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b009:	80 fa 2b             	cmp    dl,0x2b
c001b00c:	74 0c                	je     c001b01a <Reg::readInt(char*, char*, int*)+0x42>
c001b00e:	80 fa 2d             	cmp    dl,0x2d
c001b011:	75 0e                	jne    c001b021 <Reg::readInt(char*, char*, int*)+0x49>
c001b013:	ba 01 00 00 00       	mov    edx,0x1
c001b018:	eb 0b                	jmp    c001b025 <Reg::readInt(char*, char*, int*)+0x4d>
c001b01a:	ba 01 00 00 00       	mov    edx,0x1
c001b01f:	eb 02                	jmp    c001b023 <Reg::readInt(char*, char*, int*)+0x4b>
c001b021:	31 d2                	xor    edx,edx
c001b023:	31 c0                	xor    eax,eax
c001b025:	be 0a 00 00 00       	mov    esi,0xa
c001b02a:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b02f:	75 20                	jne    c001b051 <Reg::readInt(char*, char*, int*)+0x79>
c001b031:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b035:	80 f9 78             	cmp    cl,0x78
c001b038:	75 0a                	jne    c001b044 <Reg::readInt(char*, char*, int*)+0x6c>
c001b03a:	83 c2 02             	add    edx,0x2
c001b03d:	be 10 00 00 00       	mov    esi,0x10
c001b042:	eb 0d                	jmp    c001b051 <Reg::readInt(char*, char*, int*)+0x79>
c001b044:	80 f9 62             	cmp    cl,0x62
c001b047:	75 08                	jne    c001b051 <Reg::readInt(char*, char*, int*)+0x79>
c001b049:	83 c2 02             	add    edx,0x2
c001b04c:	be 02 00 00 00       	mov    esi,0x2
c001b051:	01 d7                	add    edi,edx
c001b053:	31 d2                	xor    edx,edx
c001b055:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b057:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b05b:	80 fb 0d             	cmp    bl,0xd
c001b05e:	0f 94 c3             	sete   bl
c001b061:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b066:	0f 94 c1             	sete   cl
c001b069:	08 cb                	or     bl,cl
c001b06b:	75 3a                	jne    c001b0a7 <Reg::readInt(char*, char*, int*)+0xcf>
c001b06d:	0f af d6             	imul   edx,esi
c001b070:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b075:	83 fe 10             	cmp    esi,0x10
c001b078:	75 26                	jne    c001b0a0 <Reg::readInt(char*, char*, int*)+0xc8>
c001b07a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b07e:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b081:	89 e9                	mov    ecx,ebp
c001b083:	80 f9 05             	cmp    cl,0x5
c001b086:	77 06                	ja     c001b08e <Reg::readInt(char*, char*, int*)+0xb6>
c001b088:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b08c:	eb 16                	jmp    c001b0a4 <Reg::readInt(char*, char*, int*)+0xcc>
c001b08e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b092:	83 e9 61             	sub    ecx,0x61
c001b095:	80 f9 05             	cmp    cl,0x5
c001b098:	77 06                	ja     c001b0a0 <Reg::readInt(char*, char*, int*)+0xc8>
c001b09a:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b09e:	eb 04                	jmp    c001b0a4 <Reg::readInt(char*, char*, int*)+0xcc>
c001b0a0:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b0a4:	47                   	inc    edi
c001b0a5:	eb ae                	jmp    c001b055 <Reg::readInt(char*, char*, int*)+0x7d>
c001b0a7:	84 c0                	test   al,al
c001b0a9:	74 02                	je     c001b0ad <Reg::readInt(char*, char*, int*)+0xd5>
c001b0ab:	f7 da                	neg    edx
c001b0ad:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b0b4:	89 10                	mov    DWORD PTR [eax],edx
c001b0b6:	88 d8                	mov    al,bl
c001b0b8:	81 c4 ec 00 00 00    	add    esp,0xec
c001b0be:	5b                   	pop    ebx
c001b0bf:	5e                   	pop    esi
c001b0c0:	5f                   	pop    edi
c001b0c1:	5d                   	pop    ebp
c001b0c2:	c3                   	ret    

c001b0c3 <Reg::readString(char*, char*, char*, int)>:
c001b0c3:	57                   	push   edi
c001b0c4:	56                   	push   esi
c001b0c5:	53                   	push   ebx
c001b0c6:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b0cc:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b0d3:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b0d7:	57                   	push   edi
c001b0d8:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b0df:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b0e6:	e8 b6 fe ff ff       	call   c001afa1 <Reg::getLine(char*, char*, char*)>
c001b0eb:	83 c4 10             	add    esp,0x10
c001b0ee:	89 c6                	mov    esi,eax
c001b0f0:	84 c0                	test   al,al
c001b0f2:	74 44                	je     c001b138 <Reg::readString(char*, char*, char*, int)+0x75>
c001b0f4:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b0fb:	31 c0                	xor    eax,eax
c001b0fd:	4a                   	dec    edx
c001b0fe:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b101:	84 c9                	test   cl,cl
c001b103:	74 0f                	je     c001b114 <Reg::readString(char*, char*, char*, int)+0x51>
c001b105:	39 c2                	cmp    edx,eax
c001b107:	7e 0b                	jle    c001b114 <Reg::readString(char*, char*, char*, int)+0x51>
c001b109:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b10c:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b111:	40                   	inc    eax
c001b112:	eb ea                	jmp    c001b0fe <Reg::readString(char*, char*, char*, int)+0x3b>
c001b114:	83 ec 0c             	sub    esp,0xc
c001b117:	53                   	push   ebx
c001b118:	e8 4f 56 fe ff       	call   c000076c <strlen>
c001b11d:	83 c4 10             	add    esp,0x10
c001b120:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b125:	75 11                	jne    c001b138 <Reg::readString(char*, char*, char*, int)+0x75>
c001b127:	83 ec 0c             	sub    esp,0xc
c001b12a:	53                   	push   ebx
c001b12b:	e8 3c 56 fe ff       	call   c000076c <strlen>
c001b130:	83 c4 10             	add    esp,0x10
c001b133:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b138:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b13e:	89 f0                	mov    eax,esi
c001b140:	5b                   	pop    ebx
c001b141:	5e                   	pop    esi
c001b142:	5f                   	pop    edi
c001b143:	c3                   	ret    

c001b144 <Reg::readBool(char*, char*, bool*)>:
c001b144:	83 ec 20             	sub    esp,0x20
c001b147:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b14b:	50                   	push   eax
c001b14c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b150:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b154:	e8 7f fe ff ff       	call   c001afd8 <Reg::readInt(char*, char*, int*)>
c001b159:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b15e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b162:	0f 95 02             	setne  BYTE PTR [edx]
c001b165:	83 c4 2c             	add    esp,0x2c
c001b168:	c3                   	ret    

c001b169 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b169:	53                   	push   ebx
c001b16a:	83 ec 1c             	sub    esp,0x1c
c001b16d:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b171:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b175:	50                   	push   eax
c001b176:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b17a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b17e:	e8 c1 ff ff ff       	call   c001b144 <Reg::readBool(char*, char*, bool*)>
c001b183:	83 c4 10             	add    esp,0x10
c001b186:	84 c0                	test   al,al
c001b188:	74 04                	je     c001b18e <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b18a:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b18e:	88 d8                	mov    al,bl
c001b190:	83 c4 18             	add    esp,0x18
c001b193:	5b                   	pop    ebx
c001b194:	c3                   	ret    

c001b195 <Reg::readIntWithDefault(char*, char*, int)>:
c001b195:	53                   	push   ebx
c001b196:	83 ec 1c             	sub    esp,0x1c
c001b199:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b19d:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b1a1:	50                   	push   eax
c001b1a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1aa:	e8 29 fe ff ff       	call   c001afd8 <Reg::readInt(char*, char*, int*)>
c001b1af:	83 c4 10             	add    esp,0x10
c001b1b2:	84 c0                	test   al,al
c001b1b4:	74 04                	je     c001b1ba <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b1b6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b1ba:	89 d8                	mov    eax,ebx
c001b1bc:	83 c4 18             	add    esp,0x18
c001b1bf:	5b                   	pop    ebx
c001b1c0:	c3                   	ret    

c001b1c1 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b1c1:	57                   	push   edi
c001b1c2:	56                   	push   esi
c001b1c3:	56                   	push   esi
c001b1c4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b1c8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b1cc:	56                   	push   esi
c001b1cd:	57                   	push   edi
c001b1ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1d6:	e8 e8 fe ff ff       	call   c001b0c3 <Reg::readString(char*, char*, char*, int)>
c001b1db:	83 c4 10             	add    esp,0x10
c001b1de:	84 c0                	test   al,al
c001b1e0:	75 1a                	jne    c001b1fc <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001b1e2:	51                   	push   ecx
c001b1e3:	56                   	push   esi
c001b1e4:	6a 00                	push   0x0
c001b1e6:	57                   	push   edi
c001b1e7:	e8 64 55 fe ff       	call   c0000750 <memset>
c001b1ec:	8d 4e ff             	lea    ecx,[esi-0x1]
c001b1ef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b1f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b1f5:	83 c4 10             	add    esp,0x10
c001b1f8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b1fc:	89 f8                	mov    eax,edi
c001b1fe:	5a                   	pop    edx
c001b1ff:	5e                   	pop    esi
c001b200:	5f                   	pop    edi
c001b201:	c3                   	ret    

c001b202 <Sys::eject(regs*)>:
c001b202:	83 ec 0c             	sub    esp,0xc
c001b205:	83 ca ff             	or     edx,0xffffffff
c001b208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b20c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b20f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b214:	83 e9 41             	sub    ecx,0x41
c001b217:	83 f9 19             	cmp    ecx,0x19
c001b21a:	77 18                	ja     c001b234 <Sys::eject(regs*)+0x32>
c001b21c:	8b 0c 8d e0 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1320]
c001b223:	85 c9                	test   ecx,ecx
c001b225:	74 0d                	je     c001b234 <Sys::eject(regs*)+0x32>
c001b227:	83 ec 0c             	sub    esp,0xc
c001b22a:	51                   	push   ecx
c001b22b:	e8 fc b0 ff ff       	call   c001632c <LogicalDisk::eject()>
c001b230:	83 c4 10             	add    esp,0x10
c001b233:	99                   	cdq    
c001b234:	83 c4 0c             	add    esp,0xc
c001b237:	c3                   	ret    

c001b238 <Sys::exit(regs*)>:
c001b238:	83 ec 18             	sub    esp,0x18
c001b23b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b23f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b242:	e8 d3 35 00 00       	call   c001e81a <terminateTask(int)>
c001b247:	83 c8 ff             	or     eax,0xffffffff
c001b24a:	83 c4 1c             	add    esp,0x1c
c001b24d:	89 c2                	mov    edx,eax
c001b24f:	c3                   	ret    

c001b250 <Sys::getCwd(regs*)>:
c001b250:	83 ec 10             	sub    esp,0x10
c001b253:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b257:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b25a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b25d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b262:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b265:	e8 32 7b ff ff       	call   c0012d9c <Fs::getcwd(Process*, char*, int)>
c001b26a:	83 c4 1c             	add    esp,0x1c
c001b26d:	99                   	cdq    
c001b26e:	c3                   	ret    

c001b26f <Sys::getPID(regs*)>:
c001b26f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b274:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b277:	8b 00                	mov    eax,DWORD PTR [eax]
c001b279:	99                   	cdq    
c001b27a:	c3                   	ret    

c001b27b <Sys::getRAMData(regs*)>:
c001b27b:	8b 0d 34 e7 02 c0    	mov    ecx,DWORD PTR ds:0xc002e734
c001b281:	69 05 30 e7 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc002e730,0xc8
c001b28b:	99                   	cdq    
c001b28c:	f7 f9                	idiv   ecx
c001b28e:	c1 e0 18             	shl    eax,0x18
c001b291:	09 c8                	or     eax,ecx
c001b293:	99                   	cdq    
c001b294:	c3                   	ret    

c001b295 <Sys::getVGAPtr(regs*)>:
c001b295:	55                   	push   ebp
c001b296:	57                   	push   edi
c001b297:	56                   	push   esi
c001b298:	53                   	push   ebx
c001b299:	83 ec 18             	sub    esp,0x18
c001b29c:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b2a0:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b2a3:	e8 be 30 00 00       	call   c001e366 <Thr::processFromPID(int)>
c001b2a8:	83 c4 10             	add    esp,0x10
c001b2ab:	89 c1                	mov    ecx,eax
c001b2ad:	b8 01 00 00 00       	mov    eax,0x1
c001b2b2:	85 c9                	test   ecx,ecx
c001b2b4:	74 59                	je     c001b30f <Sys::getVGAPtr(regs*)+0x7a>
c001b2b6:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b2bc:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b2c0:	74 0c                	je     c001b2ce <Sys::getVGAPtr(regs*)+0x39>
c001b2c2:	83 ec 0c             	sub    esp,0xc
c001b2c5:	53                   	push   ebx
c001b2c6:	e8 d2 54 ff ff       	call   c001079d <setActiveTerminal(VgaText*)>
c001b2cb:	83 c4 10             	add    esp,0x10
c001b2ce:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b2d1:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b2d4:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b2d9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b2db:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b2de:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b2e1:	81 c3 82 00 00 00    	add    ebx,0x82
c001b2e7:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b2ed:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b2f0:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b2f3:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b2f9:	50                   	push   eax
c001b2fa:	50                   	push   eax
c001b2fb:	53                   	push   ebx
c001b2fc:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b2ff:	05 a8 0f 00 00       	add    eax,0xfa8
c001b304:	50                   	push   eax
c001b305:	e8 02 55 fe ff       	call   c000080c <strcpy>
c001b30a:	83 c4 10             	add    esp,0x10
c001b30d:	31 c0                	xor    eax,eax
c001b30f:	83 c4 0c             	add    esp,0xc
c001b312:	31 d2                	xor    edx,edx
c001b314:	5b                   	pop    ebx
c001b315:	5e                   	pop    esi
c001b316:	5f                   	pop    edi
c001b317:	5d                   	pop    ebp
c001b318:	c3                   	ret    

c001b319 <Sys::loadDLL(regs*)>:
c001b319:	56                   	push   esi
c001b31a:	53                   	push   ebx
c001b31b:	31 d2                	xor    edx,edx
c001b31d:	51                   	push   ecx
c001b31e:	b8 01 00 00 00       	mov    eax,0x1
c001b323:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b327:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b32b:	0f 84 8c 00 00 00    	je     c001b3bd <Sys::loadDLL(regs*)+0xa4>
c001b331:	83 ec 0c             	sub    esp,0xc
c001b334:	68 14 01 00 00       	push   0x114
c001b339:	e8 a5 46 ff ff       	call   c000f9e3 <malloc>
c001b33e:	83 c4 0c             	add    esp,0xc
c001b341:	89 c3                	mov    ebx,eax
c001b343:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b348:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b34b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b34e:	53                   	push   ebx
c001b34f:	e8 46 7c ff ff       	call   c0012f9a <File::File(char const*, Process*)>
c001b354:	83 c4 10             	add    esp,0x10
c001b357:	31 d2                	xor    edx,edx
c001b359:	b8 02 00 00 00       	mov    eax,0x2
c001b35e:	85 db                	test   ebx,ebx
c001b360:	74 5b                	je     c001b3bd <Sys::loadDLL(regs*)+0xa4>
c001b362:	83 ec 0c             	sub    esp,0xc
c001b365:	53                   	push   ebx
c001b366:	e8 01 7f ff ff       	call   c001326c <File::exists()>
c001b36b:	83 c4 10             	add    esp,0x10
c001b36e:	84 c0                	test   al,al
c001b370:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b372:	75 11                	jne    c001b385 <Sys::loadDLL(regs*)+0x6c>
c001b374:	83 ec 0c             	sub    esp,0xc
c001b377:	53                   	push   ebx
c001b378:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b37b:	83 c4 10             	add    esp,0x10
c001b37e:	b8 03 00 00 00       	mov    eax,0x3
c001b383:	eb 36                	jmp    c001b3bb <Sys::loadDLL(regs*)+0xa2>
c001b385:	83 ec 0c             	sub    esp,0xc
c001b388:	53                   	push   ebx
c001b389:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b38c:	58                   	pop    eax
c001b38d:	5a                   	pop    edx
c001b38e:	6a 00                	push   0x0
c001b390:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b393:	e8 0e 22 00 00       	call   c001d5a6 <Thr::loadDLL(char const*, bool)>
c001b398:	83 c4 10             	add    esp,0x10
c001b39b:	89 c1                	mov    ecx,eax
c001b39d:	31 d2                	xor    edx,edx
c001b39f:	b8 04 00 00 00       	mov    eax,0x4
c001b3a4:	85 c9                	test   ecx,ecx
c001b3a6:	74 15                	je     c001b3bd <Sys::loadDLL(regs*)+0xa4>
c001b3a8:	53                   	push   ebx
c001b3a9:	53                   	push   ebx
c001b3aa:	ff 35 e8 e6 02 c0    	push   DWORD PTR ds:0xc002e6e8
c001b3b0:	51                   	push   ecx
c001b3b1:	e8 21 24 00 00       	call   c001d7d7 <Thr::executeDLL(unsigned long, void*)>
c001b3b6:	83 c4 10             	add    esp,0x10
c001b3b9:	31 c0                	xor    eax,eax
c001b3bb:	31 d2                	xor    edx,edx
c001b3bd:	59                   	pop    ecx
c001b3be:	5b                   	pop    ebx
c001b3bf:	5e                   	pop    esi
c001b3c0:	c3                   	ret    

c001b3c1 <Sys::read(regs*)>:
c001b3c1:	57                   	push   edi
c001b3c2:	56                   	push   esi
c001b3c3:	53                   	push   ebx
c001b3c4:	83 ec 10             	sub    esp,0x10
c001b3c7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b3cb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3ce:	83 f8 02             	cmp    eax,0x2
c001b3d1:	77 10                	ja     c001b3e3 <Sys::read(regs*)+0x22>
c001b3d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3d8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3db:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b3e1:	eb 0e                	jmp    c001b3f1 <Sys::read(regs*)+0x30>
c001b3e3:	83 ec 0c             	sub    esp,0xc
c001b3e6:	50                   	push   eax
c001b3e7:	e8 27 61 ff ff       	call   c0011513 <getFromFileDescriptor(int)>
c001b3ec:	83 c4 10             	add    esp,0x10
c001b3ef:	89 c1                	mov    ecx,eax
c001b3f1:	83 c8 ff             	or     eax,0xffffffff
c001b3f4:	85 c9                	test   ecx,ecx
c001b3f6:	89 c2                	mov    edx,eax
c001b3f8:	74 28                	je     c001b422 <Sys::read(regs*)+0x61>
c001b3fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b402:	31 ff                	xor    edi,edi
c001b404:	83 ec 0c             	sub    esp,0xc
c001b407:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b409:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b40d:	52                   	push   edx
c001b40e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b411:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b414:	57                   	push   edi
c001b415:	56                   	push   esi
c001b416:	51                   	push   ecx
c001b417:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b41a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b41e:	83 c4 20             	add    esp,0x20
c001b421:	99                   	cdq    
c001b422:	83 c4 10             	add    esp,0x10
c001b425:	5b                   	pop    ebx
c001b426:	5e                   	pop    esi
c001b427:	5f                   	pop    edi
c001b428:	c3                   	ret    

c001b429 <Sys::sbrk(regs*)>:
c001b429:	56                   	push   esi
c001b42a:	53                   	push   ebx
c001b42b:	50                   	push   eax
c001b42c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b431:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b435:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b438:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b43b:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b441:	85 db                	test   ebx,ebx
c001b443:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b446:	74 02                	je     c001b44a <Sys::sbrk(regs*)+0x21>
c001b448:	79 06                	jns    c001b450 <Sys::sbrk(regs*)+0x27>
c001b44a:	89 f0                	mov    eax,esi
c001b44c:	31 d2                	xor    edx,edx
c001b44e:	eb 2a                	jmp    c001b47a <Sys::sbrk(regs*)+0x51>
c001b450:	83 c8 ff             	or     eax,0xffffffff
c001b453:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b459:	89 c2                	mov    edx,eax
c001b45b:	77 1d                	ja     c001b47a <Sys::sbrk(regs*)+0x51>
c001b45d:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b463:	50                   	push   eax
c001b464:	c1 ea 0c             	shr    edx,0xc
c001b467:	68 07 0c 00 00       	push   0xc07
c001b46c:	52                   	push   edx
c001b46d:	51                   	push   ecx
c001b46e:	e8 9f 69 ff ff       	call   c0011e12 <VAS::allocatePages(int, int)>
c001b473:	89 f0                	mov    eax,esi
c001b475:	31 d2                	xor    edx,edx
c001b477:	83 c4 10             	add    esp,0x10
c001b47a:	59                   	pop    ecx
c001b47b:	5b                   	pop    ebx
c001b47c:	5e                   	pop    esi
c001b47d:	c3                   	ret    

c001b47e <Sys::setCwd(regs*)>:
c001b47e:	83 ec 14             	sub    esp,0x14
c001b481:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b485:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b488:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b48d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b490:	e8 76 7e ff ff       	call   c001330b <Fs::setcwd(Process*, char*)>
c001b495:	83 c4 1c             	add    esp,0x1c
c001b498:	99                   	cdq    
c001b499:	c3                   	ret    

c001b49a <Sys::setTime(regs*)>:
c001b49a:	55                   	push   ebp
c001b49b:	31 c9                	xor    ecx,ecx
c001b49d:	57                   	push   edi
c001b49e:	bd 0c 00 00 00       	mov    ebp,0xc
c001b4a3:	56                   	push   esi
c001b4a4:	53                   	push   ebx
c001b4a5:	31 db                	xor    ebx,ebx
c001b4a7:	83 ec 10             	sub    esp,0x10
c001b4aa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b4ae:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001b4b1:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001b4b4:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001b4b7:	89 c2                	mov    edx,eax
c001b4b9:	66 81 ef 6c 07       	sub    di,0x76c
c001b4be:	83 e2 1f             	and    edx,0x1f
c001b4c1:	c1 e7 10             	shl    edi,0x10
c001b4c4:	42                   	inc    edx
c001b4c5:	c1 e8 05             	shr    eax,0x5
c001b4c8:	88 d1                	mov    cl,dl
c001b4ca:	31 d2                	xor    edx,edx
c001b4cc:	f7 f5                	div    ebp
c001b4ce:	89 dd                	mov    ebp,ebx
c001b4d0:	88 d5                	mov    ch,dl
c001b4d2:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001b4d8:	0f b7 c1             	movzx  eax,cx
c001b4db:	31 d2                	xor    edx,edx
c001b4dd:	09 f8                	or     eax,edi
c001b4df:	bf 3c 00 00 00       	mov    edi,0x3c
c001b4e4:	89 c1                	mov    ecx,eax
c001b4e6:	89 f0                	mov    eax,esi
c001b4e8:	f7 f7                	div    edi
c001b4ea:	c1 e2 10             	shl    edx,0x10
c001b4ed:	09 d5                	or     ebp,edx
c001b4ef:	31 d2                	xor    edx,edx
c001b4f1:	89 eb                	mov    ebx,ebp
c001b4f3:	f7 f7                	div    edi
c001b4f5:	bf 10 0e 00 00       	mov    edi,0xe10
c001b4fa:	88 d7                	mov    bh,dl
c001b4fc:	89 f0                	mov    eax,esi
c001b4fe:	31 d2                	xor    edx,edx
c001b500:	f7 f7                	div    edi
c001b502:	bf 18 00 00 00       	mov    edi,0x18
c001b507:	31 d2                	xor    edx,edx
c001b509:	f7 f7                	div    edi
c001b50b:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c001b510:	88 d3                	mov    bl,dl
c001b512:	53                   	push   ebx
c001b513:	51                   	push   ecx
c001b514:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b51a:	e8 35 86 ff ff       	call   c0013b54 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b51f:	83 c4 1c             	add    esp,0x1c
c001b522:	83 f0 01             	xor    eax,0x1
c001b525:	5b                   	pop    ebx
c001b526:	0f b6 c0             	movzx  eax,al
c001b529:	5e                   	pop    esi
c001b52a:	31 d2                	xor    edx,edx
c001b52c:	5f                   	pop    edi
c001b52d:	5d                   	pop    ebp
c001b52e:	c3                   	ret    

c001b52f <Sys::timezone(regs*)>:
c001b52f:	53                   	push   ebx
c001b530:	83 ec 08             	sub    esp,0x8
c001b533:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b537:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b53b:	75 17                	jne    c001b554 <Sys::timezone(regs*)+0x25>
c001b53d:	83 ec 0c             	sub    esp,0xc
c001b540:	68 79 c5 02 c0       	push   0xc002c579
c001b545:	e8 f1 74 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001b54a:	83 c8 ff             	or     eax,0xffffffff
c001b54d:	83 c4 10             	add    esp,0x10
c001b550:	89 c2                	mov    edx,eax
c001b552:	eb 20                	jmp    c001b574 <Sys::timezone(regs*)+0x45>
c001b554:	83 ec 0c             	sub    esp,0xc
c001b557:	68 8e c5 02 c0       	push   0xc002c58e
c001b55c:	e8 da 74 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001b561:	58                   	pop    eax
c001b562:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b565:	e8 4c 83 ff ff       	call   c00138b6 <User::loadClockSettings(int)>
c001b56a:	83 c4 10             	add    esp,0x10
c001b56d:	b8 01 00 00 00       	mov    eax,0x1
c001b572:	31 d2                	xor    edx,edx
c001b574:	83 c4 08             	add    esp,0x8
c001b577:	5b                   	pop    ebx
c001b578:	c3                   	ret    

c001b579 <Sys::write(regs*)>:
c001b579:	57                   	push   edi
c001b57a:	56                   	push   esi
c001b57b:	53                   	push   ebx
c001b57c:	83 ec 10             	sub    esp,0x10
c001b57f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b583:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b586:	83 f8 02             	cmp    eax,0x2
c001b589:	77 10                	ja     c001b59b <Sys::write(regs*)+0x22>
c001b58b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b590:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b593:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b599:	eb 0e                	jmp    c001b5a9 <Sys::write(regs*)+0x30>
c001b59b:	83 ec 0c             	sub    esp,0xc
c001b59e:	50                   	push   eax
c001b59f:	e8 6f 5f ff ff       	call   c0011513 <getFromFileDescriptor(int)>
c001b5a4:	83 c4 10             	add    esp,0x10
c001b5a7:	89 c1                	mov    ecx,eax
c001b5a9:	83 c8 ff             	or     eax,0xffffffff
c001b5ac:	85 c9                	test   ecx,ecx
c001b5ae:	89 c2                	mov    edx,eax
c001b5b0:	74 28                	je     c001b5da <Sys::write(regs*)+0x61>
c001b5b2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b5ba:	31 ff                	xor    edi,edi
c001b5bc:	83 ec 0c             	sub    esp,0xc
c001b5bf:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b5c1:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b5c5:	52                   	push   edx
c001b5c6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b5c9:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b5cc:	57                   	push   edi
c001b5cd:	56                   	push   esi
c001b5ce:	51                   	push   ecx
c001b5cf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b5d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b5d6:	83 c4 20             	add    esp,0x20
c001b5d9:	99                   	cdq    
c001b5da:	83 c4 10             	add    esp,0x10
c001b5dd:	5b                   	pop    ebx
c001b5de:	5e                   	pop    esi
c001b5df:	5f                   	pop    edi
c001b5e0:	c3                   	ret    

c001b5e1 <Sys::wsbe(regs*)>:
c001b5e1:	57                   	push   edi
c001b5e2:	b9 0b 00 00 00       	mov    ecx,0xb
c001b5e7:	56                   	push   esi
c001b5e8:	be cd c5 02 c0       	mov    esi,0xc002c5cd
c001b5ed:	53                   	push   ebx
c001b5ee:	83 ec 30             	sub    esp,0x30
c001b5f1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b5f5:	fc                   	cld    
c001b5f6:	83 ec 0c             	sub    esp,0xc
c001b5f9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b5fb:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b5ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b604:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b607:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b60d:	8b 06                	mov    eax,DWORD PTR [esi]
c001b60f:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b612:	57                   	push   edi
c001b613:	e8 54 51 fe ff       	call   c000076c <strlen>
c001b618:	5a                   	pop    edx
c001b619:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b61d:	52                   	push   edx
c001b61e:	31 d2                	xor    edx,edx
c001b620:	57                   	push   edi
c001b621:	52                   	push   edx
c001b622:	50                   	push   eax
c001b623:	56                   	push   esi
c001b624:	ff d3                	call   ebx
c001b626:	83 c4 14             	add    esp,0x14
c001b629:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b62d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b630:	e8 e5 31 00 00       	call   c001e81a <terminateTask(int)>
c001b635:	83 c4 40             	add    esp,0x40
c001b638:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b63d:	5b                   	pop    ebx
c001b63e:	31 d2                	xor    edx,edx
c001b640:	5e                   	pop    esi
c001b641:	5f                   	pop    edi
c001b642:	c3                   	ret    

c001b643 <Sys::yield(regs*)>:
c001b643:	57                   	push   edi
c001b644:	56                   	push   esi
c001b645:	53                   	push   ebx
c001b646:	fa                   	cli    
c001b647:	ff 05 e8 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe8
c001b64d:	e8 19 29 00 00       	call   c001df6b <schedule()>
c001b652:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001b657:	48                   	dec    eax
c001b658:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c001b65d:	75 01                	jne    c001b660 <Sys::yield(regs*)+0x1d>
c001b65f:	fb                   	sti    
c001b660:	8b 35 50 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002ed50
c001b666:	8b 3d 54 ed 02 c0    	mov    edi,DWORD PTR ds:0xc002ed54
c001b66c:	89 f0                	mov    eax,esi
c001b66e:	89 fb                	mov    ebx,edi
c001b670:	89 f1                	mov    ecx,esi
c001b672:	c1 e0 07             	shl    eax,0x7
c001b675:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b679:	25 80 30 0f 00       	and    eax,0xf3080
c001b67e:	c1 eb 17             	shr    ebx,0x17
c001b681:	31 c8                	xor    eax,ecx
c001b683:	89 da                	mov    edx,ebx
c001b685:	5b                   	pop    ebx
c001b686:	5e                   	pop    esi
c001b687:	5f                   	pop    edi
c001b688:	c3                   	ret    

c001b689 <sysCallSeekDir(regs*)>:
c001b689:	31 c0                	xor    eax,eax
c001b68b:	31 d2                	xor    edx,edx
c001b68d:	c3                   	ret    

c001b68e <sysCallTellDir(regs*)>:
c001b68e:	31 c0                	xor    eax,eax
c001b690:	31 d2                	xor    edx,edx
c001b692:	c3                   	ret    

c001b693 <sysCallVerify(regs*)>:
c001b693:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b697:	31 d2                	xor    edx,edx
c001b699:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b69c:	c3                   	ret    

c001b69d <sysCallGetArgc(regs*)>:
c001b69d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6a2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6a5:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b6ab:	99                   	cdq    
c001b6ac:	c3                   	ret    

c001b6ad <sysFormatDisk(regs*)>:
c001b6ad:	56                   	push   esi
c001b6ae:	53                   	push   ebx
c001b6af:	53                   	push   ebx
c001b6b0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b6b4:	8b 1d 54 e8 02 c0    	mov    ebx,DWORD PTR ds:0xc002e854
c001b6ba:	eb 25                	jmp    c001b6e1 <sysFormatDisk(regs*)+0x34>
c001b6bc:	83 ec 0c             	sub    esp,0xc
c001b6bf:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b6c2:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b6c4:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b6c7:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b6ca:	50                   	push   eax
c001b6cb:	ff 34 85 e0 ec 02 c0 	push   DWORD PTR [eax*4-0x3ffd1320]
c001b6d2:	53                   	push   ebx
c001b6d3:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b6d6:	83 c4 20             	add    esp,0x20
c001b6d9:	83 f8 08             	cmp    eax,0x8
c001b6dc:	75 12                	jne    c001b6f0 <sysFormatDisk(regs*)+0x43>
c001b6de:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b6e1:	85 db                	test   ebx,ebx
c001b6e3:	75 d7                	jne    c001b6bc <sysFormatDisk(regs*)+0xf>
c001b6e5:	59                   	pop    ecx
c001b6e6:	b8 03 00 00 00       	mov    eax,0x3
c001b6eb:	31 d2                	xor    edx,edx
c001b6ed:	5b                   	pop    ebx
c001b6ee:	5e                   	pop    esi
c001b6ef:	c3                   	ret    
c001b6f0:	85 c0                	test   eax,eax
c001b6f2:	74 1b                	je     c001b70f <sysFormatDisk(regs*)+0x62>
c001b6f4:	83 f8 09             	cmp    eax,0x9
c001b6f7:	74 0b                	je     c001b704 <sysFormatDisk(regs*)+0x57>
c001b6f9:	59                   	pop    ecx
c001b6fa:	b8 02 00 00 00       	mov    eax,0x2
c001b6ff:	31 d2                	xor    edx,edx
c001b701:	5b                   	pop    ebx
c001b702:	5e                   	pop    esi
c001b703:	c3                   	ret    
c001b704:	59                   	pop    ecx
c001b705:	b8 01 00 00 00       	mov    eax,0x1
c001b70a:	31 d2                	xor    edx,edx
c001b70c:	5b                   	pop    ebx
c001b70d:	5e                   	pop    esi
c001b70e:	c3                   	ret    
c001b70f:	59                   	pop    ecx
c001b710:	31 c0                	xor    eax,eax
c001b712:	31 d2                	xor    edx,edx
c001b714:	5b                   	pop    ebx
c001b715:	5e                   	pop    esi
c001b716:	c3                   	ret    

c001b717 <sysSetDiskVolumeLabel(regs*)>:
c001b717:	56                   	push   esi
c001b718:	53                   	push   ebx
c001b719:	53                   	push   ebx
c001b71a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b71e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b721:	83 f8 19             	cmp    eax,0x19
c001b724:	77 29                	ja     c001b74f <sysSetDiskVolumeLabel(regs*)+0x38>
c001b726:	8b 0c 85 e0 ec 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1320]
c001b72d:	85 c9                	test   ecx,ecx
c001b72f:	74 1e                	je     c001b74f <sysSetDiskVolumeLabel(regs*)+0x38>
c001b731:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b734:	85 d2                	test   edx,edx
c001b736:	74 17                	je     c001b74f <sysSetDiskVolumeLabel(regs*)+0x38>
c001b738:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b73e:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b740:	52                   	push   edx
c001b741:	50                   	push   eax
c001b742:	51                   	push   ecx
c001b743:	53                   	push   ebx
c001b744:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b747:	83 c4 10             	add    esp,0x10
c001b74a:	99                   	cdq    
c001b74b:	59                   	pop    ecx
c001b74c:	5b                   	pop    ebx
c001b74d:	5e                   	pop    esi
c001b74e:	c3                   	ret    
c001b74f:	59                   	pop    ecx
c001b750:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b755:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b75a:	5b                   	pop    ebx
c001b75b:	5e                   	pop    esi
c001b75c:	c3                   	ret    

c001b75d <sysGetDiskVolumeLabel(regs*)>:
c001b75d:	57                   	push   edi
c001b75e:	56                   	push   esi
c001b75f:	53                   	push   ebx
c001b760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b764:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b767:	83 fa 19             	cmp    edx,0x19
c001b76a:	77 34                	ja     c001b7a0 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b76c:	8b 0c 95 e0 ec 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1320]
c001b773:	85 c9                	test   ecx,ecx
c001b775:	74 29                	je     c001b7a0 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b777:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b77a:	85 db                	test   ebx,ebx
c001b77c:	74 22                	je     c001b7a0 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b77e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b781:	85 c0                	test   eax,eax
c001b783:	74 1b                	je     c001b7a0 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b785:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b78b:	83 ec 0c             	sub    esp,0xc
c001b78e:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b790:	50                   	push   eax
c001b791:	53                   	push   ebx
c001b792:	52                   	push   edx
c001b793:	51                   	push   ecx
c001b794:	56                   	push   esi
c001b795:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b798:	83 c4 20             	add    esp,0x20
c001b79b:	99                   	cdq    
c001b79c:	5b                   	pop    ebx
c001b79d:	5e                   	pop    esi
c001b79e:	5f                   	pop    edi
c001b79f:	c3                   	ret    
c001b7a0:	5b                   	pop    ebx
c001b7a1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b7a6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7ab:	5e                   	pop    esi
c001b7ac:	5f                   	pop    edi
c001b7ad:	c3                   	ret    

c001b7ae <sysShutdown(regs*)>:
c001b7ae:	83 ec 0c             	sub    esp,0xc
c001b7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7b5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b7b8:	85 c0                	test   eax,eax
c001b7ba:	74 18                	je     c001b7d4 <sysShutdown(regs*)+0x26>
c001b7bc:	83 f8 01             	cmp    eax,0x1
c001b7bf:	74 38                	je     c001b7f9 <sysShutdown(regs*)+0x4b>
c001b7c1:	83 f8 02             	cmp    eax,0x2
c001b7c4:	74 24                	je     c001b7ea <sysShutdown(regs*)+0x3c>
c001b7c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b7cb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7d0:	83 c4 0c             	add    esp,0xc
c001b7d3:	c3                   	ret    
c001b7d4:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c001b7d9:	8b 10                	mov    edx,DWORD PTR [eax]
c001b7db:	6a 00                	push   0x0
c001b7dd:	6a 00                	push   0x0
c001b7df:	6a 00                	push   0x0
c001b7e1:	50                   	push   eax
c001b7e2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b7e5:	83 c4 10             	add    esp,0x10
c001b7e8:	eb dc                	jmp    c001b7c6 <sysShutdown(regs*)+0x18>
c001b7ea:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c001b7ef:	8b 10                	mov    edx,DWORD PTR [eax]
c001b7f1:	6a 00                	push   0x0
c001b7f3:	6a 00                	push   0x0
c001b7f5:	6a 01                	push   0x1
c001b7f7:	eb e8                	jmp    c001b7e1 <sysShutdown(regs*)+0x33>
c001b7f9:	a1 60 ed 02 c0       	mov    eax,ds:0xc002ed60
c001b7fe:	85 c0                	test   eax,eax
c001b800:	74 02                	je     c001b804 <sysShutdown(regs*)+0x56>
c001b802:	ff d0                	call   eax
c001b804:	31 c0                	xor    eax,eax
c001b806:	31 d2                	xor    edx,edx
c001b808:	83 c4 0c             	add    esp,0xc
c001b80b:	c3                   	ret    

c001b80c <sysCallRealpath(regs*)>:
c001b80c:	83 ec 0c             	sub    esp,0xc
c001b80f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b813:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b816:	85 d2                	test   edx,edx
c001b818:	74 07                	je     c001b821 <sysCallRealpath(regs*)+0x15>
c001b81a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b81d:	85 c0                	test   eax,eax
c001b81f:	75 0b                	jne    c001b82c <sysCallRealpath(regs*)+0x20>
c001b821:	b8 01 00 00 00       	mov    eax,0x1
c001b826:	31 d2                	xor    edx,edx
c001b828:	83 c4 0c             	add    esp,0xc
c001b82b:	c3                   	ret    
c001b82c:	51                   	push   ecx
c001b82d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b833:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b836:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b83c:	51                   	push   ecx
c001b83d:	52                   	push   edx
c001b83e:	50                   	push   eax
c001b83f:	e8 ac 75 ff ff       	call   c0012df0 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b844:	83 c4 10             	add    esp,0x10
c001b847:	31 c0                	xor    eax,eax
c001b849:	31 d2                	xor    edx,edx
c001b84b:	83 c4 0c             	add    esp,0xc
c001b84e:	c3                   	ret    

c001b84f <sysCallReadDir(regs*)>:
c001b84f:	53                   	push   ebx
c001b850:	83 ec 18             	sub    esp,0x18
c001b853:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b857:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b85a:	83 f8 02             	cmp    eax,0x2
c001b85d:	76 60                	jbe    c001b8bf <sysCallReadDir(regs*)+0x70>
c001b85f:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b866:	77 48                	ja     c001b8b0 <sysCallReadDir(regs*)+0x61>
c001b868:	83 ec 0c             	sub    esp,0xc
c001b86b:	50                   	push   eax
c001b86c:	e8 a2 5c ff ff       	call   c0011513 <getFromFileDescriptor(int)>
c001b871:	83 c4 10             	add    esp,0x10
c001b874:	85 c0                	test   eax,eax
c001b876:	74 38                	je     c001b8b0 <sysCallReadDir(regs*)+0x61>
c001b878:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b880:	83 ec 0c             	sub    esp,0xc
c001b883:	8b 10                	mov    edx,DWORD PTR [eax]
c001b885:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b889:	51                   	push   ecx
c001b88a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b88d:	6a 00                	push   0x0
c001b88f:	68 10 01 00 00       	push   0x110
c001b894:	50                   	push   eax
c001b895:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b898:	83 c4 20             	add    esp,0x20
c001b89b:	85 c0                	test   eax,eax
c001b89d:	74 29                	je     c001b8c8 <sysCallReadDir(regs*)+0x79>
c001b89f:	83 f8 07             	cmp    eax,0x7
c001b8a2:	74 1b                	je     c001b8bf <sysCallReadDir(regs*)+0x70>
c001b8a4:	b8 02 00 00 00       	mov    eax,0x2
c001b8a9:	31 d2                	xor    edx,edx
c001b8ab:	83 c4 18             	add    esp,0x18
c001b8ae:	5b                   	pop    ebx
c001b8af:	c3                   	ret    
c001b8b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8b5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8ba:	83 c4 18             	add    esp,0x18
c001b8bd:	5b                   	pop    ebx
c001b8be:	c3                   	ret    
c001b8bf:	b8 01 00 00 00       	mov    eax,0x1
c001b8c4:	31 d2                	xor    edx,edx
c001b8c6:	eb e3                	jmp    c001b8ab <sysCallReadDir(regs*)+0x5c>
c001b8c8:	31 c0                	xor    eax,eax
c001b8ca:	31 d2                	xor    edx,edx
c001b8cc:	eb dd                	jmp    c001b8ab <sysCallReadDir(regs*)+0x5c>

c001b8ce <sysCallIsATTY(regs*)>:
c001b8ce:	83 ec 0c             	sub    esp,0xc
c001b8d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8d5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b8d8:	83 f8 02             	cmp    eax,0x2
c001b8db:	76 07                	jbe    c001b8e4 <sysCallIsATTY(regs*)+0x16>
c001b8dd:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b8e2:	75 26                	jne    c001b90a <sysCallIsATTY(regs*)+0x3c>
c001b8e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8e9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8ec:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b8f2:	85 c0                	test   eax,eax
c001b8f4:	74 24                	je     c001b91a <sysCallIsATTY(regs*)+0x4c>
c001b8f6:	83 ec 0c             	sub    esp,0xc
c001b8f9:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8fb:	50                   	push   eax
c001b8fc:	ff 12                	call   DWORD PTR [edx]
c001b8fe:	31 d2                	xor    edx,edx
c001b900:	0f b6 c0             	movzx  eax,al
c001b903:	83 c4 10             	add    esp,0x10
c001b906:	83 c4 0c             	add    esp,0xc
c001b909:	c3                   	ret    
c001b90a:	83 ec 0c             	sub    esp,0xc
c001b90d:	50                   	push   eax
c001b90e:	e8 00 5c ff ff       	call   c0011513 <getFromFileDescriptor(int)>
c001b913:	83 c4 10             	add    esp,0x10
c001b916:	85 c0                	test   eax,eax
c001b918:	75 dc                	jne    c001b8f6 <sysCallIsATTY(regs*)+0x28>
c001b91a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b91f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b924:	83 c4 0c             	add    esp,0xc
c001b927:	c3                   	ret    

c001b928 <sysCallSeek(regs*)>:
c001b928:	53                   	push   ebx
c001b929:	83 ec 08             	sub    esp,0x8
c001b92c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b930:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b933:	8d 50 fd             	lea    edx,[eax-0x3]
c001b936:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b93c:	77 32                	ja     c001b970 <sysCallSeek(regs*)+0x48>
c001b93e:	83 ec 0c             	sub    esp,0xc
c001b941:	50                   	push   eax
c001b942:	e8 cc 5b ff ff       	call   c0011513 <getFromFileDescriptor(int)>
c001b947:	83 c4 0c             	add    esp,0xc
c001b94a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b94d:	31 db                	xor    ebx,ebx
c001b94f:	53                   	push   ebx
c001b950:	51                   	push   ecx
c001b951:	50                   	push   eax
c001b952:	e8 65 77 ff ff       	call   c00130bc <File::seek(unsigned long long)>
c001b957:	83 c4 10             	add    esp,0x10
c001b95a:	85 c0                	test   eax,eax
c001b95c:	0f 95 c0             	setne  al
c001b95f:	31 d2                	xor    edx,edx
c001b961:	0f b6 c0             	movzx  eax,al
c001b964:	f7 d8                	neg    eax
c001b966:	83 d2 00             	adc    edx,0x0
c001b969:	83 c4 08             	add    esp,0x8
c001b96c:	f7 da                	neg    edx
c001b96e:	5b                   	pop    ebx
c001b96f:	c3                   	ret    
c001b970:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b975:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b97a:	83 c4 08             	add    esp,0x8
c001b97d:	5b                   	pop    ebx
c001b97e:	c3                   	ret    

c001b97f <sysCallTell(regs*)>:
c001b97f:	53                   	push   ebx
c001b980:	83 ec 08             	sub    esp,0x8
c001b983:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b987:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b98a:	83 f8 02             	cmp    eax,0x2
c001b98d:	76 4d                	jbe    c001b9dc <sysCallTell(regs*)+0x5d>
c001b98f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b994:	76 19                	jbe    c001b9af <sysCallTell(regs*)+0x30>
c001b996:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b999:	31 d2                	xor    edx,edx
c001b99b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b9a1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b9a8:	31 c0                	xor    eax,eax
c001b9aa:	83 c4 08             	add    esp,0x8
c001b9ad:	5b                   	pop    ebx
c001b9ae:	c3                   	ret    
c001b9af:	83 ec 0c             	sub    esp,0xc
c001b9b2:	50                   	push   eax
c001b9b3:	e8 5b 5b ff ff       	call   c0011513 <getFromFileDescriptor(int)>
c001b9b8:	5a                   	pop    edx
c001b9b9:	59                   	pop    ecx
c001b9ba:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b9bd:	50                   	push   eax
c001b9be:	e8 4f 77 ff ff       	call   c0013112 <File::tell(unsigned long long*)>
c001b9c3:	83 c4 10             	add    esp,0x10
c001b9c6:	85 c0                	test   eax,eax
c001b9c8:	0f 95 c0             	setne  al
c001b9cb:	31 d2                	xor    edx,edx
c001b9cd:	0f b6 c0             	movzx  eax,al
c001b9d0:	f7 d8                	neg    eax
c001b9d2:	83 d2 00             	adc    edx,0x0
c001b9d5:	83 c4 08             	add    esp,0x8
c001b9d8:	f7 da                	neg    edx
c001b9da:	5b                   	pop    ebx
c001b9db:	c3                   	ret    
c001b9dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9e1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9e6:	83 c4 08             	add    esp,0x8
c001b9e9:	5b                   	pop    ebx
c001b9ea:	c3                   	ret    

c001b9eb <sysCallSize(regs*)>:
c001b9eb:	53                   	push   ebx
c001b9ec:	83 ec 18             	sub    esp,0x18
c001b9ef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b9f3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9f6:	83 f8 02             	cmp    eax,0x2
c001b9f9:	76 53                	jbe    c001ba4e <sysCallSize(regs*)+0x63>
c001b9fb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba00:	76 19                	jbe    c001ba1b <sysCallSize(regs*)+0x30>
c001ba02:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ba05:	31 d2                	xor    edx,edx
c001ba07:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba0d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba14:	31 c0                	xor    eax,eax
c001ba16:	83 c4 18             	add    esp,0x18
c001ba19:	5b                   	pop    ebx
c001ba1a:	c3                   	ret    
c001ba1b:	83 ec 0c             	sub    esp,0xc
c001ba1e:	50                   	push   eax
c001ba1f:	e8 ef 5a ff ff       	call   c0011513 <getFromFileDescriptor(int)>
c001ba24:	83 c4 0c             	add    esp,0xc
c001ba27:	8d 54 24 13          	lea    edx,[esp+0x13]
c001ba2b:	52                   	push   edx
c001ba2c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba2f:	50                   	push   eax
c001ba30:	e8 75 78 ff ff       	call   c00132aa <File::stat(unsigned long long*, bool*)>
c001ba35:	83 c4 10             	add    esp,0x10
c001ba38:	85 c0                	test   eax,eax
c001ba3a:	0f 95 c0             	setne  al
c001ba3d:	31 d2                	xor    edx,edx
c001ba3f:	0f b6 c0             	movzx  eax,al
c001ba42:	f7 d8                	neg    eax
c001ba44:	83 d2 00             	adc    edx,0x0
c001ba47:	83 c4 18             	add    esp,0x18
c001ba4a:	f7 da                	neg    edx
c001ba4c:	5b                   	pop    ebx
c001ba4d:	c3                   	ret    
c001ba4e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba53:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba58:	83 c4 18             	add    esp,0x18
c001ba5b:	5b                   	pop    ebx
c001ba5c:	c3                   	ret    

c001ba5d <sysCallSizeFromFilename(regs*)>:
c001ba5d:	57                   	push   edi
c001ba5e:	56                   	push   esi
c001ba5f:	53                   	push   ebx
c001ba60:	83 ec 20             	sub    esp,0x20
c001ba63:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ba67:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001ba6a:	83 fb 02             	cmp    ebx,0x2
c001ba6d:	0f 86 88 00 00 00    	jbe    c001bafb <sysCallSizeFromFilename(regs*)+0x9e>
c001ba73:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001ba79:	76 1b                	jbe    c001ba96 <sysCallSizeFromFilename(regs*)+0x39>
c001ba7b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001ba7e:	31 d2                	xor    edx,edx
c001ba80:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba86:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba8d:	83 c4 20             	add    esp,0x20
c001ba90:	31 c0                	xor    eax,eax
c001ba92:	5b                   	pop    ebx
c001ba93:	5e                   	pop    esi
c001ba94:	5f                   	pop    edi
c001ba95:	c3                   	ret    
c001ba96:	83 ec 0c             	sub    esp,0xc
c001ba99:	68 14 01 00 00       	push   0x114
c001ba9e:	e8 40 3f ff ff       	call   c000f9e3 <malloc>
c001baa3:	83 c4 0c             	add    esp,0xc
c001baa6:	89 c7                	mov    edi,eax
c001baa8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001baad:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bab0:	53                   	push   ebx
c001bab1:	57                   	push   edi
c001bab2:	e8 e3 74 ff ff       	call   c0012f9a <File::File(char const*, Process*)>
c001bab7:	83 c4 0c             	add    esp,0xc
c001baba:	8d 44 24 23          	lea    eax,[esp+0x23]
c001babe:	50                   	push   eax
c001babf:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001bac2:	57                   	push   edi
c001bac3:	e8 e2 77 ff ff       	call   c00132aa <File::stat(unsigned long long*, bool*)>
c001bac8:	83 c4 10             	add    esp,0x10
c001bacb:	85 ff                	test   edi,edi
c001bacd:	74 14                	je     c001bae3 <sysCallSizeFromFilename(regs*)+0x86>
c001bacf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bad3:	8b 17                	mov    edx,DWORD PTR [edi]
c001bad5:	83 ec 0c             	sub    esp,0xc
c001bad8:	57                   	push   edi
c001bad9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001badc:	83 c4 10             	add    esp,0x10
c001badf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bae3:	85 c0                	test   eax,eax
c001bae5:	0f 95 c0             	setne  al
c001bae8:	31 d2                	xor    edx,edx
c001baea:	0f b6 c0             	movzx  eax,al
c001baed:	f7 d8                	neg    eax
c001baef:	83 d2 00             	adc    edx,0x0
c001baf2:	83 c4 20             	add    esp,0x20
c001baf5:	f7 da                	neg    edx
c001baf7:	5b                   	pop    ebx
c001baf8:	5e                   	pop    esi
c001baf9:	5f                   	pop    edi
c001bafa:	c3                   	ret    
c001bafb:	83 c4 20             	add    esp,0x20
c001bafe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb03:	5b                   	pop    ebx
c001bb04:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb09:	5e                   	pop    esi
c001bb0a:	5f                   	pop    edi
c001bb0b:	c3                   	ret    

c001bb0c <sysCallClose(regs*)>:
c001bb0c:	53                   	push   ebx
c001bb0d:	83 ec 08             	sub    esp,0x8
c001bb10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb14:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb17:	83 f8 02             	cmp    eax,0x2
c001bb1a:	76 41                	jbe    c001bb5d <sysCallClose(regs*)+0x51>
c001bb1c:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001bb22:	83 fa 01             	cmp    edx,0x1
c001bb25:	76 2d                	jbe    c001bb54 <sysCallClose(regs*)+0x48>
c001bb27:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb2c:	77 2f                	ja     c001bb5d <sysCallClose(regs*)+0x51>
c001bb2e:	83 ec 0c             	sub    esp,0xc
c001bb31:	50                   	push   eax
c001bb32:	e8 dc 59 ff ff       	call   c0011513 <getFromFileDescriptor(int)>
c001bb37:	89 c3                	mov    ebx,eax
c001bb39:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb3c:	e8 1b 75 ff ff       	call   c001305c <File::close()>
c001bb41:	83 c4 10             	add    esp,0x10
c001bb44:	85 db                	test   ebx,ebx
c001bb46:	74 0c                	je     c001bb54 <sysCallClose(regs*)+0x48>
c001bb48:	83 ec 0c             	sub    esp,0xc
c001bb4b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb4d:	53                   	push   ebx
c001bb4e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bb51:	83 c4 10             	add    esp,0x10
c001bb54:	31 c0                	xor    eax,eax
c001bb56:	31 d2                	xor    edx,edx
c001bb58:	83 c4 08             	add    esp,0x8
c001bb5b:	5b                   	pop    ebx
c001bb5c:	c3                   	ret    
c001bb5d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb62:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb67:	83 c4 08             	add    esp,0x8
c001bb6a:	5b                   	pop    ebx
c001bb6b:	c3                   	ret    

c001bb6c <sysCallOpenDir(regs*)>:
c001bb6c:	56                   	push   esi
c001bb6d:	53                   	push   ebx
c001bb6e:	53                   	push   ebx
c001bb6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb73:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bb76:	85 f6                	test   esi,esi
c001bb78:	74 59                	je     c001bbd3 <sysCallOpenDir(regs*)+0x67>
c001bb7a:	83 ec 0c             	sub    esp,0xc
c001bb7d:	68 14 01 00 00       	push   0x114
c001bb82:	e8 5c 3e ff ff       	call   c000f9e3 <malloc>
c001bb87:	83 c4 0c             	add    esp,0xc
c001bb8a:	89 c6                	mov    esi,eax
c001bb8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb91:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb94:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb97:	56                   	push   esi
c001bb98:	e8 a9 78 ff ff       	call   c0013446 <Directory::Directory(char const*, Process*)>
c001bb9d:	83 c4 10             	add    esp,0x10
c001bba0:	85 f6                	test   esi,esi
c001bba2:	74 2f                	je     c001bbd3 <sysCallOpenDir(regs*)+0x67>
c001bba4:	83 ec 0c             	sub    esp,0xc
c001bba7:	56                   	push   esi
c001bba8:	e8 fd 78 ff ff       	call   c00134aa <Directory::open()>
c001bbad:	83 c4 10             	add    esp,0x10
c001bbb0:	85 c0                	test   eax,eax
c001bbb2:	75 1f                	jne    c001bbd3 <sysCallOpenDir(regs*)+0x67>
c001bbb4:	83 ec 0c             	sub    esp,0xc
c001bbb7:	56                   	push   esi
c001bbb8:	e8 61 56 ff ff       	call   c001121e <UnixFile::getFileDescriptor()>
c001bbbd:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bbc0:	83 c4 10             	add    esp,0x10
c001bbc3:	89 02                	mov    DWORD PTR [edx],eax
c001bbc5:	c1 f8 1f             	sar    eax,0x1f
c001bbc8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bbcb:	31 c0                	xor    eax,eax
c001bbcd:	59                   	pop    ecx
c001bbce:	31 d2                	xor    edx,edx
c001bbd0:	5b                   	pop    ebx
c001bbd1:	5e                   	pop    esi
c001bbd2:	c3                   	ret    
c001bbd3:	59                   	pop    ecx
c001bbd4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbd9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbde:	5b                   	pop    ebx
c001bbdf:	5e                   	pop    esi
c001bbe0:	c3                   	ret    

c001bbe1 <sysCallCloseDir(regs*)>:
c001bbe1:	53                   	push   ebx
c001bbe2:	83 ec 08             	sub    esp,0x8
c001bbe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbe9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bbec:	8d 50 fd             	lea    edx,[eax-0x3]
c001bbef:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001bbf5:	77 2f                	ja     c001bc26 <sysCallCloseDir(regs*)+0x45>
c001bbf7:	83 ec 0c             	sub    esp,0xc
c001bbfa:	50                   	push   eax
c001bbfb:	e8 13 59 ff ff       	call   c0011513 <getFromFileDescriptor(int)>
c001bc00:	89 c3                	mov    ebx,eax
c001bc02:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc05:	e8 fc 78 ff ff       	call   c0013506 <Directory::close()>
c001bc0a:	83 c4 10             	add    esp,0x10
c001bc0d:	85 db                	test   ebx,ebx
c001bc0f:	74 0c                	je     c001bc1d <sysCallCloseDir(regs*)+0x3c>
c001bc11:	83 ec 0c             	sub    esp,0xc
c001bc14:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc16:	53                   	push   ebx
c001bc17:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc1a:	83 c4 10             	add    esp,0x10
c001bc1d:	31 c0                	xor    eax,eax
c001bc1f:	31 d2                	xor    edx,edx
c001bc21:	83 c4 08             	add    esp,0x8
c001bc24:	5b                   	pop    ebx
c001bc25:	c3                   	ret    
c001bc26:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc2b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc30:	83 c4 08             	add    esp,0x8
c001bc33:	5b                   	pop    ebx
c001bc34:	c3                   	ret    

c001bc35 <sysCallMakeDir(regs*)>:
c001bc35:	56                   	push   esi
c001bc36:	53                   	push   ebx
c001bc37:	83 ec 10             	sub    esp,0x10
c001bc3a:	68 14 01 00 00       	push   0x114
c001bc3f:	e8 9f 3d ff ff       	call   c000f9e3 <malloc>
c001bc44:	83 c4 0c             	add    esp,0xc
c001bc47:	89 c3                	mov    ebx,eax
c001bc49:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc4e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc51:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bc55:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc58:	53                   	push   ebx
c001bc59:	e8 e8 77 ff ff       	call   c0013446 <Directory::Directory(char const*, Process*)>
c001bc5e:	83 c4 10             	add    esp,0x10
c001bc61:	85 db                	test   ebx,ebx
c001bc63:	74 32                	je     c001bc97 <sysCallMakeDir(regs*)+0x62>
c001bc65:	83 ec 0c             	sub    esp,0xc
c001bc68:	53                   	push   ebx
c001bc69:	e8 1c 7a ff ff       	call   c001368a <Directory::create()>
c001bc6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc71:	89 c6                	mov    esi,eax
c001bc73:	e8 8e 78 ff ff       	call   c0013506 <Directory::close()>
c001bc78:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc7a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc7d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc80:	83 c4 10             	add    esp,0x10
c001bc83:	31 c0                	xor    eax,eax
c001bc85:	59                   	pop    ecx
c001bc86:	85 f6                	test   esi,esi
c001bc88:	5b                   	pop    ebx
c001bc89:	0f 95 c0             	setne  al
c001bc8c:	5e                   	pop    esi
c001bc8d:	31 d2                	xor    edx,edx
c001bc8f:	f7 d8                	neg    eax
c001bc91:	83 d2 00             	adc    edx,0x0
c001bc94:	f7 da                	neg    edx
c001bc96:	c3                   	ret    
c001bc97:	59                   	pop    ecx
c001bc98:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc9d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bca2:	5b                   	pop    ebx
c001bca3:	5e                   	pop    esi
c001bca4:	c3                   	ret    

c001bca5 <sysCallWait(regs*)>:
c001bca5:	83 ec 10             	sub    esp,0x10
c001bca8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bcac:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bcaf:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bcb2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bcb5:	e8 b4 24 00 00       	call   c001e16e <waitTask(int, int*, int)>
c001bcba:	83 c4 1c             	add    esp,0x1c
c001bcbd:	99                   	cdq    
c001bcbe:	c3                   	ret    

c001bcbf <sysCallNotImpl(regs*)>:
c001bcbf:	83 ec 18             	sub    esp,0x18
c001bcc2:	68 f9 c5 02 c0       	push   0xc002c5f9
c001bcc7:	e8 0d e7 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c001bccc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcd1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcd6:	83 c4 1c             	add    esp,0x1c
c001bcd9:	c3                   	ret    

c001bcda <sysPanic(regs*)>:
c001bcda:	83 ec 18             	sub    esp,0x18
c001bcdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bce1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bce4:	e8 f0 e6 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c001bce9:	b8 01 00 00 00       	mov    eax,0x1
c001bcee:	31 d2                	xor    edx,edx
c001bcf0:	83 c4 1c             	add    esp,0x1c
c001bcf3:	c3                   	ret    

c001bcf4 <sysCallRmdir(regs*)>:
c001bcf4:	56                   	push   esi
c001bcf5:	53                   	push   ebx
c001bcf6:	83 ec 20             	sub    esp,0x20
c001bcf9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bcfd:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bd00:	68 14 01 00 00       	push   0x114
c001bd05:	e8 d9 3c ff ff       	call   c000f9e3 <malloc>
c001bd0a:	83 c4 0c             	add    esp,0xc
c001bd0d:	89 c3                	mov    ebx,eax
c001bd0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd14:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd17:	56                   	push   esi
c001bd18:	53                   	push   ebx
c001bd19:	e8 7c 72 ff ff       	call   c0012f9a <File::File(char const*, Process*)>
c001bd1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd21:	e8 50 74 ff ff       	call   c0013176 <File::unlink()>
c001bd26:	83 c4 10             	add    esp,0x10
c001bd29:	85 db                	test   ebx,ebx
c001bd2b:	74 14                	je     c001bd41 <sysCallRmdir(regs*)+0x4d>
c001bd2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd31:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bd33:	83 ec 0c             	sub    esp,0xc
c001bd36:	53                   	push   ebx
c001bd37:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bd3a:	83 c4 10             	add    esp,0x10
c001bd3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd41:	85 c0                	test   eax,eax
c001bd43:	0f 95 c0             	setne  al
c001bd46:	31 d2                	xor    edx,edx
c001bd48:	0f b6 c0             	movzx  eax,al
c001bd4b:	f7 d8                	neg    eax
c001bd4d:	83 d2 00             	adc    edx,0x0
c001bd50:	83 c4 14             	add    esp,0x14
c001bd53:	f7 da                	neg    edx
c001bd55:	5b                   	pop    ebx
c001bd56:	5e                   	pop    esi
c001bd57:	c3                   	ret    

c001bd58 <sysCallUnlink(regs*)>:
c001bd58:	56                   	push   esi
c001bd59:	53                   	push   ebx
c001bd5a:	83 ec 20             	sub    esp,0x20
c001bd5d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bd61:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bd64:	68 14 01 00 00       	push   0x114
c001bd69:	e8 75 3c ff ff       	call   c000f9e3 <malloc>
c001bd6e:	83 c4 0c             	add    esp,0xc
c001bd71:	89 c3                	mov    ebx,eax
c001bd73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd78:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd7b:	56                   	push   esi
c001bd7c:	53                   	push   ebx
c001bd7d:	e8 18 72 ff ff       	call   c0012f9a <File::File(char const*, Process*)>
c001bd82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd85:	e8 ec 73 ff ff       	call   c0013176 <File::unlink()>
c001bd8a:	83 c4 10             	add    esp,0x10
c001bd8d:	85 db                	test   ebx,ebx
c001bd8f:	74 14                	je     c001bda5 <sysCallUnlink(regs*)+0x4d>
c001bd91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd95:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bd97:	83 ec 0c             	sub    esp,0xc
c001bd9a:	53                   	push   ebx
c001bd9b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bd9e:	83 c4 10             	add    esp,0x10
c001bda1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bda5:	85 c0                	test   eax,eax
c001bda7:	0f 95 c0             	setne  al
c001bdaa:	31 d2                	xor    edx,edx
c001bdac:	0f b6 c0             	movzx  eax,al
c001bdaf:	f7 d8                	neg    eax
c001bdb1:	83 d2 00             	adc    edx,0x0
c001bdb4:	83 c4 14             	add    esp,0x14
c001bdb7:	f7 da                	neg    edx
c001bdb9:	5b                   	pop    ebx
c001bdba:	5e                   	pop    esi
c001bdbb:	c3                   	ret    

c001bdbc <sysCallGetArgv(regs*)>:
c001bdbc:	83 ec 0c             	sub    esp,0xc
c001bdbf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bdc3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bdc6:	85 c0                	test   eax,eax
c001bdc8:	78 2b                	js     c001bdf5 <sysCallGetArgv(regs*)+0x39>
c001bdca:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bdd0:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bdd3:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bdd9:	7d 1a                	jge    c001bdf5 <sysCallGetArgv(regs*)+0x39>
c001bddb:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bde2:	85 c0                	test   eax,eax
c001bde4:	74 17                	je     c001bdfd <sysCallGetArgv(regs*)+0x41>
c001bde6:	83 ec 08             	sub    esp,0x8
c001bde9:	50                   	push   eax
c001bdea:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bded:	e8 1a 4a fe ff       	call   c000080c <strcpy>
c001bdf2:	83 c4 10             	add    esp,0x10
c001bdf5:	31 c0                	xor    eax,eax
c001bdf7:	31 d2                	xor    edx,edx
c001bdf9:	83 c4 0c             	add    esp,0xc
c001bdfc:	c3                   	ret    
c001bdfd:	b8 01 00 00 00       	mov    eax,0x1
c001be02:	31 d2                	xor    edx,edx
c001be04:	83 c4 0c             	add    esp,0xc
c001be07:	c3                   	ret    

c001be08 <sysCallTTYName(regs*)>:
c001be08:	56                   	push   esi
c001be09:	53                   	push   ebx
c001be0a:	53                   	push   ebx
c001be0b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001be0f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001be12:	85 c0                	test   eax,eax
c001be14:	74 5f                	je     c001be75 <sysCallTTYName(regs*)+0x6d>
c001be16:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001be19:	83 f8 02             	cmp    eax,0x2
c001be1c:	77 3e                	ja     c001be5c <sysCallTTYName(regs*)+0x54>
c001be1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be23:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be26:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001be2c:	85 db                	test   ebx,ebx
c001be2e:	74 45                	je     c001be75 <sysCallTTYName(regs*)+0x6d>
c001be30:	83 ec 0c             	sub    esp,0xc
c001be33:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be35:	53                   	push   ebx
c001be36:	ff 10                	call   DWORD PTR [eax]
c001be38:	83 c4 10             	add    esp,0x10
c001be3b:	84 c0                	test   al,al
c001be3d:	74 41                	je     c001be80 <sysCallTTYName(regs*)+0x78>
c001be3f:	83 ec 08             	sub    esp,0x8
c001be42:	81 c3 82 00 00 00    	add    ebx,0x82
c001be48:	53                   	push   ebx
c001be49:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001be4c:	e8 bb 49 fe ff       	call   c000080c <strcpy>
c001be51:	83 c4 10             	add    esp,0x10
c001be54:	31 c0                	xor    eax,eax
c001be56:	59                   	pop    ecx
c001be57:	31 d2                	xor    edx,edx
c001be59:	5b                   	pop    ebx
c001be5a:	5e                   	pop    esi
c001be5b:	c3                   	ret    
c001be5c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001be61:	74 bb                	je     c001be1e <sysCallTTYName(regs*)+0x16>
c001be63:	83 ec 0c             	sub    esp,0xc
c001be66:	50                   	push   eax
c001be67:	e8 a7 56 ff ff       	call   c0011513 <getFromFileDescriptor(int)>
c001be6c:	83 c4 10             	add    esp,0x10
c001be6f:	89 c3                	mov    ebx,eax
c001be71:	85 db                	test   ebx,ebx
c001be73:	75 bb                	jne    c001be30 <sysCallTTYName(regs*)+0x28>
c001be75:	59                   	pop    ecx
c001be76:	b8 01 00 00 00       	mov    eax,0x1
c001be7b:	31 d2                	xor    edx,edx
c001be7d:	5b                   	pop    ebx
c001be7e:	5e                   	pop    esi
c001be7f:	c3                   	ret    
c001be80:	59                   	pop    ecx
c001be81:	b8 02 00 00 00       	mov    eax,0x2
c001be86:	31 d2                	xor    edx,edx
c001be88:	5b                   	pop    ebx
c001be89:	5e                   	pop    esi
c001be8a:	c3                   	ret    

c001be8b <sysCallUSleep(regs*)>:
c001be8b:	83 ec 14             	sub    esp,0x14
c001be8e:	b8 e8 03 00 00       	mov    eax,0x3e8
c001be93:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001be97:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001be9e:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bea1:	01 ca                	add    edx,ecx
c001bea3:	52                   	push   edx
c001bea4:	50                   	push   eax
c001bea5:	e8 9b 23 00 00       	call   c001e245 <nanoSleep(unsigned long long)>
c001beaa:	31 c0                	xor    eax,eax
c001beac:	31 d2                	xor    edx,edx
c001beae:	83 c4 1c             	add    esp,0x1c
c001beb1:	c3                   	ret    

c001beb2 <sysCallSpawn(regs*)>:
c001beb2:	56                   	push   esi
c001beb3:	53                   	push   ebx
c001beb4:	50                   	push   eax
c001beb5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001beb9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bebc:	85 c0                	test   eax,eax
c001bebe:	75 08                	jne    c001bec8 <sysCallSpawn(regs*)+0x16>
c001bec0:	59                   	pop    ecx
c001bec1:	31 c0                	xor    eax,eax
c001bec3:	31 d2                	xor    edx,edx
c001bec5:	5b                   	pop    ebx
c001bec6:	5e                   	pop    esi
c001bec7:	c3                   	ret    
c001bec8:	83 ec 0c             	sub    esp,0xc
c001becb:	68 3f 07 00 00       	push   0x73f
c001bed0:	e8 0e 3b ff ff       	call   c000f9e3 <malloc>
c001bed5:	83 c4 10             	add    esp,0x10
c001bed8:	89 c6                	mov    esi,eax
c001beda:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bedd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bee0:	85 c0                	test   eax,eax
c001bee2:	75 32                	jne    c001bf16 <sysCallSpawn(regs*)+0x64>
c001bee4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bee9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001beec:	52                   	push   edx
c001beed:	50                   	push   eax
c001beee:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bef1:	56                   	push   esi
c001bef2:	e8 73 1a 00 00       	call   c001d96a <Process::Process(char const*, Process*, char**)>
c001bef7:	83 c4 10             	add    esp,0x10
c001befa:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001bf01:	75 bd                	jne    c001bec0 <sysCallSpawn(regs*)+0xe>
c001bf03:	83 ec 0c             	sub    esp,0xc
c001bf06:	56                   	push   esi
c001bf07:	e8 40 1f 00 00       	call   c001de4c <Process::createUserThread()>
c001bf0c:	8b 06                	mov    eax,DWORD PTR [esi]
c001bf0e:	83 c4 10             	add    esp,0x10
c001bf11:	99                   	cdq    
c001bf12:	59                   	pop    ecx
c001bf13:	5b                   	pop    ebx
c001bf14:	5e                   	pop    esi
c001bf15:	c3                   	ret    
c001bf16:	31 c0                	xor    eax,eax
c001bf18:	eb d2                	jmp    c001beec <sysCallSpawn(regs*)+0x3a>

c001bf1a <sysCallGetEnv(regs*)>:
c001bf1a:	57                   	push   edi
c001bf1b:	56                   	push   esi
c001bf1c:	53                   	push   ebx
c001bf1d:	83 ec 1c             	sub    esp,0x1c
c001bf20:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bf24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf29:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001bf2c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bf2f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf32:	e8 ee e3 ff ff       	call   c001a325 <Krnl::getProcessTotalEnvCount(Process*)>
c001bf37:	83 c4 10             	add    esp,0x10
c001bf3a:	39 c7                	cmp    edi,eax
c001bf3c:	7c 14                	jl     c001bf52 <sysCallGetEnv(regs*)+0x38>
c001bf3e:	85 f6                	test   esi,esi
c001bf40:	75 0b                	jne    c001bf4d <sysCallGetEnv(regs*)+0x33>
c001bf42:	83 c4 10             	add    esp,0x10
c001bf45:	31 c0                	xor    eax,eax
c001bf47:	5b                   	pop    ebx
c001bf48:	31 d2                	xor    edx,edx
c001bf4a:	5e                   	pop    esi
c001bf4b:	5f                   	pop    edi
c001bf4c:	c3                   	ret    
c001bf4d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bf50:	eb f0                	jmp    c001bf42 <sysCallGetEnv(regs*)+0x28>
c001bf52:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bf56:	52                   	push   edx
c001bf57:	57                   	push   edi
c001bf58:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bf5e:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001bf61:	50                   	push   eax
c001bf62:	e8 de e3 ff ff       	call   c001a345 <Krnl::getProcessEnvPair(Process*, int)>
c001bf67:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bf6a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bf6e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bf72:	83 c4 0c             	add    esp,0xc
c001bf75:	85 c9                	test   ecx,ecx
c001bf77:	75 23                	jne    c001bf9c <sysCallGetEnv(regs*)+0x82>
c001bf79:	83 ec 0c             	sub    esp,0xc
c001bf7c:	50                   	push   eax
c001bf7d:	e8 ea 47 fe ff       	call   c000076c <strlen>
c001bf82:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bf85:	89 c3                	mov    ebx,eax
c001bf87:	e8 e0 47 fe ff       	call   c000076c <strlen>
c001bf8c:	83 c4 10             	add    esp,0x10
c001bf8f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bf93:	83 c4 10             	add    esp,0x10
c001bf96:	31 d2                	xor    edx,edx
c001bf98:	5b                   	pop    ebx
c001bf99:	5e                   	pop    esi
c001bf9a:	5f                   	pop    edi
c001bf9b:	c3                   	ret    
c001bf9c:	83 ec 08             	sub    esp,0x8
c001bf9f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bfa2:	50                   	push   eax
c001bfa3:	56                   	push   esi
c001bfa4:	e8 63 48 fe ff       	call   c000080c <strcpy>
c001bfa9:	58                   	pop    eax
c001bfaa:	5a                   	pop    edx
c001bfab:	68 13 c6 02 c0       	push   0xc002c613
c001bfb0:	56                   	push   esi
c001bfb1:	e8 96 49 fe ff       	call   c000094c <strcat>
c001bfb6:	59                   	pop    ecx
c001bfb7:	5b                   	pop    ebx
c001bfb8:	57                   	push   edi
c001bfb9:	56                   	push   esi
c001bfba:	e8 8d 49 fe ff       	call   c000094c <strcat>
c001bfbf:	83 c4 10             	add    esp,0x10
c001bfc2:	e9 7b ff ff ff       	jmp    c001bf42 <sysCallGetEnv(regs*)+0x28>

c001bfc7 <sysAppSettings(regs*)>:
c001bfc7:	57                   	push   edi
c001bfc8:	56                   	push   esi
c001bfc9:	56                   	push   esi
c001bfca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfce:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bfd1:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001bfd7:	25 e0 1f 00 00       	and    eax,0x1fe0
c001bfdc:	66 3d c0 09          	cmp    ax,0x9c0
c001bfe0:	75 2e                	jne    c001c010 <sysAppSettings(regs*)+0x49>
c001bfe2:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001bfe8:	83 e0 1f             	and    eax,0x1f
c001bfeb:	3c 01                	cmp    al,0x1
c001bfed:	74 2c                	je     c001c01b <sysAppSettings(regs*)+0x54>
c001bfef:	3c 07                	cmp    al,0x7
c001bff1:	0f 84 b3 00 00 00    	je     c001c0aa <sysAppSettings(regs*)+0xe3>
c001bff7:	84 c0                	test   al,al
c001bff9:	0f 84 d2 00 00 00    	je     c001c0d1 <sysAppSettings(regs*)+0x10a>
c001bfff:	3c 08                	cmp    al,0x8
c001c001:	74 63                	je     c001c066 <sysAppSettings(regs*)+0x9f>
c001c003:	59                   	pop    ecx
c001c004:	0f b6 c0             	movzx  eax,al
c001c007:	5e                   	pop    esi
c001c008:	05 e8 03 00 00       	add    eax,0x3e8
c001c00d:	5f                   	pop    edi
c001c00e:	99                   	cdq    
c001c00f:	c3                   	ret    
c001c010:	b8 01 00 00 00       	mov    eax,0x1
c001c015:	59                   	pop    ecx
c001c016:	31 d2                	xor    edx,edx
c001c018:	5e                   	pop    esi
c001c019:	5f                   	pop    edi
c001c01a:	c3                   	ret    
c001c01b:	50                   	push   eax
c001c01c:	68 00 01 00 00       	push   0x100
c001c021:	6a 00                	push   0x0
c001c023:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c028:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c02b:	83 c0 0c             	add    eax,0xc
c001c02e:	50                   	push   eax
c001c02f:	e8 1c 47 fe ff       	call   c0000750 <memset>
c001c034:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c039:	b9 ff 00 00 00       	mov    ecx,0xff
c001c03e:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001c041:	83 c7 0c             	add    edi,0xc
c001c044:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c046:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c04b:	5a                   	pop    edx
c001c04c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c04f:	59                   	pop    ecx
c001c050:	8d 50 0c             	lea    edx,[eax+0xc]
c001c053:	52                   	push   edx
c001c054:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c05a:	e8 dd 45 ff ff       	call   c001063c <VgaText::setTitle(char*)>
c001c05f:	83 c4 10             	add    esp,0x10
c001c062:	31 c0                	xor    eax,eax
c001c064:	eb af                	jmp    c001c015 <sysAppSettings(regs*)+0x4e>
c001c066:	83 ec 08             	sub    esp,0x8
c001c069:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c06f:	83 e0 0f             	and    eax,0xf
c001c072:	50                   	push   eax
c001c073:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c078:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c07b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c081:	e8 a6 45 ff ff       	call   c001062c <VgaText::setTitleColour(VgaColour)>
c001c086:	5f                   	pop    edi
c001c087:	58                   	pop    eax
c001c088:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c08e:	c1 e8 04             	shr    eax,0x4
c001c091:	83 e0 0f             	and    eax,0xf
c001c094:	50                   	push   eax
c001c095:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c09a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c09d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c0a3:	e8 74 45 ff ff       	call   c001061c <VgaText::setTitleTextColour(VgaColour)>
c001c0a8:	eb b5                	jmp    c001c05f <sysAppSettings(regs*)+0x98>
c001c0aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0af:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0b2:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c0b8:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001c0be:	c0 e8 06             	shr    al,0x6
c001c0c1:	83 e0 01             	and    eax,0x1
c001c0c4:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c0ca:	31 c0                	xor    eax,eax
c001c0cc:	e9 44 ff ff ff       	jmp    c001c015 <sysAppSettings(regs*)+0x4e>
c001c0d1:	b8 02 00 00 00       	mov    eax,0x2
c001c0d6:	e9 3a ff ff ff       	jmp    c001c015 <sysAppSettings(regs*)+0x4e>

c001c0db <sysSetFatAttrib(regs*)>:
c001c0db:	57                   	push   edi
c001c0dc:	56                   	push   esi
c001c0dd:	53                   	push   ebx
c001c0de:	83 ec 1c             	sub    esp,0x1c
c001c0e1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c0e5:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c0e8:	68 14 01 00 00       	push   0x114
c001c0ed:	e8 f1 38 ff ff       	call   c000f9e3 <malloc>
c001c0f2:	83 c4 0c             	add    esp,0xc
c001c0f5:	89 c3                	mov    ebx,eax
c001c0f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0fc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0ff:	57                   	push   edi
c001c100:	53                   	push   ebx
c001c101:	e8 94 6e ff ff       	call   c0012f9a <File::File(char const*, Process*)>
c001c106:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c109:	83 c4 0c             	add    esp,0xc
c001c10c:	0f b6 d4             	movzx  edx,ah
c001c10f:	0f b6 c0             	movzx  eax,al
c001c112:	52                   	push   edx
c001c113:	50                   	push   eax
c001c114:	53                   	push   ebx
c001c115:	e8 f6 70 ff ff       	call   c0013210 <File::chfatattr(unsigned char, unsigned char)>
c001c11a:	83 c4 10             	add    esp,0x10
c001c11d:	85 db                	test   ebx,ebx
c001c11f:	74 14                	je     c001c135 <sysSetFatAttrib(regs*)+0x5a>
c001c121:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c125:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c127:	83 ec 0c             	sub    esp,0xc
c001c12a:	53                   	push   ebx
c001c12b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c12e:	83 c4 10             	add    esp,0x10
c001c131:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c135:	85 c0                	test   eax,eax
c001c137:	0f 95 c0             	setne  al
c001c13a:	31 d2                	xor    edx,edx
c001c13c:	0f b6 c0             	movzx  eax,al
c001c13f:	f7 d8                	neg    eax
c001c141:	83 d2 00             	adc    edx,0x0
c001c144:	83 c4 10             	add    esp,0x10
c001c147:	f7 da                	neg    edx
c001c149:	5b                   	pop    ebx
c001c14a:	5e                   	pop    esi
c001c14b:	5f                   	pop    edi
c001c14c:	c3                   	ret    

c001c14d <sysPipe(regs*)>:
c001c14d:	57                   	push   edi
c001c14e:	56                   	push   esi
c001c14f:	53                   	push   ebx
c001c150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c154:	83 ec 0c             	sub    esp,0xc
c001c157:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c15a:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c15d:	6a 20                	push   0x20
c001c15f:	e8 7f 38 ff ff       	call   c000f9e3 <malloc>
c001c164:	89 c3                	mov    ebx,eax
c001c166:	58                   	pop    eax
c001c167:	5a                   	pop    edx
c001c168:	68 00 50 00 00       	push   0x5000
c001c16d:	53                   	push   ebx
c001c16e:	e8 41 42 ff ff       	call   c00103b4 <Pipe::Pipe(int)>
c001c173:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c176:	e8 a3 50 ff ff       	call   c001121e <UnixFile::getFileDescriptor()>
c001c17b:	89 07                	mov    DWORD PTR [edi],eax
c001c17d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c180:	e8 99 50 ff ff       	call   c001121e <UnixFile::getFileDescriptor()>
c001c185:	83 c4 10             	add    esp,0x10
c001c188:	89 06                	mov    DWORD PTR [esi],eax
c001c18a:	31 d2                	xor    edx,edx
c001c18c:	5b                   	pop    ebx
c001c18d:	31 c0                	xor    eax,eax
c001c18f:	5e                   	pop    esi
c001c190:	5f                   	pop    edi
c001c191:	c3                   	ret    

c001c192 <sysGetUnixTime(regs*)>:
c001c192:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c001c197:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c19d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c1a1:	e9 e6 77 ff ff       	jmp    c001398c <Clock::timeInSecondsLocal()>

c001c1a6 <string_ends_with(char const*, char const*)>:
c001c1a6:	57                   	push   edi
c001c1a7:	56                   	push   esi
c001c1a8:	53                   	push   ebx
c001c1a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c1ad:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c1b1:	83 ec 0c             	sub    esp,0xc
c001c1b4:	53                   	push   ebx
c001c1b5:	e8 b2 45 fe ff       	call   c000076c <strlen>
c001c1ba:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c1bd:	89 c6                	mov    esi,eax
c001c1bf:	e8 a8 45 fe ff       	call   c000076c <strlen>
c001c1c4:	83 c4 10             	add    esp,0x10
c001c1c7:	39 c6                	cmp    esi,eax
c001c1c9:	7d 06                	jge    c001c1d1 <string_ends_with(char const*, char const*)+0x2b>
c001c1cb:	5b                   	pop    ebx
c001c1cc:	31 c0                	xor    eax,eax
c001c1ce:	5e                   	pop    esi
c001c1cf:	5f                   	pop    edi
c001c1d0:	c3                   	ret    
c001c1d1:	83 ec 08             	sub    esp,0x8
c001c1d4:	29 c6                	sub    esi,eax
c001c1d6:	57                   	push   edi
c001c1d7:	01 f3                	add    ebx,esi
c001c1d9:	53                   	push   ebx
c001c1da:	e8 b9 46 fe ff       	call   c0000898 <strcmp>
c001c1df:	83 c4 10             	add    esp,0x10
c001c1e2:	85 c0                	test   eax,eax
c001c1e4:	5b                   	pop    ebx
c001c1e5:	0f 94 c0             	sete   al
c001c1e8:	5e                   	pop    esi
c001c1e9:	0f b6 c0             	movzx  eax,al
c001c1ec:	5f                   	pop    edi
c001c1ed:	c3                   	ret    

c001c1ee <sysCallOpen(regs*)>:
c001c1ee:	56                   	push   esi
c001c1ef:	53                   	push   ebx
c001c1f0:	81 ec 04 01 00 00    	sub    esp,0x104
c001c1f6:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c1fd:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c200:	85 c9                	test   ecx,ecx
c001c202:	0f 84 ad 01 00 00    	je     c001c3b5 <sysCallOpen(regs*)+0x1c7>
c001c208:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c20b:	85 c0                	test   eax,eax
c001c20d:	0f 84 a2 01 00 00    	je     c001c3b5 <sysCallOpen(regs*)+0x1c7>
c001c213:	52                   	push   edx
c001c214:	68 15 c6 02 c0       	push   0xc002c615
c001c219:	50                   	push   eax
c001c21a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c21e:	56                   	push   esi
c001c21f:	e8 cc 6b ff ff       	call   c0012df0 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c224:	89 34 24             	mov    DWORD PTR [esp],esi
c001c227:	e8 40 45 fe ff       	call   c000076c <strlen>
c001c22c:	83 c4 10             	add    esp,0x10
c001c22f:	48                   	dec    eax
c001c230:	74 1d                	je     c001c24f <sysCallOpen(regs*)+0x61>
c001c232:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c235:	eb 0f                	jmp    c001c246 <sysCallOpen(regs*)+0x58>
c001c237:	80 fa 3a             	cmp    dl,0x3a
c001c23a:	74 0f                	je     c001c24b <sysCallOpen(regs*)+0x5d>
c001c23c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c240:	48                   	dec    eax
c001c241:	74 0c                	je     c001c24f <sysCallOpen(regs*)+0x61>
c001c243:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c246:	80 fa 2e             	cmp    dl,0x2e
c001c249:	75 ec                	jne    c001c237 <sysCallOpen(regs*)+0x49>
c001c24b:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c24f:	83 ec 08             	sub    esp,0x8
c001c252:	68 19 c6 02 c0       	push   0xc002c619
c001c257:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c25a:	e8 47 ff ff ff       	call   c001c1a6 <string_ends_with(char const*, char const*)>
c001c25f:	83 c4 10             	add    esp,0x10
c001c262:	85 c0                	test   eax,eax
c001c264:	74 1d                	je     c001c283 <sysCallOpen(regs*)+0x95>
c001c266:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c269:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c26f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c276:	81 c4 04 01 00 00    	add    esp,0x104
c001c27c:	31 c0                	xor    eax,eax
c001c27e:	31 d2                	xor    edx,edx
c001c280:	5b                   	pop    ebx
c001c281:	5e                   	pop    esi
c001c282:	c3                   	ret    
c001c283:	83 ec 08             	sub    esp,0x8
c001c286:	68 1e c6 02 c0       	push   0xc002c61e
c001c28b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c28e:	e8 13 ff ff ff       	call   c001c1a6 <string_ends_with(char const*, char const*)>
c001c293:	83 c4 10             	add    esp,0x10
c001c296:	85 c0                	test   eax,eax
c001c298:	75 cc                	jne    c001c266 <sysCallOpen(regs*)+0x78>
c001c29a:	83 ec 08             	sub    esp,0x8
c001c29d:	68 1a c6 02 c0       	push   0xc002c61a
c001c2a2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c2a5:	e8 ee 45 fe ff       	call   c0000898 <strcmp>
c001c2aa:	83 c4 10             	add    esp,0x10
c001c2ad:	85 c0                	test   eax,eax
c001c2af:	74 b5                	je     c001c266 <sysCallOpen(regs*)+0x78>
c001c2b1:	83 ec 08             	sub    esp,0x8
c001c2b4:	68 19 c6 02 c0       	push   0xc002c619
c001c2b9:	56                   	push   esi
c001c2ba:	e8 e7 fe ff ff       	call   c001c1a6 <string_ends_with(char const*, char const*)>
c001c2bf:	83 c4 10             	add    esp,0x10
c001c2c2:	85 c0                	test   eax,eax
c001c2c4:	75 a0                	jne    c001c266 <sysCallOpen(regs*)+0x78>
c001c2c6:	83 ec 08             	sub    esp,0x8
c001c2c9:	68 23 c6 02 c0       	push   0xc002c623
c001c2ce:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c2d1:	e8 d0 fe ff ff       	call   c001c1a6 <string_ends_with(char const*, char const*)>
c001c2d6:	83 c4 10             	add    esp,0x10
c001c2d9:	85 c0                	test   eax,eax
c001c2db:	0f 85 e7 00 00 00    	jne    c001c3c8 <sysCallOpen(regs*)+0x1da>
c001c2e1:	83 ec 08             	sub    esp,0x8
c001c2e4:	68 28 c6 02 c0       	push   0xc002c628
c001c2e9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c2ec:	e8 b5 fe ff ff       	call   c001c1a6 <string_ends_with(char const*, char const*)>
c001c2f1:	83 c4 10             	add    esp,0x10
c001c2f4:	85 c0                	test   eax,eax
c001c2f6:	0f 85 cc 00 00 00    	jne    c001c3c8 <sysCallOpen(regs*)+0x1da>
c001c2fc:	83 ec 08             	sub    esp,0x8
c001c2ff:	68 24 c6 02 c0       	push   0xc002c624
c001c304:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c307:	e8 8c 45 fe ff       	call   c0000898 <strcmp>
c001c30c:	83 c4 10             	add    esp,0x10
c001c30f:	85 c0                	test   eax,eax
c001c311:	0f 84 b1 00 00 00    	je     c001c3c8 <sysCallOpen(regs*)+0x1da>
c001c317:	83 ec 08             	sub    esp,0x8
c001c31a:	68 23 c6 02 c0       	push   0xc002c623
c001c31f:	56                   	push   esi
c001c320:	e8 81 fe ff ff       	call   c001c1a6 <string_ends_with(char const*, char const*)>
c001c325:	83 c4 10             	add    esp,0x10
c001c328:	85 c0                	test   eax,eax
c001c32a:	0f 85 98 00 00 00    	jne    c001c3c8 <sysCallOpen(regs*)+0x1da>
c001c330:	83 ec 0c             	sub    esp,0xc
c001c333:	68 14 01 00 00       	push   0x114
c001c338:	e8 a6 36 ff ff       	call   c000f9e3 <malloc>
c001c33d:	83 c4 0c             	add    esp,0xc
c001c340:	89 c6                	mov    esi,eax
c001c342:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c347:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c34a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c34d:	56                   	push   esi
c001c34e:	e8 47 6c ff ff       	call   c0012f9a <File::File(char const*, Process*)>
c001c353:	83 c4 10             	add    esp,0x10
c001c356:	85 f6                	test   esi,esi
c001c358:	74 5b                	je     c001c3b5 <sysCallOpen(regs*)+0x1c7>
c001c35a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c35d:	0f b6 c2             	movzx  eax,dl
c001c360:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c363:	89 d0                	mov    eax,edx
c001c365:	83 e0 01             	and    eax,0x1
c001c368:	f6 c2 02             	test   dl,0x2
c001c36b:	74 03                	je     c001c370 <sysCallOpen(regs*)+0x182>
c001c36d:	83 c8 02             	or     eax,0x2
c001c370:	f6 c2 04             	test   dl,0x4
c001c373:	74 03                	je     c001c378 <sysCallOpen(regs*)+0x18a>
c001c375:	83 c8 04             	or     eax,0x4
c001c378:	f6 c2 08             	test   dl,0x8
c001c37b:	74 03                	je     c001c380 <sysCallOpen(regs*)+0x192>
c001c37d:	83 c8 0a             	or     eax,0xa
c001c380:	83 e2 10             	and    edx,0x10
c001c383:	74 03                	je     c001c388 <sysCallOpen(regs*)+0x19a>
c001c385:	83 c8 12             	or     eax,0x12
c001c388:	83 ec 08             	sub    esp,0x8
c001c38b:	50                   	push   eax
c001c38c:	56                   	push   esi
c001c38d:	e8 6c 6c ff ff       	call   c0012ffe <File::open(FileOpenMode)>
c001c392:	83 c4 10             	add    esp,0x10
c001c395:	85 c0                	test   eax,eax
c001c397:	75 1c                	jne    c001c3b5 <sysCallOpen(regs*)+0x1c7>
c001c399:	83 ec 0c             	sub    esp,0xc
c001c39c:	56                   	push   esi
c001c39d:	e8 7c 4e ff ff       	call   c001121e <UnixFile::getFileDescriptor()>
c001c3a2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c3a5:	83 c4 10             	add    esp,0x10
c001c3a8:	89 02                	mov    DWORD PTR [edx],eax
c001c3aa:	c1 f8 1f             	sar    eax,0x1f
c001c3ad:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c3b0:	e9 c1 fe ff ff       	jmp    c001c276 <sysCallOpen(regs*)+0x88>
c001c3b5:	81 c4 04 01 00 00    	add    esp,0x104
c001c3bb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c3c0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c3c5:	5b                   	pop    ebx
c001c3c6:	5e                   	pop    esi
c001c3c7:	c3                   	ret    
c001c3c8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c3cb:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c3d1:	e9 99 fe ff ff       	jmp    c001c26f <sysCallOpen(regs*)+0x81>

c001c3d6 <Sys::loadSyscalls()>:
c001c3d6:	c7 05 20 f2 02 c0 43 b6 01 c0 	mov    DWORD PTR ds:0xc002f220,0xc001b643
c001c3e0:	c7 05 24 f2 02 c0 38 b2 01 c0 	mov    DWORD PTR ds:0xc002f224,0xc001b238
c001c3ea:	c7 05 28 f2 02 c0 29 b4 01 c0 	mov    DWORD PTR ds:0xc002f228,0xc001b429
c001c3f4:	c7 05 2c f2 02 c0 79 b5 01 c0 	mov    DWORD PTR ds:0xc002f22c,0xc001b579
c001c3fe:	c7 05 30 f2 02 c0 c1 b3 01 c0 	mov    DWORD PTR ds:0xc002f230,0xc001b3c1
c001c408:	c7 05 34 f2 02 c0 6f b2 01 c0 	mov    DWORD PTR ds:0xc002f234,0xc001b26f
c001c412:	c7 05 38 f2 02 c0 50 b2 01 c0 	mov    DWORD PTR ds:0xc002f238,0xc001b250
c001c41c:	c7 05 3c f2 02 c0 7e b4 01 c0 	mov    DWORD PTR ds:0xc002f23c,0xc001b47e
c001c426:	c7 05 44 f2 02 c0 0c bb 01 c0 	mov    DWORD PTR ds:0xc002f244,0xc001bb0c
c001c430:	c7 05 40 f2 02 c0 ee c1 01 c0 	mov    DWORD PTR ds:0xc002f240,0xc001c1ee
c001c43a:	c7 05 48 f2 02 c0 6c bb 01 c0 	mov    DWORD PTR ds:0xc002f248,0xc001bb6c
c001c444:	c7 05 4c f2 02 c0 4f b8 01 c0 	mov    DWORD PTR ds:0xc002f24c,0xc001b84f
c001c44e:	c7 05 50 f2 02 c0 89 b6 01 c0 	mov    DWORD PTR ds:0xc002f250,0xc001b689
c001c458:	c7 05 54 f2 02 c0 8e b6 01 c0 	mov    DWORD PTR ds:0xc002f254,0xc001b68e
c001c462:	c7 05 58 f2 02 c0 35 bc 01 c0 	mov    DWORD PTR ds:0xc002f258,0xc001bc35
c001c46c:	c7 05 5c f2 02 c0 e1 bb 01 c0 	mov    DWORD PTR ds:0xc002f25c,0xc001bbe1
c001c476:	c7 05 60 f2 02 c0 28 b9 01 c0 	mov    DWORD PTR ds:0xc002f260,0xc001b928
c001c480:	c7 05 64 f2 02 c0 7f b9 01 c0 	mov    DWORD PTR ds:0xc002f264,0xc001b97f
c001c48a:	c7 05 68 f2 02 c0 eb b9 01 c0 	mov    DWORD PTR ds:0xc002f268,0xc001b9eb
c001c494:	c7 05 6c f2 02 c0 93 b6 01 c0 	mov    DWORD PTR ds:0xc002f26c,0xc001b693
c001c49e:	c7 05 70 f2 02 c0 a5 bc 01 c0 	mov    DWORD PTR ds:0xc002f270,0xc001bca5
c001c4a8:	c7 05 74 f2 02 c0 bf bc 01 c0 	mov    DWORD PTR ds:0xc002f274,0xc001bcbf
c001c4b2:	c7 05 78 f2 02 c0 bf bc 01 c0 	mov    DWORD PTR ds:0xc002f278,0xc001bcbf
c001c4bc:	c7 05 7c f2 02 c0 f4 bc 01 c0 	mov    DWORD PTR ds:0xc002f27c,0xc001bcf4
c001c4c6:	c7 05 80 f2 02 c0 58 bd 01 c0 	mov    DWORD PTR ds:0xc002f280,0xc001bd58
c001c4d0:	c7 05 84 f2 02 c0 9d b6 01 c0 	mov    DWORD PTR ds:0xc002f284,0xc001b69d
c001c4da:	c7 05 88 f2 02 c0 bc bd 01 c0 	mov    DWORD PTR ds:0xc002f288,0xc001bdbc
c001c4e4:	c7 05 8c f2 02 c0 0c b8 01 c0 	mov    DWORD PTR ds:0xc002f28c,0xc001b80c
c001c4ee:	c7 05 90 f2 02 c0 08 be 01 c0 	mov    DWORD PTR ds:0xc002f290,0xc001be08
c001c4f8:	c7 05 94 f2 02 c0 ce b8 01 c0 	mov    DWORD PTR ds:0xc002f294,0xc001b8ce
c001c502:	c7 05 98 f2 02 c0 8b be 01 c0 	mov    DWORD PTR ds:0xc002f298,0xc001be8b
c001c50c:	c7 05 9c f2 02 c0 5d ba 01 c0 	mov    DWORD PTR ds:0xc002f29c,0xc001ba5d
c001c516:	c7 05 a0 f2 02 c0 b2 be 01 c0 	mov    DWORD PTR ds:0xc002f2a0,0xc001beb2
c001c520:	c7 05 a4 f2 02 c0 1a bf 01 c0 	mov    DWORD PTR ds:0xc002f2a4,0xc001bf1a
c001c52a:	c7 05 a8 f2 02 c0 c7 bf 01 c0 	mov    DWORD PTR ds:0xc002f2a8,0xc001bfc7
c001c534:	c7 05 ac f2 02 c0 ad b6 01 c0 	mov    DWORD PTR ds:0xc002f2ac,0xc001b6ad
c001c53e:	c7 05 b0 f2 02 c0 17 b7 01 c0 	mov    DWORD PTR ds:0xc002f2b0,0xc001b717
c001c548:	c7 05 b4 f2 02 c0 5d b7 01 c0 	mov    DWORD PTR ds:0xc002f2b4,0xc001b75d
c001c552:	c7 05 b8 f2 02 c0 db c0 01 c0 	mov    DWORD PTR ds:0xc002f2b8,0xc001c0db
c001c55c:	c7 05 bc f2 02 c0 da bc 01 c0 	mov    DWORD PTR ds:0xc002f2bc,0xc001bcda
c001c566:	c7 05 c0 f2 02 c0 ae b7 01 c0 	mov    DWORD PTR ds:0xc002f2c0,0xc001b7ae
c001c570:	c7 05 c4 f2 02 c0 4d c1 01 c0 	mov    DWORD PTR ds:0xc002f2c4,0xc001c14d
c001c57a:	c7 05 c8 f2 02 c0 92 c1 01 c0 	mov    DWORD PTR ds:0xc002f2c8,0xc001c192
c001c584:	c7 05 cc f2 02 c0 19 b3 01 c0 	mov    DWORD PTR ds:0xc002f2cc,0xc001b319
c001c58e:	c7 05 d0 f2 02 c0 9a b4 01 c0 	mov    DWORD PTR ds:0xc002f2d0,0xc001b49a
c001c598:	c7 05 d4 f2 02 c0 2f b5 01 c0 	mov    DWORD PTR ds:0xc002f2d4,0xc001b52f
c001c5a2:	c7 05 d8 f2 02 c0 02 b2 01 c0 	mov    DWORD PTR ds:0xc002f2d8,0xc001b202
c001c5ac:	c7 05 dc f2 02 c0 e1 b5 01 c0 	mov    DWORD PTR ds:0xc002f2dc,0xc001b5e1
c001c5b6:	c7 05 e0 f2 02 c0 7b b2 01 c0 	mov    DWORD PTR ds:0xc002f2e0,0xc001b27b
c001c5c0:	c7 05 e4 f2 02 c0 95 b2 01 c0 	mov    DWORD PTR ds:0xc002f2e4,0xc001b295
c001c5ca:	c3                   	ret    

c001c5cb <Sys::systemCall(regs*, void*)>:
c001c5cb:	53                   	push   ebx
c001c5cc:	83 ec 08             	sub    esp,0x8
c001c5cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c5d3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c5d6:	83 f8 7f             	cmp    eax,0x7f
c001c5d9:	77 16                	ja     c001c5f1 <Sys::systemCall(regs*, void*)+0x26>
c001c5db:	8b 14 85 20 f2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0de0]
c001c5e2:	85 d2                	test   edx,edx
c001c5e4:	74 0b                	je     c001c5f1 <Sys::systemCall(regs*, void*)+0x26>
c001c5e6:	83 ec 0c             	sub    esp,0xc
c001c5e9:	53                   	push   ebx
c001c5ea:	ff d2                	call   edx
c001c5ec:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c5ef:	eb 0d                	jmp    c001c5fe <Sys::systemCall(regs*, void*)+0x33>
c001c5f1:	52                   	push   edx
c001c5f2:	52                   	push   edx
c001c5f3:	50                   	push   eax
c001c5f4:	68 2d c6 02 c0       	push   0xc002c62d
c001c5f9:	e8 3d 64 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001c5fe:	83 c4 10             	add    esp,0x10
c001c601:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c606:	31 d2                	xor    edx,edx
c001c608:	83 c4 08             	add    esp,0x8
c001c60b:	5b                   	pop    ebx
c001c60c:	c3                   	ret    

c001c60d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c60d:	55                   	push   ebp
c001c60e:	57                   	push   edi
c001c60f:	56                   	push   esi
c001c610:	53                   	push   ebx
c001c611:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c617:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c61e:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c625:	85 c0                	test   eax,eax
c001c627:	0f 95 c1             	setne  cl
c001c62a:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c632:	0f 94 c2             	sete   dl
c001c635:	84 d1                	test   cl,dl
c001c637:	74 23                	je     c001c65c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c639:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c63f:	74 1b                	je     c001c65c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c641:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c647:	89 da                	mov    edx,ebx
c001c649:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c64f:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c655:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c65c:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c663:	05 ff 0f 00 00       	add    eax,0xfff
c001c668:	83 ec 0c             	sub    esp,0xc
c001c66b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c66f:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c675:	c1 e8 0c             	shr    eax,0xc
c001c678:	89 fe                	mov    esi,edi
c001c67a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c67e:	c1 ee 0c             	shr    esi,0xc
c001c681:	6a 01                	push   0x1
c001c683:	e8 e1 4f ff ff       	call   c0011669 <Virt::allocateKernelVirtualPages(int)>
c001c688:	89 c5                	mov    ebp,eax
c001c68a:	58                   	pop    eax
c001c68b:	5a                   	pop    edx
c001c68c:	56                   	push   esi
c001c68d:	68 41 c6 02 c0       	push   0xc002c641
c001c692:	e8 a4 63 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001c697:	59                   	pop    ecx
c001c698:	58                   	pop    eax
c001c699:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c69d:	68 53 c6 02 c0       	push   0xc002c653
c001c6a2:	e8 94 63 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001c6a7:	83 c4 10             	add    esp,0x10
c001c6aa:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c6b0:	0f 86 31 01 00 00    	jbe    c001c7e7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c6b6:	c1 e6 0c             	shl    esi,0xc
c001c6b9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c6bc:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c6bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c6c3:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c6ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c6cd:	01 df                	add    edi,ebx
c001c6cf:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c6d2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c6d6:	0f 84 08 01 00 00    	je     c001c7e4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c6dc:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c6e2:	76 05                	jbe    c001c6e9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c6e4:	bf 00 10 00 00       	mov    edi,0x1000
c001c6e9:	83 ec 0c             	sub    esp,0xc
c001c6ec:	31 d2                	xor    edx,edx
c001c6ee:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c6f5:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c6f7:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c6fb:	50                   	push   eax
c001c6fc:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c700:	56                   	push   esi
c001c701:	52                   	push   edx
c001c702:	57                   	push   edi
c001c703:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c70a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c70d:	83 c4 20             	add    esp,0x20
c001c710:	85 c0                	test   eax,eax
c001c712:	74 0a                	je     c001c71e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c714:	53                   	push   ebx
c001c715:	53                   	push   ebx
c001c716:	50                   	push   eax
c001c717:	68 65 c6 02 c0       	push   0xc002c665
c001c71c:	eb 0f                	jmp    c001c72d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c71e:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c722:	74 20                	je     c001c744 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c724:	51                   	push   ecx
c001c725:	51                   	push   ecx
c001c726:	6a 00                	push   0x0
c001c728:	68 90 c6 02 c0       	push   0xc002c690
c001c72d:	e8 09 63 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001c732:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c735:	e8 5f 52 ff ff       	call   c0011999 <Virt::freeKernelVirtualPages(unsigned long)>
c001c73a:	83 c4 10             	add    esp,0x10
c001c73d:	31 c0                	xor    eax,eax
c001c73f:	e9 68 01 00 00       	jmp    c001c8ac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c744:	fa                   	cli    
c001c745:	ff 05 e8 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe8
c001c74b:	e8 8f 36 ff ff       	call   c000fddf <Phys::allocatePage()>
c001c750:	6a 07                	push   0x7
c001c752:	89 c7                	mov    edi,eax
c001c754:	55                   	push   ebp
c001c755:	50                   	push   eax
c001c756:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c75b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c75e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c764:	e8 a7 55 ff ff       	call   c0011d10 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c769:	83 c4 0c             	add    esp,0xc
c001c76c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c773:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c779:	6a 00                	push   0x0
c001c77b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c780:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c783:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c789:	e8 dc 53 ff ff       	call   c0011b6a <VAS::mapOtherVASIn(bool, VAS*)>
c001c78e:	58                   	pop    eax
c001c78f:	5a                   	pop    edx
c001c790:	68 07 0c 00 00       	push   0xc07
c001c795:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c799:	57                   	push   edi
c001c79a:	89 ef                	mov    edi,ebp
c001c79c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c7a3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c7a9:	6a 00                	push   0x0
c001c7ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7b0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c7b3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c7b9:	e8 0e 59 ff ff       	call   c00120cc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c7be:	b9 00 10 00 00       	mov    ecx,0x1000
c001c7c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c7c5:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001c7ca:	83 c4 20             	add    esp,0x20
c001c7cd:	48                   	dec    eax
c001c7ce:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c001c7d3:	85 c0                	test   eax,eax
c001c7d5:	75 01                	jne    c001c7d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c7d7:	fb                   	sti    
c001c7d8:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c7df:	e9 df fe ff ff       	jmp    c001c6c3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c7e4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c7e7:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c7ef:	0f 86 a9 00 00 00    	jbe    c001c89e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c7f5:	fa                   	cli    
c001c7f6:	ff 05 e8 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe8
c001c7fc:	51                   	push   ecx
c001c7fd:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c804:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c80a:	6a 00                	push   0x0
c001c80c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c811:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c814:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c81a:	e8 4b 53 ff ff       	call   c0011b6a <VAS::mapOtherVASIn(bool, VAS*)>
c001c81f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c823:	c1 e6 0c             	shl    esi,0xc
c001c826:	01 de                	add    esi,ebx
c001c828:	83 c4 10             	add    esp,0x10
c001c82b:	39 de                	cmp    esi,ebx
c001c82d:	74 61                	je     c001c890 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c82f:	e8 ab 35 ff ff       	call   c000fddf <Phys::allocatePage()>
c001c834:	6a 07                	push   0x7
c001c836:	89 c7                	mov    edi,eax
c001c838:	55                   	push   ebp
c001c839:	50                   	push   eax
c001c83a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c83f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c842:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c848:	e8 c3 54 ff ff       	call   c0011d10 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c84d:	58                   	pop    eax
c001c84e:	5a                   	pop    edx
c001c84f:	68 07 0c 00 00       	push   0xc07
c001c854:	53                   	push   ebx
c001c855:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c85b:	57                   	push   edi
c001c85c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c863:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c869:	6a 00                	push   0x0
c001c86b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c870:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c873:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c879:	e8 4e 58 ff ff       	call   c00120cc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c87e:	83 c4 1c             	add    esp,0x1c
c001c881:	68 00 10 00 00       	push   0x1000
c001c886:	6a 00                	push   0x0
c001c888:	55                   	push   ebp
c001c889:	e8 c2 3e fe ff       	call   c0000750 <memset>
c001c88e:	eb 98                	jmp    c001c828 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c890:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001c895:	48                   	dec    eax
c001c896:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c001c89b:	75 01                	jne    c001c89e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c89d:	fb                   	sti    
c001c89e:	83 ec 0c             	sub    esp,0xc
c001c8a1:	55                   	push   ebp
c001c8a2:	e8 f2 50 ff ff       	call   c0011999 <Virt::freeKernelVirtualPages(unsigned long)>
c001c8a7:	83 c4 10             	add    esp,0x10
c001c8aa:	b0 01                	mov    al,0x1
c001c8ac:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c8b2:	5b                   	pop    ebx
c001c8b3:	5e                   	pop    esi
c001c8b4:	5f                   	pop    edi
c001c8b5:	5d                   	pop    ebp
c001c8b6:	c3                   	ret    

c001c8b7 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c8b7:	55                   	push   ebp
c001c8b8:	57                   	push   edi
c001c8b9:	56                   	push   esi
c001c8ba:	53                   	push   ebx
c001c8bb:	83 ec 48             	sub    esp,0x48
c001c8be:	68 14 01 00 00       	push   0x114
c001c8c3:	e8 1b 31 ff ff       	call   c000f9e3 <malloc>
c001c8c8:	83 c4 0c             	add    esp,0xc
c001c8cb:	89 c6                	mov    esi,eax
c001c8cd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c8d1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c8d5:	50                   	push   eax
c001c8d6:	e8 bf 66 ff ff       	call   c0012f9a <File::File(char const*, Process*)>
c001c8db:	58                   	pop    eax
c001c8dc:	5a                   	pop    edx
c001c8dd:	6a 01                	push   0x1
c001c8df:	56                   	push   esi
c001c8e0:	e8 19 67 ff ff       	call   c0012ffe <File::open(FileOpenMode)>
c001c8e5:	83 c4 10             	add    esp,0x10
c001c8e8:	85 c0                	test   eax,eax
c001c8ea:	0f 85 47 01 00 00    	jne    c001ca37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c8f0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c8f8:	83 ec 0c             	sub    esp,0xc
c001c8fb:	6a 34                	push   0x34
c001c8fd:	e8 e1 30 ff ff       	call   c000f9e3 <malloc>
c001c902:	89 c3                	mov    ebx,eax
c001c904:	58                   	pop    eax
c001c905:	8b 06                	mov    eax,DWORD PTR [esi]
c001c907:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c90b:	57                   	push   edi
c001c90c:	53                   	push   ebx
c001c90d:	6a 00                	push   0x0
c001c90f:	6a 34                	push   0x34
c001c911:	56                   	push   esi
c001c912:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c915:	83 c4 20             	add    esp,0x20
c001c918:	85 c0                	test   eax,eax
c001c91a:	0f 85 17 01 00 00    	jne    c001ca37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c920:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c926:	0f 85 0b 01 00 00    	jne    c001ca37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c92c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c92f:	85 c0                	test   eax,eax
c001c931:	0f 84 00 01 00 00    	je     c001ca37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c937:	31 d2                	xor    edx,edx
c001c939:	55                   	push   ebp
c001c93a:	52                   	push   edx
c001c93b:	50                   	push   eax
c001c93c:	56                   	push   esi
c001c93d:	e8 7a 67 ff ff       	call   c00130bc <File::seek(unsigned long long)>
c001c942:	83 c4 10             	add    esp,0x10
c001c945:	85 c0                	test   eax,eax
c001c947:	0f 85 ea 00 00 00    	jne    c001ca37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c94d:	83 ec 0c             	sub    esp,0xc
c001c950:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c953:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c957:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c95b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c95f:	0f af c2             	imul   eax,edx
c001c962:	50                   	push   eax
c001c963:	e8 7b 30 ff ff       	call   c000f9e3 <malloc>
c001c968:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c96a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c96e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c971:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c975:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c979:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c97d:	0f af c2             	imul   eax,edx
c001c980:	99                   	cdq    
c001c981:	52                   	push   edx
c001c982:	50                   	push   eax
c001c983:	56                   	push   esi
c001c984:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c987:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c98a:	83 c4 20             	add    esp,0x20
c001c98d:	85 c0                	test   eax,eax
c001c98f:	0f 84 a2 00 00 00    	je     c001ca37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c995:	31 d2                	xor    edx,edx
c001c997:	51                   	push   ecx
c001c998:	52                   	push   edx
c001c999:	50                   	push   eax
c001c99a:	56                   	push   esi
c001c99b:	e8 1c 67 ff ff       	call   c00130bc <File::seek(unsigned long long)>
c001c9a0:	83 c4 10             	add    esp,0x10
c001c9a3:	85 c0                	test   eax,eax
c001c9a5:	0f 85 8c 00 00 00    	jne    c001ca37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c9ab:	83 ec 0c             	sub    esp,0xc
c001c9ae:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c9b2:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c9b6:	31 ed                	xor    ebp,ebp
c001c9b8:	0f af c2             	imul   eax,edx
c001c9bb:	50                   	push   eax
c001c9bc:	e8 22 30 ff ff       	call   c000f9e3 <malloc>
c001c9c1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c9c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c9c7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c9ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9ce:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c9d2:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c9d6:	0f af c2             	imul   eax,edx
c001c9d9:	99                   	cdq    
c001c9da:	52                   	push   edx
c001c9db:	50                   	push   eax
c001c9dc:	56                   	push   esi
c001c9dd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9e0:	83 c4 20             	add    esp,0x20
c001c9e3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c9eb:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c9ef:	0f 86 80 00 00 00    	jbe    c001ca75 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c9f5:	0f b7 fd             	movzx  edi,bp
c001c9f8:	c1 e7 05             	shl    edi,0x5
c001c9fb:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c9ff:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001ca02:	75 6b                	jne    c001ca6f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ca04:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001ca07:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ca0b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001ca0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ca12:	52                   	push   edx
c001ca13:	31 d2                	xor    edx,edx
c001ca15:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001ca18:	52                   	push   edx
c001ca19:	50                   	push   eax
c001ca1a:	56                   	push   esi
c001ca1b:	e8 9c 66 ff ff       	call   c00130bc <File::seek(unsigned long long)>
c001ca20:	83 c4 10             	add    esp,0x10
c001ca23:	85 c0                	test   eax,eax
c001ca25:	74 17                	je     c001ca3e <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001ca27:	83 ec 0c             	sub    esp,0xc
c001ca2a:	68 bc c6 02 c0       	push   0xc002c6bc
c001ca2f:	e8 07 60 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001ca34:	83 c4 10             	add    esp,0x10
c001ca37:	31 c0                	xor    eax,eax
c001ca39:	e9 87 00 00 00       	jmp    c001cac5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001ca3e:	83 ec 0c             	sub    esp,0xc
c001ca41:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001ca44:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001ca47:	50                   	push   eax
c001ca48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ca4c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca50:	56                   	push   esi
c001ca51:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001ca55:	e8 b3 fb ff ff       	call   c001c60d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001ca5a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ca5e:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001ca62:	83 c4 20             	add    esp,0x20
c001ca65:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001ca69:	73 04                	jae    c001ca6f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ca6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ca6f:	45                   	inc    ebp
c001ca70:	e9 76 ff ff ff       	jmp    c001c9eb <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001ca75:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001ca79:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ca7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca81:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001ca87:	83 ec 0c             	sub    esp,0xc
c001ca8a:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001ca90:	25 00 f0 ff ff       	and    eax,0xfffff000
c001ca95:	05 00 10 00 00       	add    eax,0x1000
c001ca9a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ca9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001caa1:	e8 4d 2f ff ff       	call   c000f9f3 <free>
c001caa6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001caa9:	e8 45 2f ff ff       	call   c000f9f3 <free>
c001caae:	58                   	pop    eax
c001caaf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cab3:	e8 3b 2f ff ff       	call   c000f9f3 <free>
c001cab8:	89 34 24             	mov    DWORD PTR [esp],esi
c001cabb:	e8 9c 65 ff ff       	call   c001305c <File::close()>
c001cac0:	83 c4 10             	add    esp,0x10
c001cac3:	b0 01                	mov    al,0x1
c001cac5:	83 c4 3c             	add    esp,0x3c
c001cac8:	5b                   	pop    ebx
c001cac9:	5e                   	pop    esi
c001caca:	5f                   	pop    edi
c001cacb:	5d                   	pop    ebp
c001cacc:	c3                   	ret    

c001cacd <Thr::runtimeReferenceHelper()>:
c001cacd:	83 ec 18             	sub    esp,0x18
c001cad0:	68 c4 c6 02 c0       	push   0xc002c6c4
c001cad5:	e8 61 5f ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001cada:	fa                   	cli    
c001cadb:	83 c4 10             	add    esp,0x10
c001cade:	eb fe                	jmp    c001cade <Thr::runtimeReferenceHelper()+0x11>

c001cae0 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cae0:	57                   	push   edi
c001cae1:	56                   	push   esi
c001cae2:	53                   	push   ebx
c001cae3:	31 db                	xor    ebx,ebx
c001cae5:	39 1d c0 fb 02 c0    	cmp    DWORD PTR ds:0xc002fbc0,ebx
c001caeb:	7e 3c                	jle    c001cb29 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001caed:	8b 34 9d 40 fb 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd04c0]
c001caf4:	31 ff                	xor    edi,edi
c001caf6:	39 3c 9d 40 fa 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd05c0],edi
c001cafd:	7e 27                	jle    c001cb26 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001caff:	50                   	push   eax
c001cb00:	50                   	push   eax
c001cb01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cb05:	8b 06                	mov    eax,DWORD PTR [esi]
c001cb07:	03 04 9d c0 fa 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd0540]
c001cb0e:	50                   	push   eax
c001cb0f:	e8 84 3d fe ff       	call   c0000898 <strcmp>
c001cb14:	83 c4 10             	add    esp,0x10
c001cb17:	85 c0                	test   eax,eax
c001cb19:	75 05                	jne    c001cb20 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cb1b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cb1e:	eb 0b                	jmp    c001cb2b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cb20:	83 c6 10             	add    esi,0x10
c001cb23:	47                   	inc    edi
c001cb24:	eb d0                	jmp    c001caf6 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cb26:	43                   	inc    ebx
c001cb27:	eb bc                	jmp    c001cae5 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cb29:	31 c0                	xor    eax,eax
c001cb2b:	5b                   	pop    ebx
c001cb2c:	5e                   	pop    esi
c001cb2d:	5f                   	pop    edi
c001cb2e:	c3                   	ret    

c001cb2f <Thr::loadKernelSymbolTable(char const*)>:
c001cb2f:	55                   	push   ebp
c001cb30:	57                   	push   edi
c001cb31:	56                   	push   esi
c001cb32:	53                   	push   ebx
c001cb33:	83 ec 68             	sub    esp,0x68
c001cb36:	8b 35 10 fc 02 c0    	mov    esi,DWORD PTR ds:0xc002fc10
c001cb3c:	68 14 01 00 00       	push   0x114
c001cb41:	e8 9d 2e ff ff       	call   c000f9e3 <malloc>
c001cb46:	83 c4 0c             	add    esp,0xc
c001cb49:	89 c3                	mov    ebx,eax
c001cb4b:	56                   	push   esi
c001cb4c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cb50:	50                   	push   eax
c001cb51:	e8 44 64 ff ff       	call   c0012f9a <File::File(char const*, Process*)>
c001cb56:	5e                   	pop    esi
c001cb57:	5f                   	pop    edi
c001cb58:	6a 01                	push   0x1
c001cb5a:	53                   	push   ebx
c001cb5b:	e8 9e 64 ff ff       	call   c0012ffe <File::open(FileOpenMode)>
c001cb60:	83 c4 10             	add    esp,0x10
c001cb63:	85 c0                	test   eax,eax
c001cb65:	74 0a                	je     c001cb71 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cb67:	83 ec 0c             	sub    esp,0xc
c001cb6a:	68 e6 c6 02 c0       	push   0xc002c6e6
c001cb6f:	eb 34                	jmp    c001cba5 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cb71:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cb79:	83 ec 0c             	sub    esp,0xc
c001cb7c:	6a 34                	push   0x34
c001cb7e:	e8 60 2e ff ff       	call   c000f9e3 <malloc>
c001cb83:	59                   	pop    ecx
c001cb84:	89 c7                	mov    edi,eax
c001cb86:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cb8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb8c:	56                   	push   esi
c001cb8d:	57                   	push   edi
c001cb8e:	6a 00                	push   0x0
c001cb90:	6a 34                	push   0x34
c001cb92:	53                   	push   ebx
c001cb93:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb96:	83 c4 20             	add    esp,0x20
c001cb99:	85 c0                	test   eax,eax
c001cb9b:	74 17                	je     c001cbb4 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cb9d:	83 ec 0c             	sub    esp,0xc
c001cba0:	68 fd c6 02 c0       	push   0xc002c6fd
c001cba5:	e8 2f d8 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c001cbaa:	83 c4 10             	add    esp,0x10
c001cbad:	31 c0                	xor    eax,eax
c001cbaf:	e9 31 02 00 00       	jmp    c001cde5 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cbb4:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cbba:	75 e1                	jne    c001cb9d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cbbc:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cbbf:	85 c0                	test   eax,eax
c001cbc1:	74 da                	je     c001cb9d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cbc3:	52                   	push   edx
c001cbc4:	31 d2                	xor    edx,edx
c001cbc6:	52                   	push   edx
c001cbc7:	50                   	push   eax
c001cbc8:	53                   	push   ebx
c001cbc9:	e8 ee 64 ff ff       	call   c00130bc <File::seek(unsigned long long)>
c001cbce:	83 c4 10             	add    esp,0x10
c001cbd1:	85 c0                	test   eax,eax
c001cbd3:	75 c8                	jne    c001cb9d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cbd5:	83 ec 0c             	sub    esp,0xc
c001cbd8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cbdc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cbe0:	31 ed                	xor    ebp,ebp
c001cbe2:	0f af c2             	imul   eax,edx
c001cbe5:	50                   	push   eax
c001cbe6:	e8 f8 2d ff ff       	call   c000f9e3 <malloc>
c001cbeb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cbed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cbf1:	89 34 24             	mov    DWORD PTR [esp],esi
c001cbf4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cbf8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cbfc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc00:	0f af c2             	imul   eax,edx
c001cc03:	99                   	cdq    
c001cc04:	52                   	push   edx
c001cc05:	50                   	push   eax
c001cc06:	53                   	push   ebx
c001cc07:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc0a:	83 c4 20             	add    esp,0x20
c001cc0d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cc15:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cc1d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cc25:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cc2d:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cc31:	0f 86 aa 00 00 00    	jbe    c001cce1 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cc37:	0f b7 f5             	movzx  esi,bp
c001cc3a:	6b f6 28             	imul   esi,esi,0x28
c001cc3d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cc41:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cc44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc48:	50                   	push   eax
c001cc49:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cc4d:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cc51:	8b 16                	mov    edx,DWORD PTR [esi]
c001cc53:	6b c0 28             	imul   eax,eax,0x28
c001cc56:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cc5a:	89 d0                	mov    eax,edx
c001cc5c:	31 d2                	xor    edx,edx
c001cc5e:	52                   	push   edx
c001cc5f:	50                   	push   eax
c001cc60:	53                   	push   ebx
c001cc61:	e8 56 64 ff ff       	call   c00130bc <File::seek(unsigned long long)>
c001cc66:	83 c4 0c             	add    esp,0xc
c001cc69:	6a 20                	push   0x20
c001cc6b:	6a 00                	push   0x0
c001cc6d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cc71:	52                   	push   edx
c001cc72:	e8 d9 3a fe ff       	call   c0000750 <memset>
c001cc77:	58                   	pop    eax
c001cc78:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cc7a:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cc7e:	51                   	push   ecx
c001cc7f:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cc83:	52                   	push   edx
c001cc84:	6a 00                	push   0x0
c001cc86:	6a 1f                	push   0x1f
c001cc88:	53                   	push   ebx
c001cc89:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cc8c:	83 c4 18             	add    esp,0x18
c001cc8f:	68 14 c7 02 c0       	push   0xc002c714
c001cc94:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cc98:	52                   	push   edx
c001cc99:	e8 fa 3b fe ff       	call   c0000898 <strcmp>
c001cc9e:	83 c4 10             	add    esp,0x10
c001cca1:	85 c0                	test   eax,eax
c001cca3:	75 0f                	jne    c001ccb4 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cca5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cca8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ccac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ccb4:	50                   	push   eax
c001ccb5:	50                   	push   eax
c001ccb6:	68 1c c7 02 c0       	push   0xc002c71c
c001ccbb:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ccbf:	50                   	push   eax
c001ccc0:	e8 d3 3b fe ff       	call   c0000898 <strcmp>
c001ccc5:	83 c4 10             	add    esp,0x10
c001ccc8:	85 c0                	test   eax,eax
c001ccca:	75 0f                	jne    c001ccdb <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cccc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cccf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ccd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccd7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ccdb:	45                   	inc    ebp
c001ccdc:	e9 4c ff ff ff       	jmp    c001cc2d <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cce1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cce6:	75 10                	jne    c001ccf8 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cce8:	83 ec 0c             	sub    esp,0xc
c001cceb:	68 24 c7 02 c0       	push   0xc002c724
c001ccf0:	e8 e4 d6 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c001ccf5:	83 c4 10             	add    esp,0x10
c001ccf8:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001ccfd:	75 10                	jne    c001cd0f <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001ccff:	83 ec 0c             	sub    esp,0xc
c001cd02:	68 24 c7 02 c0       	push   0xc002c724
c001cd07:	e8 cd d6 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c001cd0c:	83 c4 10             	add    esp,0x10
c001cd0f:	31 d2                	xor    edx,edx
c001cd11:	50                   	push   eax
c001cd12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd16:	52                   	push   edx
c001cd17:	50                   	push   eax
c001cd18:	53                   	push   ebx
c001cd19:	e8 9e 63 ff ff       	call   c00130bc <File::seek(unsigned long long)>
c001cd1e:	5a                   	pop    edx
c001cd1f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cd23:	e8 bb 2c ff ff       	call   c000f9e3 <malloc>
c001cd28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cd2c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cd30:	31 c9                	xor    ecx,ecx
c001cd32:	5e                   	pop    esi
c001cd33:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd35:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cd39:	55                   	push   ebp
c001cd3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd3e:	51                   	push   ecx
c001cd3f:	52                   	push   edx
c001cd40:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cd44:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cd48:	53                   	push   ebx
c001cd49:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd4c:	83 c4 14             	add    esp,0x14
c001cd4f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cd53:	e8 8b 2c ff ff       	call   c000f9e3 <malloc>
c001cd58:	89 c6                	mov    esi,eax
c001cd5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd5c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cd5f:	56                   	push   esi
c001cd60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cd64:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cd68:	51                   	push   ecx
c001cd69:	52                   	push   edx
c001cd6a:	53                   	push   ebx
c001cd6b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd6e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd72:	8b 15 c0 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fbc0
c001cd78:	83 c4 1c             	add    esp,0x1c
c001cd7b:	c1 e8 04             	shr    eax,0x4
c001cd7e:	89 04 95 40 fa 02 c0 	mov    DWORD PTR [edx*4-0x3ffd05c0],eax
c001cd85:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cd89:	31 d2                	xor    edx,edx
c001cd8b:	52                   	push   edx
c001cd8c:	50                   	push   eax
c001cd8d:	53                   	push   ebx
c001cd8e:	e8 29 63 ff ff       	call   c00130bc <File::seek(unsigned long long)>
c001cd93:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cd95:	31 d2                	xor    edx,edx
c001cd97:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cd9a:	56                   	push   esi
c001cd9b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cd9f:	52                   	push   edx
c001cda0:	50                   	push   eax
c001cda1:	53                   	push   ebx
c001cda2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cda5:	83 c4 14             	add    esp,0x14
c001cda8:	53                   	push   ebx
c001cda9:	e8 ae 62 ff ff       	call   c001305c <File::close()>
c001cdae:	5d                   	pop    ebp
c001cdaf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cdb3:	e8 3b 2c ff ff       	call   c000f9f3 <free>
c001cdb8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cdbb:	e8 33 2c ff ff       	call   c000f9f3 <free>
c001cdc0:	a1 c0 fb 02 c0       	mov    eax,ds:0xc002fbc0
c001cdc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cdc9:	8d 50 01             	lea    edx,[eax+0x1]
c001cdcc:	89 0c 85 40 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd04c0],ecx
c001cdd3:	89 34 85 c0 fa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0540],esi
c001cdda:	89 15 c0 fb 02 c0    	mov    DWORD PTR ds:0xc002fbc0,edx
c001cde0:	83 c4 10             	add    esp,0x10
c001cde3:	b0 01                	mov    al,0x1
c001cde5:	83 c4 5c             	add    esp,0x5c
c001cde8:	5b                   	pop    ebx
c001cde9:	5e                   	pop    esi
c001cdea:	5f                   	pop    edi
c001cdeb:	5d                   	pop    ebp
c001cdec:	c3                   	ret    

c001cded <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cded:	55                   	push   ebp
c001cdee:	57                   	push   edi
c001cdef:	56                   	push   esi
c001cdf0:	53                   	push   ebx
c001cdf1:	81 ec 68 03 00 00    	sub    esp,0x368
c001cdf7:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cdfe:	8b 1d 10 fc 02 c0    	mov    ebx,DWORD PTR ds:0xc002fc10
c001ce04:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001ce08:	68 14 01 00 00       	push   0x114
c001ce0d:	e8 d1 2b ff ff       	call   c000f9e3 <malloc>
c001ce12:	83 c4 0c             	add    esp,0xc
c001ce15:	89 c5                	mov    ebp,eax
c001ce17:	53                   	push   ebx
c001ce18:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001ce1f:	50                   	push   eax
c001ce20:	e8 75 61 ff ff       	call   c0012f9a <File::File(char const*, Process*)>
c001ce25:	5e                   	pop    esi
c001ce26:	5f                   	pop    edi
c001ce27:	6a 01                	push   0x1
c001ce29:	55                   	push   ebp
c001ce2a:	e8 cf 61 ff ff       	call   c0012ffe <File::open(FileOpenMode)>
c001ce2f:	83 c4 10             	add    esp,0x10
c001ce32:	85 c0                	test   eax,eax
c001ce34:	0f 85 a7 06 00 00    	jne    c001d4e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ce3a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001ce42:	83 ec 0c             	sub    esp,0xc
c001ce45:	6a 34                	push   0x34
c001ce47:	e8 97 2b ff ff       	call   c000f9e3 <malloc>
c001ce4c:	5b                   	pop    ebx
c001ce4d:	89 c7                	mov    edi,eax
c001ce4f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001ce53:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ce56:	53                   	push   ebx
c001ce57:	57                   	push   edi
c001ce58:	6a 00                	push   0x0
c001ce5a:	6a 34                	push   0x34
c001ce5c:	55                   	push   ebp
c001ce5d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce60:	83 c4 20             	add    esp,0x20
c001ce63:	85 c0                	test   eax,eax
c001ce65:	0f 85 76 06 00 00    	jne    c001d4e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ce6b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ce71:	0f 85 6a 06 00 00    	jne    c001d4e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ce77:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ce7a:	85 c0                	test   eax,eax
c001ce7c:	0f 84 5f 06 00 00    	je     c001d4e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ce82:	31 d2                	xor    edx,edx
c001ce84:	51                   	push   ecx
c001ce85:	52                   	push   edx
c001ce86:	50                   	push   eax
c001ce87:	55                   	push   ebp
c001ce88:	e8 2f 62 ff ff       	call   c00130bc <File::seek(unsigned long long)>
c001ce8d:	83 c4 10             	add    esp,0x10
c001ce90:	85 c0                	test   eax,eax
c001ce92:	0f 85 49 06 00 00    	jne    c001d4e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ce98:	83 ec 0c             	sub    esp,0xc
c001ce9b:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001ce9e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cea2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001cea6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ceaa:	0f af c2             	imul   eax,edx
c001cead:	50                   	push   eax
c001ceae:	e8 30 2b ff ff       	call   c000f9e3 <malloc>
c001ceb3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ceb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ceba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cebd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cec1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cec5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cec9:	0f af c2             	imul   eax,edx
c001cecc:	99                   	cdq    
c001cecd:	52                   	push   edx
c001cece:	50                   	push   eax
c001cecf:	55                   	push   ebp
c001ced0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ced3:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001ced6:	83 c4 20             	add    esp,0x20
c001ced9:	85 c0                	test   eax,eax
c001cedb:	0f 84 00 06 00 00    	je     c001d4e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cee1:	52                   	push   edx
c001cee2:	31 d2                	xor    edx,edx
c001cee4:	52                   	push   edx
c001cee5:	50                   	push   eax
c001cee6:	55                   	push   ebp
c001cee7:	e8 d0 61 ff ff       	call   c00130bc <File::seek(unsigned long long)>
c001ceec:	83 c4 10             	add    esp,0x10
c001ceef:	85 c0                	test   eax,eax
c001cef1:	0f 85 ea 05 00 00    	jne    c001d4e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cef7:	83 ec 0c             	sub    esp,0xc
c001cefa:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cefe:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cf02:	31 f6                	xor    esi,esi
c001cf04:	0f af c2             	imul   eax,edx
c001cf07:	50                   	push   eax
c001cf08:	e8 d6 2a ff ff       	call   c000f9e3 <malloc>
c001cf0d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cf10:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cf14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf17:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf1b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cf1f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cf23:	0f af c2             	imul   eax,edx
c001cf26:	99                   	cdq    
c001cf27:	52                   	push   edx
c001cf28:	50                   	push   eax
c001cf29:	55                   	push   ebp
c001cf2a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf2d:	83 c4 20             	add    esp,0x20
c001cf30:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001cf34:	0f 86 8a 00 00 00    	jbe    c001cfc4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001cf3a:	0f b7 de             	movzx  ebx,si
c001cf3d:	c1 e3 05             	shl    ebx,0x5
c001cf40:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001cf44:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001cf47:	75 75                	jne    c001cfbe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001cf49:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cf4c:	31 d2                	xor    edx,edx
c001cf4e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cf52:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cf55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cf59:	50                   	push   eax
c001cf5a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001cf5d:	52                   	push   edx
c001cf5e:	50                   	push   eax
c001cf5f:	55                   	push   ebp
c001cf60:	e8 57 61 ff ff       	call   c00130bc <File::seek(unsigned long long)>
c001cf65:	83 c4 10             	add    esp,0x10
c001cf68:	85 c0                	test   eax,eax
c001cf6a:	0f 85 71 05 00 00    	jne    c001d4e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cf70:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001cf77:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cf7a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001cf7e:	31 d2                	xor    edx,edx
c001cf80:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001cf84:	83 ec 0c             	sub    esp,0xc
c001cf87:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cf8b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf92:	50                   	push   eax
c001cf93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf9b:	52                   	push   edx
c001cf9c:	50                   	push   eax
c001cf9d:	55                   	push   ebp
c001cf9e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cfa1:	83 c4 1c             	add    esp,0x1c
c001cfa4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cfa7:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001cfaa:	50                   	push   eax
c001cfab:	6a 00                	push   0x0
c001cfad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfb1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001cfb5:	50                   	push   eax
c001cfb6:	e8 95 37 fe ff       	call   c0000750 <memset>
c001cfbb:	83 c4 10             	add    esp,0x10
c001cfbe:	46                   	inc    esi
c001cfbf:	e9 6c ff ff ff       	jmp    c001cf30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001cfc4:	53                   	push   ebx
c001cfc5:	31 db                	xor    ebx,ebx
c001cfc7:	68 00 01 00 00       	push   0x100
c001cfcc:	6a 00                	push   0x0
c001cfce:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cfd2:	50                   	push   eax
c001cfd3:	e8 78 37 fe ff       	call   c0000750 <memset>
c001cfd8:	83 c4 0c             	add    esp,0xc
c001cfdb:	68 00 01 00 00       	push   0x100
c001cfe0:	6a 00                	push   0x0
c001cfe2:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001cfe9:	50                   	push   eax
c001cfea:	e8 61 37 fe ff       	call   c0000750 <memset>
c001cfef:	83 c4 10             	add    esp,0x10
c001cff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cffa:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d002:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d00a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d012:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d01a:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d01e:	0f 86 30 01 00 00    	jbe    c001d154 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d024:	0f b7 f3             	movzx  esi,bx
c001d027:	6b f6 28             	imul   esi,esi,0x28
c001d02a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d02e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d031:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d035:	52                   	push   edx
c001d036:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d03a:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d03e:	8b 06                	mov    eax,DWORD PTR [esi]
c001d040:	6b d2 28             	imul   edx,edx,0x28
c001d043:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d047:	31 d2                	xor    edx,edx
c001d049:	52                   	push   edx
c001d04a:	50                   	push   eax
c001d04b:	55                   	push   ebp
c001d04c:	e8 6b 60 ff ff       	call   c00130bc <File::seek(unsigned long long)>
c001d051:	83 c4 0c             	add    esp,0xc
c001d054:	6a 20                	push   0x20
c001d056:	6a 00                	push   0x0
c001d058:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d05f:	51                   	push   ecx
c001d060:	e8 eb 36 fe ff       	call   c0000750 <memset>
c001d065:	59                   	pop    ecx
c001d066:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d069:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d06d:	52                   	push   edx
c001d06e:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d075:	51                   	push   ecx
c001d076:	6a 00                	push   0x0
c001d078:	6a 1f                	push   0x1f
c001d07a:	55                   	push   ebp
c001d07b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d07e:	83 c4 1c             	add    esp,0x1c
c001d081:	6a 09                	push   0x9
c001d083:	68 3e c7 02 c0       	push   0xc002c73e
c001d088:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d08f:	51                   	push   ecx
c001d090:	e8 b7 35 fe ff       	call   c000064c <memcmp>
c001d095:	83 c4 10             	add    esp,0x10
c001d098:	85 c0                	test   eax,eax
c001d09a:	75 21                	jne    c001d0bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d09c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d0a4:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d0a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d0ac:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d0af:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d0b6:	89 d0                	mov    eax,edx
c001d0b8:	40                   	inc    eax
c001d0b9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d0bd:	50                   	push   eax
c001d0be:	6a 09                	push   0x9
c001d0c0:	68 48 c7 02 c0       	push   0xc002c748
c001d0c5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d0cc:	50                   	push   eax
c001d0cd:	e8 7a 35 fe ff       	call   c000064c <memcmp>
c001d0d2:	83 c4 10             	add    esp,0x10
c001d0d5:	85 c0                	test   eax,eax
c001d0d7:	75 21                	jne    c001d0fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d0d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d0e1:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d0e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d0e9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d0ec:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d0f3:	89 d0                	mov    eax,edx
c001d0f5:	40                   	inc    eax
c001d0f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d0fa:	50                   	push   eax
c001d0fb:	50                   	push   eax
c001d0fc:	68 14 c7 02 c0       	push   0xc002c714
c001d101:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d108:	50                   	push   eax
c001d109:	e8 8a 37 fe ff       	call   c0000898 <strcmp>
c001d10e:	83 c4 10             	add    esp,0x10
c001d111:	85 c0                	test   eax,eax
c001d113:	75 0f                	jne    c001d124 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d115:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d118:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d11c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d120:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d124:	50                   	push   eax
c001d125:	50                   	push   eax
c001d126:	68 1c c7 02 c0       	push   0xc002c71c
c001d12b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d132:	50                   	push   eax
c001d133:	e8 60 37 fe ff       	call   c0000898 <strcmp>
c001d138:	83 c4 10             	add    esp,0x10
c001d13b:	85 c0                	test   eax,eax
c001d13d:	75 0f                	jne    c001d14e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d13f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d142:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d146:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d14a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d14e:	43                   	inc    ebx
c001d14f:	e9 c6 fe ff ff       	jmp    c001d01a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d154:	31 d2                	xor    edx,edx
c001d156:	50                   	push   eax
c001d157:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d15b:	52                   	push   edx
c001d15c:	50                   	push   eax
c001d15d:	55                   	push   ebp
c001d15e:	e8 59 5f ff ff       	call   c00130bc <File::seek(unsigned long long)>
c001d163:	58                   	pop    eax
c001d164:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d168:	e8 76 28 ff ff       	call   c000f9e3 <malloc>
c001d16d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d170:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d174:	31 d2                	xor    edx,edx
c001d176:	58                   	pop    eax
c001d177:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d17b:	53                   	push   ebx
c001d17c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d180:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d184:	52                   	push   edx
c001d185:	50                   	push   eax
c001d186:	55                   	push   ebp
c001d187:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d18a:	83 c4 14             	add    esp,0x14
c001d18d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d191:	e8 4d 28 ff ff       	call   c000f9e3 <malloc>
c001d196:	31 d2                	xor    edx,edx
c001d198:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d19c:	83 c4 0c             	add    esp,0xc
c001d19f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d1a3:	52                   	push   edx
c001d1a4:	50                   	push   eax
c001d1a5:	55                   	push   ebp
c001d1a6:	e8 11 5f ff ff       	call   c00130bc <File::seek(unsigned long long)>
c001d1ab:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d1ae:	31 d2                	xor    edx,edx
c001d1b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d1b3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d1b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d1bb:	52                   	push   edx
c001d1bc:	50                   	push   eax
c001d1bd:	55                   	push   ebp
c001d1be:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1c1:	83 c4 20             	add    esp,0x20
c001d1c4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d1cc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d1d0:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d1d4:	0f 84 0b 03 00 00    	je     c001d4e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d1da:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d1e1:	31 d2                	xor    edx,edx
c001d1e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1e7:	c1 e8 03             	shr    eax,0x3
c001d1ea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d1ee:	51                   	push   ecx
c001d1ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1f3:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d1f7:	52                   	push   edx
c001d1f8:	50                   	push   eax
c001d1f9:	55                   	push   ebp
c001d1fa:	e8 bd 5e ff ff       	call   c00130bc <File::seek(unsigned long long)>
c001d1ff:	5b                   	pop    ebx
c001d200:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d204:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d20b:	e8 d3 27 ff ff       	call   c000f9e3 <malloc>
c001d210:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d213:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d217:	31 d2                	xor    edx,edx
c001d219:	5e                   	pop    esi
c001d21a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d21e:	50                   	push   eax
c001d21f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d223:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d227:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d22e:	52                   	push   edx
c001d22f:	50                   	push   eax
c001d230:	55                   	push   ebp
c001d231:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d234:	83 c4 20             	add    esp,0x20
c001d237:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d23f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d243:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d247:	0f 8d 7c 02 00 00    	jge    c001d4c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d24d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d251:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d255:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d25a:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d25d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d261:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d265:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d269:	89 d8                	mov    eax,ebx
c001d26b:	c1 e8 08             	shr    eax,0x8
c001d26e:	89 c6                	mov    esi,eax
c001d270:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d274:	c1 e6 04             	shl    esi,0x4
c001d277:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d27b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d27e:	85 d2                	test   edx,edx
c001d280:	0f 85 bf 00 00 00    	jne    c001d345 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d286:	83 ec 0c             	sub    esp,0xc
c001d289:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d28d:	03 06                	add    eax,DWORD PTR [esi]
c001d28f:	50                   	push   eax
c001d290:	e8 4b f8 ff ff       	call   c001cae0 <Thr::getAddressOfKernelSymbol(char const*)>
c001d295:	83 c4 10             	add    esp,0x10
c001d298:	89 c2                	mov    edx,eax
c001d29a:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d29f:	85 c0                	test   eax,eax
c001d2a1:	0f 85 9e 00 00 00    	jne    c001d345 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d2a7:	83 ec 0c             	sub    esp,0xc
c001d2aa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d2ae:	03 06                	add    eax,DWORD PTR [esi]
c001d2b0:	50                   	push   eax
c001d2b1:	e8 bf 14 ff ff       	call   c000e775 <Krnl::resolveCompatibilitySymbol(char*)>
c001d2b6:	83 c4 10             	add    esp,0x10
c001d2b9:	89 c2                	mov    edx,eax
c001d2bb:	85 c0                	test   eax,eax
c001d2bd:	0f 85 82 00 00 00    	jne    c001d345 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d2c3:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d2c7:	50                   	push   eax
c001d2c8:	50                   	push   eax
c001d2c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2cd:	03 06                	add    eax,DWORD PTR [esi]
c001d2cf:	50                   	push   eax
c001d2d0:	68 52 c7 02 c0       	push   0xc002c752
c001d2d5:	e8 61 57 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001d2da:	58                   	pop    eax
c001d2db:	5a                   	pop    edx
c001d2dc:	68 6c c7 02 c0       	push   0xc002c76c
c001d2e1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2e8:	50                   	push   eax
c001d2e9:	e8 1e 35 fe ff       	call   c000080c <strcpy>
c001d2ee:	59                   	pop    ecx
c001d2ef:	58                   	pop    eax
c001d2f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2f4:	03 06                	add    eax,DWORD PTR [esi]
c001d2f6:	50                   	push   eax
c001d2f7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2fe:	50                   	push   eax
c001d2ff:	e8 48 36 fe ff       	call   c000094c <strcat>
c001d304:	58                   	pop    eax
c001d305:	5a                   	pop    edx
c001d306:	68 02 c8 02 c0       	push   0xc002c802
c001d30b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d312:	50                   	push   eax
c001d313:	e8 34 36 fe ff       	call   c000094c <strcat>
c001d318:	83 c4 10             	add    esp,0x10
c001d31b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d320:	0f 84 5d 01 00 00    	je     c001d483 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d326:	83 ec 0c             	sub    esp,0xc
c001d329:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d330:	50                   	push   eax
c001d331:	e8 a3 d0 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c001d336:	83 c4 10             	add    esp,0x10
c001d339:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d33d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d341:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d345:	80 fb 01             	cmp    bl,0x1
c001d348:	0f 85 88 00 00 00    	jne    c001d3d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d34e:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d355:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d359:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d35d:	01 ce                	add    esi,ecx
c001d35f:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d365:	0f 94 c0             	sete   al
c001d368:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d36e:	0f 94 c3             	sete   bl
c001d371:	09 c3                	or     ebx,eax
c001d373:	8b 06                	mov    eax,DWORD PTR [esi]
c001d375:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d37a:	74 41                	je     c001d3bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d37c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d37f:	84 db                	test   bl,bl
c001d381:	75 15                	jne    c001d398 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d383:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d387:	66 83 f8 0c          	cmp    ax,0xc
c001d38b:	76 05                	jbe    c001d392 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d38d:	b8 0c 00 00 00       	mov    eax,0xc
c001d392:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d396:	76 37                	jbe    c001d3cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d398:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d39c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d3a1:	0f 84 dc 00 00 00    	je     c001d483 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d3a7:	83 ec 0c             	sub    esp,0xc
c001d3aa:	68 83 c7 02 c0       	push   0xc002c783
c001d3af:	e8 25 d0 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c001d3b4:	83 c4 10             	add    esp,0x10
c001d3b7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d3bb:	eb 12                	jmp    c001d3cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d3bd:	01 c1                	add    ecx,eax
c001d3bf:	84 db                	test   bl,bl
c001d3c1:	75 0c                	jne    c001d3cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d3c3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d3c7:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d3cb:	77 02                	ja     c001d3cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d3cd:	01 d1                	add    ecx,edx
c001d3cf:	89 0e                	mov    DWORD PTR [esi],ecx
c001d3d1:	e9 ea 00 00 00       	jmp    c001d4c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d3d6:	80 fb 02             	cmp    bl,0x2
c001d3d9:	75 7c                	jne    c001d457 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d3db:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d3e2:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d3e6:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d3ea:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d3f0:	74 20                	je     c001d412 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d3f2:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d3f8:	74 18                	je     c001d412 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d3fa:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d3fe:	b9 0a 00 00 00       	mov    ecx,0xa
c001d403:	66 83 f8 0e          	cmp    ax,0xe
c001d407:	77 03                	ja     c001d40c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d409:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d40c:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d410:	76 1f                	jbe    c001d431 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d412:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d416:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d41b:	74 66                	je     c001d483 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d41d:	83 ec 0c             	sub    esp,0xc
c001d420:	68 9f c7 02 c0       	push   0xc002c79f
c001d425:	e8 af cf ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c001d42a:	83 c4 10             	add    esp,0x10
c001d42d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d431:	8b 06                	mov    eax,DWORD PTR [esi]
c001d433:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d438:	74 13                	je     c001d44d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d43a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d43e:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d445:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d449:	01 c8                	add    eax,ecx
c001d44b:	eb 04                	jmp    c001d451 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d44d:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d451:	01 c2                	add    edx,eax
c001d453:	89 16                	mov    DWORD PTR [esi],edx
c001d455:	eb 69                	jmp    c001d4c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d457:	0f b6 db             	movzx  ebx,bl
c001d45a:	50                   	push   eax
c001d45b:	50                   	push   eax
c001d45c:	53                   	push   ebx
c001d45d:	68 bb c7 02 c0       	push   0xc002c7bb
c001d462:	e8 d4 55 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001d467:	83 c4 10             	add    esp,0x10
c001d46a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d46f:	74 12                	je     c001d483 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d471:	83 ec 0c             	sub    esp,0xc
c001d474:	68 c6 c7 02 c0       	push   0xc002c7c6
c001d479:	e8 5b cf ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c001d47e:	83 c4 10             	add    esp,0x10
c001d481:	eb 3d                	jmp    c001d4c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d483:	83 ec 0c             	sub    esp,0xc
c001d486:	55                   	push   ebp
c001d487:	e8 d0 5b ff ff       	call   c001305c <File::close()>
c001d48c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d48f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d492:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d495:	59                   	pop    ecx
c001d496:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d49a:	e8 54 25 ff ff       	call   c000f9f3 <free>
c001d49f:	5b                   	pop    ebx
c001d4a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d4a4:	e8 4a 25 ff ff       	call   c000f9f3 <free>
c001d4a9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d4ac:	e8 42 25 ff ff       	call   c000f9f3 <free>
c001d4b1:	5e                   	pop    esi
c001d4b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4b6:	e8 38 25 ff ff       	call   c000f9f3 <free>
c001d4bb:	83 c4 10             	add    esp,0x10
c001d4be:	eb 21                	jmp    c001d4e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d4c0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d4c4:	e9 76 fd ff ff       	jmp    c001d23f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d4c9:	83 ec 0c             	sub    esp,0xc
c001d4cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d4d0:	e8 1e 25 ff ff       	call   c000f9f3 <free>
c001d4d5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d4d9:	83 c4 10             	add    esp,0x10
c001d4dc:	e9 eb fc ff ff       	jmp    c001d1cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d4e1:	31 c0                	xor    eax,eax
c001d4e3:	eb 33                	jmp    c001d518 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d4e5:	83 ec 0c             	sub    esp,0xc
c001d4e8:	55                   	push   ebp
c001d4e9:	e8 6e 5b ff ff       	call   c001305c <File::close()>
c001d4ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d4f1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d4f4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d4f7:	58                   	pop    eax
c001d4f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d4fc:	e8 f2 24 ff ff       	call   c000f9f3 <free>
c001d501:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d504:	e8 ea 24 ff ff       	call   c000f9f3 <free>
c001d509:	5a                   	pop    edx
c001d50a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d50e:	e8 e0 24 ff ff       	call   c000f9f3 <free>
c001d513:	83 c4 10             	add    esp,0x10
c001d516:	b0 01                	mov    al,0x1
c001d518:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d51e:	5b                   	pop    ebx
c001d51f:	5e                   	pop    esi
c001d520:	5f                   	pop    edi
c001d521:	5d                   	pop    ebp
c001d522:	c3                   	ret    

c001d523 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d523:	56                   	push   esi
c001d524:	31 d2                	xor    edx,edx
c001d526:	53                   	push   ebx
c001d527:	8b 1d 20 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f420
c001d52d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d531:	39 d3                	cmp    ebx,edx
c001d533:	7e 1b                	jle    c001d550 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d535:	8b 04 95 40 f6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd09c0]
c001d53c:	39 c8                	cmp    eax,ecx
c001d53e:	77 0d                	ja     c001d54d <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d540:	8b 34 95 40 f4 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd0bc0]
c001d547:	01 c6                	add    esi,eax
c001d549:	39 ce                	cmp    esi,ecx
c001d54b:	77 05                	ja     c001d552 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d54d:	42                   	inc    edx
c001d54e:	eb e1                	jmp    c001d531 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d550:	31 c0                	xor    eax,eax
c001d552:	5b                   	pop    ebx
c001d553:	5e                   	pop    esi
c001d554:	c3                   	ret    

c001d555 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d555:	53                   	push   ebx
c001d556:	31 c0                	xor    eax,eax
c001d558:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d55c:	8b 1d 20 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f420
c001d562:	39 c3                	cmp    ebx,eax
c001d564:	7e 22                	jle    c001d588 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d566:	8b 14 85 40 f6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd09c0]
c001d56d:	39 ca                	cmp    edx,ecx
c001d56f:	77 14                	ja     c001d585 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d571:	03 14 85 40 f4 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd0bc0]
c001d578:	39 ca                	cmp    edx,ecx
c001d57a:	76 09                	jbe    c001d585 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d57c:	8b 04 85 40 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd07c0]
c001d583:	eb 05                	jmp    c001d58a <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d585:	40                   	inc    eax
c001d586:	eb da                	jmp    c001d562 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d588:	31 c0                	xor    eax,eax
c001d58a:	5b                   	pop    ebx
c001d58b:	c3                   	ret    

c001d58c <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d58c:	53                   	push   ebx
c001d58d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d591:	53                   	push   ebx
c001d592:	e8 8c ff ff ff       	call   c001d523 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d597:	5a                   	pop    edx
c001d598:	31 d2                	xor    edx,edx
c001d59a:	85 c0                	test   eax,eax
c001d59c:	74 04                	je     c001d5a2 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d59e:	89 da                	mov    edx,ebx
c001d5a0:	29 c2                	sub    edx,eax
c001d5a2:	89 d0                	mov    eax,edx
c001d5a4:	5b                   	pop    ebx
c001d5a5:	c3                   	ret    

c001d5a6 <Thr::loadDLL(char const*, bool)>:
c001d5a6:	55                   	push   ebp
c001d5a7:	57                   	push   edi
c001d5a8:	56                   	push   esi
c001d5a9:	53                   	push   ebx
c001d5aa:	81 ec 34 01 00 00    	sub    esp,0x134
c001d5b0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d5b7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d5be:	56                   	push   esi
c001d5bf:	68 de c7 02 c0       	push   0xc002c7de
c001d5c4:	e8 72 54 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001d5c9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d5d0:	e8 0e 24 ff ff       	call   c000f9e3 <malloc>
c001d5d5:	83 c4 0c             	add    esp,0xc
c001d5d8:	89 c3                	mov    ebx,eax
c001d5da:	ff 35 10 fc 02 c0    	push   DWORD PTR ds:0xc002fc10
c001d5e0:	56                   	push   esi
c001d5e1:	50                   	push   eax
c001d5e2:	e8 b3 59 ff ff       	call   c0012f9a <File::File(char const*, Process*)>
c001d5e7:	83 c4 10             	add    esp,0x10
c001d5ea:	85 db                	test   ebx,ebx
c001d5ec:	75 3c                	jne    c001d62a <Thr::loadDLL(char const*, bool)+0x84>
c001d5ee:	89 f8                	mov    eax,edi
c001d5f0:	84 c0                	test   al,al
c001d5f2:	0f 84 d2 01 00 00    	je     c001d7ca <Thr::loadDLL(char const*, bool)+0x224>
c001d5f8:	55                   	push   ebp
c001d5f9:	55                   	push   ebp
c001d5fa:	68 ef c7 02 c0       	push   0xc002c7ef
c001d5ff:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d603:	55                   	push   ebp
c001d604:	e8 03 32 fe ff       	call   c000080c <strcpy>
c001d609:	58                   	pop    eax
c001d60a:	5a                   	pop    edx
c001d60b:	56                   	push   esi
c001d60c:	55                   	push   ebp
c001d60d:	e8 3a 33 fe ff       	call   c000094c <strcat>
c001d612:	59                   	pop    ecx
c001d613:	58                   	pop    eax
c001d614:	68 02 c8 02 c0       	push   0xc002c802
c001d619:	55                   	push   ebp
c001d61a:	e8 2d 33 fe ff       	call   c000094c <strcat>
c001d61f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d622:	e8 b2 cd ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c001d627:	83 c4 10             	add    esp,0x10
c001d62a:	51                   	push   ecx
c001d62b:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d62f:	50                   	push   eax
c001d630:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d634:	50                   	push   eax
c001d635:	53                   	push   ebx
c001d636:	e8 6f 5c ff ff       	call   c00132aa <File::stat(unsigned long long*, bool*)>
c001d63b:	83 c4 10             	add    esp,0x10
c001d63e:	85 db                	test   ebx,ebx
c001d640:	74 0c                	je     c001d64e <Thr::loadDLL(char const*, bool)+0xa8>
c001d642:	83 ec 0c             	sub    esp,0xc
c001d645:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d647:	53                   	push   ebx
c001d648:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d64b:	83 c4 10             	add    esp,0x10
c001d64e:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d653:	75 0a                	jne    c001d65f <Thr::loadDLL(char const*, bool)+0xb9>
c001d655:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d659:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d65d:	75 3c                	jne    c001d69b <Thr::loadDLL(char const*, bool)+0xf5>
c001d65f:	89 f8                	mov    eax,edi
c001d661:	84 c0                	test   al,al
c001d663:	0f 84 49 01 00 00    	je     c001d7b2 <Thr::loadDLL(char const*, bool)+0x20c>
c001d669:	51                   	push   ecx
c001d66a:	51                   	push   ecx
c001d66b:	68 ef c7 02 c0       	push   0xc002c7ef
c001d670:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d674:	53                   	push   ebx
c001d675:	e8 92 31 fe ff       	call   c000080c <strcpy>
c001d67a:	5d                   	pop    ebp
c001d67b:	58                   	pop    eax
c001d67c:	56                   	push   esi
c001d67d:	53                   	push   ebx
c001d67e:	e8 c9 32 fe ff       	call   c000094c <strcat>
c001d683:	58                   	pop    eax
c001d684:	5a                   	pop    edx
c001d685:	68 02 c8 02 c0       	push   0xc002c802
c001d68a:	53                   	push   ebx
c001d68b:	e8 bc 32 fe ff       	call   c000094c <strcat>
c001d690:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d693:	e8 41 cd ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c001d698:	83 c4 10             	add    esp,0x10
c001d69b:	52                   	push   edx
c001d69c:	6a 03                	push   0x3
c001d69e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6a2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d6a6:	05 ff 0f 00 00       	add    eax,0xfff
c001d6ab:	83 d2 00             	adc    edx,0x0
c001d6ae:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d6b2:	50                   	push   eax
c001d6b3:	ff 35 50 e8 02 c0    	push   DWORD PTR ds:0xc002e850
c001d6b9:	e8 54 47 ff ff       	call   c0011e12 <VAS::allocatePages(int, int)>
c001d6be:	59                   	pop    ecx
c001d6bf:	89 c3                	mov    ebx,eax
c001d6c1:	5d                   	pop    ebp
c001d6c2:	50                   	push   eax
c001d6c3:	68 99 a9 02 c0       	push   0xc002a999
c001d6c8:	e8 6e 53 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001d6cd:	89 34 24             	mov    DWORD PTR [esp],esi
c001d6d0:	e8 97 30 fe ff       	call   c000076c <strlen>
c001d6d5:	8b 2d 20 f4 02 c0    	mov    ebp,DWORD PTR ds:0xc002f420
c001d6db:	40                   	inc    eax
c001d6dc:	89 04 24             	mov    DWORD PTR [esp],eax
c001d6df:	e8 ff 22 ff ff       	call   c000f9e3 <malloc>
c001d6e4:	89 04 ad 40 f8 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd07c0],eax
c001d6eb:	58                   	pop    eax
c001d6ec:	a1 20 f4 02 c0       	mov    eax,ds:0xc002f420
c001d6f1:	5a                   	pop    edx
c001d6f2:	56                   	push   esi
c001d6f3:	ff 34 85 40 f8 02 c0 	push   DWORD PTR [eax*4-0x3ffd07c0]
c001d6fa:	e8 0d 31 fe ff       	call   c000080c <strcpy>
c001d6ff:	a1 20 f4 02 c0       	mov    eax,ds:0xc002f420
c001d704:	8d 50 01             	lea    edx,[eax+0x1]
c001d707:	89 1c 85 40 f6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd09c0],ebx
c001d70e:	89 15 20 f4 02 c0    	mov    DWORD PTR ds:0xc002f420,edx
c001d714:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d718:	83 c4 0c             	add    esp,0xc
c001d71b:	89 14 85 40 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0bc0],edx
c001d722:	6a 01                	push   0x1
c001d724:	53                   	push   ebx
c001d725:	56                   	push   esi
c001d726:	e8 c2 f6 ff ff       	call   c001cded <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d72b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d72f:	83 c4 10             	add    esp,0x10
c001d732:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d737:	0f 85 89 00 00 00    	jne    c001d7c6 <Thr::loadDLL(char const*, bool)+0x220>
c001d73d:	89 f8                	mov    eax,edi
c001d73f:	84 c0                	test   al,al
c001d741:	74 73                	je     c001d7b6 <Thr::loadDLL(char const*, bool)+0x210>
c001d743:	83 ec 0c             	sub    esp,0xc
c001d746:	68 04 c8 02 c0       	push   0xc002c804
c001d74b:	e8 89 cc ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c001d750:	83 c4 10             	add    esp,0x10
c001d753:	eb 61                	jmp    c001d7b6 <Thr::loadDLL(char const*, bool)+0x210>
c001d755:	50                   	push   eax
c001d756:	50                   	push   eax
c001d757:	89 e8                	mov    eax,ebp
c001d759:	c1 e0 0c             	shl    eax,0xc
c001d75c:	01 d8                	add    eax,ebx
c001d75e:	50                   	push   eax
c001d75f:	ff 35 50 e8 02 c0    	push   DWORD PTR ds:0xc002e850
c001d765:	e8 10 42 ff ff       	call   c001197a <VAS::getPageTableEntry(unsigned long)>
c001d76a:	83 c4 10             	add    esp,0x10
c001d76d:	8b 00                	mov    eax,DWORD PTR [eax]
c001d76f:	a8 60                	test   al,0x60
c001d771:	75 11                	jne    c001d784 <Thr::loadDLL(char const*, bool)+0x1de>
c001d773:	83 ec 0c             	sub    esp,0xc
c001d776:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d77b:	50                   	push   eax
c001d77c:	e8 ed 25 ff ff       	call   c000fd6e <Phys::freePage(unsigned long)>
c001d781:	83 c4 10             	add    esp,0x10
c001d784:	45                   	inc    ebp
c001d785:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d789:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d78d:	05 ff 0f 00 00       	add    eax,0xfff
c001d792:	bf 00 00 00 00       	mov    edi,0x0
c001d797:	83 d2 00             	adc    edx,0x0
c001d79a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d79e:	c1 ea 0c             	shr    edx,0xc
c001d7a1:	39 c5                	cmp    ebp,eax
c001d7a3:	89 d1                	mov    ecx,edx
c001d7a5:	89 f8                	mov    eax,edi
c001d7a7:	19 c8                	sbb    eax,ecx
c001d7a9:	72 aa                	jb     c001d755 <Thr::loadDLL(char const*, bool)+0x1af>
c001d7ab:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d7b0:	75 18                	jne    c001d7ca <Thr::loadDLL(char const*, bool)+0x224>
c001d7b2:	31 db                	xor    ebx,ebx
c001d7b4:	eb 14                	jmp    c001d7ca <Thr::loadDLL(char const*, bool)+0x224>
c001d7b6:	83 ec 0c             	sub    esp,0xc
c001d7b9:	68 23 c8 02 c0       	push   0xc002c823
c001d7be:	e8 16 cc ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c001d7c3:	83 c4 10             	add    esp,0x10
c001d7c6:	31 ed                	xor    ebp,ebp
c001d7c8:	eb bb                	jmp    c001d785 <Thr::loadDLL(char const*, bool)+0x1df>
c001d7ca:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d7d0:	89 d8                	mov    eax,ebx
c001d7d2:	5b                   	pop    ebx
c001d7d3:	5e                   	pop    esi
c001d7d4:	5f                   	pop    edi
c001d7d5:	5d                   	pop    ebp
c001d7d6:	c3                   	ret    

c001d7d7 <Thr::executeDLL(unsigned long, void*)>:
c001d7d7:	56                   	push   esi
c001d7d8:	53                   	push   ebx
c001d7d9:	52                   	push   edx
c001d7da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d7de:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d7e2:	85 db                	test   ebx,ebx
c001d7e4:	75 10                	jne    c001d7f6 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d7e6:	83 ec 0c             	sub    esp,0xc
c001d7e9:	68 3f c8 02 c0       	push   0xc002c83f
c001d7ee:	e8 e6 cb ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c001d7f3:	83 c4 10             	add    esp,0x10
c001d7f6:	50                   	push   eax
c001d7f7:	50                   	push   eax
c001d7f8:	53                   	push   ebx
c001d7f9:	68 69 c8 02 c0       	push   0xc002c869
c001d7fe:	e8 38 52 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001d803:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d807:	89 d8                	mov    eax,ebx
c001d809:	83 c4 14             	add    esp,0x14
c001d80c:	5b                   	pop    ebx
c001d80d:	5e                   	pop    esi
c001d80e:	ff e0                	jmp    eax

c001d810 <userModeEntryPoint(void*)>:
c001d810:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001d815:	48                   	dec    eax
c001d816:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c001d81b:	75 01                	jne    c001d81e <userModeEntryPoint(void*)+0xe>
c001d81d:	fb                   	sti    
c001d81e:	fb                   	sti    
c001d81f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d824:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d827:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d82d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d831:	e9 f4 2a fe ff       	jmp    c000032a <goToUsermode>

c001d836 <changeTSS>:
c001d836:	83 ec 14             	sub    esp,0x14
c001d839:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d83e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d841:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d846:	c1 e2 15             	shl    edx,0x15
c001d849:	29 d0                	sub    eax,edx
c001d84b:	50                   	push   eax
c001d84c:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c001d851:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d857:	05 7c 11 00 00       	add    eax,0x117c
c001d85c:	50                   	push   eax
c001d85d:	e8 5c 37 ff ff       	call   c0010fbe <TSS::setESP(unsigned long)>
c001d862:	83 c4 1c             	add    esp,0x1c
c001d865:	c3                   	ret    

c001d866 <switchToThread(ThreadControlBlock*)>:
c001d866:	57                   	push   edi
c001d867:	a1 e4 fb 02 c0       	mov    eax,ds:0xc002fbe4
c001d86c:	56                   	push   esi
c001d86d:	85 c0                	test   eax,eax
c001d86f:	53                   	push   ebx
c001d870:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d874:	0f 85 88 00 00 00    	jne    c001d902 <switchToThread(ThreadControlBlock*)+0x9c>
c001d87a:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d87d:	3c ff                	cmp    al,0xff
c001d87f:	74 7d                	je     c001d8fe <switchToThread(ThreadControlBlock*)+0x98>
c001d881:	0f b6 d0             	movzx  edx,al
c001d884:	b8 84 03 00 00       	mov    eax,0x384
c001d889:	29 d0                	sub    eax,edx
c001d88b:	c1 e0 10             	shl    eax,0x10
c001d88e:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d891:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d894:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c001d899:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d89f:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d8a6:	74 4a                	je     c001d8f2 <switchToThread(ThreadControlBlock*)+0x8c>
c001d8a8:	0f 31                	rdtsc  
c001d8aa:	a3 28 fc 02 c0       	mov    ds:0xc002fc28,eax
c001d8af:	89 c6                	mov    esi,eax
c001d8b1:	89 d7                	mov    edi,edx
c001d8b3:	2b 35 18 fc 02 c0    	sub    esi,DWORD PTR ds:0xc002fc18
c001d8b9:	89 15 2c fc 02 c0    	mov    DWORD PTR ds:0xc002fc2c,edx
c001d8bf:	1b 3d 1c fc 02 c0    	sbb    edi,DWORD PTR ds:0xc002fc1c
c001d8c5:	89 35 20 fc 02 c0    	mov    DWORD PTR ds:0xc002fc20,esi
c001d8cb:	a3 18 fc 02 c0       	mov    ds:0xc002fc18,eax
c001d8d0:	89 3d 24 fc 02 c0    	mov    DWORD PTR ds:0xc002fc24,edi
c001d8d6:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d8dc:	89 15 1c fc 02 c0    	mov    DWORD PTR ds:0xc002fc1c,edx
c001d8e2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d8e5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d8e8:	01 c6                	add    esi,eax
c001d8ea:	11 d7                	adc    edi,edx
c001d8ec:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d8ef:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d8f2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d8f6:	5b                   	pop    ebx
c001d8f7:	5e                   	pop    esi
c001d8f8:	5f                   	pop    edi
c001d8f9:	e9 64 2a fe ff       	jmp    c0000362 <switchToThreadASM>
c001d8fe:	31 c0                	xor    eax,eax
c001d900:	eb 8f                	jmp    c001d891 <switchToThread(ThreadControlBlock*)+0x2b>
c001d902:	5b                   	pop    ebx
c001d903:	c7 05 e0 fb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fbe0,0x1
c001d90d:	5e                   	pop    esi
c001d90e:	5f                   	pop    edi
c001d90f:	c3                   	ret    

c001d910 <Process::addArgs(char**)>:
c001d910:	57                   	push   edi
c001d911:	56                   	push   esi
c001d912:	53                   	push   ebx
c001d913:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d917:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d91b:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d925:	85 ff                	test   edi,edi
c001d927:	74 3d                	je     c001d966 <Process::addArgs(char**)+0x56>
c001d929:	8b 07                	mov    eax,DWORD PTR [edi]
c001d92b:	85 c0                	test   eax,eax
c001d92d:	74 37                	je     c001d966 <Process::addArgs(char**)+0x56>
c001d92f:	31 db                	xor    ebx,ebx
c001d931:	83 ec 0c             	sub    esp,0xc
c001d934:	50                   	push   eax
c001d935:	e8 32 2e fe ff       	call   c000076c <strlen>
c001d93a:	40                   	inc    eax
c001d93b:	89 04 24             	mov    DWORD PTR [esp],eax
c001d93e:	e8 a0 20 ff ff       	call   c000f9e3 <malloc>
c001d943:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d94a:	5a                   	pop    edx
c001d94b:	59                   	pop    ecx
c001d94c:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d94f:	43                   	inc    ebx
c001d950:	50                   	push   eax
c001d951:	e8 b6 2e fe ff       	call   c000080c <strcpy>
c001d956:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d95c:	83 c4 10             	add    esp,0x10
c001d95f:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d962:	85 c0                	test   eax,eax
c001d964:	75 cb                	jne    c001d931 <Process::addArgs(char**)+0x21>
c001d966:	5b                   	pop    ebx
c001d967:	5e                   	pop    esi
c001d968:	5f                   	pop    edi
c001d969:	c3                   	ret    

c001d96a <Process::Process(char const*, Process*, char**)>:
c001d96a:	56                   	push   esi
c001d96b:	53                   	push   ebx
c001d96c:	83 ec 14             	sub    esp,0x14
c001d96f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d973:	05 0c 02 00 00       	add    eax,0x20c
c001d978:	bb 07 00 00 00       	mov    ebx,0x7
c001d97d:	89 c6                	mov    esi,eax
c001d97f:	85 db                	test   ebx,ebx
c001d981:	78 12                	js     c001d995 <Process::Process(char const*, Process*, char**)+0x2b>
c001d983:	83 ec 0c             	sub    esp,0xc
c001d986:	56                   	push   esi
c001d987:	e8 fa b7 00 00       	call   c0029186 <ThreadControlBlock::ThreadControlBlock()>
c001d98c:	83 c4 10             	add    esp,0x10
c001d98f:	83 c6 63             	add    esi,0x63
c001d992:	4b                   	dec    ebx
c001d993:	eb ea                	jmp    c001d97f <Process::Process(char const*, Process*, char**)+0x15>
c001d995:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d999:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d9a0:	83 ec 0c             	sub    esp,0xc
c001d9a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d9a7:	e8 b6 c8 ff ff       	call   c001a262 <Krnl::newProcessEnv(Process*)>
c001d9ac:	83 c4 10             	add    esp,0x10
c001d9af:	89 c2                	mov    edx,eax
c001d9b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9b5:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d9bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9bf:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d9c8:	a1 70 dc 02 c0       	mov    eax,ds:0xc002dc70
c001d9cd:	8d 50 01             	lea    edx,[eax+0x1]
c001d9d0:	89 15 70 dc 02 c0    	mov    DWORD PTR ds:0xc002dc70,edx
c001d9d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d9da:	89 02                	mov    DWORD PTR [edx],eax
c001d9dc:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d9e4:	83 ec 0c             	sub    esp,0xc
c001d9e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d9eb:	e8 f3 1f ff ff       	call   c000f9e3 <malloc>
c001d9f0:	83 c4 10             	add    esp,0x10
c001d9f3:	89 c3                	mov    ebx,eax
c001d9f5:	83 ec 08             	sub    esp,0x8
c001d9f8:	6a 00                	push   0x0
c001d9fa:	53                   	push   ebx
c001d9fb:	e8 ba 47 ff ff       	call   c00121ba <VAS::VAS(bool)>
c001da00:	83 c4 10             	add    esp,0x10
c001da03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da07:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001da0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da11:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001da1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da1f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001da23:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001da29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da2d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001da33:	85 c0                	test   eax,eax
c001da35:	74 42                	je     c001da79 <Process::Process(char const*, Process*, char**)+0x10f>
c001da37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da3b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001da41:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001da47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da4b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001da51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da55:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001da5b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001da61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da65:	05 0c 01 00 00       	add    eax,0x10c
c001da6a:	83 ec 08             	sub    esp,0x8
c001da6d:	52                   	push   edx
c001da6e:	50                   	push   eax
c001da6f:	e8 98 2d fe ff       	call   c000080c <strcpy>
c001da74:	83 c4 10             	add    esp,0x10
c001da77:	eb 63                	jmp    c001dadc <Process::Process(char const*, Process*, char**)+0x172>
c001da79:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001da81:	83 ec 0c             	sub    esp,0xc
c001da84:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001da88:	e8 56 1f ff ff       	call   c000f9e3 <malloc>
c001da8d:	83 c4 10             	add    esp,0x10
c001da90:	89 c3                	mov    ebx,eax
c001da92:	83 ec 08             	sub    esp,0x8
c001da95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da99:	53                   	push   ebx
c001da9a:	e8 31 32 ff ff       	call   c0010cd0 <VgaText::VgaText(char const*)>
c001da9f:	83 c4 10             	add    esp,0x10
c001daa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daa6:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001daac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dab0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dab6:	83 ec 0c             	sub    esp,0xc
c001dab9:	50                   	push   eax
c001daba:	e8 d0 29 ff ff       	call   c001048f <addToTerminalCycle(VgaText*)>
c001dabf:	83 c4 10             	add    esp,0x10
c001dac2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dac6:	05 0c 01 00 00       	add    eax,0x10c
c001dacb:	83 ec 08             	sub    esp,0x8
c001dace:	68 88 c8 02 c0       	push   0xc002c888
c001dad3:	50                   	push   eax
c001dad4:	e8 33 2d fe ff       	call   c000080c <strcpy>
c001dad9:	83 c4 10             	add    esp,0x10
c001dadc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dae0:	83 c0 0c             	add    eax,0xc
c001dae3:	83 ec 08             	sub    esp,0x8
c001dae6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001daea:	50                   	push   eax
c001daeb:	e8 1c 2d fe ff       	call   c000080c <strcpy>
c001daf0:	83 c4 10             	add    esp,0x10
c001daf3:	83 ec 08             	sub    esp,0x8
c001daf6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dafa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dafe:	e8 0d fe ff ff       	call   c001d910 <Process::addArgs(char**)>
c001db03:	83 c4 10             	add    esp,0x10
c001db06:	83 ec 08             	sub    esp,0x8
c001db09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db11:	e8 a1 ed ff ff       	call   c001c8b7 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001db16:	83 c4 10             	add    esp,0x10
c001db19:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001db1d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001db21:	83 f0 01             	xor    eax,0x1
c001db24:	88 c2                	mov    dl,al
c001db26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db2a:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001db30:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001db35:	83 ec 08             	sub    esp,0x8
c001db38:	50                   	push   eax
c001db39:	68 e0 c8 02 c0       	push   0xc002c8e0
c001db3e:	e8 f8 4e ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001db43:	83 c4 10             	add    esp,0x10
c001db46:	90                   	nop
c001db47:	83 c4 14             	add    esp,0x14
c001db4a:	5b                   	pop    ebx
c001db4b:	5e                   	pop    esi
c001db4c:	c3                   	ret    
c001db4d:	90                   	nop

c001db4e <Process::Process(bool, char const*, Process*, char**)>:
c001db4e:	56                   	push   esi
c001db4f:	53                   	push   ebx
c001db50:	83 ec 24             	sub    esp,0x24
c001db53:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001db57:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001db5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db5f:	05 0c 02 00 00       	add    eax,0x20c
c001db64:	bb 07 00 00 00       	mov    ebx,0x7
c001db69:	89 c6                	mov    esi,eax
c001db6b:	85 db                	test   ebx,ebx
c001db6d:	78 12                	js     c001db81 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001db6f:	83 ec 0c             	sub    esp,0xc
c001db72:	56                   	push   esi
c001db73:	e8 0e b6 00 00       	call   c0029186 <ThreadControlBlock::ThreadControlBlock()>
c001db78:	83 c4 10             	add    esp,0x10
c001db7b:	83 c6 63             	add    esi,0x63
c001db7e:	4b                   	dec    ebx
c001db7f:	eb ea                	jmp    c001db6b <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001db81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db85:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001db8c:	83 ec 0c             	sub    esp,0xc
c001db8f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001db93:	e8 ca c6 ff ff       	call   c001a262 <Krnl::newProcessEnv(Process*)>
c001db98:	83 c4 10             	add    esp,0x10
c001db9b:	89 c2                	mov    edx,eax
c001db9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dba1:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dba7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbab:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dbb4:	a1 70 dc 02 c0       	mov    eax,ds:0xc002dc70
c001dbb9:	8d 50 01             	lea    edx,[eax+0x1]
c001dbbc:	89 15 70 dc 02 c0    	mov    DWORD PTR ds:0xc002dc70,edx
c001dbc2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dbc6:	89 02                	mov    DWORD PTR [edx],eax
c001dbc8:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001dbd0:	83 ec 0c             	sub    esp,0xc
c001dbd3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dbd7:	e8 07 1e ff ff       	call   c000f9e3 <malloc>
c001dbdc:	83 c4 10             	add    esp,0x10
c001dbdf:	89 c3                	mov    ebx,eax
c001dbe1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dbe6:	83 ec 08             	sub    esp,0x8
c001dbe9:	50                   	push   eax
c001dbea:	53                   	push   ebx
c001dbeb:	e8 ca 45 ff ff       	call   c00121ba <VAS::VAS(bool)>
c001dbf0:	83 c4 10             	add    esp,0x10
c001dbf3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbf7:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dbfd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc01:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dc0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc0f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dc13:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dc19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc1d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc23:	85 c0                	test   eax,eax
c001dc25:	74 42                	je     c001dc69 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dc27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc2b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc31:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dc37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc3b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dc41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc45:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc4b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dc51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc55:	05 0c 01 00 00       	add    eax,0x10c
c001dc5a:	83 ec 08             	sub    esp,0x8
c001dc5d:	52                   	push   edx
c001dc5e:	50                   	push   eax
c001dc5f:	e8 a8 2b fe ff       	call   c000080c <strcpy>
c001dc64:	83 c4 10             	add    esp,0x10
c001dc67:	eb 63                	jmp    c001dccc <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dc69:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001dc71:	83 ec 0c             	sub    esp,0xc
c001dc74:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dc78:	e8 66 1d ff ff       	call   c000f9e3 <malloc>
c001dc7d:	83 c4 10             	add    esp,0x10
c001dc80:	89 c3                	mov    ebx,eax
c001dc82:	83 ec 08             	sub    esp,0x8
c001dc85:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dc89:	53                   	push   ebx
c001dc8a:	e8 41 30 ff ff       	call   c0010cd0 <VgaText::VgaText(char const*)>
c001dc8f:	83 c4 10             	add    esp,0x10
c001dc92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc96:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dc9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dca0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dca6:	83 ec 0c             	sub    esp,0xc
c001dca9:	50                   	push   eax
c001dcaa:	e8 e0 27 ff ff       	call   c001048f <addToTerminalCycle(VgaText*)>
c001dcaf:	83 c4 10             	add    esp,0x10
c001dcb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcb6:	05 0c 01 00 00       	add    eax,0x10c
c001dcbb:	83 ec 08             	sub    esp,0x8
c001dcbe:	68 88 c8 02 c0       	push   0xc002c888
c001dcc3:	50                   	push   eax
c001dcc4:	e8 43 2b fe ff       	call   c000080c <strcpy>
c001dcc9:	83 c4 10             	add    esp,0x10
c001dccc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcd0:	83 c0 0c             	add    eax,0xc
c001dcd3:	83 ec 08             	sub    esp,0x8
c001dcd6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dcda:	50                   	push   eax
c001dcdb:	e8 2c 2b fe ff       	call   c000080c <strcpy>
c001dce0:	83 c4 10             	add    esp,0x10
c001dce3:	83 ec 08             	sub    esp,0x8
c001dce6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dcea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dcee:	e8 1d fc ff ff       	call   c001d910 <Process::addArgs(char**)>
c001dcf3:	83 c4 10             	add    esp,0x10
c001dcf6:	90                   	nop
c001dcf7:	83 c4 24             	add    esp,0x24
c001dcfa:	5b                   	pop    ebx
c001dcfb:	5e                   	pop    esi
c001dcfc:	c3                   	ret    

c001dcfd <taskStartupFunction>:
c001dcfd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd02:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001dd05:	c3                   	ret    

c001dd06 <Semaphore::Semaphore(int)>:
c001dd06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd0a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dd0e:	89 10                	mov    DWORD PTR [eax],edx
c001dd10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd14:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001dd1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd1f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001dd26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd2a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001dd31:	90                   	nop
c001dd32:	c3                   	ret    
c001dd33:	90                   	nop

c001dd34 <Mutex::Mutex()>:
c001dd34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd38:	6a 01                	push   0x1
c001dd3a:	50                   	push   eax
c001dd3b:	e8 c6 ff ff ff       	call   c001dd06 <Semaphore::Semaphore(int)>
c001dd40:	83 c4 08             	add    esp,0x8
c001dd43:	90                   	nop
c001dd44:	c3                   	ret    
c001dd45:	90                   	nop

c001dd46 <Process::createThread(void (*)(void*), void*, int)>:
c001dd46:	55                   	push   ebp
c001dd47:	31 c9                	xor    ecx,ecx
c001dd49:	57                   	push   edi
c001dd4a:	56                   	push   esi
c001dd4b:	53                   	push   ebx
c001dd4c:	83 ec 1c             	sub    esp,0x1c
c001dd4f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dd53:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001dd5a:	89 f2                	mov    edx,esi
c001dd5c:	0f b7 c2             	movzx  eax,dx
c001dd5f:	83 e2 01             	and    edx,0x1
c001dd62:	74 16                	je     c001dd7a <Process::createThread(void (*)(void*), void*, int)+0x34>
c001dd64:	d1 f8                	sar    eax,1
c001dd66:	41                   	inc    ecx
c001dd67:	89 c2                	mov    edx,eax
c001dd69:	83 f9 10             	cmp    ecx,0x10
c001dd6c:	75 ee                	jne    c001dd5c <Process::createThread(void (*)(void*), void*, int)+0x16>
c001dd6e:	83 c4 1c             	add    esp,0x1c
c001dd71:	31 db                	xor    ebx,ebx
c001dd73:	89 d8                	mov    eax,ebx
c001dd75:	5b                   	pop    ebx
c001dd76:	5e                   	pop    esi
c001dd77:	5f                   	pop    edi
c001dd78:	5d                   	pop    ebp
c001dd79:	c3                   	ret    
c001dd7a:	b8 01 00 00 00       	mov    eax,0x1
c001dd7f:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001dd82:	d3 e0                	shl    eax,cl
c001dd84:	09 c6                	or     esi,eax
c001dd86:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001dd89:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001dd90:	89 c6                	mov    esi,eax
c001dd92:	c1 e6 05             	shl    esi,0x5
c001dd95:	01 f0                	add    eax,esi
c001dd97:	01 d8                	add    eax,ebx
c001dd99:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001dda0:	75 0a                	jne    c001ddac <Process::createThread(void (*)(void*), void*, int)+0x66>
c001dda2:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001ddac:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001ddb2:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001ddb6:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001ddb9:	01 ca                	add    edx,ecx
c001ddbb:	83 ec 08             	sub    esp,0x8
c001ddbe:	89 d0                	mov    eax,edx
c001ddc0:	c1 e0 05             	shl    eax,0x5
c001ddc3:	01 d0                	add    eax,edx
c001ddc5:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001ddc9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ddcd:	01 d8                	add    eax,ebx
c001ddcf:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001ddd5:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001dddb:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001dde1:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001dde7:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001dded:	89 cd                	mov    ebp,ecx
c001ddef:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001ddf3:	f7 dd                	neg    ebp
c001ddf5:	c1 e5 15             	shl    ebp,0x15
c001ddf8:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001ddfe:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001de04:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001de0e:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001de14:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001de1e:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001de28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de2c:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001de33:	53                   	push   ebx
c001de34:	68 04 fc 02 c0       	push   0xc002fc04
c001de39:	e8 02 b1 00 00       	call   c0028f40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001de3e:	89 d8                	mov    eax,ebx
c001de40:	83 c4 10             	add    esp,0x10
c001de43:	83 c4 1c             	add    esp,0x1c
c001de46:	5b                   	pop    ebx
c001de47:	5e                   	pop    esi
c001de48:	5f                   	pop    edi
c001de49:	5d                   	pop    ebp
c001de4a:	c3                   	ret    
c001de4b:	90                   	nop

c001de4c <Process::createUserThread()>:
c001de4c:	83 ec 0c             	sub    esp,0xc
c001de4f:	68 80 00 00 00       	push   0x80
c001de54:	6a 00                	push   0x0
c001de56:	68 10 d8 01 c0       	push   0xc001d810
c001de5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de5f:	e8 e2 fe ff ff       	call   c001dd46 <Process::createThread(void (*)(void*), void*, int)>
c001de64:	83 c4 1c             	add    esp,0x1c
c001de67:	c3                   	ret    

c001de68 <setupMultitasking(void (*)())>:
c001de68:	56                   	push   esi
c001de69:	53                   	push   ebx
c001de6a:	51                   	push   ecx
c001de6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001de6f:	eb 10                	jmp    c001de81 <setupMultitasking(void (*)())+0x19>
c001de71:	83 ec 0c             	sub    esp,0xc
c001de74:	68 04 fc 02 c0       	push   0xc002fc04
c001de79:	e8 14 b0 00 00       	call   c0028e92 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001de7e:	83 c4 10             	add    esp,0x10
c001de81:	83 ec 0c             	sub    esp,0xc
c001de84:	68 04 fc 02 c0       	push   0xc002fc04
c001de89:	e8 e0 af 00 00       	call   c0028e6e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001de8e:	83 c4 10             	add    esp,0x10
c001de91:	84 c0                	test   al,al
c001de93:	74 dc                	je     c001de71 <setupMultitasking(void (*)())+0x9>
c001de95:	83 ec 0c             	sub    esp,0xc
c001de98:	68 3f 07 00 00       	push   0x73f
c001de9d:	e8 41 1b ff ff       	call   c000f9e3 <malloc>
c001dea2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dea9:	89 c3                	mov    ebx,eax
c001deab:	6a 00                	push   0x0
c001dead:	68 8c c8 02 c0       	push   0xc002c88c
c001deb2:	6a 01                	push   0x1
c001deb4:	50                   	push   eax
c001deb5:	e8 94 fc ff ff       	call   c001db4e <Process::Process(bool, char const*, Process*, char**)>
c001deba:	83 c4 14             	add    esp,0x14
c001debd:	89 1d 10 fc 02 c0    	mov    DWORD PTR ds:0xc002fc10,ebx
c001dec3:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001dec9:	e8 cf 28 ff ff       	call   c001079d <setActiveTerminal(VgaText*)>
c001dece:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001ded6:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001dee0:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dee6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001dee9:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001def3:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001def9:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001deff:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001df09:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001df13:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001df1d:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001df23:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001df2d:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001df33:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001df3d:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001df43:	58                   	pop    eax
c001df44:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001df4a:	5a                   	pop    edx
c001df4b:	68 88 c8 02 c0       	push   0xc002c888
c001df50:	50                   	push   eax
c001df51:	e8 b6 28 fe ff       	call   c000080c <strcpy>
c001df56:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001df5d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001df61:	83 c4 14             	add    esp,0x14
c001df64:	5b                   	pop    ebx
c001df65:	5e                   	pop    esi
c001df66:	e9 e9 23 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001df6b <schedule()>:
c001df6b:	a1 e4 fb 02 c0       	mov    eax,ds:0xc002fbe4
c001df70:	85 c0                	test   eax,eax
c001df72:	74 0b                	je     c001df7f <schedule()+0x14>
c001df74:	c7 05 e0 fb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fbe0,0x1
c001df7e:	c3                   	ret    
c001df7f:	53                   	push   ebx
c001df80:	83 ec 14             	sub    esp,0x14
c001df83:	68 04 fc 02 c0       	push   0xc002fc04
c001df88:	e8 e1 ae 00 00       	call   c0028e6e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001df8d:	83 c4 10             	add    esp,0x10
c001df90:	84 c0                	test   al,al
c001df92:	75 38                	jne    c001dfcc <schedule()+0x61>
c001df94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df99:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001df9c:	4a                   	dec    edx
c001df9d:	74 32                	je     c001dfd1 <schedule()+0x66>
c001df9f:	83 ec 0c             	sub    esp,0xc
c001dfa2:	68 04 fc 02 c0       	push   0xc002fc04
c001dfa7:	e8 de ae 00 00       	call   c0028e8a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dfac:	c7 04 24 04 fc 02 c0 	mov    DWORD PTR [esp],0xc002fc04
c001dfb3:	89 c3                	mov    ebx,eax
c001dfb5:	e8 d8 ae 00 00       	call   c0028e92 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dfba:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001dfc1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dfc4:	e8 9d f8 ff ff       	call   c001d866 <switchToThread(ThreadControlBlock*)>
c001dfc9:	83 c4 10             	add    esp,0x10
c001dfcc:	83 c4 08             	add    esp,0x8
c001dfcf:	5b                   	pop    ebx
c001dfd0:	c3                   	ret    
c001dfd1:	83 ec 08             	sub    esp,0x8
c001dfd4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001dfdb:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dfe1:	68 04 fc 02 c0       	push   0xc002fc04
c001dfe6:	e8 55 af 00 00       	call   c0028f40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dfeb:	83 c4 10             	add    esp,0x10
c001dfee:	eb af                	jmp    c001df9f <schedule()+0x34>

c001dff0 <Semaphore::tryAcquire()>:
c001dff0:	53                   	push   ebx
c001dff1:	83 ec 08             	sub    esp,0x8
c001dff4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dff8:	fa                   	cli    
c001dff9:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001dffe:	8d 50 01             	lea    edx,[eax+0x1]
c001e001:	89 15 e8 fb 02 c0    	mov    DWORD PTR ds:0xc002fbe8,edx
c001e007:	8b 15 e4 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fbe4
c001e00d:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e010:	89 1d e4 fb 02 c0    	mov    DWORD PTR ds:0xc002fbe4,ebx
c001e016:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e019:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e01b:	7c 2a                	jl     c001e047 <Semaphore::tryAcquire()+0x57>
c001e01d:	89 15 e4 fb 02 c0    	mov    DWORD PTR ds:0xc002fbe4,edx
c001e023:	85 d2                	test   edx,edx
c001e025:	75 0a                	jne    c001e031 <Semaphore::tryAcquire()+0x41>
c001e027:	8b 15 e0 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fbe0
c001e02d:	85 d2                	test   edx,edx
c001e02f:	75 5b                	jne    c001e08c <Semaphore::tryAcquire()+0x9c>
c001e031:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c001e036:	85 c0                	test   eax,eax
c001e038:	74 07                	je     c001e041 <Semaphore::tryAcquire()+0x51>
c001e03a:	31 c0                	xor    eax,eax
c001e03c:	83 c4 08             	add    esp,0x8
c001e03f:	5b                   	pop    ebx
c001e040:	c3                   	ret    
c001e041:	fb                   	sti    
c001e042:	83 c4 08             	add    esp,0x8
c001e045:	5b                   	pop    ebx
c001e046:	c3                   	ret    
c001e047:	43                   	inc    ebx
c001e048:	89 15 e4 fb 02 c0    	mov    DWORD PTR ds:0xc002fbe4,edx
c001e04e:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e051:	85 d2                	test   edx,edx
c001e053:	75 1f                	jne    c001e074 <Semaphore::tryAcquire()+0x84>
c001e055:	8b 0d e0 fb 02 c0    	mov    ecx,DWORD PTR ds:0xc002fbe0
c001e05b:	85 c9                	test   ecx,ecx
c001e05d:	74 15                	je     c001e074 <Semaphore::tryAcquire()+0x84>
c001e05f:	c7 05 e0 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fbe0,0x0
c001e069:	e8 fd fe ff ff       	call   c001df6b <schedule()>
c001e06e:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001e073:	48                   	dec    eax
c001e074:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c001e079:	85 c0                	test   eax,eax
c001e07b:	75 08                	jne    c001e085 <Semaphore::tryAcquire()+0x95>
c001e07d:	fb                   	sti    
c001e07e:	b0 01                	mov    al,0x1
c001e080:	83 c4 08             	add    esp,0x8
c001e083:	5b                   	pop    ebx
c001e084:	c3                   	ret    
c001e085:	b0 01                	mov    al,0x1
c001e087:	83 c4 08             	add    esp,0x8
c001e08a:	5b                   	pop    ebx
c001e08b:	c3                   	ret    
c001e08c:	c7 05 e0 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fbe0,0x0
c001e096:	e8 d0 fe ff ff       	call   c001df6b <schedule()>
c001e09b:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001e0a0:	48                   	dec    eax
c001e0a1:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c001e0a6:	85 c0                	test   eax,eax
c001e0a8:	75 90                	jne    c001e03a <Semaphore::tryAcquire()+0x4a>
c001e0aa:	eb 95                	jmp    c001e041 <Semaphore::tryAcquire()+0x51>

c001e0ac <Semaphore::assertLocked(char const*)>:
c001e0ac:	83 ec 0c             	sub    esp,0xc
c001e0af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e0b3:	fa                   	cli    
c001e0b4:	ff 05 e8 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe8
c001e0ba:	a1 e4 fb 02 c0       	mov    eax,ds:0xc002fbe4
c001e0bf:	8d 48 01             	lea    ecx,[eax+0x1]
c001e0c2:	89 0d e4 fb 02 c0    	mov    DWORD PTR ds:0xc002fbe4,ecx
c001e0c8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e0ca:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e0cd:	7c 24                	jl     c001e0f3 <Semaphore::assertLocked(char const*)+0x47>
c001e0cf:	a3 e4 fb 02 c0       	mov    ds:0xc002fbe4,eax
c001e0d4:	85 c0                	test   eax,eax
c001e0d6:	75 09                	jne    c001e0e1 <Semaphore::assertLocked(char const*)+0x35>
c001e0d8:	a1 e0 fb 02 c0       	mov    eax,ds:0xc002fbe0
c001e0dd:	85 c0                	test   eax,eax
c001e0df:	75 29                	jne    c001e10a <Semaphore::assertLocked(char const*)+0x5e>
c001e0e1:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001e0e6:	48                   	dec    eax
c001e0e7:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c001e0ec:	75 01                	jne    c001e0ef <Semaphore::assertLocked(char const*)+0x43>
c001e0ee:	fb                   	sti    
c001e0ef:	83 c4 0c             	add    esp,0xc
c001e0f2:	c3                   	ret    
c001e0f3:	83 ec 0c             	sub    esp,0xc
c001e0f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e0fa:	e8 da c2 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c001e0ff:	a1 e4 fb 02 c0       	mov    eax,ds:0xc002fbe4
c001e104:	83 c4 10             	add    esp,0x10
c001e107:	48                   	dec    eax
c001e108:	eb c5                	jmp    c001e0cf <Semaphore::assertLocked(char const*)+0x23>
c001e10a:	c7 05 e0 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fbe0,0x0
c001e114:	e8 52 fe ff ff       	call   c001df6b <schedule()>
c001e119:	eb c6                	jmp    c001e0e1 <Semaphore::assertLocked(char const*)+0x35>

c001e11b <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e11b:	83 ec 0c             	sub    esp,0xc
c001e11e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e123:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e127:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e12a:	e8 3c fe ff ff       	call   c001df6b <schedule()>
c001e12f:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001e134:	48                   	dec    eax
c001e135:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c001e13a:	75 01                	jne    c001e13d <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001e13c:	fb                   	sti    
c001e13d:	83 c4 0c             	add    esp,0xc
c001e140:	c3                   	ret    

c001e141 <blockTask(TaskState)>:
c001e141:	83 ec 0c             	sub    esp,0xc
c001e144:	fa                   	cli    
c001e145:	ff 05 e8 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe8
c001e14b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e14f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e154:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e157:	e8 0f fe ff ff       	call   c001df6b <schedule()>
c001e15c:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001e161:	48                   	dec    eax
c001e162:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c001e167:	75 01                	jne    c001e16a <blockTask(TaskState)+0x29>
c001e169:	fb                   	sti    
c001e16a:	83 c4 0c             	add    esp,0xc
c001e16d:	c3                   	ret    

c001e16e <waitTask(int, int*, int)>:
c001e16e:	83 ec 18             	sub    esp,0x18
c001e171:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e176:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e17a:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e17d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e181:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e186:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e189:	6a 07                	push   0x7
c001e18b:	e8 b1 ff ff ff       	call   c001e141 <blockTask(TaskState)>
c001e190:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e195:	83 c4 10             	add    esp,0x10
c001e198:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e19b:	85 d2                	test   edx,edx
c001e19d:	74 0a                	je     c001e1a9 <waitTask(int, int*, int)+0x3b>
c001e19f:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e1a2:	89 02                	mov    DWORD PTR [edx],eax
c001e1a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1a9:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e1ac:	83 c4 0c             	add    esp,0xc
c001e1af:	c3                   	ret    

c001e1b0 <nanoSleepUntil(unsigned long long)>:
c001e1b0:	83 ec 0c             	sub    esp,0xc
c001e1b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e1bb:	3b 05 50 ed 02 c0    	cmp    eax,DWORD PTR ds:0xc002ed50
c001e1c1:	89 d1                	mov    ecx,edx
c001e1c3:	1b 0d 54 ed 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ed54
c001e1c9:	73 04                	jae    c001e1cf <nanoSleepUntil(unsigned long long)+0x1f>
c001e1cb:	83 c4 0c             	add    esp,0xc
c001e1ce:	c3                   	ret    
c001e1cf:	fa                   	cli    
c001e1d0:	ff 05 e8 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe8
c001e1d6:	83 ec 08             	sub    esp,0x8
c001e1d9:	ff 05 e4 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe4
c001e1df:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e1e5:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e1e8:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e1eb:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e1f1:	68 f8 fb 02 c0       	push   0xc002fbf8
c001e1f6:	e8 45 ad 00 00       	call   c0028f40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e1fb:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e202:	e8 3a ff ff ff       	call   c001e141 <blockTask(TaskState)>
c001e207:	a1 e4 fb 02 c0       	mov    eax,ds:0xc002fbe4
c001e20c:	83 c4 10             	add    esp,0x10
c001e20f:	48                   	dec    eax
c001e210:	a3 e4 fb 02 c0       	mov    ds:0xc002fbe4,eax
c001e215:	85 c0                	test   eax,eax
c001e217:	75 09                	jne    c001e222 <nanoSleepUntil(unsigned long long)+0x72>
c001e219:	a1 e0 fb 02 c0       	mov    eax,ds:0xc002fbe0
c001e21e:	85 c0                	test   eax,eax
c001e220:	75 12                	jne    c001e234 <nanoSleepUntil(unsigned long long)+0x84>
c001e222:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001e227:	48                   	dec    eax
c001e228:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c001e22d:	75 9c                	jne    c001e1cb <nanoSleepUntil(unsigned long long)+0x1b>
c001e22f:	fb                   	sti    
c001e230:	83 c4 0c             	add    esp,0xc
c001e233:	c3                   	ret    
c001e234:	c7 05 e0 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fbe0,0x0
c001e23e:	e8 28 fd ff ff       	call   c001df6b <schedule()>
c001e243:	eb dd                	jmp    c001e222 <nanoSleepUntil(unsigned long long)+0x72>

c001e245 <nanoSleep(unsigned long long)>:
c001e245:	a1 50 ed 02 c0       	mov    eax,ds:0xc002ed50
c001e24a:	8b 15 54 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002ed54
c001e250:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e254:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e258:	e9 53 ff ff ff       	jmp    c001e1b0 <nanoSleepUntil(unsigned long long)>

c001e25d <sleep(unsigned long long)>:
c001e25d:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e265:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e26a:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e26e:	01 ca                	add    edx,ecx
c001e270:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e274:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e278:	eb cb                	jmp    c001e245 <nanoSleep(unsigned long long)>

c001e27a <Semaphore::acquire()>:
c001e27a:	83 ec 0c             	sub    esp,0xc
c001e27d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e281:	fa                   	cli    
c001e282:	a1 e4 fb 02 c0       	mov    eax,ds:0xc002fbe4
c001e287:	ff 05 e8 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe8
c001e28d:	8d 48 01             	lea    ecx,[eax+0x1]
c001e290:	89 0d e4 fb 02 c0    	mov    DWORD PTR ds:0xc002fbe4,ecx
c001e296:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e299:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e29b:	7d 28                	jge    c001e2c5 <Semaphore::acquire()+0x4b>
c001e29d:	41                   	inc    ecx
c001e29e:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e2a1:	a3 e4 fb 02 c0       	mov    ds:0xc002fbe4,eax
c001e2a6:	85 c0                	test   eax,eax
c001e2a8:	75 09                	jne    c001e2b3 <Semaphore::acquire()+0x39>
c001e2aa:	a1 e0 fb 02 c0       	mov    eax,ds:0xc002fbe0
c001e2af:	85 c0                	test   eax,eax
c001e2b1:	75 5d                	jne    c001e310 <Semaphore::acquire()+0x96>
c001e2b3:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001e2b8:	48                   	dec    eax
c001e2b9:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c001e2be:	75 01                	jne    c001e2c1 <Semaphore::acquire()+0x47>
c001e2c0:	fb                   	sti    
c001e2c1:	83 c4 0c             	add    esp,0xc
c001e2c4:	c3                   	ret    
c001e2c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2ca:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e2d1:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e2d4:	85 c9                	test   ecx,ecx
c001e2d6:	74 49                	je     c001e321 <Semaphore::acquire()+0xa7>
c001e2d8:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e2db:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e2e1:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e2e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2e9:	83 ec 0c             	sub    esp,0xc
c001e2ec:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e2ef:	68 08 c9 02 c0       	push   0xc002c908
c001e2f4:	e8 42 47 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001e2f9:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c001e300:	e8 3c fe ff ff       	call   c001e141 <blockTask(TaskState)>
c001e305:	a1 e4 fb 02 c0       	mov    eax,ds:0xc002fbe4
c001e30a:	83 c4 10             	add    esp,0x10
c001e30d:	48                   	dec    eax
c001e30e:	eb 91                	jmp    c001e2a1 <Semaphore::acquire()+0x27>
c001e310:	c7 05 e0 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fbe0,0x0
c001e31a:	e8 4c fc ff ff       	call   c001df6b <schedule()>
c001e31f:	eb 92                	jmp    c001e2b3 <Semaphore::acquire()+0x39>
c001e321:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e326:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e329:	eb b9                	jmp    c001e2e4 <Semaphore::acquire()+0x6a>

c001e32b <taskReturned>:
c001e32b:	83 ec 18             	sub    esp,0x18
c001e32e:	68 28 c9 02 c0       	push   0xc002c928
c001e333:	e8 a1 c0 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c001e338:	83 c4 10             	add    esp,0x10
c001e33b:	83 ec 0c             	sub    esp,0xc
c001e33e:	6a 02                	push   0x2
c001e340:	e8 fc fd ff ff       	call   c001e141 <blockTask(TaskState)>
c001e345:	fa                   	cli    
c001e346:	ff 05 e8 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe8
c001e34c:	e8 1a fc ff ff       	call   c001df6b <schedule()>
c001e351:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001e356:	83 c4 10             	add    esp,0x10
c001e359:	48                   	dec    eax
c001e35a:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c001e35f:	85 c0                	test   eax,eax
c001e361:	75 d8                	jne    c001e33b <taskReturned+0x10>
c001e363:	fb                   	sti    
c001e364:	eb d5                	jmp    c001e33b <taskReturned+0x10>

c001e366 <Thr::processFromPID(int)>:
c001e366:	57                   	push   edi
c001e367:	56                   	push   esi
c001e368:	53                   	push   ebx
c001e369:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e36d:	fa                   	cli    
c001e36e:	ff 05 e8 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe8
c001e374:	83 ec 0c             	sub    esp,0xc
c001e377:	68 04 fc 02 c0       	push   0xc002fc04
c001e37c:	e8 09 ab 00 00       	call   c0028e8a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e381:	83 c4 10             	add    esp,0x10
c001e384:	89 c7                	mov    edi,eax
c001e386:	eb 14                	jmp    c001e39c <Thr::processFromPID(int)+0x36>
c001e388:	83 ec 0c             	sub    esp,0xc
c001e38b:	68 04 fc 02 c0       	push   0xc002fc04
c001e390:	e8 f5 aa 00 00       	call   c0028e8a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e395:	83 c4 10             	add    esp,0x10
c001e398:	39 f8                	cmp    eax,edi
c001e39a:	74 49                	je     c001e3e5 <Thr::processFromPID(int)+0x7f>
c001e39c:	83 ec 0c             	sub    esp,0xc
c001e39f:	68 04 fc 02 c0       	push   0xc002fc04
c001e3a4:	e8 e1 aa 00 00       	call   c0028e8a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e3a9:	c7 04 24 04 fc 02 c0 	mov    DWORD PTR [esp],0xc002fc04
c001e3b0:	89 c3                	mov    ebx,eax
c001e3b2:	e8 db aa 00 00       	call   c0028e92 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e3b7:	58                   	pop    eax
c001e3b8:	5a                   	pop    edx
c001e3b9:	53                   	push   ebx
c001e3ba:	68 04 fc 02 c0       	push   0xc002fc04
c001e3bf:	e8 7c ab 00 00       	call   c0028f40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e3c4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e3c7:	83 c4 10             	add    esp,0x10
c001e3ca:	39 30                	cmp    DWORD PTR [eax],esi
c001e3cc:	75 ba                	jne    c001e388 <Thr::processFromPID(int)+0x22>
c001e3ce:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001e3d3:	48                   	dec    eax
c001e3d4:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c001e3d9:	74 07                	je     c001e3e2 <Thr::processFromPID(int)+0x7c>
c001e3db:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e3de:	5b                   	pop    ebx
c001e3df:	5e                   	pop    esi
c001e3e0:	5f                   	pop    edi
c001e3e1:	c3                   	ret    
c001e3e2:	fb                   	sti    
c001e3e3:	eb f6                	jmp    c001e3db <Thr::processFromPID(int)+0x75>
c001e3e5:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001e3ea:	48                   	dec    eax
c001e3eb:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c001e3f0:	75 05                	jne    c001e3f7 <Thr::processFromPID(int)+0x91>
c001e3f2:	fb                   	sti    
c001e3f3:	5b                   	pop    ebx
c001e3f4:	5e                   	pop    esi
c001e3f5:	5f                   	pop    edi
c001e3f6:	c3                   	ret    
c001e3f7:	5b                   	pop    ebx
c001e3f8:	31 c0                	xor    eax,eax
c001e3fa:	5e                   	pop    esi
c001e3fb:	5f                   	pop    edi
c001e3fc:	c3                   	ret    

c001e3fd <unblockTask(ThreadControlBlock*)>:
c001e3fd:	53                   	push   ebx
c001e3fe:	83 ec 08             	sub    esp,0x8
c001e401:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e405:	fa                   	cli    
c001e406:	ff 05 e8 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe8
c001e40c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e40f:	85 c0                	test   eax,eax
c001e411:	74 5a                	je     c001e46d <unblockTask(ThreadControlBlock*)+0x70>
c001e413:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e416:	48                   	dec    eax
c001e417:	74 31                	je     c001e44a <unblockTask(ThreadControlBlock*)+0x4d>
c001e419:	83 ec 0c             	sub    esp,0xc
c001e41c:	68 04 fc 02 c0       	push   0xc002fc04
c001e421:	e8 64 aa 00 00       	call   c0028e8a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e426:	83 c4 10             	add    esp,0x10
c001e429:	85 c0                	test   eax,eax
c001e42b:	75 17                	jne    c001e444 <unblockTask(ThreadControlBlock*)+0x47>
c001e42d:	eb 50                	jmp    c001e47f <unblockTask(ThreadControlBlock*)+0x82>
c001e42f:	83 ec 08             	sub    esp,0x8
c001e432:	50                   	push   eax
c001e433:	68 04 fc 02 c0       	push   0xc002fc04
c001e438:	e8 d5 ad 00 00       	call   c0029212 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e43d:	83 c4 10             	add    esp,0x10
c001e440:	85 c0                	test   eax,eax
c001e442:	74 3b                	je     c001e47f <unblockTask(ThreadControlBlock*)+0x82>
c001e444:	39 c3                	cmp    ebx,eax
c001e446:	75 e7                	jne    c001e42f <unblockTask(ThreadControlBlock*)+0x32>
c001e448:	eb 10                	jmp    c001e45a <unblockTask(ThreadControlBlock*)+0x5d>
c001e44a:	83 ec 0c             	sub    esp,0xc
c001e44d:	68 aa c8 02 c0       	push   0xc002c8aa
c001e452:	e8 e4 45 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001e457:	83 c4 10             	add    esp,0x10
c001e45a:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001e45f:	48                   	dec    eax
c001e460:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c001e465:	75 01                	jne    c001e468 <unblockTask(ThreadControlBlock*)+0x6b>
c001e467:	fb                   	sti    
c001e468:	83 c4 08             	add    esp,0x8
c001e46b:	5b                   	pop    ebx
c001e46c:	c3                   	ret    
c001e46d:	83 ec 0c             	sub    esp,0xc
c001e470:	68 93 c8 02 c0       	push   0xc002c893
c001e475:	e8 c1 45 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001e47a:	83 c4 10             	add    esp,0x10
c001e47d:	eb db                	jmp    c001e45a <unblockTask(ThreadControlBlock*)+0x5d>
c001e47f:	83 ec 08             	sub    esp,0x8
c001e482:	53                   	push   ebx
c001e483:	68 04 fc 02 c0       	push   0xc002fc04
c001e488:	e8 b3 aa 00 00       	call   c0028f40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e48d:	83 c4 10             	add    esp,0x10
c001e490:	eb c8                	jmp    c001e45a <unblockTask(ThreadControlBlock*)+0x5d>

c001e492 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e492:	55                   	push   ebp
c001e493:	57                   	push   edi
c001e494:	56                   	push   esi
c001e495:	53                   	push   ebx
c001e496:	83 ec 1c             	sub    esp,0x1c
c001e499:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e49d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4a0:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e4a6:	85 ff                	test   edi,edi
c001e4a8:	7e 20                	jle    c001e4ca <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e4aa:	31 f6                	xor    esi,esi
c001e4ac:	83 ec 0c             	sub    esp,0xc
c001e4af:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e4b6:	46                   	inc    esi
c001e4b7:	e8 37 15 ff ff       	call   c000f9f3 <free>
c001e4bc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4bf:	83 c4 10             	add    esp,0x10
c001e4c2:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e4c8:	7f e2                	jg     c001e4ac <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e4ca:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e4d4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e4d9:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e4dc:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e4df:	d3 c0                	rol    eax,cl
c001e4e1:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e4e8:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e4eb:	89 f7                	mov    edi,esi
c001e4ed:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e4f5:	0f 85 64 01 00 00    	jne    c001e65f <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e4fb:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e501:	85 ed                	test   ebp,ebp
c001e503:	74 1b                	je     c001e520 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e505:	83 ec 0c             	sub    esp,0xc
c001e508:	55                   	push   ebp
c001e509:	e8 70 bc ff ff       	call   c001a17e <EnvVarContainer::~EnvVarContainer()>
c001e50e:	59                   	pop    ecx
c001e50f:	5e                   	pop    esi
c001e510:	6a 0c                	push   0xc
c001e512:	55                   	push   ebp
c001e513:	e8 4b 44 ff ff       	call   c0012963 <operator delete(void*, unsigned long)>
c001e518:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e51b:	83 c4 10             	add    esp,0x10
c001e51e:	89 f7                	mov    edi,esi
c001e520:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e526:	85 c0                	test   eax,eax
c001e528:	0f 84 aa 00 00 00    	je     c001e5d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e52e:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e531:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e535:	31 c9                	xor    ecx,ecx
c001e537:	eb 10                	jmp    c001e549 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e539:	41                   	inc    ecx
c001e53a:	83 f9 10             	cmp    ecx,0x10
c001e53d:	0f 84 95 00 00 00    	je     c001e5d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e543:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e549:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e550:	d3 fa                	sar    edx,cl
c001e552:	83 e2 01             	and    edx,0x1
c001e555:	74 e2                	je     c001e539 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e557:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e55a:	01 ca                	add    edx,ecx
c001e55c:	89 d5                	mov    ebp,edx
c001e55e:	c1 e5 05             	shl    ebp,0x5
c001e561:	01 ea                	add    edx,ebp
c001e563:	01 d0                	add    eax,edx
c001e565:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e56b:	83 fd 07             	cmp    ebp,0x7
c001e56e:	75 c9                	jne    c001e539 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e570:	05 40 02 00 00       	add    eax,0x240
c001e575:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e578:	83 fd ff             	cmp    ebp,0xffffffff
c001e57b:	0f 8c e6 00 00 00    	jl     c001e667 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001e581:	0f 84 97 01 00 00    	je     c001e71e <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001e587:	85 ed                	test   ebp,ebp
c001e589:	0f 84 7e 01 00 00    	je     c001e70d <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001e58f:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e591:	75 a6                	jne    c001e539 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e593:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e599:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e59d:	01 d0                	add    eax,edx
c001e59f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e5a3:	83 ec 0c             	sub    esp,0xc
c001e5a6:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e5ac:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5af:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e5b5:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e5bc:	50                   	push   eax
c001e5bd:	e8 3b fe ff ff       	call   c001e3fd <unblockTask(ThreadControlBlock*)>
c001e5c2:	83 c4 10             	add    esp,0x10
c001e5c5:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5c8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e5cc:	89 f7                	mov    edi,esi
c001e5ce:	41                   	inc    ecx
c001e5cf:	83 f9 10             	cmp    ecx,0x10
c001e5d2:	0f 85 6b ff ff ff    	jne    c001e543 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e5d8:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e5de:	85 c0                	test   eax,eax
c001e5e0:	74 5d                	je     c001e63f <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e5e2:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e5e8:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e5ee:	74 4f                	je     c001e63f <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e5f0:	83 ec 0c             	sub    esp,0xc
c001e5f3:	68 04 fc 02 c0       	push   0xc002fc04
c001e5f8:	e8 8d a8 00 00       	call   c0028e8a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e5fd:	c7 04 24 04 fc 02 c0 	mov    DWORD PTR [esp],0xc002fc04
c001e604:	89 c7                	mov    edi,eax
c001e606:	e8 63 a8 00 00       	call   c0028e6e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e60b:	83 c4 10             	add    esp,0x10
c001e60e:	84 c0                	test   al,al
c001e610:	0f 84 c2 00 00 00    	je     c001e6d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001e616:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e619:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e61f:	85 d2                	test   edx,edx
c001e621:	74 0f                	je     c001e632 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e623:	83 ec 0c             	sub    esp,0xc
c001e626:	8b 02                	mov    eax,DWORD PTR [edx]
c001e628:	52                   	push   edx
c001e629:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e62c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e62f:	83 c4 10             	add    esp,0x10
c001e632:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e63c:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e63f:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e645:	85 db                	test   ebx,ebx
c001e647:	74 16                	je     c001e65f <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e649:	83 ec 0c             	sub    esp,0xc
c001e64c:	53                   	push   ebx
c001e64d:	e8 42 35 ff ff       	call   c0011b94 <VAS::~VAS()>
c001e652:	58                   	pop    eax
c001e653:	5a                   	pop    edx
c001e654:	6a 14                	push   0x14
c001e656:	53                   	push   ebx
c001e657:	e8 07 43 ff ff       	call   c0012963 <operator delete(void*, unsigned long)>
c001e65c:	83 c4 10             	add    esp,0x10
c001e65f:	83 c4 1c             	add    esp,0x1c
c001e662:	5b                   	pop    ebx
c001e663:	5e                   	pop    esi
c001e664:	5f                   	pop    edi
c001e665:	5d                   	pop    ebp
c001e666:	c3                   	ret    
c001e667:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e66b:	83 ec 0c             	sub    esp,0xc
c001e66e:	68 5c c9 02 c0       	push   0xc002c95c
c001e673:	e8 61 bd ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c001e678:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e67b:	83 c4 10             	add    esp,0x10
c001e67e:	89 f7                	mov    edi,esi
c001e680:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e684:	e9 b0 fe ff ff       	jmp    c001e539 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e689:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e68f:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e695:	75 1c                	jne    c001e6b3 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e697:	83 ec 0c             	sub    esp,0xc
c001e69a:	68 c4 c9 02 c0       	push   0xc002c9c4
c001e69f:	e8 97 43 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001e6a4:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e6ab:	e8 91 fa ff ff       	call   c001e141 <blockTask(TaskState)>
c001e6b0:	83 c4 10             	add    esp,0x10
c001e6b3:	83 ec 08             	sub    esp,0x8
c001e6b6:	56                   	push   esi
c001e6b7:	68 04 fc 02 c0       	push   0xc002fc04
c001e6bc:	e8 7f a8 00 00       	call   c0028f40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e6c1:	c7 04 24 04 fc 02 c0 	mov    DWORD PTR [esp],0xc002fc04
c001e6c8:	e8 bd a7 00 00       	call   c0028e8a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6cd:	83 c4 10             	add    esp,0x10
c001e6d0:	39 f8                	cmp    eax,edi
c001e6d2:	0f 84 3e ff ff ff    	je     c001e616 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e6d8:	83 ec 0c             	sub    esp,0xc
c001e6db:	68 04 fc 02 c0       	push   0xc002fc04
c001e6e0:	e8 a5 a7 00 00       	call   c0028e8a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6e5:	c7 04 24 04 fc 02 c0 	mov    DWORD PTR [esp],0xc002fc04
c001e6ec:	89 c6                	mov    esi,eax
c001e6ee:	e8 9f a7 00 00       	call   c0028e92 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e6f3:	83 c4 10             	add    esp,0x10
c001e6f6:	39 f3                	cmp    ebx,esi
c001e6f8:	74 b9                	je     c001e6b3 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e6fa:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e6fd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e700:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e706:	75 ab                	jne    c001e6b3 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e708:	e9 7c ff ff ff       	jmp    c001e689 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e70d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e711:	83 ec 0c             	sub    esp,0xc
c001e714:	68 90 c9 02 c0       	push   0xc002c990
c001e719:	e9 55 ff ff ff       	jmp    c001e673 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e71e:	8b 36                	mov    esi,DWORD PTR [esi]
c001e720:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e724:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e727:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e72a:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e730:	01 d7                	add    edi,edx
c001e732:	89 f8                	mov    eax,edi
c001e734:	e9 66 fe ff ff       	jmp    c001e59f <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e739 <cleanerTaskFunction(void*)>:
c001e739:	53                   	push   ebx
c001e73a:	83 ec 08             	sub    esp,0x8
c001e73d:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001e742:	48                   	dec    eax
c001e743:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c001e748:	75 01                	jne    c001e74b <cleanerTaskFunction(void*)+0x12>
c001e74a:	fb                   	sti    
c001e74b:	fa                   	cli    
c001e74c:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001e751:	80 3d cc fb 02 c0 00 	cmp    BYTE PTR ds:0xc002fbcc,0x0
c001e758:	8d 50 01             	lea    edx,[eax+0x1]
c001e75b:	89 15 e8 fb 02 c0    	mov    DWORD PTR ds:0xc002fbe8,edx
c001e761:	0f 84 a1 00 00 00    	je     c001e808 <cleanerTaskFunction(void*)+0xcf>
c001e767:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c001e76c:	85 c0                	test   eax,eax
c001e76e:	75 01                	jne    c001e771 <cleanerTaskFunction(void*)+0x38>
c001e770:	fb                   	sti    
c001e771:	c6 05 cc fb 02 c0 00 	mov    BYTE PTR ds:0xc002fbcc,0x0
c001e778:	fa                   	cli    
c001e779:	ff 05 e8 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe8
c001e77f:	ff 05 e4 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe4
c001e785:	fa                   	cli    
c001e786:	ff 05 e8 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe8
c001e78c:	eb 26                	jmp    c001e7b4 <cleanerTaskFunction(void*)+0x7b>
c001e78e:	83 ec 0c             	sub    esp,0xc
c001e791:	68 ec fb 02 c0       	push   0xc002fbec
c001e796:	e8 ef a6 00 00       	call   c0028e8a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e79b:	c7 04 24 ec fb 02 c0 	mov    DWORD PTR [esp],0xc002fbec
c001e7a2:	89 c3                	mov    ebx,eax
c001e7a4:	e8 e9 a6 00 00       	call   c0028e92 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e7a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e7ac:	e8 e1 fc ff ff       	call   c001e492 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e7b1:	83 c4 10             	add    esp,0x10
c001e7b4:	83 ec 0c             	sub    esp,0xc
c001e7b7:	68 ec fb 02 c0       	push   0xc002fbec
c001e7bc:	e8 ad a6 00 00       	call   c0028e6e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e7c1:	83 c4 10             	add    esp,0x10
c001e7c4:	84 c0                	test   al,al
c001e7c6:	74 c6                	je     c001e78e <cleanerTaskFunction(void*)+0x55>
c001e7c8:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001e7cd:	48                   	dec    eax
c001e7ce:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c001e7d3:	75 01                	jne    c001e7d6 <cleanerTaskFunction(void*)+0x9d>
c001e7d5:	fb                   	sti    
c001e7d6:	a1 e4 fb 02 c0       	mov    eax,ds:0xc002fbe4
c001e7db:	48                   	dec    eax
c001e7dc:	a3 e4 fb 02 c0       	mov    ds:0xc002fbe4,eax
c001e7e1:	0f 85 56 ff ff ff    	jne    c001e73d <cleanerTaskFunction(void*)+0x4>
c001e7e7:	a1 e0 fb 02 c0       	mov    eax,ds:0xc002fbe0
c001e7ec:	85 c0                	test   eax,eax
c001e7ee:	0f 84 49 ff ff ff    	je     c001e73d <cleanerTaskFunction(void*)+0x4>
c001e7f4:	c7 05 e0 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fbe0,0x0
c001e7fe:	e8 68 f7 ff ff       	call   c001df6b <schedule()>
c001e803:	e9 35 ff ff ff       	jmp    c001e73d <cleanerTaskFunction(void*)+0x4>
c001e808:	83 ec 0c             	sub    esp,0xc
c001e80b:	6a 02                	push   0x2
c001e80d:	e8 09 f9 ff ff       	call   c001e11b <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e812:	83 c4 10             	add    esp,0x10
c001e815:	e9 57 ff ff ff       	jmp    c001e771 <cleanerTaskFunction(void*)+0x38>

c001e81a <terminateTask(int)>:
c001e81a:	83 ec 14             	sub    esp,0x14
c001e81d:	fa                   	cli    
c001e81e:	ff 05 e8 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe8
c001e824:	ff 05 e4 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe4
c001e82a:	fa                   	cli    
c001e82b:	ff 05 e8 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe8
c001e831:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e835:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e83a:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e83d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e842:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e845:	50                   	push   eax
c001e846:	68 ec fb 02 c0       	push   0xc002fbec
c001e84b:	e8 f0 a6 00 00       	call   c0028f40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e850:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e855:	83 c4 10             	add    esp,0x10
c001e858:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e85f:	a1 c8 fb 02 c0       	mov    eax,ds:0xc002fbc8
c001e864:	85 c0                	test   eax,eax
c001e866:	74 53                	je     c001e8bb <terminateTask(int)+0xa1>
c001e868:	83 ec 0c             	sub    esp,0xc
c001e86b:	c6 05 cc fb 02 c0 01 	mov    BYTE PTR ds:0xc002fbcc,0x1
c001e872:	50                   	push   eax
c001e873:	e8 85 fb ff ff       	call   c001e3fd <unblockTask(ThreadControlBlock*)>
c001e878:	83 c4 10             	add    esp,0x10
c001e87b:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001e880:	48                   	dec    eax
c001e881:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c001e886:	75 01                	jne    c001e889 <terminateTask(int)+0x6f>
c001e888:	fb                   	sti    
c001e889:	a1 e4 fb 02 c0       	mov    eax,ds:0xc002fbe4
c001e88e:	48                   	dec    eax
c001e88f:	a3 e4 fb 02 c0       	mov    ds:0xc002fbe4,eax
c001e894:	75 09                	jne    c001e89f <terminateTask(int)+0x85>
c001e896:	83 3d e0 fb 02 c0 00 	cmp    DWORD PTR ds:0xc002fbe0,0x0
c001e89d:	75 2e                	jne    c001e8cd <terminateTask(int)+0xb3>
c001e89f:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001e8a4:	48                   	dec    eax
c001e8a5:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c001e8aa:	75 01                	jne    c001e8ad <terminateTask(int)+0x93>
c001e8ac:	fb                   	sti    
c001e8ad:	fa                   	cli    
c001e8ae:	ff 05 e8 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe8
c001e8b4:	e8 b2 f6 ff ff       	call   c001df6b <schedule()>
c001e8b9:	eb e4                	jmp    c001e89f <terminateTask(int)+0x85>
c001e8bb:	83 ec 0c             	sub    esp,0xc
c001e8be:	68 c1 c8 02 c0       	push   0xc002c8c1
c001e8c3:	e8 73 41 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001e8c8:	83 c4 10             	add    esp,0x10
c001e8cb:	eb ae                	jmp    c001e87b <terminateTask(int)+0x61>
c001e8cd:	c7 05 e0 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fbe0,0x0
c001e8d7:	eb db                	jmp    c001e8b4 <terminateTask(int)+0x9a>

c001e8d9 <Thr::terminateFromIRQ(int)>:
c001e8d9:	83 ec 18             	sub    esp,0x18
c001e8dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8e0:	e8 35 ff ff ff       	call   c001e81a <terminateTask(int)>
c001e8e5:	90                   	nop

c001e8e6 <Semaphore::release()>:
c001e8e6:	83 ec 0c             	sub    esp,0xc
c001e8e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e8ed:	fa                   	cli    
c001e8ee:	a1 e4 fb 02 c0       	mov    eax,ds:0xc002fbe4
c001e8f3:	ff 05 e8 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe8
c001e8f9:	8d 48 01             	lea    ecx,[eax+0x1]
c001e8fc:	89 0d e4 fb 02 c0    	mov    DWORD PTR ds:0xc002fbe4,ecx
c001e902:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e905:	85 c9                	test   ecx,ecx
c001e907:	74 3c                	je     c001e945 <Semaphore::release()+0x5f>
c001e909:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e90c:	83 ec 0c             	sub    esp,0xc
c001e90f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e912:	51                   	push   ecx
c001e913:	e8 e5 fa ff ff       	call   c001e3fd <unblockTask(ThreadControlBlock*)>
c001e918:	a1 e4 fb 02 c0       	mov    eax,ds:0xc002fbe4
c001e91d:	83 c4 10             	add    esp,0x10
c001e920:	48                   	dec    eax
c001e921:	a3 e4 fb 02 c0       	mov    ds:0xc002fbe4,eax
c001e926:	85 c0                	test   eax,eax
c001e928:	75 09                	jne    c001e933 <Semaphore::release()+0x4d>
c001e92a:	a1 e0 fb 02 c0       	mov    eax,ds:0xc002fbe0
c001e92f:	85 c0                	test   eax,eax
c001e931:	75 17                	jne    c001e94a <Semaphore::release()+0x64>
c001e933:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001e938:	48                   	dec    eax
c001e939:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c001e93e:	75 01                	jne    c001e941 <Semaphore::release()+0x5b>
c001e940:	fb                   	sti    
c001e941:	83 c4 0c             	add    esp,0xc
c001e944:	c3                   	ret    
c001e945:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e948:	eb d7                	jmp    c001e921 <Semaphore::release()+0x3b>
c001e94a:	c7 05 e0 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fbe0,0x0
c001e954:	e8 12 f6 ff ff       	call   c001df6b <schedule()>
c001e959:	eb d8                	jmp    c001e933 <Semaphore::release()+0x4d>

c001e95b <__static_initialization_and_destruction_0(int, int)>:
c001e95b:	83 ec 0c             	sub    esp,0xc
c001e95e:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e963:	0f 85 88 00 00 00    	jne    c001e9f1 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e969:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e971:	75 7e                	jne    c001e9f1 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e973:	83 ec 0c             	sub    esp,0xc
c001e976:	68 04 fc 02 c0       	push   0xc002fc04
c001e97b:	e8 50 a8 00 00       	call   c00291d0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e980:	83 c4 10             	add    esp,0x10
c001e983:	83 ec 04             	sub    esp,0x4
c001e986:	68 a4 d4 02 c0       	push   0xc002d4a4
c001e98b:	68 04 fc 02 c0       	push   0xc002fc04
c001e990:	68 84 91 02 c0       	push   0xc0029184
c001e995:	e8 43 3f ff ff       	call   c00128dd <__cxa_atexit>
c001e99a:	83 c4 10             	add    esp,0x10
c001e99d:	83 ec 0c             	sub    esp,0xc
c001e9a0:	68 f8 fb 02 c0       	push   0xc002fbf8
c001e9a5:	e8 26 a8 00 00       	call   c00291d0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9aa:	83 c4 10             	add    esp,0x10
c001e9ad:	83 ec 04             	sub    esp,0x4
c001e9b0:	68 a4 d4 02 c0       	push   0xc002d4a4
c001e9b5:	68 f8 fb 02 c0       	push   0xc002fbf8
c001e9ba:	68 84 91 02 c0       	push   0xc0029184
c001e9bf:	e8 19 3f ff ff       	call   c00128dd <__cxa_atexit>
c001e9c4:	83 c4 10             	add    esp,0x10
c001e9c7:	83 ec 0c             	sub    esp,0xc
c001e9ca:	68 ec fb 02 c0       	push   0xc002fbec
c001e9cf:	e8 fc a7 00 00       	call   c00291d0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9d4:	83 c4 10             	add    esp,0x10
c001e9d7:	83 ec 04             	sub    esp,0x4
c001e9da:	68 a4 d4 02 c0       	push   0xc002d4a4
c001e9df:	68 ec fb 02 c0       	push   0xc002fbec
c001e9e4:	68 84 91 02 c0       	push   0xc0029184
c001e9e9:	e8 ef 3e ff ff       	call   c00128dd <__cxa_atexit>
c001e9ee:	83 c4 10             	add    esp,0x10
c001e9f1:	90                   	nop
c001e9f2:	83 c4 0c             	add    esp,0xc
c001e9f5:	c3                   	ret    

c001e9f6 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e9f6:	83 ec 0c             	sub    esp,0xc
c001e9f9:	83 ec 08             	sub    esp,0x8
c001e9fc:	68 ff ff 00 00       	push   0xffff
c001ea01:	6a 01                	push   0x1
c001ea03:	e8 53 ff ff ff       	call   c001e95b <__static_initialization_and_destruction_0(int, int)>
c001ea08:	83 c4 10             	add    esp,0x10
c001ea0b:	83 c4 0c             	add    esp,0xc
c001ea0e:	c3                   	ret    

c001ea0f <Vm::inbv(unsigned short)>:
c001ea0f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea13:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea18:	75 06                	jne    c001ea20 <Vm::inbv(unsigned short)+0x11>
c001ea1a:	a0 4c fc 02 c0       	mov    al,ds:0xc002fc4c
c001ea1f:	c3                   	ret    
c001ea20:	ec                   	in     al,dx
c001ea21:	c3                   	ret    

c001ea22 <Vm::outbv(unsigned short, unsigned char)>:
c001ea22:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ea2a:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea2f:	75 25                	jne    c001ea56 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001ea31:	8b 0d 4c fc 02 c0    	mov    ecx,DWORD PTR ds:0xc002fc4c
c001ea37:	8d 51 01             	lea    edx,[ecx+0x1]
c001ea3a:	88 81 60 fc 02 c0    	mov    BYTE PTR [ecx-0x3ffd03a0],al
c001ea40:	89 15 4c fc 02 c0    	mov    DWORD PTR ds:0xc002fc4c,edx
c001ea46:	83 fa 20             	cmp    edx,0x20
c001ea49:	75 0c                	jne    c001ea57 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001ea4b:	c7 05 4c fc 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002fc4c,0x1f
c001ea55:	c3                   	ret    
c001ea56:	ee                   	out    dx,al
c001ea57:	c3                   	ret    

c001ea58 <Vm::realToLinear(unsigned short, unsigned short)>:
c001ea58:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea5d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea62:	c1 e0 04             	shl    eax,0x4
c001ea65:	01 d0                	add    eax,edx
c001ea67:	c3                   	ret    

c001ea68 <Vm::getSegment(unsigned int)>:
c001ea68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea6c:	c1 e8 10             	shr    eax,0x10
c001ea6f:	c3                   	ret    

c001ea70 <Vm::getOffset(unsigned int)>:
c001ea70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea74:	c3                   	ret    

c001ea75 <Vm::mainloop2()>:
c001ea75:	83 ec 18             	sub    esp,0x18
c001ea78:	fa                   	cli    
c001ea79:	ff 05 e8 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe8
c001ea7f:	6a 02                	push   0x2
c001ea81:	c6 05 45 fc 02 c0 01 	mov    BYTE PTR ds:0xc002fc45,0x1
c001ea88:	e8 8e f6 ff ff       	call   c001e11b <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ea8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea92:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ea96:	52                   	push   edx
c001ea97:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001ea9b:	52                   	push   edx
c001ea9c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001eaa0:	52                   	push   edx
c001eaa1:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001eaa5:	50                   	push   eax
c001eaa6:	e8 4f 18 fe ff       	call   c00002fa <goToVM86>
c001eaab:	83 c4 2c             	add    esp,0x2c
c001eaae:	c3                   	ret    

c001eaaf <Vm::mainVm8086Loop(void*)>:
c001eaaf:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001eab4:	48                   	dec    eax
c001eab5:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c001eaba:	75 01                	jne    c001eabd <Vm::mainVm8086Loop(void*)+0xe>
c001eabc:	fb                   	sti    
c001eabd:	eb b6                	jmp    c001ea75 <Vm::mainloop2()>

c001eabf <Vm::mainloop3(unsigned long)>:
c001eabf:	83 ec 18             	sub    esp,0x18
c001eac2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eac6:	fa                   	cli    
c001eac7:	ff 05 e8 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe8
c001eacd:	6a 02                	push   0x2
c001eacf:	c6 05 44 fc 02 c0 01 	mov    BYTE PTR ds:0xc002fc44,0x1
c001ead6:	a3 40 fc 02 c0       	mov    ds:0xc002fc40,eax
c001eadb:	e8 3b f6 ff ff       	call   c001e11b <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eae0:	83 c4 1c             	add    esp,0x1c
c001eae3:	eb 90                	jmp    c001ea75 <Vm::mainloop2()>

c001eae5 <Vm::initialise8086()>:
c001eae5:	83 ec 0c             	sub    esp,0xc
c001eae8:	68 80 00 00 00       	push   0x80
c001eaed:	6a 00                	push   0x0
c001eaef:	68 af ea 01 c0       	push   0xc001eaaf
c001eaf4:	ff 35 10 fc 02 c0    	push   DWORD PTR ds:0xc002fc10
c001eafa:	e8 47 f2 ff ff       	call   c001dd46 <Process::createThread(void (*)(void*), void*, int)>
c001eaff:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001eb06:	a3 48 fc 02 c0       	mov    ds:0xc002fc48,eax
c001eb0b:	68 00 01 00 00       	push   0x100
c001eb10:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c001eb15:	6a 00                	push   0x0
c001eb17:	6a 00                	push   0x0
c001eb19:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001eb1f:	e8 e2 34 ff ff       	call   c0012006 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eb24:	83 c4 2c             	add    esp,0x2c
c001eb27:	c3                   	ret    

c001eb28 <Vm::finish8086()>:
c001eb28:	53                   	push   ebx
c001eb29:	83 ec 08             	sub    esp,0x8
c001eb2c:	fa                   	cli    
c001eb2d:	ff 05 e8 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe8
c001eb33:	80 3d 44 fc 02 c0 00 	cmp    BYTE PTR ds:0xc002fc44,0x0
c001eb3a:	75 15                	jne    c001eb51 <Vm::finish8086()+0x29>
c001eb3c:	e8 2a f4 ff ff       	call   c001df6b <schedule()>
c001eb41:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001eb46:	48                   	dec    eax
c001eb47:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c001eb4c:	75 de                	jne    c001eb2c <Vm::finish8086()+0x4>
c001eb4e:	fb                   	sti    
c001eb4f:	eb db                	jmp    c001eb2c <Vm::finish8086()+0x4>
c001eb51:	83 ec 0c             	sub    esp,0xc
c001eb54:	8b 1d 40 fc 02 c0    	mov    ebx,DWORD PTR ds:0xc002fc40
c001eb5a:	ff 35 48 fc 02 c0    	push   DWORD PTR ds:0xc002fc48
c001eb60:	c6 05 44 fc 02 c0 00 	mov    BYTE PTR ds:0xc002fc44,0x0
c001eb67:	e8 91 f8 ff ff       	call   c001e3fd <unblockTask(ThreadControlBlock*)>
c001eb6c:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001eb71:	83 c4 10             	add    esp,0x10
c001eb74:	8d 50 ff             	lea    edx,[eax-0x1]
c001eb77:	89 15 e8 fb 02 c0    	mov    DWORD PTR ds:0xc002fbe8,edx
c001eb7d:	85 d2                	test   edx,edx
c001eb7f:	75 01                	jne    c001eb82 <Vm::finish8086()+0x5a>
c001eb81:	fb                   	sti    
c001eb82:	89 d8                	mov    eax,ebx
c001eb84:	83 c4 08             	add    esp,0x8
c001eb87:	5b                   	pop    ebx
c001eb88:	c3                   	ret    

c001eb89 <Vm::getOutput8086(unsigned char*)>:
c001eb89:	57                   	push   edi
c001eb8a:	8b 0d 4c fc 02 c0    	mov    ecx,DWORD PTR ds:0xc002fc4c
c001eb90:	56                   	push   esi
c001eb91:	be 60 fc 02 c0       	mov    esi,0xc002fc60
c001eb96:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001eb9a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001eb9c:	a1 4c fc 02 c0       	mov    eax,ds:0xc002fc4c
c001eba1:	5e                   	pop    esi
c001eba2:	c7 05 4c fc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fc4c,0x0
c001ebac:	5f                   	pop    edi
c001ebad:	c3                   	ret    

c001ebae <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ebae:	55                   	push   ebp
c001ebaf:	57                   	push   edi
c001ebb0:	56                   	push   esi
c001ebb1:	53                   	push   ebx
c001ebb2:	83 ec 2c             	sub    esp,0x2c
c001ebb5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ebb9:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001ebbd:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001ebc1:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001ebc5:	fa                   	cli    
c001ebc6:	ff 05 e8 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe8
c001ebcc:	0f b6 35 45 fc 02 c0 	movzx  esi,BYTE PTR ds:0xc002fc45
c001ebd3:	89 f0                	mov    eax,esi
c001ebd5:	84 c0                	test   al,al
c001ebd7:	75 1d                	jne    c001ebf6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001ebd9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ebdd:	e8 89 f3 ff ff       	call   c001df6b <schedule()>
c001ebe2:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001ebe7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ebeb:	48                   	dec    eax
c001ebec:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c001ebf1:	75 d2                	jne    c001ebc5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ebf3:	fb                   	sti    
c001ebf4:	eb cf                	jmp    c001ebc5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ebf6:	a1 48 fc 02 c0       	mov    eax,ds:0xc002fc48
c001ebfb:	c7 05 4c fc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fc4c,0x0
c001ec05:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001ec09:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001ec0d:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001ec11:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001ec15:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ec19:	50                   	push   eax
c001ec1a:	6a 20                	push   0x20
c001ec1c:	6a 00                	push   0x0
c001ec1e:	68 60 fc 02 c0       	push   0xc002fc60
c001ec23:	e8 28 1b fe ff       	call   c0000750 <memset>
c001ec28:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ec2f:	e8 af 0d ff ff       	call   c000f9e3 <malloc>
c001ec34:	83 c4 0c             	add    esp,0xc
c001ec37:	89 c3                	mov    ebx,eax
c001ec39:	ff 35 10 fc 02 c0    	push   DWORD PTR ds:0xc002fc10
c001ec3f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ec43:	50                   	push   eax
c001ec44:	e8 51 43 ff ff       	call   c0012f9a <File::File(char const*, Process*)>
c001ec49:	83 c4 10             	add    esp,0x10
c001ec4c:	85 db                	test   ebx,ebx
c001ec4e:	75 0a                	jne    c001ec5a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001ec50:	83 ec 0c             	sub    esp,0xc
c001ec53:	68 ec c9 02 c0       	push   0xc002c9ec
c001ec58:	eb 3e                	jmp    c001ec98 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001ec5a:	50                   	push   eax
c001ec5b:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ec5f:	50                   	push   eax
c001ec60:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ec64:	50                   	push   eax
c001ec65:	53                   	push   ebx
c001ec66:	e8 3f 46 ff ff       	call   c00132aa <File::stat(unsigned long long*, bool*)>
c001ec6b:	83 c4 10             	add    esp,0x10
c001ec6e:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001ec73:	74 0a                	je     c001ec7f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ec75:	83 ec 0c             	sub    esp,0xc
c001ec78:	68 00 ca 02 c0       	push   0xc002ca00
c001ec7d:	eb 19                	jmp    c001ec98 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001ec7f:	51                   	push   ecx
c001ec80:	51                   	push   ecx
c001ec81:	6a 01                	push   0x1
c001ec83:	53                   	push   ebx
c001ec84:	e8 75 43 ff ff       	call   c0012ffe <File::open(FileOpenMode)>
c001ec89:	83 c4 10             	add    esp,0x10
c001ec8c:	85 c0                	test   eax,eax
c001ec8e:	74 24                	je     c001ecb4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001ec90:	83 ec 0c             	sub    esp,0xc
c001ec93:	68 19 ca 02 c0       	push   0xc002ca19
c001ec98:	e8 3c b7 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c001ec9d:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001eca2:	83 c4 10             	add    esp,0x10
c001eca5:	48                   	dec    eax
c001eca6:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c001ecab:	85 c0                	test   eax,eax
c001ecad:	75 01                	jne    c001ecb0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001ecaf:	fb                   	sti    
c001ecb0:	31 f6                	xor    esi,esi
c001ecb2:	eb 58                	jmp    c001ed0c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001ecb4:	0f b7 ed             	movzx  ebp,bp
c001ecb7:	50                   	push   eax
c001ecb8:	0f b7 ff             	movzx  edi,di
c001ecbb:	50                   	push   eax
c001ecbc:	55                   	push   ebp
c001ecbd:	57                   	push   edi
c001ecbe:	e8 95 fd ff ff       	call   c001ea58 <Vm::realToLinear(unsigned short, unsigned short)>
c001ecc3:	5a                   	pop    edx
c001ecc4:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ecc6:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ecca:	51                   	push   ecx
c001eccb:	50                   	push   eax
c001eccc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ecd0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ecd4:	53                   	push   ebx
c001ecd5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ecd8:	83 c4 14             	add    esp,0x14
c001ecdb:	53                   	push   ebx
c001ecdc:	e8 7b 43 ff ff       	call   c001305c <File::close()>
c001ece1:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c001ece6:	83 c4 10             	add    esp,0x10
c001ece9:	48                   	dec    eax
c001ecea:	c6 05 45 fc 02 c0 00 	mov    BYTE PTR ds:0xc002fc45,0x0
c001ecf1:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c001ecf6:	85 c0                	test   eax,eax
c001ecf8:	75 01                	jne    c001ecfb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001ecfa:	fb                   	sti    
c001ecfb:	83 ec 0c             	sub    esp,0xc
c001ecfe:	ff 35 48 fc 02 c0    	push   DWORD PTR ds:0xc002fc48
c001ed04:	e8 f4 f6 ff ff       	call   c001e3fd <unblockTask(ThreadControlBlock*)>
c001ed09:	83 c4 10             	add    esp,0x10
c001ed0c:	83 c4 2c             	add    esp,0x2c
c001ed0f:	89 f0                	mov    eax,esi
c001ed11:	5b                   	pop    ebx
c001ed12:	5e                   	pop    esi
c001ed13:	5f                   	pop    edi
c001ed14:	5d                   	pop    ebp
c001ed15:	c3                   	ret    

c001ed16 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ed16:	57                   	push   edi
c001ed17:	56                   	push   esi
c001ed18:	53                   	push   ebx
c001ed19:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ed1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed21:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ed25:	83 e8 06             	sub    eax,0x6
c001ed28:	0f b7 c0             	movzx  eax,ax
c001ed2b:	50                   	push   eax
c001ed2c:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ed31:	50                   	push   eax
c001ed32:	e8 21 fd ff ff       	call   c001ea58 <Vm::realToLinear(unsigned short, unsigned short)>
c001ed37:	5a                   	pop    edx
c001ed38:	5e                   	pop    esi
c001ed39:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ed3c:	8d 56 fa             	lea    edx,[esi-0x6]
c001ed3f:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ed45:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ed48:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ed4b:	83 c2 02             	add    edx,0x2
c001ed4e:	66 89 10             	mov    WORD PTR [eax],dx
c001ed51:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ed54:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ed58:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ed5b:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ed5f:	89 d6                	mov    esi,edx
c001ed61:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ed67:	66 81 e6 ff fd       	and    si,0xfdff
c001ed6c:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ed70:	74 07                	je     c001ed79 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ed72:	89 d6                	mov    esi,edx
c001ed74:	66 81 ce 00 02       	or     si,0x200
c001ed79:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ed7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed82:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ed86:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ed8e:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ed91:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ed99:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ed9c:	5b                   	pop    ebx
c001ed9d:	5e                   	pop    esi
c001ed9e:	5f                   	pop    edi
c001ed9f:	c3                   	ret    

c001eda0 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001eda0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eda5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edaa:	c1 e0 04             	shl    eax,0x4
c001edad:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001edb0:	c3                   	ret    

c001edb1 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001edb1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edb6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edbb:	c1 e0 04             	shl    eax,0x4
c001edbe:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001edc2:	c3                   	ret    

c001edc3 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001edc3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edc8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edcd:	c1 e0 04             	shl    eax,0x4
c001edd0:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001edd3:	c3                   	ret    

c001edd4 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001edd4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edd9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edde:	c1 e0 04             	shl    eax,0x4
c001ede1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ede5:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ede8:	c3                   	ret    

c001ede9 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ede9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edee:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edf3:	c1 e0 04             	shl    eax,0x4
c001edf6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edfa:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001edfe:	c3                   	ret    

c001edff <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001edff:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee04:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee09:	c1 e0 04             	shl    eax,0x4
c001ee0c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee10:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ee13:	c3                   	ret    

c001ee14 <Vm::faultHandler(regs*)>:
c001ee14:	55                   	push   ebp
c001ee15:	57                   	push   edi
c001ee16:	56                   	push   esi
c001ee17:	53                   	push   ebx
c001ee18:	83 ec 1c             	sub    esp,0x1c
c001ee1b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ee1f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001ee22:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001ee26:	0f b7 f8             	movzx  edi,ax
c001ee29:	52                   	push   edx
c001ee2a:	0f b7 c0             	movzx  eax,ax
c001ee2d:	50                   	push   eax
c001ee2e:	e8 25 fc ff ff       	call   c001ea58 <Vm::realToLinear(unsigned short, unsigned short)>
c001ee33:	5a                   	pop    edx
c001ee34:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001ee37:	59                   	pop    ecx
c001ee38:	89 c1                	mov    ecx,eax
c001ee3a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ee3d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ee41:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ee4a:	0f b7 c5             	movzx  eax,bp
c001ee4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee51:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001ee55:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ee59:	e8 fa fb ff ff       	call   c001ea58 <Vm::realToLinear(unsigned short, unsigned short)>
c001ee5e:	5e                   	pop    esi
c001ee5f:	be 06 00 00 00       	mov    esi,0x6
c001ee64:	5a                   	pop    edx
c001ee65:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001ee6a:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001ee6f:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001ee72:	80 fa 9d             	cmp    dl,0x9d
c001ee75:	0f 84 2c 02 00 00    	je     c001f0a7 <Vm::faultHandler(regs*)+0x293>
c001ee7b:	0f 87 91 00 00 00    	ja     c001ef12 <Vm::faultHandler(regs*)+0xfe>
c001ee81:	80 fa 66             	cmp    dl,0x66
c001ee84:	0f 84 98 01 00 00    	je     c001f022 <Vm::faultHandler(regs*)+0x20e>
c001ee8a:	77 47                	ja     c001eed3 <Vm::faultHandler(regs*)+0xbf>
c001ee8c:	80 fa 36             	cmp    dl,0x36
c001ee8f:	0f 84 80 01 00 00    	je     c001f015 <Vm::faultHandler(regs*)+0x201>
c001ee95:	77 1a                	ja     c001eeb1 <Vm::faultHandler(regs*)+0x9d>
c001ee97:	80 fa 26             	cmp    dl,0x26
c001ee9a:	0f 84 4e 01 00 00    	je     c001efee <Vm::faultHandler(regs*)+0x1da>
c001eea0:	80 fa 2e             	cmp    dl,0x2e
c001eea3:	0f 85 e2 05 00 00    	jne    c001f48b <Vm::faultHandler(regs*)+0x677>
c001eea9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eeac:	31 f6                	xor    esi,esi
c001eeae:	41                   	inc    ecx
c001eeaf:	eb be                	jmp    c001ee6f <Vm::faultHandler(regs*)+0x5b>
c001eeb1:	80 fa 64             	cmp    dl,0x64
c001eeb4:	0f 84 41 01 00 00    	je     c001effb <Vm::faultHandler(regs*)+0x1e7>
c001eeba:	0f 87 48 01 00 00    	ja     c001f008 <Vm::faultHandler(regs*)+0x1f4>
c001eec0:	80 fa 3e             	cmp    dl,0x3e
c001eec3:	0f 85 c2 05 00 00    	jne    c001f48b <Vm::faultHandler(regs*)+0x677>
c001eec9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eecc:	be 01 00 00 00       	mov    esi,0x1
c001eed1:	eb db                	jmp    c001eeae <Vm::faultHandler(regs*)+0x9a>
c001eed3:	80 fa 6d             	cmp    dl,0x6d
c001eed6:	0f 84 ec 02 00 00    	je     c001f1c8 <Vm::faultHandler(regs*)+0x3b4>
c001eedc:	77 17                	ja     c001eef5 <Vm::faultHandler(regs*)+0xe1>
c001eede:	80 fa 67             	cmp    dl,0x67
c001eee1:	0f 84 48 01 00 00    	je     c001f02f <Vm::faultHandler(regs*)+0x21b>
c001eee7:	80 fa 6c             	cmp    dl,0x6c
c001eeea:	0f 84 69 02 00 00    	je     c001f159 <Vm::faultHandler(regs*)+0x345>
c001eef0:	e9 96 05 00 00       	jmp    c001f48b <Vm::faultHandler(regs*)+0x677>
c001eef5:	80 fa 6f             	cmp    dl,0x6f
c001eef8:	0f 84 f4 03 00 00    	je     c001f2f2 <Vm::faultHandler(regs*)+0x4de>
c001eefe:	0f 82 59 03 00 00    	jb     c001f25d <Vm::faultHandler(regs*)+0x449>
c001ef04:	80 fa 9c             	cmp    dl,0x9c
c001ef07:	0f 84 2f 01 00 00    	je     c001f03c <Vm::faultHandler(regs*)+0x228>
c001ef0d:	e9 79 05 00 00       	jmp    c001f48b <Vm::faultHandler(regs*)+0x677>
c001ef12:	80 fa ec             	cmp    dl,0xec
c001ef15:	0f 84 14 05 00 00    	je     c001f42f <Vm::faultHandler(regs*)+0x61b>
c001ef1b:	77 7b                	ja     c001ef98 <Vm::faultHandler(regs*)+0x184>
c001ef1d:	80 fa e4             	cmp    dl,0xe4
c001ef20:	0f 84 93 04 00 00    	je     c001f3b9 <Vm::faultHandler(regs*)+0x5a5>
c001ef26:	77 53                	ja     c001ef7b <Vm::faultHandler(regs*)+0x167>
c001ef28:	80 fa cd             	cmp    dl,0xcd
c001ef2b:	0f 84 d9 01 00 00    	je     c001f10a <Vm::faultHandler(regs*)+0x2f6>
c001ef31:	80 fa cf             	cmp    dl,0xcf
c001ef34:	0f 85 51 05 00 00    	jne    c001f48b <Vm::faultHandler(regs*)+0x677>
c001ef3a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001ef3d:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001ef40:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001ef44:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001ef47:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001ef4b:	81 ca 00 02 02 00    	or     edx,0x20200
c001ef51:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ef54:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001ef58:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ef5e:	66 c1 e8 09          	shr    ax,0x9
c001ef62:	83 e0 01             	and    eax,0x1
c001ef65:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ef68:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ef6b:	83 c0 06             	add    eax,0x6
c001ef6e:	25 ff ff 00 00       	and    eax,0xffff
c001ef73:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ef76:	e9 0c 05 00 00       	jmp    c001f487 <Vm::faultHandler(regs*)+0x673>
c001ef7b:	80 fa e6             	cmp    dl,0xe6
c001ef7e:	0f 84 7f 04 00 00    	je     c001f403 <Vm::faultHandler(regs*)+0x5ef>
c001ef84:	0f 82 4b 04 00 00    	jb     c001f3d5 <Vm::faultHandler(regs*)+0x5c1>
c001ef8a:	80 fa e7             	cmp    dl,0xe7
c001ef8d:	0f 84 87 04 00 00    	je     c001f41a <Vm::faultHandler(regs*)+0x606>
c001ef93:	e9 f3 04 00 00       	jmp    c001f48b <Vm::faultHandler(regs*)+0x677>
c001ef98:	80 fa ef             	cmp    dl,0xef
c001ef9b:	0f 84 d1 04 00 00    	je     c001f472 <Vm::faultHandler(regs*)+0x65e>
c001efa1:	77 28                	ja     c001efcb <Vm::faultHandler(regs*)+0x1b7>
c001efa3:	80 fa ed             	cmp    dl,0xed
c001efa6:	0f 84 9f 04 00 00    	je     c001f44b <Vm::faultHandler(regs*)+0x637>
c001efac:	80 fa ee             	cmp    dl,0xee
c001efaf:	0f 85 d6 04 00 00    	jne    c001f48b <Vm::faultHandler(regs*)+0x677>
c001efb5:	50                   	push   eax
c001efb6:	50                   	push   eax
c001efb7:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001efbb:	50                   	push   eax
c001efbc:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001efc0:	50                   	push   eax
c001efc1:	e8 5c fa ff ff       	call   c001ea22 <Vm::outbv(unsigned short, unsigned char)>
c001efc6:	e9 9f 04 00 00       	jmp    c001f46a <Vm::faultHandler(regs*)+0x656>
c001efcb:	80 fa fa             	cmp    dl,0xfa
c001efce:	0f 84 69 01 00 00    	je     c001f13d <Vm::faultHandler(regs*)+0x329>
c001efd4:	80 fa fb             	cmp    dl,0xfb
c001efd7:	0f 84 6e 01 00 00    	je     c001f14b <Vm::faultHandler(regs*)+0x337>
c001efdd:	80 fa f3             	cmp    dl,0xf3
c001efe0:	0f 85 a5 04 00 00    	jne    c001f48b <Vm::faultHandler(regs*)+0x677>
c001efe6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001efe9:	e9 c0 fe ff ff       	jmp    c001eeae <Vm::faultHandler(regs*)+0x9a>
c001efee:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eff1:	be 02 00 00 00       	mov    esi,0x2
c001eff6:	e9 b3 fe ff ff       	jmp    c001eeae <Vm::faultHandler(regs*)+0x9a>
c001effb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001effe:	be 03 00 00 00       	mov    esi,0x3
c001f003:	e9 a6 fe ff ff       	jmp    c001eeae <Vm::faultHandler(regs*)+0x9a>
c001f008:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f00b:	be 04 00 00 00       	mov    esi,0x4
c001f010:	e9 99 fe ff ff       	jmp    c001eeae <Vm::faultHandler(regs*)+0x9a>
c001f015:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f018:	be 05 00 00 00       	mov    esi,0x5
c001f01d:	e9 8c fe ff ff       	jmp    c001eeae <Vm::faultHandler(regs*)+0x9a>
c001f022:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f025:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001f02a:	e9 7f fe ff ff       	jmp    c001eeae <Vm::faultHandler(regs*)+0x9a>
c001f02f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f032:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001f037:	e9 72 fe ff ff       	jmp    c001eeae <Vm::faultHandler(regs*)+0x9a>
c001f03c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001f03f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f043:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f048:	74 30                	je     c001f07a <Vm::faultHandler(regs*)+0x266>
c001f04a:	83 e9 04             	sub    ecx,0x4
c001f04d:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f053:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f059:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f05c:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f05f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f065:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f069:	0f 84 15 04 00 00    	je     c001f484 <Vm::faultHandler(regs*)+0x670>
c001f06f:	80 ce 02             	or     dh,0x2
c001f072:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f075:	e9 0a 04 00 00       	jmp    c001f484 <Vm::faultHandler(regs*)+0x670>
c001f07a:	83 e9 02             	sub    ecx,0x2
c001f07d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f083:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f086:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f08a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f090:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f094:	74 05                	je     c001f09b <Vm::faultHandler(regs*)+0x287>
c001f096:	80 ce 02             	or     dh,0x2
c001f099:	eb 03                	jmp    c001f09e <Vm::faultHandler(regs*)+0x28a>
c001f09b:	80 e6 fd             	and    dh,0xfd
c001f09e:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f0a2:	e9 dd 03 00 00       	jmp    c001f484 <Vm::faultHandler(regs*)+0x670>
c001f0a7:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f0ac:	74 2a                	je     c001f0d8 <Vm::faultHandler(regs*)+0x2c4>
c001f0ae:	8b 10                	mov    edx,DWORD PTR [eax]
c001f0b0:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f0b6:	81 ca 00 02 02 00    	or     edx,0x20200
c001f0bc:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f0bf:	8b 00                	mov    eax,DWORD PTR [eax]
c001f0c1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f0c7:	c1 e8 09             	shr    eax,0x9
c001f0ca:	83 e0 01             	and    eax,0x1
c001f0cd:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f0d0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f0d3:	83 c0 04             	add    eax,0x4
c001f0d6:	eb 25                	jmp    c001f0fd <Vm::faultHandler(regs*)+0x2e9>
c001f0d8:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f0db:	81 ca 00 02 02 00    	or     edx,0x20200
c001f0e1:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f0e4:	66 8b 00             	mov    ax,WORD PTR [eax]
c001f0e7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f0ed:	66 c1 e8 09          	shr    ax,0x9
c001f0f1:	83 e0 01             	and    eax,0x1
c001f0f4:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f0f7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f0fa:	83 c0 02             	add    eax,0x2
c001f0fd:	25 ff ff 00 00       	and    eax,0xffff
c001f102:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f105:	e9 7a 03 00 00       	jmp    c001f484 <Vm::faultHandler(regs*)+0x670>
c001f10a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f10e:	3c ee                	cmp    al,0xee
c001f110:	75 10                	jne    c001f122 <Vm::faultHandler(regs*)+0x30e>
c001f112:	83 ec 0c             	sub    esp,0xc
c001f115:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001f118:	e8 a2 f9 ff ff       	call   c001eabf <Vm::mainloop3(unsigned long)>
c001f11d:	e9 4b 03 00 00       	jmp    c001f46d <Vm::faultHandler(regs*)+0x659>
c001f122:	83 ec 0c             	sub    esp,0xc
c001f125:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f129:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f12d:	51                   	push   ecx
c001f12e:	50                   	push   eax
c001f12f:	53                   	push   ebx
c001f130:	e8 e1 fb ff ff       	call   c001ed16 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f135:	83 c4 20             	add    esp,0x20
c001f138:	e9 4a 03 00 00       	jmp    c001f487 <Vm::faultHandler(regs*)+0x673>
c001f13d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f142:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f146:	e9 39 03 00 00       	jmp    c001f484 <Vm::faultHandler(regs*)+0x670>
c001f14b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f150:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f154:	e9 2b 03 00 00       	jmp    c001f484 <Vm::faultHandler(regs*)+0x670>
c001f159:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f15c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f161:	74 2b                	je     c001f18e <Vm::faultHandler(regs*)+0x37a>
c001f163:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001f16a:	76 22                	jbe    c001f18e <Vm::faultHandler(regs*)+0x37a>
c001f16c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f170:	50                   	push   eax
c001f171:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f175:	50                   	push   eax
c001f176:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f17a:	50                   	push   eax
c001f17b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f17f:	50                   	push   eax
c001f180:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f184:	50                   	push   eax
c001f185:	6a 6c                	push   0x6c
c001f187:	6a 6c                	push   0x6c
c001f189:	e9 b9 01 00 00       	jmp    c001f347 <Vm::faultHandler(regs*)+0x533>
c001f18e:	83 ec 0c             	sub    esp,0xc
c001f191:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f195:	0f b7 f6             	movzx  esi,si
c001f198:	50                   	push   eax
c001f199:	e8 71 f8 ff ff       	call   c001ea0f <Vm::inbv(unsigned short)>
c001f19e:	83 c4 0c             	add    esp,0xc
c001f1a1:	0f b6 c0             	movzx  eax,al
c001f1a4:	50                   	push   eax
c001f1a5:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001f1a9:	50                   	push   eax
c001f1aa:	56                   	push   esi
c001f1ab:	e8 24 fc ff ff       	call   c001edd4 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f1b0:	83 c4 10             	add    esp,0x10
c001f1b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f1b6:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f1ba:	74 03                	je     c001f1bf <Vm::faultHandler(regs*)+0x3ab>
c001f1bc:	48                   	dec    eax
c001f1bd:	eb 01                	jmp    c001f1c0 <Vm::faultHandler(regs*)+0x3ac>
c001f1bf:	40                   	inc    eax
c001f1c0:	0f b7 c0             	movzx  eax,ax
c001f1c3:	e9 8d 00 00 00       	jmp    c001f255 <Vm::faultHandler(regs*)+0x441>
c001f1c8:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f1cb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f1ce:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f1d3:	74 29                	je     c001f1fe <Vm::faultHandler(regs*)+0x3ea>
c001f1d5:	3d ff ff 00 00       	cmp    eax,0xffff
c001f1da:	76 22                	jbe    c001f1fe <Vm::faultHandler(regs*)+0x3ea>
c001f1dc:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f1e0:	50                   	push   eax
c001f1e1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f1e5:	50                   	push   eax
c001f1e6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f1ea:	50                   	push   eax
c001f1eb:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f1ef:	50                   	push   eax
c001f1f0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f1f4:	50                   	push   eax
c001f1f5:	6a 6d                	push   0x6d
c001f1f7:	6a 6d                	push   0x6d
c001f1f9:	e9 49 01 00 00       	jmp    c001f347 <Vm::faultHandler(regs*)+0x533>
c001f1fe:	0f b7 c8             	movzx  ecx,ax
c001f201:	0f b7 f6             	movzx  esi,si
c001f204:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f207:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f20c:	74 20                	je     c001f22e <Vm::faultHandler(regs*)+0x41a>
c001f20e:	ed                   	in     eax,dx
c001f20f:	55                   	push   ebp
c001f210:	50                   	push   eax
c001f211:	51                   	push   ecx
c001f212:	56                   	push   esi
c001f213:	e8 e7 fb ff ff       	call   c001edff <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f218:	83 c4 10             	add    esp,0x10
c001f21b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f21e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f222:	74 05                	je     c001f229 <Vm::faultHandler(regs*)+0x415>
c001f224:	83 e8 04             	sub    eax,0x4
c001f227:	eb 27                	jmp    c001f250 <Vm::faultHandler(regs*)+0x43c>
c001f229:	83 c0 04             	add    eax,0x4
c001f22c:	eb 22                	jmp    c001f250 <Vm::faultHandler(regs*)+0x43c>
c001f22e:	66 ed                	in     ax,dx
c001f230:	0f b7 c0             	movzx  eax,ax
c001f233:	57                   	push   edi
c001f234:	50                   	push   eax
c001f235:	51                   	push   ecx
c001f236:	56                   	push   esi
c001f237:	e8 ad fb ff ff       	call   c001ede9 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f23c:	83 c4 10             	add    esp,0x10
c001f23f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f242:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f246:	74 05                	je     c001f24d <Vm::faultHandler(regs*)+0x439>
c001f248:	83 e8 02             	sub    eax,0x2
c001f24b:	eb 03                	jmp    c001f250 <Vm::faultHandler(regs*)+0x43c>
c001f24d:	83 c0 02             	add    eax,0x2
c001f250:	25 ff ff 00 00       	and    eax,0xffff
c001f255:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001f258:	e9 27 02 00 00       	jmp    c001f484 <Vm::faultHandler(regs*)+0x670>
c001f25d:	8d 46 ff             	lea    eax,[esi-0x1]
c001f260:	3c 05                	cmp    al,0x5
c001f262:	77 24                	ja     c001f288 <Vm::faultHandler(regs*)+0x474>
c001f264:	0f b6 c0             	movzx  eax,al
c001f267:	ff 24 85 8c ca 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd3574]
c001f26e:	0f b7 fd             	movzx  edi,bp
c001f271:	eb 15                	jmp    c001f288 <Vm::faultHandler(regs*)+0x474>
c001f273:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001f277:	eb 0f                	jmp    c001f288 <Vm::faultHandler(regs*)+0x474>
c001f279:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001f27d:	eb 09                	jmp    c001f288 <Vm::faultHandler(regs*)+0x474>
c001f27f:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001f283:	eb 03                	jmp    c001f288 <Vm::faultHandler(regs*)+0x474>
c001f285:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001f288:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f28b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f290:	74 29                	je     c001f2bb <Vm::faultHandler(regs*)+0x4a7>
c001f292:	3d ff ff 00 00       	cmp    eax,0xffff
c001f297:	76 22                	jbe    c001f2bb <Vm::faultHandler(regs*)+0x4a7>
c001f299:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f29d:	50                   	push   eax
c001f29e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f2a2:	50                   	push   eax
c001f2a3:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f2a7:	50                   	push   eax
c001f2a8:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f2ac:	50                   	push   eax
c001f2ad:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f2b1:	50                   	push   eax
c001f2b2:	6a 6e                	push   0x6e
c001f2b4:	6a 6e                	push   0x6e
c001f2b6:	e9 8c 00 00 00       	jmp    c001f347 <Vm::faultHandler(regs*)+0x533>
c001f2bb:	0f b7 c0             	movzx  eax,ax
c001f2be:	52                   	push   edx
c001f2bf:	52                   	push   edx
c001f2c0:	50                   	push   eax
c001f2c1:	57                   	push   edi
c001f2c2:	e8 d9 fa ff ff       	call   c001eda0 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f2c7:	59                   	pop    ecx
c001f2c8:	0f b6 c0             	movzx  eax,al
c001f2cb:	5e                   	pop    esi
c001f2cc:	50                   	push   eax
c001f2cd:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f2d1:	50                   	push   eax
c001f2d2:	e8 4b f7 ff ff       	call   c001ea22 <Vm::outbv(unsigned short, unsigned char)>
c001f2d7:	83 c4 10             	add    esp,0x10
c001f2da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f2dd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f2e1:	74 03                	je     c001f2e6 <Vm::faultHandler(regs*)+0x4d2>
c001f2e3:	48                   	dec    eax
c001f2e4:	eb 01                	jmp    c001f2e7 <Vm::faultHandler(regs*)+0x4d3>
c001f2e6:	40                   	inc    eax
c001f2e7:	0f b7 c0             	movzx  eax,ax
c001f2ea:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001f2ed:	e9 92 01 00 00       	jmp    c001f484 <Vm::faultHandler(regs*)+0x670>
c001f2f2:	8d 46 ff             	lea    eax,[esi-0x1]
c001f2f5:	3c 05                	cmp    al,0x5
c001f2f7:	77 1f                	ja     c001f318 <Vm::faultHandler(regs*)+0x504>
c001f2f9:	0f b6 c0             	movzx  eax,al
c001f2fc:	ff 24 85 a4 ca 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd355c]
c001f303:	89 ef                	mov    edi,ebp
c001f305:	eb 11                	jmp    c001f318 <Vm::faultHandler(regs*)+0x504>
c001f307:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001f30a:	eb 0c                	jmp    c001f318 <Vm::faultHandler(regs*)+0x504>
c001f30c:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001f30f:	eb 07                	jmp    c001f318 <Vm::faultHandler(regs*)+0x504>
c001f311:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001f314:	eb 02                	jmp    c001f318 <Vm::faultHandler(regs*)+0x504>
c001f316:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001f318:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001f31b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f320:	74 37                	je     c001f359 <Vm::faultHandler(regs*)+0x545>
c001f322:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001f328:	76 2f                	jbe    c001f359 <Vm::faultHandler(regs*)+0x545>
c001f32a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f32e:	50                   	push   eax
c001f32f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f333:	50                   	push   eax
c001f334:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f338:	50                   	push   eax
c001f339:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f33d:	50                   	push   eax
c001f33e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f342:	50                   	push   eax
c001f343:	6a 6f                	push   0x6f
c001f345:	6a 6f                	push   0x6f
c001f347:	68 32 ca 02 c0       	push   0xc002ca32
c001f34c:	e8 ea 36 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001f351:	83 c4 20             	add    esp,0x20
c001f354:	e9 86 01 00 00       	jmp    c001f4df <Vm::faultHandler(regs*)+0x6cb>
c001f359:	0f b7 d7             	movzx  edx,di
c001f35c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001f35f:	0f b7 c6             	movzx  eax,si
c001f362:	81 e1 00 04 00 00    	and    ecx,0x400
c001f368:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001f36b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f370:	74 1d                	je     c001f38f <Vm::faultHandler(regs*)+0x57b>
c001f372:	55                   	push   ebp
c001f373:	55                   	push   ebp
c001f374:	50                   	push   eax
c001f375:	52                   	push   edx
c001f376:	e8 48 fa ff ff       	call   c001edc3 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f37b:	83 c4 10             	add    esp,0x10
c001f37e:	89 fa                	mov    edx,edi
c001f380:	ef                   	out    dx,eax
c001f381:	85 c9                	test   ecx,ecx
c001f383:	74 05                	je     c001f38a <Vm::faultHandler(regs*)+0x576>
c001f385:	83 ee 04             	sub    esi,0x4
c001f388:	eb 21                	jmp    c001f3ab <Vm::faultHandler(regs*)+0x597>
c001f38a:	83 c6 04             	add    esi,0x4
c001f38d:	eb 1c                	jmp    c001f3ab <Vm::faultHandler(regs*)+0x597>
c001f38f:	55                   	push   ebp
c001f390:	55                   	push   ebp
c001f391:	50                   	push   eax
c001f392:	52                   	push   edx
c001f393:	e8 19 fa ff ff       	call   c001edb1 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f398:	83 c4 10             	add    esp,0x10
c001f39b:	89 fa                	mov    edx,edi
c001f39d:	66 ef                	out    dx,ax
c001f39f:	85 c9                	test   ecx,ecx
c001f3a1:	74 05                	je     c001f3a8 <Vm::faultHandler(regs*)+0x594>
c001f3a3:	83 ee 02             	sub    esi,0x2
c001f3a6:	eb 03                	jmp    c001f3ab <Vm::faultHandler(regs*)+0x597>
c001f3a8:	83 c6 02             	add    esi,0x2
c001f3ab:	81 e6 ff ff 00 00    	and    esi,0xffff
c001f3b1:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001f3b4:	e9 cb 00 00 00       	jmp    c001f484 <Vm::faultHandler(regs*)+0x670>
c001f3b9:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f3c0:	83 ec 0c             	sub    esp,0xc
c001f3c3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f3c7:	50                   	push   eax
c001f3c8:	e8 42 f6 ff ff       	call   c001ea0f <Vm::inbv(unsigned short)>
c001f3cd:	0f b6 c0             	movzx  eax,al
c001f3d0:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f3d3:	eb 3f                	jmp    c001f414 <Vm::faultHandler(regs*)+0x600>
c001f3d5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f3da:	74 07                	je     c001f3e3 <Vm::faultHandler(regs*)+0x5cf>
c001f3dc:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f3e0:	ed                   	in     eax,dx
c001f3e1:	eb 14                	jmp    c001f3f7 <Vm::faultHandler(regs*)+0x5e3>
c001f3e3:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001f3e6:	66 31 f6             	xor    si,si
c001f3e9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001f3ec:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f3f0:	66 ed                	in     ax,dx
c001f3f2:	0f b7 c0             	movzx  eax,ax
c001f3f5:	09 f0                	or     eax,esi
c001f3f7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f3fa:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f3fe:	e9 84 00 00 00       	jmp    c001f487 <Vm::faultHandler(regs*)+0x673>
c001f403:	52                   	push   edx
c001f404:	52                   	push   edx
c001f405:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f409:	50                   	push   eax
c001f40a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f40e:	50                   	push   eax
c001f40f:	e8 0e f6 ff ff       	call   c001ea22 <Vm::outbv(unsigned short, unsigned char)>
c001f414:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f418:	eb 53                	jmp    c001f46d <Vm::faultHandler(regs*)+0x659>
c001f41a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f41d:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f421:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f426:	74 03                	je     c001f42b <Vm::faultHandler(regs*)+0x617>
c001f428:	ef                   	out    dx,eax
c001f429:	eb cf                	jmp    c001f3fa <Vm::faultHandler(regs*)+0x5e6>
c001f42b:	66 ef                	out    dx,ax
c001f42d:	eb cb                	jmp    c001f3fa <Vm::faultHandler(regs*)+0x5e6>
c001f42f:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f436:	83 ec 0c             	sub    esp,0xc
c001f439:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f43d:	50                   	push   eax
c001f43e:	e8 cc f5 ff ff       	call   c001ea0f <Vm::inbv(unsigned short)>
c001f443:	0f b6 c0             	movzx  eax,al
c001f446:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f449:	eb 1f                	jmp    c001f46a <Vm::faultHandler(regs*)+0x656>
c001f44b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f44e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f453:	74 03                	je     c001f458 <Vm::faultHandler(regs*)+0x644>
c001f455:	ed                   	in     eax,dx
c001f456:	eb 0d                	jmp    c001f465 <Vm::faultHandler(regs*)+0x651>
c001f458:	66 ed                	in     ax,dx
c001f45a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001f45d:	0f b7 c0             	movzx  eax,ax
c001f460:	66 31 d2             	xor    dx,dx
c001f463:	09 d0                	or     eax,edx
c001f465:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f468:	eb 1a                	jmp    c001f484 <Vm::faultHandler(regs*)+0x670>
c001f46a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f46d:	83 c4 10             	add    esp,0x10
c001f470:	eb 15                	jmp    c001f487 <Vm::faultHandler(regs*)+0x673>
c001f472:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f475:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f478:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f47d:	74 03                	je     c001f482 <Vm::faultHandler(regs*)+0x66e>
c001f47f:	ef                   	out    dx,eax
c001f480:	eb 02                	jmp    c001f484 <Vm::faultHandler(regs*)+0x670>
c001f482:	66 ef                	out    dx,ax
c001f484:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f487:	b0 01                	mov    al,0x1
c001f489:	eb 56                	jmp    c001f4e1 <Vm::faultHandler(regs*)+0x6cd>
c001f48b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f48f:	50                   	push   eax
c001f490:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f494:	50                   	push   eax
c001f495:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f499:	50                   	push   eax
c001f49a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f49e:	50                   	push   eax
c001f49f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f4a3:	50                   	push   eax
c001f4a4:	52                   	push   edx
c001f4a5:	52                   	push   edx
c001f4a6:	68 5f ca 02 c0       	push   0xc002ca5f
c001f4ab:	e8 8b 35 ff ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c001f4b0:	83 c4 20             	add    esp,0x20
c001f4b3:	83 ec 0c             	sub    esp,0xc
c001f4b6:	6a 60                	push   0x60
c001f4b8:	e8 52 f5 ff ff       	call   c001ea0f <Vm::inbv(unsigned short)>
c001f4bd:	83 c4 10             	add    esp,0x10
c001f4c0:	3c 1c                	cmp    al,0x1c
c001f4c2:	74 04                	je     c001f4c8 <Vm::faultHandler(regs*)+0x6b4>
c001f4c4:	3c 5a                	cmp    al,0x5a
c001f4c6:	75 eb                	jne    c001f4b3 <Vm::faultHandler(regs*)+0x69f>
c001f4c8:	3c 5a                	cmp    al,0x5a
c001f4ca:	74 04                	je     c001f4d0 <Vm::faultHandler(regs*)+0x6bc>
c001f4cc:	3c 1c                	cmp    al,0x1c
c001f4ce:	75 0f                	jne    c001f4df <Vm::faultHandler(regs*)+0x6cb>
c001f4d0:	83 ec 0c             	sub    esp,0xc
c001f4d3:	6a 60                	push   0x60
c001f4d5:	e8 35 f5 ff ff       	call   c001ea0f <Vm::inbv(unsigned short)>
c001f4da:	83 c4 10             	add    esp,0x10
c001f4dd:	eb e9                	jmp    c001f4c8 <Vm::faultHandler(regs*)+0x6b4>
c001f4df:	31 c0                	xor    eax,eax
c001f4e1:	83 c4 1c             	add    esp,0x1c
c001f4e4:	5b                   	pop    ebx
c001f4e5:	5e                   	pop    esi
c001f4e6:	5f                   	pop    edi
c001f4e7:	5d                   	pop    ebp
c001f4e8:	c3                   	ret    

c001f4e9 <Vm::fpuInternalTo32(unsigned long long)>:
c001f4e9:	57                   	push   edi
c001f4ea:	56                   	push   esi
c001f4eb:	53                   	push   ebx
c001f4ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f4f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4f4:	89 d6                	mov    esi,edx
c001f4f6:	89 d7                	mov    edi,edx
c001f4f8:	89 c1                	mov    ecx,eax
c001f4fa:	c1 ef 14             	shr    edi,0x14
c001f4fd:	89 d3                	mov    ebx,edx
c001f4ff:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f505:	31 d2                	xor    edx,edx
c001f507:	89 f8                	mov    eax,edi
c001f509:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f50f:	bf ff 00 00 00       	mov    edi,0xff
c001f514:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f519:	83 d2 ff             	adc    edx,0xffffffff
c001f51c:	39 c7                	cmp    edi,eax
c001f51e:	bf 00 00 00 00       	mov    edi,0x0
c001f523:	19 d7                	sbb    edi,edx
c001f525:	72 15                	jb     c001f53c <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f527:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f52b:	c1 e0 17             	shl    eax,0x17
c001f52e:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f534:	09 f1                	or     ecx,esi
c001f536:	09 c1                	or     ecx,eax
c001f538:	89 cf                	mov    edi,ecx
c001f53a:	eb 02                	jmp    c001f53e <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f53c:	31 ff                	xor    edi,edi
c001f53e:	89 f8                	mov    eax,edi
c001f540:	5b                   	pop    ebx
c001f541:	5e                   	pop    esi
c001f542:	5f                   	pop    edi
c001f543:	c3                   	ret    

c001f544 <Vm::fpuInternalTo64(unsigned long long)>:
c001f544:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f548:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f54c:	c3                   	ret    

c001f54d <Vm::fpu32ToInternal(unsigned int)>:
c001f54d:	57                   	push   edi
c001f54e:	31 ff                	xor    edi,edi
c001f550:	56                   	push   esi
c001f551:	53                   	push   ebx
c001f552:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f556:	89 cb                	mov    ebx,ecx
c001f558:	89 ce                	mov    esi,ecx
c001f55a:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f560:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f566:	c1 e9 17             	shr    ecx,0x17
c001f569:	89 f0                	mov    eax,esi
c001f56b:	0f b6 d1             	movzx  edx,cl
c001f56e:	81 c2 80 03 00 00    	add    edx,0x380
c001f574:	89 d1                	mov    ecx,edx
c001f576:	89 fa                	mov    edx,edi
c001f578:	c1 e1 14             	shl    ecx,0x14
c001f57b:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f57f:	c1 e0 1d             	shl    eax,0x1d
c001f582:	89 d7                	mov    edi,edx
c001f584:	89 c6                	mov    esi,eax
c001f586:	89 ca                	mov    edx,ecx
c001f588:	89 f0                	mov    eax,esi
c001f58a:	09 fa                	or     edx,edi
c001f58c:	09 da                	or     edx,ebx
c001f58e:	5b                   	pop    ebx
c001f58f:	5e                   	pop    esi
c001f590:	5f                   	pop    edi
c001f591:	c3                   	ret    

c001f592 <Vm::fpu64ToInternal(unsigned long long)>:
c001f592:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f596:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f59a:	c3                   	ret    

c001f59b <Vm::fpuFloatToLong(unsigned long long)>:
c001f59b:	57                   	push   edi
c001f59c:	31 c0                	xor    eax,eax
c001f59e:	56                   	push   esi
c001f59f:	31 d2                	xor    edx,edx
c001f5a1:	53                   	push   ebx
c001f5a2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f5a6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f5aa:	89 d9                	mov    ecx,ebx
c001f5ac:	c1 e9 14             	shr    ecx,0x14
c001f5af:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f5b5:	89 cf                	mov    edi,ecx
c001f5b7:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f5bd:	78 33                	js     c001f5f2 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f5bf:	89 d9                	mov    ecx,ebx
c001f5c1:	89 f0                	mov    eax,esi
c001f5c3:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f5c9:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f5cf:	89 ca                	mov    edx,ecx
c001f5d1:	b9 34 00 00 00       	mov    ecx,0x34
c001f5d6:	29 f9                	sub    ecx,edi
c001f5d8:	0f ad d0             	shrd   eax,edx,cl
c001f5db:	d3 fa                	sar    edx,cl
c001f5dd:	f6 c1 20             	test   cl,0x20
c001f5e0:	74 05                	je     c001f5e7 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f5e2:	89 d0                	mov    eax,edx
c001f5e4:	c1 fa 1f             	sar    edx,0x1f
c001f5e7:	85 db                	test   ebx,ebx
c001f5e9:	79 07                	jns    c001f5f2 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f5eb:	f7 d8                	neg    eax
c001f5ed:	83 d2 00             	adc    edx,0x0
c001f5f0:	f7 da                	neg    edx
c001f5f2:	5b                   	pop    ebx
c001f5f3:	5e                   	pop    esi
c001f5f4:	5f                   	pop    edi
c001f5f5:	c3                   	ret    

c001f5f6 <Vm::fpuULongToFloat(unsigned long long)>:
c001f5f6:	57                   	push   edi
c001f5f7:	31 c9                	xor    ecx,ecx
c001f5f9:	56                   	push   esi
c001f5fa:	53                   	push   ebx
c001f5fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f5ff:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f603:	0f ba e7 14          	bt     edi,0x14
c001f607:	72 07                	jb     c001f610 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f609:	01 f6                	add    esi,esi
c001f60b:	11 ff                	adc    edi,edi
c001f60d:	41                   	inc    ecx
c001f60e:	eb f3                	jmp    c001f603 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f610:	89 fa                	mov    edx,edi
c001f612:	89 f0                	mov    eax,esi
c001f614:	bb 33 04 00 00       	mov    ebx,0x433
c001f619:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f61f:	29 cb                	sub    ebx,ecx
c001f621:	89 d9                	mov    ecx,ebx
c001f623:	5b                   	pop    ebx
c001f624:	c1 e1 14             	shl    ecx,0x14
c001f627:	5e                   	pop    esi
c001f628:	09 ca                	or     edx,ecx
c001f62a:	5f                   	pop    edi
c001f62b:	c3                   	ret    

c001f62c <Vm::fpuLongToFloat(long long)>:
c001f62c:	56                   	push   esi
c001f62d:	31 c0                	xor    eax,eax
c001f62f:	53                   	push   ebx
c001f630:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f634:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f638:	39 c8                	cmp    eax,ecx
c001f63a:	19 d8                	sbb    eax,ebx
c001f63c:	7d 04                	jge    c001f642 <Vm::fpuLongToFloat(long long)+0x16>
c001f63e:	31 f6                	xor    esi,esi
c001f640:	eb 0c                	jmp    c001f64e <Vm::fpuLongToFloat(long long)+0x22>
c001f642:	f7 d9                	neg    ecx
c001f644:	be 01 00 00 00       	mov    esi,0x1
c001f649:	83 d3 00             	adc    ebx,0x0
c001f64c:	f7 db                	neg    ebx
c001f64e:	31 c0                	xor    eax,eax
c001f650:	0f ba e3 14          	bt     ebx,0x14
c001f654:	72 07                	jb     c001f65d <Vm::fpuLongToFloat(long long)+0x31>
c001f656:	01 c9                	add    ecx,ecx
c001f658:	11 db                	adc    ebx,ebx
c001f65a:	40                   	inc    eax
c001f65b:	eb f3                	jmp    c001f650 <Vm::fpuLongToFloat(long long)+0x24>
c001f65d:	ba 33 04 00 00       	mov    edx,0x433
c001f662:	29 c2                	sub    edx,eax
c001f664:	89 c8                	mov    eax,ecx
c001f666:	c1 e2 14             	shl    edx,0x14
c001f669:	89 d9                	mov    ecx,ebx
c001f66b:	89 f3                	mov    ebx,esi
c001f66d:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f673:	09 ca                	or     edx,ecx
c001f675:	84 db                	test   bl,bl
c001f677:	74 06                	je     c001f67f <Vm::fpuLongToFloat(long long)+0x53>
c001f679:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f67f:	5b                   	pop    ebx
c001f680:	5e                   	pop    esi
c001f681:	c3                   	ret    

c001f682 <Vm::fpuGet0()>:
c001f682:	31 c0                	xor    eax,eax
c001f684:	31 d2                	xor    edx,edx
c001f686:	c3                   	ret    

c001f687 <Vm::fpuGet1()>:
c001f687:	b8 01 00 00 00       	mov    eax,0x1
c001f68c:	31 d2                	xor    edx,edx
c001f68e:	c3                   	ret    

c001f68f <Vm::fpuGetPi()>:
c001f68f:	b8 03 00 00 00       	mov    eax,0x3
c001f694:	31 d2                	xor    edx,edx
c001f696:	c3                   	ret    

c001f697 <Vm::fpuGetLog2E()>:
c001f697:	83 ec 18             	sub    esp,0x18
c001f69a:	68 bc ca 02 c0       	push   0xc002cabc
c001f69f:	e8 35 ad ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c001f6a4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f6a9:	31 d2                	xor    edx,edx
c001f6ab:	83 c4 1c             	add    esp,0x1c
c001f6ae:	c3                   	ret    

c001f6af <Vm::fpuGetLogE2()>:
c001f6af:	83 ec 18             	sub    esp,0x18
c001f6b2:	68 c8 ca 02 c0       	push   0xc002cac8
c001f6b7:	e8 1d ad ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c001f6bc:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f6c1:	31 d2                	xor    edx,edx
c001f6c3:	83 c4 1c             	add    esp,0x1c
c001f6c6:	c3                   	ret    

c001f6c7 <Vm::fpuGetLog210()>:
c001f6c7:	83 ec 18             	sub    esp,0x18
c001f6ca:	68 d4 ca 02 c0       	push   0xc002cad4
c001f6cf:	e8 05 ad ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c001f6d4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f6d9:	31 d2                	xor    edx,edx
c001f6db:	83 c4 1c             	add    esp,0x1c
c001f6de:	c3                   	ret    

c001f6df <Vm::fpuGetLog102()>:
c001f6df:	83 ec 18             	sub    esp,0x18
c001f6e2:	68 e1 ca 02 c0       	push   0xc002cae1
c001f6e7:	e8 ed ac ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c001f6ec:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f6f1:	31 d2                	xor    edx,edx
c001f6f3:	83 c4 1c             	add    esp,0x1c
c001f6f6:	c3                   	ret    

c001f6f7 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f6f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f6fb:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f6ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f703:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f707:	0f 92 c0             	setb   al
c001f70a:	c3                   	ret    

c001f70b <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f70b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f70f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f713:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f717:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f71b:	09 c2                	or     edx,eax
c001f71d:	0f 94 c0             	sete   al
c001f720:	c3                   	ret    

c001f721 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f721:	57                   	push   edi
c001f722:	56                   	push   esi
c001f723:	53                   	push   ebx
c001f724:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f728:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f72c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f730:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f734:	57                   	push   edi
c001f735:	56                   	push   esi
c001f736:	53                   	push   ebx
c001f737:	51                   	push   ecx
c001f738:	e8 ce ff ff ff       	call   c001f70b <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f73d:	83 c4 10             	add    esp,0x10
c001f740:	88 c2                	mov    dl,al
c001f742:	31 c0                	xor    eax,eax
c001f744:	84 d2                	test   dl,dl
c001f746:	75 0c                	jne    c001f754 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f748:	57                   	push   edi
c001f749:	56                   	push   esi
c001f74a:	53                   	push   ebx
c001f74b:	51                   	push   ecx
c001f74c:	e8 a6 ff ff ff       	call   c001f6f7 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f751:	83 c4 10             	add    esp,0x10
c001f754:	83 e0 01             	and    eax,0x1
c001f757:	5b                   	pop    ebx
c001f758:	88 c1                	mov    cl,al
c001f75a:	83 e2 01             	and    edx,0x1
c001f75d:	a0 81 fc 02 c0       	mov    al,ds:0xc002fc81
c001f762:	c1 e2 06             	shl    edx,0x6
c001f765:	83 e0 ba             	and    eax,0xffffffba
c001f768:	5e                   	pop    esi
c001f769:	09 c8                	or     eax,ecx
c001f76b:	5f                   	pop    edi
c001f76c:	09 d0                	or     eax,edx
c001f76e:	a2 81 fc 02 c0       	mov    ds:0xc002fc81,al
c001f773:	c3                   	ret    

c001f774 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f774:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f778:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f77c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f780:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f784:	c3                   	ret    

c001f785 <Vm::fpuAbs(unsigned long long)>:
c001f785:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f789:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f78d:	c3                   	ret    

c001f78e <Vm::fpuChs(unsigned long long)>:
c001f78e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f792:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f796:	f7 d8                	neg    eax
c001f798:	83 d2 00             	adc    edx,0x0
c001f79b:	f7 da                	neg    edx
c001f79d:	c3                   	ret    

c001f79e <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f79e:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f7a2:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f7a7:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f7ab:	eb c7                	jmp    c001f774 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f7ad <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f7ad:	53                   	push   ebx
c001f7ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f7b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f7ba:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f7be:	0f af ca             	imul   ecx,edx
c001f7c1:	0f af d8             	imul   ebx,eax
c001f7c4:	f7 e2                	mul    edx
c001f7c6:	01 d9                	add    ecx,ebx
c001f7c8:	5b                   	pop    ebx
c001f7c9:	01 ca                	add    edx,ecx
c001f7cb:	c3                   	ret    

c001f7cc <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f7cc:	83 ec 0c             	sub    esp,0xc
c001f7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7df:	e8 30 76 00 00       	call   c0026e14 <__udivdi3>
c001f7e4:	83 c4 1c             	add    esp,0x1c
c001f7e7:	c3                   	ret    

c001f7e8 <Vm::fpuSquare(unsigned long long)>:
c001f7e8:	50                   	push   eax
c001f7e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f7f1:	52                   	push   edx
c001f7f2:	50                   	push   eax
c001f7f3:	52                   	push   edx
c001f7f4:	50                   	push   eax
c001f7f5:	e8 b3 ff ff ff       	call   c001f7ad <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f7fa:	83 c4 14             	add    esp,0x14
c001f7fd:	c3                   	ret    

c001f7fe <Vm::fpuGetReg(int)>:
c001f7fe:	83 ec 0c             	sub    esp,0xc
c001f801:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f806:	76 10                	jbe    c001f818 <Vm::fpuGetReg(int)+0x1a>
c001f808:	83 ec 0c             	sub    esp,0xc
c001f80b:	68 ee ca 02 c0       	push   0xc002caee
c001f810:	e8 c4 ab ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c001f815:	83 c4 10             	add    esp,0x10
c001f818:	a0 81 fc 02 c0       	mov    al,ds:0xc002fc81
c001f81d:	b9 08 00 00 00       	mov    ecx,0x8
c001f822:	c0 e8 03             	shr    al,0x3
c001f825:	83 e0 07             	and    eax,0x7
c001f828:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f82c:	99                   	cdq    
c001f82d:	f7 f9                	idiv   ecx
c001f82f:	8b 04 d5 84 fc 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd037c]
c001f836:	8b 14 d5 88 fc 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd0378]
c001f83d:	83 c4 0c             	add    esp,0xc
c001f840:	c3                   	ret    

c001f841 <Vm::fpuSetReg(int, unsigned long long)>:
c001f841:	57                   	push   edi
c001f842:	56                   	push   esi
c001f843:	52                   	push   edx
c001f844:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f848:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f84c:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f851:	76 10                	jbe    c001f863 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f853:	83 ec 0c             	sub    esp,0xc
c001f856:	68 01 cb 02 c0       	push   0xc002cb01
c001f85b:	e8 79 ab ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c001f860:	83 c4 10             	add    esp,0x10
c001f863:	a0 81 fc 02 c0       	mov    al,ds:0xc002fc81
c001f868:	b9 08 00 00 00       	mov    ecx,0x8
c001f86d:	c0 e8 03             	shr    al,0x3
c001f870:	83 e0 07             	and    eax,0x7
c001f873:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f877:	99                   	cdq    
c001f878:	f7 f9                	idiv   ecx
c001f87a:	89 34 d5 84 fc 02 c0 	mov    DWORD PTR [edx*8-0x3ffd037c],esi
c001f881:	89 3c d5 88 fc 02 c0 	mov    DWORD PTR [edx*8-0x3ffd0378],edi
c001f888:	58                   	pop    eax
c001f889:	5e                   	pop    esi
c001f88a:	5f                   	pop    edi
c001f88b:	c3                   	ret    

c001f88c <Vm::fpuPush(unsigned long long)>:
c001f88c:	a0 81 fc 02 c0       	mov    al,ds:0xc002fc81
c001f891:	c0 e8 03             	shr    al,0x3
c001f894:	83 e0 07             	and    eax,0x7
c001f897:	83 c0 07             	add    eax,0x7
c001f89a:	88 c2                	mov    dl,al
c001f89c:	83 e0 07             	and    eax,0x7
c001f89f:	83 e2 07             	and    edx,0x7
c001f8a2:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f8a9:	8a 15 81 fc 02 c0    	mov    dl,BYTE PTR ds:0xc002fc81
c001f8af:	83 e2 c7             	and    edx,0xffffffc7
c001f8b2:	09 ca                	or     edx,ecx
c001f8b4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f8b8:	88 15 81 fc 02 c0    	mov    BYTE PTR ds:0xc002fc81,dl
c001f8be:	89 0c c5 88 fc 02 c0 	mov    DWORD PTR [eax*8-0x3ffd0378],ecx
c001f8c5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f8c9:	89 14 c5 84 fc 02 c0 	mov    DWORD PTR [eax*8-0x3ffd037c],edx
c001f8d0:	a1 c4 fc 02 c0       	mov    eax,ds:0xc002fcc4
c001f8d5:	83 f8 08             	cmp    eax,0x8
c001f8d8:	75 08                	jne    c001f8e2 <Vm::fpuPush(unsigned long long)+0x56>
c001f8da:	80 0d 80 fc 02 c0 40 	or     BYTE PTR ds:0xc002fc80,0x40
c001f8e1:	c3                   	ret    
c001f8e2:	40                   	inc    eax
c001f8e3:	a3 c4 fc 02 c0       	mov    ds:0xc002fcc4,eax
c001f8e8:	c3                   	ret    

c001f8e9 <Vm::fpuPop()>:
c001f8e9:	8a 0d 81 fc 02 c0    	mov    cl,BYTE PTR ds:0xc002fc81
c001f8ef:	53                   	push   ebx
c001f8f0:	c0 e9 03             	shr    cl,0x3
c001f8f3:	8a 1d 81 fc 02 c0    	mov    bl,BYTE PTR ds:0xc002fc81
c001f8f9:	83 e1 07             	and    ecx,0x7
c001f8fc:	83 e3 c7             	and    ebx,0xffffffc7
c001f8ff:	8b 04 cd 84 fc 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd037c]
c001f906:	8b 14 cd 88 fc 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd0378]
c001f90d:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f914:	83 e1 38             	and    ecx,0x38
c001f917:	09 d9                	or     ecx,ebx
c001f919:	88 0d 81 fc 02 c0    	mov    BYTE PTR ds:0xc002fc81,cl
c001f91f:	8b 0d c4 fc 02 c0    	mov    ecx,DWORD PTR ds:0xc002fcc4
c001f925:	85 c9                	test   ecx,ecx
c001f927:	74 09                	je     c001f932 <Vm::fpuPop()+0x49>
c001f929:	49                   	dec    ecx
c001f92a:	89 0d c4 fc 02 c0    	mov    DWORD PTR ds:0xc002fcc4,ecx
c001f930:	eb 07                	jmp    c001f939 <Vm::fpuPop()+0x50>
c001f932:	80 0d 80 fc 02 c0 40 	or     BYTE PTR ds:0xc002fc80,0x40
c001f939:	5b                   	pop    ebx
c001f93a:	c3                   	ret    

c001f93b <Vm::x87Handler(regs*)>:
c001f93b:	55                   	push   ebp
c001f93c:	57                   	push   edi
c001f93d:	56                   	push   esi
c001f93e:	53                   	push   ebx
c001f93f:	83 ec 1c             	sub    esp,0x1c
c001f942:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f946:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f94b:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f94e:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f956:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f95a:	50                   	push   eax
c001f95b:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f95f:	50                   	push   eax
c001f960:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f964:	50                   	push   eax
c001f965:	53                   	push   ebx
c001f966:	e8 87 a1 ff ff       	call   c0019af2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f96b:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f96e:	83 c4 10             	add    esp,0x10
c001f971:	89 c6                	mov    esi,eax
c001f973:	80 fa d9             	cmp    dl,0xd9
c001f976:	0f 85 52 01 00 00    	jne    c001face <Vm::x87Handler(regs*)+0x193>
c001f97c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f980:	8d 50 20             	lea    edx,[eax+0x20]
c001f983:	80 fa 0e             	cmp    dl,0xe
c001f986:	0f 87 86 00 00 00    	ja     c001fa12 <Vm::x87Handler(regs*)+0xd7>
c001f98c:	0f b6 d2             	movzx  edx,dl
c001f98f:	ff 24 95 14 cb 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd34ec]
c001f996:	e8 e7 fc ff ff       	call   c001f682 <Vm::fpuGet0()>
c001f99b:	eb 05                	jmp    c001f9a2 <Vm::x87Handler(regs*)+0x67>
c001f99d:	e8 e5 fc ff ff       	call   c001f687 <Vm::fpuGet1()>
c001f9a2:	57                   	push   edi
c001f9a3:	57                   	push   edi
c001f9a4:	52                   	push   edx
c001f9a5:	50                   	push   eax
c001f9a6:	e8 e1 fe ff ff       	call   c001f88c <Vm::fpuPush(unsigned long long)>
c001f9ab:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f9af:	83 c4 10             	add    esp,0x10
c001f9b2:	b0 01                	mov    al,0x1
c001f9b4:	e9 e3 09 00 00       	jmp    c002039c <Vm::x87Handler(regs*)+0xa61>
c001f9b9:	83 ec 0c             	sub    esp,0xc
c001f9bc:	6a 00                	push   0x0
c001f9be:	e8 3b fe ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001f9c3:	59                   	pop    ecx
c001f9c4:	5e                   	pop    esi
c001f9c5:	52                   	push   edx
c001f9c6:	50                   	push   eax
c001f9c7:	e8 c2 fd ff ff       	call   c001f78e <Vm::fpuChs(unsigned long long)>
c001f9cc:	eb 13                	jmp    c001f9e1 <Vm::x87Handler(regs*)+0xa6>
c001f9ce:	83 ec 0c             	sub    esp,0xc
c001f9d1:	6a 00                	push   0x0
c001f9d3:	e8 26 fe ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001f9d8:	5f                   	pop    edi
c001f9d9:	5d                   	pop    ebp
c001f9da:	52                   	push   edx
c001f9db:	50                   	push   eax
c001f9dc:	e8 a4 fd ff ff       	call   c001f785 <Vm::fpuAbs(unsigned long long)>
c001f9e1:	83 c4 0c             	add    esp,0xc
c001f9e4:	52                   	push   edx
c001f9e5:	50                   	push   eax
c001f9e6:	6a 00                	push   0x0
c001f9e8:	e8 54 fe ff ff       	call   c001f841 <Vm::fpuSetReg(int, unsigned long long)>
c001f9ed:	eb bc                	jmp    c001f9ab <Vm::x87Handler(regs*)+0x70>
c001f9ef:	e8 d3 fc ff ff       	call   c001f6c7 <Vm::fpuGetLog210()>
c001f9f4:	eb ac                	jmp    c001f9a2 <Vm::x87Handler(regs*)+0x67>
c001f9f6:	e8 9c fc ff ff       	call   c001f697 <Vm::fpuGetLog2E()>
c001f9fb:	eb a5                	jmp    c001f9a2 <Vm::x87Handler(regs*)+0x67>
c001f9fd:	e8 8d fc ff ff       	call   c001f68f <Vm::fpuGetPi()>
c001fa02:	eb 9e                	jmp    c001f9a2 <Vm::x87Handler(regs*)+0x67>
c001fa04:	e8 d6 fc ff ff       	call   c001f6df <Vm::fpuGetLog102()>
c001fa09:	eb 97                	jmp    c001f9a2 <Vm::x87Handler(regs*)+0x67>
c001fa0b:	e8 9f fc ff ff       	call   c001f6af <Vm::fpuGetLogE2()>
c001fa10:	eb 90                	jmp    c001f9a2 <Vm::x87Handler(regs*)+0x67>
c001fa12:	8d 50 40             	lea    edx,[eax+0x40]
c001fa15:	80 fa 07             	cmp    dl,0x7
c001fa18:	77 15                	ja     c001fa2f <Vm::x87Handler(regs*)+0xf4>
c001fa1a:	83 ec 0c             	sub    esp,0xc
c001fa1d:	2d c0 00 00 00       	sub    eax,0xc0
c001fa22:	50                   	push   eax
c001fa23:	e8 d6 fd ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001fa28:	59                   	pop    ecx
c001fa29:	5e                   	pop    esi
c001fa2a:	e9 75 ff ff ff       	jmp    c001f9a4 <Vm::x87Handler(regs*)+0x69>
c001fa2f:	8d 50 38             	lea    edx,[eax+0x38]
c001fa32:	80 fa 07             	cmp    dl,0x7
c001fa35:	77 3c                	ja     c001fa73 <Vm::x87Handler(regs*)+0x138>
c001fa37:	83 ec 0c             	sub    esp,0xc
c001fa3a:	2d c8 00 00 00       	sub    eax,0xc8
c001fa3f:	50                   	push   eax
c001fa40:	e8 b9 fd ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001fa45:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa4c:	89 c6                	mov    esi,eax
c001fa4e:	89 d7                	mov    edi,edx
c001fa50:	e8 a9 fd ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001fa55:	83 c4 0c             	add    esp,0xc
c001fa58:	52                   	push   edx
c001fa59:	50                   	push   eax
c001fa5a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa5e:	2d c8 00 00 00       	sub    eax,0xc8
c001fa63:	50                   	push   eax
c001fa64:	e8 d8 fd ff ff       	call   c001f841 <Vm::fpuSetReg(int, unsigned long long)>
c001fa69:	83 c4 0c             	add    esp,0xc
c001fa6c:	57                   	push   edi
c001fa6d:	56                   	push   esi
c001fa6e:	e9 73 ff ff ff       	jmp    c001f9e6 <Vm::x87Handler(regs*)+0xab>
c001fa73:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fa77:	84 d2                	test   dl,dl
c001fa79:	75 0f                	jne    c001fa8a <Vm::x87Handler(regs*)+0x14f>
c001fa7b:	83 ec 0c             	sub    esp,0xc
c001fa7e:	ff 36                	push   DWORD PTR [esi]
c001fa80:	e8 c8 fa ff ff       	call   c001f54d <Vm::fpu32ToInternal(unsigned int)>
c001fa85:	e9 bf 00 00 00       	jmp    c001fb49 <Vm::x87Handler(regs*)+0x20e>
c001fa8a:	80 fa 03             	cmp    dl,0x3
c001fa8d:	75 13                	jne    c001faa2 <Vm::x87Handler(regs*)+0x167>
c001fa8f:	e8 55 fe ff ff       	call   c001f8e9 <Vm::fpuPop()>
c001fa94:	55                   	push   ebp
c001fa95:	55                   	push   ebp
c001fa96:	52                   	push   edx
c001fa97:	50                   	push   eax
c001fa98:	e8 4c fa ff ff       	call   c001f4e9 <Vm::fpuInternalTo32(unsigned long long)>
c001fa9d:	e9 88 00 00 00       	jmp    c001fb2a <Vm::x87Handler(regs*)+0x1ef>
c001faa2:	80 fa 05             	cmp    dl,0x5
c001faa5:	75 0e                	jne    c001fab5 <Vm::x87Handler(regs*)+0x17a>
c001faa7:	66 8b 06             	mov    ax,WORD PTR [esi]
c001faaa:	66 a3 82 fc 02 c0    	mov    ds:0xc002fc82,ax
c001fab0:	e9 df 00 00 00       	jmp    c001fb94 <Vm::x87Handler(regs*)+0x259>
c001fab5:	31 c0                	xor    eax,eax
c001fab7:	80 fa 07             	cmp    dl,0x7
c001faba:	0f 85 dc 08 00 00    	jne    c002039c <Vm::x87Handler(regs*)+0xa61>
c001fac0:	66 a1 82 fc 02 c0    	mov    ax,ds:0xc002fc82
c001fac6:	66 89 06             	mov    WORD PTR [esi],ax
c001fac9:	e9 c6 00 00 00       	jmp    c001fb94 <Vm::x87Handler(regs*)+0x259>
c001face:	80 fa d8             	cmp    dl,0xd8
c001fad1:	0f 84 c9 00 00 00    	je     c001fba0 <Vm::x87Handler(regs*)+0x265>
c001fad7:	80 fa dc             	cmp    dl,0xdc
c001fada:	0f 84 0d 02 00 00    	je     c001fced <Vm::x87Handler(regs*)+0x3b2>
c001fae0:	80 fa de             	cmp    dl,0xde
c001fae3:	0f 84 cd 02 00 00    	je     c001fdb6 <Vm::x87Handler(regs*)+0x47b>
c001fae9:	80 fa dd             	cmp    dl,0xdd
c001faec:	0f 84 5f 04 00 00    	je     c001ff51 <Vm::x87Handler(regs*)+0x616>
c001faf2:	80 fa da             	cmp    dl,0xda
c001faf5:	0f 84 24 05 00 00    	je     c002001f <Vm::x87Handler(regs*)+0x6e4>
c001fafb:	80 fa df             	cmp    dl,0xdf
c001fafe:	0f 84 68 05 00 00    	je     c002006c <Vm::x87Handler(regs*)+0x731>
c001fb04:	31 c0                	xor    eax,eax
c001fb06:	80 fa db             	cmp    dl,0xdb
c001fb09:	0f 85 8d 08 00 00    	jne    c002039c <Vm::x87Handler(regs*)+0xa61>
c001fb0f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb13:	80 fa 03             	cmp    dl,0x3
c001fb16:	0f 85 70 06 00 00    	jne    c002018c <Vm::x87Handler(regs*)+0x851>
c001fb1c:	e8 c8 fd ff ff       	call   c001f8e9 <Vm::fpuPop()>
c001fb21:	55                   	push   ebp
c001fb22:	55                   	push   ebp
c001fb23:	52                   	push   edx
c001fb24:	50                   	push   eax
c001fb25:	e8 71 fa ff ff       	call   c001f59b <Vm::fpuFloatToLong(unsigned long long)>
c001fb2a:	83 c4 10             	add    esp,0x10
c001fb2d:	89 06                	mov    DWORD PTR [esi],eax
c001fb2f:	eb 63                	jmp    c001fb94 <Vm::x87Handler(regs*)+0x259>
c001fb31:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb35:	84 d2                	test   dl,dl
c001fb37:	0f 85 e6 05 00 00    	jne    c0020123 <Vm::x87Handler(regs*)+0x7e8>
c001fb3d:	57                   	push   edi
c001fb3e:	57                   	push   edi
c001fb3f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb42:	ff 36                	push   DWORD PTR [esi]
c001fb44:	e8 49 fa ff ff       	call   c001f592 <Vm::fpu64ToInternal(unsigned long long)>
c001fb49:	5e                   	pop    esi
c001fb4a:	5f                   	pop    edi
c001fb4b:	52                   	push   edx
c001fb4c:	50                   	push   eax
c001fb4d:	e8 3a fd ff ff       	call   c001f88c <Vm::fpuPush(unsigned long long)>
c001fb52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fb56:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fb59:	e9 51 fe ff ff       	jmp    c001f9af <Vm::x87Handler(regs*)+0x74>
c001fb5e:	80 fa 03             	cmp    dl,0x3
c001fb61:	0f 85 d7 06 00 00    	jne    c002023e <Vm::x87Handler(regs*)+0x903>
c001fb67:	57                   	push   edi
c001fb68:	57                   	push   edi
c001fb69:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb6c:	ff 36                	push   DWORD PTR [esi]
c001fb6e:	e8 1f fa ff ff       	call   c001f592 <Vm::fpu64ToInternal(unsigned long long)>
c001fb73:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb7a:	89 c6                	mov    esi,eax
c001fb7c:	89 d7                	mov    edi,edx
c001fb7e:	e8 7b fc ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001fb83:	57                   	push   edi
c001fb84:	56                   	push   esi
c001fb85:	52                   	push   edx
c001fb86:	50                   	push   eax
c001fb87:	e8 95 fb ff ff       	call   c001f721 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fb8c:	83 c4 20             	add    esp,0x20
c001fb8f:	e8 55 fd ff ff       	call   c001f8e9 <Vm::fpuPop()>
c001fb94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb98:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fb9b:	e9 12 fe ff ff       	jmp    c001f9b2 <Vm::x87Handler(regs*)+0x77>
c001fba0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fba4:	8d 50 40             	lea    edx,[eax+0x40]
c001fba7:	80 fa 07             	cmp    dl,0x7
c001fbaa:	77 29                	ja     c001fbd5 <Vm::x87Handler(regs*)+0x29a>
c001fbac:	83 ec 0c             	sub    esp,0xc
c001fbaf:	2d c0 00 00 00       	sub    eax,0xc0
c001fbb4:	50                   	push   eax
c001fbb5:	e8 44 fc ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001fbba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbc1:	89 c6                	mov    esi,eax
c001fbc3:	89 d7                	mov    edi,edx
c001fbc5:	e8 34 fc ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001fbca:	57                   	push   edi
c001fbcb:	56                   	push   esi
c001fbcc:	52                   	push   edx
c001fbcd:	50                   	push   eax
c001fbce:	e8 a1 fb ff ff       	call   c001f774 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fbd3:	eb 2f                	jmp    c001fc04 <Vm::x87Handler(regs*)+0x2c9>
c001fbd5:	8d 50 38             	lea    edx,[eax+0x38]
c001fbd8:	80 fa 07             	cmp    dl,0x7
c001fbdb:	77 2f                	ja     c001fc0c <Vm::x87Handler(regs*)+0x2d1>
c001fbdd:	83 ec 0c             	sub    esp,0xc
c001fbe0:	2d c8 00 00 00       	sub    eax,0xc8
c001fbe5:	50                   	push   eax
c001fbe6:	e8 13 fc ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001fbeb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbf2:	89 c6                	mov    esi,eax
c001fbf4:	89 d7                	mov    edi,edx
c001fbf6:	e8 03 fc ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001fbfb:	57                   	push   edi
c001fbfc:	56                   	push   esi
c001fbfd:	52                   	push   edx
c001fbfe:	50                   	push   eax
c001fbff:	e8 a9 fb ff ff       	call   c001f7ad <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fc04:	83 c4 1c             	add    esp,0x1c
c001fc07:	e9 d8 fd ff ff       	jmp    c001f9e4 <Vm::x87Handler(regs*)+0xa9>
c001fc0c:	8d 50 30             	lea    edx,[eax+0x30]
c001fc0f:	80 fa 07             	cmp    dl,0x7
c001fc12:	77 0d                	ja     c001fc21 <Vm::x87Handler(regs*)+0x2e6>
c001fc14:	83 ec 0c             	sub    esp,0xc
c001fc17:	2d d0 00 00 00       	sub    eax,0xd0
c001fc1c:	e9 99 03 00 00       	jmp    c001ffba <Vm::x87Handler(regs*)+0x67f>
c001fc21:	8d 50 28             	lea    edx,[eax+0x28]
c001fc24:	80 fa 07             	cmp    dl,0x7
c001fc27:	77 0d                	ja     c001fc36 <Vm::x87Handler(regs*)+0x2fb>
c001fc29:	83 ec 0c             	sub    esp,0xc
c001fc2c:	2d d8 00 00 00       	sub    eax,0xd8
c001fc31:	e9 c0 03 00 00       	jmp    c001fff6 <Vm::x87Handler(regs*)+0x6bb>
c001fc36:	8d 50 20             	lea    edx,[eax+0x20]
c001fc39:	80 fa 07             	cmp    dl,0x7
c001fc3c:	77 1b                	ja     c001fc59 <Vm::x87Handler(regs*)+0x31e>
c001fc3e:	83 ec 0c             	sub    esp,0xc
c001fc41:	2d e0 00 00 00       	sub    eax,0xe0
c001fc46:	50                   	push   eax
c001fc47:	e8 b2 fb ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001fc4c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc53:	89 c6                	mov    esi,eax
c001fc55:	89 d7                	mov    edi,edx
c001fc57:	eb 22                	jmp    c001fc7b <Vm::x87Handler(regs*)+0x340>
c001fc59:	8d 50 18             	lea    edx,[eax+0x18]
c001fc5c:	80 fa 07             	cmp    dl,0x7
c001fc5f:	77 2d                	ja     c001fc8e <Vm::x87Handler(regs*)+0x353>
c001fc61:	83 ec 0c             	sub    esp,0xc
c001fc64:	6a 00                	push   0x0
c001fc66:	e8 93 fb ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001fc6b:	89 c6                	mov    esi,eax
c001fc6d:	89 d7                	mov    edi,edx
c001fc6f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc73:	2d e8 00 00 00       	sub    eax,0xe8
c001fc78:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc7b:	e8 7e fb ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001fc80:	57                   	push   edi
c001fc81:	56                   	push   esi
c001fc82:	52                   	push   edx
c001fc83:	50                   	push   eax
c001fc84:	e8 15 fb ff ff       	call   c001f79e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fc89:	e9 76 ff ff ff       	jmp    c001fc04 <Vm::x87Handler(regs*)+0x2c9>
c001fc8e:	8d 50 10             	lea    edx,[eax+0x10]
c001fc91:	80 fa 07             	cmp    dl,0x7
c001fc94:	77 1b                	ja     c001fcb1 <Vm::x87Handler(regs*)+0x376>
c001fc96:	83 ec 0c             	sub    esp,0xc
c001fc99:	2d f0 00 00 00       	sub    eax,0xf0
c001fc9e:	50                   	push   eax
c001fc9f:	e8 5a fb ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001fca4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcab:	89 c6                	mov    esi,eax
c001fcad:	89 d7                	mov    edi,edx
c001fcaf:	eb 22                	jmp    c001fcd3 <Vm::x87Handler(regs*)+0x398>
c001fcb1:	3c f7                	cmp    al,0xf7
c001fcb3:	0f 86 d1 03 00 00    	jbe    c002008a <Vm::x87Handler(regs*)+0x74f>
c001fcb9:	83 ec 0c             	sub    esp,0xc
c001fcbc:	6a 00                	push   0x0
c001fcbe:	e8 3b fb ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001fcc3:	89 c6                	mov    esi,eax
c001fcc5:	89 d7                	mov    edi,edx
c001fcc7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fccb:	2d f8 00 00 00       	sub    eax,0xf8
c001fcd0:	89 04 24             	mov    DWORD PTR [esp],eax
c001fcd3:	e8 26 fb ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001fcd8:	57                   	push   edi
c001fcd9:	56                   	push   esi
c001fcda:	52                   	push   edx
c001fcdb:	50                   	push   eax
c001fcdc:	e8 eb fa ff ff       	call   c001f7cc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fce1:	83 c4 1c             	add    esp,0x1c
c001fce4:	52                   	push   edx
c001fce5:	50                   	push   eax
c001fce6:	6a 00                	push   0x0
c001fce8:	e9 51 02 00 00       	jmp    c001ff3e <Vm::x87Handler(regs*)+0x603>
c001fced:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcf1:	8d 50 40             	lea    edx,[eax+0x40]
c001fcf4:	80 fa 07             	cmp    dl,0x7
c001fcf7:	77 37                	ja     c001fd30 <Vm::x87Handler(regs*)+0x3f5>
c001fcf9:	83 ec 0c             	sub    esp,0xc
c001fcfc:	2d c0 00 00 00       	sub    eax,0xc0
c001fd01:	50                   	push   eax
c001fd02:	e8 f7 fa ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001fd07:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd0e:	89 c6                	mov    esi,eax
c001fd10:	89 d7                	mov    edi,edx
c001fd12:	e8 e7 fa ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001fd17:	57                   	push   edi
c001fd18:	56                   	push   esi
c001fd19:	52                   	push   edx
c001fd1a:	50                   	push   eax
c001fd1b:	e8 54 fa ff ff       	call   c001f774 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd20:	83 c4 1c             	add    esp,0x1c
c001fd23:	52                   	push   edx
c001fd24:	50                   	push   eax
c001fd25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd29:	2d c0 00 00 00       	sub    eax,0xc0
c001fd2e:	eb 3d                	jmp    c001fd6d <Vm::x87Handler(regs*)+0x432>
c001fd30:	8d 50 38             	lea    edx,[eax+0x38]
c001fd33:	80 fa 07             	cmp    dl,0x7
c001fd36:	77 3b                	ja     c001fd73 <Vm::x87Handler(regs*)+0x438>
c001fd38:	83 ec 0c             	sub    esp,0xc
c001fd3b:	2d c8 00 00 00       	sub    eax,0xc8
c001fd40:	50                   	push   eax
c001fd41:	e8 b8 fa ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001fd46:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd4d:	89 c6                	mov    esi,eax
c001fd4f:	89 d7                	mov    edi,edx
c001fd51:	e8 a8 fa ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001fd56:	57                   	push   edi
c001fd57:	56                   	push   esi
c001fd58:	52                   	push   edx
c001fd59:	50                   	push   eax
c001fd5a:	e8 4e fa ff ff       	call   c001f7ad <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd5f:	83 c4 1c             	add    esp,0x1c
c001fd62:	52                   	push   edx
c001fd63:	50                   	push   eax
c001fd64:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd68:	2d c8 00 00 00       	sub    eax,0xc8
c001fd6d:	50                   	push   eax
c001fd6e:	e9 75 fc ff ff       	jmp    c001f9e8 <Vm::x87Handler(regs*)+0xad>
c001fd73:	83 c0 18             	add    eax,0x18
c001fd76:	3c 07                	cmp    al,0x7
c001fd78:	0f 87 3b 04 00 00    	ja     c00201b9 <Vm::x87Handler(regs*)+0x87e>
c001fd7e:	83 ec 0c             	sub    esp,0xc
c001fd81:	6a 00                	push   0x0
c001fd83:	e8 76 fa ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001fd88:	89 c6                	mov    esi,eax
c001fd8a:	89 d7                	mov    edi,edx
c001fd8c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd90:	2d e8 00 00 00       	sub    eax,0xe8
c001fd95:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd98:	e8 61 fa ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001fd9d:	57                   	push   edi
c001fd9e:	56                   	push   esi
c001fd9f:	52                   	push   edx
c001fda0:	50                   	push   eax
c001fda1:	e8 f8 f9 ff ff       	call   c001f79e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fda6:	83 c4 1c             	add    esp,0x1c
c001fda9:	52                   	push   edx
c001fdaa:	50                   	push   eax
c001fdab:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdaf:	2d e8 00 00 00       	sub    eax,0xe8
c001fdb4:	eb b7                	jmp    c001fd6d <Vm::x87Handler(regs*)+0x432>
c001fdb6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdba:	8d 50 40             	lea    edx,[eax+0x40]
c001fdbd:	80 fa 07             	cmp    dl,0x7
c001fdc0:	77 3a                	ja     c001fdfc <Vm::x87Handler(regs*)+0x4c1>
c001fdc2:	83 ec 0c             	sub    esp,0xc
c001fdc5:	2d c0 00 00 00       	sub    eax,0xc0
c001fdca:	50                   	push   eax
c001fdcb:	e8 2e fa ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001fdd0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdd7:	89 c6                	mov    esi,eax
c001fdd9:	89 d7                	mov    edi,edx
c001fddb:	e8 1e fa ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001fde0:	57                   	push   edi
c001fde1:	56                   	push   esi
c001fde2:	52                   	push   edx
c001fde3:	50                   	push   eax
c001fde4:	e8 8b f9 ff ff       	call   c001f774 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fde9:	83 c4 1c             	add    esp,0x1c
c001fdec:	52                   	push   edx
c001fded:	50                   	push   eax
c001fdee:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdf2:	2d c0 00 00 00       	sub    eax,0xc0
c001fdf7:	e9 9e 01 00 00       	jmp    c001ff9a <Vm::x87Handler(regs*)+0x65f>
c001fdfc:	8d 50 20             	lea    edx,[eax+0x20]
c001fdff:	80 fa 07             	cmp    dl,0x7
c001fe02:	77 3a                	ja     c001fe3e <Vm::x87Handler(regs*)+0x503>
c001fe04:	83 ec 0c             	sub    esp,0xc
c001fe07:	2d e0 00 00 00       	sub    eax,0xe0
c001fe0c:	50                   	push   eax
c001fe0d:	e8 ec f9 ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001fe12:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe19:	89 c6                	mov    esi,eax
c001fe1b:	89 d7                	mov    edi,edx
c001fe1d:	e8 dc f9 ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001fe22:	57                   	push   edi
c001fe23:	56                   	push   esi
c001fe24:	52                   	push   edx
c001fe25:	50                   	push   eax
c001fe26:	e8 73 f9 ff ff       	call   c001f79e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe2b:	83 c4 1c             	add    esp,0x1c
c001fe2e:	52                   	push   edx
c001fe2f:	50                   	push   eax
c001fe30:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe34:	2d e0 00 00 00       	sub    eax,0xe0
c001fe39:	e9 5c 01 00 00       	jmp    c001ff9a <Vm::x87Handler(regs*)+0x65f>
c001fe3e:	8d 50 18             	lea    edx,[eax+0x18]
c001fe41:	80 fa 07             	cmp    dl,0x7
c001fe44:	77 3b                	ja     c001fe81 <Vm::x87Handler(regs*)+0x546>
c001fe46:	83 ec 0c             	sub    esp,0xc
c001fe49:	6a 00                	push   0x0
c001fe4b:	e8 ae f9 ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001fe50:	89 c6                	mov    esi,eax
c001fe52:	89 d7                	mov    edi,edx
c001fe54:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe58:	2d e8 00 00 00       	sub    eax,0xe8
c001fe5d:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe60:	e8 99 f9 ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001fe65:	57                   	push   edi
c001fe66:	56                   	push   esi
c001fe67:	52                   	push   edx
c001fe68:	50                   	push   eax
c001fe69:	e8 30 f9 ff ff       	call   c001f79e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe6e:	83 c4 1c             	add    esp,0x1c
c001fe71:	52                   	push   edx
c001fe72:	50                   	push   eax
c001fe73:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe77:	2d e8 00 00 00       	sub    eax,0xe8
c001fe7c:	e9 19 01 00 00       	jmp    c001ff9a <Vm::x87Handler(regs*)+0x65f>
c001fe81:	8d 50 38             	lea    edx,[eax+0x38]
c001fe84:	80 fa 07             	cmp    dl,0x7
c001fe87:	77 37                	ja     c001fec0 <Vm::x87Handler(regs*)+0x585>
c001fe89:	83 ec 0c             	sub    esp,0xc
c001fe8c:	2d c8 00 00 00       	sub    eax,0xc8
c001fe91:	50                   	push   eax
c001fe92:	e8 67 f9 ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001fe97:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe9e:	89 c6                	mov    esi,eax
c001fea0:	89 d7                	mov    edi,edx
c001fea2:	e8 57 f9 ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001fea7:	57                   	push   edi
c001fea8:	56                   	push   esi
c001fea9:	52                   	push   edx
c001feaa:	50                   	push   eax
c001feab:	e8 fd f8 ff ff       	call   c001f7ad <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001feb0:	83 c4 1c             	add    esp,0x1c
c001feb3:	52                   	push   edx
c001feb4:	50                   	push   eax
c001feb5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feb9:	2d c8 00 00 00       	sub    eax,0xc8
c001febe:	eb 7d                	jmp    c001ff3d <Vm::x87Handler(regs*)+0x602>
c001fec0:	3c f7                	cmp    al,0xf7
c001fec2:	76 38                	jbe    c001fefc <Vm::x87Handler(regs*)+0x5c1>
c001fec4:	83 ec 0c             	sub    esp,0xc
c001fec7:	6a 00                	push   0x0
c001fec9:	e8 30 f9 ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001fece:	89 c6                	mov    esi,eax
c001fed0:	89 d7                	mov    edi,edx
c001fed2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fed6:	2d f8 00 00 00       	sub    eax,0xf8
c001fedb:	89 04 24             	mov    DWORD PTR [esp],eax
c001fede:	e8 1b f9 ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001fee3:	57                   	push   edi
c001fee4:	56                   	push   esi
c001fee5:	52                   	push   edx
c001fee6:	50                   	push   eax
c001fee7:	e8 e0 f8 ff ff       	call   c001f7cc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001feec:	83 c4 1c             	add    esp,0x1c
c001feef:	52                   	push   edx
c001fef0:	50                   	push   eax
c001fef1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fef5:	2d f8 00 00 00       	sub    eax,0xf8
c001fefa:	eb 41                	jmp    c001ff3d <Vm::x87Handler(regs*)+0x602>
c001fefc:	8d 50 10             	lea    edx,[eax+0x10]
c001feff:	80 fa 07             	cmp    dl,0x7
c001ff02:	0f 87 5a 01 00 00    	ja     c0020062 <Vm::x87Handler(regs*)+0x727>
c001ff08:	83 ec 0c             	sub    esp,0xc
c001ff0b:	2d f0 00 00 00       	sub    eax,0xf0
c001ff10:	50                   	push   eax
c001ff11:	e8 e8 f8 ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001ff16:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff1d:	89 c6                	mov    esi,eax
c001ff1f:	89 d7                	mov    edi,edx
c001ff21:	e8 d8 f8 ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001ff26:	57                   	push   edi
c001ff27:	56                   	push   esi
c001ff28:	52                   	push   edx
c001ff29:	50                   	push   eax
c001ff2a:	e8 9d f8 ff ff       	call   c001f7cc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ff2f:	83 c4 1c             	add    esp,0x1c
c001ff32:	52                   	push   edx
c001ff33:	50                   	push   eax
c001ff34:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff38:	2d f0 00 00 00       	sub    eax,0xf0
c001ff3d:	50                   	push   eax
c001ff3e:	e8 fe f8 ff ff       	call   c001f841 <Vm::fpuSetReg(int, unsigned long long)>
c001ff43:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ff47:	e8 9d f9 ff ff       	call   c001f8e9 <Vm::fpuPop()>
c001ff4c:	e9 5e fa ff ff       	jmp    c001f9af <Vm::x87Handler(regs*)+0x74>
c001ff51:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff55:	8d 50 30             	lea    edx,[eax+0x30]
c001ff58:	80 fa 07             	cmp    dl,0x7
c001ff5b:	77 1d                	ja     c001ff7a <Vm::x87Handler(regs*)+0x63f>
c001ff5d:	83 ec 0c             	sub    esp,0xc
c001ff60:	6a 00                	push   0x0
c001ff62:	e8 97 f8 ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001ff67:	83 c4 0c             	add    esp,0xc
c001ff6a:	52                   	push   edx
c001ff6b:	50                   	push   eax
c001ff6c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff70:	2d d0 00 00 00       	sub    eax,0xd0
c001ff75:	e9 f3 fd ff ff       	jmp    c001fd6d <Vm::x87Handler(regs*)+0x432>
c001ff7a:	8d 50 28             	lea    edx,[eax+0x28]
c001ff7d:	80 fa 07             	cmp    dl,0x7
c001ff80:	77 28                	ja     c001ffaa <Vm::x87Handler(regs*)+0x66f>
c001ff82:	83 ec 0c             	sub    esp,0xc
c001ff85:	6a 00                	push   0x0
c001ff87:	e8 72 f8 ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001ff8c:	83 c4 0c             	add    esp,0xc
c001ff8f:	52                   	push   edx
c001ff90:	50                   	push   eax
c001ff91:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff95:	2d d8 00 00 00       	sub    eax,0xd8
c001ff9a:	50                   	push   eax
c001ff9b:	e8 a1 f8 ff ff       	call   c001f841 <Vm::fpuSetReg(int, unsigned long long)>
c001ffa0:	e8 44 f9 ff ff       	call   c001f8e9 <Vm::fpuPop()>
c001ffa5:	e9 01 fa ff ff       	jmp    c001f9ab <Vm::x87Handler(regs*)+0x70>
c001ffaa:	8d 50 20             	lea    edx,[eax+0x20]
c001ffad:	80 fa 07             	cmp    dl,0x7
c001ffb0:	77 30                	ja     c001ffe2 <Vm::x87Handler(regs*)+0x6a7>
c001ffb2:	83 ec 0c             	sub    esp,0xc
c001ffb5:	2d e0 00 00 00       	sub    eax,0xe0
c001ffba:	50                   	push   eax
c001ffbb:	e8 3e f8 ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001ffc0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffc7:	89 c6                	mov    esi,eax
c001ffc9:	89 d7                	mov    edi,edx
c001ffcb:	e8 2e f8 ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001ffd0:	57                   	push   edi
c001ffd1:	56                   	push   esi
c001ffd2:	52                   	push   edx
c001ffd3:	50                   	push   eax
c001ffd4:	e8 48 f7 ff ff       	call   c001f721 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ffd9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ffdd:	e9 54 02 00 00       	jmp    c0020236 <Vm::x87Handler(regs*)+0x8fb>
c001ffe2:	8d 50 18             	lea    edx,[eax+0x18]
c001ffe5:	80 fa 07             	cmp    dl,0x7
c001ffe8:	0f 87 43 fb ff ff    	ja     c001fb31 <Vm::x87Handler(regs*)+0x1f6>
c001ffee:	83 ec 0c             	sub    esp,0xc
c001fff1:	2d e8 00 00 00       	sub    eax,0xe8
c001fff6:	50                   	push   eax
c001fff7:	e8 02 f8 ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c001fffc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020003:	89 c6                	mov    esi,eax
c0020005:	89 d7                	mov    edi,edx
c0020007:	e8 f2 f7 ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c002000c:	57                   	push   edi
c002000d:	56                   	push   esi
c002000e:	52                   	push   edx
c002000f:	50                   	push   eax
c0020010:	e8 0c f7 ff ff       	call   c001f721 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020015:	83 c4 20             	add    esp,0x20
c0020018:	e8 cc f8 ff ff       	call   c001f8e9 <Vm::fpuPop()>
c002001d:	eb 62                	jmp    c0020081 <Vm::x87Handler(regs*)+0x746>
c002001f:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020023:	0f 85 0f 01 00 00    	jne    c0020138 <Vm::x87Handler(regs*)+0x7fd>
c0020029:	83 ec 0c             	sub    esp,0xc
c002002c:	6a 01                	push   0x1
c002002e:	e8 cb f7 ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c0020033:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002003a:	89 c6                	mov    esi,eax
c002003c:	89 d7                	mov    edi,edx
c002003e:	e8 bb f7 ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c0020043:	57                   	push   edi
c0020044:	56                   	push   esi
c0020045:	52                   	push   edx
c0020046:	50                   	push   eax
c0020047:	e8 d5 f6 ff ff       	call   c001f721 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002004c:	83 c4 20             	add    esp,0x20
c002004f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020053:	e8 91 f8 ff ff       	call   c001f8e9 <Vm::fpuPop()>
c0020058:	e8 8c f8 ff ff       	call   c001f8e9 <Vm::fpuPop()>
c002005d:	e9 50 f9 ff ff       	jmp    c001f9b2 <Vm::x87Handler(regs*)+0x77>
c0020062:	3c d9                	cmp    al,0xd9
c0020064:	0f 85 b5 02 00 00    	jne    c002031f <Vm::x87Handler(regs*)+0x9e4>
c002006a:	eb bd                	jmp    c0020029 <Vm::x87Handler(regs*)+0x6ee>
c002006c:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020070:	0f 85 ea 02 00 00    	jne    c0020360 <Vm::x87Handler(regs*)+0xa25>
c0020076:	0f b7 05 80 fc 02 c0 	movzx  eax,WORD PTR ds:0xc002fc80
c002007d:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020081:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020085:	e9 28 f9 ff ff       	jmp    c001f9b2 <Vm::x87Handler(regs*)+0x77>
c002008a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002008e:	84 d2                	test   dl,dl
c0020090:	75 0f                	jne    c00200a1 <Vm::x87Handler(regs*)+0x766>
c0020092:	83 ec 0c             	sub    esp,0xc
c0020095:	ff 36                	push   DWORD PTR [esi]
c0020097:	e8 b1 f4 ff ff       	call   c001f54d <Vm::fpu32ToInternal(unsigned int)>
c002009c:	e9 2c 01 00 00       	jmp    c00201cd <Vm::x87Handler(regs*)+0x892>
c00200a1:	80 fa 01             	cmp    dl,0x1
c00200a4:	75 0f                	jne    c00200b5 <Vm::x87Handler(regs*)+0x77a>
c00200a6:	83 ec 0c             	sub    esp,0xc
c00200a9:	ff 36                	push   DWORD PTR [esi]
c00200ab:	e8 9d f4 ff ff       	call   c001f54d <Vm::fpu32ToInternal(unsigned int)>
c00200b0:	e9 81 02 00 00       	jmp    c0020336 <Vm::x87Handler(regs*)+0x9fb>
c00200b5:	80 fa 04             	cmp    dl,0x4
c00200b8:	75 0f                	jne    c00200c9 <Vm::x87Handler(regs*)+0x78e>
c00200ba:	83 ec 0c             	sub    esp,0xc
c00200bd:	ff 36                	push   DWORD PTR [esi]
c00200bf:	e8 89 f4 ff ff       	call   c001f54d <Vm::fpu32ToInternal(unsigned int)>
c00200c4:	e9 86 01 00 00       	jmp    c002024f <Vm::x87Handler(regs*)+0x914>
c00200c9:	80 fa 05             	cmp    dl,0x5
c00200cc:	75 1b                	jne    c00200e9 <Vm::x87Handler(regs*)+0x7ae>
c00200ce:	83 ec 0c             	sub    esp,0xc
c00200d1:	6a 00                	push   0x0
c00200d3:	e8 26 f7 ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c00200d8:	89 c7                	mov    edi,eax
c00200da:	89 d5                	mov    ebp,edx
c00200dc:	58                   	pop    eax
c00200dd:	ff 36                	push   DWORD PTR [esi]
c00200df:	e8 69 f4 ff ff       	call   c001f54d <Vm::fpu32ToInternal(unsigned int)>
c00200e4:	e9 a3 01 00 00       	jmp    c002028c <Vm::x87Handler(regs*)+0x951>
c00200e9:	80 fa 06             	cmp    dl,0x6
c00200ec:	75 0f                	jne    c00200fd <Vm::x87Handler(regs*)+0x7c2>
c00200ee:	83 ec 0c             	sub    esp,0xc
c00200f1:	ff 36                	push   DWORD PTR [esi]
c00200f3:	e8 55 f4 ff ff       	call   c001f54d <Vm::fpu32ToInternal(unsigned int)>
c00200f8:	e9 ae 01 00 00       	jmp    c00202ab <Vm::x87Handler(regs*)+0x970>
c00200fd:	31 c0                	xor    eax,eax
c00200ff:	80 fa 07             	cmp    dl,0x7
c0020102:	0f 85 94 02 00 00    	jne    c002039c <Vm::x87Handler(regs*)+0xa61>
c0020108:	83 ec 0c             	sub    esp,0xc
c002010b:	6a 00                	push   0x0
c002010d:	e8 ec f6 ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c0020112:	89 c7                	mov    edi,eax
c0020114:	89 d5                	mov    ebp,edx
c0020116:	58                   	pop    eax
c0020117:	ff 36                	push   DWORD PTR [esi]
c0020119:	e8 2f f4 ff ff       	call   c001f54d <Vm::fpu32ToInternal(unsigned int)>
c002011e:	e9 cb 01 00 00       	jmp    c00202ee <Vm::x87Handler(regs*)+0x9b3>
c0020123:	80 fa 03             	cmp    dl,0x3
c0020126:	0f 85 d3 01 00 00    	jne    c00202ff <Vm::x87Handler(regs*)+0x9c4>
c002012c:	e8 b8 f7 ff ff       	call   c001f8e9 <Vm::fpuPop()>
c0020131:	51                   	push   ecx
c0020132:	51                   	push   ecx
c0020133:	e9 de 01 00 00       	jmp    c0020316 <Vm::x87Handler(regs*)+0x9db>
c0020138:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002013c:	80 fa 01             	cmp    dl,0x1
c002013f:	75 09                	jne    c002014a <Vm::x87Handler(regs*)+0x80f>
c0020141:	57                   	push   edi
c0020142:	57                   	push   edi
c0020143:	8b 06                	mov    eax,DWORD PTR [esi]
c0020145:	e9 e3 01 00 00       	jmp    c002032d <Vm::x87Handler(regs*)+0x9f2>
c002014a:	80 fa 04             	cmp    dl,0x4
c002014d:	75 12                	jne    c0020161 <Vm::x87Handler(regs*)+0x826>
c002014f:	31 d2                	xor    edx,edx
c0020151:	51                   	push   ecx
c0020152:	51                   	push   ecx
c0020153:	8b 06                	mov    eax,DWORD PTR [esi]
c0020155:	52                   	push   edx
c0020156:	50                   	push   eax
c0020157:	e8 d0 f4 ff ff       	call   c001f62c <Vm::fpuLongToFloat(long long)>
c002015c:	e9 ee 00 00 00       	jmp    c002024f <Vm::x87Handler(regs*)+0x914>
c0020161:	31 c0                	xor    eax,eax
c0020163:	80 fa 07             	cmp    dl,0x7
c0020166:	0f 85 30 02 00 00    	jne    c002039c <Vm::x87Handler(regs*)+0xa61>
c002016c:	83 ec 0c             	sub    esp,0xc
c002016f:	6a 00                	push   0x0
c0020171:	e8 88 f6 ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c0020176:	89 c7                	mov    edi,eax
c0020178:	89 d5                	mov    ebp,edx
c002017a:	58                   	pop    eax
c002017b:	8b 06                	mov    eax,DWORD PTR [esi]
c002017d:	5a                   	pop    edx
c002017e:	31 d2                	xor    edx,edx
c0020180:	52                   	push   edx
c0020181:	50                   	push   eax
c0020182:	e8 a5 f4 ff ff       	call   c001f62c <Vm::fpuLongToFloat(long long)>
c0020187:	e9 62 01 00 00       	jmp    c00202ee <Vm::x87Handler(regs*)+0x9b3>
c002018c:	84 d2                	test   dl,dl
c002018e:	75 0d                	jne    c002019d <Vm::x87Handler(regs*)+0x862>
c0020190:	31 d2                	xor    edx,edx
c0020192:	55                   	push   ebp
c0020193:	55                   	push   ebp
c0020194:	8b 06                	mov    eax,DWORD PTR [esi]
c0020196:	52                   	push   edx
c0020197:	50                   	push   eax
c0020198:	e9 d3 01 00 00       	jmp    c0020370 <Vm::x87Handler(regs*)+0xa35>
c002019d:	31 c0                	xor    eax,eax
c002019f:	80 fa 02             	cmp    dl,0x2
c00201a2:	0f 85 f4 01 00 00    	jne    c002039c <Vm::x87Handler(regs*)+0xa61>
c00201a8:	83 ec 0c             	sub    esp,0xc
c00201ab:	6a 00                	push   0x0
c00201ad:	e8 4c f6 ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c00201b2:	59                   	pop    ecx
c00201b3:	5f                   	pop    edi
c00201b4:	e9 6a f9 ff ff       	jmp    c001fb23 <Vm::x87Handler(regs*)+0x1e8>
c00201b9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00201bd:	84 d2                	test   dl,dl
c00201bf:	75 2a                	jne    c00201eb <Vm::x87Handler(regs*)+0x8b0>
c00201c1:	50                   	push   eax
c00201c2:	50                   	push   eax
c00201c3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00201c6:	ff 36                	push   DWORD PTR [esi]
c00201c8:	e8 c5 f3 ff ff       	call   c001f592 <Vm::fpu64ToInternal(unsigned long long)>
c00201cd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201d4:	89 c6                	mov    esi,eax
c00201d6:	89 d7                	mov    edi,edx
c00201d8:	e8 21 f6 ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c00201dd:	57                   	push   edi
c00201de:	56                   	push   esi
c00201df:	52                   	push   edx
c00201e0:	50                   	push   eax
c00201e1:	e8 8e f5 ff ff       	call   c001f774 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00201e6:	e9 64 01 00 00       	jmp    c002034f <Vm::x87Handler(regs*)+0xa14>
c00201eb:	80 fa 01             	cmp    dl,0x1
c00201ee:	75 11                	jne    c0020201 <Vm::x87Handler(regs*)+0x8c6>
c00201f0:	50                   	push   eax
c00201f1:	50                   	push   eax
c00201f2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00201f5:	ff 36                	push   DWORD PTR [esi]
c00201f7:	e8 96 f3 ff ff       	call   c001f592 <Vm::fpu64ToInternal(unsigned long long)>
c00201fc:	e9 35 01 00 00       	jmp    c0020336 <Vm::x87Handler(regs*)+0x9fb>
c0020201:	80 fa 02             	cmp    dl,0x2
c0020204:	0f 85 54 f9 ff ff    	jne    c001fb5e <Vm::x87Handler(regs*)+0x223>
c002020a:	55                   	push   ebp
c002020b:	55                   	push   ebp
c002020c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002020f:	ff 36                	push   DWORD PTR [esi]
c0020211:	e8 7c f3 ff ff       	call   c001f592 <Vm::fpu64ToInternal(unsigned long long)>
c0020216:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002021d:	89 c6                	mov    esi,eax
c002021f:	89 d7                	mov    edi,edx
c0020221:	e8 d8 f5 ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c0020226:	57                   	push   edi
c0020227:	56                   	push   esi
c0020228:	52                   	push   edx
c0020229:	50                   	push   eax
c002022a:	e8 f2 f4 ff ff       	call   c001f721 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002022f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020233:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020236:	83 c4 20             	add    esp,0x20
c0020239:	e9 74 f7 ff ff       	jmp    c001f9b2 <Vm::x87Handler(regs*)+0x77>
c002023e:	80 fa 04             	cmp    dl,0x4
c0020241:	75 2a                	jne    c002026d <Vm::x87Handler(regs*)+0x932>
c0020243:	51                   	push   ecx
c0020244:	51                   	push   ecx
c0020245:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020248:	ff 36                	push   DWORD PTR [esi]
c002024a:	e8 43 f3 ff ff       	call   c001f592 <Vm::fpu64ToInternal(unsigned long long)>
c002024f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020256:	89 c6                	mov    esi,eax
c0020258:	89 d7                	mov    edi,edx
c002025a:	e8 9f f5 ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c002025f:	57                   	push   edi
c0020260:	56                   	push   esi
c0020261:	52                   	push   edx
c0020262:	50                   	push   eax
c0020263:	e8 36 f5 ff ff       	call   c001f79e <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020268:	e9 e2 00 00 00       	jmp    c002034f <Vm::x87Handler(regs*)+0xa14>
c002026d:	80 fa 05             	cmp    dl,0x5
c0020270:	75 28                	jne    c002029a <Vm::x87Handler(regs*)+0x95f>
c0020272:	83 ec 0c             	sub    esp,0xc
c0020275:	6a 00                	push   0x0
c0020277:	e8 82 f5 ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c002027c:	89 c7                	mov    edi,eax
c002027e:	89 d5                	mov    ebp,edx
c0020280:	58                   	pop    eax
c0020281:	5a                   	pop    edx
c0020282:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020285:	ff 36                	push   DWORD PTR [esi]
c0020287:	e8 06 f3 ff ff       	call   c001f592 <Vm::fpu64ToInternal(unsigned long long)>
c002028c:	83 c4 10             	add    esp,0x10
c002028f:	55                   	push   ebp
c0020290:	57                   	push   edi
c0020291:	52                   	push   edx
c0020292:	50                   	push   eax
c0020293:	e8 06 f5 ff ff       	call   c001f79e <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020298:	eb 60                	jmp    c00202fa <Vm::x87Handler(regs*)+0x9bf>
c002029a:	80 fa 06             	cmp    dl,0x6
c002029d:	75 2a                	jne    c00202c9 <Vm::x87Handler(regs*)+0x98e>
c002029f:	51                   	push   ecx
c00202a0:	51                   	push   ecx
c00202a1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202a4:	ff 36                	push   DWORD PTR [esi]
c00202a6:	e8 e7 f2 ff ff       	call   c001f592 <Vm::fpu64ToInternal(unsigned long long)>
c00202ab:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202b2:	89 c6                	mov    esi,eax
c00202b4:	89 d7                	mov    edi,edx
c00202b6:	e8 43 f5 ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c00202bb:	57                   	push   edi
c00202bc:	56                   	push   esi
c00202bd:	52                   	push   edx
c00202be:	50                   	push   eax
c00202bf:	e8 08 f5 ff ff       	call   c001f7cc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00202c4:	e9 86 00 00 00       	jmp    c002034f <Vm::x87Handler(regs*)+0xa14>
c00202c9:	31 c0                	xor    eax,eax
c00202cb:	80 fa 07             	cmp    dl,0x7
c00202ce:	0f 85 c8 00 00 00    	jne    c002039c <Vm::x87Handler(regs*)+0xa61>
c00202d4:	83 ec 0c             	sub    esp,0xc
c00202d7:	6a 00                	push   0x0
c00202d9:	e8 20 f5 ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c00202de:	89 c7                	mov    edi,eax
c00202e0:	89 d5                	mov    ebp,edx
c00202e2:	58                   	pop    eax
c00202e3:	5a                   	pop    edx
c00202e4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202e7:	ff 36                	push   DWORD PTR [esi]
c00202e9:	e8 a4 f2 ff ff       	call   c001f592 <Vm::fpu64ToInternal(unsigned long long)>
c00202ee:	83 c4 10             	add    esp,0x10
c00202f1:	55                   	push   ebp
c00202f2:	57                   	push   edi
c00202f3:	52                   	push   edx
c00202f4:	50                   	push   eax
c00202f5:	e8 d2 f4 ff ff       	call   c001f7cc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00202fa:	83 c4 0c             	add    esp,0xc
c00202fd:	eb 53                	jmp    c0020352 <Vm::x87Handler(regs*)+0xa17>
c00202ff:	31 c0                	xor    eax,eax
c0020301:	80 fa 02             	cmp    dl,0x2
c0020304:	0f 85 92 00 00 00    	jne    c002039c <Vm::x87Handler(regs*)+0xa61>
c002030a:	83 ec 0c             	sub    esp,0xc
c002030d:	6a 00                	push   0x0
c002030f:	e8 ea f4 ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c0020314:	59                   	pop    ecx
c0020315:	5f                   	pop    edi
c0020316:	52                   	push   edx
c0020317:	50                   	push   eax
c0020318:	e8 27 f2 ff ff       	call   c001f544 <Vm::fpuInternalTo64(unsigned long long)>
c002031d:	eb 70                	jmp    c002038f <Vm::x87Handler(regs*)+0xa54>
c002031f:	31 c0                	xor    eax,eax
c0020321:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020326:	75 74                	jne    c002039c <Vm::x87Handler(regs*)+0xa61>
c0020328:	50                   	push   eax
c0020329:	50                   	push   eax
c002032a:	0f b7 06             	movzx  eax,WORD PTR [esi]
c002032d:	31 d2                	xor    edx,edx
c002032f:	52                   	push   edx
c0020330:	50                   	push   eax
c0020331:	e8 f6 f2 ff ff       	call   c001f62c <Vm::fpuLongToFloat(long long)>
c0020336:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002033d:	89 c6                	mov    esi,eax
c002033f:	89 d7                	mov    edi,edx
c0020341:	e8 b8 f4 ff ff       	call   c001f7fe <Vm::fpuGetReg(int)>
c0020346:	57                   	push   edi
c0020347:	56                   	push   esi
c0020348:	52                   	push   edx
c0020349:	50                   	push   eax
c002034a:	e8 5e f4 ff ff       	call   c001f7ad <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002034f:	83 c4 1c             	add    esp,0x1c
c0020352:	52                   	push   edx
c0020353:	50                   	push   eax
c0020354:	6a 00                	push   0x0
c0020356:	e8 e6 f4 ff ff       	call   c001f841 <Vm::fpuSetReg(int, unsigned long long)>
c002035b:	e9 f2 f7 ff ff       	jmp    c001fb52 <Vm::x87Handler(regs*)+0x217>
c0020360:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020364:	80 fa 05             	cmp    dl,0x5
c0020367:	75 11                	jne    c002037a <Vm::x87Handler(regs*)+0xa3f>
c0020369:	55                   	push   ebp
c002036a:	55                   	push   ebp
c002036b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002036e:	ff 36                	push   DWORD PTR [esi]
c0020370:	e8 81 f2 ff ff       	call   c001f5f6 <Vm::fpuULongToFloat(unsigned long long)>
c0020375:	e9 cf f7 ff ff       	jmp    c001fb49 <Vm::x87Handler(regs*)+0x20e>
c002037a:	31 c0                	xor    eax,eax
c002037c:	80 fa 07             	cmp    dl,0x7
c002037f:	75 1b                	jne    c002039c <Vm::x87Handler(regs*)+0xa61>
c0020381:	e8 63 f5 ff ff       	call   c001f8e9 <Vm::fpuPop()>
c0020386:	51                   	push   ecx
c0020387:	51                   	push   ecx
c0020388:	52                   	push   edx
c0020389:	50                   	push   eax
c002038a:	e8 0c f2 ff ff       	call   c001f59b <Vm::fpuFloatToLong(unsigned long long)>
c002038f:	83 c4 10             	add    esp,0x10
c0020392:	89 06                	mov    DWORD PTR [esi],eax
c0020394:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020397:	e9 f8 f7 ff ff       	jmp    c001fb94 <Vm::x87Handler(regs*)+0x259>
c002039c:	83 c4 1c             	add    esp,0x1c
c002039f:	5b                   	pop    ebx
c00203a0:	5e                   	pop    esi
c00203a1:	5f                   	pop    edi
c00203a2:	5d                   	pop    ebp
c00203a3:	c3                   	ret    

c00203a4 <__static_initialization_and_destruction_0(int, int)>:
c00203a4:	83 ec 0c             	sub    esp,0xc
c00203a7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00203ac:	75 1a                	jne    c00203c8 <__static_initialization_and_destruction_0(int, int)+0x24>
c00203ae:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00203b6:	75 10                	jne    c00203c8 <__static_initialization_and_destruction_0(int, int)+0x24>
c00203b8:	83 ec 0c             	sub    esp,0xc
c00203bb:	68 80 fc 02 c0       	push   0xc002fc80
c00203c0:	e8 55 8e 00 00       	call   c002921a <Vm::_FPUState::_FPUState()>
c00203c5:	83 c4 10             	add    esp,0x10
c00203c8:	90                   	nop
c00203c9:	83 c4 0c             	add    esp,0xc
c00203cc:	c3                   	ret    

c00203cd <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00203cd:	83 ec 0c             	sub    esp,0xc
c00203d0:	83 ec 08             	sub    esp,0x8
c00203d3:	68 ff ff 00 00       	push   0xffff
c00203d8:	6a 01                	push   0x1
c00203da:	e8 c5 ff ff ff       	call   c00203a4 <__static_initialization_and_destruction_0(int, int)>
c00203df:	83 c4 10             	add    esp,0x10
c00203e2:	83 c4 0c             	add    esp,0xc
c00203e5:	c3                   	ret    

c00203e6 <FAT::getName()>:
c00203e6:	b8 50 cb 02 c0       	mov    eax,0xc002cb50
c00203eb:	c3                   	ret    

c00203ec <FAT::tell(void*, unsigned long long*)>:
c00203ec:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00203f1:	75 06                	jne    c00203f9 <FAT::tell(void*, unsigned long long*)+0xd>
c00203f3:	b8 04 00 00 00       	mov    eax,0x4
c00203f8:	c3                   	ret    
c00203f9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00203fe:	75 06                	jne    c0020406 <FAT::tell(void*, unsigned long long*)+0x1a>
c0020400:	b8 04 00 00 00       	mov    eax,0x4
c0020405:	c3                   	ret    
c0020406:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002040a:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c002040d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020410:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020414:	89 01                	mov    DWORD PTR [ecx],eax
c0020416:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020419:	b8 00 00 00 00       	mov    eax,0x0
c002041e:	c3                   	ret    
c002041f:	90                   	nop

c0020420 <FAT::stat(void*, unsigned long long*)>:
c0020420:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020425:	75 06                	jne    c002042d <FAT::stat(void*, unsigned long long*)+0xd>
c0020427:	b8 04 00 00 00       	mov    eax,0x4
c002042c:	c3                   	ret    
c002042d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020432:	75 06                	jne    c002043a <FAT::stat(void*, unsigned long long*)+0x1a>
c0020434:	b8 04 00 00 00       	mov    eax,0x4
c0020439:	c3                   	ret    
c002043a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002043e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020441:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020444:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020448:	89 01                	mov    DWORD PTR [ecx],eax
c002044a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002044d:	b8 00 00 00 00       	mov    eax,0x0
c0020452:	c3                   	ret    
c0020453:	90                   	nop

c0020454 <FAT::~FAT()>:
c0020454:	83 ec 0c             	sub    esp,0xc
c0020457:	ba 9c cb 02 c0       	mov    edx,0xc002cb9c
c002045c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020460:	89 10                	mov    DWORD PTR [eax],edx
c0020462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020466:	83 ec 0c             	sub    esp,0xc
c0020469:	50                   	push   eax
c002046a:	e8 fb 28 ff ff       	call   c0012d6a <Filesystem::~Filesystem()>
c002046f:	83 c4 10             	add    esp,0x10
c0020472:	90                   	nop
c0020473:	83 c4 0c             	add    esp,0xc
c0020476:	c3                   	ret    
c0020477:	90                   	nop

c0020478 <FAT::~FAT()>:
c0020478:	83 ec 0c             	sub    esp,0xc
c002047b:	83 ec 0c             	sub    esp,0xc
c002047e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020482:	e8 cd ff ff ff       	call   c0020454 <FAT::~FAT()>
c0020487:	83 c4 10             	add    esp,0x10
c002048a:	83 ec 08             	sub    esp,0x8
c002048d:	6a 08                	push   0x8
c002048f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020493:	e8 cb 24 ff ff       	call   c0012963 <operator delete(void*, unsigned long)>
c0020498:	83 c4 10             	add    esp,0x10
c002049b:	83 c4 0c             	add    esp,0xc
c002049e:	c3                   	ret    
c002049f:	90                   	nop

c00204a0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00204a0:	83 ec 1c             	sub    esp,0x1c
c00204a3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00204aa:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00204af:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00204b3:	8b 04 85 00 fd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0300]
c00204ba:	83 f8 ff             	cmp    eax,0xffffffff
c00204bd:	75 34                	jne    c00204f3 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00204bf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00204c3:	88 c2                	mov    dl,al
c00204c5:	a1 e0 fc 02 c0       	mov    eax,ds:0xc002fce0
c00204ca:	01 d0                	add    eax,edx
c00204cc:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00204d0:	8b 15 e0 fc 02 c0    	mov    edx,DWORD PTR ds:0xc002fce0
c00204d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00204da:	89 14 85 00 fd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0300],edx
c00204e1:	a1 e0 fc 02 c0       	mov    eax,ds:0xc002fce0
c00204e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00204ea:	89 14 85 80 fd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0280],edx
c00204f1:	eb 17                	jmp    c002050a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00204f3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00204f7:	88 c2                	mov    dl,al
c00204f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00204fd:	8b 04 85 00 fd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0300]
c0020504:	01 d0                	add    eax,edx
c0020506:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002050a:	83 ec 04             	sub    esp,0x4
c002050d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020511:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020515:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020519:	50                   	push   eax
c002051a:	e8 df 67 fe ff       	call   c0006cfe <f_getlabel>
c002051f:	83 c4 10             	add    esp,0x10
c0020522:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020526:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002052b:	75 07                	jne    c0020534 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c002052d:	b8 00 00 00 00       	mov    eax,0x0
c0020532:	eb 05                	jmp    c0020539 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020534:	b8 01 00 00 00       	mov    eax,0x1
c0020539:	83 c4 1c             	add    esp,0x1c
c002053c:	c3                   	ret    
c002053d:	90                   	nop

c002053e <FAT::setlabel(LogicalDisk*, int, char*)>:
c002053e:	57                   	push   edi
c002053f:	83 ec 58             	sub    esp,0x58
c0020542:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c002054a:	8d 54 24 10          	lea    edx,[esp+0x10]
c002054e:	b9 0f 00 00 00       	mov    ecx,0xf
c0020553:	b8 00 00 00 00       	mov    eax,0x0
c0020558:	fc                   	cld    
c0020559:	89 d7                	mov    edi,edx
c002055b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002055d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020561:	8b 04 85 00 fd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0300]
c0020568:	83 f8 ff             	cmp    eax,0xffffffff
c002056b:	75 34                	jne    c00205a1 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c002056d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020571:	88 c2                	mov    dl,al
c0020573:	a1 e0 fc 02 c0       	mov    eax,ds:0xc002fce0
c0020578:	01 d0                	add    eax,edx
c002057a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002057e:	8b 15 e0 fc 02 c0    	mov    edx,DWORD PTR ds:0xc002fce0
c0020584:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020588:	89 14 85 00 fd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0300],edx
c002058f:	a1 e0 fc 02 c0       	mov    eax,ds:0xc002fce0
c0020594:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020598:	89 14 85 80 fd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0280],edx
c002059f:	eb 17                	jmp    c00205b8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00205a1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00205a5:	88 c2                	mov    dl,al
c00205a7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00205ab:	8b 04 85 00 fd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0300]
c00205b2:	01 d0                	add    eax,edx
c00205b4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00205b8:	83 ec 08             	sub    esp,0x8
c00205bb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00205bf:	8d 44 24 18          	lea    eax,[esp+0x18]
c00205c3:	50                   	push   eax
c00205c4:	e8 83 03 fe ff       	call   c000094c <strcat>
c00205c9:	83 c4 10             	add    esp,0x10
c00205cc:	83 ec 0c             	sub    esp,0xc
c00205cf:	8d 44 24 18          	lea    eax,[esp+0x18]
c00205d3:	50                   	push   eax
c00205d4:	e8 13 69 fe ff       	call   c0006eec <f_setlabel>
c00205d9:	83 c4 10             	add    esp,0x10
c00205dc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00205e0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00205e5:	75 07                	jne    c00205ee <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00205e7:	b8 00 00 00 00       	mov    eax,0x0
c00205ec:	eb 05                	jmp    c00205f3 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00205ee:	b8 01 00 00 00       	mov    eax,0x1
c00205f3:	83 c4 58             	add    esp,0x58
c00205f6:	5f                   	pop    edi
c00205f7:	c3                   	ret    

c00205f8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00205f8:	83 ec 2c             	sub    esp,0x2c
c00205fb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020603:	83 ec 08             	sub    esp,0x8
c0020606:	68 74 cb 02 c0       	push   0xc002cb74
c002060b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002060f:	e8 84 02 fe ff       	call   c0000898 <strcmp>
c0020614:	83 c4 10             	add    esp,0x10
c0020617:	85 c0                	test   eax,eax
c0020619:	0f 94 c0             	sete   al
c002061c:	84 c0                	test   al,al
c002061e:	74 0d                	je     c002062d <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020620:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020628:	e9 a6 00 00 00       	jmp    c00206d3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002062d:	83 ec 08             	sub    esp,0x8
c0020630:	68 66 cb 02 c0       	push   0xc002cb66
c0020635:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020639:	e8 5a 02 fe ff       	call   c0000898 <strcmp>
c002063e:	83 c4 10             	add    esp,0x10
c0020641:	85 c0                	test   eax,eax
c0020643:	0f 94 c0             	sete   al
c0020646:	84 c0                	test   al,al
c0020648:	74 0a                	je     c0020654 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c002064a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020652:	eb 7f                	jmp    c00206d3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020654:	83 ec 08             	sub    esp,0x8
c0020657:	68 6c cb 02 c0       	push   0xc002cb6c
c002065c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020660:	e8 33 02 fe ff       	call   c0000898 <strcmp>
c0020665:	83 c4 10             	add    esp,0x10
c0020668:	85 c0                	test   eax,eax
c002066a:	0f 94 c0             	sete   al
c002066d:	84 c0                	test   al,al
c002066f:	74 0a                	je     c002067b <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020671:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020679:	eb 58                	jmp    c00206d3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002067b:	83 ec 08             	sub    esp,0x8
c002067e:	68 8c 99 02 c0       	push   0xc002998c
c0020683:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020687:	e8 0c 02 fe ff       	call   c0000898 <strcmp>
c002068c:	83 c4 10             	add    esp,0x10
c002068f:	85 c0                	test   eax,eax
c0020691:	0f 94 c0             	sete   al
c0020694:	84 c0                	test   al,al
c0020696:	74 0a                	je     c00206a2 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020698:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00206a0:	eb 31                	jmp    c00206d3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00206a2:	83 ec 08             	sub    esp,0x8
c00206a5:	68 72 cb 02 c0       	push   0xc002cb72
c00206aa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00206ae:	e8 e5 01 fe ff       	call   c0000898 <strcmp>
c00206b3:	83 c4 10             	add    esp,0x10
c00206b6:	85 c0                	test   eax,eax
c00206b8:	0f 94 c0             	sete   al
c00206bb:	84 c0                	test   al,al
c00206bd:	74 0a                	je     c00206c9 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00206bf:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00206c7:	eb 0a                	jmp    c00206d3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00206c9:	b8 08 00 00 00       	mov    eax,0x8
c00206ce:	e9 df 00 00 00       	jmp    c00207b2 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00206d3:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00206da:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00206df:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00206e3:	8b 04 85 00 fd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0300]
c00206ea:	83 f8 ff             	cmp    eax,0xffffffff
c00206ed:	75 34                	jne    c0020723 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00206ef:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00206f3:	88 c2                	mov    dl,al
c00206f5:	a1 e0 fc 02 c0       	mov    eax,ds:0xc002fce0
c00206fa:	01 d0                	add    eax,edx
c00206fc:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020700:	8b 15 e0 fc 02 c0    	mov    edx,DWORD PTR ds:0xc002fce0
c0020706:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002070a:	89 14 85 00 fd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0300],edx
c0020711:	a1 e0 fc 02 c0       	mov    eax,ds:0xc002fce0
c0020716:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002071a:	89 14 85 80 fd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0280],edx
c0020721:	eb 17                	jmp    c002073a <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020723:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020727:	88 c2                	mov    dl,al
c0020729:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002072d:	8b 04 85 00 fd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0300]
c0020734:	01 d0                	add    eax,edx
c0020736:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002073a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002073e:	88 04 24             	mov    BYTE PTR [esp],al
c0020741:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020745:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020749:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020751:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020756:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002075e:	83 ec 0c             	sub    esp,0xc
c0020761:	68 00 20 00 00       	push   0x2000
c0020766:	e8 78 f2 fe ff       	call   c000f9e3 <malloc>
c002076b:	83 c4 10             	add    esp,0x10
c002076e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020772:	68 00 20 00 00       	push   0x2000
c0020777:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002077b:	8d 44 24 08          	lea    eax,[esp+0x8]
c002077f:	50                   	push   eax
c0020780:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020784:	50                   	push   eax
c0020785:	e8 e3 6d fe ff       	call   c000756d <f_mkfs>
c002078a:	83 c4 10             	add    esp,0x10
c002078d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020791:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020796:	75 07                	jne    c002079f <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020798:	b8 00 00 00 00       	mov    eax,0x0
c002079d:	eb 13                	jmp    c00207b2 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c002079f:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00207a4:	75 07                	jne    c00207ad <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c00207a6:	b8 09 00 00 00       	mov    eax,0x9
c00207ab:	eb 05                	jmp    c00207b2 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00207ad:	b8 01 00 00 00       	mov    eax,0x1
c00207b2:	83 c4 2c             	add    esp,0x2c
c00207b5:	c3                   	ret    

c00207b6 <FAT::tryMount(LogicalDisk*, int)>:
c00207b6:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00207bc:	a1 e0 fc 02 c0       	mov    eax,ds:0xc002fce0
c00207c1:	83 f8 14             	cmp    eax,0x14
c00207c4:	75 17                	jne    c00207dd <FAT::tryMount(LogicalDisk*, int)+0x27>
c00207c6:	83 ec 0c             	sub    esp,0xc
c00207c9:	68 78 cb 02 c0       	push   0xc002cb78
c00207ce:	e8 06 9c ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c00207d3:	83 c4 10             	add    esp,0x10
c00207d6:	b0 00                	mov    al,0x0
c00207d8:	e9 d7 01 00 00       	jmp    c00209b4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00207dd:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00207e4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00207ea:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00207f0:	3d 00 02 00 00       	cmp    eax,0x200
c00207f5:	74 07                	je     c00207fe <FAT::tryMount(LogicalDisk*, int)+0x48>
c00207f7:	b0 00                	mov    al,0x0
c00207f9:	e9 b6 01 00 00       	jmp    c00209b4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00207fe:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020806:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002080d:	8b 04 85 00 fd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0300]
c0020814:	83 f8 ff             	cmp    eax,0xffffffff
c0020817:	74 07                	je     c0020820 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020819:	b0 01                	mov    al,0x1
c002081b:	e9 94 01 00 00       	jmp    c00209b4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020820:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c002082a:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020832:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020839:	88 c2                	mov    dl,al
c002083b:	a1 e0 fc 02 c0       	mov    eax,ds:0xc002fce0
c0020840:	01 d0                	add    eax,edx
c0020842:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020849:	8b 15 e0 fc 02 c0    	mov    edx,DWORD PTR ds:0xc002fce0
c002084f:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020856:	89 14 85 00 fd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0300],edx
c002085d:	a1 e0 fc 02 c0       	mov    eax,ds:0xc002fce0
c0020862:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020869:	89 14 85 80 fd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0280],edx
c0020870:	83 ec 0c             	sub    esp,0xc
c0020873:	68 54 02 00 00       	push   0x254
c0020878:	e8 66 f1 fe ff       	call   c000f9e3 <malloc>
c002087d:	83 c4 10             	add    esp,0x10
c0020880:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020887:	83 ec 04             	sub    esp,0x4
c002088a:	6a 00                	push   0x0
c002088c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020893:	50                   	push   eax
c0020894:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002089b:	e8 55 46 fe ff       	call   c0004ef5 <f_mount>
c00208a0:	83 c4 10             	add    esp,0x10
c00208a3:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00208aa:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00208b2:	74 19                	je     c00208cd <FAT::tryMount(LogicalDisk*, int)+0x117>
c00208b4:	83 ec 0c             	sub    esp,0xc
c00208b7:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00208be:	e8 40 f1 fe ff       	call   c000fa03 <rfree>
c00208c3:	83 c4 10             	add    esp,0x10
c00208c6:	b0 00                	mov    al,0x0
c00208c8:	e9 e7 00 00 00       	jmp    c00209b4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00208cd:	83 ec 04             	sub    esp,0x4
c00208d0:	68 00 01 00 00       	push   0x100
c00208d5:	6a 00                	push   0x0
c00208d7:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00208de:	50                   	push   eax
c00208df:	e8 6c fe fd ff       	call   c0000750 <memset>
c00208e4:	83 c4 10             	add    esp,0x10
c00208e7:	83 ec 08             	sub    esp,0x8
c00208ea:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00208f1:	50                   	push   eax
c00208f2:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00208f9:	50                   	push   eax
c00208fa:	e8 4d 00 fe ff       	call   c000094c <strcat>
c00208ff:	83 c4 10             	add    esp,0x10
c0020902:	83 ec 08             	sub    esp,0x8
c0020905:	68 86 cb 02 c0       	push   0xc002cb86
c002090a:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020911:	50                   	push   eax
c0020912:	e8 35 00 fe ff       	call   c000094c <strcat>
c0020917:	83 c4 10             	add    esp,0x10
c002091a:	83 ec 04             	sub    esp,0x4
c002091d:	6a 01                	push   0x1
c002091f:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020926:	50                   	push   eax
c0020927:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002092b:	50                   	push   eax
c002092c:	e8 26 46 fe ff       	call   c0004f57 <f_open>
c0020931:	83 c4 10             	add    esp,0x10
c0020934:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002093b:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020942:	85 c0                	test   eax,eax
c0020944:	74 0a                	je     c0020950 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020946:	78 2d                	js     c0020975 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020948:	83 e8 04             	sub    eax,0x4
c002094b:	83 f8 01             	cmp    eax,0x1
c002094e:	77 25                	ja     c0020975 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020950:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020958:	83 ec 0c             	sub    esp,0xc
c002095b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002095f:	50                   	push   eax
c0020960:	e8 44 51 fe ff       	call   c0005aa9 <f_close>
c0020965:	83 c4 10             	add    esp,0x10
c0020968:	90                   	nop
c0020969:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020971:	74 3a                	je     c00209ad <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020973:	eb 2d                	jmp    c00209a2 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020975:	83 ec 0c             	sub    esp,0xc
c0020978:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002097f:	e8 7f f0 fe ff       	call   c000fa03 <rfree>
c0020984:	83 c4 10             	add    esp,0x10
c0020987:	83 ec 04             	sub    esp,0x4
c002098a:	6a 00                	push   0x0
c002098c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020993:	50                   	push   eax
c0020994:	6a 00                	push   0x0
c0020996:	e8 5a 45 fe ff       	call   c0004ef5 <f_mount>
c002099b:	83 c4 10             	add    esp,0x10
c002099e:	b0 00                	mov    al,0x0
c00209a0:	eb 12                	jmp    c00209b4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209a2:	a1 e0 fc 02 c0       	mov    eax,ds:0xc002fce0
c00209a7:	40                   	inc    eax
c00209a8:	a3 e0 fc 02 c0       	mov    ds:0xc002fce0,eax
c00209ad:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00209b4:	81 c4 6c 03 00 00    	add    esp,0x36c
c00209ba:	c3                   	ret    
c00209bb:	90                   	nop

c00209bc <FAT::allocateSwapfile(char const*, int)>:
c00209bc:	53                   	push   ebx
c00209bd:	81 ec 28 04 00 00    	sub    esp,0x428
c00209c3:	c7 84 24 10 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x410],0x114
c00209ce:	83 ec 0c             	sub    esp,0xc
c00209d1:	ff b4 24 1c 04 00 00 	push   DWORD PTR [esp+0x41c]
c00209d8:	e8 06 f0 fe ff       	call   c000f9e3 <malloc>
c00209dd:	83 c4 10             	add    esp,0x10
c00209e0:	89 c3                	mov    ebx,eax
c00209e2:	a1 10 fc 02 c0       	mov    eax,ds:0xc002fc10
c00209e7:	83 ec 04             	sub    esp,0x4
c00209ea:	50                   	push   eax
c00209eb:	ff b4 24 3c 04 00 00 	push   DWORD PTR [esp+0x43c]
c00209f2:	53                   	push   ebx
c00209f3:	e8 a2 25 ff ff       	call   c0012f9a <File::File(char const*, Process*)>
c00209f8:	83 c4 10             	add    esp,0x10
c00209fb:	89 9c 24 1c 04 00 00 	mov    DWORD PTR [esp+0x41c],ebx
c0020a02:	83 ec 0c             	sub    esp,0xc
c0020a05:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c0020a0c:	e8 65 27 ff ff       	call   c0013176 <File::unlink()>
c0020a11:	83 c4 10             	add    esp,0x10
c0020a14:	83 ec 08             	sub    esp,0x8
c0020a17:	6a 12                	push   0x12
c0020a19:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c0020a20:	e8 d9 25 ff ff       	call   c0012ffe <File::open(FileOpenMode)>
c0020a25:	83 c4 10             	add    esp,0x10
c0020a28:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c0020a2f:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020a35:	89 84 24 18 04 00 00 	mov    DWORD PTR [esp+0x418],eax
c0020a3c:	8b 84 24 38 04 00 00 	mov    eax,DWORD PTR [esp+0x438]
c0020a43:	c1 e0 14             	shl    eax,0x14
c0020a46:	99                   	cdq    
c0020a47:	6a 01                	push   0x1
c0020a49:	52                   	push   edx
c0020a4a:	50                   	push   eax
c0020a4b:	ff b4 24 24 04 00 00 	push   DWORD PTR [esp+0x424]
c0020a52:	e8 02 67 fe ff       	call   c0007159 <f_expand>
c0020a57:	83 c4 10             	add    esp,0x10
c0020a5a:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c0020a61:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a63:	83 c0 10             	add    eax,0x10
c0020a66:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a68:	83 ec 0c             	sub    esp,0xc
c0020a6b:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020a6f:	52                   	push   edx
c0020a70:	8d 54 24 20          	lea    edx,[esp+0x20]
c0020a74:	52                   	push   edx
c0020a75:	6a 00                	push   0x0
c0020a77:	68 00 04 00 00       	push   0x400
c0020a7c:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0020a83:	ff d0                	call   eax
c0020a85:	83 c4 20             	add    esp,0x20
c0020a88:	83 ec 0c             	sub    esp,0xc
c0020a8b:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c0020a92:	e8 c5 25 ff ff       	call   c001305c <File::close()>
c0020a97:	83 c4 10             	add    esp,0x10
c0020a9a:	83 ec 08             	sub    esp,0x8
c0020a9d:	6a 01                	push   0x1
c0020a9f:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c0020aa6:	e8 53 25 ff ff       	call   c0012ffe <File::open(FileOpenMode)>
c0020aab:	83 c4 10             	add    esp,0x10
c0020aae:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c0020ab5:	8b 00                	mov    eax,DWORD PTR [eax]
c0020ab7:	83 c0 0c             	add    eax,0xc
c0020aba:	8b 00                	mov    eax,DWORD PTR [eax]
c0020abc:	83 ec 0c             	sub    esp,0xc
c0020abf:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020ac3:	52                   	push   edx
c0020ac4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020ac8:	52                   	push   edx
c0020ac9:	6a 00                	push   0x0
c0020acb:	6a 04                	push   0x4
c0020acd:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0020ad4:	ff d0                	call   eax
c0020ad6:	83 c4 20             	add    esp,0x20
c0020ad9:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c0020ae0:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020ae6:	89 84 24 18 04 00 00 	mov    DWORD PTR [esp+0x418],eax
c0020aed:	8b 84 24 18 04 00 00 	mov    eax,DWORD PTR [esp+0x418]
c0020af4:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020af7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020afa:	89 84 24 14 04 00 00 	mov    DWORD PTR [esp+0x414],eax
c0020b01:	83 ec 0c             	sub    esp,0xc
c0020b04:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c0020b0b:	e8 4c 25 ff ff       	call   c001305c <File::close()>
c0020b10:	83 c4 10             	add    esp,0x10
c0020b13:	8b 84 24 14 04 00 00 	mov    eax,DWORD PTR [esp+0x414]
c0020b1a:	ba 00 00 00 00       	mov    edx,0x0
c0020b1f:	81 c4 28 04 00 00    	add    esp,0x428
c0020b25:	5b                   	pop    ebx
c0020b26:	c3                   	ret    
c0020b27:	90                   	nop

c0020b28 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020b28:	57                   	push   edi
c0020b29:	56                   	push   esi
c0020b2a:	53                   	push   ebx
c0020b2b:	81 ec 50 02 00 00    	sub    esp,0x250
c0020b31:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0020b39:	74 0a                	je     c0020b45 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0020b3b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0020b43:	75 0a                	jne    c0020b4f <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c0020b45:	b8 04 00 00 00       	mov    eax,0x4
c0020b4a:	e9 29 01 00 00       	jmp    c0020c78 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020b4f:	83 ec 08             	sub    esp,0x8
c0020b52:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020b59:	50                   	push   eax
c0020b5a:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0020b61:	e8 4d 55 fe ff       	call   c00060b3 <f_readdir>
c0020b66:	83 c4 10             	add    esp,0x10
c0020b69:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0020b70:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0020b77:	83 ec 0c             	sub    esp,0xc
c0020b7a:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0020b81:	83 c0 1a             	add    eax,0x1a
c0020b84:	50                   	push   eax
c0020b85:	e8 e2 fb fd ff       	call   c000076c <strlen>
c0020b8a:	83 c4 10             	add    esp,0x10
c0020b8d:	ba 00 00 00 00       	mov    edx,0x0
c0020b92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020b96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020b9a:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0020ba1:	0f b6 c0             	movzx  eax,al
c0020ba4:	83 e0 10             	and    eax,0x10
c0020ba7:	74 07                	je     c0020bb0 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020ba9:	b8 02 00 00 00       	mov    eax,0x2
c0020bae:	eb 05                	jmp    c0020bb5 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020bb0:	b8 01 00 00 00       	mov    eax,0x1
c0020bb5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020bb9:	83 ec 08             	sub    esp,0x8
c0020bbc:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020bc3:	83 c0 1a             	add    eax,0x1a
c0020bc6:	50                   	push   eax
c0020bc7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020bcb:	83 c0 10             	add    eax,0x10
c0020bce:	50                   	push   eax
c0020bcf:	e8 38 fc fd ff       	call   c000080c <strcpy>
c0020bd4:	83 c4 10             	add    esp,0x10
c0020bd7:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020bde:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020be5:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020be9:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0020bf0:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020bf7:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0020bfe:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0020c05:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0020c0c:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0020c13:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0020c1a:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0020c21:	89 c6                	mov    esi,eax
c0020c23:	89 d7                	mov    edi,edx
c0020c25:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020c27:	89 c8                	mov    eax,ecx
c0020c29:	89 fa                	mov    edx,edi
c0020c2b:	89 f3                	mov    ebx,esi
c0020c2d:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0020c34:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0020c3b:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0020c42:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0020c49:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020c4f:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0020c56:	84 c0                	test   al,al
c0020c58:	75 07                	jne    c0020c61 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0020c5a:	b8 07 00 00 00       	mov    eax,0x7
c0020c5f:	eb 17                	jmp    c0020c78 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020c61:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0020c68:	85 c0                	test   eax,eax
c0020c6a:	75 07                	jne    c0020c73 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c0020c6c:	b8 00 00 00 00       	mov    eax,0x0
c0020c71:	eb 05                	jmp    c0020c78 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020c73:	b8 01 00 00 00       	mov    eax,0x1
c0020c78:	81 c4 50 02 00 00    	add    esp,0x250
c0020c7e:	5b                   	pop    ebx
c0020c7f:	5e                   	pop    esi
c0020c80:	5f                   	pop    edi
c0020c81:	c3                   	ret    

c0020c82 <FAT::read(void*, unsigned long, void*, int*)>:
c0020c82:	83 ec 1c             	sub    esp,0x1c
c0020c85:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c8a:	74 07                	je     c0020c93 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020c8c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c91:	75 07                	jne    c0020c9a <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020c93:	b8 04 00 00 00       	mov    eax,0x4
c0020c98:	eb 3d                	jmp    c0020cd7 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c9e:	50                   	push   eax
c0020c9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020ca3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020ca7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cab:	e8 e3 46 fe ff       	call   c0005393 <f_read>
c0020cb0:	83 c4 10             	add    esp,0x10
c0020cb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020cbb:	89 c2                	mov    edx,eax
c0020cbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020cc1:	89 10                	mov    DWORD PTR [eax],edx
c0020cc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cc7:	85 c0                	test   eax,eax
c0020cc9:	75 07                	jne    c0020cd2 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020ccb:	b8 00 00 00 00       	mov    eax,0x0
c0020cd0:	eb 05                	jmp    c0020cd7 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020cd2:	b8 01 00 00 00       	mov    eax,0x1
c0020cd7:	83 c4 1c             	add    esp,0x1c
c0020cda:	c3                   	ret    
c0020cdb:	90                   	nop

c0020cdc <FAT::write(void*, unsigned long, void*, int*)>:
c0020cdc:	83 ec 1c             	sub    esp,0x1c
c0020cdf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020ce4:	74 07                	je     c0020ced <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020ce6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020ceb:	75 07                	jne    c0020cf4 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020ced:	b8 04 00 00 00       	mov    eax,0x4
c0020cf2:	eb 3d                	jmp    c0020d31 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020cf4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020cf8:	50                   	push   eax
c0020cf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020cfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020d01:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d05:	e8 09 49 fe ff       	call   c0005613 <f_write>
c0020d0a:	83 c4 10             	add    esp,0x10
c0020d0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d15:	89 c2                	mov    edx,eax
c0020d17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020d1b:	89 10                	mov    DWORD PTR [eax],edx
c0020d1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d21:	85 c0                	test   eax,eax
c0020d23:	75 07                	jne    c0020d2c <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020d25:	b8 00 00 00 00       	mov    eax,0x0
c0020d2a:	eb 05                	jmp    c0020d31 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020d2c:	b8 01 00 00 00       	mov    eax,0x1
c0020d31:	83 c4 1c             	add    esp,0x1c
c0020d34:	c3                   	ret    
c0020d35:	90                   	nop

c0020d36 <FAT::close(void*)>:
c0020d36:	83 ec 1c             	sub    esp,0x1c
c0020d39:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d3e:	75 07                	jne    c0020d47 <FAT::close(void*)+0x11>
c0020d40:	b8 04 00 00 00       	mov    eax,0x4
c0020d45:	eb 36                	jmp    c0020d7d <FAT::close(void*)+0x47>
c0020d47:	83 ec 0c             	sub    esp,0xc
c0020d4a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d4e:	e8 56 4d fe ff       	call   c0005aa9 <f_close>
c0020d53:	83 c4 10             	add    esp,0x10
c0020d56:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d5a:	83 ec 0c             	sub    esp,0xc
c0020d5d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d61:	e8 8d ec fe ff       	call   c000f9f3 <free>
c0020d66:	83 c4 10             	add    esp,0x10
c0020d69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d6d:	85 c0                	test   eax,eax
c0020d6f:	75 07                	jne    c0020d78 <FAT::close(void*)+0x42>
c0020d71:	b8 00 00 00 00       	mov    eax,0x0
c0020d76:	eb 05                	jmp    c0020d7d <FAT::close(void*)+0x47>
c0020d78:	b8 01 00 00 00       	mov    eax,0x1
c0020d7d:	83 c4 1c             	add    esp,0x1c
c0020d80:	c3                   	ret    
c0020d81:	90                   	nop

c0020d82 <FAT::closeDir(void*)>:
c0020d82:	83 ec 1c             	sub    esp,0x1c
c0020d85:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d8a:	75 07                	jne    c0020d93 <FAT::closeDir(void*)+0x11>
c0020d8c:	b8 04 00 00 00       	mov    eax,0x4
c0020d91:	eb 36                	jmp    c0020dc9 <FAT::closeDir(void*)+0x47>
c0020d93:	83 ec 0c             	sub    esp,0xc
c0020d96:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d9a:	e8 f2 52 fe ff       	call   c0006091 <f_closedir>
c0020d9f:	83 c4 10             	add    esp,0x10
c0020da2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020da6:	83 ec 0c             	sub    esp,0xc
c0020da9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020dad:	e8 41 ec fe ff       	call   c000f9f3 <free>
c0020db2:	83 c4 10             	add    esp,0x10
c0020db5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020db9:	85 c0                	test   eax,eax
c0020dbb:	75 07                	jne    c0020dc4 <FAT::closeDir(void*)+0x42>
c0020dbd:	b8 00 00 00 00       	mov    eax,0x0
c0020dc2:	eb 05                	jmp    c0020dc9 <FAT::closeDir(void*)+0x47>
c0020dc4:	b8 01 00 00 00       	mov    eax,0x1
c0020dc9:	83 c4 1c             	add    esp,0x1c
c0020dcc:	c3                   	ret    
c0020dcd:	90                   	nop

c0020dce <FAT::seek(void*, unsigned long long)>:
c0020dce:	83 ec 2c             	sub    esp,0x2c
c0020dd1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020dd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020dd9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020ddd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020de1:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020de6:	75 07                	jne    c0020def <FAT::seek(void*, unsigned long long)+0x21>
c0020de8:	b8 04 00 00 00       	mov    eax,0x4
c0020ded:	eb 2f                	jmp    c0020e1e <FAT::seek(void*, unsigned long long)+0x50>
c0020def:	83 ec 04             	sub    esp,0x4
c0020df2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020df6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020dfa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020dfe:	e8 d5 4c fe ff       	call   c0005ad8 <f_lseek>
c0020e03:	83 c4 10             	add    esp,0x10
c0020e06:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020e0e:	85 c0                	test   eax,eax
c0020e10:	75 07                	jne    c0020e19 <FAT::seek(void*, unsigned long long)+0x4b>
c0020e12:	b8 00 00 00 00       	mov    eax,0x0
c0020e17:	eb 05                	jmp    c0020e1e <FAT::seek(void*, unsigned long long)+0x50>
c0020e19:	b8 01 00 00 00       	mov    eax,0x1
c0020e1e:	83 c4 2c             	add    esp,0x2c
c0020e21:	c3                   	ret    

c0020e22 <fatWrapperReadDisk>:
c0020e22:	83 ec 1c             	sub    esp,0x1c
c0020e25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e29:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e2d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e31:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e34:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e3c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e41:	8b 04 85 e0 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1320]
c0020e48:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e4c:	83 ec 0c             	sub    esp,0xc
c0020e4f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e53:	52                   	push   edx
c0020e54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e5c:	50                   	push   eax
c0020e5d:	e8 34 55 ff ff       	call   c0016396 <LogicalDisk::read(unsigned long long, int, void*)>
c0020e62:	83 c4 20             	add    esp,0x20
c0020e65:	83 c4 1c             	add    esp,0x1c
c0020e68:	c3                   	ret    

c0020e69 <fatWrapperWriteDisk>:
c0020e69:	83 ec 1c             	sub    esp,0x1c
c0020e6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e70:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e74:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e78:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e83:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e88:	8b 04 85 e0 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1320]
c0020e8f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e93:	83 ec 0c             	sub    esp,0xc
c0020e96:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e9a:	52                   	push   edx
c0020e9b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e9f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ea3:	50                   	push   eax
c0020ea4:	e8 59 55 ff ff       	call   c0016402 <LogicalDisk::write(unsigned long long, int, void*)>
c0020ea9:	83 c4 20             	add    esp,0x20
c0020eac:	83 c4 1c             	add    esp,0x1c
c0020eaf:	c3                   	ret    

c0020eb0 <fatWrapperIoctl>:
c0020eb0:	53                   	push   ebx
c0020eb1:	83 ec 28             	sub    esp,0x28
c0020eb4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020eb8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020ebc:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020ec0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020ec4:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020ec9:	75 31                	jne    c0020efc <fatWrapperIoctl+0x4c>
c0020ecb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ecf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020ed3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ed8:	8b 04 85 e0 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1320]
c0020edf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020ee5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020eeb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020eef:	66 89 02             	mov    WORD PTR [edx],ax
c0020ef2:	b8 00 00 00 00       	mov    eax,0x0
c0020ef7:	e9 b2 00 00 00       	jmp    c0020fae <fatWrapperIoctl+0xfe>
c0020efc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020f01:	75 6a                	jne    c0020f6d <fatWrapperIoctl+0xbd>
c0020f03:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020f0b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f10:	8b 04 85 e0 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1320]
c0020f17:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020f1d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020f23:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020f29:	89 c8                	mov    eax,ecx
c0020f2b:	89 da                	mov    edx,ebx
c0020f2d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020f31:	c1 e0 0a             	shl    eax,0xa
c0020f34:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020f39:	8b 0c 8d e0 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1320]
c0020f40:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020f46:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020f4c:	89 cb                	mov    ebx,ecx
c0020f4e:	c1 fb 1f             	sar    ebx,0x1f
c0020f51:	53                   	push   ebx
c0020f52:	51                   	push   ecx
c0020f53:	52                   	push   edx
c0020f54:	50                   	push   eax
c0020f55:	e8 ba 5e 00 00       	call   c0026e14 <__udivdi3>
c0020f5a:	83 c4 10             	add    esp,0x10
c0020f5d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020f61:	89 01                	mov    DWORD PTR [ecx],eax
c0020f63:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020f66:	b8 00 00 00 00       	mov    eax,0x0
c0020f6b:	eb 41                	jmp    c0020fae <fatWrapperIoctl+0xfe>
c0020f6d:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020f72:	75 07                	jne    c0020f7b <fatWrapperIoctl+0xcb>
c0020f74:	b8 00 00 00 00       	mov    eax,0x0
c0020f79:	eb 33                	jmp    c0020fae <fatWrapperIoctl+0xfe>
c0020f7b:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020f80:	75 19                	jne    c0020f9b <fatWrapperIoctl+0xeb>
c0020f82:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f86:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f8e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020f94:	b8 00 00 00 00       	mov    eax,0x0
c0020f99:	eb 13                	jmp    c0020fae <fatWrapperIoctl+0xfe>
c0020f9b:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020fa0:	75 07                	jne    c0020fa9 <fatWrapperIoctl+0xf9>
c0020fa2:	b8 00 00 00 00       	mov    eax,0x0
c0020fa7:	eb 05                	jmp    c0020fae <fatWrapperIoctl+0xfe>
c0020fa9:	b8 04 00 00 00       	mov    eax,0x4
c0020fae:	83 c4 28             	add    esp,0x28
c0020fb1:	5b                   	pop    ebx
c0020fb2:	c3                   	ret    
c0020fb3:	90                   	nop

c0020fb4 <FAT::FAT()>:
c0020fb4:	83 ec 1c             	sub    esp,0x1c
c0020fb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020fbb:	83 ec 0c             	sub    esp,0xc
c0020fbe:	50                   	push   eax
c0020fbf:	e8 82 1d ff ff       	call   c0012d46 <Filesystem::Filesystem()>
c0020fc4:	83 c4 10             	add    esp,0x10
c0020fc7:	ba 9c cb 02 c0       	mov    edx,0xc002cb9c
c0020fcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020fd0:	89 10                	mov    DWORD PTR [eax],edx
c0020fd2:	c7 05 e0 fc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fce0,0x0
c0020fdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020fe4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020fe9:	7f 15                	jg     c0021000 <FAT::FAT()+0x4c>
c0020feb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020fef:	c7 04 85 00 fd 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd0300],0xffffffff
c0020ffa:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020ffe:	eb e4                	jmp    c0020fe4 <FAT::FAT()+0x30>
c0021000:	90                   	nop
c0021001:	83 c4 1c             	add    esp,0x1c
c0021004:	c3                   	ret    
c0021005:	90                   	nop

c0021006 <FAT::fixFilepath(char*)>:
c0021006:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002100a:	8a 00                	mov    al,BYTE PTR [eax]
c002100c:	3c 40                	cmp    al,0x40
c002100e:	7e 2c                	jle    c002103c <FAT::fixFilepath(char*)+0x36>
c0021010:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021014:	8a 00                	mov    al,BYTE PTR [eax]
c0021016:	83 e8 41             	sub    eax,0x41
c0021019:	88 c2                	mov    dl,al
c002101b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002101f:	88 10                	mov    BYTE PTR [eax],dl
c0021021:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021025:	8a 00                	mov    al,BYTE PTR [eax]
c0021027:	0f be c0             	movsx  eax,al
c002102a:	8b 04 85 00 fd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0300]
c0021031:	83 c0 30             	add    eax,0x30
c0021034:	88 c2                	mov    dl,al
c0021036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002103a:	88 10                	mov    BYTE PTR [eax],dl
c002103c:	90                   	nop
c002103d:	c3                   	ret    

c002103e <FAT::open(char const*, void**, FileOpenMode)>:
c002103e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021044:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002104c:	74 0a                	je     c0021058 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c002104e:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021056:	75 0a                	jne    c0021062 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0021058:	b8 04 00 00 00       	mov    eax,0x4
c002105d:	e9 fd 00 00 00       	jmp    c002115f <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021062:	83 ec 08             	sub    esp,0x8
c0021065:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002106c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021070:	50                   	push   eax
c0021071:	e8 96 f7 fd ff       	call   c000080c <strcpy>
c0021076:	83 c4 10             	add    esp,0x10
c0021079:	83 ec 08             	sub    esp,0x8
c002107c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021080:	50                   	push   eax
c0021081:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021088:	e8 79 ff ff ff       	call   c0021006 <FAT::fixFilepath(char*)>
c002108d:	83 c4 10             	add    esp,0x10
c0021090:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021098:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002109f:	83 e0 01             	and    eax,0x1
c00210a2:	74 08                	je     c00210ac <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00210a4:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00210ac:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210b3:	83 e0 04             	and    eax,0x4
c00210b6:	74 10                	je     c00210c8 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c00210b8:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00210c0:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00210c8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210cf:	83 e0 02             	and    eax,0x2
c00210d2:	74 08                	je     c00210dc <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00210d4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00210dc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210e3:	83 e0 08             	and    eax,0x8
c00210e6:	74 08                	je     c00210f0 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00210e8:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00210f0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210f7:	83 e0 10             	and    eax,0x10
c00210fa:	74 08                	je     c0021104 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00210fc:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0021104:	83 ec 0c             	sub    esp,0xc
c0021107:	68 50 02 00 00       	push   0x250
c002110c:	e8 d2 e8 fe ff       	call   c000f9e3 <malloc>
c0021111:	83 c4 10             	add    esp,0x10
c0021114:	89 c2                	mov    edx,eax
c0021116:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002111d:	89 10                	mov    DWORD PTR [eax],edx
c002111f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0021127:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002112e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021130:	83 ec 04             	sub    esp,0x4
c0021133:	52                   	push   edx
c0021134:	8d 54 24 10          	lea    edx,[esp+0x10]
c0021138:	52                   	push   edx
c0021139:	50                   	push   eax
c002113a:	e8 18 3e fe ff       	call   c0004f57 <f_open>
c002113f:	83 c4 10             	add    esp,0x10
c0021142:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0021149:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021151:	74 07                	je     c002115a <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021153:	b8 01 00 00 00       	mov    eax,0x1
c0021158:	eb 05                	jmp    c002115f <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002115a:	b8 00 00 00 00       	mov    eax,0x0
c002115f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021165:	c3                   	ret    

c0021166 <FAT::openDir(char const*, void**)>:
c0021166:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002116c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021174:	74 0a                	je     c0021180 <FAT::openDir(char const*, void**)+0x1a>
c0021176:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002117e:	75 07                	jne    c0021187 <FAT::openDir(char const*, void**)+0x21>
c0021180:	b8 04 00 00 00       	mov    eax,0x4
c0021185:	eb 7d                	jmp    c0021204 <FAT::openDir(char const*, void**)+0x9e>
c0021187:	83 ec 08             	sub    esp,0x8
c002118a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021191:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021195:	50                   	push   eax
c0021196:	e8 71 f6 fd ff       	call   c000080c <strcpy>
c002119b:	83 c4 10             	add    esp,0x10
c002119e:	83 ec 08             	sub    esp,0x8
c00211a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00211a5:	50                   	push   eax
c00211a6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00211ad:	e8 54 fe ff ff       	call   c0021006 <FAT::fixFilepath(char*)>
c00211b2:	83 c4 10             	add    esp,0x10
c00211b5:	83 ec 0c             	sub    esp,0xc
c00211b8:	6a 4c                	push   0x4c
c00211ba:	e8 24 e8 fe ff       	call   c000f9e3 <malloc>
c00211bf:	83 c4 10             	add    esp,0x10
c00211c2:	89 c2                	mov    edx,eax
c00211c4:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00211cb:	89 10                	mov    DWORD PTR [eax],edx
c00211cd:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00211d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00211d6:	83 ec 08             	sub    esp,0x8
c00211d9:	8d 54 24 14          	lea    edx,[esp+0x14]
c00211dd:	52                   	push   edx
c00211de:	50                   	push   eax
c00211df:	e8 ab 4d fe ff       	call   c0005f8f <f_opendir>
c00211e4:	83 c4 10             	add    esp,0x10
c00211e7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00211ee:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00211f6:	74 07                	je     c00211ff <FAT::openDir(char const*, void**)+0x99>
c00211f8:	b8 01 00 00 00       	mov    eax,0x1
c00211fd:	eb 05                	jmp    c0021204 <FAT::openDir(char const*, void**)+0x9e>
c00211ff:	b8 00 00 00 00       	mov    eax,0x0
c0021204:	81 c4 1c 01 00 00    	add    esp,0x11c
c002120a:	c3                   	ret    
c002120b:	90                   	nop

c002120c <FAT::stat(char const*, unsigned long long*, bool*)>:
c002120c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021212:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c002121a:	75 0a                	jne    c0021226 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c002121c:	b8 04 00 00 00       	mov    eax,0x4
c0021221:	e9 c9 00 00 00       	jmp    c00212ef <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021226:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c002122e:	75 0a                	jne    c002123a <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021230:	b8 04 00 00 00       	mov    eax,0x4
c0021235:	e9 b5 00 00 00       	jmp    c00212ef <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002123a:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021242:	75 0a                	jne    c002124e <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021244:	b8 04 00 00 00       	mov    eax,0x4
c0021249:	e9 a1 00 00 00       	jmp    c00212ef <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002124e:	83 ec 08             	sub    esp,0x8
c0021251:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021258:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002125f:	50                   	push   eax
c0021260:	e8 a7 f5 fd ff       	call   c000080c <strcpy>
c0021265:	83 c4 10             	add    esp,0x10
c0021268:	83 ec 08             	sub    esp,0x8
c002126b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021272:	50                   	push   eax
c0021273:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002127a:	e8 87 fd ff ff       	call   c0021006 <FAT::fixFilepath(char*)>
c002127f:	83 c4 10             	add    esp,0x10
c0021282:	83 ec 08             	sub    esp,0x8
c0021285:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021289:	50                   	push   eax
c002128a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021291:	50                   	push   eax
c0021292:	e8 b7 4e fe ff       	call   c000614e <f_stat>
c0021297:	83 c4 10             	add    esp,0x10
c002129a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00212a1:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00212a8:	85 c0                	test   eax,eax
c00212aa:	74 07                	je     c00212b3 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00212ac:	83 f8 04             	cmp    eax,0x4
c00212af:	74 32                	je     c00212e3 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00212b1:	eb 37                	jmp    c00212ea <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00212b3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00212b7:	0f b6 c0             	movzx  eax,al
c00212ba:	83 e0 10             	and    eax,0x10
c00212bd:	0f 95 c2             	setne  dl
c00212c0:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00212c7:	88 10                	mov    BYTE PTR [eax],dl
c00212c9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00212cc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00212d0:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00212d7:	89 01                	mov    DWORD PTR [ecx],eax
c00212d9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00212dc:	b8 00 00 00 00       	mov    eax,0x0
c00212e1:	eb 0c                	jmp    c00212ef <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212e3:	b8 02 00 00 00       	mov    eax,0x2
c00212e8:	eb 05                	jmp    c00212ef <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212ea:	b8 01 00 00 00       	mov    eax,0x1
c00212ef:	81 c4 2c 02 00 00    	add    esp,0x22c
c00212f5:	c3                   	ret    

c00212f6 <FAT::unlink(char const*)>:
c00212f6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00212fc:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021304:	75 07                	jne    c002130d <FAT::unlink(char const*)+0x17>
c0021306:	b8 04 00 00 00       	mov    eax,0x4
c002130b:	eb 5c                	jmp    c0021369 <FAT::unlink(char const*)+0x73>
c002130d:	83 ec 08             	sub    esp,0x8
c0021310:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021317:	8d 44 24 18          	lea    eax,[esp+0x18]
c002131b:	50                   	push   eax
c002131c:	e8 eb f4 fd ff       	call   c000080c <strcpy>
c0021321:	83 c4 10             	add    esp,0x10
c0021324:	83 ec 08             	sub    esp,0x8
c0021327:	8d 44 24 14          	lea    eax,[esp+0x14]
c002132b:	50                   	push   eax
c002132c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021333:	e8 ce fc ff ff       	call   c0021006 <FAT::fixFilepath(char*)>
c0021338:	83 c4 10             	add    esp,0x10
c002133b:	83 ec 0c             	sub    esp,0xc
c002133e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021342:	50                   	push   eax
c0021343:	e8 58 51 fe ff       	call   c00064a0 <f_unlink>
c0021348:	83 c4 10             	add    esp,0x10
c002134b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021352:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021359:	85 c0                	test   eax,eax
c002135b:	75 07                	jne    c0021364 <FAT::unlink(char const*)+0x6e>
c002135d:	b8 00 00 00 00       	mov    eax,0x0
c0021362:	eb 05                	jmp    c0021369 <FAT::unlink(char const*)+0x73>
c0021364:	b8 01 00 00 00       	mov    eax,0x1
c0021369:	81 c4 1c 01 00 00    	add    esp,0x11c
c002136f:	c3                   	ret    

c0021370 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021370:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021376:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c002137d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021384:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021388:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002138c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021394:	75 0a                	jne    c00213a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021396:	b8 04 00 00 00       	mov    eax,0x4
c002139b:	e9 1c 01 00 00       	jmp    c00214bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00213a0:	83 ec 08             	sub    esp,0x8
c00213a3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00213aa:	8d 44 24 24          	lea    eax,[esp+0x24]
c00213ae:	50                   	push   eax
c00213af:	e8 58 f4 fd ff       	call   c000080c <strcpy>
c00213b4:	83 c4 10             	add    esp,0x10
c00213b7:	83 ec 08             	sub    esp,0x8
c00213ba:	8d 44 24 20          	lea    eax,[esp+0x20]
c00213be:	50                   	push   eax
c00213bf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00213c6:	e8 3b fc ff ff       	call   c0021006 <FAT::fixFilepath(char*)>
c00213cb:	83 c4 10             	add    esp,0x10
c00213ce:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00213d6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00213de:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213e3:	83 e0 01             	and    eax,0x1
c00213e6:	74 08                	je     c00213f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00213e8:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00213f0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213f5:	83 e0 02             	and    eax,0x2
c00213f8:	74 08                	je     c0021402 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c00213fa:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021402:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021407:	83 e0 04             	and    eax,0x4
c002140a:	74 08                	je     c0021414 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c002140c:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021414:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021419:	83 e0 08             	and    eax,0x8
c002141c:	74 08                	je     c0021426 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c002141e:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021426:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002142b:	83 e0 01             	and    eax,0x1
c002142e:	74 08                	je     c0021438 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021430:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021438:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002143d:	83 e0 02             	and    eax,0x2
c0021440:	74 08                	je     c002144a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021442:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c002144a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002144f:	83 e0 04             	and    eax,0x4
c0021452:	74 08                	je     c002145c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021454:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c002145c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021461:	83 e0 08             	and    eax,0x8
c0021464:	74 08                	je     c002146e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021466:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c002146e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021475:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c002147c:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021484:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c002148c:	83 ec 04             	sub    esp,0x4
c002148f:	52                   	push   edx
c0021490:	50                   	push   eax
c0021491:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021495:	50                   	push   eax
c0021496:	e8 a7 56 fe ff       	call   c0006b42 <f_chmod>
c002149b:	83 c4 10             	add    esp,0x10
c002149e:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00214a5:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00214ac:	85 c0                	test   eax,eax
c00214ae:	75 07                	jne    c00214b7 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c00214b0:	b8 00 00 00 00       	mov    eax,0x0
c00214b5:	eb 05                	jmp    c00214bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00214b7:	b8 01 00 00 00       	mov    eax,0x1
c00214bc:	81 c4 2c 01 00 00    	add    esp,0x12c
c00214c2:	c3                   	ret    
c00214c3:	90                   	nop

c00214c4 <FAT::rename(char const*, char const*)>:
c00214c4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00214ca:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00214d2:	74 0a                	je     c00214de <FAT::rename(char const*, char const*)+0x1a>
c00214d4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00214dc:	75 0a                	jne    c00214e8 <FAT::rename(char const*, char const*)+0x24>
c00214de:	b8 04 00 00 00       	mov    eax,0x4
c00214e3:	e9 98 00 00 00       	jmp    c0021580 <FAT::rename(char const*, char const*)+0xbc>
c00214e8:	83 ec 08             	sub    esp,0x8
c00214eb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214f2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00214f9:	50                   	push   eax
c00214fa:	e8 0d f3 fd ff       	call   c000080c <strcpy>
c00214ff:	83 c4 10             	add    esp,0x10
c0021502:	83 ec 08             	sub    esp,0x8
c0021505:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c002150c:	50                   	push   eax
c002150d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021514:	e8 ed fa ff ff       	call   c0021006 <FAT::fixFilepath(char*)>
c0021519:	83 c4 10             	add    esp,0x10
c002151c:	83 ec 08             	sub    esp,0x8
c002151f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021526:	8d 44 24 18          	lea    eax,[esp+0x18]
c002152a:	50                   	push   eax
c002152b:	e8 dc f2 fd ff       	call   c000080c <strcpy>
c0021530:	83 c4 10             	add    esp,0x10
c0021533:	83 ec 08             	sub    esp,0x8
c0021536:	8d 44 24 14          	lea    eax,[esp+0x14]
c002153a:	50                   	push   eax
c002153b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021542:	e8 bf fa ff ff       	call   c0021006 <FAT::fixFilepath(char*)>
c0021547:	83 c4 10             	add    esp,0x10
c002154a:	83 ec 08             	sub    esp,0x8
c002154d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021551:	50                   	push   eax
c0021552:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021559:	50                   	push   eax
c002155a:	e8 f0 52 fe ff       	call   c000684f <f_rename>
c002155f:	83 c4 10             	add    esp,0x10
c0021562:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021569:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021570:	85 c0                	test   eax,eax
c0021572:	75 07                	jne    c002157b <FAT::rename(char const*, char const*)+0xb7>
c0021574:	b8 00 00 00 00       	mov    eax,0x0
c0021579:	eb 05                	jmp    c0021580 <FAT::rename(char const*, char const*)+0xbc>
c002157b:	b8 01 00 00 00       	mov    eax,0x1
c0021580:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021586:	c3                   	ret    
c0021587:	90                   	nop

c0021588 <FAT::mkdir(char const*)>:
c0021588:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002158e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021596:	75 07                	jne    c002159f <FAT::mkdir(char const*)+0x17>
c0021598:	b8 04 00 00 00       	mov    eax,0x4
c002159d:	eb 5c                	jmp    c00215fb <FAT::mkdir(char const*)+0x73>
c002159f:	83 ec 08             	sub    esp,0x8
c00215a2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00215a9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00215ad:	50                   	push   eax
c00215ae:	e8 59 f2 fd ff       	call   c000080c <strcpy>
c00215b3:	83 c4 10             	add    esp,0x10
c00215b6:	83 ec 08             	sub    esp,0x8
c00215b9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00215bd:	50                   	push   eax
c00215be:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00215c5:	e8 3c fa ff ff       	call   c0021006 <FAT::fixFilepath(char*)>
c00215ca:	83 c4 10             	add    esp,0x10
c00215cd:	83 ec 0c             	sub    esp,0xc
c00215d0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00215d4:	50                   	push   eax
c00215d5:	e8 49 50 fe ff       	call   c0006623 <f_mkdir>
c00215da:	83 c4 10             	add    esp,0x10
c00215dd:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00215e4:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00215eb:	85 c0                	test   eax,eax
c00215ed:	75 07                	jne    c00215f6 <FAT::mkdir(char const*)+0x6e>
c00215ef:	b8 00 00 00 00       	mov    eax,0x0
c00215f4:	eb 05                	jmp    c00215fb <FAT::mkdir(char const*)+0x73>
c00215f6:	b8 01 00 00 00       	mov    eax,0x1
c00215fb:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021601:	c3                   	ret    

c0021602 <FAT::exists(char const*)>:
c0021602:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021608:	83 ec 08             	sub    esp,0x8
c002160b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021612:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021616:	50                   	push   eax
c0021617:	e8 f0 f1 fd ff       	call   c000080c <strcpy>
c002161c:	83 c4 10             	add    esp,0x10
c002161f:	83 ec 08             	sub    esp,0x8
c0021622:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021626:	50                   	push   eax
c0021627:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002162e:	e8 d3 f9 ff ff       	call   c0021006 <FAT::fixFilepath(char*)>
c0021633:	83 c4 10             	add    esp,0x10
c0021636:	83 ec 08             	sub    esp,0x8
c0021639:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021640:	50                   	push   eax
c0021641:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021645:	50                   	push   eax
c0021646:	e8 03 4b fe ff       	call   c000614e <f_stat>
c002164b:	83 c4 10             	add    esp,0x10
c002164e:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021655:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002165c:	85 c0                	test   eax,eax
c002165e:	75 04                	jne    c0021664 <FAT::exists(char const*)+0x62>
c0021660:	b0 01                	mov    al,0x1
c0021662:	eb 02                	jmp    c0021666 <FAT::exists(char const*)+0x64>
c0021664:	b0 00                	mov    al,0x0
c0021666:	81 c4 2c 02 00 00    	add    esp,0x22c
c002166c:	c3                   	ret    
c002166d:	90                   	nop

c002166e <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c002166e:	b8 08 00 00 00       	mov    eax,0x8
c0021673:	c3                   	ret    

c0021674 <ISO9660::seek(void*, unsigned long long)>:
c0021674:	53                   	push   ebx
c0021675:	b8 04 00 00 00       	mov    eax,0x4
c002167a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002167e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021682:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021686:	85 d2                	test   edx,edx
c0021688:	74 17                	je     c00216a1 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002168a:	89 c8                	mov    eax,ecx
c002168c:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c002168f:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021692:	b8 01 00 00 00       	mov    eax,0x1
c0021697:	73 08                	jae    c00216a1 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021699:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c002169c:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c002169f:	31 c0                	xor    eax,eax
c00216a1:	5b                   	pop    ebx
c00216a2:	c3                   	ret    
c00216a3:	90                   	nop

c00216a4 <ISO9660::tell(void*, unsigned long long*)>:
c00216a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00216a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216ac:	85 d2                	test   edx,edx
c00216ae:	74 12                	je     c00216c2 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00216b0:	85 c0                	test   eax,eax
c00216b2:	74 0e                	je     c00216c2 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00216b4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00216b7:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00216ba:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00216bd:	89 10                	mov    DWORD PTR [eax],edx
c00216bf:	31 c0                	xor    eax,eax
c00216c1:	c3                   	ret    
c00216c2:	b8 04 00 00 00       	mov    eax,0x4
c00216c7:	c3                   	ret    

c00216c8 <ISO9660::getName()>:
c00216c8:	b8 fc cb 02 c0       	mov    eax,0xc002cbfc
c00216cd:	c3                   	ret    

c00216ce <ISO9660::stat(void*, unsigned long long*)>:
c00216ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00216d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216d6:	85 d2                	test   edx,edx
c00216d8:	74 12                	je     c00216ec <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00216da:	85 c0                	test   eax,eax
c00216dc:	74 0e                	je     c00216ec <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00216de:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00216e1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00216e4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00216e7:	89 10                	mov    DWORD PTR [eax],edx
c00216e9:	31 c0                	xor    eax,eax
c00216eb:	c3                   	ret    
c00216ec:	b8 04 00 00 00       	mov    eax,0x4
c00216f1:	c3                   	ret    

c00216f2 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00216f2:	b8 01 00 00 00       	mov    eax,0x1
c00216f7:	c3                   	ret    

c00216f8 <ISO9660::unlink(char const*)>:
c00216f8:	b8 01 00 00 00       	mov    eax,0x1
c00216fd:	c3                   	ret    

c00216fe <ISO9660::write(void*, unsigned long, void*, int*)>:
c00216fe:	b8 01 00 00 00       	mov    eax,0x1
c0021703:	c3                   	ret    

c0021704 <ISO9660::rename(char const*, char const*)>:
c0021704:	b8 01 00 00 00       	mov    eax,0x1
c0021709:	c3                   	ret    

c002170a <ISO9660::mkdir(char const*)>:
c002170a:	b8 01 00 00 00       	mov    eax,0x1
c002170f:	c3                   	ret    

c0021710 <ISO9660::close(void*)>:
c0021710:	83 ec 0c             	sub    esp,0xc
c0021713:	b8 04 00 00 00       	mov    eax,0x4
c0021718:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002171c:	85 d2                	test   edx,edx
c002171e:	74 0e                	je     c002172e <ISO9660::close(void*)+0x1e>
c0021720:	83 ec 0c             	sub    esp,0xc
c0021723:	52                   	push   edx
c0021724:	e8 ca e2 fe ff       	call   c000f9f3 <free>
c0021729:	83 c4 10             	add    esp,0x10
c002172c:	31 c0                	xor    eax,eax
c002172e:	83 c4 0c             	add    esp,0xc
c0021731:	c3                   	ret    

c0021732 <ISO9660::closeDir(void*)>:
c0021732:	83 ec 0c             	sub    esp,0xc
c0021735:	b8 04 00 00 00       	mov    eax,0x4
c002173a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002173e:	85 d2                	test   edx,edx
c0021740:	74 0e                	je     c0021750 <ISO9660::closeDir(void*)+0x1e>
c0021742:	83 ec 0c             	sub    esp,0xc
c0021745:	52                   	push   edx
c0021746:	e8 a8 e2 fe ff       	call   c000f9f3 <free>
c002174b:	83 c4 10             	add    esp,0x10
c002174e:	31 c0                	xor    eax,eax
c0021750:	83 c4 0c             	add    esp,0xc
c0021753:	c3                   	ret    

c0021754 <ISO9660::~ISO9660()>:
c0021754:	83 ec 0c             	sub    esp,0xc
c0021757:	ba 20 cc 02 c0       	mov    edx,0xc002cc20
c002175c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021760:	89 10                	mov    DWORD PTR [eax],edx
c0021762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021766:	83 ec 0c             	sub    esp,0xc
c0021769:	50                   	push   eax
c002176a:	e8 fb 15 ff ff       	call   c0012d6a <Filesystem::~Filesystem()>
c002176f:	83 c4 10             	add    esp,0x10
c0021772:	90                   	nop
c0021773:	83 c4 0c             	add    esp,0xc
c0021776:	c3                   	ret    
c0021777:	90                   	nop

c0021778 <ISO9660::~ISO9660()>:
c0021778:	83 ec 0c             	sub    esp,0xc
c002177b:	83 ec 0c             	sub    esp,0xc
c002177e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021782:	e8 cd ff ff ff       	call   c0021754 <ISO9660::~ISO9660()>
c0021787:	83 c4 10             	add    esp,0x10
c002178a:	83 ec 08             	sub    esp,0x8
c002178d:	6a 08                	push   0x8
c002178f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021793:	e8 cb 11 ff ff       	call   c0012963 <operator delete(void*, unsigned long)>
c0021798:	83 c4 10             	add    esp,0x10
c002179b:	83 c4 0c             	add    esp,0xc
c002179e:	c3                   	ret    

c002179f <__memmem(unsigned char*, int, unsigned char*, int)>:
c002179f:	55                   	push   ebp
c00217a0:	31 c9                	xor    ecx,ecx
c00217a2:	57                   	push   edi
c00217a3:	56                   	push   esi
c00217a4:	53                   	push   ebx
c00217a5:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00217a9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00217ad:	89 eb                	mov    ebx,ebp
c00217af:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00217b3:	39 ce                	cmp    esi,ecx
c00217b5:	7e 17                	jle    c00217ce <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00217b7:	31 d2                	xor    edx,edx
c00217b9:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00217bd:	7d 13                	jge    c00217d2 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00217bf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00217c3:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00217c6:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00217c9:	75 0d                	jne    c00217d8 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00217cb:	42                   	inc    edx
c00217cc:	eb eb                	jmp    c00217b9 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00217ce:	31 c0                	xor    eax,eax
c00217d0:	eb 0a                	jmp    c00217dc <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00217d2:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00217d6:	eb 04                	jmp    c00217dc <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00217d8:	41                   	inc    ecx
c00217d9:	43                   	inc    ebx
c00217da:	eb d7                	jmp    c00217b3 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00217dc:	5b                   	pop    ebx
c00217dd:	5e                   	pop    esi
c00217de:	5f                   	pop    edi
c00217df:	5d                   	pop    ebp
c00217e0:	c3                   	ret    

c00217e1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00217e1:	57                   	push   edi
c00217e2:	56                   	push   esi
c00217e3:	53                   	push   ebx
c00217e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00217e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00217ec:	39 0d e0 fd 02 c0    	cmp    DWORD PTR ds:0xc002fde0,ecx
c00217f2:	75 08                	jne    c00217fc <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c00217f4:	38 05 74 dc 02 c0    	cmp    BYTE PTR ds:0xc002dc74,al
c00217fa:	74 2b                	je     c0021827 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c00217fc:	83 ec 0c             	sub    esp,0xc
c00217ff:	a2 74 dc 02 c0       	mov    ds:0xc002dc74,al
c0021804:	68 00 fe 02 c0       	push   0xc002fe00
c0021809:	0f be c0             	movsx  eax,al
c002180c:	6a 01                	push   0x1
c002180e:	89 0d e0 fd 02 c0    	mov    DWORD PTR ds:0xc002fde0,ecx
c0021814:	31 db                	xor    ebx,ebx
c0021816:	53                   	push   ebx
c0021817:	51                   	push   ecx
c0021818:	ff 34 85 dc eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd1424]
c002181f:	e8 72 4b ff ff       	call   c0016396 <LogicalDisk::read(unsigned long long, int, void*)>
c0021824:	83 c4 20             	add    esp,0x20
c0021827:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002182b:	be 00 fe 02 c0       	mov    esi,0xc002fe00
c0021830:	b9 00 08 00 00       	mov    ecx,0x800
c0021835:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021837:	5b                   	pop    ebx
c0021838:	5e                   	pop    esi
c0021839:	5f                   	pop    edi
c002183a:	c3                   	ret    
c002183b:	90                   	nop

c002183c <ISO9660::tryMount(LogicalDisk*, int)>:
c002183c:	81 ec 10 08 00 00    	sub    esp,0x810
c0021842:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021849:	83 c0 41             	add    eax,0x41
c002184c:	0f be c0             	movsx  eax,al
c002184f:	50                   	push   eax
c0021850:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021854:	50                   	push   eax
c0021855:	6a 10                	push   0x10
c0021857:	e8 85 ff ff ff       	call   c00217e1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002185c:	83 c4 10             	add    esp,0x10
c002185f:	31 c0                	xor    eax,eax
c0021861:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021866:	75 1d                	jne    c0021885 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021868:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002186d:	75 16                	jne    c0021885 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002186f:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021874:	75 0f                	jne    c0021885 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021876:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002187b:	75 08                	jne    c0021885 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002187d:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021882:	0f 94 c0             	sete   al
c0021885:	81 c4 0c 08 00 00    	add    esp,0x80c
c002188b:	c3                   	ret    

c002188c <ISO9660::read(void*, unsigned long, void*, int*)>:
c002188c:	55                   	push   ebp
c002188d:	57                   	push   edi
c002188e:	56                   	push   esi
c002188f:	53                   	push   ebx
c0021890:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021896:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c002189d:	85 ed                	test   ebp,ebp
c002189f:	0f 84 da 01 00 00    	je     c0021a7f <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00218a5:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00218ad:	0f 84 cc 01 00 00    	je     c0021a7f <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00218b3:	b8 01 00 00 00       	mov    eax,0x1
c00218b8:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00218bc:	0f 85 c2 01 00 00    	jne    c0021a84 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00218c2:	31 d2                	xor    edx,edx
c00218c4:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00218cb:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00218ce:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00218d1:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00218d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00218d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218db:	01 c8                	add    eax,ecx
c00218dd:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00218e0:	11 da                	adc    edx,ebx
c00218e2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00218e6:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00218ea:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00218ee:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00218f2:	19 d7                	sbb    edi,edx
c00218f4:	72 11                	jb     c0021907 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c00218f6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00218f9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00218fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021901:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021905:	eb 0c                	jmp    c0021913 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021907:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c002190b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002190f:	29 ce                	sub    esi,ecx
c0021911:	19 df                	sbb    edi,ebx
c0021913:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021916:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021919:	0f a4 c2 0b          	shld   edx,eax,0xb
c002191d:	c1 e0 0b             	shl    eax,0xb
c0021920:	01 c8                	add    eax,ecx
c0021922:	11 da                	adc    edx,ebx
c0021924:	89 04 24             	mov    DWORD PTR [esp],eax
c0021927:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002192b:	51                   	push   ecx
c002192c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021930:	50                   	push   eax
c0021931:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021935:	53                   	push   ebx
c0021936:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002193a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002193e:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021942:	50                   	push   eax
c0021943:	e8 99 fe ff ff       	call   c00217e1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021948:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c002194b:	b8 00 08 00 00       	mov    eax,0x800
c0021950:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021956:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c002195a:	29 d0                	sub    eax,edx
c002195c:	83 c4 10             	add    esp,0x10
c002195f:	89 f9                	mov    ecx,edi
c0021961:	39 c6                	cmp    esi,eax
c0021963:	83 d9 00             	sbb    ecx,0x0
c0021966:	7d 1b                	jge    c0021983 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0021968:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002196d:	75 12                	jne    c0021981 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c002196f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021976:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002197c:	e9 fa 00 00 00       	jmp    c0021a7b <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021981:	89 f0                	mov    eax,esi
c0021983:	01 d3                	add    ebx,edx
c0021985:	31 d2                	xor    edx,edx
c0021987:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c002198b:	39 c2                	cmp    edx,eax
c002198d:	7d 14                	jge    c00219a3 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c002198f:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021996:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002199a:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c002199d:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00219a0:	42                   	inc    edx
c00219a1:	eb e8                	jmp    c002198b <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c00219a3:	89 c2                	mov    edx,eax
c00219a5:	85 c0                	test   eax,eax
c00219a7:	79 02                	jns    c00219ab <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c00219a9:	31 d2                	xor    edx,edx
c00219ab:	01 c2                	add    edx,eax
c00219ad:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00219b0:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c00219b7:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00219bb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00219bf:	99                   	cdq    
c00219c0:	01 c1                	add    ecx,eax
c00219c2:	11 d3                	adc    ebx,edx
c00219c4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00219c8:	29 c6                	sub    esi,eax
c00219ca:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00219ce:	19 d7                	sbb    edi,edx
c00219d0:	89 34 24             	mov    DWORD PTR [esp],esi
c00219d3:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00219d7:	b8 ff 07 00 00       	mov    eax,0x7ff
c00219dc:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00219df:	b8 00 00 00 00       	mov    eax,0x0
c00219e4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00219e8:	7d 43                	jge    c0021a2d <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c00219ea:	52                   	push   edx
c00219eb:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219ef:	50                   	push   eax
c00219f0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00219f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00219f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00219fc:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021a00:	50                   	push   eax
c0021a01:	e8 db fd ff ff       	call   c00217e1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a06:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021a0e:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021a13:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0021a1b:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021a23:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021a28:	83 c4 10             	add    esp,0x10
c0021a2b:	eb aa                	jmp    c00219d7 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0021a2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a31:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021a34:	74 2a                	je     c0021a60 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0021a36:	50                   	push   eax
c0021a37:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a3b:	50                   	push   eax
c0021a3c:	8d 74 24 28          	lea    esi,[esp+0x28]
c0021a40:	56                   	push   esi
c0021a41:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021a45:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021a49:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0021a4d:	51                   	push   ecx
c0021a4e:	e8 8e fd ff ff       	call   c00217e1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a53:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021a57:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021a5b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021a5d:	83 c4 10             	add    esp,0x10
c0021a60:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021a67:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021a6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021a6f:	89 18                	mov    DWORD PTR [eax],ebx
c0021a71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a75:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021a78:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021a7b:	31 c0                	xor    eax,eax
c0021a7d:	eb 05                	jmp    c0021a84 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021a7f:	b8 04 00 00 00       	mov    eax,0x4
c0021a84:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021a8a:	5b                   	pop    ebx
c0021a8b:	5e                   	pop    esi
c0021a8c:	5f                   	pop    edi
c0021a8d:	5d                   	pop    ebp
c0021a8e:	c3                   	ret    
c0021a8f:	90                   	nop

c0021a90 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021a90:	55                   	push   ebp
c0021a91:	57                   	push   edi
c0021a92:	56                   	push   esi
c0021a93:	53                   	push   ebx
c0021a94:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021a9a:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0021aa1:	85 ed                	test   ebp,ebp
c0021aa3:	0f 84 51 02 00 00    	je     c0021cfa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021aa9:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021ab1:	0f 84 43 02 00 00    	je     c0021cfa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021ab7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021aba:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0021abd:	75 0a                	jne    c0021ac9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021abf:	b8 07 00 00 00       	mov    eax,0x7
c0021ac4:	e9 36 02 00 00       	jmp    c0021cff <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021ac9:	50                   	push   eax
c0021aca:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021ace:	50                   	push   eax
c0021acf:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021ad6:	53                   	push   ebx
c0021ad7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021ada:	c1 e0 0b             	shl    eax,0xb
c0021add:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021ae0:	c1 e8 0b             	shr    eax,0xb
c0021ae3:	50                   	push   eax
c0021ae4:	e8 f8 fc ff ff       	call   c00217e1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ae9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021aec:	83 c4 10             	add    esp,0x10
c0021aef:	89 c1                	mov    ecx,eax
c0021af1:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0021af4:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021afa:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021afd:	84 db                	test   bl,bl
c0021aff:	0f 85 8b 00 00 00    	jne    c0021b90 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0021b05:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0021b0b:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021b0e:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0021b14:	29 c6                	sub    esi,eax
c0021b16:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0021b1a:	89 f3                	mov    ebx,esi
c0021b1c:	89 f1                	mov    ecx,esi
c0021b1e:	c1 fb 1f             	sar    ebx,0x1f
c0021b21:	01 f0                	add    eax,esi
c0021b23:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021b26:	11 da                	adc    edx,ebx
c0021b28:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b2b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021b2f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021b32:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021b35:	89 d8                	mov    eax,ebx
c0021b37:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0021b3b:	ba 00 00 00 00       	mov    edx,0x0
c0021b40:	19 f8                	sbb    eax,edi
c0021b42:	b8 00 00 00 00       	mov    eax,0x0
c0021b47:	73 08                	jae    c0021b51 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0021b49:	89 f0                	mov    eax,esi
c0021b4b:	89 fa                	mov    edx,edi
c0021b4d:	29 c8                	sub    eax,ecx
c0021b4f:	19 da                	sbb    edx,ebx
c0021b51:	89 d7                	mov    edi,edx
c0021b53:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021b56:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021b59:	09 c7                	or     edi,eax
c0021b5b:	0f 84 5e ff ff ff    	je     c0021abf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021b61:	57                   	push   edi
c0021b62:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021b66:	50                   	push   eax
c0021b67:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b6e:	53                   	push   ebx
c0021b6f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021b72:	c1 e0 0b             	shl    eax,0xb
c0021b75:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0021b79:	c1 e8 0b             	shr    eax,0xb
c0021b7c:	50                   	push   eax
c0021b7d:	e8 5f fc ff ff       	call   c00217e1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b82:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021b85:	83 c4 10             	add    esp,0x10
c0021b88:	25 ff 07 00 00       	and    eax,0x7ff
c0021b8d:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021b90:	31 ff                	xor    edi,edi
c0021b92:	56                   	push   esi
c0021b93:	6a 28                	push   0x28
c0021b95:	6a 00                	push   0x0
c0021b97:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021b9b:	50                   	push   eax
c0021b9c:	e8 af eb fd ff       	call   c0000750 <memset>
c0021ba1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021ba4:	25 ff 07 00 00       	and    eax,0x7ff
c0021ba9:	89 c6                	mov    esi,eax
c0021bab:	83 c6 21             	add    esi,0x21
c0021bae:	83 d7 00             	adc    edi,0x0
c0021bb1:	83 c4 10             	add    esp,0x10
c0021bb4:	31 c9                	xor    ecx,ecx
c0021bb6:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0021bbd:	83 f9 28             	cmp    ecx,0x28
c0021bc0:	88 04 24             	mov    BYTE PTR [esp],al
c0021bc3:	0f 94 c2             	sete   dl
c0021bc6:	88 d0                	mov    al,dl
c0021bc8:	ba ff 07 00 00       	mov    edx,0x7ff
c0021bcd:	39 f2                	cmp    edx,esi
c0021bcf:	ba 00 00 00 00       	mov    edx,0x0
c0021bd4:	19 fa                	sbb    edx,edi
c0021bd6:	0f 92 c2             	setb   dl
c0021bd9:	09 c2                	or     edx,eax
c0021bdb:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021bdf:	0f 94 c0             	sete   al
c0021be2:	08 d0                	or     al,dl
c0021be4:	75 16                	jne    c0021bfc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021be6:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021bea:	74 10                	je     c0021bfc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021bec:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021bef:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021bf3:	41                   	inc    ecx
c0021bf4:	83 c6 01             	add    esi,0x1
c0021bf7:	83 d7 00             	adc    edi,0x0
c0021bfa:	eb ba                	jmp    c0021bb6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0021bfc:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021c03:	83 ec 0c             	sub    esp,0xc
c0021c06:	8d 74 24 24          	lea    esi,[esp+0x24]
c0021c0a:	56                   	push   esi
c0021c0b:	e8 5c eb fd ff       	call   c000076c <strlen>
c0021c10:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0021c17:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c1b:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021c23:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021c26:	5a                   	pop    edx
c0021c27:	25 ff 07 00 00       	and    eax,0x7ff
c0021c2c:	59                   	pop    ecx
c0021c2d:	01 f8                	add    eax,edi
c0021c2f:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021c35:	83 e0 02             	and    eax,0x2
c0021c38:	3c 01                	cmp    al,0x1
c0021c3a:	19 c0                	sbb    eax,eax
c0021c3c:	83 c0 02             	add    eax,0x2
c0021c3f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c43:	56                   	push   esi
c0021c44:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021c48:	50                   	push   eax
c0021c49:	e8 be eb fd ff       	call   c000080c <strcpy>
c0021c4e:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021c52:	83 c4 10             	add    esp,0x10
c0021c55:	84 c0                	test   al,al
c0021c57:	75 21                	jne    c0021c7a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0021c59:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021c61:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c69:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c71:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021c78:	eb 28                	jmp    c0021ca2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021c7a:	fe c8                	dec    al
c0021c7c:	75 24                	jne    c0021ca2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021c7e:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021c86:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c8e:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c96:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021c9d:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021ca2:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021ca6:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0021cad:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021cb4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021cb6:	0f b6 f3             	movzx  esi,bl
c0021cb9:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021cc0:	31 db                	xor    ebx,ebx
c0021cc2:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021cc8:	89 df                	mov    edi,ebx
c0021cca:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0021ccd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021cd0:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021cd3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021cd6:	39 c6                	cmp    esi,eax
c0021cd8:	19 d7                	sbb    edi,edx
c0021cda:	72 10                	jb     c0021cec <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0021cdc:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021ce3:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0021cea:	eb 0a                	jmp    c0021cf6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0021cec:	29 f0                	sub    eax,esi
c0021cee:	19 da                	sbb    edx,ebx
c0021cf0:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021cf3:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021cf6:	31 c0                	xor    eax,eax
c0021cf8:	eb 05                	jmp    c0021cff <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021cfa:	b8 04 00 00 00       	mov    eax,0x4
c0021cff:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021d05:	5b                   	pop    ebx
c0021d06:	5e                   	pop    esi
c0021d07:	5f                   	pop    edi
c0021d08:	5d                   	pop    ebp
c0021d09:	c3                   	ret    

c0021d0a <readRoot(unsigned int*, unsigned int*, char)>:
c0021d0a:	57                   	push   edi
c0021d0b:	56                   	push   esi
c0021d0c:	81 ec 38 08 00 00    	sub    esp,0x838
c0021d12:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021d1a:	50                   	push   eax
c0021d1b:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021d1f:	50                   	push   eax
c0021d20:	6a 10                	push   0x10
c0021d22:	e8 ba fa ff ff       	call   c00217e1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d27:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0021d2e:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0021d32:	b9 22 00 00 00       	mov    ecx,0x22
c0021d37:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021d39:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021d40:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021d44:	89 10                	mov    DWORD PTR [eax],edx
c0021d46:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021d4d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021d51:	89 10                	mov    DWORD PTR [eax],edx
c0021d53:	81 c4 44 08 00 00    	add    esp,0x844
c0021d59:	b0 01                	mov    al,0x1
c0021d5b:	5e                   	pop    esi
c0021d5c:	5f                   	pop    edi
c0021d5d:	c3                   	ret    

c0021d5e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021d5e:	55                   	push   ebp
c0021d5f:	57                   	push   edi
c0021d60:	56                   	push   esi
c0021d61:	53                   	push   ebx
c0021d62:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021d68:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021d6f:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021d76:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021d7a:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021d7e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021d82:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021d86:	75 03                	jne    c0021d8b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d88:	83 c3 02             	add    ebx,0x2
c0021d8b:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021d8e:	75 03                	jne    c0021d93 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021d90:	43                   	inc    ebx
c0021d91:	eb f8                	jmp    c0021d8b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d93:	51                   	push   ecx
c0021d94:	68 00 01 00 00       	push   0x100
c0021d99:	6a 00                	push   0x0
c0021d9b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d9f:	50                   	push   eax
c0021da0:	e8 ab e9 fd ff       	call   c0000750 <memset>
c0021da5:	83 c4 10             	add    esp,0x10
c0021da8:	31 d2                	xor    edx,edx
c0021daa:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021dad:	84 c0                	test   al,al
c0021daf:	74 21                	je     c0021dd2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021db1:	3c 2f                	cmp    al,0x2f
c0021db3:	75 0b                	jne    c0021dc0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021db5:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021db9:	bd 01 00 00 00       	mov    ebp,0x1
c0021dbe:	eb 14                	jmp    c0021dd4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021dc0:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021dc3:	80 f9 19             	cmp    cl,0x19
c0021dc6:	77 03                	ja     c0021dcb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021dc8:	83 e8 20             	sub    eax,0x20
c0021dcb:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021dcf:	42                   	inc    edx
c0021dd0:	eb d8                	jmp    c0021daa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021dd2:	31 ed                	xor    ebp,ebp
c0021dd4:	83 ec 0c             	sub    esp,0xc
c0021dd7:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021dde:	e8 00 dc fe ff       	call   c000f9e3 <malloc>
c0021de3:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021dea:	89 c6                	mov    esi,eax
c0021dec:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021df2:	c1 ef 0b             	shr    edi,0xb
c0021df5:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021dfc:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021e00:	83 c4 10             	add    esp,0x10
c0021e03:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021e08:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021e0c:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021e13:	74 28                	je     c0021e3d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021e15:	52                   	push   edx
c0021e16:	57                   	push   edi
c0021e17:	50                   	push   eax
c0021e18:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021e1c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021e23:	e8 b9 f9 ff ff       	call   c00217e1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021e28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021e2c:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021e33:	05 00 08 00 00       	add    eax,0x800
c0021e38:	83 c4 10             	add    esp,0x10
c0021e3b:	eb cb                	jmp    c0021e08 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021e3d:	83 ec 0c             	sub    esp,0xc
c0021e40:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021e44:	57                   	push   edi
c0021e45:	e8 22 e9 fd ff       	call   c000076c <strlen>
c0021e4a:	50                   	push   eax
c0021e4b:	57                   	push   edi
c0021e4c:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021e53:	56                   	push   esi
c0021e54:	e8 46 f9 ff ff       	call   c002179f <__memmem(unsigned char*, int, unsigned char*, int)>
c0021e59:	83 c4 20             	add    esp,0x20
c0021e5c:	85 c0                	test   eax,eax
c0021e5e:	75 13                	jne    c0021e73 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021e60:	83 ec 0c             	sub    esp,0xc
c0021e63:	56                   	push   esi
c0021e64:	e8 8a db fe ff       	call   c000f9f3 <free>
c0021e69:	83 c4 10             	add    esp,0x10
c0021e6c:	31 c0                	xor    eax,eax
c0021e6e:	e9 b3 00 00 00       	jmp    c0021f26 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e73:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021e77:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021e7b:	c1 e7 08             	shl    edi,0x8
c0021e7e:	c1 e2 10             	shl    edx,0x10
c0021e81:	09 d7                	or     edi,edx
c0021e83:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021e87:	09 d7                	or     edi,edx
c0021e89:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021e8d:	c1 e2 18             	shl    edx,0x18
c0021e90:	09 d7                	or     edi,edx
c0021e92:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021e96:	89 d1                	mov    ecx,edx
c0021e98:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021e9c:	c1 e1 08             	shl    ecx,0x8
c0021e9f:	c1 e2 10             	shl    edx,0x10
c0021ea2:	09 ca                	or     edx,ecx
c0021ea4:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021ea8:	09 ca                	or     edx,ecx
c0021eaa:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021eae:	c1 e1 18             	shl    ecx,0x18
c0021eb1:	09 ca                	or     edx,ecx
c0021eb3:	89 e9                	mov    ecx,ebp
c0021eb5:	84 c9                	test   cl,cl
c0021eb7:	74 3c                	je     c0021ef5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021eb9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021ebd:	83 ec 0c             	sub    esp,0xc
c0021ec0:	56                   	push   esi
c0021ec1:	e8 2d db fe ff       	call   c000f9f3 <free>
c0021ec6:	83 c4 0c             	add    esp,0xc
c0021ec9:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021ed0:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021ed5:	50                   	push   eax
c0021ed6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021edd:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021ee4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021ee8:	52                   	push   edx
c0021ee9:	57                   	push   edi
c0021eea:	53                   	push   ebx
c0021eeb:	e8 6e fe ff ff       	call   c0021d5e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021ef0:	83 c4 20             	add    esp,0x20
c0021ef3:	eb 31                	jmp    c0021f26 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021ef5:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021ef8:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021eff:	d0 e8                	shr    al,1
c0021f01:	89 3b                	mov    DWORD PTR [ebx],edi
c0021f03:	83 e0 01             	and    eax,0x1
c0021f06:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021f0d:	83 ec 0c             	sub    esp,0xc
c0021f10:	89 13                	mov    DWORD PTR [ebx],edx
c0021f12:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021f19:	89 03                	mov    DWORD PTR [ebx],eax
c0021f1b:	56                   	push   esi
c0021f1c:	e8 d2 da fe ff       	call   c000f9f3 <free>
c0021f21:	83 c4 10             	add    esp,0x10
c0021f24:	b0 01                	mov    al,0x1
c0021f26:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021f2c:	5b                   	pop    ebx
c0021f2d:	5e                   	pop    esi
c0021f2e:	5f                   	pop    edi
c0021f2f:	5d                   	pop    ebp
c0021f30:	c3                   	ret    

c0021f31 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021f31:	55                   	push   ebp
c0021f32:	57                   	push   edi
c0021f33:	56                   	push   esi
c0021f34:	53                   	push   ebx
c0021f35:	83 ec 20             	sub    esp,0x20
c0021f38:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021f3c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021f40:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021f44:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f4c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021f54:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021f59:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021f5f:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021f65:	57                   	push   edi
c0021f66:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f6a:	50                   	push   eax
c0021f6b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f6f:	50                   	push   eax
c0021f70:	e8 95 fd ff ff       	call   c0021d0a <readRoot(unsigned int*, unsigned int*, char)>
c0021f75:	5a                   	pop    edx
c0021f76:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021f7a:	e8 ed e7 fd ff       	call   c000076c <strlen>
c0021f7f:	83 c4 10             	add    esp,0x10
c0021f82:	83 f8 03             	cmp    eax,0x3
c0021f85:	77 17                	ja     c0021f9e <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021f87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f8b:	89 03                	mov    DWORD PTR [ebx],eax
c0021f8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f91:	89 06                	mov    DWORD PTR [esi],eax
c0021f93:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021f9a:	b0 01                	mov    al,0x1
c0021f9c:	eb 19                	jmp    c0021fb7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021f9e:	50                   	push   eax
c0021f9f:	55                   	push   ebp
c0021fa0:	57                   	push   edi
c0021fa1:	56                   	push   esi
c0021fa2:	53                   	push   ebx
c0021fa3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021fa7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021fab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021faf:	e8 aa fd ff ff       	call   c0021d5e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021fb4:	83 c4 20             	add    esp,0x20
c0021fb7:	83 c4 1c             	add    esp,0x1c
c0021fba:	5b                   	pop    ebx
c0021fbb:	5e                   	pop    esi
c0021fbc:	5f                   	pop    edi
c0021fbd:	5d                   	pop    ebp
c0021fbe:	c3                   	ret    
c0021fbf:	90                   	nop

c0021fc0 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021fc0:	57                   	push   edi
c0021fc1:	56                   	push   esi
c0021fc2:	53                   	push   ebx
c0021fc3:	83 ec 10             	sub    esp,0x10
c0021fc6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021fca:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021fce:	85 ff                	test   edi,edi
c0021fd0:	0f 84 8b 00 00 00    	je     c0022061 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021fd6:	85 f6                	test   esi,esi
c0021fd8:	0f 84 83 00 00 00    	je     c0022061 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021fde:	b8 03 00 00 00       	mov    eax,0x3
c0021fe3:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021fe8:	75 7c                	jne    c0022066 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021fea:	83 ec 0c             	sub    esp,0xc
c0021fed:	6a 1c                	push   0x1c
c0021fef:	e8 ef d9 fe ff       	call   c000f9e3 <malloc>
c0021ff4:	89 07                	mov    DWORD PTR [edi],eax
c0021ff6:	89 c3                	mov    ebx,eax
c0021ff8:	58                   	pop    eax
c0021ff9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021ffd:	50                   	push   eax
c0021ffe:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022001:	50                   	push   eax
c0022002:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022006:	50                   	push   eax
c0022007:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002200b:	50                   	push   eax
c002200c:	56                   	push   esi
c002200d:	e8 1f ff ff ff       	call   c0021f31 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022012:	83 c4 20             	add    esp,0x20
c0022015:	84 c0                	test   al,al
c0022017:	74 07                	je     c0022020 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c0022019:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002201e:	74 0b                	je     c002202b <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c0022020:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022024:	b8 01 00 00 00       	mov    eax,0x1
c0022029:	eb 3b                	jmp    c0022066 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c002202b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002202f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022033:	89 03                	mov    DWORD PTR [ebx],eax
c0022035:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002203c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022040:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022047:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002204e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022051:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022058:	8a 06                	mov    al,BYTE PTR [esi]
c002205a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002205d:	31 c0                	xor    eax,eax
c002205f:	eb 05                	jmp    c0022066 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0022061:	b8 04 00 00 00       	mov    eax,0x4
c0022066:	83 c4 10             	add    esp,0x10
c0022069:	5b                   	pop    ebx
c002206a:	5e                   	pop    esi
c002206b:	5f                   	pop    edi
c002206c:	c3                   	ret    
c002206d:	90                   	nop

c002206e <ISO9660::exists(char const*)>:
c002206e:	83 ec 28             	sub    esp,0x28
c0022071:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022075:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022079:	52                   	push   edx
c002207a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c002207d:	52                   	push   edx
c002207e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022082:	52                   	push   edx
c0022083:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022087:	52                   	push   edx
c0022088:	50                   	push   eax
c0022089:	e8 a3 fe ff ff       	call   c0021f31 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002208e:	83 c4 3c             	add    esp,0x3c
c0022091:	c3                   	ret    

c0022092 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022092:	56                   	push   esi
c0022093:	53                   	push   ebx
c0022094:	83 ec 14             	sub    esp,0x14
c0022097:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002209b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002209f:	85 db                	test   ebx,ebx
c00220a1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00220a5:	0f 94 c2             	sete   dl
c00220a8:	85 f6                	test   esi,esi
c00220aa:	0f 94 c0             	sete   al
c00220ad:	08 c2                	or     dl,al
c00220af:	75 68                	jne    c0022119 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00220b1:	85 c9                	test   ecx,ecx
c00220b3:	74 64                	je     c0022119 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00220b5:	83 ec 0c             	sub    esp,0xc
c00220b8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00220bb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00220bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00220c5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220cc:	50                   	push   eax
c00220cd:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00220d0:	50                   	push   eax
c00220d1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220d5:	50                   	push   eax
c00220d6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220da:	50                   	push   eax
c00220db:	51                   	push   ecx
c00220dc:	e8 50 fe ff ff       	call   c0021f31 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220e1:	83 c4 20             	add    esp,0x20
c00220e4:	ba 01 00 00 00       	mov    edx,0x1
c00220e9:	84 c0                	test   al,al
c00220eb:	74 31                	je     c002211e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220f1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220f8:	89 03                	mov    DWORD PTR [ebx],eax
c00220fa:	ba 00 00 00 00       	mov    edx,0x0
c00220ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022103:	85 c0                	test   eax,eax
c0022105:	0f 95 06             	setne  BYTE PTR [esi]
c0022108:	74 14                	je     c002211e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002210a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022110:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022117:	eb 05                	jmp    c002211e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022119:	ba 04 00 00 00       	mov    edx,0x4
c002211e:	83 c4 14             	add    esp,0x14
c0022121:	89 d0                	mov    eax,edx
c0022123:	5b                   	pop    ebx
c0022124:	5e                   	pop    esi
c0022125:	c3                   	ret    

c0022126 <ISO9660::openDir(char const*, void**)>:
c0022126:	57                   	push   edi
c0022127:	56                   	push   esi
c0022128:	53                   	push   ebx
c0022129:	83 ec 10             	sub    esp,0x10
c002212c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022130:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022134:	85 ff                	test   edi,edi
c0022136:	74 7b                	je     c00221b3 <ISO9660::openDir(char const*, void**)+0x8d>
c0022138:	85 f6                	test   esi,esi
c002213a:	74 77                	je     c00221b3 <ISO9660::openDir(char const*, void**)+0x8d>
c002213c:	83 ec 0c             	sub    esp,0xc
c002213f:	6a 1c                	push   0x1c
c0022141:	e8 9d d8 fe ff       	call   c000f9e3 <malloc>
c0022146:	89 07                	mov    DWORD PTR [edi],eax
c0022148:	89 c3                	mov    ebx,eax
c002214a:	58                   	pop    eax
c002214b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002214f:	50                   	push   eax
c0022150:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022153:	50                   	push   eax
c0022154:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022158:	50                   	push   eax
c0022159:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002215d:	50                   	push   eax
c002215e:	56                   	push   esi
c002215f:	e8 cd fd ff ff       	call   c0021f31 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022164:	83 c4 20             	add    esp,0x20
c0022167:	84 c0                	test   al,al
c0022169:	74 07                	je     c0022172 <ISO9660::openDir(char const*, void**)+0x4c>
c002216b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022170:	75 0b                	jne    c002217d <ISO9660::openDir(char const*, void**)+0x57>
c0022172:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022176:	b8 01 00 00 00       	mov    eax,0x1
c002217b:	eb 3b                	jmp    c00221b8 <ISO9660::openDir(char const*, void**)+0x92>
c002217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022181:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022185:	89 03                	mov    DWORD PTR [ebx],eax
c0022187:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002218e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022192:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022199:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00221a0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00221a3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00221aa:	8a 06                	mov    al,BYTE PTR [esi]
c00221ac:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00221af:	31 c0                	xor    eax,eax
c00221b1:	eb 05                	jmp    c00221b8 <ISO9660::openDir(char const*, void**)+0x92>
c00221b3:	b8 04 00 00 00       	mov    eax,0x4
c00221b8:	83 c4 10             	add    esp,0x10
c00221bb:	5b                   	pop    ebx
c00221bc:	5e                   	pop    esi
c00221bd:	5f                   	pop    edi
c00221be:	c3                   	ret    
c00221bf:	90                   	nop

c00221c0 <ISO9660::ISO9660()>:
c00221c0:	83 ec 0c             	sub    esp,0xc
c00221c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221c7:	83 ec 0c             	sub    esp,0xc
c00221ca:	50                   	push   eax
c00221cb:	e8 76 0b ff ff       	call   c0012d46 <Filesystem::Filesystem()>
c00221d0:	83 c4 10             	add    esp,0x10
c00221d3:	ba 20 cc 02 c0       	mov    edx,0xc002cc20
c00221d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221dc:	89 10                	mov    DWORD PTR [eax],edx
c00221de:	90                   	nop
c00221df:	83 c4 0c             	add    esp,0xc
c00221e2:	c3                   	ret    
c00221e3:	90                   	nop

c00221e4 <SoundChannel::SoundChannel(int, int, int, int)>:
c00221e4:	83 ec 1c             	sub    esp,0x1c
c00221e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221eb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00221ef:	89 10                	mov    DWORD PTR [eax],edx
c00221f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221f5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00221f9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00221fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022200:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022204:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022207:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c002220c:	75 23                	jne    c0022231 <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c002220e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022212:	8b 10                	mov    edx,DWORD PTR [eax]
c0022214:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022218:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002221b:	0f af c2             	imul   eax,edx
c002221e:	85 c0                	test   eax,eax
c0022220:	79 03                	jns    c0022225 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0022222:	83 c0 03             	add    eax,0x3
c0022225:	c1 f8 02             	sar    eax,0x2
c0022228:	05 a0 0f 00 00       	add    eax,0xfa0
c002222d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022231:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022235:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022239:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c002223c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022240:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022247:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002224b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022252:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022256:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022259:	c1 e0 02             	shl    eax,0x2
c002225c:	83 ec 0c             	sub    esp,0xc
c002225f:	50                   	push   eax
c0022260:	e8 7e d7 fe ff       	call   c000f9e3 <malloc>
c0022265:	83 c4 10             	add    esp,0x10
c0022268:	89 c2                	mov    edx,eax
c002226a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002226e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022271:	83 ec 04             	sub    esp,0x4
c0022274:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022278:	50                   	push   eax
c0022279:	6a 01                	push   0x1
c002227b:	6a 04                	push   0x4
c002227d:	e8 19 6b fe ff       	call   c0008d9b <src_new>
c0022282:	83 c4 10             	add    esp,0x10
c0022285:	89 c2                	mov    edx,eax
c0022287:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002228b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002228e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022292:	85 c0                	test   eax,eax
c0022294:	74 10                	je     c00222a6 <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0022296:	83 ec 0c             	sub    esp,0xc
c0022299:	68 80 cc 02 c0       	push   0xc002cc80
c002229e:	e8 36 81 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c00222a3:	83 c4 10             	add    esp,0x10
c00222a6:	a0 00 0a 03 c0       	mov    al,ds:0xc0030a00
c00222ab:	83 f0 01             	xor    eax,0x1
c00222ae:	84 c0                	test   al,al
c00222b0:	74 57                	je     c0022309 <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c00222b2:	a1 9c cc 02 c0       	mov    eax,ds:0xc002cc9c
c00222b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00222bb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00222c3:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00222cb:	7f 35                	jg     c0022302 <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c00222cd:	83 ec 0c             	sub    esp,0xc
c00222d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00222d4:	e8 66 54 00 00       	call   c002773f <__floatsisf>
c00222d9:	83 c4 10             	add    esp,0x10
c00222dc:	8b 15 9c cc 02 c0    	mov    edx,DWORD PTR ds:0xc002cc9c
c00222e2:	83 ec 08             	sub    esp,0x8
c00222e5:	52                   	push   edx
c00222e6:	50                   	push   eax
c00222e7:	e8 65 50 00 00       	call   c0027351 <__mulsf3>
c00222ec:	83 c4 10             	add    esp,0x10
c00222ef:	89 c2                	mov    edx,eax
c00222f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00222f5:	89 14 85 00 06 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfa00],edx
c00222fc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022300:	eb c1                	jmp    c00222c3 <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0022302:	c6 05 00 0a 03 c0 01 	mov    BYTE PTR ds:0xc0030a00,0x1
c0022309:	90                   	nop
c002230a:	83 c4 1c             	add    esp,0x1c
c002230d:	c3                   	ret    

c002230e <SoundChannel::~SoundChannel()>:
c002230e:	83 ec 0c             	sub    esp,0xc
c0022311:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022315:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022318:	83 ec 0c             	sub    esp,0xc
c002231b:	50                   	push   eax
c002231c:	e8 d2 d6 fe ff       	call   c000f9f3 <free>
c0022321:	83 c4 10             	add    esp,0x10
c0022324:	90                   	nop
c0022325:	83 c4 0c             	add    esp,0xc
c0022328:	c3                   	ret    
c0022329:	90                   	nop

c002232a <SoundChannel::getSampleRate()>:
c002232a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002232e:	8b 00                	mov    eax,DWORD PTR [eax]
c0022330:	c3                   	ret    
c0022331:	90                   	nop

c0022332 <SoundChannel::getBits()>:
c0022332:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022336:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022339:	c3                   	ret    

c002233a <SoundChannel::getBufferUsed()>:
c002233a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002233e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022341:	c3                   	ret    

c0022342 <SoundChannel::getBufferSize()>:
c0022342:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022346:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022349:	c3                   	ret    

c002234a <SoundChannel::unbuffer(float*, int, int)>:
c002234a:	56                   	push   esi
c002234b:	53                   	push   ebx
c002234c:	83 ec 40             	sub    esp,0x40
c002234f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022353:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022356:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002235a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c002235d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022361:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022365:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022369:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002236d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022371:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022375:	e8 c5 53 00 00       	call   c002773f <__floatsisf>
c002237a:	5a                   	pop    edx
c002237b:	89 c6                	mov    esi,eax
c002237d:	ff 33                	push   DWORD PTR [ebx]
c002237f:	e8 bb 53 00 00       	call   c002773f <__floatsisf>
c0022384:	59                   	pop    ecx
c0022385:	5a                   	pop    edx
c0022386:	50                   	push   eax
c0022387:	56                   	push   esi
c0022388:	e8 87 51 00 00       	call   c0027514 <__divsf3>
c002238d:	89 04 24             	mov    DWORD PTR [esp],eax
c0022390:	e8 7a 66 00 00       	call   c0028a0f <__extendsfdf2>
c0022395:	59                   	pop    ecx
c0022396:	5e                   	pop    esi
c0022397:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002239b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002239f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00223a7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00223ab:	50                   	push   eax
c00223ac:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00223af:	e8 dc 65 fe ff       	call   c0008990 <src_process>
c00223b4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00223b8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00223bb:	83 c4 0c             	add    esp,0xc
c00223be:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00223c1:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00223c4:	29 d0                	sub    eax,edx
c00223c6:	c1 e0 02             	shl    eax,0x2
c00223c9:	50                   	push   eax
c00223ca:	8d 04 91             	lea    eax,[ecx+edx*4]
c00223cd:	50                   	push   eax
c00223ce:	51                   	push   ecx
c00223cf:	e8 b4 e2 fd ff       	call   c0000688 <memmove>
c00223d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00223d8:	83 c4 44             	add    esp,0x44
c00223db:	5b                   	pop    ebx
c00223dc:	5e                   	pop    esi
c00223dd:	c3                   	ret    

c00223de <SoundChannel::buffer16(short*, int)>:
c00223de:	55                   	push   ebp
c00223df:	57                   	push   edi
c00223e0:	56                   	push   esi
c00223e1:	53                   	push   ebx
c00223e2:	83 ec 1c             	sub    esp,0x1c
c00223e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00223e9:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c00223ec:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c00223ef:	0f 84 d2 00 00 00    	je     c00224c7 <SoundChannel::buffer16(short*, int)+0xe9>
c00223f5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00223f9:	85 ed                	test   ebp,ebp
c00223fb:	0f 8e c6 00 00 00    	jle    c00224c7 <SoundChannel::buffer16(short*, int)+0xe9>
c0022401:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022405:	bd 00 00 00 38       	mov    ebp,0x38000000
c002240a:	83 ec 0c             	sub    esp,0xc
c002240d:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0022410:	50                   	push   eax
c0022411:	e8 29 53 00 00       	call   c002773f <__floatsisf>
c0022416:	59                   	pop    ecx
c0022417:	8d 4e 01             	lea    ecx,[esi+0x1]
c002241a:	5f                   	pop    edi
c002241b:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c002241e:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0022421:	55                   	push   ebp
c0022422:	50                   	push   eax
c0022423:	e8 29 4f 00 00       	call   c0027351 <__mulsf3>
c0022428:	83 c4 10             	add    esp,0x10
c002242b:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c002242e:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0022431:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0022434:	0f 84 99 00 00 00    	je     c00224d3 <SoundChannel::buffer16(short*, int)+0xf5>
c002243a:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c002243f:	74 78                	je     c00224b9 <SoundChannel::buffer16(short*, int)+0xdb>
c0022441:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022445:	83 ec 0c             	sub    esp,0xc
c0022448:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c002244c:	50                   	push   eax
c002244d:	e8 ed 52 00 00       	call   c002773f <__floatsisf>
c0022452:	5f                   	pop    edi
c0022453:	8d 4e 01             	lea    ecx,[esi+0x1]
c0022456:	5a                   	pop    edx
c0022457:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c002245a:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c002245d:	55                   	push   ebp
c002245e:	50                   	push   eax
c002245f:	e8 ed 4e 00 00       	call   c0027351 <__mulsf3>
c0022464:	83 c4 10             	add    esp,0x10
c0022467:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c002246a:	be 02 00 00 00       	mov    esi,0x2
c002246f:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0022472:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0022475:	74 46                	je     c00224bd <SoundChannel::buffer16(short*, int)+0xdf>
c0022477:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c002247b:	eb 36                	jmp    c00224b3 <SoundChannel::buffer16(short*, int)+0xd5>
c002247d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022481:	83 ec 0c             	sub    esp,0xc
c0022484:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0022488:	46                   	inc    esi
c0022489:	50                   	push   eax
c002248a:	e8 b0 52 00 00       	call   c002773f <__floatsisf>
c002248f:	5a                   	pop    edx
c0022490:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0022493:	59                   	pop    ecx
c0022494:	8d 4f 01             	lea    ecx,[edi+0x1]
c0022497:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c002249a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002249e:	50                   	push   eax
c002249f:	e8 ad 4e 00 00       	call   c0027351 <__mulsf3>
c00224a4:	83 c4 10             	add    esp,0x10
c00224a7:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c00224ab:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c00224ae:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c00224b1:	74 0a                	je     c00224bd <SoundChannel::buffer16(short*, int)+0xdf>
c00224b3:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c00224b7:	75 c4                	jne    c002247d <SoundChannel::buffer16(short*, int)+0x9f>
c00224b9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00224bd:	83 c4 1c             	add    esp,0x1c
c00224c0:	89 f0                	mov    eax,esi
c00224c2:	5b                   	pop    ebx
c00224c3:	5e                   	pop    esi
c00224c4:	5f                   	pop    edi
c00224c5:	5d                   	pop    ebp
c00224c6:	c3                   	ret    
c00224c7:	83 c4 1c             	add    esp,0x1c
c00224ca:	31 f6                	xor    esi,esi
c00224cc:	5b                   	pop    ebx
c00224cd:	89 f0                	mov    eax,esi
c00224cf:	5e                   	pop    esi
c00224d0:	5f                   	pop    edi
c00224d1:	5d                   	pop    ebp
c00224d2:	c3                   	ret    
c00224d3:	be 01 00 00 00       	mov    esi,0x1
c00224d8:	eb e3                	jmp    c00224bd <SoundChannel::buffer16(short*, int)+0xdf>

c00224da <SoundChannel::buffer8(unsigned char*, int)>:
c00224da:	55                   	push   ebp
c00224db:	57                   	push   edi
c00224dc:	56                   	push   esi
c00224dd:	53                   	push   ebx
c00224de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00224e2:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00224e6:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00224e9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00224ed:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00224f0:	74 7a                	je     c002256c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00224f2:	85 ff                	test   edi,edi
c00224f4:	7e 76                	jle    c002256c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00224f6:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00224fa:	8d 70 01             	lea    esi,[eax+0x1]
c00224fd:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022500:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022503:	8b 1c 9d 00 06 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcfa00]
c002250a:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002250d:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022510:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022513:	74 5e                	je     c0022573 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022515:	83 ff 01             	cmp    edi,0x1
c0022518:	74 4b                	je     c0022565 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c002251a:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c002251e:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022521:	8d 70 01             	lea    esi,[eax+0x1]
c0022524:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022527:	8b 1c 9d 00 06 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcfa00]
c002252e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022531:	b8 02 00 00 00       	mov    eax,0x2
c0022536:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022539:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002253c:	75 23                	jne    c0022561 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c002253e:	eb 27                	jmp    c0022567 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022540:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022545:	8d 71 01             	lea    esi,[ecx+0x1]
c0022548:	40                   	inc    eax
c0022549:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002254c:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c002254f:	8b 1c 9d 00 06 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcfa00]
c0022556:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022559:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002255c:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002255f:	74 06                	je     c0022567 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022561:	39 c7                	cmp    edi,eax
c0022563:	75 db                	jne    c0022540 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022565:	89 f8                	mov    eax,edi
c0022567:	5b                   	pop    ebx
c0022568:	5e                   	pop    esi
c0022569:	5f                   	pop    edi
c002256a:	5d                   	pop    ebp
c002256b:	c3                   	ret    
c002256c:	5b                   	pop    ebx
c002256d:	31 c0                	xor    eax,eax
c002256f:	5e                   	pop    esi
c0022570:	5f                   	pop    edi
c0022571:	5d                   	pop    ebp
c0022572:	c3                   	ret    
c0022573:	b8 01 00 00 00       	mov    eax,0x1
c0022578:	eb ed                	jmp    c0022567 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002257a <SoundDevice::SoundDevice(char const*)>:
c002257a:	83 ec 1c             	sub    esp,0x1c
c002257d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022581:	83 ec 08             	sub    esp,0x8
c0022584:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022588:	50                   	push   eax
c0022589:	e8 ea 1a ff ff       	call   c0014078 <Device::Device(char const*)>
c002258e:	83 c4 10             	add    esp,0x10
c0022591:	ba a8 cc 02 c0       	mov    edx,0xc002cca8
c0022596:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002259a:	89 10                	mov    DWORD PTR [eax],edx
c002259c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225a0:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00225aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225ae:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00225b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00225c0:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00225c5:	7f 19                	jg     c00225e0 <SoundDevice::SoundDevice(char const*)+0x66>
c00225c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225cf:	83 c2 54             	add    edx,0x54
c00225d2:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00225da:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00225de:	eb e0                	jmp    c00225c0 <SoundDevice::SoundDevice(char const*)+0x46>
c00225e0:	90                   	nop
c00225e1:	83 c4 1c             	add    esp,0x1c
c00225e4:	c3                   	ret    
c00225e5:	90                   	nop

c00225e6 <SoundDevice::~SoundDevice()>:
c00225e6:	53                   	push   ebx
c00225e7:	83 ec 18             	sub    esp,0x18
c00225ea:	ba a8 cc 02 c0       	mov    edx,0xc002cca8
c00225ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225f3:	89 10                	mov    DWORD PTR [eax],edx
c00225f5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00225fd:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022602:	7f 46                	jg     c002264a <SoundDevice::~SoundDevice()+0x64>
c0022604:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022608:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002260c:	83 c2 54             	add    edx,0x54
c002260f:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022613:	85 c0                	test   eax,eax
c0022615:	74 2d                	je     c0022644 <SoundDevice::~SoundDevice()+0x5e>
c0022617:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002261b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002261f:	83 c2 54             	add    edx,0x54
c0022622:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022626:	85 db                	test   ebx,ebx
c0022628:	74 1a                	je     c0022644 <SoundDevice::~SoundDevice()+0x5e>
c002262a:	83 ec 0c             	sub    esp,0xc
c002262d:	53                   	push   ebx
c002262e:	e8 db fc ff ff       	call   c002230e <SoundChannel::~SoundChannel()>
c0022633:	83 c4 10             	add    esp,0x10
c0022636:	83 ec 08             	sub    esp,0x8
c0022639:	6a 2c                	push   0x2c
c002263b:	53                   	push   ebx
c002263c:	e8 22 03 ff ff       	call   c0012963 <operator delete(void*, unsigned long)>
c0022641:	83 c4 10             	add    esp,0x10
c0022644:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022648:	eb b3                	jmp    c00225fd <SoundDevice::~SoundDevice()+0x17>
c002264a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002264e:	83 ec 0c             	sub    esp,0xc
c0022651:	50                   	push   eax
c0022652:	e8 eb 16 ff ff       	call   c0013d42 <Device::~Device()>
c0022657:	83 c4 10             	add    esp,0x10
c002265a:	90                   	nop
c002265b:	83 c4 18             	add    esp,0x18
c002265e:	5b                   	pop    ebx
c002265f:	c3                   	ret    

c0022660 <SoundDevice::~SoundDevice()>:
c0022660:	83 ec 0c             	sub    esp,0xc
c0022663:	83 ec 0c             	sub    esp,0xc
c0022666:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002266a:	e8 77 ff ff ff       	call   c00225e6 <SoundDevice::~SoundDevice()>
c002266f:	83 c4 10             	add    esp,0x10
c0022672:	83 ec 08             	sub    esp,0x8
c0022675:	68 e4 01 00 00       	push   0x1e4
c002267a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002267e:	e8 e0 02 ff ff       	call   c0012963 <operator delete(void*, unsigned long)>
c0022683:	83 c4 10             	add    esp,0x10
c0022686:	83 c4 0c             	add    esp,0xc
c0022689:	c3                   	ret    

c002268a <SoundDevice::getFreeChannelNum()>:
c002268a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002268e:	31 c0                	xor    eax,eax
c0022690:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022698:	74 09                	je     c00226a3 <SoundDevice::getFreeChannelNum()+0x19>
c002269a:	40                   	inc    eax
c002269b:	83 f8 20             	cmp    eax,0x20
c002269e:	75 f0                	jne    c0022690 <SoundDevice::getFreeChannelNum()+0x6>
c00226a0:	83 c8 ff             	or     eax,0xffffffff
c00226a3:	c3                   	ret    

c00226a4 <SoundDevice::addChannel(SoundChannel*)>:
c00226a4:	56                   	push   esi
c00226a5:	53                   	push   ebx
c00226a6:	51                   	push   ecx
c00226a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00226ab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00226af:	53                   	push   ebx
c00226b0:	e8 d5 ff ff ff       	call   c002268a <SoundDevice::getFreeChannelNum()>
c00226b5:	5a                   	pop    edx
c00226b6:	83 f8 ff             	cmp    eax,0xffffffff
c00226b9:	74 51                	je     c002270c <SoundDevice::addChannel(SoundChannel*)+0x68>
c00226bb:	85 f6                	test   esi,esi
c00226bd:	74 4d                	je     c002270c <SoundDevice::addChannel(SoundChannel*)+0x68>
c00226bf:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00226c6:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00226cd:	75 30                	jne    c00226ff <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00226cf:	83 ec 0c             	sub    esp,0xc
c00226d2:	56                   	push   esi
c00226d3:	e8 52 fc ff ff       	call   c002232a <SoundChannel::getSampleRate()>
c00226d8:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00226de:	89 34 24             	mov    DWORD PTR [esp],esi
c00226e1:	e8 4c fc ff ff       	call   c0022332 <SoundChannel::getBits()>
c00226e6:	83 c4 0c             	add    esp,0xc
c00226e9:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00226ef:	8b 13                	mov    edx,DWORD PTR [ebx]
c00226f1:	50                   	push   eax
c00226f2:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00226f8:	53                   	push   ebx
c00226f9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00226fc:	83 c4 10             	add    esp,0x10
c00226ff:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022705:	b8 01 00 00 00       	mov    eax,0x1
c002270a:	eb 03                	jmp    c002270f <SoundDevice::addChannel(SoundChannel*)+0x6b>
c002270c:	83 c8 ff             	or     eax,0xffffffff
c002270f:	5a                   	pop    edx
c0022710:	5b                   	pop    ebx
c0022711:	5e                   	pop    esi
c0022712:	c3                   	ret    
c0022713:	90                   	nop

c0022714 <SoundDevice::removeChannel(int)>:
c0022714:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022718:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002271c:	83 fa 1f             	cmp    edx,0x1f
c002271f:	77 23                	ja     c0022744 <SoundDevice::removeChannel(int)+0x30>
c0022721:	8d 14 90             	lea    edx,[eax+edx*4]
c0022724:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002272b:	74 17                	je     c0022744 <SoundDevice::removeChannel(int)+0x30>
c002272d:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022737:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c002273d:	75 05                	jne    c0022744 <SoundDevice::removeChannel(int)+0x30>
c002273f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022741:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c0022744:	c3                   	ret    
c0022745:	90                   	nop

c0022746 <SoundDevice::floatTo16(float*, short*, int)>:
c0022746:	57                   	push   edi
c0022747:	56                   	push   esi
c0022748:	53                   	push   ebx
c0022749:	31 db                	xor    ebx,ebx
c002274b:	83 ec 10             	sub    esp,0x10
c002274e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022752:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022756:	0f 8d d0 00 00 00    	jge    c002282c <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c002275c:	83 ec 0c             	sub    esp,0xc
c002275f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022763:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022766:	e8 a4 62 00 00       	call   c0028a0f <__extendsfdf2>
c002276b:	83 c4 10             	add    esp,0x10
c002276e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022772:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022776:	68 00 00 f0 3f       	push   0x3ff00000
c002277b:	6a 00                	push   0x0
c002277d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022785:	e8 11 52 00 00       	call   c002799b <__adddf3>
c002278a:	83 c4 10             	add    esp,0x10
c002278d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022795:	68 00 00 e0 3f       	push   0x3fe00000
c002279a:	6a 00                	push   0x0
c002279c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227a4:	e8 6f 58 00 00       	call   c0028018 <__muldf3>
c00227a9:	83 c4 10             	add    esp,0x10
c00227ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227b4:	68 c0 ff df 40       	push   0x40dfffc0
c00227b9:	6a 00                	push   0x0
c00227bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227c3:	e8 50 58 00 00       	call   c0028018 <__muldf3>
c00227c8:	59                   	pop    ecx
c00227c9:	5f                   	pop    edi
c00227ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00227ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00227d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227da:	e8 0c 61 00 00       	call   c00288eb <__truncdfsf2>
c00227df:	5a                   	pop    edx
c00227e0:	89 c7                	mov    edi,eax
c00227e2:	59                   	pop    ecx
c00227e3:	68 00 fe ff 46       	push   0x46fffe00
c00227e8:	50                   	push   eax
c00227e9:	e8 a7 51 00 00       	call   c0027995 <__gesf2>
c00227ee:	83 c4 10             	add    esp,0x10
c00227f1:	85 c0                	test   eax,eax
c00227f3:	78 08                	js     c00227fd <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c00227f5:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c00227fb:	eb 29                	jmp    c0022826 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c00227fd:	50                   	push   eax
c00227fe:	50                   	push   eax
c00227ff:	6a 00                	push   0x0
c0022801:	57                   	push   edi
c0022802:	e8 92 51 00 00       	call   c0027999 <__lesf2>
c0022807:	83 c4 10             	add    esp,0x10
c002280a:	85 c0                	test   eax,eax
c002280c:	7f 08                	jg     c0022816 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c002280e:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c0022814:	eb 10                	jmp    c0022826 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022816:	83 ec 0c             	sub    esp,0xc
c0022819:	57                   	push   edi
c002281a:	e8 8d 62 00 00       	call   c0028aac <lrintf>
c002281f:	83 c4 10             	add    esp,0x10
c0022822:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0022826:	43                   	inc    ebx
c0022827:	e9 26 ff ff ff       	jmp    c0022752 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c002282c:	83 c4 10             	add    esp,0x10
c002282f:	5b                   	pop    ebx
c0022830:	5e                   	pop    esi
c0022831:	5f                   	pop    edi
c0022832:	c3                   	ret    
c0022833:	90                   	nop

c0022834 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022834:	57                   	push   edi
c0022835:	56                   	push   esi
c0022836:	53                   	push   ebx
c0022837:	31 db                	xor    ebx,ebx
c0022839:	83 ec 10             	sub    esp,0x10
c002283c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022840:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022844:	0f 8d cb 00 00 00    	jge    c0022915 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c002284a:	83 ec 0c             	sub    esp,0xc
c002284d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022851:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022854:	e8 b6 61 00 00       	call   c0028a0f <__extendsfdf2>
c0022859:	83 c4 10             	add    esp,0x10
c002285c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022860:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022864:	68 00 00 f0 3f       	push   0x3ff00000
c0022869:	6a 00                	push   0x0
c002286b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002286f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022873:	e8 23 51 00 00       	call   c002799b <__adddf3>
c0022878:	83 c4 10             	add    esp,0x10
c002287b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002287f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022883:	68 00 00 e0 3f       	push   0x3fe00000
c0022888:	6a 00                	push   0x0
c002288a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002288e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022892:	e8 81 57 00 00       	call   c0028018 <__muldf3>
c0022897:	83 c4 10             	add    esp,0x10
c002289a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002289e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00228a2:	68 00 00 60 40       	push   0x40600000
c00228a7:	6a 00                	push   0x0
c00228a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00228ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00228b1:	e8 62 57 00 00       	call   c0028018 <__muldf3>
c00228b6:	59                   	pop    ecx
c00228b7:	5f                   	pop    edi
c00228b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00228bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00228c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00228c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00228c8:	e8 1e 60 00 00       	call   c00288eb <__truncdfsf2>
c00228cd:	5a                   	pop    edx
c00228ce:	89 c7                	mov    edi,eax
c00228d0:	59                   	pop    ecx
c00228d1:	68 00 00 fe 42       	push   0x42fe0000
c00228d6:	50                   	push   eax
c00228d7:	e8 b9 50 00 00       	call   c0027995 <__gesf2>
c00228dc:	83 c4 10             	add    esp,0x10
c00228df:	85 c0                	test   eax,eax
c00228e1:	78 06                	js     c00228e9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00228e3:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00228e7:	eb 26                	jmp    c002290f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00228e9:	50                   	push   eax
c00228ea:	50                   	push   eax
c00228eb:	6a 00                	push   0x0
c00228ed:	57                   	push   edi
c00228ee:	e8 a6 50 00 00       	call   c0027999 <__lesf2>
c00228f3:	83 c4 10             	add    esp,0x10
c00228f6:	85 c0                	test   eax,eax
c00228f8:	7f 06                	jg     c0022900 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00228fa:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00228fe:	eb 0f                	jmp    c002290f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022900:	83 ec 0c             	sub    esp,0xc
c0022903:	57                   	push   edi
c0022904:	e8 a3 61 00 00       	call   c0028aac <lrintf>
c0022909:	83 c4 10             	add    esp,0x10
c002290c:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002290f:	43                   	inc    ebx
c0022910:	e9 2b ff ff ff       	jmp    c0022840 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022915:	83 c4 10             	add    esp,0x10
c0022918:	5b                   	pop    ebx
c0022919:	5e                   	pop    esi
c002291a:	5f                   	pop    edi
c002291b:	c3                   	ret    

c002291c <SoundDevice::getAudio(int, float*, float*)>:
c002291c:	55                   	push   ebp
c002291d:	31 ed                	xor    ebp,ebp
c002291f:	57                   	push   edi
c0022920:	56                   	push   esi
c0022921:	31 f6                	xor    esi,esi
c0022923:	53                   	push   ebx
c0022924:	83 ec 20             	sub    esp,0x20
c0022927:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002292b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002292f:	c1 e0 02             	shl    eax,0x2
c0022932:	50                   	push   eax
c0022933:	6a 00                	push   0x0
c0022935:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022939:	e8 12 de fd ff       	call   c0000750 <memset>
c002293e:	83 c4 10             	add    esp,0x10
c0022941:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022949:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c0022950:	85 c9                	test   ecx,ecx
c0022952:	74 52                	je     c00229a6 <SoundDevice::getAudio(int, float*, float*)+0x8a>
c0022954:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022958:	99                   	cdq    
c0022959:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c002295f:	50                   	push   eax
c0022960:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022966:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002296a:	51                   	push   ecx
c002296b:	e8 da f9 ff ff       	call   c002234a <SoundChannel::unbuffer(float*, int, int)>
c0022970:	31 d2                	xor    edx,edx
c0022972:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022976:	83 c4 10             	add    esp,0x10
c0022979:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c002297d:	7d 1e                	jge    c002299d <SoundDevice::getAudio(int, float*, float*)+0x81>
c002297f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022983:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022987:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c002298a:	89 cf                	mov    edi,ecx
c002298c:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0022992:	0f af ca             	imul   ecx,edx
c0022995:	42                   	inc    edx
c0022996:	01 e9                	add    ecx,ebp
c0022998:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c002299b:	eb dc                	jmp    c0022979 <SoundDevice::getAudio(int, float*, float*)+0x5d>
c002299d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00229a1:	45                   	inc    ebp
c00229a2:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c00229a6:	46                   	inc    esi
c00229a7:	83 fe 20             	cmp    esi,0x20
c00229aa:	75 9d                	jne    c0022949 <SoundDevice::getAudio(int, float*, float*)+0x2d>
c00229ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00229b0:	83 c4 1c             	add    esp,0x1c
c00229b3:	5b                   	pop    ebx
c00229b4:	5e                   	pop    esi
c00229b5:	5f                   	pop    edi
c00229b6:	5d                   	pop    ebp
c00229b7:	c3                   	ret    

c00229b8 <PCI::open(int, int, void*)>:
c00229b8:	83 ec 18             	sub    esp,0x18
c00229bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00229bf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00229c3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00229c9:	8b 10                	mov    edx,DWORD PTR [eax]
c00229cb:	50                   	push   eax
c00229cc:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00229cf:	31 c0                	xor    eax,eax
c00229d1:	83 c4 1c             	add    esp,0x1c
c00229d4:	c3                   	ret    
c00229d5:	90                   	nop

c00229d6 <PCI::close(int, int, void*)>:
c00229d6:	31 c0                	xor    eax,eax
c00229d8:	c3                   	ret    
c00229d9:	90                   	nop

c00229da <PCI::PCI()>:
c00229da:	83 ec 0c             	sub    esp,0xc
c00229dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229e1:	83 ec 08             	sub    esp,0x8
c00229e4:	68 d8 cc 02 c0       	push   0xc002ccd8
c00229e9:	50                   	push   eax
c00229ea:	e8 ed 0c ff ff       	call   c00136dc <Bus::Bus(char const*)>
c00229ef:	83 c4 10             	add    esp,0x10
c00229f2:	ba c4 cd 02 c0       	mov    edx,0xc002cdc4
c00229f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229fb:	89 10                	mov    DWORD PTR [eax],edx
c00229fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a01:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0022a0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a0f:	a3 04 0a 03 c0       	mov    ds:0xc0030a04,eax
c0022a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a18:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a1e:	0f b6 d0             	movzx  edx,al
c0022a21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a25:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022a2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a30:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a36:	0f b6 d0             	movzx  edx,al
c0022a39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a3d:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a46:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a4c:	8d 50 01             	lea    edx,[eax+0x1]
c0022a4f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022a53:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022a59:	0f b6 d0             	movzx  edx,al
c0022a5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a60:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022a64:	83 c9 c0             	or     ecx,0xffffffc0
c0022a67:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022a6b:	90                   	nop
c0022a6c:	83 c4 0c             	add    esp,0xc
c0022a6f:	c3                   	ret    

c0022a70 <PCI::readBAR8(unsigned int, int)>:
c0022a70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022a74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a78:	f6 c2 01             	test   dl,0x1
c0022a7b:	74 07                	je     c0022a84 <PCI::readBAR8(unsigned int, int)+0x14>
c0022a7d:	83 e2 fc             	and    edx,0xfffffffc
c0022a80:	01 c2                	add    edx,eax
c0022a82:	ec                   	in     al,dx
c0022a83:	c3                   	ret    
c0022a84:	83 e2 f0             	and    edx,0xfffffff0
c0022a87:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0022a8a:	c3                   	ret    
c0022a8b:	90                   	nop

c0022a8c <PCI::readBAR16(unsigned int, int)>:
c0022a8c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022a90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a94:	f6 c2 01             	test   dl,0x1
c0022a97:	74 08                	je     c0022aa1 <PCI::readBAR16(unsigned int, int)+0x15>
c0022a99:	83 e2 fc             	and    edx,0xfffffffc
c0022a9c:	01 c2                	add    edx,eax
c0022a9e:	66 ed                	in     ax,dx
c0022aa0:	c3                   	ret    
c0022aa1:	83 e2 f0             	and    edx,0xfffffff0
c0022aa4:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022aa8:	c3                   	ret    
c0022aa9:	90                   	nop

c0022aaa <PCI::readBAR32(unsigned int, int)>:
c0022aaa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022aae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022ab2:	f6 c2 01             	test   dl,0x1
c0022ab5:	74 07                	je     c0022abe <PCI::readBAR32(unsigned int, int)+0x14>
c0022ab7:	83 e2 fc             	and    edx,0xfffffffc
c0022aba:	01 c2                	add    edx,eax
c0022abc:	ed                   	in     eax,dx
c0022abd:	c3                   	ret    
c0022abe:	83 e2 f0             	and    edx,0xfffffff0
c0022ac1:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0022ac4:	c3                   	ret    
c0022ac5:	90                   	nop

c0022ac6 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0022ac6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022aca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022ace:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022ad2:	f6 c2 01             	test   dl,0x1
c0022ad5:	74 07                	je     c0022ade <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0022ad7:	83 e2 fc             	and    edx,0xfffffffc
c0022ada:	01 ca                	add    edx,ecx
c0022adc:	ee                   	out    dx,al
c0022add:	c3                   	ret    
c0022ade:	83 e2 f0             	and    edx,0xfffffff0
c0022ae1:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022ae4:	c3                   	ret    
c0022ae5:	90                   	nop

c0022ae6 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022ae6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022aea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022aee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022af2:	f6 c2 01             	test   dl,0x1
c0022af5:	74 08                	je     c0022aff <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0022af7:	83 e2 fc             	and    edx,0xfffffffc
c0022afa:	01 ca                	add    edx,ecx
c0022afc:	66 ef                	out    dx,ax
c0022afe:	c3                   	ret    
c0022aff:	83 e2 f0             	and    edx,0xfffffff0
c0022b02:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0022b06:	c3                   	ret    
c0022b07:	90                   	nop

c0022b08 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0022b08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022b0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022b10:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022b14:	f6 c2 01             	test   dl,0x1
c0022b17:	74 07                	je     c0022b20 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0022b19:	83 e2 fc             	and    edx,0xfffffffc
c0022b1c:	01 ca                	add    edx,ecx
c0022b1e:	ef                   	out    dx,eax
c0022b1f:	c3                   	ret    
c0022b20:	83 e2 f0             	and    edx,0xfffffff0
c0022b23:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0022b26:	c3                   	ret    
c0022b27:	90                   	nop

c0022b28 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022b28:	55                   	push   ebp
c0022b29:	57                   	push   edi
c0022b2a:	56                   	push   esi
c0022b2b:	53                   	push   ebx
c0022b2c:	83 ec 0c             	sub    esp,0xc
c0022b2f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022b33:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0022b37:	89 f0                	mov    eax,esi
c0022b39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022b3d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022b41:	3c 07                	cmp    al,0x7
c0022b43:	76 10                	jbe    c0022b55 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0022b45:	83 ec 0c             	sub    esp,0xc
c0022b48:	68 e0 cc 02 c0       	push   0xc002cce0
c0022b4d:	e8 87 78 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c0022b52:	83 c4 10             	add    esp,0x10
c0022b55:	80 fb 0f             	cmp    bl,0xf
c0022b58:	76 10                	jbe    c0022b6a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0022b5a:	83 ec 0c             	sub    esp,0xc
c0022b5d:	68 10 cd 02 c0       	push   0xc002cd10
c0022b62:	e8 72 78 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c0022b67:	83 c4 10             	add    esp,0x10
c0022b6a:	8d 04 36             	lea    eax,[esi+esi*1]
c0022b6d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b72:	83 c8 f0             	or     eax,0xfffffff0
c0022b75:	ee                   	out    dx,al
c0022b76:	ba fa 0c 00 00       	mov    edx,0xcfa
c0022b7b:	89 e8                	mov    eax,ebp
c0022b7d:	ee                   	out    dx,al
c0022b7e:	83 c4 0c             	add    esp,0xc
c0022b81:	89 d8                	mov    eax,ebx
c0022b83:	66 81 e7 fc 00       	and    di,0xfc
c0022b88:	5b                   	pop    ebx
c0022b89:	c1 e0 08             	shl    eax,0x8
c0022b8c:	5e                   	pop    esi
c0022b8d:	09 f8                	or     eax,edi
c0022b8f:	5f                   	pop    edi
c0022b90:	66 0d 00 c0          	or     ax,0xc000
c0022b94:	5d                   	pop    ebp
c0022b95:	c3                   	ret    

c0022b96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022b96:	57                   	push   edi
c0022b97:	56                   	push   esi
c0022b98:	53                   	push   ebx
c0022b99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022b9d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022ba1:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0022ba7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022bab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022baf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022bb3:	83 ff 01             	cmp    edi,0x1
c0022bb6:	75 3e                	jne    c0022bf6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022bb8:	89 de                	mov    esi,ebx
c0022bba:	0f b6 c0             	movzx  eax,al
c0022bbd:	81 e6 fc 00 00 00    	and    esi,0xfc
c0022bc3:	c1 e0 10             	shl    eax,0x10
c0022bc6:	0f b6 c9             	movzx  ecx,cl
c0022bc9:	09 f0                	or     eax,esi
c0022bcb:	c1 e1 08             	shl    ecx,0x8
c0022bce:	0f b6 d2             	movzx  edx,dl
c0022bd1:	09 c8                	or     eax,ecx
c0022bd3:	c1 e2 0b             	shl    edx,0xb
c0022bd6:	09 d0                	or     eax,edx
c0022bd8:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022bdd:	0d 00 00 00 80       	or     eax,0x80000000
c0022be2:	ef                   	out    dx,eax
c0022be3:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022be8:	ed                   	in     eax,dx
c0022be9:	83 e3 02             	and    ebx,0x2
c0022bec:	0f b6 cb             	movzx  ecx,bl
c0022bef:	c1 e1 03             	shl    ecx,0x3
c0022bf2:	d3 e8                	shr    eax,cl
c0022bf4:	eb 43                	jmp    c0022c39 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022bf6:	83 ff 02             	cmp    edi,0x2
c0022bf9:	75 2c                	jne    c0022c27 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0022bfb:	83 ec 0c             	sub    esp,0xc
c0022bfe:	0f b6 c9             	movzx  ecx,cl
c0022c01:	0f b6 d2             	movzx  edx,dl
c0022c04:	0f b6 fb             	movzx  edi,bl
c0022c07:	0f b6 c0             	movzx  eax,al
c0022c0a:	57                   	push   edi
c0022c0b:	51                   	push   ecx
c0022c0c:	52                   	push   edx
c0022c0d:	50                   	push   eax
c0022c0e:	56                   	push   esi
c0022c0f:	e8 14 ff ff ff       	call   c0022b28 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c14:	89 c2                	mov    edx,eax
c0022c16:	ed                   	in     eax,dx
c0022c17:	83 e3 02             	and    ebx,0x2
c0022c1a:	83 c4 20             	add    esp,0x20
c0022c1d:	0f b6 cb             	movzx  ecx,bl
c0022c20:	c1 e1 03             	shl    ecx,0x3
c0022c23:	d3 e8                	shr    eax,cl
c0022c25:	eb 12                	jmp    c0022c39 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022c27:	83 ec 0c             	sub    esp,0xc
c0022c2a:	68 40 cd 02 c0       	push   0xc002cd40
c0022c2f:	e8 a5 77 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c0022c34:	83 c4 10             	add    esp,0x10
c0022c37:	31 c0                	xor    eax,eax
c0022c39:	5b                   	pop    ebx
c0022c3a:	5e                   	pop    esi
c0022c3b:	5f                   	pop    edi
c0022c3c:	c3                   	ret    
c0022c3d:	90                   	nop

c0022c3e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022c3e:	83 ec 18             	sub    esp,0x18
c0022c41:	6a 00                	push   0x0
c0022c43:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022c48:	50                   	push   eax
c0022c49:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022c4e:	50                   	push   eax
c0022c4f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022c54:	50                   	push   eax
c0022c55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022c59:	e8 38 ff ff ff       	call   c0022b96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c5e:	83 c4 2c             	add    esp,0x2c
c0022c61:	c3                   	ret    

c0022c62 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022c62:	83 ec 18             	sub    esp,0x18
c0022c65:	6a 0e                	push   0xe
c0022c67:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022c6c:	50                   	push   eax
c0022c6d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022c72:	50                   	push   eax
c0022c73:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022c78:	50                   	push   eax
c0022c79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022c7d:	e8 14 ff ff ff       	call   c0022b96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c82:	83 c4 2c             	add    esp,0x2c
c0022c85:	0f b6 c0             	movzx  eax,al
c0022c88:	c3                   	ret    
c0022c89:	90                   	nop

c0022c8a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022c8a:	55                   	push   ebp
c0022c8b:	57                   	push   edi
c0022c8c:	56                   	push   esi
c0022c8d:	53                   	push   ebx
c0022c8e:	83 ec 18             	sub    esp,0x18
c0022c91:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0022c96:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0022c9b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0022ca0:	6a 0a                	push   0xa
c0022ca2:	56                   	push   esi
c0022ca3:	55                   	push   ebp
c0022ca4:	57                   	push   edi
c0022ca5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022ca9:	e8 e8 fe ff ff       	call   c0022b96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022cae:	83 c4 14             	add    esp,0x14
c0022cb1:	89 c3                	mov    ebx,eax
c0022cb3:	6a 0a                	push   0xa
c0022cb5:	0f b6 db             	movzx  ebx,bl
c0022cb8:	56                   	push   esi
c0022cb9:	55                   	push   ebp
c0022cba:	57                   	push   edi
c0022cbb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022cbf:	e8 d2 fe ff ff       	call   c0022b96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022cc4:	83 c4 2c             	add    esp,0x2c
c0022cc7:	25 00 ff 00 00       	and    eax,0xff00
c0022ccc:	09 d8                	or     eax,ebx
c0022cce:	5b                   	pop    ebx
c0022ccf:	5e                   	pop    esi
c0022cd0:	5f                   	pop    edi
c0022cd1:	5d                   	pop    ebp
c0022cd2:	c3                   	ret    
c0022cd3:	90                   	nop

c0022cd4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022cd4:	83 ec 18             	sub    esp,0x18
c0022cd7:	6a 08                	push   0x8
c0022cd9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022cde:	50                   	push   eax
c0022cdf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ce4:	50                   	push   eax
c0022ce5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022cea:	50                   	push   eax
c0022ceb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022cef:	e8 a2 fe ff ff       	call   c0022b96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022cf4:	83 c4 2c             	add    esp,0x2c
c0022cf7:	0f b6 c4             	movzx  eax,ah
c0022cfa:	c3                   	ret    
c0022cfb:	90                   	nop

c0022cfc <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022cfc:	83 ec 18             	sub    esp,0x18
c0022cff:	6a 08                	push   0x8
c0022d01:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022d06:	50                   	push   eax
c0022d07:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022d0c:	50                   	push   eax
c0022d0d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022d12:	50                   	push   eax
c0022d13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022d17:	e8 7a fe ff ff       	call   c0022b96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d1c:	83 c4 2c             	add    esp,0x2c
c0022d1f:	c3                   	ret    

c0022d20 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022d20:	83 ec 18             	sub    esp,0x18
c0022d23:	6a 3c                	push   0x3c
c0022d25:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022d2a:	50                   	push   eax
c0022d2b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022d30:	50                   	push   eax
c0022d31:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022d36:	50                   	push   eax
c0022d37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022d3b:	e8 56 fe ff ff       	call   c0022b96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d40:	83 c4 2c             	add    esp,0x2c
c0022d43:	c3                   	ret    

c0022d44 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022d44:	83 ec 18             	sub    esp,0x18
c0022d47:	6a 18                	push   0x18
c0022d49:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022d4e:	50                   	push   eax
c0022d4f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022d54:	50                   	push   eax
c0022d55:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022d5a:	50                   	push   eax
c0022d5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022d5f:	e8 32 fe ff ff       	call   c0022b96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d64:	83 c4 2c             	add    esp,0x2c
c0022d67:	0f b6 c4             	movzx  eax,ah
c0022d6a:	c3                   	ret    
c0022d6b:	90                   	nop

c0022d6c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022d6c:	55                   	push   ebp
c0022d6d:	57                   	push   edi
c0022d6e:	56                   	push   esi
c0022d6f:	53                   	push   ebx
c0022d70:	83 ec 28             	sub    esp,0x28
c0022d73:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0022d77:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0022d7c:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0022d81:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0022d86:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022d8d:	8d 43 12             	lea    eax,[ebx+0x12]
c0022d90:	83 c3 10             	add    ebx,0x10
c0022d93:	0f b6 c0             	movzx  eax,al
c0022d96:	0f b6 db             	movzx  ebx,bl
c0022d99:	50                   	push   eax
c0022d9a:	51                   	push   ecx
c0022d9b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0022d9f:	57                   	push   edi
c0022da0:	55                   	push   ebp
c0022da1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022da5:	e8 ec fd ff ff       	call   c0022b96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022daa:	83 c4 14             	add    esp,0x14
c0022dad:	89 c6                	mov    esi,eax
c0022daf:	53                   	push   ebx
c0022db0:	c1 e6 10             	shl    esi,0x10
c0022db3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022db7:	51                   	push   ecx
c0022db8:	57                   	push   edi
c0022db9:	55                   	push   ebp
c0022dba:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022dbe:	e8 d3 fd ff ff       	call   c0022b96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022dc3:	83 c4 3c             	add    esp,0x3c
c0022dc6:	0f b7 c0             	movzx  eax,ax
c0022dc9:	5b                   	pop    ebx
c0022dca:	09 f0                	or     eax,esi
c0022dcc:	5e                   	pop    esi
c0022dcd:	5f                   	pop    edi
c0022dce:	5d                   	pop    ebp
c0022dcf:	c3                   	ret    

c0022dd0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022dd0:	55                   	push   ebp
c0022dd1:	57                   	push   edi
c0022dd2:	56                   	push   esi
c0022dd3:	53                   	push   ebx
c0022dd4:	83 ec 0c             	sub    esp,0xc
c0022dd7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022ddb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022ddf:	89 f5                	mov    ebp,esi
c0022de1:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0022de7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022deb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022def:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022df3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022df7:	83 f9 01             	cmp    ecx,0x1
c0022dfa:	75 5d                	jne    c0022e59 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0022dfc:	0f b6 c8             	movzx  ecx,al
c0022dff:	0f b6 d2             	movzx  edx,dl
c0022e02:	c1 e1 10             	shl    ecx,0x10
c0022e05:	c1 e2 0b             	shl    edx,0xb
c0022e08:	89 f0                	mov    eax,esi
c0022e0a:	25 fc 00 00 00       	and    eax,0xfc
c0022e0f:	09 c1                	or     ecx,eax
c0022e11:	89 e8                	mov    eax,ebp
c0022e13:	0f b6 c0             	movzx  eax,al
c0022e16:	c1 e0 08             	shl    eax,0x8
c0022e19:	09 c1                	or     ecx,eax
c0022e1b:	09 d1                	or     ecx,edx
c0022e1d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022e22:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022e28:	89 c8                	mov    eax,ecx
c0022e2a:	ef                   	out    dx,eax
c0022e2b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022e30:	ed                   	in     eax,dx
c0022e31:	0f b7 db             	movzx  ebx,bx
c0022e34:	83 e6 02             	and    esi,0x2
c0022e37:	74 0a                	je     c0022e43 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0022e39:	0f b7 d0             	movzx  edx,ax
c0022e3c:	c1 e3 10             	shl    ebx,0x10
c0022e3f:	09 d3                	or     ebx,edx
c0022e41:	eb 05                	jmp    c0022e48 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0022e43:	66 31 c0             	xor    ax,ax
c0022e46:	09 c3                	or     ebx,eax
c0022e48:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022e4d:	89 c8                	mov    eax,ecx
c0022e4f:	ef                   	out    dx,eax
c0022e50:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022e55:	89 d8                	mov    eax,ebx
c0022e57:	eb 41                	jmp    c0022e9a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022e59:	83 f9 02             	cmp    ecx,0x2
c0022e5c:	75 45                	jne    c0022ea3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0022e5e:	83 ec 0c             	sub    esp,0xc
c0022e61:	0f b6 d2             	movzx  edx,dl
c0022e64:	89 f1                	mov    ecx,esi
c0022e66:	0f b6 c0             	movzx  eax,al
c0022e69:	0f b6 f1             	movzx  esi,cl
c0022e6c:	89 e9                	mov    ecx,ebp
c0022e6e:	56                   	push   esi
c0022e6f:	0f b6 c9             	movzx  ecx,cl
c0022e72:	51                   	push   ecx
c0022e73:	52                   	push   edx
c0022e74:	50                   	push   eax
c0022e75:	57                   	push   edi
c0022e76:	e8 ad fc ff ff       	call   c0022b28 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e7b:	89 c2                	mov    edx,eax
c0022e7d:	ed                   	in     eax,dx
c0022e7e:	83 c4 20             	add    esp,0x20
c0022e81:	0f b7 db             	movzx  ebx,bx
c0022e84:	f6 c2 02             	test   dl,0x2
c0022e87:	74 0c                	je     c0022e95 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0022e89:	0f b7 c8             	movzx  ecx,ax
c0022e8c:	89 d8                	mov    eax,ebx
c0022e8e:	c1 e0 10             	shl    eax,0x10
c0022e91:	09 c8                	or     eax,ecx
c0022e93:	eb 05                	jmp    c0022e9a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022e95:	66 31 c0             	xor    ax,ax
c0022e98:	09 d8                	or     eax,ebx
c0022e9a:	ef                   	out    dx,eax
c0022e9b:	83 c4 0c             	add    esp,0xc
c0022e9e:	5b                   	pop    ebx
c0022e9f:	5e                   	pop    esi
c0022ea0:	5f                   	pop    edi
c0022ea1:	5d                   	pop    ebp
c0022ea2:	c3                   	ret    
c0022ea3:	c7 44 24 20 40 cd 02 c0 	mov    DWORD PTR [esp+0x20],0xc002cd40
c0022eab:	83 c4 0c             	add    esp,0xc
c0022eae:	5b                   	pop    ebx
c0022eaf:	5e                   	pop    esi
c0022eb0:	5f                   	pop    edi
c0022eb1:	5d                   	pop    ebp
c0022eb2:	e9 22 75 ff ff       	jmp    c001a3d9 <Krnl::panic(char const*)>
c0022eb7:	90                   	nop

c0022eb8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0022eb8:	55                   	push   ebp
c0022eb9:	57                   	push   edi
c0022eba:	56                   	push   esi
c0022ebb:	53                   	push   ebx
c0022ebc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022ec2:	80 3d 10 0a 03 c0 00 	cmp    BYTE PTR ds:0xc0030a10,0x0
c0022ec9:	0f 85 84 00 00 00    	jne    c0022f53 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0022ecf:	83 ec 0c             	sub    esp,0xc
c0022ed2:	68 14 01 00 00       	push   0x114
c0022ed7:	e8 07 cb fe ff       	call   c000f9e3 <malloc>
c0022edc:	83 c4 0c             	add    esp,0xc
c0022edf:	89 c3                	mov    ebx,eax
c0022ee1:	ff 35 10 fc 02 c0    	push   DWORD PTR ds:0xc002fc10
c0022ee7:	68 46 cd 02 c0       	push   0xc002cd46
c0022eec:	50                   	push   eax
c0022eed:	e8 a8 00 ff ff       	call   c0012f9a <File::File(char const*, Process*)>
c0022ef2:	5a                   	pop    edx
c0022ef3:	59                   	pop    ecx
c0022ef4:	6a 01                	push   0x1
c0022ef6:	53                   	push   ebx
c0022ef7:	e8 02 01 ff ff       	call   c0012ffe <File::open(FileOpenMode)>
c0022efc:	83 c4 0c             	add    esp,0xc
c0022eff:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0022f03:	50                   	push   eax
c0022f04:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022f08:	50                   	push   eax
c0022f09:	53                   	push   ebx
c0022f0a:	e8 9b 03 ff ff       	call   c00132aa <File::stat(unsigned long long*, bool*)>
c0022f0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022f13:	40                   	inc    eax
c0022f14:	89 04 24             	mov    DWORD PTR [esp],eax
c0022f17:	e8 c7 ca fe ff       	call   c000f9e3 <malloc>
c0022f1c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022f20:	a3 0c 0a 03 c0       	mov    ds:0xc0030a0c,eax
c0022f25:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0022f29:	5e                   	pop    esi
c0022f2a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022f2c:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0022f30:	51                   	push   ecx
c0022f31:	50                   	push   eax
c0022f32:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022f36:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022f3a:	53                   	push   ebx
c0022f3b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022f3e:	83 c4 14             	add    esp,0x14
c0022f41:	53                   	push   ebx
c0022f42:	e8 15 01 ff ff       	call   c001305c <File::close()>
c0022f47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022f4b:	83 c4 10             	add    esp,0x10
c0022f4e:	a3 08 0a 03 c0       	mov    ds:0xc0030a08,eax
c0022f53:	a1 08 0a 03 c0       	mov    eax,ds:0xc0030a08
c0022f58:	8b 15 0c 0a 03 c0    	mov    edx,DWORD PTR ds:0xc0030a0c
c0022f5e:	89 04 24             	mov    DWORD PTR [esp],eax
c0022f61:	31 ff                	xor    edi,edi
c0022f63:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0022f6b:	31 f6                	xor    esi,esi
c0022f6d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0022f72:	31 db                	xor    ebx,ebx
c0022f74:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0022f7c:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0022f81:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0022f88:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0022f8c:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0022f93:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0022f97:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022f9a:	0f 8e 6b 01 00 00    	jle    c002310b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0022fa0:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022fa3:	d4 40                	aam    0x40
c0022fa5:	d5 39                	aad    0x39
c0022fa7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022fab:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0022faf:	d4 40                	aam    0x40
c0022fb1:	d5 39                	aad    0x39
c0022fb3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022fb7:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0022fbb:	d4 40                	aam    0x40
c0022fbd:	d5 39                	aad    0x39
c0022fbf:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0022fc3:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0022fc7:	d4 40                	aam    0x40
c0022fc9:	d5 39                	aad    0x39
c0022fcb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022fcf:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0022fd3:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022fd7:	3c 56                	cmp    al,0x56
c0022fd9:	74 45                	je     c0023020 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0022fdb:	d4 40                	aam    0x40
c0022fdd:	d5 39                	aad    0x39
c0022fdf:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022fe2:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0022fe6:	0f b6 c9             	movzx  ecx,cl
c0022fe9:	c1 e1 04             	shl    ecx,0x4
c0022fec:	d4 40                	aam    0x40
c0022fee:	d5 39                	aad    0x39
c0022ff0:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022ff3:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0022ff7:	0f b6 db             	movzx  ebx,bl
c0022ffa:	09 cb                	or     ebx,ecx
c0022ffc:	c1 e3 04             	shl    ebx,0x4
c0022fff:	d4 40                	aam    0x40
c0023001:	d5 39                	aad    0x39
c0023003:	8d 48 d0             	lea    ecx,[eax-0x30]
c0023006:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c002300a:	0f b6 c9             	movzx  ecx,cl
c002300d:	09 cb                	or     ebx,ecx
c002300f:	c1 e3 04             	shl    ebx,0x4
c0023012:	89 d9                	mov    ecx,ebx
c0023014:	d4 40                	aam    0x40
c0023016:	d5 39                	aad    0x39
c0023018:	8d 58 d0             	lea    ebx,[eax-0x30]
c002301b:	0f b6 db             	movzx  ebx,bl
c002301e:	09 cb                	or     ebx,ecx
c0023020:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0023024:	80 f9 44             	cmp    cl,0x44
c0023027:	74 47                	je     c0023070 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0023029:	88 c8                	mov    al,cl
c002302b:	d4 40                	aam    0x40
c002302d:	d5 39                	aad    0x39
c002302f:	83 e8 30             	sub    eax,0x30
c0023032:	0f b6 e8             	movzx  ebp,al
c0023035:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0023039:	c1 e5 04             	shl    ebp,0x4
c002303c:	d4 40                	aam    0x40
c002303e:	d5 39                	aad    0x39
c0023040:	83 e8 30             	sub    eax,0x30
c0023043:	0f b6 f0             	movzx  esi,al
c0023046:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c002304a:	09 ee                	or     esi,ebp
c002304c:	c1 e6 04             	shl    esi,0x4
c002304f:	d4 40                	aam    0x40
c0023051:	d5 39                	aad    0x39
c0023053:	83 e8 30             	sub    eax,0x30
c0023056:	0f b6 e8             	movzx  ebp,al
c0023059:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c002305d:	09 ee                	or     esi,ebp
c002305f:	c1 e6 04             	shl    esi,0x4
c0023062:	89 f5                	mov    ebp,esi
c0023064:	d4 40                	aam    0x40
c0023066:	d5 39                	aad    0x39
c0023068:	83 e8 30             	sub    eax,0x30
c002306b:	0f b6 f0             	movzx  esi,al
c002306e:	09 ee                	or     esi,ebp
c0023070:	83 c7 10             	add    edi,0x10
c0023073:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0023077:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c002307a:	3c 0a                	cmp    al,0xa
c002307c:	74 09                	je     c0023087 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c002307e:	45                   	inc    ebp
c002307f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0023082:	75 16                	jne    c002309a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0023084:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0023087:	3c 0a                	cmp    al,0xa
c0023089:	0f 94 c0             	sete   al
c002308c:	0f b6 c0             	movzx  eax,al
c002308f:	01 c7                	add    edi,eax
c0023091:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0023096:	75 0c                	jne    c00230a4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0023098:	eb 15                	jmp    c00230af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c002309a:	47                   	inc    edi
c002309b:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c002309e:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00230a2:	eb d3                	jmp    c0023077 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c00230a4:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c00230a9:	0f 85 e8 fe ff ff    	jne    c0022f97 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00230af:	80 f9 44             	cmp    cl,0x44
c00230b2:	74 0b                	je     c00230bf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c00230b4:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c00230b9:	0f 85 d8 fe ff ff    	jne    c0022f97 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00230bf:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00230c3:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00230c7:	c1 e1 04             	shl    ecx,0x4
c00230ca:	83 e8 30             	sub    eax,0x30
c00230cd:	09 c8                	or     eax,ecx
c00230cf:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c00230d3:	0f 85 be fe ff ff    	jne    c0022f97 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00230d9:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c00230dd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00230e1:	c1 e1 04             	shl    ecx,0x4
c00230e4:	83 e8 30             	sub    eax,0x30
c00230e7:	09 c8                	or     eax,ecx
c00230e9:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c00230ed:	0f 85 a4 fe ff ff    	jne    c0022f97 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00230f3:	50                   	push   eax
c00230f4:	50                   	push   eax
c00230f5:	8d 44 24 28          	lea    eax,[esp+0x28]
c00230f9:	50                   	push   eax
c00230fa:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0023101:	e8 06 d7 fd ff       	call   c000080c <strcpy>
c0023106:	83 c4 10             	add    esp,0x10
c0023109:	eb 15                	jmp    c0023120 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c002310b:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0023112:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c002311d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0023120:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0023127:	81 c4 2c 01 00 00    	add    esp,0x12c
c002312d:	5b                   	pop    ebx
c002312e:	5e                   	pop    esi
c002312f:	5f                   	pop    edi
c0023130:	5d                   	pop    ebp
c0023131:	c3                   	ret    

c0023132 <PCI::checkBus(unsigned char)>:
c0023132:	56                   	push   esi
c0023133:	53                   	push   ebx
c0023134:	31 db                	xor    ebx,ebx
c0023136:	51                   	push   ecx
c0023137:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002313c:	52                   	push   edx
c002313d:	53                   	push   ebx
c002313e:	43                   	inc    ebx
c002313f:	56                   	push   esi
c0023140:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023144:	e8 37 03 00 00       	call   c0023480 <PCI::checkDevice(unsigned char, unsigned char)>
c0023149:	83 c4 10             	add    esp,0x10
c002314c:	83 fb 20             	cmp    ebx,0x20
c002314f:	75 eb                	jne    c002313c <PCI::checkBus(unsigned char)+0xa>
c0023151:	58                   	pop    eax
c0023152:	5b                   	pop    ebx
c0023153:	5e                   	pop    esi
c0023154:	c3                   	ret    
c0023155:	90                   	nop

c0023156 <PCI::foundDevice(PCIDeviceInfo)>:
c0023156:	55                   	push   ebp
c0023157:	57                   	push   edi
c0023158:	56                   	push   esi
c0023159:	53                   	push   ebx
c002315a:	83 ec 1c             	sub    esp,0x1c
c002315d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023161:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0023167:	0f 84 52 01 00 00    	je     c00232bf <PCI::foundDevice(PCIDeviceInfo)+0x169>
c002316d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0023171:	66 81 f9 06 04       	cmp    cx,0x406
c0023176:	75 2c                	jne    c00231a4 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0023178:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002317d:	50                   	push   eax
c002317e:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0023183:	50                   	push   eax
c0023184:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0023189:	50                   	push   eax
c002318a:	56                   	push   esi
c002318b:	e8 b4 fb ff ff       	call   c0022d44 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0023190:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023194:	0f b6 c0             	movzx  eax,al
c0023197:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c002319b:	83 c4 2c             	add    esp,0x2c
c002319e:	5b                   	pop    ebx
c002319f:	5e                   	pop    esi
c00231a0:	5f                   	pop    edi
c00231a1:	5d                   	pop    ebp
c00231a2:	eb 8e                	jmp    c0023132 <PCI::checkBus(unsigned char)>
c00231a4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00231a8:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00231ae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00231b2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00231b6:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00231ba:	88 d3                	mov    bl,dl
c00231bc:	85 c0                	test   eax,eax
c00231be:	74 33                	je     c00231f3 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00231c0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00231c3:	85 d2                	test   edx,edx
c00231c5:	74 28                	je     c00231ef <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00231c7:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00231cd:	31 ef                	xor    edi,ebp
c00231cf:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c00231d5:	75 18                	jne    c00231ef <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00231d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00231db:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c00231e1:	75 0c                	jne    c00231ef <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00231e3:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c00231e9:	0f 84 d0 00 00 00    	je     c00232bf <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00231ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00231f1:	eb c9                	jmp    c00231bc <PCI::foundDevice(PCIDeviceInfo)+0x66>
c00231f3:	66 81 f9 01 06       	cmp    cx,0x601
c00231f8:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00231fc:	75 19                	jne    c0023217 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00231fe:	83 ec 0c             	sub    esp,0xc
c0023201:	68 64 01 00 00       	push   0x164
c0023206:	e8 d8 c7 fe ff       	call   c000f9e3 <malloc>
c002320b:	89 c5                	mov    ebp,eax
c002320d:	89 04 24             	mov    DWORD PTR [esp],eax
c0023210:	e8 85 0e 00 00       	call   c002409a <SATABus::SATABus()>
c0023215:	eb 1e                	jmp    c0023235 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0023217:	66 81 f9 01 01       	cmp    cx,0x101
c002321c:	75 60                	jne    c002327e <PCI::foundDevice(PCIDeviceInfo)+0x128>
c002321e:	83 ec 0c             	sub    esp,0xc
c0023221:	68 70 02 00 00       	push   0x270
c0023226:	e8 b8 c7 fe ff       	call   c000f9e3 <malloc>
c002322b:	89 c5                	mov    ebp,eax
c002322d:	89 04 24             	mov    DWORD PTR [esp],eax
c0023230:	e8 0f 03 00 00       	call   c0023544 <IDE::IDE()>
c0023235:	58                   	pop    eax
c0023236:	5a                   	pop    edx
c0023237:	55                   	push   ebp
c0023238:	56                   	push   esi
c0023239:	e8 36 0c ff ff       	call   c0013e74 <Device::addChild(Device*)>
c002323e:	83 ec 1c             	sub    esp,0x1c
c0023241:	b9 09 00 00 00       	mov    ecx,0x9
c0023246:	fc                   	cld    
c0023247:	89 e7                	mov    edi,esp
c0023249:	89 de                	mov    esi,ebx
c002324b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002324d:	55                   	push   ebp
c002324e:	e8 33 0b ff ff       	call   c0013d86 <Device::preOpenPCI(PCIDeviceInfo)>
c0023253:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023256:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002325a:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0023262:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c002326a:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0023272:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023275:	83 c4 4c             	add    esp,0x4c
c0023278:	5b                   	pop    ebx
c0023279:	5e                   	pop    esi
c002327a:	5f                   	pop    edi
c002327b:	5d                   	pop    ebp
c002327c:	ff e0                	jmp    eax
c002327e:	83 ec 0c             	sub    esp,0xc
c0023281:	68 58 01 00 00       	push   0x158
c0023286:	e8 58 c7 fe ff       	call   c000f9e3 <malloc>
c002328b:	89 c5                	mov    ebp,eax
c002328d:	58                   	pop    eax
c002328e:	5a                   	pop    edx
c002328f:	68 5f cd 02 c0       	push   0xc002cd5f
c0023294:	55                   	push   ebp
c0023295:	e8 e4 0e ff ff       	call   c001417e <DriverlessDevice::DriverlessDevice(char const*)>
c002329a:	59                   	pop    ecx
c002329b:	5f                   	pop    edi
c002329c:	55                   	push   ebp
c002329d:	56                   	push   esi
c002329e:	e8 d1 0b ff ff       	call   c0013e74 <Device::addChild(Device*)>
c00232a3:	b9 09 00 00 00       	mov    ecx,0x9
c00232a8:	fc                   	cld    
c00232a9:	89 df                	mov    edi,ebx
c00232ab:	89 de                	mov    esi,ebx
c00232ad:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00232af:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00232b3:	83 c4 2c             	add    esp,0x2c
c00232b6:	5b                   	pop    ebx
c00232b7:	5e                   	pop    esi
c00232b8:	5f                   	pop    edi
c00232b9:	5d                   	pop    ebp
c00232ba:	e9 c7 0a ff ff       	jmp    c0013d86 <Device::preOpenPCI(PCIDeviceInfo)>
c00232bf:	83 c4 1c             	add    esp,0x1c
c00232c2:	5b                   	pop    ebx
c00232c3:	5e                   	pop    esi
c00232c4:	5f                   	pop    edi
c00232c5:	5d                   	pop    ebp
c00232c6:	c3                   	ret    
c00232c7:	90                   	nop

c00232c8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00232c8:	55                   	push   ebp
c00232c9:	57                   	push   edi
c00232ca:	56                   	push   esi
c00232cb:	53                   	push   ebx
c00232cc:	83 ec 68             	sub    esp,0x68
c00232cf:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c00232d3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00232da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00232de:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00232e5:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c00232ea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00232ee:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00232f5:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00232fa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00232fe:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0023303:	6a 0c                	push   0xc
c0023305:	57                   	push   edi
c0023306:	53                   	push   ebx
c0023307:	56                   	push   esi
c0023308:	55                   	push   ebp
c0023309:	e8 88 f8 ff ff       	call   c0022b96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002330e:	83 c4 20             	add    esp,0x20
c0023311:	57                   	push   edi
c0023312:	53                   	push   ebx
c0023313:	56                   	push   esi
c0023314:	55                   	push   ebp
c0023315:	e8 70 f9 ff ff       	call   c0022c8a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002331a:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c002331f:	57                   	push   edi
c0023320:	53                   	push   ebx
c0023321:	56                   	push   esi
c0023322:	55                   	push   ebp
c0023323:	e8 f8 f9 ff ff       	call   c0022d20 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0023328:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c002332c:	83 c4 14             	add    esp,0x14
c002332f:	6a 3c                	push   0x3c
c0023331:	57                   	push   edi
c0023332:	53                   	push   ebx
c0023333:	56                   	push   esi
c0023334:	55                   	push   ebp
c0023335:	e8 5c f8 ff ff       	call   c0022b96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002333a:	0f b6 c4             	movzx  eax,ah
c002333d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0023341:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0023345:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0023349:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c002334e:	83 c4 20             	add    esp,0x20
c0023351:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0023357:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c002335e:	74 7c                	je     c00233dc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0023360:	31 c0                	xor    eax,eax
c0023362:	8b 15 e8 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e6e8
c0023368:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c002336e:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0023374:	7e 66                	jle    c00233dc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0023376:	8d 14 c2             	lea    edx,[edx+eax*8]
c0023379:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0023380:	39 cb                	cmp    ebx,ecx
c0023382:	75 55                	jne    c00233d9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0023384:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c002338b:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c002338f:	75 48                	jne    c00233d9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0023391:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023395:	83 ec 0c             	sub    esp,0xc
c0023398:	68 79 cd 02 c0       	push   0xc002cd79
c002339d:	e8 99 f6 fe ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c00233a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00233a6:	8b 15 e8 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e6e8
c00233ac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00233b0:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00233b6:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c00233be:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c00233c2:	52                   	push   edx
c00233c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233c7:	53                   	push   ebx
c00233c8:	68 9e cd 02 c0       	push   0xc002cd9e
c00233cd:	e8 69 f6 fe ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c00233d2:	83 c4 20             	add    esp,0x20
c00233d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00233d9:	40                   	inc    eax
c00233da:	eb 86                	jmp    c0023362 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c00233dc:	31 d2                	xor    edx,edx
c00233de:	83 ec 0c             	sub    esp,0xc
c00233e1:	57                   	push   edi
c00233e2:	53                   	push   ebx
c00233e3:	56                   	push   esi
c00233e4:	52                   	push   edx
c00233e5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00233e9:	55                   	push   ebp
c00233ea:	e8 7d f9 ff ff       	call   c0022d6c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c00233ef:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00233f3:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00233f7:	42                   	inc    edx
c00233f8:	83 c4 20             	add    esp,0x20
c00233fb:	83 fa 06             	cmp    edx,0x6
c00233fe:	75 de                	jne    c00233de <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0023400:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0023405:	83 ec 0c             	sub    esp,0xc
c0023408:	86 e0                	xchg   al,ah
c002340a:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c002340f:	6a 02                	push   0x2
c0023411:	57                   	push   edi
c0023412:	53                   	push   ebx
c0023413:	56                   	push   esi
c0023414:	55                   	push   ebp
c0023415:	e8 7c f7 ff ff       	call   c0022b96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002341a:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c002341f:	83 c4 20             	add    esp,0x20
c0023422:	57                   	push   edi
c0023423:	53                   	push   ebx
c0023424:	56                   	push   esi
c0023425:	55                   	push   ebp
c0023426:	e8 a9 f8 ff ff       	call   c0022cd4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002342b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002342f:	57                   	push   edi
c0023430:	53                   	push   ebx
c0023431:	56                   	push   esi
c0023432:	55                   	push   ebp
c0023433:	e8 06 f8 ff ff       	call   c0022c3e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023438:	b9 09 00 00 00       	mov    ecx,0x9
c002343d:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0023442:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0023446:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c002344a:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c002344e:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0023452:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0023456:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c002345a:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c002345e:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0023462:	83 ec 0c             	sub    esp,0xc
c0023465:	fc                   	cld    
c0023466:	89 e7                	mov    edi,esp
c0023468:	8d 74 24 58          	lea    esi,[esp+0x58]
c002346c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002346e:	55                   	push   ebp
c002346f:	e8 e2 fc ff ff       	call   c0023156 <PCI::foundDevice(PCIDeviceInfo)>
c0023474:	81 c4 8c 00 00 00    	add    esp,0x8c
c002347a:	5b                   	pop    ebx
c002347b:	5e                   	pop    esi
c002347c:	5f                   	pop    edi
c002347d:	5d                   	pop    ebp
c002347e:	c3                   	ret    
c002347f:	90                   	nop

c0023480 <PCI::checkDevice(unsigned char, unsigned char)>:
c0023480:	55                   	push   ebp
c0023481:	57                   	push   edi
c0023482:	56                   	push   esi
c0023483:	53                   	push   ebx
c0023484:	83 ec 0c             	sub    esp,0xc
c0023487:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002348b:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0023490:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0023495:	6a 00                	push   0x0
c0023497:	56                   	push   esi
c0023498:	57                   	push   edi
c0023499:	55                   	push   ebp
c002349a:	e8 9f f7 ff ff       	call   c0022c3e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002349f:	6a 00                	push   0x0
c00234a1:	56                   	push   esi
c00234a2:	57                   	push   edi
c00234a3:	55                   	push   ebp
c00234a4:	e8 1f fe ff ff       	call   c00232c8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00234a9:	83 c4 20             	add    esp,0x20
c00234ac:	6a 00                	push   0x0
c00234ae:	56                   	push   esi
c00234af:	57                   	push   edi
c00234b0:	55                   	push   ebp
c00234b1:	e8 ac f7 ff ff       	call   c0022c62 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00234b6:	83 c4 10             	add    esp,0x10
c00234b9:	84 c0                	test   al,al
c00234bb:	79 27                	jns    c00234e4 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00234bd:	bb 01 00 00 00       	mov    ebx,0x1
c00234c2:	53                   	push   ebx
c00234c3:	56                   	push   esi
c00234c4:	57                   	push   edi
c00234c5:	55                   	push   ebp
c00234c6:	e8 73 f7 ff ff       	call   c0022c3e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00234cb:	83 c4 10             	add    esp,0x10
c00234ce:	66 40                	inc    ax
c00234d0:	74 0c                	je     c00234de <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c00234d2:	53                   	push   ebx
c00234d3:	56                   	push   esi
c00234d4:	57                   	push   edi
c00234d5:	55                   	push   ebp
c00234d6:	e8 ed fd ff ff       	call   c00232c8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00234db:	83 c4 10             	add    esp,0x10
c00234de:	43                   	inc    ebx
c00234df:	83 fb 08             	cmp    ebx,0x8
c00234e2:	75 de                	jne    c00234c2 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00234e4:	83 c4 0c             	add    esp,0xc
c00234e7:	5b                   	pop    ebx
c00234e8:	5e                   	pop    esi
c00234e9:	5f                   	pop    edi
c00234ea:	5d                   	pop    ebp
c00234eb:	c3                   	ret    

c00234ec <PCI::detect()>:
c00234ec:	56                   	push   esi
c00234ed:	53                   	push   ebx
c00234ee:	53                   	push   ebx
c00234ef:	31 db                	xor    ebx,ebx
c00234f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00234f5:	6a 00                	push   0x0
c00234f7:	6a 00                	push   0x0
c00234f9:	6a 00                	push   0x0
c00234fb:	56                   	push   esi
c00234fc:	e8 61 f7 ff ff       	call   c0022c62 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023501:	83 c4 10             	add    esp,0x10
c0023504:	a8 80                	test   al,0x80
c0023506:	75 21                	jne    c0023529 <PCI::detect()+0x3d>
c0023508:	51                   	push   ecx
c0023509:	51                   	push   ecx
c002350a:	6a 00                	push   0x0
c002350c:	56                   	push   esi
c002350d:	e8 20 fc ff ff       	call   c0023132 <PCI::checkBus(unsigned char)>
c0023512:	83 c4 10             	add    esp,0x10
c0023515:	eb 24                	jmp    c002353b <PCI::detect()+0x4f>
c0023517:	52                   	push   edx
c0023518:	52                   	push   edx
c0023519:	53                   	push   ebx
c002351a:	43                   	inc    ebx
c002351b:	56                   	push   esi
c002351c:	e8 11 fc ff ff       	call   c0023132 <PCI::checkBus(unsigned char)>
c0023521:	83 c4 10             	add    esp,0x10
c0023524:	83 fb 08             	cmp    ebx,0x8
c0023527:	74 12                	je     c002353b <PCI::detect()+0x4f>
c0023529:	53                   	push   ebx
c002352a:	6a 00                	push   0x0
c002352c:	6a 00                	push   0x0
c002352e:	56                   	push   esi
c002352f:	e8 0a f7 ff ff       	call   c0022c3e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023534:	83 c4 10             	add    esp,0x10
c0023537:	66 40                	inc    ax
c0023539:	74 dc                	je     c0023517 <PCI::detect()+0x2b>
c002353b:	58                   	pop    eax
c002353c:	5b                   	pop    ebx
c002353d:	5e                   	pop    esi
c002353e:	c3                   	ret    
c002353f:	90                   	nop

c0023540 <IDE::close(int, int, void*)>:
c0023540:	83 c8 ff             	or     eax,0xffffffff
c0023543:	c3                   	ret    

c0023544 <IDE::IDE()>:
c0023544:	83 ec 0c             	sub    esp,0xc
c0023547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002354b:	83 ec 08             	sub    esp,0x8
c002354e:	68 e8 cd 02 c0       	push   0xc002cde8
c0023553:	50                   	push   eax
c0023554:	e8 c9 0c ff ff       	call   c0014222 <HardDiskController::HardDiskController(char const*)>
c0023559:	83 c4 10             	add    esp,0x10
c002355c:	ba 78 ce 02 c0       	mov    edx,0xc002ce78
c0023561:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023565:	89 10                	mov    DWORD PTR [eax],edx
c0023567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002356b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023572:	90                   	nop
c0023573:	83 c4 0c             	add    esp,0xc
c0023576:	c3                   	ret    
c0023577:	90                   	nop

c0023578 <IDE::prepareInterrupt(unsigned char)>:
c0023578:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002357d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023581:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023589:	c3                   	ret    

c002358a <selectDrive(unsigned char, unsigned char)>:
c002358a:	c3                   	ret    
c002358b:	90                   	nop

c002358c <IDE::getBase(unsigned char)>:
c002358c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023591:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023595:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002359d:	c3                   	ret    

c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002359e:	55                   	push   ebp
c002359f:	57                   	push   edi
c00235a0:	56                   	push   esi
c00235a1:	53                   	push   ebx
c00235a2:	83 ec 1c             	sub    esp,0x1c
c00235a5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00235a9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00235ad:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00235b0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00235b4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00235b8:	80 f9 03             	cmp    cl,0x3
c00235bb:	77 51                	ja     c002360e <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00235bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00235c1:	0f b6 f2             	movzx  esi,dl
c00235c4:	0f b6 db             	movzx  ebx,bl
c00235c7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00235ca:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00235ce:	83 ca 80             	or     edx,0xffffff80
c00235d1:	0f b6 d2             	movzx  edx,dl
c00235d4:	52                   	push   edx
c00235d5:	6a 0c                	push   0xc
c00235d7:	56                   	push   esi
c00235d8:	57                   	push   edi
c00235d9:	e8 c0 ff ff ff       	call   c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235de:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00235e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00235e7:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00235eb:	ee                   	out    dx,al
c00235ec:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00235f1:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00235f5:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00235f9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00235fd:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023605:	83 c4 2c             	add    esp,0x2c
c0023608:	5b                   	pop    ebx
c0023609:	5e                   	pop    esi
c002360a:	5f                   	pop    edi
c002360b:	5d                   	pop    ebp
c002360c:	eb 90                	jmp    c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002360e:	80 fb 07             	cmp    bl,0x7
c0023611:	77 12                	ja     c0023625 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023613:	0f b6 d2             	movzx  edx,dl
c0023616:	0f b6 db             	movzx  ebx,bl
c0023619:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023621:	89 da                	mov    edx,ebx
c0023623:	eb 2f                	jmp    c0023654 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023625:	80 fb 0d             	cmp    bl,0xd
c0023628:	77 13                	ja     c002363d <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002362a:	0f b6 d2             	movzx  edx,dl
c002362d:	0f b6 db             	movzx  ebx,bl
c0023630:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023637:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002363b:	eb 17                	jmp    c0023654 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002363d:	80 fb 15             	cmp    bl,0x15
c0023640:	77 13                	ja     c0023655 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023642:	0f b6 d2             	movzx  edx,dl
c0023645:	0f b6 db             	movzx  ebx,bl
c0023648:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023650:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023654:	ee                   	out    dx,al
c0023655:	83 c4 1c             	add    esp,0x1c
c0023658:	5b                   	pop    ebx
c0023659:	5e                   	pop    esi
c002365a:	5f                   	pop    edi
c002365b:	5d                   	pop    ebp
c002365c:	c3                   	ret    
c002365d:	90                   	nop

c002365e <IDE::read(unsigned char, unsigned char)>:
c002365e:	55                   	push   ebp
c002365f:	57                   	push   edi
c0023660:	56                   	push   esi
c0023661:	53                   	push   ebx
c0023662:	83 ec 1c             	sub    esp,0x1c
c0023665:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023669:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002366d:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023670:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023674:	3c 03                	cmp    al,0x3
c0023676:	77 43                	ja     c00236bb <IDE::read(unsigned char, unsigned char)+0x5d>
c0023678:	0f b6 f2             	movzx  esi,dl
c002367b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002367e:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023682:	83 c8 80             	or     eax,0xffffff80
c0023685:	0f b6 c0             	movzx  eax,al
c0023688:	50                   	push   eax
c0023689:	6a 0c                	push   0xc
c002368b:	56                   	push   esi
c002368c:	57                   	push   edi
c002368d:	e8 0c ff ff ff       	call   c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023692:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023697:	0f b6 c3             	movzx  eax,bl
c002369a:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c002369e:	ec                   	in     al,dx
c002369f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00236a3:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00236a8:	52                   	push   edx
c00236a9:	6a 0c                	push   0xc
c00236ab:	56                   	push   esi
c00236ac:	57                   	push   edi
c00236ad:	e8 ec fe ff ff       	call   c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236b2:	83 c4 20             	add    esp,0x20
c00236b5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00236b9:	eb 49                	jmp    c0023704 <IDE::read(unsigned char, unsigned char)+0xa6>
c00236bb:	80 fb 07             	cmp    bl,0x7
c00236be:	77 12                	ja     c00236d2 <IDE::read(unsigned char, unsigned char)+0x74>
c00236c0:	0f b6 d2             	movzx  edx,dl
c00236c3:	0f b6 c3             	movzx  eax,bl
c00236c6:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00236ce:	89 c2                	mov    edx,eax
c00236d0:	eb 31                	jmp    c0023703 <IDE::read(unsigned char, unsigned char)+0xa5>
c00236d2:	80 fb 0d             	cmp    bl,0xd
c00236d5:	77 13                	ja     c00236ea <IDE::read(unsigned char, unsigned char)+0x8c>
c00236d7:	0f b6 d2             	movzx  edx,dl
c00236da:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00236e1:	0f b6 d3             	movzx  edx,bl
c00236e4:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00236e8:	eb 19                	jmp    c0023703 <IDE::read(unsigned char, unsigned char)+0xa5>
c00236ea:	31 c0                	xor    eax,eax
c00236ec:	80 fb 15             	cmp    bl,0x15
c00236ef:	77 13                	ja     c0023704 <IDE::read(unsigned char, unsigned char)+0xa6>
c00236f1:	0f b6 d2             	movzx  edx,dl
c00236f4:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00236fc:	0f b6 d3             	movzx  edx,bl
c00236ff:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023703:	ec                   	in     al,dx
c0023704:	83 c4 1c             	add    esp,0x1c
c0023707:	5b                   	pop    ebx
c0023708:	5e                   	pop    esi
c0023709:	5f                   	pop    edi
c002370a:	5d                   	pop    ebp
c002370b:	c3                   	ret    

c002370c <IDE::waitInterrupt(unsigned char)>:
c002370c:	55                   	push   ebp
c002370d:	57                   	push   edi
c002370e:	56                   	push   esi
c002370f:	53                   	push   ebx
c0023710:	31 db                	xor    ebx,ebx
c0023712:	83 ec 0c             	sub    esp,0xc
c0023715:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023719:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002371e:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023726:	89 e8                	mov    eax,ebp
c0023728:	84 c0                	test   al,al
c002372a:	75 34                	jne    c0023760 <IDE::waitInterrupt(unsigned char)+0x54>
c002372c:	52                   	push   edx
c002372d:	6a 0c                	push   0xc
c002372f:	56                   	push   esi
c0023730:	57                   	push   edi
c0023731:	e8 28 ff ff ff       	call   c002365e <IDE::read(unsigned char, unsigned char)>
c0023736:	83 c4 10             	add    esp,0x10
c0023739:	a8 01                	test   al,0x1
c002373b:	75 2b                	jne    c0023768 <IDE::waitInterrupt(unsigned char)+0x5c>
c002373d:	f6 c3 04             	test   bl,0x4
c0023740:	75 16                	jne    c0023758 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023742:	83 fb 32             	cmp    ebx,0x32
c0023745:	7e 11                	jle    c0023758 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023747:	50                   	push   eax
c0023748:	50                   	push   eax
c0023749:	6a 00                	push   0x0
c002374b:	68 80 96 98 00       	push   0x989680
c0023750:	e8 f0 aa ff ff       	call   c001e245 <nanoSleep(unsigned long long)>
c0023755:	83 c4 10             	add    esp,0x10
c0023758:	83 fb 3c             	cmp    ebx,0x3c
c002375b:	74 0b                	je     c0023768 <IDE::waitInterrupt(unsigned char)+0x5c>
c002375d:	43                   	inc    ebx
c002375e:	eb be                	jmp    c002371e <IDE::waitInterrupt(unsigned char)+0x12>
c0023760:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023768:	83 c4 0c             	add    esp,0xc
c002376b:	89 e8                	mov    eax,ebp
c002376d:	5b                   	pop    ebx
c002376e:	5e                   	pop    esi
c002376f:	5f                   	pop    edi
c0023770:	5d                   	pop    ebp
c0023771:	c3                   	ret    

c0023772 <ideChannel0IRQHandler(regs*, void*)>:
c0023772:	83 ec 10             	sub    esp,0x10
c0023775:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023779:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023780:	6a 07                	push   0x7
c0023782:	6a 00                	push   0x0
c0023784:	50                   	push   eax
c0023785:	e8 d4 fe ff ff       	call   c002365e <IDE::read(unsigned char, unsigned char)>
c002378a:	83 c4 1c             	add    esp,0x1c
c002378d:	c3                   	ret    

c002378e <ideChannel1IRQHandler(regs*, void*)>:
c002378e:	83 ec 10             	sub    esp,0x10
c0023791:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023795:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002379c:	6a 07                	push   0x7
c002379e:	6a 01                	push   0x1
c00237a0:	50                   	push   eax
c00237a1:	e8 b8 fe ff ff       	call   c002365e <IDE::read(unsigned char, unsigned char)>
c00237a6:	83 c4 1c             	add    esp,0x1c
c00237a9:	c3                   	ret    

c00237aa <IDE::enableIRQs(unsigned char, bool)>:
c00237aa:	57                   	push   edi
c00237ab:	56                   	push   esi
c00237ac:	be 04 00 00 00       	mov    esi,0x4
c00237b1:	53                   	push   ebx
c00237b2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00237b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00237bb:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00237c0:	0f 94 c0             	sete   al
c00237c3:	d1 e0                	shl    eax,1
c00237c5:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00237cc:	0f b6 c0             	movzx  eax,al
c00237cf:	50                   	push   eax
c00237d0:	6a 0c                	push   0xc
c00237d2:	57                   	push   edi
c00237d3:	53                   	push   ebx
c00237d4:	e8 c5 fd ff ff       	call   c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237d9:	83 c4 10             	add    esp,0x10
c00237dc:	50                   	push   eax
c00237dd:	6a 0c                	push   0xc
c00237df:	57                   	push   edi
c00237e0:	53                   	push   ebx
c00237e1:	e8 78 fe ff ff       	call   c002365e <IDE::read(unsigned char, unsigned char)>
c00237e6:	83 c4 10             	add    esp,0x10
c00237e9:	4e                   	dec    esi
c00237ea:	75 f0                	jne    c00237dc <IDE::enableIRQs(unsigned char, bool)+0x32>
c00237ec:	5b                   	pop    ebx
c00237ed:	5e                   	pop    esi
c00237ee:	5f                   	pop    edi
c00237ef:	c3                   	ret    

c00237f0 <IDE::open(int, int, void*)>:
c00237f0:	55                   	push   ebp
c00237f1:	57                   	push   edi
c00237f2:	56                   	push   esi
c00237f3:	53                   	push   ebx
c00237f4:	83 ec 1c             	sub    esp,0x1c
c00237f7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00237fb:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023804:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002380d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023814:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002381b:	0f 85 b0 02 00 00    	jne    c0023ad1 <IDE::open(int, int, void*)+0x2e1>
c0023821:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023827:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c002382b:	83 e0 7f             	and    eax,0x7f
c002382e:	3c 05                	cmp    al,0x5
c0023830:	74 04                	je     c0023836 <IDE::open(int, int, void*)+0x46>
c0023832:	3c 0f                	cmp    al,0xf
c0023834:	75 32                	jne    c0023868 <IDE::open(int, int, void*)+0x78>
c0023836:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002383c:	83 e0 fc             	and    eax,0xfffffffc
c002383f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023846:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002384c:	83 e0 fc             	and    eax,0xfffffffc
c002384f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023856:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002385c:	83 e0 fc             	and    eax,0xfffffffc
c002385f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023866:	eb 14                	jmp    c002387c <IDE::open(int, int, void*)+0x8c>
c0023868:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023872:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002387c:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023883:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002388a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002388e:	89 c6                	mov    esi,eax
c0023890:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023895:	c1 e6 10             	shl    esi,0x10
c0023898:	89 e8                	mov    eax,ebp
c002389a:	89 fa                	mov    edx,edi
c002389c:	c1 e0 0b             	shl    eax,0xb
c002389f:	09 f0                	or     eax,esi
c00238a1:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00238a8:	c1 e6 08             	shl    esi,0x8
c00238ab:	09 c6                	or     esi,eax
c00238ad:	89 f0                	mov    eax,esi
c00238af:	0d 08 00 00 80       	or     eax,0x80000008
c00238b4:	ef                   	out    dx,eax
c00238b5:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00238ba:	89 ca                	mov    edx,ecx
c00238bc:	ed                   	in     eax,dx
c00238bd:	c1 e8 10             	shr    eax,0x10
c00238c0:	3d ff ff 00 00       	cmp    eax,0xffff
c00238c5:	0f 84 f5 00 00 00    	je     c00239c0 <IDE::open(int, int, void*)+0x1d0>
c00238cb:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00238d1:	89 fa                	mov    edx,edi
c00238d3:	89 f0                	mov    eax,esi
c00238d5:	ef                   	out    dx,eax
c00238d6:	b0 fe                	mov    al,0xfe
c00238d8:	89 ca                	mov    edx,ecx
c00238da:	ee                   	out    dx,al
c00238db:	89 f0                	mov    eax,esi
c00238dd:	89 fa                	mov    edx,edi
c00238df:	ef                   	out    dx,eax
c00238e0:	89 ca                	mov    edx,ecx
c00238e2:	ed                   	in     eax,dx
c00238e3:	3c fe                	cmp    al,0xfe
c00238e5:	0f 85 a9 00 00 00    	jne    c0023994 <IDE::open(int, int, void*)+0x1a4>
c00238eb:	8b 15 e8 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e6e8
c00238f1:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00238f8:	74 33                	je     c002392d <IDE::open(int, int, void*)+0x13d>
c00238fa:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023900:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023904:	40                   	inc    eax
c0023905:	83 ec 0c             	sub    esp,0xc
c0023908:	0f b6 c0             	movzx  eax,al
c002390b:	50                   	push   eax
c002390c:	55                   	push   ebp
c002390d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023911:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023917:	51                   	push   ecx
c0023918:	e8 e5 46 ff ff       	call   c0018002 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002391d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023922:	83 c4 1c             	add    esp,0x1c
c0023925:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002392b:	eb 0a                	jmp    c0023937 <IDE::open(int, int, void*)+0x147>
c002392d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023937:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002393e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023945:	c1 e1 10             	shl    ecx,0x10
c0023948:	c1 e0 08             	shl    eax,0x8
c002394b:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023950:	09 c1                	or     ecx,eax
c0023952:	89 fa                	mov    edx,edi
c0023954:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002395b:	c1 e0 0b             	shl    eax,0xb
c002395e:	09 c1                	or     ecx,eax
c0023960:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023966:	89 c8                	mov    eax,ecx
c0023968:	ef                   	out    dx,eax
c0023969:	be fc 0c 00 00       	mov    esi,0xcfc
c002396e:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023974:	89 f2                	mov    edx,esi
c0023976:	ee                   	out    dx,al
c0023977:	89 c8                	mov    eax,ecx
c0023979:	89 fa                	mov    edx,edi
c002397b:	ef                   	out    dx,eax
c002397c:	89 f2                	mov    edx,esi
c002397e:	ed                   	in     eax,dx
c002397f:	0f b6 c0             	movzx  eax,al
c0023982:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023988:	74 46                	je     c00239d0 <IDE::open(int, int, void*)+0x1e0>
c002398a:	83 ec 0c             	sub    esp,0xc
c002398d:	68 00 ce 02 c0       	push   0xc002ce00
c0023992:	eb 34                	jmp    c00239c8 <IDE::open(int, int, void*)+0x1d8>
c0023994:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002399d:	75 17                	jne    c00239b6 <IDE::open(int, int, void*)+0x1c6>
c002399f:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00239a4:	74 07                	je     c00239ad <IDE::open(int, int, void*)+0x1bd>
c00239a6:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00239ab:	75 09                	jne    c00239b6 <IDE::open(int, int, void*)+0x1c6>
c00239ad:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00239b4:	eb 1a                	jmp    c00239d0 <IDE::open(int, int, void*)+0x1e0>
c00239b6:	83 ec 0c             	sub    esp,0xc
c00239b9:	68 08 ce 02 c0       	push   0xc002ce08
c00239be:	eb 08                	jmp    c00239c8 <IDE::open(int, int, void*)+0x1d8>
c00239c0:	83 ec 0c             	sub    esp,0xc
c00239c3:	68 39 ce 02 c0       	push   0xc002ce39
c00239c8:	e8 0c 6a ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c00239cd:	83 c4 10             	add    esp,0x10
c00239d0:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00239d7:	79 1a                	jns    c00239f3 <IDE::open(int, int, void*)+0x203>
c00239d9:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00239df:	83 e0 fc             	and    eax,0xfffffffc
c00239e2:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00239e9:	83 c0 08             	add    eax,0x8
c00239ec:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00239f3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00239f9:	89 c2                	mov    edx,eax
c00239fb:	83 e2 0f             	and    edx,0xf
c00239fe:	66 83 fa 08          	cmp    dx,0x8
c0023a02:	75 0a                	jne    c0023a0e <IDE::open(int, int, void*)+0x21e>
c0023a04:	83 e8 02             	sub    eax,0x2
c0023a07:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023a0e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023a14:	89 c2                	mov    edx,eax
c0023a16:	83 e2 0f             	and    edx,0xf
c0023a19:	66 83 fa 08          	cmp    dx,0x8
c0023a1d:	75 0a                	jne    c0023a29 <IDE::open(int, int, void*)+0x239>
c0023a1f:	83 e8 02             	sub    eax,0x2
c0023a22:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023a29:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023a30:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023a37:	89 d0                	mov    eax,edx
c0023a39:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023a3c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023a40:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023a44:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023a47:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023a4c:	0f b6 c9             	movzx  ecx,cl
c0023a4f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023a56:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023a59:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023a5d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023a61:	8d 50 02             	lea    edx,[eax+0x2]
c0023a64:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023a69:	0f b6 d2             	movzx  edx,dl
c0023a6c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023a72:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023a75:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023a79:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023a7d:	8d 48 03             	lea    ecx,[eax+0x3]
c0023a80:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023a85:	0f b6 c9             	movzx  ecx,cl
c0023a88:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023a8e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023a91:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023a95:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023a99:	8d 50 04             	lea    edx,[eax+0x4]
c0023a9c:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023aa2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023aa7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023aae:	66 85 f6             	test   si,si
c0023ab1:	74 5b                	je     c0023b0e <IDE::open(int, int, void*)+0x31e>
c0023ab3:	0f b6 d2             	movzx  edx,dl
c0023ab6:	83 c0 05             	add    eax,0x5
c0023ab9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023abc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023ac0:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023ac4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023aca:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023acf:	eb 3d                	jmp    c0023b0e <IDE::open(int, int, void*)+0x31e>
c0023ad1:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0023ad7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023ade:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023ae5:	66 05 06 02          	add    ax,0x206
c0023ae9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023af0:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0023af7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023afe:	66 05 06 02          	add    ax,0x206
c0023b02:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023b09:	e9 e5 fe ff ff       	jmp    c00239f3 <IDE::open(int, int, void*)+0x203>
c0023b0e:	50                   	push   eax
c0023b0f:	50                   	push   eax
c0023b10:	6a 00                	push   0x0
c0023b12:	53                   	push   ebx
c0023b13:	e8 60 fa ff ff       	call   c0023578 <IDE::prepareInterrupt(unsigned char)>
c0023b18:	5a                   	pop    edx
c0023b19:	59                   	pop    ecx
c0023b1a:	6a 01                	push   0x1
c0023b1c:	53                   	push   ebx
c0023b1d:	e8 56 fa ff ff       	call   c0023578 <IDE::prepareInterrupt(unsigned char)>
c0023b22:	83 c4 0c             	add    esp,0xc
c0023b25:	6a 00                	push   0x0
c0023b27:	6a 00                	push   0x0
c0023b29:	53                   	push   ebx
c0023b2a:	e8 7b fc ff ff       	call   c00237aa <IDE::enableIRQs(unsigned char, bool)>
c0023b2f:	83 c4 0c             	add    esp,0xc
c0023b32:	6a 00                	push   0x0
c0023b34:	6a 01                	push   0x1
c0023b36:	53                   	push   ebx
c0023b37:	e8 6e fc ff ff       	call   c00237aa <IDE::enableIRQs(unsigned char, bool)>
c0023b3c:	83 c4 10             	add    esp,0x10
c0023b3f:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023b46:	74 34                	je     c0023b7c <IDE::open(int, int, void*)+0x38c>
c0023b48:	83 ec 0c             	sub    esp,0xc
c0023b4b:	53                   	push   ebx
c0023b4c:	6a 01                	push   0x1
c0023b4e:	68 72 37 02 c0       	push   0xc0023772
c0023b53:	6a 0e                	push   0xe
c0023b55:	53                   	push   ebx
c0023b56:	e8 91 02 ff ff       	call   c0013dec <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023b5b:	83 c4 14             	add    esp,0x14
c0023b5e:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023b64:	53                   	push   ebx
c0023b65:	6a 01                	push   0x1
c0023b67:	68 8e 37 02 c0       	push   0xc002378e
c0023b6c:	6a 0f                	push   0xf
c0023b6e:	53                   	push   ebx
c0023b6f:	e8 78 02 ff ff       	call   c0013dec <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023b74:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023b7a:	eb 38                	jmp    c0023bb4 <IDE::open(int, int, void*)+0x3c4>
c0023b7c:	83 ec 0c             	sub    esp,0xc
c0023b7f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023b89:	53                   	push   ebx
c0023b8a:	6a 00                	push   0x0
c0023b8c:	68 72 37 02 c0       	push   0xc0023772
c0023b91:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023b97:	53                   	push   ebx
c0023b98:	e8 4f 02 ff ff       	call   c0013dec <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023b9d:	83 c4 14             	add    esp,0x14
c0023ba0:	53                   	push   ebx
c0023ba1:	6a 00                	push   0x0
c0023ba3:	68 8e 37 02 c0       	push   0xc002378e
c0023ba8:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023bae:	53                   	push   ebx
c0023baf:	e8 38 02 ff ff       	call   c0013dec <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023bb4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023bb6:	83 c4 20             	add    esp,0x20
c0023bb9:	83 ec 0c             	sub    esp,0xc
c0023bbc:	53                   	push   ebx
c0023bbd:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023bc0:	83 c4 0c             	add    esp,0xc
c0023bc3:	6a 07                	push   0x7
c0023bc5:	6a 00                	push   0x0
c0023bc7:	53                   	push   ebx
c0023bc8:	e8 91 fa ff ff       	call   c002365e <IDE::read(unsigned char, unsigned char)>
c0023bcd:	83 c4 0c             	add    esp,0xc
c0023bd0:	6a 07                	push   0x7
c0023bd2:	6a 01                	push   0x1
c0023bd4:	53                   	push   ebx
c0023bd5:	e8 84 fa ff ff       	call   c002365e <IDE::read(unsigned char, unsigned char)>
c0023bda:	83 c4 0c             	add    esp,0xc
c0023bdd:	6a 01                	push   0x1
c0023bdf:	6a 00                	push   0x0
c0023be1:	53                   	push   ebx
c0023be2:	e8 c3 fb ff ff       	call   c00237aa <IDE::enableIRQs(unsigned char, bool)>
c0023be7:	83 c4 0c             	add    esp,0xc
c0023bea:	6a 01                	push   0x1
c0023bec:	6a 01                	push   0x1
c0023bee:	53                   	push   ebx
c0023bef:	e8 b6 fb ff ff       	call   c00237aa <IDE::enableIRQs(unsigned char, bool)>
c0023bf4:	83 c4 2c             	add    esp,0x2c
c0023bf7:	31 c0                	xor    eax,eax
c0023bf9:	5b                   	pop    ebx
c0023bfa:	5e                   	pop    esi
c0023bfb:	5f                   	pop    edi
c0023bfc:	5d                   	pop    ebp
c0023bfd:	c3                   	ret    

c0023bfe <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023bfe:	55                   	push   ebp
c0023bff:	57                   	push   edi
c0023c00:	56                   	push   esi
c0023c01:	53                   	push   ebx
c0023c02:	83 ec 1c             	sub    esp,0x1c
c0023c05:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023c09:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023c0d:	8d 50 f8             	lea    edx,[eax-0x8]
c0023c10:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023c14:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023c18:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023c1c:	80 fa 03             	cmp    dl,0x3
c0023c1f:	77 5d                	ja     c0023c7e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023c21:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023c29:	0f b6 db             	movzx  ebx,bl
c0023c2c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023c2f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023c33:	83 ca 80             	or     edx,0xffffff80
c0023c36:	0f b6 d2             	movzx  edx,dl
c0023c39:	52                   	push   edx
c0023c3a:	6a 0c                	push   0xc
c0023c3c:	53                   	push   ebx
c0023c3d:	56                   	push   esi
c0023c3e:	e8 5b f9 ff ff       	call   c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023c43:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023c48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023c4c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023c50:	0f b6 c0             	movzx  eax,al
c0023c53:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023c57:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023c59:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023c5e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023c62:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023c66:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023c6a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023c72:	83 c4 2c             	add    esp,0x2c
c0023c75:	5b                   	pop    ebx
c0023c76:	5e                   	pop    esi
c0023c77:	5f                   	pop    edi
c0023c78:	5d                   	pop    ebp
c0023c79:	e9 20 f9 ff ff       	jmp    c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023c7e:	3c 07                	cmp    al,0x7
c0023c80:	77 10                	ja     c0023c92 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023c82:	0f b6 db             	movzx  ebx,bl
c0023c85:	0f b6 d0             	movzx  edx,al
c0023c88:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023c90:	eb 2d                	jmp    c0023cbf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023c92:	3c 0d                	cmp    al,0xd
c0023c94:	77 13                	ja     c0023ca9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023c96:	0f b6 db             	movzx  ebx,bl
c0023c99:	0f b6 c0             	movzx  eax,al
c0023c9c:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023ca3:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023ca7:	eb 16                	jmp    c0023cbf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023ca9:	3c 15                	cmp    al,0x15
c0023cab:	77 14                	ja     c0023cc1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023cad:	0f b6 db             	movzx  ebx,bl
c0023cb0:	0f b6 c0             	movzx  eax,al
c0023cb3:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023cbb:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023cbf:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023cc1:	83 c4 1c             	add    esp,0x1c
c0023cc4:	5b                   	pop    ebx
c0023cc5:	5e                   	pop    esi
c0023cc6:	5f                   	pop    edi
c0023cc7:	5d                   	pop    ebp
c0023cc8:	c3                   	ret    
c0023cc9:	90                   	nop

c0023cca <IDE::detect()>:
c0023cca:	55                   	push   ebp
c0023ccb:	57                   	push   edi
c0023ccc:	56                   	push   esi
c0023ccd:	53                   	push   ebx
c0023cce:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023cd4:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023cdb:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023ce2:	0f 85 9d 02 00 00    	jne    c0023f85 <IDE::detect()+0x2bb>
c0023ce8:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023cef:	31 f6                	xor    esi,esi
c0023cf1:	31 ed                	xor    ebp,ebp
c0023cf3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023cfb:	89 e8                	mov    eax,ebp
c0023cfd:	c1 e0 06             	shl    eax,0x6
c0023d00:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023d08:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023d0c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023d10:	c1 e0 04             	shl    eax,0x4
c0023d13:	83 c8 a0             	or     eax,0xffffffa0
c0023d16:	0f b6 c0             	movzx  eax,al
c0023d19:	50                   	push   eax
c0023d1a:	6a 06                	push   0x6
c0023d1c:	56                   	push   esi
c0023d1d:	53                   	push   ebx
c0023d1e:	e8 7b f8 ff ff       	call   c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d23:	83 c4 0c             	add    esp,0xc
c0023d26:	6a 0c                	push   0xc
c0023d28:	56                   	push   esi
c0023d29:	53                   	push   ebx
c0023d2a:	e8 2f f9 ff ff       	call   c002365e <IDE::read(unsigned char, unsigned char)>
c0023d2f:	83 c4 0c             	add    esp,0xc
c0023d32:	6a 0c                	push   0xc
c0023d34:	56                   	push   esi
c0023d35:	53                   	push   ebx
c0023d36:	e8 23 f9 ff ff       	call   c002365e <IDE::read(unsigned char, unsigned char)>
c0023d3b:	83 c4 0c             	add    esp,0xc
c0023d3e:	6a 0c                	push   0xc
c0023d40:	56                   	push   esi
c0023d41:	53                   	push   ebx
c0023d42:	e8 17 f9 ff ff       	call   c002365e <IDE::read(unsigned char, unsigned char)>
c0023d47:	83 c4 0c             	add    esp,0xc
c0023d4a:	6a 0c                	push   0xc
c0023d4c:	56                   	push   esi
c0023d4d:	53                   	push   ebx
c0023d4e:	e8 0b f9 ff ff       	call   c002365e <IDE::read(unsigned char, unsigned char)>
c0023d53:	68 ec 00 00 00       	push   0xec
c0023d58:	6a 07                	push   0x7
c0023d5a:	56                   	push   esi
c0023d5b:	53                   	push   ebx
c0023d5c:	e8 3d f8 ff ff       	call   c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d61:	83 c4 1c             	add    esp,0x1c
c0023d64:	6a 0c                	push   0xc
c0023d66:	56                   	push   esi
c0023d67:	53                   	push   ebx
c0023d68:	e8 f1 f8 ff ff       	call   c002365e <IDE::read(unsigned char, unsigned char)>
c0023d6d:	83 c4 0c             	add    esp,0xc
c0023d70:	6a 0c                	push   0xc
c0023d72:	56                   	push   esi
c0023d73:	53                   	push   ebx
c0023d74:	e8 e5 f8 ff ff       	call   c002365e <IDE::read(unsigned char, unsigned char)>
c0023d79:	83 c4 0c             	add    esp,0xc
c0023d7c:	6a 0c                	push   0xc
c0023d7e:	56                   	push   esi
c0023d7f:	53                   	push   ebx
c0023d80:	e8 d9 f8 ff ff       	call   c002365e <IDE::read(unsigned char, unsigned char)>
c0023d85:	83 c4 0c             	add    esp,0xc
c0023d88:	6a 0c                	push   0xc
c0023d8a:	56                   	push   esi
c0023d8b:	53                   	push   ebx
c0023d8c:	e8 cd f8 ff ff       	call   c002365e <IDE::read(unsigned char, unsigned char)>
c0023d91:	83 c4 0c             	add    esp,0xc
c0023d94:	6a 0c                	push   0xc
c0023d96:	56                   	push   esi
c0023d97:	53                   	push   ebx
c0023d98:	e8 c1 f8 ff ff       	call   c002365e <IDE::read(unsigned char, unsigned char)>
c0023d9d:	83 c4 10             	add    esp,0x10
c0023da0:	84 c0                	test   al,al
c0023da2:	0f 84 63 01 00 00    	je     c0023f0b <IDE::detect()+0x241>
c0023da8:	31 ff                	xor    edi,edi
c0023daa:	50                   	push   eax
c0023dab:	6a 0c                	push   0xc
c0023dad:	56                   	push   esi
c0023dae:	53                   	push   ebx
c0023daf:	e8 aa f8 ff ff       	call   c002365e <IDE::read(unsigned char, unsigned char)>
c0023db4:	83 c4 10             	add    esp,0x10
c0023db7:	a8 01                	test   al,0x1
c0023db9:	0f 85 6d 01 00 00    	jne    c0023f2c <IDE::detect()+0x262>
c0023dbf:	84 c0                	test   al,al
c0023dc1:	78 04                	js     c0023dc7 <IDE::detect()+0xfd>
c0023dc3:	a8 08                	test   al,0x8
c0023dc5:	75 27                	jne    c0023dee <IDE::detect()+0x124>
c0023dc7:	47                   	inc    edi
c0023dc8:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023dce:	7e da                	jle    c0023daa <IDE::detect()+0xe0>
c0023dd0:	50                   	push   eax
c0023dd1:	50                   	push   eax
c0023dd2:	6a 00                	push   0x0
c0023dd4:	68 40 4b 4c 00       	push   0x4c4b40
c0023dd9:	e8 67 a4 ff ff       	call   c001e245 <nanoSleep(unsigned long long)>
c0023dde:	83 c4 10             	add    esp,0x10
c0023de1:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023de7:	75 c1                	jne    c0023daa <IDE::detect()+0xe0>
c0023de9:	e9 3e 01 00 00       	jmp    c0023f2c <IDE::detect()+0x262>
c0023dee:	31 c9                	xor    ecx,ecx
c0023df0:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023df4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023df8:	83 ec 0c             	sub    esp,0xc
c0023dfb:	68 80 00 00 00       	push   0x80
c0023e00:	57                   	push   edi
c0023e01:	6a 00                	push   0x0
c0023e03:	56                   	push   esi
c0023e04:	53                   	push   ebx
c0023e05:	e8 f4 fd ff ff       	call   c0023bfe <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023e0a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023e0f:	89 e8                	mov    eax,ebp
c0023e11:	89 d1                	mov    ecx,edx
c0023e13:	c1 e0 06             	shl    eax,0x6
c0023e16:	01 d8                	add    eax,ebx
c0023e18:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023e1f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023e26:	89 f2                	mov    edx,esi
c0023e28:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023e2e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023e32:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023e38:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023e3c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023e43:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023e4b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023e52:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023e5a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023e60:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023e67:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023e6d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023e71:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023e75:	83 c4 20             	add    esp,0x20
c0023e78:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023e7b:	83 c0 02             	add    eax,0x2
c0023e7e:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023e84:	83 c7 02             	add    edi,0x2
c0023e87:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023e8a:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023e90:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023e94:	75 e2                	jne    c0023e78 <IDE::detect()+0x1ae>
c0023e96:	89 e8                	mov    eax,ebp
c0023e98:	c1 e0 06             	shl    eax,0x6
c0023e9b:	01 d8                	add    eax,ebx
c0023e9d:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023ea3:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023eaa:	66 c1 ea 09          	shr    dx,0x9
c0023eae:	83 e2 01             	and    edx,0x1
c0023eb1:	84 c9                	test   cl,cl
c0023eb3:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023eb9:	75 22                	jne    c0023edd <IDE::detect()+0x213>
c0023ebb:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0023ec2:	74 46                	je     c0023f0a <IDE::detect()+0x240>
c0023ec4:	83 ec 0c             	sub    esp,0xc
c0023ec7:	68 7c 01 00 00       	push   0x17c
c0023ecc:	e8 12 bb fe ff       	call   c000f9e3 <malloc>
c0023ed1:	89 c7                	mov    edi,eax
c0023ed3:	89 04 24             	mov    DWORD PTR [esp],eax
c0023ed6:	e8 15 05 00 00       	call   c00243f0 <ATA::ATA()>
c0023edb:	eb 17                	jmp    c0023ef4 <IDE::detect()+0x22a>
c0023edd:	83 ec 0c             	sub    esp,0xc
c0023ee0:	68 80 01 00 00       	push   0x180
c0023ee5:	e8 f9 ba fe ff       	call   c000f9e3 <malloc>
c0023eea:	89 c7                	mov    edi,eax
c0023eec:	89 04 24             	mov    DWORD PTR [esp],eax
c0023eef:	e8 88 0b 00 00       	call   c0024a7c <ATAPI::ATAPI()>
c0023ef4:	5a                   	pop    edx
c0023ef5:	59                   	pop    ecx
c0023ef6:	57                   	push   edi
c0023ef7:	53                   	push   ebx
c0023ef8:	e8 77 ff fe ff       	call   c0013e74 <Device::addChild(Device*)>
c0023efd:	8b 07                	mov    eax,DWORD PTR [edi]
c0023eff:	53                   	push   ebx
c0023f00:	55                   	push   ebp
c0023f01:	6a 00                	push   0x0
c0023f03:	57                   	push   edi
c0023f04:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023f07:	83 c4 20             	add    esp,0x20
c0023f0a:	45                   	inc    ebp
c0023f0b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0023f10:	74 0d                	je     c0023f1f <IDE::detect()+0x255>
c0023f12:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0023f1a:	e9 dc fd ff ff       	jmp    c0023cfb <IDE::detect()+0x31>
c0023f1f:	4e                   	dec    esi
c0023f20:	74 63                	je     c0023f85 <IDE::detect()+0x2bb>
c0023f22:	be 01 00 00 00       	mov    esi,0x1
c0023f27:	e9 c7 fd ff ff       	jmp    c0023cf3 <IDE::detect()+0x29>
c0023f2c:	50                   	push   eax
c0023f2d:	6a 04                	push   0x4
c0023f2f:	56                   	push   esi
c0023f30:	53                   	push   ebx
c0023f31:	e8 28 f7 ff ff       	call   c002365e <IDE::read(unsigned char, unsigned char)>
c0023f36:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023f3a:	83 c4 0c             	add    esp,0xc
c0023f3d:	6a 05                	push   0x5
c0023f3f:	56                   	push   esi
c0023f40:	53                   	push   ebx
c0023f41:	e8 18 f7 ff ff       	call   c002365e <IDE::read(unsigned char, unsigned char)>
c0023f46:	83 c4 10             	add    esp,0x10
c0023f49:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023f4d:	80 fa 14             	cmp    dl,0x14
c0023f50:	75 04                	jne    c0023f56 <IDE::detect()+0x28c>
c0023f52:	3c eb                	cmp    al,0xeb
c0023f54:	eb 07                	jmp    c0023f5d <IDE::detect()+0x293>
c0023f56:	3c 96                	cmp    al,0x96
c0023f58:	75 b1                	jne    c0023f0b <IDE::detect()+0x241>
c0023f5a:	80 fa 69             	cmp    dl,0x69
c0023f5d:	75 ac                	jne    c0023f0b <IDE::detect()+0x241>
c0023f5f:	68 a1 00 00 00       	push   0xa1
c0023f64:	6a 07                	push   0x7
c0023f66:	56                   	push   esi
c0023f67:	53                   	push   ebx
c0023f68:	e8 31 f6 ff ff       	call   c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f6d:	5f                   	pop    edi
c0023f6e:	58                   	pop    eax
c0023f6f:	6a 00                	push   0x0
c0023f71:	68 40 42 0f 00       	push   0xf4240
c0023f76:	e8 ca a2 ff ff       	call   c001e245 <nanoSleep(unsigned long long)>
c0023f7b:	83 c4 10             	add    esp,0x10
c0023f7e:	b1 01                	mov    cl,0x1
c0023f80:	e9 6b fe ff ff       	jmp    c0023df0 <IDE::detect()+0x126>
c0023f85:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023f8b:	5b                   	pop    ebx
c0023f8c:	5e                   	pop    esi
c0023f8d:	5f                   	pop    edi
c0023f8e:	5d                   	pop    ebp
c0023f8f:	c3                   	ret    

c0023f90 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023f90:	55                   	push   ebp
c0023f91:	57                   	push   edi
c0023f92:	56                   	push   esi
c0023f93:	53                   	push   ebx
c0023f94:	83 ec 1c             	sub    esp,0x1c
c0023f97:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023f9b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023f9f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023fa3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023fa7:	88 c3                	mov    bl,al
c0023fa9:	84 c0                	test   al,al
c0023fab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023faf:	0f 84 81 00 00 00    	je     c0024036 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023fb5:	83 ec 0c             	sub    esp,0xc
c0023fb8:	68 63 ce 02 c0       	push   0xc002ce63
c0023fbd:	e8 79 ea fe ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0023fc2:	83 c4 10             	add    esp,0x10
c0023fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023fc9:	3c 01                	cmp    al,0x1
c0023fcb:	74 63                	je     c0024030 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0023fcd:	3c 02                	cmp    al,0x2
c0023fcf:	75 53                	jne    c0024024 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0023fd1:	d1 e6                	shl    esi,1
c0023fd3:	09 ee                	or     esi,ebp
c0023fd5:	50                   	push   eax
c0023fd6:	89 f0                	mov    eax,esi
c0023fd8:	6a 01                	push   0x1
c0023fda:	0f b6 f0             	movzx  esi,al
c0023fdd:	c1 e6 06             	shl    esi,0x6
c0023fe0:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023fe8:	50                   	push   eax
c0023fe9:	57                   	push   edi
c0023fea:	e8 6f f6 ff ff       	call   c002365e <IDE::read(unsigned char, unsigned char)>
c0023fef:	83 c4 10             	add    esp,0x10
c0023ff2:	a8 01                	test   al,0x1
c0023ff4:	74 02                	je     c0023ff8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0023ff6:	b3 07                	mov    bl,0x7
c0023ff8:	a8 02                	test   al,0x2
c0023ffa:	74 02                	je     c0023ffe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0023ffc:	b3 03                	mov    bl,0x3
c0023ffe:	a8 04                	test   al,0x4
c0024000:	74 02                	je     c0024004 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0024002:	b3 14                	mov    bl,0x14
c0024004:	a8 08                	test   al,0x8
c0024006:	74 02                	je     c002400a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0024008:	b3 03                	mov    bl,0x3
c002400a:	a8 10                	test   al,0x10
c002400c:	74 02                	je     c0024010 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c002400e:	b3 15                	mov    bl,0x15
c0024010:	a8 20                	test   al,0x20
c0024012:	74 02                	je     c0024016 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0024014:	b3 03                	mov    bl,0x3
c0024016:	a8 40                	test   al,0x40
c0024018:	74 02                	je     c002401c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c002401a:	b3 16                	mov    bl,0x16
c002401c:	84 c0                	test   al,al
c002401e:	79 16                	jns    c0024036 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0024020:	b3 0d                	mov    bl,0xd
c0024022:	eb 12                	jmp    c0024036 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0024024:	3c 03                	cmp    al,0x3
c0024026:	74 0c                	je     c0024034 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0024028:	3c 04                	cmp    al,0x4
c002402a:	75 0a                	jne    c0024036 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c002402c:	b3 08                	mov    bl,0x8
c002402e:	eb 06                	jmp    c0024036 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0024030:	b3 13                	mov    bl,0x13
c0024032:	eb 02                	jmp    c0024036 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0024034:	b3 17                	mov    bl,0x17
c0024036:	83 c4 1c             	add    esp,0x1c
c0024039:	88 d8                	mov    al,bl
c002403b:	5b                   	pop    ebx
c002403c:	5e                   	pop    esi
c002403d:	5f                   	pop    edi
c002403e:	5d                   	pop    ebp
c002403f:	c3                   	ret    

c0024040 <IDE::polling(unsigned char, unsigned int)>:
c0024040:	57                   	push   edi
c0024041:	56                   	push   esi
c0024042:	53                   	push   ebx
c0024043:	bb 04 00 00 00       	mov    ebx,0x4
c0024048:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002404c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0024051:	52                   	push   edx
c0024052:	6a 0c                	push   0xc
c0024054:	56                   	push   esi
c0024055:	57                   	push   edi
c0024056:	e8 03 f6 ff ff       	call   c002365e <IDE::read(unsigned char, unsigned char)>
c002405b:	83 c4 10             	add    esp,0x10
c002405e:	4b                   	dec    ebx
c002405f:	75 f0                	jne    c0024051 <IDE::polling(unsigned char, unsigned int)+0x11>
c0024061:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024066:	50                   	push   eax
c0024067:	6a 0c                	push   0xc
c0024069:	56                   	push   esi
c002406a:	57                   	push   edi
c002406b:	e8 ee f5 ff ff       	call   c002365e <IDE::read(unsigned char, unsigned char)>
c0024070:	83 c4 10             	add    esp,0x10
c0024073:	a8 01                	test   al,0x1
c0024075:	75 17                	jne    c002408e <IDE::polling(unsigned char, unsigned int)+0x4e>
c0024077:	a8 20                	test   al,0x20
c0024079:	75 0f                	jne    c002408a <IDE::polling(unsigned char, unsigned int)+0x4a>
c002407b:	4b                   	dec    ebx
c002407c:	74 10                	je     c002408e <IDE::polling(unsigned char, unsigned int)+0x4e>
c002407e:	84 c0                	test   al,al
c0024080:	78 e4                	js     c0024066 <IDE::polling(unsigned char, unsigned int)+0x26>
c0024082:	a8 08                	test   al,0x8
c0024084:	74 e0                	je     c0024066 <IDE::polling(unsigned char, unsigned int)+0x26>
c0024086:	31 c0                	xor    eax,eax
c0024088:	eb 06                	jmp    c0024090 <IDE::polling(unsigned char, unsigned int)+0x50>
c002408a:	b0 01                	mov    al,0x1
c002408c:	eb 02                	jmp    c0024090 <IDE::polling(unsigned char, unsigned int)+0x50>
c002408e:	b0 02                	mov    al,0x2
c0024090:	5b                   	pop    ebx
c0024091:	5e                   	pop    esi
c0024092:	5f                   	pop    edi
c0024093:	c3                   	ret    

c0024094 <SATABus::close(int, int, void*)>:
c0024094:	31 c0                	xor    eax,eax
c0024096:	c3                   	ret    
c0024097:	90                   	nop

c0024098 <SATABus::detect()>:
c0024098:	c3                   	ret    
c0024099:	90                   	nop

c002409a <SATABus::SATABus()>:
c002409a:	83 ec 0c             	sub    esp,0xc
c002409d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240a1:	83 ec 08             	sub    esp,0x8
c00240a4:	68 9c ce 02 c0       	push   0xc002ce9c
c00240a9:	50                   	push   eax
c00240aa:	e8 73 01 ff ff       	call   c0014222 <HardDiskController::HardDiskController(char const*)>
c00240af:	83 c4 10             	add    esp,0x10
c00240b2:	ba f0 ce 02 c0       	mov    edx,0xc002cef0
c00240b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240bb:	89 10                	mov    DWORD PTR [eax],edx
c00240bd:	83 ec 0c             	sub    esp,0xc
c00240c0:	6a 50                	push   0x50
c00240c2:	e8 10 be fe ff       	call   c000fed7 <Phys::allocateContiguousPages(int)>
c00240c7:	83 c4 10             	add    esp,0x10
c00240ca:	89 c2                	mov    edx,eax
c00240cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240d0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00240d6:	83 ec 0c             	sub    esp,0xc
c00240d9:	6a 50                	push   0x50
c00240db:	e8 89 d5 fe ff       	call   c0011669 <Virt::allocateKernelVirtualPages(int)>
c00240e0:	83 c4 10             	add    esp,0x10
c00240e3:	89 c2                	mov    edx,eax
c00240e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240e9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00240ef:	a1 50 e8 02 c0       	mov    eax,ds:0xc002e850
c00240f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00240f8:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c00240fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024102:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0024108:	83 ec 0c             	sub    esp,0xc
c002410b:	6a 03                	push   0x3
c002410d:	6a 50                	push   0x50
c002410f:	51                   	push   ecx
c0024110:	52                   	push   edx
c0024111:	50                   	push   eax
c0024112:	e8 ef de fe ff       	call   c0012006 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0024117:	83 c4 20             	add    esp,0x20
c002411a:	90                   	nop
c002411b:	83 c4 0c             	add    esp,0xc
c002411e:	c3                   	ret    
c002411f:	90                   	nop

c0024120 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0024120:	83 ec 0c             	sub    esp,0xc
c0024123:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024127:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002412a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002412d:	09 c2                	or     edx,eax
c002412f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024133:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024139:	8b 08                	mov    ecx,DWORD PTR [eax]
c002413b:	31 c0                	xor    eax,eax
c002413d:	c1 e9 08             	shr    ecx,0x8
c0024140:	83 e1 0f             	and    ecx,0xf
c0024143:	39 c8                	cmp    eax,ecx
c0024145:	74 0a                	je     c0024151 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0024147:	f6 c2 01             	test   dl,0x1
c002414a:	74 18                	je     c0024164 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c002414c:	d1 ea                	shr    edx,1
c002414e:	40                   	inc    eax
c002414f:	eb f2                	jmp    c0024143 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0024151:	83 ec 0c             	sub    esp,0xc
c0024154:	68 c0 ce 02 c0       	push   0xc002cec0
c0024159:	e8 7b 62 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c002415e:	83 c4 10             	add    esp,0x10
c0024161:	83 c8 ff             	or     eax,0xffffffff
c0024164:	83 c4 0c             	add    esp,0xc
c0024167:	c3                   	ret    

c0024168 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0024168:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002416c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002416f:	89 c2                	mov    edx,eax
c0024171:	c1 ea 08             	shr    edx,0x8
c0024174:	83 e2 0f             	and    edx,0xf
c0024177:	fe ca                	dec    dl
c0024179:	75 31                	jne    c00241ac <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002417b:	83 e0 0f             	and    eax,0xf
c002417e:	3c 03                	cmp    al,0x3
c0024180:	75 2a                	jne    c00241ac <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0024182:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0024185:	b8 02 00 00 00       	mov    eax,0x2
c002418a:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0024190:	74 1c                	je     c00241ae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0024192:	b8 04 00 00 00       	mov    eax,0x4
c0024197:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002419d:	74 0f                	je     c00241ae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002419f:	31 c0                	xor    eax,eax
c00241a1:	83 fa 03             	cmp    edx,0x3
c00241a4:	0f 94 c0             	sete   al
c00241a7:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c00241ab:	c3                   	ret    
c00241ac:	31 c0                	xor    eax,eax
c00241ae:	c3                   	ret    
c00241af:	90                   	nop

c00241b0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c00241b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00241b4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00241b7:	0f ba e2 0f          	bt     edx,0xf
c00241bb:	72 f7                	jb     c00241b4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c00241bd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00241c0:	83 ca 10             	or     edx,0x10
c00241c3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00241c6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00241c9:	83 ca 01             	or     edx,0x1
c00241cc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00241cf:	c3                   	ret    

c00241d0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c00241d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00241d4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00241d7:	83 e2 fe             	and    edx,0xfffffffe
c00241da:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00241dd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00241e0:	83 e2 ef             	and    edx,0xffffffef
c00241e3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00241e6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00241e9:	0f ba e2 0e          	bt     edx,0xe
c00241ed:	72 f7                	jb     c00241e6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00241ef:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00241f2:	0f ba e2 0f          	bt     edx,0xf
c00241f6:	72 ee                	jb     c00241e6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00241f8:	c3                   	ret    
c00241f9:	90                   	nop

c00241fa <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c00241fa:	55                   	push   ebp
c00241fb:	57                   	push   edi
c00241fc:	56                   	push   esi
c00241fd:	53                   	push   ebx
c00241fe:	83 ec 1c             	sub    esp,0x1c
c0024201:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024205:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024209:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002420d:	53                   	push   ebx
c002420e:	89 fd                	mov    ebp,edi
c0024210:	56                   	push   esi
c0024211:	c1 e5 0a             	shl    ebp,0xa
c0024214:	e8 b7 ff ff ff       	call   c00241d0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0024219:	83 ec 0c             	sub    esp,0xc
c002421c:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0024222:	01 e8                	add    eax,ebp
c0024224:	89 03                	mov    DWORD PTR [ebx],eax
c0024226:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024228:	68 00 04 00 00       	push   0x400
c002422d:	6a 00                	push   0x0
c002422f:	50                   	push   eax
c0024230:	e8 1b c5 fd ff       	call   c0000750 <memset>
c0024235:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c002423b:	89 fa                	mov    edx,edi
c002423d:	01 e8                	add    eax,ebp
c002423f:	c1 e7 0d             	shl    edi,0xd
c0024242:	89 03                	mov    DWORD PTR [ebx],eax
c0024244:	c1 e2 08             	shl    edx,0x8
c0024247:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002424e:	81 c2 00 80 00 00    	add    edx,0x8000
c0024254:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0024258:	89 d0                	mov    eax,edx
c002425a:	83 c4 1c             	add    esp,0x1c
c002425d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024263:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0024266:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0024269:	68 00 01 00 00       	push   0x100
c002426e:	6a 00                	push   0x0
c0024270:	50                   	push   eax
c0024271:	e8 da c4 fd ff       	call   c0000750 <memset>
c0024276:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002427a:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0024280:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0024286:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002428a:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c002428d:	83 c4 10             	add    esp,0x10
c0024290:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0024297:	31 ff                	xor    edi,edi
c0024299:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c002429f:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00242a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00242a9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00242af:	83 c5 20             	add    ebp,0x20
c00242b2:	01 f8                	add    eax,edi
c00242b4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00242b7:	52                   	push   edx
c00242b8:	68 00 01 00 00       	push   0x100
c00242bd:	6a 00                	push   0x0
c00242bf:	50                   	push   eax
c00242c0:	e8 8b c4 fd ff       	call   c0000750 <memset>
c00242c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00242c9:	83 c4 10             	add    esp,0x10
c00242cc:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c00242d2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00242d9:	01 f8                	add    eax,edi
c00242db:	81 c7 00 01 00 00    	add    edi,0x100
c00242e1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00242e4:	81 ff 00 20 00 00    	cmp    edi,0x2000
c00242ea:	75 b3                	jne    c002429f <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c00242ec:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00242f0:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00242f4:	83 c4 1c             	add    esp,0x1c
c00242f7:	5b                   	pop    ebx
c00242f8:	5e                   	pop    esi
c00242f9:	5f                   	pop    edi
c00242fa:	5d                   	pop    ebp
c00242fb:	e9 b0 fe ff ff       	jmp    c00241b0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0024300 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0024300:	55                   	push   ebp
c0024301:	57                   	push   edi
c0024302:	56                   	push   esi
c0024303:	53                   	push   ebx
c0024304:	31 db                	xor    ebx,ebx
c0024306:	83 ec 0c             	sub    esp,0xc
c0024309:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002430d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024311:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0024314:	f7 c7 01 00 00 00    	test   edi,0x1
c002431a:	74 7a                	je     c0024396 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002431c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0024320:	89 d8                	mov    eax,ebx
c0024322:	c1 e0 07             	shl    eax,0x7
c0024325:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c002432c:	55                   	push   ebp
c002432d:	56                   	push   esi
c002432e:	e8 35 fe ff ff       	call   c0024168 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0024333:	5a                   	pop    edx
c0024334:	83 f8 01             	cmp    eax,0x1
c0024337:	59                   	pop    ecx
c0024338:	75 21                	jne    c002435b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c002433a:	50                   	push   eax
c002433b:	53                   	push   ebx
c002433c:	55                   	push   ebp
c002433d:	56                   	push   esi
c002433e:	e8 b7 fe ff ff       	call   c00241fa <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024343:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002434a:	e8 94 b6 fe ff       	call   c000f9e3 <malloc>
c002434f:	89 c5                	mov    ebp,eax
c0024351:	89 04 24             	mov    DWORD PTR [esp],eax
c0024354:	e8 87 0d 00 00       	call   c00250e0 <SATA::SATA()>
c0024359:	eb 24                	jmp    c002437f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c002435b:	83 f8 04             	cmp    eax,0x4
c002435e:	75 36                	jne    c0024396 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0024360:	51                   	push   ecx
c0024361:	53                   	push   ebx
c0024362:	55                   	push   ebp
c0024363:	56                   	push   esi
c0024364:	e8 91 fe ff ff       	call   c00241fa <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024369:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0024370:	e8 6e b6 fe ff       	call   c000f9e3 <malloc>
c0024375:	89 c5                	mov    ebp,eax
c0024377:	89 04 24             	mov    DWORD PTR [esp],eax
c002437a:	e8 d7 10 00 00       	call   c0025456 <SATAPI::SATAPI()>
c002437f:	58                   	pop    eax
c0024380:	5a                   	pop    edx
c0024381:	55                   	push   ebp
c0024382:	56                   	push   esi
c0024383:	e8 ec fa fe ff       	call   c0013e74 <Device::addChild(Device*)>
c0024388:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002438b:	56                   	push   esi
c002438c:	6a 00                	push   0x0
c002438e:	53                   	push   ebx
c002438f:	55                   	push   ebp
c0024390:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0024393:	83 c4 20             	add    esp,0x20
c0024396:	d1 ef                	shr    edi,1
c0024398:	43                   	inc    ebx
c0024399:	83 fb 20             	cmp    ebx,0x20
c002439c:	0f 85 72 ff ff ff    	jne    c0024314 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c00243a2:	83 c4 0c             	add    esp,0xc
c00243a5:	5b                   	pop    ebx
c00243a6:	5e                   	pop    esi
c00243a7:	5f                   	pop    edi
c00243a8:	5d                   	pop    ebp
c00243a9:	c3                   	ret    

c00243aa <SATABus::open(int, int, void*)>:
c00243aa:	83 ec 14             	sub    esp,0x14
c00243ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00243b1:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c00243b7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00243bd:	52                   	push   edx
c00243be:	50                   	push   eax
c00243bf:	e8 3c ff ff ff       	call   c0024300 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c00243c4:	31 c0                	xor    eax,eax
c00243c6:	83 c4 1c             	add    esp,0x1c
c00243c9:	c3                   	ret    

c00243ca <ATA::close(int, int, void*)>:
c00243ca:	83 ec 0c             	sub    esp,0xc
c00243cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243d1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00243d7:	85 c0                	test   eax,eax
c00243d9:	74 0c                	je     c00243e7 <ATA::close(int, int, void*)+0x1d>
c00243db:	83 ec 0c             	sub    esp,0xc
c00243de:	8b 10                	mov    edx,DWORD PTR [eax]
c00243e0:	50                   	push   eax
c00243e1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00243e4:	83 c4 10             	add    esp,0x10
c00243e7:	31 c0                	xor    eax,eax
c00243e9:	83 c4 0c             	add    esp,0xc
c00243ec:	c3                   	ret    
c00243ed:	90                   	nop

c00243ee <ATA::powerSaving(PowerSavingLevel)>:
c00243ee:	c3                   	ret    
c00243ef:	90                   	nop

c00243f0 <ATA::ATA()>:
c00243f0:	83 ec 0c             	sub    esp,0xc
c00243f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243f7:	83 ec 04             	sub    esp,0x4
c00243fa:	68 00 02 00 00       	push   0x200
c00243ff:	68 e5 cf 02 c0       	push   0xc002cfe5
c0024404:	50                   	push   eax
c0024405:	e8 a0 fe fe ff       	call   c00142aa <PhysicalDisk::PhysicalDisk(char const*, int)>
c002440a:	83 c4 10             	add    esp,0x10
c002440d:	ba 68 cf 02 c0       	mov    edx,0xc002cf68
c0024412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024416:	89 10                	mov    DWORD PTR [eax],edx
c0024418:	90                   	nop
c0024419:	83 c4 0c             	add    esp,0xc
c002441c:	c3                   	ret    
c002441d:	90                   	nop

c002441e <ATA::flush(bool)>:
c002441e:	53                   	push   ebx
c002441f:	83 ec 08             	sub    esp,0x8
c0024422:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024427:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002442b:	19 c0                	sbb    eax,eax
c002442d:	83 e0 fd             	and    eax,0xfffffffd
c0024430:	05 ea 00 00 00       	add    eax,0xea
c0024435:	50                   	push   eax
c0024436:	6a 07                	push   0x7
c0024438:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002443f:	50                   	push   eax
c0024440:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024446:	e8 53 f1 ff ff       	call   c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002444b:	83 c4 0c             	add    esp,0xc
c002444e:	6a 00                	push   0x0
c0024450:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024457:	50                   	push   eax
c0024458:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002445e:	e8 dd fb ff ff       	call   c0024040 <IDE::polling(unsigned char, unsigned int)>
c0024463:	83 c4 18             	add    esp,0x18
c0024466:	5b                   	pop    ebx
c0024467:	c3                   	ret    

c0024468 <ATA::readyForCommand()>:
c0024468:	56                   	push   esi
c0024469:	53                   	push   ebx
c002446a:	31 db                	xor    ebx,ebx
c002446c:	50                   	push   eax
c002446d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024471:	50                   	push   eax
c0024472:	6a 0c                	push   0xc
c0024474:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002447b:	50                   	push   eax
c002447c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024482:	e8 d7 f1 ff ff       	call   c002365e <IDE::read(unsigned char, unsigned char)>
c0024487:	83 c4 10             	add    esp,0x10
c002448a:	a8 88                	test   al,0x88
c002448c:	74 23                	je     c00244b1 <ATA::readyForCommand()+0x49>
c002448e:	43                   	inc    ebx
c002448f:	83 fb 63             	cmp    ebx,0x63
c0024492:	7e dd                	jle    c0024471 <ATA::readyForCommand()+0x9>
c0024494:	51                   	push   ecx
c0024495:	51                   	push   ecx
c0024496:	6a 00                	push   0x0
c0024498:	68 40 42 0f 00       	push   0xf4240
c002449d:	e8 a3 9d ff ff       	call   c001e245 <nanoSleep(unsigned long long)>
c00244a2:	83 c4 10             	add    esp,0x10
c00244a5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00244ab:	75 c4                	jne    c0024471 <ATA::readyForCommand()+0x9>
c00244ad:	31 c0                	xor    eax,eax
c00244af:	eb 02                	jmp    c00244b3 <ATA::readyForCommand()+0x4b>
c00244b1:	b0 01                	mov    al,0x1
c00244b3:	5a                   	pop    edx
c00244b4:	5b                   	pop    ebx
c00244b5:	5e                   	pop    esi
c00244b6:	c3                   	ret    
c00244b7:	90                   	nop

c00244b8 <ATA::access(unsigned long long, int, void*, bool)>:
c00244b8:	55                   	push   ebp
c00244b9:	57                   	push   edi
c00244ba:	56                   	push   esi
c00244bb:	53                   	push   ebx
c00244bc:	83 ec 38             	sub    esp,0x38
c00244bf:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00244c3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00244c7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00244cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00244cf:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00244d3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00244d7:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00244db:	68 14 cf 02 c0       	push   0xc002cf14
c00244e0:	e8 56 e5 fe ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c00244e5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00244eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00244ef:	83 c4 10             	add    esp,0x10
c00244f2:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00244f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00244fc:	c1 e0 06             	shl    eax,0x6
c00244ff:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024507:	74 5d                	je     c0024566 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c0024509:	89 fa                	mov    edx,edi
c002450b:	89 f0                	mov    eax,esi
c002450d:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024511:	c1 ea 1c             	shr    edx,0x1c
c0024514:	89 d1                	mov    ecx,edx
c0024516:	09 c1                	or     ecx,eax
c0024518:	74 25                	je     c002453f <ATA::access(unsigned long long, int, void*, bool)+0x87>
c002451a:	31 ed                	xor    ebp,ebp
c002451c:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024523:	89 fa                	mov    edx,edi
c0024525:	89 f0                	mov    eax,esi
c0024527:	0f ad d0             	shrd   eax,edx,cl
c002452a:	d3 ea                	shr    edx,cl
c002452c:	f6 c1 20             	test   cl,0x20
c002452f:	74 02                	je     c0024533 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c0024531:	89 d0                	mov    eax,edx
c0024533:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024537:	45                   	inc    ebp
c0024538:	83 fd 06             	cmp    ebp,0x6
c002453b:	75 df                	jne    c002451c <ATA::access(unsigned long long, int, void*, bool)+0x64>
c002453d:	eb 76                	jmp    c00245b5 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c002453f:	89 f0                	mov    eax,esi
c0024541:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024546:	89 fa                	mov    edx,edi
c0024548:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002454f:	0f ac d0 10          	shrd   eax,edx,0x10
c0024553:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024558:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002455c:	c1 ee 18             	shr    esi,0x18
c002455f:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024564:	eb 56                	jmp    c00245bc <ATA::access(unsigned long long, int, void*, bool)+0x104>
c0024566:	6a 00                	push   0x0
c0024568:	6a 3f                	push   0x3f
c002456a:	57                   	push   edi
c002456b:	56                   	push   esi
c002456c:	e8 a3 29 00 00       	call   c0026f14 <__umoddi3>
c0024571:	83 c4 10             	add    esp,0x10
c0024574:	40                   	inc    eax
c0024575:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024579:	6a 00                	push   0x0
c002457b:	68 f0 03 00 00       	push   0x3f0
c0024580:	57                   	push   edi
c0024581:	56                   	push   esi
c0024582:	e8 8d 28 00 00       	call   c0026e14 <__udivdi3>
c0024587:	83 c4 10             	add    esp,0x10
c002458a:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002458f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024596:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002459b:	6a 00                	push   0x0
c002459d:	6a 3f                	push   0x3f
c002459f:	57                   	push   edi
c00245a0:	56                   	push   esi
c00245a1:	e8 6e 28 00 00       	call   c0026e14 <__udivdi3>
c00245a6:	83 c4 10             	add    esp,0x10
c00245a9:	89 c6                	mov    esi,eax
c00245ab:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00245b0:	83 e6 0f             	and    esi,0xf
c00245b3:	eb 07                	jmp    c00245bc <ATA::access(unsigned long long, int, void*, bool)+0x104>
c00245b5:	31 f6                	xor    esi,esi
c00245b7:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00245bc:	bf 01 00 00 00       	mov    edi,0x1
c00245c1:	50                   	push   eax
c00245c2:	6a 00                	push   0x0
c00245c4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245cb:	50                   	push   eax
c00245cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00245d0:	e8 d5 f1 ff ff       	call   c00237aa <IDE::enableIRQs(unsigned char, bool)>
c00245d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00245d8:	e8 8b fe ff ff       	call   c0024468 <ATA::readyForCommand()>
c00245dd:	83 c4 10             	add    esp,0x10
c00245e0:	84 c0                	test   al,al
c00245e2:	0f 84 bc 02 00 00    	je     c00248a4 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c00245e8:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00245ee:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00245f4:	c1 e0 04             	shl    eax,0x4
c00245f7:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00245fe:	09 c6                	or     esi,eax
c0024600:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024605:	75 05                	jne    c002460c <ATA::access(unsigned long long, int, void*, bool)+0x154>
c0024607:	83 ce a0             	or     esi,0xffffffa0
c002460a:	eb 03                	jmp    c002460f <ATA::access(unsigned long long, int, void*, bool)+0x157>
c002460c:	83 ce e0             	or     esi,0xffffffe0
c002460f:	89 f0                	mov    eax,esi
c0024611:	0f b6 f0             	movzx  esi,al
c0024614:	56                   	push   esi
c0024615:	6a 06                	push   0x6
c0024617:	51                   	push   ecx
c0024618:	52                   	push   edx
c0024619:	e8 80 ef ff ff       	call   c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002461e:	83 c4 10             	add    esp,0x10
c0024621:	6a 00                	push   0x0
c0024623:	6a 01                	push   0x1
c0024625:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002462c:	50                   	push   eax
c002462d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024633:	e8 66 ef ff ff       	call   c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024638:	83 c4 10             	add    esp,0x10
c002463b:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024640:	75 6e                	jne    c00246b0 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c0024642:	6a 00                	push   0x0
c0024644:	6a 08                	push   0x8
c0024646:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002464d:	50                   	push   eax
c002464e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024654:	e8 45 ef ff ff       	call   c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024659:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002465e:	50                   	push   eax
c002465f:	6a 09                	push   0x9
c0024661:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024668:	50                   	push   eax
c0024669:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002466f:	e8 2a ef ff ff       	call   c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024674:	83 c4 20             	add    esp,0x20
c0024677:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002467c:	50                   	push   eax
c002467d:	6a 0a                	push   0xa
c002467f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024686:	50                   	push   eax
c0024687:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002468d:	e8 0c ef ff ff       	call   c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024692:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024697:	50                   	push   eax
c0024698:	6a 0b                	push   0xb
c002469a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00246a1:	50                   	push   eax
c00246a2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00246a8:	e8 f1 ee ff ff       	call   c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246ad:	83 c4 20             	add    esp,0x20
c00246b0:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00246b5:	50                   	push   eax
c00246b6:	6a 02                	push   0x2
c00246b8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00246bf:	50                   	push   eax
c00246c0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00246c6:	e8 d3 ee ff ff       	call   c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246cb:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00246d0:	50                   	push   eax
c00246d1:	6a 03                	push   0x3
c00246d3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00246da:	50                   	push   eax
c00246db:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00246e1:	e8 b8 ee ff ff       	call   c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246e6:	83 c4 20             	add    esp,0x20
c00246e9:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00246ee:	50                   	push   eax
c00246ef:	6a 04                	push   0x4
c00246f1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00246f8:	50                   	push   eax
c00246f9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00246ff:	e8 9a ee ff ff       	call   c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024704:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024709:	50                   	push   eax
c002470a:	6a 05                	push   0x5
c002470c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024713:	50                   	push   eax
c0024714:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002471a:	e8 7f ee ff ff       	call   c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002471f:	83 c4 20             	add    esp,0x20
c0024722:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024727:	0f 94 c0             	sete   al
c002472a:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002472f:	74 09                	je     c002473a <ATA::access(unsigned long long, int, void*, bool)+0x282>
c0024731:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024738:	eb 07                	jmp    c0024741 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c002473a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024741:	0f b6 c0             	movzx  eax,al
c0024744:	50                   	push   eax
c0024745:	6a 07                	push   0x7
c0024747:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002474e:	50                   	push   eax
c002474f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024755:	e8 44 ee ff ff       	call   c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002475a:	c7 04 24 21 cf 02 c0 	mov    DWORD PTR [esp],0xc002cf21
c0024761:	e8 d5 e2 fe ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0024766:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002476a:	83 c4 10             	add    esp,0x10
c002476d:	85 f6                	test   esi,esi
c002476f:	0f 84 f7 00 00 00    	je     c002486c <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c0024775:	83 ec 0c             	sub    esp,0xc
c0024778:	68 24 cf 02 c0       	push   0xc002cf24
c002477d:	e8 b9 e2 fe ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0024782:	83 c4 0c             	add    esp,0xc
c0024785:	6a 01                	push   0x1
c0024787:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002478e:	50                   	push   eax
c002478f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024795:	e8 a6 f8 ff ff       	call   c0024040 <IDE::polling(unsigned char, unsigned int)>
c002479a:	c7 04 24 27 cf 02 c0 	mov    DWORD PTR [esp],0xc002cf27
c00247a1:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00247a5:	e8 91 e2 fe ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c00247aa:	83 c4 10             	add    esp,0x10
c00247ad:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00247b1:	84 c0                	test   al,al
c00247b3:	74 2b                	je     c00247e0 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c00247b5:	0f b6 f8             	movzx  edi,al
c00247b8:	57                   	push   edi
c00247b9:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00247c0:	50                   	push   eax
c00247c1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00247c8:	50                   	push   eax
c00247c9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00247cf:	e8 bc f7 ff ff       	call   c0023f90 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00247d4:	c7 04 24 2a cf 02 c0 	mov    DWORD PTR [esp],0xc002cf2a
c00247db:	e9 bc 00 00 00       	jmp    c002489c <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c00247e0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00247e5:	74 50                	je     c0024837 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c00247e7:	83 ec 0c             	sub    esp,0xc
c00247ea:	31 ed                	xor    ebp,ebp
c00247ec:	68 35 cf 02 c0       	push   0xc002cf35
c00247f1:	e8 45 e2 fe ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c00247f6:	83 c4 10             	add    esp,0x10
c00247f9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00247fd:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024801:	50                   	push   eax
c0024802:	50                   	push   eax
c0024803:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002480a:	50                   	push   eax
c002480b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024811:	e8 76 ed ff ff       	call   c002358c <IDE::getBase(unsigned char)>
c0024816:	89 c2                	mov    edx,eax
c0024818:	89 f8                	mov    eax,edi
c002481a:	66 ef                	out    dx,ax
c002481c:	45                   	inc    ebp
c002481d:	83 c4 10             	add    esp,0x10
c0024820:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024826:	75 d1                	jne    c00247f9 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c0024828:	83 ec 0c             	sub    esp,0xc
c002482b:	68 38 cf 02 c0       	push   0xc002cf38
c0024830:	e8 06 e2 fe ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0024835:	eb 24                	jmp    c002485b <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c0024837:	51                   	push   ecx
c0024838:	51                   	push   ecx
c0024839:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024840:	50                   	push   eax
c0024841:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024847:	e8 40 ed ff ff       	call   c002358c <IDE::getBase(unsigned char)>
c002484c:	b9 00 01 00 00       	mov    ecx,0x100
c0024851:	89 c2                	mov    edx,eax
c0024853:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024857:	fc                   	cld    
c0024858:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002485b:	83 c4 10             	add    esp,0x10
c002485e:	4e                   	dec    esi
c002485f:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024867:	e9 01 ff ff ff       	jmp    c002476d <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c002486c:	31 ff                	xor    edi,edi
c002486e:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024873:	74 2f                	je     c00248a4 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c0024875:	83 ec 0c             	sub    esp,0xc
c0024878:	68 3b cf 02 c0       	push   0xc002cf3b
c002487d:	e8 b9 e1 fe ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0024882:	58                   	pop    eax
c0024883:	31 c0                	xor    eax,eax
c0024885:	5a                   	pop    edx
c0024886:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c002488b:	0f 94 c0             	sete   al
c002488e:	50                   	push   eax
c002488f:	53                   	push   ebx
c0024890:	e8 89 fb ff ff       	call   c002441e <ATA::flush(bool)>
c0024895:	c7 04 24 3e cf 02 c0 	mov    DWORD PTR [esp],0xc002cf3e
c002489c:	e8 9a e1 fe ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c00248a1:	83 c4 10             	add    esp,0x10
c00248a4:	83 c4 2c             	add    esp,0x2c
c00248a7:	89 f8                	mov    eax,edi
c00248a9:	5b                   	pop    ebx
c00248aa:	5e                   	pop    esi
c00248ab:	5f                   	pop    edi
c00248ac:	5d                   	pop    ebp
c00248ad:	c3                   	ret    

c00248ae <ATA::read(unsigned long long, int, void*)>:
c00248ae:	57                   	push   edi
c00248af:	b8 04 00 00 00       	mov    eax,0x4
c00248b4:	56                   	push   esi
c00248b5:	53                   	push   ebx
c00248b6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00248ba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00248be:	8d 7a ff             	lea    edi,[edx-0x1]
c00248c1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00248c5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00248c9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00248cf:	77 25                	ja     c00248f6 <ATA::read(unsigned long long, int, void*)+0x48>
c00248d1:	b8 06 00 00 00       	mov    eax,0x6
c00248d6:	85 f6                	test   esi,esi
c00248d8:	74 1c                	je     c00248f6 <ATA::read(unsigned long long, int, void*)+0x48>
c00248da:	50                   	push   eax
c00248db:	50                   	push   eax
c00248dc:	6a 00                	push   0x0
c00248de:	56                   	push   esi
c00248df:	52                   	push   edx
c00248e0:	53                   	push   ebx
c00248e1:	51                   	push   ecx
c00248e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00248e6:	e8 cd fb ff ff       	call   c00244b8 <ATA::access(unsigned long long, int, void*, bool)>
c00248eb:	83 c4 20             	add    esp,0x20
c00248ee:	85 c0                	test   eax,eax
c00248f0:	0f 95 c0             	setne  al
c00248f3:	0f b6 c0             	movzx  eax,al
c00248f6:	5b                   	pop    ebx
c00248f7:	5e                   	pop    esi
c00248f8:	5f                   	pop    edi
c00248f9:	c3                   	ret    

c00248fa <ATA::write(unsigned long long, int, void*)>:
c00248fa:	55                   	push   ebp
c00248fb:	57                   	push   edi
c00248fc:	56                   	push   esi
c00248fd:	53                   	push   ebx
c00248fe:	83 ec 18             	sub    esp,0x18
c0024901:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024905:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0024909:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c002490d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0024911:	68 41 cf 02 c0       	push   0xc002cf41
c0024916:	e8 20 e1 fe ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c002491b:	8d 53 ff             	lea    edx,[ebx-0x1]
c002491e:	83 c4 10             	add    esp,0x10
c0024921:	b8 04 00 00 00       	mov    eax,0x4
c0024926:	81 fa fe 00 00 00    	cmp    edx,0xfe
c002492c:	77 25                	ja     c0024953 <ATA::write(unsigned long long, int, void*)+0x59>
c002492e:	b8 06 00 00 00       	mov    eax,0x6
c0024933:	85 f6                	test   esi,esi
c0024935:	74 1c                	je     c0024953 <ATA::write(unsigned long long, int, void*)+0x59>
c0024937:	50                   	push   eax
c0024938:	50                   	push   eax
c0024939:	6a 01                	push   0x1
c002493b:	56                   	push   esi
c002493c:	53                   	push   ebx
c002493d:	55                   	push   ebp
c002493e:	57                   	push   edi
c002493f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024943:	e8 70 fb ff ff       	call   c00244b8 <ATA::access(unsigned long long, int, void*, bool)>
c0024948:	83 c4 20             	add    esp,0x20
c002494b:	85 c0                	test   eax,eax
c002494d:	0f 95 c0             	setne  al
c0024950:	0f b6 c0             	movzx  eax,al
c0024953:	83 c4 0c             	add    esp,0xc
c0024956:	5b                   	pop    ebx
c0024957:	5e                   	pop    esi
c0024958:	5f                   	pop    edi
c0024959:	5d                   	pop    ebp
c002495a:	c3                   	ret    
c002495b:	90                   	nop

c002495c <ATA::detectCHS()>:
c002495c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024960:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024966:	c1 e0 06             	shl    eax,0x6
c0024969:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002496f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024979:	c7 44 24 04 4d cf 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cf4d
c0024981:	e9 53 5a ff ff       	jmp    c001a3d9 <Krnl::panic(char const*)>

c0024986 <ATA::open(int, int, void*)>:
c0024986:	53                   	push   ebx
c0024987:	83 ec 08             	sub    esp,0x8
c002498a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002498e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024992:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024996:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002499c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00249a2:	c1 e0 06             	shl    eax,0x6
c00249a5:	01 d0                	add    eax,edx
c00249a7:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00249ae:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00249b4:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00249bb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00249c5:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00249cb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00249d2:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00249d9:	75 0c                	jne    c00249e7 <ATA::open(int, int, void*)+0x61>
c00249db:	83 ec 0c             	sub    esp,0xc
c00249de:	53                   	push   ebx
c00249df:	e8 78 ff ff ff       	call   c002495c <ATA::detectCHS()>
c00249e4:	83 c4 10             	add    esp,0x10
c00249e7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00249ed:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00249f3:	c1 e0 06             	shl    eax,0x6
c00249f6:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00249fd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024a07:	d1 e8                	shr    eax,1
c0024a09:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024a0f:	6a 04                	push   0x4
c0024a11:	6a 0c                	push   0xc
c0024a13:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a1a:	50                   	push   eax
c0024a1b:	52                   	push   edx
c0024a1c:	e8 7d eb ff ff       	call   c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a21:	90                   	nop
c0024a22:	90                   	nop
c0024a23:	6a 00                	push   0x0
c0024a25:	6a 0c                	push   0xc
c0024a27:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a2e:	50                   	push   eax
c0024a2f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a35:	e8 64 eb ff ff       	call   c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a3a:	83 c4 14             	add    esp,0x14
c0024a3d:	53                   	push   ebx
c0024a3e:	e8 cf f8 fe ff       	call   c0014312 <PhysicalDisk::startCache()>
c0024a43:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024a46:	e8 4f 1b ff ff       	call   c001659a <createPartitionsForDisk(PhysicalDisk*)>
c0024a4b:	31 c0                	xor    eax,eax
c0024a4d:	83 c4 18             	add    esp,0x18
c0024a50:	5b                   	pop    ebx
c0024a51:	c3                   	ret    

c0024a52 <ATAPI::write(unsigned long long, int, void*)>:
c0024a52:	b8 03 00 00 00       	mov    eax,0x3
c0024a57:	c3                   	ret    

c0024a58 <ATAPI::close(int, int, void*)>:
c0024a58:	83 ec 0c             	sub    esp,0xc
c0024a5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a5f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024a65:	85 c0                	test   eax,eax
c0024a67:	74 0c                	je     c0024a75 <ATAPI::close(int, int, void*)+0x1d>
c0024a69:	83 ec 0c             	sub    esp,0xc
c0024a6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0024a6e:	50                   	push   eax
c0024a6f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024a72:	83 c4 10             	add    esp,0x10
c0024a75:	31 c0                	xor    eax,eax
c0024a77:	83 c4 0c             	add    esp,0xc
c0024a7a:	c3                   	ret    
c0024a7b:	90                   	nop

c0024a7c <ATAPI::ATAPI()>:
c0024a7c:	83 ec 0c             	sub    esp,0xc
c0024a7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a83:	83 ec 04             	sub    esp,0x4
c0024a86:	68 00 08 00 00       	push   0x800
c0024a8b:	68 85 d0 02 c0       	push   0xc002d085
c0024a90:	50                   	push   eax
c0024a91:	e8 14 f8 fe ff       	call   c00142aa <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024a96:	83 c4 10             	add    esp,0x10
c0024a99:	ba a0 cf 02 c0       	mov    edx,0xc002cfa0
c0024a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024aa2:	89 10                	mov    DWORD PTR [eax],edx
c0024aa4:	90                   	nop
c0024aa5:	83 c4 0c             	add    esp,0xc
c0024aa8:	c3                   	ret    
c0024aa9:	90                   	nop

c0024aaa <ATAPI::readyForCommand()>:
c0024aaa:	56                   	push   esi
c0024aab:	53                   	push   ebx
c0024aac:	31 db                	xor    ebx,ebx
c0024aae:	50                   	push   eax
c0024aaf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024ab3:	50                   	push   eax
c0024ab4:	6a 0c                	push   0xc
c0024ab6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024abd:	50                   	push   eax
c0024abe:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024ac4:	e8 95 eb ff ff       	call   c002365e <IDE::read(unsigned char, unsigned char)>
c0024ac9:	83 c4 10             	add    esp,0x10
c0024acc:	a8 88                	test   al,0x88
c0024ace:	74 23                	je     c0024af3 <ATAPI::readyForCommand()+0x49>
c0024ad0:	43                   	inc    ebx
c0024ad1:	83 fb 63             	cmp    ebx,0x63
c0024ad4:	7e dd                	jle    c0024ab3 <ATAPI::readyForCommand()+0x9>
c0024ad6:	51                   	push   ecx
c0024ad7:	51                   	push   ecx
c0024ad8:	6a 00                	push   0x0
c0024ada:	68 40 42 0f 00       	push   0xf4240
c0024adf:	e8 61 97 ff ff       	call   c001e245 <nanoSleep(unsigned long long)>
c0024ae4:	83 c4 10             	add    esp,0x10
c0024ae7:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024aed:	75 c4                	jne    c0024ab3 <ATAPI::readyForCommand()+0x9>
c0024aef:	31 c0                	xor    eax,eax
c0024af1:	eb 02                	jmp    c0024af5 <ATAPI::readyForCommand()+0x4b>
c0024af3:	b0 01                	mov    al,0x1
c0024af5:	5a                   	pop    edx
c0024af6:	5b                   	pop    ebx
c0024af7:	5e                   	pop    esi
c0024af8:	c3                   	ret    
c0024af9:	90                   	nop

c0024afa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024afa:	55                   	push   ebp
c0024afb:	57                   	push   edi
c0024afc:	56                   	push   esi
c0024afd:	53                   	push   ebx
c0024afe:	83 ec 20             	sub    esp,0x20
c0024b01:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024b05:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024b09:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024b0d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024b11:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024b15:	6a 01                	push   0x1
c0024b17:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024b1e:	50                   	push   eax
c0024b1f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b25:	e8 80 ec ff ff       	call   c00237aa <IDE::enableIRQs(unsigned char, bool)>
c0024b2a:	5e                   	pop    esi
c0024b2b:	58                   	pop    eax
c0024b2c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024b33:	50                   	push   eax
c0024b34:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b3a:	e8 39 ea ff ff       	call   c0023578 <IDE::prepareInterrupt(unsigned char)>
c0024b3f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024b42:	e8 63 ff ff ff       	call   c0024aaa <ATAPI::readyForCommand()>
c0024b47:	83 c4 10             	add    esp,0x10
c0024b4a:	84 c0                	test   al,al
c0024b4c:	75 0a                	jne    c0024b58 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024b4e:	bb 01 00 00 00       	mov    ebx,0x1
c0024b53:	e9 57 02 00 00       	jmp    c0024daf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024b58:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024b5e:	c1 e0 04             	shl    eax,0x4
c0024b61:	0f b6 c0             	movzx  eax,al
c0024b64:	50                   	push   eax
c0024b65:	6a 06                	push   0x6
c0024b67:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024b6e:	50                   	push   eax
c0024b6f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b75:	e8 24 ea ff ff       	call   c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b7a:	6a 00                	push   0x0
c0024b7c:	6a 01                	push   0x1
c0024b7e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024b85:	50                   	push   eax
c0024b86:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b8c:	e8 0d ea ff ff       	call   c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b91:	83 c4 20             	add    esp,0x20
c0024b94:	0f b6 c3             	movzx  eax,bl
c0024b97:	0f b6 df             	movzx  ebx,bh
c0024b9a:	50                   	push   eax
c0024b9b:	6a 04                	push   0x4
c0024b9d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ba4:	50                   	push   eax
c0024ba5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024bab:	e8 ee e9 ff ff       	call   c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bb0:	53                   	push   ebx
c0024bb1:	6a 05                	push   0x5
c0024bb3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024bba:	50                   	push   eax
c0024bbb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024bc1:	e8 d8 e9 ff ff       	call   c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bc6:	83 c4 20             	add    esp,0x20
c0024bc9:	68 a0 00 00 00       	push   0xa0
c0024bce:	6a 07                	push   0x7
c0024bd0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024bd7:	50                   	push   eax
c0024bd8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024bde:	e8 bb e9 ff ff       	call   c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024be3:	83 c4 0c             	add    esp,0xc
c0024be6:	6a 01                	push   0x1
c0024be8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024bef:	50                   	push   eax
c0024bf0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024bf6:	e8 45 f4 ff ff       	call   c0024040 <IDE::polling(unsigned char, unsigned int)>
c0024bfb:	83 c4 10             	add    esp,0x10
c0024bfe:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024c04:	84 c0                	test   al,al
c0024c06:	74 23                	je     c0024c2b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024c08:	0f b6 d8             	movzx  ebx,al
c0024c0b:	0f b6 d2             	movzx  edx,dl
c0024c0e:	53                   	push   ebx
c0024c0f:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024c16:	50                   	push   eax
c0024c17:	52                   	push   edx
c0024c18:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024c1e:	e8 6d f3 ff ff       	call   c0023f90 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024c23:	83 c4 10             	add    esp,0x10
c0024c26:	e9 84 01 00 00       	jmp    c0024daf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024c2b:	0f b6 d2             	movzx  edx,dl
c0024c2e:	53                   	push   ebx
c0024c2f:	53                   	push   ebx
c0024c30:	52                   	push   edx
c0024c31:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024c37:	e8 50 e9 ff ff       	call   c002358c <IDE::getBase(unsigned char)>
c0024c3c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024c40:	b9 06 00 00 00       	mov    ecx,0x6
c0024c45:	89 c2                	mov    edx,eax
c0024c47:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024c4a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024c4e:	83 c4 10             	add    esp,0x10
c0024c51:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024c57:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024c5e:	85 db                	test   ebx,ebx
c0024c60:	0f 84 ec 00 00 00    	je     c0024d52 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024c66:	51                   	push   ecx
c0024c67:	51                   	push   ecx
c0024c68:	52                   	push   edx
c0024c69:	50                   	push   eax
c0024c6a:	e8 9d ea ff ff       	call   c002370c <IDE::waitInterrupt(unsigned char)>
c0024c6f:	83 c4 10             	add    esp,0x10
c0024c72:	84 c0                	test   al,al
c0024c74:	0f 84 d4 fe ff ff    	je     c0024b4e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024c7a:	56                   	push   esi
c0024c7b:	56                   	push   esi
c0024c7c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024c83:	50                   	push   eax
c0024c84:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024c8a:	e8 e9 e8 ff ff       	call   c0023578 <IDE::prepareInterrupt(unsigned char)>
c0024c8f:	83 c4 0c             	add    esp,0xc
c0024c92:	6a 04                	push   0x4
c0024c94:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024c9b:	50                   	push   eax
c0024c9c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ca2:	e8 b7 e9 ff ff       	call   c002365e <IDE::read(unsigned char, unsigned char)>
c0024ca7:	83 c4 0c             	add    esp,0xc
c0024caa:	89 c6                	mov    esi,eax
c0024cac:	6a 05                	push   0x5
c0024cae:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024cb5:	50                   	push   eax
c0024cb6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024cbc:	e8 9d e9 ff ff       	call   c002365e <IDE::read(unsigned char, unsigned char)>
c0024cc1:	89 f1                	mov    ecx,esi
c0024cc3:	0f b6 c0             	movzx  eax,al
c0024cc6:	0f b6 f1             	movzx  esi,cl
c0024cc9:	c1 e0 08             	shl    eax,0x8
c0024ccc:	09 c6                	or     esi,eax
c0024cce:	d1 fe                	sar    esi,1
c0024cd0:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024cd4:	83 c4 10             	add    esp,0x10
c0024cd7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024cdc:	74 41                	je     c0024d1f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024cde:	31 c9                	xor    ecx,ecx
c0024ce0:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024ce6:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024ced:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024cf1:	75 0a                	jne    c0024cfd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024cf3:	01 c9                	add    ecx,ecx
c0024cf5:	01 cd                	add    ebp,ecx
c0024cf7:	4b                   	dec    ebx
c0024cf8:	e9 54 ff ff ff       	jmp    c0024c51 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024cfd:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024d02:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024d06:	51                   	push   ecx
c0024d07:	51                   	push   ecx
c0024d08:	52                   	push   edx
c0024d09:	50                   	push   eax
c0024d0a:	e8 7d e8 ff ff       	call   c002358c <IDE::getBase(unsigned char)>
c0024d0f:	89 c2                	mov    edx,eax
c0024d11:	89 f0                	mov    eax,esi
c0024d13:	66 ef                	out    dx,ax
c0024d15:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024d19:	83 c4 10             	add    esp,0x10
c0024d1c:	41                   	inc    ecx
c0024d1d:	eb c1                	jmp    c0024ce0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024d1f:	31 f6                	xor    esi,esi
c0024d21:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024d27:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024d2e:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024d32:	75 06                	jne    c0024d3a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024d34:	01 f6                	add    esi,esi
c0024d36:	01 f5                	add    ebp,esi
c0024d38:	eb bd                	jmp    c0024cf7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024d3a:	51                   	push   ecx
c0024d3b:	51                   	push   ecx
c0024d3c:	52                   	push   edx
c0024d3d:	50                   	push   eax
c0024d3e:	e8 49 e8 ff ff       	call   c002358c <IDE::getBase(unsigned char)>
c0024d43:	89 c2                	mov    edx,eax
c0024d45:	66 ed                	in     ax,dx
c0024d47:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024d4c:	83 c4 10             	add    esp,0x10
c0024d4f:	46                   	inc    esi
c0024d50:	eb cf                	jmp    c0024d21 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024d52:	51                   	push   ecx
c0024d53:	51                   	push   ecx
c0024d54:	52                   	push   edx
c0024d55:	50                   	push   eax
c0024d56:	e8 b1 e9 ff ff       	call   c002370c <IDE::waitInterrupt(unsigned char)>
c0024d5b:	83 c4 10             	add    esp,0x10
c0024d5e:	84 c0                	test   al,al
c0024d60:	0f 84 e8 fd ff ff    	je     c0024b4e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024d66:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024d6b:	52                   	push   edx
c0024d6c:	52                   	push   edx
c0024d6d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024d74:	50                   	push   eax
c0024d75:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024d7b:	e8 f8 e7 ff ff       	call   c0023578 <IDE::prepareInterrupt(unsigned char)>
c0024d80:	83 c4 10             	add    esp,0x10
c0024d83:	50                   	push   eax
c0024d84:	50                   	push   eax
c0024d85:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024d8c:	50                   	push   eax
c0024d8d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024d93:	e8 f4 e7 ff ff       	call   c002358c <IDE::getBase(unsigned char)>
c0024d98:	8d 50 07             	lea    edx,[eax+0x7]
c0024d9b:	ec                   	in     al,dx
c0024d9c:	83 c4 10             	add    esp,0x10
c0024d9f:	a8 88                	test   al,0x88
c0024da1:	74 0a                	je     c0024dad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024da3:	4b                   	dec    ebx
c0024da4:	75 dd                	jne    c0024d83 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024da6:	bb 02 00 00 00       	mov    ebx,0x2
c0024dab:	eb 02                	jmp    c0024daf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024dad:	31 db                	xor    ebx,ebx
c0024daf:	83 c4 1c             	add    esp,0x1c
c0024db2:	89 d8                	mov    eax,ebx
c0024db4:	5b                   	pop    ebx
c0024db5:	5e                   	pop    esi
c0024db6:	5f                   	pop    edi
c0024db7:	5d                   	pop    ebp
c0024db8:	c3                   	ret    
c0024db9:	90                   	nop

c0024dba <ATAPI::diskRemoved()>:
c0024dba:	83 ec 18             	sub    esp,0x18
c0024dbd:	68 91 d0 02 c0       	push   0xc002d091
c0024dc2:	e8 74 dc fe ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0024dc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024dcb:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024dd2:	83 c4 1c             	add    esp,0x1c
c0024dd5:	c3                   	ret    

c0024dd6 <ATAPI::eject()>:
c0024dd6:	57                   	push   edi
c0024dd7:	b9 03 00 00 00       	mov    ecx,0x3
c0024ddc:	53                   	push   ebx
c0024ddd:	83 ec 14             	sub    esp,0x14
c0024de0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024de4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024de8:	fc                   	cld    
c0024de9:	31 c0                	xor    eax,eax
c0024deb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024ded:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024df2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024df7:	50                   	push   eax
c0024df8:	50                   	push   eax
c0024df9:	6a 00                	push   0x0
c0024dfb:	6a 00                	push   0x0
c0024dfd:	6a 00                	push   0x0
c0024dff:	6a 02                	push   0x2
c0024e01:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024e05:	50                   	push   eax
c0024e06:	53                   	push   ebx
c0024e07:	e8 ee fc ff ff       	call   c0024afa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024e0c:	83 c4 14             	add    esp,0x14
c0024e0f:	53                   	push   ebx
c0024e10:	e8 a5 ff ff ff       	call   c0024dba <ATAPI::diskRemoved()>
c0024e15:	83 c4 24             	add    esp,0x24
c0024e18:	31 c0                	xor    eax,eax
c0024e1a:	5b                   	pop    ebx
c0024e1b:	5f                   	pop    edi
c0024e1c:	c3                   	ret    
c0024e1d:	90                   	nop

c0024e1e <ATAPI::diskInserted()>:
c0024e1e:	53                   	push   ebx
c0024e1f:	83 ec 14             	sub    esp,0x14
c0024e22:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024e26:	68 a8 d0 02 c0       	push   0xc002d0a8
c0024e2b:	e8 0b dc fe ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0024e30:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024e37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024e3a:	e8 d3 f4 fe ff       	call   c0014312 <PhysicalDisk::startCache()>
c0024e3f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024e43:	83 c4 18             	add    esp,0x18
c0024e46:	5b                   	pop    ebx
c0024e47:	e9 4e 17 ff ff       	jmp    c001659a <createPartitionsForDisk(PhysicalDisk*)>

c0024e4c <ATAPI::detectMedia()>:
c0024e4c:	56                   	push   esi
c0024e4d:	53                   	push   ebx
c0024e4e:	83 ec 28             	sub    esp,0x28
c0024e51:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024e55:	6a 0c                	push   0xc
c0024e57:	6a 00                	push   0x0
c0024e59:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024e5d:	56                   	push   esi
c0024e5e:	e8 ed b8 fd ff       	call   c0000750 <memset>
c0024e63:	58                   	pop    eax
c0024e64:	5a                   	pop    edx
c0024e65:	6a 00                	push   0x0
c0024e67:	6a 00                	push   0x0
c0024e69:	6a 00                	push   0x0
c0024e6b:	6a 00                	push   0x0
c0024e6d:	56                   	push   esi
c0024e6e:	53                   	push   ebx
c0024e6f:	e8 86 fc ff ff       	call   c0024afa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024e74:	83 c4 1c             	add    esp,0x1c
c0024e77:	6a 0c                	push   0xc
c0024e79:	6a 00                	push   0x0
c0024e7b:	56                   	push   esi
c0024e7c:	e8 cf b8 fd ff       	call   c0000750 <memset>
c0024e81:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024e86:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024e8b:	59                   	pop    ecx
c0024e8c:	58                   	pop    eax
c0024e8d:	6a 01                	push   0x1
c0024e8f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024e93:	50                   	push   eax
c0024e94:	6a 00                	push   0x0
c0024e96:	6a 12                	push   0x12
c0024e98:	56                   	push   esi
c0024e99:	53                   	push   ebx
c0024e9a:	e8 5b fc ff ff       	call   c0024afa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024e9f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024ea3:	83 c4 20             	add    esp,0x20
c0024ea6:	83 e0 7f             	and    eax,0x7f
c0024ea9:	3c 70                	cmp    al,0x70
c0024eab:	74 15                	je     c0024ec2 <ATAPI::detectMedia()+0x76>
c0024ead:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024eb4:	75 0c                	jne    c0024ec2 <ATAPI::detectMedia()+0x76>
c0024eb6:	83 ec 0c             	sub    esp,0xc
c0024eb9:	53                   	push   ebx
c0024eba:	e8 5f ff ff ff       	call   c0024e1e <ATAPI::diskInserted()>
c0024ebf:	83 c4 10             	add    esp,0x10
c0024ec2:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024ec6:	83 e0 0f             	and    eax,0xf
c0024ec9:	3c 02                	cmp    al,0x2
c0024ecb:	75 1b                	jne    c0024ee8 <ATAPI::detectMedia()+0x9c>
c0024ecd:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024ed2:	75 2d                	jne    c0024f01 <ATAPI::detectMedia()+0xb5>
c0024ed4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024edb:	74 24                	je     c0024f01 <ATAPI::detectMedia()+0xb5>
c0024edd:	83 ec 0c             	sub    esp,0xc
c0024ee0:	53                   	push   ebx
c0024ee1:	e8 d4 fe ff ff       	call   c0024dba <ATAPI::diskRemoved()>
c0024ee6:	eb 16                	jmp    c0024efe <ATAPI::detectMedia()+0xb2>
c0024ee8:	84 c0                	test   al,al
c0024eea:	75 15                	jne    c0024f01 <ATAPI::detectMedia()+0xb5>
c0024eec:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024ef3:	75 0c                	jne    c0024f01 <ATAPI::detectMedia()+0xb5>
c0024ef5:	83 ec 0c             	sub    esp,0xc
c0024ef8:	53                   	push   ebx
c0024ef9:	e8 20 ff ff ff       	call   c0024e1e <ATAPI::diskInserted()>
c0024efe:	83 c4 10             	add    esp,0x10
c0024f01:	83 c4 24             	add    esp,0x24
c0024f04:	5b                   	pop    ebx
c0024f05:	5e                   	pop    esi
c0024f06:	c3                   	ret    
c0024f07:	90                   	nop

c0024f08 <ATAPI::open(int, int, void*)>:
c0024f08:	53                   	push   ebx
c0024f09:	83 ec 08             	sub    esp,0x8
c0024f0c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024f10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024f14:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024f18:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024f1e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024f24:	c1 e0 06             	shl    eax,0x6
c0024f27:	01 d0                	add    eax,edx
c0024f29:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024f30:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024f36:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024f3d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024f47:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024f4d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024f54:	6a 04                	push   0x4
c0024f56:	6a 0c                	push   0xc
c0024f58:	51                   	push   ecx
c0024f59:	52                   	push   edx
c0024f5a:	e8 3f e6 ff ff       	call   c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f5f:	90                   	nop
c0024f60:	90                   	nop
c0024f61:	6a 00                	push   0x0
c0024f63:	6a 0c                	push   0xc
c0024f65:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024f6c:	50                   	push   eax
c0024f6d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024f73:	e8 26 e6 ff ff       	call   c002359e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f78:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024f7f:	83 c4 14             	add    esp,0x14
c0024f82:	53                   	push   ebx
c0024f83:	e8 c4 fe ff ff       	call   c0024e4c <ATAPI::detectMedia()>
c0024f88:	31 c0                	xor    eax,eax
c0024f8a:	83 c4 18             	add    esp,0x18
c0024f8d:	5b                   	pop    ebx
c0024f8e:	c3                   	ret    
c0024f8f:	90                   	nop

c0024f90 <ATAPI::read(unsigned long long, int, void*)>:
c0024f90:	55                   	push   ebp
c0024f91:	57                   	push   edi
c0024f92:	56                   	push   esi
c0024f93:	53                   	push   ebx
c0024f94:	83 ec 1c             	sub    esp,0x1c
c0024f97:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024f9b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024f9f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024fa3:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024faa:	74 41                	je     c0024fed <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024fac:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024fb0:	b9 03 00 00 00       	mov    ecx,0x3
c0024fb5:	fc                   	cld    
c0024fb6:	31 c0                	xor    eax,eax
c0024fb8:	86 fb                	xchg   bl,bh
c0024fba:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024fbc:	c1 c3 10             	rol    ebx,0x10
c0024fbf:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024fc4:	89 e8                	mov    eax,ebp
c0024fc6:	86 fb                	xchg   bl,bh
c0024fc8:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024fcc:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024fd0:	50                   	push   eax
c0024fd1:	50                   	push   eax
c0024fd2:	55                   	push   ebp
c0024fd3:	c1 e5 0b             	shl    ebp,0xb
c0024fd6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024fda:	6a 00                	push   0x0
c0024fdc:	55                   	push   ebp
c0024fdd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024fe1:	50                   	push   eax
c0024fe2:	56                   	push   esi
c0024fe3:	e8 12 fb ff ff       	call   c0024afa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024fe8:	83 c4 20             	add    esp,0x20
c0024feb:	eb 1a                	jmp    c0025007 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024fed:	83 ec 0c             	sub    esp,0xc
c0024ff0:	56                   	push   esi
c0024ff1:	e8 56 fe ff ff       	call   c0024e4c <ATAPI::detectMedia()>
c0024ff6:	83 c4 10             	add    esp,0x10
c0024ff9:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0025000:	75 aa                	jne    c0024fac <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0025002:	b8 02 00 00 00       	mov    eax,0x2
c0025007:	83 c4 1c             	add    esp,0x1c
c002500a:	5b                   	pop    ebx
c002500b:	5e                   	pop    esi
c002500c:	5f                   	pop    edi
c002500d:	5d                   	pop    ebp
c002500e:	c3                   	ret    
c002500f:	90                   	nop

c0025010 <SATA::close(int, int, void*)>:
c0025010:	83 ec 0c             	sub    esp,0xc
c0025013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025017:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002501d:	85 c0                	test   eax,eax
c002501f:	74 0c                	je     c002502d <SATA::close(int, int, void*)+0x1d>
c0025021:	83 ec 0c             	sub    esp,0xc
c0025024:	8b 10                	mov    edx,DWORD PTR [eax]
c0025026:	50                   	push   eax
c0025027:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002502a:	83 c4 10             	add    esp,0x10
c002502d:	31 c0                	xor    eax,eax
c002502f:	83 c4 0c             	add    esp,0xc
c0025032:	c3                   	ret    
c0025033:	90                   	nop

c0025034 <SATA::powerSaving(PowerSavingLevel)>:
c0025034:	c3                   	ret    
c0025035:	90                   	nop

c0025036 <SATA::open(int, int, void*)>:
c0025036:	56                   	push   esi
c0025037:	53                   	push   ebx
c0025038:	50                   	push   eax
c0025039:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002503d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025041:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002504b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025051:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002505b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002505f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025069:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002506f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0025076:	e8 64 ad fe ff       	call   c000fddf <Phys::allocatePage()>
c002507b:	89 c6                	mov    esi,eax
c002507d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0025083:	81 c6 00 10 00 00    	add    esi,0x1000
c0025089:	e8 51 ad fe ff       	call   c000fddf <Phys::allocatePage()>
c002508e:	39 c6                	cmp    esi,eax
c0025090:	74 10                	je     c00250a2 <SATA::open(int, int, void*)+0x6c>
c0025092:	83 ec 0c             	sub    esp,0xc
c0025095:	68 d0 cf 02 c0       	push   0xc002cfd0
c002509a:	e8 3a 53 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c002509f:	83 c4 10             	add    esp,0x10
c00250a2:	83 ec 0c             	sub    esp,0xc
c00250a5:	6a 02                	push   0x2
c00250a7:	e8 bd c5 fe ff       	call   c0011669 <Virt::allocateKernelVirtualPages(int)>
c00250ac:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00250b2:	6a 03                	push   0x3
c00250b4:	50                   	push   eax
c00250b5:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00250bb:	ff 35 50 e8 02 c0    	push   DWORD PTR ds:0xc002e850
c00250c1:	e8 4a cc fe ff       	call   c0011d10 <VAS::mapPage(unsigned long, unsigned long, int)>
c00250c6:	83 c4 14             	add    esp,0x14
c00250c9:	53                   	push   ebx
c00250ca:	e8 43 f2 fe ff       	call   c0014312 <PhysicalDisk::startCache()>
c00250cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00250d2:	e8 c3 14 ff ff       	call   c001659a <createPartitionsForDisk(PhysicalDisk*)>
c00250d7:	83 c4 14             	add    esp,0x14
c00250da:	31 c0                	xor    eax,eax
c00250dc:	5b                   	pop    ebx
c00250dd:	5e                   	pop    esi
c00250de:	c3                   	ret    
c00250df:	90                   	nop

c00250e0 <SATA::SATA()>:
c00250e0:	83 ec 0c             	sub    esp,0xc
c00250e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250e7:	83 ec 04             	sub    esp,0x4
c00250ea:	68 00 02 00 00       	push   0x200
c00250ef:	68 e4 cf 02 c0       	push   0xc002cfe4
c00250f4:	50                   	push   eax
c00250f5:	e8 b0 f1 fe ff       	call   c00142aa <PhysicalDisk::PhysicalDisk(char const*, int)>
c00250fa:	83 c4 10             	add    esp,0x10
c00250fd:	ba 54 d0 02 c0       	mov    edx,0xc002d054
c0025102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025106:	89 10                	mov    DWORD PTR [eax],edx
c0025108:	90                   	nop
c0025109:	83 c4 0c             	add    esp,0xc
c002510c:	c3                   	ret    
c002510d:	90                   	nop

c002510e <SATA::access(unsigned long long, int, void*, bool)>:
c002510e:	55                   	push   ebp
c002510f:	57                   	push   edi
c0025110:	56                   	push   esi
c0025111:	53                   	push   ebx
c0025112:	83 ec 2c             	sub    esp,0x2c
c0025115:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025119:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002511d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025121:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025125:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0025129:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002512e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025132:	7e 10                	jle    c0025144 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0025134:	83 ec 0c             	sub    esp,0xc
c0025137:	68 f4 cf 02 c0       	push   0xc002cff4
c002513c:	e8 98 52 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c0025141:	83 c4 10             	add    esp,0x10
c0025144:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002514a:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0025150:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025156:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002515a:	89 d0                	mov    eax,edx
c002515c:	c1 e0 07             	shl    eax,0x7
c002515f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025163:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002516d:	51                   	push   ecx
c002516e:	8d 42 02             	lea    eax,[edx+0x2]
c0025171:	51                   	push   ecx
c0025172:	c1 e0 07             	shl    eax,0x7
c0025175:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025179:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002517d:	50                   	push   eax
c002517e:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0025184:	e8 97 ef ff ff       	call   c0024120 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025189:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002518d:	83 c4 10             	add    esp,0x10
c0025190:	b8 01 00 00 00       	mov    eax,0x1
c0025195:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002519a:	0f 84 cb 01 00 00    	je     c002536b <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00251a0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00251a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00251a8:	c1 e0 09             	shl    eax,0x9
c00251ab:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00251b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00251b4:	74 0e                	je     c00251c4 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c00251b6:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00251bc:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00251c0:	89 c1                	mov    ecx,eax
c00251c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00251c4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00251c8:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00251ce:	8d 42 02             	lea    eax,[edx+0x2]
c00251d1:	c1 e0 07             	shl    eax,0x7
c00251d4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00251d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00251da:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00251e0:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00251e6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00251ea:	c1 e1 05             	shl    ecx,0x5
c00251ed:	01 c8                	add    eax,ecx
c00251ef:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00251f3:	83 e1 01             	and    ecx,0x1
c00251f6:	89 ce                	mov    esi,ecx
c00251f8:	8a 08                	mov    cl,BYTE PTR [eax]
c00251fa:	c1 e6 06             	shl    esi,0x6
c00251fd:	83 e1 bf             	and    ecx,0xffffffbf
c0025200:	09 f1                	or     ecx,esi
c0025202:	88 08                	mov    BYTE PTR [eax],cl
c0025204:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025206:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002520c:	81 c9 05 00 01 00    	or     ecx,0x10005
c0025212:	89 08                	mov    DWORD PTR [eax],ecx
c0025214:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002521a:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0025220:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0025226:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0025229:	50                   	push   eax
c002522a:	68 90 00 00 00       	push   0x90
c002522f:	6a 00                	push   0x0
c0025231:	56                   	push   esi
c0025232:	e8 19 b5 fd ff       	call   c0000750 <memset>
c0025237:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002523d:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0025241:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0025247:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002524b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002524f:	83 c4 10             	add    esp,0x10
c0025252:	48                   	dec    eax
c0025253:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025258:	89 c1                	mov    ecx,eax
c002525a:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0025260:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025265:	09 c8                	or     eax,ecx
c0025267:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002526d:	66 8b 06             	mov    ax,WORD PTR [esi]
c0025270:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0025277:	66 25 00 7f          	and    ax,0x7f00
c002527b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002527f:	66 0d 27 80          	or     ax,0x8027
c0025283:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0025288:	66 89 06             	mov    WORD PTR [esi],ax
c002528b:	19 c0                	sbb    eax,eax
c002528d:	83 e0 f0             	and    eax,0xfffffff0
c0025290:	83 c0 35             	add    eax,0x35
c0025293:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0025296:	89 e8                	mov    eax,ebp
c0025298:	c1 e8 10             	shr    eax,0x10
c002529b:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c002529e:	89 e8                	mov    eax,ebp
c00252a0:	c1 e8 18             	shr    eax,0x18
c00252a3:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c00252a6:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00252aa:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c00252ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00252b1:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00252b4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00252b8:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00252bc:	89 d6                	mov    esi,edx
c00252be:	31 c0                	xor    eax,eax
c00252c0:	c1 e6 07             	shl    esi,0x7
c00252c3:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00252c7:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c00252cd:	80 e1 88             	and    cl,0x88
c00252d0:	74 0a                	je     c00252dc <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c00252d2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00252d7:	74 0a                	je     c00252e3 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c00252d9:	40                   	inc    eax
c00252da:	eb eb                	jmp    c00252c7 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c00252dc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00252e1:	75 0a                	jne    c00252ed <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c00252e3:	83 ec 0c             	sub    esp,0xc
c00252e6:	68 2d d0 02 c0       	push   0xc002d02d
c00252eb:	eb 56                	jmp    c0025343 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c00252ed:	b8 01 00 00 00       	mov    eax,0x1
c00252f2:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00252f6:	c1 e2 07             	shl    edx,0x7
c00252f9:	d3 e0                	shl    eax,cl
c00252fb:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00252ff:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0025305:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c002530b:	85 c8                	test   eax,ecx
c002530d:	74 20                	je     c002532f <SATA::access(unsigned long long, int, void*, bool)+0x221>
c002530f:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0025315:	0f ba e1 1e          	bt     ecx,0x1e
c0025319:	73 ea                	jae    c0025305 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c002531b:	83 ec 0c             	sub    esp,0xc
c002531e:	68 3b d0 02 c0       	push   0xc002d03b
c0025323:	e8 b1 50 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c0025328:	83 c4 10             	add    esp,0x10
c002532b:	31 c0                	xor    eax,eax
c002532d:	eb 3c                	jmp    c002536b <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c002532f:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0025335:	0f ba e0 1e          	bt     eax,0x1e
c0025339:	73 17                	jae    c0025352 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c002533b:	83 ec 0c             	sub    esp,0xc
c002533e:	68 3b d0 02 c0       	push   0xc002d03b
c0025343:	e8 91 50 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c0025348:	83 c4 10             	add    esp,0x10
c002534b:	b8 01 00 00 00       	mov    eax,0x1
c0025350:	eb 19                	jmp    c002536b <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025352:	31 c0                	xor    eax,eax
c0025354:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025359:	75 10                	jne    c002536b <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c002535b:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0025361:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0025365:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0025369:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002536b:	83 c4 2c             	add    esp,0x2c
c002536e:	5b                   	pop    ebx
c002536f:	5e                   	pop    esi
c0025370:	5f                   	pop    edi
c0025371:	5d                   	pop    ebp
c0025372:	c3                   	ret    
c0025373:	90                   	nop

c0025374 <SATA::read(unsigned long long, int, void*)>:
c0025374:	57                   	push   edi
c0025375:	b8 04 00 00 00       	mov    eax,0x4
c002537a:	56                   	push   esi
c002537b:	53                   	push   ebx
c002537c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025380:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0025384:	8d 7a ff             	lea    edi,[edx-0x1]
c0025387:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002538b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002538f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0025395:	77 25                	ja     c00253bc <SATA::read(unsigned long long, int, void*)+0x48>
c0025397:	b8 06 00 00 00       	mov    eax,0x6
c002539c:	85 f6                	test   esi,esi
c002539e:	74 1c                	je     c00253bc <SATA::read(unsigned long long, int, void*)+0x48>
c00253a0:	50                   	push   eax
c00253a1:	50                   	push   eax
c00253a2:	6a 00                	push   0x0
c00253a4:	56                   	push   esi
c00253a5:	52                   	push   edx
c00253a6:	53                   	push   ebx
c00253a7:	51                   	push   ecx
c00253a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00253ac:	e8 5d fd ff ff       	call   c002510e <SATA::access(unsigned long long, int, void*, bool)>
c00253b1:	83 c4 20             	add    esp,0x20
c00253b4:	85 c0                	test   eax,eax
c00253b6:	0f 95 c0             	setne  al
c00253b9:	0f b6 c0             	movzx  eax,al
c00253bc:	5b                   	pop    ebx
c00253bd:	5e                   	pop    esi
c00253be:	5f                   	pop    edi
c00253bf:	c3                   	ret    

c00253c0 <SATA::write(unsigned long long, int, void*)>:
c00253c0:	55                   	push   ebp
c00253c1:	b8 04 00 00 00       	mov    eax,0x4
c00253c6:	57                   	push   edi
c00253c7:	56                   	push   esi
c00253c8:	53                   	push   ebx
c00253c9:	83 ec 0c             	sub    esp,0xc
c00253cc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00253d0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00253d4:	8d 73 ff             	lea    esi,[ebx-0x1]
c00253d7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00253db:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00253df:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00253e5:	77 3d                	ja     c0025424 <SATA::write(unsigned long long, int, void*)+0x64>
c00253e7:	b8 06 00 00 00       	mov    eax,0x6
c00253ec:	85 ed                	test   ebp,ebp
c00253ee:	74 34                	je     c0025424 <SATA::write(unsigned long long, int, void*)+0x64>
c00253f0:	c1 e3 09             	shl    ebx,0x9
c00253f3:	01 eb                	add    ebx,ebp
c00253f5:	89 d6                	mov    esi,edx
c00253f7:	89 cf                	mov    edi,ecx
c00253f9:	83 c6 01             	add    esi,0x1
c00253fc:	83 d7 00             	adc    edi,0x0
c00253ff:	50                   	push   eax
c0025400:	50                   	push   eax
c0025401:	6a 01                	push   0x1
c0025403:	55                   	push   ebp
c0025404:	81 c5 00 02 00 00    	add    ebp,0x200
c002540a:	6a 01                	push   0x1
c002540c:	51                   	push   ecx
c002540d:	52                   	push   edx
c002540e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025412:	e8 f7 fc ff ff       	call   c002510e <SATA::access(unsigned long long, int, void*, bool)>
c0025417:	83 c4 20             	add    esp,0x20
c002541a:	89 f2                	mov    edx,esi
c002541c:	89 f9                	mov    ecx,edi
c002541e:	39 dd                	cmp    ebp,ebx
c0025420:	75 d3                	jne    c00253f5 <SATA::write(unsigned long long, int, void*)+0x35>
c0025422:	31 c0                	xor    eax,eax
c0025424:	83 c4 0c             	add    esp,0xc
c0025427:	5b                   	pop    ebx
c0025428:	5e                   	pop    esi
c0025429:	5f                   	pop    edi
c002542a:	5d                   	pop    ebp
c002542b:	c3                   	ret    

c002542c <SATAPI::write(unsigned long long, int, void*)>:
c002542c:	b8 03 00 00 00       	mov    eax,0x3
c0025431:	c3                   	ret    

c0025432 <SATAPI::close(int, int, void*)>:
c0025432:	83 ec 0c             	sub    esp,0xc
c0025435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025439:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002543f:	85 c0                	test   eax,eax
c0025441:	74 0c                	je     c002544f <SATAPI::close(int, int, void*)+0x1d>
c0025443:	83 ec 0c             	sub    esp,0xc
c0025446:	8b 10                	mov    edx,DWORD PTR [eax]
c0025448:	50                   	push   eax
c0025449:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002544c:	83 c4 10             	add    esp,0x10
c002544f:	31 c0                	xor    eax,eax
c0025451:	83 c4 0c             	add    esp,0xc
c0025454:	c3                   	ret    
c0025455:	90                   	nop

c0025456 <SATAPI::SATAPI()>:
c0025456:	83 ec 0c             	sub    esp,0xc
c0025459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002545d:	83 ec 04             	sub    esp,0x4
c0025460:	68 00 08 00 00       	push   0x800
c0025465:	68 84 d0 02 c0       	push   0xc002d084
c002546a:	50                   	push   eax
c002546b:	e8 3a ee fe ff       	call   c00142aa <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025470:	83 c4 10             	add    esp,0x10
c0025473:	ba 30 d1 02 c0       	mov    edx,0xc002d130
c0025478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002547c:	89 10                	mov    DWORD PTR [eax],edx
c002547e:	90                   	nop
c002547f:	83 c4 0c             	add    esp,0xc
c0025482:	c3                   	ret    
c0025483:	90                   	nop

c0025484 <SATAPI::diskRemoved()>:
c0025484:	83 ec 18             	sub    esp,0x18
c0025487:	68 90 d0 02 c0       	push   0xc002d090
c002548c:	e8 aa d5 fe ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0025491:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025495:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c002549c:	83 c4 1c             	add    esp,0x1c
c002549f:	c3                   	ret    

c00254a0 <SATAPI::diskInserted()>:
c00254a0:	53                   	push   ebx
c00254a1:	83 ec 14             	sub    esp,0x14
c00254a4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00254a8:	68 a7 d0 02 c0       	push   0xc002d0a7
c00254ad:	e8 89 d5 fe ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c00254b2:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c00254b9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00254bc:	e8 51 ee fe ff       	call   c0014312 <PhysicalDisk::startCache()>
c00254c1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00254c5:	83 c4 18             	add    esp,0x18
c00254c8:	5b                   	pop    ebx
c00254c9:	e9 cc 10 ff ff       	jmp    c001659a <createPartitionsForDisk(PhysicalDisk*)>

c00254ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00254ce:	55                   	push   ebp
c00254cf:	57                   	push   edi
c00254d0:	56                   	push   esi
c00254d1:	53                   	push   ebx
c00254d2:	83 ec 34             	sub    esp,0x34
c00254d5:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00254d9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00254dd:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00254e1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00254e5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00254e9:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00254ef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00254f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00254f9:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c00254ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025503:	c1 e0 07             	shl    eax,0x7
c0025506:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002550a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002550e:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025518:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002551c:	8d 58 02             	lea    ebx,[eax+0x2]
c002551f:	c1 e3 07             	shl    ebx,0x7
c0025522:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0025526:	53                   	push   ebx
c0025527:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002552d:	e8 ee eb ff ff       	call   c0024120 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025532:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025536:	83 c4 10             	add    esp,0x10
c0025539:	b8 01 00 00 00       	mov    eax,0x1
c002553e:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025543:	0f 84 85 01 00 00    	je     c00256ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025549:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002554f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025551:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025557:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002555d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025561:	c1 e1 05             	shl    ecx,0x5
c0025564:	01 c8                	add    eax,ecx
c0025566:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025568:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002556e:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025574:	89 08                	mov    DWORD PTR [eax],ecx
c0025576:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002557c:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025582:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025588:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002558b:	8d 7b 40             	lea    edi,[ebx+0x40]
c002558e:	50                   	push   eax
c002558f:	68 90 00 00 00       	push   0x90
c0025594:	6a 00                	push   0x0
c0025596:	53                   	push   ebx
c0025597:	e8 b4 b1 fd ff       	call   c0000750 <memset>
c002559c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00255a0:	b9 0c 00 00 00       	mov    ecx,0xc
c00255a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00255a7:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c00255ad:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00255b1:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00255b7:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00255bb:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00255bf:	48                   	dec    eax
c00255c0:	25 ff ff 3f 00       	and    eax,0x3fffff
c00255c5:	89 c1                	mov    ecx,eax
c00255c7:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00255cd:	25 00 00 c0 ff       	and    eax,0xffc00000
c00255d2:	09 c8                	or     eax,ecx
c00255d4:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00255da:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00255dd:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00255e4:	66 25 00 7f          	and    ax,0x7f00
c00255e8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00255ec:	66 0d 27 80          	or     ax,0x8027
c00255f0:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c00255f4:	66 89 03             	mov    WORD PTR [ebx],ax
c00255f7:	89 d0                	mov    eax,edx
c00255f9:	c1 ea 18             	shr    edx,0x18
c00255fc:	c1 e8 10             	shr    eax,0x10
c00255ff:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025602:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025605:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0025609:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002560c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025610:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025613:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0025617:	83 c4 10             	add    esp,0x10
c002561a:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002561e:	31 c0                	xor    eax,eax
c0025620:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0025624:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c002562a:	80 e2 88             	and    dl,0x88
c002562d:	74 0a                	je     c0025639 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c002562f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025634:	74 0a                	je     c0025640 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0025636:	40                   	inc    eax
c0025637:	eb eb                	jmp    c0025624 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0025639:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002563e:	75 0f                	jne    c002564f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0025640:	83 ec 0c             	sub    esp,0xc
c0025643:	68 2d d0 02 c0       	push   0xc002d02d
c0025648:	e8 8c 4d ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c002564d:	eb 3f                	jmp    c002568e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c002564f:	ba 01 00 00 00       	mov    edx,0x1
c0025654:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025658:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002565c:	d3 e2                	shl    edx,cl
c002565e:	c1 e0 07             	shl    eax,0x7
c0025661:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0025667:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002566b:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0025671:	85 ca                	test   edx,ecx
c0025673:	74 23                	je     c0025698 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0025675:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c002567b:	0f ba e1 1e          	bt     ecx,0x1e
c002567f:	73 ea                	jae    c002566b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0025681:	83 ec 0c             	sub    esp,0xc
c0025684:	68 bf d0 02 c0       	push   0xc002d0bf
c0025689:	e8 ad d3 fe ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c002568e:	83 c4 10             	add    esp,0x10
c0025691:	b8 01 00 00 00       	mov    eax,0x1
c0025696:	eb 36                	jmp    c00256ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025698:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c002569e:	0f ba e0 1e          	bt     eax,0x1e
c00256a2:	73 0a                	jae    c00256ae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c00256a4:	83 ec 0c             	sub    esp,0xc
c00256a7:	68 d2 d0 02 c0       	push   0xc002d0d2
c00256ac:	eb db                	jmp    c0025689 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c00256ae:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c00256b3:	74 17                	je     c00256cc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c00256b5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00256ba:	74 10                	je     c00256cc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c00256bc:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c00256c2:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00256c6:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00256ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00256cc:	31 c0                	xor    eax,eax
c00256ce:	83 c4 2c             	add    esp,0x2c
c00256d1:	5b                   	pop    ebx
c00256d2:	5e                   	pop    esi
c00256d3:	5f                   	pop    edi
c00256d4:	5d                   	pop    ebp
c00256d5:	c3                   	ret    

c00256d6 <SATAPI::eject()>:
c00256d6:	57                   	push   edi
c00256d7:	b9 03 00 00 00       	mov    ecx,0x3
c00256dc:	53                   	push   ebx
c00256dd:	83 ec 14             	sub    esp,0x14
c00256e0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00256e4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00256e8:	fc                   	cld    
c00256e9:	31 c0                	xor    eax,eax
c00256eb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00256ed:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00256f2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00256f7:	50                   	push   eax
c00256f8:	6a 00                	push   0x0
c00256fa:	6a 00                	push   0x0
c00256fc:	6a 00                	push   0x0
c00256fe:	6a 00                	push   0x0
c0025700:	6a 02                	push   0x2
c0025702:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025706:	50                   	push   eax
c0025707:	53                   	push   ebx
c0025708:	e8 c1 fd ff ff       	call   c00254ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002570d:	83 c4 14             	add    esp,0x14
c0025710:	53                   	push   ebx
c0025711:	e8 6e fd ff ff       	call   c0025484 <SATAPI::diskRemoved()>
c0025716:	83 c4 24             	add    esp,0x24
c0025719:	31 c0                	xor    eax,eax
c002571b:	5b                   	pop    ebx
c002571c:	5f                   	pop    edi
c002571d:	c3                   	ret    

c002571e <SATAPI::detectMedia()>:
c002571e:	56                   	push   esi
c002571f:	53                   	push   ebx
c0025720:	83 ec 28             	sub    esp,0x28
c0025723:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025727:	6a 0c                	push   0xc
c0025729:	6a 00                	push   0x0
c002572b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002572f:	56                   	push   esi
c0025730:	e8 1b b0 fd ff       	call   c0000750 <memset>
c0025735:	83 c4 0c             	add    esp,0xc
c0025738:	6a 00                	push   0x0
c002573a:	6a 00                	push   0x0
c002573c:	6a 00                	push   0x0
c002573e:	6a 00                	push   0x0
c0025740:	6a 00                	push   0x0
c0025742:	56                   	push   esi
c0025743:	53                   	push   ebx
c0025744:	e8 85 fd ff ff       	call   c00254ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025749:	83 c4 1c             	add    esp,0x1c
c002574c:	6a 0c                	push   0xc
c002574e:	6a 00                	push   0x0
c0025750:	56                   	push   esi
c0025751:	e8 fa af fd ff       	call   c0000750 <memset>
c0025756:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002575b:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025760:	83 c4 0c             	add    esp,0xc
c0025763:	6a 01                	push   0x1
c0025765:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025769:	50                   	push   eax
c002576a:	6a 00                	push   0x0
c002576c:	6a 00                	push   0x0
c002576e:	6a 12                	push   0x12
c0025770:	56                   	push   esi
c0025771:	53                   	push   ebx
c0025772:	e8 57 fd ff ff       	call   c00254ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025777:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002577b:	83 c4 20             	add    esp,0x20
c002577e:	83 e0 7f             	and    eax,0x7f
c0025781:	3c 70                	cmp    al,0x70
c0025783:	74 15                	je     c002579a <SATAPI::detectMedia()+0x7c>
c0025785:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002578c:	75 0c                	jne    c002579a <SATAPI::detectMedia()+0x7c>
c002578e:	83 ec 0c             	sub    esp,0xc
c0025791:	53                   	push   ebx
c0025792:	e8 09 fd ff ff       	call   c00254a0 <SATAPI::diskInserted()>
c0025797:	83 c4 10             	add    esp,0x10
c002579a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002579e:	83 e0 0f             	and    eax,0xf
c00257a1:	3c 02                	cmp    al,0x2
c00257a3:	75 1b                	jne    c00257c0 <SATAPI::detectMedia()+0xa2>
c00257a5:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00257aa:	75 2d                	jne    c00257d9 <SATAPI::detectMedia()+0xbb>
c00257ac:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00257b3:	74 24                	je     c00257d9 <SATAPI::detectMedia()+0xbb>
c00257b5:	83 ec 0c             	sub    esp,0xc
c00257b8:	53                   	push   ebx
c00257b9:	e8 c6 fc ff ff       	call   c0025484 <SATAPI::diskRemoved()>
c00257be:	eb 16                	jmp    c00257d6 <SATAPI::detectMedia()+0xb8>
c00257c0:	84 c0                	test   al,al
c00257c2:	75 15                	jne    c00257d9 <SATAPI::detectMedia()+0xbb>
c00257c4:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00257cb:	75 0c                	jne    c00257d9 <SATAPI::detectMedia()+0xbb>
c00257cd:	83 ec 0c             	sub    esp,0xc
c00257d0:	53                   	push   ebx
c00257d1:	e8 ca fc ff ff       	call   c00254a0 <SATAPI::diskInserted()>
c00257d6:	83 c4 10             	add    esp,0x10
c00257d9:	83 c4 24             	add    esp,0x24
c00257dc:	5b                   	pop    ebx
c00257dd:	5e                   	pop    esi
c00257de:	c3                   	ret    
c00257df:	90                   	nop

c00257e0 <SATAPI::open(int, int, void*)>:
c00257e0:	56                   	push   esi
c00257e1:	53                   	push   ebx
c00257e2:	50                   	push   eax
c00257e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00257e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00257eb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00257f5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00257fb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025805:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025809:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025813:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025819:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025820:	e8 ba a5 fe ff       	call   c000fddf <Phys::allocatePage()>
c0025825:	89 c6                	mov    esi,eax
c0025827:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002582d:	81 c6 00 10 00 00    	add    esi,0x1000
c0025833:	e8 a7 a5 fe ff       	call   c000fddf <Phys::allocatePage()>
c0025838:	39 c6                	cmp    esi,eax
c002583a:	74 10                	je     c002584c <SATAPI::open(int, int, void*)+0x6c>
c002583c:	83 ec 0c             	sub    esp,0xc
c002583f:	68 e7 d0 02 c0       	push   0xc002d0e7
c0025844:	e8 90 4b ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c0025849:	83 c4 10             	add    esp,0x10
c002584c:	83 ec 0c             	sub    esp,0xc
c002584f:	6a 02                	push   0x2
c0025851:	e8 13 be fe ff       	call   c0011669 <Virt::allocateKernelVirtualPages(int)>
c0025856:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002585c:	6a 03                	push   0x3
c002585e:	50                   	push   eax
c002585f:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025865:	ff 35 50 e8 02 c0    	push   DWORD PTR ds:0xc002e850
c002586b:	e8 a0 c4 fe ff       	call   c0011d10 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025870:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025877:	83 c4 14             	add    esp,0x14
c002587a:	53                   	push   ebx
c002587b:	e8 9e fe ff ff       	call   c002571e <SATAPI::detectMedia()>
c0025880:	83 c4 14             	add    esp,0x14
c0025883:	31 c0                	xor    eax,eax
c0025885:	5b                   	pop    ebx
c0025886:	5e                   	pop    esi
c0025887:	c3                   	ret    

c0025888 <SATAPI::read(unsigned long long, int, void*)>:
c0025888:	55                   	push   ebp
c0025889:	57                   	push   edi
c002588a:	56                   	push   esi
c002588b:	53                   	push   ebx
c002588c:	83 ec 1c             	sub    esp,0x1c
c002588f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025893:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025897:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002589b:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00258a2:	74 19                	je     c00258bd <SATAPI::read(unsigned long long, int, void*)+0x35>
c00258a4:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00258a9:	7e 2e                	jle    c00258d9 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00258ab:	83 ec 0c             	sub    esp,0xc
c00258ae:	68 fd d0 02 c0       	push   0xc002d0fd
c00258b3:	e8 21 4b ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c00258b8:	83 c4 10             	add    esp,0x10
c00258bb:	eb 1c                	jmp    c00258d9 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00258bd:	83 ec 0c             	sub    esp,0xc
c00258c0:	55                   	push   ebp
c00258c1:	e8 58 fe ff ff       	call   c002571e <SATAPI::detectMedia()>
c00258c6:	83 c4 10             	add    esp,0x10
c00258c9:	b8 02 00 00 00       	mov    eax,0x2
c00258ce:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00258d5:	75 cd                	jne    c00258a4 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00258d7:	eb 49                	jmp    c0025922 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00258d9:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00258dd:	b9 03 00 00 00       	mov    ecx,0x3
c00258e2:	fc                   	cld    
c00258e3:	31 c0                	xor    eax,eax
c00258e5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00258e7:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00258ec:	89 d8                	mov    eax,ebx
c00258ee:	86 e0                	xchg   al,ah
c00258f0:	c1 c0 10             	rol    eax,0x10
c00258f3:	86 e0                	xchg   al,ah
c00258f5:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00258f9:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00258fd:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025901:	50                   	push   eax
c0025902:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025906:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002590a:	56                   	push   esi
c002590b:	53                   	push   ebx
c002590c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025910:	c1 e0 0b             	shl    eax,0xb
c0025913:	50                   	push   eax
c0025914:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025918:	50                   	push   eax
c0025919:	55                   	push   ebp
c002591a:	e8 af fb ff ff       	call   c00254ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002591f:	83 c4 20             	add    esp,0x20
c0025922:	83 c4 1c             	add    esp,0x1c
c0025925:	5b                   	pop    ebx
c0025926:	5e                   	pop    esi
c0025927:	5f                   	pop    edi
c0025928:	5d                   	pop    ebp
c0025929:	c3                   	ret    

c002592a <AVX::open(int, int, void*)>:
c002592a:	83 ec 0c             	sub    esp,0xc
c002592d:	e8 46 11 00 00       	call   c0026a78 <avxInit>
c0025932:	b8 00 00 00 00       	mov    eax,0x0
c0025937:	83 c4 0c             	add    esp,0xc
c002593a:	c3                   	ret    
c002593b:	90                   	nop

c002593c <AVX::close(int, int, void*)>:
c002593c:	83 ec 0c             	sub    esp,0xc
c002593f:	e8 35 11 00 00       	call   c0026a79 <avxClose>
c0025944:	b8 00 00 00 00       	mov    eax,0x0
c0025949:	83 c4 0c             	add    esp,0xc
c002594c:	c3                   	ret    
c002594d:	90                   	nop

c002594e <AVX::available()>:
c002594e:	83 ec 0c             	sub    esp,0xc
c0025951:	e8 1a 11 00 00       	call   c0026a70 <avxDetect>
c0025956:	85 c0                	test   eax,eax
c0025958:	0f 95 c0             	setne  al
c002595b:	83 c4 0c             	add    esp,0xc
c002595e:	c3                   	ret    
c002595f:	90                   	nop

c0025960 <AVX::save(void*)>:
c0025960:	83 ec 0c             	sub    esp,0xc
c0025963:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025967:	83 ec 0c             	sub    esp,0xc
c002596a:	50                   	push   eax
c002596b:	e8 06 11 00 00       	call   c0026a76 <avxSave>
c0025970:	83 c4 10             	add    esp,0x10
c0025973:	90                   	nop
c0025974:	83 c4 0c             	add    esp,0xc
c0025977:	c3                   	ret    

c0025978 <AVX::load(void*)>:
c0025978:	83 ec 0c             	sub    esp,0xc
c002597b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002597f:	83 ec 0c             	sub    esp,0xc
c0025982:	50                   	push   eax
c0025983:	e8 ef 10 00 00       	call   c0026a77 <avxLoad>
c0025988:	83 c4 10             	add    esp,0x10
c002598b:	90                   	nop
c002598c:	83 c4 0c             	add    esp,0xc
c002598f:	c3                   	ret    

c0025990 <AVX::AVX()>:
c0025990:	83 ec 0c             	sub    esp,0xc
c0025993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025997:	83 ec 08             	sub    esp,0x8
c002599a:	68 60 d1 02 c0       	push   0xc002d160
c002599f:	50                   	push   eax
c00259a0:	e8 e3 e9 fe ff       	call   c0014388 <FPU::FPU(char const*)>
c00259a5:	83 c4 10             	add    esp,0x10
c00259a8:	ba 70 d1 02 c0       	mov    edx,0xc002d170
c00259ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259b1:	89 10                	mov    DWORD PTR [eax],edx
c00259b3:	90                   	nop
c00259b4:	83 c4 0c             	add    esp,0xc
c00259b7:	c3                   	ret    

c00259b8 <MMX::available()>:
c00259b8:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c00259bd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00259c3:	83 e0 20             	and    eax,0x20
c00259c6:	84 c0                	test   al,al
c00259c8:	0f 95 c0             	setne  al
c00259cb:	c3                   	ret    

c00259cc <MMX::open(int, int, void*)>:
c00259cc:	83 ec 0c             	sub    esp,0xc
c00259cf:	e8 2e 11 00 00       	call   c0026b02 <x87Init>
c00259d4:	b8 00 00 00 00       	mov    eax,0x0
c00259d9:	83 c4 0c             	add    esp,0xc
c00259dc:	c3                   	ret    
c00259dd:	90                   	nop

c00259de <MMX::close(int, int, void*)>:
c00259de:	83 ec 0c             	sub    esp,0xc
c00259e1:	e8 36 11 00 00       	call   c0026b1c <x87Close>
c00259e6:	b8 00 00 00 00       	mov    eax,0x0
c00259eb:	83 c4 0c             	add    esp,0xc
c00259ee:	c3                   	ret    
c00259ef:	90                   	nop

c00259f0 <MMX::save(void*)>:
c00259f0:	83 ec 0c             	sub    esp,0xc
c00259f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00259f7:	83 ec 0c             	sub    esp,0xc
c00259fa:	50                   	push   eax
c00259fb:	e8 f1 10 00 00       	call   c0026af1 <x87Save>
c0025a00:	83 c4 10             	add    esp,0x10
c0025a03:	90                   	nop
c0025a04:	83 c4 0c             	add    esp,0xc
c0025a07:	c3                   	ret    

c0025a08 <MMX::load(void*)>:
c0025a08:	83 ec 0c             	sub    esp,0xc
c0025a0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025a0f:	83 ec 0c             	sub    esp,0xc
c0025a12:	50                   	push   eax
c0025a13:	e8 e2 10 00 00       	call   c0026afa <x87Load>
c0025a18:	83 c4 10             	add    esp,0x10
c0025a1b:	90                   	nop
c0025a1c:	83 c4 0c             	add    esp,0xc
c0025a1f:	c3                   	ret    

c0025a20 <MMX::MMX()>:
c0025a20:	83 ec 0c             	sub    esp,0xc
c0025a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a27:	83 ec 08             	sub    esp,0x8
c0025a2a:	68 a0 d1 02 c0       	push   0xc002d1a0
c0025a2f:	50                   	push   eax
c0025a30:	e8 53 e9 fe ff       	call   c0014388 <FPU::FPU(char const*)>
c0025a35:	83 c4 10             	add    esp,0x10
c0025a38:	ba b0 d1 02 c0       	mov    edx,0xc002d1b0
c0025a3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a41:	89 10                	mov    DWORD PTR [eax],edx
c0025a43:	90                   	nop
c0025a44:	83 c4 0c             	add    esp,0xc
c0025a47:	c3                   	ret    

c0025a48 <SSE::open(int, int, void*)>:
c0025a48:	83 ec 0c             	sub    esp,0xc
c0025a4b:	e8 64 10 00 00       	call   c0026ab4 <sseInit>
c0025a50:	b8 00 00 00 00       	mov    eax,0x0
c0025a55:	83 c4 0c             	add    esp,0xc
c0025a58:	c3                   	ret    
c0025a59:	90                   	nop

c0025a5a <SSE::close(int, int, void*)>:
c0025a5a:	83 ec 0c             	sub    esp,0xc
c0025a5d:	e8 62 10 00 00       	call   c0026ac4 <sseClose>
c0025a62:	b8 00 00 00 00       	mov    eax,0x0
c0025a67:	83 c4 0c             	add    esp,0xc
c0025a6a:	c3                   	ret    
c0025a6b:	90                   	nop

c0025a6c <SSE::available()>:
c0025a6c:	83 ec 1c             	sub    esp,0x1c
c0025a6f:	e8 1c 10 00 00       	call   c0026a90 <absolutelyNoChanceInHell>
c0025a74:	85 c0                	test   eax,eax
c0025a76:	0f 95 c0             	setne  al
c0025a79:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025a7d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025a81:	83 c4 1c             	add    esp,0x1c
c0025a84:	c3                   	ret    
c0025a85:	90                   	nop

c0025a86 <SSE::save(void*)>:
c0025a86:	83 ec 0c             	sub    esp,0xc
c0025a89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025a8d:	83 ec 0c             	sub    esp,0xc
c0025a90:	50                   	push   eax
c0025a91:	e8 12 10 00 00       	call   c0026aa8 <sseSave>
c0025a96:	83 c4 10             	add    esp,0x10
c0025a99:	90                   	nop
c0025a9a:	83 c4 0c             	add    esp,0xc
c0025a9d:	c3                   	ret    

c0025a9e <SSE::load(void*)>:
c0025a9e:	83 ec 0c             	sub    esp,0xc
c0025aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025aa5:	83 ec 0c             	sub    esp,0xc
c0025aa8:	50                   	push   eax
c0025aa9:	e8 00 10 00 00       	call   c0026aae <sseLoad>
c0025aae:	83 c4 10             	add    esp,0x10
c0025ab1:	90                   	nop
c0025ab2:	83 c4 0c             	add    esp,0xc
c0025ab5:	c3                   	ret    

c0025ab6 <SSE::SSE()>:
c0025ab6:	83 ec 0c             	sub    esp,0xc
c0025ab9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025abd:	83 ec 08             	sub    esp,0x8
c0025ac0:	68 e0 d1 02 c0       	push   0xc002d1e0
c0025ac5:	50                   	push   eax
c0025ac6:	e8 bd e8 fe ff       	call   c0014388 <FPU::FPU(char const*)>
c0025acb:	83 c4 10             	add    esp,0x10
c0025ace:	ba f0 d1 02 c0       	mov    edx,0xc002d1f0
c0025ad3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ad7:	89 10                	mov    DWORD PTR [eax],edx
c0025ad9:	90                   	nop
c0025ada:	83 c4 0c             	add    esp,0xc
c0025add:	c3                   	ret    

c0025ade <x87::open(int, int, void*)>:
c0025ade:	83 ec 0c             	sub    esp,0xc
c0025ae1:	e8 1c 10 00 00       	call   c0026b02 <x87Init>
c0025ae6:	b8 00 00 00 00       	mov    eax,0x0
c0025aeb:	83 c4 0c             	add    esp,0xc
c0025aee:	c3                   	ret    
c0025aef:	90                   	nop

c0025af0 <x87::close(int, int, void*)>:
c0025af0:	83 ec 0c             	sub    esp,0xc
c0025af3:	e8 24 10 00 00       	call   c0026b1c <x87Close>
c0025af8:	b8 00 00 00 00       	mov    eax,0x0
c0025afd:	83 c4 0c             	add    esp,0xc
c0025b00:	c3                   	ret    
c0025b01:	90                   	nop

c0025b02 <x87::available()>:
c0025b02:	83 ec 0c             	sub    esp,0xc
c0025b05:	e8 cc 0f 00 00       	call   c0026ad6 <x87Detect>
c0025b0a:	85 c0                	test   eax,eax
c0025b0c:	0f 95 c0             	setne  al
c0025b0f:	83 c4 0c             	add    esp,0xc
c0025b12:	c3                   	ret    
c0025b13:	90                   	nop

c0025b14 <x87::save(void*)>:
c0025b14:	83 ec 0c             	sub    esp,0xc
c0025b17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025b1b:	83 ec 0c             	sub    esp,0xc
c0025b1e:	50                   	push   eax
c0025b1f:	e8 cd 0f 00 00       	call   c0026af1 <x87Save>
c0025b24:	83 c4 10             	add    esp,0x10
c0025b27:	90                   	nop
c0025b28:	83 c4 0c             	add    esp,0xc
c0025b2b:	c3                   	ret    

c0025b2c <x87::load(void*)>:
c0025b2c:	83 ec 0c             	sub    esp,0xc
c0025b2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025b33:	83 ec 0c             	sub    esp,0xc
c0025b36:	50                   	push   eax
c0025b37:	e8 be 0f 00 00       	call   c0026afa <x87Load>
c0025b3c:	83 c4 10             	add    esp,0x10
c0025b3f:	90                   	nop
c0025b40:	83 c4 0c             	add    esp,0xc
c0025b43:	c3                   	ret    

c0025b44 <x87::x87()>:
c0025b44:	83 ec 0c             	sub    esp,0xc
c0025b47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b4b:	83 ec 08             	sub    esp,0x8
c0025b4e:	68 20 d2 02 c0       	push   0xc002d220
c0025b53:	50                   	push   eax
c0025b54:	e8 2f e8 fe ff       	call   c0014388 <FPU::FPU(char const*)>
c0025b59:	83 c4 10             	add    esp,0x10
c0025b5c:	ba 30 d2 02 c0       	mov    edx,0xc002d230
c0025b61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b65:	89 10                	mov    DWORD PTR [eax],edx
c0025b67:	90                   	nop
c0025b68:	83 c4 0c             	add    esp,0xc
c0025b6b:	c3                   	ret    

c0025b6c <APIC::disable()>:
c0025b6c:	90                   	nop
c0025b6d:	c3                   	ret    

c0025b6e <APIC::close(int, int, void*)>:
c0025b6e:	55                   	push   ebp
c0025b6f:	89 e5                	mov    ebp,esp
c0025b71:	83 ec 08             	sub    esp,0x8
c0025b74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b77:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b79:	83 c0 3c             	add    eax,0x3c
c0025b7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b7e:	83 ec 0c             	sub    esp,0xc
c0025b81:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b84:	ff d0                	call   eax
c0025b86:	83 c4 10             	add    esp,0x10
c0025b89:	b8 00 00 00 00       	mov    eax,0x0
c0025b8e:	c9                   	leave  
c0025b8f:	c3                   	ret    

c0025b90 <IOAPIC::close(int, int, void*)>:
c0025b90:	b8 00 00 00 00       	mov    eax,0x0
c0025b95:	c3                   	ret    

c0025b96 <APIC::io_wait()>:
c0025b96:	eb 00                	jmp    c0025b98 <APIC::io_wait()+0x2>
c0025b98:	eb 00                	jmp    c0025b9a <APIC::io_wait()+0x4>
c0025b9a:	90                   	nop
c0025b9b:	c3                   	ret    

c0025b9c <APIC::getBase()>:
c0025b9c:	55                   	push   ebp
c0025b9d:	89 e5                	mov    ebp,esp
c0025b9f:	83 ec 18             	sub    esp,0x18
c0025ba2:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0025ba7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025bad:	83 e0 08             	and    eax,0x8
c0025bb0:	84 c0                	test   al,al
c0025bb2:	75 07                	jne    c0025bbb <APIC::getBase()+0x1f>
c0025bb4:	b8 00 00 00 00       	mov    eax,0x0
c0025bb9:	eb 21                	jmp    c0025bdc <APIC::getBase()+0x40>
c0025bbb:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0025bc0:	83 ec 08             	sub    esp,0x8
c0025bc3:	6a 1b                	push   0x1b
c0025bc5:	50                   	push   eax
c0025bc6:	e8 b7 91 fe ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c0025bcb:	83 c4 10             	add    esp,0x10
c0025bce:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025bd1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025bd4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025bd7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025bdc:	c9                   	leave  
c0025bdd:	c3                   	ret    

c0025bde <APIC::eoi(unsigned char)>:
c0025bde:	55                   	push   ebp
c0025bdf:	89 e5                	mov    ebp,esp
c0025be1:	83 ec 28             	sub    esp,0x28
c0025be4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025be7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025bea:	83 ec 0c             	sub    esp,0xc
c0025bed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bf0:	e8 a7 ff ff ff       	call   c0025b9c <APIC::getBase()>
c0025bf5:	83 c4 10             	add    esp,0x10
c0025bf8:	05 b0 00 00 00       	add    eax,0xb0
c0025bfd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025c00:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025c03:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025c09:	90                   	nop
c0025c0a:	c9                   	leave  
c0025c0b:	c3                   	ret    

c0025c0c <APIC::open(int, int, void*)>:
c0025c0c:	55                   	push   ebp
c0025c0d:	89 e5                	mov    ebp,esp
c0025c0f:	57                   	push   edi
c0025c10:	56                   	push   esi
c0025c11:	53                   	push   ebx
c0025c12:	83 ec 2c             	sub    esp,0x2c
c0025c15:	83 ec 0c             	sub    esp,0xc
c0025c18:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c1b:	e8 7c ff ff ff       	call   c0025b9c <APIC::getBase()>
c0025c20:	83 c4 10             	add    esp,0x10
c0025c23:	89 c2                	mov    edx,eax
c0025c25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c28:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025c2e:	0f b6 f8             	movzx  edi,al
c0025c31:	89 d0                	mov    eax,edx
c0025c33:	ba 00 00 00 00       	mov    edx,0x0
c0025c38:	89 c1                	mov    ecx,eax
c0025c3a:	80 e5 ff             	and    ch,0xff
c0025c3d:	89 cb                	mov    ebx,ecx
c0025c3f:	0f b6 f2             	movzx  esi,dl
c0025c42:	89 d8                	mov    eax,ebx
c0025c44:	89 f2                	mov    edx,esi
c0025c46:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025c49:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025c4c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025c50:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025c54:	83 e0 00             	and    eax,0x0
c0025c57:	09 d0                	or     eax,edx
c0025c59:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025c5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c60:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025c66:	8d 50 01             	lea    edx,[eax+0x1]
c0025c69:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025c6c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025c72:	0f b6 d0             	movzx  edx,al
c0025c75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c78:	83 c2 08             	add    edx,0x8
c0025c7b:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025c7f:	0f b6 c9             	movzx  ecx,cl
c0025c82:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025c88:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025c8c:	83 ec 0c             	sub    esp,0xc
c0025c8f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c92:	e8 05 ff ff ff       	call   c0025b9c <APIC::getBase()>
c0025c97:	83 c4 10             	add    esp,0x10
c0025c9a:	05 f0 00 00 00       	add    eax,0xf0
c0025c9f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025ca2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025ca5:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ca7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025caa:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025cb1:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025cb8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025cbb:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025cbe:	89 10                	mov    DWORD PTR [eax],edx
c0025cc0:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025cc7:	a1 90 ef 02 c0       	mov    eax,ds:0xc002ef90
c0025ccc:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025ccf:	7d 7c                	jge    c0025d4d <APIC::open(int, int, void*)+0x141>
c0025cd1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025cd4:	8b 04 85 a0 ef 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1060]
c0025cdb:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025cde:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025ce1:	8b 04 85 a0 ef 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1060]
c0025ce8:	c1 e8 08             	shr    eax,0x8
c0025ceb:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025cef:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025cf2:	8b 04 85 a0 ef 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1060]
c0025cf9:	c1 e8 18             	shr    eax,0x18
c0025cfc:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025cff:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025d03:	75 40                	jne    c0025d45 <APIC::open(int, int, void*)+0x139>
c0025d05:	83 ec 0c             	sub    esp,0xc
c0025d08:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d0b:	e8 8c fe ff ff       	call   c0025b9c <APIC::getBase()>
c0025d10:	83 c4 10             	add    esp,0x10
c0025d13:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025d17:	75 07                	jne    c0025d20 <APIC::open(int, int, void*)+0x114>
c0025d19:	ba 60 03 00 00       	mov    edx,0x360
c0025d1e:	eb 05                	jmp    c0025d25 <APIC::open(int, int, void*)+0x119>
c0025d20:	ba 50 03 00 00       	mov    edx,0x350
c0025d25:	01 d0                	add    eax,edx
c0025d27:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025d2a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025d2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0025d2f:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025d32:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025d39:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025d3d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025d40:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025d43:	89 10                	mov    DWORD PTR [eax],edx
c0025d45:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025d48:	e9 7a ff ff ff       	jmp    c0025cc7 <APIC::open(int, int, void*)+0xbb>
c0025d4d:	b8 00 00 00 00       	mov    eax,0x0
c0025d52:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025d55:	5b                   	pop    ebx
c0025d56:	5e                   	pop    esi
c0025d57:	5f                   	pop    edi
c0025d58:	5d                   	pop    ebp
c0025d59:	c3                   	ret    

c0025d5a <IOAPIC::IOAPIC()>:
c0025d5a:	83 ec 0c             	sub    esp,0xc
c0025d5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d61:	83 ec 08             	sub    esp,0x8
c0025d64:	68 60 d2 02 c0       	push   0xc002d260
c0025d69:	50                   	push   eax
c0025d6a:	e8 09 e3 fe ff       	call   c0014078 <Device::Device(char const*)>
c0025d6f:	83 c4 10             	add    esp,0x10
c0025d72:	ba 88 d3 02 c0       	mov    edx,0xc002d388
c0025d77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d7b:	89 10                	mov    DWORD PTR [eax],edx
c0025d7d:	90                   	nop
c0025d7e:	83 c4 0c             	add    esp,0xc
c0025d81:	c3                   	ret    

c0025d82 <APIC::APIC()>:
c0025d82:	53                   	push   ebx
c0025d83:	83 ec 18             	sub    esp,0x18
c0025d86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025d8a:	83 ec 08             	sub    esp,0x8
c0025d8d:	68 68 d2 02 c0       	push   0xc002d268
c0025d92:	50                   	push   eax
c0025d93:	e8 4a ea fe ff       	call   c00147e2 <InterruptController::InterruptController(char const*)>
c0025d98:	83 c4 10             	add    esp,0x10
c0025d9b:	ba 40 d3 02 c0       	mov    edx,0xc002d340
c0025da0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025da4:	89 10                	mov    DWORD PTR [eax],edx
c0025da6:	a0 60 0a 03 c0       	mov    al,ds:0xc0030a60
c0025dab:	83 f0 01             	xor    eax,0x1
c0025dae:	84 c0                	test   al,al
c0025db0:	0f 84 a1 00 00 00    	je     c0025e57 <APIC::APIC()+0xd5>
c0025db6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025dbb:	a0 40 f0 02 c0       	mov    al,ds:0xc002f040
c0025dc0:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025dc4:	0f 83 86 00 00 00    	jae    c0025e50 <APIC::APIC()+0xce>
c0025dca:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025dd2:	83 ec 0c             	sub    esp,0xc
c0025dd5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025dd9:	e8 05 9c fe ff       	call   c000f9e3 <malloc>
c0025dde:	83 c4 10             	add    esp,0x10
c0025de1:	89 c3                	mov    ebx,eax
c0025de3:	83 ec 0c             	sub    esp,0xc
c0025de6:	53                   	push   ebx
c0025de7:	e8 6e ff ff ff       	call   c0025d5a <IOAPIC::IOAPIC()>
c0025dec:	83 c4 10             	add    esp,0x10
c0025def:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025df3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025df8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025dfc:	89 14 85 40 0a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf5c0],edx
c0025e03:	a1 20 0a 03 c0       	mov    eax,ds:0xc0030a20
c0025e08:	40                   	inc    eax
c0025e09:	a3 20 0a 03 c0       	mov    ds:0xc0030a20,eax
c0025e0e:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0025e13:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025e19:	83 ec 08             	sub    esp,0x8
c0025e1c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025e20:	50                   	push   eax
c0025e21:	e8 4e e0 fe ff       	call   c0013e74 <Device::addChild(Device*)>
c0025e26:	83 c4 10             	add    esp,0x10
c0025e29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025e2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e2f:	83 c0 08             	add    eax,0x8
c0025e32:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e34:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025e39:	6a 00                	push   0x0
c0025e3b:	6a 00                	push   0x0
c0025e3d:	52                   	push   edx
c0025e3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025e42:	ff d0                	call   eax
c0025e44:	83 c4 10             	add    esp,0x10
c0025e47:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025e4b:	e9 6b ff ff ff       	jmp    c0025dbb <APIC::APIC()+0x39>
c0025e50:	c6 05 60 0a 03 c0 01 	mov    BYTE PTR ds:0xc0030a60,0x1
c0025e57:	90                   	nop
c0025e58:	83 c4 18             	add    esp,0x18
c0025e5b:	5b                   	pop    ebx
c0025e5c:	c3                   	ret    
c0025e5d:	90                   	nop

c0025e5e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025e5e:	55                   	push   ebp
c0025e5f:	89 e5                	mov    ebp,esp
c0025e61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e64:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025e6a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025e6d:	72 1d                	jb     c0025e8c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025e6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e72:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025e78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e7b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025e81:	01 d0                	add    eax,edx
c0025e83:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025e86:	73 04                	jae    c0025e8c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025e88:	b0 01                	mov    al,0x1
c0025e8a:	eb 02                	jmp    c0025e8e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025e8c:	b0 00                	mov    al,0x0
c0025e8e:	5d                   	pop    ebp
c0025e8f:	c3                   	ret    

c0025e90 <IOAPIC::read(int)>:
c0025e90:	55                   	push   ebp
c0025e91:	89 e5                	mov    ebp,esp
c0025e93:	83 ec 10             	sub    esp,0x10
c0025e96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e99:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025e9f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025ea2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ea5:	0f b6 d0             	movzx  edx,al
c0025ea8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025eab:	89 10                	mov    DWORD PTR [eax],edx
c0025ead:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025eb0:	83 c0 10             	add    eax,0x10
c0025eb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0025eb5:	c9                   	leave  
c0025eb6:	c3                   	ret    
c0025eb7:	90                   	nop

c0025eb8 <IOAPIC::open(int, int, void*)>:
c0025eb8:	55                   	push   ebp
c0025eb9:	89 e5                	mov    ebp,esp
c0025ebb:	57                   	push   edi
c0025ebc:	56                   	push   esi
c0025ebd:	53                   	push   ebx
c0025ebe:	83 ec 0c             	sub    esp,0xc
c0025ec1:	83 ec 0c             	sub    esp,0xc
c0025ec4:	68 93 d2 02 c0       	push   0xc002d293
c0025ec9:	e8 6d cb fe ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0025ece:	83 c4 10             	add    esp,0x10
c0025ed1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ed4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ed7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025edd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ee0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025ee6:	8b 14 85 80 f0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0f80]
c0025eed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ef0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025ef6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ef9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025eff:	8b 14 85 00 f1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0f00]
c0025f06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f09:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025f0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f12:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025f18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f1b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025f21:	0f b6 f8             	movzx  edi,al
c0025f24:	89 d0                	mov    eax,edx
c0025f26:	ba 00 00 00 00       	mov    edx,0x0
c0025f2b:	89 c1                	mov    ecx,eax
c0025f2d:	80 e5 ff             	and    ch,0xff
c0025f30:	89 cb                	mov    ebx,ecx
c0025f32:	0f b6 f2             	movzx  esi,dl
c0025f35:	89 d8                	mov    eax,ebx
c0025f37:	89 f2                	mov    edx,esi
c0025f39:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025f3c:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025f3f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025f43:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025f47:	83 e0 00             	and    eax,0x0
c0025f4a:	09 d0                	or     eax,edx
c0025f4c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025f50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f53:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025f59:	8d 50 01             	lea    edx,[eax+0x1]
c0025f5c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025f5f:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025f65:	0f b6 d0             	movzx  edx,al
c0025f68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f6b:	83 c2 08             	add    edx,0x8
c0025f6e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025f72:	0f b6 c9             	movzx  ecx,cl
c0025f75:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025f7b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025f7f:	83 ec 08             	sub    esp,0x8
c0025f82:	6a 01                	push   0x1
c0025f84:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f87:	e8 04 ff ff ff       	call   c0025e90 <IOAPIC::read(int)>
c0025f8c:	83 c4 10             	add    esp,0x10
c0025f8f:	c1 f8 10             	sar    eax,0x10
c0025f92:	0f b6 c0             	movzx  eax,al
c0025f95:	8d 50 01             	lea    edx,[eax+0x1]
c0025f98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f9b:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025fa1:	b8 00 00 00 00       	mov    eax,0x0
c0025fa6:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025fa9:	5b                   	pop    ebx
c0025faa:	5e                   	pop    esi
c0025fab:	5f                   	pop    edi
c0025fac:	5d                   	pop    ebp
c0025fad:	c3                   	ret    

c0025fae <IOAPIC::write(int, int)>:
c0025fae:	55                   	push   ebp
c0025faf:	89 e5                	mov    ebp,esp
c0025fb1:	83 ec 10             	sub    esp,0x10
c0025fb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025fb7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025fbd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025fc0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fc3:	0f b6 d0             	movzx  edx,al
c0025fc6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025fc9:	89 10                	mov    DWORD PTR [eax],edx
c0025fcb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025fce:	8d 50 10             	lea    edx,[eax+0x10]
c0025fd1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025fd4:	89 02                	mov    DWORD PTR [edx],eax
c0025fd6:	90                   	nop
c0025fd7:	c9                   	leave  
c0025fd8:	c3                   	ret    
c0025fd9:	90                   	nop

c0025fda <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025fda:	55                   	push   ebp
c0025fdb:	89 e5                	mov    ebp,esp
c0025fdd:	53                   	push   ebx
c0025fde:	83 ec 2c             	sub    esp,0x2c
c0025fe1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fe4:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025fe7:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025fea:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025fed:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025ff0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025ff3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025ff6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025ff9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025ffc:	88 d8                	mov    al,bl
c0025ffe:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0026001:	88 c8                	mov    al,cl
c0026003:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0026006:	88 d0                	mov    al,dl
c0026008:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002600b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002600f:	83 c0 08             	add    eax,0x8
c0026012:	01 c0                	add    eax,eax
c0026014:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026017:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002601b:	83 c0 08             	add    eax,0x8
c002601e:	01 c0                	add    eax,eax
c0026020:	40                   	inc    eax
c0026021:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026024:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026027:	50                   	push   eax
c0026028:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002602b:	e8 60 fe ff ff       	call   c0025e90 <IOAPIC::read(int)>
c0026030:	83 c4 08             	add    esp,0x8
c0026033:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0026036:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002603d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0026040:	c1 e0 18             	shl    eax,0x18
c0026043:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0026046:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026049:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002604c:	52                   	push   edx
c002604d:	50                   	push   eax
c002604e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026051:	e8 58 ff ff ff       	call   c0025fae <IOAPIC::write(int, int)>
c0026056:	83 c4 0c             	add    esp,0xc
c0026059:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002605c:	50                   	push   eax
c002605d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026060:	e8 2b fe ff ff       	call   c0025e90 <IOAPIC::read(int)>
c0026065:	83 c4 08             	add    esp,0x8
c0026068:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002606b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0026072:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0026079:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0026080:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026084:	74 09                	je     c002608f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0026086:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002608d:	eb 07                	jmp    c0026096 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c002608f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0026096:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c002609a:	74 09                	je     c00260a5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c002609c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00260a3:	eb 07                	jmp    c00260ac <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00260a5:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00260ac:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00260b3:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00260b7:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00260ba:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00260bd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00260c0:	52                   	push   edx
c00260c1:	50                   	push   eax
c00260c2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260c5:	e8 e4 fe ff ff       	call   c0025fae <IOAPIC::write(int, int)>
c00260ca:	83 c4 0c             	add    esp,0xc
c00260cd:	90                   	nop
c00260ce:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00260d1:	c9                   	leave  
c00260d2:	c3                   	ret    
c00260d3:	90                   	nop

c00260d4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00260d4:	55                   	push   ebp
c00260d5:	89 e5                	mov    ebp,esp
c00260d7:	57                   	push   edi
c00260d8:	56                   	push   esi
c00260d9:	53                   	push   ebx
c00260da:	83 ec 2c             	sub    esp,0x2c
c00260dd:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00260e0:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00260e3:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00260e7:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00260eb:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00260ef:	74 5a                	je     c002614b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00260f1:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00260f5:	7f 44                	jg     c002613b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00260f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00260fa:	05 40 d9 02 c0       	add    eax,0xc002d940
c00260ff:	8a 00                	mov    al,BYTE PTR [eax]
c0026101:	0f b6 c0             	movzx  eax,al
c0026104:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026107:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002610a:	66 8b 84 00 20 f0 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd0fe0]
c0026112:	0f b7 c0             	movzx  eax,ax
c0026115:	83 e0 02             	and    eax,0x2
c0026118:	85 c0                	test   eax,eax
c002611a:	74 04                	je     c0026120 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c002611c:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0026120:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026123:	66 8b 84 00 20 f0 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd0fe0]
c002612b:	0f b7 c0             	movzx  eax,ax
c002612e:	83 e0 08             	and    eax,0x8
c0026131:	85 c0                	test   eax,eax
c0026133:	74 16                	je     c002614b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026135:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0026139:	eb 10                	jmp    c002614b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002613b:	83 ec 0c             	sub    esp,0xc
c002613e:	68 a4 d2 02 c0       	push   0xc002d2a4
c0026143:	e8 91 42 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c0026148:	83 c4 10             	add    esp,0x10
c002614b:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c002614f:	a1 20 0a 03 c0       	mov    eax,ds:0xc0030a20
c0026154:	83 ec 08             	sub    esp,0x8
c0026157:	50                   	push   eax
c0026158:	68 dc d2 02 c0       	push   0xc002d2dc
c002615d:	e8 d9 c8 fe ff       	call   c0012a3b <Dbg::kprintf(char const*, ...)>
c0026162:	83 c4 10             	add    esp,0x10
c0026165:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c002616c:	a1 20 0a 03 c0       	mov    eax,ds:0xc0030a20
c0026171:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0026174:	7d 67                	jge    c00261dd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0026176:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026179:	8b 04 85 40 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf5c0]
c0026180:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026183:	83 ec 08             	sub    esp,0x8
c0026186:	52                   	push   edx
c0026187:	50                   	push   eax
c0026188:	e8 d1 fc ff ff       	call   c0025e5e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c002618d:	83 c4 10             	add    esp,0x10
c0026190:	84 c0                	test   al,al
c0026192:	74 44                	je     c00261d8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0026194:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026197:	8b 1c 85 40 0a 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcf5c0]
c002619e:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00261a2:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00261a5:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00261a9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00261ac:	83 c0 20             	add    eax,0x20
c00261af:	0f b6 f0             	movzx  esi,al
c00261b2:	b8 00 00 00 00       	mov    eax,0x0
c00261b7:	99                   	cdq    
c00261b8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00261bb:	0f b6 c9             	movzx  ecx,cl
c00261be:	83 ec 04             	sub    esp,0x4
c00261c1:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00261c4:	57                   	push   edi
c00261c5:	56                   	push   esi
c00261c6:	52                   	push   edx
c00261c7:	50                   	push   eax
c00261c8:	51                   	push   ecx
c00261c9:	53                   	push   ebx
c00261ca:	e8 0b fe ff ff       	call   c0025fda <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00261cf:	83 c4 20             	add    esp,0x20
c00261d2:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00261d6:	eb 05                	jmp    c00261dd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00261d8:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00261db:	eb 8f                	jmp    c002616c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00261dd:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00261e0:	83 f0 01             	xor    eax,0x1
c00261e3:	84 c0                	test   al,al
c00261e5:	74 10                	je     c00261f7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00261e7:	83 ec 0c             	sub    esp,0xc
c00261ea:	68 f3 d2 02 c0       	push   0xc002d2f3
c00261ef:	e8 e5 41 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c00261f4:	83 c4 10             	add    esp,0x10
c00261f7:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00261fb:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0026202:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0026206:	7f 65                	jg     c002626d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0026208:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002620b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002620e:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026215:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026218:	01 ca                	add    edx,ecx
c002621a:	83 c2 54             	add    edx,0x54
c002621d:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0026221:	85 c0                	test   eax,eax
c0026223:	75 43                	jne    c0026268 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0026225:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026228:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002622b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026232:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026235:	01 ca                	add    edx,ecx
c0026237:	8d 4a 54             	lea    ecx,[edx+0x54]
c002623a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c002623d:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026241:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026244:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026247:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002624e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026251:	01 ca                	add    edx,ecx
c0026253:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0026259:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002625c:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026260:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026263:	83 e8 20             	sub    eax,0x20
c0026266:	eb 1a                	jmp    c0026282 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0026268:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c002626b:	eb 95                	jmp    c0026202 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c002626d:	83 ec 0c             	sub    esp,0xc
c0026270:	68 00 d3 02 c0       	push   0xc002d300
c0026275:	e8 5f 41 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c002627a:	83 c4 10             	add    esp,0x10
c002627d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026282:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026285:	5b                   	pop    ebx
c0026286:	5e                   	pop    esi
c0026287:	5f                   	pop    edi
c0026288:	5d                   	pop    ebp
c0026289:	c3                   	ret    

c002628a <PIC::disable()>:
c002628a:	55                   	push   ebp
c002628b:	89 e5                	mov    ebp,esp
c002628d:	83 ec 10             	sub    esp,0x10
c0026290:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0026296:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c002629a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002629d:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00262a1:	ee                   	out    dx,al
c00262a2:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00262a8:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00262ac:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00262af:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00262b3:	ee                   	out    dx,al
c00262b4:	90                   	nop
c00262b5:	c9                   	leave  
c00262b6:	c3                   	ret    
c00262b7:	90                   	nop

c00262b8 <PIC::close(int, int, void*)>:
c00262b8:	55                   	push   ebp
c00262b9:	89 e5                	mov    ebp,esp
c00262bb:	83 ec 08             	sub    esp,0x8
c00262be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00262c3:	83 c0 3c             	add    eax,0x3c
c00262c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00262c8:	83 ec 0c             	sub    esp,0xc
c00262cb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262ce:	ff d0                	call   eax
c00262d0:	83 c4 10             	add    esp,0x10
c00262d3:	b8 00 00 00 00       	mov    eax,0x0
c00262d8:	c9                   	leave  
c00262d9:	c3                   	ret    

c00262da <PIC::PIC()>:
c00262da:	83 ec 0c             	sub    esp,0xc
c00262dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262e1:	83 ec 08             	sub    esp,0x8
c00262e4:	68 ac d3 02 c0       	push   0xc002d3ac
c00262e9:	50                   	push   eax
c00262ea:	e8 f3 e4 fe ff       	call   c00147e2 <InterruptController::InterruptController(char const*)>
c00262ef:	83 c4 10             	add    esp,0x10
c00262f2:	ba d8 d3 02 c0       	mov    edx,0xc002d3d8
c00262f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262fb:	89 10                	mov    DWORD PTR [eax],edx
c00262fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026301:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026307:	0f b6 d0             	movzx  edx,al
c002630a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002630e:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0026315:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026319:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002631f:	0f b6 d0             	movzx  edx,al
c0026322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026326:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002632b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002632f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026335:	8d 50 01             	lea    edx,[eax+0x1]
c0026338:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002633c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026342:	0f b6 d0             	movzx  edx,al
c0026345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026349:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002634d:	83 e1 3f             	and    ecx,0x3f
c0026350:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026358:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002635e:	0f b6 d0             	movzx  edx,al
c0026361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026365:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c002636c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026370:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026376:	0f b6 d0             	movzx  edx,al
c0026379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002637d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026386:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002638c:	8d 50 01             	lea    edx,[eax+0x1]
c002638f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026393:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026399:	0f b6 d0             	movzx  edx,al
c002639c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263a0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00263a4:	83 e1 3f             	and    ecx,0x3f
c00263a7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00263ab:	90                   	nop
c00263ac:	83 c4 0c             	add    esp,0xc
c00263af:	c3                   	ret    

c00263b0 <PIC::ioWait()>:
c00263b0:	eb 00                	jmp    c00263b2 <PIC::ioWait()+0x2>
c00263b2:	eb 00                	jmp    c00263b4 <PIC::ioWait()+0x4>
c00263b4:	90                   	nop
c00263b5:	c3                   	ret    

c00263b6 <PIC::getIRQReg(int)>:
c00263b6:	55                   	push   ebp
c00263b7:	89 e5                	mov    ebp,esp
c00263b9:	83 ec 10             	sub    esp,0x10
c00263bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00263bf:	0f b6 c0             	movzx  eax,al
c00263c2:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00263c8:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c00263cb:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00263ce:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00263d2:	ee                   	out    dx,al
c00263d3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00263d6:	0f b6 c0             	movzx  eax,al
c00263d9:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00263df:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c00263e2:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00263e5:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00263e9:	ee                   	out    dx,al
c00263ea:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00263f0:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00263f4:	89 c2                	mov    edx,eax
c00263f6:	ec                   	in     al,dx
c00263f7:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00263fa:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00263fd:	0f b6 c0             	movzx  eax,al
c0026400:	c1 e0 08             	shl    eax,0x8
c0026403:	89 c1                	mov    ecx,eax
c0026405:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c002640b:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c002640f:	89 c2                	mov    edx,eax
c0026411:	ec                   	in     al,dx
c0026412:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0026415:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026418:	0f b6 c0             	movzx  eax,al
c002641b:	09 c8                	or     eax,ecx
c002641d:	c9                   	leave  
c002641e:	c3                   	ret    
c002641f:	90                   	nop

c0026420 <PIC::eoi(unsigned char)>:
c0026420:	55                   	push   ebp
c0026421:	89 e5                	mov    ebp,esp
c0026423:	83 ec 14             	sub    esp,0x14
c0026426:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026429:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c002642c:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026430:	75 1e                	jne    c0026450 <PIC::eoi(unsigned char)+0x30>
c0026432:	6a 0b                	push   0xb
c0026434:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026437:	e8 7a ff ff ff       	call   c00263b6 <PIC::getIRQReg(int)>
c002643c:	83 c4 08             	add    esp,0x8
c002643f:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0026443:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026447:	25 80 00 00 00       	and    eax,0x80
c002644c:	85 c0                	test   eax,eax
c002644e:	74 5f                	je     c00264af <PIC::eoi(unsigned char)+0x8f>
c0026450:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026454:	75 2d                	jne    c0026483 <PIC::eoi(unsigned char)+0x63>
c0026456:	6a 0b                	push   0xb
c0026458:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002645b:	e8 56 ff ff ff       	call   c00263b6 <PIC::getIRQReg(int)>
c0026460:	83 c4 08             	add    esp,0x8
c0026463:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026467:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002646a:	66 85 c0             	test   ax,ax
c002646d:	78 14                	js     c0026483 <PIC::eoi(unsigned char)+0x63>
c002646f:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026475:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026479:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002647c:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026480:	ee                   	out    dx,al
c0026481:	eb 2d                	jmp    c00264b0 <PIC::eoi(unsigned char)+0x90>
c0026483:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026487:	76 12                	jbe    c002649b <PIC::eoi(unsigned char)+0x7b>
c0026489:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002648f:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026493:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026496:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002649a:	ee                   	out    dx,al
c002649b:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00264a1:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00264a5:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00264a8:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00264ac:	ee                   	out    dx,al
c00264ad:	eb 01                	jmp    c00264b0 <PIC::eoi(unsigned char)+0x90>
c00264af:	90                   	nop
c00264b0:	c9                   	leave  
c00264b1:	c3                   	ret    

c00264b2 <PIC::remap()>:
c00264b2:	55                   	push   ebp
c00264b3:	89 e5                	mov    ebp,esp
c00264b5:	83 ec 48             	sub    esp,0x48
c00264b8:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00264bf:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00264c6:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00264cc:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00264cf:	89 c2                	mov    edx,eax
c00264d1:	ec                   	in     al,dx
c00264d2:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00264d5:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00264d8:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00264db:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00264e1:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00264e4:	89 c2                	mov    edx,eax
c00264e6:	ec                   	in     al,dx
c00264e7:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00264ea:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00264ed:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00264f0:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00264f6:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00264fa:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00264fd:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026500:	ee                   	out    dx,al
c0026501:	83 ec 0c             	sub    esp,0xc
c0026504:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026507:	e8 a4 fe ff ff       	call   c00263b0 <PIC::ioWait()>
c002650c:	83 c4 10             	add    esp,0x10
c002650f:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026515:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026519:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c002651c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002651f:	ee                   	out    dx,al
c0026520:	83 ec 0c             	sub    esp,0xc
c0026523:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026526:	e8 85 fe ff ff       	call   c00263b0 <PIC::ioWait()>
c002652b:	83 c4 10             	add    esp,0x10
c002652e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026531:	0f b6 c0             	movzx  eax,al
c0026534:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c002653a:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c002653d:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026540:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026543:	ee                   	out    dx,al
c0026544:	83 ec 0c             	sub    esp,0xc
c0026547:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002654a:	e8 61 fe ff ff       	call   c00263b0 <PIC::ioWait()>
c002654f:	83 c4 10             	add    esp,0x10
c0026552:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026555:	0f b6 c0             	movzx  eax,al
c0026558:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c002655e:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026561:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026564:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026567:	ee                   	out    dx,al
c0026568:	83 ec 0c             	sub    esp,0xc
c002656b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002656e:	e8 3d fe ff ff       	call   c00263b0 <PIC::ioWait()>
c0026573:	83 c4 10             	add    esp,0x10
c0026576:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c002657c:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026580:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026583:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026586:	ee                   	out    dx,al
c0026587:	83 ec 0c             	sub    esp,0xc
c002658a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002658d:	e8 1e fe ff ff       	call   c00263b0 <PIC::ioWait()>
c0026592:	83 c4 10             	add    esp,0x10
c0026595:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c002659b:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002659f:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00265a2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00265a5:	ee                   	out    dx,al
c00265a6:	83 ec 0c             	sub    esp,0xc
c00265a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00265ac:	e8 ff fd ff ff       	call   c00263b0 <PIC::ioWait()>
c00265b1:	83 c4 10             	add    esp,0x10
c00265b4:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00265ba:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00265be:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00265c1:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00265c4:	ee                   	out    dx,al
c00265c5:	83 ec 0c             	sub    esp,0xc
c00265c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00265cb:	e8 e0 fd ff ff       	call   c00263b0 <PIC::ioWait()>
c00265d0:	83 c4 10             	add    esp,0x10
c00265d3:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00265d9:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00265dd:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00265e0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00265e3:	ee                   	out    dx,al
c00265e4:	83 ec 0c             	sub    esp,0xc
c00265e7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00265ea:	e8 c1 fd ff ff       	call   c00263b0 <PIC::ioWait()>
c00265ef:	83 c4 10             	add    esp,0x10
c00265f2:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00265f6:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00265fc:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00265ff:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026602:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026605:	ee                   	out    dx,al
c0026606:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c002660a:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026610:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026613:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026616:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026619:	ee                   	out    dx,al
c002661a:	90                   	nop
c002661b:	c9                   	leave  
c002661c:	c3                   	ret    
c002661d:	90                   	nop

c002661e <PIC::open(int, int, void*)>:
c002661e:	55                   	push   ebp
c002661f:	89 e5                	mov    ebp,esp
c0026621:	83 ec 18             	sub    esp,0x18
c0026624:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c002662a:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c002662e:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026631:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026635:	ee                   	out    dx,al
c0026636:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c002663c:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026640:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026643:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026647:	ee                   	out    dx,al
c0026648:	83 ec 0c             	sub    esp,0xc
c002664b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002664e:	e8 5f fe ff ff       	call   c00264b2 <PIC::remap()>
c0026653:	83 c4 10             	add    esp,0x10
c0026656:	b8 00 00 00 00       	mov    eax,0x0
c002665b:	c9                   	leave  
c002665c:	c3                   	ret    
c002665d:	90                   	nop

c002665e <APICTimer::close(int, int, void*)>:
c002665e:	b8 00 00 00 00       	mov    eax,0x0
c0026663:	c3                   	ret    

c0026664 <apicTimerHandler(regs*, void*)>:
c0026664:	83 ec 0c             	sub    esp,0xc
c0026667:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002666b:	8b 00                	mov    eax,DWORD PTR [eax]
c002666d:	99                   	cdq    
c002666e:	52                   	push   edx
c002666f:	50                   	push   eax
c0026670:	6a 00                	push   0x0
c0026672:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026677:	e8 98 07 00 00       	call   c0026e14 <__udivdi3>
c002667c:	83 c4 10             	add    esp,0x10
c002667f:	83 ec 08             	sub    esp,0x8
c0026682:	52                   	push   edx
c0026683:	50                   	push   eax
c0026684:	e8 b6 02 ff ff       	call   c001693f <timerHandler(unsigned long long)>
c0026689:	83 c4 10             	add    esp,0x10
c002668c:	90                   	nop
c002668d:	83 c4 0c             	add    esp,0xc
c0026690:	c3                   	ret    
c0026691:	90                   	nop

c0026692 <APICTimer::write(int)>:
c0026692:	53                   	push   ebx
c0026693:	83 ec 28             	sub    esp,0x28
c0026696:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002669a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002669e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00266a4:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c00266a9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00266af:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00266b5:	83 ec 0c             	sub    esp,0xc
c00266b8:	50                   	push   eax
c00266b9:	e8 de f4 ff ff       	call   c0025b9c <APIC::getBase()>
c00266be:	83 c4 10             	add    esp,0x10
c00266c1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00266c5:	a1 50 ed 02 c0       	mov    eax,ds:0xc002ed50
c00266ca:	8b 15 54 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002ed54
c00266d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00266d4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00266d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00266dc:	05 e0 03 00 00       	add    eax,0x3e0
c00266e1:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00266e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00266eb:	05 80 03 00 00       	add    eax,0x380
c00266f0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00266f6:	fb                   	sti    
c00266f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00266ff:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026704:	83 d2 00             	adc    edx,0x0
c0026707:	89 c1                	mov    ecx,eax
c0026709:	89 d3                	mov    ebx,edx
c002670b:	a1 50 ed 02 c0       	mov    eax,ds:0xc002ed50
c0026710:	8b 15 54 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002ed54
c0026716:	39 c8                	cmp    eax,ecx
c0026718:	89 d0                	mov    eax,edx
c002671a:	19 d8                	sbb    eax,ebx
c002671c:	73 02                	jae    c0026720 <APICTimer::write(int)+0x8e>
c002671e:	eb d7                	jmp    c00266f7 <APICTimer::write(int)+0x65>
c0026720:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026724:	05 20 03 00 00       	add    eax,0x320
c0026729:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002672f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026733:	05 90 03 00 00       	add    eax,0x390
c0026738:	8b 00                	mov    eax,DWORD PTR [eax]
c002673a:	f7 d0                	not    eax
c002673c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026740:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026744:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026748:	ba 00 00 00 00       	mov    edx,0x0
c002674d:	f7 f3                	div    ebx
c002674f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026753:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026757:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002675d:	0d 00 00 02 00       	or     eax,0x20000
c0026762:	89 c2                	mov    edx,eax
c0026764:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026768:	05 20 03 00 00       	add    eax,0x320
c002676d:	89 10                	mov    DWORD PTR [eax],edx
c002676f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026773:	05 e0 03 00 00       	add    eax,0x3e0
c0026778:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002677e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026782:	05 80 03 00 00       	add    eax,0x380
c0026787:	89 c2                	mov    edx,eax
c0026789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002678d:	89 02                	mov    DWORD PTR [edx],eax
c002678f:	90                   	nop
c0026790:	83 c4 28             	add    esp,0x28
c0026793:	5b                   	pop    ebx
c0026794:	c3                   	ret    
c0026795:	90                   	nop

c0026796 <APICTimer::open(int, int, void*)>:
c0026796:	57                   	push   edi
c0026797:	56                   	push   esi
c0026798:	53                   	push   ebx
c0026799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002679d:	8b 00                	mov    eax,DWORD PTR [eax]
c002679f:	83 c0 24             	add    eax,0x24
c00267a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00267a4:	83 ec 08             	sub    esp,0x8
c00267a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00267ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00267af:	ff d0                	call   eax
c00267b1:	83 c4 10             	add    esp,0x10
c00267b4:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c00267b9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00267bf:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00267c5:	83 ec 0c             	sub    esp,0xc
c00267c8:	50                   	push   eax
c00267c9:	e8 ce f3 ff ff       	call   c0025b9c <APIC::getBase()>
c00267ce:	83 c4 10             	add    esp,0x10
c00267d1:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00267d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267db:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00267e1:	0f b6 f8             	movzx  edi,al
c00267e4:	89 d0                	mov    eax,edx
c00267e6:	ba 00 00 00 00       	mov    edx,0x0
c00267eb:	89 c1                	mov    ecx,eax
c00267ed:	80 e5 ff             	and    ch,0xff
c00267f0:	89 cb                	mov    ebx,ecx
c00267f2:	0f b6 f2             	movzx  esi,dl
c00267f5:	89 d8                	mov    eax,ebx
c00267f7:	89 f2                	mov    edx,esi
c00267f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00267fd:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026800:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026804:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026808:	83 e0 00             	and    eax,0x0
c002680b:	09 d0                	or     eax,edx
c002680d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026815:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002681b:	8d 50 01             	lea    edx,[eax+0x1]
c002681e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026822:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026828:	0f b6 d0             	movzx  edx,al
c002682b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002682f:	83 c2 08             	add    edx,0x8
c0026832:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026836:	0f b6 c9             	movzx  ecx,cl
c0026839:	81 c9 00 00 01 00    	or     ecx,0x10000
c002683f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026843:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026847:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002684b:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026855:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026859:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002685f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026863:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026869:	83 ec 0c             	sub    esp,0xc
c002686c:	51                   	push   ecx
c002686d:	6a 01                	push   0x1
c002686f:	68 64 66 02 c0       	push   0xc0026664
c0026874:	52                   	push   edx
c0026875:	50                   	push   eax
c0026876:	e8 71 d5 fe ff       	call   c0013dec <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002687b:	83 c4 20             	add    esp,0x20
c002687e:	89 c2                	mov    edx,eax
c0026880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026884:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002688a:	b8 00 00 00 00       	mov    eax,0x0
c002688f:	5b                   	pop    ebx
c0026890:	5e                   	pop    esi
c0026891:	5f                   	pop    edi
c0026892:	c3                   	ret    
c0026893:	90                   	nop

c0026894 <APICTimer::APICTimer()>:
c0026894:	83 ec 0c             	sub    esp,0xc
c0026897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002689b:	83 ec 08             	sub    esp,0x8
c002689e:	68 18 d4 02 c0       	push   0xc002d418
c00268a3:	50                   	push   eax
c00268a4:	e8 07 00 ff ff       	call   c00168b0 <Timer::Timer(char const*)>
c00268a9:	83 c4 10             	add    esp,0x10
c00268ac:	ba 2c d4 02 c0       	mov    edx,0xc002d42c
c00268b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268b5:	89 10                	mov    DWORD PTR [eax],edx
c00268b7:	90                   	nop
c00268b8:	83 c4 0c             	add    esp,0xc
c00268bb:	c3                   	ret    

c00268bc <PIT::write(int)>:
c00268bc:	83 ec 10             	sub    esp,0x10
c00268bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00268c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00268c7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00268cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00268d1:	a3 64 0a 03 c0       	mov    ds:0xc0030a64,eax
c00268d6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00268db:	99                   	cdq    
c00268dc:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00268e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00268e4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00268eb:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00268f0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00268f4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00268f9:	ee                   	out    dx,al
c00268fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00268fe:	0f b6 c0             	movzx  eax,al
c0026901:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026908:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002690c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026910:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026915:	ee                   	out    dx,al
c0026916:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002691a:	c1 f8 08             	sar    eax,0x8
c002691d:	0f b6 c0             	movzx  eax,al
c0026920:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026927:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002692b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002692f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026934:	ee                   	out    dx,al
c0026935:	90                   	nop
c0026936:	83 c4 10             	add    esp,0x10
c0026939:	c3                   	ret    

c002693a <pitHandler(regs*, void*)>:
c002693a:	83 ec 0c             	sub    esp,0xc
c002693d:	a1 64 0a 03 c0       	mov    eax,ds:0xc0030a64
c0026942:	99                   	cdq    
c0026943:	52                   	push   edx
c0026944:	50                   	push   eax
c0026945:	6a 00                	push   0x0
c0026947:	68 00 ca 9a 3b       	push   0x3b9aca00
c002694c:	e8 c3 04 00 00       	call   c0026e14 <__udivdi3>
c0026951:	83 c4 10             	add    esp,0x10
c0026954:	83 ec 08             	sub    esp,0x8
c0026957:	52                   	push   edx
c0026958:	50                   	push   eax
c0026959:	e8 e1 ff fe ff       	call   c001693f <timerHandler(unsigned long long)>
c002695e:	83 c4 10             	add    esp,0x10
c0026961:	90                   	nop
c0026962:	83 c4 0c             	add    esp,0xc
c0026965:	c3                   	ret    

c0026966 <PIT::open(int, int, void*)>:
c0026966:	83 ec 0c             	sub    esp,0xc
c0026969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002696d:	8b 00                	mov    eax,DWORD PTR [eax]
c002696f:	83 c0 24             	add    eax,0x24
c0026972:	8b 00                	mov    eax,DWORD PTR [eax]
c0026974:	83 ec 08             	sub    esp,0x8
c0026977:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002697b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002697f:	ff d0                	call   eax
c0026981:	83 c4 10             	add    esp,0x10
c0026984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026988:	83 ec 0c             	sub    esp,0xc
c002698b:	6a 00                	push   0x0
c002698d:	6a 01                	push   0x1
c002698f:	68 3a 69 02 c0       	push   0xc002693a
c0026994:	6a 00                	push   0x0
c0026996:	50                   	push   eax
c0026997:	e8 50 d4 fe ff       	call   c0013dec <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002699c:	83 c4 20             	add    esp,0x20
c002699f:	89 c2                	mov    edx,eax
c00269a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269a5:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00269ab:	b8 00 00 00 00       	mov    eax,0x0
c00269b0:	83 c4 0c             	add    esp,0xc
c00269b3:	c3                   	ret    

c00269b4 <PIT::close(int, int, void*)>:
c00269b4:	83 ec 0c             	sub    esp,0xc
c00269b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269bb:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00269c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269c9:	6a 01                	push   0x1
c00269cb:	68 3a 69 02 c0       	push   0xc002693a
c00269d0:	6a 00                	push   0x0
c00269d2:	50                   	push   eax
c00269d3:	e8 5e d4 fe ff       	call   c0013e36 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00269d8:	83 c4 10             	add    esp,0x10
c00269db:	b8 00 00 00 00       	mov    eax,0x0
c00269e0:	83 c4 0c             	add    esp,0xc
c00269e3:	c3                   	ret    

c00269e4 <PIT::PIT()>:
c00269e4:	83 ec 0c             	sub    esp,0xc
c00269e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269eb:	83 ec 08             	sub    esp,0x8
c00269ee:	68 54 d4 02 c0       	push   0xc002d454
c00269f3:	50                   	push   eax
c00269f4:	e8 b7 fe fe ff       	call   c00168b0 <Timer::Timer(char const*)>
c00269f9:	83 c4 10             	add    esp,0x10
c00269fc:	ba 7c d4 02 c0       	mov    edx,0xc002d47c
c0026a01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a05:	89 10                	mov    DWORD PTR [eax],edx
c0026a07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a0b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026a11:	0f b6 d0             	movzx  edx,al
c0026a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a18:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a23:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026a29:	0f b6 d0             	movzx  edx,al
c0026a2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a30:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026a35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a39:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026a3f:	8d 50 01             	lea    edx,[eax+0x1]
c0026a42:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026a46:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026a4c:	0f b6 d0             	movzx  edx,al
c0026a4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a53:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026a57:	83 e1 3f             	and    ecx,0x3f
c0026a5a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026a5e:	90                   	nop
c0026a5f:	83 c4 0c             	add    esp,0xc
c0026a62:	c3                   	ret    
c0026a63:	66 90                	xchg   ax,ax
c0026a65:	66 90                	xchg   ax,ax
c0026a67:	66 90                	xchg   ax,ax
c0026a69:	66 90                	xchg   ax,ax
c0026a6b:	66 90                	xchg   ax,ax
c0026a6d:	66 90                	xchg   ax,ax
c0026a6f:	90                   	nop

c0026a70 <avxDetect>:
c0026a70:	b8 00 00 00 00       	mov    eax,0x0
c0026a75:	c3                   	ret    

c0026a76 <avxSave>:
c0026a76:	c3                   	ret    

c0026a77 <avxLoad>:
c0026a77:	c3                   	ret    

c0026a78 <avxInit>:
c0026a78:	c3                   	ret    

c0026a79 <avxClose>:
c0026a79:	c3                   	ret    

c0026a7a <wouldSheSayYes>:
c0026a7a:	c3                   	ret    
c0026a7b:	49                   	dec    ecx
c0026a7c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026a80:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026a84:	75 20                	jne    c0026aa6 <sseDetect.noSSE+0x1>
c0026a86:	4e                   	dec    esi
c0026a87:	79 61                	jns    c0026aea <x87Detect+0x14>
c0026a89:	68 2e 2e 2e 00       	push   0x2e2e2e
c0026a8e:	66 90                	xchg   ax,ax

c0026a90 <absolutelyNoChanceInHell>:
c0026a90:	b8 01 00 00 00       	mov    eax,0x1
c0026a95:	0f a2                	cpuid  
c0026a97:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0026a9d:	74 06                	je     c0026aa5 <sseDetect.noSSE>
c0026a9f:	b8 01 00 00 00       	mov    eax,0x1
c0026aa4:	c3                   	ret    

c0026aa5 <sseDetect.noSSE>:
c0026aa5:	31 c0                	xor    eax,eax
c0026aa7:	c3                   	ret    

c0026aa8 <sseSave>:
c0026aa8:	0f ae 44 24 04       	fxsave [esp+0x4]
c0026aad:	c3                   	ret    

c0026aae <sseLoad>:
c0026aae:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026ab3:	c3                   	ret    

c0026ab4 <sseInit>:
c0026ab4:	e8 49 00 00 00       	call   c0026b02 <x87Init>
c0026ab9:	0f 20 e0             	mov    eax,cr4
c0026abc:	66 0d 00 06          	or     ax,0x600
c0026ac0:	0f 22 e0             	mov    cr4,eax
c0026ac3:	c3                   	ret    

c0026ac4 <sseClose>:
c0026ac4:	c3                   	ret    
c0026ac5:	66 90                	xchg   ax,ax
c0026ac7:	66 90                	xchg   ax,ax
c0026ac9:	66 90                	xchg   ax,ax
c0026acb:	66 90                	xchg   ax,ax
c0026acd:	66 90                	xchg   ax,ax
c0026acf:	90                   	nop

c0026ad0 <value_37F>:
c0026ad0:	7f 03                	jg     c0026ad5 <value_37A+0x1>

c0026ad2 <value_37E>:
c0026ad2:	7e 03                	jle    c0026ad7 <x87Detect+0x1>

c0026ad4 <value_37A>:
c0026ad4:	7a 03                	jp     c0026ad9 <x87Detect+0x3>

c0026ad6 <x87Detect>:
c0026ad6:	b8 01 00 00 00       	mov    eax,0x1
c0026adb:	0f a2                	cpuid  
c0026add:	f7 c2 01 00 00 00    	test   edx,0x1
c0026ae3:	74 06                	je     c0026aeb <x87Detect.nox87>
c0026ae5:	b8 01 00 00 00       	mov    eax,0x1
c0026aea:	c3                   	ret    

c0026aeb <x87Detect.nox87>:
c0026aeb:	b8 00 00 00 00       	mov    eax,0x0
c0026af0:	c3                   	ret    

c0026af1 <x87Save>:
c0026af1:	55                   	push   ebp
c0026af2:	89 e5                	mov    ebp,esp
c0026af4:	9b dd 75 08          	fsave  [ebp+0x8]
c0026af8:	c9                   	leave  
c0026af9:	c3                   	ret    

c0026afa <x87Load>:
c0026afa:	55                   	push   ebp
c0026afb:	89 e5                	mov    ebp,esp
c0026afd:	dd 65 08             	frstor [ebp+0x8]
c0026b00:	c9                   	leave  
c0026b01:	c3                   	ret    

c0026b02 <x87Init>:
c0026b02:	9b db e3             	finit  
c0026b05:	0f 20 c0             	mov    eax,cr0
c0026b08:	66 25 fb ff          	and    ax,0xfffb
c0026b0c:	66 0d 22 00          	or     ax,0x22
c0026b10:	0f 22 c0             	mov    cr0,eax
c0026b13:	0f 06                	clts   
c0026b15:	d9 2d d4 6a 02 c0    	fldcw  WORD PTR ds:0xc0026ad4
c0026b1b:	c3                   	ret    

c0026b1c <x87Close>:
c0026b1c:	c3                   	ret    
c0026b1d:	66 90                	xchg   ax,ax
c0026b1f:	90                   	nop

c0026b20 <__do_global_ctors_aux>:
c0026b20:	a1 14 97 02 c0       	mov    eax,ds:0xc0029714
c0026b25:	83 f8 ff             	cmp    eax,0xffffffff
c0026b28:	74 1a                	je     c0026b44 <__do_global_ctors_aux+0x24>
c0026b2a:	55                   	push   ebp
c0026b2b:	89 e5                	mov    ebp,esp
c0026b2d:	53                   	push   ebx
c0026b2e:	52                   	push   edx
c0026b2f:	bb 14 97 02 c0       	mov    ebx,0xc0029714
c0026b34:	ff d0                	call   eax
c0026b36:	83 eb 04             	sub    ebx,0x4
c0026b39:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026b3b:	83 f8 ff             	cmp    eax,0xffffffff
c0026b3e:	75 f4                	jne    c0026b34 <__do_global_ctors_aux+0x14>
c0026b40:	58                   	pop    eax
c0026b41:	5b                   	pop    ebx
c0026b42:	5d                   	pop    ebp
c0026b43:	c3                   	ret    
c0026b44:	c3                   	ret    
c0026b45:	66 90                	xchg   ax,ax
c0026b47:	90                   	nop

c0026b48 <__divdi3>:
c0026b48:	55                   	push   ebp
c0026b49:	57                   	push   edi
c0026b4a:	56                   	push   esi
c0026b4b:	53                   	push   ebx
c0026b4c:	83 ec 1c             	sub    esp,0x1c
c0026b4f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026b53:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026b57:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026b5a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026b5e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026b62:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026b66:	85 db                	test   ebx,ebx
c0026b68:	0f 88 8e 00 00 00    	js     c0026bfc <__divdi3+0xb4>
c0026b6e:	89 dd                	mov    ebp,ebx
c0026b70:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026b78:	89 d3                	mov    ebx,edx
c0026b7a:	85 d2                	test   edx,edx
c0026b7c:	79 0d                	jns    c0026b8b <__divdi3+0x43>
c0026b7e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026b82:	f7 d8                	neg    eax
c0026b84:	83 d2 00             	adc    edx,0x0
c0026b87:	f7 da                	neg    edx
c0026b89:	89 d3                	mov    ebx,edx
c0026b8b:	89 c7                	mov    edi,eax
c0026b8d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026b90:	85 db                	test   ebx,ebx
c0026b92:	75 48                	jne    c0026bdc <__divdi3+0x94>
c0026b94:	39 ef                	cmp    edi,ebp
c0026b96:	76 24                	jbe    c0026bbc <__divdi3+0x74>
c0026b98:	89 ea                	mov    edx,ebp
c0026b9a:	f7 f7                	div    edi
c0026b9c:	89 c1                	mov    ecx,eax
c0026b9e:	31 f6                	xor    esi,esi
c0026ba0:	89 c8                	mov    eax,ecx
c0026ba2:	89 f2                	mov    edx,esi
c0026ba4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026ba8:	85 c9                	test   ecx,ecx
c0026baa:	74 07                	je     c0026bb3 <__divdi3+0x6b>
c0026bac:	f7 d8                	neg    eax
c0026bae:	83 d2 00             	adc    edx,0x0
c0026bb1:	f7 da                	neg    edx
c0026bb3:	83 c4 1c             	add    esp,0x1c
c0026bb6:	5b                   	pop    ebx
c0026bb7:	5e                   	pop    esi
c0026bb8:	5f                   	pop    edi
c0026bb9:	5d                   	pop    ebp
c0026bba:	c3                   	ret    
c0026bbb:	90                   	nop
c0026bbc:	85 ff                	test   edi,edi
c0026bbe:	75 0b                	jne    c0026bcb <__divdi3+0x83>
c0026bc0:	b8 01 00 00 00       	mov    eax,0x1
c0026bc5:	31 d2                	xor    edx,edx
c0026bc7:	f7 f3                	div    ebx
c0026bc9:	89 c7                	mov    edi,eax
c0026bcb:	31 d2                	xor    edx,edx
c0026bcd:	89 e8                	mov    eax,ebp
c0026bcf:	f7 f7                	div    edi
c0026bd1:	89 c6                	mov    esi,eax
c0026bd3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026bd6:	f7 f7                	div    edi
c0026bd8:	89 c1                	mov    ecx,eax
c0026bda:	eb c4                	jmp    c0026ba0 <__divdi3+0x58>
c0026bdc:	39 eb                	cmp    ebx,ebp
c0026bde:	77 3c                	ja     c0026c1c <__divdi3+0xd4>
c0026be0:	0f bd f3             	bsr    esi,ebx
c0026be3:	83 f6 1f             	xor    esi,0x1f
c0026be6:	75 40                	jne    c0026c28 <__divdi3+0xe0>
c0026be8:	39 eb                	cmp    ebx,ebp
c0026bea:	72 09                	jb     c0026bf5 <__divdi3+0xad>
c0026bec:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026bef:	0f 87 97 00 00 00    	ja     c0026c8c <__divdi3+0x144>
c0026bf5:	b9 01 00 00 00       	mov    ecx,0x1
c0026bfa:	eb a4                	jmp    c0026ba0 <__divdi3+0x58>
c0026bfc:	f7 d9                	neg    ecx
c0026bfe:	83 d3 00             	adc    ebx,0x0
c0026c01:	f7 db                	neg    ebx
c0026c03:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026c06:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026c0a:	89 dd                	mov    ebp,ebx
c0026c0c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026c14:	e9 5f ff ff ff       	jmp    c0026b78 <__divdi3+0x30>
c0026c19:	8d 76 00             	lea    esi,[esi+0x0]
c0026c1c:	31 f6                	xor    esi,esi
c0026c1e:	31 c9                	xor    ecx,ecx
c0026c20:	e9 7b ff ff ff       	jmp    c0026ba0 <__divdi3+0x58>
c0026c25:	8d 76 00             	lea    esi,[esi+0x0]
c0026c28:	b8 20 00 00 00       	mov    eax,0x20
c0026c2d:	29 f0                	sub    eax,esi
c0026c2f:	89 f1                	mov    ecx,esi
c0026c31:	d3 e3                	shl    ebx,cl
c0026c33:	89 fa                	mov    edx,edi
c0026c35:	88 c1                	mov    cl,al
c0026c37:	d3 ea                	shr    edx,cl
c0026c39:	09 da                	or     edx,ebx
c0026c3b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026c3f:	89 f1                	mov    ecx,esi
c0026c41:	d3 e7                	shl    edi,cl
c0026c43:	89 eb                	mov    ebx,ebp
c0026c45:	88 c1                	mov    cl,al
c0026c47:	d3 eb                	shr    ebx,cl
c0026c49:	89 f1                	mov    ecx,esi
c0026c4b:	d3 e5                	shl    ebp,cl
c0026c4d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026c50:	88 c1                	mov    cl,al
c0026c52:	d3 ea                	shr    edx,cl
c0026c54:	09 d5                	or     ebp,edx
c0026c56:	89 e8                	mov    eax,ebp
c0026c58:	89 da                	mov    edx,ebx
c0026c5a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026c5e:	89 d3                	mov    ebx,edx
c0026c60:	89 c5                	mov    ebp,eax
c0026c62:	f7 e7                	mul    edi
c0026c64:	39 d3                	cmp    ebx,edx
c0026c66:	72 18                	jb     c0026c80 <__divdi3+0x138>
c0026c68:	74 0a                	je     c0026c74 <__divdi3+0x12c>
c0026c6a:	89 e9                	mov    ecx,ebp
c0026c6c:	31 f6                	xor    esi,esi
c0026c6e:	e9 2d ff ff ff       	jmp    c0026ba0 <__divdi3+0x58>
c0026c73:	90                   	nop
c0026c74:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026c77:	89 f1                	mov    ecx,esi
c0026c79:	d3 e7                	shl    edi,cl
c0026c7b:	39 c7                	cmp    edi,eax
c0026c7d:	73 eb                	jae    c0026c6a <__divdi3+0x122>
c0026c7f:	90                   	nop
c0026c80:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026c83:	31 f6                	xor    esi,esi
c0026c85:	e9 16 ff ff ff       	jmp    c0026ba0 <__divdi3+0x58>
c0026c8a:	66 90                	xchg   ax,ax
c0026c8c:	31 c9                	xor    ecx,ecx
c0026c8e:	e9 0d ff ff ff       	jmp    c0026ba0 <__divdi3+0x58>
c0026c93:	90                   	nop

c0026c94 <__moddi3>:
c0026c94:	55                   	push   ebp
c0026c95:	57                   	push   edi
c0026c96:	56                   	push   esi
c0026c97:	53                   	push   ebx
c0026c98:	83 ec 2c             	sub    esp,0x2c
c0026c9b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026c9f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0026ca3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026ca7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026cab:	85 db                	test   ebx,ebx
c0026cad:	0f 88 85 00 00 00    	js     c0026d38 <__moddi3+0xa4>
c0026cb3:	89 de                	mov    esi,ebx
c0026cb5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026cbd:	89 d7                	mov    edi,edx
c0026cbf:	85 d2                	test   edx,edx
c0026cc1:	79 09                	jns    c0026ccc <__moddi3+0x38>
c0026cc3:	f7 d8                	neg    eax
c0026cc5:	83 d2 00             	adc    edx,0x0
c0026cc8:	f7 da                	neg    edx
c0026cca:	89 d7                	mov    edi,edx
c0026ccc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026cd0:	89 cd                	mov    ebp,ecx
c0026cd2:	85 ff                	test   edi,edi
c0026cd4:	75 52                	jne    c0026d28 <__moddi3+0x94>
c0026cd6:	89 c3                	mov    ebx,eax
c0026cd8:	39 f0                	cmp    eax,esi
c0026cda:	76 24                	jbe    c0026d00 <__moddi3+0x6c>
c0026cdc:	89 c8                	mov    eax,ecx
c0026cde:	89 f2                	mov    edx,esi
c0026ce0:	f7 f3                	div    ebx
c0026ce2:	89 d6                	mov    esi,edx
c0026ce4:	89 f0                	mov    eax,esi
c0026ce6:	31 d2                	xor    edx,edx
c0026ce8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026cec:	85 c9                	test   ecx,ecx
c0026cee:	74 07                	je     c0026cf7 <__moddi3+0x63>
c0026cf0:	f7 d8                	neg    eax
c0026cf2:	83 d2 00             	adc    edx,0x0
c0026cf5:	f7 da                	neg    edx
c0026cf7:	83 c4 2c             	add    esp,0x2c
c0026cfa:	5b                   	pop    ebx
c0026cfb:	5e                   	pop    esi
c0026cfc:	5f                   	pop    edi
c0026cfd:	5d                   	pop    ebp
c0026cfe:	c3                   	ret    
c0026cff:	90                   	nop
c0026d00:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026d04:	85 db                	test   ebx,ebx
c0026d06:	75 0d                	jne    c0026d15 <__moddi3+0x81>
c0026d08:	b8 01 00 00 00       	mov    eax,0x1
c0026d0d:	31 d2                	xor    edx,edx
c0026d0f:	f7 f7                	div    edi
c0026d11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026d15:	89 f0                	mov    eax,esi
c0026d17:	31 d2                	xor    edx,edx
c0026d19:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026d1d:	f7 f7                	div    edi
c0026d1f:	89 e8                	mov    eax,ebp
c0026d21:	f7 f7                	div    edi
c0026d23:	89 d6                	mov    esi,edx
c0026d25:	eb bd                	jmp    c0026ce4 <__moddi3+0x50>
c0026d27:	90                   	nop
c0026d28:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026d2c:	39 f7                	cmp    edi,esi
c0026d2e:	76 20                	jbe    c0026d50 <__moddi3+0xbc>
c0026d30:	89 c8                	mov    eax,ecx
c0026d32:	89 f2                	mov    edx,esi
c0026d34:	eb b2                	jmp    c0026ce8 <__moddi3+0x54>
c0026d36:	66 90                	xchg   ax,ax
c0026d38:	f7 d9                	neg    ecx
c0026d3a:	83 d3 00             	adc    ebx,0x0
c0026d3d:	f7 db                	neg    ebx
c0026d3f:	89 de                	mov    esi,ebx
c0026d41:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026d49:	e9 6f ff ff ff       	jmp    c0026cbd <__moddi3+0x29>
c0026d4e:	66 90                	xchg   ax,ax
c0026d50:	0f bd c7             	bsr    eax,edi
c0026d53:	83 f0 1f             	xor    eax,0x1f
c0026d56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026d5a:	75 24                	jne    c0026d80 <__moddi3+0xec>
c0026d5c:	39 f7                	cmp    edi,esi
c0026d5e:	72 06                	jb     c0026d66 <__moddi3+0xd2>
c0026d60:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026d64:	77 0c                	ja     c0026d72 <__moddi3+0xde>
c0026d66:	89 e9                	mov    ecx,ebp
c0026d68:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026d6c:	19 fe                	sbb    esi,edi
c0026d6e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026d72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026d76:	89 f2                	mov    edx,esi
c0026d78:	e9 6b ff ff ff       	jmp    c0026ce8 <__moddi3+0x54>
c0026d7d:	8d 76 00             	lea    esi,[esi+0x0]
c0026d80:	b8 20 00 00 00       	mov    eax,0x20
c0026d85:	89 c2                	mov    edx,eax
c0026d87:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026d8b:	29 da                	sub    edx,ebx
c0026d8d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026d91:	88 d9                	mov    cl,bl
c0026d93:	d3 e7                	shl    edi,cl
c0026d95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026d99:	88 d1                	mov    cl,dl
c0026d9b:	d3 e8                	shr    eax,cl
c0026d9d:	09 c7                	or     edi,eax
c0026d9f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026da3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026da7:	89 d8                	mov    eax,ebx
c0026da9:	88 d9                	mov    cl,bl
c0026dab:	d3 e7                	shl    edi,cl
c0026dad:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026db1:	89 f3                	mov    ebx,esi
c0026db3:	88 d1                	mov    cl,dl
c0026db5:	d3 eb                	shr    ebx,cl
c0026db7:	89 c7                	mov    edi,eax
c0026db9:	88 c1                	mov    cl,al
c0026dbb:	d3 e6                	shl    esi,cl
c0026dbd:	89 e8                	mov    eax,ebp
c0026dbf:	88 d1                	mov    cl,dl
c0026dc1:	d3 e8                	shr    eax,cl
c0026dc3:	09 f0                	or     eax,esi
c0026dc5:	89 f9                	mov    ecx,edi
c0026dc7:	d3 e5                	shl    ebp,cl
c0026dc9:	89 da                	mov    edx,ebx
c0026dcb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026dcf:	89 d3                	mov    ebx,edx
c0026dd1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026dd5:	89 c6                	mov    esi,eax
c0026dd7:	89 d1                	mov    ecx,edx
c0026dd9:	39 d3                	cmp    ebx,edx
c0026ddb:	72 27                	jb     c0026e04 <__moddi3+0x170>
c0026ddd:	74 21                	je     c0026e00 <__moddi3+0x16c>
c0026ddf:	29 f5                	sub    ebp,esi
c0026de1:	19 cb                	sbb    ebx,ecx
c0026de3:	89 de                	mov    esi,ebx
c0026de5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026de9:	d3 e6                	shl    esi,cl
c0026deb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026def:	89 f9                	mov    ecx,edi
c0026df1:	d3 ed                	shr    ebp,cl
c0026df3:	09 ee                	or     esi,ebp
c0026df5:	89 f0                	mov    eax,esi
c0026df7:	d3 eb                	shr    ebx,cl
c0026df9:	89 da                	mov    edx,ebx
c0026dfb:	e9 e8 fe ff ff       	jmp    c0026ce8 <__moddi3+0x54>
c0026e00:	39 c5                	cmp    ebp,eax
c0026e02:	73 db                	jae    c0026ddf <__moddi3+0x14b>
c0026e04:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026e08:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026e0c:	89 d1                	mov    ecx,edx
c0026e0e:	89 c6                	mov    esi,eax
c0026e10:	eb cd                	jmp    c0026ddf <__moddi3+0x14b>
c0026e12:	66 90                	xchg   ax,ax

c0026e14 <__udivdi3>:
c0026e14:	55                   	push   ebp
c0026e15:	57                   	push   edi
c0026e16:	56                   	push   esi
c0026e17:	53                   	push   ebx
c0026e18:	83 ec 1c             	sub    esp,0x1c
c0026e1b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026e1f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026e23:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026e27:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026e2b:	85 d2                	test   edx,edx
c0026e2d:	75 41                	jne    c0026e70 <__udivdi3+0x5c>
c0026e2f:	39 f7                	cmp    edi,esi
c0026e31:	76 15                	jbe    c0026e48 <__udivdi3+0x34>
c0026e33:	89 e8                	mov    eax,ebp
c0026e35:	89 f2                	mov    edx,esi
c0026e37:	f7 f7                	div    edi
c0026e39:	31 db                	xor    ebx,ebx
c0026e3b:	89 da                	mov    edx,ebx
c0026e3d:	83 c4 1c             	add    esp,0x1c
c0026e40:	5b                   	pop    ebx
c0026e41:	5e                   	pop    esi
c0026e42:	5f                   	pop    edi
c0026e43:	5d                   	pop    ebp
c0026e44:	c3                   	ret    
c0026e45:	8d 76 00             	lea    esi,[esi+0x0]
c0026e48:	89 f9                	mov    ecx,edi
c0026e4a:	85 ff                	test   edi,edi
c0026e4c:	75 0b                	jne    c0026e59 <__udivdi3+0x45>
c0026e4e:	b8 01 00 00 00       	mov    eax,0x1
c0026e53:	31 d2                	xor    edx,edx
c0026e55:	f7 f7                	div    edi
c0026e57:	89 c1                	mov    ecx,eax
c0026e59:	31 d2                	xor    edx,edx
c0026e5b:	89 f0                	mov    eax,esi
c0026e5d:	f7 f1                	div    ecx
c0026e5f:	89 c3                	mov    ebx,eax
c0026e61:	89 e8                	mov    eax,ebp
c0026e63:	f7 f1                	div    ecx
c0026e65:	89 da                	mov    edx,ebx
c0026e67:	83 c4 1c             	add    esp,0x1c
c0026e6a:	5b                   	pop    ebx
c0026e6b:	5e                   	pop    esi
c0026e6c:	5f                   	pop    edi
c0026e6d:	5d                   	pop    ebp
c0026e6e:	c3                   	ret    
c0026e6f:	90                   	nop
c0026e70:	39 f2                	cmp    edx,esi
c0026e72:	77 1c                	ja     c0026e90 <__udivdi3+0x7c>
c0026e74:	0f bd da             	bsr    ebx,edx
c0026e77:	83 f3 1f             	xor    ebx,0x1f
c0026e7a:	75 24                	jne    c0026ea0 <__udivdi3+0x8c>
c0026e7c:	39 f2                	cmp    edx,esi
c0026e7e:	72 08                	jb     c0026e88 <__udivdi3+0x74>
c0026e80:	39 ef                	cmp    edi,ebp
c0026e82:	0f 87 84 00 00 00    	ja     c0026f0c <__udivdi3+0xf8>
c0026e88:	b8 01 00 00 00       	mov    eax,0x1
c0026e8d:	eb ac                	jmp    c0026e3b <__udivdi3+0x27>
c0026e8f:	90                   	nop
c0026e90:	31 db                	xor    ebx,ebx
c0026e92:	31 c0                	xor    eax,eax
c0026e94:	89 da                	mov    edx,ebx
c0026e96:	83 c4 1c             	add    esp,0x1c
c0026e99:	5b                   	pop    ebx
c0026e9a:	5e                   	pop    esi
c0026e9b:	5f                   	pop    edi
c0026e9c:	5d                   	pop    ebp
c0026e9d:	c3                   	ret    
c0026e9e:	66 90                	xchg   ax,ax
c0026ea0:	b8 20 00 00 00       	mov    eax,0x20
c0026ea5:	29 d8                	sub    eax,ebx
c0026ea7:	88 d9                	mov    cl,bl
c0026ea9:	d3 e2                	shl    edx,cl
c0026eab:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026eaf:	89 fa                	mov    edx,edi
c0026eb1:	88 c1                	mov    cl,al
c0026eb3:	d3 ea                	shr    edx,cl
c0026eb5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026eb9:	09 d1                	or     ecx,edx
c0026ebb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026ebf:	88 d9                	mov    cl,bl
c0026ec1:	d3 e7                	shl    edi,cl
c0026ec3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026ec7:	89 f7                	mov    edi,esi
c0026ec9:	88 c1                	mov    cl,al
c0026ecb:	d3 ef                	shr    edi,cl
c0026ecd:	88 d9                	mov    cl,bl
c0026ecf:	d3 e6                	shl    esi,cl
c0026ed1:	89 ea                	mov    edx,ebp
c0026ed3:	88 c1                	mov    cl,al
c0026ed5:	d3 ea                	shr    edx,cl
c0026ed7:	09 d6                	or     esi,edx
c0026ed9:	89 f0                	mov    eax,esi
c0026edb:	89 fa                	mov    edx,edi
c0026edd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026ee1:	89 d7                	mov    edi,edx
c0026ee3:	89 c6                	mov    esi,eax
c0026ee5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026ee9:	39 d7                	cmp    edi,edx
c0026eeb:	72 13                	jb     c0026f00 <__udivdi3+0xec>
c0026eed:	74 09                	je     c0026ef8 <__udivdi3+0xe4>
c0026eef:	89 f0                	mov    eax,esi
c0026ef1:	31 db                	xor    ebx,ebx
c0026ef3:	e9 43 ff ff ff       	jmp    c0026e3b <__udivdi3+0x27>
c0026ef8:	88 d9                	mov    cl,bl
c0026efa:	d3 e5                	shl    ebp,cl
c0026efc:	39 c5                	cmp    ebp,eax
c0026efe:	73 ef                	jae    c0026eef <__udivdi3+0xdb>
c0026f00:	8d 46 ff             	lea    eax,[esi-0x1]
c0026f03:	31 db                	xor    ebx,ebx
c0026f05:	e9 31 ff ff ff       	jmp    c0026e3b <__udivdi3+0x27>
c0026f0a:	66 90                	xchg   ax,ax
c0026f0c:	31 c0                	xor    eax,eax
c0026f0e:	e9 28 ff ff ff       	jmp    c0026e3b <__udivdi3+0x27>
c0026f13:	90                   	nop

c0026f14 <__umoddi3>:
c0026f14:	55                   	push   ebp
c0026f15:	57                   	push   edi
c0026f16:	56                   	push   esi
c0026f17:	53                   	push   ebx
c0026f18:	83 ec 1c             	sub    esp,0x1c
c0026f1b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026f1f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026f23:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026f27:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026f2b:	89 da                	mov    edx,ebx
c0026f2d:	85 c0                	test   eax,eax
c0026f2f:	75 37                	jne    c0026f68 <__umoddi3+0x54>
c0026f31:	39 df                	cmp    edi,ebx
c0026f33:	76 13                	jbe    c0026f48 <__umoddi3+0x34>
c0026f35:	89 f0                	mov    eax,esi
c0026f37:	f7 f7                	div    edi
c0026f39:	89 d0                	mov    eax,edx
c0026f3b:	31 d2                	xor    edx,edx
c0026f3d:	83 c4 1c             	add    esp,0x1c
c0026f40:	5b                   	pop    ebx
c0026f41:	5e                   	pop    esi
c0026f42:	5f                   	pop    edi
c0026f43:	5d                   	pop    ebp
c0026f44:	c3                   	ret    
c0026f45:	8d 76 00             	lea    esi,[esi+0x0]
c0026f48:	89 fd                	mov    ebp,edi
c0026f4a:	85 ff                	test   edi,edi
c0026f4c:	75 0b                	jne    c0026f59 <__umoddi3+0x45>
c0026f4e:	b8 01 00 00 00       	mov    eax,0x1
c0026f53:	31 d2                	xor    edx,edx
c0026f55:	f7 f7                	div    edi
c0026f57:	89 c5                	mov    ebp,eax
c0026f59:	89 d8                	mov    eax,ebx
c0026f5b:	31 d2                	xor    edx,edx
c0026f5d:	f7 f5                	div    ebp
c0026f5f:	89 f0                	mov    eax,esi
c0026f61:	f7 f5                	div    ebp
c0026f63:	89 d0                	mov    eax,edx
c0026f65:	eb d4                	jmp    c0026f3b <__umoddi3+0x27>
c0026f67:	90                   	nop
c0026f68:	89 f1                	mov    ecx,esi
c0026f6a:	39 d8                	cmp    eax,ebx
c0026f6c:	76 0a                	jbe    c0026f78 <__umoddi3+0x64>
c0026f6e:	89 f0                	mov    eax,esi
c0026f70:	83 c4 1c             	add    esp,0x1c
c0026f73:	5b                   	pop    ebx
c0026f74:	5e                   	pop    esi
c0026f75:	5f                   	pop    edi
c0026f76:	5d                   	pop    ebp
c0026f77:	c3                   	ret    
c0026f78:	0f bd e8             	bsr    ebp,eax
c0026f7b:	83 f5 1f             	xor    ebp,0x1f
c0026f7e:	75 1c                	jne    c0026f9c <__umoddi3+0x88>
c0026f80:	39 d8                	cmp    eax,ebx
c0026f82:	72 04                	jb     c0026f88 <__umoddi3+0x74>
c0026f84:	39 f7                	cmp    edi,esi
c0026f86:	77 08                	ja     c0026f90 <__umoddi3+0x7c>
c0026f88:	89 da                	mov    edx,ebx
c0026f8a:	29 fe                	sub    esi,edi
c0026f8c:	19 c2                	sbb    edx,eax
c0026f8e:	89 f1                	mov    ecx,esi
c0026f90:	89 c8                	mov    eax,ecx
c0026f92:	83 c4 1c             	add    esp,0x1c
c0026f95:	5b                   	pop    ebx
c0026f96:	5e                   	pop    esi
c0026f97:	5f                   	pop    edi
c0026f98:	5d                   	pop    ebp
c0026f99:	c3                   	ret    
c0026f9a:	66 90                	xchg   ax,ax
c0026f9c:	ba 20 00 00 00       	mov    edx,0x20
c0026fa1:	29 ea                	sub    edx,ebp
c0026fa3:	89 e9                	mov    ecx,ebp
c0026fa5:	d3 e0                	shl    eax,cl
c0026fa7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026fab:	89 f8                	mov    eax,edi
c0026fad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026fb1:	88 d1                	mov    cl,dl
c0026fb3:	d3 e8                	shr    eax,cl
c0026fb5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026fb9:	09 c1                	or     ecx,eax
c0026fbb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026fbf:	89 e9                	mov    ecx,ebp
c0026fc1:	d3 e7                	shl    edi,cl
c0026fc3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026fc7:	89 d8                	mov    eax,ebx
c0026fc9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026fcd:	88 d1                	mov    cl,dl
c0026fcf:	d3 e8                	shr    eax,cl
c0026fd1:	89 c7                	mov    edi,eax
c0026fd3:	89 e9                	mov    ecx,ebp
c0026fd5:	d3 e3                	shl    ebx,cl
c0026fd7:	89 f0                	mov    eax,esi
c0026fd9:	88 d1                	mov    cl,dl
c0026fdb:	d3 e8                	shr    eax,cl
c0026fdd:	09 d8                	or     eax,ebx
c0026fdf:	89 e9                	mov    ecx,ebp
c0026fe1:	d3 e6                	shl    esi,cl
c0026fe3:	89 f3                	mov    ebx,esi
c0026fe5:	89 fa                	mov    edx,edi
c0026fe7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026feb:	89 d1                	mov    ecx,edx
c0026fed:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026ff1:	89 c6                	mov    esi,eax
c0026ff3:	89 d7                	mov    edi,edx
c0026ff5:	39 d1                	cmp    ecx,edx
c0026ff7:	72 27                	jb     c0027020 <__umoddi3+0x10c>
c0026ff9:	74 21                	je     c002701c <__umoddi3+0x108>
c0026ffb:	89 ca                	mov    edx,ecx
c0026ffd:	29 f3                	sub    ebx,esi
c0026fff:	19 fa                	sbb    edx,edi
c0027001:	89 d0                	mov    eax,edx
c0027003:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0027007:	d3 e0                	shl    eax,cl
c0027009:	89 e9                	mov    ecx,ebp
c002700b:	d3 eb                	shr    ebx,cl
c002700d:	09 d8                	or     eax,ebx
c002700f:	d3 ea                	shr    edx,cl
c0027011:	83 c4 1c             	add    esp,0x1c
c0027014:	5b                   	pop    ebx
c0027015:	5e                   	pop    esi
c0027016:	5f                   	pop    edi
c0027017:	5d                   	pop    ebp
c0027018:	c3                   	ret    
c0027019:	8d 76 00             	lea    esi,[esi+0x0]
c002701c:	39 c3                	cmp    ebx,eax
c002701e:	73 db                	jae    c0026ffb <__umoddi3+0xe7>
c0027020:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027024:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0027028:	89 d7                	mov    edi,edx
c002702a:	89 c6                	mov    esi,eax
c002702c:	eb cd                	jmp    c0026ffb <__umoddi3+0xe7>

c002702e <__addsf3>:
c002702e:	55                   	push   ebp
c002702f:	89 e5                	mov    ebp,esp
c0027031:	57                   	push   edi
c0027032:	56                   	push   esi
c0027033:	53                   	push   ebx
c0027034:	83 ec 08             	sub    esp,0x8
c0027037:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002703a:	89 fa                	mov    edx,edi
c002703c:	89 f8                	mov    eax,edi
c002703e:	c1 f8 17             	sar    eax,0x17
c0027041:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027044:	c1 e2 08             	shl    edx,0x8
c0027047:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002704d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027050:	89 de                	mov    esi,ebx
c0027052:	c1 fe 17             	sar    esi,0x17
c0027055:	c1 e3 08             	shl    ebx,0x8
c0027058:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002705e:	31 f0                	xor    eax,esi
c0027060:	0f 88 3b 01 00 00    	js     c00271a1 <__addsf3+0x173>
c0027066:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0027069:	29 f1                	sub    ecx,esi
c002706b:	85 c9                	test   ecx,ecx
c002706d:	7e 54                	jle    c00270c3 <__addsf3+0x95>
c002706f:	89 f0                	mov    eax,esi
c0027071:	84 c0                	test   al,al
c0027073:	75 10                	jne    c0027085 <__addsf3+0x57>
c0027075:	85 db                	test   ebx,ebx
c0027077:	0f 84 aa 02 00 00    	je     c0027327 <__addsf3+0x2f9>
c002707d:	49                   	dec    ecx
c002707e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027081:	74 38                	je     c00270bb <__addsf3+0x8d>
c0027083:	eb 13                	jmp    c0027098 <__addsf3+0x6a>
c0027085:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027088:	f7 d0                	not    eax
c002708a:	84 c0                	test   al,al
c002708c:	0f 84 95 02 00 00    	je     c0027327 <__addsf3+0x2f9>
c0027092:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027098:	83 f9 1f             	cmp    ecx,0x1f
c002709b:	0f 8f 86 02 00 00    	jg     c0027327 <__addsf3+0x2f9>
c00270a1:	89 de                	mov    esi,ebx
c00270a3:	d3 ee                	shr    esi,cl
c00270a5:	b8 20 00 00 00       	mov    eax,0x20
c00270aa:	29 c8                	sub    eax,ecx
c00270ac:	89 c1                	mov    ecx,eax
c00270ae:	d3 e3                	shl    ebx,cl
c00270b0:	31 c0                	xor    eax,eax
c00270b2:	85 db                	test   ebx,ebx
c00270b4:	0f 95 c0             	setne  al
c00270b7:	09 f0                	or     eax,esi
c00270b9:	01 d0                	add    eax,edx
c00270bb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00270be:	e9 b6 00 00 00       	jmp    c0027179 <__addsf3+0x14b>
c00270c3:	74 5c                	je     c0027121 <__addsf3+0xf3>
c00270c5:	89 f1                	mov    ecx,esi
c00270c7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00270ca:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00270cd:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00270d1:	75 14                	jne    c00270e7 <__addsf3+0xb9>
c00270d3:	85 d2                	test   edx,edx
c00270d5:	0f 84 4c 02 00 00    	je     c0027327 <__addsf3+0x2f9>
c00270db:	49                   	dec    ecx
c00270dc:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00270df:	0f 84 94 00 00 00    	je     c0027179 <__addsf3+0x14b>
c00270e5:	eb 12                	jmp    c00270f9 <__addsf3+0xcb>
c00270e7:	89 f0                	mov    eax,esi
c00270e9:	f7 d0                	not    eax
c00270eb:	84 c0                	test   al,al
c00270ed:	0f 84 34 02 00 00    	je     c0027327 <__addsf3+0x2f9>
c00270f3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00270f9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00270fc:	83 f9 1f             	cmp    ecx,0x1f
c00270ff:	0f 8f 22 02 00 00    	jg     c0027327 <__addsf3+0x2f9>
c0027105:	89 d7                	mov    edi,edx
c0027107:	d3 ef                	shr    edi,cl
c0027109:	b8 20 00 00 00       	mov    eax,0x20
c002710e:	29 c8                	sub    eax,ecx
c0027110:	89 c1                	mov    ecx,eax
c0027112:	d3 e2                	shl    edx,cl
c0027114:	31 c0                	xor    eax,eax
c0027116:	85 d2                	test   edx,edx
c0027118:	0f 95 c0             	setne  al
c002711b:	09 f8                	or     eax,edi
c002711d:	01 d8                	add    eax,ebx
c002711f:	eb 58                	jmp    c0027179 <__addsf3+0x14b>
c0027121:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027124:	8d 70 01             	lea    esi,[eax+0x1]
c0027127:	f7 c6 fe 00 00 00    	test   esi,0xfe
c002712d:	75 32                	jne    c0027161 <__addsf3+0x133>
c002712f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027133:	75 1f                	jne    c0027154 <__addsf3+0x126>
c0027135:	85 d2                	test   edx,edx
c0027137:	0f 84 e0 01 00 00    	je     c002731d <__addsf3+0x2ef>
c002713d:	85 db                	test   ebx,ebx
c002713f:	0f 84 e2 01 00 00    	je     c0027327 <__addsf3+0x2f9>
c0027145:	89 d0                	mov    eax,edx
c0027147:	01 d8                	add    eax,ebx
c0027149:	0f 89 a9 01 00 00    	jns    c00272f8 <__addsf3+0x2ca>
c002714f:	e9 9d 01 00 00       	jmp    c00272f1 <__addsf3+0x2c3>
c0027154:	85 d2                	test   edx,edx
c0027156:	0f 85 cb 01 00 00    	jne    c0027327 <__addsf3+0x2f9>
c002715c:	e9 bc 01 00 00       	jmp    c002731d <__addsf3+0x2ef>
c0027161:	31 c0                	xor    eax,eax
c0027163:	89 f1                	mov    ecx,esi
c0027165:	f7 d1                	not    ecx
c0027167:	84 c9                	test   cl,cl
c0027169:	0f 84 90 01 00 00    	je     c00272ff <__addsf3+0x2d1>
c002716f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027172:	d1 e8                	shr    eax,1
c0027174:	e9 86 01 00 00       	jmp    c00272ff <__addsf3+0x2d1>
c0027179:	85 c0                	test   eax,eax
c002717b:	0f 89 7e 01 00 00    	jns    c00272ff <__addsf3+0x2d1>
c0027181:	46                   	inc    esi
c0027182:	89 f2                	mov    edx,esi
c0027184:	f7 d2                	not    edx
c0027186:	84 d2                	test   dl,dl
c0027188:	0f 84 6f 01 00 00    	je     c00272fd <__addsf3+0x2cf>
c002718e:	89 c2                	mov    edx,eax
c0027190:	83 e2 01             	and    edx,0x1
c0027193:	d1 e8                	shr    eax,1
c0027195:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002719a:	09 d0                	or     eax,edx
c002719c:	e9 5e 01 00 00       	jmp    c00272ff <__addsf3+0x2d1>
c00271a1:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00271a5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00271a8:	89 f0                	mov    eax,esi
c00271aa:	0f b6 c0             	movzx  eax,al
c00271ad:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00271b0:	29 c1                	sub    ecx,eax
c00271b2:	85 c9                	test   ecx,ecx
c00271b4:	7e 55                	jle    c002720b <__addsf3+0x1dd>
c00271b6:	85 c0                	test   eax,eax
c00271b8:	75 11                	jne    c00271cb <__addsf3+0x19d>
c00271ba:	85 db                	test   ebx,ebx
c00271bc:	0f 84 65 01 00 00    	je     c0027327 <__addsf3+0x2f9>
c00271c2:	49                   	dec    ecx
c00271c3:	75 19                	jne    c00271de <__addsf3+0x1b0>
c00271c5:	89 d0                	mov    eax,edx
c00271c7:	29 d8                	sub    eax,ebx
c00271c9:	eb 38                	jmp    c0027203 <__addsf3+0x1d5>
c00271cb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00271ce:	f7 d0                	not    eax
c00271d0:	84 c0                	test   al,al
c00271d2:	0f 84 4f 01 00 00    	je     c0027327 <__addsf3+0x2f9>
c00271d8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00271de:	83 f9 1f             	cmp    ecx,0x1f
c00271e1:	0f 8f 40 01 00 00    	jg     c0027327 <__addsf3+0x2f9>
c00271e7:	89 de                	mov    esi,ebx
c00271e9:	d3 ee                	shr    esi,cl
c00271eb:	b8 20 00 00 00       	mov    eax,0x20
c00271f0:	29 c8                	sub    eax,ecx
c00271f2:	89 c1                	mov    ecx,eax
c00271f4:	d3 e3                	shl    ebx,cl
c00271f6:	31 c0                	xor    eax,eax
c00271f8:	85 db                	test   ebx,ebx
c00271fa:	0f 95 c0             	setne  al
c00271fd:	09 f0                	or     eax,esi
c00271ff:	29 c2                	sub    edx,eax
c0027201:	89 d0                	mov    eax,edx
c0027203:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027206:	e9 af 00 00 00       	jmp    c00272ba <__addsf3+0x28c>
c002720b:	74 5c                	je     c0027269 <__addsf3+0x23b>
c002720d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0027210:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027213:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027217:	75 14                	jne    c002722d <__addsf3+0x1ff>
c0027219:	85 d2                	test   edx,edx
c002721b:	0f 84 06 01 00 00    	je     c0027327 <__addsf3+0x2f9>
c0027221:	48                   	dec    eax
c0027222:	75 1b                	jne    c002723f <__addsf3+0x211>
c0027224:	89 d8                	mov    eax,ebx
c0027226:	29 d0                	sub    eax,edx
c0027228:	e9 8d 00 00 00       	jmp    c00272ba <__addsf3+0x28c>
c002722d:	89 f1                	mov    ecx,esi
c002722f:	f7 d1                	not    ecx
c0027231:	84 c9                	test   cl,cl
c0027233:	0f 84 ee 00 00 00    	je     c0027327 <__addsf3+0x2f9>
c0027239:	81 ca 00 00 00 80    	or     edx,0x80000000
c002723f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027242:	83 f8 1f             	cmp    eax,0x1f
c0027245:	0f 8f dc 00 00 00    	jg     c0027327 <__addsf3+0x2f9>
c002724b:	89 d7                	mov    edi,edx
c002724d:	88 c1                	mov    cl,al
c002724f:	d3 ef                	shr    edi,cl
c0027251:	b9 20 00 00 00       	mov    ecx,0x20
c0027256:	29 c1                	sub    ecx,eax
c0027258:	d3 e2                	shl    edx,cl
c002725a:	31 c0                	xor    eax,eax
c002725c:	85 d2                	test   edx,edx
c002725e:	0f 95 c0             	setne  al
c0027261:	09 f8                	or     eax,edi
c0027263:	29 c3                	sub    ebx,eax
c0027265:	89 d8                	mov    eax,ebx
c0027267:	eb 51                	jmp    c00272ba <__addsf3+0x28c>
c0027269:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002726c:	40                   	inc    eax
c002726d:	a8 fe                	test   al,0xfe
c002726f:	75 3d                	jne    c00272ae <__addsf3+0x280>
c0027271:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027275:	0f 85 a7 00 00 00    	jne    c0027322 <__addsf3+0x2f4>
c002727b:	85 d2                	test   edx,edx
c002727d:	75 12                	jne    c0027291 <__addsf3+0x263>
c002727f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027282:	85 db                	test   ebx,ebx
c0027284:	0f 85 9d 00 00 00    	jne    c0027327 <__addsf3+0x2f9>
c002728a:	31 ff                	xor    edi,edi
c002728c:	e9 96 00 00 00       	jmp    c0027327 <__addsf3+0x2f9>
c0027291:	85 db                	test   ebx,ebx
c0027293:	0f 84 8e 00 00 00    	je     c0027327 <__addsf3+0x2f9>
c0027299:	89 d0                	mov    eax,edx
c002729b:	29 d8                	sub    eax,ebx
c002729d:	79 06                	jns    c00272a5 <__addsf3+0x277>
c002729f:	89 d8                	mov    eax,ebx
c00272a1:	29 d0                	sub    eax,edx
c00272a3:	eb 5a                	jmp    c00272ff <__addsf3+0x2d1>
c00272a5:	bf 00 00 00 00       	mov    edi,0x0
c00272aa:	74 7b                	je     c0027327 <__addsf3+0x2f9>
c00272ac:	eb 4a                	jmp    c00272f8 <__addsf3+0x2ca>
c00272ae:	89 d0                	mov    eax,edx
c00272b0:	29 d8                	sub    eax,ebx
c00272b2:	79 12                	jns    c00272c6 <__addsf3+0x298>
c00272b4:	89 d8                	mov    eax,ebx
c00272b6:	29 d0                	sub    eax,edx
c00272b8:	eb 09                	jmp    c00272c3 <__addsf3+0x295>
c00272ba:	85 c0                	test   eax,eax
c00272bc:	79 41                	jns    c00272ff <__addsf3+0x2d1>
c00272be:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00272c3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c00272c6:	31 f6                	xor    esi,esi
c00272c8:	85 c0                	test   eax,eax
c00272ca:	74 33                	je     c00272ff <__addsf3+0x2d1>
c00272cc:	0f bd c8             	bsr    ecx,eax
c00272cf:	83 f1 1f             	xor    ecx,0x1f
c00272d2:	d3 e0                	shl    eax,cl
c00272d4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c00272d8:	39 ca                	cmp    edx,ecx
c00272da:	7f 10                	jg     c00272ec <__addsf3+0x2be>
c00272dc:	29 d1                	sub    ecx,edx
c00272de:	41                   	inc    ecx
c00272df:	d3 e8                	shr    eax,cl
c00272e1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00272e4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c00272ea:	eb 13                	jmp    c00272ff <__addsf3+0x2d1>
c00272ec:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00272ef:	29 ce                	sub    esi,ecx
c00272f1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00272f6:	eb 07                	jmp    c00272ff <__addsf3+0x2d1>
c00272f8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00272fb:	eb 02                	jmp    c00272ff <__addsf3+0x2d1>
c00272fd:	31 c0                	xor    eax,eax
c00272ff:	89 c2                	mov    edx,eax
c0027301:	c1 ea 08             	shr    edx,0x8
c0027304:	a8 7f                	test   al,0x7f
c0027306:	0f 95 c1             	setne  cl
c0027309:	09 d1                	or     ecx,edx
c002730b:	83 e1 01             	and    ecx,0x1
c002730e:	c1 e8 07             	shr    eax,0x7
c0027311:	21 c8                	and    eax,ecx
c0027313:	c1 e6 17             	shl    esi,0x17
c0027316:	09 d6                	or     esi,edx
c0027318:	8d 3c 30             	lea    edi,[eax+esi*1]
c002731b:	eb 0a                	jmp    c0027327 <__addsf3+0x2f9>
c002731d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027320:	eb 05                	jmp    c0027327 <__addsf3+0x2f9>
c0027322:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0027327:	89 f8                	mov    eax,edi
c0027329:	5a                   	pop    edx
c002732a:	59                   	pop    ecx
c002732b:	5b                   	pop    ebx
c002732c:	5e                   	pop    esi
c002732d:	5f                   	pop    edi
c002732e:	5d                   	pop    ebp
c002732f:	c3                   	ret    

c0027330 <__subsf3>:
c0027330:	55                   	push   ebp
c0027331:	89 e5                	mov    ebp,esp
c0027333:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027336:	05 00 00 00 80       	add    eax,0x80000000
c002733b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002733e:	5d                   	pop    ebp
c002733f:	e9 ea fc ff ff       	jmp    c002702e <__addsf3>

c0027344 <__negsf2>:
c0027344:	55                   	push   ebp
c0027345:	89 e5                	mov    ebp,esp
c0027347:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002734a:	05 00 00 00 80       	add    eax,0x80000000
c002734f:	5d                   	pop    ebp
c0027350:	c3                   	ret    

c0027351 <__mulsf3>:
c0027351:	55                   	push   ebp
c0027352:	89 e5                	mov    ebp,esp
c0027354:	57                   	push   edi
c0027355:	56                   	push   esi
c0027356:	53                   	push   ebx
c0027357:	83 ec 1c             	sub    esp,0x1c
c002735a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002735d:	89 f0                	mov    eax,esi
c002735f:	89 f1                	mov    ecx,esi
c0027361:	c1 f9 17             	sar    ecx,0x17
c0027364:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027367:	c1 e0 08             	shl    eax,0x8
c002736a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002736f:	89 c1                	mov    ecx,eax
c0027371:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027374:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027377:	89 c7                	mov    edi,eax
c0027379:	c1 ff 17             	sar    edi,0x17
c002737c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027380:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027383:	89 f8                	mov    eax,edi
c0027385:	0f b6 c0             	movzx  eax,al
c0027388:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c002738b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c002738f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027392:	42                   	inc    edx
c0027393:	80 e2 fe             	and    dl,0xfe
c0027396:	75 7b                	jne    c0027413 <__mulsf3+0xc2>
c0027398:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002739c:	74 54                	je     c00273f2 <__mulsf3+0xa1>
c002739e:	85 c9                	test   ecx,ecx
c00273a0:	0f 85 64 01 00 00    	jne    c002750a <__mulsf3+0x1b9>
c00273a6:	8d 57 01             	lea    edx,[edi+0x1]
c00273a9:	80 e2 fe             	and    dl,0xfe
c00273ac:	75 1f                	jne    c00273cd <__mulsf3+0x7c>
c00273ae:	85 c0                	test   eax,eax
c00273b0:	b8 00 00 00 00       	mov    eax,0x0
c00273b5:	74 29                	je     c00273e0 <__mulsf3+0x8f>
c00273b7:	53                   	push   ebx
c00273b8:	53                   	push   ebx
c00273b9:	50                   	push   eax
c00273ba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00273bd:	e8 96 05 00 00       	call   c0027958 <__nesf2>
c00273c2:	83 c4 10             	add    esp,0x10
c00273c5:	85 c0                	test   eax,eax
c00273c7:	0f 85 3a 01 00 00    	jne    c0027507 <__mulsf3+0x1b6>
c00273cd:	85 ff                	test   edi,edi
c00273cf:	0f 89 35 01 00 00    	jns    c002750a <__mulsf3+0x1b9>
c00273d5:	81 c6 00 00 00 80    	add    esi,0x80000000
c00273db:	e9 2a 01 00 00       	jmp    c002750a <__mulsf3+0x1b9>
c00273e0:	51                   	push   ecx
c00273e1:	51                   	push   ecx
c00273e2:	50                   	push   eax
c00273e3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00273e6:	e8 6d 05 00 00       	call   c0027958 <__nesf2>
c00273eb:	83 c4 10             	add    esp,0x10
c00273ee:	85 c0                	test   eax,eax
c00273f0:	eb 15                	jmp    c0027407 <__mulsf3+0xb6>
c00273f2:	85 c9                	test   ecx,ecx
c00273f4:	74 0b                	je     c0027401 <__mulsf3+0xb0>
c00273f6:	8d 53 ff             	lea    edx,[ebx-0x1]
c00273f9:	01 c9                	add    ecx,ecx
c00273fb:	78 16                	js     c0027413 <__mulsf3+0xc2>
c00273fd:	89 d3                	mov    ebx,edx
c00273ff:	eb f5                	jmp    c00273f6 <__mulsf3+0xa5>
c0027401:	89 f8                	mov    eax,edi
c0027403:	f7 d0                	not    eax
c0027405:	84 c0                	test   al,al
c0027407:	75 c4                	jne    c00273cd <__mulsf3+0x7c>
c0027409:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c002740e:	e9 f7 00 00 00       	jmp    c002750a <__mulsf3+0x1b9>
c0027413:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027416:	c1 e6 08             	shl    esi,0x8
c0027419:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c002741f:	8d 57 01             	lea    edx,[edi+0x1]
c0027422:	80 e2 fe             	and    dl,0xfe
c0027425:	75 63                	jne    c002748a <__mulsf3+0x139>
c0027427:	85 c0                	test   eax,eax
c0027429:	74 2f                	je     c002745a <__mulsf3+0x109>
c002742b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002742f:	0f 89 d2 00 00 00    	jns    c0027507 <__mulsf3+0x1b6>
c0027435:	52                   	push   edx
c0027436:	52                   	push   edx
c0027437:	6a 00                	push   0x0
c0027439:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002743c:	e8 dc 04 00 00       	call   c002791d <__eqsf2>
c0027441:	83 c4 10             	add    esp,0x10
c0027444:	85 c0                	test   eax,eax
c0027446:	0f 85 bb 00 00 00    	jne    c0027507 <__mulsf3+0x1b6>
c002744c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002744f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027455:	e9 b0 00 00 00       	jmp    c002750a <__mulsf3+0x1b9>
c002745a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002745d:	50                   	push   eax
c002745e:	50                   	push   eax
c002745f:	6a 00                	push   0x0
c0027461:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027464:	e8 b4 04 00 00       	call   c002791d <__eqsf2>
c0027469:	83 c4 10             	add    esp,0x10
c002746c:	85 c0                	test   eax,eax
c002746e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027471:	75 0c                	jne    c002747f <__mulsf3+0x12e>
c0027473:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027477:	0f 89 8a 00 00 00    	jns    c0027507 <__mulsf3+0x1b6>
c002747d:	eb cd                	jmp    c002744c <__mulsf3+0xfb>
c002747f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027482:	01 f6                	add    esi,esi
c0027484:	78 04                	js     c002748a <__mulsf3+0x139>
c0027486:	89 c3                	mov    ebx,eax
c0027488:	eb f5                	jmp    c002747f <__mulsf3+0x12e>
c002748a:	89 c8                	mov    eax,ecx
c002748c:	0d 00 00 00 80       	or     eax,0x80000000
c0027491:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027497:	f7 e6                	mul    esi
c0027499:	85 c0                	test   eax,eax
c002749b:	0f 95 c0             	setne  al
c002749e:	0f b6 c0             	movzx  eax,al
c00274a1:	09 c2                	or     edx,eax
c00274a3:	78 03                	js     c00274a8 <__mulsf3+0x157>
c00274a5:	01 d2                	add    edx,edx
c00274a7:	4b                   	dec    ebx
c00274a8:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c00274ae:	7f 22                	jg     c00274d2 <__mulsf3+0x181>
c00274b0:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00274b6:	85 db                	test   ebx,ebx
c00274b8:	7f 23                	jg     c00274dd <__mulsf3+0x18c>
c00274ba:	83 fb e9             	cmp    ebx,0xffffffe9
c00274bd:	7c 1a                	jl     c00274d9 <__mulsf3+0x188>
c00274bf:	81 ca 00 00 00 80    	or     edx,0x80000000
c00274c5:	b9 01 00 00 00       	mov    ecx,0x1
c00274ca:	29 d9                	sub    ecx,ebx
c00274cc:	d3 ea                	shr    edx,cl
c00274ce:	31 db                	xor    ebx,ebx
c00274d0:	eb 0b                	jmp    c00274dd <__mulsf3+0x18c>
c00274d2:	bb ff 00 00 00       	mov    ebx,0xff
c00274d7:	eb 02                	jmp    c00274db <__mulsf3+0x18a>
c00274d9:	31 db                	xor    ebx,ebx
c00274db:	31 d2                	xor    edx,edx
c00274dd:	89 d0                	mov    eax,edx
c00274df:	c1 e8 08             	shr    eax,0x8
c00274e2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00274e5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00274eb:	09 fb                	or     ebx,edi
c00274ed:	c1 e3 17             	shl    ebx,0x17
c00274f0:	09 c3                	or     ebx,eax
c00274f2:	f6 c2 7f             	test   dl,0x7f
c00274f5:	0f 95 c1             	setne  cl
c00274f8:	09 c8                	or     eax,ecx
c00274fa:	83 e0 01             	and    eax,0x1
c00274fd:	c1 ea 07             	shr    edx,0x7
c0027500:	21 c2                	and    edx,eax
c0027502:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027505:	eb 03                	jmp    c002750a <__mulsf3+0x1b9>
c0027507:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c002750a:	89 f0                	mov    eax,esi
c002750c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002750f:	5b                   	pop    ebx
c0027510:	5e                   	pop    esi
c0027511:	5f                   	pop    edi
c0027512:	5d                   	pop    ebp
c0027513:	c3                   	ret    

c0027514 <__divsf3>:
c0027514:	55                   	push   ebp
c0027515:	89 e5                	mov    ebp,esp
c0027517:	57                   	push   edi
c0027518:	56                   	push   esi
c0027519:	53                   	push   ebx
c002751a:	83 ec 1c             	sub    esp,0x1c
c002751d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027520:	89 d8                	mov    eax,ebx
c0027522:	89 d9                	mov    ecx,ebx
c0027524:	c1 f9 17             	sar    ecx,0x17
c0027527:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002752a:	c1 e0 08             	shl    eax,0x8
c002752d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027532:	89 c1                	mov    ecx,eax
c0027534:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027537:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002753a:	89 c7                	mov    edi,eax
c002753c:	c1 ff 17             	sar    edi,0x17
c002753f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027543:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027546:	89 f8                	mov    eax,edi
c0027548:	0f b6 c0             	movzx  eax,al
c002754b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002754e:	29 c6                	sub    esi,eax
c0027550:	83 c6 7f             	add    esi,0x7f
c0027553:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027556:	42                   	inc    edx
c0027557:	80 e2 fe             	and    dl,0xfe
c002755a:	0f 85 9c 00 00 00    	jne    c00275fc <__divsf3+0xe8>
c0027560:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027564:	74 33                	je     c0027599 <__divsf3+0x85>
c0027566:	85 c9                	test   ecx,ecx
c0027568:	0f 85 c7 01 00 00    	jne    c0027735 <__divsf3+0x221>
c002756e:	8d 57 01             	lea    edx,[edi+0x1]
c0027571:	80 e2 fe             	and    dl,0xfe
c0027574:	75 2f                	jne    c00275a5 <__divsf3+0x91>
c0027576:	85 c0                	test   eax,eax
c0027578:	74 2b                	je     c00275a5 <__divsf3+0x91>
c002757a:	51                   	push   ecx
c002757b:	51                   	push   ecx
c002757c:	6a 00                	push   0x0
c002757e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027581:	e8 d2 03 00 00       	call   c0027958 <__nesf2>
c0027586:	83 c4 10             	add    esp,0x10
c0027589:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002758c:	85 c0                	test   eax,eax
c002758e:	0f 85 a1 01 00 00    	jne    c0027735 <__divsf3+0x221>
c0027594:	e9 92 01 00 00       	jmp    c002772b <__divsf3+0x217>
c0027599:	85 c9                	test   ecx,ecx
c002759b:	75 1b                	jne    c00275b8 <__divsf3+0xa4>
c002759d:	8d 57 01             	lea    edx,[edi+0x1]
c00275a0:	80 e2 fe             	and    dl,0xfe
c00275a3:	74 1e                	je     c00275c3 <__divsf3+0xaf>
c00275a5:	85 ff                	test   edi,edi
c00275a7:	0f 89 88 01 00 00    	jns    c0027735 <__divsf3+0x221>
c00275ad:	81 c3 00 00 00 80    	add    ebx,0x80000000
c00275b3:	e9 7d 01 00 00       	jmp    c0027735 <__divsf3+0x221>
c00275b8:	8d 56 ff             	lea    edx,[esi-0x1]
c00275bb:	01 c9                	add    ecx,ecx
c00275bd:	78 3d                	js     c00275fc <__divsf3+0xe8>
c00275bf:	89 d6                	mov    esi,edx
c00275c1:	eb f5                	jmp    c00275b8 <__divsf3+0xa4>
c00275c3:	85 c0                	test   eax,eax
c00275c5:	b8 00 00 00 00       	mov    eax,0x0
c00275ca:	74 18                	je     c00275e4 <__divsf3+0xd0>
c00275cc:	52                   	push   edx
c00275cd:	52                   	push   edx
c00275ce:	50                   	push   eax
c00275cf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00275d2:	e8 81 03 00 00       	call   c0027958 <__nesf2>
c00275d7:	83 c4 10             	add    esp,0x10
c00275da:	85 c0                	test   eax,eax
c00275dc:	0f 85 50 01 00 00    	jne    c0027732 <__divsf3+0x21e>
c00275e2:	eb c1                	jmp    c00275a5 <__divsf3+0x91>
c00275e4:	56                   	push   esi
c00275e5:	56                   	push   esi
c00275e6:	50                   	push   eax
c00275e7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00275ea:	e8 69 03 00 00       	call   c0027958 <__nesf2>
c00275ef:	83 c4 10             	add    esp,0x10
c00275f2:	85 c0                	test   eax,eax
c00275f4:	0f 84 31 01 00 00    	je     c002772b <__divsf3+0x217>
c00275fa:	eb a9                	jmp    c00275a5 <__divsf3+0x91>
c00275fc:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00275ff:	c1 e3 08             	shl    ebx,0x8
c0027602:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027608:	8d 57 01             	lea    edx,[edi+0x1]
c002760b:	80 e2 fe             	and    dl,0xfe
c002760e:	75 71                	jne    c0027681 <__divsf3+0x16d>
c0027610:	85 c0                	test   eax,eax
c0027612:	ba 00 00 00 00       	mov    edx,0x0
c0027617:	74 2f                	je     c0027648 <__divsf3+0x134>
c0027619:	51                   	push   ecx
c002761a:	51                   	push   ecx
c002761b:	52                   	push   edx
c002761c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002761f:	e8 f9 02 00 00       	call   c002791d <__eqsf2>
c0027624:	83 c4 10             	add    esp,0x10
c0027627:	85 c0                	test   eax,eax
c0027629:	0f 85 03 01 00 00    	jne    c0027732 <__divsf3+0x21e>
c002762f:	31 d2                	xor    edx,edx
c0027631:	89 d3                	mov    ebx,edx
c0027633:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027636:	31 f8                	xor    eax,edi
c0027638:	0f 89 f7 00 00 00    	jns    c0027735 <__divsf3+0x221>
c002763e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027643:	e9 ed 00 00 00       	jmp    c0027735 <__divsf3+0x221>
c0027648:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002764b:	50                   	push   eax
c002764c:	50                   	push   eax
c002764d:	52                   	push   edx
c002764e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027651:	e8 c7 02 00 00       	call   c002791d <__eqsf2>
c0027656:	83 c4 10             	add    esp,0x10
c0027659:	85 c0                	test   eax,eax
c002765b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002765e:	75 16                	jne    c0027676 <__divsf3+0x162>
c0027660:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027663:	31 fb                	xor    ebx,edi
c0027665:	81 e3 00 00 00 80    	and    ebx,0x80000000
c002766b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027671:	e9 bf 00 00 00       	jmp    c0027735 <__divsf3+0x221>
c0027676:	8d 46 01             	lea    eax,[esi+0x1]
c0027679:	01 db                	add    ebx,ebx
c002767b:	78 04                	js     c0027681 <__divsf3+0x16d>
c002767d:	89 c6                	mov    esi,eax
c002767f:	eb f5                	jmp    c0027676 <__divsf3+0x162>
c0027681:	89 c8                	mov    eax,ecx
c0027683:	0d 00 00 00 80       	or     eax,0x80000000
c0027688:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002768e:	31 d2                	xor    edx,edx
c0027690:	39 d8                	cmp    eax,ebx
c0027692:	72 07                	jb     c002769b <__divsf3+0x187>
c0027694:	29 d8                	sub    eax,ebx
c0027696:	ba 01 00 00 00       	mov    edx,0x1
c002769b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c00276a2:	01 d2                	add    edx,edx
c00276a4:	89 c1                	mov    ecx,eax
c00276a6:	01 c0                	add    eax,eax
c00276a8:	85 c9                	test   ecx,ecx
c00276aa:	78 04                	js     c00276b0 <__divsf3+0x19c>
c00276ac:	39 c3                	cmp    ebx,eax
c00276ae:	77 05                	ja     c00276b5 <__divsf3+0x1a1>
c00276b0:	29 d8                	sub    eax,ebx
c00276b2:	83 ca 01             	or     edx,0x1
c00276b5:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c00276b8:	75 e8                	jne    c00276a2 <__divsf3+0x18e>
c00276ba:	85 c0                	test   eax,eax
c00276bc:	0f 95 c0             	setne  al
c00276bf:	0f b6 c0             	movzx  eax,al
c00276c2:	c1 e2 06             	shl    edx,0x6
c00276c5:	09 c2                	or     edx,eax
c00276c7:	78 03                	js     c00276cc <__divsf3+0x1b8>
c00276c9:	01 d2                	add    edx,edx
c00276cb:	4e                   	dec    esi
c00276cc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00276d2:	7f 22                	jg     c00276f6 <__divsf3+0x1e2>
c00276d4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00276da:	85 f6                	test   esi,esi
c00276dc:	7f 23                	jg     c0027701 <__divsf3+0x1ed>
c00276de:	83 fe e9             	cmp    esi,0xffffffe9
c00276e1:	7c 1a                	jl     c00276fd <__divsf3+0x1e9>
c00276e3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00276e9:	b9 01 00 00 00       	mov    ecx,0x1
c00276ee:	29 f1                	sub    ecx,esi
c00276f0:	d3 ea                	shr    edx,cl
c00276f2:	31 f6                	xor    esi,esi
c00276f4:	eb 0b                	jmp    c0027701 <__divsf3+0x1ed>
c00276f6:	be ff 00 00 00       	mov    esi,0xff
c00276fb:	eb 02                	jmp    c00276ff <__divsf3+0x1eb>
c00276fd:	31 f6                	xor    esi,esi
c00276ff:	31 d2                	xor    edx,edx
c0027701:	89 d0                	mov    eax,edx
c0027703:	c1 e8 08             	shr    eax,0x8
c0027706:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027709:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002770f:	09 fe                	or     esi,edi
c0027711:	c1 e6 17             	shl    esi,0x17
c0027714:	09 c6                	or     esi,eax
c0027716:	f6 c2 7f             	test   dl,0x7f
c0027719:	0f 95 c1             	setne  cl
c002771c:	09 c8                	or     eax,ecx
c002771e:	83 e0 01             	and    eax,0x1
c0027721:	c1 ea 07             	shr    edx,0x7
c0027724:	21 c2                	and    edx,eax
c0027726:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027729:	eb 0a                	jmp    c0027735 <__divsf3+0x221>
c002772b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027730:	eb 03                	jmp    c0027735 <__divsf3+0x221>
c0027732:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027735:	89 d8                	mov    eax,ebx
c0027737:	8d 65 f4             	lea    esp,[ebp-0xc]
c002773a:	5b                   	pop    ebx
c002773b:	5e                   	pop    esi
c002773c:	5f                   	pop    edi
c002773d:	5d                   	pop    ebp
c002773e:	c3                   	ret    

c002773f <__floatsisf>:
c002773f:	55                   	push   ebp
c0027740:	89 e5                	mov    ebp,esp
c0027742:	53                   	push   ebx
c0027743:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027746:	85 d2                	test   edx,edx
c0027748:	7e 2b                	jle    c0027775 <__floatsisf+0x36>
c002774a:	0f bd ca             	bsr    ecx,edx
c002774d:	83 f1 1f             	xor    ecx,0x1f
c0027750:	d3 e2                	shl    edx,cl
c0027752:	89 d0                	mov    eax,edx
c0027754:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027759:	89 c3                	mov    ebx,eax
c002775b:	c1 eb 08             	shr    ebx,0x8
c002775e:	80 e2 7f             	and    dl,0x7f
c0027761:	0f 95 c2             	setne  dl
c0027764:	09 da                	or     edx,ebx
c0027766:	83 e2 01             	and    edx,0x1
c0027769:	c1 e8 07             	shr    eax,0x7
c002776c:	21 c2                	and    edx,eax
c002776e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027773:	eb 32                	jmp    c00277a7 <__floatsisf+0x68>
c0027775:	b8 00 00 00 00       	mov    eax,0x0
c002777a:	74 34                	je     c00277b0 <__floatsisf+0x71>
c002777c:	f7 da                	neg    edx
c002777e:	0f bd ca             	bsr    ecx,edx
c0027781:	83 f1 1f             	xor    ecx,0x1f
c0027784:	d3 e2                	shl    edx,cl
c0027786:	89 d0                	mov    eax,edx
c0027788:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002778d:	89 c3                	mov    ebx,eax
c002778f:	c1 eb 08             	shr    ebx,0x8
c0027792:	80 e2 7f             	and    dl,0x7f
c0027795:	0f 95 c2             	setne  dl
c0027798:	09 da                	or     edx,ebx
c002779a:	83 e2 01             	and    edx,0x1
c002779d:	c1 e8 07             	shr    eax,0x7
c00277a0:	21 c2                	and    edx,eax
c00277a2:	b8 9e 01 00 00       	mov    eax,0x19e
c00277a7:	29 c8                	sub    eax,ecx
c00277a9:	c1 e0 17             	shl    eax,0x17
c00277ac:	09 d8                	or     eax,ebx
c00277ae:	01 d0                	add    eax,edx
c00277b0:	5b                   	pop    ebx
c00277b1:	5d                   	pop    ebp
c00277b2:	c3                   	ret    

c00277b3 <__floatunsisf>:
c00277b3:	55                   	push   ebp
c00277b4:	89 e5                	mov    ebp,esp
c00277b6:	53                   	push   ebx
c00277b7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00277ba:	31 c0                	xor    eax,eax
c00277bc:	85 d2                	test   edx,edx
c00277be:	74 32                	je     c00277f2 <__floatunsisf+0x3f>
c00277c0:	0f bd ca             	bsr    ecx,edx
c00277c3:	83 f1 1f             	xor    ecx,0x1f
c00277c6:	d3 e2                	shl    edx,cl
c00277c8:	89 d0                	mov    eax,edx
c00277ca:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00277cf:	89 c3                	mov    ebx,eax
c00277d1:	c1 eb 08             	shr    ebx,0x8
c00277d4:	80 e2 7f             	and    dl,0x7f
c00277d7:	0f 95 c2             	setne  dl
c00277da:	09 da                	or     edx,ebx
c00277dc:	83 e2 01             	and    edx,0x1
c00277df:	c1 e8 07             	shr    eax,0x7
c00277e2:	21 c2                	and    edx,eax
c00277e4:	b8 9e 00 00 00       	mov    eax,0x9e
c00277e9:	29 c8                	sub    eax,ecx
c00277eb:	c1 e0 17             	shl    eax,0x17
c00277ee:	09 d8                	or     eax,ebx
c00277f0:	01 d0                	add    eax,edx
c00277f2:	5b                   	pop    ebx
c00277f3:	5d                   	pop    ebp
c00277f4:	c3                   	ret    

c00277f5 <__fixsfsi>:
c00277f5:	55                   	push   ebp
c00277f6:	89 e5                	mov    ebp,esp
c00277f8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00277fb:	89 d1                	mov    ecx,edx
c00277fd:	c1 e1 08             	shl    ecx,0x8
c0027800:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027806:	c1 fa 17             	sar    edx,0x17
c0027809:	78 1c                	js     c0027827 <__fixsfsi+0x32>
c002780b:	83 ea 7f             	sub    edx,0x7f
c002780e:	31 c0                	xor    eax,eax
c0027810:	83 fa 1e             	cmp    edx,0x1e
c0027813:	77 40                	ja     c0027855 <__fixsfsi+0x60>
c0027815:	89 c8                	mov    eax,ecx
c0027817:	0d 00 00 00 80       	or     eax,0x80000000
c002781c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027821:	29 d1                	sub    ecx,edx
c0027823:	d3 e8                	shr    eax,cl
c0027825:	eb 2e                	jmp    c0027855 <__fixsfsi+0x60>
c0027827:	31 c0                	xor    eax,eax
c0027829:	81 c2 81 00 00 00    	add    edx,0x81
c002782f:	78 24                	js     c0027855 <__fixsfsi+0x60>
c0027831:	83 fa 1e             	cmp    edx,0x1e
c0027834:	7e 09                	jle    c002783f <__fixsfsi+0x4a>
c0027836:	83 fa 1f             	cmp    edx,0x1f
c0027839:	75 18                	jne    c0027853 <__fixsfsi+0x5e>
c002783b:	85 c9                	test   ecx,ecx
c002783d:	75 14                	jne    c0027853 <__fixsfsi+0x5e>
c002783f:	89 c8                	mov    eax,ecx
c0027841:	0d 00 00 00 80       	or     eax,0x80000000
c0027846:	b9 1f 00 00 00       	mov    ecx,0x1f
c002784b:	29 d1                	sub    ecx,edx
c002784d:	d3 e8                	shr    eax,cl
c002784f:	f7 d8                	neg    eax
c0027851:	eb 02                	jmp    c0027855 <__fixsfsi+0x60>
c0027853:	31 c0                	xor    eax,eax
c0027855:	5d                   	pop    ebp
c0027856:	c3                   	ret    

c0027857 <__fixunssfsi>:
c0027857:	55                   	push   ebp
c0027858:	89 e5                	mov    ebp,esp
c002785a:	53                   	push   ebx
c002785b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002785e:	89 d3                	mov    ebx,edx
c0027860:	c1 fb 17             	sar    ebx,0x17
c0027863:	83 eb 7f             	sub    ebx,0x7f
c0027866:	31 c0                	xor    eax,eax
c0027868:	83 fb 1f             	cmp    ebx,0x1f
c002786b:	77 18                	ja     c0027885 <__fixunssfsi+0x2e>
c002786d:	89 d0                	mov    eax,edx
c002786f:	c1 e0 08             	shl    eax,0x8
c0027872:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027877:	0d 00 00 00 80       	or     eax,0x80000000
c002787c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027881:	29 d9                	sub    ecx,ebx
c0027883:	d3 e8                	shr    eax,cl
c0027885:	5b                   	pop    ebx
c0027886:	5d                   	pop    ebp
c0027887:	c3                   	ret    

c0027888 <__cmpsf2>:
c0027888:	55                   	push   ebp
c0027889:	89 e5                	mov    ebp,esp
c002788b:	57                   	push   edi
c002788c:	56                   	push   esi
c002788d:	53                   	push   ebx
c002788e:	83 ec 24             	sub    esp,0x24
c0027891:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027894:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027897:	e8 4f 10 00 00       	call   c00288eb <__truncdfsf2>
c002789c:	5a                   	pop    edx
c002789d:	59                   	pop    ecx
c002789e:	89 c3                	mov    ebx,eax
c00278a0:	c1 e8 17             	shr    eax,0x17
c00278a3:	0f b6 f0             	movzx  esi,al
c00278a6:	89 d8                	mov    eax,ebx
c00278a8:	c1 e8 1f             	shr    eax,0x1f
c00278ab:	31 c6                	xor    esi,eax
c00278ad:	c1 e3 08             	shl    ebx,0x8
c00278b0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00278b3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00278b6:	e8 30 10 00 00       	call   c00288eb <__truncdfsf2>
c00278bb:	83 c4 10             	add    esp,0x10
c00278be:	89 c1                	mov    ecx,eax
c00278c0:	c1 e9 17             	shr    ecx,0x17
c00278c3:	0f b6 c9             	movzx  ecx,cl
c00278c6:	89 c7                	mov    edi,eax
c00278c8:	c1 ef 1f             	shr    edi,0x1f
c00278cb:	89 ca                	mov    edx,ecx
c00278cd:	31 fa                	xor    edx,edi
c00278cf:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00278d2:	c1 e0 08             	shl    eax,0x8
c00278d5:	89 c2                	mov    edx,eax
c00278d7:	89 d8                	mov    eax,ebx
c00278d9:	09 d0                	or     eax,edx
c00278db:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00278e0:	09 f0                	or     eax,esi
c00278e2:	75 08                	jne    c00278ec <__cmpsf2+0x64>
c00278e4:	31 c0                	xor    eax,eax
c00278e6:	39 f9                	cmp    ecx,edi
c00278e8:	75 0c                	jne    c00278f6 <__cmpsf2+0x6e>
c00278ea:	eb 29                	jmp    c0027915 <__cmpsf2+0x8d>
c00278ec:	b8 01 00 00 00       	mov    eax,0x1
c00278f1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00278f4:	7f 1f                	jg     c0027915 <__cmpsf2+0x8d>
c00278f6:	83 c8 ff             	or     eax,0xffffffff
c00278f9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00278fc:	7c 17                	jl     c0027915 <__cmpsf2+0x8d>
c00278fe:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027904:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002790a:	b8 01 00 00 00       	mov    eax,0x1
c002790f:	39 d3                	cmp    ebx,edx
c0027911:	77 02                	ja     c0027915 <__cmpsf2+0x8d>
c0027913:	19 c0                	sbb    eax,eax
c0027915:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027918:	5b                   	pop    ebx
c0027919:	5e                   	pop    esi
c002791a:	5f                   	pop    edi
c002791b:	5d                   	pop    ebp
c002791c:	c3                   	ret    

c002791d <__eqsf2>:
c002791d:	55                   	push   ebp
c002791e:	89 e5                	mov    ebp,esp
c0027920:	83 ec 24             	sub    esp,0x24
c0027923:	6a 01                	push   0x1
c0027925:	83 ec 0c             	sub    esp,0xc
c0027928:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002792b:	e8 df 10 00 00       	call   c0028a0f <__extendsfdf2>
c0027930:	83 c4 10             	add    esp,0x10
c0027933:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027936:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027939:	52                   	push   edx
c002793a:	50                   	push   eax
c002793b:	50                   	push   eax
c002793c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002793f:	e8 cb 10 00 00       	call   c0028a0f <__extendsfdf2>
c0027944:	59                   	pop    ecx
c0027945:	59                   	pop    ecx
c0027946:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027949:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002794c:	52                   	push   edx
c002794d:	50                   	push   eax
c002794e:	e8 35 ff ff ff       	call   c0027888 <__cmpsf2>
c0027953:	83 c4 20             	add    esp,0x20
c0027956:	c9                   	leave  
c0027957:	c3                   	ret    

c0027958 <__nesf2>:
c0027958:	eb c3                	jmp    c002791d <__eqsf2>

c002795a <__gtsf2>:
c002795a:	55                   	push   ebp
c002795b:	89 e5                	mov    ebp,esp
c002795d:	83 ec 24             	sub    esp,0x24
c0027960:	6a ff                	push   0xffffffff
c0027962:	83 ec 0c             	sub    esp,0xc
c0027965:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027968:	e8 a2 10 00 00       	call   c0028a0f <__extendsfdf2>
c002796d:	83 c4 10             	add    esp,0x10
c0027970:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027973:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027976:	52                   	push   edx
c0027977:	50                   	push   eax
c0027978:	50                   	push   eax
c0027979:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002797c:	e8 8e 10 00 00       	call   c0028a0f <__extendsfdf2>
c0027981:	59                   	pop    ecx
c0027982:	59                   	pop    ecx
c0027983:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027986:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027989:	52                   	push   edx
c002798a:	50                   	push   eax
c002798b:	e8 f8 fe ff ff       	call   c0027888 <__cmpsf2>
c0027990:	83 c4 20             	add    esp,0x20
c0027993:	c9                   	leave  
c0027994:	c3                   	ret    

c0027995 <__gesf2>:
c0027995:	eb c3                	jmp    c002795a <__gtsf2>

c0027997 <__ltsf2>:
c0027997:	eb 84                	jmp    c002791d <__eqsf2>

c0027999 <__lesf2>:
c0027999:	eb 82                	jmp    c002791d <__eqsf2>

c002799b <__adddf3>:
c002799b:	55                   	push   ebp
c002799c:	89 e5                	mov    ebp,esp
c002799e:	57                   	push   edi
c002799f:	56                   	push   esi
c00279a0:	53                   	push   ebx
c00279a1:	83 ec 24             	sub    esp,0x24
c00279a4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00279a7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00279aa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00279ad:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00279b0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00279b3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00279b6:	89 c8                	mov    eax,ecx
c00279b8:	89 ce                	mov    esi,ecx
c00279ba:	c1 fe 14             	sar    esi,0x14
c00279bd:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00279c0:	89 fb                	mov    ebx,edi
c00279c2:	89 fa                	mov    edx,edi
c00279c4:	c1 e2 0b             	shl    edx,0xb
c00279c7:	c1 e0 0b             	shl    eax,0xb
c00279ca:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00279cf:	c1 eb 15             	shr    ebx,0x15
c00279d2:	09 d8                	or     eax,ebx
c00279d4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00279d7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00279da:	c1 fe 14             	sar    esi,0x14
c00279dd:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00279e0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00279e3:	89 f3                	mov    ebx,esi
c00279e5:	c1 e3 0b             	shl    ebx,0xb
c00279e8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00279eb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00279ee:	c1 e3 0b             	shl    ebx,0xb
c00279f1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00279f7:	c1 ee 15             	shr    esi,0x15
c00279fa:	09 f3                	or     ebx,esi
c00279fc:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00279ff:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027a02:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027a05:	0f 88 5f 02 00 00    	js     c0027c6a <__adddf3+0x2cf>
c0027a0b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027a0e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027a11:	85 db                	test   ebx,ebx
c0027a13:	0f 8e c7 00 00 00    	jle    c0027ae0 <__adddf3+0x145>
c0027a19:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027a20:	75 1a                	jne    c0027a3c <__adddf3+0xa1>
c0027a22:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027a25:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027a28:	0f 84 b2 05 00 00    	je     c0027fe0 <__adddf3+0x645>
c0027a2e:	4b                   	dec    ebx
c0027a2f:	75 23                	jne    c0027a54 <__adddf3+0xb9>
c0027a31:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027a34:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027a37:	e9 99 00 00 00       	jmp    c0027ad5 <__adddf3+0x13a>
c0027a3c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027a3f:	f7 d6                	not    esi
c0027a41:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027a47:	0f 84 93 05 00 00    	je     c0027fe0 <__adddf3+0x645>
c0027a4d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027a54:	83 fb 1f             	cmp    ebx,0x1f
c0027a57:	7e 42                	jle    c0027a9b <__adddf3+0x100>
c0027a59:	83 fb 3f             	cmp    ebx,0x3f
c0027a5c:	0f 8f 7e 05 00 00    	jg     c0027fe0 <__adddf3+0x645>
c0027a62:	83 e3 1f             	and    ebx,0x1f
c0027a65:	89 d9                	mov    ecx,ebx
c0027a67:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027a6a:	d3 ef                	shr    edi,cl
c0027a6c:	31 db                	xor    ebx,ebx
c0027a6e:	85 c9                	test   ecx,ecx
c0027a70:	74 15                	je     c0027a87 <__adddf3+0xec>
c0027a72:	be 20 00 00 00       	mov    esi,0x20
c0027a77:	29 ce                	sub    esi,ecx
c0027a79:	89 f1                	mov    ecx,esi
c0027a7b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a7e:	d3 e6                	shl    esi,cl
c0027a80:	31 db                	xor    ebx,ebx
c0027a82:	85 f6                	test   esi,esi
c0027a84:	0f 95 c3             	setne  bl
c0027a87:	31 c9                	xor    ecx,ecx
c0027a89:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027a8d:	0f 95 c1             	setne  cl
c0027a90:	09 cf                	or     edi,ecx
c0027a92:	09 fb                	or     ebx,edi
c0027a94:	01 da                	add    edx,ebx
c0027a96:	83 d0 00             	adc    eax,0x0
c0027a99:	eb 3a                	jmp    c0027ad5 <__adddf3+0x13a>
c0027a9b:	bf 20 00 00 00       	mov    edi,0x20
c0027aa0:	29 df                	sub    edi,ebx
c0027aa2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027aa5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027aa8:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027aab:	d3 e6                	shl    esi,cl
c0027aad:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027ab0:	88 d9                	mov    cl,bl
c0027ab2:	d3 ef                	shr    edi,cl
c0027ab4:	09 fe                	or     esi,edi
c0027ab6:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027ab9:	88 d9                	mov    cl,bl
c0027abb:	d3 ef                	shr    edi,cl
c0027abd:	89 fb                	mov    ebx,edi
c0027abf:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027ac2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027ac5:	d3 e7                	shl    edi,cl
c0027ac7:	85 ff                	test   edi,edi
c0027ac9:	0f 95 c1             	setne  cl
c0027acc:	0f b6 c9             	movzx  ecx,cl
c0027acf:	09 ce                	or     esi,ecx
c0027ad1:	01 f2                	add    edx,esi
c0027ad3:	11 d8                	adc    eax,ebx
c0027ad5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ad8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027adb:	e9 52 01 00 00       	jmp    c0027c32 <__adddf3+0x297>
c0027ae0:	0f 84 d5 00 00 00    	je     c0027bbb <__adddf3+0x220>
c0027ae6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027ae9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027aec:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027aef:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027af2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027af9:	75 20                	jne    c0027b1b <__adddf3+0x180>
c0027afb:	89 d6                	mov    esi,edx
c0027afd:	09 c6                	or     esi,eax
c0027aff:	0f 84 db 04 00 00    	je     c0027fe0 <__adddf3+0x645>
c0027b05:	4b                   	dec    ebx
c0027b06:	75 29                	jne    c0027b31 <__adddf3+0x196>
c0027b08:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027b0b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027b0e:	01 d1                	add    ecx,edx
c0027b10:	11 c6                	adc    esi,eax
c0027b12:	89 f0                	mov    eax,esi
c0027b14:	89 ca                	mov    edx,ecx
c0027b16:	e9 17 01 00 00       	jmp    c0027c32 <__adddf3+0x297>
c0027b1b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027b1e:	f7 d6                	not    esi
c0027b20:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027b26:	0f 84 b4 04 00 00    	je     c0027fe0 <__adddf3+0x645>
c0027b2c:	0d 00 00 00 80       	or     eax,0x80000000
c0027b31:	83 fb 1f             	cmp    ebx,0x1f
c0027b34:	7e 48                	jle    c0027b7e <__adddf3+0x1e3>
c0027b36:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027b39:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027b3c:	83 fb 3f             	cmp    ebx,0x3f
c0027b3f:	0f 8f 9b 04 00 00    	jg     c0027fe0 <__adddf3+0x645>
c0027b45:	83 e3 1f             	and    ebx,0x1f
c0027b48:	89 d9                	mov    ecx,ebx
c0027b4a:	89 c7                	mov    edi,eax
c0027b4c:	d3 ef                	shr    edi,cl
c0027b4e:	31 db                	xor    ebx,ebx
c0027b50:	85 c9                	test   ecx,ecx
c0027b52:	74 12                	je     c0027b66 <__adddf3+0x1cb>
c0027b54:	be 20 00 00 00       	mov    esi,0x20
c0027b59:	29 ce                	sub    esi,ecx
c0027b5b:	89 f1                	mov    ecx,esi
c0027b5d:	d3 e0                	shl    eax,cl
c0027b5f:	31 db                	xor    ebx,ebx
c0027b61:	85 c0                	test   eax,eax
c0027b63:	0f 95 c3             	setne  bl
c0027b66:	31 c0                	xor    eax,eax
c0027b68:	85 d2                	test   edx,edx
c0027b6a:	0f 95 c0             	setne  al
c0027b6d:	09 c7                	or     edi,eax
c0027b6f:	09 fb                	or     ebx,edi
c0027b71:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027b74:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027b77:	01 da                	add    edx,ebx
c0027b79:	83 d6 00             	adc    esi,0x0
c0027b7c:	eb 39                	jmp    c0027bb7 <__adddf3+0x21c>
c0027b7e:	be 20 00 00 00       	mov    esi,0x20
c0027b83:	29 de                	sub    esi,ebx
c0027b85:	89 c7                	mov    edi,eax
c0027b87:	89 f1                	mov    ecx,esi
c0027b89:	d3 e7                	shl    edi,cl
c0027b8b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027b8e:	89 d7                	mov    edi,edx
c0027b90:	88 d9                	mov    cl,bl
c0027b92:	d3 ef                	shr    edi,cl
c0027b94:	89 f9                	mov    ecx,edi
c0027b96:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b99:	09 cf                	or     edi,ecx
c0027b9b:	88 d9                	mov    cl,bl
c0027b9d:	d3 e8                	shr    eax,cl
c0027b9f:	89 f1                	mov    ecx,esi
c0027ba1:	d3 e2                	shl    edx,cl
c0027ba3:	85 d2                	test   edx,edx
c0027ba5:	0f 95 c2             	setne  dl
c0027ba8:	0f b6 d2             	movzx  edx,dl
c0027bab:	09 d7                	or     edi,edx
c0027bad:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027bb0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027bb3:	01 fa                	add    edx,edi
c0027bb5:	11 c6                	adc    esi,eax
c0027bb7:	89 f0                	mov    eax,esi
c0027bb9:	eb 77                	jmp    c0027c32 <__adddf3+0x297>
c0027bbb:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027bbe:	46                   	inc    esi
c0027bbf:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027bc2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027bc8:	75 41                	jne    c0027c0b <__adddf3+0x270>
c0027bca:	89 d3                	mov    ebx,edx
c0027bcc:	09 c3                	or     ebx,eax
c0027bce:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027bd5:	75 27                	jne    c0027bfe <__adddf3+0x263>
c0027bd7:	85 db                	test   ebx,ebx
c0027bd9:	0f 84 fb 03 00 00    	je     c0027fda <__adddf3+0x63f>
c0027bdf:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027be2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027be5:	0f 84 f5 03 00 00    	je     c0027fe0 <__adddf3+0x645>
c0027beb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027bee:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027bf1:	85 c0                	test   eax,eax
c0027bf3:	0f 89 91 03 00 00    	jns    c0027f8a <__adddf3+0x5ef>
c0027bf9:	e9 85 03 00 00       	jmp    c0027f83 <__adddf3+0x5e8>
c0027bfe:	85 db                	test   ebx,ebx
c0027c00:	0f 85 da 03 00 00    	jne    c0027fe0 <__adddf3+0x645>
c0027c06:	e9 cf 03 00 00       	jmp    c0027fda <__adddf3+0x63f>
c0027c0b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027c0e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027c11:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c14:	f7 d1                	not    ecx
c0027c16:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027c1c:	0f 84 70 03 00 00    	je     c0027f92 <__adddf3+0x5f7>
c0027c22:	d1 ea                	shr    edx,1
c0027c24:	89 c1                	mov    ecx,eax
c0027c26:	c1 e1 1f             	shl    ecx,0x1f
c0027c29:	09 ca                	or     edx,ecx
c0027c2b:	d1 e8                	shr    eax,1
c0027c2d:	e9 6f 03 00 00       	jmp    c0027fa1 <__adddf3+0x606>
c0027c32:	85 c0                	test   eax,eax
c0027c34:	0f 89 67 03 00 00    	jns    c0027fa1 <__adddf3+0x606>
c0027c3a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027c3d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c40:	f7 d1                	not    ecx
c0027c42:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027c48:	0f 84 44 03 00 00    	je     c0027f92 <__adddf3+0x5f7>
c0027c4e:	89 d1                	mov    ecx,edx
c0027c50:	d1 e9                	shr    ecx,1
c0027c52:	83 e2 01             	and    edx,0x1
c0027c55:	09 ca                	or     edx,ecx
c0027c57:	89 c1                	mov    ecx,eax
c0027c59:	c1 e1 1f             	shl    ecx,0x1f
c0027c5c:	09 ca                	or     edx,ecx
c0027c5e:	d1 e8                	shr    eax,1
c0027c60:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027c65:	e9 37 03 00 00       	jmp    c0027fa1 <__adddf3+0x606>
c0027c6a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027c6d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027c73:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027c76:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027c79:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027c7f:	29 de                	sub    esi,ebx
c0027c81:	85 f6                	test   esi,esi
c0027c83:	0f 8e bd 00 00 00    	jle    c0027d46 <__adddf3+0x3ab>
c0027c89:	85 db                	test   ebx,ebx
c0027c8b:	75 17                	jne    c0027ca4 <__adddf3+0x309>
c0027c8d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027c90:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027c93:	0f 84 47 03 00 00    	je     c0027fe0 <__adddf3+0x645>
c0027c99:	4e                   	dec    esi
c0027c9a:	75 20                	jne    c0027cbc <__adddf3+0x321>
c0027c9c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027c9f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027ca2:	eb 5b                	jmp    c0027cff <__adddf3+0x364>
c0027ca4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027ca7:	f7 d3                	not    ebx
c0027ca9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027caf:	0f 84 2b 03 00 00    	je     c0027fe0 <__adddf3+0x645>
c0027cb5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027cbc:	83 fe 1f             	cmp    esi,0x1f
c0027cbf:	7e 49                	jle    c0027d0a <__adddf3+0x36f>
c0027cc1:	83 fe 3f             	cmp    esi,0x3f
c0027cc4:	0f 8f 16 03 00 00    	jg     c0027fe0 <__adddf3+0x645>
c0027cca:	83 e6 1f             	and    esi,0x1f
c0027ccd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027cd0:	89 f1                	mov    ecx,esi
c0027cd2:	d3 ef                	shr    edi,cl
c0027cd4:	31 db                	xor    ebx,ebx
c0027cd6:	85 f6                	test   esi,esi
c0027cd8:	74 13                	je     c0027ced <__adddf3+0x352>
c0027cda:	b9 20 00 00 00       	mov    ecx,0x20
c0027cdf:	29 f1                	sub    ecx,esi
c0027ce1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027ce4:	d3 e6                	shl    esi,cl
c0027ce6:	31 db                	xor    ebx,ebx
c0027ce8:	85 f6                	test   esi,esi
c0027cea:	0f 95 c3             	setne  bl
c0027ced:	31 c9                	xor    ecx,ecx
c0027cef:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027cf3:	0f 95 c1             	setne  cl
c0027cf6:	09 cf                	or     edi,ecx
c0027cf8:	09 fb                	or     ebx,edi
c0027cfa:	29 da                	sub    edx,ebx
c0027cfc:	83 d8 00             	sbb    eax,0x0
c0027cff:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d02:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027d05:	e9 aa 01 00 00       	jmp    c0027eb4 <__adddf3+0x519>
c0027d0a:	bf 20 00 00 00       	mov    edi,0x20
c0027d0f:	29 f7                	sub    edi,esi
c0027d11:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027d14:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027d17:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027d1a:	d3 e3                	shl    ebx,cl
c0027d1c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027d1f:	89 f1                	mov    ecx,esi
c0027d21:	d3 ef                	shr    edi,cl
c0027d23:	09 fb                	or     ebx,edi
c0027d25:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027d28:	89 f1                	mov    ecx,esi
c0027d2a:	d3 ef                	shr    edi,cl
c0027d2c:	89 fe                	mov    esi,edi
c0027d2e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027d31:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027d34:	d3 e7                	shl    edi,cl
c0027d36:	85 ff                	test   edi,edi
c0027d38:	0f 95 c1             	setne  cl
c0027d3b:	0f b6 c9             	movzx  ecx,cl
c0027d3e:	09 cb                	or     ebx,ecx
c0027d40:	29 da                	sub    edx,ebx
c0027d42:	19 f0                	sbb    eax,esi
c0027d44:	eb b9                	jmp    c0027cff <__adddf3+0x364>
c0027d46:	0f 84 cd 00 00 00    	je     c0027e19 <__adddf3+0x47e>
c0027d4c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027d4f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027d52:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027d55:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d59:	75 1b                	jne    c0027d76 <__adddf3+0x3db>
c0027d5b:	89 d6                	mov    esi,edx
c0027d5d:	09 c6                	or     esi,eax
c0027d5f:	0f 84 7b 02 00 00    	je     c0027fe0 <__adddf3+0x645>
c0027d65:	4b                   	dec    ebx
c0027d66:	75 24                	jne    c0027d8c <__adddf3+0x3f1>
c0027d68:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d6b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027d6e:	29 d1                	sub    ecx,edx
c0027d70:	19 c6                	sbb    esi,eax
c0027d72:	89 ca                	mov    edx,ecx
c0027d74:	eb 61                	jmp    c0027dd7 <__adddf3+0x43c>
c0027d76:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027d79:	f7 d6                	not    esi
c0027d7b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027d81:	0f 84 59 02 00 00    	je     c0027fe0 <__adddf3+0x645>
c0027d87:	0d 00 00 00 80       	or     eax,0x80000000
c0027d8c:	83 fb 1f             	cmp    ebx,0x1f
c0027d8f:	7e 4d                	jle    c0027dde <__adddf3+0x443>
c0027d91:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027d94:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027d97:	83 fb 3f             	cmp    ebx,0x3f
c0027d9a:	0f 8f 40 02 00 00    	jg     c0027fe0 <__adddf3+0x645>
c0027da0:	83 e3 1f             	and    ebx,0x1f
c0027da3:	89 d9                	mov    ecx,ebx
c0027da5:	89 c7                	mov    edi,eax
c0027da7:	d3 ef                	shr    edi,cl
c0027da9:	31 db                	xor    ebx,ebx
c0027dab:	85 c9                	test   ecx,ecx
c0027dad:	74 12                	je     c0027dc1 <__adddf3+0x426>
c0027daf:	be 20 00 00 00       	mov    esi,0x20
c0027db4:	29 ce                	sub    esi,ecx
c0027db6:	89 f1                	mov    ecx,esi
c0027db8:	d3 e0                	shl    eax,cl
c0027dba:	31 db                	xor    ebx,ebx
c0027dbc:	85 c0                	test   eax,eax
c0027dbe:	0f 95 c3             	setne  bl
c0027dc1:	31 c0                	xor    eax,eax
c0027dc3:	85 d2                	test   edx,edx
c0027dc5:	0f 95 c0             	setne  al
c0027dc8:	09 c7                	or     edi,eax
c0027dca:	09 fb                	or     ebx,edi
c0027dcc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027dcf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027dd2:	29 da                	sub    edx,ebx
c0027dd4:	83 de 00             	sbb    esi,0x0
c0027dd7:	89 f0                	mov    eax,esi
c0027dd9:	e9 d6 00 00 00       	jmp    c0027eb4 <__adddf3+0x519>
c0027dde:	be 20 00 00 00       	mov    esi,0x20
c0027de3:	29 de                	sub    esi,ebx
c0027de5:	89 c7                	mov    edi,eax
c0027de7:	89 f1                	mov    ecx,esi
c0027de9:	d3 e7                	shl    edi,cl
c0027deb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027dee:	89 d7                	mov    edi,edx
c0027df0:	88 d9                	mov    cl,bl
c0027df2:	d3 ef                	shr    edi,cl
c0027df4:	89 f9                	mov    ecx,edi
c0027df6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027df9:	09 cf                	or     edi,ecx
c0027dfb:	88 d9                	mov    cl,bl
c0027dfd:	d3 e8                	shr    eax,cl
c0027dff:	89 f1                	mov    ecx,esi
c0027e01:	d3 e2                	shl    edx,cl
c0027e03:	85 d2                	test   edx,edx
c0027e05:	0f 95 c2             	setne  dl
c0027e08:	0f b6 d2             	movzx  edx,dl
c0027e0b:	09 d7                	or     edi,edx
c0027e0d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e10:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027e13:	29 fa                	sub    edx,edi
c0027e15:	19 c6                	sbb    esi,eax
c0027e17:	eb be                	jmp    c0027dd7 <__adddf3+0x43c>
c0027e19:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027e1c:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027e1f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027e25:	75 6a                	jne    c0027e91 <__adddf3+0x4f6>
c0027e27:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027e2b:	75 58                	jne    c0027e85 <__adddf3+0x4ea>
c0027e2d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027e30:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027e33:	89 d6                	mov    esi,edx
c0027e35:	09 c6                	or     esi,eax
c0027e37:	75 17                	jne    c0027e50 <__adddf3+0x4b5>
c0027e39:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027e3c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027e3f:	85 db                	test   ebx,ebx
c0027e41:	0f 85 99 01 00 00    	jne    c0027fe0 <__adddf3+0x645>
c0027e47:	31 ff                	xor    edi,edi
c0027e49:	31 c9                	xor    ecx,ecx
c0027e4b:	e9 90 01 00 00       	jmp    c0027fe0 <__adddf3+0x645>
c0027e50:	85 db                	test   ebx,ebx
c0027e52:	0f 84 88 01 00 00    	je     c0027fe0 <__adddf3+0x645>
c0027e58:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027e5b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027e5e:	85 c0                	test   eax,eax
c0027e60:	79 10                	jns    c0027e72 <__adddf3+0x4d7>
c0027e62:	31 c9                	xor    ecx,ecx
c0027e64:	f7 da                	neg    edx
c0027e66:	0f 95 c1             	setne  cl
c0027e69:	01 c8                	add    eax,ecx
c0027e6b:	f7 d8                	neg    eax
c0027e6d:	e9 2f 01 00 00       	jmp    c0027fa1 <__adddf3+0x606>
c0027e72:	31 ff                	xor    edi,edi
c0027e74:	31 c9                	xor    ecx,ecx
c0027e76:	89 c3                	mov    ebx,eax
c0027e78:	09 d3                	or     ebx,edx
c0027e7a:	0f 84 60 01 00 00    	je     c0027fe0 <__adddf3+0x645>
c0027e80:	e9 05 01 00 00       	jmp    c0027f8a <__adddf3+0x5ef>
c0027e85:	31 ff                	xor    edi,edi
c0027e87:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027e8c:	e9 4f 01 00 00       	jmp    c0027fe0 <__adddf3+0x645>
c0027e91:	89 c1                	mov    ecx,eax
c0027e93:	89 d0                	mov    eax,edx
c0027e95:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027e98:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027e9b:	89 ca                	mov    edx,ecx
c0027e9d:	85 c9                	test   ecx,ecx
c0027e9f:	79 2c                	jns    c0027ecd <__adddf3+0x532>
c0027ea1:	31 c9                	xor    ecx,ecx
c0027ea3:	f7 d8                	neg    eax
c0027ea5:	0f 95 c1             	setne  cl
c0027ea8:	01 ca                	add    edx,ecx
c0027eaa:	f7 da                	neg    edx
c0027eac:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027eaf:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027eb2:	eb 19                	jmp    c0027ecd <__adddf3+0x532>
c0027eb4:	85 c0                	test   eax,eax
c0027eb6:	0f 89 e5 00 00 00    	jns    c0027fa1 <__adddf3+0x606>
c0027ebc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027ec1:	89 c1                	mov    ecx,eax
c0027ec3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027ec6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027ec9:	89 d0                	mov    eax,edx
c0027ecb:	89 ca                	mov    edx,ecx
c0027ecd:	85 d2                	test   edx,edx
c0027ecf:	74 59                	je     c0027f2a <__adddf3+0x58f>
c0027ed1:	0f bd da             	bsr    ebx,edx
c0027ed4:	83 f3 1f             	xor    ebx,0x1f
c0027ed7:	88 d9                	mov    cl,bl
c0027ed9:	d3 e2                	shl    edx,cl
c0027edb:	bf 20 00 00 00       	mov    edi,0x20
c0027ee0:	89 f9                	mov    ecx,edi
c0027ee2:	29 d9                	sub    ecx,ebx
c0027ee4:	89 c6                	mov    esi,eax
c0027ee6:	d3 ee                	shr    esi,cl
c0027ee8:	09 d6                	or     esi,edx
c0027eea:	88 d9                	mov    cl,bl
c0027eec:	d3 e0                	shl    eax,cl
c0027eee:	89 c2                	mov    edx,eax
c0027ef0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ef3:	25 ff 07 00 00       	and    eax,0x7ff
c0027ef8:	39 d8                	cmp    eax,ebx
c0027efa:	7f 22                	jg     c0027f1e <__adddf3+0x583>
c0027efc:	29 c3                	sub    ebx,eax
c0027efe:	43                   	inc    ebx
c0027eff:	88 d9                	mov    cl,bl
c0027f01:	d3 ea                	shr    edx,cl
c0027f03:	29 df                	sub    edi,ebx
c0027f05:	89 f9                	mov    ecx,edi
c0027f07:	89 f0                	mov    eax,esi
c0027f09:	d3 e0                	shl    eax,cl
c0027f0b:	09 c2                	or     edx,eax
c0027f0d:	89 f0                	mov    eax,esi
c0027f0f:	88 d9                	mov    cl,bl
c0027f11:	d3 e8                	shr    eax,cl
c0027f13:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f16:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027f1c:	eb 6f                	jmp    c0027f8d <__adddf3+0x5f2>
c0027f1e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f21:	29 d8                	sub    eax,ebx
c0027f23:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027f26:	89 f0                	mov    eax,esi
c0027f28:	eb 59                	jmp    c0027f83 <__adddf3+0x5e8>
c0027f2a:	85 c0                	test   eax,eax
c0027f2c:	74 6a                	je     c0027f98 <__adddf3+0x5fd>
c0027f2e:	0f bd c8             	bsr    ecx,eax
c0027f31:	83 f1 1f             	xor    ecx,0x1f
c0027f34:	d3 e0                	shl    eax,cl
c0027f36:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027f39:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027f3f:	83 c1 20             	add    ecx,0x20
c0027f42:	39 cb                	cmp    ebx,ecx
c0027f44:	7f 35                	jg     c0027f7b <__adddf3+0x5e0>
c0027f46:	29 d9                	sub    ecx,ebx
c0027f48:	8d 71 01             	lea    esi,[ecx+0x1]
c0027f4b:	83 fe 1f             	cmp    esi,0x1f
c0027f4e:	7e 09                	jle    c0027f59 <__adddf3+0x5be>
c0027f50:	83 e9 1f             	sub    ecx,0x1f
c0027f53:	d3 e8                	shr    eax,cl
c0027f55:	89 c3                	mov    ebx,eax
c0027f57:	eb 11                	jmp    c0027f6a <__adddf3+0x5cf>
c0027f59:	b9 20 00 00 00       	mov    ecx,0x20
c0027f5e:	29 f1                	sub    ecx,esi
c0027f60:	89 c3                	mov    ebx,eax
c0027f62:	d3 e3                	shl    ebx,cl
c0027f64:	89 f1                	mov    ecx,esi
c0027f66:	d3 e8                	shr    eax,cl
c0027f68:	89 c2                	mov    edx,eax
c0027f6a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f6d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027f72:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027f75:	89 d0                	mov    eax,edx
c0027f77:	89 da                	mov    edx,ebx
c0027f79:	eb 26                	jmp    c0027fa1 <__adddf3+0x606>
c0027f7b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f7e:	29 cf                	sub    edi,ecx
c0027f80:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027f83:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027f88:	eb 17                	jmp    c0027fa1 <__adddf3+0x606>
c0027f8a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f8d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027f90:	eb 0f                	jmp    c0027fa1 <__adddf3+0x606>
c0027f92:	31 d2                	xor    edx,edx
c0027f94:	31 c0                	xor    eax,eax
c0027f96:	eb 09                	jmp    c0027fa1 <__adddf3+0x606>
c0027f98:	89 c2                	mov    edx,eax
c0027f9a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027fa1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027fa4:	c1 e1 14             	shl    ecx,0x14
c0027fa7:	89 c3                	mov    ebx,eax
c0027fa9:	c1 eb 0b             	shr    ebx,0xb
c0027fac:	09 d9                	or     ecx,ebx
c0027fae:	89 d3                	mov    ebx,edx
c0027fb0:	c1 eb 0b             	shr    ebx,0xb
c0027fb3:	c1 e0 15             	shl    eax,0x15
c0027fb6:	09 d8                	or     eax,ebx
c0027fb8:	89 c7                	mov    edi,eax
c0027fba:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027fc0:	0f 95 c0             	setne  al
c0027fc3:	89 c6                	mov    esi,eax
c0027fc5:	09 f3                	or     ebx,esi
c0027fc7:	83 e3 01             	and    ebx,0x1
c0027fca:	c1 ea 0a             	shr    edx,0xa
c0027fcd:	21 da                	and    edx,ebx
c0027fcf:	89 f8                	mov    eax,edi
c0027fd1:	01 d0                	add    eax,edx
c0027fd3:	83 d1 00             	adc    ecx,0x0
c0027fd6:	89 c7                	mov    edi,eax
c0027fd8:	eb 06                	jmp    c0027fe0 <__adddf3+0x645>
c0027fda:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027fdd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027fe0:	89 f8                	mov    eax,edi
c0027fe2:	89 ca                	mov    edx,ecx
c0027fe4:	83 c4 24             	add    esp,0x24
c0027fe7:	5b                   	pop    ebx
c0027fe8:	5e                   	pop    esi
c0027fe9:	5f                   	pop    edi
c0027fea:	5d                   	pop    ebp
c0027feb:	c3                   	ret    

c0027fec <__subdf3>:
c0027fec:	55                   	push   ebp
c0027fed:	89 e5                	mov    ebp,esp
c0027fef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027ff2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027ff5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027ffb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027ffe:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0028001:	5d                   	pop    ebp
c0028002:	e9 94 f9 ff ff       	jmp    c002799b <__adddf3>

c0028007 <__negdf2>:
c0028007:	55                   	push   ebp
c0028008:	89 e5                	mov    ebp,esp
c002800a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002800d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028010:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028016:	5d                   	pop    ebp
c0028017:	c3                   	ret    

c0028018 <__muldf3>:
c0028018:	55                   	push   ebp
c0028019:	89 e5                	mov    ebp,esp
c002801b:	57                   	push   edi
c002801c:	56                   	push   esi
c002801d:	53                   	push   ebx
c002801e:	83 ec 24             	sub    esp,0x24
c0028021:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028024:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0028027:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002802a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002802d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0028030:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0028033:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028036:	89 c8                	mov    eax,ecx
c0028038:	c1 f8 14             	sar    eax,0x14
c002803b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002803e:	89 f8                	mov    eax,edi
c0028040:	89 fb                	mov    ebx,edi
c0028042:	c1 e3 0b             	shl    ebx,0xb
c0028045:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0028048:	c1 e1 0b             	shl    ecx,0xb
c002804b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028051:	c1 e8 15             	shr    eax,0x15
c0028054:	09 c1                	or     ecx,eax
c0028056:	89 d6                	mov    esi,edx
c0028058:	89 d0                	mov    eax,edx
c002805a:	c1 f8 14             	sar    eax,0x14
c002805d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0028060:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0028063:	89 c3                	mov    ebx,eax
c0028065:	c1 e3 0b             	shl    ebx,0xb
c0028068:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002806b:	c1 e6 0b             	shl    esi,0xb
c002806e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028074:	c1 e8 15             	shr    eax,0x15
c0028077:	09 c6                	or     esi,eax
c0028079:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002807c:	25 ff 07 00 00       	and    eax,0x7ff
c0028081:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028084:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028087:	25 ff 07 00 00       	and    eax,0x7ff
c002808c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002808f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028092:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028095:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002809c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002809f:	40                   	inc    eax
c00280a0:	a9 fe 07 00 00       	test   eax,0x7fe
c00280a5:	0f 85 8d 00 00 00    	jne    c0028138 <__muldf3+0x120>
c00280ab:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00280ae:	09 c8                	or     eax,ecx
c00280b0:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00280b4:	74 44                	je     c00280fa <__muldf3+0xe2>
c00280b6:	85 c0                	test   eax,eax
c00280b8:	0f 85 31 02 00 00    	jne    c00282ef <__muldf3+0x2d7>
c00280be:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00280c1:	40                   	inc    eax
c00280c2:	a9 fe 07 00 00       	test   eax,0x7fe
c00280c7:	75 13                	jne    c00280dc <__muldf3+0xc4>
c00280c9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00280cc:	09 f1                	or     ecx,esi
c00280ce:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00280d2:	74 22                	je     c00280f6 <__muldf3+0xde>
c00280d4:	85 c9                	test   ecx,ecx
c00280d6:	0f 85 0d 02 00 00    	jne    c00282e9 <__muldf3+0x2d1>
c00280dc:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00280e0:	0f 89 09 02 00 00    	jns    c00282ef <__muldf3+0x2d7>
c00280e6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00280e9:	05 00 00 00 80       	add    eax,0x80000000
c00280ee:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00280f1:	e9 f9 01 00 00       	jmp    c00282ef <__muldf3+0x2d7>
c00280f6:	85 c9                	test   ecx,ecx
c00280f8:	eb 2e                	jmp    c0028128 <__muldf3+0x110>
c00280fa:	85 c0                	test   eax,eax
c00280fc:	74 20                	je     c002811e <__muldf3+0x106>
c00280fe:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0028101:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028104:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028107:	c1 ef 1f             	shr    edi,0x1f
c002810a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c002810d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0028110:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028113:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028116:	09 f9                	or     ecx,edi
c0028118:	78 1e                	js     c0028138 <__muldf3+0x120>
c002811a:	89 c3                	mov    ebx,eax
c002811c:	eb e0                	jmp    c00280fe <__muldf3+0xe6>
c002811e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028121:	f7 d0                	not    eax
c0028123:	a9 ff 07 00 00       	test   eax,0x7ff
c0028128:	75 b2                	jne    c00280dc <__muldf3+0xc4>
c002812a:	31 ff                	xor    edi,edi
c002812c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0028133:	e9 b7 01 00 00       	jmp    c00282ef <__muldf3+0x2d7>
c0028138:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002813b:	40                   	inc    eax
c002813c:	a9 fe 07 00 00       	test   eax,0x7fe
c0028141:	75 57                	jne    c002819a <__muldf3+0x182>
c0028143:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0028146:	09 f0                	or     eax,esi
c0028148:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002814c:	74 23                	je     c0028171 <__muldf3+0x159>
c002814e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028152:	0f 89 91 01 00 00    	jns    c00282e9 <__muldf3+0x2d1>
c0028158:	85 c0                	test   eax,eax
c002815a:	0f 85 89 01 00 00    	jne    c00282e9 <__muldf3+0x2d1>
c0028160:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0028163:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0028169:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002816c:	e9 7e 01 00 00       	jmp    c00282ef <__muldf3+0x2d7>
c0028171:	85 c0                	test   eax,eax
c0028173:	75 0c                	jne    c0028181 <__muldf3+0x169>
c0028175:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028179:	0f 89 6a 01 00 00    	jns    c00282e9 <__muldf3+0x2d1>
c002817f:	eb df                	jmp    c0028160 <__muldf3+0x148>
c0028181:	01 f6                	add    esi,esi
c0028183:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028186:	c1 ea 1f             	shr    edx,0x1f
c0028189:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002818c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002818f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028192:	09 d6                	or     esi,edx
c0028194:	78 04                	js     c002819a <__muldf3+0x182>
c0028196:	89 c3                	mov    ebx,eax
c0028198:	eb e7                	jmp    c0028181 <__muldf3+0x169>
c002819a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00281a0:	81 ce 00 00 00 80    	or     esi,0x80000000
c00281a6:	89 c8                	mov    eax,ecx
c00281a8:	f7 e6                	mul    esi
c00281aa:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00281ad:	89 c7                	mov    edi,eax
c00281af:	89 c8                	mov    eax,ecx
c00281b1:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00281b4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00281b7:	89 c1                	mov    ecx,eax
c00281b9:	89 f0                	mov    eax,esi
c00281bb:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c00281be:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00281c1:	89 c6                	mov    esi,eax
c00281c3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00281c6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00281c9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00281cc:	31 c0                	xor    eax,eax
c00281ce:	01 f1                	add    ecx,esi
c00281d0:	0f 92 c0             	setb   al
c00281d3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00281d6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00281d9:	83 d6 00             	adc    esi,0x0
c00281dc:	01 c7                	add    edi,eax
c00281de:	83 d6 00             	adc    esi,0x0
c00281e1:	01 ca                	add    edx,ecx
c00281e3:	0f 92 c1             	setb   cl
c00281e6:	0f b6 c9             	movzx  ecx,cl
c00281e9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c00281ec:	83 d6 00             	adc    esi,0x0
c00281ef:	01 cf                	add    edi,ecx
c00281f1:	83 d6 00             	adc    esi,0x0
c00281f4:	31 c9                	xor    ecx,ecx
c00281f6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00281f9:	0f 95 c1             	setne  cl
c00281fc:	09 cf                	or     edi,ecx
c00281fe:	85 f6                	test   esi,esi
c0028200:	78 0c                	js     c002820e <__muldf3+0x1f6>
c0028202:	01 f6                	add    esi,esi
c0028204:	89 f8                	mov    eax,edi
c0028206:	c1 e8 1f             	shr    eax,0x1f
c0028209:	09 c6                	or     esi,eax
c002820b:	01 ff                	add    edi,edi
c002820d:	4b                   	dec    ebx
c002820e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0028214:	0f 8f 85 00 00 00    	jg     c002829f <__muldf3+0x287>
c002821a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0028220:	85 db                	test   ebx,ebx
c0028222:	0f 8f 84 00 00 00    	jg     c00282ac <__muldf3+0x294>
c0028228:	83 fb cc             	cmp    ebx,0xffffffcc
c002822b:	7c 79                	jl     c00282a6 <__muldf3+0x28e>
c002822d:	ba 01 00 00 00       	mov    edx,0x1
c0028232:	29 da                	sub    edx,ebx
c0028234:	81 ce 00 00 00 80    	or     esi,0x80000000
c002823a:	83 fa 1f             	cmp    edx,0x1f
c002823d:	7e 30                	jle    c002826f <__muldf3+0x257>
c002823f:	83 fa 20             	cmp    edx,0x20
c0028242:	75 0b                	jne    c002824f <__muldf3+0x237>
c0028244:	31 c0                	xor    eax,eax
c0028246:	85 ff                	test   edi,edi
c0028248:	0f 95 c0             	setne  al
c002824b:	89 c7                	mov    edi,eax
c002824d:	eb 1a                	jmp    c0028269 <__muldf3+0x251>
c002824f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0028252:	89 f0                	mov    eax,esi
c0028254:	d3 e0                	shl    eax,cl
c0028256:	09 f8                	or     eax,edi
c0028258:	0f 95 c0             	setne  al
c002825b:	0f b6 c0             	movzx  eax,al
c002825e:	89 c7                	mov    edi,eax
c0028260:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028265:	29 d9                	sub    ecx,ebx
c0028267:	d3 ee                	shr    esi,cl
c0028269:	09 f7                	or     edi,esi
c002826b:	31 db                	xor    ebx,ebx
c002826d:	eb 3b                	jmp    c00282aa <__muldf3+0x292>
c002826f:	83 c3 1f             	add    ebx,0x1f
c0028272:	89 f0                	mov    eax,esi
c0028274:	88 d9                	mov    cl,bl
c0028276:	d3 e0                	shl    eax,cl
c0028278:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002827b:	89 f8                	mov    eax,edi
c002827d:	88 d1                	mov    cl,dl
c002827f:	d3 e8                	shr    eax,cl
c0028281:	89 c1                	mov    ecx,eax
c0028283:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028286:	09 c8                	or     eax,ecx
c0028288:	88 d9                	mov    cl,bl
c002828a:	d3 e7                	shl    edi,cl
c002828c:	31 db                	xor    ebx,ebx
c002828e:	85 ff                	test   edi,edi
c0028290:	0f 95 c3             	setne  bl
c0028293:	89 df                	mov    edi,ebx
c0028295:	09 c7                	or     edi,eax
c0028297:	88 d1                	mov    cl,dl
c0028299:	d3 ee                	shr    esi,cl
c002829b:	31 db                	xor    ebx,ebx
c002829d:	eb 0d                	jmp    c00282ac <__muldf3+0x294>
c002829f:	bb ff 07 00 00       	mov    ebx,0x7ff
c00282a4:	eb 02                	jmp    c00282a8 <__muldf3+0x290>
c00282a6:	31 db                	xor    ebx,ebx
c00282a8:	31 ff                	xor    edi,edi
c00282aa:	31 f6                	xor    esi,esi
c00282ac:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00282af:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00282b2:	25 00 f8 ff ff       	and    eax,0xfffff800
c00282b7:	09 c3                	or     ebx,eax
c00282b9:	c1 e3 14             	shl    ebx,0x14
c00282bc:	89 f0                	mov    eax,esi
c00282be:	c1 e8 0b             	shr    eax,0xb
c00282c1:	09 c3                	or     ebx,eax
c00282c3:	89 f8                	mov    eax,edi
c00282c5:	c1 e8 0b             	shr    eax,0xb
c00282c8:	c1 e6 15             	shl    esi,0x15
c00282cb:	09 c6                	or     esi,eax
c00282cd:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c00282d3:	0f 95 c1             	setne  cl
c00282d6:	09 c8                	or     eax,ecx
c00282d8:	83 e0 01             	and    eax,0x1
c00282db:	c1 ef 0a             	shr    edi,0xa
c00282de:	21 c7                	and    edi,eax
c00282e0:	01 f7                	add    edi,esi
c00282e2:	83 d3 00             	adc    ebx,0x0
c00282e5:	89 da                	mov    edx,ebx
c00282e7:	eb 03                	jmp    c00282ec <__muldf3+0x2d4>
c00282e9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00282ec:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00282ef:	89 f8                	mov    eax,edi
c00282f1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00282f4:	83 c4 24             	add    esp,0x24
c00282f7:	5b                   	pop    ebx
c00282f8:	5e                   	pop    esi
c00282f9:	5f                   	pop    edi
c00282fa:	5d                   	pop    ebp
c00282fb:	c3                   	ret    

c00282fc <__divdf3>:
c00282fc:	55                   	push   ebp
c00282fd:	89 e5                	mov    ebp,esp
c00282ff:	57                   	push   edi
c0028300:	56                   	push   esi
c0028301:	53                   	push   ebx
c0028302:	83 ec 2c             	sub    esp,0x2c
c0028305:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028308:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002830b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002830e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0028311:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028314:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028317:	89 ce                	mov    esi,ecx
c0028319:	89 c8                	mov    eax,ecx
c002831b:	c1 f8 14             	sar    eax,0x14
c002831e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028321:	89 f8                	mov    eax,edi
c0028323:	89 fb                	mov    ebx,edi
c0028325:	c1 e3 0b             	shl    ebx,0xb
c0028328:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002832b:	c1 e6 0b             	shl    esi,0xb
c002832e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028334:	c1 e8 15             	shr    eax,0x15
c0028337:	09 c6                	or     esi,eax
c0028339:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c002833c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002833f:	89 c2                	mov    edx,eax
c0028341:	c1 fa 14             	sar    edx,0x14
c0028344:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0028347:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002834a:	89 de                	mov    esi,ebx
c002834c:	c1 e6 0b             	shl    esi,0xb
c002834f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0028352:	c1 e0 0b             	shl    eax,0xb
c0028355:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002835a:	c1 eb 15             	shr    ebx,0x15
c002835d:	09 d8                	or     eax,ebx
c002835f:	89 c2                	mov    edx,eax
c0028361:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028364:	25 ff 07 00 00       	and    eax,0x7ff
c0028369:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002836c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002836f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028375:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028378:	29 d8                	sub    eax,ebx
c002837a:	05 ff 03 00 00       	add    eax,0x3ff
c002837f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028382:	46                   	inc    esi
c0028383:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028389:	0f 85 a5 00 00 00    	jne    c0028434 <__divdf3+0x138>
c002838f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028392:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028395:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028399:	74 2a                	je     c00283c5 <__divdf3+0xc9>
c002839b:	85 f6                	test   esi,esi
c002839d:	0f 85 cc 02 00 00    	jne    c002866f <__divdf3+0x373>
c00283a3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00283a6:	40                   	inc    eax
c00283a7:	a9 fe 07 00 00       	test   eax,0x7fe
c00283ac:	75 26                	jne    c00283d4 <__divdf3+0xd8>
c00283ae:	85 db                	test   ebx,ebx
c00283b0:	74 22                	je     c00283d4 <__divdf3+0xd8>
c00283b2:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00283b5:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00283b8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00283bb:	09 d0                	or     eax,edx
c00283bd:	0f 85 ac 02 00 00    	jne    c002866f <__divdf3+0x373>
c00283c3:	eb 63                	jmp    c0028428 <__divdf3+0x12c>
c00283c5:	85 f6                	test   esi,esi
c00283c7:	75 22                	jne    c00283eb <__divdf3+0xef>
c00283c9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00283cc:	40                   	inc    eax
c00283cd:	a9 fe 07 00 00       	test   eax,0x7fe
c00283d2:	74 36                	je     c002840a <__divdf3+0x10e>
c00283d4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00283d8:	0f 89 91 02 00 00    	jns    c002866f <__divdf3+0x373>
c00283de:	89 f8                	mov    eax,edi
c00283e0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00283e6:	e9 80 02 00 00       	jmp    c002866b <__divdf3+0x36f>
c00283eb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00283ee:	01 f6                	add    esi,esi
c00283f0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00283f3:	c1 ef 1f             	shr    edi,0x1f
c00283f6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00283f9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c00283fc:	8d 48 ff             	lea    ecx,[eax-0x1]
c00283ff:	09 f7                	or     edi,esi
c0028401:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028404:	78 2e                	js     c0028434 <__divdf3+0x138>
c0028406:	89 c8                	mov    eax,ecx
c0028408:	eb e1                	jmp    c00283eb <__divdf3+0xef>
c002840a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002840d:	09 d0                	or     eax,edx
c002840f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028413:	74 0f                	je     c0028424 <__divdf3+0x128>
c0028415:	85 c0                	test   eax,eax
c0028417:	74 bb                	je     c00283d4 <__divdf3+0xd8>
c0028419:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002841c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002841f:	e9 4b 02 00 00       	jmp    c002866f <__divdf3+0x373>
c0028424:	85 c0                	test   eax,eax
c0028426:	75 ac                	jne    c00283d4 <__divdf3+0xd8>
c0028428:	31 ff                	xor    edi,edi
c002842a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002842f:	e9 3b 02 00 00       	jmp    c002866f <__divdf3+0x373>
c0028434:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028437:	8d 4f 01             	lea    ecx,[edi+0x1]
c002843a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028440:	75 6b                	jne    c00284ad <__divdf3+0x1b1>
c0028442:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028445:	09 d6                	or     esi,edx
c0028447:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002844b:	74 28                	je     c0028475 <__divdf3+0x179>
c002844d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028450:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028453:	85 f6                	test   esi,esi
c0028455:	0f 85 14 02 00 00    	jne    c002866f <__divdf3+0x373>
c002845b:	31 ff                	xor    edi,edi
c002845d:	31 c9                	xor    ecx,ecx
c002845f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028462:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028465:	0f 89 04 02 00 00    	jns    c002866f <__divdf3+0x373>
c002846b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028470:	e9 fa 01 00 00       	jmp    c002866f <__divdf3+0x373>
c0028475:	85 f6                	test   esi,esi
c0028477:	75 1b                	jne    c0028494 <__divdf3+0x198>
c0028479:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002847c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002847f:	25 00 00 00 80       	and    eax,0x80000000
c0028484:	31 c9                	xor    ecx,ecx
c0028486:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c002848b:	89 cf                	mov    edi,ecx
c002848d:	89 c1                	mov    ecx,eax
c002848f:	e9 db 01 00 00       	jmp    c002866f <__divdf3+0x373>
c0028494:	01 d2                	add    edx,edx
c0028496:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028499:	c1 eb 1f             	shr    ebx,0x1f
c002849c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002849f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c00284a2:	8d 48 01             	lea    ecx,[eax+0x1]
c00284a5:	09 da                	or     edx,ebx
c00284a7:	78 04                	js     c00284ad <__divdf3+0x1b1>
c00284a9:	89 c8                	mov    eax,ecx
c00284ab:	eb e7                	jmp    c0028494 <__divdf3+0x198>
c00284ad:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00284b0:	81 ce 00 00 00 80    	or     esi,0x80000000
c00284b6:	81 ca 00 00 00 80    	or     edx,0x80000000
c00284bc:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c00284bf:	39 d6                	cmp    esi,edx
c00284c1:	77 0d                	ja     c00284d0 <__divdf3+0x1d4>
c00284c3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00284c6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c00284c9:	72 1b                	jb     c00284e6 <__divdf3+0x1ea>
c00284cb:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c00284ce:	75 16                	jne    c00284e6 <__divdf3+0x1ea>
c00284d0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00284d3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00284d6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c00284d9:	83 de 00             	sbb    esi,0x0
c00284dc:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c00284df:	ba 01 00 00 00       	mov    edx,0x1
c00284e4:	eb 02                	jmp    c00284e8 <__divdf3+0x1ec>
c00284e6:	31 d2                	xor    edx,edx
c00284e8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c00284ef:	31 ff                	xor    edi,edi
c00284f1:	01 ff                	add    edi,edi
c00284f3:	89 d1                	mov    ecx,edx
c00284f5:	c1 e9 1f             	shr    ecx,0x1f
c00284f8:	09 cf                	or     edi,ecx
c00284fa:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00284fd:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028500:	89 da                	mov    edx,ebx
c0028502:	89 f3                	mov    ebx,esi
c0028504:	8d 34 36             	lea    esi,[esi+esi*1]
c0028507:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002850a:	c1 e9 1f             	shr    ecx,0x1f
c002850d:	09 ce                	or     esi,ecx
c002850f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028512:	01 c9                	add    ecx,ecx
c0028514:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0028517:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002851a:	85 db                	test   ebx,ebx
c002851c:	78 29                	js     c0028547 <__divdf3+0x24b>
c002851e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028521:	72 07                	jb     c002852a <__divdf3+0x22e>
c0028523:	75 3c                	jne    c0028561 <__divdf3+0x265>
c0028525:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028528:	77 37                	ja     c0028561 <__divdf3+0x265>
c002852a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002852d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028530:	31 d2                	xor    edx,edx
c0028532:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028535:	0f 97 c2             	seta   dl
c0028538:	29 d6                	sub    esi,edx
c002853a:	89 d9                	mov    ecx,ebx
c002853c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c002853f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028542:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028545:	eb 17                	jmp    c002855e <__divdf3+0x262>
c0028547:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002854a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002854d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028550:	0f 97 c1             	seta   cl
c0028553:	0f b6 c9             	movzx  ecx,cl
c0028556:	29 ce                	sub    esi,ecx
c0028558:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c002855b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c002855e:	83 ca 01             	or     edx,0x1
c0028561:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028564:	75 8b                	jne    c00284f1 <__divdf3+0x1f5>
c0028566:	c1 e7 09             	shl    edi,0x9
c0028569:	89 d1                	mov    ecx,edx
c002856b:	c1 e9 17             	shr    ecx,0x17
c002856e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028571:	09 f3                	or     ebx,esi
c0028573:	0f 95 c3             	setne  bl
c0028576:	0f b6 db             	movzx  ebx,bl
c0028579:	c1 e2 09             	shl    edx,0x9
c002857c:	09 d3                	or     ebx,edx
c002857e:	89 ca                	mov    edx,ecx
c0028580:	09 fa                	or     edx,edi
c0028582:	78 0c                	js     c0028590 <__divdf3+0x294>
c0028584:	01 d2                	add    edx,edx
c0028586:	89 d9                	mov    ecx,ebx
c0028588:	c1 e9 1f             	shr    ecx,0x1f
c002858b:	09 ca                	or     edx,ecx
c002858d:	01 db                	add    ebx,ebx
c002858f:	48                   	dec    eax
c0028590:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028595:	0f 8f 83 00 00 00    	jg     c002861e <__divdf3+0x322>
c002859b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00285a1:	85 c0                	test   eax,eax
c00285a3:	0f 8f 82 00 00 00    	jg     c002862b <__divdf3+0x32f>
c00285a9:	83 f8 cc             	cmp    eax,0xffffffcc
c00285ac:	7c 77                	jl     c0028625 <__divdf3+0x329>
c00285ae:	be 01 00 00 00       	mov    esi,0x1
c00285b3:	29 c6                	sub    esi,eax
c00285b5:	81 ca 00 00 00 80    	or     edx,0x80000000
c00285bb:	83 fe 1f             	cmp    esi,0x1f
c00285be:	7e 2f                	jle    c00285ef <__divdf3+0x2f3>
c00285c0:	83 fe 20             	cmp    esi,0x20
c00285c3:	75 0a                	jne    c00285cf <__divdf3+0x2d3>
c00285c5:	85 db                	test   ebx,ebx
c00285c7:	0f 95 c3             	setne  bl
c00285ca:	0f b6 db             	movzx  ebx,bl
c00285cd:	eb 1a                	jmp    c00285e9 <__divdf3+0x2ed>
c00285cf:	8d 48 3f             	lea    ecx,[eax+0x3f]
c00285d2:	89 d7                	mov    edi,edx
c00285d4:	d3 e7                	shl    edi,cl
c00285d6:	89 f9                	mov    ecx,edi
c00285d8:	09 d9                	or     ecx,ebx
c00285da:	0f 95 c3             	setne  bl
c00285dd:	0f b6 db             	movzx  ebx,bl
c00285e0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00285e5:	29 c1                	sub    ecx,eax
c00285e7:	d3 ea                	shr    edx,cl
c00285e9:	09 d3                	or     ebx,edx
c00285eb:	31 c0                	xor    eax,eax
c00285ed:	eb 3a                	jmp    c0028629 <__divdf3+0x32d>
c00285ef:	83 c0 1f             	add    eax,0x1f
c00285f2:	89 d7                	mov    edi,edx
c00285f4:	88 c1                	mov    cl,al
c00285f6:	d3 e7                	shl    edi,cl
c00285f8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00285fb:	89 df                	mov    edi,ebx
c00285fd:	89 f1                	mov    ecx,esi
c00285ff:	d3 ef                	shr    edi,cl
c0028601:	89 f9                	mov    ecx,edi
c0028603:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028606:	09 cf                	or     edi,ecx
c0028608:	88 c1                	mov    cl,al
c002860a:	d3 e3                	shl    ebx,cl
c002860c:	85 db                	test   ebx,ebx
c002860e:	0f 95 c3             	setne  bl
c0028611:	0f b6 db             	movzx  ebx,bl
c0028614:	09 fb                	or     ebx,edi
c0028616:	89 f1                	mov    ecx,esi
c0028618:	d3 ea                	shr    edx,cl
c002861a:	31 c0                	xor    eax,eax
c002861c:	eb 0d                	jmp    c002862b <__divdf3+0x32f>
c002861e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028623:	eb 02                	jmp    c0028627 <__divdf3+0x32b>
c0028625:	31 c0                	xor    eax,eax
c0028627:	31 db                	xor    ebx,ebx
c0028629:	31 d2                	xor    edx,edx
c002862b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c002862e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028631:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028637:	09 c8                	or     eax,ecx
c0028639:	c1 e0 14             	shl    eax,0x14
c002863c:	89 d1                	mov    ecx,edx
c002863e:	c1 e9 0b             	shr    ecx,0xb
c0028641:	09 c8                	or     eax,ecx
c0028643:	89 c6                	mov    esi,eax
c0028645:	89 d9                	mov    ecx,ebx
c0028647:	c1 e9 0b             	shr    ecx,0xb
c002864a:	c1 e2 15             	shl    edx,0x15
c002864d:	09 ca                	or     edx,ecx
c002864f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028655:	0f 95 c0             	setne  al
c0028658:	09 c1                	or     ecx,eax
c002865a:	83 e1 01             	and    ecx,0x1
c002865d:	c1 eb 0a             	shr    ebx,0xa
c0028660:	21 cb                	and    ebx,ecx
c0028662:	01 d3                	add    ebx,edx
c0028664:	89 d8                	mov    eax,ebx
c0028666:	83 d6 00             	adc    esi,0x0
c0028669:	89 f2                	mov    edx,esi
c002866b:	89 c7                	mov    edi,eax
c002866d:	89 d1                	mov    ecx,edx
c002866f:	89 f8                	mov    eax,edi
c0028671:	89 ca                	mov    edx,ecx
c0028673:	83 c4 2c             	add    esp,0x2c
c0028676:	5b                   	pop    ebx
c0028677:	5e                   	pop    esi
c0028678:	5f                   	pop    edi
c0028679:	5d                   	pop    ebp
c002867a:	c3                   	ret    

c002867b <__floatsidf>:
c002867b:	55                   	push   ebp
c002867c:	89 e5                	mov    ebp,esp
c002867e:	56                   	push   esi
c002867f:	53                   	push   ebx
c0028680:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028683:	85 db                	test   ebx,ebx
c0028685:	7e 15                	jle    c002869c <__floatsidf+0x21>
c0028687:	0f bd cb             	bsr    ecx,ebx
c002868a:	83 f1 1f             	xor    ecx,0x1f
c002868d:	d3 e3                	shl    ebx,cl
c002868f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028695:	b8 1e 04 00 00       	mov    eax,0x41e
c002869a:	eb 21                	jmp    c00286bd <__floatsidf+0x42>
c002869c:	b8 00 00 00 00       	mov    eax,0x0
c00286a1:	ba 00 00 00 00       	mov    edx,0x0
c00286a6:	74 2a                	je     c00286d2 <__floatsidf+0x57>
c00286a8:	f7 db                	neg    ebx
c00286aa:	0f bd cb             	bsr    ecx,ebx
c00286ad:	83 f1 1f             	xor    ecx,0x1f
c00286b0:	d3 e3                	shl    ebx,cl
c00286b2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00286b8:	b8 1e 0c 00 00       	mov    eax,0xc1e
c00286bd:	29 c8                	sub    eax,ecx
c00286bf:	c1 e0 14             	shl    eax,0x14
c00286c2:	89 c1                	mov    ecx,eax
c00286c4:	89 de                	mov    esi,ebx
c00286c6:	c1 ee 0b             	shr    esi,0xb
c00286c9:	09 f1                	or     ecx,esi
c00286cb:	89 ca                	mov    edx,ecx
c00286cd:	c1 e3 15             	shl    ebx,0x15
c00286d0:	89 d8                	mov    eax,ebx
c00286d2:	5b                   	pop    ebx
c00286d3:	5e                   	pop    esi
c00286d4:	5d                   	pop    ebp
c00286d5:	c3                   	ret    

c00286d6 <__floatunsidf>:
c00286d6:	55                   	push   ebp
c00286d7:	89 e5                	mov    ebp,esp
c00286d9:	56                   	push   esi
c00286da:	53                   	push   ebx
c00286db:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00286de:	85 db                	test   ebx,ebx
c00286e0:	74 2a                	je     c002870c <__floatunsidf+0x36>
c00286e2:	0f bd cb             	bsr    ecx,ebx
c00286e5:	83 f1 1f             	xor    ecx,0x1f
c00286e8:	d3 e3                	shl    ebx,cl
c00286ea:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00286f0:	b8 1e 04 00 00       	mov    eax,0x41e
c00286f5:	29 c8                	sub    eax,ecx
c00286f7:	c1 e0 14             	shl    eax,0x14
c00286fa:	89 c1                	mov    ecx,eax
c00286fc:	89 de                	mov    esi,ebx
c00286fe:	c1 ee 0b             	shr    esi,0xb
c0028701:	09 f1                	or     ecx,esi
c0028703:	89 ca                	mov    edx,ecx
c0028705:	c1 e3 15             	shl    ebx,0x15
c0028708:	89 d8                	mov    eax,ebx
c002870a:	eb 04                	jmp    c0028710 <__floatunsidf+0x3a>
c002870c:	31 c0                	xor    eax,eax
c002870e:	31 d2                	xor    edx,edx
c0028710:	5b                   	pop    ebx
c0028711:	5e                   	pop    esi
c0028712:	5d                   	pop    ebp
c0028713:	c3                   	ret    

c0028714 <__fixdfsi>:
c0028714:	55                   	push   ebp
c0028715:	89 e5                	mov    ebp,esp
c0028717:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002871a:	89 d1                	mov    ecx,edx
c002871c:	c1 e1 0b             	shl    ecx,0xb
c002871f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028725:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028728:	c1 e8 15             	shr    eax,0x15
c002872b:	09 c1                	or     ecx,eax
c002872d:	c1 fa 14             	sar    edx,0x14
c0028730:	78 1f                	js     c0028751 <__fixdfsi+0x3d>
c0028732:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028738:	31 c0                	xor    eax,eax
c002873a:	83 fa 1e             	cmp    edx,0x1e
c002873d:	77 40                	ja     c002877f <__fixdfsi+0x6b>
c002873f:	89 c8                	mov    eax,ecx
c0028741:	0d 00 00 00 80       	or     eax,0x80000000
c0028746:	b9 1f 00 00 00       	mov    ecx,0x1f
c002874b:	29 d1                	sub    ecx,edx
c002874d:	d3 e8                	shr    eax,cl
c002874f:	eb 2e                	jmp    c002877f <__fixdfsi+0x6b>
c0028751:	31 c0                	xor    eax,eax
c0028753:	81 c2 01 04 00 00    	add    edx,0x401
c0028759:	78 24                	js     c002877f <__fixdfsi+0x6b>
c002875b:	83 fa 1e             	cmp    edx,0x1e
c002875e:	7e 09                	jle    c0028769 <__fixdfsi+0x55>
c0028760:	83 fa 1f             	cmp    edx,0x1f
c0028763:	75 18                	jne    c002877d <__fixdfsi+0x69>
c0028765:	85 c9                	test   ecx,ecx
c0028767:	75 14                	jne    c002877d <__fixdfsi+0x69>
c0028769:	89 c8                	mov    eax,ecx
c002876b:	0d 00 00 00 80       	or     eax,0x80000000
c0028770:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028775:	29 d1                	sub    ecx,edx
c0028777:	d3 e8                	shr    eax,cl
c0028779:	f7 d8                	neg    eax
c002877b:	eb 02                	jmp    c002877f <__fixdfsi+0x6b>
c002877d:	31 c0                	xor    eax,eax
c002877f:	5d                   	pop    ebp
c0028780:	c3                   	ret    

c0028781 <__fixunsdfsi>:
c0028781:	55                   	push   ebp
c0028782:	89 e5                	mov    ebp,esp
c0028784:	53                   	push   ebx
c0028785:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028788:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002878b:	89 d3                	mov    ebx,edx
c002878d:	c1 fb 14             	sar    ebx,0x14
c0028790:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028796:	31 c0                	xor    eax,eax
c0028798:	83 fb 1f             	cmp    ebx,0x1f
c002879b:	77 1d                	ja     c00287ba <__fixunsdfsi+0x39>
c002879d:	89 d0                	mov    eax,edx
c002879f:	c1 e0 0b             	shl    eax,0xb
c00287a2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00287a7:	c1 e9 15             	shr    ecx,0x15
c00287aa:	09 c8                	or     eax,ecx
c00287ac:	0d 00 00 00 80       	or     eax,0x80000000
c00287b1:	b9 1f 00 00 00       	mov    ecx,0x1f
c00287b6:	29 d9                	sub    ecx,ebx
c00287b8:	d3 e8                	shr    eax,cl
c00287ba:	5b                   	pop    ebx
c00287bb:	5d                   	pop    ebp
c00287bc:	c3                   	ret    

c00287bd <__cmpdf2>:
c00287bd:	55                   	push   ebp
c00287be:	89 e5                	mov    ebp,esp
c00287c0:	57                   	push   edi
c00287c1:	56                   	push   esi
c00287c2:	53                   	push   ebx
c00287c3:	83 ec 0c             	sub    esp,0xc
c00287c6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00287c9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00287cc:	89 ca                	mov    edx,ecx
c00287ce:	c1 ea 14             	shr    edx,0x14
c00287d1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00287d7:	89 cb                	mov    ebx,ecx
c00287d9:	c1 fb 1f             	sar    ebx,0x1f
c00287dc:	31 da                	xor    edx,ebx
c00287de:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00287e1:	89 df                	mov    edi,ebx
c00287e3:	c1 e7 0b             	shl    edi,0xb
c00287e6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00287e9:	c1 e1 0b             	shl    ecx,0xb
c00287ec:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00287f2:	c1 eb 15             	shr    ebx,0x15
c00287f5:	09 d9                	or     ecx,ebx
c00287f7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00287fa:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00287fd:	89 ce                	mov    esi,ecx
c00287ff:	c1 ee 14             	shr    esi,0x14
c0028802:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028808:	89 cb                	mov    ebx,ecx
c002880a:	c1 fb 1f             	sar    ebx,0x1f
c002880d:	31 de                	xor    esi,ebx
c002880f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028812:	89 df                	mov    edi,ebx
c0028814:	c1 e7 0b             	shl    edi,0xb
c0028817:	c1 e1 0b             	shl    ecx,0xb
c002881a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028820:	c1 eb 15             	shr    ebx,0x15
c0028823:	09 d9                	or     ecx,ebx
c0028825:	89 d3                	mov    ebx,edx
c0028827:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002882d:	43                   	inc    ebx
c002882e:	83 fb 01             	cmp    ebx,0x1
c0028831:	77 08                	ja     c002883b <__cmpdf2+0x7e>
c0028833:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028836:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028839:	75 68                	jne    c00288a3 <__cmpdf2+0xe6>
c002883b:	89 f3                	mov    ebx,esi
c002883d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028843:	43                   	inc    ebx
c0028844:	83 fb 01             	cmp    ebx,0x1
c0028847:	77 06                	ja     c002884f <__cmpdf2+0x92>
c0028849:	89 fb                	mov    ebx,edi
c002884b:	09 cb                	or     ebx,ecx
c002884d:	75 54                	jne    c00288a3 <__cmpdf2+0xe6>
c002884f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028852:	09 f8                	or     eax,edi
c0028854:	09 c8                	or     eax,ecx
c0028856:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028859:	75 12                	jne    c002886d <__cmpdf2+0xb0>
c002885b:	8d 42 01             	lea    eax,[edx+0x1]
c002885e:	83 f8 01             	cmp    eax,0x1
c0028861:	77 0a                	ja     c002886d <__cmpdf2+0xb0>
c0028863:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028866:	31 c0                	xor    eax,eax
c0028868:	83 fb 01             	cmp    ebx,0x1
c002886b:	76 36                	jbe    c00288a3 <__cmpdf2+0xe6>
c002886d:	b8 01 00 00 00       	mov    eax,0x1
c0028872:	39 f2                	cmp    edx,esi
c0028874:	7f 2d                	jg     c00288a3 <__cmpdf2+0xe6>
c0028876:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002887b:	7c 26                	jl     c00288a3 <__cmpdf2+0xe6>
c002887d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028880:	77 07                	ja     c0028889 <__cmpdf2+0xcc>
c0028882:	72 16                	jb     c002889a <__cmpdf2+0xdd>
c0028884:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028887:	76 0a                	jbe    c0028893 <__cmpdf2+0xd6>
c0028889:	89 d0                	mov    eax,edx
c002888b:	c1 f8 1f             	sar    eax,0x1f
c002888e:	83 c8 01             	or     eax,0x1
c0028891:	eb 10                	jmp    c00288a3 <__cmpdf2+0xe6>
c0028893:	b8 00 00 00 00       	mov    eax,0x0
c0028898:	73 09                	jae    c00288a3 <__cmpdf2+0xe6>
c002889a:	89 d0                	mov    eax,edx
c002889c:	c1 f8 1f             	sar    eax,0x1f
c002889f:	83 e0 02             	and    eax,0x2
c00288a2:	48                   	dec    eax
c00288a3:	83 c4 0c             	add    esp,0xc
c00288a6:	5b                   	pop    ebx
c00288a7:	5e                   	pop    esi
c00288a8:	5f                   	pop    edi
c00288a9:	5d                   	pop    ebp
c00288aa:	c3                   	ret    

c00288ab <__eqdf2>:
c00288ab:	55                   	push   ebp
c00288ac:	89 e5                	mov    ebp,esp
c00288ae:	50                   	push   eax
c00288af:	6a 01                	push   0x1
c00288b1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00288b4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00288b7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00288ba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00288bd:	e8 fb fe ff ff       	call   c00287bd <__cmpdf2>
c00288c2:	83 c4 18             	add    esp,0x18
c00288c5:	c9                   	leave  
c00288c6:	c3                   	ret    

c00288c7 <__nedf2>:
c00288c7:	eb e2                	jmp    c00288ab <__eqdf2>

c00288c9 <__gtdf2>:
c00288c9:	55                   	push   ebp
c00288ca:	89 e5                	mov    ebp,esp
c00288cc:	50                   	push   eax
c00288cd:	6a ff                	push   0xffffffff
c00288cf:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00288d2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00288d5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00288d8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00288db:	e8 dd fe ff ff       	call   c00287bd <__cmpdf2>
c00288e0:	83 c4 18             	add    esp,0x18
c00288e3:	c9                   	leave  
c00288e4:	c3                   	ret    

c00288e5 <__gedf2>:
c00288e5:	eb e2                	jmp    c00288c9 <__gtdf2>

c00288e7 <__ltdf2>:
c00288e7:	eb c2                	jmp    c00288ab <__eqdf2>

c00288e9 <__ledf2>:
c00288e9:	eb c0                	jmp    c00288ab <__eqdf2>

c00288eb <__truncdfsf2>:
c00288eb:	55                   	push   ebp
c00288ec:	89 e5                	mov    ebp,esp
c00288ee:	57                   	push   edi
c00288ef:	56                   	push   esi
c00288f0:	53                   	push   ebx
c00288f1:	83 ec 0c             	sub    esp,0xc
c00288f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00288f7:	89 d1                	mov    ecx,edx
c00288f9:	c1 f9 14             	sar    ecx,0x14
c00288fc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00288ff:	89 df                	mov    edi,ebx
c0028901:	c1 e7 0b             	shl    edi,0xb
c0028904:	89 d0                	mov    eax,edx
c0028906:	c1 e0 0b             	shl    eax,0xb
c0028909:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002890e:	c1 eb 15             	shr    ebx,0x15
c0028911:	09 d8                	or     eax,ebx
c0028913:	89 cb                	mov    ebx,ecx
c0028915:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002891b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028921:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028927:	0f 86 9e 00 00 00    	jbe    c00289cb <__truncdfsf2+0xe0>
c002892d:	85 db                	test   ebx,ebx
c002892f:	75 0a                	jne    c002893b <__truncdfsf2+0x50>
c0028931:	c1 fa 17             	sar    edx,0x17
c0028934:	30 d2                	xor    dl,dl
c0028936:	e9 84 00 00 00       	jmp    c00289bf <__truncdfsf2+0xd4>
c002893b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028941:	83 fe 83             	cmp    esi,0xffffff83
c0028944:	7d 4b                	jge    c0028991 <__truncdfsf2+0xa6>
c0028946:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002894b:	29 f1                	sub    ecx,esi
c002894d:	83 f9 1f             	cmp    ecx,0x1f
c0028950:	7f 6b                	jg     c00289bd <__truncdfsf2+0xd2>
c0028952:	0d 00 00 00 80       	or     eax,0x80000000
c0028957:	89 c3                	mov    ebx,eax
c0028959:	d3 eb                	shr    ebx,cl
c002895b:	be 01 00 00 00       	mov    esi,0x1
c0028960:	d3 e6                	shl    esi,cl
c0028962:	4e                   	dec    esi
c0028963:	21 f0                	and    eax,esi
c0028965:	09 f8                	or     eax,edi
c0028967:	0f 95 c0             	setne  al
c002896a:	0f b6 c0             	movzx  eax,al
c002896d:	09 c3                	or     ebx,eax
c002896f:	89 d9                	mov    ecx,ebx
c0028971:	c1 e9 08             	shr    ecx,0x8
c0028974:	f6 c3 7f             	test   bl,0x7f
c0028977:	0f 95 c0             	setne  al
c002897a:	09 c8                	or     eax,ecx
c002897c:	83 e0 01             	and    eax,0x1
c002897f:	c1 eb 07             	shr    ebx,0x7
c0028982:	21 c3                	and    ebx,eax
c0028984:	81 e2 00 00 00 80    	and    edx,0x80000000
c002898a:	09 d1                	or     ecx,edx
c002898c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002898f:	eb 76                	jmp    c0028a07 <__truncdfsf2+0x11c>
c0028991:	83 c6 80             	add    esi,0xffffff80
c0028994:	7e 1d                	jle    c00289b3 <__truncdfsf2+0xc8>
c0028996:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002899c:	75 0b                	jne    c00289a9 <__truncdfsf2+0xbe>
c002899e:	09 f8                	or     eax,edi
c00289a0:	74 09                	je     c00289ab <__truncdfsf2+0xc0>
c00289a2:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00289a7:	eb 02                	jmp    c00289ab <__truncdfsf2+0xc0>
c00289a9:	31 c0                	xor    eax,eax
c00289ab:	c1 fa 17             	sar    edx,0x17
c00289ae:	80 ca ff             	or     dl,0xff
c00289b1:	eb 0e                	jmp    c00289c1 <__truncdfsf2+0xd6>
c00289b3:	c1 fa 1f             	sar    edx,0x1f
c00289b6:	c1 e2 08             	shl    edx,0x8
c00289b9:	09 ca                	or     edx,ecx
c00289bb:	eb 04                	jmp    c00289c1 <__truncdfsf2+0xd6>
c00289bd:	31 d2                	xor    edx,edx
c00289bf:	31 c0                	xor    eax,eax
c00289c1:	c1 e2 17             	shl    edx,0x17
c00289c4:	c1 e8 08             	shr    eax,0x8
c00289c7:	09 d0                	or     eax,edx
c00289c9:	eb 3c                	jmp    c0028a07 <__truncdfsf2+0x11c>
c00289cb:	81 e9 80 03 00 00    	sub    ecx,0x380
c00289d1:	89 ca                	mov    edx,ecx
c00289d3:	c1 fa 0b             	sar    edx,0xb
c00289d6:	c1 e2 08             	shl    edx,0x8
c00289d9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00289dc:	31 db                	xor    ebx,ebx
c00289de:	85 ff                	test   edi,edi
c00289e0:	0f 95 c3             	setne  bl
c00289e3:	09 d8                	or     eax,ebx
c00289e5:	89 c3                	mov    ebx,eax
c00289e7:	c1 eb 08             	shr    ebx,0x8
c00289ea:	a8 7f                	test   al,0x7f
c00289ec:	0f 95 c2             	setne  dl
c00289ef:	89 d6                	mov    esi,edx
c00289f1:	09 de                	or     esi,ebx
c00289f3:	83 e6 01             	and    esi,0x1
c00289f6:	c1 e8 07             	shr    eax,0x7
c00289f9:	21 f0                	and    eax,esi
c00289fb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00289fe:	09 ca                	or     edx,ecx
c0028a00:	c1 e2 17             	shl    edx,0x17
c0028a03:	09 da                	or     edx,ebx
c0028a05:	01 d0                	add    eax,edx
c0028a07:	83 c4 0c             	add    esp,0xc
c0028a0a:	5b                   	pop    ebx
c0028a0b:	5e                   	pop    esi
c0028a0c:	5f                   	pop    edi
c0028a0d:	5d                   	pop    ebp
c0028a0e:	c3                   	ret    

c0028a0f <__extendsfdf2>:
c0028a0f:	55                   	push   ebp
c0028a10:	89 e5                	mov    ebp,esp
c0028a12:	57                   	push   edi
c0028a13:	56                   	push   esi
c0028a14:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028a17:	89 d1                	mov    ecx,edx
c0028a19:	c1 f9 17             	sar    ecx,0x17
c0028a1c:	c1 e2 08             	shl    edx,0x8
c0028a1f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028a25:	89 c8                	mov    eax,ecx
c0028a27:	80 e4 f8             	and    ah,0xf8
c0028a2a:	8d 71 01             	lea    esi,[ecx+0x1]
c0028a2d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028a33:	75 27                	jne    c0028a5c <__extendsfdf2+0x4d>
c0028a35:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028a3b:	75 18                	jne    c0028a55 <__extendsfdf2+0x46>
c0028a3d:	85 d2                	test   edx,edx
c0028a3f:	74 20                	je     c0028a61 <__extendsfdf2+0x52>
c0028a41:	41                   	inc    ecx
c0028a42:	01 d2                	add    edx,edx
c0028a44:	79 fb                	jns    c0028a41 <__extendsfdf2+0x32>
c0028a46:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028a4c:	29 c8                	sub    eax,ecx
c0028a4e:	05 81 03 00 00       	add    eax,0x381
c0028a53:	eb 0c                	jmp    c0028a61 <__extendsfdf2+0x52>
c0028a55:	05 00 07 00 00       	add    eax,0x700
c0028a5a:	eb 05                	jmp    c0028a61 <__extendsfdf2+0x52>
c0028a5c:	05 80 03 00 00       	add    eax,0x380
c0028a61:	c1 e0 14             	shl    eax,0x14
c0028a64:	89 c1                	mov    ecx,eax
c0028a66:	89 d0                	mov    eax,edx
c0028a68:	c1 e8 0b             	shr    eax,0xb
c0028a6b:	09 c1                	or     ecx,eax
c0028a6d:	c1 e2 15             	shl    edx,0x15
c0028a70:	89 d0                	mov    eax,edx
c0028a72:	89 ca                	mov    edx,ecx
c0028a74:	5e                   	pop    esi
c0028a75:	5f                   	pop    edi
c0028a76:	5d                   	pop    ebp
c0028a77:	c3                   	ret    
c0028a78:	66 90                	xchg   ax,ax
c0028a7a:	66 90                	xchg   ax,ax
c0028a7c:	66 90                	xchg   ax,ax
c0028a7e:	66 90                	xchg   ax,ax

c0028a80 <fabs>:
c0028a80:	83 ec 0c             	sub    esp,0xc
c0028a83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a87:	89 04 24             	mov    DWORD PTR [esp],eax
c0028a8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028a8e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028a93:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028a97:	dd 04 24             	fld    QWORD PTR [esp]
c0028a9a:	83 c4 0c             	add    esp,0xc
c0028a9d:	c3                   	ret    
c0028a9e:	66 90                	xchg   ax,ax

c0028aa0 <lrint>:
c0028aa0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028aa4:	83 ec 04             	sub    esp,0x4
c0028aa7:	db 1c 24             	fistp  DWORD PTR [esp]
c0028aaa:	58                   	pop    eax
c0028aab:	c3                   	ret    

c0028aac <lrintf>:
c0028aac:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028ab0:	83 ec 04             	sub    esp,0x4
c0028ab3:	db 1c 24             	fistp  DWORD PTR [esp]
c0028ab6:	58                   	pop    eax
c0028ab7:	c3                   	ret    

Disassembly of section .init:

c0028ab8 <_init>:
c0028ab8:	55                   	push   ebp
c0028ab9:	89 e5                	mov    ebp,esp
c0028abb:	e8 58 76 fd ff       	call   c0000118 <frame_dummy>
c0028ac0:	e8 5b e0 ff ff       	call   c0026b20 <__do_global_ctors_aux>
c0028ac5:	5d                   	pop    ebp
c0028ac6:	c3                   	ret    

Disassembly of section .fini:

c0028ac7 <_fini>:
c0028ac7:	55                   	push   ebp
c0028ac8:	89 e5                	mov    ebp,esp
c0028aca:	e8 d9 75 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0028acf:	5d                   	pop    ebp
c0028ad0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028ad2 <Computer::~Computer()>:
c0028ad2:	83 ec 0c             	sub    esp,0xc
c0028ad5:	ba 98 a7 02 c0       	mov    edx,0xc002a798
c0028ada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ade:	89 10                	mov    DWORD PTR [eax],edx
c0028ae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae4:	83 ec 0c             	sub    esp,0xc
c0028ae7:	50                   	push   eax
c0028ae8:	e8 55 b2 fe ff       	call   c0013d42 <Device::~Device()>
c0028aed:	83 c4 10             	add    esp,0x10
c0028af0:	90                   	nop
c0028af1:	83 c4 0c             	add    esp,0xc
c0028af4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028af6 <Computer::~Computer()>:
c0028af6:	83 ec 0c             	sub    esp,0xc
c0028af9:	83 ec 0c             	sub    esp,0xc
c0028afc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b00:	e8 cd ff ff ff       	call   c0028ad2 <Computer::~Computer()>
c0028b05:	83 c4 10             	add    esp,0x10
c0028b08:	83 ec 08             	sub    esp,0x8
c0028b0b:	68 ec 01 00 00       	push   0x1ec
c0028b10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b14:	e8 4a 9e fe ff       	call   c0012963 <operator delete(void*, unsigned long)>
c0028b19:	83 c4 10             	add    esp,0x10
c0028b1c:	83 c4 0c             	add    esp,0xc
c0028b1f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028b20 <idleCommon()>:
c0028b20:	83 ec 0c             	sub    esp,0xc
c0028b23:	fa                   	cli    
c0028b24:	ff 05 e8 fb 02 c0    	inc    DWORD PTR ds:0xc002fbe8
c0028b2a:	e8 3c 54 ff ff       	call   c001df6b <schedule()>
c0028b2f:	a1 e8 fb 02 c0       	mov    eax,ds:0xc002fbe8
c0028b34:	48                   	dec    eax
c0028b35:	a3 e8 fb 02 c0       	mov    ds:0xc002fbe8,eax
c0028b3a:	75 01                	jne    c0028b3d <idleCommon()+0x1d>
c0028b3c:	fb                   	sti    
c0028b3d:	83 c4 0c             	add    esp,0xc
c0028b40:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028b42 <LinkedList<UnixFile>::~LinkedList()>:
c0028b42:	90                   	nop
c0028b43:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028b44 <LinkedList<UnixFile>::LinkedList()>:
c0028b44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b48:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b52:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b5d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b68:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b72:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b7d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b84:	90                   	nop
c0028b85:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028b86 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028b86:	83 ec 0c             	sub    esp,0xc
c0028b89:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028b8e:	75 10                	jne    c0028ba0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028b90:	83 ec 0c             	sub    esp,0xc
c0028b93:	68 fc aa 02 c0       	push   0xc002aafc
c0028b98:	e8 3c 18 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c0028b9d:	83 c4 10             	add    esp,0x10
c0028ba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba4:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ba6:	85 c0                	test   eax,eax
c0028ba8:	74 34                	je     c0028bde <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028baa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bb1:	85 c0                	test   eax,eax
c0028bb3:	74 29                	je     c0028bde <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028bb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bbc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bc0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bcb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028bce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bd5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028bdc:	eb 65                	jmp    c0028c43 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028bde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be2:	8b 00                	mov    eax,DWORD PTR [eax]
c0028be4:	85 c0                	test   eax,eax
c0028be6:	75 4b                	jne    c0028c33 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028be8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bef:	85 c0                	test   eax,eax
c0028bf1:	75 40                	jne    c0028c33 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028bf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bfb:	89 10                	mov    DWORD PTR [eax],edx
c0028bfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c01:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c05:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c0f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c1a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c1d:	85 c0                	test   eax,eax
c0028c1f:	74 22                	je     c0028c43 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028c21:	83 ec 0c             	sub    esp,0xc
c0028c24:	68 1e ab 02 c0       	push   0xc002ab1e
c0028c29:	e8 ab 17 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c0028c2e:	83 c4 10             	add    esp,0x10
c0028c31:	eb 10                	jmp    c0028c43 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028c33:	83 ec 0c             	sub    esp,0xc
c0028c36:	68 28 ab 02 c0       	push   0xc002ab28
c0028c3b:	e8 99 17 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c0028c40:	83 c4 10             	add    esp,0x10
c0028c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c47:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c4a:	8d 50 01             	lea    edx,[eax+0x1]
c0028c4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c51:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028c54:	90                   	nop
c0028c55:	83 c4 0c             	add    esp,0xc
c0028c58:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028c5a <LinkedList<UnixFile>::getFirstElement()>:
c0028c5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c60:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028c62 <LinkedList<UnixFile>::removeFirst()>:
c0028c62:	83 ec 0c             	sub    esp,0xc
c0028c65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c69:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c6b:	85 c0                	test   eax,eax
c0028c6d:	75 12                	jne    c0028c81 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028c6f:	83 ec 0c             	sub    esp,0xc
c0028c72:	68 34 ab 02 c0       	push   0xc002ab34
c0028c77:	e8 5d 17 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c0028c7c:	83 c4 10             	add    esp,0x10
c0028c7f:	eb 7e                	jmp    c0028cff <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028c81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c85:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c88:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c8b:	85 c0                	test   eax,eax
c0028c8d:	74 10                	je     c0028c9f <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028c8f:	83 ec 0c             	sub    esp,0xc
c0028c92:	68 7f ab 02 c0       	push   0xc002ab7f
c0028c97:	e8 3d 17 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c0028c9c:	83 c4 10             	add    esp,0x10
c0028c9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ca3:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ca5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ca8:	85 c0                	test   eax,eax
c0028caa:	75 33                	jne    c0028cdf <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cb0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028cb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cc5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028cc8:	83 f8 01             	cmp    eax,0x1
c0028ccb:	74 21                	je     c0028cee <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028ccd:	83 ec 0c             	sub    esp,0xc
c0028cd0:	68 58 ab 02 c0       	push   0xc002ab58
c0028cd5:	e8 ff 16 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c0028cda:	83 c4 10             	add    esp,0x10
c0028cdd:	eb 0f                	jmp    c0028cee <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce3:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ce5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cec:	89 10                	mov    DWORD PTR [eax],edx
c0028cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cf2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028cf5:	8d 50 ff             	lea    edx,[eax-0x1]
c0028cf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cfc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028cff:	83 c4 0c             	add    esp,0xc
c0028d02:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0028d04 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0028d04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028d08:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028d0b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028d0c <DriverlessDevice::~DriverlessDevice()>:
c0028d0c:	ba 1c b4 02 c0       	mov    edx,0xc002b41c
c0028d11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d15:	89 10                	mov    DWORD PTR [eax],edx
c0028d17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d1b:	50                   	push   eax
c0028d1c:	e8 21 b0 fe ff       	call   c0013d42 <Device::~Device()>
c0028d21:	83 c4 04             	add    esp,0x4
c0028d24:	90                   	nop
c0028d25:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028d26 <DriverlessDevice::~DriverlessDevice()>:
c0028d26:	83 ec 0c             	sub    esp,0xc
c0028d29:	83 ec 0c             	sub    esp,0xc
c0028d2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d30:	e8 d7 ff ff ff       	call   c0028d0c <DriverlessDevice::~DriverlessDevice()>
c0028d35:	83 c4 10             	add    esp,0x10
c0028d38:	83 ec 08             	sub    esp,0x8
c0028d3b:	68 58 01 00 00       	push   0x158
c0028d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d44:	e8 1a 9c fe ff       	call   c0012963 <operator delete(void*, unsigned long)>
c0028d49:	83 c4 10             	add    esp,0x10
c0028d4c:	83 c4 0c             	add    esp,0xc
c0028d4f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028d50 <LinkedList<Device>::addElement(Device*)>:
c0028d50:	83 ec 0c             	sub    esp,0xc
c0028d53:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028d58:	75 10                	jne    c0028d6a <LinkedList<Device>::addElement(Device*)+0x1a>
c0028d5a:	83 ec 0c             	sub    esp,0xc
c0028d5d:	68 fc aa 02 c0       	push   0xc002aafc
c0028d62:	e8 72 16 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c0028d67:	83 c4 10             	add    esp,0x10
c0028d6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d70:	85 c0                	test   eax,eax
c0028d72:	74 3a                	je     c0028dae <LinkedList<Device>::addElement(Device*)+0x5e>
c0028d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d7b:	85 c0                	test   eax,eax
c0028d7d:	74 2f                	je     c0028dae <LinkedList<Device>::addElement(Device*)+0x5e>
c0028d7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d83:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d86:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028d8a:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d94:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028d98:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028d9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d9f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028da2:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028dac:	eb 68                	jmp    c0028e16 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028dae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028db2:	8b 00                	mov    eax,DWORD PTR [eax]
c0028db4:	85 c0                	test   eax,eax
c0028db6:	75 4e                	jne    c0028e06 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028db8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028dbf:	85 c0                	test   eax,eax
c0028dc1:	75 43                	jne    c0028e06 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028dc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028dcb:	89 10                	mov    DWORD PTR [eax],edx
c0028dcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dd1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028dd5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028dd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ddc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ddf:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ded:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028df0:	85 c0                	test   eax,eax
c0028df2:	74 22                	je     c0028e16 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028df4:	83 ec 0c             	sub    esp,0xc
c0028df7:	68 1e ab 02 c0       	push   0xc002ab1e
c0028dfc:	e8 d8 15 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c0028e01:	83 c4 10             	add    esp,0x10
c0028e04:	eb 10                	jmp    c0028e16 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028e06:	83 ec 0c             	sub    esp,0xc
c0028e09:	68 28 ab 02 c0       	push   0xc002ab28
c0028e0e:	e8 c6 15 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c0028e13:	83 c4 10             	add    esp,0x10
c0028e16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e1a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028e1d:	8d 50 01             	lea    edx,[eax+0x1]
c0028e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e24:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028e27:	90                   	nop
c0028e28:	83 c4 0c             	add    esp,0xc
c0028e2b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028e2c <LinkedList<Device>::LinkedList()>:
c0028e2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e30:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028e36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e3a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028e41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e45:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028e4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e50:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028e56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e5a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028e61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e65:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028e6c:	90                   	nop
c0028e6d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028e6e <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028e6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e72:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e74:	85 c0                	test   eax,eax
c0028e76:	75 0e                	jne    c0028e86 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028e78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028e7f:	85 c0                	test   eax,eax
c0028e81:	75 03                	jne    c0028e86 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028e83:	b0 01                	mov    al,0x1
c0028e85:	c3                   	ret    
c0028e86:	b0 00                	mov    al,0x0
c0028e88:	90                   	nop
c0028e89:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028e8a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028e8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e90:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028e92 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028e92:	83 ec 0c             	sub    esp,0xc
c0028e95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e99:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e9b:	85 c0                	test   eax,eax
c0028e9d:	75 15                	jne    c0028eb4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028e9f:	83 ec 0c             	sub    esp,0xc
c0028ea2:	68 34 ab 02 c0       	push   0xc002ab34
c0028ea7:	e8 2d 15 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c0028eac:	83 c4 10             	add    esp,0x10
c0028eaf:	e9 88 00 00 00       	jmp    c0028f3c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028eb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ebb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028ebe:	85 c0                	test   eax,eax
c0028ec0:	0f 95 c0             	setne  al
c0028ec3:	84 c0                	test   al,al
c0028ec5:	74 10                	je     c0028ed7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028ec7:	83 ec 0c             	sub    esp,0xc
c0028eca:	68 7f ab 02 c0       	push   0xc002ab7f
c0028ecf:	e8 05 15 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c0028ed4:	83 c4 10             	add    esp,0x10
c0028ed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028edb:	8b 00                	mov    eax,DWORD PTR [eax]
c0028edd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028ee0:	85 c0                	test   eax,eax
c0028ee2:	0f 94 c0             	sete   al
c0028ee5:	84 c0                	test   al,al
c0028ee7:	74 33                	je     c0028f1c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028ee9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028efe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f02:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028f05:	83 f8 01             	cmp    eax,0x1
c0028f08:	74 21                	je     c0028f2b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028f0a:	83 ec 0c             	sub    esp,0xc
c0028f0d:	68 58 ab 02 c0       	push   0xc002ab58
c0028f12:	e8 c2 14 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c0028f17:	83 c4 10             	add    esp,0x10
c0028f1a:	eb 0f                	jmp    c0028f2b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f20:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f22:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028f25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f29:	89 10                	mov    DWORD PTR [eax],edx
c0028f2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f2f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028f32:	8d 50 ff             	lea    edx,[eax-0x1]
c0028f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f39:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028f3c:	83 c4 0c             	add    esp,0xc
c0028f3f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028f40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028f40:	83 ec 0c             	sub    esp,0xc
c0028f43:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028f48:	75 10                	jne    c0028f5a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028f4a:	83 ec 0c             	sub    esp,0xc
c0028f4d:	68 fc aa 02 c0       	push   0xc002aafc
c0028f52:	e8 82 14 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c0028f57:	83 c4 10             	add    esp,0x10
c0028f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f60:	85 c0                	test   eax,eax
c0028f62:	74 34                	je     c0028f98 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028f64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f6b:	85 c0                	test   eax,eax
c0028f6d:	74 29                	je     c0028f98 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028f6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f7a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028f7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f81:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f85:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f8f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028f96:	eb 65                	jmp    c0028ffd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028f98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f9e:	85 c0                	test   eax,eax
c0028fa0:	75 4b                	jne    c0028fed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028fa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fa9:	85 c0                	test   eax,eax
c0028fab:	75 40                	jne    c0028fed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028fad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fb1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028fb5:	89 10                	mov    DWORD PTR [eax],edx
c0028fb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fbb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028fbf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028fc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fc9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028fd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fd4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028fd7:	85 c0                	test   eax,eax
c0028fd9:	74 22                	je     c0028ffd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028fdb:	83 ec 0c             	sub    esp,0xc
c0028fde:	68 1e ab 02 c0       	push   0xc002ab1e
c0028fe3:	e8 f1 13 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c0028fe8:	83 c4 10             	add    esp,0x10
c0028feb:	eb 10                	jmp    c0028ffd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028fed:	83 ec 0c             	sub    esp,0xc
c0028ff0:	68 28 ab 02 c0       	push   0xc002ab28
c0028ff5:	e8 df 13 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c0028ffa:	83 c4 10             	add    esp,0x10
c0028ffd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029001:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029004:	8d 50 01             	lea    edx,[eax+0x1]
c0029007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002900b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002900e:	90                   	nop
c002900f:	83 c4 0c             	add    esp,0xc
c0029012:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0029014 <ACPI::~ACPI()>:
c0029014:	83 ec 0c             	sub    esp,0xc
c0029017:	ba dc be 02 c0       	mov    edx,0xc002bedc
c002901c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029020:	89 10                	mov    DWORD PTR [eax],edx
c0029022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029026:	83 ec 0c             	sub    esp,0xc
c0029029:	50                   	push   eax
c002902a:	e8 13 ad fe ff       	call   c0013d42 <Device::~Device()>
c002902f:	83 c4 10             	add    esp,0x10
c0029032:	90                   	nop
c0029033:	83 c4 0c             	add    esp,0xc
c0029036:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0029038 <ACPI::~ACPI()>:
c0029038:	83 ec 0c             	sub    esp,0xc
c002903b:	83 ec 0c             	sub    esp,0xc
c002903e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029042:	e8 cd ff ff ff       	call   c0029014 <ACPI::~ACPI()>
c0029047:	83 c4 10             	add    esp,0x10
c002904a:	83 ec 08             	sub    esp,0x8
c002904d:	68 64 12 00 00       	push   0x1264
c0029052:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029056:	e8 08 99 fe ff       	call   c0012963 <operator delete(void*, unsigned long)>
c002905b:	83 c4 10             	add    esp,0x10
c002905e:	83 c4 0c             	add    esp,0xc
c0029061:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0029062 <LinkedList<Device>::~LinkedList()>:
c0029062:	90                   	nop
c0029063:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0029064 <LinkedList<Device>::isEmpty()>:
c0029064:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029068:	8b 00                	mov    eax,DWORD PTR [eax]
c002906a:	85 c0                	test   eax,eax
c002906c:	75 0e                	jne    c002907c <LinkedList<Device>::isEmpty()+0x18>
c002906e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029072:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029075:	85 c0                	test   eax,eax
c0029077:	75 03                	jne    c002907c <LinkedList<Device>::isEmpty()+0x18>
c0029079:	b0 01                	mov    al,0x1
c002907b:	c3                   	ret    
c002907c:	b0 00                	mov    al,0x0
c002907e:	90                   	nop
c002907f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0029080 <LinkedList<Device>::getFirstElement()>:
c0029080:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029084:	8b 00                	mov    eax,DWORD PTR [eax]
c0029086:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0029088 <LinkedList<Device>::removeFirst()>:
c0029088:	83 ec 0c             	sub    esp,0xc
c002908b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002908f:	8b 00                	mov    eax,DWORD PTR [eax]
c0029091:	85 c0                	test   eax,eax
c0029093:	75 15                	jne    c00290aa <LinkedList<Device>::removeFirst()+0x22>
c0029095:	83 ec 0c             	sub    esp,0xc
c0029098:	68 34 ab 02 c0       	push   0xc002ab34
c002909d:	e8 37 13 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c00290a2:	83 c4 10             	add    esp,0x10
c00290a5:	e9 87 00 00 00       	jmp    c0029131 <LinkedList<Device>::removeFirst()+0xa9>
c00290aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00290b1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00290b7:	85 c0                	test   eax,eax
c00290b9:	74 10                	je     c00290cb <LinkedList<Device>::removeFirst()+0x43>
c00290bb:	83 ec 0c             	sub    esp,0xc
c00290be:	68 7f ab 02 c0       	push   0xc002ab7f
c00290c3:	e8 11 13 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c00290c8:	83 c4 10             	add    esp,0x10
c00290cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00290d1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00290d7:	85 c0                	test   eax,eax
c00290d9:	75 33                	jne    c002910e <LinkedList<Device>::removeFirst()+0x86>
c00290db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00290e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00290f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290f7:	83 f8 01             	cmp    eax,0x1
c00290fa:	74 24                	je     c0029120 <LinkedList<Device>::removeFirst()+0x98>
c00290fc:	83 ec 0c             	sub    esp,0xc
c00290ff:	68 58 ab 02 c0       	push   0xc002ab58
c0029104:	e8 d0 12 ff ff       	call   c001a3d9 <Krnl::panic(char const*)>
c0029109:	83 c4 10             	add    esp,0x10
c002910c:	eb 12                	jmp    c0029120 <LinkedList<Device>::removeFirst()+0x98>
c002910e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029112:	8b 00                	mov    eax,DWORD PTR [eax]
c0029114:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002911a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002911e:	89 10                	mov    DWORD PTR [eax],edx
c0029120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029124:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029127:	8d 50 ff             	lea    edx,[eax-0x1]
c002912a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002912e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029131:	83 c4 0c             	add    esp,0xc
c0029134:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0029136 <CPU::~CPU()>:
c0029136:	83 ec 0c             	sub    esp,0xc
c0029139:	ba 78 c2 02 c0       	mov    edx,0xc002c278
c002913e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029142:	89 10                	mov    DWORD PTR [eax],edx
c0029144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029148:	83 ec 0c             	sub    esp,0xc
c002914b:	50                   	push   eax
c002914c:	e8 f1 ab fe ff       	call   c0013d42 <Device::~Device()>
c0029151:	83 c4 10             	add    esp,0x10
c0029154:	90                   	nop
c0029155:	83 c4 0c             	add    esp,0xc
c0029158:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002915a <CPU::~CPU()>:
c002915a:	83 ec 0c             	sub    esp,0xc
c002915d:	83 ec 0c             	sub    esp,0xc
c0029160:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029164:	e8 cd ff ff ff       	call   c0029136 <CPU::~CPU()>
c0029169:	83 c4 10             	add    esp,0x10
c002916c:	83 ec 08             	sub    esp,0x8
c002916f:	68 98 11 00 00       	push   0x1198
c0029174:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029178:	e8 e6 97 fe ff       	call   c0012963 <operator delete(void*, unsigned long)>
c002917d:	83 c4 10             	add    esp,0x10
c0029180:	83 c4 0c             	add    esp,0xc
c0029183:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029184 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029184:	90                   	nop
c0029185:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029186 <ThreadControlBlock::ThreadControlBlock()>:
c0029186:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002918a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029191:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029195:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002919c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291a0:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00291a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291ab:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00291b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291b6:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c00291bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291c1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00291c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291c9:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00291cd:	90                   	nop
c00291ce:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00291d0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00291d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291d4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00291da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291de:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00291e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291e9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00291f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291f4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00291fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291fe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029209:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029210:	90                   	nop
c0029211:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0029212 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0029212:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029216:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0029219:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c002921a <Vm::_FPUState::_FPUState()>:
c002921a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002921e:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0029225:	90                   	nop
c0029226:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0029228 <PCI::~PCI()>:
c0029228:	83 ec 0c             	sub    esp,0xc
c002922b:	ba c4 cd 02 c0       	mov    edx,0xc002cdc4
c0029230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029234:	89 10                	mov    DWORD PTR [eax],edx
c0029236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002923a:	83 ec 0c             	sub    esp,0xc
c002923d:	50                   	push   eax
c002923e:	e8 cf a4 fe ff       	call   c0013712 <Bus::~Bus()>
c0029243:	83 c4 10             	add    esp,0x10
c0029246:	90                   	nop
c0029247:	83 c4 0c             	add    esp,0xc
c002924a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002924c <PCI::~PCI()>:
c002924c:	83 ec 0c             	sub    esp,0xc
c002924f:	83 ec 0c             	sub    esp,0xc
c0029252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029256:	e8 cd ff ff ff       	call   c0029228 <PCI::~PCI()>
c002925b:	83 c4 10             	add    esp,0x10
c002925e:	83 ec 08             	sub    esp,0x8
c0029261:	68 5c 01 00 00       	push   0x15c
c0029266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002926a:	e8 f4 96 fe ff       	call   c0012963 <operator delete(void*, unsigned long)>
c002926f:	83 c4 10             	add    esp,0x10
c0029272:	83 c4 0c             	add    esp,0xc
c0029275:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0029276 <IDE::~IDE()>:
c0029276:	83 ec 0c             	sub    esp,0xc
c0029279:	ba 78 ce 02 c0       	mov    edx,0xc002ce78
c002927e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029282:	89 10                	mov    DWORD PTR [eax],edx
c0029284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029288:	83 ec 0c             	sub    esp,0xc
c002928b:	50                   	push   eax
c002928c:	e8 c7 af fe ff       	call   c0014258 <HardDiskController::~HardDiskController()>
c0029291:	83 c4 10             	add    esp,0x10
c0029294:	90                   	nop
c0029295:	83 c4 0c             	add    esp,0xc
c0029298:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002929a <IDE::~IDE()>:
c002929a:	83 ec 0c             	sub    esp,0xc
c002929d:	83 ec 0c             	sub    esp,0xc
c00292a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292a4:	e8 cd ff ff ff       	call   c0029276 <IDE::~IDE()>
c00292a9:	83 c4 10             	add    esp,0x10
c00292ac:	83 ec 08             	sub    esp,0x8
c00292af:	68 70 02 00 00       	push   0x270
c00292b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292b8:	e8 a6 96 fe ff       	call   c0012963 <operator delete(void*, unsigned long)>
c00292bd:	83 c4 10             	add    esp,0x10
c00292c0:	83 c4 0c             	add    esp,0xc
c00292c3:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00292c4 <SATABus::~SATABus()>:
c00292c4:	83 ec 0c             	sub    esp,0xc
c00292c7:	ba f0 ce 02 c0       	mov    edx,0xc002cef0
c00292cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292d0:	89 10                	mov    DWORD PTR [eax],edx
c00292d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292d6:	83 ec 0c             	sub    esp,0xc
c00292d9:	50                   	push   eax
c00292da:	e8 79 af fe ff       	call   c0014258 <HardDiskController::~HardDiskController()>
c00292df:	83 c4 10             	add    esp,0x10
c00292e2:	90                   	nop
c00292e3:	83 c4 0c             	add    esp,0xc
c00292e6:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00292e8 <SATABus::~SATABus()>:
c00292e8:	83 ec 0c             	sub    esp,0xc
c00292eb:	83 ec 0c             	sub    esp,0xc
c00292ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292f2:	e8 cd ff ff ff       	call   c00292c4 <SATABus::~SATABus()>
c00292f7:	83 c4 10             	add    esp,0x10
c00292fa:	83 ec 08             	sub    esp,0x8
c00292fd:	68 64 01 00 00       	push   0x164
c0029302:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029306:	e8 58 96 fe ff       	call   c0012963 <operator delete(void*, unsigned long)>
c002930b:	83 c4 10             	add    esp,0x10
c002930e:	83 c4 0c             	add    esp,0xc
c0029311:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0029312 <ATA::~ATA()>:
c0029312:	83 ec 0c             	sub    esp,0xc
c0029315:	ba 68 cf 02 c0       	mov    edx,0xc002cf68
c002931a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002931e:	89 10                	mov    DWORD PTR [eax],edx
c0029320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029324:	83 ec 0c             	sub    esp,0xc
c0029327:	50                   	push   eax
c0029328:	e8 0d b0 fe ff       	call   c001433a <PhysicalDisk::~PhysicalDisk()>
c002932d:	83 c4 10             	add    esp,0x10
c0029330:	90                   	nop
c0029331:	83 c4 0c             	add    esp,0xc
c0029334:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0029336 <ATA::~ATA()>:
c0029336:	83 ec 0c             	sub    esp,0xc
c0029339:	83 ec 0c             	sub    esp,0xc
c002933c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029340:	e8 cd ff ff ff       	call   c0029312 <ATA::~ATA()>
c0029345:	83 c4 10             	add    esp,0x10
c0029348:	83 ec 08             	sub    esp,0x8
c002934b:	68 7c 01 00 00       	push   0x17c
c0029350:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029354:	e8 0a 96 fe ff       	call   c0012963 <operator delete(void*, unsigned long)>
c0029359:	83 c4 10             	add    esp,0x10
c002935c:	83 c4 0c             	add    esp,0xc
c002935f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029360 <ATAPI::~ATAPI()>:
c0029360:	83 ec 0c             	sub    esp,0xc
c0029363:	ba a0 cf 02 c0       	mov    edx,0xc002cfa0
c0029368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002936c:	89 10                	mov    DWORD PTR [eax],edx
c002936e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029372:	83 ec 0c             	sub    esp,0xc
c0029375:	50                   	push   eax
c0029376:	e8 bf af fe ff       	call   c001433a <PhysicalDisk::~PhysicalDisk()>
c002937b:	83 c4 10             	add    esp,0x10
c002937e:	90                   	nop
c002937f:	83 c4 0c             	add    esp,0xc
c0029382:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029384 <ATAPI::~ATAPI()>:
c0029384:	83 ec 0c             	sub    esp,0xc
c0029387:	83 ec 0c             	sub    esp,0xc
c002938a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002938e:	e8 cd ff ff ff       	call   c0029360 <ATAPI::~ATAPI()>
c0029393:	83 c4 10             	add    esp,0x10
c0029396:	83 ec 08             	sub    esp,0x8
c0029399:	68 80 01 00 00       	push   0x180
c002939e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293a2:	e8 bc 95 fe ff       	call   c0012963 <operator delete(void*, unsigned long)>
c00293a7:	83 c4 10             	add    esp,0x10
c00293aa:	83 c4 0c             	add    esp,0xc
c00293ad:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00293ae <SATA::~SATA()>:
c00293ae:	83 ec 0c             	sub    esp,0xc
c00293b1:	ba 54 d0 02 c0       	mov    edx,0xc002d054
c00293b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293ba:	89 10                	mov    DWORD PTR [eax],edx
c00293bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293c0:	83 ec 0c             	sub    esp,0xc
c00293c3:	50                   	push   eax
c00293c4:	e8 71 af fe ff       	call   c001433a <PhysicalDisk::~PhysicalDisk()>
c00293c9:	83 c4 10             	add    esp,0x10
c00293cc:	90                   	nop
c00293cd:	83 c4 0c             	add    esp,0xc
c00293d0:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00293d2 <SATA::~SATA()>:
c00293d2:	83 ec 0c             	sub    esp,0xc
c00293d5:	83 ec 0c             	sub    esp,0xc
c00293d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293dc:	e8 cd ff ff ff       	call   c00293ae <SATA::~SATA()>
c00293e1:	83 c4 10             	add    esp,0x10
c00293e4:	83 ec 08             	sub    esp,0x8
c00293e7:	68 7c 01 00 00       	push   0x17c
c00293ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293f0:	e8 6e 95 fe ff       	call   c0012963 <operator delete(void*, unsigned long)>
c00293f5:	83 c4 10             	add    esp,0x10
c00293f8:	83 c4 0c             	add    esp,0xc
c00293fb:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00293fc <SATAPI::~SATAPI()>:
c00293fc:	83 ec 0c             	sub    esp,0xc
c00293ff:	ba 30 d1 02 c0       	mov    edx,0xc002d130
c0029404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029408:	89 10                	mov    DWORD PTR [eax],edx
c002940a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002940e:	83 ec 0c             	sub    esp,0xc
c0029411:	50                   	push   eax
c0029412:	e8 23 af fe ff       	call   c001433a <PhysicalDisk::~PhysicalDisk()>
c0029417:	83 c4 10             	add    esp,0x10
c002941a:	90                   	nop
c002941b:	83 c4 0c             	add    esp,0xc
c002941e:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029420 <SATAPI::~SATAPI()>:
c0029420:	83 ec 0c             	sub    esp,0xc
c0029423:	83 ec 0c             	sub    esp,0xc
c0029426:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002942a:	e8 cd ff ff ff       	call   c00293fc <SATAPI::~SATAPI()>
c002942f:	83 c4 10             	add    esp,0x10
c0029432:	83 ec 08             	sub    esp,0x8
c0029435:	68 80 01 00 00       	push   0x180
c002943a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002943e:	e8 20 95 fe ff       	call   c0012963 <operator delete(void*, unsigned long)>
c0029443:	83 c4 10             	add    esp,0x10
c0029446:	83 c4 0c             	add    esp,0xc
c0029449:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c002944a <AVX::~AVX()>:
c002944a:	83 ec 0c             	sub    esp,0xc
c002944d:	ba 70 d1 02 c0       	mov    edx,0xc002d170
c0029452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029456:	89 10                	mov    DWORD PTR [eax],edx
c0029458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002945c:	83 ec 0c             	sub    esp,0xc
c002945f:	50                   	push   eax
c0029460:	e8 59 af fe ff       	call   c00143be <FPU::~FPU()>
c0029465:	83 c4 10             	add    esp,0x10
c0029468:	90                   	nop
c0029469:	83 c4 0c             	add    esp,0xc
c002946c:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c002946e <AVX::~AVX()>:
c002946e:	83 ec 0c             	sub    esp,0xc
c0029471:	83 ec 0c             	sub    esp,0xc
c0029474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029478:	e8 cd ff ff ff       	call   c002944a <AVX::~AVX()>
c002947d:	83 c4 10             	add    esp,0x10
c0029480:	83 ec 08             	sub    esp,0x8
c0029483:	68 58 01 00 00       	push   0x158
c0029488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002948c:	e8 d2 94 fe ff       	call   c0012963 <operator delete(void*, unsigned long)>
c0029491:	83 c4 10             	add    esp,0x10
c0029494:	83 c4 0c             	add    esp,0xc
c0029497:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0029498 <MMX::~MMX()>:
c0029498:	83 ec 0c             	sub    esp,0xc
c002949b:	ba b0 d1 02 c0       	mov    edx,0xc002d1b0
c00294a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294a4:	89 10                	mov    DWORD PTR [eax],edx
c00294a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294aa:	83 ec 0c             	sub    esp,0xc
c00294ad:	50                   	push   eax
c00294ae:	e8 0b af fe ff       	call   c00143be <FPU::~FPU()>
c00294b3:	83 c4 10             	add    esp,0x10
c00294b6:	90                   	nop
c00294b7:	83 c4 0c             	add    esp,0xc
c00294ba:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c00294bc <MMX::~MMX()>:
c00294bc:	83 ec 0c             	sub    esp,0xc
c00294bf:	83 ec 0c             	sub    esp,0xc
c00294c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294c6:	e8 cd ff ff ff       	call   c0029498 <MMX::~MMX()>
c00294cb:	83 c4 10             	add    esp,0x10
c00294ce:	83 ec 08             	sub    esp,0x8
c00294d1:	68 58 01 00 00       	push   0x158
c00294d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294da:	e8 84 94 fe ff       	call   c0012963 <operator delete(void*, unsigned long)>
c00294df:	83 c4 10             	add    esp,0x10
c00294e2:	83 c4 0c             	add    esp,0xc
c00294e5:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00294e6 <SSE::~SSE()>:
c00294e6:	83 ec 0c             	sub    esp,0xc
c00294e9:	ba f0 d1 02 c0       	mov    edx,0xc002d1f0
c00294ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294f2:	89 10                	mov    DWORD PTR [eax],edx
c00294f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294f8:	83 ec 0c             	sub    esp,0xc
c00294fb:	50                   	push   eax
c00294fc:	e8 bd ae fe ff       	call   c00143be <FPU::~FPU()>
c0029501:	83 c4 10             	add    esp,0x10
c0029504:	90                   	nop
c0029505:	83 c4 0c             	add    esp,0xc
c0029508:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002950a <SSE::~SSE()>:
c002950a:	83 ec 0c             	sub    esp,0xc
c002950d:	83 ec 0c             	sub    esp,0xc
c0029510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029514:	e8 cd ff ff ff       	call   c00294e6 <SSE::~SSE()>
c0029519:	83 c4 10             	add    esp,0x10
c002951c:	83 ec 08             	sub    esp,0x8
c002951f:	68 58 01 00 00       	push   0x158
c0029524:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029528:	e8 36 94 fe ff       	call   c0012963 <operator delete(void*, unsigned long)>
c002952d:	83 c4 10             	add    esp,0x10
c0029530:	83 c4 0c             	add    esp,0xc
c0029533:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029534 <x87::~x87()>:
c0029534:	83 ec 0c             	sub    esp,0xc
c0029537:	ba 30 d2 02 c0       	mov    edx,0xc002d230
c002953c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029540:	89 10                	mov    DWORD PTR [eax],edx
c0029542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029546:	83 ec 0c             	sub    esp,0xc
c0029549:	50                   	push   eax
c002954a:	e8 6f ae fe ff       	call   c00143be <FPU::~FPU()>
c002954f:	83 c4 10             	add    esp,0x10
c0029552:	90                   	nop
c0029553:	83 c4 0c             	add    esp,0xc
c0029556:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0029558 <x87::~x87()>:
c0029558:	83 ec 0c             	sub    esp,0xc
c002955b:	83 ec 0c             	sub    esp,0xc
c002955e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029562:	e8 cd ff ff ff       	call   c0029534 <x87::~x87()>
c0029567:	83 c4 10             	add    esp,0x10
c002956a:	83 ec 08             	sub    esp,0x8
c002956d:	68 58 01 00 00       	push   0x158
c0029572:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029576:	e8 e8 93 fe ff       	call   c0012963 <operator delete(void*, unsigned long)>
c002957b:	83 c4 10             	add    esp,0x10
c002957e:	83 c4 0c             	add    esp,0xc
c0029581:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029582 <IOAPIC::~IOAPIC()>:
c0029582:	83 ec 0c             	sub    esp,0xc
c0029585:	ba 88 d3 02 c0       	mov    edx,0xc002d388
c002958a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002958e:	89 10                	mov    DWORD PTR [eax],edx
c0029590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029594:	83 ec 0c             	sub    esp,0xc
c0029597:	50                   	push   eax
c0029598:	e8 a5 a7 fe ff       	call   c0013d42 <Device::~Device()>
c002959d:	83 c4 10             	add    esp,0x10
c00295a0:	90                   	nop
c00295a1:	83 c4 0c             	add    esp,0xc
c00295a4:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00295a6 <IOAPIC::~IOAPIC()>:
c00295a6:	83 ec 0c             	sub    esp,0xc
c00295a9:	83 ec 0c             	sub    esp,0xc
c00295ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295b0:	e8 cd ff ff ff       	call   c0029582 <IOAPIC::~IOAPIC()>
c00295b5:	83 c4 10             	add    esp,0x10
c00295b8:	83 ec 08             	sub    esp,0x8
c00295bb:	68 68 01 00 00       	push   0x168
c00295c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295c4:	e8 9a 93 fe ff       	call   c0012963 <operator delete(void*, unsigned long)>
c00295c9:	83 c4 10             	add    esp,0x10
c00295cc:	83 c4 0c             	add    esp,0xc
c00295cf:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00295d0 <APIC::~APIC()>:
c00295d0:	83 ec 0c             	sub    esp,0xc
c00295d3:	ba 40 d3 02 c0       	mov    edx,0xc002d340
c00295d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295dc:	89 10                	mov    DWORD PTR [eax],edx
c00295de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295e2:	83 ec 0c             	sub    esp,0xc
c00295e5:	50                   	push   eax
c00295e6:	e8 9d b2 fe ff       	call   c0014888 <InterruptController::~InterruptController()>
c00295eb:	83 c4 10             	add    esp,0x10
c00295ee:	90                   	nop
c00295ef:	83 c4 0c             	add    esp,0xc
c00295f2:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00295f4 <APIC::~APIC()>:
c00295f4:	83 ec 0c             	sub    esp,0xc
c00295f7:	83 ec 0c             	sub    esp,0xc
c00295fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295fe:	e8 cd ff ff ff       	call   c00295d0 <APIC::~APIC()>
c0029603:	83 c4 10             	add    esp,0x10
c0029606:	83 ec 08             	sub    esp,0x8
c0029609:	68 58 21 00 00       	push   0x2158
c002960e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029612:	e8 4c 93 fe ff       	call   c0012963 <operator delete(void*, unsigned long)>
c0029617:	83 c4 10             	add    esp,0x10
c002961a:	83 c4 0c             	add    esp,0xc
c002961d:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c002961e <PIC::~PIC()>:
c002961e:	83 ec 0c             	sub    esp,0xc
c0029621:	ba d8 d3 02 c0       	mov    edx,0xc002d3d8
c0029626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002962a:	89 10                	mov    DWORD PTR [eax],edx
c002962c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029630:	83 ec 0c             	sub    esp,0xc
c0029633:	50                   	push   eax
c0029634:	e8 4f b2 fe ff       	call   c0014888 <InterruptController::~InterruptController()>
c0029639:	83 c4 10             	add    esp,0x10
c002963c:	90                   	nop
c002963d:	83 c4 0c             	add    esp,0xc
c0029640:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029642 <PIC::~PIC()>:
c0029642:	83 ec 0c             	sub    esp,0xc
c0029645:	83 ec 0c             	sub    esp,0xc
c0029648:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002964c:	e8 cd ff ff ff       	call   c002961e <PIC::~PIC()>
c0029651:	83 c4 10             	add    esp,0x10
c0029654:	83 ec 08             	sub    esp,0x8
c0029657:	68 58 21 00 00       	push   0x2158
c002965c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029660:	e8 fe 92 fe ff       	call   c0012963 <operator delete(void*, unsigned long)>
c0029665:	83 c4 10             	add    esp,0x10
c0029668:	83 c4 0c             	add    esp,0xc
c002966b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002966c <APICTimer::~APICTimer()>:
c002966c:	83 ec 0c             	sub    esp,0xc
c002966f:	ba 2c d4 02 c0       	mov    edx,0xc002d42c
c0029674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029678:	89 10                	mov    DWORD PTR [eax],edx
c002967a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002967e:	83 ec 0c             	sub    esp,0xc
c0029681:	50                   	push   eax
c0029682:	e8 5f d2 fe ff       	call   c00168e6 <Timer::~Timer()>
c0029687:	83 c4 10             	add    esp,0x10
c002968a:	90                   	nop
c002968b:	83 c4 0c             	add    esp,0xc
c002968e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029690 <APICTimer::~APICTimer()>:
c0029690:	83 ec 0c             	sub    esp,0xc
c0029693:	83 ec 0c             	sub    esp,0xc
c0029696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002969a:	e8 cd ff ff ff       	call   c002966c <APICTimer::~APICTimer()>
c002969f:	83 c4 10             	add    esp,0x10
c00296a2:	83 ec 08             	sub    esp,0x8
c00296a5:	68 60 01 00 00       	push   0x160
c00296aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296ae:	e8 b0 92 fe ff       	call   c0012963 <operator delete(void*, unsigned long)>
c00296b3:	83 c4 10             	add    esp,0x10
c00296b6:	83 c4 0c             	add    esp,0xc
c00296b9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00296ba <PIT::~PIT()>:
c00296ba:	83 ec 0c             	sub    esp,0xc
c00296bd:	ba 7c d4 02 c0       	mov    edx,0xc002d47c
c00296c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296c6:	89 10                	mov    DWORD PTR [eax],edx
c00296c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296cc:	83 ec 0c             	sub    esp,0xc
c00296cf:	50                   	push   eax
c00296d0:	e8 11 d2 fe ff       	call   c00168e6 <Timer::~Timer()>
c00296d5:	83 c4 10             	add    esp,0x10
c00296d8:	90                   	nop
c00296d9:	83 c4 0c             	add    esp,0xc
c00296dc:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00296de <PIT::~PIT()>:
c00296de:	83 ec 0c             	sub    esp,0xc
c00296e1:	83 ec 0c             	sub    esp,0xc
c00296e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296e8:	e8 cd ff ff ff       	call   c00296ba <PIT::~PIT()>
c00296ed:	83 c4 10             	add    esp,0x10
c00296f0:	83 ec 08             	sub    esp,0x8
c00296f3:	68 5c 01 00 00       	push   0x15c
c00296f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296fc:	e8 62 92 fe ff       	call   c0012963 <operator delete(void*, unsigned long)>
c0029701:	83 c4 10             	add    esp,0x10
c0029704:	83 c4 0c             	add    esp,0xc
c0029707:	c3                   	ret    
