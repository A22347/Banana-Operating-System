
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 93 fc 00 00       	call   c000fcb3 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 e3 8e 02 00       	call   c0028f08 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 9e 9b 02 c0       	mov    ebx,0xc0029b9e
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb ac 9b 02 c0    	cmp    ebx,0xc0029bac
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 78 e4 02 c0       	mov    eax,0xc002e478
c0000049:	3d 78 e4 02 c0       	cmp    eax,0xc002e478
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 78 e4 02 c0       	push   0xc002e478
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 78 e4 02 c0       	mov    eax,0xc002e478
c0000075:	2d 78 e4 02 c0       	sub    eax,0xc002e478
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 78 e4 02 c0       	push   0xc002e478
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d a8 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002eaa8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb b4 9b 02 c0       	mov    ebx,0xc0029bb4
c00000bb:	81 eb b0 9b 02 c0    	sub    ebx,0xc0029bb0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be b0 9b 02 c0       	mov    esi,0xc0029bb0
c00000ca:	a1 ac ea 02 c0       	mov    eax,ds:0xc002eaac
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ac ea 02 c0       	mov    ds:0xc002eaac,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ac ea 02 c0       	mov    eax,ds:0xc002eaac
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 78 e4 02 c0       	push   0xc002e478
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 a8 ea 02 c0 01 	mov    BYTE PTR ds:0xc002eaa8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 b0 ea 02 c0       	push   0xc002eab0
c000012c:	68 78 e4 02 c0       	push   0xc002e478
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 2f da 01 00       	call   c001ddd2 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 f0 28 01 00       	call   c0012cab <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 0d da 01 00       	call   c001ddd2 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 b5 de 01 00       	call   c001e299 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 13 e5 01 00       	call   c001e900 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 f0 ee 02 c0 	lgdtd  ds:0xc002eef0
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	e8 d8 45 01 00       	call   c0014bb9 <int_handler>
c00005e1:	81 c4 04 00 00 00    	add    esp,0x4
c00005e7:	0f a9                	pop    gs
c00005e9:	0f a1                	pop    fs
c00005eb:	07                   	pop    es
c00005ec:	1f                   	pop    ds
c00005ed:	61                   	popa   
c00005ee:	81 c4 08 00 00 00    	add    esp,0x8
c00005f4:	cf                   	iret   

c00005f5 <irq16>:
c00005f5:	fa                   	cli    
c00005f6:	6a 00                	push   0x0
c00005f8:	6a 30                	push   0x30
c00005fa:	e9 c5 ff ff ff       	jmp    c00005c4 <int_common_stub>

c00005ff <irq17>:
c00005ff:	fa                   	cli    
c0000600:	6a 00                	push   0x0
c0000602:	6a 31                	push   0x31
c0000604:	e9 bb ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000609 <irq18>:
c0000609:	fa                   	cli    
c000060a:	6a 00                	push   0x0
c000060c:	6a 32                	push   0x32
c000060e:	e9 b1 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000613 <irq19>:
c0000613:	fa                   	cli    
c0000614:	6a 00                	push   0x0
c0000616:	6a 33                	push   0x33
c0000618:	e9 a7 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061d <irq20>:
c000061d:	fa                   	cli    
c000061e:	6a 00                	push   0x0
c0000620:	6a 34                	push   0x34
c0000622:	e9 9d ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000627 <irq21>:
c0000627:	fa                   	cli    
c0000628:	6a 00                	push   0x0
c000062a:	6a 35                	push   0x35
c000062c:	e9 93 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000631 <irq22>:
c0000631:	fa                   	cli    
c0000632:	6a 00                	push   0x0
c0000634:	6a 36                	push   0x36
c0000636:	e9 89 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063b <irq23>:
c000063b:	fa                   	cli    
c000063c:	6a 00                	push   0x0
c000063e:	6a 37                	push   0x37
c0000640:	e9 7f ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000645 <hexStrToInt>:
c0000645:	56                   	push   esi
c0000646:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000064a:	31 d2                	xor    edx,edx

c000064c <hexStrToInt.looping>:
c000064c:	ac                   	lods   al,BYTE PTR ds:[esi]
c000064d:	84 c0                	test   al,al
c000064f:	74 0d                	je     c000065e <hexStrToInt.end>
c0000651:	d4 40                	aam    0x40
c0000653:	d5 39                	aad    0x39
c0000655:	2c 30                	sub    al,0x30
c0000657:	c1 e2 04             	shl    edx,0x4
c000065a:	08 c2                	or     dl,al
c000065c:	eb ee                	jmp    c000064c <hexStrToInt.looping>

c000065e <hexStrToInt.end>:
c000065e:	89 d0                	mov    eax,edx
c0000660:	5e                   	pop    esi
c0000661:	c3                   	ret    

c0000662 <memcpy>:
c0000662:	e8 39 df 00 00       	call   c000e5a0 <__not_memcpy>
c0000667:	90                   	nop

c0000668 <memcmp>:
c0000668:	56                   	push   esi
c0000669:	53                   	push   ebx
c000066a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000066e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000672:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000676:	85 f6                	test   esi,esi
c0000678:	74 1d                	je     c0000697 <memcmp+0x2f>
c000067a:	8a 08                	mov    cl,BYTE PTR [eax]
c000067c:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000067f:	38 cb                	cmp    bl,cl
c0000681:	75 19                	jne    c000069c <memcmp+0x34>
c0000683:	01 c6                	add    esi,eax
c0000685:	eb 0a                	jmp    c0000691 <memcmp+0x29>
c0000687:	90                   	nop
c0000688:	8a 08                	mov    cl,BYTE PTR [eax]
c000068a:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000068d:	38 d9                	cmp    cl,bl
c000068f:	75 0b                	jne    c000069c <memcmp+0x34>
c0000691:	40                   	inc    eax
c0000692:	42                   	inc    edx
c0000693:	39 f0                	cmp    eax,esi
c0000695:	75 f1                	jne    c0000688 <memcmp+0x20>
c0000697:	31 c0                	xor    eax,eax
c0000699:	5b                   	pop    ebx
c000069a:	5e                   	pop    esi
c000069b:	c3                   	ret    
c000069c:	0f b6 c1             	movzx  eax,cl
c000069f:	29 d8                	sub    eax,ebx
c00006a1:	5b                   	pop    ebx
c00006a2:	5e                   	pop    esi
c00006a3:	c3                   	ret    

c00006a4 <memmove>:
c00006a4:	55                   	push   ebp
c00006a5:	57                   	push   edi
c00006a6:	56                   	push   esi
c00006a7:	53                   	push   ebx
c00006a8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00006ac:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00006b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00006b4:	39 dd                	cmp    ebp,ebx
c00006b6:	0f 83 80 00 00 00    	jae    c000073c <memmove+0x98>
c00006bc:	85 d2                	test   edx,edx
c00006be:	74 74                	je     c0000734 <memmove+0x90>
c00006c0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006c3:	8d 75 04             	lea    esi,[ebp+0x4]
c00006c6:	39 cd                	cmp    ebp,ecx
c00006c8:	0f 93 c1             	setae  cl
c00006cb:	39 f3                	cmp    ebx,esi
c00006cd:	0f 93 c0             	setae  al
c00006d0:	89 c6                	mov    esi,eax
c00006d2:	09 ce                	or     esi,ecx
c00006d4:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006d7:	89 f0                	mov    eax,esi
c00006d9:	83 f9 0c             	cmp    ecx,0xc
c00006dc:	0f 97 c1             	seta   cl
c00006df:	84 c8                	test   al,cl
c00006e1:	74 75                	je     c0000758 <memmove+0xb4>
c00006e3:	89 e9                	mov    ecx,ebp
c00006e5:	09 d9                	or     ecx,ebx
c00006e7:	83 e1 03             	and    ecx,0x3
c00006ea:	75 6c                	jne    c0000758 <memmove+0xb4>
c00006ec:	89 d7                	mov    edi,edx
c00006ee:	89 d9                	mov    ecx,ebx
c00006f0:	83 e7 fc             	and    edi,0xfffffffc
c00006f3:	89 ee                	mov    esi,ebp
c00006f5:	01 df                	add    edi,ebx
c00006f7:	90                   	nop
c00006f8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006fa:	83 c6 04             	add    esi,0x4
c00006fd:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000700:	83 c1 04             	add    ecx,0x4
c0000703:	39 f9                	cmp    ecx,edi
c0000705:	75 f1                	jne    c00006f8 <memmove+0x54>
c0000707:	89 d1                	mov    ecx,edx
c0000709:	89 d7                	mov    edi,edx
c000070b:	83 e1 fc             	and    ecx,0xfffffffc
c000070e:	29 cf                	sub    edi,ecx
c0000710:	01 cb                	add    ebx,ecx
c0000712:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000716:	39 ca                	cmp    edx,ecx
c0000718:	74 1a                	je     c0000734 <memmove+0x90>
c000071a:	8a 03                	mov    al,BYTE PTR [ebx]
c000071c:	83 ff 01             	cmp    edi,0x1
c000071f:	88 06                	mov    BYTE PTR [esi],al
c0000721:	74 11                	je     c0000734 <memmove+0x90>
c0000723:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000726:	83 ff 02             	cmp    edi,0x2
c0000729:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c000072c:	74 06                	je     c0000734 <memmove+0x90>
c000072e:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000731:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000734:	5b                   	pop    ebx
c0000735:	89 e8                	mov    eax,ebp
c0000737:	5e                   	pop    esi
c0000738:	5f                   	pop    edi
c0000739:	5d                   	pop    ebp
c000073a:	c3                   	ret    
c000073b:	90                   	nop
c000073c:	76 f6                	jbe    c0000734 <memmove+0x90>
c000073e:	85 d2                	test   edx,edx
c0000740:	74 f2                	je     c0000734 <memmove+0x90>
c0000742:	4b                   	dec    ebx
c0000743:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000746:	66 90                	xchg   ax,ax
c0000748:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000074b:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000074e:	4a                   	dec    edx
c000074f:	75 f7                	jne    c0000748 <memmove+0xa4>
c0000751:	5b                   	pop    ebx
c0000752:	89 e8                	mov    eax,ebp
c0000754:	5e                   	pop    esi
c0000755:	5f                   	pop    edi
c0000756:	5d                   	pop    ebp
c0000757:	c3                   	ret    
c0000758:	01 ea                	add    edx,ebp
c000075a:	89 e9                	mov    ecx,ebp
c000075c:	8a 03                	mov    al,BYTE PTR [ebx]
c000075e:	41                   	inc    ecx
c000075f:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000762:	43                   	inc    ebx
c0000763:	39 d1                	cmp    ecx,edx
c0000765:	75 f5                	jne    c000075c <memmove+0xb8>
c0000767:	eb cb                	jmp    c0000734 <memmove+0x90>
c0000769:	8d 76 00             	lea    esi,[esi+0x0]

c000076c <memset>:
c000076c:	57                   	push   edi
c000076d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000771:	85 c9                	test   ecx,ecx
c0000773:	74 0b                	je     c0000780 <memset+0x14>
c0000775:	fc                   	cld    
c0000776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000077a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000077e:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000784:	5f                   	pop    edi
c0000785:	c3                   	ret    
c0000786:	66 90                	xchg   ax,ax

c0000788 <strlen>:
c0000788:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000078c:	31 c0                	xor    eax,eax
c000078e:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000791:	74 09                	je     c000079c <strlen+0x14>
c0000793:	90                   	nop
c0000794:	40                   	inc    eax
c0000795:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000799:	75 f9                	jne    c0000794 <strlen+0xc>
c000079b:	c3                   	ret    
c000079c:	c3                   	ret    
c000079d:	8d 76 00             	lea    esi,[esi+0x0]

c00007a0 <strpbrk>:
c00007a0:	57                   	push   edi
c00007a1:	56                   	push   esi
c00007a2:	53                   	push   ebx
c00007a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ab:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007ad:	84 db                	test   bl,bl
c00007af:	74 21                	je     c00007d2 <strpbrk+0x32>
c00007b1:	8a 07                	mov    al,BYTE PTR [edi]
c00007b3:	84 c0                	test   al,al
c00007b5:	74 14                	je     c00007cb <strpbrk+0x2b>
c00007b7:	38 d8                	cmp    al,bl
c00007b9:	74 19                	je     c00007d4 <strpbrk+0x34>
c00007bb:	89 fa                	mov    edx,edi
c00007bd:	eb 05                	jmp    c00007c4 <strpbrk+0x24>
c00007bf:	90                   	nop
c00007c0:	38 d9                	cmp    cl,bl
c00007c2:	74 10                	je     c00007d4 <strpbrk+0x34>
c00007c4:	42                   	inc    edx
c00007c5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007c7:	84 c9                	test   cl,cl
c00007c9:	75 f5                	jne    c00007c0 <strpbrk+0x20>
c00007cb:	46                   	inc    esi
c00007cc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007ce:	84 db                	test   bl,bl
c00007d0:	75 e1                	jne    c00007b3 <strpbrk+0x13>
c00007d2:	31 f6                	xor    esi,esi
c00007d4:	89 f0                	mov    eax,esi
c00007d6:	5b                   	pop    ebx
c00007d7:	5e                   	pop    esi
c00007d8:	5f                   	pop    edi
c00007d9:	c3                   	ret    
c00007da:	66 90                	xchg   ax,ax

c00007dc <strtok>:
c00007dc:	56                   	push   esi
c00007dd:	53                   	push   ebx
c00007de:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007e2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007e6:	85 db                	test   ebx,ebx
c00007e8:	75 07                	jne    c00007f1 <strtok+0x15>
c00007ea:	eb 2c                	jmp    c0000818 <strtok+0x3c>
c00007ec:	43                   	inc    ebx
c00007ed:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007f1:	56                   	push   esi
c00007f2:	53                   	push   ebx
c00007f3:	e8 a8 ff ff ff       	call   c00007a0 <strpbrk>
c00007f8:	5a                   	pop    edx
c00007f9:	a3 c8 ea 02 c0       	mov    ds:0xc002eac8,eax
c00007fe:	59                   	pop    ecx
c00007ff:	39 d8                	cmp    eax,ebx
c0000801:	74 e9                	je     c00007ec <strtok+0x10>
c0000803:	85 c0                	test   eax,eax
c0000805:	74 1b                	je     c0000822 <strtok+0x46>
c0000807:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000080a:	8d 50 01             	lea    edx,[eax+0x1]
c000080d:	89 d8                	mov    eax,ebx
c000080f:	89 15 c8 ea 02 c0    	mov    DWORD PTR ds:0xc002eac8,edx
c0000815:	5b                   	pop    ebx
c0000816:	5e                   	pop    esi
c0000817:	c3                   	ret    
c0000818:	8b 1d c8 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002eac8
c000081e:	85 db                	test   ebx,ebx
c0000820:	75 cf                	jne    c00007f1 <strtok+0x15>
c0000822:	31 c0                	xor    eax,eax
c0000824:	5b                   	pop    ebx
c0000825:	5e                   	pop    esi
c0000826:	c3                   	ret    
c0000827:	90                   	nop

c0000828 <strcpy>:
c0000828:	53                   	push   ebx
c0000829:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000082d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000831:	89 c3                	mov    ebx,eax
c0000833:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000835:	84 d2                	test   dl,dl
c0000837:	74 0d                	je     c0000846 <strcpy+0x1e>
c0000839:	8d 76 00             	lea    esi,[esi+0x0]
c000083c:	88 13                	mov    BYTE PTR [ebx],dl
c000083e:	41                   	inc    ecx
c000083f:	43                   	inc    ebx
c0000840:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000842:	84 d2                	test   dl,dl
c0000844:	75 f6                	jne    c000083c <strcpy+0x14>
c0000846:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000849:	5b                   	pop    ebx
c000084a:	c3                   	ret    
c000084b:	90                   	nop

c000084c <strncpy>:
c000084c:	55                   	push   ebp
c000084d:	57                   	push   edi
c000084e:	56                   	push   esi
c000084f:	53                   	push   ebx
c0000850:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000854:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000858:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000085c:	85 c0                	test   eax,eax
c000085e:	74 39                	je     c0000899 <strncpy+0x4d>
c0000860:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000862:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000865:	8d 55 01             	lea    edx,[ebp+0x1]
c0000868:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000086b:	84 db                	test   bl,bl
c000086d:	74 31                	je     c00008a0 <strncpy+0x54>
c000086f:	85 c9                	test   ecx,ecx
c0000871:	74 26                	je     c0000899 <strncpy+0x4d>
c0000873:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000876:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000879:	8d 55 02             	lea    edx,[ebp+0x2]
c000087c:	8d 46 02             	lea    eax,[esi+0x2]
c000087f:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000882:	84 db                	test   bl,bl
c0000884:	75 0f                	jne    c0000895 <strncpy+0x49>
c0000886:	eb 18                	jmp    c00008a0 <strncpy+0x54>
c0000888:	40                   	inc    eax
c0000889:	42                   	inc    edx
c000088a:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c000088d:	49                   	dec    ecx
c000088e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000891:	84 db                	test   bl,bl
c0000893:	74 0b                	je     c00008a0 <strncpy+0x54>
c0000895:	85 c9                	test   ecx,ecx
c0000897:	75 ef                	jne    c0000888 <strncpy+0x3c>
c0000899:	5b                   	pop    ebx
c000089a:	89 e8                	mov    eax,ebp
c000089c:	5e                   	pop    esi
c000089d:	5f                   	pop    edi
c000089e:	5d                   	pop    ebp
c000089f:	c3                   	ret    
c00008a0:	85 c9                	test   ecx,ecx
c00008a2:	74 f5                	je     c0000899 <strncpy+0x4d>
c00008a4:	fc                   	cld    
c00008a5:	31 c0                	xor    eax,eax
c00008a7:	89 d7                	mov    edi,edx
c00008a9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008ab:	89 e8                	mov    eax,ebp
c00008ad:	5b                   	pop    ebx
c00008ae:	5e                   	pop    esi
c00008af:	5f                   	pop    edi
c00008b0:	5d                   	pop    ebp
c00008b1:	c3                   	ret    
c00008b2:	66 90                	xchg   ax,ax

c00008b4 <strcmp>:
c00008b4:	56                   	push   esi
c00008b5:	53                   	push   ebx
c00008b6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008be:	8a 16                	mov    dl,BYTE PTR [esi]
c00008c0:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008c3:	38 d1                	cmp    cl,dl
c00008c5:	75 1d                	jne    c00008e4 <strcmp+0x30>
c00008c7:	84 c9                	test   cl,cl
c00008c9:	74 21                	je     c00008ec <strcmp+0x38>
c00008cb:	b8 01 00 00 00       	mov    eax,0x1
c00008d0:	eb 07                	jmp    c00008d9 <strcmp+0x25>
c00008d2:	66 90                	xchg   ax,ax
c00008d4:	40                   	inc    eax
c00008d5:	84 d2                	test   dl,dl
c00008d7:	74 13                	je     c00008ec <strcmp+0x38>
c00008d9:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008dc:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008e0:	38 ca                	cmp    dl,cl
c00008e2:	74 f0                	je     c00008d4 <strcmp+0x20>
c00008e4:	0f b6 c2             	movzx  eax,dl
c00008e7:	5b                   	pop    ebx
c00008e8:	29 c8                	sub    eax,ecx
c00008ea:	5e                   	pop    esi
c00008eb:	c3                   	ret    
c00008ec:	31 c0                	xor    eax,eax
c00008ee:	5b                   	pop    ebx
c00008ef:	5e                   	pop    esi
c00008f0:	c3                   	ret    
c00008f1:	8d 76 00             	lea    esi,[esi+0x0]

c00008f4 <strchr>:
c00008f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f8:	8a 10                	mov    dl,BYTE PTR [eax]
c00008fa:	84 d2                	test   dl,dl
c00008fc:	74 15                	je     c0000913 <strchr+0x1f>
c00008fe:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0000902:	38 ca                	cmp    dl,cl
c0000904:	75 06                	jne    c000090c <strchr+0x18>
c0000906:	eb 0e                	jmp    c0000916 <strchr+0x22>
c0000908:	38 ca                	cmp    dl,cl
c000090a:	74 09                	je     c0000915 <strchr+0x21>
c000090c:	40                   	inc    eax
c000090d:	8a 10                	mov    dl,BYTE PTR [eax]
c000090f:	84 d2                	test   dl,dl
c0000911:	75 f5                	jne    c0000908 <strchr+0x14>
c0000913:	31 c0                	xor    eax,eax
c0000915:	c3                   	ret    
c0000916:	c3                   	ret    
c0000917:	90                   	nop

c0000918 <strncmp>:
c0000918:	57                   	push   edi
c0000919:	56                   	push   esi
c000091a:	53                   	push   ebx
c000091b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000091f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000923:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000927:	85 ff                	test   edi,edi
c0000929:	74 28                	je     c0000953 <strncmp+0x3b>
c000092b:	8a 16                	mov    dl,BYTE PTR [esi]
c000092d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000930:	38 d1                	cmp    cl,dl
c0000932:	75 28                	jne    c000095c <strncmp+0x44>
c0000934:	8d 46 01             	lea    eax,[esi+0x1]
c0000937:	84 c9                	test   cl,cl
c0000939:	74 18                	je     c0000953 <strncmp+0x3b>
c000093b:	01 fe                	add    esi,edi
c000093d:	eb 0f                	jmp    c000094e <strncmp+0x36>
c000093f:	90                   	nop
c0000940:	8a 10                	mov    dl,BYTE PTR [eax]
c0000942:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000945:	38 ca                	cmp    dl,cl
c0000947:	75 13                	jne    c000095c <strncmp+0x44>
c0000949:	40                   	inc    eax
c000094a:	84 d2                	test   dl,dl
c000094c:	74 05                	je     c0000953 <strncmp+0x3b>
c000094e:	43                   	inc    ebx
c000094f:	39 c6                	cmp    esi,eax
c0000951:	75 ed                	jne    c0000940 <strncmp+0x28>
c0000953:	5b                   	pop    ebx
c0000954:	31 c0                	xor    eax,eax
c0000956:	5e                   	pop    esi
c0000957:	5f                   	pop    edi
c0000958:	c3                   	ret    
c0000959:	8d 76 00             	lea    esi,[esi+0x0]
c000095c:	5b                   	pop    ebx
c000095d:	0f b6 c2             	movzx  eax,dl
c0000960:	5e                   	pop    esi
c0000961:	29 c8                	sub    eax,ecx
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]

c0000968 <strcat>:
c0000968:	56                   	push   esi
c0000969:	53                   	push   ebx
c000096a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000096e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000972:	89 c3                	mov    ebx,eax
c0000974:	eb 04                	jmp    c000097a <strcat+0x12>
c0000976:	66 90                	xchg   ax,ax
c0000978:	89 d3                	mov    ebx,edx
c000097a:	8d 53 01             	lea    edx,[ebx+0x1]
c000097d:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000981:	75 f5                	jne    c0000978 <strcat+0x10>
c0000983:	31 d2                	xor    edx,edx
c0000985:	8d 76 00             	lea    esi,[esi+0x0]
c0000988:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000098b:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000098e:	42                   	inc    edx
c000098f:	84 c9                	test   cl,cl
c0000991:	75 f5                	jne    c0000988 <strcat+0x20>
c0000993:	5b                   	pop    ebx
c0000994:	5e                   	pop    esi
c0000995:	c3                   	ret    
c0000996:	66 90                	xchg   ax,ax

c0000998 <strncat>:
c0000998:	56                   	push   esi
c0000999:	53                   	push   ebx
c000099a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000099e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009a6:	85 f6                	test   esi,esi
c00009a8:	74 1e                	je     c00009c8 <strncat+0x30>
c00009aa:	89 c2                	mov    edx,eax
c00009ac:	42                   	inc    edx
c00009ad:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009b1:	75 f9                	jne    c00009ac <strncat+0x14>
c00009b3:	01 ce                	add    esi,ecx
c00009b5:	eb 06                	jmp    c00009bd <strncat+0x25>
c00009b7:	90                   	nop
c00009b8:	39 f1                	cmp    ecx,esi
c00009ba:	74 10                	je     c00009cc <strncat+0x34>
c00009bc:	42                   	inc    edx
c00009bd:	41                   	inc    ecx
c00009be:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009c1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009c4:	84 db                	test   bl,bl
c00009c6:	75 f0                	jne    c00009b8 <strncat+0x20>
c00009c8:	5b                   	pop    ebx
c00009c9:	5e                   	pop    esi
c00009ca:	c3                   	ret    
c00009cb:	90                   	nop
c00009cc:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009cf:	5b                   	pop    ebx
c00009d0:	5e                   	pop    esi
c00009d1:	c3                   	ret    
c00009d2:	66 90                	xchg   ax,ax

c00009d4 <strstr>:
c00009d4:	57                   	push   edi
c00009d5:	56                   	push   esi
c00009d6:	53                   	push   ebx
c00009d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009db:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009df:	57                   	push   edi
c00009e0:	e8 a3 fd ff ff       	call   c0000788 <strlen>
c00009e5:	59                   	pop    ecx
c00009e6:	85 c0                	test   eax,eax
c00009e8:	74 2a                	je     c0000a14 <strstr+0x40>
c00009ea:	89 c6                	mov    esi,eax
c00009ec:	eb 12                	jmp    c0000a00 <strstr+0x2c>
c00009ee:	66 90                	xchg   ax,ax
c00009f0:	56                   	push   esi
c00009f1:	57                   	push   edi
c00009f2:	53                   	push   ebx
c00009f3:	e8 70 fc ff ff       	call   c0000668 <memcmp>
c00009f8:	83 c4 0c             	add    esp,0xc
c00009fb:	85 c0                	test   eax,eax
c00009fd:	74 15                	je     c0000a14 <strstr+0x40>
c00009ff:	43                   	inc    ebx
c0000a00:	53                   	push   ebx
c0000a01:	e8 82 fd ff ff       	call   c0000788 <strlen>
c0000a06:	5a                   	pop    edx
c0000a07:	39 f0                	cmp    eax,esi
c0000a09:	73 e5                	jae    c00009f0 <strstr+0x1c>
c0000a0b:	5b                   	pop    ebx
c0000a0c:	31 c0                	xor    eax,eax
c0000a0e:	5e                   	pop    esi
c0000a0f:	5f                   	pop    edi
c0000a10:	c3                   	ret    
c0000a11:	8d 76 00             	lea    esi,[esi+0x0]
c0000a14:	89 d8                	mov    eax,ebx
c0000a16:	5b                   	pop    ebx
c0000a17:	5e                   	pop    esi
c0000a18:	5f                   	pop    edi
c0000a19:	c3                   	ret    
c0000a1a:	66 90                	xchg   ax,ax

c0000a1c <toupper>:
c0000a1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a20:	0f b6 d0             	movzx  edx,al
c0000a23:	f6 82 c0 9b 02 c0 02 	test   BYTE PTR [edx-0x3ffd6440],0x2
c0000a2a:	74 03                	je     c0000a2f <toupper+0x13>
c0000a2c:	83 e8 20             	sub    eax,0x20
c0000a2f:	c3                   	ret    

c0000a30 <tolower>:
c0000a30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a34:	0f b6 d0             	movzx  edx,al
c0000a37:	f6 82 c0 9b 02 c0 01 	test   BYTE PTR [edx-0x3ffd6440],0x1
c0000a3e:	74 03                	je     c0000a43 <tolower+0x13>
c0000a40:	83 c0 20             	add    eax,0x20
c0000a43:	c3                   	ret    

c0000a44 <simple_strtoul>:
c0000a44:	55                   	push   ebp
c0000a45:	57                   	push   edi
c0000a46:	56                   	push   esi
c0000a47:	53                   	push   ebx
c0000a48:	83 ec 08             	sub    esp,0x8
c0000a4b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a4f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a53:	90                   	nop
c0000a54:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a57:	f6 82 c0 9b 02 c0 08 	test   BYTE PTR [edx-0x3ffd6440],0x8
c0000a5e:	75 05                	jne    c0000a65 <simple_strtoul+0x21>
c0000a60:	80 fa 09             	cmp    dl,0x9
c0000a63:	75 03                	jne    c0000a68 <simple_strtoul+0x24>
c0000a65:	41                   	inc    ecx
c0000a66:	eb ec                	jmp    c0000a54 <simple_strtoul+0x10>
c0000a68:	80 fa 2d             	cmp    dl,0x2d
c0000a6b:	0f 84 1b 01 00 00    	je     c0000b8c <simple_strtoul+0x148>
c0000a71:	80 fa 2b             	cmp    dl,0x2b
c0000a74:	0f 84 c2 00 00 00    	je     c0000b3c <simple_strtoul+0xf8>
c0000a7a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a82:	85 f6                	test   esi,esi
c0000a84:	0f 85 c3 00 00 00    	jne    c0000b4d <simple_strtoul+0x109>
c0000a8a:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a8c:	80 fa 30             	cmp    dl,0x30
c0000a8f:	0f 84 47 01 00 00    	je     c0000bdc <simple_strtoul+0x198>
c0000a95:	be 0a 00 00 00       	mov    esi,0xa
c0000a9a:	84 d2                	test   dl,dl
c0000a9c:	0f 84 6f 01 00 00    	je     c0000c11 <simple_strtoul+0x1cd>
c0000aa2:	31 ed                	xor    ebp,ebp
c0000aa4:	31 ff                	xor    edi,edi
c0000aa6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000aad:	eb 2b                	jmp    c0000ada <simple_strtoul+0x96>
c0000aaf:	90                   	nop
c0000ab0:	83 eb 30             	sub    ebx,0x30
c0000ab3:	39 f3                	cmp    ebx,esi
c0000ab5:	73 4d                	jae    c0000b04 <simple_strtoul+0xc0>
c0000ab7:	31 d2                	xor    edx,edx
c0000ab9:	89 d8                	mov    eax,ebx
c0000abb:	f7 d0                	not    eax
c0000abd:	f7 f6                	div    esi
c0000abf:	39 f8                	cmp    eax,edi
c0000ac1:	0f 82 b1 00 00 00    	jb     c0000b78 <simple_strtoul+0x134>
c0000ac7:	0f af fe             	imul   edi,esi
c0000aca:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ad1:	01 df                	add    edi,ebx
c0000ad3:	41                   	inc    ecx
c0000ad4:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ad6:	84 d2                	test   dl,dl
c0000ad8:	74 2a                	je     c0000b04 <simple_strtoul+0xc0>
c0000ada:	0f b6 da             	movzx  ebx,dl
c0000add:	f6 83 c0 9b 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6440],0x4
c0000ae4:	75 ca                	jne    c0000ab0 <simple_strtoul+0x6c>
c0000ae6:	0f be d2             	movsx  edx,dl
c0000ae9:	52                   	push   edx
c0000aea:	e8 2d ff ff ff       	call   c0000a1c <toupper>
c0000aef:	5b                   	pop    ebx
c0000af0:	0f b6 d0             	movzx  edx,al
c0000af3:	f6 82 c0 9b 02 c0 01 	test   BYTE PTR [edx-0x3ffd6440],0x1
c0000afa:	74 08                	je     c0000b04 <simple_strtoul+0xc0>
c0000afc:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000aff:	39 f3                	cmp    ebx,esi
c0000b01:	72 b4                	jb     c0000ab7 <simple_strtoul+0x73>
c0000b03:	90                   	nop
c0000b04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b08:	85 c0                	test   eax,eax
c0000b0a:	74 14                	je     c0000b20 <simple_strtoul+0xdc>
c0000b0c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b0f:	09 f8                	or     eax,edi
c0000b11:	75 71                	jne    c0000b84 <simple_strtoul+0x140>
c0000b13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b17:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b1b:	31 ff                	xor    edi,edi
c0000b1d:	89 30                	mov    DWORD PTR [eax],esi
c0000b1f:	90                   	nop
c0000b20:	4d                   	dec    ebp
c0000b21:	75 05                	jne    c0000b28 <simple_strtoul+0xe4>
c0000b23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b28:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b2d:	75 02                	jne    c0000b31 <simple_strtoul+0xed>
c0000b2f:	f7 df                	neg    edi
c0000b31:	83 c4 08             	add    esp,0x8
c0000b34:	89 f8                	mov    eax,edi
c0000b36:	5b                   	pop    ebx
c0000b37:	5e                   	pop    esi
c0000b38:	5f                   	pop    edi
c0000b39:	5d                   	pop    ebp
c0000b3a:	c3                   	ret    
c0000b3b:	90                   	nop
c0000b3c:	41                   	inc    ecx
c0000b3d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b45:	85 f6                	test   esi,esi
c0000b47:	0f 84 3d ff ff ff    	je     c0000a8a <simple_strtoul+0x46>
c0000b4d:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b50:	83 f8 22             	cmp    eax,0x22
c0000b53:	77 6a                	ja     c0000bbf <simple_strtoul+0x17b>
c0000b55:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b57:	83 fe 08             	cmp    esi,0x8
c0000b5a:	0f 84 a2 00 00 00    	je     c0000c02 <simple_strtoul+0x1be>
c0000b60:	83 fe 10             	cmp    esi,0x10
c0000b63:	0f 85 31 ff ff ff    	jne    c0000a9a <simple_strtoul+0x56>
c0000b69:	80 fa 30             	cmp    dl,0x30
c0000b6c:	74 2c                	je     c0000b9a <simple_strtoul+0x156>
c0000b6e:	be 10 00 00 00       	mov    esi,0x10
c0000b73:	e9 22 ff ff ff       	jmp    c0000a9a <simple_strtoul+0x56>
c0000b78:	bd 01 00 00 00       	mov    ebp,0x1
c0000b7d:	31 ff                	xor    edi,edi
c0000b7f:	e9 4f ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x8f>
c0000b84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b88:	89 08                	mov    DWORD PTR [eax],ecx
c0000b8a:	eb 94                	jmp    c0000b20 <simple_strtoul+0xdc>
c0000b8c:	41                   	inc    ecx
c0000b8d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b95:	e9 e8 fe ff ff       	jmp    c0000a82 <simple_strtoul+0x3e>
c0000b9a:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b9e:	88 04 24             	mov    BYTE PTR [esp],al
c0000ba1:	50                   	push   eax
c0000ba2:	e8 89 fe ff ff       	call   c0000a30 <tolower>
c0000ba7:	5e                   	pop    esi
c0000ba8:	83 f8 78             	cmp    eax,0x78
c0000bab:	0f 84 84 00 00 00    	je     c0000c35 <simple_strtoul+0x1f1>
c0000bb1:	41                   	inc    ecx
c0000bb2:	be 10 00 00 00       	mov    esi,0x10
c0000bb7:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bba:	e9 db fe ff ff       	jmp    c0000a9a <simple_strtoul+0x56>
c0000bbf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bc3:	85 ff                	test   edi,edi
c0000bc5:	74 5c                	je     c0000c23 <simple_strtoul+0x1df>
c0000bc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bcb:	85 c9                	test   ecx,ecx
c0000bcd:	75 4e                	jne    c0000c1d <simple_strtoul+0x1d9>
c0000bcf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bd5:	31 ff                	xor    edi,edi
c0000bd7:	e9 4c ff ff ff       	jmp    c0000b28 <simple_strtoul+0xe4>
c0000bdc:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000be0:	88 04 24             	mov    BYTE PTR [esp],al
c0000be3:	50                   	push   eax
c0000be4:	e8 47 fe ff ff       	call   c0000a30 <tolower>
c0000be9:	5d                   	pop    ebp
c0000bea:	83 f8 78             	cmp    eax,0x78
c0000bed:	74 3b                	je     c0000c2a <simple_strtoul+0x1e6>
c0000bef:	41                   	inc    ecx
c0000bf0:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bf3:	80 fa 30             	cmp    dl,0x30
c0000bf6:	74 13                	je     c0000c0b <simple_strtoul+0x1c7>
c0000bf8:	be 08 00 00 00       	mov    esi,0x8
c0000bfd:	e9 98 fe ff ff       	jmp    c0000a9a <simple_strtoul+0x56>
c0000c02:	80 fa 30             	cmp    dl,0x30
c0000c05:	0f 85 8f fe ff ff    	jne    c0000a9a <simple_strtoul+0x56>
c0000c0b:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c0e:	41                   	inc    ecx
c0000c0f:	eb e7                	jmp    c0000bf8 <simple_strtoul+0x1b4>
c0000c11:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c15:	85 d2                	test   edx,edx
c0000c17:	74 0a                	je     c0000c23 <simple_strtoul+0x1df>
c0000c19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c1d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c21:	89 30                	mov    DWORD PTR [eax],esi
c0000c23:	31 ff                	xor    edi,edi
c0000c25:	e9 fe fe ff ff       	jmp    c0000b28 <simple_strtoul+0xe4>
c0000c2a:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c2d:	83 c1 02             	add    ecx,0x2
c0000c30:	e9 34 ff ff ff       	jmp    c0000b69 <simple_strtoul+0x125>
c0000c35:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c38:	be 10 00 00 00       	mov    esi,0x10
c0000c3d:	83 c1 02             	add    ecx,0x2
c0000c40:	e9 55 fe ff ff       	jmp    c0000a9a <simple_strtoul+0x56>

c0000c45 <largebin_index>:
c0000c45:	89 c2                	mov    edx,eax
c0000c47:	c1 ea 08             	shr    edx,0x8
c0000c4a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c50:	77 10                	ja     c0000c62 <largebin_index+0x1d>
c0000c52:	0f bd d2             	bsr    edx,edx
c0000c55:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c58:	d3 e8                	shr    eax,cl
c0000c5a:	83 e0 03             	and    eax,0x3
c0000c5d:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c61:	c3                   	ret    
c0000c62:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c67:	c3                   	ret    

c0000c68 <malloc_init_state>:
c0000c68:	53                   	push   ebx
c0000c69:	8d 50 34             	lea    edx,[eax+0x34]
c0000c6c:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c72:	89 d1                	mov    ecx,edx
c0000c74:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c77:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c7a:	83 c2 08             	add    edx,0x8
c0000c7d:	39 da                	cmp    edx,ebx
c0000c7f:	75 f3                	jne    c0000c74 <malloc_init_state+0xc>
c0000c81:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c83:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c8d:	83 e2 03             	and    edx,0x3
c0000c90:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c9a:	83 ca 48             	or     edx,0x48
c0000c9d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000ca7:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cb1:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cbd:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cc7:	5b                   	pop    ebx
c0000cc8:	c3                   	ret    

c0000cc9 <malloc_consolidate>:
c0000cc9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ccb:	85 d2                	test   edx,edx
c0000ccd:	0f 84 d8 00 00 00    	je     c0000dab <malloc_consolidate+0xe2>
c0000cd3:	55                   	push   ebp
c0000cd4:	83 e2 fd             	and    edx,0xfffffffd
c0000cd7:	57                   	push   edi
c0000cd8:	89 c5                	mov    ebp,eax
c0000cda:	56                   	push   esi
c0000cdb:	8d 78 34             	lea    edi,[eax+0x34]
c0000cde:	53                   	push   ebx
c0000cdf:	83 ec 10             	sub    esp,0x10
c0000ce2:	89 10                	mov    DWORD PTR [eax],edx
c0000ce4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ce8:	c1 ea 03             	shr    edx,0x3
c0000ceb:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cef:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cf3:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cf6:	85 d2                	test   edx,edx
c0000cf8:	0f 84 98 00 00 00    	je     c0000d96 <malloc_consolidate+0xcd>
c0000cfe:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d05:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d08:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d0b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d0f:	89 f9                	mov    ecx,edi
c0000d11:	83 e1 fe             	and    ecx,0xfffffffe
c0000d14:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d17:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d1a:	83 e3 fc             	and    ebx,0xfffffffc
c0000d1d:	83 e7 01             	and    edi,0x1
c0000d20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d23:	75 14                	jne    c0000d39 <malloc_consolidate+0x70>
c0000d25:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d27:	29 fa                	sub    edx,edi
c0000d29:	01 f9                	add    ecx,edi
c0000d2b:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d2e:	89 fb                	mov    ebx,edi
c0000d30:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d33:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d36:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d39:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d3c:	74 40                	je     c0000d7e <malloc_consolidate+0xb5>
c0000d3e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d41:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d44:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d48:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d4b:	83 e7 01             	and    edi,0x1
c0000d4e:	75 0e                	jne    c0000d5e <malloc_consolidate+0x95>
c0000d50:	01 d9                	add    ecx,ebx
c0000d52:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d55:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d5b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d5e:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d61:	89 ce                	mov    esi,ecx
c0000d63:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d66:	83 ce 01             	or     esi,0x1
c0000d69:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d6c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d6f:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d72:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d76:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d79:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d7c:	eb 0c                	jmp    c0000d8a <malloc_consolidate+0xc1>
c0000d7e:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d8e:	85 d2                	test   edx,edx
c0000d90:	0f 85 6f ff ff ff    	jne    c0000d05 <malloc_consolidate+0x3c>
c0000d96:	83 c5 04             	add    ebp,0x4
c0000d99:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d9d:	0f 85 50 ff ff ff    	jne    c0000cf3 <malloc_consolidate+0x2a>
c0000da3:	83 c4 10             	add    esp,0x10
c0000da6:	5b                   	pop    ebx
c0000da7:	5e                   	pop    esi
c0000da8:	5f                   	pop    edi
c0000da9:	5d                   	pop    ebp
c0000daa:	c3                   	ret    
c0000dab:	e9 b8 fe ff ff       	jmp    c0000c68 <malloc_init_state>

c0000db0 <dlfree>:
c0000db0:	57                   	push   edi
c0000db1:	56                   	push   esi
c0000db2:	53                   	push   ebx
c0000db3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000db7:	85 db                	test   ebx,ebx
c0000db9:	0f 84 e2 00 00 00    	je     c0000ea1 <dlfree+0xf1>
c0000dbf:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dc2:	8b 0d e0 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002eae0
c0000dc8:	89 f0                	mov    eax,esi
c0000dca:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dcd:	83 e0 fc             	and    eax,0xfffffffc
c0000dd0:	39 c1                	cmp    ecx,eax
c0000dd2:	72 24                	jb     c0000df8 <dlfree+0x48>
c0000dd4:	83 c9 03             	or     ecx,0x3
c0000dd7:	c1 e8 03             	shr    eax,0x3
c0000dda:	89 0d e0 ea 02 c0    	mov    DWORD PTR ds:0xc002eae0,ecx
c0000de0:	83 e8 02             	sub    eax,0x2
c0000de3:	8b 0c 85 e4 ea 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd151c]
c0000dea:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dec:	89 14 85 e4 ea 02 c0 	mov    DWORD PTR [eax*4-0x3ffd151c],edx
c0000df3:	e9 a9 00 00 00       	jmp    c0000ea1 <dlfree+0xf1>
c0000df8:	83 e6 02             	and    esi,0x2
c0000dfb:	0f 85 a0 00 00 00    	jne    c0000ea1 <dlfree+0xf1>
c0000e01:	83 c9 01             	or     ecx,0x1
c0000e04:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e07:	89 0d e0 ea 02 c0    	mov    DWORD PTR ds:0xc002eae0,ecx
c0000e0d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e10:	83 e1 fc             	and    ecx,0xfffffffc
c0000e13:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e17:	75 13                	jne    c0000e2c <dlfree+0x7c>
c0000e19:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e1c:	29 da                	sub    edx,ebx
c0000e1e:	01 d8                	add    eax,ebx
c0000e20:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e23:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e26:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e29:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e2c:	39 35 0c eb 02 c0    	cmp    DWORD PTR ds:0xc002eb0c,esi
c0000e32:	74 40                	je     c0000e74 <dlfree+0xc4>
c0000e34:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e38:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e3b:	80 e3 01             	and    bl,0x1
c0000e3e:	75 0e                	jne    c0000e4e <dlfree+0x9e>
c0000e40:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e43:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e46:	01 c8                	add    eax,ecx
c0000e48:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e4b:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e4e:	8b 0d 1c eb 02 c0    	mov    ecx,DWORD PTR ds:0xc002eb1c
c0000e54:	c7 42 0c 14 eb 02 c0 	mov    DWORD PTR [edx+0xc],0xc002eb14
c0000e5b:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e5e:	89 15 1c eb 02 c0    	mov    DWORD PTR ds:0xc002eb1c,edx
c0000e64:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e67:	89 c1                	mov    ecx,eax
c0000e69:	83 c9 01             	or     ecx,0x1
c0000e6c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e6f:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e72:	eb 10                	jmp    c0000e84 <dlfree+0xd4>
c0000e74:	01 c8                	add    eax,ecx
c0000e76:	89 c1                	mov    ecx,eax
c0000e78:	83 c9 01             	or     ecx,0x1
c0000e7b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7e:	89 15 0c eb 02 c0    	mov    DWORD PTR ds:0xc002eb0c,edx
c0000e84:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e89:	76 16                	jbe    c0000ea1 <dlfree+0xf1>
c0000e8b:	f6 05 e0 ea 02 c0 02 	test   BYTE PTR ds:0xc002eae0,0x2
c0000e92:	74 0d                	je     c0000ea1 <dlfree+0xf1>
c0000e94:	5b                   	pop    ebx
c0000e95:	b8 e0 ea 02 c0       	mov    eax,0xc002eae0
c0000e9a:	5e                   	pop    esi
c0000e9b:	5f                   	pop    edi
c0000e9c:	e9 28 fe ff ff       	jmp    c0000cc9 <malloc_consolidate>
c0000ea1:	5b                   	pop    ebx
c0000ea2:	5e                   	pop    esi
c0000ea3:	5f                   	pop    edi
c0000ea4:	c3                   	ret    

c0000ea5 <sYSMALLOc>:
c0000ea5:	55                   	push   ebp
c0000ea6:	57                   	push   edi
c0000ea7:	56                   	push   esi
c0000ea8:	53                   	push   ebx
c0000ea9:	89 d3                	mov    ebx,edx
c0000eab:	83 ec 2c             	sub    esp,0x2c
c0000eae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000eb2:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000eb8:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ebb:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ebe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ec2:	74 1f                	je     c0000ee3 <sYSMALLOc+0x3e>
c0000ec4:	89 d8                	mov    eax,ebx
c0000ec6:	e8 fe fd ff ff       	call   c0000cc9 <malloc_consolidate>
c0000ecb:	83 ec 0c             	sub    esp,0xc
c0000ece:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ed2:	83 e8 07             	sub    eax,0x7
c0000ed5:	50                   	push   eax
c0000ed6:	e8 30 02 00 00       	call   c000110b <dlmalloc>
c0000edb:	83 c4 10             	add    esp,0x10
c0000ede:	e9 20 02 00 00       	jmp    c0001103 <sYSMALLOc+0x25e>
c0000ee3:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ee6:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000eec:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000eef:	83 e0 fc             	and    eax,0xfffffffc
c0000ef2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000efa:	83 c0 10             	add    eax,0x10
c0000efd:	01 c1                	add    ecx,eax
c0000eff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f03:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f0a:	74 04                	je     c0000f10 <sYSMALLOc+0x6b>
c0000f0c:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f10:	f7 da                	neg    edx
c0000f12:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f16:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f1a:	21 d1                	and    ecx,edx
c0000f1c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f20:	7f 07                	jg     c0000f29 <sYSMALLOc+0x84>
c0000f22:	31 c0                	xor    eax,eax
c0000f24:	e9 da 01 00 00       	jmp    c0001103 <sYSMALLOc+0x25e>
c0000f29:	83 ec 0c             	sub    esp,0xc
c0000f2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f30:	e8 55 e8 00 00       	call   c000f78a <sbrk>
c0000f35:	83 c4 10             	add    esp,0x10
c0000f38:	89 c6                	mov    esi,eax
c0000f3a:	83 f8 ff             	cmp    eax,0xffffffff
c0000f3d:	74 e3                	je     c0000f22 <sYSMALLOc+0x7d>
c0000f3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f43:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f47:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f4a:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f50:	39 f1                	cmp    ecx,esi
c0000f52:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f58:	75 13                	jne    c0000f6d <sYSMALLOc+0xc8>
c0000f5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f5e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f62:	83 c8 01             	or     eax,0x1
c0000f65:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f68:	e9 3e 01 00 00       	jmp    c00010ab <sYSMALLOc+0x206>
c0000f6d:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f73:	88 d0                	mov    al,dl
c0000f75:	83 e0 01             	and    eax,0x1
c0000f78:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f7d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f81:	0f 95 c0             	setne  al
c0000f84:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f88:	39 f1                	cmp    ecx,esi
c0000f8a:	76 12                	jbe    c0000f9e <sYSMALLOc+0xf9>
c0000f8c:	84 c0                	test   al,al
c0000f8e:	74 0e                	je     c0000f9e <sYSMALLOc+0xf9>
c0000f90:	83 e2 fe             	and    edx,0xfffffffe
c0000f93:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f99:	e9 83 00 00 00       	jmp    c0001021 <sYSMALLOc+0x17c>
c0000f9e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000fa3:	74 7c                	je     c0001021 <sYSMALLOc+0x17c>
c0000fa5:	84 c0                	test   al,al
c0000fa7:	74 0c                	je     c0000fb5 <sYSMALLOc+0x110>
c0000fa9:	89 f0                	mov    eax,esi
c0000fab:	29 c8                	sub    eax,ecx
c0000fad:	01 e8                	add    eax,ebp
c0000faf:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fb5:	89 f2                	mov    edx,esi
c0000fb7:	83 e2 07             	and    edx,0x7
c0000fba:	74 0c                	je     c0000fc8 <sYSMALLOc+0x123>
c0000fbc:	b8 08 00 00 00       	mov    eax,0x8
c0000fc1:	29 d0                	sub    eax,edx
c0000fc3:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fc6:	eb 04                	jmp    c0000fcc <sYSMALLOc+0x127>
c0000fc8:	89 f5                	mov    ebp,esi
c0000fca:	31 c0                	xor    eax,eax
c0000fcc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fd0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fd4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fd8:	01 c1                	add    ecx,eax
c0000fda:	83 ec 0c             	sub    esp,0xc
c0000fdd:	01 f1                	add    ecx,esi
c0000fdf:	01 ca                	add    edx,ecx
c0000fe1:	29 c8                	sub    eax,ecx
c0000fe3:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fe7:	01 c2                	add    edx,eax
c0000fe9:	52                   	push   edx
c0000fea:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fee:	e8 97 e7 00 00       	call   c000f78a <sbrk>
c0000ff3:	83 c4 10             	add    esp,0x10
c0000ff6:	83 f8 ff             	cmp    eax,0xffffffff
c0000ff9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ffd:	75 0f                	jne    c000100e <sYSMALLOc+0x169>
c0000fff:	83 ec 0c             	sub    esp,0xc
c0001002:	6a 00                	push   0x0
c0001004:	e8 81 e7 00 00       	call   c000f78a <sbrk>
c0001009:	83 c4 10             	add    esp,0x10
c000100c:	eb 30                	jmp    c000103e <sYSMALLOc+0x199>
c000100e:	39 c6                	cmp    esi,eax
c0001010:	76 33                	jbe    c0001045 <sYSMALLOc+0x1a0>
c0001012:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001016:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000101d:	01 f0                	add    eax,esi
c000101f:	eb 1d                	jmp    c000103e <sYSMALLOc+0x199>
c0001021:	83 ec 0c             	sub    esp,0xc
c0001024:	89 f5                	mov    ebp,esi
c0001026:	6a 00                	push   0x0
c0001028:	e8 5d e7 00 00       	call   c000f78a <sbrk>
c000102d:	89 c2                	mov    edx,eax
c000102f:	29 f2                	sub    edx,esi
c0001031:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001035:	83 c4 10             	add    esp,0x10
c0001038:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103e:	31 d2                	xor    edx,edx
c0001040:	83 f8 ff             	cmp    eax,0xffffffff
c0001043:	74 66                	je     c00010ab <sYSMALLOc+0x206>
c0001045:	29 e8                	sub    eax,ebp
c0001047:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000104a:	01 d0                	add    eax,edx
c000104c:	83 c8 01             	or     eax,0x1
c000104f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001052:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001058:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000105d:	74 4c                	je     c00010ab <sYSMALLOc+0x206>
c000105f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001063:	83 e8 0c             	sub    eax,0xc
c0001066:	83 e0 f8             	and    eax,0xfffffff8
c0001069:	89 c2                	mov    edx,eax
c000106b:	83 ca 01             	or     edx,0x1
c000106e:	83 f8 0f             	cmp    eax,0xf
c0001071:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001074:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000107c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001084:	76 25                	jbe    c00010ab <sYSMALLOc+0x206>
c0001086:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000108c:	83 ec 0c             	sub    esp,0xc
c000108f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001099:	83 c7 08             	add    edi,0x8
c000109c:	57                   	push   edi
c000109d:	e8 0e fd ff ff       	call   c0000db0 <dlfree>
c00010a2:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010a8:	83 c4 10             	add    esp,0x10
c00010ab:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010b1:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010b7:	73 06                	jae    c00010bf <sYSMALLOc+0x21a>
c00010b9:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010bf:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010c5:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010cb:	73 06                	jae    c00010d3 <sYSMALLOc+0x22e>
c00010cd:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010d3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010d6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010d9:	83 e2 fc             	and    edx,0xfffffffc
c00010dc:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010e0:	0f 82 3c fe ff ff    	jb     c0000f22 <sYSMALLOc+0x7d>
c00010e6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ea:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010ed:	29 fa                	sub    edx,edi
c00010ef:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010f2:	83 ca 01             	or     edx,0x1
c00010f5:	89 fb                	mov    ebx,edi
c00010f7:	83 c0 08             	add    eax,0x8
c00010fa:	83 cb 01             	or     ebx,0x1
c00010fd:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001100:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001103:	83 c4 2c             	add    esp,0x2c
c0001106:	5b                   	pop    ebx
c0001107:	5e                   	pop    esi
c0001108:	5f                   	pop    edi
c0001109:	5d                   	pop    ebp
c000110a:	c3                   	ret    

c000110b <dlmalloc>:
c000110b:	55                   	push   ebp
c000110c:	57                   	push   edi
c000110d:	56                   	push   esi
c000110e:	53                   	push   ebx
c000110f:	83 ec 1c             	sub    esp,0x1c
c0001112:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001116:	83 f8 df             	cmp    eax,0xffffffdf
c0001119:	0f 87 70 03 00 00    	ja     c000148f <dlmalloc+0x384>
c000111f:	83 c0 0b             	add    eax,0xb
c0001122:	be 10 00 00 00       	mov    esi,0x10
c0001127:	83 f8 0f             	cmp    eax,0xf
c000112a:	76 05                	jbe    c0001131 <dlmalloc+0x26>
c000112c:	83 e0 f8             	and    eax,0xfffffff8
c000112f:	89 c6                	mov    esi,eax
c0001131:	8b 3d e0 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002eae0
c0001137:	f7 c7 01 00 00 00    	test   edi,0x1
c000113d:	75 17                	jne    c0001156 <dlmalloc+0x4b>
c000113f:	85 ff                	test   edi,edi
c0001141:	0f 85 05 03 00 00    	jne    c000144c <dlmalloc+0x341>
c0001147:	b8 e0 ea 02 c0       	mov    eax,0xc002eae0
c000114c:	e8 78 fb ff ff       	call   c0000cc9 <malloc_consolidate>
c0001151:	e9 f6 02 00 00       	jmp    c000144c <dlmalloc+0x341>
c0001156:	39 f7                	cmp    edi,esi
c0001158:	72 1f                	jb     c0001179 <dlmalloc+0x6e>
c000115a:	89 f2                	mov    edx,esi
c000115c:	c1 ea 03             	shr    edx,0x3
c000115f:	83 ea 02             	sub    edx,0x2
c0001162:	8b 04 95 e4 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd151c]
c0001169:	85 c0                	test   eax,eax
c000116b:	74 0c                	je     c0001179 <dlmalloc+0x6e>
c000116d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001170:	89 0c 95 e4 ea 02 c0 	mov    DWORD PTR [edx*4-0x3ffd151c],ecx
c0001177:	eb 30                	jmp    c00011a9 <dlmalloc+0x9e>
c0001179:	89 f0                	mov    eax,esi
c000117b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001181:	77 2e                	ja     c00011b1 <dlmalloc+0xa6>
c0001183:	c1 e8 03             	shr    eax,0x3
c0001186:	8d 14 c5 14 eb 02 c0 	lea    edx,[eax*8-0x3ffd14ec]
c000118d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001191:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001194:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001197:	39 c3                	cmp    ebx,eax
c0001199:	74 2e                	je     c00011c9 <dlmalloc+0xbe>
c000119b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000119e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011a3:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011a6:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011a9:	83 c0 08             	add    eax,0x8
c00011ac:	e9 e0 02 00 00       	jmp    c0001491 <dlmalloc+0x386>
c00011b1:	e8 8f fa ff ff       	call   c0000c45 <largebin_index>
c00011b6:	83 e7 02             	and    edi,0x2
c00011b9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011bd:	74 0a                	je     c00011c9 <dlmalloc+0xbe>
c00011bf:	b8 e0 ea 02 c0       	mov    eax,0xc002eae0
c00011c4:	e8 00 fb ff ff       	call   c0000cc9 <malloc_consolidate>
c00011c9:	8d 46 10             	lea    eax,[esi+0x10]
c00011cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011d0:	8b 1d 20 eb 02 c0    	mov    ebx,DWORD PTR ds:0xc002eb20
c00011d6:	81 fb 14 eb 02 c0    	cmp    ebx,0xc002eb14
c00011dc:	0f 84 13 01 00 00    	je     c00012f5 <dlmalloc+0x1ea>
c00011e2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011e5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011e8:	83 e7 fc             	and    edi,0xfffffffc
c00011eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011f1:	77 4c                	ja     c000123f <dlmalloc+0x134>
c00011f3:	3d 14 eb 02 c0       	cmp    eax,0xc002eb14
c00011f8:	75 45                	jne    c000123f <dlmalloc+0x134>
c00011fa:	39 1d 10 eb 02 c0    	cmp    DWORD PTR ds:0xc002eb10,ebx
c0001200:	75 3d                	jne    c000123f <dlmalloc+0x134>
c0001202:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001206:	73 37                	jae    c000123f <dlmalloc+0x134>
c0001208:	8d 04 33             	lea    eax,[ebx+esi*1]
c000120b:	89 fa                	mov    edx,edi
c000120d:	a3 1c eb 02 c0       	mov    ds:0xc002eb1c,eax
c0001212:	a3 20 eb 02 c0       	mov    ds:0xc002eb20,eax
c0001217:	a3 10 eb 02 c0       	mov    ds:0xc002eb10,eax
c000121c:	29 f2                	sub    edx,esi
c000121e:	c7 40 08 14 eb 02 c0 	mov    DWORD PTR [eax+0x8],0xc002eb14
c0001225:	c7 40 0c 14 eb 02 c0 	mov    DWORD PTR [eax+0xc],0xc002eb14
c000122c:	83 ce 01             	or     esi,0x1
c000122f:	89 d1                	mov    ecx,edx
c0001231:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001234:	83 c9 01             	or     ecx,0x1
c0001237:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000123a:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000123d:	eb 15                	jmp    c0001254 <dlmalloc+0x149>
c000123f:	a3 20 eb 02 c0       	mov    ds:0xc002eb20,eax
c0001244:	39 fe                	cmp    esi,edi
c0001246:	c7 40 08 14 eb 02 c0 	mov    DWORD PTR [eax+0x8],0xc002eb14
c000124d:	75 0d                	jne    c000125c <dlmalloc+0x151>
c000124f:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001254:	8d 43 08             	lea    eax,[ebx+0x8]
c0001257:	e9 35 02 00 00       	jmp    c0001491 <dlmalloc+0x386>
c000125c:	89 f8                	mov    eax,edi
c000125e:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001264:	77 19                	ja     c000127f <dlmalloc+0x174>
c0001266:	c1 e8 03             	shr    eax,0x3
c0001269:	8d 14 00             	lea    edx,[eax+eax*1]
c000126c:	83 c2 0d             	add    edx,0xd
c000126f:	8d 2c 95 d8 ea 02 c0 	lea    ebp,[edx*4-0x3ffd1528]
c0001276:	8b 14 95 e0 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1520]
c000127d:	eb 46                	jmp    c00012c5 <dlmalloc+0x1ba>
c000127f:	e8 c1 f9 ff ff       	call   c0000c45 <largebin_index>
c0001284:	8d 14 00             	lea    edx,[eax+eax*1]
c0001287:	83 c2 0d             	add    edx,0xd
c000128a:	8d 0c 95 e0 ea 02 c0 	lea    ecx,[edx*4-0x3ffd1520]
c0001291:	8b 14 95 e0 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1520]
c0001298:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000129b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000129f:	89 d5                	mov    ebp,edx
c00012a1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012a5:	74 1e                	je     c00012c5 <dlmalloc+0x1ba>
c00012a7:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012aa:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012ad:	77 12                	ja     c00012c1 <dlmalloc+0x1b6>
c00012af:	83 cf 01             	or     edi,0x1
c00012b2:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012b5:	76 05                	jbe    c00012bc <dlmalloc+0x1b1>
c00012b7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012ba:	eb f6                	jmp    c00012b2 <dlmalloc+0x1a7>
c00012bc:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012bf:	eb 04                	jmp    c00012c5 <dlmalloc+0x1ba>
c00012c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012c5:	89 c7                	mov    edi,eax
c00012c7:	88 c1                	mov    cl,al
c00012c9:	c1 ff 05             	sar    edi,0x5
c00012cc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012d0:	bf 01 00 00 00       	mov    edi,0x1
c00012d5:	d3 e7                	shl    edi,cl
c00012d7:	89 f8                	mov    eax,edi
c00012d9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012dd:	09 04 bd 14 ee 02 c0 	or     DWORD PTR [edi*4-0x3ffd11ec],eax
c00012e4:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012e7:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ea:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012ed:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012f0:	e9 db fe ff ff       	jmp    c00011d0 <dlmalloc+0xc5>
c00012f5:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012fb:	76 78                	jbe    c0001375 <dlmalloc+0x26a>
c00012fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001301:	8d 04 c5 14 eb 02 c0 	lea    eax,[eax*8-0x3ffd14ec]
c0001308:	8d 48 f8             	lea    ecx,[eax-0x8]
c000130b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000130e:	39 ca                	cmp    edx,ecx
c0001310:	74 63                	je     c0001375 <dlmalloc+0x26a>
c0001312:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001315:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001318:	83 e3 fc             	and    ebx,0xfffffffc
c000131b:	39 de                	cmp    esi,ebx
c000131d:	77 52                	ja     c0001371 <dlmalloc+0x266>
c000131f:	89 df                	mov    edi,ebx
c0001321:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001324:	29 f7                	sub    edi,esi
c0001326:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001329:	01 d3                	add    ebx,edx
c000132b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000132e:	83 ff 0f             	cmp    edi,0xf
c0001331:	8d 42 08             	lea    eax,[edx+0x8]
c0001334:	77 09                	ja     c000133f <dlmalloc+0x234>
c0001336:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000133a:	e9 52 01 00 00       	jmp    c0001491 <dlmalloc+0x386>
c000133f:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001342:	83 ce 01             	or     esi,0x1
c0001345:	89 0d 1c eb 02 c0    	mov    DWORD PTR ds:0xc002eb1c,ecx
c000134b:	89 0d 20 eb 02 c0    	mov    DWORD PTR ds:0xc002eb20,ecx
c0001351:	c7 41 08 14 eb 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002eb14
c0001358:	c7 41 0c 14 eb 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002eb14
c000135f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001362:	89 fa                	mov    edx,edi
c0001364:	83 ca 01             	or     edx,0x1
c0001367:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000136a:	89 3b                	mov    DWORD PTR [ebx],edi
c000136c:	e9 20 01 00 00       	jmp    c0001491 <dlmalloc+0x386>
c0001371:	89 c2                	mov    edx,eax
c0001373:	eb 99                	jmp    c000130e <dlmalloc+0x203>
c0001375:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001379:	b8 01 00 00 00       	mov    eax,0x1
c000137e:	41                   	inc    ecx
c000137f:	89 cb                	mov    ebx,ecx
c0001381:	8d 14 cd 0c eb 02 c0 	lea    edx,[ecx*8-0x3ffd14f4]
c0001388:	c1 eb 05             	shr    ebx,0x5
c000138b:	d3 e0                	shl    eax,cl
c000138d:	8b 3c 9d 14 ee 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd11ec]
c0001394:	39 f8                	cmp    eax,edi
c0001396:	77 04                	ja     c000139c <dlmalloc+0x291>
c0001398:	85 c0                	test   eax,eax
c000139a:	75 26                	jne    c00013c2 <dlmalloc+0x2b7>
c000139c:	43                   	inc    ebx
c000139d:	83 fb 02             	cmp    ebx,0x2
c00013a0:	0f 87 a6 00 00 00    	ja     c000144c <dlmalloc+0x341>
c00013a6:	8b 3c 9d 14 ee 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd11ec]
c00013ad:	85 ff                	test   edi,edi
c00013af:	74 eb                	je     c000139c <dlmalloc+0x291>
c00013b1:	89 d8                	mov    eax,ebx
c00013b3:	c1 e0 06             	shl    eax,0x6
c00013b6:	8d 14 85 0c eb 02 c0 	lea    edx,[eax*4-0x3ffd14f4]
c00013bd:	b8 01 00 00 00       	mov    eax,0x1
c00013c2:	85 f8                	test   eax,edi
c00013c4:	75 07                	jne    c00013cd <dlmalloc+0x2c2>
c00013c6:	83 c2 08             	add    edx,0x8
c00013c9:	01 c0                	add    eax,eax
c00013cb:	eb f5                	jmp    c00013c2 <dlmalloc+0x2b7>
c00013cd:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013d0:	39 ca                	cmp    edx,ecx
c00013d2:	75 14                	jne    c00013e8 <dlmalloc+0x2dd>
c00013d4:	89 c1                	mov    ecx,eax
c00013d6:	83 c2 08             	add    edx,0x8
c00013d9:	f7 d1                	not    ecx
c00013db:	01 c0                	add    eax,eax
c00013dd:	21 cf                	and    edi,ecx
c00013df:	89 3c 9d 14 ee 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd11ec],edi
c00013e6:	eb ac                	jmp    c0001394 <dlmalloc+0x289>
c00013e8:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013eb:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013ee:	83 e0 fc             	and    eax,0xfffffffc
c00013f1:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013f4:	89 c3                	mov    ebx,eax
c00013f6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013f9:	29 f3                	sub    ebx,esi
c00013fb:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013fe:	83 fb 0f             	cmp    ebx,0xf
c0001401:	8d 41 08             	lea    eax,[ecx+0x8]
c0001404:	77 09                	ja     c000140f <dlmalloc+0x304>
c0001406:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000140a:	e9 82 00 00 00       	jmp    c0001491 <dlmalloc+0x386>
c000140f:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001412:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001418:	89 3d 1c eb 02 c0    	mov    DWORD PTR ds:0xc002eb1c,edi
c000141e:	89 3d 20 eb 02 c0    	mov    DWORD PTR ds:0xc002eb20,edi
c0001424:	c7 47 08 14 eb 02 c0 	mov    DWORD PTR [edi+0x8],0xc002eb14
c000142b:	c7 47 0c 14 eb 02 c0 	mov    DWORD PTR [edi+0xc],0xc002eb14
c0001432:	77 06                	ja     c000143a <dlmalloc+0x32f>
c0001434:	89 3d 10 eb 02 c0    	mov    DWORD PTR ds:0xc002eb10,edi
c000143a:	83 ce 01             	or     esi,0x1
c000143d:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001440:	89 d9                	mov    ecx,ebx
c0001442:	83 c9 01             	or     ecx,0x1
c0001445:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001448:	89 1a                	mov    DWORD PTR [edx],ebx
c000144a:	eb 45                	jmp    c0001491 <dlmalloc+0x386>
c000144c:	a1 0c eb 02 c0       	mov    eax,ds:0xc002eb0c
c0001451:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001454:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001457:	83 e2 fc             	and    edx,0xfffffffc
c000145a:	39 d1                	cmp    ecx,edx
c000145c:	77 1e                	ja     c000147c <dlmalloc+0x371>
c000145e:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001461:	89 f3                	mov    ebx,esi
c0001463:	89 0d 0c eb 02 c0    	mov    DWORD PTR ds:0xc002eb0c,ecx
c0001469:	83 cb 01             	or     ebx,0x1
c000146c:	29 f2                	sub    edx,esi
c000146e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001471:	83 ca 01             	or     edx,0x1
c0001474:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001477:	e9 2d fd ff ff       	jmp    c00011a9 <dlmalloc+0x9e>
c000147c:	83 c4 1c             	add    esp,0x1c
c000147f:	89 f0                	mov    eax,esi
c0001481:	5b                   	pop    ebx
c0001482:	ba e0 ea 02 c0       	mov    edx,0xc002eae0
c0001487:	5e                   	pop    esi
c0001488:	5f                   	pop    edi
c0001489:	5d                   	pop    ebp
c000148a:	e9 16 fa ff ff       	jmp    c0000ea5 <sYSMALLOc>
c000148f:	31 c0                	xor    eax,eax
c0001491:	83 c4 1c             	add    esp,0x1c
c0001494:	5b                   	pop    ebx
c0001495:	5e                   	pop    esi
c0001496:	5f                   	pop    edi
c0001497:	5d                   	pop    ebp
c0001498:	c3                   	ret    

c0001499 <iALLOc>:
c0001499:	55                   	push   ebp
c000149a:	89 c5                	mov    ebp,eax
c000149c:	57                   	push   edi
c000149d:	56                   	push   esi
c000149e:	53                   	push   ebx
c000149f:	83 ec 2c             	sub    esp,0x2c
c00014a2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014a6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ae:	83 3d e0 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002eae0,0x0
c00014b5:	75 12                	jne    c00014c9 <iALLOc+0x30>
c00014b7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014bb:	b8 e0 ea 02 c0       	mov    eax,0xc002eae0
c00014c0:	e8 04 f8 ff ff       	call   c0000cc9 <malloc_consolidate>
c00014c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014c9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014ce:	74 12                	je     c00014e2 <iALLOc+0x49>
c00014d0:	85 ed                	test   ebp,ebp
c00014d2:	0f 84 64 01 00 00    	je     c000163c <iALLOc+0x1a3>
c00014d8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014e0:	eb 33                	jmp    c0001515 <iALLOc+0x7c>
c00014e2:	85 ed                	test   ebp,ebp
c00014e4:	75 14                	jne    c00014fa <iALLOc+0x61>
c00014e6:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014ee:	83 c4 2c             	add    esp,0x2c
c00014f1:	5b                   	pop    ebx
c00014f2:	5e                   	pop    esi
c00014f3:	5f                   	pop    edi
c00014f4:	5d                   	pop    ebp
c00014f5:	e9 11 fc ff ff       	jmp    c000110b <dlmalloc>
c00014fa:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001501:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001509:	83 f8 0f             	cmp    eax,0xf
c000150c:	76 07                	jbe    c0001515 <iALLOc+0x7c>
c000150e:	83 e0 f8             	and    eax,0xfffffff8
c0001511:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001515:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000151a:	75 09                	jne    c0001525 <iALLOc+0x8c>
c000151c:	89 d0                	mov    eax,edx
c000151e:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001521:	31 f6                	xor    esi,esi
c0001523:	eb 3b                	jmp    c0001560 <iALLOc+0xc7>
c0001525:	8b 02                	mov    eax,DWORD PTR [edx]
c0001527:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000152f:	83 c0 0b             	add    eax,0xb
c0001532:	83 f8 0f             	cmp    eax,0xf
c0001535:	76 07                	jbe    c000153e <iALLOc+0xa5>
c0001537:	83 e0 f8             	and    eax,0xfffffff8
c000153a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000153e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001542:	0f af f5             	imul   esi,ebp
c0001545:	eb 25                	jmp    c000156c <iALLOc+0xd3>
c0001547:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001549:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000154c:	bb 10 00 00 00       	mov    ebx,0x10
c0001551:	83 f9 0f             	cmp    ecx,0xf
c0001554:	76 05                	jbe    c000155b <iALLOc+0xc2>
c0001556:	83 e1 f8             	and    ecx,0xfffffff8
c0001559:	89 cb                	mov    ebx,ecx
c000155b:	01 de                	add    esi,ebx
c000155d:	83 c0 04             	add    eax,0x4
c0001560:	39 c7                	cmp    edi,eax
c0001562:	75 e3                	jne    c0001547 <iALLOc+0xae>
c0001564:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000156c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001570:	8b 1d 34 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee34
c0001576:	83 ec 0c             	sub    esp,0xc
c0001579:	c7 05 34 ee 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ee34,0x0
c0001583:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001587:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000158b:	50                   	push   eax
c000158c:	e8 7a fb ff ff       	call   c000110b <dlmalloc>
c0001591:	83 c4 10             	add    esp,0x10
c0001594:	89 1d 34 ee 02 c0    	mov    DWORD PTR ds:0xc002ee34,ebx
c000159a:	85 c0                	test   eax,eax
c000159c:	0f 84 92 00 00 00    	je     c0001634 <iALLOc+0x19b>
c00015a2:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015a5:	8d 78 f8             	lea    edi,[eax-0x8]
c00015a8:	83 e3 fc             	and    ebx,0xfffffffc
c00015ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015af:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015b4:	74 1e                	je     c00015d4 <iALLOc+0x13b>
c00015b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015ba:	89 d9                	mov    ecx,ebx
c00015bc:	52                   	push   edx
c00015bd:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015c1:	83 e9 04             	sub    ecx,0x4
c00015c4:	51                   	push   ecx
c00015c5:	6a 00                	push   0x0
c00015c7:	50                   	push   eax
c00015c8:	e8 9f f1 ff ff       	call   c000076c <memset>
c00015cd:	83 c4 10             	add    esp,0x10
c00015d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015d4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015d9:	75 14                	jne    c00015ef <iALLOc+0x156>
c00015db:	8d 04 37             	lea    eax,[edi+esi*1]
c00015de:	29 f3                	sub    ebx,esi
c00015e0:	8d 48 08             	lea    ecx,[eax+0x8]
c00015e3:	83 cb 01             	or     ebx,0x1
c00015e6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ea:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015ed:	89 f3                	mov    ebx,esi
c00015ef:	31 c0                	xor    eax,eax
c00015f1:	4d                   	dec    ebp
c00015f2:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015f5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015f9:	39 c5                	cmp    ebp,eax
c00015fb:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015fe:	74 2c                	je     c000162c <iALLOc+0x193>
c0001600:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001604:	85 c9                	test   ecx,ecx
c0001606:	75 15                	jne    c000161d <iALLOc+0x184>
c0001608:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000160b:	8d 71 0b             	lea    esi,[ecx+0xb]
c000160e:	b9 10 00 00 00       	mov    ecx,0x10
c0001613:	83 fe 0f             	cmp    esi,0xf
c0001616:	76 05                	jbe    c000161d <iALLOc+0x184>
c0001618:	83 e6 f8             	and    esi,0xfffffff8
c000161b:	89 f1                	mov    ecx,esi
c000161d:	89 ce                	mov    esi,ecx
c000161f:	29 cb                	sub    ebx,ecx
c0001621:	83 ce 01             	or     esi,0x1
c0001624:	40                   	inc    eax
c0001625:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001628:	01 cf                	add    edi,ecx
c000162a:	eb c6                	jmp    c00015f2 <iALLOc+0x159>
c000162c:	83 cb 01             	or     ebx,0x1
c000162f:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001632:	eb 08                	jmp    c000163c <iALLOc+0x1a3>
c0001634:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000163c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001640:	83 c4 2c             	add    esp,0x2c
c0001643:	5b                   	pop    ebx
c0001644:	5e                   	pop    esi
c0001645:	5f                   	pop    edi
c0001646:	5d                   	pop    ebp
c0001647:	c3                   	ret    

c0001648 <dlrealloc>:
c0001648:	55                   	push   ebp
c0001649:	57                   	push   edi
c000164a:	56                   	push   esi
c000164b:	53                   	push   ebx
c000164c:	83 ec 1c             	sub    esp,0x1c
c000164f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0001653:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001657:	85 f6                	test   esi,esi
c0001659:	75 10                	jne    c000166b <dlrealloc+0x23>
c000165b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000165f:	83 c4 1c             	add    esp,0x1c
c0001662:	5b                   	pop    ebx
c0001663:	5e                   	pop    esi
c0001664:	5f                   	pop    edi
c0001665:	5d                   	pop    ebp
c0001666:	e9 a0 fa ff ff       	jmp    c000110b <dlmalloc>
c000166b:	83 f8 df             	cmp    eax,0xffffffdf
c000166e:	76 07                	jbe    c0001677 <dlrealloc+0x2f>
c0001670:	31 f6                	xor    esi,esi
c0001672:	e9 69 01 00 00       	jmp    c00017e0 <dlrealloc+0x198>
c0001677:	83 c0 0b             	add    eax,0xb
c000167a:	bd 10 00 00 00       	mov    ebp,0x10
c000167f:	83 f8 0f             	cmp    eax,0xf
c0001682:	76 05                	jbe    c0001689 <dlrealloc+0x41>
c0001684:	83 e0 f8             	and    eax,0xfffffff8
c0001687:	89 c5                	mov    ebp,eax
c0001689:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000168c:	8d 56 f8             	lea    edx,[esi-0x8]
c000168f:	89 c3                	mov    ebx,eax
c0001691:	83 e3 fc             	and    ebx,0xfffffffc
c0001694:	a8 02                	test   al,0x2
c0001696:	75 d8                	jne    c0001670 <dlrealloc+0x28>
c0001698:	39 dd                	cmp    ebp,ebx
c000169a:	0f 86 03 01 00 00    	jbe    c00017a3 <dlrealloc+0x15b>
c00016a0:	8d 0c 1a             	lea    ecx,[edx+ebx*1]
c00016a3:	8b 79 04             	mov    edi,DWORD PTR [ecx+0x4]
c00016a6:	39 0d 0c eb 02 c0    	cmp    DWORD PTR ds:0xc002eb0c,ecx
c00016ac:	75 33                	jne    c00016e1 <dlrealloc+0x99>
c00016ae:	83 e7 fc             	and    edi,0xfffffffc
c00016b1:	01 df                	add    edi,ebx
c00016b3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00016b7:	8d 7d 10             	lea    edi,[ebp+0x10]
c00016ba:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c00016be:	77 49                	ja     c0001709 <dlrealloc+0xc1>
c00016c0:	01 ea                	add    edx,ebp
c00016c2:	83 e0 01             	and    eax,0x1
c00016c5:	09 e8                	or     eax,ebp
c00016c7:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00016ca:	89 15 0c eb 02 c0    	mov    DWORD PTR ds:0xc002eb0c,edx
c00016d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00016d4:	29 e8                	sub    eax,ebp
c00016d6:	83 c8 01             	or     eax,0x1
c00016d9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00016dc:	e9 ff 00 00 00       	jmp    c00017e0 <dlrealloc+0x198>
c00016e1:	89 f8                	mov    eax,edi
c00016e3:	83 e0 fe             	and    eax,0xfffffffe
c00016e6:	f6 44 01 04 01       	test   BYTE PTR [ecx+eax*1+0x4],0x1
c00016eb:	75 1c                	jne    c0001709 <dlrealloc+0xc1>
c00016ed:	83 e7 fc             	and    edi,0xfffffffc
c00016f0:	01 df                	add    edi,ebx
c00016f2:	39 fd                	cmp    ebp,edi
c00016f4:	77 13                	ja     c0001709 <dlrealloc+0xc1>
c00016f6:	8b 59 08             	mov    ebx,DWORD PTR [ecx+0x8]
c00016f9:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c00016fc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00016ff:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
c0001702:	89 fb                	mov    ebx,edi
c0001704:	e9 9a 00 00 00       	jmp    c00017a3 <dlrealloc+0x15b>
c0001709:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000170d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0001711:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001714:	83 ec 0c             	sub    esp,0xc
c0001717:	50                   	push   eax
c0001718:	e8 ee f9 ff ff       	call   c000110b <dlmalloc>
c000171d:	83 c4 10             	add    esp,0x10
c0001720:	89 c7                	mov    edi,eax
c0001722:	85 c0                	test   eax,eax
c0001724:	0f 84 46 ff ff ff    	je     c0001670 <dlrealloc+0x28>
c000172a:	8d 40 f8             	lea    eax,[eax-0x8]
c000172d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001731:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001735:	39 c1                	cmp    ecx,eax
c0001737:	75 0a                	jne    c0001743 <dlrealloc+0xfb>
c0001739:	8b 47 fc             	mov    eax,DWORD PTR [edi-0x4]
c000173c:	83 e0 fc             	and    eax,0xfffffffc
c000173f:	01 c3                	add    ebx,eax
c0001741:	eb 60                	jmp    c00017a3 <dlrealloc+0x15b>
c0001743:	8d 4b fc             	lea    ecx,[ebx-0x4]
c0001746:	83 f9 27             	cmp    ecx,0x27
c0001749:	76 05                	jbe    c0001750 <dlrealloc+0x108>
c000174b:	fc                   	cld    
c000174c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000174e:	eb 43                	jmp    c0001793 <dlrealloc+0x14b>
c0001750:	8b 06                	mov    eax,DWORD PTR [esi]
c0001752:	83 f9 13             	cmp    ecx,0x13
c0001755:	89 07                	mov    DWORD PTR [edi],eax
c0001757:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000175a:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000175d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0001760:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c0001763:	76 2e                	jbe    c0001793 <dlrealloc+0x14b>
c0001765:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0001768:	83 f9 1b             	cmp    ecx,0x1b
c000176b:	89 47 0c             	mov    DWORD PTR [edi+0xc],eax
c000176e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0001771:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0001774:	76 1d                	jbe    c0001793 <dlrealloc+0x14b>
c0001776:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0001779:	83 f9 23             	cmp    ecx,0x23
c000177c:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000177f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0001782:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c0001785:	76 0c                	jbe    c0001793 <dlrealloc+0x14b>
c0001787:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000178a:	89 47 1c             	mov    DWORD PTR [edi+0x1c],eax
c000178d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0001790:	89 47 20             	mov    DWORD PTR [edi+0x20],eax
c0001793:	83 ec 0c             	sub    esp,0xc
c0001796:	56                   	push   esi
c0001797:	89 fe                	mov    esi,edi
c0001799:	e8 12 f6 ff ff       	call   c0000db0 <dlfree>
c000179e:	83 c4 10             	add    esp,0x10
c00017a1:	eb 3d                	jmp    c00017e0 <dlrealloc+0x198>
c00017a3:	89 df                	mov    edi,ebx
c00017a5:	8b 4e fc             	mov    ecx,DWORD PTR [esi-0x4]
c00017a8:	29 ef                	sub    edi,ebp
c00017aa:	83 e1 01             	and    ecx,0x1
c00017ad:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00017b0:	83 ff 0f             	cmp    edi,0xf
c00017b3:	77 0b                	ja     c00017c0 <dlrealloc+0x178>
c00017b5:	09 cb                	or     ebx,ecx
c00017b7:	89 5e fc             	mov    DWORD PTR [esi-0x4],ebx
c00017ba:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017be:	eb 20                	jmp    c00017e0 <dlrealloc+0x198>
c00017c0:	01 ea                	add    edx,ebp
c00017c2:	83 ec 0c             	sub    esp,0xc
c00017c5:	09 cd                	or     ebp,ecx
c00017c7:	83 c2 08             	add    edx,0x8
c00017ca:	89 6e fc             	mov    DWORD PTR [esi-0x4],ebp
c00017cd:	83 cf 01             	or     edi,0x1
c00017d0:	89 7a fc             	mov    DWORD PTR [edx-0x4],edi
c00017d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017d7:	52                   	push   edx
c00017d8:	e8 d3 f5 ff ff       	call   c0000db0 <dlfree>
c00017dd:	83 c4 10             	add    esp,0x10
c00017e0:	83 c4 1c             	add    esp,0x1c
c00017e3:	89 f0                	mov    eax,esi
c00017e5:	5b                   	pop    ebx
c00017e6:	5e                   	pop    esi
c00017e7:	5f                   	pop    edi
c00017e8:	5d                   	pop    ebp
c00017e9:	c3                   	ret    

c00017ea <dlmemalign>:
c00017ea:	55                   	push   ebp
c00017eb:	57                   	push   edi
c00017ec:	56                   	push   esi
c00017ed:	53                   	push   ebx
c00017ee:	83 ec 0c             	sub    esp,0xc
c00017f1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017f9:	83 fa 08             	cmp    edx,0x8
c00017fc:	77 10                	ja     c000180e <dlmemalign+0x24>
c00017fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001802:	83 c4 0c             	add    esp,0xc
c0001805:	5b                   	pop    ebx
c0001806:	5e                   	pop    esi
c0001807:	5f                   	pop    edi
c0001808:	5d                   	pop    ebp
c0001809:	e9 fd f8 ff ff       	jmp    c000110b <dlmalloc>
c000180e:	bf 10 00 00 00       	mov    edi,0x10
c0001813:	83 fa 0f             	cmp    edx,0xf
c0001816:	76 13                	jbe    c000182b <dlmemalign+0x41>
c0001818:	8d 4a ff             	lea    ecx,[edx-0x1]
c000181b:	85 d1                	test   ecx,edx
c000181d:	75 04                	jne    c0001823 <dlmemalign+0x39>
c000181f:	89 d7                	mov    edi,edx
c0001821:	eb 08                	jmp    c000182b <dlmemalign+0x41>
c0001823:	39 d7                	cmp    edi,edx
c0001825:	73 04                	jae    c000182b <dlmemalign+0x41>
c0001827:	01 ff                	add    edi,edi
c0001829:	eb f8                	jmp    c0001823 <dlmemalign+0x39>
c000182b:	83 f8 df             	cmp    eax,0xffffffdf
c000182e:	76 07                	jbe    c0001837 <dlmemalign+0x4d>
c0001830:	31 c0                	xor    eax,eax
c0001832:	e9 ce 00 00 00       	jmp    c0001905 <dlmemalign+0x11b>
c0001837:	83 c0 0b             	add    eax,0xb
c000183a:	bd 10 00 00 00       	mov    ebp,0x10
c000183f:	83 f8 0f             	cmp    eax,0xf
c0001842:	76 05                	jbe    c0001849 <dlmemalign+0x5f>
c0001844:	83 e0 f8             	and    eax,0xfffffff8
c0001847:	89 c5                	mov    ebp,eax
c0001849:	83 ec 0c             	sub    esp,0xc
c000184c:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001850:	50                   	push   eax
c0001851:	e8 b5 f8 ff ff       	call   c000110b <dlmalloc>
c0001856:	83 c4 10             	add    esp,0x10
c0001859:	89 c1                	mov    ecx,eax
c000185b:	85 c0                	test   eax,eax
c000185d:	74 d1                	je     c0001830 <dlmemalign+0x46>
c000185f:	31 d2                	xor    edx,edx
c0001861:	8d 70 f8             	lea    esi,[eax-0x8]
c0001864:	f7 f7                	div    edi
c0001866:	85 d2                	test   edx,edx
c0001868:	74 62                	je     c00018cc <dlmemalign+0xe2>
c000186a:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000186e:	89 f8                	mov    eax,edi
c0001870:	f7 d8                	neg    eax
c0001872:	21 c3                	and    ebx,eax
c0001874:	83 eb 08             	sub    ebx,0x8
c0001877:	89 d8                	mov    eax,ebx
c0001879:	29 f0                	sub    eax,esi
c000187b:	83 f8 0f             	cmp    eax,0xf
c000187e:	77 02                	ja     c0001882 <dlmemalign+0x98>
c0001880:	01 fb                	add    ebx,edi
c0001882:	89 d8                	mov    eax,ebx
c0001884:	29 f0                	sub    eax,esi
c0001886:	89 c6                	mov    esi,eax
c0001888:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000188b:	89 c2                	mov    edx,eax
c000188d:	83 e2 fc             	and    edx,0xfffffffc
c0001890:	29 f2                	sub    edx,esi
c0001892:	a8 02                	test   al,0x2
c0001894:	74 10                	je     c00018a6 <dlmemalign+0xbc>
c0001896:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001899:	83 ca 02             	or     edx,0x2
c000189c:	8d 43 08             	lea    eax,[ebx+0x8]
c000189f:	89 33                	mov    DWORD PTR [ebx],esi
c00018a1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018a4:	eb 5f                	jmp    c0001905 <dlmemalign+0x11b>
c00018a6:	83 ec 0c             	sub    esp,0xc
c00018a9:	89 d0                	mov    eax,edx
c00018ab:	83 c8 01             	or     eax,0x1
c00018ae:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018b1:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018b6:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018b9:	83 e0 01             	and    eax,0x1
c00018bc:	09 f0                	or     eax,esi
c00018be:	89 de                	mov    esi,ebx
c00018c0:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018c3:	51                   	push   ecx
c00018c4:	e8 e7 f4 ff ff       	call   c0000db0 <dlfree>
c00018c9:	83 c4 10             	add    esp,0x10
c00018cc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cf:	a8 02                	test   al,0x2
c00018d1:	75 2f                	jne    c0001902 <dlmemalign+0x118>
c00018d3:	83 e0 fc             	and    eax,0xfffffffc
c00018d6:	8d 55 10             	lea    edx,[ebp+0x10]
c00018d9:	39 c2                	cmp    edx,eax
c00018db:	73 25                	jae    c0001902 <dlmemalign+0x118>
c00018dd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018e0:	83 ec 0c             	sub    esp,0xc
c00018e3:	29 e8                	sub    eax,ebp
c00018e5:	83 c2 08             	add    edx,0x8
c00018e8:	83 c8 01             	or     eax,0x1
c00018eb:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018ee:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018f1:	83 e0 01             	and    eax,0x1
c00018f4:	09 c5                	or     ebp,eax
c00018f6:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018f9:	52                   	push   edx
c00018fa:	e8 b1 f4 ff ff       	call   c0000db0 <dlfree>
c00018ff:	83 c4 10             	add    esp,0x10
c0001902:	8d 46 08             	lea    eax,[esi+0x8]
c0001905:	83 c4 0c             	add    esp,0xc
c0001908:	5b                   	pop    ebx
c0001909:	5e                   	pop    esi
c000190a:	5f                   	pop    edi
c000190b:	5d                   	pop    ebp
c000190c:	c3                   	ret    

c000190d <dlcalloc>:
c000190d:	53                   	push   ebx
c000190e:	83 ec 14             	sub    esp,0x14
c0001911:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001915:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000191a:	50                   	push   eax
c000191b:	e8 eb f7 ff ff       	call   c000110b <dlmalloc>
c0001920:	83 c4 10             	add    esp,0x10
c0001923:	89 c3                	mov    ebx,eax
c0001925:	85 c0                	test   eax,eax
c0001927:	74 77                	je     c00019a0 <dlcalloc+0x93>
c0001929:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000192c:	89 d0                	mov    eax,edx
c000192e:	83 e0 fc             	and    eax,0xfffffffc
c0001931:	80 e2 02             	and    dl,0x2
c0001934:	75 5a                	jne    c0001990 <dlcalloc+0x83>
c0001936:	83 e8 04             	sub    eax,0x4
c0001939:	83 f8 27             	cmp    eax,0x27
c000193c:	76 03                	jbe    c0001941 <dlcalloc+0x34>
c000193e:	51                   	push   ecx
c000193f:	eb 53                	jmp    c0001994 <dlcalloc+0x87>
c0001941:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001947:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000194e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001955:	83 f8 13             	cmp    eax,0x13
c0001958:	76 46                	jbe    c00019a0 <dlcalloc+0x93>
c000195a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001961:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001968:	83 f8 1b             	cmp    eax,0x1b
c000196b:	76 33                	jbe    c00019a0 <dlcalloc+0x93>
c000196d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001974:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000197b:	83 f8 23             	cmp    eax,0x23
c000197e:	76 20                	jbe    c00019a0 <dlcalloc+0x93>
c0001980:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001987:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000198e:	eb 10                	jmp    c00019a0 <dlcalloc+0x93>
c0001990:	83 e8 08             	sub    eax,0x8
c0001993:	52                   	push   edx
c0001994:	50                   	push   eax
c0001995:	6a 00                	push   0x0
c0001997:	53                   	push   ebx
c0001998:	e8 cf ed ff ff       	call   c000076c <memset>
c000199d:	83 c4 10             	add    esp,0x10
c00019a0:	89 d8                	mov    eax,ebx
c00019a2:	83 c4 08             	add    esp,0x8
c00019a5:	5b                   	pop    ebx
c00019a6:	c3                   	ret    

c00019a7 <dlcfree>:
c00019a7:	e9 04 f4 ff ff       	jmp    c0000db0 <dlfree>

c00019ac <dlindependent_calloc>:
c00019ac:	83 ec 28             	sub    esp,0x28
c00019af:	b9 03 00 00 00       	mov    ecx,0x3
c00019b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019c0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019c8:	e8 cc fa ff ff       	call   c0001499 <iALLOc>
c00019cd:	83 c4 2c             	add    esp,0x2c
c00019d0:	c3                   	ret    

c00019d1 <dlindependent_comalloc>:
c00019d1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019d9:	31 c9                	xor    ecx,ecx
c00019db:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019df:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019e3:	e9 b1 fa ff ff       	jmp    c0001499 <iALLOc>

c00019e8 <dlvalloc>:
c00019e8:	83 ec 0c             	sub    esp,0xc
c00019eb:	83 3d e0 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002eae0,0x0
c00019f2:	75 0a                	jne    c00019fe <dlvalloc+0x16>
c00019f4:	b8 e0 ea 02 c0       	mov    eax,0xc002eae0
c00019f9:	e8 cb f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c00019fe:	50                   	push   eax
c00019ff:	50                   	push   eax
c0001a00:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a04:	ff 35 3c ee 02 c0    	push   DWORD PTR ds:0xc002ee3c
c0001a0a:	e8 db fd ff ff       	call   c00017ea <dlmemalign>
c0001a0f:	83 c4 1c             	add    esp,0x1c
c0001a12:	c3                   	ret    

c0001a13 <dlpvalloc>:
c0001a13:	83 ec 0c             	sub    esp,0xc
c0001a16:	83 3d e0 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002eae0,0x0
c0001a1d:	75 0a                	jne    c0001a29 <dlpvalloc+0x16>
c0001a1f:	b8 e0 ea 02 c0       	mov    eax,0xc002eae0
c0001a24:	e8 a0 f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001a29:	a1 3c ee 02 c0       	mov    eax,ds:0xc002ee3c
c0001a2e:	89 c1                	mov    ecx,eax
c0001a30:	52                   	push   edx
c0001a31:	f7 d9                	neg    ecx
c0001a33:	52                   	push   edx
c0001a34:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a38:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a3c:	21 ca                	and    edx,ecx
c0001a3e:	52                   	push   edx
c0001a3f:	50                   	push   eax
c0001a40:	e8 a5 fd ff ff       	call   c00017ea <dlmemalign>
c0001a45:	83 c4 1c             	add    esp,0x1c
c0001a48:	c3                   	ret    

c0001a49 <dlmalloc_trim>:
c0001a49:	b8 e0 ea 02 c0       	mov    eax,0xc002eae0
c0001a4e:	e8 76 f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001a53:	31 c0                	xor    eax,eax
c0001a55:	c3                   	ret    

c0001a56 <dlmalloc_usable_size>:
c0001a56:	53                   	push   ebx
c0001a57:	31 c0                	xor    eax,eax
c0001a59:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a5d:	85 c9                	test   ecx,ecx
c0001a5f:	74 24                	je     c0001a85 <dlmalloc_usable_size+0x2f>
c0001a61:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a64:	f6 c2 02             	test   dl,0x2
c0001a67:	74 08                	je     c0001a71 <dlmalloc_usable_size+0x1b>
c0001a69:	83 e2 fc             	and    edx,0xfffffffc
c0001a6c:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a6f:	eb 14                	jmp    c0001a85 <dlmalloc_usable_size+0x2f>
c0001a71:	89 d3                	mov    ebx,edx
c0001a73:	31 c0                	xor    eax,eax
c0001a75:	83 e3 fe             	and    ebx,0xfffffffe
c0001a78:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a7d:	74 06                	je     c0001a85 <dlmalloc_usable_size+0x2f>
c0001a7f:	83 e2 fc             	and    edx,0xfffffffc
c0001a82:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a85:	5b                   	pop    ebx
c0001a86:	c3                   	ret    

c0001a87 <dlmallinfo>:
c0001a87:	55                   	push   ebp
c0001a88:	57                   	push   edi
c0001a89:	56                   	push   esi
c0001a8a:	53                   	push   ebx
c0001a8b:	83 ec 08             	sub    esp,0x8
c0001a8e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a92:	83 3d 0c eb 02 c0 00 	cmp    DWORD PTR ds:0xc002eb0c,0x0
c0001a99:	75 0a                	jne    c0001aa5 <dlmallinfo+0x1e>
c0001a9b:	b8 e0 ea 02 c0       	mov    eax,0xc002eae0
c0001aa0:	e8 24 f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001aa5:	a1 0c eb 02 c0       	mov    eax,ds:0xc002eb0c
c0001aaa:	31 ed                	xor    ebp,ebp
c0001aac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001aaf:	31 c9                	xor    ecx,ecx
c0001ab1:	83 e0 fc             	and    eax,0xfffffffc
c0001ab4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ab8:	31 c0                	xor    eax,eax
c0001aba:	8b 14 85 e4 ea 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd151c]
c0001ac1:	85 d2                	test   edx,edx
c0001ac3:	74 0e                	je     c0001ad3 <dlmallinfo+0x4c>
c0001ac5:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ac8:	45                   	inc    ebp
c0001ac9:	83 e6 fc             	and    esi,0xfffffffc
c0001acc:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001acf:	01 f1                	add    ecx,esi
c0001ad1:	eb ee                	jmp    c0001ac1 <dlmallinfo+0x3a>
c0001ad3:	40                   	inc    eax
c0001ad4:	83 f8 0a             	cmp    eax,0xa
c0001ad7:	75 e1                	jne    c0001aba <dlmallinfo+0x33>
c0001ad9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001add:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ae4:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ae7:	b8 14 eb 02 c0       	mov    eax,0xc002eb14
c0001aec:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aef:	39 f0                	cmp    eax,esi
c0001af1:	74 10                	je     c0001b03 <dlmallinfo+0x7c>
c0001af3:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001af6:	ff 04 24             	inc    DWORD PTR [esp]
c0001af9:	83 e7 fc             	and    edi,0xfffffffc
c0001afc:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aff:	01 fa                	add    edx,edi
c0001b01:	eb ec                	jmp    c0001aef <dlmallinfo+0x68>
c0001b03:	83 c0 08             	add    eax,0x8
c0001b06:	3d 0c ee 02 c0       	cmp    eax,0xc002ee0c
c0001b0b:	75 df                	jne    c0001aec <dlmallinfo+0x65>
c0001b0d:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b10:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b13:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b16:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0001b1b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b1e:	89 03                	mov    DWORD PTR [ebx],eax
c0001b20:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b23:	8b 35 30 ee 02 c0    	mov    esi,DWORD PTR ds:0xc002ee30
c0001b29:	29 d0                	sub    eax,edx
c0001b2b:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b2e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b31:	8b 35 44 ee 02 c0    	mov    esi,DWORD PTR ds:0xc002ee44
c0001b37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b3b:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b3e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b41:	8b 35 54 ee 02 c0    	mov    esi,DWORD PTR ds:0xc002ee54
c0001b47:	89 d8                	mov    eax,ebx
c0001b49:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b4c:	83 c4 08             	add    esp,0x8
c0001b4f:	5b                   	pop    ebx
c0001b50:	5e                   	pop    esi
c0001b51:	5f                   	pop    edi
c0001b52:	5d                   	pop    ebp
c0001b53:	c2 04 00             	ret    0x4

c0001b56 <dlmalloc_stats>:
c0001b56:	83 ec 30             	sub    esp,0x30
c0001b59:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b5d:	50                   	push   eax
c0001b5e:	e8 24 ff ff ff       	call   c0001a87 <dlmallinfo>
c0001b63:	83 c4 30             	add    esp,0x30
c0001b66:	c3                   	ret    

c0001b67 <dlmallopt>:
c0001b67:	56                   	push   esi
c0001b68:	b8 e0 ea 02 c0       	mov    eax,0xc002eae0
c0001b6d:	53                   	push   ebx
c0001b6e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b72:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b76:	e8 4e f1 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001b7b:	8d 46 04             	lea    eax,[esi+0x4]
c0001b7e:	83 f8 05             	cmp    eax,0x5
c0001b81:	77 67                	ja     c0001bea <dlmallopt+0x83>
c0001b83:	ff 24 85 c4 9c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd633c]
c0001b8a:	83 fb 50             	cmp    ebx,0x50
c0001b8d:	77 5b                	ja     c0001bea <dlmallopt+0x83>
c0001b8f:	ba 08 00 00 00       	mov    edx,0x8
c0001b94:	85 db                	test   ebx,ebx
c0001b96:	74 12                	je     c0001baa <dlmallopt+0x43>
c0001b98:	83 c3 0b             	add    ebx,0xb
c0001b9b:	ba 10 00 00 00       	mov    edx,0x10
c0001ba0:	83 fb 0f             	cmp    ebx,0xf
c0001ba3:	76 05                	jbe    c0001baa <dlmallopt+0x43>
c0001ba5:	89 da                	mov    edx,ebx
c0001ba7:	83 e2 f8             	and    edx,0xfffffff8
c0001baa:	a1 e0 ea 02 c0       	mov    eax,ds:0xc002eae0
c0001baf:	83 e0 03             	and    eax,0x3
c0001bb2:	09 d0                	or     eax,edx
c0001bb4:	a3 e0 ea 02 c0       	mov    ds:0xc002eae0,eax
c0001bb9:	eb 31                	jmp    c0001bec <dlmallopt+0x85>
c0001bbb:	89 1d 24 ee 02 c0    	mov    DWORD PTR ds:0xc002ee24,ebx
c0001bc1:	eb 06                	jmp    c0001bc9 <dlmallopt+0x62>
c0001bc3:	89 1d 28 ee 02 c0    	mov    DWORD PTR ds:0xc002ee28,ebx
c0001bc9:	be 01 00 00 00       	mov    esi,0x1
c0001bce:	eb 1c                	jmp    c0001bec <dlmallopt+0x85>
c0001bd0:	89 1d 2c ee 02 c0    	mov    DWORD PTR ds:0xc002ee2c,ebx
c0001bd6:	eb f1                	jmp    c0001bc9 <dlmallopt+0x62>
c0001bd8:	31 f6                	xor    esi,esi
c0001bda:	85 db                	test   ebx,ebx
c0001bdc:	75 0e                	jne    c0001bec <dlmallopt+0x85>
c0001bde:	c7 05 34 ee 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ee34,0x0
c0001be8:	eb df                	jmp    c0001bc9 <dlmallopt+0x62>
c0001bea:	31 f6                	xor    esi,esi
c0001bec:	89 f0                	mov    eax,esi
c0001bee:	5b                   	pop    ebx
c0001bef:	5e                   	pop    esi
c0001bf0:	c3                   	ret    

c0001bf1 <disk_status>:
c0001bf1:	31 c0                	xor    eax,eax
c0001bf3:	c3                   	ret    

c0001bf4 <disk_initialize>:
c0001bf4:	31 c0                	xor    eax,eax
c0001bf6:	c3                   	ret    

c0001bf7 <disk_read>:
c0001bf7:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bfc:	0f b6 04 85 c0 25 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcda40]
c0001c04:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c08:	e9 9f f9 01 00       	jmp    c00215ac <fatWrapperReadDisk>

c0001c0d <disk_write>:
c0001c0d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c12:	0f b6 04 85 c0 25 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcda40]
c0001c1a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c1e:	e9 d0 f9 01 00       	jmp    c00215f3 <fatWrapperWriteDisk>

c0001c23 <disk_ioctl>:
c0001c23:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 c0 25 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcda40]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 f8 f9 01 00       	jmp    c002163a <fatWrapperIoctl>

c0001c42 <ld_word>:
c0001c42:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c46:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c49:	c1 e2 08             	shl    edx,0x8
c0001c4c:	09 d0                	or     eax,edx
c0001c4e:	c3                   	ret    

c0001c4f <ld_dword>:
c0001c4f:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c53:	89 d1                	mov    ecx,edx
c0001c55:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c59:	c1 e1 08             	shl    ecx,0x8
c0001c5c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c5f:	09 ca                	or     edx,ecx
c0001c61:	c1 e2 08             	shl    edx,0x8
c0001c64:	09 d0                	or     eax,edx
c0001c66:	c3                   	ret    

c0001c67 <ld_qword>:
c0001c67:	57                   	push   edi
c0001c68:	56                   	push   esi
c0001c69:	53                   	push   ebx
c0001c6a:	31 db                	xor    ebx,ebx
c0001c6c:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c6f:	89 df                	mov    edi,ebx
c0001c71:	89 ce                	mov    esi,ecx
c0001c73:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c77:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7b:	c1 e6 08             	shl    esi,0x8
c0001c7e:	09 f2                	or     edx,esi
c0001c80:	89 d6                	mov    esi,edx
c0001c82:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c86:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c8a:	c1 e6 08             	shl    esi,0x8
c0001c8d:	09 f2                	or     edx,esi
c0001c8f:	89 d6                	mov    esi,edx
c0001c91:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c95:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c99:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c9c:	c1 e6 08             	shl    esi,0x8
c0001c9f:	89 fb                	mov    ebx,edi
c0001ca1:	09 f2                	or     edx,esi
c0001ca3:	89 d1                	mov    ecx,edx
c0001ca5:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001ca9:	c1 e1 08             	shl    ecx,0x8
c0001cac:	89 da                	mov    edx,ebx
c0001cae:	09 c8                	or     eax,ecx
c0001cb0:	5b                   	pop    ebx
c0001cb1:	5e                   	pop    esi
c0001cb2:	5f                   	pop    edi
c0001cb3:	c3                   	ret    

c0001cb4 <st_word>:
c0001cb4:	66 89 10             	mov    WORD PTR [eax],dx
c0001cb7:	c3                   	ret    

c0001cb8 <st_dword>:
c0001cb8:	89 10                	mov    DWORD PTR [eax],edx
c0001cba:	c3                   	ret    

c0001cbb <st_qword>:
c0001cbb:	89 10                	mov    DWORD PTR [eax],edx
c0001cbd:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cc0:	c3                   	ret    

c0001cc1 <mem_cpy>:
c0001cc1:	85 c9                	test   ecx,ecx
c0001cc3:	74 10                	je     c0001cd5 <mem_cpy+0x14>
c0001cc5:	57                   	push   edi
c0001cc6:	01 c1                	add    ecx,eax
c0001cc8:	56                   	push   esi
c0001cc9:	89 c7                	mov    edi,eax
c0001ccb:	89 d6                	mov    esi,edx
c0001ccd:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cce:	39 f9                	cmp    ecx,edi
c0001cd0:	75 fb                	jne    c0001ccd <mem_cpy+0xc>
c0001cd2:	5e                   	pop    esi
c0001cd3:	5f                   	pop    edi
c0001cd4:	c3                   	ret    
c0001cd5:	c3                   	ret    

c0001cd6 <mem_set>:
c0001cd6:	01 c1                	add    ecx,eax
c0001cd8:	40                   	inc    eax
c0001cd9:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cdc:	39 c8                	cmp    eax,ecx
c0001cde:	75 f8                	jne    c0001cd8 <mem_set+0x2>
c0001ce0:	c3                   	ret    

c0001ce1 <mem_cmp>:
c0001ce1:	57                   	push   edi
c0001ce2:	56                   	push   esi
c0001ce3:	89 c6                	mov    esi,eax
c0001ce5:	53                   	push   ebx
c0001ce6:	46                   	inc    esi
c0001ce7:	42                   	inc    edx
c0001ce8:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cec:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cf0:	29 fb                	sub    ebx,edi
c0001cf2:	89 cf                	mov    edi,ecx
c0001cf4:	29 f7                	sub    edi,esi
c0001cf6:	01 c7                	add    edi,eax
c0001cf8:	74 04                	je     c0001cfe <mem_cmp+0x1d>
c0001cfa:	85 db                	test   ebx,ebx
c0001cfc:	74 e8                	je     c0001ce6 <mem_cmp+0x5>
c0001cfe:	89 d8                	mov    eax,ebx
c0001d00:	5b                   	pop    ebx
c0001d01:	5e                   	pop    esi
c0001d02:	5f                   	pop    edi
c0001d03:	c3                   	ret    

c0001d04 <chk_chr>:
c0001d04:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d07:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d0a:	74 07                	je     c0001d13 <chk_chr+0xf>
c0001d0c:	39 d1                	cmp    ecx,edx
c0001d0e:	74 03                	je     c0001d13 <chk_chr+0xf>
c0001d10:	40                   	inc    eax
c0001d11:	eb f1                	jmp    c0001d04 <chk_chr>
c0001d13:	89 c8                	mov    eax,ecx
c0001d15:	c3                   	ret    

c0001d16 <dbc_1st>:
c0001d16:	31 c0                	xor    eax,eax
c0001d18:	c3                   	ret    

c0001d19 <dbc_2nd>:
c0001d19:	31 c0                	xor    eax,eax
c0001d1b:	c3                   	ret    

c0001d1c <tchar2uni>:
c0001d1c:	57                   	push   edi
c0001d1d:	89 c7                	mov    edi,eax
c0001d1f:	56                   	push   esi
c0001d20:	53                   	push   ebx
c0001d21:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d23:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d25:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d28:	84 c9                	test   cl,cl
c0001d2a:	78 0a                	js     c0001d36 <tchar2uni+0x1a>
c0001d2c:	0f b6 d1             	movzx  edx,cl
c0001d2f:	89 f3                	mov    ebx,esi
c0001d31:	e9 9f 00 00 00       	jmp    c0001dd5 <tchar2uni+0xb9>
c0001d36:	88 ca                	mov    dl,cl
c0001d38:	83 e2 e0             	and    edx,0xffffffe0
c0001d3b:	80 fa c0             	cmp    dl,0xc0
c0001d3e:	75 0c                	jne    c0001d4c <tchar2uni+0x30>
c0001d40:	89 ca                	mov    edx,ecx
c0001d42:	b9 01 00 00 00       	mov    ecx,0x1
c0001d47:	83 e2 1f             	and    edx,0x1f
c0001d4a:	eb 2e                	jmp    c0001d7a <tchar2uni+0x5e>
c0001d4c:	88 ca                	mov    dl,cl
c0001d4e:	83 e2 f0             	and    edx,0xfffffff0
c0001d51:	80 fa e0             	cmp    dl,0xe0
c0001d54:	75 0c                	jne    c0001d62 <tchar2uni+0x46>
c0001d56:	89 ca                	mov    edx,ecx
c0001d58:	b9 02 00 00 00       	mov    ecx,0x2
c0001d5d:	83 e2 0f             	and    edx,0xf
c0001d60:	eb 18                	jmp    c0001d7a <tchar2uni+0x5e>
c0001d62:	88 ca                	mov    dl,cl
c0001d64:	83 e2 f8             	and    edx,0xfffffff8
c0001d67:	88 d0                	mov    al,dl
c0001d69:	83 ca ff             	or     edx,0xffffffff
c0001d6c:	3c f0                	cmp    al,0xf0
c0001d6e:	75 6c                	jne    c0001ddc <tchar2uni+0xc0>
c0001d70:	89 ca                	mov    edx,ecx
c0001d72:	b9 03 00 00 00       	mov    ecx,0x3
c0001d77:	83 e2 07             	and    edx,0x7
c0001d7a:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d7e:	46                   	inc    esi
c0001d7f:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d82:	88 c8                	mov    al,cl
c0001d84:	83 e0 c0             	and    eax,0xffffffc0
c0001d87:	3c 80                	cmp    al,0x80
c0001d89:	75 4e                	jne    c0001dd9 <tchar2uni+0xbd>
c0001d8b:	c1 e2 06             	shl    edx,0x6
c0001d8e:	83 e1 3f             	and    ecx,0x3f
c0001d91:	09 ca                	or     edx,ecx
c0001d93:	39 de                	cmp    esi,ebx
c0001d95:	75 e7                	jne    c0001d7e <tchar2uni+0x62>
c0001d97:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d9a:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001da0:	77 37                	ja     c0001dd9 <tchar2uni+0xbd>
c0001da2:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001da8:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dae:	76 29                	jbe    c0001dd9 <tchar2uni+0xbd>
c0001db0:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001db6:	76 1d                	jbe    c0001dd5 <tchar2uni+0xb9>
c0001db8:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001dbe:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001dc4:	c1 e1 06             	shl    ecx,0x6
c0001dc7:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dcd:	09 ca                	or     edx,ecx
c0001dcf:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dd5:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dd7:	eb 03                	jmp    c0001ddc <tchar2uni+0xc0>
c0001dd9:	83 ca ff             	or     edx,0xffffffff
c0001ddc:	5b                   	pop    ebx
c0001ddd:	89 d0                	mov    eax,edx
c0001ddf:	5e                   	pop    esi
c0001de0:	5f                   	pop    edi
c0001de1:	c3                   	ret    

c0001de2 <put_utf>:
c0001de2:	53                   	push   ebx
c0001de3:	83 f8 7f             	cmp    eax,0x7f
c0001de6:	89 c3                	mov    ebx,eax
c0001de8:	b0 00                	mov    al,0x0
c0001dea:	77 11                	ja     c0001dfd <put_utf+0x1b>
c0001dec:	85 c9                	test   ecx,ecx
c0001dee:	0f 84 e5 00 00 00    	je     c0001ed9 <put_utf+0xf7>
c0001df4:	88 1a                	mov    BYTE PTR [edx],bl
c0001df6:	b0 01                	mov    al,0x1
c0001df8:	e9 dc 00 00 00       	jmp    c0001ed9 <put_utf+0xf7>
c0001dfd:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e03:	77 23                	ja     c0001e28 <put_utf+0x46>
c0001e05:	83 f9 01             	cmp    ecx,0x1
c0001e08:	0f 86 cb 00 00 00    	jbe    c0001ed9 <put_utf+0xf7>
c0001e0e:	89 d8                	mov    eax,ebx
c0001e10:	83 e3 3f             	and    ebx,0x3f
c0001e13:	c1 e8 06             	shr    eax,0x6
c0001e16:	83 cb 80             	or     ebx,0xffffff80
c0001e19:	83 c8 c0             	or     eax,0xffffffc0
c0001e1c:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e1f:	88 02                	mov    BYTE PTR [edx],al
c0001e21:	b0 02                	mov    al,0x2
c0001e23:	e9 b1 00 00 00       	jmp    c0001ed9 <put_utf+0xf7>
c0001e28:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e2e:	77 40                	ja     c0001e70 <put_utf+0x8e>
c0001e30:	83 f9 02             	cmp    ecx,0x2
c0001e33:	0f 86 a0 00 00 00    	jbe    c0001ed9 <put_utf+0xf7>
c0001e39:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e3f:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e45:	0f 86 8e 00 00 00    	jbe    c0001ed9 <put_utf+0xf7>
c0001e4b:	89 d8                	mov    eax,ebx
c0001e4d:	c1 e8 0c             	shr    eax,0xc
c0001e50:	83 c8 e0             	or     eax,0xffffffe0
c0001e53:	88 02                	mov    BYTE PTR [edx],al
c0001e55:	89 d8                	mov    eax,ebx
c0001e57:	83 e3 3f             	and    ebx,0x3f
c0001e5a:	c1 e8 06             	shr    eax,0x6
c0001e5d:	83 cb 80             	or     ebx,0xffffff80
c0001e60:	83 e0 3f             	and    eax,0x3f
c0001e63:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e66:	83 c8 80             	or     eax,0xffffff80
c0001e69:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e6c:	b0 03                	mov    al,0x3
c0001e6e:	eb 69                	jmp    c0001ed9 <put_utf+0xf7>
c0001e70:	83 f9 03             	cmp    ecx,0x3
c0001e73:	76 64                	jbe    c0001ed9 <put_utf+0xf7>
c0001e75:	89 d9                	mov    ecx,ebx
c0001e77:	0f b7 c3             	movzx  eax,bx
c0001e7a:	66 31 c9             	xor    cx,cx
c0001e7d:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e83:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e89:	c1 e9 06             	shr    ecx,0x6
c0001e8c:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e92:	77 43                	ja     c0001ed7 <put_utf+0xf5>
c0001e94:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e9a:	77 3b                	ja     c0001ed7 <put_utf+0xf5>
c0001e9c:	09 cb                	or     ebx,ecx
c0001e9e:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ea4:	89 d8                	mov    eax,ebx
c0001ea6:	c1 e8 12             	shr    eax,0x12
c0001ea9:	83 c8 f0             	or     eax,0xfffffff0
c0001eac:	88 02                	mov    BYTE PTR [edx],al
c0001eae:	89 d8                	mov    eax,ebx
c0001eb0:	c1 e8 0c             	shr    eax,0xc
c0001eb3:	83 e0 3f             	and    eax,0x3f
c0001eb6:	83 c8 80             	or     eax,0xffffff80
c0001eb9:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ebc:	89 d8                	mov    eax,ebx
c0001ebe:	83 e3 3f             	and    ebx,0x3f
c0001ec1:	c1 e8 06             	shr    eax,0x6
c0001ec4:	83 cb 80             	or     ebx,0xffffff80
c0001ec7:	83 e0 3f             	and    eax,0x3f
c0001eca:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001ecd:	83 c8 80             	or     eax,0xffffff80
c0001ed0:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ed3:	b0 04                	mov    al,0x4
c0001ed5:	eb 02                	jmp    c0001ed9 <put_utf+0xf7>
c0001ed7:	31 c0                	xor    eax,eax
c0001ed9:	5b                   	pop    ebx
c0001eda:	c3                   	ret    

c0001edb <clst2sect>:
c0001edb:	89 c1                	mov    ecx,eax
c0001edd:	83 ea 02             	sub    edx,0x2
c0001ee0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ee3:	83 e8 02             	sub    eax,0x2
c0001ee6:	39 d0                	cmp    eax,edx
c0001ee8:	76 0d                	jbe    c0001ef7 <clst2sect+0x1c>
c0001eea:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001eee:	f7 e2                	mul    edx
c0001ef0:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ef3:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001ef6:	c3                   	ret    
c0001ef7:	31 c0                	xor    eax,eax
c0001ef9:	31 d2                	xor    edx,edx
c0001efb:	c3                   	ret    

c0001efc <clmt_clust>:
c0001efc:	57                   	push   edi
c0001efd:	89 cf                	mov    edi,ecx
c0001eff:	56                   	push   esi
c0001f00:	89 d6                	mov    esi,edx
c0001f02:	53                   	push   ebx
c0001f03:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f07:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f0a:	89 f2                	mov    edx,esi
c0001f0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f0e:	c1 ef 09             	shr    edi,0x9
c0001f11:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f15:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f18:	89 f9                	mov    ecx,edi
c0001f1a:	31 ff                	xor    edi,edi
c0001f1c:	57                   	push   edi
c0001f1d:	56                   	push   esi
c0001f1e:	51                   	push   ecx
c0001f1f:	52                   	push   edx
c0001f20:	e8 3f 53 02 00       	call   c0027264 <__udivdi3>
c0001f25:	83 c4 10             	add    esp,0x10
c0001f28:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f2a:	85 d2                	test   edx,edx
c0001f2c:	74 10                	je     c0001f3e <clmt_clust+0x42>
c0001f2e:	39 d0                	cmp    eax,edx
c0001f30:	72 07                	jb     c0001f39 <clmt_clust+0x3d>
c0001f32:	29 d0                	sub    eax,edx
c0001f34:	83 c3 08             	add    ebx,0x8
c0001f37:	eb ef                	jmp    c0001f28 <clmt_clust+0x2c>
c0001f39:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f3c:	89 c2                	mov    edx,eax
c0001f3e:	5b                   	pop    ebx
c0001f3f:	89 d0                	mov    eax,edx
c0001f41:	5e                   	pop    esi
c0001f42:	5f                   	pop    edi
c0001f43:	c3                   	ret    

c0001f44 <pick_lfn>:
c0001f44:	55                   	push   ebp
c0001f45:	57                   	push   edi
c0001f46:	56                   	push   esi
c0001f47:	89 d6                	mov    esi,edx
c0001f49:	53                   	push   ebx
c0001f4a:	89 c3                	mov    ebx,eax
c0001f4c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f4f:	e8 ee fc ff ff       	call   c0001c42 <ld_word>
c0001f54:	66 85 c0             	test   ax,ax
c0001f57:	74 04                	je     c0001f5d <pick_lfn+0x19>
c0001f59:	31 c0                	xor    eax,eax
c0001f5b:	eb 5c                	jmp    c0001fb9 <pick_lfn+0x75>
c0001f5d:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f60:	bd 01 00 00 00       	mov    ebp,0x1
c0001f65:	83 e1 bf             	and    ecx,0xffffffbf
c0001f68:	31 ff                	xor    edi,edi
c0001f6a:	49                   	dec    ecx
c0001f6b:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f6e:	0f b6 87 e0 9d 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6220]
c0001f75:	01 f0                	add    eax,esi
c0001f77:	e8 c6 fc ff ff       	call   c0001c42 <ld_word>
c0001f7c:	66 85 ed             	test   bp,bp
c0001f7f:	74 11                	je     c0001f92 <pick_lfn+0x4e>
c0001f81:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f87:	77 d0                	ja     c0001f59 <pick_lfn+0x15>
c0001f89:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f8d:	89 c5                	mov    ebp,eax
c0001f8f:	41                   	inc    ecx
c0001f90:	eb 04                	jmp    c0001f96 <pick_lfn+0x52>
c0001f92:	66 40                	inc    ax
c0001f94:	75 c3                	jne    c0001f59 <pick_lfn+0x15>
c0001f96:	47                   	inc    edi
c0001f97:	83 ff 0d             	cmp    edi,0xd
c0001f9a:	75 d2                	jne    c0001f6e <pick_lfn+0x2a>
c0001f9c:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f9f:	74 13                	je     c0001fb4 <pick_lfn+0x70>
c0001fa1:	66 85 ed             	test   bp,bp
c0001fa4:	74 0e                	je     c0001fb4 <pick_lfn+0x70>
c0001fa6:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fac:	77 ab                	ja     c0001f59 <pick_lfn+0x15>
c0001fae:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fb4:	b8 01 00 00 00       	mov    eax,0x1
c0001fb9:	5b                   	pop    ebx
c0001fba:	5e                   	pop    esi
c0001fbb:	5f                   	pop    edi
c0001fbc:	5d                   	pop    ebp
c0001fbd:	c3                   	ret    

c0001fbe <put_lfn>:
c0001fbe:	55                   	push   ebp
c0001fbf:	31 ed                	xor    ebp,ebp
c0001fc1:	57                   	push   edi
c0001fc2:	89 d7                	mov    edi,edx
c0001fc4:	56                   	push   esi
c0001fc5:	31 f6                	xor    esi,esi
c0001fc7:	53                   	push   ebx
c0001fc8:	83 ec 08             	sub    esp,0x8
c0001fcb:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fce:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fd2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fd6:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fdc:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fdf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fe2:	31 d2                	xor    edx,edx
c0001fe4:	e8 cb fc ff ff       	call   c0001cb4 <st_word>
c0001fe9:	0f b6 d9             	movzx  ebx,cl
c0001fec:	4b                   	dec    ebx
c0001fed:	6b db 0d             	imul   ebx,ebx,0xd
c0001ff0:	66 83 fe ff          	cmp    si,0xffff
c0001ff4:	74 08                	je     c0001ffe <put_lfn+0x40>
c0001ff6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001ff9:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001ffd:	43                   	inc    ebx
c0001ffe:	0f b6 85 e0 9d 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6220]
c0002005:	0f b7 d6             	movzx  edx,si
c0002008:	01 f8                	add    eax,edi
c000200a:	e8 a5 fc ff ff       	call   c0001cb4 <st_word>
c000200f:	66 85 f6             	test   si,si
c0002012:	75 03                	jne    c0002017 <put_lfn+0x59>
c0002014:	83 ce ff             	or     esi,0xffffffff
c0002017:	45                   	inc    ebp
c0002018:	83 fd 0d             	cmp    ebp,0xd
c000201b:	75 d3                	jne    c0001ff0 <put_lfn+0x32>
c000201d:	66 46                	inc    si
c000201f:	74 0a                	je     c000202b <put_lfn+0x6d>
c0002021:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002024:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002029:	75 09                	jne    c0002034 <put_lfn+0x76>
c000202b:	88 c8                	mov    al,cl
c000202d:	83 c8 40             	or     eax,0x40
c0002030:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002034:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002038:	88 07                	mov    BYTE PTR [edi],al
c000203a:	83 c4 08             	add    esp,0x8
c000203d:	5b                   	pop    ebx
c000203e:	5e                   	pop    esi
c000203f:	5f                   	pop    edi
c0002040:	5d                   	pop    ebp
c0002041:	c3                   	ret    

c0002042 <gen_numname>:
c0002042:	57                   	push   edi
c0002043:	89 cf                	mov    edi,ecx
c0002045:	56                   	push   esi
c0002046:	b9 0b 00 00 00       	mov    ecx,0xb
c000204b:	53                   	push   ebx
c000204c:	89 c6                	mov    esi,eax
c000204e:	83 ec 10             	sub    esp,0x10
c0002051:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002055:	e8 67 fc ff ff       	call   c0001cc1 <mem_cpy>
c000205a:	83 fb 05             	cmp    ebx,0x5
c000205d:	76 2d                	jbe    c000208c <gen_numname+0x4a>
c000205f:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002062:	66 85 c0             	test   ax,ax
c0002065:	74 25                	je     c000208c <gen_numname+0x4a>
c0002067:	83 c7 02             	add    edi,0x2
c000206a:	ba 10 00 00 00       	mov    edx,0x10
c000206f:	01 db                	add    ebx,ebx
c0002071:	89 c1                	mov    ecx,eax
c0002073:	66 d1 e8             	shr    ax,1
c0002076:	83 e1 01             	and    ecx,0x1
c0002079:	01 cb                	add    ebx,ecx
c000207b:	0f ba e3 10          	bt     ebx,0x10
c000207f:	73 06                	jae    c0002087 <gen_numname+0x45>
c0002081:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002087:	4a                   	dec    edx
c0002088:	75 e5                	jne    c000206f <gen_numname+0x2d>
c000208a:	eb d3                	jmp    c000205f <gen_numname+0x1d>
c000208c:	b8 07 00 00 00       	mov    eax,0x7
c0002091:	88 d9                	mov    cl,bl
c0002093:	83 e1 0f             	and    ecx,0xf
c0002096:	8d 51 30             	lea    edx,[ecx+0x30]
c0002099:	80 fa 39             	cmp    dl,0x39
c000209c:	76 03                	jbe    c00020a1 <gen_numname+0x5f>
c000209e:	8d 51 37             	lea    edx,[ecx+0x37]
c00020a1:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020a4:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020a8:	89 da                	mov    edx,ebx
c00020aa:	c1 ea 04             	shr    edx,0x4
c00020ad:	83 fb 0f             	cmp    ebx,0xf
c00020b0:	76 06                	jbe    c00020b8 <gen_numname+0x76>
c00020b2:	89 c8                	mov    eax,ecx
c00020b4:	89 d3                	mov    ebx,edx
c00020b6:	eb d9                	jmp    c0002091 <gen_numname+0x4f>
c00020b8:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020bd:	31 d2                	xor    edx,edx
c00020bf:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020c2:	8d 04 16             	lea    eax,[esi+edx*1]
c00020c5:	39 ca                	cmp    edx,ecx
c00020c7:	73 18                	jae    c00020e1 <gen_numname+0x9f>
c00020c9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020cc:	3c 20                	cmp    al,0x20
c00020ce:	74 11                	je     c00020e1 <gen_numname+0x9f>
c00020d0:	e8 41 fc ff ff       	call   c0001d16 <dbc_1st>
c00020d5:	85 c0                	test   eax,eax
c00020d7:	74 05                	je     c00020de <gen_numname+0x9c>
c00020d9:	39 d3                	cmp    ebx,edx
c00020db:	74 04                	je     c00020e1 <gen_numname+0x9f>
c00020dd:	42                   	inc    edx
c00020de:	42                   	inc    edx
c00020df:	eb e1                	jmp    c00020c2 <gen_numname+0x80>
c00020e1:	b0 20                	mov    al,0x20
c00020e3:	83 f9 07             	cmp    ecx,0x7
c00020e6:	77 05                	ja     c00020ed <gen_numname+0xab>
c00020e8:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020ec:	41                   	inc    ecx
c00020ed:	42                   	inc    edx
c00020ee:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020f2:	83 fa 07             	cmp    edx,0x7
c00020f5:	76 ea                	jbe    c00020e1 <gen_numname+0x9f>
c00020f7:	83 c4 10             	add    esp,0x10
c00020fa:	5b                   	pop    ebx
c00020fb:	5e                   	pop    esi
c00020fc:	5f                   	pop    edi
c00020fd:	c3                   	ret    

c00020fe <sum_sfn>:
c00020fe:	31 c9                	xor    ecx,ecx
c0002100:	31 d2                	xor    edx,edx
c0002102:	d0 ca                	ror    dl,1
c0002104:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002107:	41                   	inc    ecx
c0002108:	83 f9 0b             	cmp    ecx,0xb
c000210b:	75 f5                	jne    c0002102 <sum_sfn+0x4>
c000210d:	88 d0                	mov    al,dl
c000210f:	c3                   	ret    

c0002110 <xdir_sum>:
c0002110:	56                   	push   esi
c0002111:	31 c9                	xor    ecx,ecx
c0002113:	53                   	push   ebx
c0002114:	31 d2                	xor    edx,edx
c0002116:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c000211a:	43                   	inc    ebx
c000211b:	c1 e3 05             	shl    ebx,0x5
c000211e:	83 fa 02             	cmp    edx,0x2
c0002121:	74 0b                	je     c000212e <xdir_sum+0x1e>
c0002123:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002127:	66 d1 c9             	ror    cx,1
c000212a:	01 f1                	add    ecx,esi
c000212c:	eb 05                	jmp    c0002133 <xdir_sum+0x23>
c000212e:	ba 03 00 00 00       	mov    edx,0x3
c0002133:	42                   	inc    edx
c0002134:	39 d3                	cmp    ebx,edx
c0002136:	77 e6                	ja     c000211e <xdir_sum+0xe>
c0002138:	89 c8                	mov    eax,ecx
c000213a:	5b                   	pop    ebx
c000213b:	5e                   	pop    esi
c000213c:	c3                   	ret    

c000213d <xsum32>:
c000213d:	d1 ca                	ror    edx,1
c000213f:	0f b6 c0             	movzx  eax,al
c0002142:	01 d0                	add    eax,edx
c0002144:	c3                   	ret    

c0002145 <get_xfileinfo>:
c0002145:	55                   	push   ebp
c0002146:	31 c9                	xor    ecx,ecx
c0002148:	57                   	push   edi
c0002149:	bd 40 00 00 00       	mov    ebp,0x40
c000214e:	56                   	push   esi
c000214f:	31 ff                	xor    edi,edi
c0002151:	53                   	push   ebx
c0002152:	89 c6                	mov    esi,eax
c0002154:	83 ec 0c             	sub    esp,0xc
c0002157:	89 d3                	mov    ebx,edx
c0002159:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002160:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002164:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002167:	76 6d                	jbe    c00021d6 <get_xfileinfo+0x91>
c0002169:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000216f:	76 0b                	jbe    c000217c <get_xfileinfo+0x37>
c0002171:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002175:	bf 01 00 00 00       	mov    edi,0x1
c000217a:	eb 63                	jmp    c00021df <get_xfileinfo+0x9a>
c000217c:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002182:	75 03                	jne    c0002187 <get_xfileinfo+0x42>
c0002184:	83 c5 02             	add    ebp,0x2
c0002187:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000218a:	83 c5 02             	add    ebp,0x2
c000218d:	e8 b0 fa ff ff       	call   c0001c42 <ld_word>
c0002192:	ff 04 24             	inc    DWORD PTR [esp]
c0002195:	66 85 c9             	test   cx,cx
c0002198:	75 0d                	jne    c00021a7 <get_xfileinfo+0x62>
c000219a:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021a0:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021a5:	76 2b                	jbe    c00021d2 <get_xfileinfo+0x8d>
c00021a7:	c1 e1 10             	shl    ecx,0x10
c00021aa:	ba ff 00 00 00       	mov    edx,0xff
c00021af:	0f b7 c0             	movzx  eax,ax
c00021b2:	29 fa                	sub    edx,edi
c00021b4:	09 c8                	or     eax,ecx
c00021b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021ba:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021be:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021c2:	e8 1b fc ff ff       	call   c0001de2 <put_utf>
c00021c7:	84 c0                	test   al,al
c00021c9:	74 a6                	je     c0002171 <get_xfileinfo+0x2c>
c00021cb:	0f b6 c0             	movzx  eax,al
c00021ce:	01 c7                	add    edi,eax
c00021d0:	31 c0                	xor    eax,eax
c00021d2:	89 c1                	mov    ecx,eax
c00021d4:	eb 8a                	jmp    c0002160 <get_xfileinfo+0x1b>
c00021d6:	85 ff                	test   edi,edi
c00021d8:	74 97                	je     c0002171 <get_xfileinfo+0x2c>
c00021da:	66 85 c9             	test   cx,cx
c00021dd:	75 92                	jne    c0002171 <get_xfileinfo+0x2c>
c00021df:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021e4:	31 c0                	xor    eax,eax
c00021e6:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021ea:	31 d2                	xor    edx,edx
c00021ec:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021ef:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021f2:	80 e1 10             	and    cl,0x10
c00021f5:	75 08                	jne    c00021ff <get_xfileinfo+0xba>
c00021f7:	8d 46 38             	lea    eax,[esi+0x38]
c00021fa:	e8 68 fa ff ff       	call   c0001c67 <ld_qword>
c00021ff:	89 03                	mov    DWORD PTR [ebx],eax
c0002201:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002204:	8d 46 0c             	lea    eax,[esi+0xc]
c0002207:	e8 36 fa ff ff       	call   c0001c42 <ld_word>
c000220c:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002210:	8d 46 0e             	lea    eax,[esi+0xe]
c0002213:	e8 2a fa ff ff       	call   c0001c42 <ld_word>
c0002218:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000221c:	83 c4 0c             	add    esp,0xc
c000221f:	5b                   	pop    ebx
c0002220:	5e                   	pop    esi
c0002221:	5f                   	pop    edi
c0002222:	5d                   	pop    ebp
c0002223:	c3                   	ret    

c0002224 <get_ldnumber>:
c0002224:	8b 10                	mov    edx,DWORD PTR [eax]
c0002226:	85 d2                	test   edx,edx
c0002228:	74 14                	je     c000223e <get_ldnumber+0x1a>
c000222a:	56                   	push   esi
c000222b:	53                   	push   ebx
c000222c:	89 d3                	mov    ebx,edx
c000222e:	43                   	inc    ebx
c000222f:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002232:	80 f9 1f             	cmp    cl,0x1f
c0002235:	76 0d                	jbe    c0002244 <get_ldnumber+0x20>
c0002237:	80 f9 3a             	cmp    cl,0x3a
c000223a:	75 f2                	jne    c000222e <get_ldnumber+0xa>
c000223c:	eb 0a                	jmp    c0002248 <get_ldnumber+0x24>
c000223e:	83 c9 ff             	or     ecx,0xffffffff
c0002241:	89 c8                	mov    eax,ecx
c0002243:	c3                   	ret    
c0002244:	31 c9                	xor    ecx,ecx
c0002246:	eb 24                	jmp    c000226c <get_ldnumber+0x48>
c0002248:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000224b:	8d 4e d0             	lea    ecx,[esi-0x30]
c000224e:	80 f9 09             	cmp    cl,0x9
c0002251:	77 16                	ja     c0002269 <get_ldnumber+0x45>
c0002253:	83 c2 02             	add    edx,0x2
c0002256:	83 c9 ff             	or     ecx,0xffffffff
c0002259:	39 d3                	cmp    ebx,edx
c000225b:	75 0f                	jne    c000226c <get_ldnumber+0x48>
c000225d:	89 f2                	mov    edx,esi
c000225f:	89 18                	mov    DWORD PTR [eax],ebx
c0002261:	0f be ca             	movsx  ecx,dl
c0002264:	83 e9 30             	sub    ecx,0x30
c0002267:	eb 03                	jmp    c000226c <get_ldnumber+0x48>
c0002269:	83 c9 ff             	or     ecx,0xffffffff
c000226c:	89 c8                	mov    eax,ecx
c000226e:	5b                   	pop    ebx
c000226f:	5e                   	pop    esi
c0002270:	c3                   	ret    

c0002271 <crc32>:
c0002271:	56                   	push   esi
c0002272:	89 d6                	mov    esi,edx
c0002274:	53                   	push   ebx
c0002275:	b2 01                	mov    dl,0x1
c0002277:	bb 08 00 00 00       	mov    ebx,0x8
c000227c:	89 f1                	mov    ecx,esi
c000227e:	84 d1                	test   cl,dl
c0002280:	0f 95 c1             	setne  cl
c0002283:	0f b6 c9             	movzx  ecx,cl
c0002286:	31 c1                	xor    ecx,eax
c0002288:	89 c8                	mov    eax,ecx
c000228a:	d1 e8                	shr    eax,1
c000228c:	80 e1 01             	and    cl,0x1
c000228f:	74 05                	je     c0002296 <crc32+0x25>
c0002291:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002296:	d1 e2                	shl    edx,1
c0002298:	4b                   	dec    ebx
c0002299:	75 e1                	jne    c000227c <crc32+0xb>
c000229b:	5b                   	pop    ebx
c000229c:	5e                   	pop    esi
c000229d:	c3                   	ret    

c000229e <test_gpt_header>:
c000229e:	55                   	push   ebp
c000229f:	b9 10 00 00 00       	mov    ecx,0x10
c00022a4:	57                   	push   edi
c00022a5:	ba e0 9c 02 c0       	mov    edx,0xc0029ce0
c00022aa:	56                   	push   esi
c00022ab:	31 ff                	xor    edi,edi
c00022ad:	53                   	push   ebx
c00022ae:	89 c3                	mov    ebx,eax
c00022b0:	e8 2c fa ff ff       	call   c0001ce1 <mem_cmp>
c00022b5:	85 c0                	test   eax,eax
c00022b7:	75 55                	jne    c000230e <test_gpt_header+0x70>
c00022b9:	89 c7                	mov    edi,eax
c00022bb:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022c0:	83 ce ff             	or     esi,0xffffffff
c00022c3:	31 d2                	xor    edx,edx
c00022c5:	83 fd 03             	cmp    ebp,0x3
c00022c8:	76 05                	jbe    c00022cf <test_gpt_header+0x31>
c00022ca:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022cf:	89 f0                	mov    eax,esi
c00022d1:	45                   	inc    ebp
c00022d2:	e8 9a ff ff ff       	call   c0002271 <crc32>
c00022d7:	83 fd 4c             	cmp    ebp,0x4c
c00022da:	89 c6                	mov    esi,eax
c00022dc:	75 e5                	jne    c00022c3 <test_gpt_header+0x25>
c00022de:	8d 43 10             	lea    eax,[ebx+0x10]
c00022e1:	f7 d6                	not    esi
c00022e3:	e8 67 f9 ff ff       	call   c0001c4f <ld_dword>
c00022e8:	39 c6                	cmp    esi,eax
c00022ea:	75 22                	jne    c000230e <test_gpt_header+0x70>
c00022ec:	8d 43 54             	lea    eax,[ebx+0x54]
c00022ef:	e8 5b f9 ff ff       	call   c0001c4f <ld_dword>
c00022f4:	83 c0 80             	add    eax,0xffffff80
c00022f7:	75 15                	jne    c000230e <test_gpt_header+0x70>
c00022f9:	8d 43 50             	lea    eax,[ebx+0x50]
c00022fc:	e8 4e f9 ff ff       	call   c0001c4f <ld_dword>
c0002301:	3d 80 00 00 00       	cmp    eax,0x80
c0002306:	0f 96 c0             	setbe  al
c0002309:	0f b6 c0             	movzx  eax,al
c000230c:	89 c7                	mov    edi,eax
c000230e:	5b                   	pop    ebx
c000230f:	89 f8                	mov    eax,edi
c0002311:	5e                   	pop    esi
c0002312:	5f                   	pop    edi
c0002313:	5d                   	pop    ebp
c0002314:	c3                   	ret    

c0002315 <make_rand>:
c0002315:	56                   	push   esi
c0002316:	85 c0                	test   eax,eax
c0002318:	53                   	push   ebx
c0002319:	75 05                	jne    c0002320 <make_rand+0xb>
c000231b:	b8 01 00 00 00       	mov    eax,0x1
c0002320:	01 d1                	add    ecx,edx
c0002322:	bb 08 00 00 00       	mov    ebx,0x8
c0002327:	89 c6                	mov    esi,eax
c0002329:	d1 e8                	shr    eax,1
c000232b:	83 e6 01             	and    esi,0x1
c000232e:	85 f6                	test   esi,esi
c0002330:	74 05                	je     c0002337 <make_rand+0x22>
c0002332:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002337:	4b                   	dec    ebx
c0002338:	75 ed                	jne    c0002327 <make_rand+0x12>
c000233a:	42                   	inc    edx
c000233b:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000233e:	39 ca                	cmp    edx,ecx
c0002340:	75 e0                	jne    c0002322 <make_rand+0xd>
c0002342:	5b                   	pop    ebx
c0002343:	5e                   	pop    esi
c0002344:	c3                   	ret    

c0002345 <validate>:
c0002345:	56                   	push   esi
c0002346:	53                   	push   ebx
c0002347:	89 d6                	mov    esi,edx
c0002349:	51                   	push   ecx
c000234a:	85 c0                	test   eax,eax
c000234c:	75 09                	jne    c0002357 <validate+0x12>
c000234e:	b8 09 00 00 00       	mov    eax,0x9
c0002353:	31 c9                	xor    ecx,ecx
c0002355:	eb 2f                	jmp    c0002386 <validate+0x41>
c0002357:	89 c3                	mov    ebx,eax
c0002359:	8b 00                	mov    eax,DWORD PTR [eax]
c000235b:	85 c0                	test   eax,eax
c000235d:	74 ef                	je     c000234e <validate+0x9>
c000235f:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002362:	74 ea                	je     c000234e <validate+0x9>
c0002364:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002368:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000236c:	75 e0                	jne    c000234e <validate+0x9>
c000236e:	83 ec 0c             	sub    esp,0xc
c0002371:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002375:	50                   	push   eax
c0002376:	e8 76 f8 ff ff       	call   c0001bf1 <disk_status>
c000237b:	83 c4 10             	add    esp,0x10
c000237e:	a8 01                	test   al,0x1
c0002380:	75 cc                	jne    c000234e <validate+0x9>
c0002382:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002384:	31 c0                	xor    eax,eax
c0002386:	89 0e                	mov    DWORD PTR [esi],ecx
c0002388:	5a                   	pop    edx
c0002389:	5b                   	pop    ebx
c000238a:	5e                   	pop    esi
c000238b:	c3                   	ret    

c000238c <sync_window>:
c000238c:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002390:	0f 84 85 00 00 00    	je     c000241b <sync_window+0x8f>
c0002396:	55                   	push   ebp
c0002397:	8d 68 54             	lea    ebp,[eax+0x54]
c000239a:	57                   	push   edi
c000239b:	56                   	push   esi
c000239c:	53                   	push   ebx
c000239d:	89 c3                	mov    ebx,eax
c000239f:	83 ec 28             	sub    esp,0x28
c00023a2:	6a 01                	push   0x1
c00023a4:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023a7:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023aa:	55                   	push   ebp
c00023ab:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023af:	50                   	push   eax
c00023b0:	e8 58 f8 ff ff       	call   c0001c0d <disk_write>
c00023b5:	83 c4 20             	add    esp,0x20
c00023b8:	ba 01 00 00 00       	mov    edx,0x1
c00023bd:	85 c0                	test   eax,eax
c00023bf:	75 50                	jne    c0002411 <sync_window+0x85>
c00023c1:	31 ff                	xor    edi,edi
c00023c3:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023c6:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023ca:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ce:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023d1:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023d4:	89 c6                	mov    esi,eax
c00023d6:	89 d7                	mov    edi,edx
c00023d8:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023db:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023df:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023e2:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023e6:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023ea:	73 23                	jae    c000240f <sync_window+0x83>
c00023ec:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023f0:	75 1d                	jne    c000240f <sync_window+0x83>
c00023f2:	83 ec 0c             	sub    esp,0xc
c00023f5:	6a 01                	push   0x1
c00023f7:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023fb:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023ff:	52                   	push   edx
c0002400:	50                   	push   eax
c0002401:	55                   	push   ebp
c0002402:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002406:	50                   	push   eax
c0002407:	e8 01 f8 ff ff       	call   c0001c0d <disk_write>
c000240c:	83 c4 20             	add    esp,0x20
c000240f:	31 d2                	xor    edx,edx
c0002411:	83 c4 1c             	add    esp,0x1c
c0002414:	89 d0                	mov    eax,edx
c0002416:	5b                   	pop    ebx
c0002417:	5e                   	pop    esi
c0002418:	5f                   	pop    edi
c0002419:	5d                   	pop    ebp
c000241a:	c3                   	ret    
c000241b:	31 d2                	xor    edx,edx
c000241d:	89 d0                	mov    eax,edx
c000241f:	c3                   	ret    

c0002420 <move_window>:
c0002420:	56                   	push   esi
c0002421:	53                   	push   ebx
c0002422:	89 c3                	mov    ebx,eax
c0002424:	83 ec 14             	sub    esp,0x14
c0002427:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000242a:	75 07                	jne    c0002433 <move_window+0x13>
c000242c:	31 f6                	xor    esi,esi
c000242e:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002431:	74 59                	je     c000248c <move_window+0x6c>
c0002433:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002437:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000243b:	89 d8                	mov    eax,ebx
c000243d:	e8 4a ff ff ff       	call   c000238c <sync_window>
c0002442:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002446:	89 c6                	mov    esi,eax
c0002448:	85 c0                	test   eax,eax
c000244a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000244e:	75 3c                	jne    c000248c <move_window+0x6c>
c0002450:	83 ec 0c             	sub    esp,0xc
c0002453:	8d 43 54             	lea    eax,[ebx+0x54]
c0002456:	6a 01                	push   0x1
c0002458:	51                   	push   ecx
c0002459:	52                   	push   edx
c000245a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000245e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002462:	50                   	push   eax
c0002463:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002467:	50                   	push   eax
c0002468:	e8 8a f7 ff ff       	call   c0001bf7 <disk_read>
c000246d:	83 c4 20             	add    esp,0x20
c0002470:	85 c0                	test   eax,eax
c0002472:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002476:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000247a:	74 0a                	je     c0002486 <move_window+0x66>
c000247c:	83 ca ff             	or     edx,0xffffffff
c000247f:	be 01 00 00 00       	mov    esi,0x1
c0002484:	89 d1                	mov    ecx,edx
c0002486:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002489:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000248c:	89 f0                	mov    eax,esi
c000248e:	83 c4 14             	add    esp,0x14
c0002491:	5b                   	pop    ebx
c0002492:	5e                   	pop    esi
c0002493:	c3                   	ret    

c0002494 <check_fs>:
c0002494:	53                   	push   ebx
c0002495:	89 c3                	mov    ebx,eax
c0002497:	83 ec 08             	sub    esp,0x8
c000249a:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000249e:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024a5:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024ac:	e8 6f ff ff ff       	call   c0002420 <move_window>
c00024b1:	ba 04 00 00 00       	mov    edx,0x4
c00024b6:	85 c0                	test   eax,eax
c00024b8:	0f 85 89 00 00 00    	jne    c0002547 <check_fs+0xb3>
c00024be:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024c4:	e8 79 f7 ff ff       	call   c0001c42 <ld_word>
c00024c9:	ba 03 00 00 00       	mov    edx,0x3
c00024ce:	66 3d 55 aa          	cmp    ax,0xaa55
c00024d2:	75 73                	jne    c0002547 <check_fs+0xb3>
c00024d4:	ba 00 9e 02 c0       	mov    edx,0xc0029e00
c00024d9:	8d 43 54             	lea    eax,[ebx+0x54]
c00024dc:	b9 0b 00 00 00       	mov    ecx,0xb
c00024e1:	e8 fb f7 ff ff       	call   c0001ce1 <mem_cmp>
c00024e6:	ba 01 00 00 00       	mov    edx,0x1
c00024eb:	85 c0                	test   eax,eax
c00024ed:	74 58                	je     c0002547 <check_fs+0xb3>
c00024ef:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024f2:	8d 50 18             	lea    edx,[eax+0x18]
c00024f5:	80 fa 01             	cmp    dl,0x1
c00024f8:	76 09                	jbe    c0002503 <check_fs+0x6f>
c00024fa:	ba 02 00 00 00       	mov    edx,0x2
c00024ff:	3c eb                	cmp    al,0xeb
c0002501:	75 44                	jne    c0002547 <check_fs+0xb3>
c0002503:	ba d0 d2 02 c0       	mov    edx,0xc002d2d0
c0002508:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000250e:	b9 03 00 00 00       	mov    ecx,0x3
c0002513:	e8 c9 f7 ff ff       	call   c0001ce1 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 29                	je     c0002547 <check_fs+0xb3>
c000251e:	ba 0c 9e 02 c0       	mov    edx,0xc0029e0c
c0002523:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002529:	b9 05 00 00 00       	mov    ecx,0x5
c000252e:	e8 ae f7 ff ff       	call   c0001ce1 <mem_cmp>
c0002533:	31 d2                	xor    edx,edx
c0002535:	85 c0                	test   eax,eax
c0002537:	74 0e                	je     c0002547 <check_fs+0xb3>
c0002539:	31 d2                	xor    edx,edx
c000253b:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002542:	0f 95 c2             	setne  dl
c0002545:	01 d2                	add    edx,edx
c0002547:	89 d0                	mov    eax,edx
c0002549:	83 c4 08             	add    esp,0x8
c000254c:	5b                   	pop    ebx
c000254d:	c3                   	ret    

c000254e <find_volume>:
c000254e:	55                   	push   ebp
c000254f:	31 c9                	xor    ecx,ecx
c0002551:	57                   	push   edi
c0002552:	56                   	push   esi
c0002553:	89 d6                	mov    esi,edx
c0002555:	53                   	push   ebx
c0002556:	31 d2                	xor    edx,edx
c0002558:	83 ec 3c             	sub    esp,0x3c
c000255b:	89 c3                	mov    ebx,eax
c000255d:	e8 32 ff ff ff       	call   c0002494 <check_fs>
c0002562:	83 f8 02             	cmp    eax,0x2
c0002565:	74 0e                	je     c0002575 <find_volume+0x27>
c0002567:	0f 87 5d 01 00 00    	ja     c00026ca <find_volume+0x17c>
c000256d:	85 f6                	test   esi,esi
c000256f:	0f 84 55 01 00 00    	je     c00026ca <find_volume+0x17c>
c0002575:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000257c:	0f 85 dd 00 00 00    	jne    c000265f <find_volume+0x111>
c0002582:	31 c9                	xor    ecx,ecx
c0002584:	ba 01 00 00 00       	mov    edx,0x1
c0002589:	89 d8                	mov    eax,ebx
c000258b:	e8 90 fe ff ff       	call   c0002420 <move_window>
c0002590:	85 c0                	test   eax,eax
c0002592:	74 0a                	je     c000259e <find_volume+0x50>
c0002594:	b8 04 00 00 00       	mov    eax,0x4
c0002599:	e9 2c 01 00 00       	jmp    c00026ca <find_volume+0x17c>
c000259e:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025a1:	89 e8                	mov    eax,ebp
c00025a3:	e8 f6 fc ff ff       	call   c000229e <test_gpt_header>
c00025a8:	85 c0                	test   eax,eax
c00025aa:	75 0a                	jne    c00025b6 <find_volume+0x68>
c00025ac:	b8 03 00 00 00       	mov    eax,0x3
c00025b1:	e9 14 01 00 00       	jmp    c00026ca <find_volume+0x17c>
c00025b6:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025bc:	e8 8e f6 ff ff       	call   c0001c4f <ld_dword>
c00025c1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025c5:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025cb:	e8 97 f6 ff ff       	call   c0001c67 <ld_qword>
c00025d0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025e0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025e8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025ec:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025f0:	74 ba                	je     c00025ac <find_volume+0x5e>
c00025f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025f6:	31 c9                	xor    ecx,ecx
c00025f8:	c1 e7 07             	shl    edi,0x7
c00025fb:	89 d8                	mov    eax,ebx
c00025fd:	89 fa                	mov    edx,edi
c00025ff:	c1 ea 09             	shr    edx,0x9
c0002602:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002606:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c000260a:	e8 11 fe ff ff       	call   c0002420 <move_window>
c000260f:	85 c0                	test   eax,eax
c0002611:	75 81                	jne    c0002594 <find_volume+0x46>
c0002613:	81 e7 80 01 00 00    	and    edi,0x180
c0002619:	b9 10 00 00 00       	mov    ecx,0x10
c000261e:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002622:	ba f0 9d 02 c0       	mov    edx,0xc0029df0
c0002627:	e8 b5 f6 ff ff       	call   c0001ce1 <mem_cmp>
c000262c:	85 c0                	test   eax,eax
c000262e:	75 29                	jne    c0002659 <find_volume+0x10b>
c0002630:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002634:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002638:	e8 2a f6 ff ff       	call   c0001c67 <ld_qword>
c000263d:	89 d1                	mov    ecx,edx
c000263f:	89 c2                	mov    edx,eax
c0002641:	89 d8                	mov    eax,ebx
c0002643:	e8 4c fe ff ff       	call   c0002494 <check_fs>
c0002648:	85 f6                	test   esi,esi
c000264a:	75 07                	jne    c0002653 <find_volume+0x105>
c000264c:	83 f8 01             	cmp    eax,0x1
c000264f:	77 08                	ja     c0002659 <find_volume+0x10b>
c0002651:	eb 77                	jmp    c00026ca <find_volume+0x17c>
c0002653:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002657:	74 71                	je     c00026ca <find_volume+0x17c>
c0002659:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000265d:	eb 89                	jmp    c00025e8 <find_volume+0x9a>
c000265f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002663:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002669:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000266f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002673:	89 cd                	mov    ebp,ecx
c0002675:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002679:	89 f8                	mov    eax,edi
c000267b:	83 c7 10             	add    edi,0x10
c000267e:	e8 cc f5 ff ff       	call   c0001c4f <ld_dword>
c0002683:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002687:	89 01                	mov    DWORD PTR [ecx],eax
c0002689:	83 c1 04             	add    ecx,0x4
c000268c:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002690:	75 e3                	jne    c0002675 <find_volume+0x127>
c0002692:	31 ff                	xor    edi,edi
c0002694:	85 f6                	test   esi,esi
c0002696:	74 03                	je     c000269b <find_volume+0x14d>
c0002698:	8d 7e ff             	lea    edi,[esi-0x1]
c000269b:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c000269f:	85 d2                	test   edx,edx
c00026a1:	74 14                	je     c00026b7 <find_volume+0x169>
c00026a3:	31 c9                	xor    ecx,ecx
c00026a5:	89 d8                	mov    eax,ebx
c00026a7:	e8 e8 fd ff ff       	call   c0002494 <check_fs>
c00026ac:	83 f8 01             	cmp    eax,0x1
c00026af:	76 19                	jbe    c00026ca <find_volume+0x17c>
c00026b1:	85 f6                	test   esi,esi
c00026b3:	74 0f                	je     c00026c4 <find_volume+0x176>
c00026b5:	eb 13                	jmp    c00026ca <find_volume+0x17c>
c00026b7:	85 f6                	test   esi,esi
c00026b9:	0f 85 ed fe ff ff    	jne    c00025ac <find_volume+0x5e>
c00026bf:	b8 03 00 00 00       	mov    eax,0x3
c00026c4:	47                   	inc    edi
c00026c5:	83 ff 03             	cmp    edi,0x3
c00026c8:	76 d1                	jbe    c000269b <find_volume+0x14d>
c00026ca:	83 c4 3c             	add    esp,0x3c
c00026cd:	5b                   	pop    ebx
c00026ce:	5e                   	pop    esi
c00026cf:	5f                   	pop    edi
c00026d0:	5d                   	pop    ebp
c00026d1:	c3                   	ret    

c00026d2 <mount_volume>:
c00026d2:	55                   	push   ebp
c00026d3:	57                   	push   edi
c00026d4:	89 cf                	mov    edi,ecx
c00026d6:	56                   	push   esi
c00026d7:	53                   	push   ebx
c00026d8:	bb 0b 00 00 00       	mov    ebx,0xb
c00026dd:	83 ec 3c             	sub    esp,0x3c
c00026e0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026e6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026ea:	e8 35 fb ff ff       	call   c0002224 <get_ldnumber>
c00026ef:	85 c0                	test   eax,eax
c00026f1:	0f 88 3a 05 00 00    	js     c0002c31 <mount_volume+0x55f>
c00026f7:	8b 2c 85 80 ee 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1180]
c00026fe:	89 c6                	mov    esi,eax
c0002700:	bb 0c 00 00 00       	mov    ebx,0xc
c0002705:	85 ed                	test   ebp,ebp
c0002707:	0f 84 24 05 00 00    	je     c0002c31 <mount_volume+0x55f>
c000270d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002711:	83 e7 fe             	and    edi,0xfffffffe
c0002714:	89 2a                	mov    DWORD PTR [edx],ebp
c0002716:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000271a:	74 32                	je     c000274e <mount_volume+0x7c>
c000271c:	83 ec 0c             	sub    esp,0xc
c000271f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002723:	50                   	push   eax
c0002724:	e8 c8 f4 ff ff       	call   c0001bf1 <disk_status>
c0002729:	83 c4 10             	add    esp,0x10
c000272c:	a8 01                	test   al,0x1
c000272e:	75 1e                	jne    c000274e <mount_volume+0x7c>
c0002730:	31 db                	xor    ebx,ebx
c0002732:	89 f9                	mov    ecx,edi
c0002734:	84 c9                	test   cl,cl
c0002736:	0f 84 f5 04 00 00    	je     c0002c31 <mount_volume+0x55f>
c000273c:	a8 04                	test   al,0x4
c000273e:	0f 84 ed 04 00 00    	je     c0002c31 <mount_volume+0x55f>
c0002744:	bb 0a 00 00 00       	mov    ebx,0xa
c0002749:	e9 e3 04 00 00       	jmp    c0002c31 <mount_volume+0x55f>
c000274e:	83 ec 0c             	sub    esp,0xc
c0002751:	89 f0                	mov    eax,esi
c0002753:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002757:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000275a:	0f b6 f0             	movzx  esi,al
c000275d:	bb 03 00 00 00       	mov    ebx,0x3
c0002762:	56                   	push   esi
c0002763:	e8 8c f4 ff ff       	call   c0001bf4 <disk_initialize>
c0002768:	83 c4 10             	add    esp,0x10
c000276b:	a8 01                	test   al,0x1
c000276d:	0f 85 be 04 00 00    	jne    c0002c31 <mount_volume+0x55f>
c0002773:	89 f9                	mov    ecx,edi
c0002775:	84 c9                	test   cl,cl
c0002777:	74 04                	je     c000277d <mount_volume+0xab>
c0002779:	a8 04                	test   al,0x4
c000277b:	75 c7                	jne    c0002744 <mount_volume+0x72>
c000277d:	31 d2                	xor    edx,edx
c000277f:	89 e8                	mov    eax,ebp
c0002781:	e8 c8 fd ff ff       	call   c000254e <find_volume>
c0002786:	83 f8 04             	cmp    eax,0x4
c0002789:	75 0a                	jne    c0002795 <mount_volume+0xc3>
c000278b:	bb 01 00 00 00       	mov    ebx,0x1
c0002790:	e9 9c 04 00 00       	jmp    c0002c31 <mount_volume+0x55f>
c0002795:	83 f8 01             	cmp    eax,0x1
c0002798:	76 0a                	jbe    c00027a4 <mount_volume+0xd2>
c000279a:	bb 0d 00 00 00       	mov    ebx,0xd
c000279f:	e9 8d 04 00 00       	jmp    c0002c31 <mount_volume+0x55f>
c00027a4:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027a7:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027ae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027b2:	75 17                	jne    c00027cb <mount_volume+0xf9>
c00027b4:	b8 0b 00 00 00       	mov    eax,0xb
c00027b9:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027be:	75 da                	jne    c000279a <mount_volume+0xc8>
c00027c0:	40                   	inc    eax
c00027c1:	83 f8 40             	cmp    eax,0x40
c00027c4:	75 f3                	jne    c00027b9 <mount_volume+0xe7>
c00027c6:	e9 5a 02 00 00       	jmp    c0002a25 <mount_volume+0x353>
c00027cb:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ce:	e8 6f f4 ff ff       	call   c0001c42 <ld_word>
c00027d3:	66 3d 00 02          	cmp    ax,0x200
c00027d7:	75 c1                	jne    c000279a <mount_volume+0xc8>
c00027d9:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027dc:	e8 61 f4 ff ff       	call   c0001c42 <ld_word>
c00027e1:	0f b7 c0             	movzx  eax,ax
c00027e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027e8:	85 c0                	test   eax,eax
c00027ea:	75 0c                	jne    c00027f8 <mount_volume+0x126>
c00027ec:	8d 45 78             	lea    eax,[ebp+0x78]
c00027ef:	e8 5b f4 ff ff       	call   c0001c4f <ld_dword>
c00027f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027fc:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027ff:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002802:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002806:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002809:	48                   	dec    eax
c000280a:	3c 01                	cmp    al,0x1
c000280c:	77 8c                	ja     c000279a <mount_volume+0xc8>
c000280e:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002812:	89 c3                	mov    ebx,eax
c0002814:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002818:	66 85 c0             	test   ax,ax
c000281b:	0f 84 79 ff ff ff    	je     c000279a <mount_volume+0xc8>
c0002821:	8d 40 ff             	lea    eax,[eax-0x1]
c0002824:	85 d8                	test   eax,ebx
c0002826:	0f 85 6e ff ff ff    	jne    c000279a <mount_volume+0xc8>
c000282c:	8d 45 65             	lea    eax,[ebp+0x65]
c000282f:	e8 0e f4 ff ff       	call   c0001c42 <ld_word>
c0002834:	89 c7                	mov    edi,eax
c0002836:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000283a:	a8 0f                	test   al,0xf
c000283c:	0f 85 58 ff ff ff    	jne    c000279a <mount_volume+0xc8>
c0002842:	8d 45 67             	lea    eax,[ebp+0x67]
c0002845:	e8 f8 f3 ff ff       	call   c0001c42 <ld_word>
c000284a:	0f b7 f0             	movzx  esi,ax
c000284d:	85 f6                	test   esi,esi
c000284f:	75 0a                	jne    c000285b <mount_volume+0x189>
c0002851:	8d 45 74             	lea    eax,[ebp+0x74]
c0002854:	e8 f6 f3 ff ff       	call   c0001c4f <ld_dword>
c0002859:	89 c6                	mov    esi,eax
c000285b:	8d 45 62             	lea    eax,[ebp+0x62]
c000285e:	e8 df f3 ff ff       	call   c0001c42 <ld_word>
c0002863:	66 85 c0             	test   ax,ax
c0002866:	0f 84 2e ff ff ff    	je     c000279a <mount_volume+0xc8>
c000286c:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002871:	0f b7 c8             	movzx  ecx,ax
c0002874:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002879:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000287d:	89 fa                	mov    edx,edi
c000287f:	66 c1 ea 04          	shr    dx,0x4
c0002883:	0f b7 d2             	movzx  edx,dx
c0002886:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000288a:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000288d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002891:	39 c6                	cmp    esi,eax
c0002893:	0f 82 01 ff ff ff    	jb     c000279a <mount_volume+0xc8>
c0002899:	29 c6                	sub    esi,eax
c000289b:	31 d2                	xor    edx,edx
c000289d:	89 f0                	mov    eax,esi
c000289f:	f7 f3                	div    ebx
c00028a1:	39 de                	cmp    esi,ebx
c00028a3:	0f 82 f1 fe ff ff    	jb     c000279a <mount_volume+0xc8>
c00028a9:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028ae:	0f 87 e6 fe ff ff    	ja     c000279a <mount_volume+0xc8>
c00028b4:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028b9:	0f 86 63 03 00 00    	jbe    c0002c22 <mount_volume+0x550>
c00028bf:	bb 03 00 00 00       	mov    ebx,0x3
c00028c4:	8d 70 02             	lea    esi,[eax+0x2]
c00028c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028cf:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028d2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028d5:	31 d2                	xor    edx,edx
c00028d7:	89 c8                	mov    eax,ecx
c00028d9:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028dc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028e8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028ec:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028ef:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028f6:	31 d2                	xor    edx,edx
c00028f8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028fc:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002900:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002903:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002906:	83 fb 03             	cmp    ebx,0x3
c0002909:	75 2b                	jne    c0002936 <mount_volume+0x264>
c000290b:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000290e:	e8 2f f3 ff ff       	call   c0001c42 <ld_word>
c0002913:	66 09 c7             	or     di,ax
c0002916:	0f 85 7e fe ff ff    	jne    c000279a <mount_volume+0xc8>
c000291c:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002922:	c1 e6 02             	shl    esi,0x2
c0002925:	e8 25 f3 ff ff       	call   c0001c4f <ld_dword>
c000292a:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002931:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002934:	eb 30                	jmp    c0002966 <mount_volume+0x294>
c0002936:	66 85 ff             	test   di,di
c0002939:	0f 84 5b fe ff ff    	je     c000279a <mount_volume+0xc8>
c000293f:	31 d2                	xor    edx,edx
c0002941:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002945:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002949:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000294d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002950:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002953:	83 fb 02             	cmp    ebx,0x2
c0002956:	75 04                	jne    c000295c <mount_volume+0x28a>
c0002958:	01 f6                	add    esi,esi
c000295a:	eb 0a                	jmp    c0002966 <mount_volume+0x294>
c000295c:	8d 04 76             	lea    eax,[esi+esi*2]
c000295f:	83 e6 01             	and    esi,0x1
c0002962:	d1 e8                	shr    eax,1
c0002964:	01 c6                	add    esi,eax
c0002966:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000296c:	c1 ee 09             	shr    esi,0x9
c000296f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002973:	0f 87 21 fe ff ff    	ja     c000279a <mount_volume+0xc8>
c0002979:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002980:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002987:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000298b:	83 fb 03             	cmp    ebx,0x3
c000298e:	75 7a                	jne    c0002a0a <mount_volume+0x338>
c0002990:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002996:	e8 a7 f2 ff ff       	call   c0001c42 <ld_word>
c000299b:	66 48                	dec    ax
c000299d:	75 6b                	jne    c0002a0a <mount_volume+0x338>
c000299f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029a7:	83 c2 01             	add    edx,0x1
c00029aa:	89 e8                	mov    eax,ebp
c00029ac:	83 d1 00             	adc    ecx,0x0
c00029af:	e8 6c fa ff ff       	call   c0002420 <move_window>
c00029b4:	85 c0                	test   eax,eax
c00029b6:	75 52                	jne    c0002a0a <mount_volume+0x338>
c00029b8:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029bc:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029c2:	e8 7b f2 ff ff       	call   c0001c42 <ld_word>
c00029c7:	66 3d 55 aa          	cmp    ax,0xaa55
c00029cb:	75 3d                	jne    c0002a0a <mount_volume+0x338>
c00029cd:	8d 45 54             	lea    eax,[ebp+0x54]
c00029d0:	e8 7a f2 ff ff       	call   c0001c4f <ld_dword>
c00029d5:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029da:	75 2e                	jne    c0002a0a <mount_volume+0x338>
c00029dc:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029e2:	e8 68 f2 ff ff       	call   c0001c4f <ld_dword>
c00029e7:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029ec:	75 1c                	jne    c0002a0a <mount_volume+0x338>
c00029ee:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029f4:	e8 56 f2 ff ff       	call   c0001c4f <ld_dword>
c00029f9:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029fc:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a02:	e8 48 f2 ff ff       	call   c0001c4f <ld_dword>
c0002a07:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a0a:	66 a1 60 ee 02 c0    	mov    ax,ds:0xc002ee60
c0002a10:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a13:	40                   	inc    eax
c0002a14:	31 db                	xor    ebx,ebx
c0002a16:	66 a3 60 ee 02 c0    	mov    ds:0xc002ee60,ax
c0002a1c:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a20:	e9 0c 02 00 00       	jmp    c0002c31 <mount_volume+0x55f>
c0002a25:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a2b:	e8 12 f2 ff ff       	call   c0001c42 <ld_word>
c0002a30:	66 3d 00 01          	cmp    ax,0x100
c0002a34:	0f 85 60 fd ff ff    	jne    c000279a <mount_volume+0xc8>
c0002a3a:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a41:	0f 85 53 fd ff ff    	jne    c000279a <mount_volume+0xc8>
c0002a47:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a4d:	e8 15 f2 ff ff       	call   c0001c67 <ld_qword>
c0002a52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a5a:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a60:	e8 ea f1 ff ff       	call   c0001c4f <ld_dword>
c0002a65:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a68:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a6e:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a71:	fe c8                	dec    al
c0002a73:	0f 85 21 fd ff ff    	jne    c000279a <mount_volume+0xc8>
c0002a79:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a80:	bb 01 00 00 00       	mov    ebx,0x1
c0002a85:	d3 e3                	shl    ebx,cl
c0002a87:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a8b:	66 85 db             	test   bx,bx
c0002a8e:	0f 84 06 fd ff ff    	je     c000279a <mount_volume+0xc8>
c0002a94:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a9a:	e8 b0 f1 ff ff       	call   c0001c4f <ld_dword>
c0002a9f:	89 c6                	mov    esi,eax
c0002aa1:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002aa6:	0f 87 ee fc ff ff    	ja     c000279a <mount_volume+0xc8>
c0002aac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ab0:	8d 40 02             	lea    eax,[eax+0x2]
c0002ab3:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ab6:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ab9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002abd:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002ac0:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ac6:	e8 84 f1 ff ff       	call   c0001c4f <ld_dword>
c0002acb:	31 d2                	xor    edx,edx
c0002acd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ad1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ad5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ad9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002add:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ae0:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ae3:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ae9:	e8 61 f1 ff ff       	call   c0001c4f <ld_dword>
c0002aee:	31 d2                	xor    edx,edx
c0002af0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002af4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af8:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002afc:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002aff:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b02:	0f b7 c3             	movzx  eax,bx
c0002b05:	31 d2                	xor    edx,edx
c0002b07:	0f af f0             	imul   esi,eax
c0002b0a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b0e:	89 f0                	mov    eax,esi
c0002b10:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b14:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b18:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b1c:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b20:	39 c1                	cmp    ecx,eax
c0002b22:	89 df                	mov    edi,ebx
c0002b24:	19 d7                	sbb    edi,edx
c0002b26:	0f 82 6e fc ff ff    	jb     c000279a <mount_volume+0xc8>
c0002b2c:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b32:	31 db                	xor    ebx,ebx
c0002b34:	e8 16 f1 ff ff       	call   c0001c4f <ld_dword>
c0002b39:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b40:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b43:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b4b:	85 db                	test   ebx,ebx
c0002b4d:	75 39                	jne    c0002b88 <mount_volume+0x4b6>
c0002b4f:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b53:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b57:	0f 86 3d fc ff ff    	jbe    c000279a <mount_volume+0xc8>
c0002b5d:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b60:	31 ff                	xor    edi,edi
c0002b62:	89 e8                	mov    eax,ebp
c0002b64:	e8 72 f3 ff ff       	call   c0001edb <clst2sect>
c0002b69:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b6d:	01 c6                	add    esi,eax
c0002b6f:	89 e8                	mov    eax,ebp
c0002b71:	11 d7                	adc    edi,edx
c0002b73:	89 f2                	mov    edx,esi
c0002b75:	89 f9                	mov    ecx,edi
c0002b77:	e8 a4 f8 ff ff       	call   c0002420 <move_window>
c0002b7c:	85 c0                	test   eax,eax
c0002b7e:	0f 85 07 fc ff ff    	jne    c000278b <mount_volume+0xb9>
c0002b84:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b88:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b8d:	74 0b                	je     c0002b9a <mount_volume+0x4c8>
c0002b8f:	83 c3 20             	add    ebx,0x20
c0002b92:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b98:	eb b1                	jmp    c0002b4b <mount_volume+0x479>
c0002b9a:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b9d:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002ba1:	e8 a9 f0 ff ff       	call   c0001c4f <ld_dword>
c0002ba6:	89 c3                	mov    ebx,eax
c0002ba8:	83 f8 01             	cmp    eax,0x1
c0002bab:	0f 86 e9 fb ff ff    	jbe    c000279a <mount_volume+0xc8>
c0002bb1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bb4:	0f 86 e0 fb ff ff    	jbe    c000279a <mount_volume+0xc8>
c0002bba:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bbd:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002bc1:	0f af c2             	imul   eax,edx
c0002bc4:	31 d2                	xor    edx,edx
c0002bc6:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bc9:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bcc:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bcf:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bd2:	31 c9                	xor    ecx,ecx
c0002bd4:	89 da                	mov    edx,ebx
c0002bd6:	89 e8                	mov    eax,ebp
c0002bd8:	c1 ea 07             	shr    edx,0x7
c0002bdb:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bde:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002be1:	e8 3a f8 ff ff       	call   c0002420 <move_window>
c0002be6:	85 c0                	test   eax,eax
c0002be8:	0f 85 9d fb ff ff    	jne    c000278b <mount_volume+0xb9>
c0002bee:	89 d8                	mov    eax,ebx
c0002bf0:	83 e0 7f             	and    eax,0x7f
c0002bf3:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bf6:	e8 54 f0 ff ff       	call   c0001c4f <ld_dword>
c0002bfb:	83 f8 ff             	cmp    eax,0xffffffff
c0002bfe:	74 0a                	je     c0002c0a <mount_volume+0x538>
c0002c00:	43                   	inc    ebx
c0002c01:	39 d8                	cmp    eax,ebx
c0002c03:	74 cd                	je     c0002bd2 <mount_volume+0x500>
c0002c05:	e9 90 fb ff ff       	jmp    c000279a <mount_volume+0xc8>
c0002c0a:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c11:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c18:	bb 04 00 00 00       	mov    ebx,0x4
c0002c1d:	e9 e8 fd ff ff       	jmp    c0002a0a <mount_volume+0x338>
c0002c22:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c27:	19 db                	sbb    ebx,ebx
c0002c29:	83 c3 02             	add    ebx,0x2
c0002c2c:	e9 93 fc ff ff       	jmp    c00028c4 <mount_volume+0x1f2>
c0002c31:	83 c4 3c             	add    esp,0x3c
c0002c34:	89 d8                	mov    eax,ebx
c0002c36:	5b                   	pop    ebx
c0002c37:	5e                   	pop    esi
c0002c38:	5f                   	pop    edi
c0002c39:	5d                   	pop    ebp
c0002c3a:	c3                   	ret    

c0002c3b <find_bitmap>:
c0002c3b:	55                   	push   ebp
c0002c3c:	57                   	push   edi
c0002c3d:	89 c7                	mov    edi,eax
c0002c3f:	56                   	push   esi
c0002c40:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c43:	53                   	push   ebx
c0002c44:	83 ec 1c             	sub    esp,0x1c
c0002c47:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c4a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c4e:	83 e8 02             	sub    eax,0x2
c0002c51:	39 f0                	cmp    eax,esi
c0002c53:	77 02                	ja     c0002c57 <find_bitmap+0x1c>
c0002c55:	31 f6                	xor    esi,esi
c0002c57:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c5b:	89 f3                	mov    ebx,esi
c0002c5d:	31 ed                	xor    ebp,ebp
c0002c5f:	31 c9                	xor    ecx,ecx
c0002c61:	89 da                	mov    edx,ebx
c0002c63:	89 f8                	mov    eax,edi
c0002c65:	c1 ea 0c             	shr    edx,0xc
c0002c68:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c6b:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c6e:	e8 ad f7 ff ff       	call   c0002420 <move_window>
c0002c73:	85 c0                	test   eax,eax
c0002c75:	75 68                	jne    c0002cdf <find_bitmap+0xa4>
c0002c77:	89 da                	mov    edx,ebx
c0002c79:	89 d9                	mov    ecx,ebx
c0002c7b:	c1 ea 03             	shr    edx,0x3
c0002c7e:	83 e1 07             	and    ecx,0x7
c0002c81:	b8 01 00 00 00       	mov    eax,0x1
c0002c86:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c8c:	d3 e0                	shl    eax,cl
c0002c8e:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c91:	83 e9 02             	sub    ecx,0x2
c0002c94:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c98:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c9c:	43                   	inc    ebx
c0002c9d:	21 c1                	and    ecx,eax
c0002c9f:	d1 e0                	shl    eax,1
c0002ca1:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002ca5:	77 09                	ja     c0002cb0 <find_bitmap+0x75>
c0002ca7:	31 db                	xor    ebx,ebx
c0002ca9:	ba 00 02 00 00       	mov    edx,0x200
c0002cae:	31 c0                	xor    eax,eax
c0002cb0:	84 c9                	test   cl,cl
c0002cb2:	75 10                	jne    c0002cc4 <find_bitmap+0x89>
c0002cb4:	45                   	inc    ebp
c0002cb5:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cb9:	75 0f                	jne    c0002cca <find_bitmap+0x8f>
c0002cbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cbf:	83 c0 02             	add    eax,0x2
c0002cc2:	eb 22                	jmp    c0002ce6 <find_bitmap+0xab>
c0002cc4:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cc8:	31 ed                	xor    ebp,ebp
c0002cca:	39 de                	cmp    esi,ebx
c0002ccc:	74 16                	je     c0002ce4 <find_bitmap+0xa9>
c0002cce:	84 c0                	test   al,al
c0002cd0:	75 c6                	jne    c0002c98 <find_bitmap+0x5d>
c0002cd2:	42                   	inc    edx
c0002cd3:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cd9:	77 84                	ja     c0002c5f <find_bitmap+0x24>
c0002cdb:	b0 01                	mov    al,0x1
c0002cdd:	eb b9                	jmp    c0002c98 <find_bitmap+0x5d>
c0002cdf:	83 c8 ff             	or     eax,0xffffffff
c0002ce2:	eb 02                	jmp    c0002ce6 <find_bitmap+0xab>
c0002ce4:	31 c0                	xor    eax,eax
c0002ce6:	83 c4 1c             	add    esp,0x1c
c0002ce9:	5b                   	pop    ebx
c0002cea:	5e                   	pop    esi
c0002ceb:	5f                   	pop    edi
c0002cec:	5d                   	pop    ebp
c0002ced:	c3                   	ret    

c0002cee <change_bitmap>:
c0002cee:	55                   	push   ebp
c0002cef:	89 cd                	mov    ebp,ecx
c0002cf1:	57                   	push   edi
c0002cf2:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cf5:	56                   	push   esi
c0002cf6:	89 c7                	mov    edi,eax
c0002cf8:	53                   	push   ebx
c0002cf9:	89 c8                	mov    eax,ecx
c0002cfb:	83 ec 1c             	sub    esp,0x1c
c0002cfe:	31 d2                	xor    edx,edx
c0002d00:	89 ce                	mov    esi,ecx
c0002d02:	c1 e8 0c             	shr    eax,0xc
c0002d05:	bb 01 00 00 00       	mov    ebx,0x1
c0002d0a:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d0d:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d10:	c1 ee 03             	shr    esi,0x3
c0002d13:	83 e1 07             	and    ecx,0x7
c0002d16:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d1c:	d3 e3                	shl    ebx,cl
c0002d1e:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d22:	89 c1                	mov    ecx,eax
c0002d24:	89 d3                	mov    ebx,edx
c0002d26:	83 c1 01             	add    ecx,0x1
c0002d29:	83 d3 00             	adc    ebx,0x0
c0002d2c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d30:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d34:	89 d1                	mov    ecx,edx
c0002d36:	89 c2                	mov    edx,eax
c0002d38:	89 f8                	mov    eax,edi
c0002d3a:	e8 e1 f6 ff ff       	call   c0002420 <move_window>
c0002d3f:	89 c1                	mov    ecx,eax
c0002d41:	85 c0                	test   eax,eax
c0002d43:	75 48                	jne    c0002d8d <change_bitmap+0x9f>
c0002d45:	31 d2                	xor    edx,edx
c0002d47:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d4b:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d4f:	0f 95 c2             	setne  dl
c0002d52:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d56:	74 3c                	je     c0002d94 <change_bitmap+0xa6>
c0002d58:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d5c:	4d                   	dec    ebp
c0002d5d:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d61:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d65:	74 32                	je     c0002d99 <change_bitmap+0xab>
c0002d67:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d6b:	75 d8                	jne    c0002d45 <change_bitmap+0x57>
c0002d6d:	8d 46 01             	lea    eax,[esi+0x1]
c0002d70:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d75:	89 c3                	mov    ebx,eax
c0002d77:	31 f6                	xor    esi,esi
c0002d79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d7d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d81:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d87:	74 99                	je     c0002d22 <change_bitmap+0x34>
c0002d89:	89 de                	mov    esi,ebx
c0002d8b:	eb b8                	jmp    c0002d45 <change_bitmap+0x57>
c0002d8d:	b9 01 00 00 00       	mov    ecx,0x1
c0002d92:	eb 05                	jmp    c0002d99 <change_bitmap+0xab>
c0002d94:	b9 02 00 00 00       	mov    ecx,0x2
c0002d99:	83 c4 1c             	add    esp,0x1c
c0002d9c:	89 c8                	mov    eax,ecx
c0002d9e:	5b                   	pop    ebx
c0002d9f:	5e                   	pop    esi
c0002da0:	5f                   	pop    edi
c0002da1:	5d                   	pop    ebp
c0002da2:	c3                   	ret    

c0002da3 <put_fat>:
c0002da3:	83 fa 01             	cmp    edx,0x1
c0002da6:	0f 86 7b 01 00 00    	jbe    c0002f27 <put_fat+0x184>
c0002dac:	55                   	push   ebp
c0002dad:	57                   	push   edi
c0002dae:	89 cf                	mov    edi,ecx
c0002db0:	56                   	push   esi
c0002db1:	b9 02 00 00 00       	mov    ecx,0x2
c0002db6:	53                   	push   ebx
c0002db7:	89 c6                	mov    esi,eax
c0002db9:	83 ec 1c             	sub    esp,0x1c
c0002dbc:	89 d3                	mov    ebx,edx
c0002dbe:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002dc1:	0f 86 68 01 00 00    	jbe    c0002f2f <put_fat+0x18c>
c0002dc7:	8a 00                	mov    al,BYTE PTR [eax]
c0002dc9:	3c 02                	cmp    al,0x2
c0002dcb:	0f 84 c7 00 00 00    	je     c0002e98 <put_fat+0xf5>
c0002dd1:	77 09                	ja     c0002ddc <put_fat+0x39>
c0002dd3:	fe c8                	dec    al
c0002dd5:	74 17                	je     c0002dee <put_fat+0x4b>
c0002dd7:	e9 53 01 00 00       	jmp    c0002f2f <put_fat+0x18c>
c0002ddc:	b9 02 00 00 00       	mov    ecx,0x2
c0002de1:	3c 04                	cmp    al,0x4
c0002de3:	0f 86 e1 00 00 00    	jbe    c0002eca <put_fat+0x127>
c0002de9:	e9 41 01 00 00       	jmp    c0002f2f <put_fat+0x18c>
c0002dee:	89 d5                	mov    ebp,edx
c0002df0:	31 c9                	xor    ecx,ecx
c0002df2:	d1 ed                	shr    ebp,1
c0002df4:	89 f0                	mov    eax,esi
c0002df6:	01 d5                	add    ebp,edx
c0002df8:	89 ea                	mov    edx,ebp
c0002dfa:	c1 ea 09             	shr    edx,0x9
c0002dfd:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e00:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e03:	e8 18 f6 ff ff       	call   c0002420 <move_window>
c0002e08:	89 c1                	mov    ecx,eax
c0002e0a:	85 c0                	test   eax,eax
c0002e0c:	0f 85 1d 01 00 00    	jne    c0002f2f <put_fat+0x18c>
c0002e12:	8d 46 54             	lea    eax,[esi+0x54]
c0002e15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e19:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e1c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e26:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e2a:	89 f8                	mov    eax,edi
c0002e2c:	83 e3 01             	and    ebx,0x1
c0002e2f:	74 0d                	je     c0002e3e <put_fat+0x9b>
c0002e31:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e34:	89 fa                	mov    edx,edi
c0002e36:	83 e0 0f             	and    eax,0xf
c0002e39:	c1 e2 04             	shl    edx,0x4
c0002e3c:	09 d0                	or     eax,edx
c0002e3e:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e45:	31 c9                	xor    ecx,ecx
c0002e47:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e4b:	c1 ea 09             	shr    edx,0x9
c0002e4e:	89 f0                	mov    eax,esi
c0002e50:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e53:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e56:	e8 c5 f5 ff ff       	call   c0002420 <move_window>
c0002e5b:	89 c1                	mov    ecx,eax
c0002e5d:	85 c0                	test   eax,eax
c0002e5f:	0f 85 ca 00 00 00    	jne    c0002f2f <put_fat+0x18c>
c0002e65:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e69:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e6f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e73:	85 db                	test   ebx,ebx
c0002e75:	74 07                	je     c0002e7e <put_fat+0xdb>
c0002e77:	c1 ef 04             	shr    edi,0x4
c0002e7a:	89 fa                	mov    edx,edi
c0002e7c:	eb 0e                	jmp    c0002e8c <put_fat+0xe9>
c0002e7e:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e81:	c1 ef 08             	shr    edi,0x8
c0002e84:	83 e2 f0             	and    edx,0xfffffff0
c0002e87:	83 e7 0f             	and    edi,0xf
c0002e8a:	09 fa                	or     edx,edi
c0002e8c:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e8f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e93:	e9 97 00 00 00       	jmp    c0002f2f <put_fat+0x18c>
c0002e98:	31 c9                	xor    ecx,ecx
c0002e9a:	c1 ea 08             	shr    edx,0x8
c0002e9d:	89 f0                	mov    eax,esi
c0002e9f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ea2:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ea5:	e8 76 f5 ff ff       	call   c0002420 <move_window>
c0002eaa:	89 c1                	mov    ecx,eax
c0002eac:	85 c0                	test   eax,eax
c0002eae:	75 7f                	jne    c0002f2f <put_fat+0x18c>
c0002eb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002eb4:	01 db                	add    ebx,ebx
c0002eb6:	0f b7 d7             	movzx  edx,di
c0002eb9:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ebf:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ec3:	e8 ec ed ff ff       	call   c0001cb4 <st_word>
c0002ec8:	eb 53                	jmp    c0002f1d <put_fat+0x17a>
c0002eca:	31 c9                	xor    ecx,ecx
c0002ecc:	c1 ea 07             	shr    edx,0x7
c0002ecf:	89 f0                	mov    eax,esi
c0002ed1:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ed4:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ed7:	e8 44 f5 ff ff       	call   c0002420 <move_window>
c0002edc:	89 c1                	mov    ecx,eax
c0002ede:	85 c0                	test   eax,eax
c0002ee0:	75 4d                	jne    c0002f2f <put_fat+0x18c>
c0002ee2:	c1 e3 02             	shl    ebx,0x2
c0002ee5:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002eeb:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002eee:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ef2:	74 1c                	je     c0002f10 <put_fat+0x16d>
c0002ef4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ef8:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002efe:	89 d8                	mov    eax,ebx
c0002f00:	e8 4a ed ff ff       	call   c0001c4f <ld_dword>
c0002f05:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f09:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f0e:	09 c7                	or     edi,eax
c0002f10:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f14:	89 fa                	mov    edx,edi
c0002f16:	89 d8                	mov    eax,ebx
c0002f18:	e8 9b ed ff ff       	call   c0001cb8 <st_dword>
c0002f1d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f21:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f25:	eb 08                	jmp    c0002f2f <put_fat+0x18c>
c0002f27:	b9 02 00 00 00       	mov    ecx,0x2
c0002f2c:	89 c8                	mov    eax,ecx
c0002f2e:	c3                   	ret    
c0002f2f:	83 c4 1c             	add    esp,0x1c
c0002f32:	89 c8                	mov    eax,ecx
c0002f34:	5b                   	pop    ebx
c0002f35:	5e                   	pop    esi
c0002f36:	5f                   	pop    edi
c0002f37:	5d                   	pop    ebp
c0002f38:	c3                   	ret    

c0002f39 <fill_last_frag>:
c0002f39:	57                   	push   edi
c0002f3a:	89 cf                	mov    edi,ecx
c0002f3c:	56                   	push   esi
c0002f3d:	89 d6                	mov    esi,edx
c0002f3f:	53                   	push   ebx
c0002f40:	89 c3                	mov    ebx,eax
c0002f42:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f45:	85 c0                	test   eax,eax
c0002f47:	74 21                	je     c0002f6a <fill_last_frag+0x31>
c0002f49:	89 f9                	mov    ecx,edi
c0002f4b:	83 f8 01             	cmp    eax,0x1
c0002f4e:	76 05                	jbe    c0002f55 <fill_last_frag+0x1c>
c0002f50:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f53:	29 c1                	sub    ecx,eax
c0002f55:	8d 56 01             	lea    edx,[esi+0x1]
c0002f58:	29 c2                	sub    edx,eax
c0002f5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f5c:	e8 42 fe ff ff       	call   c0002da3 <put_fat>
c0002f61:	85 c0                	test   eax,eax
c0002f63:	75 05                	jne    c0002f6a <fill_last_frag+0x31>
c0002f65:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f68:	eb d8                	jmp    c0002f42 <fill_last_frag+0x9>
c0002f6a:	5b                   	pop    ebx
c0002f6b:	5e                   	pop    esi
c0002f6c:	5f                   	pop    edi
c0002f6d:	c3                   	ret    

c0002f6e <fill_first_frag>:
c0002f6e:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f72:	75 2d                	jne    c0002fa1 <fill_first_frag+0x33>
c0002f74:	57                   	push   edi
c0002f75:	56                   	push   esi
c0002f76:	53                   	push   ebx
c0002f77:	89 c3                	mov    ebx,eax
c0002f79:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f7c:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f7f:	01 d7                	add    edi,edx
c0002f81:	39 fa                	cmp    edx,edi
c0002f83:	74 14                	je     c0002f99 <fill_first_frag+0x2b>
c0002f85:	8d 72 01             	lea    esi,[edx+0x1]
c0002f88:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f8a:	89 f1                	mov    ecx,esi
c0002f8c:	e8 12 fe ff ff       	call   c0002da3 <put_fat>
c0002f91:	89 f2                	mov    edx,esi
c0002f93:	85 c0                	test   eax,eax
c0002f95:	74 ea                	je     c0002f81 <fill_first_frag+0x13>
c0002f97:	eb 0b                	jmp    c0002fa4 <fill_first_frag+0x36>
c0002f99:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f9d:	31 c0                	xor    eax,eax
c0002f9f:	eb 03                	jmp    c0002fa4 <fill_first_frag+0x36>
c0002fa1:	31 c0                	xor    eax,eax
c0002fa3:	c3                   	ret    
c0002fa4:	5b                   	pop    ebx
c0002fa5:	5e                   	pop    esi
c0002fa6:	5f                   	pop    edi
c0002fa7:	c3                   	ret    

c0002fa8 <get_fat>:
c0002fa8:	83 fa 01             	cmp    edx,0x1
c0002fab:	0f 86 db 01 00 00    	jbe    c000318c <get_fat+0x1e4>
c0002fb1:	55                   	push   ebp
c0002fb2:	b9 01 00 00 00       	mov    ecx,0x1
c0002fb7:	57                   	push   edi
c0002fb8:	56                   	push   esi
c0002fb9:	53                   	push   ebx
c0002fba:	83 ec 1c             	sub    esp,0x1c
c0002fbd:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fbf:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fc2:	0f 86 cc 01 00 00    	jbe    c0003194 <get_fat+0x1ec>
c0002fc8:	89 c3                	mov    ebx,eax
c0002fca:	89 d6                	mov    esi,edx
c0002fcc:	8a 07                	mov    al,BYTE PTR [edi]
c0002fce:	3c 02                	cmp    al,0x2
c0002fd0:	0f 84 99 00 00 00    	je     c000306f <get_fat+0xc7>
c0002fd6:	77 09                	ja     c0002fe1 <get_fat+0x39>
c0002fd8:	fe c8                	dec    al
c0002fda:	74 1a                	je     c0002ff6 <get_fat+0x4e>
c0002fdc:	e9 b3 01 00 00       	jmp    c0003194 <get_fat+0x1ec>
c0002fe1:	3c 03                	cmp    al,0x3
c0002fe3:	0f 84 b5 00 00 00    	je     c000309e <get_fat+0xf6>
c0002fe9:	3c 04                	cmp    al,0x4
c0002feb:	0f 84 e3 00 00 00    	je     c00030d4 <get_fat+0x12c>
c0002ff1:	e9 9e 01 00 00       	jmp    c0003194 <get_fat+0x1ec>
c0002ff6:	89 d3                	mov    ebx,edx
c0002ff8:	31 c9                	xor    ecx,ecx
c0002ffa:	d1 eb                	shr    ebx,1
c0002ffc:	89 f8                	mov    eax,edi
c0002ffe:	01 d3                	add    ebx,edx
c0003000:	89 da                	mov    edx,ebx
c0003002:	c1 ea 09             	shr    edx,0x9
c0003005:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003008:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000300b:	e8 10 f4 ff ff       	call   c0002420 <move_window>
c0003010:	85 c0                	test   eax,eax
c0003012:	74 08                	je     c000301c <get_fat+0x74>
c0003014:	83 c9 ff             	or     ecx,0xffffffff
c0003017:	e9 78 01 00 00       	jmp    c0003194 <get_fat+0x1ec>
c000301c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000301f:	31 c9                	xor    ecx,ecx
c0003021:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003027:	89 ea                	mov    edx,ebp
c0003029:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000302d:	c1 ea 09             	shr    edx,0x9
c0003030:	89 f8                	mov    eax,edi
c0003032:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003035:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003038:	e8 e3 f3 ff ff       	call   c0002420 <move_window>
c000303d:	85 c0                	test   eax,eax
c000303f:	75 d3                	jne    c0003014 <get_fat+0x6c>
c0003041:	0f b6 c3             	movzx  eax,bl
c0003044:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000304a:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000304f:	c1 e3 08             	shl    ebx,0x8
c0003052:	09 c3                	or     ebx,eax
c0003054:	89 d9                	mov    ecx,ebx
c0003056:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000305c:	83 e6 01             	and    esi,0x1
c000305f:	0f 84 2f 01 00 00    	je     c0003194 <get_fat+0x1ec>
c0003065:	89 d9                	mov    ecx,ebx
c0003067:	c1 e9 04             	shr    ecx,0x4
c000306a:	e9 25 01 00 00       	jmp    c0003194 <get_fat+0x1ec>
c000306f:	31 c9                	xor    ecx,ecx
c0003071:	c1 ea 08             	shr    edx,0x8
c0003074:	89 f8                	mov    eax,edi
c0003076:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003079:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307c:	e8 9f f3 ff ff       	call   c0002420 <move_window>
c0003081:	85 c0                	test   eax,eax
c0003083:	75 8f                	jne    c0003014 <get_fat+0x6c>
c0003085:	01 f6                	add    esi,esi
c0003087:	81 e6 fe 01 00 00    	and    esi,0x1fe
c000308d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003091:	e8 ac eb ff ff       	call   c0001c42 <ld_word>
c0003096:	0f b7 c8             	movzx  ecx,ax
c0003099:	e9 f6 00 00 00       	jmp    c0003194 <get_fat+0x1ec>
c000309e:	31 c9                	xor    ecx,ecx
c00030a0:	c1 ea 07             	shr    edx,0x7
c00030a3:	89 f8                	mov    eax,edi
c00030a5:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030a8:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ab:	e8 70 f3 ff ff       	call   c0002420 <move_window>
c00030b0:	85 c0                	test   eax,eax
c00030b2:	0f 85 5c ff ff ff    	jne    c0003014 <get_fat+0x6c>
c00030b8:	c1 e6 02             	shl    esi,0x2
c00030bb:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030c1:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030c5:	e8 85 eb ff ff       	call   c0001c4f <ld_dword>
c00030ca:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030cf:	e9 b4 00 00 00       	jmp    c0003188 <get_fat+0x1e0>
c00030d4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030d7:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030da:	89 d1                	mov    ecx,edx
c00030dc:	09 c1                	or     ecx,eax
c00030de:	74 06                	je     c00030e6 <get_fat+0x13e>
c00030e0:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030e4:	75 0f                	jne    c00030f5 <get_fat+0x14d>
c00030e6:	b9 01 00 00 00       	mov    ecx,0x1
c00030eb:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030ef:	0f 85 9f 00 00 00    	jne    c0003194 <get_fat+0x1ec>
c00030f5:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030f9:	89 f5                	mov    ebp,esi
c00030fb:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003100:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003103:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003106:	80 f9 02             	cmp    cl,0x2
c0003109:	75 35                	jne    c0003140 <get_fat+0x198>
c000310b:	83 c0 ff             	add    eax,0xffffffff
c000310e:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003113:	83 d2 ff             	adc    edx,0xffffffff
c0003116:	31 db                	xor    ebx,ebx
c0003118:	0f ac d0 09          	shrd   eax,edx,0x9
c000311c:	53                   	push   ebx
c000311d:	c1 ea 09             	shr    edx,0x9
c0003120:	51                   	push   ecx
c0003121:	52                   	push   edx
c0003122:	50                   	push   eax
c0003123:	e8 3c 41 02 00       	call   c0027264 <__udivdi3>
c0003128:	83 c4 10             	add    esp,0x10
c000312b:	b9 01 00 00 00       	mov    ecx,0x1
c0003130:	39 c5                	cmp    ebp,eax
c0003132:	77 60                	ja     c0003194 <get_fat+0x1ec>
c0003134:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003139:	74 59                	je     c0003194 <get_fat+0x1ec>
c000313b:	8d 4e 01             	lea    ecx,[esi+0x1]
c000313e:	eb 54                	jmp    c0003194 <get_fat+0x1ec>
c0003140:	80 f9 03             	cmp    cl,0x3
c0003143:	75 05                	jne    c000314a <get_fat+0x1a2>
c0003145:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003148:	77 f1                	ja     c000313b <get_fat+0x193>
c000314a:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000314f:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003153:	75 3f                	jne    c0003194 <get_fat+0x1ec>
c0003155:	31 c9                	xor    ecx,ecx
c0003157:	89 f2                	mov    edx,esi
c0003159:	89 f8                	mov    eax,edi
c000315b:	c1 ea 07             	shr    edx,0x7
c000315e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003161:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003164:	e8 b7 f2 ff ff       	call   c0002420 <move_window>
c0003169:	85 c0                	test   eax,eax
c000316b:	0f 85 a3 fe ff ff    	jne    c0003014 <get_fat+0x6c>
c0003171:	c1 e6 02             	shl    esi,0x2
c0003174:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000317a:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000317e:	e8 cc ea ff ff       	call   c0001c4f <ld_dword>
c0003183:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0003188:	89 c1                	mov    ecx,eax
c000318a:	eb 08                	jmp    c0003194 <get_fat+0x1ec>
c000318c:	b9 01 00 00 00       	mov    ecx,0x1
c0003191:	89 c8                	mov    eax,ecx
c0003193:	c3                   	ret    
c0003194:	83 c4 1c             	add    esp,0x1c
c0003197:	89 c8                	mov    eax,ecx
c0003199:	5b                   	pop    ebx
c000319a:	5e                   	pop    esi
c000319b:	5f                   	pop    edi
c000319c:	5d                   	pop    ebp
c000319d:	c3                   	ret    

c000319e <dir_sdi>:
c000319e:	55                   	push   ebp
c000319f:	57                   	push   edi
c00031a0:	56                   	push   esi
c00031a1:	53                   	push   ebx
c00031a2:	89 c3                	mov    ebx,eax
c00031a4:	83 ec 1c             	sub    esp,0x1c
c00031a7:	8b 38                	mov    edi,DWORD PTR [eax]
c00031a9:	31 c0                	xor    eax,eax
c00031ab:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031ae:	0f 94 c0             	sete   al
c00031b1:	48                   	dec    eax
c00031b2:	25 00 00 20 f0       	and    eax,0xf0200000
c00031b7:	05 00 00 00 10       	add    eax,0x10000000
c00031bc:	39 d0                	cmp    eax,edx
c00031be:	77 0a                	ja     c00031ca <dir_sdi+0x2c>
c00031c0:	b8 02 00 00 00       	mov    eax,0x2
c00031c5:	e9 c4 00 00 00       	jmp    c000328e <dir_sdi+0xf0>
c00031ca:	89 d6                	mov    esi,edx
c00031cc:	f6 c2 1f             	test   dl,0x1f
c00031cf:	75 ef                	jne    c00031c0 <dir_sdi+0x22>
c00031d1:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031d4:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031d7:	85 c9                	test   ecx,ecx
c00031d9:	75 2d                	jne    c0003208 <dir_sdi+0x6a>
c00031db:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031de:	77 1b                	ja     c00031fb <dir_sdi+0x5d>
c00031e0:	89 f2                	mov    edx,esi
c00031e2:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031e6:	c1 ea 05             	shr    edx,0x5
c00031e9:	39 c2                	cmp    edx,eax
c00031eb:	73 d3                	jae    c00031c0 <dir_sdi+0x22>
c00031ed:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031f0:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031f3:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031f6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031f9:	eb 4b                	jmp    c0003246 <dir_sdi+0xa8>
c00031fb:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031fe:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003202:	85 c0                	test   eax,eax
c0003204:	74 da                	je     c00031e0 <dir_sdi+0x42>
c0003206:	89 c1                	mov    ecx,eax
c0003208:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000320c:	c1 e5 09             	shl    ebp,0x9
c000320f:	89 ca                	mov    edx,ecx
c0003211:	39 ee                	cmp    esi,ebp
c0003213:	72 1c                	jb     c0003231 <dir_sdi+0x93>
c0003215:	89 d8                	mov    eax,ebx
c0003217:	e8 8c fd ff ff       	call   c0002fa8 <get_fat>
c000321c:	89 c1                	mov    ecx,eax
c000321e:	83 f8 ff             	cmp    eax,0xffffffff
c0003221:	74 66                	je     c0003289 <dir_sdi+0xeb>
c0003223:	83 f8 01             	cmp    eax,0x1
c0003226:	76 98                	jbe    c00031c0 <dir_sdi+0x22>
c0003228:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000322b:	76 93                	jbe    c00031c0 <dir_sdi+0x22>
c000322d:	29 ee                	sub    esi,ebp
c000322f:	eb de                	jmp    c000320f <dir_sdi+0x71>
c0003231:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003235:	89 f8                	mov    eax,edi
c0003237:	e8 9f ec ff ff       	call   c0001edb <clst2sect>
c000323c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003240:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003243:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003246:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003249:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000324c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000324f:	89 d1                	mov    ecx,edx
c0003251:	09 c1                	or     ecx,eax
c0003253:	0f 84 67 ff ff ff    	je     c00031c0 <dir_sdi+0x22>
c0003259:	89 f1                	mov    ecx,esi
c000325b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003263:	c1 e9 09             	shr    ecx,0x9
c0003266:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000326a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000326e:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003272:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003275:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000327b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000327e:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003282:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003285:	31 c0                	xor    eax,eax
c0003287:	eb 05                	jmp    c000328e <dir_sdi+0xf0>
c0003289:	b8 01 00 00 00       	mov    eax,0x1
c000328e:	83 c4 1c             	add    esp,0x1c
c0003291:	5b                   	pop    ebx
c0003292:	5e                   	pop    esi
c0003293:	5f                   	pop    edi
c0003294:	5d                   	pop    ebp
c0003295:	c3                   	ret    

c0003296 <create_chain>:
c0003296:	55                   	push   ebp
c0003297:	89 c5                	mov    ebp,eax
c0003299:	57                   	push   edi
c000329a:	56                   	push   esi
c000329b:	53                   	push   ebx
c000329c:	83 ec 1c             	sub    esp,0x1c
c000329f:	85 d2                	test   edx,edx
c00032a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032a5:	8b 30                	mov    esi,DWORD PTR [eax]
c00032a7:	75 0e                	jne    c00032b7 <create_chain+0x21>
c00032a9:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032ac:	85 ff                	test   edi,edi
c00032ae:	74 39                	je     c00032e9 <create_chain+0x53>
c00032b0:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032b3:	77 39                	ja     c00032ee <create_chain+0x58>
c00032b5:	eb 32                	jmp    c00032e9 <create_chain+0x53>
c00032b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032bb:	e8 e8 fc ff ff       	call   c0002fa8 <get_fat>
c00032c0:	89 c3                	mov    ebx,eax
c00032c2:	83 f8 01             	cmp    eax,0x1
c00032c5:	77 0a                	ja     c00032d1 <create_chain+0x3b>
c00032c7:	bb 01 00 00 00       	mov    ebx,0x1
c00032cc:	e9 ba 01 00 00       	jmp    c000348b <create_chain+0x1f5>
c00032d1:	83 f8 ff             	cmp    eax,0xffffffff
c00032d4:	0f 84 62 01 00 00    	je     c000343c <create_chain+0x1a6>
c00032da:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032dd:	0f 87 a8 01 00 00    	ja     c000348b <create_chain+0x1f5>
c00032e3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032e7:	eb 05                	jmp    c00032ee <create_chain+0x58>
c00032e9:	bf 01 00 00 00       	mov    edi,0x1
c00032ee:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032f2:	75 07                	jne    c00032fb <create_chain+0x65>
c00032f4:	31 db                	xor    ebx,ebx
c00032f6:	e9 90 01 00 00       	jmp    c000348b <create_chain+0x1f5>
c00032fb:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032fe:	75 74                	jne    c0003374 <create_chain+0xde>
c0003300:	b9 01 00 00 00       	mov    ecx,0x1
c0003305:	89 fa                	mov    edx,edi
c0003307:	89 f0                	mov    eax,esi
c0003309:	e8 2d f9 ff ff       	call   c0002c3b <find_bitmap>
c000330e:	89 c3                	mov    ebx,eax
c0003310:	8d 40 ff             	lea    eax,[eax-0x1]
c0003313:	83 f8 fd             	cmp    eax,0xfffffffd
c0003316:	0f 87 6f 01 00 00    	ja     c000348b <create_chain+0x1f5>
c000331c:	83 ec 0c             	sub    esp,0xc
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	6a 01                	push   0x1
c0003326:	89 da                	mov    edx,ebx
c0003328:	89 f0                	mov    eax,esi
c000332a:	e8 bf f9 ff ff       	call   c0002cee <change_bitmap>
c000332f:	83 c4 10             	add    esp,0x10
c0003332:	83 f8 02             	cmp    eax,0x2
c0003335:	74 90                	je     c00032c7 <create_chain+0x31>
c0003337:	83 f8 01             	cmp    eax,0x1
c000333a:	0f 84 fc 00 00 00    	je     c000343c <create_chain+0x1a6>
c0003340:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003345:	75 09                	jne    c0003350 <create_chain+0xba>
c0003347:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000334b:	e9 0c 01 00 00       	jmp    c000345c <create_chain+0x1c6>
c0003350:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003354:	0f 85 e7 00 00 00    	jne    c0003441 <create_chain+0x1ab>
c000335a:	8d 57 01             	lea    edx,[edi+0x1]
c000335d:	39 da                	cmp    edx,ebx
c000335f:	0f 84 f7 00 00 00    	je     c000345c <create_chain+0x1c6>
c0003365:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003368:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000336c:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000336f:	e9 cd 00 00 00       	jmp    c0003441 <create_chain+0x1ab>
c0003374:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003378:	75 41                	jne    c00033bb <create_chain+0x125>
c000337a:	8d 5f 01             	lea    ebx,[edi+0x1]
c000337d:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003380:	77 05                	ja     c0003387 <create_chain+0xf1>
c0003382:	bb 02 00 00 00       	mov    ebx,0x2
c0003387:	89 da                	mov    edx,ebx
c0003389:	89 e8                	mov    eax,ebp
c000338b:	e8 18 fc ff ff       	call   c0002fa8 <get_fat>
c0003390:	83 f8 01             	cmp    eax,0x1
c0003393:	0f 84 2e ff ff ff    	je     c00032c7 <create_chain+0x31>
c0003399:	83 f8 ff             	cmp    eax,0xffffffff
c000339c:	0f 84 9a 00 00 00    	je     c000343c <create_chain+0x1a6>
c00033a2:	85 c0                	test   eax,eax
c00033a4:	74 11                	je     c00033b7 <create_chain+0x121>
c00033a6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033a9:	83 f8 01             	cmp    eax,0x1
c00033ac:	76 0d                	jbe    c00033bb <create_chain+0x125>
c00033ae:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033b1:	76 08                	jbe    c00033bb <create_chain+0x125>
c00033b3:	89 c7                	mov    edi,eax
c00033b5:	eb 04                	jmp    c00033bb <create_chain+0x125>
c00033b7:	85 db                	test   ebx,ebx
c00033b9:	75 38                	jne    c00033f3 <create_chain+0x15d>
c00033bb:	89 fb                	mov    ebx,edi
c00033bd:	43                   	inc    ebx
c00033be:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033c1:	77 0e                	ja     c00033d1 <create_chain+0x13b>
c00033c3:	83 ff 01             	cmp    edi,0x1
c00033c6:	0f 86 28 ff ff ff    	jbe    c00032f4 <create_chain+0x5e>
c00033cc:	bb 02 00 00 00       	mov    ebx,0x2
c00033d1:	89 da                	mov    edx,ebx
c00033d3:	89 e8                	mov    eax,ebp
c00033d5:	e8 ce fb ff ff       	call   c0002fa8 <get_fat>
c00033da:	85 c0                	test   eax,eax
c00033dc:	74 15                	je     c00033f3 <create_chain+0x15d>
c00033de:	83 f8 01             	cmp    eax,0x1
c00033e1:	0f 84 e0 fe ff ff    	je     c00032c7 <create_chain+0x31>
c00033e7:	40                   	inc    eax
c00033e8:	74 52                	je     c000343c <create_chain+0x1a6>
c00033ea:	39 fb                	cmp    ebx,edi
c00033ec:	75 cf                	jne    c00033bd <create_chain+0x127>
c00033ee:	e9 01 ff ff ff       	jmp    c00032f4 <create_chain+0x5e>
c00033f3:	83 c9 ff             	or     ecx,0xffffffff
c00033f6:	89 da                	mov    edx,ebx
c00033f8:	89 f0                	mov    eax,esi
c00033fa:	e8 a4 f9 ff ff       	call   c0002da3 <put_fat>
c00033ff:	85 c0                	test   eax,eax
c0003401:	75 32                	jne    c0003435 <create_chain+0x19f>
c0003403:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003408:	74 11                	je     c000341b <create_chain+0x185>
c000340a:	89 d9                	mov    ecx,ebx
c000340c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003410:	89 f0                	mov    eax,esi
c0003412:	e8 8c f9 ff ff       	call   c0002da3 <put_fat>
c0003417:	85 c0                	test   eax,eax
c0003419:	75 1a                	jne    c0003435 <create_chain+0x19f>
c000341b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000341e:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003421:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003424:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003427:	39 d0                	cmp    eax,edx
c0003429:	77 04                	ja     c000342f <create_chain+0x199>
c000342b:	48                   	dec    eax
c000342c:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000342f:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003433:	eb 56                	jmp    c000348b <create_chain+0x1f5>
c0003435:	48                   	dec    eax
c0003436:	0f 85 8b fe ff ff    	jne    c00032c7 <create_chain+0x31>
c000343c:	83 cb ff             	or     ebx,0xffffffff
c000343f:	eb 4a                	jmp    c000348b <create_chain+0x1f5>
c0003441:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003445:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003448:	41                   	inc    ecx
c0003449:	39 d9                	cmp    ecx,ebx
c000344b:	75 19                	jne    c0003466 <create_chain+0x1d0>
c000344d:	b9 02 00 00 00       	mov    ecx,0x2
c0003452:	85 d2                	test   edx,edx
c0003454:	74 03                	je     c0003459 <create_chain+0x1c3>
c0003456:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003459:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000345c:	85 c0                	test   eax,eax
c000345e:	0f 85 63 fe ff ff    	jne    c00032c7 <create_chain+0x31>
c0003464:	eb b5                	jmp    c000341b <create_chain+0x185>
c0003466:	85 d2                	test   edx,edx
c0003468:	75 07                	jne    c0003471 <create_chain+0x1db>
c000346a:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003471:	89 d9                	mov    ecx,ebx
c0003473:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003477:	89 e8                	mov    eax,ebp
c0003479:	e8 bb fa ff ff       	call   c0002f39 <fill_last_frag>
c000347e:	85 c0                	test   eax,eax
c0003480:	75 b3                	jne    c0003435 <create_chain+0x19f>
c0003482:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003489:	eb 90                	jmp    c000341b <create_chain+0x185>
c000348b:	83 c4 1c             	add    esp,0x1c
c000348e:	89 d8                	mov    eax,ebx
c0003490:	5b                   	pop    ebx
c0003491:	5e                   	pop    esi
c0003492:	5f                   	pop    edi
c0003493:	5d                   	pop    ebp
c0003494:	c3                   	ret    

c0003495 <remove_chain>:
c0003495:	55                   	push   ebp
c0003496:	57                   	push   edi
c0003497:	56                   	push   esi
c0003498:	53                   	push   ebx
c0003499:	83 ec 1c             	sub    esp,0x1c
c000349c:	83 fa 01             	cmp    edx,0x1
c000349f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034a3:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034a5:	77 0a                	ja     c00034b1 <remove_chain+0x1c>
c00034a7:	b8 02 00 00 00       	mov    eax,0x2
c00034ac:	e9 24 01 00 00       	jmp    c00035d5 <remove_chain+0x140>
c00034b1:	89 d6                	mov    esi,edx
c00034b3:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034b6:	76 ef                	jbe    c00034a7 <remove_chain+0x12>
c00034b8:	89 c7                	mov    edi,eax
c00034ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034bf:	75 06                	jne    c00034c7 <remove_chain+0x32>
c00034c1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034c5:	eb 54                	jmp    c000351b <remove_chain+0x86>
c00034c7:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034ca:	75 06                	jne    c00034d2 <remove_chain+0x3d>
c00034cc:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034d0:	74 ef                	je     c00034c1 <remove_chain+0x2c>
c00034d2:	83 c9 ff             	or     ecx,0xffffffff
c00034d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034d9:	89 d8                	mov    eax,ebx
c00034db:	e8 c3 f8 ff ff       	call   c0002da3 <put_fat>
c00034e0:	85 c0                	test   eax,eax
c00034e2:	74 dd                	je     c00034c1 <remove_chain+0x2c>
c00034e4:	e9 ec 00 00 00       	jmp    c00035d5 <remove_chain+0x140>
c00034e9:	83 f8 01             	cmp    eax,0x1
c00034ec:	74 b9                	je     c00034a7 <remove_chain+0x12>
c00034ee:	83 f8 ff             	cmp    eax,0xffffffff
c00034f1:	74 6d                	je     c0003560 <remove_chain+0xcb>
c00034f3:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034f6:	75 6f                	jne    c0003567 <remove_chain+0xd2>
c00034f8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034fb:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034fe:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003501:	39 d0                	cmp    eax,edx
c0003503:	73 08                	jae    c000350d <remove_chain+0x78>
c0003505:	40                   	inc    eax
c0003506:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000350a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000350d:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003510:	39 e9                	cmp    ecx,ebp
c0003512:	75 64                	jne    c0003578 <remove_chain+0xe3>
c0003514:	89 ee                	mov    esi,ebp
c0003516:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003519:	76 0f                	jbe    c000352a <remove_chain+0x95>
c000351b:	89 f2                	mov    edx,esi
c000351d:	89 f8                	mov    eax,edi
c000351f:	e8 84 fa ff ff       	call   c0002fa8 <get_fat>
c0003524:	89 c5                	mov    ebp,eax
c0003526:	85 c0                	test   eax,eax
c0003528:	75 bf                	jne    c00034e9 <remove_chain+0x54>
c000352a:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000352d:	0f 85 a0 00 00 00    	jne    c00035d3 <remove_chain+0x13e>
c0003533:	eb 6c                	jmp    c00035a1 <remove_chain+0x10c>
c0003535:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003538:	84 c0                	test   al,al
c000353a:	75 7d                	jne    c00035b9 <remove_chain+0x124>
c000353c:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000353f:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003543:	0f 84 86 00 00 00    	je     c00035cf <remove_chain+0x13a>
c0003549:	89 da                	mov    edx,ebx
c000354b:	89 f8                	mov    eax,edi
c000354d:	e8 56 fa ff ff       	call   c0002fa8 <get_fat>
c0003552:	83 f8 01             	cmp    eax,0x1
c0003555:	0f 86 4c ff ff ff    	jbe    c00034a7 <remove_chain+0x12>
c000355b:	83 f8 ff             	cmp    eax,0xffffffff
c000355e:	75 4e                	jne    c00035ae <remove_chain+0x119>
c0003560:	b8 01 00 00 00       	mov    eax,0x1
c0003565:	eb 6e                	jmp    c00035d5 <remove_chain+0x140>
c0003567:	31 c9                	xor    ecx,ecx
c0003569:	89 f2                	mov    edx,esi
c000356b:	89 d8                	mov    eax,ebx
c000356d:	e8 31 f8 ff ff       	call   c0002da3 <put_fat>
c0003572:	85 c0                	test   eax,eax
c0003574:	74 82                	je     c00034f8 <remove_chain+0x63>
c0003576:	eb 5d                	jmp    c00035d5 <remove_chain+0x140>
c0003578:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000357b:	75 1b                	jne    c0003598 <remove_chain+0x103>
c000357d:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003581:	89 d8                	mov    eax,ebx
c0003583:	83 ec 0c             	sub    esp,0xc
c0003586:	6a 00                	push   0x0
c0003588:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000358c:	e8 5d f7 ff ff       	call   c0002cee <change_bitmap>
c0003591:	83 c4 10             	add    esp,0x10
c0003594:	85 c0                	test   eax,eax
c0003596:	75 3d                	jne    c00035d5 <remove_chain+0x140>
c0003598:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000359c:	e9 73 ff ff ff       	jmp    c0003514 <remove_chain+0x7f>
c00035a1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035a6:	75 8d                	jne    c0003535 <remove_chain+0xa0>
c00035a8:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035ac:	eb 25                	jmp    c00035d3 <remove_chain+0x13e>
c00035ae:	8d 53 01             	lea    edx,[ebx+0x1]
c00035b1:	89 c3                	mov    ebx,eax
c00035b3:	39 c2                	cmp    edx,eax
c00035b5:	74 88                	je     c000353f <remove_chain+0xaa>
c00035b7:	eb 1a                	jmp    c00035d3 <remove_chain+0x13e>
c00035b9:	3c 03                	cmp    al,0x3
c00035bb:	75 16                	jne    c00035d3 <remove_chain+0x13e>
c00035bd:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035c0:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035c4:	77 0d                	ja     c00035d3 <remove_chain+0x13e>
c00035c6:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035c9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035cd:	72 04                	jb     c00035d3 <remove_chain+0x13e>
c00035cf:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035d3:	31 c0                	xor    eax,eax
c00035d5:	83 c4 1c             	add    esp,0x1c
c00035d8:	5b                   	pop    ebx
c00035d9:	5e                   	pop    esi
c00035da:	5f                   	pop    edi
c00035db:	5d                   	pop    ebp
c00035dc:	c3                   	ret    

c00035dd <dir_clear>:
c00035dd:	55                   	push   ebp
c00035de:	57                   	push   edi
c00035df:	56                   	push   esi
c00035e0:	89 c6                	mov    esi,eax
c00035e2:	53                   	push   ebx
c00035e3:	83 ec 1c             	sub    esp,0x1c
c00035e6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035ea:	e8 9d ed ff ff       	call   c000238c <sync_window>
c00035ef:	85 c0                	test   eax,eax
c00035f1:	0f 85 de 00 00 00    	jne    c00036d5 <dir_clear+0xf8>
c00035f7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035fb:	89 f0                	mov    eax,esi
c00035fd:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003600:	e8 d6 e8 ff ff       	call   c0001edb <clst2sect>
c0003605:	b9 00 02 00 00       	mov    ecx,0x200
c000360a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000360e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003612:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003615:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003618:	89 e8                	mov    eax,ebp
c000361a:	31 d2                	xor    edx,edx
c000361c:	e8 b5 e6 ff ff       	call   c0001cd6 <mem_set>
c0003621:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003625:	c1 e3 09             	shl    ebx,0x9
c0003628:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000362e:	76 1f                	jbe    c000364f <dir_clear+0x72>
c0003630:	bb 00 80 00 00       	mov    ebx,0x8000
c0003635:	eb 18                	jmp    c000364f <dir_clear+0x72>
c0003637:	83 ec 0c             	sub    esp,0xc
c000363a:	53                   	push   ebx
c000363b:	e8 35 4e 00 00       	call   c0008475 <ff_memalloc>
c0003640:	83 c4 10             	add    esp,0x10
c0003643:	89 c7                	mov    edi,eax
c0003645:	85 c0                	test   eax,eax
c0003647:	0f 85 8f 00 00 00    	jne    c00036dc <dir_clear+0xff>
c000364d:	d1 eb                	shr    ebx,1
c000364f:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003655:	77 e0                	ja     c0003637 <dir_clear+0x5a>
c0003657:	31 db                	xor    ebx,ebx
c0003659:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000365d:	39 d8                	cmp    eax,ebx
c000365f:	76 66                	jbe    c00036c7 <dir_clear+0xea>
c0003661:	83 ec 0c             	sub    esp,0xc
c0003664:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003668:	6a 01                	push   0x1
c000366a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000366e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003672:	55                   	push   ebp
c0003673:	50                   	push   eax
c0003674:	e8 94 e5 ff ff       	call   c0001c0d <disk_write>
c0003679:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000367e:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003683:	83 c4 20             	add    esp,0x20
c0003686:	85 c0                	test   eax,eax
c0003688:	75 3d                	jne    c00036c7 <dir_clear+0xea>
c000368a:	43                   	inc    ebx
c000368b:	eb cc                	jmp    c0003659 <dir_clear+0x7c>
c000368d:	83 ec 0c             	sub    esp,0xc
c0003690:	31 d2                	xor    edx,edx
c0003692:	55                   	push   ebp
c0003693:	89 d8                	mov    eax,ebx
c0003695:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003699:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000369d:	52                   	push   edx
c000369e:	50                   	push   eax
c000369f:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036a3:	57                   	push   edi
c00036a4:	50                   	push   eax
c00036a5:	e8 63 e5 ff ff       	call   c0001c0d <disk_write>
c00036aa:	83 c4 20             	add    esp,0x20
c00036ad:	85 c0                	test   eax,eax
c00036af:	75 0a                	jne    c00036bb <dir_clear+0xde>
c00036b1:	01 eb                	add    ebx,ebp
c00036b3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b7:	39 d8                	cmp    eax,ebx
c00036b9:	77 d2                	ja     c000368d <dir_clear+0xb0>
c00036bb:	83 ec 0c             	sub    esp,0xc
c00036be:	57                   	push   edi
c00036bf:	e8 c7 4d 00 00       	call   c000848b <ff_memfree>
c00036c4:	83 c4 10             	add    esp,0x10
c00036c7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036cb:	39 d8                	cmp    eax,ebx
c00036cd:	0f 95 c0             	setne  al
c00036d0:	0f b6 c0             	movzx  eax,al
c00036d3:	eb 19                	jmp    c00036ee <dir_clear+0x111>
c00036d5:	b8 01 00 00 00       	mov    eax,0x1
c00036da:	eb 12                	jmp    c00036ee <dir_clear+0x111>
c00036dc:	89 d9                	mov    ecx,ebx
c00036de:	31 d2                	xor    edx,edx
c00036e0:	c1 eb 09             	shr    ebx,0x9
c00036e3:	e8 ee e5 ff ff       	call   c0001cd6 <mem_set>
c00036e8:	89 dd                	mov    ebp,ebx
c00036ea:	31 db                	xor    ebx,ebx
c00036ec:	eb c5                	jmp    c00036b3 <dir_clear+0xd6>
c00036ee:	83 c4 1c             	add    esp,0x1c
c00036f1:	5b                   	pop    ebx
c00036f2:	5e                   	pop    esi
c00036f3:	5f                   	pop    edi
c00036f4:	5d                   	pop    ebp
c00036f5:	c3                   	ret    

c00036f6 <dir_next>:
c00036f6:	55                   	push   ebp
c00036f7:	57                   	push   edi
c00036f8:	56                   	push   esi
c00036f9:	53                   	push   ebx
c00036fa:	89 c3                	mov    ebx,eax
c00036fc:	83 ec 1c             	sub    esp,0x1c
c00036ff:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003701:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003705:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003708:	8d 78 20             	lea    edi,[eax+0x20]
c000370b:	31 c0                	xor    eax,eax
c000370d:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003711:	0f 94 c0             	sete   al
c0003714:	48                   	dec    eax
c0003715:	25 00 00 20 f0       	and    eax,0xf0200000
c000371a:	05 00 00 00 10       	add    eax,0x10000000
c000371f:	39 f8                	cmp    eax,edi
c0003721:	77 0e                	ja     c0003731 <dir_next+0x3b>
c0003723:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000372a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003731:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003734:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003737:	b8 04 00 00 00       	mov    eax,0x4
c000373c:	89 ce                	mov    esi,ecx
c000373e:	09 d6                	or     esi,edx
c0003740:	0f 84 da 00 00 00    	je     c0003820 <dir_next+0x12a>
c0003746:	89 f8                	mov    eax,edi
c0003748:	25 ff 01 00 00       	and    eax,0x1ff
c000374d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003751:	0f 85 b9 00 00 00    	jne    c0003810 <dir_next+0x11a>
c0003757:	83 c2 01             	add    edx,0x1
c000375a:	83 d1 00             	adc    ecx,0x0
c000375d:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003760:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003763:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003766:	85 d2                	test   edx,edx
c0003768:	75 29                	jne    c0003793 <dir_next+0x9d>
c000376a:	89 fa                	mov    edx,edi
c000376c:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003770:	c1 ea 05             	shr    edx,0x5
c0003773:	39 c2                	cmp    edx,eax
c0003775:	0f 82 95 00 00 00    	jb     c0003810 <dir_next+0x11a>
c000377b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003782:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003789:	b8 04 00 00 00       	mov    eax,0x4
c000378e:	e9 8d 00 00 00       	jmp    c0003820 <dir_next+0x12a>
c0003793:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003797:	89 f9                	mov    ecx,edi
c0003799:	48                   	dec    eax
c000379a:	c1 e9 09             	shr    ecx,0x9
c000379d:	85 c8                	test   eax,ecx
c000379f:	75 6f                	jne    c0003810 <dir_next+0x11a>
c00037a1:	89 d8                	mov    eax,ebx
c00037a3:	e8 00 f8 ff ff       	call   c0002fa8 <get_fat>
c00037a8:	89 c6                	mov    esi,eax
c00037aa:	83 f8 01             	cmp    eax,0x1
c00037ad:	77 07                	ja     c00037b6 <dir_next+0xc0>
c00037af:	b8 02 00 00 00       	mov    eax,0x2
c00037b4:	eb 6a                	jmp    c0003820 <dir_next+0x12a>
c00037b6:	83 f8 ff             	cmp    eax,0xffffffff
c00037b9:	75 07                	jne    c00037c2 <dir_next+0xcc>
c00037bb:	b8 01 00 00 00       	mov    eax,0x1
c00037c0:	eb 5e                	jmp    c0003820 <dir_next+0x12a>
c00037c2:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037c5:	77 37                	ja     c00037fe <dir_next+0x108>
c00037c7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037cc:	74 ad                	je     c000377b <dir_next+0x85>
c00037ce:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037d1:	89 d8                	mov    eax,ebx
c00037d3:	e8 be fa ff ff       	call   c0003296 <create_chain>
c00037d8:	89 c6                	mov    esi,eax
c00037da:	b8 07 00 00 00       	mov    eax,0x7
c00037df:	85 f6                	test   esi,esi
c00037e1:	74 3d                	je     c0003820 <dir_next+0x12a>
c00037e3:	83 fe 01             	cmp    esi,0x1
c00037e6:	74 c7                	je     c00037af <dir_next+0xb9>
c00037e8:	83 fe ff             	cmp    esi,0xffffffff
c00037eb:	74 ce                	je     c00037bb <dir_next+0xc5>
c00037ed:	89 f2                	mov    edx,esi
c00037ef:	89 e8                	mov    eax,ebp
c00037f1:	e8 e7 fd ff ff       	call   c00035dd <dir_clear>
c00037f6:	85 c0                	test   eax,eax
c00037f8:	75 c1                	jne    c00037bb <dir_next+0xc5>
c00037fa:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037fe:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003801:	89 f2                	mov    edx,esi
c0003803:	89 e8                	mov    eax,ebp
c0003805:	e8 d1 e6 ff ff       	call   c0001edb <clst2sect>
c000380a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000380d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003810:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003814:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003817:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000381b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000381e:	31 c0                	xor    eax,eax
c0003820:	83 c4 1c             	add    esp,0x1c
c0003823:	5b                   	pop    ebx
c0003824:	5e                   	pop    esi
c0003825:	5f                   	pop    edi
c0003826:	5d                   	pop    ebp
c0003827:	c3                   	ret    

c0003828 <load_xdir>:
c0003828:	55                   	push   ebp
c0003829:	57                   	push   edi
c000382a:	56                   	push   esi
c000382b:	89 c6                	mov    esi,eax
c000382d:	53                   	push   ebx
c000382e:	83 ec 1c             	sub    esp,0x1c
c0003831:	8b 00                	mov    eax,DWORD PTR [eax]
c0003833:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003836:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003839:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000383c:	e8 df eb ff ff       	call   c0002420 <move_window>
c0003841:	89 c3                	mov    ebx,eax
c0003843:	85 c0                	test   eax,eax
c0003845:	0f 85 0c 01 00 00    	jne    c0003957 <load_xdir+0x12f>
c000384b:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000384e:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003851:	0f 85 fb 00 00 00    	jne    c0003952 <load_xdir+0x12a>
c0003857:	89 f8                	mov    eax,edi
c0003859:	b9 20 00 00 00       	mov    ecx,0x20
c000385e:	e8 5e e4 ff ff       	call   c0001cc1 <mem_cpy>
c0003863:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003867:	40                   	inc    eax
c0003868:	c1 e0 05             	shl    eax,0x5
c000386b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000386f:	83 e8 60             	sub    eax,0x60
c0003872:	3d 00 02 00 00       	cmp    eax,0x200
c0003877:	0f 87 d5 00 00 00    	ja     c0003952 <load_xdir+0x12a>
c000387d:	31 d2                	xor    edx,edx
c000387f:	89 f0                	mov    eax,esi
c0003881:	e8 70 fe ff ff       	call   c00036f6 <dir_next>
c0003886:	89 c3                	mov    ebx,eax
c0003888:	83 f8 04             	cmp    eax,0x4
c000388b:	0f 84 c1 00 00 00    	je     c0003952 <load_xdir+0x12a>
c0003891:	85 c0                	test   eax,eax
c0003893:	0f 85 be 00 00 00    	jne    c0003957 <load_xdir+0x12f>
c0003899:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000389c:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000389f:	8b 06                	mov    eax,DWORD PTR [esi]
c00038a1:	e8 7a eb ff ff       	call   c0002420 <move_window>
c00038a6:	89 c3                	mov    ebx,eax
c00038a8:	85 c0                	test   eax,eax
c00038aa:	0f 85 a7 00 00 00    	jne    c0003957 <load_xdir+0x12f>
c00038b0:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038b3:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038b6:	0f 85 96 00 00 00    	jne    c0003952 <load_xdir+0x12a>
c00038bc:	8d 47 20             	lea    eax,[edi+0x20]
c00038bf:	b9 20 00 00 00       	mov    ecx,0x20
c00038c4:	e8 f8 e3 ff ff       	call   c0001cc1 <mem_cpy>
c00038c9:	31 d2                	xor    edx,edx
c00038cb:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038cf:	b9 0f 00 00 00       	mov    ecx,0xf
c00038d4:	83 c0 2c             	add    eax,0x2c
c00038d7:	f7 f1                	div    ecx
c00038d9:	c1 e0 05             	shl    eax,0x5
c00038dc:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038e0:	77 70                	ja     c0003952 <load_xdir+0x12a>
c00038e2:	bd 40 00 00 00       	mov    ebp,0x40
c00038e7:	31 d2                	xor    edx,edx
c00038e9:	89 f0                	mov    eax,esi
c00038eb:	e8 06 fe ff ff       	call   c00036f6 <dir_next>
c00038f0:	89 c3                	mov    ebx,eax
c00038f2:	83 f8 04             	cmp    eax,0x4
c00038f5:	74 5b                	je     c0003952 <load_xdir+0x12a>
c00038f7:	85 c0                	test   eax,eax
c00038f9:	75 5c                	jne    c0003957 <load_xdir+0x12f>
c00038fb:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038fe:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003901:	8b 06                	mov    eax,DWORD PTR [esi]
c0003903:	e8 18 eb ff ff       	call   c0002420 <move_window>
c0003908:	89 c3                	mov    ebx,eax
c000390a:	85 c0                	test   eax,eax
c000390c:	75 49                	jne    c0003957 <load_xdir+0x12f>
c000390e:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003911:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003914:	75 3c                	jne    c0003952 <load_xdir+0x12a>
c0003916:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000391c:	77 0d                	ja     c000392b <load_xdir+0x103>
c000391e:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003921:	b9 20 00 00 00       	mov    ecx,0x20
c0003926:	e8 96 e3 ff ff       	call   c0001cc1 <mem_cpy>
c000392b:	83 c5 20             	add    ebp,0x20
c000392e:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003932:	77 b3                	ja     c00038e7 <load_xdir+0xbf>
c0003934:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000393a:	77 1b                	ja     c0003957 <load_xdir+0x12f>
c000393c:	89 f8                	mov    eax,edi
c000393e:	e8 cd e7 ff ff       	call   c0002110 <xdir_sum>
c0003943:	89 c1                	mov    ecx,eax
c0003945:	8d 47 02             	lea    eax,[edi+0x2]
c0003948:	e8 f5 e2 ff ff       	call   c0001c42 <ld_word>
c000394d:	66 39 c1             	cmp    cx,ax
c0003950:	74 05                	je     c0003957 <load_xdir+0x12f>
c0003952:	bb 02 00 00 00       	mov    ebx,0x2
c0003957:	83 c4 1c             	add    esp,0x1c
c000395a:	89 d8                	mov    eax,ebx
c000395c:	5b                   	pop    ebx
c000395d:	5e                   	pop    esi
c000395e:	5f                   	pop    edi
c000395f:	5d                   	pop    ebp
c0003960:	c3                   	ret    

c0003961 <load_obj_xdir>:
c0003961:	53                   	push   ebx
c0003962:	89 c3                	mov    ebx,eax
c0003964:	83 ec 08             	sub    esp,0x8
c0003967:	8b 02                	mov    eax,DWORD PTR [edx]
c0003969:	89 03                	mov    DWORD PTR [ebx],eax
c000396b:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000396e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003971:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003974:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003977:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000397a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003981:	30 c0                	xor    al,al
c0003983:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000398a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000398d:	89 d8                	mov    eax,ebx
c000398f:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003992:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003995:	e8 04 f8 ff ff       	call   c000319e <dir_sdi>
c000399a:	85 c0                	test   eax,eax
c000399c:	75 0b                	jne    c00039a9 <load_obj_xdir+0x48>
c000399e:	89 d8                	mov    eax,ebx
c00039a0:	83 c4 08             	add    esp,0x8
c00039a3:	5b                   	pop    ebx
c00039a4:	e9 7f fe ff ff       	jmp    c0003828 <load_xdir>
c00039a9:	83 c4 08             	add    esp,0x8
c00039ac:	5b                   	pop    ebx
c00039ad:	c3                   	ret    

c00039ae <dir_read>:
c00039ae:	55                   	push   ebp
c00039af:	bd 04 00 00 00       	mov    ebp,0x4
c00039b4:	57                   	push   edi
c00039b5:	56                   	push   esi
c00039b6:	be ff ff ff ff       	mov    esi,0xffffffff
c00039bb:	53                   	push   ebx
c00039bc:	89 c3                	mov    ebx,eax
c00039be:	83 ec 1c             	sub    esp,0x1c
c00039c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039c5:	8b 38                	mov    edi,DWORD PTR [eax]
c00039c7:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039cc:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039cf:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039d2:	89 c8                	mov    eax,ecx
c00039d4:	09 d0                	or     eax,edx
c00039d6:	0f 84 25 01 00 00    	je     c0003b01 <dir_read+0x153>
c00039dc:	89 f8                	mov    eax,edi
c00039de:	e8 3d ea ff ff       	call   c0002420 <move_window>
c00039e3:	89 c5                	mov    ebp,eax
c00039e5:	85 c0                	test   eax,eax
c00039e7:	0f 85 23 01 00 00    	jne    c0003b10 <dir_read+0x162>
c00039ed:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039f0:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039f2:	84 c9                	test   cl,cl
c00039f4:	0f 84 11 01 00 00    	je     c0003b0b <dir_read+0x15d>
c00039fa:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039fd:	75 48                	jne    c0003a47 <dir_read+0x99>
c00039ff:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a04:	74 10                	je     c0003a16 <dir_read+0x68>
c0003a06:	80 f9 83             	cmp    cl,0x83
c0003a09:	0f 85 dd 00 00 00    	jne    c0003aec <dir_read+0x13e>
c0003a0f:	31 ed                	xor    ebp,ebp
c0003a11:	e9 08 01 00 00       	jmp    c0003b1e <dir_read+0x170>
c0003a16:	80 f9 85             	cmp    cl,0x85
c0003a19:	0f 85 cd 00 00 00    	jne    c0003aec <dir_read+0x13e>
c0003a1f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a22:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a25:	89 d8                	mov    eax,ebx
c0003a27:	e8 fc fd ff ff       	call   c0003828 <load_xdir>
c0003a2c:	89 c5                	mov    ebp,eax
c0003a2e:	85 c0                	test   eax,eax
c0003a30:	0f 85 da 00 00 00    	jne    c0003b10 <dir_read+0x162>
c0003a36:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a39:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a3c:	83 e0 3f             	and    eax,0x3f
c0003a3f:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a42:	e9 d7 00 00 00       	jmp    c0003b1e <dir_read+0x170>
c0003a47:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a4a:	83 e0 3f             	and    eax,0x3f
c0003a4d:	80 f9 2e             	cmp    cl,0x2e
c0003a50:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a54:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a57:	0f 84 8a 00 00 00    	je     c0003ae7 <dir_read+0x139>
c0003a5d:	80 f9 e5             	cmp    cl,0xe5
c0003a60:	0f 84 81 00 00 00    	je     c0003ae7 <dir_read+0x139>
c0003a66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a6a:	83 e0 1f             	and    eax,0x1f
c0003a6d:	83 f8 08             	cmp    eax,0x8
c0003a70:	0f 94 c0             	sete   al
c0003a73:	0f b6 c0             	movzx  eax,al
c0003a76:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a7a:	75 6b                	jne    c0003ae7 <dir_read+0x139>
c0003a7c:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a81:	75 44                	jne    c0003ac7 <dir_read+0x119>
c0003a83:	f6 c1 40             	test   cl,0x40
c0003a86:	74 12                	je     c0003a9a <dir_read+0xec>
c0003a88:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a8b:	83 e1 bf             	and    ecx,0xffffffbf
c0003a8e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a92:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a95:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a98:	eb 06                	jmp    c0003aa0 <dir_read+0xf2>
c0003a9a:	89 f0                	mov    eax,esi
c0003a9c:	38 c8                	cmp    al,cl
c0003a9e:	75 47                	jne    c0003ae7 <dir_read+0x139>
c0003aa0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003aa4:	be ff ff ff ff       	mov    esi,0xffffffff
c0003aa9:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003aac:	75 3e                	jne    c0003aec <dir_read+0x13e>
c0003aae:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ab2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ab5:	e8 8a e4 ff ff       	call   c0001f44 <pick_lfn>
c0003aba:	85 c0                	test   eax,eax
c0003abc:	74 2e                	je     c0003aec <dir_read+0x13e>
c0003abe:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ac2:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ac5:	eb 25                	jmp    c0003aec <dir_read+0x13e>
c0003ac7:	89 f0                	mov    eax,esi
c0003ac9:	84 c0                	test   al,al
c0003acb:	75 11                	jne    c0003ade <dir_read+0x130>
c0003acd:	89 d0                	mov    eax,edx
c0003acf:	e8 2a e6 ff ff       	call   c00020fe <sum_sfn>
c0003ad4:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003ad8:	0f 84 31 ff ff ff    	je     c0003a0f <dir_read+0x61>
c0003ade:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003ae5:	eb 37                	jmp    c0003b1e <dir_read+0x170>
c0003ae7:	be ff ff ff ff       	mov    esi,0xffffffff
c0003aec:	31 d2                	xor    edx,edx
c0003aee:	89 d8                	mov    eax,ebx
c0003af0:	e8 01 fc ff ff       	call   c00036f6 <dir_next>
c0003af5:	89 c5                	mov    ebp,eax
c0003af7:	85 c0                	test   eax,eax
c0003af9:	0f 84 cd fe ff ff    	je     c00039cc <dir_read+0x1e>
c0003aff:	eb 0f                	jmp    c0003b10 <dir_read+0x162>
c0003b01:	85 ed                	test   ebp,ebp
c0003b03:	0f 84 06 ff ff ff    	je     c0003a0f <dir_read+0x61>
c0003b09:	eb 05                	jmp    c0003b10 <dir_read+0x162>
c0003b0b:	bd 04 00 00 00       	mov    ebp,0x4
c0003b10:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b17:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b1e:	83 c4 1c             	add    esp,0x1c
c0003b21:	89 e8                	mov    eax,ebp
c0003b23:	5b                   	pop    ebx
c0003b24:	5e                   	pop    esi
c0003b25:	5f                   	pop    edi
c0003b26:	5d                   	pop    ebp
c0003b27:	c3                   	ret    

c0003b28 <dir_alloc>:
c0003b28:	55                   	push   ebp
c0003b29:	89 d5                	mov    ebp,edx
c0003b2b:	57                   	push   edi
c0003b2c:	31 d2                	xor    edx,edx
c0003b2e:	56                   	push   esi
c0003b2f:	53                   	push   ebx
c0003b30:	89 c3                	mov    ebx,eax
c0003b32:	83 ec 0c             	sub    esp,0xc
c0003b35:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b37:	e8 62 f6 ff ff       	call   c000319e <dir_sdi>
c0003b3c:	85 c0                	test   eax,eax
c0003b3e:	75 4e                	jne    c0003b8e <dir_alloc+0x66>
c0003b40:	31 f6                	xor    esi,esi
c0003b42:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b45:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b48:	89 f8                	mov    eax,edi
c0003b4a:	e8 d1 e8 ff ff       	call   c0002420 <move_window>
c0003b4f:	85 c0                	test   eax,eax
c0003b51:	75 3b                	jne    c0003b8e <dir_alloc+0x66>
c0003b53:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b56:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b59:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b5b:	75 07                	jne    c0003b64 <dir_alloc+0x3c>
c0003b5d:	f7 d2                	not    edx
c0003b5f:	c0 ea 07             	shr    dl,0x7
c0003b62:	eb 0d                	jmp    c0003b71 <dir_alloc+0x49>
c0003b64:	84 d2                	test   dl,dl
c0003b66:	0f 94 c1             	sete   cl
c0003b69:	80 fa e5             	cmp    dl,0xe5
c0003b6c:	0f 94 c2             	sete   dl
c0003b6f:	09 ca                	or     edx,ecx
c0003b71:	84 d2                	test   dl,dl
c0003b73:	74 07                	je     c0003b7c <dir_alloc+0x54>
c0003b75:	46                   	inc    esi
c0003b76:	39 ee                	cmp    esi,ebp
c0003b78:	75 04                	jne    c0003b7e <dir_alloc+0x56>
c0003b7a:	eb 1c                	jmp    c0003b98 <dir_alloc+0x70>
c0003b7c:	31 f6                	xor    esi,esi
c0003b7e:	ba 01 00 00 00       	mov    edx,0x1
c0003b83:	89 d8                	mov    eax,ebx
c0003b85:	e8 6c fb ff ff       	call   c00036f6 <dir_next>
c0003b8a:	85 c0                	test   eax,eax
c0003b8c:	74 b4                	je     c0003b42 <dir_alloc+0x1a>
c0003b8e:	83 f8 04             	cmp    eax,0x4
c0003b91:	75 05                	jne    c0003b98 <dir_alloc+0x70>
c0003b93:	b8 07 00 00 00       	mov    eax,0x7
c0003b98:	83 c4 0c             	add    esp,0xc
c0003b9b:	5b                   	pop    ebx
c0003b9c:	5e                   	pop    esi
c0003b9d:	5f                   	pop    edi
c0003b9e:	5d                   	pop    ebp
c0003b9f:	c3                   	ret    

c0003ba0 <store_xdir>:
c0003ba0:	55                   	push   ebp
c0003ba1:	57                   	push   edi
c0003ba2:	89 c7                	mov    edi,eax
c0003ba4:	56                   	push   esi
c0003ba5:	53                   	push   ebx
c0003ba6:	83 ec 0c             	sub    esp,0xc
c0003ba9:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bab:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bae:	89 e8                	mov    eax,ebp
c0003bb0:	e8 5b e5 ff ff       	call   c0002110 <xdir_sum>
c0003bb5:	0f b7 d0             	movzx  edx,ax
c0003bb8:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bbb:	e8 f4 e0 ff ff       	call   c0001cb4 <st_word>
c0003bc0:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003bc4:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bc7:	89 f8                	mov    eax,edi
c0003bc9:	e8 d0 f5 ff ff       	call   c000319e <dir_sdi>
c0003bce:	89 c6                	mov    esi,eax
c0003bd0:	85 f6                	test   esi,esi
c0003bd2:	75 3d                	jne    c0003c11 <store_xdir+0x71>
c0003bd4:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bd7:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bda:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdc:	e8 3f e8 ff ff       	call   c0002420 <move_window>
c0003be1:	89 c6                	mov    esi,eax
c0003be3:	85 c0                	test   eax,eax
c0003be5:	75 2a                	jne    c0003c11 <store_xdir+0x71>
c0003be7:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bea:	b9 20 00 00 00       	mov    ecx,0x20
c0003bef:	89 ea                	mov    edx,ebp
c0003bf1:	e8 cb e0 ff ff       	call   c0001cc1 <mem_cpy>
c0003bf6:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bf8:	85 db                	test   ebx,ebx
c0003bfa:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003bfe:	74 11                	je     c0003c11 <store_xdir+0x71>
c0003c00:	31 d2                	xor    edx,edx
c0003c02:	89 f8                	mov    eax,edi
c0003c04:	83 c5 20             	add    ebp,0x20
c0003c07:	e8 ea fa ff ff       	call   c00036f6 <dir_next>
c0003c0c:	4b                   	dec    ebx
c0003c0d:	89 c6                	mov    esi,eax
c0003c0f:	eb bf                	jmp    c0003bd0 <store_xdir+0x30>
c0003c11:	89 f0                	mov    eax,esi
c0003c13:	83 fe 02             	cmp    esi,0x2
c0003c16:	76 05                	jbe    c0003c1d <store_xdir+0x7d>
c0003c18:	b8 02 00 00 00       	mov    eax,0x2
c0003c1d:	83 c4 0c             	add    esp,0xc
c0003c20:	5b                   	pop    ebx
c0003c21:	5e                   	pop    esi
c0003c22:	5f                   	pop    edi
c0003c23:	5d                   	pop    ebp
c0003c24:	c3                   	ret    

c0003c25 <dir_remove>:
c0003c25:	57                   	push   edi
c0003c26:	56                   	push   esi
c0003c27:	53                   	push   ebx
c0003c28:	89 c3                	mov    ebx,eax
c0003c2a:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c2d:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c2f:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c32:	83 fa ff             	cmp    edx,0xffffffff
c0003c35:	74 09                	je     c0003c40 <dir_remove+0x1b>
c0003c37:	e8 62 f5 ff ff       	call   c000319e <dir_sdi>
c0003c3c:	85 c0                	test   eax,eax
c0003c3e:	75 41                	jne    c0003c81 <dir_remove+0x5c>
c0003c40:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c43:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c46:	89 f0                	mov    eax,esi
c0003c48:	e8 d3 e7 ff ff       	call   c0002420 <move_window>
c0003c4d:	85 c0                	test   eax,eax
c0003c4f:	75 26                	jne    c0003c77 <dir_remove+0x52>
c0003c51:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c54:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c57:	75 05                	jne    c0003c5e <dir_remove+0x39>
c0003c59:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c5c:	eb 03                	jmp    c0003c61 <dir_remove+0x3c>
c0003c5e:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c61:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c65:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c68:	73 17                	jae    c0003c81 <dir_remove+0x5c>
c0003c6a:	31 d2                	xor    edx,edx
c0003c6c:	89 d8                	mov    eax,ebx
c0003c6e:	e8 83 fa ff ff       	call   c00036f6 <dir_next>
c0003c73:	85 c0                	test   eax,eax
c0003c75:	74 c9                	je     c0003c40 <dir_remove+0x1b>
c0003c77:	83 f8 04             	cmp    eax,0x4
c0003c7a:	75 05                	jne    c0003c81 <dir_remove+0x5c>
c0003c7c:	b8 02 00 00 00       	mov    eax,0x2
c0003c81:	5b                   	pop    ebx
c0003c82:	5e                   	pop    esi
c0003c83:	5f                   	pop    edi
c0003c84:	c3                   	ret    

c0003c85 <create_name>:
c0003c85:	55                   	push   ebp
c0003c86:	89 d5                	mov    ebp,edx
c0003c88:	57                   	push   edi
c0003c89:	89 c7                	mov    edi,eax
c0003c8b:	56                   	push   esi
c0003c8c:	31 f6                	xor    esi,esi
c0003c8e:	53                   	push   ebx
c0003c8f:	83 ec 3c             	sub    esp,0x3c
c0003c92:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c94:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c98:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c9a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c9d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003ca1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003ca5:	e8 72 e0 ff ff       	call   c0001d1c <tchar2uni>
c0003caa:	89 c3                	mov    ebx,eax
c0003cac:	83 f8 ff             	cmp    eax,0xffffffff
c0003caf:	75 0a                	jne    c0003cbb <create_name+0x36>
c0003cb1:	b8 06 00 00 00       	mov    eax,0x6
c0003cb6:	e9 9e 02 00 00       	jmp    c0003f59 <create_name+0x2d4>
c0003cbb:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cc0:	76 0c                	jbe    c0003cce <create_name+0x49>
c0003cc2:	c1 e8 10             	shr    eax,0x10
c0003cc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cc9:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003ccd:	46                   	inc    esi
c0003cce:	66 83 fb 1f          	cmp    bx,0x1f
c0003cd2:	76 4f                	jbe    c0003d23 <create_name+0x9e>
c0003cd4:	66 83 fb 5c          	cmp    bx,0x5c
c0003cd8:	74 35                	je     c0003d0f <create_name+0x8a>
c0003cda:	66 83 fb 2f          	cmp    bx,0x2f
c0003cde:	74 2f                	je     c0003d0f <create_name+0x8a>
c0003ce0:	66 83 fb 7f          	cmp    bx,0x7f
c0003ce4:	77 11                	ja     c0003cf7 <create_name+0x72>
c0003ce6:	0f b7 d3             	movzx  edx,bx
c0003ce9:	b8 12 9e 02 c0       	mov    eax,0xc0029e12
c0003cee:	e8 11 e0 ff ff       	call   c0001d04 <chk_chr>
c0003cf3:	85 c0                	test   eax,eax
c0003cf5:	75 ba                	jne    c0003cb1 <create_name+0x2c>
c0003cf7:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003cfd:	77 b2                	ja     c0003cb1 <create_name+0x2c>
c0003cff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d03:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d07:	46                   	inc    esi
c0003d08:	eb 97                	jmp    c0003ca1 <create_name+0x1c>
c0003d0a:	40                   	inc    eax
c0003d0b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d13:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d15:	80 fa 2f             	cmp    dl,0x2f
c0003d18:	74 f0                	je     c0003d0a <create_name+0x85>
c0003d1a:	80 fa 5c             	cmp    dl,0x5c
c0003d1d:	74 eb                	je     c0003d0a <create_name+0x85>
c0003d1f:	31 db                	xor    ebx,ebx
c0003d21:	eb 02                	jmp    c0003d25 <create_name+0xa0>
c0003d23:	b3 04                	mov    bl,0x4
c0003d25:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d29:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d2c:	85 f6                	test   esi,esi
c0003d2e:	74 18                	je     c0003d48 <create_name+0xc3>
c0003d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d34:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d39:	66 83 f8 20          	cmp    ax,0x20
c0003d3d:	74 06                	je     c0003d45 <create_name+0xc0>
c0003d3f:	66 83 f8 2e          	cmp    ax,0x2e
c0003d43:	75 03                	jne    c0003d48 <create_name+0xc3>
c0003d45:	4e                   	dec    esi
c0003d46:	eb e4                	jmp    c0003d2c <create_name+0xa7>
c0003d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d4c:	31 ed                	xor    ebp,ebp
c0003d4e:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d54:	85 f6                	test   esi,esi
c0003d56:	0f 84 55 ff ff ff    	je     c0003cb1 <create_name+0x2c>
c0003d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d60:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d63:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d67:	66 83 f8 20          	cmp    ax,0x20
c0003d6b:	75 04                	jne    c0003d71 <create_name+0xec>
c0003d6d:	89 d5                	mov    ebp,edx
c0003d6f:	eb eb                	jmp    c0003d5c <create_name+0xd7>
c0003d71:	85 ed                	test   ebp,ebp
c0003d73:	75 06                	jne    c0003d7b <create_name+0xf6>
c0003d75:	66 83 f8 2e          	cmp    ax,0x2e
c0003d79:	75 08                	jne    c0003d83 <create_name+0xfe>
c0003d7b:	83 cb 03             	or     ebx,0x3
c0003d7e:	eb 03                	jmp    c0003d83 <create_name+0xfe>
c0003d80:	4e                   	dec    esi
c0003d81:	74 0c                	je     c0003d8f <create_name+0x10a>
c0003d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d87:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d8d:	75 f1                	jne    c0003d80 <create_name+0xfb>
c0003d8f:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d94:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d97:	ba 20 00 00 00       	mov    edx,0x20
c0003d9c:	e8 35 df ff ff       	call   c0001cd6 <mem_set>
c0003da1:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003da9:	31 c9                	xor    ecx,ecx
c0003dab:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003db0:	8d 45 01             	lea    eax,[ebp+0x1]
c0003db3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003db7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dbb:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dbf:	66 85 ed             	test   bp,bp
c0003dc2:	0f 84 30 01 00 00    	je     c0003ef8 <create_name+0x273>
c0003dc8:	66 83 fd 20          	cmp    bp,0x20
c0003dcc:	74 10                	je     c0003dde <create_name+0x159>
c0003dce:	66 83 fd 2e          	cmp    bp,0x2e
c0003dd2:	75 13                	jne    c0003de7 <create_name+0x162>
c0003dd4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd8:	0f 84 6b 01 00 00    	je     c0003f49 <create_name+0x2c4>
c0003dde:	83 cb 03             	or     ebx,0x3
c0003de1:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003de5:	eb c9                	jmp    c0003db0 <create_name+0x12b>
c0003de7:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003deb:	73 0b                	jae    c0003df8 <create_name+0x173>
c0003ded:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df1:	75 47                	jne    c0003e3a <create_name+0x1b5>
c0003df3:	e9 51 01 00 00       	jmp    c0003f49 <create_name+0x2c4>
c0003df8:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003dfd:	75 10                	jne    c0003e0f <create_name+0x18a>
c0003dff:	83 cb 03             	or     ebx,0x3
c0003e02:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e0a:	e9 e9 00 00 00       	jmp    c0003ef8 <create_name+0x273>
c0003e0f:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e13:	74 0d                	je     c0003e22 <create_name+0x19d>
c0003e15:	83 cb 03             	or     ebx,0x3
c0003e18:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e1c:	0f 87 d6 00 00 00    	ja     c0003ef8 <create_name+0x273>
c0003e22:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e27:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e2b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e33:	b9 08 00 00 00       	mov    ecx,0x8
c0003e38:	eb a7                	jmp    c0003de1 <create_name+0x15c>
c0003e3a:	66 83 fd 7f          	cmp    bp,0x7f
c0003e3e:	76 68                	jbe    c0003ea8 <create_name+0x223>
c0003e40:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e44:	88 da                	mov    dl,bl
c0003e46:	83 ca 02             	or     edx,0x2
c0003e49:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e4d:	50                   	push   eax
c0003e4e:	50                   	push   eax
c0003e4f:	68 b5 01 00 00       	push   0x1b5
c0003e54:	55                   	push   ebp
c0003e55:	e8 48 46 00 00       	call   c00084a2 <ff_uni2oem>
c0003e5a:	83 c4 10             	add    esp,0x10
c0003e5d:	89 c5                	mov    ebp,eax
c0003e5f:	a8 80                	test   al,0x80
c0003e61:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e65:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e69:	74 0c                	je     c0003e77 <create_name+0x1f2>
c0003e6b:	83 e5 7f             	and    ebp,0x7f
c0003e6e:	0f b6 ad 60 9d 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd62a0]
c0003e75:	eb 2a                	jmp    c0003ea1 <create_name+0x21c>
c0003e77:	66 3d ff 00          	cmp    ax,0xff
c0003e7b:	76 24                	jbe    c0003ea1 <create_name+0x21c>
c0003e7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e81:	48                   	dec    eax
c0003e82:	39 c8                	cmp    eax,ecx
c0003e84:	77 0c                	ja     c0003e92 <create_name+0x20d>
c0003e86:	83 cb 03             	or     ebx,0x3
c0003e89:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e8d:	e9 4f ff ff ff       	jmp    c0003de1 <create_name+0x15c>
c0003e92:	89 e8                	mov    eax,ebp
c0003e94:	88 d3                	mov    bl,dl
c0003e96:	66 c1 e8 08          	shr    ax,0x8
c0003e9a:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e9e:	41                   	inc    ecx
c0003e9f:	eb 4b                	jmp    c0003eec <create_name+0x267>
c0003ea1:	88 d3                	mov    bl,dl
c0003ea3:	66 85 ed             	test   bp,bp
c0003ea6:	74 19                	je     c0003ec1 <create_name+0x23c>
c0003ea8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003eac:	0f b7 d5             	movzx  edx,bp
c0003eaf:	b8 1b 9e 02 c0       	mov    eax,0xc0029e1b
c0003eb4:	e8 4b de ff ff       	call   c0001d04 <chk_chr>
c0003eb9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ebd:	85 c0                	test   eax,eax
c0003ebf:	74 0a                	je     c0003ecb <create_name+0x246>
c0003ec1:	83 cb 03             	or     ebx,0x3
c0003ec4:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ec9:	eb 21                	jmp    c0003eec <create_name+0x267>
c0003ecb:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ece:	66 83 f8 19          	cmp    ax,0x19
c0003ed2:	77 07                	ja     c0003edb <create_name+0x256>
c0003ed4:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ed9:	eb 11                	jmp    c0003eec <create_name+0x267>
c0003edb:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ede:	66 83 f8 19          	cmp    ax,0x19
c0003ee2:	77 08                	ja     c0003eec <create_name+0x267>
c0003ee4:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ee9:	83 ed 20             	sub    ebp,0x20
c0003eec:	89 e8                	mov    eax,ebp
c0003eee:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ef2:	41                   	inc    ecx
c0003ef3:	e9 e9 fe ff ff       	jmp    c0003de1 <create_name+0x15c>
c0003ef8:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003efc:	75 04                	jne    c0003f02 <create_name+0x27d>
c0003efe:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f02:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f07:	75 05                	jne    c0003f0e <create_name+0x289>
c0003f09:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f0e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f12:	83 e0 0c             	and    eax,0xc
c0003f15:	3c 0c                	cmp    al,0xc
c0003f17:	74 0b                	je     c0003f24 <create_name+0x29f>
c0003f19:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f1d:	83 e0 03             	and    eax,0x3
c0003f20:	3c 03                	cmp    al,0x3
c0003f22:	75 05                	jne    c0003f29 <create_name+0x2a4>
c0003f24:	83 cb 02             	or     ebx,0x2
c0003f27:	eb 19                	jmp    c0003f42 <create_name+0x2bd>
c0003f29:	f6 c3 02             	test   bl,0x2
c0003f2c:	75 14                	jne    c0003f42 <create_name+0x2bd>
c0003f2e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f33:	74 03                	je     c0003f38 <create_name+0x2b3>
c0003f35:	83 cb 10             	or     ebx,0x10
c0003f38:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f3d:	74 03                	je     c0003f42 <create_name+0x2bd>
c0003f3f:	83 cb 08             	or     ebx,0x8
c0003f42:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f45:	31 c0                	xor    eax,eax
c0003f47:	eb 10                	jmp    c0003f59 <create_name+0x2d4>
c0003f49:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f4e:	0f 85 ce fe ff ff    	jne    c0003e22 <create_name+0x19d>
c0003f54:	e9 a6 fe ff ff       	jmp    c0003dff <create_name+0x17a>
c0003f59:	83 c4 3c             	add    esp,0x3c
c0003f5c:	5b                   	pop    ebx
c0003f5d:	5e                   	pop    esi
c0003f5e:	5f                   	pop    edi
c0003f5f:	5d                   	pop    ebp
c0003f60:	c3                   	ret    

c0003f61 <xname_sum>:
c0003f61:	56                   	push   esi
c0003f62:	53                   	push   ebx
c0003f63:	89 c6                	mov    esi,eax
c0003f65:	51                   	push   ecx
c0003f66:	31 db                	xor    ebx,ebx
c0003f68:	83 c6 02             	add    esi,0x2
c0003f6b:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f6f:	66 85 c0             	test   ax,ax
c0003f72:	74 1f                	je     c0003f93 <xname_sum+0x32>
c0003f74:	83 ec 0c             	sub    esp,0xc
c0003f77:	66 d1 cb             	ror    bx,1
c0003f7a:	50                   	push   eax
c0003f7b:	e8 1e 46 00 00       	call   c000859e <ff_wtoupper>
c0003f80:	83 c4 10             	add    esp,0x10
c0003f83:	0f b6 d0             	movzx  edx,al
c0003f86:	66 c1 e8 08          	shr    ax,0x8
c0003f8a:	01 d3                	add    ebx,edx
c0003f8c:	66 d1 cb             	ror    bx,1
c0003f8f:	01 c3                	add    ebx,eax
c0003f91:	eb d5                	jmp    c0003f68 <xname_sum+0x7>
c0003f93:	89 d8                	mov    eax,ebx
c0003f95:	5a                   	pop    edx
c0003f96:	5b                   	pop    ebx
c0003f97:	5e                   	pop    esi
c0003f98:	c3                   	ret    

c0003f99 <create_xdir>:
c0003f99:	55                   	push   ebp
c0003f9a:	b9 40 00 00 00       	mov    ecx,0x40
c0003f9f:	57                   	push   edi
c0003fa0:	bd 01 00 00 00       	mov    ebp,0x1
c0003fa5:	56                   	push   esi
c0003fa6:	31 ff                	xor    edi,edi
c0003fa8:	53                   	push   ebx
c0003fa9:	be 40 00 00 00       	mov    esi,0x40
c0003fae:	89 c3                	mov    ebx,eax
c0003fb0:	83 ec 1c             	sub    esp,0x1c
c0003fb3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fb7:	31 d2                	xor    edx,edx
c0003fb9:	e8 18 dd ff ff       	call   c0001cd6 <mem_set>
c0003fbe:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fc1:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fc5:	31 c9                	xor    ecx,ecx
c0003fc7:	8d 46 01             	lea    eax,[esi+0x1]
c0003fca:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fce:	83 c6 02             	add    esi,0x2
c0003fd1:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fd5:	66 85 ed             	test   bp,bp
c0003fd8:	74 12                	je     c0003fec <create_xdir+0x53>
c0003fda:	0f b6 c1             	movzx  eax,cl
c0003fdd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe1:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fe5:	66 83 fd 01          	cmp    bp,0x1
c0003fe9:	80 d9 ff             	sbb    cl,0xff
c0003fec:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fef:	0f b7 d5             	movzx  edx,bp
c0003ff2:	83 c6 02             	add    esi,0x2
c0003ff5:	e8 ba dc ff ff       	call   c0001cb4 <st_word>
c0003ffa:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0004000:	75 d3                	jne    c0003fd5 <create_xdir+0x3c>
c0004002:	8d 47 01             	lea    eax,[edi+0x1]
c0004005:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004009:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000400d:	0f b6 c1             	movzx  eax,cl
c0004010:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004015:	74 07                	je     c000401e <create_xdir+0x85>
c0004017:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000401c:	eb a9                	jmp    c0003fc7 <create_xdir+0x2e>
c000401e:	8d 47 02             	lea    eax,[edi+0x2]
c0004021:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004024:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004027:	89 d0                	mov    eax,edx
c0004029:	e8 33 ff ff ff       	call   c0003f61 <xname_sum>
c000402e:	83 c4 1c             	add    esp,0x1c
c0004031:	0f b7 d0             	movzx  edx,ax
c0004034:	8d 43 24             	lea    eax,[ebx+0x24]
c0004037:	5b                   	pop    ebx
c0004038:	5e                   	pop    esi
c0004039:	5f                   	pop    edi
c000403a:	5d                   	pop    ebp
c000403b:	e9 74 dc ff ff       	jmp    c0001cb4 <st_word>

c0004040 <cmp_lfn>:
c0004040:	55                   	push   ebp
c0004041:	57                   	push   edi
c0004042:	89 d7                	mov    edi,edx
c0004044:	56                   	push   esi
c0004045:	53                   	push   ebx
c0004046:	83 ec 1c             	sub    esp,0x1c
c0004049:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000404d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004050:	e8 ed db ff ff       	call   c0001c42 <ld_word>
c0004055:	66 85 c0             	test   ax,ax
c0004058:	74 07                	je     c0004061 <cmp_lfn+0x21>
c000405a:	31 c0                	xor    eax,eax
c000405c:	e9 9a 00 00 00       	jmp    c00040fb <cmp_lfn+0xbb>
c0004061:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004063:	bd 01 00 00 00       	mov    ebp,0x1
c0004068:	83 e3 3f             	and    ebx,0x3f
c000406b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004073:	4b                   	dec    ebx
c0004074:	6b db 0d             	imul   ebx,ebx,0xd
c0004077:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000407b:	0f b6 80 e0 9d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6220]
c0004082:	01 f8                	add    eax,edi
c0004084:	e8 b9 db ff ff       	call   c0001c42 <ld_word>
c0004089:	66 85 ed             	test   bp,bp
c000408c:	89 c6                	mov    esi,eax
c000408e:	74 3c                	je     c00040cc <cmp_lfn+0x8c>
c0004090:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0004096:	77 c2                	ja     c000405a <cmp_lfn+0x1a>
c0004098:	83 ec 0c             	sub    esp,0xc
c000409b:	0f b7 c0             	movzx  eax,ax
c000409e:	50                   	push   eax
c000409f:	e8 fa 44 00 00       	call   c000859e <ff_wtoupper>
c00040a4:	89 c5                	mov    ebp,eax
c00040a6:	8d 43 01             	lea    eax,[ebx+0x1]
c00040a9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040b1:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b8:	e8 e1 44 00 00       	call   c000859e <ff_wtoupper>
c00040bd:	83 c4 10             	add    esp,0x10
c00040c0:	39 c5                	cmp    ebp,eax
c00040c2:	75 96                	jne    c000405a <cmp_lfn+0x1a>
c00040c4:	89 f5                	mov    ebp,esi
c00040c6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040ca:	eb 04                	jmp    c00040d0 <cmp_lfn+0x90>
c00040cc:	66 46                	inc    si
c00040ce:	75 8a                	jne    c000405a <cmp_lfn+0x1a>
c00040d0:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040d4:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040d9:	75 9c                	jne    c0004077 <cmp_lfn+0x37>
c00040db:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040de:	74 16                	je     c00040f6 <cmp_lfn+0xb6>
c00040e0:	66 85 ed             	test   bp,bp
c00040e3:	74 11                	je     c00040f6 <cmp_lfn+0xb6>
c00040e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040e9:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040ee:	0f 94 c0             	sete   al
c00040f1:	0f b6 c0             	movzx  eax,al
c00040f4:	eb 05                	jmp    c00040fb <cmp_lfn+0xbb>
c00040f6:	b8 01 00 00 00       	mov    eax,0x1
c00040fb:	83 c4 1c             	add    esp,0x1c
c00040fe:	5b                   	pop    ebx
c00040ff:	5e                   	pop    esi
c0004100:	5f                   	pop    edi
c0004101:	5d                   	pop    ebp
c0004102:	c3                   	ret    

c0004103 <dir_find>:
c0004103:	55                   	push   ebp
c0004104:	31 d2                	xor    edx,edx
c0004106:	57                   	push   edi
c0004107:	56                   	push   esi
c0004108:	53                   	push   ebx
c0004109:	89 c3                	mov    ebx,eax
c000410b:	83 ec 1c             	sub    esp,0x1c
c000410e:	8b 30                	mov    esi,DWORD PTR [eax]
c0004110:	e8 89 f0 ff ff       	call   c000319e <dir_sdi>
c0004115:	89 04 24             	mov    DWORD PTR [esp],eax
c0004118:	85 c0                	test   eax,eax
c000411a:	0f 85 9e 01 00 00    	jne    c00042be <dir_find+0x1bb>
c0004120:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004123:	0f 85 8d 00 00 00    	jne    c00041b6 <dir_find+0xb3>
c0004129:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000412c:	e8 30 fe ff ff       	call   c0003f61 <xname_sum>
c0004131:	89 c7                	mov    edi,eax
c0004133:	31 d2                	xor    edx,edx
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 72 f8 ff ff       	call   c00039ae <dir_read>
c000413c:	85 c0                	test   eax,eax
c000413e:	0f 85 5e 01 00 00    	jne    c00042a2 <dir_find+0x19f>
c0004144:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004147:	8d 41 24             	lea    eax,[ecx+0x24]
c000414a:	e8 f3 da ff ff       	call   c0001c42 <ld_word>
c000414f:	66 39 f8             	cmp    ax,di
c0004152:	75 df                	jne    c0004133 <dir_find+0x30>
c0004154:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004157:	31 ed                	xor    ebp,ebp
c0004159:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000415d:	ba 40 00 00 00       	mov    edx,0x40
c0004162:	89 e9                	mov    ecx,ebp
c0004164:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004168:	0f 84 42 01 00 00    	je     c00042b0 <dir_find+0x1ad>
c000416e:	f6 c2 1f             	test   dl,0x1f
c0004171:	75 03                	jne    c0004176 <dir_find+0x73>
c0004173:	83 c2 02             	add    edx,0x2
c0004176:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000417a:	89 d0                	mov    eax,edx
c000417c:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000417f:	e8 be da ff ff       	call   c0001c42 <ld_word>
c0004184:	83 ec 0c             	sub    esp,0xc
c0004187:	0f b7 c0             	movzx  eax,ax
c000418a:	50                   	push   eax
c000418b:	e8 0e 44 00 00       	call   c000859e <ff_wtoupper>
c0004190:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004194:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004197:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c000419b:	89 04 24             	mov    DWORD PTR [esp],eax
c000419e:	e8 fb 43 00 00       	call   c000859e <ff_wtoupper>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041aa:	75 87                	jne    c0004133 <dir_find+0x30>
c00041ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041b0:	45                   	inc    ebp
c00041b1:	83 c2 02             	add    edx,0x2
c00041b4:	eb ac                	jmp    c0004162 <dir_find+0x5f>
c00041b6:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041bd:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041c2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041c7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041ca:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041cd:	89 f0                	mov    eax,esi
c00041cf:	e8 4c e2 ff ff       	call   c0002420 <move_window>
c00041d4:	85 c0                	test   eax,eax
c00041d6:	0f 85 c6 00 00 00    	jne    c00042a2 <dir_find+0x19f>
c00041dc:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041df:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041e2:	84 c9                	test   cl,cl
c00041e4:	0f 84 bd 00 00 00    	je     c00042a7 <dir_find+0x1a4>
c00041ea:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041ed:	88 d0                	mov    al,dl
c00041ef:	83 e0 3f             	and    eax,0x3f
c00041f2:	80 f9 e5             	cmp    cl,0xe5
c00041f5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041f8:	0f 84 87 00 00 00    	je     c0004285 <dir_find+0x182>
c00041fe:	80 e2 08             	and    dl,0x8
c0004201:	74 06                	je     c0004209 <dir_find+0x106>
c0004203:	3c 0f                	cmp    al,0xf
c0004205:	75 7e                	jne    c0004285 <dir_find+0x182>
c0004207:	eb 04                	jmp    c000420d <dir_find+0x10a>
c0004209:	3c 0f                	cmp    al,0xf
c000420b:	75 4c                	jne    c0004259 <dir_find+0x156>
c000420d:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004211:	75 7e                	jne    c0004291 <dir_find+0x18e>
c0004213:	f6 c1 40             	test   cl,0x40
c0004216:	74 12                	je     c000422a <dir_find+0x127>
c0004218:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000421b:	83 e1 bf             	and    ecx,0xffffffbf
c000421e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004222:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004225:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004228:	eb 06                	jmp    c0004230 <dir_find+0x12d>
c000422a:	89 f8                	mov    eax,edi
c000422c:	38 c8                	cmp    al,cl
c000422e:	75 5c                	jne    c000428c <dir_find+0x189>
c0004230:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004234:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004239:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000423c:	75 53                	jne    c0004291 <dir_find+0x18e>
c000423e:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004242:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004245:	89 ea                	mov    edx,ebp
c0004247:	e8 f4 fd ff ff       	call   c0004040 <cmp_lfn>
c000424c:	85 c0                	test   eax,eax
c000424e:	74 41                	je     c0004291 <dir_find+0x18e>
c0004250:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004254:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004257:	eb 38                	jmp    c0004291 <dir_find+0x18e>
c0004259:	89 f8                	mov    eax,edi
c000425b:	84 c0                	test   al,al
c000425d:	75 0d                	jne    c000426c <dir_find+0x169>
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 98 de ff ff       	call   c00020fe <sum_sfn>
c0004266:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000426a:	74 52                	je     c00042be <dir_find+0x1bb>
c000426c:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004270:	75 13                	jne    c0004285 <dir_find+0x182>
c0004272:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004275:	b9 0b 00 00 00       	mov    ecx,0xb
c000427a:	89 e8                	mov    eax,ebp
c000427c:	e8 60 da ff ff       	call   c0001ce1 <mem_cmp>
c0004281:	85 c0                	test   eax,eax
c0004283:	74 39                	je     c00042be <dir_find+0x1bb>
c0004285:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000428c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004291:	31 d2                	xor    edx,edx
c0004293:	89 d8                	mov    eax,ebx
c0004295:	e8 5c f4 ff ff       	call   c00036f6 <dir_next>
c000429a:	85 c0                	test   eax,eax
c000429c:	0f 84 25 ff ff ff    	je     c00041c7 <dir_find+0xc4>
c00042a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00042a5:	eb 17                	jmp    c00042be <dir_find+0x1bb>
c00042a7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042ae:	eb 0e                	jmp    c00042be <dir_find+0x1bb>
c00042b0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042b3:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042b8:	0f 85 75 fe ff ff    	jne    c0004133 <dir_find+0x30>
c00042be:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042c1:	83 c4 1c             	add    esp,0x1c
c00042c4:	5b                   	pop    ebx
c00042c5:	5e                   	pop    esi
c00042c6:	5f                   	pop    edi
c00042c7:	5d                   	pop    ebp
c00042c8:	c3                   	ret    

c00042c9 <dir_register>:
c00042c9:	55                   	push   ebp
c00042ca:	57                   	push   edi
c00042cb:	56                   	push   esi
c00042cc:	be 06 00 00 00       	mov    esi,0x6
c00042d1:	53                   	push   ebx
c00042d2:	83 ec 6c             	sub    esp,0x6c
c00042d5:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042d9:	0f 85 62 02 00 00    	jne    c0004541 <dir_register+0x278>
c00042df:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042e1:	31 ff                	xor    edi,edi
c00042e3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e6:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042eb:	74 03                	je     c00042f0 <dir_register+0x27>
c00042ed:	47                   	inc    edi
c00042ee:	eb f6                	jmp    c00042e6 <dir_register+0x1d>
c00042f0:	89 c3                	mov    ebx,eax
c00042f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042f6:	0f 85 e1 00 00 00    	jne    c00043dd <dir_register+0x114>
c00042fc:	83 c7 0e             	add    edi,0xe
c00042ff:	b9 0f 00 00 00       	mov    ecx,0xf
c0004304:	89 f8                	mov    eax,edi
c0004306:	31 d2                	xor    edx,edx
c0004308:	f7 f1                	div    ecx
c000430a:	8d 50 02             	lea    edx,[eax+0x2]
c000430d:	89 c7                	mov    edi,eax
c000430f:	89 d8                	mov    eax,ebx
c0004311:	e8 12 f8 ff ff       	call   c0003b28 <dir_alloc>
c0004316:	89 c6                	mov    esi,eax
c0004318:	85 c0                	test   eax,eax
c000431a:	0f 85 21 02 00 00    	jne    c0004541 <dir_register+0x278>
c0004320:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004326:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004329:	c1 e7 05             	shl    edi,0x5
c000432c:	29 f8                	sub    eax,edi
c000432e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004331:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004334:	a8 04                	test   al,0x4
c0004336:	0f 84 91 00 00 00    	je     c00043cd <dir_register+0x104>
c000433c:	83 e0 fb             	and    eax,0xfffffffb
c000433f:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004342:	89 d8                	mov    eax,ebx
c0004344:	e8 25 ec ff ff       	call   c0002f6e <fill_first_frag>
c0004349:	85 c0                	test   eax,eax
c000434b:	0f 85 ee 01 00 00    	jne    c000453f <dir_register+0x276>
c0004351:	83 c9 ff             	or     ecx,0xffffffff
c0004354:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004357:	89 d8                	mov    eax,ebx
c0004359:	e8 db eb ff ff       	call   c0002f39 <fill_last_frag>
c000435e:	85 c0                	test   eax,eax
c0004360:	0f 85 d9 01 00 00    	jne    c000453f <dir_register+0x276>
c0004366:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000436a:	74 61                	je     c00043cd <dir_register+0x104>
c000436c:	89 da                	mov    edx,ebx
c000436e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004372:	e8 ea f5 ff ff       	call   c0003961 <load_obj_xdir>
c0004377:	85 c0                	test   eax,eax
c0004379:	0f 85 c0 01 00 00    	jne    c000453f <dir_register+0x276>
c000437f:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004383:	31 c9                	xor    ecx,ecx
c0004385:	c1 e2 09             	shl    edx,0x9
c0004388:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000438b:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000438e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004391:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004394:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004397:	83 c0 38             	add    eax,0x38
c000439a:	e8 1c d9 ff ff       	call   c0001cbb <st_qword>
c000439f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043a2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043a5:	83 c0 28             	add    eax,0x28
c00043a8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ab:	e8 0b d9 ff ff       	call   c0001cbb <st_qword>
c00043b0:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043b3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043b6:	83 c8 01             	or     eax,0x1
c00043b9:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043bc:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043c0:	e8 db f7 ff ff       	call   c0003ba0 <store_xdir>
c00043c5:	85 c0                	test   eax,eax
c00043c7:	0f 85 72 01 00 00    	jne    c000453f <dir_register+0x276>
c00043cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043d0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043d3:	e8 c1 fb ff ff       	call   c0003f99 <create_xdir>
c00043d8:	e9 64 01 00 00       	jmp    c0004541 <dir_register+0x278>
c00043dd:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043e0:	b9 0c 00 00 00       	mov    ecx,0xc
c00043e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043e9:	89 c2                	mov    edx,eax
c00043eb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043ef:	e8 cd d8 ff ff       	call   c0001cc1 <mem_cpy>
c00043f4:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043f9:	74 58                	je     c0004453 <dir_register+0x18a>
c00043fb:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043ff:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004407:	83 ec 0c             	sub    esp,0xc
c000440a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000440d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004411:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004415:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004419:	e8 24 dc ff ff       	call   c0002042 <gen_numname>
c000441e:	89 d8                	mov    eax,ebx
c0004420:	e8 de fc ff ff       	call   c0004103 <dir_find>
c0004425:	83 c4 10             	add    esp,0x10
c0004428:	89 c6                	mov    esi,eax
c000442a:	85 c0                	test   eax,eax
c000442c:	75 15                	jne    c0004443 <dir_register+0x17a>
c000442e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004432:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004437:	75 ce                	jne    c0004407 <dir_register+0x13e>
c0004439:	be 07 00 00 00       	mov    esi,0x7
c000443e:	e9 fe 00 00 00       	jmp    c0004541 <dir_register+0x278>
c0004443:	83 f8 04             	cmp    eax,0x4
c0004446:	0f 85 f5 00 00 00    	jne    c0004541 <dir_register+0x278>
c000444c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004450:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004453:	b9 01 00 00 00       	mov    ecx,0x1
c0004458:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000445d:	74 0f                	je     c000446e <dir_register+0x1a5>
c000445f:	b9 0d 00 00 00       	mov    ecx,0xd
c0004464:	8d 47 0c             	lea    eax,[edi+0xc]
c0004467:	31 d2                	xor    edx,edx
c0004469:	f7 f1                	div    ecx
c000446b:	8d 48 01             	lea    ecx,[eax+0x1]
c000446e:	89 ca                	mov    edx,ecx
c0004470:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004474:	89 d8                	mov    eax,ebx
c0004476:	e8 ad f6 ff ff       	call   c0003b28 <dir_alloc>
c000447b:	89 c6                	mov    esi,eax
c000447d:	85 c0                	test   eax,eax
c000447f:	0f 85 bc 00 00 00    	jne    c0004541 <dir_register+0x278>
c0004485:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004489:	49                   	dec    ecx
c000448a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000448e:	74 6a                	je     c00044fa <dir_register+0x231>
c0004490:	89 c8                	mov    eax,ecx
c0004492:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004495:	c1 e0 05             	shl    eax,0x5
c0004498:	29 c2                	sub    edx,eax
c000449a:	89 d8                	mov    eax,ebx
c000449c:	e8 fd ec ff ff       	call   c000319e <dir_sdi>
c00044a1:	89 c6                	mov    esi,eax
c00044a3:	85 c0                	test   eax,eax
c00044a5:	0f 85 96 00 00 00    	jne    c0004541 <dir_register+0x278>
c00044ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044af:	e8 4a dc ff ff       	call   c00020fe <sum_sfn>
c00044b4:	0f b6 f8             	movzx  edi,al
c00044b7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044ba:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044bd:	89 e8                	mov    eax,ebp
c00044bf:	e8 5c df ff ff       	call   c0002420 <move_window>
c00044c4:	89 c6                	mov    esi,eax
c00044c6:	85 c0                	test   eax,eax
c00044c8:	75 77                	jne    c0004541 <dir_register+0x278>
c00044ca:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044cf:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044d2:	83 ec 0c             	sub    esp,0xc
c00044d5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044d8:	57                   	push   edi
c00044d9:	e8 e0 da ff ff       	call   c0001fbe <put_lfn>
c00044de:	31 d2                	xor    edx,edx
c00044e0:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044e4:	89 d8                	mov    eax,ebx
c00044e6:	e8 0b f2 ff ff       	call   c00036f6 <dir_next>
c00044eb:	83 c4 10             	add    esp,0x10
c00044ee:	89 c6                	mov    esi,eax
c00044f0:	85 c0                	test   eax,eax
c00044f2:	75 4d                	jne    c0004541 <dir_register+0x278>
c00044f4:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044f8:	75 bd                	jne    c00044b7 <dir_register+0x1ee>
c00044fa:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044fd:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004500:	89 e8                	mov    eax,ebp
c0004502:	e8 19 df ff ff       	call   c0002420 <move_window>
c0004507:	89 c6                	mov    esi,eax
c0004509:	85 c0                	test   eax,eax
c000450b:	75 34                	jne    c0004541 <dir_register+0x278>
c000450d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004510:	b9 20 00 00 00       	mov    ecx,0x20
c0004515:	31 d2                	xor    edx,edx
c0004517:	e8 ba d7 ff ff       	call   c0001cd6 <mem_set>
c000451c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000451f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004523:	b9 0b 00 00 00       	mov    ecx,0xb
c0004528:	e8 94 d7 ff ff       	call   c0001cc1 <mem_cpy>
c000452d:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004530:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004533:	83 e0 18             	and    eax,0x18
c0004536:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004539:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000453d:	eb 02                	jmp    c0004541 <dir_register+0x278>
c000453f:	89 c6                	mov    esi,eax
c0004541:	83 c4 6c             	add    esp,0x6c
c0004544:	89 f0                	mov    eax,esi
c0004546:	5b                   	pop    ebx
c0004547:	5e                   	pop    esi
c0004548:	5f                   	pop    edi
c0004549:	5d                   	pop    ebp
c000454a:	c3                   	ret    

c000454b <sync_fs>:
c000454b:	56                   	push   esi
c000454c:	53                   	push   ebx
c000454d:	53                   	push   ebx
c000454e:	89 c3                	mov    ebx,eax
c0004550:	e8 37 de ff ff       	call   c000238c <sync_window>
c0004555:	85 c0                	test   eax,eax
c0004557:	0f 85 b1 00 00 00    	jne    c000460e <sync_fs+0xc3>
c000455d:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004560:	0f 85 8e 00 00 00    	jne    c00045f4 <sync_fs+0xa9>
c0004566:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000456a:	0f 85 84 00 00 00    	jne    c00045f4 <sync_fs+0xa9>
c0004570:	b9 00 02 00 00       	mov    ecx,0x200
c0004575:	8d 73 54             	lea    esi,[ebx+0x54]
c0004578:	31 d2                	xor    edx,edx
c000457a:	89 f0                	mov    eax,esi
c000457c:	e8 55 d7 ff ff       	call   c0001cd6 <mem_set>
c0004581:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004587:	ba 55 aa 00 00       	mov    edx,0xaa55
c000458c:	e8 23 d7 ff ff       	call   c0001cb4 <st_word>
c0004591:	ba 52 52 61 41       	mov    edx,0x41615252
c0004596:	89 f0                	mov    eax,esi
c0004598:	e8 1b d7 ff ff       	call   c0001cb8 <st_dword>
c000459d:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045a3:	ba 72 72 41 61       	mov    edx,0x61417272
c00045a8:	e8 0b d7 ff ff       	call   c0001cb8 <st_dword>
c00045ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045b0:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045b6:	e8 fd d6 ff ff       	call   c0001cb8 <st_dword>
c00045bb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045be:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045c4:	e8 ef d6 ff ff       	call   c0001cb8 <st_dword>
c00045c9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045cc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045cf:	83 c0 01             	add    eax,0x1
c00045d2:	83 d2 00             	adc    edx,0x0
c00045d5:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045d8:	83 ec 0c             	sub    esp,0xc
c00045db:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045de:	6a 01                	push   0x1
c00045e0:	52                   	push   edx
c00045e1:	50                   	push   eax
c00045e2:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045e6:	56                   	push   esi
c00045e7:	50                   	push   eax
c00045e8:	e8 20 d6 ff ff       	call   c0001c0d <disk_write>
c00045ed:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045f1:	83 c4 20             	add    esp,0x20
c00045f4:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045f8:	51                   	push   ecx
c00045f9:	6a 00                	push   0x0
c00045fb:	6a 00                	push   0x0
c00045fd:	50                   	push   eax
c00045fe:	e8 20 d6 ff ff       	call   c0001c23 <disk_ioctl>
c0004603:	83 c4 10             	add    esp,0x10
c0004606:	85 c0                	test   eax,eax
c0004608:	0f 95 c0             	setne  al
c000460b:	0f b6 c0             	movzx  eax,al
c000460e:	5a                   	pop    edx
c000460f:	5b                   	pop    ebx
c0004610:	5e                   	pop    esi
c0004611:	c3                   	ret    

c0004612 <create_partition>:
c0004612:	55                   	push   ebp
c0004613:	0f b6 c0             	movzx  eax,al
c0004616:	57                   	push   edi
c0004617:	56                   	push   esi
c0004618:	53                   	push   ebx
c0004619:	83 ec 60             	sub    esp,0x60
c000461c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004620:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004624:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004628:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000462c:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004630:	50                   	push   eax
c0004631:	6a 01                	push   0x1
c0004633:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004637:	e8 e7 d5 ff ff       	call   c0001c23 <disk_ioctl>
c000463c:	83 c4 10             	add    esp,0x10
c000463f:	85 c0                	test   eax,eax
c0004641:	74 0a                	je     c000464d <create_partition+0x3b>
c0004643:	b8 01 00 00 00       	mov    eax,0x1
c0004648:	e9 67 05 00 00       	jmp    c0004bb4 <create_partition+0x5a2>
c000464d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004651:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004655:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004659:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000465d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004662:	0f 86 ed 03 00 00    	jbe    c0004a55 <create_partition+0x443>
c0004668:	83 c0 df             	add    eax,0xffffffdf
c000466b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004673:	83 d2 ff             	adc    edx,0xffffffff
c0004676:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000467a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000467e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004682:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004686:	83 c0 bd             	add    eax,0xffffffbd
c0004689:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004690:	83 d2 ff             	adc    edx,0xffffffff
c0004693:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004697:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000469b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046a3:	be 22 00 00 00       	mov    esi,0x22
c00046a8:	31 ff                	xor    edi,edi
c00046aa:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046b2:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046ba:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046c2:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046c6:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046cc:	75 0e                	jne    c00046dc <create_partition+0xca>
c00046ce:	b9 00 02 00 00       	mov    ecx,0x200
c00046d3:	31 d2                	xor    edx,edx
c00046d5:	89 d8                	mov    eax,ebx
c00046d7:	e8 fa d5 ff ff       	call   c0001cd6 <mem_set>
c00046dc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046e0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046e8:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046eb:	0f 84 23 01 00 00    	je     c0004814 <create_partition+0x202>
c00046f1:	89 f0                	mov    eax,esi
c00046f3:	89 fa                	mov    edx,edi
c00046f5:	05 ff 07 00 00       	add    eax,0x7ff
c00046fa:	83 d2 00             	adc    edx,0x0
c00046fd:	89 c1                	mov    ecx,eax
c00046ff:	89 d7                	mov    edi,edx
c0004701:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004707:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000470b:	89 ce                	mov    esi,ecx
c000470d:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004711:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004715:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004719:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000471c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004720:	89 04 24             	mov    DWORD PTR [esp],eax
c0004723:	b8 64 00 00 00       	mov    eax,0x64
c0004728:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000472b:	b8 00 00 00 00       	mov    eax,0x0
c0004730:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004734:	72 41                	jb     c0004777 <create_partition+0x165>
c0004736:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000473a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000473e:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004742:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004747:	01 c1                	add    ecx,eax
c0004749:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000474d:	f7 24 24             	mul    DWORD PTR [esp]
c0004750:	6a 00                	push   0x0
c0004752:	01 ca                	add    edx,ecx
c0004754:	6a 64                	push   0x64
c0004756:	52                   	push   edx
c0004757:	50                   	push   eax
c0004758:	e8 07 2b 02 00       	call   c0027264 <__udivdi3>
c000475d:	83 c4 10             	add    esp,0x10
c0004760:	05 ff 07 00 00       	add    eax,0x7ff
c0004765:	83 d2 00             	adc    edx,0x0
c0004768:	89 c1                	mov    ecx,eax
c000476a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000476e:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004774:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004777:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000477a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000477e:	01 f0                	add    eax,esi
c0004780:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004784:	11 fa                	adc    edx,edi
c0004786:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000478a:	19 d1                	sbb    ecx,edx
c000478c:	73 2e                	jae    c00047bc <create_partition+0x1aa>
c000478e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004792:	89 f8                	mov    eax,edi
c0004794:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000479b:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c000479f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047a7:	73 6b                	jae    c0004814 <create_partition+0x202>
c00047a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047b1:	29 f0                	sub    eax,esi
c00047b3:	19 fa                	sbb    edx,edi
c00047b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00047b8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047c0:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047c3:	74 4f                	je     c0004814 <create_partition+0x202>
c00047c5:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047c8:	b9 10 00 00 00       	mov    ecx,0x10
c00047cd:	ba f0 9d 02 c0       	mov    edx,0xc0029df0
c00047d2:	e8 ea d4 ff ff       	call   c0001cc1 <mem_cpy>
c00047d7:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047db:	b9 10 00 00 00       	mov    ecx,0x10
c00047e0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047e4:	e8 2c db ff ff       	call   c0002315 <make_rand>
c00047e9:	89 f2                	mov    edx,esi
c00047eb:	89 f9                	mov    ecx,edi
c00047ed:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047f1:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047f5:	e8 c1 d4 ff ff       	call   c0001cbb <st_qword>
c00047fa:	03 34 24             	add    esi,DWORD PTR [esp]
c00047fd:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004801:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004805:	89 f2                	mov    edx,esi
c0004807:	89 f9                	mov    ecx,edi
c0004809:	83 c2 ff             	add    edx,0xffffffff
c000480c:	83 d1 ff             	adc    ecx,0xffffffff
c000480f:	e8 a7 d4 ff ff       	call   c0001cbb <st_qword>
c0004814:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004818:	83 e8 80             	sub    eax,0xffffff80
c000481b:	89 c5                	mov    ebp,eax
c000481d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004821:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004827:	75 6b                	jne    c0004894 <create_partition+0x282>
c0004829:	45                   	inc    ebp
c000482a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000482e:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004833:	e8 39 da ff ff       	call   c0002271 <crc32>
c0004838:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000483e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004842:	75 e5                	jne    c0004829 <create_partition+0x217>
c0004844:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004848:	31 d2                	xor    edx,edx
c000484a:	83 ec 0c             	sub    esp,0xc
c000484d:	c1 ed 09             	shr    ebp,0x9
c0004850:	6a 01                	push   0x1
c0004852:	8d 45 02             	lea    eax,[ebp+0x2]
c0004855:	52                   	push   edx
c0004856:	50                   	push   eax
c0004857:	53                   	push   ebx
c0004858:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000485c:	e8 ac d3 ff ff       	call   c0001c0d <disk_write>
c0004861:	83 c4 20             	add    esp,0x20
c0004864:	85 c0                	test   eax,eax
c0004866:	0f 85 d7 fd ff ff    	jne    c0004643 <create_partition+0x31>
c000486c:	83 ec 0c             	sub    esp,0xc
c000486f:	31 d2                	xor    edx,edx
c0004871:	6a 01                	push   0x1
c0004873:	89 e8                	mov    eax,ebp
c0004875:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004879:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000487d:	52                   	push   edx
c000487e:	50                   	push   eax
c000487f:	53                   	push   ebx
c0004880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004884:	e8 84 d3 ff ff       	call   c0001c0d <disk_write>
c0004889:	83 c4 20             	add    esp,0x20
c000488c:	85 c0                	test   eax,eax
c000488e:	0f 85 af fd ff ff    	jne    c0004643 <create_partition+0x31>
c0004894:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004898:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000489c:	3d 00 40 00 00       	cmp    eax,0x4000
c00048a1:	74 0d                	je     c00048b0 <create_partition+0x29e>
c00048a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048a7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ab:	e9 12 fe ff ff       	jmp    c00046c2 <create_partition+0xb0>
c00048b0:	31 d2                	xor    edx,edx
c00048b2:	b9 00 02 00 00       	mov    ecx,0x200
c00048b7:	89 d8                	mov    eax,ebx
c00048b9:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048bc:	e8 15 d4 ff ff       	call   c0001cd6 <mem_set>
c00048c1:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048c4:	b9 10 00 00 00       	mov    ecx,0x10
c00048c9:	ba e0 9c 02 c0       	mov    edx,0xc0029ce0
c00048ce:	89 d8                	mov    eax,ebx
c00048d0:	e8 ec d3 ff ff       	call   c0001cc1 <mem_cpy>
c00048d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048d9:	8d 43 58             	lea    eax,[ebx+0x58]
c00048dc:	f7 d2                	not    edx
c00048de:	e8 d5 d3 ff ff       	call   c0001cb8 <st_dword>
c00048e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00048e6:	31 c9                	xor    ecx,ecx
c00048e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00048eb:	ba 01 00 00 00       	mov    edx,0x1
c00048f0:	e8 c6 d3 ff ff       	call   c0001cbb <st_qword>
c00048f5:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048f9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048fd:	83 c2 ff             	add    edx,0xffffffff
c0004900:	89 e8                	mov    eax,ebp
c0004902:	83 d1 ff             	adc    ecx,0xffffffff
c0004905:	e8 b1 d3 ff ff       	call   c0001cbb <st_qword>
c000490a:	31 c9                	xor    ecx,ecx
c000490c:	8d 43 28             	lea    eax,[ebx+0x28]
c000490f:	ba 22 00 00 00       	mov    edx,0x22
c0004914:	e8 a2 d3 ff ff       	call   c0001cbb <st_qword>
c0004919:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000491d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004921:	83 c2 de             	add    edx,0xffffffde
c0004924:	8d 43 30             	lea    eax,[ebx+0x30]
c0004927:	83 d1 ff             	adc    ecx,0xffffffff
c000492a:	31 f6                	xor    esi,esi
c000492c:	e8 8a d3 ff ff       	call   c0001cbb <st_qword>
c0004931:	8d 43 54             	lea    eax,[ebx+0x54]
c0004934:	ba 80 00 00 00       	mov    edx,0x80
c0004939:	e8 7a d3 ff ff       	call   c0001cb8 <st_dword>
c000493e:	8d 43 50             	lea    eax,[ebx+0x50]
c0004941:	ba 80 00 00 00       	mov    edx,0x80
c0004946:	e8 6d d3 ff ff       	call   c0001cb8 <st_dword>
c000494b:	ba 02 00 00 00       	mov    edx,0x2
c0004950:	89 f8                	mov    eax,edi
c0004952:	e8 61 d3 ff ff       	call   c0001cb8 <st_dword>
c0004957:	8d 53 38             	lea    edx,[ebx+0x38]
c000495a:	b9 10 00 00 00       	mov    ecx,0x10
c000495f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004963:	e8 ad d9 ff ff       	call   c0002315 <make_rand>
c0004968:	83 c8 ff             	or     eax,0xffffffff
c000496b:	46                   	inc    esi
c000496c:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004971:	e8 fb d8 ff ff       	call   c0002271 <crc32>
c0004976:	83 fe 5c             	cmp    esi,0x5c
c0004979:	75 f0                	jne    c000496b <create_partition+0x359>
c000497b:	f7 d0                	not    eax
c000497d:	8d 73 10             	lea    esi,[ebx+0x10]
c0004980:	89 c2                	mov    edx,eax
c0004982:	89 f0                	mov    eax,esi
c0004984:	e8 2f d3 ff ff       	call   c0001cb8 <st_dword>
c0004989:	83 ec 0c             	sub    esp,0xc
c000498c:	6a 01                	push   0x1
c000498e:	6a 00                	push   0x0
c0004990:	6a 01                	push   0x1
c0004992:	53                   	push   ebx
c0004993:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004997:	e8 71 d2 ff ff       	call   c0001c0d <disk_write>
c000499c:	83 c4 20             	add    esp,0x20
c000499f:	85 c0                	test   eax,eax
c00049a1:	0f 85 9c fc ff ff    	jne    c0004643 <create_partition+0x31>
c00049a7:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ab:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049af:	83 c2 ff             	add    edx,0xffffffff
c00049b2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b5:	83 d1 ff             	adc    ecx,0xffffffff
c00049b8:	e8 fe d2 ff ff       	call   c0001cbb <st_qword>
c00049bd:	ba 01 00 00 00       	mov    edx,0x1
c00049c2:	31 c9                	xor    ecx,ecx
c00049c4:	89 e8                	mov    eax,ebp
c00049c6:	e8 f0 d2 ff ff       	call   c0001cbb <st_qword>
c00049cb:	89 f8                	mov    eax,edi
c00049cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049d1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049d5:	31 ff                	xor    edi,edi
c00049d7:	e8 df d2 ff ff       	call   c0001cbb <st_qword>
c00049dc:	89 f0                	mov    eax,esi
c00049de:	31 d2                	xor    edx,edx
c00049e0:	e8 d3 d2 ff ff       	call   c0001cb8 <st_dword>
c00049e5:	83 c8 ff             	or     eax,0xffffffff
c00049e8:	47                   	inc    edi
c00049e9:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049ee:	e8 7e d8 ff ff       	call   c0002271 <crc32>
c00049f3:	83 ff 5c             	cmp    edi,0x5c
c00049f6:	75 f0                	jne    c00049e8 <create_partition+0x3d6>
c00049f8:	f7 d0                	not    eax
c00049fa:	89 c2                	mov    edx,eax
c00049fc:	89 f0                	mov    eax,esi
c00049fe:	e8 b5 d2 ff ff       	call   c0001cb8 <st_dword>
c0004a03:	83 ec 0c             	sub    esp,0xc
c0004a06:	6a 01                	push   0x1
c0004a08:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a0c:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a10:	83 c0 ff             	add    eax,0xffffffff
c0004a13:	83 d2 ff             	adc    edx,0xffffffff
c0004a16:	52                   	push   edx
c0004a17:	50                   	push   eax
c0004a18:	53                   	push   ebx
c0004a19:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a1d:	e8 eb d1 ff ff       	call   c0001c0d <disk_write>
c0004a22:	83 c4 20             	add    esp,0x20
c0004a25:	85 c0                	test   eax,eax
c0004a27:	0f 85 16 fc ff ff    	jne    c0004643 <create_partition+0x31>
c0004a2d:	31 d2                	xor    edx,edx
c0004a2f:	89 d8                	mov    eax,ebx
c0004a31:	b9 00 02 00 00       	mov    ecx,0x200
c0004a36:	e8 9b d2 ff ff       	call   c0001cd6 <mem_set>
c0004a3b:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a41:	b9 10 00 00 00       	mov    ecx,0x10
c0004a46:	ba f0 9c 02 c0       	mov    edx,0xc0029cf0
c0004a4b:	e8 71 d2 ff ff       	call   c0001cc1 <mem_cpy>
c0004a50:	e9 21 01 00 00       	jmp    c0004b76 <create_partition+0x564>
c0004a55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a59:	b9 05 00 00 00       	mov    ecx,0x5
c0004a5e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a61:	bf 08 00 00 00       	mov    edi,0x8
c0004a66:	89 f8                	mov    eax,edi
c0004a68:	31 d2                	xor    edx,edx
c0004a6a:	0f b6 f0             	movzx  esi,al
c0004a6d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a70:	f7 f6                	div    esi
c0004a72:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a77:	76 0a                	jbe    c0004a83 <create_partition+0x471>
c0004a79:	d1 e7                	shl    edi,1
c0004a7b:	49                   	dec    ecx
c0004a7c:	75 e8                	jne    c0004a66 <create_partition+0x454>
c0004a7e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a83:	b9 00 02 00 00       	mov    ecx,0x200
c0004a88:	31 d2                	xor    edx,edx
c0004a8a:	89 d8                	mov    eax,ebx
c0004a8c:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a92:	e8 3f d2 ff ff       	call   c0001cd6 <mem_set>
c0004a97:	b9 64 00 00 00       	mov    ecx,0x64
c0004a9c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a9f:	31 d2                	xor    edx,edx
c0004aa1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004aa9:	f7 f1                	div    ecx
c0004aab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004ab0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ab4:	89 f8                	mov    eax,edi
c0004ab6:	0f b6 c0             	movzx  eax,al
c0004ab9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004abd:	e9 80 00 00 00       	jmp    c0004b42 <create_partition+0x530>
c0004ac2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ac5:	29 cf                	sub    edi,ecx
c0004ac7:	89 ca                	mov    edx,ecx
c0004ac9:	89 f0                	mov    eax,esi
c0004acb:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ad0:	e8 e3 d1 ff ff       	call   c0001cb8 <st_dword>
c0004ad5:	8d 46 04             	lea    eax,[esi+0x4]
c0004ad8:	89 fa                	mov    edx,edi
c0004ada:	83 c6 10             	add    esi,0x10
c0004add:	e8 d6 d1 ff ff       	call   c0001cb8 <st_dword>
c0004ae2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004ae6:	31 d2                	xor    edx,edx
c0004ae8:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004aeb:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004aef:	89 c8                	mov    eax,ecx
c0004af1:	01 f9                	add    ecx,edi
c0004af3:	f7 f5                	div    ebp
c0004af5:	89 d5                	mov    ebp,edx
c0004af7:	31 d2                	xor    edx,edx
c0004af9:	45                   	inc    ebp
c0004afa:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004afe:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b01:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b04:	89 c2                	mov    edx,eax
c0004b06:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b09:	c1 ea 02             	shr    edx,0x2
c0004b0c:	83 e2 c0             	and    edx,0xffffffc0
c0004b0f:	09 ea                	or     edx,ebp
c0004b11:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b16:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b19:	31 d2                	xor    edx,edx
c0004b1b:	f7 f5                	div    ebp
c0004b1d:	89 d7                	mov    edi,edx
c0004b1f:	31 d2                	xor    edx,edx
c0004b21:	47                   	inc    edi
c0004b22:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b26:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b29:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b2c:	89 c5                	mov    ebp,eax
c0004b2e:	c1 ed 02             	shr    ebp,0x2
c0004b31:	83 e5 c0             	and    ebp,0xffffffc0
c0004b34:	09 ef                	or     edi,ebp
c0004b36:	89 fa                	mov    edx,edi
c0004b38:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b3b:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b40:	74 34                	je     c0004b76 <create_partition+0x564>
c0004b42:	85 c9                	test   ecx,ecx
c0004b44:	74 30                	je     c0004b76 <create_partition+0x564>
c0004b46:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b49:	76 2b                	jbe    c0004b76 <create_partition+0x564>
c0004b4b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b4f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b53:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b56:	83 ff 64             	cmp    edi,0x64
c0004b59:	76 4b                	jbe    c0004ba6 <create_partition+0x594>
c0004b5b:	89 f8                	mov    eax,edi
c0004b5d:	01 c8                	add    eax,ecx
c0004b5f:	0f 82 5d ff ff ff    	jb     c0004ac2 <create_partition+0x4b0>
c0004b65:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b68:	0f 87 54 ff ff ff    	ja     c0004ac2 <create_partition+0x4b0>
c0004b6e:	85 ff                	test   edi,edi
c0004b70:	0f 85 51 ff ff ff    	jne    c0004ac7 <create_partition+0x4b5>
c0004b76:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b7c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b81:	e8 2e d1 ff ff       	call   c0001cb4 <st_word>
c0004b86:	83 ec 0c             	sub    esp,0xc
c0004b89:	6a 01                	push   0x1
c0004b8b:	6a 00                	push   0x0
c0004b8d:	6a 00                	push   0x0
c0004b8f:	53                   	push   ebx
c0004b90:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b94:	e8 74 d0 ff ff       	call   c0001c0d <disk_write>
c0004b99:	83 c4 20             	add    esp,0x20
c0004b9c:	85 c0                	test   eax,eax
c0004b9e:	0f 95 c0             	setne  al
c0004ba1:	0f b6 c0             	movzx  eax,al
c0004ba4:	eb 0e                	jmp    c0004bb4 <create_partition+0x5a2>
c0004ba6:	74 07                	je     c0004baf <create_partition+0x59d>
c0004ba8:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bad:	eb ac                	jmp    c0004b5b <create_partition+0x549>
c0004baf:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bb2:	eb a7                	jmp    c0004b5b <create_partition+0x549>
c0004bb4:	83 c4 5c             	add    esp,0x5c
c0004bb7:	5b                   	pop    ebx
c0004bb8:	5e                   	pop    esi
c0004bb9:	5f                   	pop    edi
c0004bba:	5d                   	pop    ebp
c0004bbb:	c3                   	ret    

c0004bbc <get_fileinfo>:
c0004bbc:	55                   	push   ebp
c0004bbd:	57                   	push   edi
c0004bbe:	56                   	push   esi
c0004bbf:	53                   	push   ebx
c0004bc0:	83 ec 1c             	sub    esp,0x1c
c0004bc3:	8b 30                	mov    esi,DWORD PTR [eax]
c0004bc5:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bc9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bcd:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bd0:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bd3:	0f 84 dc 01 00 00    	je     c0004db5 <get_fileinfo+0x1f9>
c0004bd9:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bdc:	75 0f                	jne    c0004bed <get_fileinfo+0x31>
c0004bde:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004be1:	83 c4 1c             	add    esp,0x1c
c0004be4:	5b                   	pop    ebx
c0004be5:	5e                   	pop    esi
c0004be6:	5f                   	pop    edi
c0004be7:	5d                   	pop    ebp
c0004be8:	e9 58 d5 ff ff       	jmp    c0002145 <get_xfileinfo>
c0004bed:	89 d3                	mov    ebx,edx
c0004bef:	89 c6                	mov    esi,eax
c0004bf1:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bf5:	74 6a                	je     c0004c61 <get_fileinfo+0xa5>
c0004bf7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004bff:	31 ed                	xor    ebp,ebp
c0004c01:	31 ff                	xor    edi,edi
c0004c03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c07:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c0e:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c12:	66 85 d2             	test   dx,dx
c0004c15:	74 3e                	je     c0004c55 <get_fileinfo+0x99>
c0004c17:	66 85 ed             	test   bp,bp
c0004c1a:	75 0c                	jne    c0004c28 <get_fileinfo+0x6c>
c0004c1c:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c22:	66 3d ff 07          	cmp    ax,0x7ff
c0004c26:	76 22                	jbe    c0004c4a <get_fileinfo+0x8e>
c0004c28:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c2d:	89 e8                	mov    eax,ebp
c0004c2f:	29 f9                	sub    ecx,edi
c0004c31:	c1 e0 10             	shl    eax,0x10
c0004c34:	09 d0                	or     eax,edx
c0004c36:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c3a:	e8 a3 d1 ff ff       	call   c0001de2 <put_utf>
c0004c3f:	84 c0                	test   al,al
c0004c41:	74 10                	je     c0004c53 <get_fileinfo+0x97>
c0004c43:	0f b6 c0             	movzx  eax,al
c0004c46:	31 d2                	xor    edx,edx
c0004c48:	01 c7                	add    edi,eax
c0004c4a:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c4f:	89 d5                	mov    ebp,edx
c0004c51:	eb b0                	jmp    c0004c03 <get_fileinfo+0x47>
c0004c53:	31 ff                	xor    edi,edi
c0004c55:	66 85 ed             	test   bp,bp
c0004c58:	74 02                	je     c0004c5c <get_fileinfo+0xa0>
c0004c5a:	31 ff                	xor    edi,edi
c0004c5c:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c61:	31 ff                	xor    edi,edi
c0004c63:	31 c9                	xor    ecx,ecx
c0004c65:	83 f9 0a             	cmp    ecx,0xa
c0004c68:	0f 87 ad 00 00 00    	ja     c0004d1b <get_fileinfo+0x15f>
c0004c6e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c71:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c74:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c78:	66 83 fa 20          	cmp    dx,0x20
c0004c7c:	0f 84 92 00 00 00    	je     c0004d14 <get_fileinfo+0x158>
c0004c82:	66 83 fa 05          	cmp    dx,0x5
c0004c86:	75 05                	jne    c0004c8d <get_fileinfo+0xd1>
c0004c88:	ba e5 00 00 00       	mov    edx,0xe5
c0004c8d:	83 ff 0b             	cmp    edi,0xb
c0004c90:	77 0b                	ja     c0004c9d <get_fileinfo+0xe1>
c0004c92:	83 fd 09             	cmp    ebp,0x9
c0004c95:	75 06                	jne    c0004c9d <get_fileinfo+0xe1>
c0004c97:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c9c:	47                   	inc    edi
c0004c9d:	0f b7 c2             	movzx  eax,dx
c0004ca0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ca4:	e8 6d d0 ff ff       	call   c0001d16 <dbc_1st>
c0004ca9:	85 c0                	test   eax,eax
c0004cab:	74 2f                	je     c0004cdc <get_fileinfo+0x120>
c0004cad:	83 fd 08             	cmp    ebp,0x8
c0004cb0:	74 2a                	je     c0004cdc <get_fileinfo+0x120>
c0004cb2:	83 fd 0b             	cmp    ebp,0xb
c0004cb5:	74 25                	je     c0004cdc <get_fileinfo+0x120>
c0004cb7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cba:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cbe:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004cc2:	e8 52 d0 ff ff       	call   c0001d19 <dbc_2nd>
c0004cc7:	85 c0                	test   eax,eax
c0004cc9:	74 11                	je     c0004cdc <get_fileinfo+0x120>
c0004ccb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ccf:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cd4:	c1 e2 08             	shl    edx,0x8
c0004cd7:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cda:	09 c2                	or     edx,eax
c0004cdc:	0f b7 d2             	movzx  edx,dx
c0004cdf:	50                   	push   eax
c0004ce0:	50                   	push   eax
c0004ce1:	68 b5 01 00 00       	push   0x1b5
c0004ce6:	52                   	push   edx
c0004ce7:	e8 46 38 00 00       	call   c0008532 <ff_oem2uni>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	66 85 c0             	test   ax,ax
c0004cf2:	75 04                	jne    c0004cf8 <get_fileinfo+0x13c>
c0004cf4:	31 ff                	xor    edi,edi
c0004cf6:	eb 23                	jmp    c0004d1b <get_fileinfo+0x15f>
c0004cf8:	b9 0c 00 00 00       	mov    ecx,0xc
c0004cfd:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d01:	29 f9                	sub    ecx,edi
c0004d03:	0f b7 c0             	movzx  eax,ax
c0004d06:	e8 d7 d0 ff ff       	call   c0001de2 <put_utf>
c0004d0b:	84 c0                	test   al,al
c0004d0d:	74 e5                	je     c0004cf4 <get_fileinfo+0x138>
c0004d0f:	0f b6 c0             	movzx  eax,al
c0004d12:	01 c7                	add    edi,eax
c0004d14:	89 e9                	mov    ecx,ebp
c0004d16:	e9 4a ff ff ff       	jmp    c0004c65 <get_fileinfo+0xa9>
c0004d1b:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d20:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d24:	75 54                	jne    c0004d7a <get_fileinfo+0x1be>
c0004d26:	85 ff                	test   edi,edi
c0004d28:	75 0b                	jne    c0004d35 <get_fileinfo+0x179>
c0004d2a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d2e:	ba 01 00 00 00       	mov    edx,0x1
c0004d33:	eb 33                	jmp    c0004d68 <get_fileinfo+0x1ac>
c0004d35:	b1 08                	mov    cl,0x8
c0004d37:	31 d2                	xor    edx,edx
c0004d39:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d3f:	84 c0                	test   al,al
c0004d41:	74 25                	je     c0004d68 <get_fileinfo+0x1ac>
c0004d43:	66 83 f8 2e          	cmp    ax,0x2e
c0004d47:	74 16                	je     c0004d5f <get_fileinfo+0x1a3>
c0004d49:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d4c:	66 83 ff 19          	cmp    di,0x19
c0004d50:	77 0f                	ja     c0004d61 <get_fileinfo+0x1a5>
c0004d52:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d55:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d58:	74 07                	je     c0004d61 <get_fileinfo+0x1a5>
c0004d5a:	83 c0 20             	add    eax,0x20
c0004d5d:	eb 02                	jmp    c0004d61 <get_fileinfo+0x1a5>
c0004d5f:	b1 10                	mov    cl,0x10
c0004d61:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d65:	42                   	inc    edx
c0004d66:	eb d1                	jmp    c0004d39 <get_fileinfo+0x17d>
c0004d68:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d6d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d70:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d74:	75 04                	jne    c0004d7a <get_fileinfo+0x1be>
c0004d76:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d7a:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7d:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d80:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d83:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d86:	83 c0 1c             	add    eax,0x1c
c0004d89:	e8 c1 ce ff ff       	call   c0001c4f <ld_dword>
c0004d8e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d95:	89 03                	mov    DWORD PTR [ebx],eax
c0004d97:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9a:	83 c0 16             	add    eax,0x16
c0004d9d:	e8 a0 ce ff ff       	call   c0001c42 <ld_word>
c0004da2:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004da6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da9:	83 c0 18             	add    eax,0x18
c0004dac:	e8 91 ce ff ff       	call   c0001c42 <ld_word>
c0004db1:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004db5:	83 c4 1c             	add    esp,0x1c
c0004db8:	5b                   	pop    ebx
c0004db9:	5e                   	pop    esi
c0004dba:	5f                   	pop    edi
c0004dbb:	5d                   	pop    ebp
c0004dbc:	c3                   	ret    

c0004dbd <ld_clust.isra.0>:
c0004dbd:	56                   	push   esi
c0004dbe:	89 c6                	mov    esi,eax
c0004dc0:	53                   	push   ebx
c0004dc1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004dc4:	89 d3                	mov    ebx,edx
c0004dc6:	e8 77 ce ff ff       	call   c0001c42 <ld_word>
c0004dcb:	0f b7 c8             	movzx  ecx,ax
c0004dce:	89 f0                	mov    eax,esi
c0004dd0:	3c 03                	cmp    al,0x3
c0004dd2:	75 0d                	jne    c0004de1 <ld_clust.isra.0+0x24>
c0004dd4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dd7:	e8 66 ce ff ff       	call   c0001c42 <ld_word>
c0004ddc:	c1 e0 10             	shl    eax,0x10
c0004ddf:	09 c1                	or     ecx,eax
c0004de1:	89 c8                	mov    eax,ecx
c0004de3:	5b                   	pop    ebx
c0004de4:	5e                   	pop    esi
c0004de5:	c3                   	ret    

c0004de6 <st_clust.isra.1>:
c0004de6:	56                   	push   esi
c0004de7:	89 c6                	mov    esi,eax
c0004de9:	53                   	push   ebx
c0004dea:	89 d3                	mov    ebx,edx
c0004dec:	0f b7 d1             	movzx  edx,cx
c0004def:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004df2:	e8 bd ce ff ff       	call   c0001cb4 <st_word>
c0004df7:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004dfa:	75 0f                	jne    c0004e0b <st_clust.isra.1+0x25>
c0004dfc:	c1 e9 10             	shr    ecx,0x10
c0004dff:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e02:	89 ca                	mov    edx,ecx
c0004e04:	5b                   	pop    ebx
c0004e05:	5e                   	pop    esi
c0004e06:	e9 a9 ce ff ff       	jmp    c0001cb4 <st_word>
c0004e0b:	5b                   	pop    ebx
c0004e0c:	5e                   	pop    esi
c0004e0d:	c3                   	ret    

c0004e0e <init_alloc_info.isra.2>:
c0004e0e:	56                   	push   esi
c0004e0f:	53                   	push   ebx
c0004e10:	89 c6                	mov    esi,eax
c0004e12:	89 d3                	mov    ebx,edx
c0004e14:	51                   	push   ecx
c0004e15:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e17:	83 c0 34             	add    eax,0x34
c0004e1a:	e8 30 ce ff ff       	call   c0001c4f <ld_dword>
c0004e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e22:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e24:	83 c0 38             	add    eax,0x38
c0004e27:	e8 3b ce ff ff       	call   c0001c67 <ld_qword>
c0004e2c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e2f:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e32:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e34:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e37:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e3e:	83 e0 02             	and    eax,0x2
c0004e41:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e44:	5b                   	pop    ebx
c0004e45:	5b                   	pop    ebx
c0004e46:	5e                   	pop    esi
c0004e47:	c3                   	ret    

c0004e48 <follow_path>:
c0004e48:	56                   	push   esi
c0004e49:	53                   	push   ebx
c0004e4a:	89 c3                	mov    ebx,eax
c0004e4c:	83 ec 14             	sub    esp,0x14
c0004e4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e53:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e59:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e5b:	80 fa 5c             	cmp    dl,0x5c
c0004e5e:	75 07                	jne    c0004e67 <follow_path+0x1f>
c0004e60:	40                   	inc    eax
c0004e61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e65:	eb ee                	jmp    c0004e55 <follow_path+0xd>
c0004e67:	80 fa 2f             	cmp    dl,0x2f
c0004e6a:	74 f4                	je     c0004e60 <follow_path+0x18>
c0004e6c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e73:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e7a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e7d:	77 52                	ja     c0004ed1 <follow_path+0x89>
c0004e7f:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 d8                	mov    eax,ebx
c0004e87:	e8 12 e3 ff ff       	call   c000319e <dir_sdi>
c0004e8c:	eb 7c                	jmp    c0004f0a <follow_path+0xc2>
c0004e8e:	89 d8                	mov    eax,ebx
c0004e90:	e8 6e f2 ff ff       	call   c0004103 <dir_find>
c0004e95:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e98:	85 c0                	test   eax,eax
c0004e9a:	75 46                	jne    c0004ee2 <follow_path+0x9a>
c0004e9c:	80 e2 04             	and    dl,0x4
c0004e9f:	75 69                	jne    c0004f0a <follow_path+0xc2>
c0004ea1:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ea5:	74 5e                	je     c0004f05 <follow_path+0xbd>
c0004ea7:	8a 06                	mov    al,BYTE PTR [esi]
c0004ea9:	3c 04                	cmp    al,0x4
c0004eab:	75 41                	jne    c0004eee <follow_path+0xa6>
c0004ead:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004eb0:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004eb4:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004eb7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004eba:	30 c0                	xor    al,al
c0004ebc:	09 d0                	or     eax,edx
c0004ebe:	89 da                	mov    edx,ebx
c0004ec0:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ec3:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ec6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ec9:	8d 46 10             	lea    eax,[esi+0x10]
c0004ecc:	e8 3d ff ff ff       	call   c0004e0e <init_alloc_info.isra.2>
c0004ed1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ed5:	89 d8                	mov    eax,ebx
c0004ed7:	e8 a9 ed ff ff       	call   c0003c85 <create_name>
c0004edc:	85 c0                	test   eax,eax
c0004ede:	74 ae                	je     c0004e8e <follow_path+0x46>
c0004ee0:	eb 28                	jmp    c0004f0a <follow_path+0xc2>
c0004ee2:	83 f8 04             	cmp    eax,0x4
c0004ee5:	75 23                	jne    c0004f0a <follow_path+0xc2>
c0004ee7:	80 e2 04             	and    dl,0x4
c0004eea:	74 19                	je     c0004f05 <follow_path+0xbd>
c0004eec:	eb 1c                	jmp    c0004f0a <follow_path+0xc2>
c0004eee:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ef1:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004ef7:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004efb:	e8 bd fe ff ff       	call   c0004dbd <ld_clust.isra.0>
c0004f00:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f03:	eb cc                	jmp    c0004ed1 <follow_path+0x89>
c0004f05:	b8 05 00 00 00       	mov    eax,0x5
c0004f0a:	83 c4 14             	add    esp,0x14
c0004f0d:	5b                   	pop    ebx
c0004f0e:	5e                   	pop    esi
c0004f0f:	c3                   	ret    

c0004f10 <f_mount>:
c0004f10:	53                   	push   ebx
c0004f11:	83 ec 18             	sub    esp,0x18
c0004f14:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f18:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f20:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f24:	e8 fb d2 ff ff       	call   c0002224 <get_ldnumber>
c0004f29:	89 c2                	mov    edx,eax
c0004f2b:	b8 0b 00 00 00       	mov    eax,0xb
c0004f30:	85 d2                	test   edx,edx
c0004f32:	78 39                	js     c0004f6d <f_mount+0x5d>
c0004f34:	8b 04 95 80 ee 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1180]
c0004f3b:	85 c0                	test   eax,eax
c0004f3d:	74 03                	je     c0004f42 <f_mount+0x32>
c0004f3f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f46:	85 c0                	test   eax,eax
c0004f48:	74 03                	je     c0004f4d <f_mount+0x3d>
c0004f4a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f51:	89 04 95 80 ee 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1180],eax
c0004f58:	31 c0                	xor    eax,eax
c0004f5a:	84 db                	test   bl,bl
c0004f5c:	74 0f                	je     c0004f6d <f_mount+0x5d>
c0004f5e:	31 c9                	xor    ecx,ecx
c0004f60:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f64:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f68:	e8 65 d7 ff ff       	call   c00026d2 <mount_volume>
c0004f6d:	83 c4 18             	add    esp,0x18
c0004f70:	5b                   	pop    ebx
c0004f71:	c3                   	ret    

c0004f72 <f_open>:
c0004f72:	55                   	push   ebp
c0004f73:	bd 09 00 00 00       	mov    ebp,0x9
c0004f78:	57                   	push   edi
c0004f79:	56                   	push   esi
c0004f7a:	53                   	push   ebx
c0004f7b:	83 ec 7c             	sub    esp,0x7c
c0004f7e:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f85:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f8c:	85 db                	test   ebx,ebx
c0004f8e:	0f 84 10 04 00 00    	je     c00053a4 <f_open+0x432>
c0004f94:	89 fe                	mov    esi,edi
c0004f96:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f9a:	83 e6 3f             	and    esi,0x3f
c0004f9d:	89 f0                	mov    eax,esi
c0004f9f:	0f b6 c8             	movzx  ecx,al
c0004fa2:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fa9:	e8 24 d7 ff ff       	call   c00026d2 <mount_volume>
c0004fae:	89 c5                	mov    ebp,eax
c0004fb0:	85 c0                	test   eax,eax
c0004fb2:	0f 85 e6 03 00 00    	jne    c000539e <f_open+0x42c>
c0004fb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fbc:	bd 11 00 00 00       	mov    ebp,0x11
c0004fc1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fc5:	83 ec 0c             	sub    esp,0xc
c0004fc8:	68 60 04 00 00       	push   0x460
c0004fcd:	e8 a3 34 00 00       	call   c0008475 <ff_memalloc>
c0004fd2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fd6:	83 c4 10             	add    esp,0x10
c0004fd9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fde:	0f 84 c0 03 00 00    	je     c00053a4 <f_open+0x432>
c0004fe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fe8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fec:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004ff2:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004ff5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004ff8:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005003:	e8 40 fe ff ff       	call   c0004e48 <follow_path>
c0005008:	89 c5                	mov    ebp,eax
c000500a:	85 c0                	test   eax,eax
c000500c:	75 0c                	jne    c000501a <f_open+0xa8>
c000500e:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005013:	79 05                	jns    c000501a <f_open+0xa8>
c0005015:	bd 06 00 00 00       	mov    ebp,0x6
c000501a:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005020:	0f 84 84 01 00 00    	je     c00051aa <f_open+0x238>
c0005026:	85 ed                	test   ebp,ebp
c0005028:	74 20                	je     c000504a <f_open+0xd8>
c000502a:	83 fd 04             	cmp    ebp,0x4
c000502d:	0f 85 58 03 00 00    	jne    c000538b <f_open+0x419>
c0005033:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005037:	83 ce 08             	or     esi,0x8
c000503a:	e8 8a f2 ff ff       	call   c00042c9 <dir_register>
c000503f:	89 c5                	mov    ebp,eax
c0005041:	85 c0                	test   eax,eax
c0005043:	74 2f                	je     c0005074 <f_open+0x102>
c0005045:	e9 41 03 00 00       	jmp    c000538b <f_open+0x419>
c000504a:	bd 07 00 00 00       	mov    ebp,0x7
c000504f:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005054:	0f 85 31 03 00 00    	jne    c000538b <f_open+0x419>
c000505a:	bd 08 00 00 00       	mov    ebp,0x8
c000505f:	f7 c7 04 00 00 00    	test   edi,0x4
c0005065:	0f 85 20 03 00 00    	jne    c000538b <f_open+0x419>
c000506b:	83 e7 08             	and    edi,0x8
c000506e:	0f 84 65 01 00 00    	je     c00051d9 <f_open+0x267>
c0005074:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005078:	8a 02                	mov    al,BYTE PTR [edx]
c000507a:	3c 04                	cmp    al,0x4
c000507c:	0f 85 97 00 00 00    	jne    c0005119 <f_open+0x1a7>
c0005082:	8d 42 10             	lea    eax,[edx+0x10]
c0005085:	89 13                	mov    DWORD PTR [ebx],edx
c0005087:	89 da                	mov    edx,ebx
c0005089:	e8 80 fd ff ff       	call   c0004e0e <init_alloc_info.isra.2>
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	b9 1e 00 00 00       	mov    ecx,0x1e
c0005099:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000509c:	83 c0 02             	add    eax,0x2
c000509f:	e8 32 cc ff ff       	call   c0001cd6 <mem_set>
c00050a4:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050a9:	31 d2                	xor    edx,edx
c00050ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 26             	add    eax,0x26
c00050b5:	e8 1c cc ff ff       	call   c0001cd6 <mem_set>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050c1:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00050ca:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050cd:	83 c0 08             	add    eax,0x8
c00050d0:	e8 e3 cb ff ff       	call   c0001cb8 <st_dword>
c00050d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050d9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050dc:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050e0:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050e4:	e8 b7 ea ff ff       	call   c0003ba0 <store_xdir>
c00050e9:	89 c5                	mov    ebp,eax
c00050eb:	85 c0                	test   eax,eax
c00050ed:	0f 85 98 02 00 00    	jne    c000538b <f_open+0x419>
c00050f3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050f6:	85 d2                	test   edx,edx
c00050f8:	0f 84 db 00 00 00    	je     c00051d9 <f_open+0x267>
c00050fe:	31 c9                	xor    ecx,ecx
c0005100:	89 d8                	mov    eax,ebx
c0005102:	e8 8e e3 ff ff       	call   c0003495 <remove_chain>
c0005107:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000510b:	89 c5                	mov    ebp,eax
c000510d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005110:	48                   	dec    eax
c0005111:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005114:	e9 b8 00 00 00       	jmp    c00051d1 <f_open+0x25f>
c0005119:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000511d:	89 ea                	mov    edx,ebp
c000511f:	e8 99 fc ff ff       	call   c0004dbd <ld_clust.isra.0>
c0005124:	ba 00 00 21 50       	mov    edx,0x50210000
c0005129:	89 c7                	mov    edi,eax
c000512b:	8d 45 0e             	lea    eax,[ebp+0xe]
c000512e:	e8 85 cb ff ff       	call   c0001cb8 <st_dword>
c0005133:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005137:	31 c9                	xor    ecx,ecx
c0005139:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005145:	e8 9c fc ff ff       	call   c0004de6 <st_clust.isra.1>
c000514a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000514e:	31 d2                	xor    edx,edx
c0005150:	83 c0 1c             	add    eax,0x1c
c0005153:	e8 60 cb ff ff       	call   c0001cb8 <st_dword>
c0005158:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000515c:	85 ff                	test   edi,edi
c000515e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005162:	74 75                	je     c00051d9 <f_open+0x267>
c0005164:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005168:	31 c9                	xor    ecx,ecx
c000516a:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000516d:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005170:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005174:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005178:	89 fa                	mov    edx,edi
c000517a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000517e:	e8 12 e3 ff ff       	call   c0003495 <remove_chain>
c0005183:	89 c5                	mov    ebp,eax
c0005185:	85 c0                	test   eax,eax
c0005187:	0f 85 fe 01 00 00    	jne    c000538b <f_open+0x419>
c000518d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005191:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005195:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005199:	4f                   	dec    edi
c000519a:	e8 81 d2 ff ff       	call   c0002420 <move_window>
c000519f:	89 c5                	mov    ebp,eax
c00051a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051a5:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051a8:	eb 27                	jmp    c00051d1 <f_open+0x25f>
c00051aa:	85 ed                	test   ebp,ebp
c00051ac:	0f 85 d9 01 00 00    	jne    c000538b <f_open+0x419>
c00051b2:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051b6:	bd 04 00 00 00       	mov    ebp,0x4
c00051bb:	a8 10                	test   al,0x10
c00051bd:	0f 85 c8 01 00 00    	jne    c000538b <f_open+0x419>
c00051c3:	83 e7 02             	and    edi,0x2
c00051c6:	74 11                	je     c00051d9 <f_open+0x267>
c00051c8:	bd 07 00 00 00       	mov    ebp,0x7
c00051cd:	a8 01                	test   al,0x1
c00051cf:	eb 02                	jmp    c00051d3 <f_open+0x261>
c00051d1:	85 ed                	test   ebp,ebp
c00051d3:	0f 85 b2 01 00 00    	jne    c000538b <f_open+0x419>
c00051d9:	f7 c6 08 00 00 00    	test   esi,0x8
c00051df:	74 03                	je     c00051e4 <f_open+0x272>
c00051e1:	83 ce 40             	or     esi,0x40
c00051e4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051e8:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051eb:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051ee:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051f1:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051f4:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051f8:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051fb:	8a 02                	mov    al,BYTE PTR [edx]
c00051fd:	3c 04                	cmp    al,0x4
c00051ff:	75 2a                	jne    c000522b <f_open+0x2b9>
c0005201:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005205:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c000520a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000520d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005211:	30 c0                	xor    al,al
c0005213:	09 c8                	or     eax,ecx
c0005215:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005218:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000521c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000521f:	8d 42 10             	lea    eax,[edx+0x10]
c0005222:	89 da                	mov    edx,ebx
c0005224:	e8 e5 fb ff ff       	call   c0004e0e <init_alloc_info.isra.2>
c0005229:	eb 1c                	jmp    c0005247 <f_open+0x2d5>
c000522b:	89 fa                	mov    edx,edi
c000522d:	e8 8b fb ff ff       	call   c0004dbd <ld_clust.isra.0>
c0005232:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005235:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005238:	e8 12 ca ff ff       	call   c0001c4f <ld_dword>
c000523d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005244:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005247:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000524b:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005252:	89 03                	mov    DWORD PTR [ebx],eax
c0005254:	31 d2                	xor    edx,edx
c0005256:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000525a:	b9 00 02 00 00       	mov    ecx,0x200
c000525f:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005263:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005267:	89 f0                	mov    eax,esi
c0005269:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005270:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005273:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000527a:	8d 43 50             	lea    eax,[ebx+0x50]
c000527d:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005284:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000528b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000528f:	e8 42 ca ff ff       	call   c0001cd6 <mem_set>
c0005294:	83 e6 20             	and    esi,0x20
c0005297:	75 07                	jne    c00052a0 <f_open+0x32e>
c0005299:	31 ed                	xor    ebp,ebp
c000529b:	e9 eb 00 00 00       	jmp    c000538b <f_open+0x419>
c00052a0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052a3:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052b2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052b6:	74 e1                	je     c0005299 <f_open+0x327>
c00052b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052c0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052c3:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052ca:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052cd:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052d1:	31 ff                	xor    edi,edi
c00052d3:	c1 e5 09             	shl    ebp,0x9
c00052d6:	89 ee                	mov    esi,ebp
c00052d8:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052dc:	89 f8                	mov    eax,edi
c00052de:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052e2:	73 22                	jae    c0005306 <f_open+0x394>
c00052e4:	89 d8                	mov    eax,ebx
c00052e6:	e8 bd dc ff ff       	call   c0002fa8 <get_fat>
c00052eb:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052ef:	89 c2                	mov    edx,eax
c00052f1:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052f5:	83 f8 01             	cmp    eax,0x1
c00052f8:	76 10                	jbe    c000530a <f_open+0x398>
c00052fa:	83 f8 ff             	cmp    eax,0xffffffff
c00052fd:	75 d9                	jne    c00052d8 <f_open+0x366>
c00052ff:	bd 01 00 00 00       	mov    ebp,0x1
c0005304:	eb 09                	jmp    c000530f <f_open+0x39d>
c0005306:	31 ed                	xor    ebp,ebp
c0005308:	eb 05                	jmp    c000530f <f_open+0x39d>
c000530a:	bd 02 00 00 00       	mov    ebp,0x2
c000530f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005312:	85 ed                	test   ebp,ebp
c0005314:	75 75                	jne    c000538b <f_open+0x419>
c0005316:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000531a:	25 ff 01 00 00       	and    eax,0x1ff
c000531f:	0f 84 74 ff ff ff    	je     c0005299 <f_open+0x327>
c0005325:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 c8                	mov    eax,ecx
c0005330:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005334:	e8 a2 cb ff ff       	call   c0001edb <clst2sect>
c0005339:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000533d:	89 d7                	mov    edi,edx
c000533f:	09 c7                	or     edi,eax
c0005341:	74 48                	je     c000538b <f_open+0x419>
c0005343:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005347:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000534b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005353:	0f ac fe 09          	shrd   esi,edi,0x9
c0005357:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000535b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000535f:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005362:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005366:	83 ec 0c             	sub    esp,0xc
c0005369:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000536c:	6a 01                	push   0x1
c000536e:	52                   	push   edx
c000536f:	50                   	push   eax
c0005370:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005374:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005378:	50                   	push   eax
c0005379:	e8 79 c8 ff ff       	call   c0001bf7 <disk_read>
c000537e:	83 c4 20             	add    esp,0x20
c0005381:	85 c0                	test   eax,eax
c0005383:	0f 95 c0             	setne  al
c0005386:	0f b6 c0             	movzx  eax,al
c0005389:	89 c5                	mov    ebp,eax
c000538b:	83 ec 0c             	sub    esp,0xc
c000538e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005392:	e8 f4 30 00 00       	call   c000848b <ff_memfree>
c0005397:	83 c4 10             	add    esp,0x10
c000539a:	85 ed                	test   ebp,ebp
c000539c:	74 06                	je     c00053a4 <f_open+0x432>
c000539e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053a4:	83 c4 7c             	add    esp,0x7c
c00053a7:	89 e8                	mov    eax,ebp
c00053a9:	5b                   	pop    ebx
c00053aa:	5e                   	pop    esi
c00053ab:	5f                   	pop    edi
c00053ac:	5d                   	pop    ebp
c00053ad:	c3                   	ret    

c00053ae <f_read>:
c00053ae:	55                   	push   ebp
c00053af:	57                   	push   edi
c00053b0:	56                   	push   esi
c00053b1:	53                   	push   ebx
c00053b2:	83 ec 2c             	sub    esp,0x2c
c00053b5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053b9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053c7:	89 d8                	mov    eax,ebx
c00053c9:	e8 77 cf ff ff       	call   c0002345 <validate>
c00053ce:	89 c5                	mov    ebp,eax
c00053d0:	85 c0                	test   eax,eax
c00053d2:	0f 85 4c 02 00 00    	jne    c0005624 <f_read+0x276>
c00053d8:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053dc:	85 ed                	test   ebp,ebp
c00053de:	0f 85 40 02 00 00    	jne    c0005624 <f_read+0x276>
c00053e4:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053e8:	0f 84 31 02 00 00    	je     c000561f <f_read+0x271>
c00053ee:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053f1:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053f4:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053f7:	bf 00 00 00 00       	mov    edi,0x0
c00053fc:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053ff:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005403:	89 d1                	mov    ecx,edx
c0005405:	19 f9                	sbb    ecx,edi
c0005407:	0f 83 cf 00 00 00    	jae    c00054dc <f_read+0x12e>
c000540d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005411:	e9 c6 00 00 00       	jmp    c00054dc <f_read+0x12e>
c0005416:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005419:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000541c:	89 d0                	mov    eax,edx
c000541e:	25 ff 01 00 00       	and    eax,0x1ff
c0005423:	0f 85 c9 01 00 00    	jne    c00055f2 <f_read+0x244>
c0005429:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000542d:	89 d6                	mov    esi,edx
c000542f:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005433:	89 cf                	mov    edi,ecx
c0005435:	48                   	dec    eax
c0005436:	0f ac fe 09          	shrd   esi,edi,0x9
c000543a:	21 f0                	and    eax,esi
c000543c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005440:	0f 84 a6 00 00 00    	je     c00054ec <f_read+0x13e>
c0005446:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000544a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000544d:	89 c8                	mov    eax,ecx
c000544f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005452:	e8 84 ca ff ff       	call   c0001edb <clst2sect>
c0005457:	89 d7                	mov    edi,edx
c0005459:	09 c7                	or     edi,eax
c000545b:	0f 84 b4 00 00 00    	je     c0005515 <f_read+0x167>
c0005461:	31 ff                	xor    edi,edi
c0005463:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005467:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000546a:	01 c6                	add    esi,eax
c000546c:	11 d7                	adc    edi,edx
c000546e:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005476:	0f 86 fd 00 00 00    	jbe    c0005579 <f_read+0x1cb>
c000547c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005480:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005484:	c1 e8 09             	shr    eax,0x9
c0005487:	89 04 24             	mov    DWORD PTR [esp],eax
c000548a:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000548e:	03 14 24             	add    edx,DWORD PTR [esp]
c0005491:	39 c2                	cmp    edx,eax
c0005493:	76 07                	jbe    c000549c <f_read+0xee>
c0005495:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005499:	89 04 24             	mov    DWORD PTR [esp],eax
c000549c:	83 ec 0c             	sub    esp,0xc
c000549f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054a3:	57                   	push   edi
c00054a4:	56                   	push   esi
c00054a5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054a9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054ad:	50                   	push   eax
c00054ae:	e8 44 c7 ff ff       	call   c0001bf7 <disk_read>
c00054b3:	83 c4 20             	add    esp,0x20
c00054b6:	85 c0                	test   eax,eax
c00054b8:	75 6e                	jne    c0005528 <f_read+0x17a>
c00054ba:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054be:	78 7e                	js     c000553e <f_read+0x190>
c00054c0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054c3:	c1 e6 09             	shl    esi,0x9
c00054c6:	31 ff                	xor    edi,edi
c00054c8:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054cc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054d0:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054d4:	01 30                	add    DWORD PTR [eax],esi
c00054d6:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054d9:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054dc:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054e1:	0f 85 2f ff ff ff    	jne    c0005416 <f_read+0x68>
c00054e7:	e9 38 01 00 00       	jmp    c0005624 <f_read+0x276>
c00054ec:	89 c8                	mov    eax,ecx
c00054ee:	09 d0                	or     eax,edx
c00054f0:	75 05                	jne    c00054f7 <f_read+0x149>
c00054f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054f5:	eb 19                	jmp    c0005510 <f_read+0x162>
c00054f7:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054fb:	74 09                	je     c0005506 <f_read+0x158>
c00054fd:	89 d8                	mov    eax,ebx
c00054ff:	e8 f8 c9 ff ff       	call   c0001efc <clmt_clust>
c0005504:	eb 0a                	jmp    c0005510 <f_read+0x162>
c0005506:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005509:	89 d8                	mov    eax,ebx
c000550b:	e8 98 da ff ff       	call   c0002fa8 <get_fat>
c0005510:	83 f8 01             	cmp    eax,0x1
c0005513:	77 0e                	ja     c0005523 <f_read+0x175>
c0005515:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005519:	bd 02 00 00 00       	mov    ebp,0x2
c000551e:	e9 01 01 00 00       	jmp    c0005624 <f_read+0x276>
c0005523:	83 f8 ff             	cmp    eax,0xffffffff
c0005526:	75 0e                	jne    c0005536 <f_read+0x188>
c0005528:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000552c:	bd 01 00 00 00       	mov    ebp,0x1
c0005531:	e9 ee 00 00 00       	jmp    c0005624 <f_read+0x276>
c0005536:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005539:	e9 08 ff ff ff       	jmp    c0005446 <f_read+0x98>
c000553e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005541:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005544:	29 f0                	sub    eax,esi
c0005546:	19 fa                	sbb    edx,edi
c0005548:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000554b:	89 d7                	mov    edi,edx
c000554d:	ba 00 00 00 00       	mov    edx,0x0
c0005552:	89 f9                	mov    ecx,edi
c0005554:	19 d1                	sbb    ecx,edx
c0005556:	0f 83 64 ff ff ff    	jae    c00054c0 <f_read+0x112>
c000555c:	89 c7                	mov    edi,eax
c000555e:	8d 53 50             	lea    edx,[ebx+0x50]
c0005561:	c1 e7 09             	shl    edi,0x9
c0005564:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005568:	b9 00 02 00 00       	mov    ecx,0x200
c000556d:	01 f8                	add    eax,edi
c000556f:	e8 4d c7 ff ff       	call   c0001cc1 <mem_cpy>
c0005574:	e9 47 ff ff ff       	jmp    c00054c0 <f_read+0x112>
c0005579:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000557c:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000557f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005582:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005586:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000558a:	75 05                	jne    c0005591 <f_read+0x1e3>
c000558c:	39 34 24             	cmp    DWORD PTR [esp],esi
c000558f:	74 5b                	je     c00055ec <f_read+0x23e>
c0005591:	8d 43 50             	lea    eax,[ebx+0x50]
c0005594:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005598:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000559c:	79 2a                	jns    c00055c8 <f_read+0x21a>
c000559e:	83 ec 0c             	sub    esp,0xc
c00055a1:	6a 01                	push   0x1
c00055a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055af:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055b3:	50                   	push   eax
c00055b4:	e8 54 c6 ff ff       	call   c0001c0d <disk_write>
c00055b9:	83 c4 20             	add    esp,0x20
c00055bc:	85 c0                	test   eax,eax
c00055be:	0f 85 64 ff ff ff    	jne    c0005528 <f_read+0x17a>
c00055c4:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055c8:	83 ec 0c             	sub    esp,0xc
c00055cb:	6a 01                	push   0x1
c00055cd:	57                   	push   edi
c00055ce:	56                   	push   esi
c00055cf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055d3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055d7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055db:	50                   	push   eax
c00055dc:	e8 16 c6 ff ff       	call   c0001bf7 <disk_read>
c00055e1:	83 c4 20             	add    esp,0x20
c00055e4:	85 c0                	test   eax,eax
c00055e6:	0f 85 3c ff ff ff    	jne    c0005528 <f_read+0x17a>
c00055ec:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055ef:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055f2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055f5:	ba 00 02 00 00       	mov    edx,0x200
c00055fa:	25 ff 01 00 00       	and    eax,0x1ff
c00055ff:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005603:	29 c2                	sub    edx,eax
c0005605:	39 d6                	cmp    esi,edx
c0005607:	76 02                	jbe    c000560b <f_read+0x25d>
c0005609:	89 d6                	mov    esi,edx
c000560b:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000560f:	89 f1                	mov    ecx,esi
c0005611:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005615:	e8 a7 c6 ff ff       	call   c0001cc1 <mem_cpy>
c000561a:	e9 a7 fe ff ff       	jmp    c00054c6 <f_read+0x118>
c000561f:	bd 07 00 00 00       	mov    ebp,0x7
c0005624:	83 c4 2c             	add    esp,0x2c
c0005627:	89 e8                	mov    eax,ebp
c0005629:	5b                   	pop    ebx
c000562a:	5e                   	pop    esi
c000562b:	5f                   	pop    edi
c000562c:	5d                   	pop    ebp
c000562d:	c3                   	ret    

c000562e <f_write>:
c000562e:	55                   	push   ebp
c000562f:	57                   	push   edi
c0005630:	56                   	push   esi
c0005631:	53                   	push   ebx
c0005632:	83 ec 2c             	sub    esp,0x2c
c0005635:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005639:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000563d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005643:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005647:	89 d8                	mov    eax,ebx
c0005649:	e8 f7 cc ff ff       	call   c0002345 <validate>
c000564e:	89 c5                	mov    ebp,eax
c0005650:	85 c0                	test   eax,eax
c0005652:	0f 85 86 02 00 00    	jne    c00058de <f_write+0x2b0>
c0005658:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000565c:	85 ed                	test   ebp,ebp
c000565e:	0f 85 7a 02 00 00    	jne    c00058de <f_write+0x2b0>
c0005664:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005668:	0f 84 6b 02 00 00    	je     c00058d9 <f_write+0x2ab>
c000566e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005672:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005675:	0f 84 43 01 00 00    	je     c00057be <f_write+0x190>
c000567b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000567e:	89 c1                	mov    ecx,eax
c0005680:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005684:	0f 83 34 01 00 00    	jae    c00057be <f_write+0x190>
c000568a:	f7 d0                	not    eax
c000568c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005690:	e9 29 01 00 00       	jmp    c00057be <f_write+0x190>
c0005695:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005698:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000569b:	89 d0                	mov    eax,edx
c000569d:	25 ff 01 00 00       	and    eax,0x1ff
c00056a2:	0f 85 00 02 00 00    	jne    c00058a8 <f_write+0x27a>
c00056a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056ac:	89 d6                	mov    esi,edx
c00056ae:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056b2:	89 cf                	mov    edi,ecx
c00056b4:	48                   	dec    eax
c00056b5:	0f ac fe 09          	shrd   esi,edi,0x9
c00056b9:	21 f0                	and    eax,esi
c00056bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056bf:	0f 84 06 01 00 00    	je     c00057cb <f_write+0x19d>
c00056c5:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056c9:	0f 88 6e 01 00 00    	js     c000583d <f_write+0x20f>
c00056cf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056d3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056d6:	89 c8                	mov    eax,ecx
c00056d8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056dc:	e8 fa c7 ff ff       	call   c0001edb <clst2sect>
c00056e1:	89 d1                	mov    ecx,edx
c00056e3:	09 c1                	or     ecx,eax
c00056e5:	0f 84 1c 01 00 00    	je     c0005807 <f_write+0x1d9>
c00056eb:	31 ff                	xor    edi,edi
c00056ed:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056f5:	01 c6                	add    esi,eax
c00056f7:	11 d7                	adc    edi,edx
c00056f9:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005701:	0f 86 63 01 00 00    	jbe    c000586a <f_write+0x23c>
c0005707:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000570b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000570f:	c1 e8 09             	shr    eax,0x9
c0005712:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005716:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000571a:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000571e:	39 c2                	cmp    edx,eax
c0005720:	76 08                	jbe    c000572a <f_write+0xfc>
c0005722:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005726:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000572a:	83 ec 0c             	sub    esp,0xc
c000572d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005731:	57                   	push   edi
c0005732:	56                   	push   esi
c0005733:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005737:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000573b:	50                   	push   eax
c000573c:	e8 cc c4 ff ff       	call   c0001c0d <disk_write>
c0005741:	83 c4 20             	add    esp,0x20
c0005744:	85 c0                	test   eax,eax
c0005746:	0f 85 ce 00 00 00    	jne    c000581a <f_write+0x1ec>
c000574c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000574f:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005752:	29 f0                	sub    eax,esi
c0005754:	19 fa                	sbb    edx,edi
c0005756:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000575a:	89 d7                	mov    edi,edx
c000575c:	ba 00 00 00 00       	mov    edx,0x0
c0005761:	89 f9                	mov    ecx,edi
c0005763:	19 d1                	sbb    ecx,edx
c0005765:	73 1c                	jae    c0005783 <f_write+0x155>
c0005767:	89 c7                	mov    edi,eax
c0005769:	b9 00 02 00 00       	mov    ecx,0x200
c000576e:	c1 e7 09             	shl    edi,0x9
c0005771:	8d 43 50             	lea    eax,[ebx+0x50]
c0005774:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005778:	89 fa                	mov    edx,edi
c000577a:	e8 42 c5 ff ff       	call   c0001cc1 <mem_cpy>
c000577f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005783:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005787:	c1 e6 09             	shl    esi,0x9
c000578a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000578e:	31 ff                	xor    edi,edi
c0005790:	01 30                	add    DWORD PTR [eax],esi
c0005792:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005796:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000579a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000579d:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057a0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057a3:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057a6:	89 c1                	mov    ecx,eax
c00057a8:	39 f2                	cmp    edx,esi
c00057aa:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057ad:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057b0:	19 f9                	sbb    ecx,edi
c00057b2:	73 04                	jae    c00057b8 <f_write+0x18a>
c00057b4:	89 f2                	mov    edx,esi
c00057b6:	89 f8                	mov    eax,edi
c00057b8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057bb:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057be:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057c3:	0f 85 cc fe ff ff    	jne    c0005695 <f_write+0x67>
c00057c9:	eb 2e                	jmp    c00057f9 <f_write+0x1cb>
c00057cb:	89 c8                	mov    eax,ecx
c00057cd:	09 d0                	or     eax,edx
c00057cf:	75 0b                	jne    c00057dc <f_write+0x1ae>
c00057d1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057d4:	31 d2                	xor    edx,edx
c00057d6:	85 c0                	test   eax,eax
c00057d8:	75 28                	jne    c0005802 <f_write+0x1d4>
c00057da:	eb 12                	jmp    c00057ee <f_write+0x1c0>
c00057dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057e0:	74 09                	je     c00057eb <f_write+0x1bd>
c00057e2:	89 d8                	mov    eax,ebx
c00057e4:	e8 13 c7 ff ff       	call   c0001efc <clmt_clust>
c00057e9:	eb 0a                	jmp    c00057f5 <f_write+0x1c7>
c00057eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057ee:	89 d8                	mov    eax,ebx
c00057f0:	e8 a1 da ff ff       	call   c0003296 <create_chain>
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 09                	jne    c0005802 <f_write+0x1d4>
c00057f9:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057fd:	e9 dc 00 00 00       	jmp    c00058de <f_write+0x2b0>
c0005802:	83 f8 01             	cmp    eax,0x1
c0005805:	75 0e                	jne    c0005815 <f_write+0x1e7>
c0005807:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000580b:	bd 02 00 00 00       	mov    ebp,0x2
c0005810:	e9 c9 00 00 00       	jmp    c00058de <f_write+0x2b0>
c0005815:	83 f8 ff             	cmp    eax,0xffffffff
c0005818:	75 0e                	jne    c0005828 <f_write+0x1fa>
c000581a:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000581e:	bd 01 00 00 00       	mov    ebp,0x1
c0005823:	e9 b6 00 00 00       	jmp    c00058de <f_write+0x2b0>
c0005828:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000582b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000582f:	0f 85 90 fe ff ff    	jne    c00056c5 <f_write+0x97>
c0005835:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005838:	e9 88 fe ff ff       	jmp    c00056c5 <f_write+0x97>
c000583d:	83 ec 0c             	sub    esp,0xc
c0005840:	8d 43 50             	lea    eax,[ebx+0x50]
c0005843:	6a 01                	push   0x1
c0005845:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005848:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000584b:	50                   	push   eax
c000584c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005850:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005854:	50                   	push   eax
c0005855:	e8 b3 c3 ff ff       	call   c0001c0d <disk_write>
c000585a:	83 c4 20             	add    esp,0x20
c000585d:	85 c0                	test   eax,eax
c000585f:	75 b9                	jne    c000581a <f_write+0x1ec>
c0005861:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005865:	e9 65 fe ff ff       	jmp    c00056cf <f_write+0xa1>
c000586a:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000586d:	75 05                	jne    c0005874 <f_write+0x246>
c000586f:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005872:	74 2e                	je     c00058a2 <f_write+0x274>
c0005874:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005877:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000587a:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000587d:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005880:	73 20                	jae    c00058a2 <f_write+0x274>
c0005882:	83 ec 0c             	sub    esp,0xc
c0005885:	8d 43 50             	lea    eax,[ebx+0x50]
c0005888:	6a 01                	push   0x1
c000588a:	57                   	push   edi
c000588b:	56                   	push   esi
c000588c:	50                   	push   eax
c000588d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005891:	50                   	push   eax
c0005892:	e8 60 c3 ff ff       	call   c0001bf7 <disk_read>
c0005897:	83 c4 20             	add    esp,0x20
c000589a:	85 c0                	test   eax,eax
c000589c:	0f 85 78 ff ff ff    	jne    c000581a <f_write+0x1ec>
c00058a2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058a5:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058a8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ab:	ba 00 02 00 00       	mov    edx,0x200
c00058b0:	25 ff 01 00 00       	and    eax,0x1ff
c00058b5:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058b9:	29 c2                	sub    edx,eax
c00058bb:	39 d6                	cmp    esi,edx
c00058bd:	76 02                	jbe    c00058c1 <f_write+0x293>
c00058bf:	89 d6                	mov    esi,edx
c00058c1:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058c5:	89 f1                	mov    ecx,esi
c00058c7:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058cb:	e8 f1 c3 ff ff       	call   c0001cc1 <mem_cpy>
c00058d0:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058d4:	e9 b1 fe ff ff       	jmp    c000578a <f_write+0x15c>
c00058d9:	bd 07 00 00 00       	mov    ebp,0x7
c00058de:	83 c4 2c             	add    esp,0x2c
c00058e1:	89 e8                	mov    eax,ebp
c00058e3:	5b                   	pop    ebx
c00058e4:	5e                   	pop    esi
c00058e5:	5f                   	pop    edi
c00058e6:	5d                   	pop    ebp
c00058e7:	c3                   	ret    

c00058e8 <f_sync>:
c00058e8:	56                   	push   esi
c00058e9:	53                   	push   ebx
c00058ea:	83 ec 64             	sub    esp,0x64
c00058ed:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058f1:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058f5:	89 d8                	mov    eax,ebx
c00058f7:	e8 49 ca ff ff       	call   c0002345 <validate>
c00058fc:	85 c0                	test   eax,eax
c00058fe:	0f 85 ba 01 00 00    	jne    c0005abe <f_sync+0x1d6>
c0005904:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005907:	f6 c2 40             	test   dl,0x40
c000590a:	0f 84 ae 01 00 00    	je     c0005abe <f_sync+0x1d6>
c0005910:	84 d2                	test   dl,dl
c0005912:	79 33                	jns    c0005947 <f_sync+0x5f>
c0005914:	83 ec 0c             	sub    esp,0xc
c0005917:	8d 43 50             	lea    eax,[ebx+0x50]
c000591a:	6a 01                	push   0x1
c000591c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000591f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005922:	50                   	push   eax
c0005923:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005927:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000592b:	50                   	push   eax
c000592c:	e8 dc c2 ff ff       	call   c0001c0d <disk_write>
c0005931:	83 c4 20             	add    esp,0x20
c0005934:	89 c2                	mov    edx,eax
c0005936:	b8 01 00 00 00       	mov    eax,0x1
c000593b:	85 d2                	test   edx,edx
c000593d:	0f 85 7b 01 00 00    	jne    c0005abe <f_sync+0x1d6>
c0005943:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000594b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000594e:	0f 85 11 01 00 00    	jne    c0005a65 <f_sync+0x17d>
c0005954:	89 d8                	mov    eax,ebx
c0005956:	e8 13 d6 ff ff       	call   c0002f6e <fill_first_frag>
c000595b:	85 c0                	test   eax,eax
c000595d:	0f 85 5b 01 00 00    	jne    c0005abe <f_sync+0x1d6>
c0005963:	83 c9 ff             	or     ecx,0xffffffff
c0005966:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005969:	89 d8                	mov    eax,ebx
c000596b:	e8 c9 d5 ff ff       	call   c0002f39 <fill_last_frag>
c0005970:	85 c0                	test   eax,eax
c0005972:	0f 85 46 01 00 00    	jne    c0005abe <f_sync+0x1d6>
c0005978:	83 ec 0c             	sub    esp,0xc
c000597b:	68 60 04 00 00       	push   0x460
c0005980:	e8 f0 2a 00 00       	call   c0008475 <ff_memalloc>
c0005985:	83 c4 10             	add    esp,0x10
c0005988:	89 c6                	mov    esi,eax
c000598a:	b8 11 00 00 00       	mov    eax,0x11
c000598f:	85 f6                	test   esi,esi
c0005991:	0f 84 27 01 00 00    	je     c0005abe <f_sync+0x1d6>
c0005997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000599b:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059a1:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059a4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059a7:	89 da                	mov    edx,ebx
c00059a9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059ad:	e8 af df ff ff       	call   c0003961 <load_obj_xdir>
c00059b2:	85 c0                	test   eax,eax
c00059b4:	0f 85 95 00 00 00    	jne    c0005a4f <f_sync+0x167>
c00059ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059be:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059c1:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059c5:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059c8:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059cb:	83 ca 01             	or     edx,0x1
c00059ce:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059d1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059d7:	83 c0 34             	add    eax,0x34
c00059da:	e8 d9 c2 ff ff       	call   c0001cb8 <st_dword>
c00059df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059ec:	83 c0 38             	add    eax,0x38
c00059ef:	e8 c7 c2 ff ff       	call   c0001cbb <st_qword>
c00059f4:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059fb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059fe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a01:	83 c0 28             	add    eax,0x28
c0005a04:	e8 b2 c2 ff ff       	call   c0001cbb <st_qword>
c0005a09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a0d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a12:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a15:	83 c0 0c             	add    eax,0xc
c0005a18:	e8 9b c2 ff ff       	call   c0001cb8 <st_dword>
c0005a1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a21:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a24:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a28:	31 d2                	xor    edx,edx
c0005a2a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a2d:	83 c0 10             	add    eax,0x10
c0005a30:	e8 83 c2 ff ff       	call   c0001cb8 <st_dword>
c0005a35:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a39:	e8 62 e1 ff ff       	call   c0003ba0 <store_xdir>
c0005a3e:	85 c0                	test   eax,eax
c0005a40:	75 0d                	jne    c0005a4f <f_sync+0x167>
c0005a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a46:	e8 00 eb ff ff       	call   c000454b <sync_fs>
c0005a4b:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a53:	83 ec 0c             	sub    esp,0xc
c0005a56:	56                   	push   esi
c0005a57:	e8 2f 2a 00 00       	call   c000848b <ff_memfree>
c0005a5c:	83 c4 10             	add    esp,0x10
c0005a5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a63:	eb 59                	jmp    c0005abe <f_sync+0x1d6>
c0005a65:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a68:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a6b:	e8 b0 c9 ff ff       	call   c0002420 <move_window>
c0005a70:	85 c0                	test   eax,eax
c0005a72:	75 4a                	jne    c0005abe <f_sync+0x1d6>
c0005a74:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a77:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a7b:	89 f2                	mov    edx,esi
c0005a7d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a80:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a82:	e8 5f f3 ff ff       	call   c0004de6 <st_clust.isra.1>
c0005a87:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a8a:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a8d:	e8 26 c2 ff ff       	call   c0001cb8 <st_dword>
c0005a92:	8d 46 16             	lea    eax,[esi+0x16]
c0005a95:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a9a:	e8 19 c2 ff ff       	call   c0001cb8 <st_dword>
c0005a9f:	8d 46 12             	lea    eax,[esi+0x12]
c0005aa2:	31 d2                	xor    edx,edx
c0005aa4:	e8 0b c2 ff ff       	call   c0001cb4 <st_word>
c0005aa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005aad:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ab5:	e8 91 ea ff ff       	call   c000454b <sync_fs>
c0005aba:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005abe:	83 c4 64             	add    esp,0x64
c0005ac1:	5b                   	pop    ebx
c0005ac2:	5e                   	pop    esi
c0005ac3:	c3                   	ret    

c0005ac4 <f_close>:
c0005ac4:	53                   	push   ebx
c0005ac5:	83 ec 24             	sub    esp,0x24
c0005ac8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005acc:	53                   	push   ebx
c0005acd:	e8 16 fe ff ff       	call   c00058e8 <f_sync>
c0005ad2:	83 c4 10             	add    esp,0x10
c0005ad5:	85 c0                	test   eax,eax
c0005ad7:	75 15                	jne    c0005aee <f_close+0x2a>
c0005ad9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005add:	89 d8                	mov    eax,ebx
c0005adf:	e8 61 c8 ff ff       	call   c0002345 <validate>
c0005ae4:	85 c0                	test   eax,eax
c0005ae6:	75 06                	jne    c0005aee <f_close+0x2a>
c0005ae8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005aee:	83 c4 18             	add    esp,0x18
c0005af1:	5b                   	pop    ebx
c0005af2:	c3                   	ret    

c0005af3 <f_lseek>:
c0005af3:	55                   	push   ebp
c0005af4:	57                   	push   edi
c0005af5:	56                   	push   esi
c0005af6:	53                   	push   ebx
c0005af7:	83 ec 3c             	sub    esp,0x3c
c0005afa:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005afe:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b02:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b06:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b09:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b0d:	89 d8                	mov    eax,ebx
c0005b0f:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b13:	e8 2d c8 ff ff       	call   c0002345 <validate>
c0005b18:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b1c:	85 c0                	test   eax,eax
c0005b1e:	0f 85 7a 04 00 00    	jne    c0005f9e <f_lseek+0x4ab>
c0005b24:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b2c:	85 c0                	test   eax,eax
c0005b2e:	0f 85 6a 04 00 00    	jne    c0005f9e <f_lseek+0x4ab>
c0005b34:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b38:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b3b:	74 0c                	je     c0005b49 <f_lseek+0x56>
c0005b3d:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b40:	85 c0                	test   eax,eax
c0005b42:	75 1f                	jne    c0005b63 <f_lseek+0x70>
c0005b44:	e9 b5 01 00 00       	jmp    c0005cfe <f_lseek+0x20b>
c0005b49:	83 c9 ff             	or     ecx,0xffffffff
c0005b4c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b4f:	89 d8                	mov    eax,ebx
c0005b51:	e8 e3 d3 ff ff       	call   c0002f39 <fill_last_frag>
c0005b56:	85 c0                	test   eax,eax
c0005b58:	74 e3                	je     c0005b3d <f_lseek+0x4a>
c0005b5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b5e:	e9 3b 04 00 00       	jmp    c0005f9e <f_lseek+0x4ab>
c0005b63:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b68:	0f 85 ac 00 00 00    	jne    c0005c1a <f_lseek+0x127>
c0005b6e:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b72:	0f 85 a2 00 00 00    	jne    c0005c1a <f_lseek+0x127>
c0005b78:	8d 78 04             	lea    edi,[eax+0x4]
c0005b7b:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b80:	be 02 00 00 00       	mov    esi,0x2
c0005b85:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b89:	85 ed                	test   ebp,ebp
c0005b8b:	74 73                	je     c0005c00 <f_lseek+0x10d>
c0005b8d:	89 e9                	mov    ecx,ebp
c0005b8f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b96:	ff 04 24             	inc    DWORD PTR [esp]
c0005b99:	89 ca                	mov    edx,ecx
c0005b9b:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b9f:	89 d8                	mov    eax,ebx
c0005ba1:	e8 02 d4 ff ff       	call   c0002fa8 <get_fat>
c0005ba6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005baa:	83 f8 01             	cmp    eax,0x1
c0005bad:	77 11                	ja     c0005bc0 <f_lseek+0xcd>
c0005baf:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bb3:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bbb:	e9 de 03 00 00       	jmp    c0005f9e <f_lseek+0x4ab>
c0005bc0:	83 f8 ff             	cmp    eax,0xffffffff
c0005bc3:	75 11                	jne    c0005bd6 <f_lseek+0xe3>
c0005bc5:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bc9:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bd1:	e9 c8 03 00 00       	jmp    c0005f9e <f_lseek+0x4ab>
c0005bd6:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bd9:	89 c1                	mov    ecx,eax
c0005bdb:	39 c2                	cmp    edx,eax
c0005bdd:	74 b7                	je     c0005b96 <f_lseek+0xa3>
c0005bdf:	83 c6 02             	add    esi,0x2
c0005be2:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005be6:	72 0b                	jb     c0005bf3 <f_lseek+0x100>
c0005be8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005beb:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bee:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bf0:	83 c7 08             	add    edi,0x8
c0005bf3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bf7:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bfa:	76 04                	jbe    c0005c00 <f_lseek+0x10d>
c0005bfc:	89 c5                	mov    ebp,eax
c0005bfe:	eb 8d                	jmp    c0005b8d <f_lseek+0x9a>
c0005c00:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c03:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c07:	89 30                	mov    DWORD PTR [eax],esi
c0005c09:	0f 87 87 03 00 00    	ja     c0005f96 <f_lseek+0x4a3>
c0005c0f:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c15:	e9 84 03 00 00       	jmp    c0005f9e <f_lseek+0x4ab>
c0005c1a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c1d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c24:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c2c:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c33:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c37:	73 0f                	jae    c0005c48 <f_lseek+0x155>
c0005c39:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c3c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c50:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c53:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c5a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c5e:	0f 84 3a 03 00 00    	je     c0005f9e <f_lseek+0x4ab>
c0005c64:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c68:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c6c:	83 c6 ff             	add    esi,0xffffffff
c0005c6f:	89 d8                	mov    eax,ebx
c0005c71:	83 d7 ff             	adc    edi,0xffffffff
c0005c74:	89 f2                	mov    edx,esi
c0005c76:	89 f9                	mov    ecx,edi
c0005c78:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c7c:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c7f:	e8 78 c2 ff ff       	call   c0001efc <clmt_clust>
c0005c84:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c88:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c8b:	89 c2                	mov    edx,eax
c0005c8d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c91:	89 c8                	mov    eax,ecx
c0005c93:	e8 43 c2 ff ff       	call   c0001edb <clst2sect>
c0005c98:	89 d7                	mov    edi,edx
c0005c9a:	09 c7                	or     edi,eax
c0005c9c:	0f 84 0d ff ff ff    	je     c0005baf <f_lseek+0xbc>
c0005ca2:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005ca6:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005cac:	0f 84 ec 02 00 00    	je     c0005f9e <f_lseek+0x4ab>
c0005cb2:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cb6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cbd:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005cc1:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cc5:	4d                   	dec    ebp
c0005cc6:	31 ff                	xor    edi,edi
c0005cc8:	21 ee                	and    esi,ebp
c0005cca:	01 c6                	add    esi,eax
c0005ccc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005ccf:	11 d7                	adc    edi,edx
c0005cd1:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cd4:	39 fa                	cmp    edx,edi
c0005cd6:	75 08                	jne    c0005ce0 <f_lseek+0x1ed>
c0005cd8:	39 f0                	cmp    eax,esi
c0005cda:	0f 84 be 02 00 00    	je     c0005f9e <f_lseek+0x4ab>
c0005ce0:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ce3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ce7:	0f 89 80 02 00 00    	jns    c0005f6d <f_lseek+0x47a>
c0005ced:	83 ec 0c             	sub    esp,0xc
c0005cf0:	6a 01                	push   0x1
c0005cf2:	52                   	push   edx
c0005cf3:	50                   	push   eax
c0005cf4:	55                   	push   ebp
c0005cf5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cf9:	e9 5a 02 00 00       	jmp    c0005f58 <f_lseek+0x465>
c0005cfe:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d02:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d05:	74 16                	je     c0005d1d <f_lseek+0x22a>
c0005d07:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d0c:	76 0f                	jbe    c0005d1d <f_lseek+0x22a>
c0005d0e:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d15:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d1d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d20:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d23:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d26:	89 c7                	mov    edi,eax
c0005d28:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d2c:	73 0d                	jae    c0005d3b <f_lseek+0x248>
c0005d2e:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d32:	75 07                	jne    c0005d3b <f_lseek+0x248>
c0005d34:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d37:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d3b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d3e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d41:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d45:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d4c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d53:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d56:	75 09                	jne    c0005d61 <f_lseek+0x26e>
c0005d58:	31 f6                	xor    esi,esi
c0005d5a:	31 ff                	xor    edi,edi
c0005d5c:	e9 af 01 00 00       	jmp    c0005f10 <f_lseek+0x41d>
c0005d61:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d65:	89 d7                	mov    edi,edx
c0005d67:	c1 e1 09             	shl    ecx,0x9
c0005d6a:	09 c7                	or     edi,eax
c0005d6c:	89 cd                	mov    ebp,ecx
c0005d6e:	74 6d                	je     c0005ddd <f_lseek+0x2ea>
c0005d70:	83 c0 ff             	add    eax,0xffffffff
c0005d73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d77:	83 d2 ff             	adc    edx,0xffffffff
c0005d7a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d7d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d81:	83 c0 ff             	add    eax,0xffffffff
c0005d84:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d88:	83 d2 ff             	adc    edx,0xffffffff
c0005d8b:	31 ff                	xor    edi,edi
c0005d8d:	57                   	push   edi
c0005d8e:	51                   	push   ecx
c0005d8f:	52                   	push   edx
c0005d90:	50                   	push   eax
c0005d91:	e8 ce 14 02 00       	call   c0027264 <__udivdi3>
c0005d96:	83 c4 10             	add    esp,0x10
c0005d99:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d9d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005da1:	57                   	push   edi
c0005da2:	55                   	push   ebp
c0005da3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005da7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dab:	e8 b4 14 02 00       	call   c0027264 <__udivdi3>
c0005db0:	83 c4 10             	add    esp,0x10
c0005db3:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005db7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dbb:	19 d1                	sbb    ecx,edx
c0005dbd:	72 1e                	jb     c0005ddd <f_lseek+0x2ea>
c0005dbf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005dc3:	89 e9                	mov    ecx,ebp
c0005dc5:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dc8:	f7 d9                	neg    ecx
c0005dca:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dcd:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005dd1:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005dd4:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dd7:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005ddb:	eb 28                	jmp    c0005e05 <f_lseek+0x312>
c0005ddd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005de0:	85 c0                	test   eax,eax
c0005de2:	75 1e                	jne    c0005e02 <f_lseek+0x30f>
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	89 d8                	mov    eax,ebx
c0005de8:	e8 a9 d4 ff ff       	call   c0003296 <create_chain>
c0005ded:	83 f8 01             	cmp    eax,0x1
c0005df0:	0f 84 b9 fd ff ff    	je     c0005baf <f_lseek+0xbc>
c0005df6:	83 f8 ff             	cmp    eax,0xffffffff
c0005df9:	0f 84 c6 fd ff ff    	je     c0005bc5 <f_lseek+0xd2>
c0005dff:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e02:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e05:	85 c0                	test   eax,eax
c0005e07:	0f 84 4b ff ff ff    	je     c0005d58 <f_lseek+0x265>
c0005e0d:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e11:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e19:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e1c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e20:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e23:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e26:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e2a:	0f 83 9d 00 00 00    	jae    c0005ecd <f_lseek+0x3da>
c0005e30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e34:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e38:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e3b:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e3f:	01 f2                	add    edx,esi
c0005e41:	11 f9                	adc    ecx,edi
c0005e43:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e47:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e4b:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e4e:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e51:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e54:	f6 c1 02             	test   cl,0x2
c0005e57:	74 35                	je     c0005e8e <f_lseek+0x39b>
c0005e59:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e5d:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e60:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e63:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e67:	73 16                	jae    c0005e7f <f_lseek+0x38c>
c0005e69:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e6d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e71:	88 ca                	mov    dl,cl
c0005e73:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e76:	83 ca 40             	or     edx,0x40
c0005e79:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e7c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e7f:	89 c2                	mov    edx,eax
c0005e81:	89 d8                	mov    eax,ebx
c0005e83:	e8 0e d4 ff ff       	call   c0003296 <create_chain>
c0005e88:	85 c0                	test   eax,eax
c0005e8a:	75 0b                	jne    c0005e97 <f_lseek+0x3a4>
c0005e8c:	eb 30                	jmp    c0005ebe <f_lseek+0x3cb>
c0005e8e:	89 c2                	mov    edx,eax
c0005e90:	89 d8                	mov    eax,ebx
c0005e92:	e8 11 d1 ff ff       	call   c0002fa8 <get_fat>
c0005e97:	83 f8 ff             	cmp    eax,0xffffffff
c0005e9a:	0f 84 25 fd ff ff    	je     c0005bc5 <f_lseek+0xd2>
c0005ea0:	83 f8 01             	cmp    eax,0x1
c0005ea3:	0f 86 06 fd ff ff    	jbe    c0005baf <f_lseek+0xbc>
c0005ea9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ead:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005eb0:	0f 86 f9 fc ff ff    	jbe    c0005baf <f_lseek+0xbc>
c0005eb6:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005eb9:	e9 5b ff ff ff       	jmp    c0005e19 <f_lseek+0x326>
c0005ebe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ec5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ecd:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005ed0:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ed4:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ed7:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005eda:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005edd:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ee3:	0f 84 6f fe ff ff    	je     c0005d58 <f_lseek+0x265>
c0005ee9:	89 c2                	mov    edx,eax
c0005eeb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005eef:	e8 e7 bf ff ff       	call   c0001edb <clst2sect>
c0005ef4:	89 d7                	mov    edi,edx
c0005ef6:	09 c7                	or     edi,eax
c0005ef8:	0f 84 b1 fc ff ff    	je     c0005baf <f_lseek+0xbc>
c0005efe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f02:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f05:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f09:	c1 ef 09             	shr    edi,0x9
c0005f0c:	01 c6                	add    esi,eax
c0005f0e:	11 d7                	adc    edi,edx
c0005f10:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f13:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f16:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f19:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f1c:	19 d1                	sbb    ecx,edx
c0005f1e:	73 0a                	jae    c0005f2a <f_lseek+0x437>
c0005f20:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f23:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f26:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f2a:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f2f:	74 6d                	je     c0005f9e <f_lseek+0x4ab>
c0005f31:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f37:	39 fa                	cmp    edx,edi
c0005f39:	75 04                	jne    c0005f3f <f_lseek+0x44c>
c0005f3b:	39 f0                	cmp    eax,esi
c0005f3d:	74 5f                	je     c0005f9e <f_lseek+0x4ab>
c0005f3f:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f42:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f46:	79 25                	jns    c0005f6d <f_lseek+0x47a>
c0005f48:	83 ec 0c             	sub    esp,0xc
c0005f4b:	6a 01                	push   0x1
c0005f4d:	52                   	push   edx
c0005f4e:	50                   	push   eax
c0005f4f:	55                   	push   ebp
c0005f50:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f54:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f58:	50                   	push   eax
c0005f59:	e8 af bc ff ff       	call   c0001c0d <disk_write>
c0005f5e:	83 c4 20             	add    esp,0x20
c0005f61:	85 c0                	test   eax,eax
c0005f63:	0f 85 5c fc ff ff    	jne    c0005bc5 <f_lseek+0xd2>
c0005f69:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f6d:	83 ec 0c             	sub    esp,0xc
c0005f70:	6a 01                	push   0x1
c0005f72:	57                   	push   edi
c0005f73:	56                   	push   esi
c0005f74:	55                   	push   ebp
c0005f75:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f79:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f7d:	50                   	push   eax
c0005f7e:	e8 74 bc ff ff       	call   c0001bf7 <disk_read>
c0005f83:	83 c4 20             	add    esp,0x20
c0005f86:	85 c0                	test   eax,eax
c0005f88:	0f 85 37 fc ff ff    	jne    c0005bc5 <f_lseek+0xd2>
c0005f8e:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f91:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f94:	eb 08                	jmp    c0005f9e <f_lseek+0x4ab>
c0005f96:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f9e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fa2:	83 c4 3c             	add    esp,0x3c
c0005fa5:	5b                   	pop    ebx
c0005fa6:	5e                   	pop    esi
c0005fa7:	5f                   	pop    edi
c0005fa8:	5d                   	pop    ebp
c0005fa9:	c3                   	ret    

c0005faa <f_opendir>:
c0005faa:	56                   	push   esi
c0005fab:	b8 09 00 00 00       	mov    eax,0x9
c0005fb0:	53                   	push   ebx
c0005fb1:	83 ec 24             	sub    esp,0x24
c0005fb4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fb8:	85 db                	test   ebx,ebx
c0005fba:	0f 84 e6 00 00 00    	je     c00060a6 <f_opendir+0xfc>
c0005fc0:	31 c9                	xor    ecx,ecx
c0005fc2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fc6:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fca:	e8 03 c7 ff ff       	call   c00026d2 <mount_volume>
c0005fcf:	85 c0                	test   eax,eax
c0005fd1:	0f 85 c9 00 00 00    	jne    c00060a0 <f_opendir+0xf6>
c0005fd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fdb:	83 ec 0c             	sub    esp,0xc
c0005fde:	89 03                	mov    DWORD PTR [ebx],eax
c0005fe0:	68 60 04 00 00       	push   0x460
c0005fe5:	e8 8b 24 00 00       	call   c0008475 <ff_memalloc>
c0005fea:	83 c4 10             	add    esp,0x10
c0005fed:	89 c6                	mov    esi,eax
c0005fef:	b8 11 00 00 00       	mov    eax,0x11
c0005ff4:	85 f6                	test   esi,esi
c0005ff6:	0f 84 aa 00 00 00    	je     c00060a6 <f_opendir+0xfc>
c0005ffc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006000:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006006:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006009:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000600c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0006010:	89 d8                	mov    eax,ebx
c0006012:	e8 31 ee ff ff       	call   c0004e48 <follow_path>
c0006017:	85 c0                	test   eax,eax
c0006019:	75 61                	jne    c000607c <f_opendir+0xd2>
c000601b:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000601f:	78 46                	js     c0006067 <f_opendir+0xbd>
c0006021:	b8 05 00 00 00       	mov    eax,0x5
c0006026:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000602a:	74 50                	je     c000607c <f_opendir+0xd2>
c000602c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006030:	8a 01                	mov    al,BYTE PTR [ecx]
c0006032:	3c 04                	cmp    al,0x4
c0006034:	75 26                	jne    c000605c <f_opendir+0xb2>
c0006036:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006039:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000603c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000603f:	30 d2                	xor    dl,dl
c0006041:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006045:	09 c2                	or     edx,eax
c0006047:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000604a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000604d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006050:	89 da                	mov    edx,ebx
c0006052:	8d 41 10             	lea    eax,[ecx+0x10]
c0006055:	e8 b4 ed ff ff       	call   c0004e0e <init_alloc_info.isra.2>
c000605a:	eb 0b                	jmp    c0006067 <f_opendir+0xbd>
c000605c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000605f:	e8 59 ed ff ff       	call   c0004dbd <ld_clust.isra.0>
c0006064:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006067:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000606b:	31 d2                	xor    edx,edx
c000606d:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006071:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006075:	89 d8                	mov    eax,ebx
c0006077:	e8 22 d1 ff ff       	call   c000319e <dir_sdi>
c000607c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006080:	83 ec 0c             	sub    esp,0xc
c0006083:	56                   	push   esi
c0006084:	e8 02 24 00 00       	call   c000848b <ff_memfree>
c0006089:	83 c4 10             	add    esp,0x10
c000608c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006090:	83 f8 04             	cmp    eax,0x4
c0006093:	74 06                	je     c000609b <f_opendir+0xf1>
c0006095:	85 c0                	test   eax,eax
c0006097:	74 0d                	je     c00060a6 <f_opendir+0xfc>
c0006099:	eb 05                	jmp    c00060a0 <f_opendir+0xf6>
c000609b:	b8 05 00 00 00       	mov    eax,0x5
c00060a0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060a6:	83 c4 24             	add    esp,0x24
c00060a9:	5b                   	pop    ebx
c00060aa:	5e                   	pop    esi
c00060ab:	c3                   	ret    

c00060ac <f_closedir>:
c00060ac:	53                   	push   ebx
c00060ad:	83 ec 18             	sub    esp,0x18
c00060b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060b4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060b8:	89 d8                	mov    eax,ebx
c00060ba:	e8 86 c2 ff ff       	call   c0002345 <validate>
c00060bf:	85 c0                	test   eax,eax
c00060c1:	75 06                	jne    c00060c9 <f_closedir+0x1d>
c00060c3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c9:	83 c4 18             	add    esp,0x18
c00060cc:	5b                   	pop    ebx
c00060cd:	c3                   	ret    

c00060ce <f_readdir>:
c00060ce:	57                   	push   edi
c00060cf:	56                   	push   esi
c00060d0:	53                   	push   ebx
c00060d1:	83 ec 20             	sub    esp,0x20
c00060d4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060d8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060dc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060e0:	89 d8                	mov    eax,ebx
c00060e2:	e8 5e c2 ff ff       	call   c0002345 <validate>
c00060e7:	85 c0                	test   eax,eax
c00060e9:	75 77                	jne    c0006162 <f_readdir+0x94>
c00060eb:	85 ff                	test   edi,edi
c00060ed:	75 0b                	jne    c00060fa <f_readdir+0x2c>
c00060ef:	31 d2                	xor    edx,edx
c00060f1:	89 d8                	mov    eax,ebx
c00060f3:	e8 a6 d0 ff ff       	call   c000319e <dir_sdi>
c00060f8:	eb 68                	jmp    c0006162 <f_readdir+0x94>
c00060fa:	83 ec 0c             	sub    esp,0xc
c00060fd:	68 60 04 00 00       	push   0x460
c0006102:	e8 6e 23 00 00       	call   c0008475 <ff_memalloc>
c0006107:	83 c4 10             	add    esp,0x10
c000610a:	89 c6                	mov    esi,eax
c000610c:	b8 11 00 00 00       	mov    eax,0x11
c0006111:	85 f6                	test   esi,esi
c0006113:	74 4d                	je     c0006162 <f_readdir+0x94>
c0006115:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006119:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000611f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006122:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006125:	31 d2                	xor    edx,edx
c0006127:	89 d8                	mov    eax,ebx
c0006129:	e8 80 d8 ff ff       	call   c00039ae <dir_read>
c000612e:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006133:	75 19                	jne    c000614e <f_readdir+0x80>
c0006135:	89 fa                	mov    edx,edi
c0006137:	89 d8                	mov    eax,ebx
c0006139:	e8 7e ea ff ff       	call   c0004bbc <get_fileinfo>
c000613e:	31 d2                	xor    edx,edx
c0006140:	89 d8                	mov    eax,ebx
c0006142:	e8 af d5 ff ff       	call   c00036f6 <dir_next>
c0006147:	83 f8 04             	cmp    eax,0x4
c000614a:	75 02                	jne    c000614e <f_readdir+0x80>
c000614c:	31 c0                	xor    eax,eax
c000614e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006152:	83 ec 0c             	sub    esp,0xc
c0006155:	56                   	push   esi
c0006156:	e8 30 23 00 00       	call   c000848b <ff_memfree>
c000615b:	83 c4 10             	add    esp,0x10
c000615e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006162:	83 c4 20             	add    esp,0x20
c0006165:	5b                   	pop    ebx
c0006166:	5e                   	pop    esi
c0006167:	5f                   	pop    edi
c0006168:	c3                   	ret    

c0006169 <f_stat>:
c0006169:	57                   	push   edi
c000616a:	31 c9                	xor    ecx,ecx
c000616c:	56                   	push   esi
c000616d:	53                   	push   ebx
c000616e:	83 ec 50             	sub    esp,0x50
c0006171:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006175:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006179:	8d 44 24 60          	lea    eax,[esp+0x60]
c000617d:	e8 50 c5 ff ff       	call   c00026d2 <mount_volume>
c0006182:	89 c3                	mov    ebx,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	75 67                	jne    c00061ef <f_stat+0x86>
c0006188:	83 ec 0c             	sub    esp,0xc
c000618b:	bb 11 00 00 00       	mov    ebx,0x11
c0006190:	68 60 04 00 00       	push   0x460
c0006195:	e8 db 22 00 00       	call   c0008475 <ff_memalloc>
c000619a:	83 c4 10             	add    esp,0x10
c000619d:	89 c6                	mov    esi,eax
c000619f:	85 c0                	test   eax,eax
c00061a1:	74 4c                	je     c00061ef <f_stat+0x86>
c00061a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061a7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061ad:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061b3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061b7:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bb:	e8 88 ec ff ff       	call   c0004e48 <follow_path>
c00061c0:	89 c3                	mov    ebx,eax
c00061c2:	85 c0                	test   eax,eax
c00061c4:	75 1d                	jne    c00061e3 <f_stat+0x7a>
c00061c6:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061cb:	78 11                	js     c00061de <f_stat+0x75>
c00061cd:	85 ff                	test   edi,edi
c00061cf:	74 12                	je     c00061e3 <f_stat+0x7a>
c00061d1:	89 fa                	mov    edx,edi
c00061d3:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061d7:	e8 e0 e9 ff ff       	call   c0004bbc <get_fileinfo>
c00061dc:	eb 05                	jmp    c00061e3 <f_stat+0x7a>
c00061de:	bb 06 00 00 00       	mov    ebx,0x6
c00061e3:	83 ec 0c             	sub    esp,0xc
c00061e6:	56                   	push   esi
c00061e7:	e8 9f 22 00 00       	call   c000848b <ff_memfree>
c00061ec:	83 c4 10             	add    esp,0x10
c00061ef:	83 c4 50             	add    esp,0x50
c00061f2:	89 d8                	mov    eax,ebx
c00061f4:	5b                   	pop    ebx
c00061f5:	5e                   	pop    esi
c00061f6:	5f                   	pop    edi
c00061f7:	c3                   	ret    

c00061f8 <f_getfree>:
c00061f8:	55                   	push   ebp
c00061f9:	31 c9                	xor    ecx,ecx
c00061fb:	57                   	push   edi
c00061fc:	56                   	push   esi
c00061fd:	53                   	push   ebx
c00061fe:	83 ec 5c             	sub    esp,0x5c
c0006201:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006205:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006209:	e8 c4 c4 ff ff       	call   c00026d2 <mount_volume>
c000620e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006212:	85 c0                	test   eax,eax
c0006214:	0f 85 9d 01 00 00    	jne    c00063b7 <f_getfree+0x1bf>
c000621a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000621e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006222:	89 02                	mov    DWORD PTR [edx],eax
c0006224:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006227:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000622a:	8d 71 fe             	lea    esi,[ecx-0x2]
c000622d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006231:	39 f2                	cmp    edx,esi
c0006233:	77 0b                	ja     c0006240 <f_getfree+0x48>
c0006235:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006239:	89 10                	mov    DWORD PTR [eax],edx
c000623b:	e9 77 01 00 00       	jmp    c00063b7 <f_getfree+0x1bf>
c0006240:	8a 10                	mov    dl,BYTE PTR [eax]
c0006242:	80 fa 01             	cmp    dl,0x1
c0006245:	75 3a                	jne    c0006281 <f_getfree+0x89>
c0006247:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000624b:	be 02 00 00 00       	mov    esi,0x2
c0006250:	31 db                	xor    ebx,ebx
c0006252:	89 f2                	mov    edx,esi
c0006254:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006258:	e8 4b cd ff ff       	call   c0002fa8 <get_fat>
c000625d:	83 f8 ff             	cmp    eax,0xffffffff
c0006260:	0f 84 28 01 00 00    	je     c000638e <f_getfree+0x196>
c0006266:	83 f8 01             	cmp    eax,0x1
c0006269:	0f 84 29 01 00 00    	je     c0006398 <f_getfree+0x1a0>
c000626f:	83 d3 00             	adc    ebx,0x0
c0006272:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006276:	46                   	inc    esi
c0006277:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000627a:	77 d6                	ja     c0006252 <f_getfree+0x5a>
c000627c:	e9 25 01 00 00       	jmp    c00063a6 <f_getfree+0x1ae>
c0006281:	80 fa 04             	cmp    dl,0x4
c0006284:	0f 85 88 00 00 00    	jne    c0006312 <f_getfree+0x11a>
c000628a:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000628d:	31 ed                	xor    ebp,ebp
c000628f:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006292:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006296:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000629a:	31 db                	xor    ebx,ebx
c000629c:	85 ed                	test   ebp,ebp
c000629e:	75 3f                	jne    c00062df <f_getfree+0xe7>
c00062a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062a8:	83 c0 01             	add    eax,0x1
c00062ab:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062af:	83 d2 00             	adc    edx,0x0
c00062b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062b6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062ba:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062c2:	e8 59 c1 ff ff       	call   c0002420 <move_window>
c00062c7:	85 c0                	test   eax,eax
c00062c9:	0f 85 d3 00 00 00    	jne    c00063a2 <f_getfree+0x1aa>
c00062cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062e3:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062e6:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062ea:	89 cf                	mov    edi,ecx
c00062ec:	85 f6                	test   esi,esi
c00062ee:	74 12                	je     c0006302 <f_getfree+0x10a>
c00062f0:	88 c1                	mov    cl,al
c00062f2:	83 e1 01             	and    ecx,0x1
c00062f5:	80 f9 01             	cmp    cl,0x1
c00062f8:	83 d3 00             	adc    ebx,0x0
c00062fb:	d0 e8                	shr    al,1
c00062fd:	4e                   	dec    esi
c00062fe:	39 fe                	cmp    esi,edi
c0006300:	75 ea                	jne    c00062ec <f_getfree+0xf4>
c0006302:	45                   	inc    ebp
c0006303:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006309:	85 f6                	test   esi,esi
c000630b:	75 8f                	jne    c000629c <f_getfree+0xa4>
c000630d:	e9 94 00 00 00       	jmp    c00063a6 <f_getfree+0x1ae>
c0006312:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006315:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006318:	31 f6                	xor    esi,esi
c000631a:	31 db                	xor    ebx,ebx
c000631c:	85 f6                	test   esi,esi
c000631e:	75 1b                	jne    c000633b <f_getfree+0x143>
c0006320:	89 d7                	mov    edi,edx
c0006322:	89 cd                	mov    ebp,ecx
c0006324:	83 c7 01             	add    edi,0x1
c0006327:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000632b:	83 d5 00             	adc    ebp,0x0
c000632e:	e8 ed c0 ff ff       	call   c0002420 <move_window>
c0006333:	85 c0                	test   eax,eax
c0006335:	75 6b                	jne    c00063a2 <f_getfree+0x1aa>
c0006337:	89 fa                	mov    edx,edi
c0006339:	89 e9                	mov    ecx,ebp
c000633b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000633f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006343:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006347:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000634a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000634e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006352:	75 11                	jne    c0006365 <f_getfree+0x16d>
c0006354:	e8 e9 b8 ff ff       	call   c0001c42 <ld_word>
c0006359:	66 83 f8 01          	cmp    ax,0x1
c000635d:	83 d3 00             	adc    ebx,0x0
c0006360:	83 c6 02             	add    esi,0x2
c0006363:	eb 13                	jmp    c0006378 <f_getfree+0x180>
c0006365:	e8 e5 b8 ff ff       	call   c0001c4f <ld_dword>
c000636a:	25 ff ff ff 0f       	and    eax,0xfffffff
c000636f:	83 f8 01             	cmp    eax,0x1
c0006372:	83 d3 00             	adc    ebx,0x0
c0006375:	83 c6 04             	add    esi,0x4
c0006378:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000637e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006382:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006386:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000638a:	75 90                	jne    c000631c <f_getfree+0x124>
c000638c:	eb 18                	jmp    c00063a6 <f_getfree+0x1ae>
c000638e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006396:	eb 0e                	jmp    c00063a6 <f_getfree+0x1ae>
c0006398:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063a0:	eb 04                	jmp    c00063a6 <f_getfree+0x1ae>
c00063a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063a6:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063aa:	89 18                	mov    DWORD PTR [eax],ebx
c00063ac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063b0:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063b3:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063bb:	83 c4 5c             	add    esp,0x5c
c00063be:	5b                   	pop    ebx
c00063bf:	5e                   	pop    esi
c00063c0:	5f                   	pop    edi
c00063c1:	5d                   	pop    ebp
c00063c2:	c3                   	ret    

c00063c3 <f_truncate>:
c00063c3:	56                   	push   esi
c00063c4:	53                   	push   ebx
c00063c5:	83 ec 14             	sub    esp,0x14
c00063c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063cc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063d0:	89 d8                	mov    eax,ebx
c00063d2:	e8 6e bf ff ff       	call   c0002345 <validate>
c00063d7:	89 c6                	mov    esi,eax
c00063d9:	85 c0                	test   eax,eax
c00063db:	0f 85 d2 00 00 00    	jne    c00064b3 <f_truncate+0xf0>
c00063e1:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063e5:	85 f6                	test   esi,esi
c00063e7:	0f 85 c6 00 00 00    	jne    c00064b3 <f_truncate+0xf0>
c00063ed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063f1:	0f 84 b7 00 00 00    	je     c00064ae <f_truncate+0xeb>
c00063f7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063fa:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063fd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006400:	89 d1                	mov    ecx,edx
c0006402:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006405:	0f 83 a8 00 00 00    	jae    c00064b3 <f_truncate+0xf0>
c000640b:	09 c2                	or     edx,eax
c000640d:	75 15                	jne    c0006424 <f_truncate+0x61>
c000640f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006412:	31 c9                	xor    ecx,ecx
c0006414:	89 d8                	mov    eax,ebx
c0006416:	e8 7a d0 ff ff       	call   c0003495 <remove_chain>
c000641b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006422:	eb 35                	jmp    c0006459 <f_truncate+0x96>
c0006424:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006427:	89 d8                	mov    eax,ebx
c0006429:	e8 7a cb ff ff       	call   c0002fa8 <get_fat>
c000642e:	89 c2                	mov    edx,eax
c0006430:	b8 01 00 00 00       	mov    eax,0x1
c0006435:	83 fa ff             	cmp    edx,0xffffffff
c0006438:	74 1f                	je     c0006459 <f_truncate+0x96>
c000643a:	b8 02 00 00 00       	mov    eax,0x2
c000643f:	83 fa 01             	cmp    edx,0x1
c0006442:	74 15                	je     c0006459 <f_truncate+0x96>
c0006444:	31 c0                	xor    eax,eax
c0006446:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000644a:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000644d:	76 0a                	jbe    c0006459 <f_truncate+0x96>
c000644f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006452:	89 d8                	mov    eax,ebx
c0006454:	e8 3c d0 ff ff       	call   c0003495 <remove_chain>
c0006459:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000645c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000645f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006462:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006465:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006468:	83 ca 40             	or     edx,0x40
c000646b:	85 c0                	test   eax,eax
c000646d:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006470:	75 35                	jne    c00064a7 <f_truncate+0xe4>
c0006472:	84 d2                	test   dl,dl
c0006474:	79 3d                	jns    c00064b3 <f_truncate+0xf0>
c0006476:	83 ec 0c             	sub    esp,0xc
c0006479:	8d 43 50             	lea    eax,[ebx+0x50]
c000647c:	6a 01                	push   0x1
c000647e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006481:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006484:	50                   	push   eax
c0006485:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006489:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000648d:	50                   	push   eax
c000648e:	e8 7a b7 ff ff       	call   c0001c0d <disk_write>
c0006493:	83 c4 20             	add    esp,0x20
c0006496:	85 c0                	test   eax,eax
c0006498:	75 08                	jne    c00064a2 <f_truncate+0xdf>
c000649a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000649e:	31 f6                	xor    esi,esi
c00064a0:	eb 11                	jmp    c00064b3 <f_truncate+0xf0>
c00064a2:	b8 01 00 00 00       	mov    eax,0x1
c00064a7:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064aa:	89 c6                	mov    esi,eax
c00064ac:	eb 05                	jmp    c00064b3 <f_truncate+0xf0>
c00064ae:	be 07 00 00 00       	mov    esi,0x7
c00064b3:	89 f0                	mov    eax,esi
c00064b5:	83 c4 14             	add    esp,0x14
c00064b8:	5b                   	pop    ebx
c00064b9:	5e                   	pop    esi
c00064ba:	c3                   	ret    

c00064bb <f_unlink>:
c00064bb:	56                   	push   esi
c00064bc:	b9 02 00 00 00       	mov    ecx,0x2
c00064c1:	53                   	push   ebx
c00064c2:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064c8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064cc:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064d3:	e8 fa c1 ff ff       	call   c00026d2 <mount_volume>
c00064d8:	85 c0                	test   eax,eax
c00064da:	0f 85 55 01 00 00    	jne    c0006635 <f_unlink+0x17a>
c00064e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064e4:	83 ec 0c             	sub    esp,0xc
c00064e7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064eb:	68 60 04 00 00       	push   0x460
c00064f0:	e8 80 1f 00 00       	call   c0008475 <ff_memalloc>
c00064f5:	83 c4 10             	add    esp,0x10
c00064f8:	89 c3                	mov    ebx,eax
c00064fa:	b8 11 00 00 00       	mov    eax,0x11
c00064ff:	85 db                	test   ebx,ebx
c0006501:	0f 84 2e 01 00 00    	je     c0006635 <f_unlink+0x17a>
c0006507:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000650b:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006511:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006514:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006517:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000651e:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006522:	e8 21 e9 ff ff       	call   c0004e48 <follow_path>
c0006527:	85 c0                	test   eax,eax
c0006529:	0f 85 f2 00 00 00    	jne    c0006621 <f_unlink+0x166>
c000652f:	b8 06 00 00 00       	mov    eax,0x6
c0006534:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000653c:	0f 88 df 00 00 00    	js     c0006621 <f_unlink+0x166>
c0006542:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006547:	74 0a                	je     c0006553 <f_unlink+0x98>
c0006549:	b8 07 00 00 00       	mov    eax,0x7
c000654e:	e9 ce 00 00 00       	jmp    c0006621 <f_unlink+0x166>
c0006553:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006557:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000655b:	8a 02                	mov    al,BYTE PTR [edx]
c000655d:	3c 04                	cmp    al,0x4
c000655f:	75 12                	jne    c0006573 <f_unlink+0xb8>
c0006561:	8d 42 10             	lea    eax,[edx+0x10]
c0006564:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006568:	e8 a1 e8 ff ff       	call   c0004e0e <init_alloc_info.isra.2>
c000656d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006571:	eb 0e                	jmp    c0006581 <f_unlink+0xc6>
c0006573:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000657a:	e8 3e e8 ff ff       	call   c0004dbd <ld_clust.isra.0>
c000657f:	89 c6                	mov    esi,eax
c0006581:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006586:	75 12                	jne    c000659a <f_unlink+0xdf>
c0006588:	8d 44 24 48          	lea    eax,[esp+0x48]
c000658c:	e8 94 d6 ff ff       	call   c0003c25 <dir_remove>
c0006591:	85 c0                	test   eax,eax
c0006593:	74 6c                	je     c0006601 <f_unlink+0x146>
c0006595:	e9 87 00 00 00       	jmp    c0006621 <f_unlink+0x166>
c000659a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000659e:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065a5:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065ac:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065af:	75 21                	jne    c00065d2 <f_unlink+0x117>
c00065b1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065b5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065b9:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065c0:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065c7:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065cb:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065d2:	31 d2                	xor    edx,edx
c00065d4:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065db:	e8 be cb ff ff       	call   c000319e <dir_sdi>
c00065e0:	85 c0                	test   eax,eax
c00065e2:	75 3d                	jne    c0006621 <f_unlink+0x166>
c00065e4:	31 d2                	xor    edx,edx
c00065e6:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065ed:	e8 bc d3 ff ff       	call   c00039ae <dir_read>
c00065f2:	85 c0                	test   eax,eax
c00065f4:	0f 84 4f ff ff ff    	je     c0006549 <f_unlink+0x8e>
c00065fa:	83 f8 04             	cmp    eax,0x4
c00065fd:	75 22                	jne    c0006621 <f_unlink+0x166>
c00065ff:	eb 87                	jmp    c0006588 <f_unlink+0xcd>
c0006601:	85 f6                	test   esi,esi
c0006603:	75 0b                	jne    c0006610 <f_unlink+0x155>
c0006605:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006609:	e8 3d df ff ff       	call   c000454b <sync_fs>
c000660e:	eb 11                	jmp    c0006621 <f_unlink+0x166>
c0006610:	31 c9                	xor    ecx,ecx
c0006612:	89 f2                	mov    edx,esi
c0006614:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006618:	e8 78 ce ff ff       	call   c0003495 <remove_chain>
c000661d:	85 c0                	test   eax,eax
c000661f:	74 e4                	je     c0006605 <f_unlink+0x14a>
c0006621:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006625:	83 ec 0c             	sub    esp,0xc
c0006628:	53                   	push   ebx
c0006629:	e8 5d 1e 00 00       	call   c000848b <ff_memfree>
c000662e:	83 c4 10             	add    esp,0x10
c0006631:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006635:	81 c4 e4 00 00 00    	add    esp,0xe4
c000663b:	5b                   	pop    ebx
c000663c:	5e                   	pop    esi
c000663d:	c3                   	ret    

c000663e <f_mkdir>:
c000663e:	57                   	push   edi
c000663f:	b9 02 00 00 00       	mov    ecx,0x2
c0006644:	56                   	push   esi
c0006645:	53                   	push   ebx
c0006646:	83 c4 80             	add    esp,0xffffff80
c0006649:	8d 54 24 08          	lea    edx,[esp+0x8]
c000664d:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006654:	e8 79 c0 ff ff       	call   c00026d2 <mount_volume>
c0006659:	89 c3                	mov    ebx,eax
c000665b:	85 c0                	test   eax,eax
c000665d:	0f 85 fe 01 00 00    	jne    c0006861 <f_mkdir+0x223>
c0006663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006667:	bb 11 00 00 00       	mov    ebx,0x11
c000666c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006670:	83 ec 0c             	sub    esp,0xc
c0006673:	68 60 04 00 00       	push   0x460
c0006678:	e8 f8 1d 00 00       	call   c0008475 <ff_memalloc>
c000667d:	83 c4 10             	add    esp,0x10
c0006680:	89 c7                	mov    edi,eax
c0006682:	85 c0                	test   eax,eax
c0006684:	0f 84 d7 01 00 00    	je     c0006861 <f_mkdir+0x223>
c000668a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668e:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006694:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006697:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000669a:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066a1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066a5:	e8 9e e7 ff ff       	call   c0004e48 <follow_path>
c00066aa:	89 c3                	mov    ebx,eax
c00066ac:	85 c0                	test   eax,eax
c00066ae:	74 3e                	je     c00066ee <f_mkdir+0xb0>
c00066b0:	83 f8 04             	cmp    eax,0x4
c00066b3:	75 3e                	jne    c00066f3 <f_mkdir+0xb5>
c00066b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066b9:	31 d2                	xor    edx,edx
c00066bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066bf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066c3:	e8 ce cb ff ff       	call   c0003296 <create_chain>
c00066c8:	89 c6                	mov    esi,eax
c00066ca:	85 c0                	test   eax,eax
c00066cc:	74 0c                	je     c00066da <f_mkdir+0x9c>
c00066ce:	bb 02 00 00 00       	mov    ebx,0x2
c00066d3:	83 f8 01             	cmp    eax,0x1
c00066d6:	74 07                	je     c00066df <f_mkdir+0xa1>
c00066d8:	eb 2a                	jmp    c0006704 <f_mkdir+0xc6>
c00066da:	bb 07 00 00 00       	mov    ebx,0x7
c00066df:	31 c9                	xor    ecx,ecx
c00066e1:	89 f2                	mov    edx,esi
c00066e3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e7:	e8 a9 cd ff ff       	call   c0003495 <remove_chain>
c00066ec:	eb 05                	jmp    c00066f3 <f_mkdir+0xb5>
c00066ee:	bb 08 00 00 00       	mov    ebx,0x8
c00066f3:	83 ec 0c             	sub    esp,0xc
c00066f6:	57                   	push   edi
c00066f7:	e8 8f 1d 00 00       	call   c000848b <ff_memfree>
c00066fc:	83 c4 10             	add    esp,0x10
c00066ff:	e9 5d 01 00 00       	jmp    c0006861 <f_mkdir+0x223>
c0006704:	bb 01 00 00 00       	mov    ebx,0x1
c0006709:	83 f8 ff             	cmp    eax,0xffffffff
c000670c:	74 d1                	je     c00066df <f_mkdir+0xa1>
c000670e:	89 f2                	mov    edx,esi
c0006710:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006714:	e8 c4 ce ff ff       	call   c00035dd <dir_clear>
c0006719:	89 c3                	mov    ebx,eax
c000671b:	85 c0                	test   eax,eax
c000671d:	75 c0                	jne    c00066df <f_mkdir+0xa1>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006726:	74 69                	je     c0006791 <f_mkdir+0x153>
c0006728:	b9 0b 00 00 00       	mov    ecx,0xb
c000672d:	83 c0 54             	add    eax,0x54
c0006730:	ba 20 00 00 00       	mov    edx,0x20
c0006735:	e8 9c b5 ff ff       	call   c0001cd6 <mem_set>
c000673a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006743:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006747:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000674b:	83 c0 6a             	add    eax,0x6a
c000674e:	e8 65 b5 ff ff       	call   c0001cb8 <st_dword>
c0006753:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006757:	89 f1                	mov    ecx,esi
c0006759:	8d 50 54             	lea    edx,[eax+0x54]
c000675c:	e8 85 e6 ff ff       	call   c0004de6 <st_clust.isra.1>
c0006761:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006765:	b9 20 00 00 00       	mov    ecx,0x20
c000676a:	8d 50 54             	lea    edx,[eax+0x54]
c000676d:	83 c0 74             	add    eax,0x74
c0006770:	e8 4c b5 ff ff       	call   c0001cc1 <mem_cpy>
c0006775:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006779:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000677d:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006781:	8d 50 74             	lea    edx,[eax+0x74]
c0006784:	e8 5d e6 ff ff       	call   c0004de6 <st_clust.isra.1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006791:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006795:	e8 2f db ff ff       	call   c00042c9 <dir_register>
c000679a:	89 c3                	mov    ebx,eax
c000679c:	85 c0                	test   eax,eax
c000679e:	0f 85 3b ff ff ff    	jne    c00066df <f_mkdir+0xa1>
c00067a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ab:	75 74                	jne    c0006821 <f_mkdir+0x1e3>
c00067ad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067b0:	ba 00 00 21 50       	mov    edx,0x50210000
c00067b5:	83 c0 0c             	add    eax,0xc
c00067b8:	e8 fb b4 ff ff       	call   c0001cb8 <st_dword>
c00067bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c1:	89 f2                	mov    edx,esi
c00067c3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067c6:	83 c0 34             	add    eax,0x34
c00067c9:	e8 ea b4 ff ff       	call   c0001cb8 <st_dword>
c00067ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067d2:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d9:	c1 e2 09             	shl    edx,0x9
c00067dc:	83 c0 38             	add    eax,0x38
c00067df:	e8 d4 b4 ff ff       	call   c0001cb8 <st_dword>
c00067e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e8:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ef:	c1 e2 09             	shl    edx,0x9
c00067f2:	83 c0 28             	add    eax,0x28
c00067f5:	e8 be b4 ff ff       	call   c0001cb8 <st_dword>
c00067fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067fe:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006801:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006805:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006808:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000680c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006810:	e8 8b d3 ff ff       	call   c0003ba0 <store_xdir>
c0006815:	89 c3                	mov    ebx,eax
c0006817:	85 c0                	test   eax,eax
c0006819:	0f 85 d4 fe ff ff    	jne    c00066f3 <f_mkdir+0xb5>
c000681f:	eb 30                	jmp    c0006851 <f_mkdir+0x213>
c0006821:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006825:	ba 00 00 21 50       	mov    edx,0x50210000
c000682a:	83 c0 16             	add    eax,0x16
c000682d:	e8 86 b4 ff ff       	call   c0001cb8 <st_dword>
c0006832:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006836:	89 f1                	mov    ecx,esi
c0006838:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000683c:	e8 a5 e5 ff ff       	call   c0004de6 <st_clust.isra.1>
c0006841:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006845:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006849:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000684d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	e8 f1 dc ff ff       	call   c000454b <sync_fs>
c000685a:	89 c3                	mov    ebx,eax
c000685c:	e9 92 fe ff ff       	jmp    c00066f3 <f_mkdir+0xb5>
c0006861:	83 ec 80             	sub    esp,0xffffff80
c0006864:	89 d8                	mov    eax,ebx
c0006866:	5b                   	pop    ebx
c0006867:	5e                   	pop    esi
c0006868:	5f                   	pop    edi
c0006869:	c3                   	ret    

c000686a <f_rename>:
c000686a:	55                   	push   ebp
c000686b:	57                   	push   edi
c000686c:	56                   	push   esi
c000686d:	53                   	push   ebx
c000686e:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006874:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000687b:	e8 a4 b9 ff ff       	call   c0002224 <get_ldnumber>
c0006880:	b9 02 00 00 00       	mov    ecx,0x2
c0006885:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006889:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006890:	e8 3d be ff ff       	call   c00026d2 <mount_volume>
c0006895:	85 c0                	test   eax,eax
c0006897:	0f 85 b5 02 00 00    	jne    c0006b52 <f_rename+0x2e8>
c000689d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068a1:	83 ec 0c             	sub    esp,0xc
c00068a4:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068a8:	68 60 04 00 00       	push   0x460
c00068ad:	e8 c3 1b 00 00       	call   c0008475 <ff_memalloc>
c00068b2:	83 c4 10             	add    esp,0x10
c00068b5:	89 c3                	mov    ebx,eax
c00068b7:	b8 11 00 00 00       	mov    eax,0x11
c00068bc:	85 db                	test   ebx,ebx
c00068be:	0f 84 8e 02 00 00    	je     c0006b52 <f_rename+0x2e8>
c00068c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ce:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068d1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068d4:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068db:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068df:	e8 64 e5 ff ff       	call   c0004e48 <follow_path>
c00068e4:	85 c0                	test   eax,eax
c00068e6:	0f 85 52 02 00 00    	jne    c0006b3e <f_rename+0x2d4>
c00068ec:	b8 06 00 00 00       	mov    eax,0x6
c00068f1:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068f9:	0f 85 3f 02 00 00    	jne    c0006b3e <f_rename+0x2d4>
c00068ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006903:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006906:	0f 85 05 01 00 00    	jne    c0006a11 <f_rename+0x1a7>
c000690c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000690f:	b9 40 00 00 00       	mov    ecx,0x40
c0006914:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006918:	e8 a4 b3 ff ff       	call   c0001cc1 <mem_cpy>
c000691d:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006922:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006926:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000692d:	e8 8f b3 ff ff       	call   c0001cc1 <mem_cpy>
c0006932:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006939:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006940:	e8 03 e5 ff ff       	call   c0004e48 <follow_path>
c0006945:	85 c0                	test   eax,eax
c0006947:	75 29                	jne    c0006972 <f_rename+0x108>
c0006949:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000694d:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006954:	74 0a                	je     c0006960 <f_rename+0xf6>
c0006956:	b8 08 00 00 00       	mov    eax,0x8
c000695b:	e9 de 01 00 00       	jmp    c0006b3e <f_rename+0x2d4>
c0006960:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006967:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000696e:	75 e6                	jne    c0006956 <f_rename+0xec>
c0006970:	eb 09                	jmp    c000697b <f_rename+0x111>
c0006972:	83 f8 04             	cmp    eax,0x4
c0006975:	0f 85 c3 01 00 00    	jne    c0006b3e <f_rename+0x2d4>
c000697b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006982:	e8 42 d9 ff ff       	call   c00042c9 <dir_register>
c0006987:	85 c0                	test   eax,eax
c0006989:	0f 85 af 01 00 00    	jne    c0006b3e <f_rename+0x2d4>
c000698f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006993:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006996:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006999:	89 c5                	mov    ebp,eax
c000699b:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000699e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069a2:	8d 46 24             	lea    eax,[esi+0x24]
c00069a5:	e8 98 b2 ff ff       	call   c0001c42 <ld_word>
c00069aa:	b9 40 00 00 00       	mov    ecx,0x40
c00069af:	89 c7                	mov    edi,eax
c00069b1:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069b5:	89 f0                	mov    eax,esi
c00069b7:	e8 05 b3 ff ff       	call   c0001cc1 <mem_cpy>
c00069bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069c0:	89 e9                	mov    ecx,ebp
c00069c2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c5:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069c8:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d3:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069d6:	0f b7 d7             	movzx  edx,di
c00069d9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069dc:	83 c0 24             	add    eax,0x24
c00069df:	e8 d0 b2 ff ff       	call   c0001cb4 <st_word>
c00069e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069e8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069eb:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069ee:	a8 10                	test   al,0x10
c00069f0:	75 06                	jne    c00069f8 <f_rename+0x18e>
c00069f2:	83 c8 20             	or     eax,0x20
c00069f5:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069f8:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069ff:	e8 9c d1 ff ff       	call   c0003ba0 <store_xdir>
c0006a04:	85 c0                	test   eax,eax
c0006a06:	0f 84 1c 01 00 00    	je     c0006b28 <f_rename+0x2be>
c0006a0c:	e9 2d 01 00 00       	jmp    c0006b3e <f_rename+0x2d4>
c0006a11:	b9 20 00 00 00       	mov    ecx,0x20
c0006a16:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a1d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a21:	e8 9b b2 ff ff       	call   c0001cc1 <mem_cpy>
c0006a26:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a2b:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a2f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a36:	e8 86 b2 ff ff       	call   c0001cc1 <mem_cpy>
c0006a3b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a42:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a49:	e8 fa e3 ff ff       	call   c0004e48 <follow_path>
c0006a4e:	85 c0                	test   eax,eax
c0006a50:	75 27                	jne    c0006a79 <f_rename+0x20f>
c0006a52:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a56:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a5d:	0f 85 f3 fe ff ff    	jne    c0006956 <f_rename+0xec>
c0006a63:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a6a:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a71:	0f 85 df fe ff ff    	jne    c0006956 <f_rename+0xec>
c0006a77:	eb 09                	jmp    c0006a82 <f_rename+0x218>
c0006a79:	83 f8 04             	cmp    eax,0x4
c0006a7c:	0f 85 bc 00 00 00    	jne    c0006b3e <f_rename+0x2d4>
c0006a82:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a89:	e8 3b d8 ff ff       	call   c00042c9 <dir_register>
c0006a8e:	85 c0                	test   eax,eax
c0006a90:	0f 85 a8 00 00 00    	jne    c0006b3e <f_rename+0x2d4>
c0006a96:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a9d:	b9 13 00 00 00       	mov    ecx,0x13
c0006aa2:	8d 46 0d             	lea    eax,[esi+0xd]
c0006aa5:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006aa9:	e8 13 b2 ff ff       	call   c0001cc1 <mem_cpy>
c0006aae:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ab2:	a8 10                	test   al,0x10
c0006ab4:	75 03                	jne    c0006ab9 <f_rename+0x24f>
c0006ab6:	83 c8 20             	or     eax,0x20
c0006ab9:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006abc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006ac0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ac4:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ac8:	74 5e                	je     c0006b28 <f_rename+0x2be>
c0006aca:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ad1:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006ad5:	74 51                	je     c0006b28 <f_rename+0x2be>
c0006ad7:	89 f2                	mov    edx,esi
c0006ad9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006add:	8a 07                	mov    al,BYTE PTR [edi]
c0006adf:	e8 d9 e2 ff ff       	call   c0004dbd <ld_clust.isra.0>
c0006ae4:	89 c2                	mov    edx,eax
c0006ae6:	89 f8                	mov    eax,edi
c0006ae8:	e8 ee b3 ff ff       	call   c0001edb <clst2sect>
c0006aed:	89 c6                	mov    esi,eax
c0006aef:	89 d1                	mov    ecx,edx
c0006af1:	b8 02 00 00 00       	mov    eax,0x2
c0006af6:	09 f2                	or     edx,esi
c0006af8:	74 44                	je     c0006b3e <f_rename+0x2d4>
c0006afa:	89 f2                	mov    edx,esi
c0006afc:	89 f8                	mov    eax,edi
c0006afe:	e8 1d b9 ff ff       	call   c0002420 <move_window>
c0006b03:	85 c0                	test   eax,eax
c0006b05:	75 37                	jne    c0006b3e <f_rename+0x2d4>
c0006b07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b0b:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b0f:	75 17                	jne    c0006b28 <f_rename+0x2be>
c0006b11:	8d 50 74             	lea    edx,[eax+0x74]
c0006b14:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b1b:	e8 c6 e2 ff ff       	call   c0004de6 <st_clust.isra.1>
c0006b20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b24:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b28:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b2c:	e8 f4 d0 ff ff       	call   c0003c25 <dir_remove>
c0006b31:	85 c0                	test   eax,eax
c0006b33:	75 09                	jne    c0006b3e <f_rename+0x2d4>
c0006b35:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b39:	e8 0d da ff ff       	call   c000454b <sync_fs>
c0006b3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b42:	83 ec 0c             	sub    esp,0xc
c0006b45:	53                   	push   ebx
c0006b46:	e8 40 19 00 00       	call   c000848b <ff_memfree>
c0006b4b:	83 c4 10             	add    esp,0x10
c0006b4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b52:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b58:	5b                   	pop    ebx
c0006b59:	5e                   	pop    esi
c0006b5a:	5f                   	pop    edi
c0006b5b:	5d                   	pop    ebp
c0006b5c:	c3                   	ret    

c0006b5d <f_chmod>:
c0006b5d:	57                   	push   edi
c0006b5e:	b9 02 00 00 00       	mov    ecx,0x2
c0006b63:	56                   	push   esi
c0006b64:	53                   	push   ebx
c0006b65:	83 ec 60             	sub    esp,0x60
c0006b68:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b6c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b70:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b74:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b78:	e8 55 bb ff ff       	call   c00026d2 <mount_volume>
c0006b7d:	85 c0                	test   eax,eax
c0006b7f:	0f 85 af 00 00 00    	jne    c0006c34 <f_chmod+0xd7>
c0006b85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b89:	83 ec 0c             	sub    esp,0xc
c0006b8c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b90:	68 60 04 00 00       	push   0x460
c0006b95:	e8 db 18 00 00       	call   c0008475 <ff_memalloc>
c0006b9a:	83 c4 10             	add    esp,0x10
c0006b9d:	89 c6                	mov    esi,eax
c0006b9f:	b8 11 00 00 00       	mov    eax,0x11
c0006ba4:	85 f6                	test   esi,esi
c0006ba6:	0f 84 88 00 00 00    	je     c0006c34 <f_chmod+0xd7>
c0006bac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bb6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bb9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bbc:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bc0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bc4:	e8 7f e2 ff ff       	call   c0004e48 <follow_path>
c0006bc9:	85 c0                	test   eax,eax
c0006bcb:	75 53                	jne    c0006c20 <f_chmod+0xc3>
c0006bcd:	b8 06 00 00 00       	mov    eax,0x6
c0006bd2:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bd7:	75 47                	jne    c0006c20 <f_chmod+0xc3>
c0006bd9:	89 f9                	mov    ecx,edi
c0006bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bdf:	83 e1 27             	and    ecx,0x27
c0006be2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006be5:	75 1d                	jne    c0006c04 <f_chmod+0xa7>
c0006be7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bea:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bed:	21 cb                	and    ebx,ecx
c0006bef:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bf2:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bf5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf9:	e8 a2 cf ff ff       	call   c0003ba0 <store_xdir>
c0006bfe:	85 c0                	test   eax,eax
c0006c00:	75 1e                	jne    c0006c20 <f_chmod+0xc3>
c0006c02:	eb 13                	jmp    c0006c17 <f_chmod+0xba>
c0006c04:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c08:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c0b:	21 cb                	and    ebx,ecx
c0006c0d:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c10:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c13:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c1b:	e8 2b d9 ff ff       	call   c000454b <sync_fs>
c0006c20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c24:	83 ec 0c             	sub    esp,0xc
c0006c27:	56                   	push   esi
c0006c28:	e8 5e 18 00 00       	call   c000848b <ff_memfree>
c0006c2d:	83 c4 10             	add    esp,0x10
c0006c30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c34:	83 c4 60             	add    esp,0x60
c0006c37:	5b                   	pop    ebx
c0006c38:	5e                   	pop    esi
c0006c39:	5f                   	pop    edi
c0006c3a:	c3                   	ret    

c0006c3b <f_utime>:
c0006c3b:	56                   	push   esi
c0006c3c:	b9 02 00 00 00       	mov    ecx,0x2
c0006c41:	53                   	push   ebx
c0006c42:	83 ec 64             	sub    esp,0x64
c0006c45:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c49:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c4d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c51:	e8 7c ba ff ff       	call   c00026d2 <mount_volume>
c0006c56:	85 c0                	test   eax,eax
c0006c58:	0f 85 b5 00 00 00    	jne    c0006d13 <f_utime+0xd8>
c0006c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c62:	83 ec 0c             	sub    esp,0xc
c0006c65:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c69:	68 60 04 00 00       	push   0x460
c0006c6e:	e8 02 18 00 00       	call   c0008475 <ff_memalloc>
c0006c73:	83 c4 10             	add    esp,0x10
c0006c76:	89 c3                	mov    ebx,eax
c0006c78:	b8 11 00 00 00       	mov    eax,0x11
c0006c7d:	85 db                	test   ebx,ebx
c0006c7f:	0f 84 8e 00 00 00    	je     c0006d13 <f_utime+0xd8>
c0006c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c89:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c8f:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c92:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c95:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c99:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c9d:	e8 a6 e1 ff ff       	call   c0004e48 <follow_path>
c0006ca2:	85 c0                	test   eax,eax
c0006ca4:	75 59                	jne    c0006cff <f_utime+0xc4>
c0006ca6:	b8 06 00 00 00       	mov    eax,0x6
c0006cab:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006cb0:	75 4d                	jne    c0006cff <f_utime+0xc4>
c0006cb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cb6:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cba:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cbe:	c1 e2 10             	shl    edx,0x10
c0006cc1:	09 ca                	or     edx,ecx
c0006cc3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cc6:	75 1a                	jne    c0006ce2 <f_utime+0xa7>
c0006cc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006ccb:	83 c0 0c             	add    eax,0xc
c0006cce:	e8 e5 af ff ff       	call   c0001cb8 <st_dword>
c0006cd3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cd7:	e8 c4 ce ff ff       	call   c0003ba0 <store_xdir>
c0006cdc:	85 c0                	test   eax,eax
c0006cde:	75 1f                	jne    c0006cff <f_utime+0xc4>
c0006ce0:	eb 14                	jmp    c0006cf6 <f_utime+0xbb>
c0006ce2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ce6:	83 c0 16             	add    eax,0x16
c0006ce9:	e8 ca af ff ff       	call   c0001cb8 <st_dword>
c0006cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cf2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cfa:	e8 4c d8 ff ff       	call   c000454b <sync_fs>
c0006cff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d03:	83 ec 0c             	sub    esp,0xc
c0006d06:	53                   	push   ebx
c0006d07:	e8 7f 17 00 00       	call   c000848b <ff_memfree>
c0006d0c:	83 c4 10             	add    esp,0x10
c0006d0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d13:	83 c4 64             	add    esp,0x64
c0006d16:	5b                   	pop    ebx
c0006d17:	5e                   	pop    esi
c0006d18:	c3                   	ret    

c0006d19 <f_getlabel>:
c0006d19:	55                   	push   ebp
c0006d1a:	31 c9                	xor    ecx,ecx
c0006d1c:	57                   	push   edi
c0006d1d:	56                   	push   esi
c0006d1e:	53                   	push   ebx
c0006d1f:	83 ec 6c             	sub    esp,0x6c
c0006d22:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d26:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d2d:	e8 a0 b9 ff ff       	call   c00026d2 <mount_volume>
c0006d32:	89 c6                	mov    esi,eax
c0006d34:	85 c0                	test   eax,eax
c0006d36:	0f 85 c1 01 00 00    	jne    c0006efd <f_getlabel+0x1e4>
c0006d3c:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d44:	0f 84 5f 01 00 00    	je     c0006ea9 <f_getlabel+0x190>
c0006d4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d4e:	31 d2                	xor    edx,edx
c0006d50:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d54:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d5c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d60:	e8 39 c4 ff ff       	call   c000319e <dir_sdi>
c0006d65:	85 c0                	test   eax,eax
c0006d67:	0f 85 2d 01 00 00    	jne    c0006e9a <f_getlabel+0x181>
c0006d6d:	ba 01 00 00 00       	mov    edx,0x1
c0006d72:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d76:	e8 33 cc ff ff       	call   c00039ae <dir_read>
c0006d7b:	85 c0                	test   eax,eax
c0006d7d:	0f 85 17 01 00 00    	jne    c0006e9a <f_getlabel+0x181>
c0006d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d87:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d8a:	74 09                	je     c0006d95 <f_getlabel+0x7c>
c0006d8c:	31 db                	xor    ebx,ebx
c0006d8e:	31 c9                	xor    ecx,ecx
c0006d90:	e9 c8 00 00 00       	jmp    c0006e5d <f_getlabel+0x144>
c0006d95:	31 ed                	xor    ebp,ebp
c0006d97:	31 db                	xor    ebx,ebx
c0006d99:	31 ff                	xor    edi,edi
c0006d9b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d9f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006da3:	39 fa                	cmp    edx,edi
c0006da5:	76 4b                	jbe    c0006df2 <f_getlabel+0xd9>
c0006da7:	47                   	inc    edi
c0006da8:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dab:	01 d0                	add    eax,edx
c0006dad:	e8 90 ae ff ff       	call   c0001c42 <ld_word>
c0006db2:	66 85 ed             	test   bp,bp
c0006db5:	75 0d                	jne    c0006dc4 <f_getlabel+0xab>
c0006db7:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006dbd:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006dc2:	76 28                	jbe    c0006dec <f_getlabel+0xd3>
c0006dc4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dcb:	89 e9                	mov    ecx,ebp
c0006dcd:	01 da                	add    edx,ebx
c0006dcf:	c1 e1 10             	shl    ecx,0x10
c0006dd2:	0f b7 c0             	movzx  eax,ax
c0006dd5:	09 c8                	or     eax,ecx
c0006dd7:	b9 04 00 00 00       	mov    ecx,0x4
c0006ddc:	e8 01 b0 ff ff       	call   c0001de2 <put_utf>
c0006de1:	84 c0                	test   al,al
c0006de3:	74 0b                	je     c0006df0 <f_getlabel+0xd7>
c0006de5:	0f b6 c0             	movzx  eax,al
c0006de8:	01 c3                	add    ebx,eax
c0006dea:	31 c0                	xor    eax,eax
c0006dec:	89 c5                	mov    ebp,eax
c0006dee:	eb ab                	jmp    c0006d9b <f_getlabel+0x82>
c0006df0:	31 db                	xor    ebx,ebx
c0006df2:	66 85 ed             	test   bp,bp
c0006df5:	74 02                	je     c0006df9 <f_getlabel+0xe0>
c0006df7:	31 db                	xor    ebx,ebx
c0006df9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e00:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e04:	e9 a0 00 00 00       	jmp    c0006ea9 <f_getlabel+0x190>
c0006e09:	83 ff 0b             	cmp    edi,0xb
c0006e0c:	74 11                	je     c0006e1f <f_getlabel+0x106>
c0006e0e:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e17:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e1a:	c1 e0 08             	shl    eax,0x8
c0006e1d:	09 c2                	or     edx,eax
c0006e1f:	0f b7 d2             	movzx  edx,dx
c0006e22:	50                   	push   eax
c0006e23:	50                   	push   eax
c0006e24:	68 b5 01 00 00       	push   0x1b5
c0006e29:	52                   	push   edx
c0006e2a:	e8 03 17 00 00       	call   c0008532 <ff_oem2uni>
c0006e2f:	83 c4 10             	add    esp,0x10
c0006e32:	66 85 c0             	test   ax,ax
c0006e35:	74 46                	je     c0006e7d <f_getlabel+0x164>
c0006e37:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e3e:	0f b7 c0             	movzx  eax,ax
c0006e41:	01 da                	add    edx,ebx
c0006e43:	b9 04 00 00 00       	mov    ecx,0x4
c0006e48:	e8 95 af ff ff       	call   c0001de2 <put_utf>
c0006e4d:	84 c0                	test   al,al
c0006e4f:	74 2c                	je     c0006e7d <f_getlabel+0x164>
c0006e51:	0f b6 c0             	movzx  eax,al
c0006e54:	01 c3                	add    ebx,eax
c0006e56:	83 ff 0b             	cmp    edi,0xb
c0006e59:	74 24                	je     c0006e7f <f_getlabel+0x166>
c0006e5b:	89 f9                	mov    ecx,edi
c0006e5d:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e61:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e64:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e69:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e72:	e8 9f ae ff ff       	call   c0001d16 <dbc_1st>
c0006e77:	85 c0                	test   eax,eax
c0006e79:	74 a4                	je     c0006e1f <f_getlabel+0x106>
c0006e7b:	eb 8c                	jmp    c0006e09 <f_getlabel+0xf0>
c0006e7d:	31 db                	xor    ebx,ebx
c0006e7f:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e86:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e89:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e90:	74 17                	je     c0006ea9 <f_getlabel+0x190>
c0006e92:	4b                   	dec    ebx
c0006e93:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e96:	74 ee                	je     c0006e86 <f_getlabel+0x16d>
c0006e98:	eb 0f                	jmp    c0006ea9 <f_getlabel+0x190>
c0006e9a:	83 f8 04             	cmp    eax,0x4
c0006e9d:	75 5c                	jne    c0006efb <f_getlabel+0x1e2>
c0006e9f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ea6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ea9:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006eb1:	74 4a                	je     c0006efd <f_getlabel+0x1e4>
c0006eb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006eb7:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006eba:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ebd:	e8 5e b5 ff ff       	call   c0002420 <move_window>
c0006ec2:	89 c6                	mov    esi,eax
c0006ec4:	85 c0                	test   eax,eax
c0006ec6:	75 35                	jne    c0006efd <f_getlabel+0x1e4>
c0006ec8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ecc:	b8 43 00 00 00       	mov    eax,0x43
c0006ed1:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ed3:	80 f9 03             	cmp    cl,0x3
c0006ed6:	74 0f                	je     c0006ee7 <f_getlabel+0x1ce>
c0006ed8:	31 c0                	xor    eax,eax
c0006eda:	80 f9 04             	cmp    cl,0x4
c0006edd:	0f 94 c0             	sete   al
c0006ee0:	48                   	dec    eax
c0006ee1:	83 e0 c3             	and    eax,0xffffffc3
c0006ee4:	83 c0 64             	add    eax,0x64
c0006ee7:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006eeb:	e8 5f ad ff ff       	call   c0001c4f <ld_dword>
c0006ef0:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006ef7:	89 07                	mov    DWORD PTR [edi],eax
c0006ef9:	eb 02                	jmp    c0006efd <f_getlabel+0x1e4>
c0006efb:	89 c6                	mov    esi,eax
c0006efd:	83 c4 6c             	add    esp,0x6c
c0006f00:	89 f0                	mov    eax,esi
c0006f02:	5b                   	pop    ebx
c0006f03:	5e                   	pop    esi
c0006f04:	5f                   	pop    edi
c0006f05:	5d                   	pop    ebp
c0006f06:	c3                   	ret    

c0006f07 <f_setlabel>:
c0006f07:	56                   	push   esi
c0006f08:	b9 02 00 00 00       	mov    ecx,0x2
c0006f0d:	53                   	push   ebx
c0006f0e:	83 ec 74             	sub    esp,0x74
c0006f11:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f15:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f1c:	e8 b1 b7 ff ff       	call   c00026d2 <mount_volume>
c0006f21:	89 c6                	mov    esi,eax
c0006f23:	85 c0                	test   eax,eax
c0006f25:	0f 85 41 02 00 00    	jne    c000716c <f_setlabel+0x265>
c0006f2b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f2f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f32:	0f 85 8e 00 00 00    	jne    c0006fc6 <f_setlabel+0xbf>
c0006f38:	b9 16 00 00 00       	mov    ecx,0x16
c0006f3d:	31 d2                	xor    edx,edx
c0006f3f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f43:	31 db                	xor    ebx,ebx
c0006f45:	e8 8c ad ff ff       	call   c0001cd6 <mem_set>
c0006f4a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f51:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f54:	0f 86 0a 01 00 00    	jbe    c0007064 <f_setlabel+0x15d>
c0006f5a:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f61:	e8 b6 ad ff ff       	call   c0001d1c <tchar2uni>
c0006f66:	89 c6                	mov    esi,eax
c0006f68:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f6d:	76 2a                	jbe    c0006f99 <f_setlabel+0x92>
c0006f6f:	83 f8 ff             	cmp    eax,0xffffffff
c0006f72:	74 05                	je     c0006f79 <f_setlabel+0x72>
c0006f74:	83 fb 09             	cmp    ebx,0x9
c0006f77:	76 0a                	jbe    c0006f83 <f_setlabel+0x7c>
c0006f79:	be 06 00 00 00       	mov    esi,0x6
c0006f7e:	e9 e9 01 00 00       	jmp    c000716c <f_setlabel+0x265>
c0006f83:	89 c2                	mov    edx,eax
c0006f85:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f89:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f8c:	c1 ea 10             	shr    edx,0x10
c0006f8f:	01 c8                	add    eax,ecx
c0006f91:	43                   	inc    ebx
c0006f92:	e8 1d ad ff ff       	call   c0001cb4 <st_word>
c0006f97:	eb 04                	jmp    c0006f9d <f_setlabel+0x96>
c0006f99:	85 c0                	test   eax,eax
c0006f9b:	74 dc                	je     c0006f79 <f_setlabel+0x72>
c0006f9d:	89 f2                	mov    edx,esi
c0006f9f:	b8 37 9d 02 c0       	mov    eax,0xc0029d37
c0006fa4:	e8 5b ad ff ff       	call   c0001d04 <chk_chr>
c0006fa9:	85 c0                	test   eax,eax
c0006fab:	75 cc                	jne    c0006f79 <f_setlabel+0x72>
c0006fad:	83 fb 0a             	cmp    ebx,0xa
c0006fb0:	77 c7                	ja     c0006f79 <f_setlabel+0x72>
c0006fb2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fb5:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fb9:	0f b7 d6             	movzx  edx,si
c0006fbc:	01 c8                	add    eax,ecx
c0006fbe:	43                   	inc    ebx
c0006fbf:	e8 f0 ac ff ff       	call   c0001cb4 <st_word>
c0006fc4:	eb 84                	jmp    c0006f4a <f_setlabel+0x43>
c0006fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fcb:	ba 20 00 00 00       	mov    edx,0x20
c0006fd0:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fd4:	31 db                	xor    ebx,ebx
c0006fd6:	e8 fb ac ff ff       	call   c0001cd6 <mem_set>
c0006fdb:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fe2:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fe5:	76 60                	jbe    c0007047 <f_setlabel+0x140>
c0006fe7:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fee:	e8 29 ad ff ff       	call   c0001d1c <tchar2uni>
c0006ff3:	3d ff ff 00 00       	cmp    eax,0xffff
c0006ff8:	0f 87 7b ff ff ff    	ja     c0006f79 <f_setlabel+0x72>
c0006ffe:	83 ec 0c             	sub    esp,0xc
c0007001:	50                   	push   eax
c0007002:	e8 97 15 00 00       	call   c000859e <ff_wtoupper>
c0007007:	5a                   	pop    edx
c0007008:	59                   	pop    ecx
c0007009:	68 b5 01 00 00       	push   0x1b5
c000700e:	50                   	push   eax
c000700f:	e8 8e 14 00 00       	call   c00084a2 <ff_uni2oem>
c0007014:	83 c4 10             	add    esp,0x10
c0007017:	89 c6                	mov    esi,eax
c0007019:	66 85 c0             	test   ax,ax
c000701c:	0f 84 57 ff ff ff    	je     c0006f79 <f_setlabel+0x72>
c0007022:	0f b7 d0             	movzx  edx,ax
c0007025:	b8 30 9d 02 c0       	mov    eax,0xc0029d30
c000702a:	e8 d5 ac ff ff       	call   c0001d04 <chk_chr>
c000702f:	85 c0                	test   eax,eax
c0007031:	0f 85 42 ff ff ff    	jne    c0006f79 <f_setlabel+0x72>
c0007037:	66 81 fe ff 00       	cmp    si,0xff
c000703c:	0f 87 14 01 00 00    	ja     c0007156 <f_setlabel+0x24f>
c0007042:	e9 fa 00 00 00       	jmp    c0007141 <f_setlabel+0x23a>
c0007047:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000704c:	0f 84 27 ff ff ff    	je     c0006f79 <f_setlabel+0x72>
c0007052:	85 db                	test   ebx,ebx
c0007054:	74 0e                	je     c0007064 <f_setlabel+0x15d>
c0007056:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007059:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000705e:	75 04                	jne    c0007064 <f_setlabel+0x15d>
c0007060:	89 c3                	mov    ebx,eax
c0007062:	eb ee                	jmp    c0007052 <f_setlabel+0x14b>
c0007064:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007068:	31 d2                	xor    edx,edx
c000706a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000706e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007076:	8d 44 24 24          	lea    eax,[esp+0x24]
c000707a:	e8 1f c1 ff ff       	call   c000319e <dir_sdi>
c000707f:	89 c6                	mov    esi,eax
c0007081:	85 c0                	test   eax,eax
c0007083:	0f 85 e3 00 00 00    	jne    c000716c <f_setlabel+0x265>
c0007089:	ba 01 00 00 00       	mov    edx,0x1
c000708e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007092:	e8 17 c9 ff ff       	call   c00039ae <dir_read>
c0007097:	85 c0                	test   eax,eax
c0007099:	75 21                	jne    c00070bc <f_setlabel+0x1b5>
c000709b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000709f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070a3:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070a6:	74 5d                	je     c0007105 <f_setlabel+0x1fe>
c00070a8:	85 db                	test   ebx,ebx
c00070aa:	74 0b                	je     c00070b7 <f_setlabel+0x1b0>
c00070ac:	b9 0b 00 00 00       	mov    ecx,0xb
c00070b1:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070b5:	eb 70                	jmp    c0007127 <f_setlabel+0x220>
c00070b7:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070ba:	eb 70                	jmp    c000712c <f_setlabel+0x225>
c00070bc:	83 f8 04             	cmp    eax,0x4
c00070bf:	75 7c                	jne    c000713d <f_setlabel+0x236>
c00070c1:	85 db                	test   ebx,ebx
c00070c3:	0f 84 a3 00 00 00    	je     c000716c <f_setlabel+0x265>
c00070c9:	ba 01 00 00 00       	mov    edx,0x1
c00070ce:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070d2:	e8 51 ca ff ff       	call   c0003b28 <dir_alloc>
c00070d7:	89 c6                	mov    esi,eax
c00070d9:	85 c0                	test   eax,eax
c00070db:	0f 85 8b 00 00 00    	jne    c000716c <f_setlabel+0x265>
c00070e1:	31 d2                	xor    edx,edx
c00070e3:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e7:	b9 20 00 00 00       	mov    ecx,0x20
c00070ec:	e8 e5 ab ff ff       	call   c0001cd6 <mem_set>
c00070f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070f5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070f8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070fc:	75 18                	jne    c0007116 <f_setlabel+0x20f>
c00070fe:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007101:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007105:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007108:	b9 16 00 00 00       	mov    ecx,0x16
c000710d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007111:	83 c0 02             	add    eax,0x2
c0007114:	eb 9b                	jmp    c00070b1 <f_setlabel+0x1aa>
c0007116:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000711a:	b9 0b 00 00 00       	mov    ecx,0xb
c000711f:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007123:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007127:	e8 95 ab ff ff       	call   c0001cc1 <mem_cpy>
c000712c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007130:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007134:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007138:	e8 0e d4 ff ff       	call   c000454b <sync_fs>
c000713d:	89 c6                	mov    esi,eax
c000713f:	eb 2b                	jmp    c000716c <f_setlabel+0x265>
c0007141:	83 fb 0a             	cmp    ebx,0xa
c0007144:	0f 87 2f fe ff ff    	ja     c0006f79 <f_setlabel+0x72>
c000714a:	89 f0                	mov    eax,esi
c000714c:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007150:	43                   	inc    ebx
c0007151:	e9 85 fe ff ff       	jmp    c0006fdb <f_setlabel+0xd4>
c0007156:	83 fb 09             	cmp    ebx,0x9
c0007159:	0f 87 1a fe ff ff    	ja     c0006f79 <f_setlabel+0x72>
c000715f:	89 f0                	mov    eax,esi
c0007161:	66 c1 e8 08          	shr    ax,0x8
c0007165:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007169:	43                   	inc    ebx
c000716a:	eb de                	jmp    c000714a <f_setlabel+0x243>
c000716c:	89 f0                	mov    eax,esi
c000716e:	83 c4 74             	add    esp,0x74
c0007171:	5b                   	pop    ebx
c0007172:	5e                   	pop    esi
c0007173:	c3                   	ret    

c0007174 <f_forward>:
c0007174:	55                   	push   ebp
c0007175:	57                   	push   edi
c0007176:	56                   	push   esi
c0007177:	53                   	push   ebx
c0007178:	83 ec 2c             	sub    esp,0x2c
c000717b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000717f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007183:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007189:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000718d:	89 d8                	mov    eax,ebx
c000718f:	e8 b1 b1 ff ff       	call   c0002345 <validate>
c0007194:	89 c5                	mov    ebp,eax
c0007196:	85 c0                	test   eax,eax
c0007198:	0f 85 aa 01 00 00    	jne    c0007348 <f_forward+0x1d4>
c000719e:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071a2:	85 ed                	test   ebp,ebp
c00071a4:	0f 85 9e 01 00 00    	jne    c0007348 <f_forward+0x1d4>
c00071aa:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071ae:	0f 84 8f 01 00 00    	je     c0007343 <f_forward+0x1cf>
c00071b4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071b7:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071ba:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071bd:	bf 00 00 00 00       	mov    edi,0x0
c00071c2:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071c5:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071c9:	89 d1                	mov    ecx,edx
c00071cb:	19 f9                	sbb    ecx,edi
c00071cd:	0f 83 cf 00 00 00    	jae    c00072a2 <f_forward+0x12e>
c00071d3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071d7:	e9 c6 00 00 00       	jmp    c00072a2 <f_forward+0x12e>
c00071dc:	50                   	push   eax
c00071dd:	50                   	push   eax
c00071de:	6a 00                	push   0x0
c00071e0:	6a 00                	push   0x0
c00071e2:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071e6:	83 c4 10             	add    esp,0x10
c00071e9:	85 c0                	test   eax,eax
c00071eb:	0f 84 57 01 00 00    	je     c0007348 <f_forward+0x1d4>
c00071f1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071f4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071f8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071fb:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071ff:	89 d7                	mov    edi,edx
c0007201:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007204:	89 c6                	mov    esi,eax
c0007206:	0f ac fe 09          	shrd   esi,edi,0x9
c000720a:	21 ce                	and    esi,ecx
c000720c:	89 c1                	mov    ecx,eax
c000720e:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007214:	0f 84 98 00 00 00    	je     c00072b2 <f_forward+0x13e>
c000721a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000721e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007221:	89 c8                	mov    eax,ecx
c0007223:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007227:	e8 af ac ff ff       	call   c0001edb <clst2sect>
c000722c:	89 d7                	mov    edi,edx
c000722e:	09 c7                	or     edi,eax
c0007230:	0f 84 9e 00 00 00    	je     c00072d4 <f_forward+0x160>
c0007236:	31 ff                	xor    edi,edi
c0007238:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000723b:	01 c6                	add    esi,eax
c000723d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007241:	11 d7                	adc    edi,edx
c0007243:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007246:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007249:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000724d:	39 fa                	cmp    edx,edi
c000724f:	0f 85 a2 00 00 00    	jne    c00072f7 <f_forward+0x183>
c0007255:	39 f0                	cmp    eax,esi
c0007257:	0f 85 9a 00 00 00    	jne    c00072f7 <f_forward+0x183>
c000725d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007260:	ba 00 02 00 00       	mov    edx,0x200
c0007265:	25 ff 01 00 00       	and    eax,0x1ff
c000726a:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000726e:	29 c2                	sub    edx,eax
c0007270:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007273:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007276:	39 d1                	cmp    ecx,edx
c0007278:	76 02                	jbe    c000727c <f_forward+0x108>
c000727a:	89 d1                	mov    ecx,edx
c000727c:	8d 73 50             	lea    esi,[ebx+0x50]
c000727f:	52                   	push   edx
c0007280:	01 c6                	add    esi,eax
c0007282:	52                   	push   edx
c0007283:	51                   	push   ecx
c0007284:	56                   	push   esi
c0007285:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007289:	83 c4 10             	add    esp,0x10
c000728c:	85 c0                	test   eax,eax
c000728e:	74 44                	je     c00072d4 <f_forward+0x160>
c0007290:	31 ff                	xor    edi,edi
c0007292:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007295:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007298:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000729c:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072a0:	01 07                	add    DWORD PTR [edi],eax
c00072a2:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072a7:	0f 85 2f ff ff ff    	jne    c00071dc <f_forward+0x68>
c00072ad:	e9 96 00 00 00       	jmp    c0007348 <f_forward+0x1d4>
c00072b2:	85 f6                	test   esi,esi
c00072b4:	0f 85 60 ff ff ff    	jne    c000721a <f_forward+0xa6>
c00072ba:	89 d7                	mov    edi,edx
c00072bc:	09 c7                	or     edi,eax
c00072be:	75 05                	jne    c00072c5 <f_forward+0x151>
c00072c0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072c3:	eb 0a                	jmp    c00072cf <f_forward+0x15b>
c00072c5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072c8:	89 d8                	mov    eax,ebx
c00072ca:	e8 d9 bc ff ff       	call   c0002fa8 <get_fat>
c00072cf:	83 f8 01             	cmp    eax,0x1
c00072d2:	77 0b                	ja     c00072df <f_forward+0x16b>
c00072d4:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072d8:	bd 02 00 00 00       	mov    ebp,0x2
c00072dd:	eb 69                	jmp    c0007348 <f_forward+0x1d4>
c00072df:	83 f8 ff             	cmp    eax,0xffffffff
c00072e2:	75 0b                	jne    c00072ef <f_forward+0x17b>
c00072e4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072e8:	bd 01 00 00 00       	mov    ebp,0x1
c00072ed:	eb 59                	jmp    c0007348 <f_forward+0x1d4>
c00072ef:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072f2:	e9 23 ff ff ff       	jmp    c000721a <f_forward+0xa6>
c00072f7:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072fb:	79 20                	jns    c000731d <f_forward+0x1a9>
c00072fd:	83 ec 0c             	sub    esp,0xc
c0007300:	6a 01                	push   0x1
c0007302:	52                   	push   edx
c0007303:	50                   	push   eax
c0007304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007308:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000730c:	50                   	push   eax
c000730d:	e8 fb a8 ff ff       	call   c0001c0d <disk_write>
c0007312:	83 c4 20             	add    esp,0x20
c0007315:	85 c0                	test   eax,eax
c0007317:	75 cb                	jne    c00072e4 <f_forward+0x170>
c0007319:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000731d:	83 ec 0c             	sub    esp,0xc
c0007320:	6a 01                	push   0x1
c0007322:	57                   	push   edi
c0007323:	56                   	push   esi
c0007324:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007328:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000732c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007330:	50                   	push   eax
c0007331:	e8 c1 a8 ff ff       	call   c0001bf7 <disk_read>
c0007336:	83 c4 20             	add    esp,0x20
c0007339:	85 c0                	test   eax,eax
c000733b:	0f 84 1c ff ff ff    	je     c000725d <f_forward+0xe9>
c0007341:	eb a1                	jmp    c00072e4 <f_forward+0x170>
c0007343:	bd 07 00 00 00       	mov    ebp,0x7
c0007348:	83 c4 2c             	add    esp,0x2c
c000734b:	89 e8                	mov    eax,ebp
c000734d:	5b                   	pop    ebx
c000734e:	5e                   	pop    esi
c000734f:	5f                   	pop    edi
c0007350:	5d                   	pop    ebp
c0007351:	c3                   	ret    

c0007352 <f_mkfs>:
c0007352:	55                   	push   ebp
c0007353:	57                   	push   edi
c0007354:	56                   	push   esi
c0007355:	53                   	push   ebx
c0007356:	bb 0b 00 00 00       	mov    ebx,0xb
c000735b:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007361:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007368:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000736f:	e8 b0 ae ff ff       	call   c0002224 <get_ldnumber>
c0007374:	85 c0                	test   eax,eax
c0007376:	0f 88 ec 10 00 00    	js     c0008468 <f_mkfs+0x1116>
c000737c:	8b 14 85 80 ee 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1180]
c0007383:	85 d2                	test   edx,edx
c0007385:	74 03                	je     c000738a <f_mkfs+0x38>
c0007387:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000738a:	85 f6                	test   esi,esi
c000738c:	75 05                	jne    c0007393 <f_mkfs+0x41>
c000738e:	be 20 9d 02 c0       	mov    esi,0xc0029d20
c0007393:	83 ec 0c             	sub    esp,0xc
c0007396:	0f b6 c0             	movzx  eax,al
c0007399:	bb 03 00 00 00       	mov    ebx,0x3
c000739e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073a6:	e8 49 a8 ff ff       	call   c0001bf4 <disk_initialize>
c00073ab:	83 c4 10             	add    esp,0x10
c00073ae:	a8 01                	test   al,0x1
c00073b0:	0f 85 b2 10 00 00    	jne    c0008468 <f_mkfs+0x1116>
c00073b6:	bb 0a 00 00 00       	mov    ebx,0xa
c00073bb:	a8 04                	test   al,0x4
c00073bd:	0f 85 a5 10 00 00    	jne    c0008468 <f_mkfs+0x1116>
c00073c3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073c6:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073ca:	85 c0                	test   eax,eax
c00073cc:	75 20                	jne    c00073ee <f_mkfs+0x9c>
c00073ce:	51                   	push   ecx
c00073cf:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073d3:	50                   	push   eax
c00073d4:	6a 03                	push   0x3
c00073d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073da:	e8 44 a8 ff ff       	call   c0001c23 <disk_ioctl>
c00073df:	83 c4 10             	add    esp,0x10
c00073e2:	85 c0                	test   eax,eax
c00073e4:	74 08                	je     c00073ee <f_mkfs+0x9c>
c00073e6:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ee:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073f2:	8d 42 ff             	lea    eax,[edx-0x1]
c00073f5:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073fa:	77 04                	ja     c0007400 <f_mkfs+0xae>
c00073fc:	85 c2                	test   edx,eax
c00073fe:	74 08                	je     c0007408 <f_mkfs+0xb6>
c0007400:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007408:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000740b:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000740f:	48                   	dec    eax
c0007410:	3c 01                	cmp    al,0x1
c0007412:	76 05                	jbe    c0007419 <f_mkfs+0xc7>
c0007414:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007419:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000741c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007420:	48                   	dec    eax
c0007421:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007426:	77 07                	ja     c000742f <f_mkfs+0xdd>
c0007428:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000742d:	74 08                	je     c0007437 <f_mkfs+0xe5>
c000742f:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007437:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000743a:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007440:	77 07                	ja     c0007449 <f_mkfs+0xf7>
c0007442:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007445:	85 d8                	test   eax,ebx
c0007447:	74 02                	je     c000744b <f_mkfs+0xf9>
c0007449:	31 db                	xor    ebx,ebx
c000744b:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007456:	77 0a                	ja     c0007462 <f_mkfs+0x110>
c0007458:	bb 11 00 00 00       	mov    ebx,0x11
c000745d:	e9 06 10 00 00       	jmp    c0008468 <f_mkfs+0x1116>
c0007462:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007469:	8b 36                	mov    esi,DWORD PTR [esi]
c000746b:	85 ed                	test   ebp,ebp
c000746d:	75 1e                	jne    c000748d <f_mkfs+0x13b>
c000746f:	83 ec 0c             	sub    esp,0xc
c0007472:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007479:	25 00 fe ff ff       	and    eax,0xfffffe00
c000747e:	50                   	push   eax
c000747f:	e8 f1 0f 00 00       	call   c0008475 <ff_memalloc>
c0007484:	83 c4 10             	add    esp,0x10
c0007487:	89 c5                	mov    ebp,eax
c0007489:	85 c0                	test   eax,eax
c000748b:	74 cb                	je     c0007458 <f_mkfs+0x106>
c000748d:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007495:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000749d:	52                   	push   edx
c000749e:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074a2:	50                   	push   eax
c00074a3:	6a 01                	push   0x1
c00074a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a9:	e8 75 a7 ff ff       	call   c0001c23 <disk_ioctl>
c00074ae:	83 c4 10             	add    esp,0x10
c00074b1:	85 c0                	test   eax,eax
c00074b3:	0f 85 4a 0f 00 00    	jne    c0008403 <f_mkfs+0x10b1>
c00074b9:	89 f1                	mov    ecx,esi
c00074bb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074c3:	83 e1 0f             	and    ecx,0xf
c00074c6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ce:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074d2:	83 e6 08             	and    esi,0x8
c00074d5:	75 56                	jne    c000752d <f_mkfs+0x1db>
c00074d7:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074db:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074df:	83 ff 00             	cmp    edi,0x0
c00074e2:	76 20                	jbe    c0007504 <f_mkfs+0x1b2>
c00074e4:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074e9:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074f1:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074f7:	83 d7 ff             	adc    edi,0xffffffff
c00074fa:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074fe:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007502:	eb 21                	jmp    c0007525 <f_mkfs+0x1d3>
c0007504:	ba 3f 00 00 00       	mov    edx,0x3f
c0007509:	39 f2                	cmp    edx,esi
c000750b:	19 f8                	sbb    eax,edi
c000750d:	73 1e                	jae    c000752d <f_mkfs+0x1db>
c000750f:	83 c6 c1             	add    esi,0xffffffc1
c0007512:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000751a:	83 d7 ff             	adc    edi,0xffffffff
c000751d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007521:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007525:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000752d:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007531:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007535:	89 04 24             	mov    DWORD PTR [esp],eax
c0007538:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000753c:	31 c0                	xor    eax,eax
c000753e:	ba 7f 00 00 00       	mov    edx,0x7f
c0007543:	89 c7                	mov    edi,eax
c0007545:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007548:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000754c:	0f 83 c5 0a 00 00    	jae    c0008017 <f_mkfs+0xcc5>
c0007552:	89 df                	mov    edi,ebx
c0007554:	c1 ef 09             	shr    edi,0x9
c0007557:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000755b:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007562:	c1 ef 09             	shr    edi,0x9
c0007565:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000756a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000756e:	74 29                	je     c0007599 <f_mkfs+0x247>
c0007570:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007576:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000757b:	0f 97 c2             	seta   dl
c000757e:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007581:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007585:	0f 92 c0             	setb   al
c0007588:	08 c2                	or     dl,al
c000758a:	75 5b                	jne    c00075e7 <f_mkfs+0x295>
c000758c:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007590:	83 e0 07             	and    eax,0x7
c0007593:	3c 04                	cmp    al,0x4
c0007595:	74 50                	je     c00075e7 <f_mkfs+0x295>
c0007597:	eb 1b                	jmp    c00075b4 <f_mkfs+0x262>
c0007599:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000759e:	0f 87 73 0a 00 00    	ja     c0008017 <f_mkfs+0xcc5>
c00075a4:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075aa:	76 08                	jbe    c00075b4 <f_mkfs+0x262>
c00075ac:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075b4:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075b8:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075bc:	83 e0 01             	and    eax,0x1
c00075bf:	80 e1 02             	and    cl,0x2
c00075c2:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075c6:	74 0d                	je     c00075d5 <f_mkfs+0x283>
c00075c8:	84 c0                	test   al,al
c00075ca:	0f 84 53 09 00 00    	je     c0007f23 <f_mkfs+0xbd1>
c00075d0:	e9 12 08 00 00       	jmp    c0007de7 <f_mkfs+0xa95>
c00075d5:	bb 13 00 00 00       	mov    ebx,0x13
c00075da:	84 c0                	test   al,al
c00075dc:	0f 85 05 08 00 00    	jne    c0007de7 <f_mkfs+0xa95>
c00075e2:	e9 39 0e 00 00       	jmp    c0008420 <f_mkfs+0x10ce>
c00075e7:	31 c0                	xor    eax,eax
c00075e9:	ba ff 0f 00 00       	mov    edx,0xfff
c00075ee:	89 c7                	mov    edi,eax
c00075f0:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075f3:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075f7:	0f 83 1a 0a 00 00    	jae    c0008017 <f_mkfs+0xcc5>
c00075fd:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007603:	77 39                	ja     c000763e <f_mkfs+0x2ec>
c0007605:	ba ff ff 07 00       	mov    edx,0x7ffff
c000760a:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007612:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2d1>
c000761b:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007623:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007628:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000762b:	b8 00 00 00 00       	mov    eax,0x0
c0007630:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007634:	73 08                	jae    c000763e <f_mkfs+0x2ec>
c0007636:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000763e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007642:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007646:	83 c0 20             	add    eax,0x20
c0007649:	83 d2 00             	adc    edx,0x0
c000764c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007650:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007654:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007658:	31 d2                	xor    edx,edx
c000765a:	31 ff                	xor    edi,edi
c000765c:	52                   	push   edx
c000765d:	89 fb                	mov    ebx,edi
c000765f:	50                   	push   eax
c0007660:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007664:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007668:	e8 f7 fb 01 00       	call   c0027264 <__udivdi3>
c000766d:	83 c4 10             	add    esp,0x10
c0007670:	c1 e0 02             	shl    eax,0x2
c0007673:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007677:	05 07 02 00 00       	add    eax,0x207
c000767c:	89 f1                	mov    ecx,esi
c000767e:	c1 e8 09             	shr    eax,0x9
c0007681:	83 c1 ff             	add    ecx,0xffffffff
c0007684:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007688:	83 d3 ff             	adc    ebx,0xffffffff
c000768b:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000768f:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007693:	31 d2                	xor    edx,edx
c0007695:	01 c8                	add    eax,ecx
c0007697:	11 da                	adc    edx,ebx
c0007699:	89 c1                	mov    ecx,eax
c000769b:	f7 de                	neg    esi
c000769d:	89 d0                	mov    eax,edx
c000769f:	83 d7 00             	adc    edi,0x0
c00076a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076a6:	f7 df                	neg    edi
c00076a8:	21 f1                	and    ecx,esi
c00076aa:	21 f8                	and    eax,edi
c00076ac:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076b4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076bc:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076c3:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076c7:	0f ac d0 01          	shrd   eax,edx,0x1
c00076cb:	89 df                	mov    edi,ebx
c00076cd:	d1 ea                	shr    edx,1
c00076cf:	39 c1                	cmp    ecx,eax
c00076d1:	19 d7                	sbb    edi,edx
c00076d3:	0f 83 3e 09 00 00    	jae    c0008017 <f_mkfs+0xcc5>
c00076d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076dd:	31 d2                	xor    edx,edx
c00076df:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076e7:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076eb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076ee:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076f2:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076f6:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076fa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076fe:	83 f8 0f             	cmp    eax,0xf
c0007701:	0f 86 10 09 00 00    	jbe    c0008017 <f_mkfs+0xcc5>
c0007707:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000770f:	0f 87 02 09 00 00    	ja     c0008017 <f_mkfs+0xcc5>
c0007715:	31 d2                	xor    edx,edx
c0007717:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000771b:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007723:	83 c0 07             	add    eax,0x7
c0007726:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000772e:	c1 e8 03             	shr    eax,0x3
c0007731:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007738:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000773c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007740:	c1 e0 09             	shl    eax,0x9
c0007743:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007747:	48                   	dec    eax
c0007748:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000774c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007750:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007754:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007758:	31 d2                	xor    edx,edx
c000775a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000775e:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007765:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007769:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000776e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007772:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007776:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000777a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000777e:	31 ff                	xor    edi,edi
c0007780:	31 f6                	xor    esi,esi
c0007782:	31 db                	xor    ebx,ebx
c0007784:	85 ff                	test   edi,edi
c0007786:	74 05                	je     c000778d <f_mkfs+0x43b>
c0007788:	4f                   	dec    edi
c0007789:	74 44                	je     c00077cf <f_mkfs+0x47d>
c000778b:	eb 4f                	jmp    c00077dc <f_mkfs+0x48a>
c000778d:	83 ec 0c             	sub    esp,0xc
c0007790:	0f b7 c3             	movzx  eax,bx
c0007793:	50                   	push   eax
c0007794:	e8 05 0e 00 00       	call   c000859e <ff_wtoupper>
c0007799:	83 c4 10             	add    esp,0x10
c000779c:	89 c1                	mov    ecx,eax
c000779e:	8d 53 01             	lea    edx,[ebx+0x1]
c00077a1:	66 39 c3             	cmp    bx,ax
c00077a4:	75 3e                	jne    c00077e4 <f_mkfs+0x492>
c00077a6:	be 01 00 00 00       	mov    esi,0x1
c00077ab:	89 df                	mov    edi,ebx
c00077ad:	66 01 f7             	add    di,si
c00077b0:	75 07                	jne    c00077b9 <f_mkfs+0x467>
c00077b2:	83 fe 7f             	cmp    esi,0x7f
c00077b5:	77 31                	ja     c00077e8 <f_mkfs+0x496>
c00077b7:	eb 16                	jmp    c00077cf <f_mkfs+0x47d>
c00077b9:	83 ec 0c             	sub    esp,0xc
c00077bc:	0f b7 ff             	movzx  edi,di
c00077bf:	57                   	push   edi
c00077c0:	e8 d9 0d 00 00       	call   c000859e <ff_wtoupper>
c00077c5:	83 c4 10             	add    esp,0x10
c00077c8:	39 c7                	cmp    edi,eax
c00077ca:	75 e6                	jne    c00077b2 <f_mkfs+0x460>
c00077cc:	46                   	inc    esi
c00077cd:	eb dc                	jmp    c00077ab <f_mkfs+0x459>
c00077cf:	31 c0                	xor    eax,eax
c00077d1:	89 d9                	mov    ecx,ebx
c00077d3:	4e                   	dec    esi
c00077d4:	0f 95 c0             	setne  al
c00077d7:	43                   	inc    ebx
c00077d8:	89 c7                	mov    edi,eax
c00077da:	eb 14                	jmp    c00077f0 <f_mkfs+0x49e>
c00077dc:	89 f1                	mov    ecx,esi
c00077de:	01 f3                	add    ebx,esi
c00077e0:	31 ff                	xor    edi,edi
c00077e2:	eb 0c                	jmp    c00077f0 <f_mkfs+0x49e>
c00077e4:	89 d3                	mov    ebx,edx
c00077e6:	eb 08                	jmp    c00077f0 <f_mkfs+0x49e>
c00077e8:	bf 02 00 00 00       	mov    edi,0x2
c00077ed:	83 c9 ff             	or     ecx,0xffffffff
c00077f0:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077f4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f7:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077fb:	0f b6 c1             	movzx  eax,cl
c00077fe:	e8 3a a9 ff ff       	call   c000213d <xsum32>
c0007803:	66 c1 e9 08          	shr    cx,0x8
c0007807:	89 c2                	mov    edx,eax
c0007809:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780c:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007810:	0f b7 c1             	movzx  eax,cx
c0007813:	e8 25 a9 ff ff       	call   c000213d <xsum32>
c0007818:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000781d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007821:	66 85 db             	test   bx,bx
c0007824:	74 1f                	je     c0007845 <f_mkfs+0x4f3>
c0007826:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007829:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007830:	83 c0 02             	add    eax,0x2
c0007833:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007839:	39 c2                	cmp    edx,eax
c000783b:	74 08                	je     c0007845 <f_mkfs+0x4f3>
c000783d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007840:	e9 3f ff ff ff       	jmp    c0007784 <f_mkfs+0x432>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	83 ec 0c             	sub    esp,0xc
c000784b:	05 01 02 00 00       	add    eax,0x201
c0007850:	c1 e8 09             	shr    eax,0x9
c0007853:	50                   	push   eax
c0007854:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007858:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000785c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007860:	55                   	push   ebp
c0007861:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007865:	e8 a3 a3 ff ff       	call   c0001c0d <disk_write>
c000786a:	83 c4 20             	add    esp,0x20
c000786d:	85 c0                	test   eax,eax
c000786f:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007872:	0f 85 8b 0b 00 00    	jne    c0008403 <f_mkfs+0x10b1>
c0007878:	89 d0                	mov    eax,edx
c000787a:	31 d2                	xor    edx,edx
c000787c:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007880:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007884:	66 85 db             	test   bx,bx
c0007887:	74 04                	je     c000788d <f_mkfs+0x53b>
c0007889:	31 c0                	xor    eax,eax
c000788b:	eb b0                	jmp    c000783d <f_mkfs+0x4eb>
c000788d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007891:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007895:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007899:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c000789f:	31 d2                	xor    edx,edx
c00078a1:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078ac:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078b0:	c1 eb 09             	shr    ebx,0x9
c00078b3:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078be:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078c2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078c6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078ca:	8d 70 01             	lea    esi,[eax+0x1]
c00078cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078d5:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078dc:	31 d2                	xor    edx,edx
c00078de:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00078e6:	89 c1                	mov    ecx,eax
c00078e8:	89 e8                	mov    eax,ebp
c00078ea:	e8 e7 a3 ff ff       	call   c0001cd6 <mem_set>
c00078ef:	31 c0                	xor    eax,eax
c00078f1:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f4:	76 10                	jbe    c0007906 <f_mkfs+0x5b4>
c00078f6:	83 fe 07             	cmp    esi,0x7
c00078f9:	76 0b                	jbe    c0007906 <f_mkfs+0x5b4>
c00078fb:	40                   	inc    eax
c00078fc:	83 ee 08             	sub    esi,0x8
c00078ff:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007904:	eb eb                	jmp    c00078f1 <f_mkfs+0x59f>
c0007906:	b2 01                	mov    dl,0x1
c0007908:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000790c:	85 f6                	test   esi,esi
c000790e:	74 0c                	je     c000791c <f_mkfs+0x5ca>
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 07                	jbe    c000791c <f_mkfs+0x5ca>
c0007915:	08 11                	or     BYTE PTR [ecx],dl
c0007917:	4e                   	dec    esi
c0007918:	d1 e2                	shl    edx,1
c000791a:	eb f0                	jmp    c000790c <f_mkfs+0x5ba>
c000791c:	89 df                	mov    edi,ebx
c000791e:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007922:	76 04                	jbe    c0007928 <f_mkfs+0x5d6>
c0007924:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007928:	83 ec 0c             	sub    esp,0xc
c000792b:	57                   	push   edi
c000792c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007930:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007934:	55                   	push   ebp
c0007935:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007939:	e8 cf a2 ff ff       	call   c0001c0d <disk_write>
c000793e:	83 c4 20             	add    esp,0x20
c0007941:	85 c0                	test   eax,eax
c0007943:	0f 85 ba 0a 00 00    	jne    c0008403 <f_mkfs+0x10b1>
c0007949:	31 d2                	xor    edx,edx
c000794b:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000794f:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007953:	29 fb                	sub    ebx,edi
c0007955:	0f 85 7a ff ff ff    	jne    c00078d5 <f_mkfs+0x583>
c000795b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000795f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007967:	31 f6                	xor    esi,esi
c0007969:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000796d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007970:	31 d2                	xor    edx,edx
c0007972:	89 e8                	mov    eax,ebp
c0007974:	e8 5d a3 ff ff       	call   c0001cd6 <mem_set>
c0007979:	31 c9                	xor    ecx,ecx
c000797b:	85 db                	test   ebx,ebx
c000797d:	75 40                	jne    c00079bf <f_mkfs+0x66d>
c000797f:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007984:	89 e8                	mov    eax,ebp
c0007986:	bb 02 00 00 00       	mov    ebx,0x2
c000798b:	e8 28 a3 ff ff       	call   c0001cb8 <st_dword>
c0007990:	8d 45 04             	lea    eax,[ebp+0x4]
c0007993:	83 ca ff             	or     edx,0xffffffff
c0007996:	e8 1d a3 ff ff       	call   c0001cb8 <st_dword>
c000799b:	b9 08 00 00 00       	mov    ecx,0x8
c00079a0:	eb 1d                	jmp    c00079bf <f_mkfs+0x66d>
c00079a2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079a5:	76 3b                	jbe    c00079e2 <f_mkfs+0x690>
c00079a7:	43                   	inc    ebx
c00079a8:	83 fe 01             	cmp    esi,0x1
c00079ab:	89 da                	mov    edx,ebx
c00079ad:	77 03                	ja     c00079b2 <f_mkfs+0x660>
c00079af:	83 ca ff             	or     edx,0xffffffff
c00079b2:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079b6:	4e                   	dec    esi
c00079b7:	e8 fc a2 ff ff       	call   c0001cb8 <st_dword>
c00079bc:	83 c1 04             	add    ecx,0x4
c00079bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079c3:	85 f6                	test   esi,esi
c00079c5:	75 db                	jne    c00079a2 <f_mkfs+0x650>
c00079c7:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079cc:	77 14                	ja     c00079e2 <f_mkfs+0x690>
c00079ce:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079d2:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079d9:	85 f6                	test   esi,esi
c00079db:	74 05                	je     c00079e2 <f_mkfs+0x690>
c00079dd:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079e0:	77 dd                	ja     c00079bf <f_mkfs+0x66d>
c00079e2:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079e6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079ea:	39 cf                	cmp    edi,ecx
c00079ec:	76 02                	jbe    c00079f0 <f_mkfs+0x69e>
c00079ee:	89 cf                	mov    edi,ecx
c00079f0:	83 ec 0c             	sub    esp,0xc
c00079f3:	57                   	push   edi
c00079f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079fc:	55                   	push   ebp
c00079fd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a01:	e8 07 a2 ff ff       	call   c0001c0d <disk_write>
c0007a06:	83 c4 20             	add    esp,0x20
c0007a09:	85 c0                	test   eax,eax
c0007a0b:	0f 85 f2 09 00 00    	jne    c0008403 <f_mkfs+0x10b1>
c0007a11:	31 d2                	xor    edx,edx
c0007a13:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a17:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a1b:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a1f:	0f 85 48 ff ff ff    	jne    c000796d <f_mkfs+0x61b>
c0007a25:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a28:	31 d2                	xor    edx,edx
c0007a2a:	89 e8                	mov    eax,ebp
c0007a2c:	31 ff                	xor    edi,edi
c0007a2e:	e8 a3 a2 ff ff       	call   c0001cd6 <mem_set>
c0007a33:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a36:	ba 02 00 00 00       	mov    edx,0x2
c0007a3b:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a3f:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a43:	e8 70 a2 ff ff       	call   c0001cb8 <st_dword>
c0007a48:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a4b:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a4f:	e8 64 a2 ff ff       	call   c0001cb8 <st_dword>
c0007a54:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a57:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a5b:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a5f:	e8 54 a2 ff ff       	call   c0001cb8 <st_dword>
c0007a64:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a67:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a6b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a6f:	83 c2 02             	add    edx,0x2
c0007a72:	e8 41 a2 ff ff       	call   c0001cb8 <st_dword>
c0007a77:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a7a:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a7e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a82:	e8 31 a2 ff ff       	call   c0001cb8 <st_dword>
c0007a87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a8b:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a90:	89 c6                	mov    esi,eax
c0007a92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a96:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a9d:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007aa1:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007aa4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007aa8:	39 cb                	cmp    ebx,ecx
c0007aaa:	76 02                	jbe    c0007aae <f_mkfs+0x75c>
c0007aac:	89 cb                	mov    ebx,ecx
c0007aae:	83 ec 0c             	sub    esp,0xc
c0007ab1:	53                   	push   ebx
c0007ab2:	57                   	push   edi
c0007ab3:	56                   	push   esi
c0007ab4:	55                   	push   ebp
c0007ab5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ab9:	e8 4f a1 ff ff       	call   c0001c0d <disk_write>
c0007abe:	83 c4 20             	add    esp,0x20
c0007ac1:	85 c0                	test   eax,eax
c0007ac3:	0f 85 3a 09 00 00    	jne    c0008403 <f_mkfs+0x10b1>
c0007ac9:	31 d2                	xor    edx,edx
c0007acb:	b9 00 02 00 00       	mov    ecx,0x200
c0007ad0:	89 e8                	mov    eax,ebp
c0007ad2:	e8 ff a1 ff ff       	call   c0001cd6 <mem_set>
c0007ad7:	31 d2                	xor    edx,edx
c0007ad9:	01 de                	add    esi,ebx
c0007adb:	11 d7                	adc    edi,edx
c0007add:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ae0:	75 bf                	jne    c0007aa1 <f_mkfs+0x74f>
c0007ae2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007ae6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007aea:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007af2:	b9 00 02 00 00       	mov    ecx,0x200
c0007af7:	31 d2                	xor    edx,edx
c0007af9:	89 e8                	mov    eax,ebp
c0007afb:	e8 d6 a1 ff ff       	call   c0001cd6 <mem_set>
c0007b00:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b05:	ba 00 9e 02 c0       	mov    edx,0xc0029e00
c0007b0a:	89 e8                	mov    eax,ebp
c0007b0c:	e8 b0 a1 ff ff       	call   c0001cc1 <mem_cpy>
c0007b11:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b18:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b1c:	e8 9a a1 ff ff       	call   c0001cbb <st_qword>
c0007b21:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b25:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b28:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b2c:	e8 8a a1 ff ff       	call   c0001cbb <st_qword>
c0007b31:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b34:	ba 20 00 00 00       	mov    edx,0x20
c0007b39:	e8 7a a1 ff ff       	call   c0001cb8 <st_dword>
c0007b3e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b42:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b46:	e8 6d a1 ff ff       	call   c0001cb8 <st_dword>
c0007b4b:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b4f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b53:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b57:	e8 5c a1 ff ff       	call   c0001cb8 <st_dword>
c0007b5c:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b5f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b63:	e8 50 a1 ff ff       	call   c0001cb8 <st_dword>
c0007b68:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b6c:	8d 50 02             	lea    edx,[eax+0x2]
c0007b6f:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b72:	e8 41 a1 ff ff       	call   c0001cb8 <st_dword>
c0007b77:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b7f:	e8 34 a1 ff ff       	call   c0001cb8 <st_dword>
c0007b84:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b87:	ba 00 01 00 00       	mov    edx,0x100
c0007b8c:	e8 23 a1 ff ff       	call   c0001cb4 <st_word>
c0007b91:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b95:	b8 0a 00 00 00       	mov    eax,0xa
c0007b9a:	48                   	dec    eax
c0007b9b:	74 05                	je     c0007ba2 <f_mkfs+0x850>
c0007b9d:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007ba0:	eb f8                	jmp    c0007b9a <f_mkfs+0x848>
c0007ba2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ba6:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007baa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bae:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bb2:	74 05                	je     c0007bb9 <f_mkfs+0x867>
c0007bb4:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bb7:	eb f5                	jmp    c0007bae <f_mkfs+0x85c>
c0007bb9:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bbc:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007bc1:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bc7:	31 db                	xor    ebx,ebx
c0007bc9:	e8 e6 a0 ff ff       	call   c0001cb4 <st_word>
c0007bce:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bd4:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bd9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bdc:	e8 d3 a0 ff ff       	call   c0001cb4 <st_word>
c0007be1:	31 c9                	xor    ecx,ecx
c0007be3:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007be6:	83 f8 01             	cmp    eax,0x1
c0007be9:	76 13                	jbe    c0007bfe <f_mkfs+0x8ac>
c0007beb:	83 f9 70             	cmp    ecx,0x70
c0007bee:	74 0e                	je     c0007bfe <f_mkfs+0x8ac>
c0007bf0:	89 da                	mov    edx,ebx
c0007bf2:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bf7:	e8 41 a5 ff ff       	call   c000213d <xsum32>
c0007bfc:	89 c3                	mov    ebx,eax
c0007bfe:	41                   	inc    ecx
c0007bff:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c05:	75 dc                	jne    c0007be3 <f_mkfs+0x891>
c0007c07:	89 f0                	mov    eax,esi
c0007c09:	89 fa                	mov    edx,edi
c0007c0b:	83 c0 01             	add    eax,0x1
c0007c0e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c12:	83 d2 00             	adc    edx,0x0
c0007c15:	83 ec 0c             	sub    esp,0xc
c0007c18:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c1c:	6a 01                	push   0x1
c0007c1e:	57                   	push   edi
c0007c1f:	56                   	push   esi
c0007c20:	55                   	push   ebp
c0007c21:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c25:	e8 e3 9f ff ff       	call   c0001c0d <disk_write>
c0007c2a:	83 c4 20             	add    esp,0x20
c0007c2d:	85 c0                	test   eax,eax
c0007c2f:	0f 85 ce 07 00 00    	jne    c0008403 <f_mkfs+0x10b1>
c0007c35:	31 d2                	xor    edx,edx
c0007c37:	b9 00 02 00 00       	mov    ecx,0x200
c0007c3c:	89 e8                	mov    eax,ebp
c0007c3e:	e8 93 a0 ff ff       	call   c0001cd6 <mem_set>
c0007c43:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c48:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c4b:	e8 64 a0 ff ff       	call   c0001cb4 <st_word>
c0007c50:	89 f0                	mov    eax,esi
c0007c52:	89 fa                	mov    edx,edi
c0007c54:	83 c0 09             	add    eax,0x9
c0007c57:	83 d2 00             	adc    edx,0x0
c0007c5a:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c5d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c61:	31 c9                	xor    ecx,ecx
c0007c63:	41                   	inc    ecx
c0007c64:	89 da                	mov    edx,ebx
c0007c66:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c6b:	e8 cd a4 ff ff       	call   c000213d <xsum32>
c0007c70:	89 c3                	mov    ebx,eax
c0007c72:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c78:	75 e9                	jne    c0007c63 <f_mkfs+0x911>
c0007c7a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c7e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c82:	83 c0 01             	add    eax,0x1
c0007c85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c89:	83 d2 00             	adc    edx,0x0
c0007c8c:	83 ec 0c             	sub    esp,0xc
c0007c8f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c93:	6a 01                	push   0x1
c0007c95:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c99:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c9d:	55                   	push   ebp
c0007c9e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ca2:	e8 66 9f ff ff       	call   c0001c0d <disk_write>
c0007ca7:	83 c4 20             	add    esp,0x20
c0007caa:	85 c0                	test   eax,eax
c0007cac:	0f 85 51 07 00 00    	jne    c0008403 <f_mkfs+0x10b1>
c0007cb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cb6:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cba:	75 09                	jne    c0007cc5 <f_mkfs+0x973>
c0007cbc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cbf:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007cc3:	74 12                	je     c0007cd7 <f_mkfs+0x985>
c0007cc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cc9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ccd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cd1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cd5:	eb 8a                	jmp    c0007c61 <f_mkfs+0x90f>
c0007cd7:	31 d2                	xor    edx,edx
c0007cd9:	b9 00 02 00 00       	mov    ecx,0x200
c0007cde:	89 e8                	mov    eax,ebp
c0007ce0:	e8 f1 9f ff ff       	call   c0001cd6 <mem_set>
c0007ce5:	83 c6 0b             	add    esi,0xb
c0007ce8:	83 d7 00             	adc    edi,0x0
c0007ceb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cef:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cf3:	31 c9                	xor    ecx,ecx
c0007cf5:	41                   	inc    ecx
c0007cf6:	89 da                	mov    edx,ebx
c0007cf8:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007cfd:	e8 3b a4 ff ff       	call   c000213d <xsum32>
c0007d02:	89 c3                	mov    ebx,eax
c0007d04:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d0a:	75 e9                	jne    c0007cf5 <f_mkfs+0x9a3>
c0007d0c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d0f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d13:	83 c6 01             	add    esi,0x1
c0007d16:	83 d7 00             	adc    edi,0x0
c0007d19:	83 ec 0c             	sub    esp,0xc
c0007d1c:	6a 01                	push   0x1
c0007d1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d26:	55                   	push   ebp
c0007d27:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d2b:	e8 dd 9e ff ff       	call   c0001c0d <disk_write>
c0007d30:	83 c4 20             	add    esp,0x20
c0007d33:	85 c0                	test   eax,eax
c0007d35:	0f 85 c8 06 00 00    	jne    c0008403 <f_mkfs+0x10b1>
c0007d3b:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d3f:	75 06                	jne    c0007d47 <f_mkfs+0x9f5>
c0007d41:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d45:	74 09                	je     c0007d50 <f_mkfs+0x9fe>
c0007d47:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d4a:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d4e:	eb a3                	jmp    c0007cf3 <f_mkfs+0x9a1>
c0007d50:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d54:	89 da                	mov    edx,ebx
c0007d56:	01 e8                	add    eax,ebp
c0007d58:	e8 5b 9f ff ff       	call   c0001cb8 <st_dword>
c0007d5d:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d62:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d6a:	75 e4                	jne    c0007d50 <f_mkfs+0x9fe>
c0007d6c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d6f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d73:	83 c6 02             	add    esi,0x2
c0007d76:	83 d7 00             	adc    edi,0x0
c0007d79:	83 ec 0c             	sub    esp,0xc
c0007d7c:	6a 01                	push   0x1
c0007d7e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d82:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d86:	55                   	push   ebp
c0007d87:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d8b:	e8 7d 9e ff ff       	call   c0001c0d <disk_write>
c0007d90:	83 c4 20             	add    esp,0x20
c0007d93:	85 c0                	test   eax,eax
c0007d95:	0f 85 68 06 00 00    	jne    c0008403 <f_mkfs+0x10b1>
c0007d9b:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007da0:	74 0d                	je     c0007daf <f_mkfs+0xa5d>
c0007da2:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007daa:	e9 43 fd ff ff       	jmp    c0007af2 <f_mkfs+0x7a0>
c0007daf:	b1 07                	mov    cl,0x7
c0007db1:	e9 e3 05 00 00       	jmp    c0008399 <f_mkfs+0x1047>
c0007db6:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dbb:	0f 85 4f 02 00 00    	jne    c0008010 <f_mkfs+0xcbe>
c0007dc1:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dc6:	0f 86 22 02 00 00    	jbe    c0007fee <f_mkfs+0xc9c>
c0007dcc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dd1:	0f 85 81 06 00 00    	jne    c0008458 <f_mkfs+0x1106>
c0007dd7:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dda:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dde:	83 f8 40             	cmp    eax,0x40
c0007de1:	0f 87 51 06 00 00    	ja     c0008438 <f_mkfs+0x10e6>
c0007de7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007deb:	85 ff                	test   edi,edi
c0007ded:	75 1c                	jne    c0007e0b <f_mkfs+0xab9>
c0007def:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007df2:	ba 00 9d 02 c0       	mov    edx,0xc0029d00
c0007df7:	c1 e9 0c             	shr    ecx,0xc
c0007dfa:	bf 01 00 00 00       	mov    edi,0x1
c0007dff:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e02:	66 85 c0             	test   ax,ax
c0007e05:	0f 85 95 01 00 00    	jne    c0007fa0 <f_mkfs+0xc4e>
c0007e0b:	31 d2                	xor    edx,edx
c0007e0d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e10:	f7 f7                	div    edi
c0007e12:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e17:	0f 86 95 01 00 00    	jbe    c0007fb2 <f_mkfs+0xc60>
c0007e1d:	83 c0 02             	add    eax,0x2
c0007e20:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e25:	01 c0                	add    eax,eax
c0007e27:	05 ff 01 00 00       	add    eax,0x1ff
c0007e2c:	be 01 00 00 00       	mov    esi,0x1
c0007e31:	c1 e8 09             	shr    eax,0x9
c0007e34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e38:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e3c:	c1 e0 05             	shl    eax,0x5
c0007e3f:	c1 e8 09             	shr    eax,0x9
c0007e42:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e46:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e4b:	31 d2                	xor    edx,edx
c0007e4d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e51:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e55:	89 f0                	mov    eax,esi
c0007e57:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e5b:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e5f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e63:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e67:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e6b:	31 d2                	xor    edx,edx
c0007e6d:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e72:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e76:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e7a:	31 db                	xor    ebx,ebx
c0007e7c:	01 c8                	add    eax,ecx
c0007e7e:	11 da                	adc    edx,ebx
c0007e80:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e84:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e88:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e8c:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e90:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e94:	f7 da                	neg    edx
c0007e96:	21 d1                	and    ecx,edx
c0007e98:	29 d9                	sub    ecx,ebx
c0007e9a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e9f:	0f 85 20 01 00 00    	jne    c0007fc5 <f_mkfs+0xc73>
c0007ea5:	31 db                	xor    ebx,ebx
c0007ea7:	01 ce                	add    esi,ecx
c0007ea9:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ead:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007eb1:	31 d2                	xor    edx,edx
c0007eb3:	89 f8                	mov    eax,edi
c0007eb5:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007eb9:	c1 e0 04             	shl    eax,0x4
c0007ebc:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ec0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ec4:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ec8:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007ecc:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007ecf:	19 d3                	sbb    ebx,edx
c0007ed1:	0f 82 40 01 00 00    	jb     c0008017 <f_mkfs+0xcc5>
c0007ed7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007eda:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ede:	89 c8                	mov    eax,ecx
c0007ee0:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007ee5:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ee9:	29 f0                	sub    eax,esi
c0007eeb:	29 d0                	sub    eax,edx
c0007eed:	31 d2                	xor    edx,edx
c0007eef:	f7 f7                	div    edi
c0007ef1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ef6:	89 c3                	mov    ebx,eax
c0007ef8:	0f 85 b8 fe ff ff    	jne    c0007db6 <f_mkfs+0xa64>
c0007efe:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f03:	0f 87 1d 01 00 00    	ja     c0008026 <f_mkfs+0xcd4>
c0007f09:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f0e:	0f 85 03 01 00 00    	jne    c0008017 <f_mkfs+0xcc5>
c0007f14:	83 ff 01             	cmp    edi,0x1
c0007f17:	0f 86 fa 00 00 00    	jbe    c0008017 <f_mkfs+0xcc5>
c0007f1d:	d1 ef                	shr    edi,1
c0007f1f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f23:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f27:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f2a:	85 db                	test   ebx,ebx
c0007f2c:	75 2d                	jne    c0007f5b <f_mkfs+0xc09>
c0007f2e:	89 cb                	mov    ebx,ecx
c0007f30:	ba 10 9d 02 c0       	mov    edx,0xc0029d10
c0007f35:	c1 eb 11             	shr    ebx,0x11
c0007f38:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f40:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f43:	66 85 c0             	test   ax,ax
c0007f46:	74 11                	je     c0007f59 <f_mkfs+0xc07>
c0007f48:	83 c2 02             	add    edx,0x2
c0007f4b:	39 d8                	cmp    eax,ebx
c0007f4d:	77 0a                	ja     c0007f59 <f_mkfs+0xc07>
c0007f4f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f53:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f57:	eb e7                	jmp    c0007f40 <f_mkfs+0xbee>
c0007f59:	31 db                	xor    ebx,ebx
c0007f5b:	31 d2                	xor    edx,edx
c0007f5d:	89 c8                	mov    eax,ecx
c0007f5f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f63:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f6a:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f6f:	c1 ea 09             	shr    edx,0x9
c0007f72:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f77:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f7b:	0f 87 96 00 00 00    	ja     c0008017 <f_mkfs+0xcc5>
c0007f81:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f85:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f8d:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f91:	be 20 00 00 00       	mov    esi,0x20
c0007f96:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f9b:	e9 a6 fe ff ff       	jmp    c0007e46 <f_mkfs+0xaf4>
c0007fa0:	83 c2 02             	add    edx,0x2
c0007fa3:	39 c8                	cmp    eax,ecx
c0007fa5:	0f 87 60 fe ff ff    	ja     c0007e0b <f_mkfs+0xab9>
c0007fab:	01 ff                	add    edi,edi
c0007fad:	e9 4d fe ff ff       	jmp    c0007dff <f_mkfs+0xaad>
c0007fb2:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fb5:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fba:	40                   	inc    eax
c0007fbb:	d1 e8                	shr    eax,1
c0007fbd:	83 c0 03             	add    eax,0x3
c0007fc0:	e9 62 fe ff ff       	jmp    c0007e27 <f_mkfs+0xad5>
c0007fc5:	31 d2                	xor    edx,edx
c0007fc7:	89 c8                	mov    eax,ecx
c0007fc9:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fcd:	85 d2                	test   edx,edx
c0007fcf:	74 0c                	je     c0007fdd <f_mkfs+0xc8b>
c0007fd1:	49                   	dec    ecx
c0007fd2:	46                   	inc    esi
c0007fd3:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fd8:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fdd:	89 c8                	mov    eax,ecx
c0007fdf:	31 d2                	xor    edx,edx
c0007fe1:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fe5:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fe9:	e9 c3 fe ff ff       	jmp    c0007eb1 <f_mkfs+0xb5f>
c0007fee:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ff3:	77 31                	ja     c0008026 <f_mkfs+0xcd4>
c0007ff5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ffa:	75 1b                	jne    c0008017 <f_mkfs+0xcc5>
c0007ffc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008003:	3d 80 00 00 00       	cmp    eax,0x80
c0008008:	0f 86 d9 fd ff ff    	jbe    c0007de7 <f_mkfs+0xa95>
c000800e:	eb 07                	jmp    c0008017 <f_mkfs+0xcc5>
c0008010:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008015:	76 0a                	jbe    c0008021 <f_mkfs+0xccf>
c0008017:	bb 0e 00 00 00       	mov    ebx,0xe
c000801c:	e9 ff 03 00 00       	jmp    c0008420 <f_mkfs+0x10ce>
c0008021:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008026:	31 d2                	xor    edx,edx
c0008028:	b9 00 02 00 00       	mov    ecx,0x200
c000802d:	89 e8                	mov    eax,ebp
c000802f:	e8 a2 9c ff ff       	call   c0001cd6 <mem_set>
c0008034:	b9 0b 00 00 00       	mov    ecx,0xb
c0008039:	ba 22 9e 02 c0       	mov    edx,0xc0029e22
c000803e:	89 e8                	mov    eax,ebp
c0008040:	e8 7c 9c ff ff       	call   c0001cc1 <mem_cpy>
c0008045:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008048:	ba 00 02 00 00       	mov    edx,0x200
c000804d:	e8 62 9c ff ff       	call   c0001cb4 <st_word>
c0008052:	89 f8                	mov    eax,edi
c0008054:	0f b7 d6             	movzx  edx,si
c0008057:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000805a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000805d:	e8 52 9c ff ff       	call   c0001cb4 <st_word>
c0008062:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008066:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000806b:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000806e:	75 08                	jne    c0008078 <f_mkfs+0xd26>
c0008070:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008078:	8d 45 11             	lea    eax,[ebp+0x11]
c000807b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000807f:	e8 30 9c ff ff       	call   c0001cb4 <st_word>
c0008084:	b8 ff ff 00 00       	mov    eax,0xffff
c0008089:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000808d:	39 d0                	cmp    eax,edx
c000808f:	b8 00 00 00 00       	mov    eax,0x0
c0008094:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0008098:	72 0a                	jb     c00080a4 <f_mkfs+0xd52>
c000809a:	8d 45 13             	lea    eax,[ebp+0x13]
c000809d:	e8 12 9c ff ff       	call   c0001cb4 <st_word>
c00080a2:	eb 08                	jmp    c00080ac <f_mkfs+0xd5a>
c00080a4:	8d 45 20             	lea    eax,[ebp+0x20]
c00080a7:	e8 0c 9c ff ff       	call   c0001cb8 <st_dword>
c00080ac:	8d 45 18             	lea    eax,[ebp+0x18]
c00080af:	ba 3f 00 00 00       	mov    edx,0x3f
c00080b4:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080b8:	e8 f7 9b ff ff       	call   c0001cb4 <st_word>
c00080bd:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080c0:	ba ff 00 00 00       	mov    edx,0xff
c00080c5:	e8 ea 9b ff ff       	call   c0001cb4 <st_word>
c00080ca:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080d1:	e8 e2 9b ff ff       	call   c0001cb8 <st_dword>
c00080d6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080db:	75 57                	jne    c0008134 <f_mkfs+0xde2>
c00080dd:	8d 45 43             	lea    eax,[ebp+0x43]
c00080e0:	ba 00 00 21 50       	mov    edx,0x50210000
c00080e5:	e8 ce 9b ff ff       	call   c0001cb8 <st_dword>
c00080ea:	8d 45 24             	lea    eax,[ebp+0x24]
c00080ed:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080f1:	e8 c2 9b ff ff       	call   c0001cb8 <st_dword>
c00080f6:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080f9:	ba 02 00 00 00       	mov    edx,0x2
c00080fe:	e8 b5 9b ff ff       	call   c0001cb8 <st_dword>
c0008103:	8d 45 30             	lea    eax,[ebp+0x30]
c0008106:	ba 01 00 00 00       	mov    edx,0x1
c000810b:	e8 a4 9b ff ff       	call   c0001cb4 <st_word>
c0008110:	8d 45 32             	lea    eax,[ebp+0x32]
c0008113:	ba 06 00 00 00       	mov    edx,0x6
c0008118:	e8 97 9b ff ff       	call   c0001cb4 <st_word>
c000811d:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008121:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008125:	8d 45 47             	lea    eax,[ebp+0x47]
c0008128:	b9 13 00 00 00       	mov    ecx,0x13
c000812d:	ba 2e 9e 02 c0       	mov    edx,0xc0029e2e
c0008132:	eb 2f                	jmp    c0008163 <f_mkfs+0xe11>
c0008134:	8d 45 27             	lea    eax,[ebp+0x27]
c0008137:	ba 00 00 21 50       	mov    edx,0x50210000
c000813c:	e8 77 9b ff ff       	call   c0001cb8 <st_dword>
c0008141:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008146:	8d 45 16             	lea    eax,[ebp+0x16]
c0008149:	e8 66 9b ff ff       	call   c0001cb4 <st_word>
c000814e:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008152:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008156:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008159:	b9 13 00 00 00       	mov    ecx,0x13
c000815e:	ba 42 9e 02 c0       	mov    edx,0xc0029e42
c0008163:	e8 59 9b ff ff       	call   c0001cc1 <mem_cpy>
c0008168:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000816e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008173:	89 f0                	mov    eax,esi
c0008175:	e8 3a 9b ff ff       	call   c0001cb4 <st_word>
c000817a:	83 ec 0c             	sub    esp,0xc
c000817d:	6a 01                	push   0x1
c000817f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008183:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008187:	55                   	push   ebp
c0008188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000818c:	e8 7c 9a ff ff       	call   c0001c0d <disk_write>
c0008191:	83 c4 20             	add    esp,0x20
c0008194:	85 c0                	test   eax,eax
c0008196:	0f 85 67 02 00 00    	jne    c0008403 <f_mkfs+0x10b1>
c000819c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081a1:	0f 85 b7 00 00 00    	jne    c000825e <f_mkfs+0xf0c>
c00081a7:	83 ec 0c             	sub    esp,0xc
c00081aa:	6a 01                	push   0x1
c00081ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081b0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081b4:	83 c0 06             	add    eax,0x6
c00081b7:	83 d2 00             	adc    edx,0x0
c00081ba:	52                   	push   edx
c00081bb:	50                   	push   eax
c00081bc:	55                   	push   ebp
c00081bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081c1:	e8 47 9a ff ff       	call   c0001c0d <disk_write>
c00081c6:	83 c4 20             	add    esp,0x20
c00081c9:	b9 00 02 00 00       	mov    ecx,0x200
c00081ce:	31 d2                	xor    edx,edx
c00081d0:	89 e8                	mov    eax,ebp
c00081d2:	e8 ff 9a ff ff       	call   c0001cd6 <mem_set>
c00081d7:	ba 52 52 61 41       	mov    edx,0x41615252
c00081dc:	89 e8                	mov    eax,ebp
c00081de:	e8 d5 9a ff ff       	call   c0001cb8 <st_dword>
c00081e3:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081e9:	ba 72 72 41 61       	mov    edx,0x61417272
c00081ee:	e8 c5 9a ff ff       	call   c0001cb8 <st_dword>
c00081f3:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081f6:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081fc:	e8 b7 9a ff ff       	call   c0001cb8 <st_dword>
c0008201:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008207:	ba 02 00 00 00       	mov    edx,0x2
c000820c:	e8 a7 9a ff ff       	call   c0001cb8 <st_dword>
c0008211:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008216:	89 f0                	mov    eax,esi
c0008218:	e8 97 9a ff ff       	call   c0001cb4 <st_word>
c000821d:	83 ec 0c             	sub    esp,0xc
c0008220:	6a 01                	push   0x1
c0008222:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008226:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822a:	83 c0 07             	add    eax,0x7
c000822d:	83 d2 00             	adc    edx,0x0
c0008230:	52                   	push   edx
c0008231:	50                   	push   eax
c0008232:	55                   	push   ebp
c0008233:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008237:	e8 d1 99 ff ff       	call   c0001c0d <disk_write>
c000823c:	83 c4 14             	add    esp,0x14
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 01             	add    eax,0x1
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 b2 99 ff ff       	call   c0001c0d <disk_write>
c000825b:	83 c4 20             	add    esp,0x20
c000825e:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008265:	31 d2                	xor    edx,edx
c0008267:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000826d:	31 db                	xor    ebx,ebx
c000826f:	89 e8                	mov    eax,ebp
c0008271:	e8 60 9a ff ff       	call   c0001cd6 <mem_set>
c0008276:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000827b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008282:	0f 94 c3             	sete   bl
c0008285:	4b                   	dec    ebx
c0008286:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000828c:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008292:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008297:	75 21                	jne    c00082ba <f_mkfs+0xf68>
c0008299:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000829e:	89 e8                	mov    eax,ebp
c00082a0:	e8 13 9a ff ff       	call   c0001cb8 <st_dword>
c00082a5:	8d 45 04             	lea    eax,[ebp+0x4]
c00082a8:	83 ca ff             	or     edx,0xffffffff
c00082ab:	e8 08 9a ff ff       	call   c0001cb8 <st_dword>
c00082b0:	8d 45 08             	lea    eax,[ebp+0x8]
c00082b3:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082b8:	eb 04                	jmp    c00082be <f_mkfs+0xf6c>
c00082ba:	89 da                	mov    edx,ebx
c00082bc:	89 e8                	mov    eax,ebp
c00082be:	e8 f5 99 ff ff       	call   c0001cb8 <st_dword>
c00082c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082cb:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082cf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082d3:	39 ce                	cmp    esi,ecx
c00082d5:	76 02                	jbe    c00082d9 <f_mkfs+0xf87>
c00082d7:	89 ce                	mov    esi,ecx
c00082d9:	83 ec 0c             	sub    esp,0xc
c00082dc:	56                   	push   esi
c00082dd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082e1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082e5:	55                   	push   ebp
c00082e6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082ea:	e8 1e 99 ff ff       	call   c0001c0d <disk_write>
c00082ef:	83 c4 20             	add    esp,0x20
c00082f2:	85 c0                	test   eax,eax
c00082f4:	0f 85 09 01 00 00    	jne    c0008403 <f_mkfs+0x10b1>
c00082fa:	31 d2                	xor    edx,edx
c00082fc:	b9 00 02 00 00       	mov    ecx,0x200
c0008301:	89 e8                	mov    eax,ebp
c0008303:	e8 ce 99 ff ff       	call   c0001cd6 <mem_set>
c0008308:	31 d2                	xor    edx,edx
c000830a:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000830e:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008312:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008316:	75 b3                	jne    c00082cb <f_mkfs+0xf79>
c0008318:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000831b:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008322:	40                   	inc    eax
c0008323:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008327:	0f 87 65 ff ff ff    	ja     c0008292 <f_mkfs+0xf40>
c000832d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008332:	74 04                	je     c0008338 <f_mkfs+0xfe6>
c0008334:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008338:	89 fb                	mov    ebx,edi
c000833a:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000833e:	76 04                	jbe    c0008344 <f_mkfs+0xff2>
c0008340:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008344:	83 ec 0c             	sub    esp,0xc
c0008347:	53                   	push   ebx
c0008348:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000834c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008350:	55                   	push   ebp
c0008351:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008355:	e8 b3 98 ff ff       	call   c0001c0d <disk_write>
c000835a:	83 c4 20             	add    esp,0x20
c000835d:	85 c0                	test   eax,eax
c000835f:	0f 85 9e 00 00 00    	jne    c0008403 <f_mkfs+0x10b1>
c0008365:	31 d2                	xor    edx,edx
c0008367:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000836b:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000836f:	29 df                	sub    edi,ebx
c0008371:	75 c5                	jne    c0008338 <f_mkfs+0xfe6>
c0008373:	b1 0c                	mov    cl,0xc
c0008375:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000837a:	74 1d                	je     c0008399 <f_mkfs+0x1047>
c000837c:	b8 ff ff 00 00       	mov    eax,0xffff
c0008381:	b1 06                	mov    cl,0x6
c0008383:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008387:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000838b:	72 0c                	jb     c0008399 <f_mkfs+0x1047>
c000838d:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008392:	0f 94 c1             	sete   cl
c0008395:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008399:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000839e:	75 4c                	jne    c00083ec <f_mkfs+0x109a>
c00083a0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083a4:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083a8:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083af:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083b6:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083c1:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083cc:	0f b6 c9             	movzx  ecx,cl
c00083cf:	83 ec 0c             	sub    esp,0xc
c00083d2:	55                   	push   ebp
c00083d3:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083de:	e8 2f c2 ff ff       	call   c0004612 <create_partition>
c00083e3:	83 c4 10             	add    esp,0x10
c00083e6:	89 c3                	mov    ebx,eax
c00083e8:	85 c0                	test   eax,eax
c00083ea:	75 34                	jne    c0008420 <f_mkfs+0x10ce>
c00083ec:	31 db                	xor    ebx,ebx
c00083ee:	50                   	push   eax
c00083ef:	6a 00                	push   0x0
c00083f1:	6a 00                	push   0x0
c00083f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083f7:	e8 27 98 ff ff       	call   c0001c23 <disk_ioctl>
c00083fc:	83 c4 10             	add    esp,0x10
c00083ff:	85 c0                	test   eax,eax
c0008401:	74 1d                	je     c0008420 <f_mkfs+0x10ce>
c0008403:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840b:	75 0c                	jne    c0008419 <f_mkfs+0x10c7>
c000840d:	83 ec 0c             	sub    esp,0xc
c0008410:	55                   	push   ebp
c0008411:	e8 75 00 00 00       	call   c000848b <ff_memfree>
c0008416:	83 c4 10             	add    esp,0x10
c0008419:	bb 01 00 00 00       	mov    ebx,0x1
c000841e:	eb 48                	jmp    c0008468 <f_mkfs+0x1116>
c0008420:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008428:	75 3e                	jne    c0008468 <f_mkfs+0x1116>
c000842a:	83 ec 0c             	sub    esp,0xc
c000842d:	55                   	push   ebp
c000842e:	e8 58 00 00 00       	call   c000848b <ff_memfree>
c0008433:	83 c4 10             	add    esp,0x10
c0008436:	eb 30                	jmp    c0008468 <f_mkfs+0x1116>
c0008438:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000843d:	0f 85 eb fa ff ff    	jne    c0007f2e <f_mkfs+0xbdc>
c0008443:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008447:	81 ff 80 00 00 00    	cmp    edi,0x80
c000844d:	0f 86 b8 f9 ff ff    	jbe    c0007e0b <f_mkfs+0xab9>
c0008453:	e9 bf fb ff ff       	jmp    c0008017 <f_mkfs+0xcc5>
c0008458:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845d:	0f 85 c0 fa ff ff    	jne    c0007f23 <f_mkfs+0xbd1>
c0008463:	e9 af fb ff ff       	jmp    c0008017 <f_mkfs+0xcc5>
c0008468:	81 c4 9c 00 00 00    	add    esp,0x9c
c000846e:	89 d8                	mov    eax,ebx
c0008470:	5b                   	pop    ebx
c0008471:	5e                   	pop    esi
c0008472:	5f                   	pop    edi
c0008473:	5d                   	pop    ebp
c0008474:	c3                   	ret    

c0008475 <ff_memalloc>:
c0008475:	83 ec 0c             	sub    esp,0xc
c0008478:	83 ec 0c             	sub    esp,0xc
c000847b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847f:	e8 aa 74 00 00       	call   c000f92e <malloc>
c0008484:	83 c4 10             	add    esp,0x10
c0008487:	83 c4 0c             	add    esp,0xc
c000848a:	c3                   	ret    

c000848b <ff_memfree>:
c000848b:	83 ec 0c             	sub    esp,0xc
c000848e:	83 ec 0c             	sub    esp,0xc
c0008491:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008495:	e8 a4 74 00 00       	call   c000f93e <free>
c000849a:	83 c4 10             	add    esp,0x10
c000849d:	90                   	nop
c000849e:	83 c4 0c             	add    esp,0xc
c00084a1:	c3                   	ret    

c00084a2 <ff_uni2oem>:
c00084a2:	83 ec 14             	sub    esp,0x14
c00084a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084a9:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084ad:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084b4:	c7 44 24 0c 60 a1 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a160
c00084bc:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084c1:	77 0b                	ja     c00084ce <ff_uni2oem+0x2c>
c00084c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084c7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084cc:	eb 5b                	jmp    c0008529 <ff_uni2oem+0x87>
c00084ce:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084d6:	77 51                	ja     c0008529 <ff_uni2oem+0x87>
c00084d8:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084de:	75 49                	jne    c0008529 <ff_uni2oem+0x87>
c00084e0:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084e7:	eb 0b                	jmp    c00084f4 <ff_uni2oem+0x52>
c00084e9:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084ee:	40                   	inc    eax
c00084ef:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084f4:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084fa:	77 1b                	ja     c0008517 <ff_uni2oem+0x75>
c00084fc:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008501:	01 c0                	add    eax,eax
c0008503:	89 c2                	mov    edx,eax
c0008505:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008509:	01 d0                	add    eax,edx
c000850b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000850e:	0f b7 c0             	movzx  eax,ax
c0008511:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008515:	75 d2                	jne    c00084e9 <ff_uni2oem+0x47>
c0008517:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000851c:	83 e8 80             	sub    eax,0xffffff80
c000851f:	25 ff 00 00 00       	and    eax,0xff
c0008524:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008529:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000852e:	83 c4 14             	add    esp,0x14
c0008531:	c3                   	ret    

c0008532 <ff_oem2uni>:
c0008532:	83 ec 18             	sub    esp,0x18
c0008535:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008539:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000853d:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008542:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008546:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000854d:	c7 44 24 10 60 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a160
c0008555:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000855b:	77 0b                	ja     c0008568 <ff_oem2uni+0x36>
c000855d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008561:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008566:	eb 2d                	jmp    c0008595 <ff_oem2uni+0x63>
c0008568:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000856e:	75 25                	jne    c0008595 <ff_oem2uni+0x63>
c0008570:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008577:	77 1c                	ja     c0008595 <ff_oem2uni+0x63>
c0008579:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000857e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008583:	01 c0                	add    eax,eax
c0008585:	89 c2                	mov    edx,eax
c0008587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000858b:	01 d0                	add    eax,edx
c000858d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008590:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008595:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000859a:	83 c4 18             	add    esp,0x18
c000859d:	c3                   	ret    

c000859e <ff_wtoupper>:
c000859e:	83 ec 10             	sub    esp,0x10
c00085a1:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085a9:	0f 87 3e 01 00 00    	ja     c00086ed <ff_wtoupper+0x14f>
c00085af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085b3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085b8:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085bf:	77 07                	ja     c00085c8 <ff_wtoupper+0x2a>
c00085c1:	b8 60 9f 02 c0       	mov    eax,0xc0029f60
c00085c6:	eb 05                	jmp    c00085cd <ff_wtoupper+0x2f>
c00085c8:	b8 a0 9e 02 c0       	mov    eax,0xc0029ea0
c00085cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085d5:	8d 50 02             	lea    edx,[eax+0x2]
c00085d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085dc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085df:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085e4:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085ea:	0f 84 f4 00 00 00    	je     c00086e4 <ff_wtoupper+0x146>
c00085f0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085f5:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085fa:	0f 82 e4 00 00 00    	jb     c00086e4 <ff_wtoupper+0x146>
c0008600:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008604:	8d 50 02             	lea    edx,[eax+0x2]
c0008607:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000860b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000860e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008613:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008618:	66 c1 e8 08          	shr    ax,0x8
c000861c:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008621:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008628:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000862d:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008632:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008637:	01 ca                	add    edx,ecx
c0008639:	39 d0                	cmp    eax,edx
c000863b:	0f 8d 86 00 00 00    	jge    c00086c7 <ff_wtoupper+0x129>
c0008641:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008646:	83 f8 08             	cmp    eax,0x8
c0008649:	0f 87 94 00 00 00    	ja     c00086e3 <ff_wtoupper+0x145>
c000864f:	8b 04 85 60 9e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd61a0]
c0008656:	ff e0                	jmp    eax
c0008658:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000865d:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008662:	29 c2                	sub    edx,eax
c0008664:	89 d0                	mov    eax,edx
c0008666:	01 c0                	add    eax,eax
c0008668:	89 c2                	mov    edx,eax
c000866a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000866e:	01 d0                	add    eax,edx
c0008670:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008673:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008678:	eb 4b                	jmp    c00086c5 <ff_wtoupper+0x127>
c000867a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000867f:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008683:	83 e0 01             	and    eax,0x1
c0008686:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000868b:	eb 38                	jmp    c00086c5 <ff_wtoupper+0x127>
c000868d:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008693:	eb 30                	jmp    c00086c5 <ff_wtoupper+0x127>
c0008695:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000869b:	eb 28                	jmp    c00086c5 <ff_wtoupper+0x127>
c000869d:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086a3:	eb 20                	jmp    c00086c5 <ff_wtoupper+0x127>
c00086a5:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ab:	eb 18                	jmp    c00086c5 <ff_wtoupper+0x127>
c00086ad:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086b3:	eb 10                	jmp    c00086c5 <ff_wtoupper+0x127>
c00086b5:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086bb:	eb 08                	jmp    c00086c5 <ff_wtoupper+0x127>
c00086bd:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086c4:	90                   	nop
c00086c5:	eb 1c                	jmp    c00086e3 <ff_wtoupper+0x145>
c00086c7:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086cd:	0f 85 fe fe ff ff    	jne    c00085d1 <ff_wtoupper+0x33>
c00086d3:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086d8:	01 c0                	add    eax,eax
c00086da:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086de:	e9 ee fe ff ff       	jmp    c00085d1 <ff_wtoupper+0x33>
c00086e3:	90                   	nop
c00086e4:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086e9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086f1:	83 c4 10             	add    esp,0x10
c00086f4:	c3                   	ret    

c00086f5 <psrc_set_converter>:
c00086f5:	56                   	push   esi
c00086f6:	89 d6                	mov    esi,edx
c00086f8:	53                   	push   ebx
c00086f9:	89 c3                	mov    ebx,eax
c00086fb:	83 ec 0c             	sub    esp,0xc
c00086fe:	52                   	push   edx
c00086ff:	50                   	push   eax
c0008700:	e8 6f 55 00 00       	call   c000dc74 <sinc_set_converter>
c0008705:	83 c4 10             	add    esp,0x10
c0008708:	85 c0                	test   eax,eax
c000870a:	74 25                	je     c0008731 <psrc_set_converter+0x3c>
c000870c:	50                   	push   eax
c000870d:	50                   	push   eax
c000870e:	56                   	push   esi
c000870f:	53                   	push   ebx
c0008710:	e8 17 5d 00 00       	call   c000e42c <zoh_set_converter>
c0008715:	83 c4 10             	add    esp,0x10
c0008718:	85 c0                	test   eax,eax
c000871a:	74 15                	je     c0008731 <psrc_set_converter+0x3c>
c000871c:	51                   	push   ecx
c000871d:	51                   	push   ecx
c000871e:	56                   	push   esi
c000871f:	53                   	push   ebx
c0008720:	e8 0f 11 00 00       	call   c0009834 <linear_set_converter>
c0008725:	83 c4 10             	add    esp,0x10
c0008728:	ba 0a 00 00 00       	mov    edx,0xa
c000872d:	85 c0                	test   eax,eax
c000872f:	75 02                	jne    c0008733 <psrc_set_converter+0x3e>
c0008731:	31 d2                	xor    edx,edx
c0008733:	89 d0                	mov    eax,edx
c0008735:	5a                   	pop    edx
c0008736:	5b                   	pop    ebx
c0008737:	5e                   	pop    esi
c0008738:	c3                   	ret    

c0008739 <src_delete>:
c0008739:	53                   	push   ebx
c000873a:	83 ec 08             	sub    esp,0x8
c000873d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008741:	85 db                	test   ebx,ebx
c0008743:	74 29                	je     c000876e <src_delete+0x35>
c0008745:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008748:	85 c0                	test   eax,eax
c000874a:	74 0c                	je     c0008758 <src_delete+0x1f>
c000874c:	83 ec 0c             	sub    esp,0xc
c000874f:	50                   	push   eax
c0008750:	e8 e9 71 00 00       	call   c000f93e <free>
c0008755:	83 c4 10             	add    esp,0x10
c0008758:	50                   	push   eax
c0008759:	6a 3c                	push   0x3c
c000875b:	6a 00                	push   0x0
c000875d:	53                   	push   ebx
c000875e:	e8 09 80 ff ff       	call   c000076c <memset>
c0008763:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008766:	e8 d3 71 00 00       	call   c000f93e <free>
c000876b:	83 c4 10             	add    esp,0x10
c000876e:	31 c0                	xor    eax,eax
c0008770:	83 c4 08             	add    esp,0x8
c0008773:	5b                   	pop    ebx
c0008774:	c3                   	ret    

c0008775 <src_process>:
c0008775:	55                   	push   ebp
c0008776:	57                   	push   edi
c0008777:	56                   	push   esi
c0008778:	53                   	push   ebx
c0008779:	83 ec 1c             	sub    esp,0x1c
c000877c:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008780:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008784:	85 ed                	test   ebp,ebp
c0008786:	0f 84 6f 01 00 00    	je     c00088fb <src_process+0x186>
c000878c:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008790:	0f 84 6c 01 00 00    	je     c0008902 <src_process+0x18d>
c0008796:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000879a:	0f 84 62 01 00 00    	je     c0008902 <src_process+0x18d>
c00087a0:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087a7:	0f 85 5c 01 00 00    	jne    c0008909 <src_process+0x194>
c00087ad:	85 db                	test   ebx,ebx
c00087af:	0f 84 5b 01 00 00    	je     c0008910 <src_process+0x19b>
c00087b5:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087b7:	85 f6                	test   esi,esi
c00087b9:	0f 84 58 01 00 00    	je     c0008917 <src_process+0x1a2>
c00087bf:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087c2:	85 ff                	test   edi,edi
c00087c4:	0f 84 4d 01 00 00    	je     c0008917 <src_process+0x1a2>
c00087ca:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087cd:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087d8:	68 00 00 70 3f       	push   0x3f700000
c00087dd:	6a 00                	push   0x0
c00087df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	e8 4b 05 02 00       	call   c0028d37 <__ltdf2>
c00087ec:	83 c4 10             	add    esp,0x10
c00087ef:	85 c0                	test   eax,eax
c00087f1:	0f 88 27 01 00 00    	js     c000891e <src_process+0x1a9>
c00087f7:	68 00 00 70 40       	push   0x40700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 0e 05 02 00       	call   c0028d19 <__gtdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 8f 08 01 00 00    	jg     c000891e <src_process+0x1a9>
c0008816:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000881a:	79 07                	jns    c0008823 <src_process+0xae>
c000881c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008823:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008826:	85 c0                	test   eax,eax
c0008828:	79 50                	jns    c000887a <src_process+0x105>
c000882a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008831:	39 fe                	cmp    esi,edi
c0008833:	72 37                	jb     c000886c <src_process+0xf7>
c0008835:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000883c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008843:	68 00 00 70 3f       	push   0x3f700000
c0008848:	6a 00                	push   0x0
c000884a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000884d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008850:	e8 e2 04 02 00       	call   c0028d37 <__ltdf2>
c0008855:	83 c4 10             	add    esp,0x10
c0008858:	85 c0                	test   eax,eax
c000885a:	79 37                	jns    c0008893 <src_process+0x11e>
c000885c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008860:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008864:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008867:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000886a:	eb 27                	jmp    c0008893 <src_process+0x11e>
c000886c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000886f:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008873:	8d 04 86             	lea    eax,[esi+eax*4]
c0008876:	39 c7                	cmp    edi,eax
c0008878:	eb 0d                	jmp    c0008887 <src_process+0x112>
c000887a:	39 fe                	cmp    esi,edi
c000887c:	72 ee                	jb     c000886c <src_process+0xf7>
c000887e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008882:	8d 04 87             	lea    eax,[edi+eax*4]
c0008885:	39 c6                	cmp    esi,eax
c0008887:	73 ac                	jae    c0008835 <src_process+0xc0>
c0008889:	b8 10 00 00 00       	mov    eax,0x10
c000888e:	e9 90 00 00 00       	jmp    c0008923 <src_process+0x1ae>
c0008893:	83 ec 10             	sub    esp,0x10
c0008896:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008899:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000889c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000889f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088a2:	e8 95 fb 01 00       	call   c002843c <__subdf3>
c00088a7:	83 c4 18             	add    esp,0x18
c00088aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088b2:	52                   	push   edx
c00088b3:	50                   	push   eax
c00088b4:	e8 17 06 02 00       	call   c0028ed0 <fabs>
c00088b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088bd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088c1:	83 c4 10             	add    esp,0x10
c00088c4:	68 af 03 d2 3c       	push   0x3cd203af
c00088c9:	68 16 56 e7 9e       	push   0x9ee75616
c00088ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088d6:	e8 5c 04 02 00       	call   c0028d37 <__ltdf2>
c00088db:	83 c4 10             	add    esp,0x10
c00088de:	85 c0                	test   eax,eax
c00088e0:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088e4:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088e8:	79 05                	jns    c00088ef <src_process+0x17a>
c00088ea:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088ed:	eb 03                	jmp    c00088f2 <src_process+0x17d>
c00088ef:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088f2:	83 c4 1c             	add    esp,0x1c
c00088f5:	5b                   	pop    ebx
c00088f6:	5e                   	pop    esi
c00088f7:	5f                   	pop    edi
c00088f8:	5d                   	pop    ebp
c00088f9:	ff e0                	jmp    eax
c00088fb:	b8 02 00 00 00       	mov    eax,0x2
c0008900:	eb 21                	jmp    c0008923 <src_process+0x1ae>
c0008902:	b8 07 00 00 00       	mov    eax,0x7
c0008907:	eb 1a                	jmp    c0008923 <src_process+0x1ae>
c0008909:	b8 12 00 00 00       	mov    eax,0x12
c000890e:	eb 13                	jmp    c0008923 <src_process+0x1ae>
c0008910:	b8 03 00 00 00       	mov    eax,0x3
c0008915:	eb 0c                	jmp    c0008923 <src_process+0x1ae>
c0008917:	b8 04 00 00 00       	mov    eax,0x4
c000891c:	eb 05                	jmp    c0008923 <src_process+0x1ae>
c000891e:	b8 06 00 00 00       	mov    eax,0x6
c0008923:	83 c4 1c             	add    esp,0x1c
c0008926:	5b                   	pop    ebx
c0008927:	5e                   	pop    esi
c0008928:	5f                   	pop    edi
c0008929:	5d                   	pop    ebp
c000892a:	c3                   	ret    

c000892b <src_callback_read>:
c000892b:	55                   	push   ebp
c000892c:	57                   	push   edi
c000892d:	56                   	push   esi
c000892e:	53                   	push   ebx
c000892f:	83 ec 3c             	sub    esp,0x3c
c0008932:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008936:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000893a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000893e:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008942:	85 ed                	test   ebp,ebp
c0008944:	0f 8e 52 01 00 00    	jle    c0008a9c <src_callback_read+0x171>
c000894a:	85 db                	test   ebx,ebx
c000894c:	0f 84 4a 01 00 00    	je     c0008a9c <src_callback_read+0x171>
c0008952:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008959:	74 0c                	je     c0008967 <src_callback_read+0x3c>
c000895b:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008962:	e9 35 01 00 00       	jmp    c0008a9c <src_callback_read+0x171>
c0008967:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000896b:	75 0c                	jne    c0008979 <src_callback_read+0x4e>
c000896d:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008974:	e9 23 01 00 00       	jmp    c0008a9c <src_callback_read+0x171>
c0008979:	51                   	push   ecx
c000897a:	6a 24                	push   0x24
c000897c:	6a 00                	push   0x0
c000897e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008982:	50                   	push   eax
c0008983:	e8 e4 7d ff ff       	call   c000076c <memset>
c0008988:	83 c4 10             	add    esp,0x10
c000898b:	68 00 00 70 3f       	push   0x3f700000
c0008990:	6a 00                	push   0x0
c0008992:	57                   	push   edi
c0008993:	56                   	push   esi
c0008994:	e8 9e 03 02 00       	call   c0028d37 <__ltdf2>
c0008999:	83 c4 10             	add    esp,0x10
c000899c:	85 c0                	test   eax,eax
c000899e:	78 3e                	js     c00089de <src_callback_read+0xb3>
c00089a0:	68 00 00 70 40       	push   0x40700000
c00089a5:	6a 00                	push   0x0
c00089a7:	57                   	push   edi
c00089a8:	56                   	push   esi
c00089a9:	e8 6b 03 02 00       	call   c0028d19 <__gtdf2>
c00089ae:	83 c4 10             	add    esp,0x10
c00089b1:	85 c0                	test   eax,eax
c00089b3:	7f 29                	jg     c00089de <src_callback_read+0xb3>
c00089b5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089b9:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089c1:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089c5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089c8:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089d0:	31 f6                	xor    esi,esi
c00089d2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089d5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089d9:	e9 97 00 00 00       	jmp    c0008a75 <src_callback_read+0x14a>
c00089de:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089e5:	e9 b2 00 00 00       	jmp    c0008a9c <src_callback_read+0x171>
c00089ea:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089f2:	52                   	push   edx
c00089f3:	52                   	push   edx
c00089f4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089f8:	50                   	push   eax
c00089f9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089fc:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a03:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a07:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a0b:	83 c4 10             	add    esp,0x10
c0008a0e:	85 c0                	test   eax,eax
c0008a10:	75 08                	jne    c0008a1a <src_callback_read+0xef>
c0008a12:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a1a:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a21:	50                   	push   eax
c0008a22:	50                   	push   eax
c0008a23:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a27:	50                   	push   eax
c0008a28:	53                   	push   ebx
c0008a29:	e8 47 fd ff ff       	call   c0008775 <src_process>
c0008a2e:	83 c4 10             	add    esp,0x10
c0008a31:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a38:	85 c0                	test   eax,eax
c0008a3a:	75 49                	jne    c0008a85 <src_callback_read+0x15a>
c0008a3c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a40:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a43:	89 f9                	mov    ecx,edi
c0008a45:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a49:	0f af ca             	imul   ecx,edx
c0008a4c:	c1 e1 02             	shl    ecx,0x2
c0008a4f:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a53:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a57:	0f af d1             	imul   edx,ecx
c0008a5a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a5e:	c1 e2 02             	shl    edx,0x2
c0008a61:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a65:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a68:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a6d:	74 12                	je     c0008a81 <src_callback_read+0x156>
c0008a6f:	39 d5                	cmp    ebp,edx
c0008a71:	7e 14                	jle    c0008a87 <src_callback_read+0x15c>
c0008a73:	89 d6                	mov    esi,edx
c0008a75:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a7a:	75 9e                	jne    c0008a1a <src_callback_read+0xef>
c0008a7c:	e9 69 ff ff ff       	jmp    c00089ea <src_callback_read+0xbf>
c0008a81:	85 c9                	test   ecx,ecx
c0008a83:	75 ea                	jne    c0008a6f <src_callback_read+0x144>
c0008a85:	89 f2                	mov    edx,esi
c0008a87:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a8b:	85 c0                	test   eax,eax
c0008a8d:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a90:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a94:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a97:	74 05                	je     c0008a9e <src_callback_read+0x173>
c0008a99:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a9c:	31 d2                	xor    edx,edx
c0008a9e:	83 c4 3c             	add    esp,0x3c
c0008aa1:	89 d0                	mov    eax,edx
c0008aa3:	5b                   	pop    ebx
c0008aa4:	5e                   	pop    esi
c0008aa5:	5f                   	pop    edi
c0008aa6:	5d                   	pop    ebp
c0008aa7:	c3                   	ret    

c0008aa8 <src_set_ratio>:
c0008aa8:	57                   	push   edi
c0008aa9:	ba 02 00 00 00       	mov    edx,0x2
c0008aae:	56                   	push   esi
c0008aaf:	53                   	push   ebx
c0008ab0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ab4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ab8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008abc:	85 db                	test   ebx,ebx
c0008abe:	74 4c                	je     c0008b0c <src_set_ratio+0x64>
c0008ac0:	ba 07 00 00 00       	mov    edx,0x7
c0008ac5:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ac9:	74 41                	je     c0008b0c <src_set_ratio+0x64>
c0008acb:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008acf:	74 3b                	je     c0008b0c <src_set_ratio+0x64>
c0008ad1:	68 00 00 70 3f       	push   0x3f700000
c0008ad6:	6a 00                	push   0x0
c0008ad8:	57                   	push   edi
c0008ad9:	56                   	push   esi
c0008ada:	e8 58 02 02 00       	call   c0028d37 <__ltdf2>
c0008adf:	83 c4 10             	add    esp,0x10
c0008ae2:	ba 06 00 00 00       	mov    edx,0x6
c0008ae7:	85 c0                	test   eax,eax
c0008ae9:	78 21                	js     c0008b0c <src_set_ratio+0x64>
c0008aeb:	68 00 00 70 40       	push   0x40700000
c0008af0:	6a 00                	push   0x0
c0008af2:	57                   	push   edi
c0008af3:	56                   	push   esi
c0008af4:	e8 20 02 02 00       	call   c0028d19 <__gtdf2>
c0008af9:	83 c4 10             	add    esp,0x10
c0008afc:	ba 06 00 00 00       	mov    edx,0x6
c0008b01:	85 c0                	test   eax,eax
c0008b03:	7f 07                	jg     c0008b0c <src_set_ratio+0x64>
c0008b05:	89 33                	mov    DWORD PTR [ebx],esi
c0008b07:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b0a:	31 d2                	xor    edx,edx
c0008b0c:	5b                   	pop    ebx
c0008b0d:	89 d0                	mov    eax,edx
c0008b0f:	5e                   	pop    esi
c0008b10:	5f                   	pop    edi
c0008b11:	c3                   	ret    

c0008b12 <src_get_channels>:
c0008b12:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b16:	b8 02 00 00 00       	mov    eax,0x2
c0008b1b:	85 d2                	test   edx,edx
c0008b1d:	74 14                	je     c0008b33 <src_get_channels+0x21>
c0008b1f:	b8 07 00 00 00       	mov    eax,0x7
c0008b24:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b28:	74 09                	je     c0008b33 <src_get_channels+0x21>
c0008b2a:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b2e:	74 03                	je     c0008b33 <src_get_channels+0x21>
c0008b30:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b33:	c3                   	ret    

c0008b34 <src_reset>:
c0008b34:	53                   	push   ebx
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	83 ec 08             	sub    esp,0x8
c0008b3d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b41:	85 db                	test   ebx,ebx
c0008b43:	74 36                	je     c0008b7b <src_reset+0x47>
c0008b45:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b48:	85 c0                	test   eax,eax
c0008b4a:	74 09                	je     c0008b55 <src_reset+0x21>
c0008b4c:	83 ec 0c             	sub    esp,0xc
c0008b4f:	53                   	push   ebx
c0008b50:	ff d0                	call   eax
c0008b52:	83 c4 10             	add    esp,0x10
c0008b55:	31 c0                	xor    eax,eax
c0008b57:	31 d2                	xor    edx,edx
c0008b59:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b5c:	89 03                	mov    DWORD PTR [ebx],eax
c0008b5e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b61:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b64:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b6b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b72:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b79:	31 c0                	xor    eax,eax
c0008b7b:	83 c4 08             	add    esp,0x8
c0008b7e:	5b                   	pop    ebx
c0008b7f:	c3                   	ret    

c0008b80 <src_new>:
c0008b80:	57                   	push   edi
c0008b81:	56                   	push   esi
c0008b82:	53                   	push   ebx
c0008b83:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b87:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b8b:	85 f6                	test   esi,esi
c0008b8d:	74 73                	je     c0008c02 <src_new+0x82>
c0008b8f:	85 ff                	test   edi,edi
c0008b91:	7f 08                	jg     c0008b9b <src_new+0x1b>
c0008b93:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b99:	eb 1e                	jmp    c0008bb9 <src_new+0x39>
c0008b9b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008ba1:	50                   	push   eax
c0008ba2:	50                   	push   eax
c0008ba3:	6a 3c                	push   0x3c
c0008ba5:	6a 01                	push   0x1
c0008ba7:	e8 b2 6d 00 00       	call   c000f95e <calloc>
c0008bac:	83 c4 10             	add    esp,0x10
c0008baf:	89 c3                	mov    ebx,eax
c0008bb1:	85 c0                	test   eax,eax
c0008bb3:	75 10                	jne    c0008bc5 <src_new+0x45>
c0008bb5:	85 f6                	test   esi,esi
c0008bb7:	75 04                	jne    c0008bbd <src_new+0x3d>
c0008bb9:	31 db                	xor    ebx,ebx
c0008bbb:	eb 4b                	jmp    c0008c08 <src_new+0x88>
c0008bbd:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008bc3:	eb 43                	jmp    c0008c08 <src_new+0x88>
c0008bc5:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bc8:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bcf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bd3:	e8 1d fb ff ff       	call   c00086f5 <psrc_set_converter>
c0008bd8:	85 c0                	test   eax,eax
c0008bda:	74 18                	je     c0008bf4 <src_new+0x74>
c0008bdc:	85 f6                	test   esi,esi
c0008bde:	74 06                	je     c0008be6 <src_new+0x66>
c0008be0:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008be6:	83 ec 0c             	sub    esp,0xc
c0008be9:	53                   	push   ebx
c0008bea:	31 db                	xor    ebx,ebx
c0008bec:	e8 4d 6d 00 00       	call   c000f93e <free>
c0008bf1:	83 c4 10             	add    esp,0x10
c0008bf4:	83 ec 0c             	sub    esp,0xc
c0008bf7:	53                   	push   ebx
c0008bf8:	e8 37 ff ff ff       	call   c0008b34 <src_reset>
c0008bfd:	83 c4 10             	add    esp,0x10
c0008c00:	eb 06                	jmp    c0008c08 <src_new+0x88>
c0008c02:	85 ff                	test   edi,edi
c0008c04:	7f 9b                	jg     c0008ba1 <src_new+0x21>
c0008c06:	eb b1                	jmp    c0008bb9 <src_new+0x39>
c0008c08:	89 d8                	mov    eax,ebx
c0008c0a:	5b                   	pop    ebx
c0008c0b:	5e                   	pop    esi
c0008c0c:	5f                   	pop    edi
c0008c0d:	c3                   	ret    

c0008c0e <src_callback_new>:
c0008c0e:	56                   	push   esi
c0008c0f:	53                   	push   ebx
c0008c10:	53                   	push   ebx
c0008c11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c19:	85 f6                	test   esi,esi
c0008c1b:	75 0e                	jne    c0008c2b <src_callback_new+0x1d>
c0008c1d:	31 db                	xor    ebx,ebx
c0008c1f:	85 c0                	test   eax,eax
c0008c21:	74 47                	je     c0008c6a <src_callback_new+0x5c>
c0008c23:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c29:	eb 3f                	jmp    c0008c6a <src_callback_new+0x5c>
c0008c2b:	85 c0                	test   eax,eax
c0008c2d:	74 06                	je     c0008c35 <src_callback_new+0x27>
c0008c2f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c35:	51                   	push   ecx
c0008c36:	50                   	push   eax
c0008c37:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c3b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c3f:	e8 3c ff ff ff       	call   c0008b80 <src_new>
c0008c44:	83 c4 10             	add    esp,0x10
c0008c47:	89 c3                	mov    ebx,eax
c0008c49:	85 c0                	test   eax,eax
c0008c4b:	74 1d                	je     c0008c6a <src_callback_new+0x5c>
c0008c4d:	83 ec 0c             	sub    esp,0xc
c0008c50:	50                   	push   eax
c0008c51:	e8 de fe ff ff       	call   c0008b34 <src_reset>
c0008c56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c5a:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c61:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c64:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c67:	83 c4 10             	add    esp,0x10
c0008c6a:	89 d8                	mov    eax,ebx
c0008c6c:	5a                   	pop    edx
c0008c6d:	5b                   	pop    ebx
c0008c6e:	5e                   	pop    esi
c0008c6f:	c3                   	ret    

c0008c70 <src_get_name>:
c0008c70:	53                   	push   ebx
c0008c71:	83 ec 14             	sub    esp,0x14
c0008c74:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c78:	53                   	push   ebx
c0008c79:	e8 d0 4f 00 00       	call   c000dc4e <sinc_get_name>
c0008c7e:	83 c4 10             	add    esp,0x10
c0008c81:	85 c0                	test   eax,eax
c0008c83:	75 1d                	jne    c0008ca2 <src_get_name+0x32>
c0008c85:	83 ec 0c             	sub    esp,0xc
c0008c88:	53                   	push   ebx
c0008c89:	e8 80 57 00 00       	call   c000e40e <zoh_get_name>
c0008c8e:	83 c4 10             	add    esp,0x10
c0008c91:	85 c0                	test   eax,eax
c0008c93:	75 0d                	jne    c0008ca2 <src_get_name+0x32>
c0008c95:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c99:	83 c4 08             	add    esp,0x8
c0008c9c:	5b                   	pop    ebx
c0008c9d:	e9 74 0b 00 00       	jmp    c0009816 <linear_get_name>
c0008ca2:	83 c4 08             	add    esp,0x8
c0008ca5:	5b                   	pop    ebx
c0008ca6:	c3                   	ret    

c0008ca7 <src_get_description>:
c0008ca7:	53                   	push   ebx
c0008ca8:	83 ec 14             	sub    esp,0x14
c0008cab:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008caf:	53                   	push   ebx
c0008cb0:	e8 ac 4f 00 00       	call   c000dc61 <sinc_get_description>
c0008cb5:	83 c4 10             	add    esp,0x10
c0008cb8:	85 c0                	test   eax,eax
c0008cba:	75 1d                	jne    c0008cd9 <src_get_description+0x32>
c0008cbc:	83 ec 0c             	sub    esp,0xc
c0008cbf:	53                   	push   ebx
c0008cc0:	e8 58 57 00 00       	call   c000e41d <zoh_get_description>
c0008cc5:	83 c4 10             	add    esp,0x10
c0008cc8:	85 c0                	test   eax,eax
c0008cca:	75 0d                	jne    c0008cd9 <src_get_description+0x32>
c0008ccc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cd0:	83 c4 08             	add    esp,0x8
c0008cd3:	5b                   	pop    ebx
c0008cd4:	e9 4c 0b 00 00       	jmp    c0009825 <linear_get_description>
c0008cd9:	83 c4 08             	add    esp,0x8
c0008cdc:	5b                   	pop    ebx
c0008cdd:	c3                   	ret    

c0008cde <src_get_version>:
c0008cde:	b8 60 a2 02 c0       	mov    eax,0xc002a260
c0008ce3:	c3                   	ret    

c0008ce4 <src_is_valid_ratio>:
c0008ce4:	83 ec 1c             	sub    esp,0x1c
c0008ce7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008ceb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cf3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cf7:	68 00 00 70 3f       	push   0x3f700000
c0008cfc:	6a 00                	push   0x0
c0008cfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d06:	e8 2c 00 02 00       	call   c0028d37 <__ltdf2>
c0008d0b:	83 c4 10             	add    esp,0x10
c0008d0e:	31 d2                	xor    edx,edx
c0008d10:	85 c0                	test   eax,eax
c0008d12:	78 1e                	js     c0008d32 <src_is_valid_ratio+0x4e>
c0008d14:	68 00 00 70 40       	push   0x40700000
c0008d19:	6a 00                	push   0x0
c0008d1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d23:	e8 f1 ff 01 00       	call   c0028d19 <__gtdf2>
c0008d28:	31 d2                	xor    edx,edx
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	85 c0                	test   eax,eax
c0008d2f:	0f 9e c2             	setle  dl
c0008d32:	89 d0                	mov    eax,edx
c0008d34:	83 c4 1c             	add    esp,0x1c
c0008d37:	c3                   	ret    

c0008d38 <src_error>:
c0008d38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d3c:	31 c0                	xor    eax,eax
c0008d3e:	85 d2                	test   edx,edx
c0008d40:	74 03                	je     c0008d45 <src_error+0xd>
c0008d42:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d45:	c3                   	ret    

c0008d46 <src_strerror>:
c0008d46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d4a:	31 c0                	xor    eax,eax
c0008d4c:	83 fa 17             	cmp    edx,0x17
c0008d4f:	77 07                	ja     c0008d58 <src_strerror+0x12>
c0008d51:	8b 04 95 c0 a6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5940]
c0008d58:	c3                   	ret    

c0008d59 <src_simple>:
c0008d59:	56                   	push   esi
c0008d5a:	53                   	push   ebx
c0008d5b:	83 ec 18             	sub    esp,0x18
c0008d5e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d62:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d66:	50                   	push   eax
c0008d67:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d6b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d6f:	e8 0c fe ff ff       	call   c0008b80 <src_new>
c0008d74:	83 c4 10             	add    esp,0x10
c0008d77:	85 c0                	test   eax,eax
c0008d79:	75 06                	jne    c0008d81 <src_simple+0x28>
c0008d7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d7f:	eb 25                	jmp    c0008da6 <src_simple+0x4d>
c0008d81:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d88:	89 c3                	mov    ebx,eax
c0008d8a:	50                   	push   eax
c0008d8b:	50                   	push   eax
c0008d8c:	56                   	push   esi
c0008d8d:	53                   	push   ebx
c0008d8e:	e8 e2 f9 ff ff       	call   c0008775 <src_process>
c0008d93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d96:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d9a:	e8 9a f9 ff ff       	call   c0008739 <src_delete>
c0008d9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008da3:	83 c4 10             	add    esp,0x10
c0008da6:	83 c4 14             	add    esp,0x14
c0008da9:	5b                   	pop    ebx
c0008daa:	5e                   	pop    esi
c0008dab:	c3                   	ret    

c0008dac <src_short_to_float_array>:
c0008dac:	53                   	push   ebx
c0008dad:	83 ec 18             	sub    esp,0x18
c0008db0:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008db4:	85 db                	test   ebx,ebx
c0008db6:	74 54                	je     c0008e0c <src_short_to_float_array+0x60>
c0008db8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008dbc:	4b                   	dec    ebx
c0008dbd:	83 ec 0c             	sub    esp,0xc
c0008dc0:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008dc4:	50                   	push   eax
c0008dc5:	e8 01 fd 01 00       	call   c0028acb <__floatsidf>
c0008dca:	83 c4 10             	add    esp,0x10
c0008dcd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008dd1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dd5:	68 00 00 00 3f       	push   0x3f000000
c0008dda:	6a 00                	push   0x0
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de4:	e8 7f f6 01 00       	call   c0028468 <__muldf3>
c0008de9:	59                   	pop    ecx
c0008dea:	59                   	pop    ecx
c0008deb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008def:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008df3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008df7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dfb:	e8 3b ff 01 00       	call   c0028d3b <__truncdfsf2>
c0008e00:	83 c4 10             	add    esp,0x10
c0008e03:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e07:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e0a:	eb a8                	jmp    c0008db4 <src_short_to_float_array+0x8>
c0008e0c:	83 c4 18             	add    esp,0x18
c0008e0f:	5b                   	pop    ebx
c0008e10:	c3                   	ret    

c0008e11 <src_float_to_short_array>:
c0008e11:	56                   	push   esi
c0008e12:	53                   	push   ebx
c0008e13:	83 ec 14             	sub    esp,0x14
c0008e16:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e1a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e1e:	85 db                	test   ebx,ebx
c0008e20:	0f 84 a4 00 00 00    	je     c0008eca <src_float_to_short_array+0xb9>
c0008e26:	83 ec 0c             	sub    esp,0xc
c0008e29:	4b                   	dec    ebx
c0008e2a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e2e:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e31:	e8 29 00 02 00       	call   c0028e5f <__extendsfdf2>
c0008e36:	83 c4 10             	add    esp,0x10
c0008e39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e41:	68 00 00 e0 41       	push   0x41e00000
c0008e46:	6a 00                	push   0x0
c0008e48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e50:	e8 13 f6 01 00       	call   c0028468 <__muldf3>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 ff ff df 41       	push   0x41dfffff
c0008e65:	68 00 00 c0 ff       	push   0xffc00000
c0008e6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e72:	e8 be fe 01 00       	call   c0028d35 <__gedf2>
c0008e77:	83 c4 10             	add    esp,0x10
c0008e7a:	85 c0                	test   eax,eax
c0008e7c:	78 08                	js     c0008e86 <src_float_to_short_array+0x75>
c0008e7e:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e84:	eb 98                	jmp    c0008e1e <src_float_to_short_array+0xd>
c0008e86:	68 00 00 e0 c1       	push   0xc1e00000
c0008e8b:	6a 00                	push   0x0
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e95:	e8 9f fe 01 00       	call   c0028d39 <__ledf2>
c0008e9a:	83 c4 10             	add    esp,0x10
c0008e9d:	85 c0                	test   eax,eax
c0008e9f:	7f 0b                	jg     c0008eac <src_float_to_short_array+0x9b>
c0008ea1:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ea7:	e9 72 ff ff ff       	jmp    c0008e1e <src_float_to_short_array+0xd>
c0008eac:	50                   	push   eax
c0008ead:	50                   	push   eax
c0008eae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb6:	e8 35 00 02 00       	call   c0028ef0 <lrint>
c0008ebb:	83 c4 10             	add    esp,0x10
c0008ebe:	c1 f8 10             	sar    eax,0x10
c0008ec1:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ec5:	e9 54 ff ff ff       	jmp    c0008e1e <src_float_to_short_array+0xd>
c0008eca:	83 c4 14             	add    esp,0x14
c0008ecd:	5b                   	pop    ebx
c0008ece:	5e                   	pop    esi
c0008ecf:	c3                   	ret    

c0008ed0 <src_int_to_float_array>:
c0008ed0:	53                   	push   ebx
c0008ed1:	83 ec 18             	sub    esp,0x18
c0008ed4:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ed8:	85 db                	test   ebx,ebx
c0008eda:	74 52                	je     c0008f2e <src_int_to_float_array+0x5e>
c0008edc:	83 ec 0c             	sub    esp,0xc
c0008edf:	4b                   	dec    ebx
c0008ee0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ee4:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ee7:	e8 df fb 01 00       	call   c0028acb <__floatsidf>
c0008eec:	83 c4 10             	add    esp,0x10
c0008eef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ef3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ef7:	68 00 00 00 3e       	push   0x3e000000
c0008efc:	6a 00                	push   0x0
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f06:	e8 5d f5 01 00       	call   c0028468 <__muldf3>
c0008f0b:	59                   	pop    ecx
c0008f0c:	59                   	pop    ecx
c0008f0d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f11:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f1d:	e8 19 fe 01 00       	call   c0028d3b <__truncdfsf2>
c0008f22:	83 c4 10             	add    esp,0x10
c0008f25:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f29:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f2c:	eb aa                	jmp    c0008ed8 <src_int_to_float_array+0x8>
c0008f2e:	83 c4 18             	add    esp,0x18
c0008f31:	5b                   	pop    ebx
c0008f32:	c3                   	ret    

c0008f33 <src_float_to_int_array>:
c0008f33:	56                   	push   esi
c0008f34:	53                   	push   ebx
c0008f35:	83 ec 14             	sub    esp,0x14
c0008f38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f3c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f40:	85 db                	test   ebx,ebx
c0008f42:	0f 84 a2 00 00 00    	je     c0008fea <src_float_to_int_array+0xb7>
c0008f48:	83 ec 0c             	sub    esp,0xc
c0008f4b:	4b                   	dec    ebx
c0008f4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f50:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f53:	e8 07 ff 01 00       	call   c0028e5f <__extendsfdf2>
c0008f58:	83 c4 10             	add    esp,0x10
c0008f5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f5f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f63:	68 00 00 e0 41       	push   0x41e00000
c0008f68:	6a 00                	push   0x0
c0008f6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f72:	e8 f1 f4 01 00       	call   c0028468 <__muldf3>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 ff ff df 41       	push   0x41dfffff
c0008f87:	68 00 00 c0 ff       	push   0xffc00000
c0008f8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f94:	e8 9c fd 01 00       	call   c0028d35 <__gedf2>
c0008f99:	83 c4 10             	add    esp,0x10
c0008f9c:	85 c0                	test   eax,eax
c0008f9e:	78 09                	js     c0008fa9 <src_float_to_int_array+0x76>
c0008fa0:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fa7:	eb 97                	jmp    c0008f40 <src_float_to_int_array+0xd>
c0008fa9:	68 00 00 e0 c1       	push   0xc1e00000
c0008fae:	6a 00                	push   0x0
c0008fb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb8:	e8 7c fd 01 00       	call   c0028d39 <__ledf2>
c0008fbd:	83 c4 10             	add    esp,0x10
c0008fc0:	85 c0                	test   eax,eax
c0008fc2:	7f 0c                	jg     c0008fd0 <src_float_to_int_array+0x9d>
c0008fc4:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fcb:	e9 70 ff ff ff       	jmp    c0008f40 <src_float_to_int_array+0xd>
c0008fd0:	50                   	push   eax
c0008fd1:	50                   	push   eax
c0008fd2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fda:	e8 11 ff 01 00       	call   c0028ef0 <lrint>
c0008fdf:	83 c4 10             	add    esp,0x10
c0008fe2:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fe5:	e9 56 ff ff ff       	jmp    c0008f40 <src_float_to_int_array+0xd>
c0008fea:	83 c4 14             	add    esp,0x14
c0008fed:	5b                   	pop    ebx
c0008fee:	5e                   	pop    esi
c0008fef:	c3                   	ret    

c0008ff0 <linear_vari_process>:
c0008ff0:	55                   	push   ebp
c0008ff1:	31 d2                	xor    edx,edx
c0008ff3:	57                   	push   edi
c0008ff4:	56                   	push   esi
c0008ff5:	53                   	push   ebx
c0008ff6:	83 ec 3c             	sub    esp,0x3c
c0008ff9:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008ffd:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009001:	0f 8e d3 07 00 00    	jle    c00097da <linear_vari_process+0x7ea>
c0009007:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000900b:	ba 05 00 00 00       	mov    edx,0x5
c0009010:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009013:	85 db                	test   ebx,ebx
c0009015:	0f 84 bf 07 00 00    	je     c00097da <linear_vari_process+0x7ea>
c000901b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000901e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009022:	74 19                	je     c000903d <linear_vari_process+0x4d>
c0009024:	31 d2                	xor    edx,edx
c0009026:	39 c2                	cmp    edx,eax
c0009028:	7d 0c                	jge    c0009036 <linear_vari_process+0x46>
c000902a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000902c:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000902f:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009033:	42                   	inc    edx
c0009034:	eb f0                	jmp    c0009026 <linear_vari_process+0x36>
c0009036:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000903d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009040:	0f af d0             	imul   edx,eax
c0009043:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009046:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000904a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009051:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009054:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000905b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000905f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009062:	8b 00                	mov    eax,DWORD PTR [eax]
c0009064:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009068:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000906c:	68 00 00 70 3f       	push   0x3f700000
c0009071:	6a 00                	push   0x0
c0009073:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009077:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000907b:	e8 b7 fc 01 00       	call   c0028d37 <__ltdf2>
c0009080:	83 c4 10             	add    esp,0x10
c0009083:	ba 16 00 00 00       	mov    edx,0x16
c0009088:	85 c0                	test   eax,eax
c000908a:	0f 88 4a 07 00 00    	js     c00097da <linear_vari_process+0x7ea>
c0009090:	68 00 00 70 40       	push   0x40700000
c0009095:	6a 00                	push   0x0
c0009097:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909f:	e8 75 fc 01 00       	call   c0028d19 <__gtdf2>
c00090a4:	83 c4 10             	add    esp,0x10
c00090a7:	ba 16 00 00 00       	mov    edx,0x16
c00090ac:	85 c0                	test   eax,eax
c00090ae:	0f 8f 26 07 00 00    	jg     c00097da <linear_vari_process+0x7ea>
c00090b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090b8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090bb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090c6:	68 00 00 f0 3f       	push   0x3ff00000
c00090cb:	6a 00                	push   0x0
c00090cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090d5:	e8 5d fc 01 00       	call   c0028d37 <__ltdf2>
c00090da:	83 c4 10             	add    esp,0x10
c00090dd:	85 c0                	test   eax,eax
c00090df:	0f 89 89 02 00 00    	jns    c000936e <linear_vari_process+0x37e>
c00090e5:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090e8:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090eb:	0f 8d 7d 02 00 00    	jge    c000936e <linear_vari_process+0x37e>
c00090f1:	83 ec 0c             	sub    esp,0xc
c00090f4:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090f7:	e8 cf f9 01 00       	call   c0028acb <__floatsidf>
c00090fc:	83 c4 10             	add    esp,0x10
c00090ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0009102:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009106:	68 00 00 f0 3f       	push   0x3ff00000
c000910b:	6a 00                	push   0x0
c000910d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009111:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009115:	e8 d1 ec 01 00       	call   c0027deb <__adddf3>
c000911a:	83 c4 10             	add    esp,0x10
c000911d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009121:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009125:	52                   	push   edx
c0009126:	50                   	push   eax
c0009127:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000912b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000912f:	e8 34 f3 01 00       	call   c0028468 <__muldf3>
c0009134:	5d                   	pop    ebp
c0009135:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009139:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000913d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009140:	e8 86 f9 01 00       	call   c0028acb <__floatsidf>
c0009145:	83 c4 10             	add    esp,0x10
c0009148:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000914c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009150:	52                   	push   edx
c0009151:	50                   	push   eax
c0009152:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009156:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000915a:	e8 8c ec 01 00       	call   c0027deb <__adddf3>
c000915f:	59                   	pop    ecx
c0009160:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009164:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009168:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000916b:	e8 5b f9 01 00       	call   c0028acb <__floatsidf>
c0009170:	83 c4 10             	add    esp,0x10
c0009173:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009177:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000917b:	52                   	push   edx
c000917c:	50                   	push   eax
c000917d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009181:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009185:	e8 ab fb 01 00       	call   c0028d35 <__gedf2>
c000918a:	83 c4 10             	add    esp,0x10
c000918d:	85 c0                	test   eax,eax
c000918f:	0f 89 d9 01 00 00    	jns    c000936e <linear_vari_process+0x37e>
c0009195:	85 ff                	test   edi,edi
c0009197:	0f 8e f4 00 00 00    	jle    c0009291 <linear_vari_process+0x2a1>
c000919d:	83 ec 10             	sub    esp,0x10
c00091a0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091a3:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091a6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091aa:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091ad:	ff 30                	push   DWORD PTR [eax]
c00091af:	e8 88 f2 01 00       	call   c002843c <__subdf3>
c00091b4:	83 c4 18             	add    esp,0x18
c00091b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091bf:	52                   	push   edx
c00091c0:	50                   	push   eax
c00091c1:	e8 0a fd 01 00       	call   c0028ed0 <fabs>
c00091c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ce:	83 c4 10             	add    esp,0x10
c00091d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091d6:	68 23 42 92 0c       	push   0xc924223
c00091db:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091e3:	e8 31 fb 01 00       	call   c0028d19 <__gtdf2>
c00091e8:	83 c4 10             	add    esp,0x10
c00091eb:	85 c0                	test   eax,eax
c00091ed:	0f 8e 9e 00 00 00    	jle    c0009291 <linear_vari_process+0x2a1>
c00091f3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091f7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00091fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009200:	89 04 24             	mov    DWORD PTR [esp],eax
c0009203:	52                   	push   edx
c0009204:	50                   	push   eax
c0009205:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009208:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000920b:	e8 2c f2 01 00       	call   c002843c <__subdf3>
c0009210:	59                   	pop    ecx
c0009211:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009215:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009219:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000921c:	e8 aa f8 01 00       	call   c0028acb <__floatsidf>
c0009221:	83 c4 10             	add    esp,0x10
c0009224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000922c:	52                   	push   edx
c000922d:	50                   	push   eax
c000922e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009236:	e8 2d f2 01 00       	call   c0028468 <__muldf3>
c000923b:	5f                   	pop    edi
c000923c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009240:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009244:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009247:	e8 7f f8 01 00       	call   c0028acb <__floatsidf>
c000924c:	83 c4 10             	add    esp,0x10
c000924f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009253:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009257:	52                   	push   edx
c0009258:	50                   	push   eax
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009261:	e8 e6 f4 01 00       	call   c002874c <__divdf3>
c0009266:	83 c4 10             	add    esp,0x10
c0009269:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000926d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009271:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009275:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009279:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009281:	e8 65 eb 01 00       	call   c0027deb <__adddf3>
c0009286:	83 c4 10             	add    esp,0x10
c0009289:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009291:	31 ff                	xor    edi,edi
c0009293:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009296:	0f 8e 9d 00 00 00    	jle    c0009339 <linear_vari_process+0x349>
c000929c:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c000929f:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092a3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092a6:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00092ad:	8b 06                	mov    eax,DWORD PTR [esi]
c00092af:	52                   	push   edx
c00092b0:	52                   	push   edx
c00092b1:	55                   	push   ebp
c00092b2:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092b5:	47                   	inc    edi
c00092b6:	e8 c5 e4 01 00       	call   c0027780 <__subsf3>
c00092bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00092be:	e8 9c fb 01 00       	call   c0028e5f <__extendsfdf2>
c00092c3:	83 c4 10             	add    esp,0x10
c00092c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092ca:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092de:	e8 85 f1 01 00       	call   c0028468 <__muldf3>
c00092e3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092e6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092ee:	e8 6c fb 01 00       	call   c0028e5f <__extendsfdf2>
c00092f3:	83 c4 10             	add    esp,0x10
c00092f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092fa:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fe:	52                   	push   edx
c00092ff:	50                   	push   eax
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009308:	e8 de ea 01 00       	call   c0027deb <__adddf3>
c000930d:	59                   	pop    ecx
c000930e:	5d                   	pop    ebp
c000930f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009313:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009317:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000931b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000931f:	e8 17 fa 01 00       	call   c0028d3b <__truncdfsf2>
c0009324:	83 c4 10             	add    esp,0x10
c0009327:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000932a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000932e:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009331:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009334:	e9 5a ff ff ff       	jmp    c0009293 <linear_vari_process+0x2a3>
c0009339:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000933d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009341:	68 00 00 f0 3f       	push   0x3ff00000
c0009346:	6a 00                	push   0x0
c0009348:	e8 ff f3 01 00       	call   c002874c <__divdf3>
c000934d:	83 c4 10             	add    esp,0x10
c0009350:	89 04 24             	mov    DWORD PTR [esp],eax
c0009353:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009357:	52                   	push   edx
c0009358:	50                   	push   eax
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009361:	e8 85 ea 01 00       	call   c0027deb <__adddf3>
c0009366:	83 c4 10             	add    esp,0x10
c0009369:	e9 50 fd ff ff       	jmp    c00090be <linear_vari_process+0xce>
c000936e:	50                   	push   eax
c000936f:	50                   	push   eax
c0009370:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009374:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009378:	e8 73 fb 01 00       	call   c0028ef0 <lrint>
c000937d:	83 ec 0c             	sub    esp,0xc
c0009380:	50                   	push   eax
c0009381:	e8 45 f7 01 00       	call   c0028acb <__floatsidf>
c0009386:	83 c4 10             	add    esp,0x10
c0009389:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000938d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009391:	52                   	push   edx
c0009392:	50                   	push   eax
c0009393:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009397:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000939b:	e8 9c f0 01 00       	call   c002843c <__subdf3>
c00093a0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093a4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093a8:	83 c4 20             	add    esp,0x20
c00093ab:	6a 00                	push   0x0
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 7b f9 01 00       	call   c0028d37 <__ltdf2>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	85 c0                	test   eax,eax
c00093c1:	79 1e                	jns    c00093e1 <linear_vari_process+0x3f1>
c00093c3:	68 00 00 f0 3f       	push   0x3ff00000
c00093c8:	6a 00                	push   0x0
c00093ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	e8 14 ea 01 00       	call   c0027deb <__adddf3>
c00093d7:	83 c4 10             	add    esp,0x10
c00093da:	89 04 24             	mov    DWORD PTR [esp],eax
c00093dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093e4:	83 ec 10             	sub    esp,0x10
c00093e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093f7:	e8 40 f0 01 00       	call   c002843c <__subdf3>
c00093fc:	83 c4 18             	add    esp,0x18
c00093ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009403:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009407:	52                   	push   edx
c0009408:	50                   	push   eax
c0009409:	e8 e2 fa 01 00       	call   c0028ef0 <lrint>
c000940e:	83 c4 10             	add    esp,0x10
c0009411:	0f af f8             	imul   edi,eax
c0009414:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009417:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c000941a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000941d:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009420:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009423:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009427:	0f 8d 13 03 00 00    	jge    c0009740 <linear_vari_process+0x750>
c000942d:	83 ec 0c             	sub    esp,0xc
c0009430:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009433:	e8 93 f6 01 00       	call   c0028acb <__floatsidf>
c0009438:	83 c4 10             	add    esp,0x10
c000943b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000943f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009443:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009447:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000944b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000944f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009453:	e8 10 f0 01 00       	call   c0028468 <__muldf3>
c0009458:	89 3c 24             	mov    DWORD PTR [esp],edi
c000945b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000945f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009463:	e8 63 f6 01 00       	call   c0028acb <__floatsidf>
c0009468:	83 c4 10             	add    esp,0x10
c000946b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009473:	52                   	push   edx
c0009474:	50                   	push   eax
c0009475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947d:	e8 69 e9 01 00       	call   c0027deb <__adddf3>
c0009482:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009485:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009489:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000948d:	e8 39 f6 01 00       	call   c0028acb <__floatsidf>
c0009492:	83 c4 10             	add    esp,0x10
c0009495:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009499:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000949d:	52                   	push   edx
c000949e:	50                   	push   eax
c000949f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a7:	e8 8b f8 01 00       	call   c0028d37 <__ltdf2>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	85 c0                	test   eax,eax
c00094b1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094b5:	0f 89 85 02 00 00    	jns    c0009740 <linear_vari_process+0x750>
c00094bb:	85 c9                	test   ecx,ecx
c00094bd:	0f 8e f5 00 00 00    	jle    c00095b8 <linear_vari_process+0x5c8>
c00094c3:	83 ec 10             	sub    esp,0x10
c00094c6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094c9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094cc:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094d0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094d3:	ff 30                	push   DWORD PTR [eax]
c00094d5:	e8 62 ef 01 00       	call   c002843c <__subdf3>
c00094da:	83 c4 18             	add    esp,0x18
c00094dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094e5:	52                   	push   edx
c00094e6:	50                   	push   eax
c00094e7:	e8 e4 f9 01 00       	call   c0028ed0 <fabs>
c00094ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094f0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094f4:	83 c4 10             	add    esp,0x10
c00094f7:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094fc:	68 23 42 92 0c       	push   0xc924223
c0009501:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009505:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009509:	e8 0b f8 01 00       	call   c0028d19 <__gtdf2>
c000950e:	83 c4 10             	add    esp,0x10
c0009511:	85 c0                	test   eax,eax
c0009513:	0f 8e 9f 00 00 00    	jle    c00095b8 <linear_vari_process+0x5c8>
c0009519:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000951d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009520:	8b 00                	mov    eax,DWORD PTR [eax]
c0009522:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009526:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000952a:	52                   	push   edx
c000952b:	50                   	push   eax
c000952c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000952f:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009532:	e8 05 ef 01 00       	call   c002843c <__subdf3>
c0009537:	5f                   	pop    edi
c0009538:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000953c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009540:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009543:	e8 83 f5 01 00       	call   c0028acb <__floatsidf>
c0009548:	83 c4 10             	add    esp,0x10
c000954b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000954f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009553:	52                   	push   edx
c0009554:	50                   	push   eax
c0009555:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009559:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000955d:	e8 06 ef 01 00       	call   c0028468 <__muldf3>
c0009562:	5d                   	pop    ebp
c0009563:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009567:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000956b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000956e:	e8 58 f5 01 00       	call   c0028acb <__floatsidf>
c0009573:	83 c4 10             	add    esp,0x10
c0009576:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000957a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000957e:	52                   	push   edx
c000957f:	50                   	push   eax
c0009580:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009584:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009588:	e8 bf f1 01 00       	call   c002874c <__divdf3>
c000958d:	83 c4 10             	add    esp,0x10
c0009590:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009598:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000959c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a8:	e8 3e e8 01 00       	call   c0027deb <__adddf3>
c00095ad:	83 c4 10             	add    esp,0x10
c00095b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b8:	31 ff                	xor    edi,edi
c00095ba:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095bd:	39 f8                	cmp    eax,edi
c00095bf:	0f 8e ac 00 00 00    	jle    c0009671 <linear_vari_process+0x681>
c00095c5:	8b 16                	mov    edx,DWORD PTR [esi]
c00095c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095ca:	29 c1                	sub    ecx,eax
c00095cc:	89 c8                	mov    eax,ecx
c00095ce:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095d1:	01 f8                	add    eax,edi
c00095d3:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095d7:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095da:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095e1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095e4:	51                   	push   ecx
c00095e5:	01 f8                	add    eax,edi
c00095e7:	51                   	push   ecx
c00095e8:	47                   	inc    edi
c00095e9:	55                   	push   ebp
c00095ea:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095ed:	e8 8e e1 01 00       	call   c0027780 <__subsf3>
c00095f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00095f5:	e8 65 f8 01 00       	call   c0028e5f <__extendsfdf2>
c00095fa:	83 c4 10             	add    esp,0x10
c00095fd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009601:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009605:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009609:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000960d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009611:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009615:	e8 4e ee 01 00       	call   c0028468 <__muldf3>
c000961a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000961d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009621:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009625:	e8 35 f8 01 00       	call   c0028e5f <__extendsfdf2>
c000962a:	83 c4 10             	add    esp,0x10
c000962d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009631:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009635:	52                   	push   edx
c0009636:	50                   	push   eax
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963f:	e8 a7 e7 01 00       	call   c0027deb <__adddf3>
c0009644:	5d                   	pop    ebp
c0009645:	59                   	pop    ecx
c0009646:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000964a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000964e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009652:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009656:	e8 e0 f6 01 00       	call   c0028d3b <__truncdfsf2>
c000965b:	83 c4 10             	add    esp,0x10
c000965e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009662:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009666:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009669:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000966c:	e9 49 ff ff ff       	jmp    c00095ba <linear_vari_process+0x5ca>
c0009671:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009675:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009679:	68 00 00 f0 3f       	push   0x3ff00000
c000967e:	6a 00                	push   0x0
c0009680:	e8 c7 f0 01 00       	call   c002874c <__divdf3>
c0009685:	83 c4 10             	add    esp,0x10
c0009688:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000968c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009690:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009694:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096a0:	e8 46 e7 01 00       	call   c0027deb <__adddf3>
c00096a5:	59                   	pop    ecx
c00096a6:	5f                   	pop    edi
c00096a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b7:	e8 34 f8 01 00       	call   c0028ef0 <lrint>
c00096bc:	83 ec 0c             	sub    esp,0xc
c00096bf:	50                   	push   eax
c00096c0:	e8 06 f4 01 00       	call   c0028acb <__floatsidf>
c00096c5:	83 c4 10             	add    esp,0x10
c00096c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096cc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096d0:	52                   	push   edx
c00096d1:	50                   	push   eax
c00096d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096da:	e8 5d ed 01 00       	call   c002843c <__subdf3>
c00096df:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096e3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096e7:	83 c4 20             	add    esp,0x20
c00096ea:	6a 00                	push   0x0
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 3c f6 01 00       	call   c0028d37 <__ltdf2>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	85 c0                	test   eax,eax
c0009700:	79 1e                	jns    c0009720 <linear_vari_process+0x730>
c0009702:	68 00 00 f0 3f       	push   0x3ff00000
c0009707:	6a 00                	push   0x0
c0009709:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	e8 d5 e6 01 00       	call   c0027deb <__adddf3>
c0009716:	83 c4 10             	add    esp,0x10
c0009719:	89 04 24             	mov    DWORD PTR [esp],eax
c000971c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009720:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009723:	83 ec 10             	sub    esp,0x10
c0009726:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000972a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000972e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009732:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009736:	e8 01 ed 01 00       	call   c002843c <__subdf3>
c000973b:	e9 bc fc ff ff       	jmp    c00093fc <linear_vari_process+0x40c>
c0009740:	39 fd                	cmp    ebp,edi
c0009742:	7d 38                	jge    c000977c <linear_vari_process+0x78c>
c0009744:	83 ec 0c             	sub    esp,0xc
c0009747:	89 f8                	mov    eax,edi
c0009749:	29 e8                	sub    eax,ebp
c000974b:	99                   	cdq    
c000974c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000974f:	50                   	push   eax
c0009750:	e8 76 f3 01 00       	call   c0028acb <__floatsidf>
c0009755:	83 c4 10             	add    esp,0x10
c0009758:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000975c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009760:	52                   	push   edx
c0009761:	50                   	push   eax
c0009762:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009766:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000976a:	e8 7c e6 01 00       	call   c0027deb <__adddf3>
c000976f:	83 c4 10             	add    esp,0x10
c0009772:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009775:	89 04 24             	mov    DWORD PTR [esp],eax
c0009778:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000977c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009780:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009783:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009787:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000978a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000978d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009790:	85 c0                	test   eax,eax
c0009792:	7f 29                	jg     c00097bd <linear_vari_process+0x7cd>
c0009794:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000979c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097a0:	89 01                	mov    DWORD PTR [ecx],eax
c00097a2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097a5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097a8:	99                   	cdq    
c00097a9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097ac:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097af:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097b2:	99                   	cdq    
c00097b3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097b6:	31 d2                	xor    edx,edx
c00097b8:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097bb:	eb 1d                	jmp    c00097da <linear_vari_process+0x7ea>
c00097bd:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097c0:	31 d2                	xor    edx,edx
c00097c2:	29 c8                	sub    eax,ecx
c00097c4:	c1 e0 02             	shl    eax,0x2
c00097c7:	39 d1                	cmp    ecx,edx
c00097c9:	7e c9                	jle    c0009794 <linear_vari_process+0x7a4>
c00097cb:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097cd:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097d0:	83 c0 04             	add    eax,0x4
c00097d3:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097d7:	42                   	inc    edx
c00097d8:	eb ed                	jmp    c00097c7 <linear_vari_process+0x7d7>
c00097da:	83 c4 3c             	add    esp,0x3c
c00097dd:	89 d0                	mov    eax,edx
c00097df:	5b                   	pop    ebx
c00097e0:	5e                   	pop    esi
c00097e1:	5f                   	pop    edi
c00097e2:	5d                   	pop    ebp
c00097e3:	c3                   	ret    

c00097e4 <linear_reset>:
c00097e4:	83 ec 0c             	sub    esp,0xc
c00097e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097eb:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097ee:	85 c0                	test   eax,eax
c00097f0:	74 20                	je     c0009812 <linear_reset+0x2e>
c00097f2:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097f5:	83 c0 1c             	add    eax,0x1c
c00097f8:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097fb:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009802:	c1 e2 02             	shl    edx,0x2
c0009805:	51                   	push   ecx
c0009806:	52                   	push   edx
c0009807:	6a 00                	push   0x0
c0009809:	50                   	push   eax
c000980a:	e8 5d 6f ff ff       	call   c000076c <memset>
c000980f:	83 c4 10             	add    esp,0x10
c0009812:	83 c4 0c             	add    esp,0xc
c0009815:	c3                   	ret    

c0009816 <linear_get_name>:
c0009816:	31 c0                	xor    eax,eax
c0009818:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000981d:	75 05                	jne    c0009824 <linear_get_name+0xe>
c000981f:	b8 20 a7 02 c0       	mov    eax,0xc002a720
c0009824:	c3                   	ret    

c0009825 <linear_get_description>:
c0009825:	31 c0                	xor    eax,eax
c0009827:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000982c:	75 05                	jne    c0009833 <linear_get_description+0xe>
c000982e:	b8 34 a7 02 c0       	mov    eax,0xc002a734
c0009833:	c3                   	ret    

c0009834 <linear_set_converter>:
c0009834:	53                   	push   ebx
c0009835:	b8 0a 00 00 00       	mov    eax,0xa
c000983a:	83 ec 08             	sub    esp,0x8
c000983d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009841:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009846:	75 6e                	jne    c00098b6 <linear_set_converter+0x82>
c0009848:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000984b:	85 c0                	test   eax,eax
c000984d:	74 13                	je     c0009862 <linear_set_converter+0x2e>
c000984f:	83 ec 0c             	sub    esp,0xc
c0009852:	50                   	push   eax
c0009853:	e8 e6 60 00 00       	call   c000f93e <free>
c0009858:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000985f:	83 c4 10             	add    esp,0x10
c0009862:	50                   	push   eax
c0009863:	50                   	push   eax
c0009864:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009867:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000986e:	50                   	push   eax
c000986f:	6a 01                	push   0x1
c0009871:	e8 e8 60 00 00       	call   c000f95e <calloc>
c0009876:	83 c4 10             	add    esp,0x10
c0009879:	89 c2                	mov    edx,eax
c000987b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000987e:	85 d2                	test   edx,edx
c0009880:	b8 01 00 00 00       	mov    eax,0x1
c0009885:	74 2f                	je     c00098b6 <linear_set_converter+0x82>
c0009887:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000988a:	83 ec 0c             	sub    esp,0xc
c000988d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009890:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009896:	c7 43 24 f0 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008ff0
c000989d:	c7 43 20 f0 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008ff0
c00098a4:	c7 43 28 e4 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097e4
c00098ab:	53                   	push   ebx
c00098ac:	e8 33 ff ff ff       	call   c00097e4 <linear_reset>
c00098b1:	83 c4 10             	add    esp,0x10
c00098b4:	31 c0                	xor    eax,eax
c00098b6:	83 c4 08             	add    esp,0x8
c00098b9:	5b                   	pop    ebx
c00098ba:	c3                   	ret    

c00098bb <int_to_fp>:
c00098bb:	c1 e0 0c             	shl    eax,0xc
c00098be:	c3                   	ret    

c00098bf <fp_to_int>:
c00098bf:	c1 f8 0c             	sar    eax,0xc
c00098c2:	c3                   	ret    

c00098c3 <fp_fraction_part>:
c00098c3:	25 ff 0f 00 00       	and    eax,0xfff
c00098c8:	c3                   	ret    

c00098c9 <fp_to_double>:
c00098c9:	83 ec 1c             	sub    esp,0x1c
c00098cc:	e8 f2 ff ff ff       	call   c00098c3 <fp_fraction_part>
c00098d1:	83 ec 0c             	sub    esp,0xc
c00098d4:	50                   	push   eax
c00098d5:	e8 f1 f1 01 00       	call   c0028acb <__floatsidf>
c00098da:	83 c4 10             	add    esp,0x10
c00098dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098e5:	68 00 00 30 3f       	push   0x3f300000
c00098ea:	6a 00                	push   0x0
c00098ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098f4:	e8 6f eb 01 00       	call   c0028468 <__muldf3>
c00098f9:	83 c4 2c             	add    esp,0x2c
c00098fc:	c3                   	ret    

c00098fd <calc_output_single>:
c00098fd:	55                   	push   ebp
c00098fe:	57                   	push   edi
c00098ff:	56                   	push   esi
c0009900:	89 c6                	mov    esi,eax
c0009902:	53                   	push   ebx
c0009903:	89 d3                	mov    ebx,edx
c0009905:	83 ec 4c             	sub    esp,0x4c
c0009908:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000990c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000990f:	e8 a7 ff ff ff       	call   c00098bb <int_to_fp>
c0009914:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009917:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000991b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000991f:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009923:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009926:	99                   	cdq    
c0009927:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000992f:	f7 fb                	idiv   ebx
c0009931:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009939:	89 da                	mov    edx,ebx
c000993b:	0f af d0             	imul   edx,eax
c000993e:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009942:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009946:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000994a:	29 c2                	sub    edx,eax
c000994c:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000994f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009953:	83 c5 04             	add    ebp,0x4
c0009956:	e8 6e ff ff ff       	call   c00098c9 <fp_to_double>
c000995b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000995f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009967:	e8 53 ff ff ff       	call   c00098bf <fp_to_int>
c000996c:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000996f:	52                   	push   edx
c0009970:	52                   	push   edx
c0009971:	51                   	push   ecx
c0009972:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009976:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000997a:	e8 01 de 01 00       	call   c0027780 <__subsf3>
c000997f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009982:	e8 d8 f4 01 00       	call   c0028e5f <__extendsfdf2>
c0009987:	83 c4 10             	add    esp,0x10
c000998a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000998e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009992:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009996:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000999a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000999e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099a2:	e8 c1 ea 01 00       	call   c0028468 <__muldf3>
c00099a7:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ab:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099af:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099b2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099b6:	e8 a4 f4 01 00       	call   c0028e5f <__extendsfdf2>
c00099bb:	83 c4 10             	add    esp,0x10
c00099be:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099c2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099c6:	52                   	push   edx
c00099c7:	50                   	push   eax
c00099c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099cc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099d0:	e8 16 e4 01 00       	call   c0027deb <__adddf3>
c00099d5:	59                   	pop    ecx
c00099d6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099da:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099de:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099e4:	e8 76 f4 01 00       	call   c0028e5f <__extendsfdf2>
c00099e9:	83 c4 10             	add    esp,0x10
c00099ec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099f0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099f4:	52                   	push   edx
c00099f5:	50                   	push   eax
c00099f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099fe:	e8 65 ea 01 00       	call   c0028468 <__muldf3>
c0009a03:	83 c4 10             	add    esp,0x10
c0009a06:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a0a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a0e:	52                   	push   edx
c0009a0f:	50                   	push   eax
c0009a10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a18:	e8 ce e3 01 00       	call   c0027deb <__adddf3>
c0009a1d:	83 c4 10             	add    esp,0x10
c0009a20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a24:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a28:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a2c:	0f 89 1d ff ff ff    	jns    c000994f <calc_output_single+0x52>
c0009a32:	89 d9                	mov    ecx,ebx
c0009a34:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a38:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a3c:	89 dd                	mov    ebp,ebx
c0009a3e:	29 c8                	sub    eax,ecx
c0009a40:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a48:	99                   	cdq    
c0009a49:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a51:	f7 fb                	idiv   ebx
c0009a53:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a57:	0f af e8             	imul   ebp,eax
c0009a5a:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a5e:	01 cd                	add    ebp,ecx
c0009a60:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a63:	89 e8                	mov    eax,ebp
c0009a65:	83 ee 04             	sub    esi,0x4
c0009a68:	e8 5c fe ff ff       	call   c00098c9 <fp_to_double>
c0009a6d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a75:	89 e8                	mov    eax,ebp
c0009a77:	29 dd                	sub    ebp,ebx
c0009a79:	e8 41 fe ff ff       	call   c00098bf <fp_to_int>
c0009a7e:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a81:	52                   	push   edx
c0009a82:	52                   	push   edx
c0009a83:	51                   	push   ecx
c0009a84:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a88:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a8c:	e8 ef dc 01 00       	call   c0027780 <__subsf3>
c0009a91:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a94:	e8 c6 f3 01 00       	call   c0028e5f <__extendsfdf2>
c0009a99:	83 c4 10             	add    esp,0x10
c0009a9c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009aa0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ab0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ab4:	e8 af e9 01 00       	call   c0028468 <__muldf3>
c0009ab9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009abd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ac1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ac4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ac8:	e8 92 f3 01 00       	call   c0028e5f <__extendsfdf2>
c0009acd:	83 c4 10             	add    esp,0x10
c0009ad0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ad4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ad8:	52                   	push   edx
c0009ad9:	50                   	push   eax
c0009ada:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ade:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ae2:	e8 04 e3 01 00       	call   c0027deb <__adddf3>
c0009ae7:	59                   	pop    ecx
c0009ae8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009aec:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009af0:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009af6:	e8 64 f3 01 00       	call   c0028e5f <__extendsfdf2>
c0009afb:	83 c4 10             	add    esp,0x10
c0009afe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b02:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b06:	52                   	push   edx
c0009b07:	50                   	push   eax
c0009b08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b10:	e8 53 e9 01 00       	call   c0028468 <__muldf3>
c0009b15:	83 c4 10             	add    esp,0x10
c0009b18:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b1c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b20:	52                   	push   edx
c0009b21:	50                   	push   eax
c0009b22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b2a:	e8 bc e2 01 00       	call   c0027deb <__adddf3>
c0009b2f:	83 c4 10             	add    esp,0x10
c0009b32:	85 ed                	test   ebp,ebp
c0009b34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b38:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b3c:	0f 8f 21 ff ff ff    	jg     c0009a63 <calc_output_single+0x166>
c0009b42:	52                   	push   edx
c0009b43:	50                   	push   eax
c0009b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b4c:	e8 9a e2 01 00       	call   c0027deb <__adddf3>
c0009b51:	83 c4 5c             	add    esp,0x5c
c0009b54:	5b                   	pop    ebx
c0009b55:	5e                   	pop    esi
c0009b56:	5f                   	pop    edi
c0009b57:	5d                   	pop    ebp
c0009b58:	c3                   	ret    

c0009b59 <calc_output_stereo>:
c0009b59:	55                   	push   ebp
c0009b5a:	89 cd                	mov    ebp,ecx
c0009b5c:	57                   	push   edi
c0009b5d:	56                   	push   esi
c0009b5e:	53                   	push   ebx
c0009b5f:	89 c3                	mov    ebx,eax
c0009b61:	83 ec 6c             	sub    esp,0x6c
c0009b64:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b68:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b6f:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b76:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b7a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b7e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b81:	e8 35 fd ff ff       	call   c00098bb <int_to_fp>
c0009b86:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b8e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b92:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b9a:	29 c8                	sub    eax,ecx
c0009b9c:	99                   	cdq    
c0009b9d:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009ba1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ba5:	0f af d0             	imul   edx,eax
c0009ba8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bab:	31 d2                	xor    edx,edx
c0009bad:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bb1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bb5:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bb8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bbc:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bbf:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009bc3:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bc7:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009bca:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bcf:	29 c1                	sub    ecx,eax
c0009bd1:	31 c0                	xor    eax,eax
c0009bd3:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bde:	83 c7 08             	add    edi,0x8
c0009be1:	e8 e3 fc ff ff       	call   c00098c9 <fp_to_double>
c0009be6:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bea:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bf2:	e8 c8 fc ff ff       	call   c00098bf <fp_to_int>
c0009bf7:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bfa:	52                   	push   edx
c0009bfb:	52                   	push   edx
c0009bfc:	51                   	push   ecx
c0009bfd:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c01:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c05:	e8 76 db 01 00       	call   c0027780 <__subsf3>
c0009c0a:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c0d:	e8 4d f2 01 00       	call   c0028e5f <__extendsfdf2>
c0009c12:	83 c4 10             	add    esp,0x10
c0009c15:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c19:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c1d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c21:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c25:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c29:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c2d:	e8 36 e8 01 00       	call   c0028468 <__muldf3>
c0009c32:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c36:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c3a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c3d:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c41:	e8 19 f2 01 00       	call   c0028e5f <__extendsfdf2>
c0009c46:	83 c4 10             	add    esp,0x10
c0009c49:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c4d:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c51:	52                   	push   edx
c0009c52:	50                   	push   eax
c0009c53:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c57:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c5b:	e8 8b e1 01 00       	call   c0027deb <__adddf3>
c0009c60:	59                   	pop    ecx
c0009c61:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c65:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c69:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c6f:	e8 eb f1 01 00       	call   c0028e5f <__extendsfdf2>
c0009c74:	83 c4 10             	add    esp,0x10
c0009c77:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c7b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c7f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c83:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c87:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c8b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c8f:	e8 d4 e7 01 00       	call   c0028468 <__muldf3>
c0009c94:	83 c4 10             	add    esp,0x10
c0009c97:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9f:	52                   	push   edx
c0009ca0:	50                   	push   eax
c0009ca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ca5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ca9:	e8 3d e1 01 00       	call   c0027deb <__adddf3>
c0009cae:	59                   	pop    ecx
c0009caf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cb3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cb7:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cbd:	e8 9d f1 01 00       	call   c0028e5f <__extendsfdf2>
c0009cc2:	83 c4 10             	add    esp,0x10
c0009cc5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cc9:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ccd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cd1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cd5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cd9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cdd:	e8 86 e7 01 00       	call   c0028468 <__muldf3>
c0009ce2:	83 c4 10             	add    esp,0x10
c0009ce5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009ce9:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009ced:	52                   	push   edx
c0009cee:	50                   	push   eax
c0009cef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cf7:	e8 ef e0 01 00       	call   c0027deb <__adddf3>
c0009cfc:	83 c4 10             	add    esp,0x10
c0009cff:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d0b:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d0f:	0f 89 c5 fe ff ff    	jns    c0009bda <calc_output_stereo+0x81>
c0009d15:	29 e9                	sub    ecx,ebp
c0009d17:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d1b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d1f:	29 c8                	sub    eax,ecx
c0009d21:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d29:	99                   	cdq    
c0009d2a:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d2e:	31 d2                	xor    edx,edx
c0009d30:	0f af f8             	imul   edi,eax
c0009d33:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d37:	40                   	inc    eax
c0009d38:	01 cf                	add    edi,ecx
c0009d3a:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d3f:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d43:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d4b:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d4e:	31 c0                	xor    eax,eax
c0009d50:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d54:	89 f8                	mov    eax,edi
c0009d56:	83 eb 08             	sub    ebx,0x8
c0009d59:	e8 6b fb ff ff       	call   c00098c9 <fp_to_double>
c0009d5e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d62:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d66:	89 f8                	mov    eax,edi
c0009d68:	e8 52 fb ff ff       	call   c00098bf <fp_to_int>
c0009d6d:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d70:	52                   	push   edx
c0009d71:	52                   	push   edx
c0009d72:	55                   	push   ebp
c0009d73:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d77:	e8 04 da 01 00       	call   c0027780 <__subsf3>
c0009d7c:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d7f:	e8 db f0 01 00       	call   c0028e5f <__extendsfdf2>
c0009d84:	83 c4 10             	add    esp,0x10
c0009d87:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d8b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d8f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d93:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d9b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d9f:	e8 c4 e6 01 00       	call   c0028468 <__muldf3>
c0009da4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009da7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dab:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009daf:	e8 ab f0 01 00       	call   c0028e5f <__extendsfdf2>
c0009db4:	83 c4 10             	add    esp,0x10
c0009db7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dbf:	52                   	push   edx
c0009dc0:	50                   	push   eax
c0009dc1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dc5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dc9:	e8 1d e0 01 00       	call   c0027deb <__adddf3>
c0009dce:	59                   	pop    ecx
c0009dcf:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009dd3:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dd7:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009ddd:	e8 7d f0 01 00       	call   c0028e5f <__extendsfdf2>
c0009de2:	83 c4 10             	add    esp,0x10
c0009de5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009de9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009ded:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009df1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009df5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009df9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dfd:	e8 66 e6 01 00       	call   c0028468 <__muldf3>
c0009e02:	83 c4 10             	add    esp,0x10
c0009e05:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e09:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0d:	52                   	push   edx
c0009e0e:	50                   	push   eax
c0009e0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e17:	e8 cf df 01 00       	call   c0027deb <__adddf3>
c0009e1c:	5d                   	pop    ebp
c0009e1d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e21:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e25:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e2b:	e8 2f f0 01 00       	call   c0028e5f <__extendsfdf2>
c0009e30:	83 c4 10             	add    esp,0x10
c0009e33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e3b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e4b:	e8 18 e6 01 00       	call   c0028468 <__muldf3>
c0009e50:	83 c4 10             	add    esp,0x10
c0009e53:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e57:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e5b:	52                   	push   edx
c0009e5c:	50                   	push   eax
c0009e5d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e61:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e65:	e8 81 df 01 00       	call   c0027deb <__adddf3>
c0009e6a:	83 c4 10             	add    esp,0x10
c0009e6d:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e71:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e75:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e79:	85 ff                	test   edi,edi
c0009e7b:	0f 8f d3 fe ff ff    	jg     c0009d54 <calc_output_stereo+0x1fb>
c0009e81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e91:	e8 55 df 01 00       	call   c0027deb <__adddf3>
c0009e96:	83 c4 10             	add    esp,0x10
c0009e99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ea1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ea5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eb1:	e8 b2 e5 01 00       	call   c0028468 <__muldf3>
c0009eb6:	59                   	pop    ecx
c0009eb7:	5b                   	pop    ebx
c0009eb8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ebc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ec0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ec4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ec8:	e8 6e ee 01 00       	call   c0028d3b <__truncdfsf2>
c0009ecd:	83 c4 10             	add    esp,0x10
c0009ed0:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ed7:	89 03                	mov    DWORD PTR [ebx],eax
c0009ed9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009edd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ee1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ee5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ee9:	e8 fd de 01 00       	call   c0027deb <__adddf3>
c0009eee:	83 c4 10             	add    esp,0x10
c0009ef1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ef5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ef9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009efd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f09:	e8 5a e5 01 00       	call   c0028468 <__muldf3>
c0009f0e:	5e                   	pop    esi
c0009f0f:	5f                   	pop    edi
c0009f10:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f14:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f20:	e8 16 ee 01 00       	call   c0028d3b <__truncdfsf2>
c0009f25:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f2c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f2f:	83 c4 7c             	add    esp,0x7c
c0009f32:	5b                   	pop    ebx
c0009f33:	5e                   	pop    esi
c0009f34:	5f                   	pop    edi
c0009f35:	5d                   	pop    ebp
c0009f36:	c3                   	ret    

c0009f37 <calc_output_quad>:
c0009f37:	55                   	push   ebp
c0009f38:	57                   	push   edi
c0009f39:	56                   	push   esi
c0009f3a:	89 c6                	mov    esi,eax
c0009f3c:	53                   	push   ebx
c0009f3d:	83 ec 7c             	sub    esp,0x7c
c0009f40:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f44:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f48:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f4f:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f56:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f5e:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f61:	e8 55 f9 ff ff       	call   c00098bb <int_to_fp>
c0009f66:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f69:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f6c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f70:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f74:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f78:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f7c:	99                   	cdq    
c0009f7d:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f81:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f85:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f88:	31 d2                	xor    edx,edx
c0009f8a:	0f af d8             	imul   ebx,eax
c0009f8d:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f95:	0f af c7             	imul   eax,edi
c0009f98:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f9c:	29 c1                	sub    ecx,eax
c0009f9e:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fa6:	31 c0                	xor    eax,eax
c0009fa8:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009faf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fb3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fb7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fbf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fc3:	89 d8                	mov    eax,ebx
c0009fc5:	83 c7 10             	add    edi,0x10
c0009fc8:	e8 fc f8 ff ff       	call   c00098c9 <fp_to_double>
c0009fcd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fd1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fd5:	89 d8                	mov    eax,ebx
c0009fd7:	e8 e3 f8 ff ff       	call   c00098bf <fp_to_int>
c0009fdc:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fe0:	52                   	push   edx
c0009fe1:	52                   	push   edx
c0009fe2:	51                   	push   ecx
c0009fe3:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fe7:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009feb:	e8 90 d7 01 00       	call   c0027780 <__subsf3>
c0009ff0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ff3:	e8 67 ee 01 00       	call   c0028e5f <__extendsfdf2>
c0009ff8:	83 c4 10             	add    esp,0x10
c0009ffb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a003:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a007:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a00b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a00f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a013:	e8 50 e4 01 00       	call   c0028468 <__muldf3>
c000a018:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a01c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a020:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a023:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a027:	e8 33 ee 01 00       	call   c0028e5f <__extendsfdf2>
c000a02c:	83 c4 10             	add    esp,0x10
c000a02f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a033:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a037:	52                   	push   edx
c000a038:	50                   	push   eax
c000a039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a03d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a041:	e8 a5 dd 01 00       	call   c0027deb <__adddf3>
c000a046:	59                   	pop    ecx
c000a047:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a04b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a04f:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a055:	e8 05 ee 01 00       	call   c0028e5f <__extendsfdf2>
c000a05a:	83 c4 10             	add    esp,0x10
c000a05d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a061:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a065:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a069:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a06d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a071:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a075:	e8 ee e3 01 00       	call   c0028468 <__muldf3>
c000a07a:	83 c4 10             	add    esp,0x10
c000a07d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a081:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a085:	52                   	push   edx
c000a086:	50                   	push   eax
c000a087:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a08b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a08f:	e8 57 dd 01 00       	call   c0027deb <__adddf3>
c000a094:	59                   	pop    ecx
c000a095:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a099:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a09d:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0a3:	e8 b7 ed 01 00       	call   c0028e5f <__extendsfdf2>
c000a0a8:	83 c4 10             	add    esp,0x10
c000a0ab:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0af:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0bb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0bf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0c3:	e8 a0 e3 01 00       	call   c0028468 <__muldf3>
c000a0c8:	83 c4 10             	add    esp,0x10
c000a0cb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0cf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d3:	52                   	push   edx
c000a0d4:	50                   	push   eax
c000a0d5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0d9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0dd:	e8 09 dd 01 00       	call   c0027deb <__adddf3>
c000a0e2:	59                   	pop    ecx
c000a0e3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0e7:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0eb:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0f1:	e8 69 ed 01 00       	call   c0028e5f <__extendsfdf2>
c000a0f6:	83 c4 10             	add    esp,0x10
c000a0f9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0fd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a101:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a105:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a109:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a10d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a111:	e8 52 e3 01 00       	call   c0028468 <__muldf3>
c000a116:	83 c4 10             	add    esp,0x10
c000a119:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a121:	52                   	push   edx
c000a122:	50                   	push   eax
c000a123:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a127:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a12b:	e8 bb dc 01 00       	call   c0027deb <__adddf3>
c000a130:	59                   	pop    ecx
c000a131:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a135:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a139:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a13f:	e8 1b ed 01 00       	call   c0028e5f <__extendsfdf2>
c000a144:	83 c4 10             	add    esp,0x10
c000a147:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a14b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a14f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a153:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a157:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a15b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a15f:	e8 04 e3 01 00       	call   c0028468 <__muldf3>
c000a164:	83 c4 10             	add    esp,0x10
c000a167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a16b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a16f:	52                   	push   edx
c000a170:	50                   	push   eax
c000a171:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a175:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a179:	e8 6d dc 01 00       	call   c0027deb <__adddf3>
c000a17e:	83 c4 10             	add    esp,0x10
c000a181:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a185:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a189:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a18d:	0f 89 30 fe ff ff    	jns    c0009fc3 <calc_output_quad+0x8c>
c000a193:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a197:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a19b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a19f:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1a3:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ab:	29 c8                	sub    eax,ecx
c000a1ad:	99                   	cdq    
c000a1ae:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1b2:	31 d2                	xor    edx,edx
c000a1b4:	0f af d8             	imul   ebx,eax
c000a1b7:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1bb:	40                   	inc    eax
c000a1bc:	01 cb                	add    ebx,ecx
c000a1be:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1c3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1c7:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1cf:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1d2:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1da:	31 c0                	xor    eax,eax
c000a1dc:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1e0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1e4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1e8:	89 d8                	mov    eax,ebx
c000a1ea:	83 ee 10             	sub    esi,0x10
c000a1ed:	e8 d7 f6 ff ff       	call   c00098c9 <fp_to_double>
c000a1f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1fa:	89 d8                	mov    eax,ebx
c000a1fc:	e8 be f6 ff ff       	call   c00098bf <fp_to_int>
c000a201:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a205:	52                   	push   edx
c000a206:	52                   	push   edx
c000a207:	57                   	push   edi
c000a208:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a20c:	e8 6f d5 01 00       	call   c0027780 <__subsf3>
c000a211:	89 04 24             	mov    DWORD PTR [esp],eax
c000a214:	e8 46 ec 01 00       	call   c0028e5f <__extendsfdf2>
c000a219:	83 c4 10             	add    esp,0x10
c000a21c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a220:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a224:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a228:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a22c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a230:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a234:	e8 2f e2 01 00       	call   c0028468 <__muldf3>
c000a239:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a23c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a240:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a244:	e8 16 ec 01 00       	call   c0028e5f <__extendsfdf2>
c000a249:	83 c4 10             	add    esp,0x10
c000a24c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a250:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a254:	52                   	push   edx
c000a255:	50                   	push   eax
c000a256:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a25a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a25e:	e8 88 db 01 00       	call   c0027deb <__adddf3>
c000a263:	59                   	pop    ecx
c000a264:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a268:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a26c:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a272:	e8 e8 eb 01 00       	call   c0028e5f <__extendsfdf2>
c000a277:	83 c4 10             	add    esp,0x10
c000a27a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a27e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a286:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a28a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a28e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a292:	e8 d1 e1 01 00       	call   c0028468 <__muldf3>
c000a297:	83 c4 10             	add    esp,0x10
c000a29a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a2:	52                   	push   edx
c000a2a3:	50                   	push   eax
c000a2a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2ac:	e8 3a db 01 00       	call   c0027deb <__adddf3>
c000a2b1:	5f                   	pop    edi
c000a2b2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2b6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2ba:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2c0:	e8 9a eb 01 00       	call   c0028e5f <__extendsfdf2>
c000a2c5:	83 c4 10             	add    esp,0x10
c000a2c8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2cc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2dc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2e0:	e8 83 e1 01 00       	call   c0028468 <__muldf3>
c000a2e5:	83 c4 10             	add    esp,0x10
c000a2e8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ec:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2f0:	52                   	push   edx
c000a2f1:	50                   	push   eax
c000a2f2:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2f6:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2fa:	e8 ec da 01 00       	call   c0027deb <__adddf3>
c000a2ff:	59                   	pop    ecx
c000a300:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a304:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a308:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a30e:	e8 4c eb 01 00       	call   c0028e5f <__extendsfdf2>
c000a313:	83 c4 10             	add    esp,0x10
c000a316:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a31e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a322:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a326:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a32a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a32e:	e8 35 e1 01 00       	call   c0028468 <__muldf3>
c000a333:	83 c4 10             	add    esp,0x10
c000a336:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a33a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33e:	52                   	push   edx
c000a33f:	50                   	push   eax
c000a340:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a344:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a348:	e8 9e da 01 00       	call   c0027deb <__adddf3>
c000a34d:	5f                   	pop    edi
c000a34e:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a352:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a356:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a35c:	e8 fe ea 01 00       	call   c0028e5f <__extendsfdf2>
c000a361:	83 c4 10             	add    esp,0x10
c000a364:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a368:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a36c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a374:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a378:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a37c:	e8 e7 e0 01 00       	call   c0028468 <__muldf3>
c000a381:	83 c4 10             	add    esp,0x10
c000a384:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a388:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38c:	52                   	push   edx
c000a38d:	50                   	push   eax
c000a38e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a392:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a396:	e8 50 da 01 00       	call   c0027deb <__adddf3>
c000a39b:	83 c4 10             	add    esp,0x10
c000a39e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3a2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3a6:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3aa:	85 db                	test   ebx,ebx
c000a3ac:	0f 8f 36 fe ff ff    	jg     c000a1e8 <calc_output_quad+0x2b1>
c000a3b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3c2:	e8 24 da 01 00       	call   c0027deb <__adddf3>
c000a3c7:	83 c4 10             	add    esp,0x10
c000a3ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3e2:	e8 81 e0 01 00       	call   c0028468 <__muldf3>
c000a3e7:	59                   	pop    ecx
c000a3e8:	5b                   	pop    ebx
c000a3e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	e8 3d e9 01 00       	call   c0028d3b <__truncdfsf2>
c000a3fe:	83 c4 10             	add    esp,0x10
c000a401:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a408:	89 06                	mov    DWORD PTR [esi],eax
c000a40a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a40e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a412:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a416:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a41a:	e8 cc d9 01 00       	call   c0027deb <__adddf3>
c000a41f:	83 c4 10             	add    esp,0x10
c000a422:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a426:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a43a:	e8 29 e0 01 00       	call   c0028468 <__muldf3>
c000a43f:	5e                   	pop    esi
c000a440:	5f                   	pop    edi
c000a441:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a445:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	e8 e5 e8 01 00       	call   c0028d3b <__truncdfsf2>
c000a456:	83 c4 10             	add    esp,0x10
c000a459:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a460:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a463:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a467:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a46b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a46f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a473:	e8 73 d9 01 00       	call   c0027deb <__adddf3>
c000a478:	83 c4 10             	add    esp,0x10
c000a47b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a47f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a483:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a493:	e8 d0 df 01 00       	call   c0028468 <__muldf3>
c000a498:	5d                   	pop    ebp
c000a499:	59                   	pop    ecx
c000a49a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a49e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	e8 8c e8 01 00       	call   c0028d3b <__truncdfsf2>
c000a4af:	83 c4 10             	add    esp,0x10
c000a4b2:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4b9:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4bc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4c0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4c4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4c8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4cc:	e8 1a d9 01 00       	call   c0027deb <__adddf3>
c000a4d1:	83 c4 10             	add    esp,0x10
c000a4d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ec:	e8 77 df 01 00       	call   c0028468 <__muldf3>
c000a4f1:	5b                   	pop    ebx
c000a4f2:	5e                   	pop    esi
c000a4f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	e8 33 e8 01 00       	call   c0028d3b <__truncdfsf2>
c000a508:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a50f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a512:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a518:	5b                   	pop    ebx
c000a519:	5e                   	pop    esi
c000a51a:	5f                   	pop    edi
c000a51b:	5d                   	pop    ebp
c000a51c:	c3                   	ret    

c000a51d <calc_output_hex>:
c000a51d:	55                   	push   ebp
c000a51e:	89 cd                	mov    ebp,ecx
c000a520:	57                   	push   edi
c000a521:	56                   	push   esi
c000a522:	53                   	push   ebx
c000a523:	89 c3                	mov    ebx,eax
c000a525:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a52b:	89 14 24             	mov    DWORD PTR [esp],edx
c000a52e:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a535:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a53c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a540:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a544:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a547:	e8 6f f3 ff ff       	call   c00098bb <int_to_fp>
c000a54c:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a54f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a553:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a556:	29 c8                	sub    eax,ecx
c000a558:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a55c:	99                   	cdq    
c000a55d:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a565:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a568:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a570:	0f af f8             	imul   edi,eax
c000a573:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a576:	01 cf                	add    edi,ecx
c000a578:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a57c:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a57f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a583:	0f af c2             	imul   eax,edx
c000a586:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a58a:	29 c1                	sub    ecx,eax
c000a58c:	31 d2                	xor    edx,edx
c000a58e:	31 c0                	xor    eax,eax
c000a590:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a593:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a597:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a59b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a59f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5a3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5a7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ab:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5b7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5bb:	89 f8                	mov    eax,edi
c000a5bd:	e8 07 f3 ff ff       	call   c00098c9 <fp_to_double>
c000a5c2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5ca:	89 f8                	mov    eax,edi
c000a5cc:	e8 ee f2 ff ff       	call   c00098bf <fp_to_int>
c000a5d1:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5d5:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5d8:	52                   	push   edx
c000a5d9:	52                   	push   edx
c000a5da:	51                   	push   ecx
c000a5db:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5df:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5e6:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5ea:	e8 91 d1 01 00       	call   c0027780 <__subsf3>
c000a5ef:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5f2:	e8 68 e8 01 00       	call   c0028e5f <__extendsfdf2>
c000a5f7:	83 c4 10             	add    esp,0x10
c000a5fa:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5fe:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a602:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a60a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a60e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a612:	e8 51 de 01 00       	call   c0028468 <__muldf3>
c000a617:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a61b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a61f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a622:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a626:	e8 34 e8 01 00       	call   c0028e5f <__extendsfdf2>
c000a62b:	83 c4 10             	add    esp,0x10
c000a62e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a632:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a636:	52                   	push   edx
c000a637:	50                   	push   eax
c000a638:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a63c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a640:	e8 a6 d7 01 00       	call   c0027deb <__adddf3>
c000a645:	59                   	pop    ecx
c000a646:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a64a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a64e:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a654:	e8 06 e8 01 00       	call   c0028e5f <__extendsfdf2>
c000a659:	83 c4 10             	add    esp,0x10
c000a65c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a660:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a664:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a668:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a66c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a670:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a674:	e8 ef dd 01 00       	call   c0028468 <__muldf3>
c000a679:	83 c4 10             	add    esp,0x10
c000a67c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a680:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a684:	52                   	push   edx
c000a685:	50                   	push   eax
c000a686:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a68a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a68e:	e8 58 d7 01 00       	call   c0027deb <__adddf3>
c000a693:	59                   	pop    ecx
c000a694:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a698:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a69c:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6a2:	e8 b8 e7 01 00       	call   c0028e5f <__extendsfdf2>
c000a6a7:	83 c4 10             	add    esp,0x10
c000a6aa:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ae:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ba:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6be:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6c2:	e8 a1 dd 01 00       	call   c0028468 <__muldf3>
c000a6c7:	83 c4 10             	add    esp,0x10
c000a6ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d2:	52                   	push   edx
c000a6d3:	50                   	push   eax
c000a6d4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6d8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6dc:	e8 0a d7 01 00       	call   c0027deb <__adddf3>
c000a6e1:	59                   	pop    ecx
c000a6e2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6e6:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6ea:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6f0:	e8 6a e7 01 00       	call   c0028e5f <__extendsfdf2>
c000a6f5:	83 c4 10             	add    esp,0x10
c000a6f8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6fc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a700:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a704:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a708:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a70c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a710:	e8 53 dd 01 00       	call   c0028468 <__muldf3>
c000a715:	83 c4 10             	add    esp,0x10
c000a718:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a720:	52                   	push   edx
c000a721:	50                   	push   eax
c000a722:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a726:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a72a:	e8 bc d6 01 00       	call   c0027deb <__adddf3>
c000a72f:	59                   	pop    ecx
c000a730:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a734:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a738:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a73e:	e8 1c e7 01 00       	call   c0028e5f <__extendsfdf2>
c000a743:	83 c4 10             	add    esp,0x10
c000a746:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a74e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a752:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a756:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a75a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a75e:	e8 05 dd 01 00       	call   c0028468 <__muldf3>
c000a763:	83 c4 10             	add    esp,0x10
c000a766:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a76a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76e:	52                   	push   edx
c000a76f:	50                   	push   eax
c000a770:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a774:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a778:	e8 6e d6 01 00       	call   c0027deb <__adddf3>
c000a77d:	59                   	pop    ecx
c000a77e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a782:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a786:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a78c:	e8 ce e6 01 00       	call   c0028e5f <__extendsfdf2>
c000a791:	83 c4 10             	add    esp,0x10
c000a794:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a798:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a79c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7a8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7ac:	e8 b7 dc 01 00       	call   c0028468 <__muldf3>
c000a7b1:	83 c4 10             	add    esp,0x10
c000a7b4:	83 c6 18             	add    esi,0x18
c000a7b7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7bb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bf:	52                   	push   edx
c000a7c0:	50                   	push   eax
c000a7c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7c9:	e8 1d d6 01 00       	call   c0027deb <__adddf3>
c000a7ce:	59                   	pop    ecx
c000a7cf:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7d3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7d7:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7dd:	e8 7d e6 01 00       	call   c0028e5f <__extendsfdf2>
c000a7e2:	83 c4 10             	add    esp,0x10
c000a7e5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7e9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7f5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7fd:	e8 66 dc 01 00       	call   c0028468 <__muldf3>
c000a802:	83 c4 10             	add    esp,0x10
c000a805:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a809:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a80d:	52                   	push   edx
c000a80e:	50                   	push   eax
c000a80f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a813:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a817:	e8 cf d5 01 00       	call   c0027deb <__adddf3>
c000a81c:	83 c4 10             	add    esp,0x10
c000a81f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a823:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a827:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a82a:	0f 89 8b fd ff ff    	jns    c000a5bb <calc_output_hex+0x9e>
c000a830:	31 f6                	xor    esi,esi
c000a832:	31 ff                	xor    edi,edi
c000a834:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a838:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a83b:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a83f:	29 e9                	sub    ecx,ebp
c000a841:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a845:	29 c8                	sub    eax,ecx
c000a847:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a84a:	99                   	cdq    
c000a84b:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a84f:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a852:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a856:	0f af e8             	imul   ebp,eax
c000a859:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a85d:	40                   	inc    eax
c000a85e:	01 cd                	add    ebp,ecx
c000a860:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a865:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a869:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a86d:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a871:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a874:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a878:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a87c:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a880:	89 e8                	mov    eax,ebp
c000a882:	e8 42 f0 ff ff       	call   c00098c9 <fp_to_double>
c000a887:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a88b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a88f:	89 e8                	mov    eax,ebp
c000a891:	e8 29 f0 ff ff       	call   c00098bf <fp_to_int>
c000a896:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a89a:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a89d:	52                   	push   edx
c000a89e:	52                   	push   edx
c000a89f:	51                   	push   ecx
c000a8a0:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8a7:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8ae:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8b2:	e8 c9 ce 01 00       	call   c0027780 <__subsf3>
c000a8b7:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8ba:	e8 a0 e5 01 00       	call   c0028e5f <__extendsfdf2>
c000a8bf:	83 c4 10             	add    esp,0x10
c000a8c2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8c6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8d2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8d6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8da:	e8 89 db 01 00       	call   c0028468 <__muldf3>
c000a8df:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8ea:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8ed:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8f1:	e8 69 e5 01 00       	call   c0028e5f <__extendsfdf2>
c000a8f6:	83 c4 10             	add    esp,0x10
c000a8f9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8fd:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a901:	52                   	push   edx
c000a902:	50                   	push   eax
c000a903:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a907:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a90b:	e8 db d4 01 00       	call   c0027deb <__adddf3>
c000a910:	59                   	pop    ecx
c000a911:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a915:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a919:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a91f:	e8 3b e5 01 00       	call   c0028e5f <__extendsfdf2>
c000a924:	83 c4 10             	add    esp,0x10
c000a927:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a92b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a92f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a933:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a937:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a93b:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a93f:	e8 24 db 01 00       	call   c0028468 <__muldf3>
c000a944:	83 c4 10             	add    esp,0x10
c000a947:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94f:	52                   	push   edx
c000a950:	50                   	push   eax
c000a951:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a955:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a959:	e8 8d d4 01 00       	call   c0027deb <__adddf3>
c000a95e:	59                   	pop    ecx
c000a95f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a963:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a967:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a96d:	e8 ed e4 01 00       	call   c0028e5f <__extendsfdf2>
c000a972:	83 c4 10             	add    esp,0x10
c000a975:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a979:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a97d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a981:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a985:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a989:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a98d:	e8 d6 da 01 00       	call   c0028468 <__muldf3>
c000a992:	83 c4 10             	add    esp,0x10
c000a995:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a999:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99d:	52                   	push   edx
c000a99e:	50                   	push   eax
c000a99f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9a3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9a7:	e8 3f d4 01 00       	call   c0027deb <__adddf3>
c000a9ac:	59                   	pop    ecx
c000a9ad:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9b1:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9b5:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9bb:	e8 9f e4 01 00       	call   c0028e5f <__extendsfdf2>
c000a9c0:	83 c4 10             	add    esp,0x10
c000a9c3:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9c7:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9d3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9d7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9db:	e8 88 da 01 00       	call   c0028468 <__muldf3>
c000a9e0:	83 c4 10             	add    esp,0x10
c000a9e3:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e7:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9eb:	52                   	push   edx
c000a9ec:	50                   	push   eax
c000a9ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9f5:	e8 f1 d3 01 00       	call   c0027deb <__adddf3>
c000a9fa:	59                   	pop    ecx
c000a9fb:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9ff:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa03:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa09:	e8 51 e4 01 00       	call   c0028e5f <__extendsfdf2>
c000aa0e:	83 c4 10             	add    esp,0x10
c000aa11:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa15:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa21:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa25:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa29:	e8 3a da 01 00       	call   c0028468 <__muldf3>
c000aa2e:	83 c4 10             	add    esp,0x10
c000aa31:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa35:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa39:	52                   	push   edx
c000aa3a:	50                   	push   eax
c000aa3b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa3f:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa43:	e8 a3 d3 01 00       	call   c0027deb <__adddf3>
c000aa48:	59                   	pop    ecx
c000aa49:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa4d:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa51:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa57:	e8 03 e4 01 00       	call   c0028e5f <__extendsfdf2>
c000aa5c:	83 c4 10             	add    esp,0x10
c000aa5f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa63:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa6f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa73:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa77:	e8 ec d9 01 00       	call   c0028468 <__muldf3>
c000aa7c:	83 c4 10             	add    esp,0x10
c000aa7f:	83 eb 18             	sub    ebx,0x18
c000aa82:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa86:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa8a:	52                   	push   edx
c000aa8b:	50                   	push   eax
c000aa8c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa90:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa94:	e8 52 d3 01 00       	call   c0027deb <__adddf3>
c000aa99:	59                   	pop    ecx
c000aa9a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa9e:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aaa2:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aaa8:	e8 b2 e3 01 00       	call   c0028e5f <__extendsfdf2>
c000aaad:	83 c4 10             	add    esp,0x10
c000aab0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aab4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aab8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aabc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aac0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aac4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aac8:	e8 9b d9 01 00       	call   c0028468 <__muldf3>
c000aacd:	83 c4 10             	add    esp,0x10
c000aad0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aad4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aad8:	52                   	push   edx
c000aad9:	50                   	push   eax
c000aada:	57                   	push   edi
c000aadb:	56                   	push   esi
c000aadc:	e8 0a d3 01 00       	call   c0027deb <__adddf3>
c000aae1:	83 c4 10             	add    esp,0x10
c000aae4:	89 c6                	mov    esi,eax
c000aae6:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aae9:	89 d7                	mov    edi,edx
c000aaeb:	85 ed                	test   ebp,ebp
c000aaed:	0f 8f 8d fd ff ff    	jg     c000a880 <calc_output_hex+0x363>
c000aaf3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aaf7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aafb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aaff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab03:	e8 e3 d2 01 00       	call   c0027deb <__adddf3>
c000ab08:	83 c4 10             	add    esp,0x10
c000ab0b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab0e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab12:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab22:	e8 41 d9 01 00       	call   c0028468 <__muldf3>
c000ab27:	59                   	pop    ecx
c000ab28:	5b                   	pop    ebx
c000ab29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab2d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	e8 fd e1 01 00       	call   c0028d3b <__truncdfsf2>
c000ab3e:	83 c4 10             	add    esp,0x10
c000ab41:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab48:	89 03                	mov    DWORD PTR [ebx],eax
c000ab4a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab4e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab56:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab5a:	e8 8c d2 01 00       	call   c0027deb <__adddf3>
c000ab5f:	83 c4 10             	add    esp,0x10
c000ab62:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab65:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab69:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab79:	e8 ea d8 01 00       	call   c0028468 <__muldf3>
c000ab7e:	5d                   	pop    ebp
c000ab7f:	59                   	pop    ecx
c000ab80:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	e8 a6 e1 01 00       	call   c0028d3b <__truncdfsf2>
c000ab95:	83 c4 10             	add    esp,0x10
c000ab98:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab9f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000aba2:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aba6:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abb2:	e8 34 d2 01 00       	call   c0027deb <__adddf3>
c000abb7:	83 c4 10             	add    esp,0x10
c000abba:	89 04 24             	mov    DWORD PTR [esp],eax
c000abbd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abc1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abd1:	e8 92 d8 01 00       	call   c0028468 <__muldf3>
c000abd6:	5b                   	pop    ebx
c000abd7:	5d                   	pop    ebp
c000abd8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	e8 4e e1 01 00       	call   c0028d3b <__truncdfsf2>
c000abed:	83 c4 10             	add    esp,0x10
c000abf0:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abf7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abfa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abfe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac02:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac06:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac0a:	e8 dc d1 01 00       	call   c0027deb <__adddf3>
c000ac0f:	83 c4 10             	add    esp,0x10
c000ac12:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac15:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac19:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac29:	e8 3a d8 01 00       	call   c0028468 <__muldf3>
c000ac2e:	59                   	pop    ecx
c000ac2f:	5b                   	pop    ebx
c000ac30:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	e8 f6 e0 01 00       	call   c0028d3b <__truncdfsf2>
c000ac45:	83 c4 10             	add    esp,0x10
c000ac48:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac4f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac56:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac62:	e8 84 d1 01 00       	call   c0027deb <__adddf3>
c000ac67:	83 c4 10             	add    esp,0x10
c000ac6a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac6d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac81:	e8 e2 d7 01 00       	call   c0028468 <__muldf3>
c000ac86:	5d                   	pop    ebp
c000ac87:	59                   	pop    ecx
c000ac88:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	e8 9e e0 01 00       	call   c0028d3b <__truncdfsf2>
c000ac9d:	83 c4 10             	add    esp,0x10
c000aca0:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aca7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acaa:	57                   	push   edi
c000acab:	56                   	push   esi
c000acac:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acb0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acb4:	e8 32 d1 01 00       	call   c0027deb <__adddf3>
c000acb9:	83 c4 10             	add    esp,0x10
c000acbc:	89 04 24             	mov    DWORD PTR [esp],eax
c000acbf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acc3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acd3:	e8 90 d7 01 00       	call   c0028468 <__muldf3>
c000acd8:	5b                   	pop    ebx
c000acd9:	5e                   	pop    esi
c000acda:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acde:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	e8 4c e0 01 00       	call   c0028d3b <__truncdfsf2>
c000acef:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acf6:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acf9:	81 c4 9c 00 00 00    	add    esp,0x9c
c000acff:	5b                   	pop    ebx
c000ad00:	5e                   	pop    esi
c000ad01:	5f                   	pop    edi
c000ad02:	5d                   	pop    ebp
c000ad03:	c3                   	ret    

c000ad04 <sinc_reset>:
c000ad04:	56                   	push   esi
c000ad05:	53                   	push   ebx
c000ad06:	51                   	push   ecx
c000ad07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad0b:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad0e:	85 db                	test   ebx,ebx
c000ad10:	74 59                	je     c000ad6b <sinc_reset+0x67>
c000ad12:	31 d2                	xor    edx,edx
c000ad14:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad1b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad1e:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad21:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad28:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad2f:	31 c0                	xor    eax,eax
c000ad31:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad37:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad3a:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad3d:	52                   	push   edx
c000ad3e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad41:	c1 e0 02             	shl    eax,0x2
c000ad44:	50                   	push   eax
c000ad45:	6a 00                	push   0x0
c000ad47:	56                   	push   esi
c000ad48:	e8 1f 5a ff ff       	call   c000076c <memset>
c000ad4d:	83 c4 0c             	add    esp,0xc
c000ad50:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad53:	c1 e0 02             	shl    eax,0x2
c000ad56:	50                   	push   eax
c000ad57:	68 aa 00 00 00       	push   0xaa
c000ad5c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad5f:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad62:	50                   	push   eax
c000ad63:	e8 04 5a ff ff       	call   c000076c <memset>
c000ad68:	83 c4 10             	add    esp,0x10
c000ad6b:	58                   	pop    eax
c000ad6c:	5b                   	pop    ebx
c000ad6d:	5e                   	pop    esi
c000ad6e:	c3                   	ret    

c000ad6f <calc_output_multi>:
c000ad6f:	55                   	push   ebp
c000ad70:	57                   	push   edi
c000ad71:	56                   	push   esi
c000ad72:	89 c6                	mov    esi,eax
c000ad74:	53                   	push   ebx
c000ad75:	83 ec 4c             	sub    esp,0x4c
c000ad78:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad7c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad80:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad84:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad88:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad94:	8d 46 44             	lea    eax,[esi+0x44]
c000ad97:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad9a:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ada0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ada4:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ada7:	e8 0f eb ff ff       	call   c00098bb <int_to_fp>
c000adac:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adaf:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000adb3:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000adb7:	99                   	cdq    
c000adb8:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000adbc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000adc0:	0f af d0             	imul   edx,eax
c000adc3:	0f af c3             	imul   eax,ebx
c000adc6:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adca:	29 c1                	sub    ecx,eax
c000adcc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000add0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000add4:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000addb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000addf:	57                   	push   edi
c000ade0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ade4:	6a 00                	push   0x0
c000ade6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adea:	e8 7d 59 ff ff       	call   c000076c <memset>
c000adef:	83 c4 10             	add    esp,0x10
c000adf2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adf6:	89 df                	mov    edi,ebx
c000adf8:	e8 cc ea ff ff       	call   c00098c9 <fp_to_double>
c000adfd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae01:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae05:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae09:	e8 b1 ea ff ff       	call   c00098bf <fp_to_int>
c000ae0e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae11:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae14:	51                   	push   ecx
c000ae15:	51                   	push   ecx
c000ae16:	55                   	push   ebp
c000ae17:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae1b:	e8 60 c9 01 00       	call   c0027780 <__subsf3>
c000ae20:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae23:	e8 37 e0 01 00       	call   c0028e5f <__extendsfdf2>
c000ae28:	83 c4 10             	add    esp,0x10
c000ae2b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae2f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae3b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae3f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae43:	e8 20 d6 01 00       	call   c0028468 <__muldf3>
c000ae48:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae4b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae4f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae53:	e8 07 e0 01 00       	call   c0028e5f <__extendsfdf2>
c000ae58:	83 c4 10             	add    esp,0x10
c000ae5b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae5f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae63:	52                   	push   edx
c000ae64:	50                   	push   eax
c000ae65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae6d:	e8 79 cf 01 00       	call   c0027deb <__adddf3>
c000ae72:	83 c4 10             	add    esp,0x10
c000ae75:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae79:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae7d:	89 f8                	mov    eax,edi
c000ae7f:	b9 08 00 00 00       	mov    ecx,0x8
c000ae84:	99                   	cdq    
c000ae85:	f7 f9                	idiv   ecx
c000ae87:	4a                   	dec    edx
c000ae88:	83 fa 06             	cmp    edx,0x6
c000ae8b:	77 07                	ja     c000ae94 <calc_output_multi+0x125>
c000ae8d:	ff 24 95 64 a7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd589c]
c000ae94:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae97:	4f                   	dec    edi
c000ae98:	83 ec 0c             	sub    esp,0xc
c000ae9b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aea2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aea9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aead:	e8 ad df 01 00       	call   c0028e5f <__extendsfdf2>
c000aeb2:	83 c4 10             	add    esp,0x10
c000aeb5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aeb9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aebd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aec1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aec5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aec9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aecd:	e8 96 d5 01 00       	call   c0028468 <__muldf3>
c000aed2:	83 c4 10             	add    esp,0x10
c000aed5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedd:	52                   	push   edx
c000aede:	50                   	push   eax
c000aedf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aee2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aee5:	e8 01 cf 01 00       	call   c0027deb <__adddf3>
c000aeea:	83 c4 10             	add    esp,0x10
c000aeed:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aef0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aef3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aef6:	4f                   	dec    edi
c000aef7:	83 ec 0c             	sub    esp,0xc
c000aefa:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aefd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af01:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af08:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af0c:	e8 4e df 01 00       	call   c0028e5f <__extendsfdf2>
c000af11:	83 c4 10             	add    esp,0x10
c000af14:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af18:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af2c:	e8 37 d5 01 00       	call   c0028468 <__muldf3>
c000af31:	83 c4 10             	add    esp,0x10
c000af34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3c:	52                   	push   edx
c000af3d:	50                   	push   eax
c000af3e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af41:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af44:	e8 a2 ce 01 00       	call   c0027deb <__adddf3>
c000af49:	83 c4 10             	add    esp,0x10
c000af4c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af4f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af55:	4f                   	dec    edi
c000af56:	83 ec 0c             	sub    esp,0xc
c000af59:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af60:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af67:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af6b:	e8 ef de 01 00       	call   c0028e5f <__extendsfdf2>
c000af70:	83 c4 10             	add    esp,0x10
c000af73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af77:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af83:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af87:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af8b:	e8 d8 d4 01 00       	call   c0028468 <__muldf3>
c000af90:	83 c4 10             	add    esp,0x10
c000af93:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af97:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9b:	52                   	push   edx
c000af9c:	50                   	push   eax
c000af9d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afa0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afa3:	e8 43 ce 01 00       	call   c0027deb <__adddf3>
c000afa8:	83 c4 10             	add    esp,0x10
c000afab:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afae:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afb1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afb4:	4f                   	dec    edi
c000afb5:	83 ec 0c             	sub    esp,0xc
c000afb8:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afbb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afbf:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afc6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afca:	e8 90 de 01 00       	call   c0028e5f <__extendsfdf2>
c000afcf:	83 c4 10             	add    esp,0x10
c000afd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afe2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afe6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afea:	e8 79 d4 01 00       	call   c0028468 <__muldf3>
c000afef:	83 c4 10             	add    esp,0x10
c000aff2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000affa:	52                   	push   edx
c000affb:	50                   	push   eax
c000affc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afff:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b002:	e8 e4 cd 01 00       	call   c0027deb <__adddf3>
c000b007:	83 c4 10             	add    esp,0x10
c000b00a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b00d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b010:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b013:	4f                   	dec    edi
c000b014:	83 ec 0c             	sub    esp,0xc
c000b017:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b01a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b01e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b025:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b029:	e8 31 de 01 00       	call   c0028e5f <__extendsfdf2>
c000b02e:	83 c4 10             	add    esp,0x10
c000b031:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b035:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b039:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b03d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b041:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b045:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b049:	e8 1a d4 01 00       	call   c0028468 <__muldf3>
c000b04e:	83 c4 10             	add    esp,0x10
c000b051:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b055:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b059:	52                   	push   edx
c000b05a:	50                   	push   eax
c000b05b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b05e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b061:	e8 85 cd 01 00       	call   c0027deb <__adddf3>
c000b066:	83 c4 10             	add    esp,0x10
c000b069:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b06c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b06f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b072:	4f                   	dec    edi
c000b073:	83 ec 0c             	sub    esp,0xc
c000b076:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b079:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b07d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b084:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b088:	e8 d2 dd 01 00       	call   c0028e5f <__extendsfdf2>
c000b08d:	83 c4 10             	add    esp,0x10
c000b090:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b094:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b098:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b09c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0a0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0a4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0a8:	e8 bb d3 01 00       	call   c0028468 <__muldf3>
c000b0ad:	83 c4 10             	add    esp,0x10
c000b0b0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b8:	52                   	push   edx
c000b0b9:	50                   	push   eax
c000b0ba:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0bd:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0c0:	e8 26 cd 01 00       	call   c0027deb <__adddf3>
c000b0c5:	83 c4 10             	add    esp,0x10
c000b0c8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0cb:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ce:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0d1:	4f                   	dec    edi
c000b0d2:	83 ec 0c             	sub    esp,0xc
c000b0d5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0dc:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0e3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0e7:	e8 73 dd 01 00       	call   c0028e5f <__extendsfdf2>
c000b0ec:	83 c4 10             	add    esp,0x10
c000b0ef:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0ff:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b103:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b107:	e8 5c d3 01 00       	call   c0028468 <__muldf3>
c000b10c:	83 c4 10             	add    esp,0x10
c000b10f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b113:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b117:	52                   	push   edx
c000b118:	50                   	push   eax
c000b119:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b11c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b11f:	e8 c7 cc 01 00       	call   c0027deb <__adddf3>
c000b124:	83 c4 10             	add    esp,0x10
c000b127:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b12a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b12d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b130:	4f                   	dec    edi
c000b131:	83 ec 0c             	sub    esp,0xc
c000b134:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b137:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b13b:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b142:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b146:	e8 14 dd 01 00       	call   c0028e5f <__extendsfdf2>
c000b14b:	83 c4 10             	add    esp,0x10
c000b14e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b152:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b156:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b15a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b15e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b162:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b166:	e8 fd d2 01 00       	call   c0028468 <__muldf3>
c000b16b:	83 c4 10             	add    esp,0x10
c000b16e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b172:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b176:	52                   	push   edx
c000b177:	50                   	push   eax
c000b178:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b17b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b17e:	e8 68 cc 01 00       	call   c0027deb <__adddf3>
c000b183:	83 c4 10             	add    esp,0x10
c000b186:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b189:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b18c:	85 ff                	test   edi,edi
c000b18e:	0f 8f e9 fc ff ff    	jg     c000ae7d <calc_output_multi+0x10e>
c000b194:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b198:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b19c:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1a0:	0f 89 4c fc ff ff    	jns    c000adf2 <calc_output_multi+0x83>
c000b1a6:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1aa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1ae:	29 c8                	sub    eax,ecx
c000b1b0:	99                   	cdq    
c000b1b1:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1b5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1b9:	0f af d0             	imul   edx,eax
c000b1bc:	40                   	inc    eax
c000b1bd:	01 d1                	add    ecx,edx
c000b1bf:	0f af c3             	imul   eax,ebx
c000b1c2:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1c6:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1cd:	55                   	push   ebp
c000b1ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1d2:	6a 00                	push   0x0
c000b1d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1d8:	e8 8f 55 ff ff       	call   c000076c <memset>
c000b1dd:	83 c4 10             	add    esp,0x10
c000b1e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1e4:	e8 e0 e6 ff ff       	call   c00098c9 <fp_to_double>
c000b1e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1ed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1f5:	e8 c5 e6 ff ff       	call   c00098bf <fp_to_int>
c000b1fa:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1fd:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b200:	57                   	push   edi
c000b201:	57                   	push   edi
c000b202:	89 df                	mov    edi,ebx
c000b204:	55                   	push   ebp
c000b205:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b209:	e8 72 c5 01 00       	call   c0027780 <__subsf3>
c000b20e:	89 04 24             	mov    DWORD PTR [esp],eax
c000b211:	e8 49 dc 01 00       	call   c0028e5f <__extendsfdf2>
c000b216:	83 c4 10             	add    esp,0x10
c000b219:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b21d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b221:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b225:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b229:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b22d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b231:	e8 32 d2 01 00       	call   c0028468 <__muldf3>
c000b236:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b239:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b23d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b241:	e8 19 dc 01 00       	call   c0028e5f <__extendsfdf2>
c000b246:	83 c4 10             	add    esp,0x10
c000b249:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b24d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b251:	52                   	push   edx
c000b252:	50                   	push   eax
c000b253:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b257:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b25b:	e8 8b cb 01 00       	call   c0027deb <__adddf3>
c000b260:	83 c4 10             	add    esp,0x10
c000b263:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b267:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b26b:	89 f8                	mov    eax,edi
c000b26d:	b9 08 00 00 00       	mov    ecx,0x8
c000b272:	99                   	cdq    
c000b273:	f7 f9                	idiv   ecx
c000b275:	4a                   	dec    edx
c000b276:	83 fa 06             	cmp    edx,0x6
c000b279:	77 07                	ja     c000b282 <calc_output_multi+0x513>
c000b27b:	ff 24 95 80 a7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5880]
c000b282:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b286:	4f                   	dec    edi
c000b287:	83 ec 0c             	sub    esp,0xc
c000b28a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b28d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b291:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b298:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b29c:	e8 be db 01 00       	call   c0028e5f <__extendsfdf2>
c000b2a1:	83 c4 10             	add    esp,0x10
c000b2a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2a8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2bc:	e8 a7 d1 01 00       	call   c0028468 <__muldf3>
c000b2c1:	83 c4 10             	add    esp,0x10
c000b2c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cc:	52                   	push   edx
c000b2cd:	50                   	push   eax
c000b2ce:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2d1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2d4:	e8 12 cb 01 00       	call   c0027deb <__adddf3>
c000b2d9:	83 c4 10             	add    esp,0x10
c000b2dc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2df:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2e6:	4f                   	dec    edi
c000b2e7:	83 ec 0c             	sub    esp,0xc
c000b2ea:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2f1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2f8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2fc:	e8 5e db 01 00       	call   c0028e5f <__extendsfdf2>
c000b301:	83 c4 10             	add    esp,0x10
c000b304:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b308:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b30c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b310:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b314:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b318:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b31c:	e8 47 d1 01 00       	call   c0028468 <__muldf3>
c000b321:	83 c4 10             	add    esp,0x10
c000b324:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b328:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32c:	52                   	push   edx
c000b32d:	50                   	push   eax
c000b32e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b331:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b334:	e8 b2 ca 01 00       	call   c0027deb <__adddf3>
c000b339:	83 c4 10             	add    esp,0x10
c000b33c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b33f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b342:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b346:	4f                   	dec    edi
c000b347:	83 ec 0c             	sub    esp,0xc
c000b34a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b34d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b351:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b358:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b35c:	e8 fe da 01 00       	call   c0028e5f <__extendsfdf2>
c000b361:	83 c4 10             	add    esp,0x10
c000b364:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b368:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b36c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b370:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b374:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b378:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b37c:	e8 e7 d0 01 00       	call   c0028468 <__muldf3>
c000b381:	83 c4 10             	add    esp,0x10
c000b384:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b388:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38c:	52                   	push   edx
c000b38d:	50                   	push   eax
c000b38e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b391:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b394:	e8 52 ca 01 00       	call   c0027deb <__adddf3>
c000b399:	83 c4 10             	add    esp,0x10
c000b39c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b39f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3a6:	4f                   	dec    edi
c000b3a7:	83 ec 0c             	sub    esp,0xc
c000b3aa:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3b1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3b8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3bc:	e8 9e da 01 00       	call   c0028e5f <__extendsfdf2>
c000b3c1:	83 c4 10             	add    esp,0x10
c000b3c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3dc:	e8 87 d0 01 00       	call   c0028468 <__muldf3>
c000b3e1:	83 c4 10             	add    esp,0x10
c000b3e4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ec:	52                   	push   edx
c000b3ed:	50                   	push   eax
c000b3ee:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3f1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3f4:	e8 f2 c9 01 00       	call   c0027deb <__adddf3>
c000b3f9:	83 c4 10             	add    esp,0x10
c000b3fc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3ff:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b402:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b406:	4f                   	dec    edi
c000b407:	83 ec 0c             	sub    esp,0xc
c000b40a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b40d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b411:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b418:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b41c:	e8 3e da 01 00       	call   c0028e5f <__extendsfdf2>
c000b421:	83 c4 10             	add    esp,0x10
c000b424:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b428:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b42c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b434:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b438:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b43c:	e8 27 d0 01 00       	call   c0028468 <__muldf3>
c000b441:	83 c4 10             	add    esp,0x10
c000b444:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b448:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44c:	52                   	push   edx
c000b44d:	50                   	push   eax
c000b44e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b451:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b454:	e8 92 c9 01 00       	call   c0027deb <__adddf3>
c000b459:	83 c4 10             	add    esp,0x10
c000b45c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b45f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b462:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b466:	4f                   	dec    edi
c000b467:	83 ec 0c             	sub    esp,0xc
c000b46a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b46d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b471:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b478:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b47c:	e8 de d9 01 00       	call   c0028e5f <__extendsfdf2>
c000b481:	83 c4 10             	add    esp,0x10
c000b484:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b488:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b48c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b490:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b494:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b498:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b49c:	e8 c7 cf 01 00       	call   c0028468 <__muldf3>
c000b4a1:	83 c4 10             	add    esp,0x10
c000b4a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ac:	52                   	push   edx
c000b4ad:	50                   	push   eax
c000b4ae:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4b1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4b4:	e8 32 c9 01 00       	call   c0027deb <__adddf3>
c000b4b9:	83 c4 10             	add    esp,0x10
c000b4bc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4bf:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4c6:	4f                   	dec    edi
c000b4c7:	83 ec 0c             	sub    esp,0xc
c000b4ca:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4d1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4d8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4dc:	e8 7e d9 01 00       	call   c0028e5f <__extendsfdf2>
c000b4e1:	83 c4 10             	add    esp,0x10
c000b4e4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4e8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4fc:	e8 67 cf 01 00       	call   c0028468 <__muldf3>
c000b501:	83 c4 10             	add    esp,0x10
c000b504:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b508:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50c:	52                   	push   edx
c000b50d:	50                   	push   eax
c000b50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b514:	e8 d2 c8 01 00       	call   c0027deb <__adddf3>
c000b519:	83 c4 10             	add    esp,0x10
c000b51c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b51f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b522:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b526:	4f                   	dec    edi
c000b527:	83 ec 0c             	sub    esp,0xc
c000b52a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b52d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b531:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b538:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b53c:	e8 1e d9 01 00       	call   c0028e5f <__extendsfdf2>
c000b541:	83 c4 10             	add    esp,0x10
c000b544:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b548:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b54c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b550:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b554:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b558:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b55c:	e8 07 cf 01 00       	call   c0028468 <__muldf3>
c000b561:	83 c4 10             	add    esp,0x10
c000b564:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b568:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56c:	52                   	push   edx
c000b56d:	50                   	push   eax
c000b56e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b571:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b574:	e8 72 c8 01 00       	call   c0027deb <__adddf3>
c000b579:	83 c4 10             	add    esp,0x10
c000b57c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b57f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b582:	85 ff                	test   edi,edi
c000b584:	0f 8f e1 fc ff ff    	jg     c000b26b <calc_output_multi+0x4fc>
c000b58a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b58e:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b592:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b596:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b59b:	0f 8f 3f fc ff ff    	jg     c000b1e0 <calc_output_multi+0x471>
c000b5a1:	be 08 00 00 00       	mov    esi,0x8
c000b5a6:	89 d8                	mov    eax,ebx
c000b5a8:	99                   	cdq    
c000b5a9:	f7 fe                	idiv   esi
c000b5ab:	4a                   	dec    edx
c000b5ac:	83 fa 06             	cmp    edx,0x6
c000b5af:	77 07                	ja     c000b5b8 <calc_output_multi+0x849>
c000b5b1:	ff 24 95 9c a7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5864]
c000b5b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5bc:	4b                   	dec    ebx
c000b5bd:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5c1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5c8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5cc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5cf:	e8 17 c8 01 00       	call   c0027deb <__adddf3>
c000b5d4:	83 c4 10             	add    esp,0x10
c000b5d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ef:	e8 74 ce 01 00       	call   c0028468 <__muldf3>
c000b5f4:	5d                   	pop    ebp
c000b5f5:	59                   	pop    ecx
c000b5f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b602:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b606:	e8 30 d7 01 00       	call   c0028d3b <__truncdfsf2>
c000b60b:	83 c4 10             	add    esp,0x10
c000b60e:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b612:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b615:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b619:	4b                   	dec    ebx
c000b61a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b61e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b625:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b629:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b62c:	e8 ba c7 01 00       	call   c0027deb <__adddf3>
c000b631:	83 c4 10             	add    esp,0x10
c000b634:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b638:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b63c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b640:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64c:	e8 17 ce 01 00       	call   c0028468 <__muldf3>
c000b651:	59                   	pop    ecx
c000b652:	5f                   	pop    edi
c000b653:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b657:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b65b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b65f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b663:	e8 d3 d6 01 00       	call   c0028d3b <__truncdfsf2>
c000b668:	83 c4 10             	add    esp,0x10
c000b66b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b66f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b672:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b676:	4b                   	dec    ebx
c000b677:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b67b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b67e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b682:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b686:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b689:	e8 5d c7 01 00       	call   c0027deb <__adddf3>
c000b68e:	83 c4 10             	add    esp,0x10
c000b691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b699:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b69d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a9:	e8 ba cd 01 00       	call   c0028468 <__muldf3>
c000b6ae:	5f                   	pop    edi
c000b6af:	5d                   	pop    ebp
c000b6b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c0:	e8 76 d6 01 00       	call   c0028d3b <__truncdfsf2>
c000b6c5:	83 c4 10             	add    esp,0x10
c000b6c8:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6cc:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6d3:	4b                   	dec    ebx
c000b6d4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6d8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6df:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6e3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6e6:	e8 00 c7 01 00       	call   c0027deb <__adddf3>
c000b6eb:	83 c4 10             	add    esp,0x10
c000b6ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b706:	e8 5d cd 01 00       	call   c0028468 <__muldf3>
c000b70b:	5d                   	pop    ebp
c000b70c:	59                   	pop    ecx
c000b70d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b711:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b715:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b719:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b71d:	e8 19 d6 01 00       	call   c0028d3b <__truncdfsf2>
c000b722:	83 c4 10             	add    esp,0x10
c000b725:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b729:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b72c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b730:	4b                   	dec    ebx
c000b731:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b735:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b73c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b740:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b743:	e8 a3 c6 01 00       	call   c0027deb <__adddf3>
c000b748:	83 c4 10             	add    esp,0x10
c000b74b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b74f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b753:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b757:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b763:	e8 00 cd 01 00       	call   c0028468 <__muldf3>
c000b768:	59                   	pop    ecx
c000b769:	5f                   	pop    edi
c000b76a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b76e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b772:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b776:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77a:	e8 bc d5 01 00       	call   c0028d3b <__truncdfsf2>
c000b77f:	83 c4 10             	add    esp,0x10
c000b782:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b786:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b789:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b78d:	4b                   	dec    ebx
c000b78e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b792:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b795:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b799:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b79d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7a0:	e8 46 c6 01 00       	call   c0027deb <__adddf3>
c000b7a5:	83 c4 10             	add    esp,0x10
c000b7a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7c0:	e8 a3 cc 01 00       	call   c0028468 <__muldf3>
c000b7c5:	5f                   	pop    edi
c000b7c6:	5d                   	pop    ebp
c000b7c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7cb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7d7:	e8 5f d5 01 00       	call   c0028d3b <__truncdfsf2>
c000b7dc:	83 c4 10             	add    esp,0x10
c000b7df:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7e3:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ea:	4b                   	dec    ebx
c000b7eb:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7ef:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7f6:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7fa:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7fd:	e8 e9 c5 01 00       	call   c0027deb <__adddf3>
c000b802:	83 c4 10             	add    esp,0x10
c000b805:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b809:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b80d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b811:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b81d:	e8 46 cc 01 00       	call   c0028468 <__muldf3>
c000b822:	5d                   	pop    ebp
c000b823:	59                   	pop    ecx
c000b824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b82c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b830:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b834:	e8 02 d5 01 00       	call   c0028d3b <__truncdfsf2>
c000b839:	83 c4 10             	add    esp,0x10
c000b83c:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b840:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b843:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b847:	4b                   	dec    ebx
c000b848:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b84c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b84f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b853:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b857:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b85a:	e8 8c c5 01 00       	call   c0027deb <__adddf3>
c000b85f:	83 c4 10             	add    esp,0x10
c000b862:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b866:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b86a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b86e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b87a:	e8 e9 cb 01 00       	call   c0028468 <__muldf3>
c000b87f:	59                   	pop    ecx
c000b880:	5f                   	pop    edi
c000b881:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b885:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b889:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b88d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b891:	e8 a5 d4 01 00       	call   c0028d3b <__truncdfsf2>
c000b896:	83 c4 10             	add    esp,0x10
c000b899:	85 db                	test   ebx,ebx
c000b89b:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b89f:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8a2:	0f 8f fe fc ff ff    	jg     c000b5a6 <calc_output_multi+0x837>
c000b8a8:	83 c4 4c             	add    esp,0x4c
c000b8ab:	5b                   	pop    ebx
c000b8ac:	5e                   	pop    esi
c000b8ad:	5f                   	pop    edi
c000b8ae:	5d                   	pop    ebp
c000b8af:	c3                   	ret    

c000b8b0 <double_to_fp>:
c000b8b0:	83 ec 0c             	sub    esp,0xc
c000b8b3:	68 00 00 b0 40       	push   0x40b00000
c000b8b8:	6a 00                	push   0x0
c000b8ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8c2:	e8 a1 cb 01 00       	call   c0028468 <__muldf3>
c000b8c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8cb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8cf:	83 c4 1c             	add    esp,0x1c
c000b8d2:	e9 19 d6 01 00       	jmp    c0028ef0 <lrint>

c000b8d7 <prepare_data>:
c000b8d7:	55                   	push   ebp
c000b8d8:	57                   	push   edi
c000b8d9:	56                   	push   esi
c000b8da:	53                   	push   ebx
c000b8db:	83 ec 1c             	sub    esp,0x1c
c000b8de:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8e2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8e6:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8ea:	0f 89 57 01 00 00    	jns    c000ba47 <prepare_data+0x170>
c000b8f0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8f3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8f6:	85 d2                	test   edx,edx
c000b8f8:	75 0d                	jne    c000b907 <prepare_data+0x30>
c000b8fa:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8fd:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b900:	29 d0                	sub    eax,edx
c000b902:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b905:	eb 44                	jmp    c000b94b <prepare_data+0x74>
c000b907:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b90a:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b90d:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b910:	39 c1                	cmp    ecx,eax
c000b912:	7d 04                	jge    c000b918 <prepare_data+0x41>
c000b914:	29 d0                	sub    eax,edx
c000b916:	eb 2d                	jmp    c000b945 <prepare_data+0x6e>
c000b918:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b91e:	29 d7                	sub    edi,edx
c000b920:	01 f7                	add    edi,esi
c000b922:	51                   	push   ecx
c000b923:	29 f2                	sub    edx,esi
c000b925:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b92c:	8d 14 90             	lea    edx,[eax+edx*4]
c000b92f:	51                   	push   ecx
c000b930:	52                   	push   edx
c000b931:	50                   	push   eax
c000b932:	e8 6d 4d ff ff       	call   c00006a4 <memmove>
c000b937:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b93a:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b93d:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b940:	29 f0                	sub    eax,esi
c000b942:	83 c4 10             	add    esp,0x10
c000b945:	29 f0                	sub    eax,esi
c000b947:	79 02                	jns    c000b94b <prepare_data+0x74>
c000b949:	31 c0                	xor    eax,eax
c000b94b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b94e:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b951:	29 ef                	sub    edi,ebp
c000b953:	39 c7                	cmp    edi,eax
c000b955:	7e 02                	jle    c000b959 <prepare_data+0x82>
c000b957:	89 c7                	mov    edi,eax
c000b959:	89 f8                	mov    eax,edi
c000b95b:	99                   	cdq    
c000b95c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b95f:	b8 15 00 00 00       	mov    eax,0x15
c000b964:	29 d7                	sub    edi,edx
c000b966:	0f 88 dd 00 00 00    	js     c000ba49 <prepare_data+0x172>
c000b96c:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b96f:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b972:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b975:	0f 8f ce 00 00 00    	jg     c000ba49 <prepare_data+0x172>
c000b97b:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b981:	50                   	push   eax
c000b982:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b989:	50                   	push   eax
c000b98a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b98e:	8b 00                	mov    eax,DWORD PTR [eax]
c000b990:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b993:	50                   	push   eax
c000b994:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b997:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b99b:	50                   	push   eax
c000b99c:	e8 c1 4c ff ff       	call   c0000662 <memcpy>
c000b9a1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9a4:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9a7:	01 fd                	add    ebp,edi
c000b9a9:	01 f9                	add    ecx,edi
c000b9ab:	83 c4 10             	add    esp,0x10
c000b9ae:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9b1:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9b4:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9bb:	0f 85 86 00 00 00    	jne    c000ba47 <prepare_data+0x170>
c000b9c1:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9c4:	89 e8                	mov    eax,ebp
c000b9c6:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9c9:	29 c8                	sub    eax,ecx
c000b9cb:	39 f8                	cmp    eax,edi
c000b9cd:	7d 78                	jge    c000ba47 <prepare_data+0x170>
c000b9cf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9d3:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9d7:	74 6e                	je     c000ba47 <prepare_data+0x170>
c000b9d9:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9dc:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9e0:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9e3:	29 ef                	sub    edi,ebp
c000b9e5:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9e9:	7c 29                	jl     c000ba14 <prepare_data+0x13d>
c000b9eb:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9ee:	29 f1                	sub    ecx,esi
c000b9f0:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9f7:	55                   	push   ebp
c000b9f8:	50                   	push   eax
c000b9f9:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9fc:	50                   	push   eax
c000b9fd:	52                   	push   edx
c000b9fe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba02:	e8 9d 4c ff ff       	call   c00006a4 <memmove>
c000ba07:	83 c4 10             	add    esp,0x10
c000ba0a:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba0d:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba10:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba14:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba17:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba1a:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba1d:	83 c6 05             	add    esi,0x5
c000ba20:	78 07                	js     c000ba29 <prepare_data+0x152>
c000ba22:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba25:	39 cf                	cmp    edi,ecx
c000ba27:	7e 04                	jle    c000ba2d <prepare_data+0x156>
c000ba29:	89 ce                	mov    esi,ecx
c000ba2b:	29 c6                	sub    esi,eax
c000ba2d:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba30:	51                   	push   ecx
c000ba31:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba38:	51                   	push   ecx
c000ba39:	6a 00                	push   0x0
c000ba3b:	50                   	push   eax
c000ba3c:	e8 2b 4d ff ff       	call   c000076c <memset>
c000ba41:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba44:	83 c4 10             	add    esp,0x10
c000ba47:	31 c0                	xor    eax,eax
c000ba49:	83 c4 1c             	add    esp,0x1c
c000ba4c:	5b                   	pop    ebx
c000ba4d:	5e                   	pop    esi
c000ba4e:	5f                   	pop    edi
c000ba4f:	5d                   	pop    ebp
c000ba50:	c3                   	ret    

c000ba51 <sinc_multichan_vari_process>:
c000ba51:	55                   	push   ebp
c000ba52:	ba 05 00 00 00       	mov    edx,0x5
c000ba57:	57                   	push   edi
c000ba58:	56                   	push   esi
c000ba59:	53                   	push   ebx
c000ba5a:	83 ec 4c             	sub    esp,0x4c
c000ba5d:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba61:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba65:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba68:	85 db                	test   ebx,ebx
c000ba6a:	0f 84 9b 06 00 00    	je     c000c10b <sinc_multichan_vari_process+0x6ba>
c000ba70:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba73:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba76:	0f af c5             	imul   eax,ebp
c000ba79:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba7c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba7f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba86:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba8d:	0f af c5             	imul   eax,ebp
c000ba90:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba96:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000baa0:	68 00 00 70 3f       	push   0x3f700000
c000baa5:	6a 00                	push   0x0
c000baa7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baaf:	e8 83 d2 01 00       	call   c0028d37 <__ltdf2>
c000bab4:	83 c4 10             	add    esp,0x10
c000bab7:	ba 16 00 00 00       	mov    edx,0x16
c000babc:	85 c0                	test   eax,eax
c000babe:	0f 88 47 06 00 00    	js     c000c10b <sinc_multichan_vari_process+0x6ba>
c000bac4:	68 00 00 70 40       	push   0x40700000
c000bac9:	6a 00                	push   0x0
c000bacb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bacf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad3:	e8 41 d2 01 00       	call   c0028d19 <__gtdf2>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	ba 16 00 00 00       	mov    edx,0x16
c000bae0:	85 c0                	test   eax,eax
c000bae2:	0f 8f 23 06 00 00    	jg     c000c10b <sinc_multichan_vari_process+0x6ba>
c000bae8:	83 ec 0c             	sub    esp,0xc
c000baeb:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000baee:	e8 d8 cf 01 00       	call   c0028acb <__floatsidf>
c000baf3:	83 c4 10             	add    esp,0x10
c000baf6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bafa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bafe:	68 00 00 00 40       	push   0x40000000
c000bb03:	6a 00                	push   0x0
c000bb05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb0d:	e8 d9 c2 01 00       	call   c0027deb <__adddf3>
c000bb12:	59                   	pop    ecx
c000bb13:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb17:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb1b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb1e:	e8 a8 cf 01 00       	call   c0028acb <__floatsidf>
c000bb23:	83 c4 10             	add    esp,0x10
c000bb26:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb2a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2e:	52                   	push   edx
c000bb2f:	50                   	push   eax
c000bb30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb38:	e8 0f cc 01 00       	call   c002874c <__divdf3>
c000bb3d:	83 c4 10             	add    esp,0x10
c000bb40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb44:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb48:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb4b:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb4e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb52:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb66:	e8 ae d1 01 00       	call   c0028d19 <__gtdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	7e 2d                	jle    c000bb9f <sinc_multichan_vari_process+0x14e>
c000bb72:	68 00 00 f0 3f       	push   0x3ff00000
c000bb77:	6a 00                	push   0x0
c000bb79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb81:	e8 b1 d1 01 00       	call   c0028d37 <__ltdf2>
c000bb86:	83 c4 10             	add    esp,0x10
c000bb89:	85 c0                	test   eax,eax
c000bb8b:	79 4d                	jns    c000bbda <sinc_multichan_vari_process+0x189>
c000bb8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb99:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb9d:	eb 1b                	jmp    c000bbba <sinc_multichan_vari_process+0x169>
c000bb9f:	68 00 00 f0 3f       	push   0x3ff00000
c000bba4:	6a 00                	push   0x0
c000bba6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbae:	e8 84 d1 01 00       	call   c0028d37 <__ltdf2>
c000bbb3:	83 c4 10             	add    esp,0x10
c000bbb6:	85 c0                	test   eax,eax
c000bbb8:	79 20                	jns    c000bbda <sinc_multichan_vari_process+0x189>
c000bbba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbbe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbc2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbca:	e8 7d cb 01 00       	call   c002874c <__divdf3>
c000bbcf:	83 c4 10             	add    esp,0x10
c000bbd2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbd6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbda:	50                   	push   eax
c000bbdb:	50                   	push   eax
c000bbdc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe4:	e8 07 d3 01 00       	call   c0028ef0 <lrint>
c000bbe9:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbec:	40                   	inc    eax
c000bbed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbf1:	0f af c5             	imul   eax,ebp
c000bbf4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbf8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbfb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbff:	58                   	pop    eax
c000bc00:	5a                   	pop    edx
c000bc01:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc05:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc09:	e8 e2 d2 01 00       	call   c0028ef0 <lrint>
c000bc0e:	83 ec 0c             	sub    esp,0xc
c000bc11:	50                   	push   eax
c000bc12:	e8 b4 ce 01 00       	call   c0028acb <__floatsidf>
c000bc17:	83 c4 10             	add    esp,0x10
c000bc1a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc1e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc22:	52                   	push   edx
c000bc23:	50                   	push   eax
c000bc24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc28:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc2c:	e8 0b c8 01 00       	call   c002843c <__subdf3>
c000bc31:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc35:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc39:	83 c4 20             	add    esp,0x20
c000bc3c:	6a 00                	push   0x0
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 ea d0 01 00       	call   c0028d37 <__ltdf2>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	85 c0                	test   eax,eax
c000bc52:	79 1f                	jns    c000bc73 <sinc_multichan_vari_process+0x222>
c000bc54:	68 00 00 f0 3f       	push   0x3ff00000
c000bc59:	6a 00                	push   0x0
c000bc5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	e8 83 c1 01 00       	call   c0027deb <__adddf3>
c000bc68:	83 c4 10             	add    esp,0x10
c000bc6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc6f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc73:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc76:	83 ec 10             	sub    esp,0x10
c000bc79:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc7d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc88:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc8c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc90:	e8 a7 c7 01 00       	call   c002843c <__subdf3>
c000bc95:	83 c4 18             	add    esp,0x18
c000bc98:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc9c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bca0:	52                   	push   edx
c000bca1:	50                   	push   eax
c000bca2:	e8 49 d2 01 00       	call   c0028ef0 <lrint>
c000bca7:	0f af e8             	imul   ebp,eax
c000bcaa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bcae:	01 e8                	add    eax,ebp
c000bcb0:	99                   	cdq    
c000bcb1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcb4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcb7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcbb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcbf:	68 00 00 f0 3f       	push   0x3ff00000
c000bcc4:	6a 00                	push   0x0
c000bcc6:	e8 81 ca 01 00       	call   c002874c <__divdf3>
c000bccb:	83 c4 10             	add    esp,0x10
c000bcce:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcd6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcdb:	68 23 42 92 0c       	push   0xc924223
c000bce0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bce4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bce8:	e8 fe c0 01 00       	call   c0027deb <__adddf3>
c000bced:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcf1:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcf5:	83 c4 20             	add    esp,0x20
c000bcf8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd00:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd08:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd0b:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd0e:	7d 50                	jge    c000bd60 <sinc_multichan_vari_process+0x30f>
c000bd10:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd13:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd16:	01 c8                	add    eax,ecx
c000bd18:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd1b:	99                   	cdq    
c000bd1c:	f7 f9                	idiv   ecx
c000bd1e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd22:	7d 0c                	jge    c000bd30 <sinc_multichan_vari_process+0x2df>
c000bd24:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd27:	85 ed                	test   ebp,ebp
c000bd29:	79 6b                	jns    c000bd96 <sinc_multichan_vari_process+0x345>
c000bd2b:	e9 e6 00 00 00       	jmp    c000be16 <sinc_multichan_vari_process+0x3c5>
c000bd30:	50                   	push   eax
c000bd31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd35:	57                   	push   edi
c000bd36:	53                   	push   ebx
c000bd37:	e8 9b fb ff ff       	call   c000b8d7 <prepare_data>
c000bd3c:	83 c4 10             	add    esp,0x10
c000bd3f:	89 c2                	mov    edx,eax
c000bd41:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd44:	85 c0                	test   eax,eax
c000bd46:	0f 85 bf 03 00 00    	jne    c000c10b <sinc_multichan_vari_process+0x6ba>
c000bd4c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd4f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd52:	01 c8                	add    eax,ecx
c000bd54:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd57:	99                   	cdq    
c000bd58:	f7 f9                	idiv   ecx
c000bd5a:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd5e:	7c c4                	jl     c000bd24 <sinc_multichan_vari_process+0x2d3>
c000bd60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd68:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd6b:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd72:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd76:	89 06                	mov    DWORD PTR [esi],eax
c000bd78:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd7b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd7e:	99                   	cdq    
c000bd7f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd82:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd85:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd88:	99                   	cdq    
c000bd89:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd8c:	31 d2                	xor    edx,edx
c000bd8e:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd91:	e9 75 03 00 00       	jmp    c000c10b <sinc_multichan_vari_process+0x6ba>
c000bd96:	83 ec 0c             	sub    esp,0xc
c000bd99:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd9c:	e8 2a cd 01 00       	call   c0028acb <__floatsidf>
c000bda1:	83 c4 10             	add    esp,0x10
c000bda4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bda8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdb8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbc:	e8 2a c0 01 00       	call   c0027deb <__adddf3>
c000bdc1:	83 c4 10             	add    esp,0x10
c000bdc4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdd0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddc:	e8 0a c0 01 00       	call   c0027deb <__adddf3>
c000bde1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bde4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bde8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdec:	e8 da cc 01 00       	call   c0028acb <__floatsidf>
c000bdf1:	83 c4 10             	add    esp,0x10
c000bdf4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bdf8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bdfc:	52                   	push   edx
c000bdfd:	50                   	push   eax
c000bdfe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be02:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be06:	e8 2a cf 01 00       	call   c0028d35 <__gedf2>
c000be0b:	83 c4 10             	add    esp,0x10
c000be0e:	85 c0                	test   eax,eax
c000be10:	0f 89 4a ff ff ff    	jns    c000bd60 <sinc_multichan_vari_process+0x30f>
c000be16:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be1a:	0f 8e ed 00 00 00    	jle    c000bf0d <sinc_multichan_vari_process+0x4bc>
c000be20:	83 ec 10             	sub    esp,0x10
c000be23:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be26:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be29:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be2c:	ff 36                	push   DWORD PTR [esi]
c000be2e:	e8 09 c6 01 00       	call   c002843c <__subdf3>
c000be33:	83 c4 18             	add    esp,0x18
c000be36:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be3a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be3e:	52                   	push   edx
c000be3f:	50                   	push   eax
c000be40:	e8 8b d0 01 00       	call   c0028ed0 <fabs>
c000be45:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be49:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be4d:	83 c4 10             	add    esp,0x10
c000be50:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be55:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be62:	e8 b2 ce 01 00       	call   c0028d19 <__gtdf2>
c000be67:	83 c4 10             	add    esp,0x10
c000be6a:	85 c0                	test   eax,eax
c000be6c:	0f 8e 9b 00 00 00    	jle    c000bf0d <sinc_multichan_vari_process+0x4bc>
c000be72:	8b 06                	mov    eax,DWORD PTR [esi]
c000be74:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be7f:	52                   	push   edx
c000be80:	50                   	push   eax
c000be81:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be84:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be87:	e8 b0 c5 01 00       	call   c002843c <__subdf3>
c000be8c:	59                   	pop    ecx
c000be8d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be91:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be95:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be98:	e8 2e cc 01 00       	call   c0028acb <__floatsidf>
c000be9d:	83 c4 10             	add    esp,0x10
c000bea0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bea4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bea8:	52                   	push   edx
c000bea9:	50                   	push   eax
c000beaa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000beae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000beb2:	e8 b1 c5 01 00       	call   c0028468 <__muldf3>
c000beb7:	5d                   	pop    ebp
c000beb8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bebc:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bec0:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bec3:	e8 03 cc 01 00       	call   c0028acb <__floatsidf>
c000bec8:	83 c4 10             	add    esp,0x10
c000becb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000becf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bed3:	52                   	push   edx
c000bed4:	50                   	push   eax
c000bed5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bedd:	e8 6a c8 01 00       	call   c002874c <__divdf3>
c000bee2:	83 c4 10             	add    esp,0x10
c000bee5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bee9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000beed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bef1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bef5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befd:	e8 e9 be 01 00       	call   c0027deb <__adddf3>
c000bf02:	83 c4 10             	add    esp,0x10
c000bf05:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf09:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf0d:	83 ec 0c             	sub    esp,0xc
c000bf10:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf13:	e8 b3 cb 01 00       	call   c0028acb <__floatsidf>
c000bf18:	83 c4 10             	add    esp,0x10
c000bf1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf33:	e8 ff cd 01 00       	call   c0028d37 <__ltdf2>
c000bf38:	83 c4 10             	add    esp,0x10
c000bf3b:	85 c0                	test   eax,eax
c000bf3d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf41:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf45:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf49:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf4d:	78 10                	js     c000bf5f <sinc_multichan_vari_process+0x50e>
c000bf4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf53:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf5f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf63:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf6b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf6f:	e8 f4 c4 01 00       	call   c0028468 <__muldf3>
c000bf74:	59                   	pop    ecx
c000bf75:	5d                   	pop    ebp
c000bf76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf86:	e8 25 f9 ff ff       	call   c000b8b0 <double_to_fp>
c000bf8b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8f:	89 c5                	mov    ebp,eax
c000bf91:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf95:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf99:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf9d:	e8 c6 c4 01 00       	call   c0028468 <__muldf3>
c000bfa2:	83 c4 18             	add    esp,0x18
c000bfa5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfa9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfad:	52                   	push   edx
c000bfae:	50                   	push   eax
c000bfaf:	e8 fc f8 ff ff       	call   c000b8b0 <double_to_fp>
c000bfb4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfb7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfbb:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfbe:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfc1:	50                   	push   eax
c000bfc2:	50                   	push   eax
c000bfc3:	50                   	push   eax
c000bfc4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfc7:	e8 ff ca 01 00       	call   c0028acb <__floatsidf>
c000bfcc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfd0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfd4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfd8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfdc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfe0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfe4:	e8 63 c7 01 00       	call   c002874c <__divdf3>
c000bfe9:	83 c4 1c             	add    esp,0x1c
c000bfec:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bff0:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bff4:	52                   	push   edx
c000bff5:	89 ea                	mov    edx,ebp
c000bff7:	50                   	push   eax
c000bff8:	89 d8                	mov    eax,ebx
c000bffa:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bffd:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c001:	e8 69 ed ff ff       	call   c000ad6f <calc_output_multi>
c000c006:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c009:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c00c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c010:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c014:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c018:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c01c:	e8 2b c7 01 00       	call   c002874c <__divdf3>
c000c021:	83 c4 10             	add    esp,0x10
c000c024:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c028:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c02c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c030:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c034:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c038:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c03c:	e8 aa bd 01 00       	call   c0027deb <__adddf3>
c000c041:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c045:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c049:	83 c4 28             	add    esp,0x28
c000c04c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c050:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c054:	e8 97 ce 01 00       	call   c0028ef0 <lrint>
c000c059:	83 ec 0c             	sub    esp,0xc
c000c05c:	50                   	push   eax
c000c05d:	e8 69 ca 01 00       	call   c0028acb <__floatsidf>
c000c062:	83 c4 10             	add    esp,0x10
c000c065:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c069:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c06d:	52                   	push   edx
c000c06e:	50                   	push   eax
c000c06f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c073:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c077:	e8 c0 c3 01 00       	call   c002843c <__subdf3>
c000c07c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c080:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c084:	83 c4 20             	add    esp,0x20
c000c087:	6a 00                	push   0x0
c000c089:	6a 00                	push   0x0
c000c08b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c093:	e8 9f cc 01 00       	call   c0028d37 <__ltdf2>
c000c098:	83 c4 10             	add    esp,0x10
c000c09b:	85 c0                	test   eax,eax
c000c09d:	79 20                	jns    c000c0bf <sinc_multichan_vari_process+0x66e>
c000c09f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0af:	e8 37 bd 01 00       	call   c0027deb <__adddf3>
c000c0b4:	83 c4 10             	add    esp,0x10
c000c0b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0bf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0c2:	83 ec 10             	sub    esp,0x10
c000c0c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0c9:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0d4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0d8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0dc:	e8 5b c3 01 00       	call   c002843c <__subdf3>
c000c0e1:	83 c4 18             	add    esp,0x18
c000c0e4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0ec:	52                   	push   edx
c000c0ed:	50                   	push   eax
c000c0ee:	e8 fd cd 01 00       	call   c0028ef0 <lrint>
c000c0f3:	0f af e8             	imul   ebp,eax
c000c0f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0fa:	83 c4 10             	add    esp,0x10
c000c0fd:	01 e8                	add    eax,ebp
c000c0ff:	99                   	cdq    
c000c100:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c103:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c106:	e9 fd fb ff ff       	jmp    c000bd08 <sinc_multichan_vari_process+0x2b7>
c000c10b:	83 c4 4c             	add    esp,0x4c
c000c10e:	89 d0                	mov    eax,edx
c000c110:	5b                   	pop    ebx
c000c111:	5e                   	pop    esi
c000c112:	5f                   	pop    edi
c000c113:	5d                   	pop    ebp
c000c114:	c3                   	ret    

c000c115 <sinc_hex_vari_process>:
c000c115:	55                   	push   ebp
c000c116:	ba 05 00 00 00       	mov    edx,0x5
c000c11b:	57                   	push   edi
c000c11c:	56                   	push   esi
c000c11d:	53                   	push   ebx
c000c11e:	83 ec 4c             	sub    esp,0x4c
c000c121:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c125:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c129:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c12c:	85 db                	test   ebx,ebx
c000c12e:	0f 84 9c 06 00 00    	je     c000c7d0 <sinc_hex_vari_process+0x6bb>
c000c134:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c137:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c13a:	0f af c7             	imul   eax,edi
c000c13d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c140:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c143:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c14a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c151:	0f af c7             	imul   eax,edi
c000c154:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c157:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c15a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c15d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c161:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c165:	68 00 00 70 3f       	push   0x3f700000
c000c16a:	6a 00                	push   0x0
c000c16c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c170:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c174:	e8 be cb 01 00       	call   c0028d37 <__ltdf2>
c000c179:	83 c4 10             	add    esp,0x10
c000c17c:	ba 16 00 00 00       	mov    edx,0x16
c000c181:	85 c0                	test   eax,eax
c000c183:	0f 88 47 06 00 00    	js     c000c7d0 <sinc_hex_vari_process+0x6bb>
c000c189:	68 00 00 70 40       	push   0x40700000
c000c18e:	6a 00                	push   0x0
c000c190:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c194:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c198:	e8 7c cb 01 00       	call   c0028d19 <__gtdf2>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	ba 16 00 00 00       	mov    edx,0x16
c000c1a5:	85 c0                	test   eax,eax
c000c1a7:	0f 8f 23 06 00 00    	jg     c000c7d0 <sinc_hex_vari_process+0x6bb>
c000c1ad:	83 ec 0c             	sub    esp,0xc
c000c1b0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1b3:	e8 13 c9 01 00       	call   c0028acb <__floatsidf>
c000c1b8:	83 c4 10             	add    esp,0x10
c000c1bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1c3:	68 00 00 00 40       	push   0x40000000
c000c1c8:	6a 00                	push   0x0
c000c1ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1d2:	e8 14 bc 01 00       	call   c0027deb <__adddf3>
c000c1d7:	59                   	pop    ecx
c000c1d8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1dc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1e0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1e3:	e8 e3 c8 01 00       	call   c0028acb <__floatsidf>
c000c1e8:	83 c4 10             	add    esp,0x10
c000c1eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ef:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f3:	52                   	push   edx
c000c1f4:	50                   	push   eax
c000c1f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1fd:	e8 4a c5 01 00       	call   c002874c <__divdf3>
c000c202:	83 c4 10             	add    esp,0x10
c000c205:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c209:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c20d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c210:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c213:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c217:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c21b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c223:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c227:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c22b:	e8 e9 ca 01 00       	call   c0028d19 <__gtdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	7e 2d                	jle    c000c264 <sinc_hex_vari_process+0x14f>
c000c237:	68 00 00 f0 3f       	push   0x3ff00000
c000c23c:	6a 00                	push   0x0
c000c23e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c246:	e8 ec ca 01 00       	call   c0028d37 <__ltdf2>
c000c24b:	83 c4 10             	add    esp,0x10
c000c24e:	85 c0                	test   eax,eax
c000c250:	79 4d                	jns    c000c29f <sinc_hex_vari_process+0x18a>
c000c252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c256:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c25a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c25e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c262:	eb 1b                	jmp    c000c27f <sinc_hex_vari_process+0x16a>
c000c264:	68 00 00 f0 3f       	push   0x3ff00000
c000c269:	6a 00                	push   0x0
c000c26b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c26f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c273:	e8 bf ca 01 00       	call   c0028d37 <__ltdf2>
c000c278:	83 c4 10             	add    esp,0x10
c000c27b:	85 c0                	test   eax,eax
c000c27d:	79 20                	jns    c000c29f <sinc_hex_vari_process+0x18a>
c000c27f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c283:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c287:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28f:	e8 b8 c4 01 00       	call   c002874c <__divdf3>
c000c294:	83 c4 10             	add    esp,0x10
c000c297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c29b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c29f:	50                   	push   eax
c000c2a0:	50                   	push   eax
c000c2a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2a9:	e8 42 cc 01 00       	call   c0028ef0 <lrint>
c000c2ae:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2b1:	40                   	inc    eax
c000c2b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2b6:	0f af c7             	imul   eax,edi
c000c2b9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2c0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2c4:	58                   	pop    eax
c000c2c5:	5a                   	pop    edx
c000c2c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ce:	e8 1d cc 01 00       	call   c0028ef0 <lrint>
c000c2d3:	83 ec 0c             	sub    esp,0xc
c000c2d6:	50                   	push   eax
c000c2d7:	e8 ef c7 01 00       	call   c0028acb <__floatsidf>
c000c2dc:	83 c4 10             	add    esp,0x10
c000c2df:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2e7:	52                   	push   edx
c000c2e8:	50                   	push   eax
c000c2e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2f1:	e8 46 c1 01 00       	call   c002843c <__subdf3>
c000c2f6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2fa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2fe:	83 c4 20             	add    esp,0x20
c000c301:	6a 00                	push   0x0
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 25 ca 01 00       	call   c0028d37 <__ltdf2>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	85 c0                	test   eax,eax
c000c317:	79 1f                	jns    c000c338 <sinc_hex_vari_process+0x223>
c000c319:	68 00 00 f0 3f       	push   0x3ff00000
c000c31e:	6a 00                	push   0x0
c000c320:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	e8 be ba 01 00       	call   c0027deb <__adddf3>
c000c32d:	83 c4 10             	add    esp,0x10
c000c330:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c334:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c338:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c33b:	83 ec 10             	sub    esp,0x10
c000c33e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c342:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c345:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c349:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c34d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c351:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c355:	e8 e2 c0 01 00       	call   c002843c <__subdf3>
c000c35a:	83 c4 18             	add    esp,0x18
c000c35d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c361:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c365:	52                   	push   edx
c000c366:	50                   	push   eax
c000c367:	e8 84 cb 01 00       	call   c0028ef0 <lrint>
c000c36c:	0f af f8             	imul   edi,eax
c000c36f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c373:	01 f8                	add    eax,edi
c000c375:	99                   	cdq    
c000c376:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c379:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c37c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c380:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c384:	68 00 00 f0 3f       	push   0x3ff00000
c000c389:	6a 00                	push   0x0
c000c38b:	e8 bc c3 01 00       	call   c002874c <__divdf3>
c000c390:	83 c4 10             	add    esp,0x10
c000c393:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c397:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c39b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3a0:	68 23 42 92 0c       	push   0xc924223
c000c3a5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3a9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3ad:	e8 39 ba 01 00       	call   c0027deb <__adddf3>
c000c3b2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3b6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3ba:	83 c4 20             	add    esp,0x20
c000c3bd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3c5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3d0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3d3:	7d 50                	jge    c000c425 <sinc_hex_vari_process+0x310>
c000c3d5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3d8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3db:	01 c8                	add    eax,ecx
c000c3dd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3e0:	99                   	cdq    
c000c3e1:	f7 f9                	idiv   ecx
c000c3e3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3e7:	7d 0c                	jge    c000c3f5 <sinc_hex_vari_process+0x2e0>
c000c3e9:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3ec:	85 ff                	test   edi,edi
c000c3ee:	79 6c                	jns    c000c45c <sinc_hex_vari_process+0x347>
c000c3f0:	e9 e7 00 00 00       	jmp    c000c4dc <sinc_hex_vari_process+0x3c7>
c000c3f5:	50                   	push   eax
c000c3f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3fa:	56                   	push   esi
c000c3fb:	53                   	push   ebx
c000c3fc:	e8 d6 f4 ff ff       	call   c000b8d7 <prepare_data>
c000c401:	83 c4 10             	add    esp,0x10
c000c404:	89 c2                	mov    edx,eax
c000c406:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c409:	85 c0                	test   eax,eax
c000c40b:	0f 85 bf 03 00 00    	jne    c000c7d0 <sinc_hex_vari_process+0x6bb>
c000c411:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c414:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c417:	01 c8                	add    eax,ecx
c000c419:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c41c:	99                   	cdq    
c000c41d:	f7 f9                	idiv   ecx
c000c41f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c423:	7c c4                	jl     c000c3e9 <sinc_hex_vari_process+0x2d4>
c000c425:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c429:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c42d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c430:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c437:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c43b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c43e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c441:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c444:	99                   	cdq    
c000c445:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c448:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c44b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c44e:	99                   	cdq    
c000c44f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c452:	31 d2                	xor    edx,edx
c000c454:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c457:	e9 74 03 00 00       	jmp    c000c7d0 <sinc_hex_vari_process+0x6bb>
c000c45c:	83 ec 0c             	sub    esp,0xc
c000c45f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c462:	e8 64 c6 01 00       	call   c0028acb <__floatsidf>
c000c467:	83 c4 10             	add    esp,0x10
c000c46a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c46e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c472:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c476:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c47a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c47e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c482:	e8 64 b9 01 00       	call   c0027deb <__adddf3>
c000c487:	83 c4 10             	add    esp,0x10
c000c48a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c492:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c496:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c49a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a2:	e8 44 b9 01 00       	call   c0027deb <__adddf3>
c000c4a7:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4aa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4ae:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4b2:	e8 14 c6 01 00       	call   c0028acb <__floatsidf>
c000c4b7:	83 c4 10             	add    esp,0x10
c000c4ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4c2:	52                   	push   edx
c000c4c3:	50                   	push   eax
c000c4c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4cc:	e8 64 c8 01 00       	call   c0028d35 <__gedf2>
c000c4d1:	83 c4 10             	add    esp,0x10
c000c4d4:	85 c0                	test   eax,eax
c000c4d6:	0f 89 49 ff ff ff    	jns    c000c425 <sinc_hex_vari_process+0x310>
c000c4dc:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4e0:	0f 8e ef 00 00 00    	jle    c000c5d5 <sinc_hex_vari_process+0x4c0>
c000c4e6:	83 ec 10             	sub    esp,0x10
c000c4e9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4ec:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4ef:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4f2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4f5:	e8 42 bf 01 00       	call   c002843c <__subdf3>
c000c4fa:	83 c4 18             	add    esp,0x18
c000c4fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c501:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c505:	52                   	push   edx
c000c506:	50                   	push   eax
c000c507:	e8 c4 c9 01 00       	call   c0028ed0 <fabs>
c000c50c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c510:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c514:	83 c4 10             	add    esp,0x10
c000c517:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c51c:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c521:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c525:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c529:	e8 eb c7 01 00       	call   c0028d19 <__gtdf2>
c000c52e:	83 c4 10             	add    esp,0x10
c000c531:	85 c0                	test   eax,eax
c000c533:	0f 8e 9c 00 00 00    	jle    c000c5d5 <sinc_hex_vari_process+0x4c0>
c000c539:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c53c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c53f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c543:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c547:	52                   	push   edx
c000c548:	50                   	push   eax
c000c549:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c54c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c54f:	e8 e8 be 01 00       	call   c002843c <__subdf3>
c000c554:	59                   	pop    ecx
c000c555:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c559:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c55d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c560:	e8 66 c5 01 00       	call   c0028acb <__floatsidf>
c000c565:	83 c4 10             	add    esp,0x10
c000c568:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c56c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c570:	52                   	push   edx
c000c571:	50                   	push   eax
c000c572:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c576:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c57a:	e8 e9 be 01 00       	call   c0028468 <__muldf3>
c000c57f:	5f                   	pop    edi
c000c580:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c584:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c588:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c58b:	e8 3b c5 01 00       	call   c0028acb <__floatsidf>
c000c590:	83 c4 10             	add    esp,0x10
c000c593:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c597:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c59b:	52                   	push   edx
c000c59c:	50                   	push   eax
c000c59d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a5:	e8 a2 c1 01 00       	call   c002874c <__divdf3>
c000c5aa:	83 c4 10             	add    esp,0x10
c000c5ad:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5b1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c5:	e8 21 b8 01 00       	call   c0027deb <__adddf3>
c000c5ca:	83 c4 10             	add    esp,0x10
c000c5cd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5d1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5d5:	83 ec 0c             	sub    esp,0xc
c000c5d8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5db:	e8 eb c4 01 00       	call   c0028acb <__floatsidf>
c000c5e0:	83 c4 10             	add    esp,0x10
c000c5e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5fb:	e8 37 c7 01 00       	call   c0028d37 <__ltdf2>
c000c600:	83 c4 10             	add    esp,0x10
c000c603:	85 c0                	test   eax,eax
c000c605:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c609:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c60d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c611:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c615:	78 10                	js     c000c627 <sinc_hex_vari_process+0x512>
c000c617:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c61b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c61f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c623:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c627:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c62b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c62f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c633:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c637:	e8 2c be 01 00       	call   c0028468 <__muldf3>
c000c63c:	59                   	pop    ecx
c000c63d:	5f                   	pop    edi
c000c63e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c642:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c646:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c64a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c64e:	e8 5d f2 ff ff       	call   c000b8b0 <double_to_fp>
c000c653:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c657:	89 c7                	mov    edi,eax
c000c659:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c65d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c661:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c665:	e8 fe bd 01 00       	call   c0028468 <__muldf3>
c000c66a:	83 c4 18             	add    esp,0x18
c000c66d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c671:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c675:	52                   	push   edx
c000c676:	50                   	push   eax
c000c677:	e8 34 f2 ff ff       	call   c000b8b0 <double_to_fp>
c000c67c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c67f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c683:	83 c4 0c             	add    esp,0xc
c000c686:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c689:	8d 04 90             	lea    eax,[eax+edx*4]
c000c68c:	50                   	push   eax
c000c68d:	50                   	push   eax
c000c68e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c691:	e8 35 c4 01 00       	call   c0028acb <__floatsidf>
c000c696:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c69a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c69e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6ae:	e8 99 c0 01 00       	call   c002874c <__divdf3>
c000c6b3:	83 c4 18             	add    esp,0x18
c000c6b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6be:	52                   	push   edx
c000c6bf:	89 fa                	mov    edx,edi
c000c6c1:	50                   	push   eax
c000c6c2:	89 d8                	mov    eax,ebx
c000c6c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6c8:	e8 50 de ff ff       	call   c000a51d <calc_output_hex>
c000c6cd:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6d1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6e1:	e8 66 c0 01 00       	call   c002874c <__divdf3>
c000c6e6:	83 c4 10             	add    esp,0x10
c000c6e9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6ed:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6f9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6fd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c701:	e8 e5 b6 01 00       	call   c0027deb <__adddf3>
c000c706:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c70a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c70e:	83 c4 18             	add    esp,0x18
c000c711:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c715:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c719:	e8 d2 c7 01 00       	call   c0028ef0 <lrint>
c000c71e:	83 ec 0c             	sub    esp,0xc
c000c721:	50                   	push   eax
c000c722:	e8 a4 c3 01 00       	call   c0028acb <__floatsidf>
c000c727:	83 c4 10             	add    esp,0x10
c000c72a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c72e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c732:	52                   	push   edx
c000c733:	50                   	push   eax
c000c734:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c738:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c73c:	e8 fb bc 01 00       	call   c002843c <__subdf3>
c000c741:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c745:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c749:	83 c4 20             	add    esp,0x20
c000c74c:	6a 00                	push   0x0
c000c74e:	6a 00                	push   0x0
c000c750:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c754:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c758:	e8 da c5 01 00       	call   c0028d37 <__ltdf2>
c000c75d:	83 c4 10             	add    esp,0x10
c000c760:	85 c0                	test   eax,eax
c000c762:	79 20                	jns    c000c784 <sinc_hex_vari_process+0x66f>
c000c764:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c768:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c76c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c770:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c774:	e8 72 b6 01 00       	call   c0027deb <__adddf3>
c000c779:	83 c4 10             	add    esp,0x10
c000c77c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c780:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c784:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c787:	83 ec 10             	sub    esp,0x10
c000c78a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c78e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c791:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c799:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c79d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7a1:	e8 96 bc 01 00       	call   c002843c <__subdf3>
c000c7a6:	83 c4 18             	add    esp,0x18
c000c7a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7ad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7b1:	52                   	push   edx
c000c7b2:	50                   	push   eax
c000c7b3:	e8 38 c7 01 00       	call   c0028ef0 <lrint>
c000c7b8:	0f af f8             	imul   edi,eax
c000c7bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7bf:	83 c4 10             	add    esp,0x10
c000c7c2:	01 f8                	add    eax,edi
c000c7c4:	99                   	cdq    
c000c7c5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7c8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7cb:	e9 fd fb ff ff       	jmp    c000c3cd <sinc_hex_vari_process+0x2b8>
c000c7d0:	83 c4 4c             	add    esp,0x4c
c000c7d3:	89 d0                	mov    eax,edx
c000c7d5:	5b                   	pop    ebx
c000c7d6:	5e                   	pop    esi
c000c7d7:	5f                   	pop    edi
c000c7d8:	5d                   	pop    ebp
c000c7d9:	c3                   	ret    

c000c7da <sinc_quad_vari_process>:
c000c7da:	55                   	push   ebp
c000c7db:	ba 05 00 00 00       	mov    edx,0x5
c000c7e0:	57                   	push   edi
c000c7e1:	56                   	push   esi
c000c7e2:	53                   	push   ebx
c000c7e3:	83 ec 4c             	sub    esp,0x4c
c000c7e6:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7ea:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7ee:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7f1:	85 db                	test   ebx,ebx
c000c7f3:	0f 84 9c 06 00 00    	je     c000ce95 <sinc_quad_vari_process+0x6bb>
c000c7f9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7fc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7ff:	0f af c7             	imul   eax,edi
c000c802:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c805:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c808:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c80f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c816:	0f af c7             	imul   eax,edi
c000c819:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c81c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c81f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c822:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c826:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c82a:	68 00 00 70 3f       	push   0x3f700000
c000c82f:	6a 00                	push   0x0
c000c831:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c835:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c839:	e8 f9 c4 01 00       	call   c0028d37 <__ltdf2>
c000c83e:	83 c4 10             	add    esp,0x10
c000c841:	ba 16 00 00 00       	mov    edx,0x16
c000c846:	85 c0                	test   eax,eax
c000c848:	0f 88 47 06 00 00    	js     c000ce95 <sinc_quad_vari_process+0x6bb>
c000c84e:	68 00 00 70 40       	push   0x40700000
c000c853:	6a 00                	push   0x0
c000c855:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c859:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c85d:	e8 b7 c4 01 00       	call   c0028d19 <__gtdf2>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	ba 16 00 00 00       	mov    edx,0x16
c000c86a:	85 c0                	test   eax,eax
c000c86c:	0f 8f 23 06 00 00    	jg     c000ce95 <sinc_quad_vari_process+0x6bb>
c000c872:	83 ec 0c             	sub    esp,0xc
c000c875:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c878:	e8 4e c2 01 00       	call   c0028acb <__floatsidf>
c000c87d:	83 c4 10             	add    esp,0x10
c000c880:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c884:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c888:	68 00 00 00 40       	push   0x40000000
c000c88d:	6a 00                	push   0x0
c000c88f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c893:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c897:	e8 4f b5 01 00       	call   c0027deb <__adddf3>
c000c89c:	59                   	pop    ecx
c000c89d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8a1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8a5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8a8:	e8 1e c2 01 00       	call   c0028acb <__floatsidf>
c000c8ad:	83 c4 10             	add    esp,0x10
c000c8b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b8:	52                   	push   edx
c000c8b9:	50                   	push   eax
c000c8ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c2:	e8 85 be 01 00       	call   c002874c <__divdf3>
c000c8c7:	83 c4 10             	add    esp,0x10
c000c8ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8d5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8f0:	e8 24 c4 01 00       	call   c0028d19 <__gtdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	7e 2d                	jle    c000c929 <sinc_quad_vari_process+0x14f>
c000c8fc:	68 00 00 f0 3f       	push   0x3ff00000
c000c901:	6a 00                	push   0x0
c000c903:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c907:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c90b:	e8 27 c4 01 00       	call   c0028d37 <__ltdf2>
c000c910:	83 c4 10             	add    esp,0x10
c000c913:	85 c0                	test   eax,eax
c000c915:	79 4d                	jns    c000c964 <sinc_quad_vari_process+0x18a>
c000c917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c91b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c91f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c923:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c927:	eb 1b                	jmp    c000c944 <sinc_quad_vari_process+0x16a>
c000c929:	68 00 00 f0 3f       	push   0x3ff00000
c000c92e:	6a 00                	push   0x0
c000c930:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c934:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c938:	e8 fa c3 01 00       	call   c0028d37 <__ltdf2>
c000c93d:	83 c4 10             	add    esp,0x10
c000c940:	85 c0                	test   eax,eax
c000c942:	79 20                	jns    c000c964 <sinc_quad_vari_process+0x18a>
c000c944:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c948:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c94c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c950:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c954:	e8 f3 bd 01 00       	call   c002874c <__divdf3>
c000c959:	83 c4 10             	add    esp,0x10
c000c95c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c960:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c964:	50                   	push   eax
c000c965:	50                   	push   eax
c000c966:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96e:	e8 7d c5 01 00       	call   c0028ef0 <lrint>
c000c973:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c976:	40                   	inc    eax
c000c977:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c97b:	0f af c7             	imul   eax,edi
c000c97e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c982:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c985:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c989:	58                   	pop    eax
c000c98a:	5a                   	pop    edx
c000c98b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c993:	e8 58 c5 01 00       	call   c0028ef0 <lrint>
c000c998:	83 ec 0c             	sub    esp,0xc
c000c99b:	50                   	push   eax
c000c99c:	e8 2a c1 01 00       	call   c0028acb <__floatsidf>
c000c9a1:	83 c4 10             	add    esp,0x10
c000c9a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9ac:	52                   	push   edx
c000c9ad:	50                   	push   eax
c000c9ae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9b6:	e8 81 ba 01 00       	call   c002843c <__subdf3>
c000c9bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9c3:	83 c4 20             	add    esp,0x20
c000c9c6:	6a 00                	push   0x0
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 60 c3 01 00       	call   c0028d37 <__ltdf2>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	85 c0                	test   eax,eax
c000c9dc:	79 1f                	jns    c000c9fd <sinc_quad_vari_process+0x223>
c000c9de:	68 00 00 f0 3f       	push   0x3ff00000
c000c9e3:	6a 00                	push   0x0
c000c9e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	e8 f9 b3 01 00       	call   c0027deb <__adddf3>
c000c9f2:	83 c4 10             	add    esp,0x10
c000c9f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9fd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca00:	83 ec 10             	sub    esp,0x10
c000ca03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca07:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca1a:	e8 1d ba 01 00       	call   c002843c <__subdf3>
c000ca1f:	83 c4 18             	add    esp,0x18
c000ca22:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca2a:	52                   	push   edx
c000ca2b:	50                   	push   eax
c000ca2c:	e8 bf c4 01 00       	call   c0028ef0 <lrint>
c000ca31:	0f af f8             	imul   edi,eax
c000ca34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca38:	01 f8                	add    eax,edi
c000ca3a:	99                   	cdq    
c000ca3b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca3e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca49:	68 00 00 f0 3f       	push   0x3ff00000
c000ca4e:	6a 00                	push   0x0
c000ca50:	e8 f7 bc 01 00       	call   c002874c <__divdf3>
c000ca55:	83 c4 10             	add    esp,0x10
c000ca58:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca5c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca60:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca65:	68 23 42 92 0c       	push   0xc924223
c000ca6a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca6e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca72:	e8 74 b3 01 00       	call   c0027deb <__adddf3>
c000ca77:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca7b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca7f:	83 c4 20             	add    esp,0x20
c000ca82:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca8a:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca92:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca95:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca98:	7d 50                	jge    c000caea <sinc_quad_vari_process+0x310>
c000ca9a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca9d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000caa0:	01 c8                	add    eax,ecx
c000caa2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000caa5:	99                   	cdq    
c000caa6:	f7 f9                	idiv   ecx
c000caa8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000caac:	7d 0c                	jge    c000caba <sinc_quad_vari_process+0x2e0>
c000caae:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cab1:	85 ff                	test   edi,edi
c000cab3:	79 6c                	jns    c000cb21 <sinc_quad_vari_process+0x347>
c000cab5:	e9 e7 00 00 00       	jmp    c000cba1 <sinc_quad_vari_process+0x3c7>
c000caba:	50                   	push   eax
c000cabb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cabf:	56                   	push   esi
c000cac0:	53                   	push   ebx
c000cac1:	e8 11 ee ff ff       	call   c000b8d7 <prepare_data>
c000cac6:	83 c4 10             	add    esp,0x10
c000cac9:	89 c2                	mov    edx,eax
c000cacb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cace:	85 c0                	test   eax,eax
c000cad0:	0f 85 bf 03 00 00    	jne    c000ce95 <sinc_quad_vari_process+0x6bb>
c000cad6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cad9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cadc:	01 c8                	add    eax,ecx
c000cade:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cae1:	99                   	cdq    
c000cae2:	f7 f9                	idiv   ecx
c000cae4:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cae8:	7c c4                	jl     c000caae <sinc_quad_vari_process+0x2d4>
c000caea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000caee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000caf2:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000caf5:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000caf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cafc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb00:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb03:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb06:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb09:	99                   	cdq    
c000cb0a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb0d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb10:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb13:	99                   	cdq    
c000cb14:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb17:	31 d2                	xor    edx,edx
c000cb19:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb1c:	e9 74 03 00 00       	jmp    c000ce95 <sinc_quad_vari_process+0x6bb>
c000cb21:	83 ec 0c             	sub    esp,0xc
c000cb24:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb27:	e8 9f bf 01 00       	call   c0028acb <__floatsidf>
c000cb2c:	83 c4 10             	add    esp,0x10
c000cb2f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb33:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb37:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb3b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb47:	e8 9f b2 01 00       	call   c0027deb <__adddf3>
c000cb4c:	83 c4 10             	add    esp,0x10
c000cb4f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb53:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb57:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb5b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb67:	e8 7f b2 01 00       	call   c0027deb <__adddf3>
c000cb6c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb6f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb73:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb77:	e8 4f bf 01 00       	call   c0028acb <__floatsidf>
c000cb7c:	83 c4 10             	add    esp,0x10
c000cb7f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb87:	52                   	push   edx
c000cb88:	50                   	push   eax
c000cb89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb91:	e8 9f c1 01 00       	call   c0028d35 <__gedf2>
c000cb96:	83 c4 10             	add    esp,0x10
c000cb99:	85 c0                	test   eax,eax
c000cb9b:	0f 89 49 ff ff ff    	jns    c000caea <sinc_quad_vari_process+0x310>
c000cba1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cba5:	0f 8e ef 00 00 00    	jle    c000cc9a <sinc_quad_vari_process+0x4c0>
c000cbab:	83 ec 10             	sub    esp,0x10
c000cbae:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbb1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbb4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbb7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbba:	e8 7d b8 01 00       	call   c002843c <__subdf3>
c000cbbf:	83 c4 18             	add    esp,0x18
c000cbc2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbc6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbca:	52                   	push   edx
c000cbcb:	50                   	push   eax
c000cbcc:	e8 ff c2 01 00       	call   c0028ed0 <fabs>
c000cbd1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbd5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbd9:	83 c4 10             	add    esp,0x10
c000cbdc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbe1:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbe6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbee:	e8 26 c1 01 00       	call   c0028d19 <__gtdf2>
c000cbf3:	83 c4 10             	add    esp,0x10
c000cbf6:	85 c0                	test   eax,eax
c000cbf8:	0f 8e 9c 00 00 00    	jle    c000cc9a <sinc_quad_vari_process+0x4c0>
c000cbfe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc01:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc04:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc08:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc0c:	52                   	push   edx
c000cc0d:	50                   	push   eax
c000cc0e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc11:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc14:	e8 23 b8 01 00       	call   c002843c <__subdf3>
c000cc19:	59                   	pop    ecx
c000cc1a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc1e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc22:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc25:	e8 a1 be 01 00       	call   c0028acb <__floatsidf>
c000cc2a:	83 c4 10             	add    esp,0x10
c000cc2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc31:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc35:	52                   	push   edx
c000cc36:	50                   	push   eax
c000cc37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc3f:	e8 24 b8 01 00       	call   c0028468 <__muldf3>
c000cc44:	5f                   	pop    edi
c000cc45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc49:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc4d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc50:	e8 76 be 01 00       	call   c0028acb <__floatsidf>
c000cc55:	83 c4 10             	add    esp,0x10
c000cc58:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc5c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc60:	52                   	push   edx
c000cc61:	50                   	push   eax
c000cc62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6a:	e8 dd ba 01 00       	call   c002874c <__divdf3>
c000cc6f:	83 c4 10             	add    esp,0x10
c000cc72:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc76:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc8a:	e8 5c b1 01 00       	call   c0027deb <__adddf3>
c000cc8f:	83 c4 10             	add    esp,0x10
c000cc92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc9a:	83 ec 0c             	sub    esp,0xc
c000cc9d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cca0:	e8 26 be 01 00       	call   c0028acb <__floatsidf>
c000cca5:	83 c4 10             	add    esp,0x10
c000cca8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccac:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc0:	e8 72 c0 01 00       	call   c0028d37 <__ltdf2>
c000ccc5:	83 c4 10             	add    esp,0x10
c000ccc8:	85 c0                	test   eax,eax
c000ccca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccce:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccd6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccda:	78 10                	js     c000ccec <sinc_quad_vari_process+0x512>
c000ccdc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cce0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cce4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cce8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccf0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccf4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccf8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccfc:	e8 67 b7 01 00       	call   c0028468 <__muldf3>
c000cd01:	59                   	pop    ecx
c000cd02:	5f                   	pop    edi
c000cd03:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd07:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd13:	e8 98 eb ff ff       	call   c000b8b0 <double_to_fp>
c000cd18:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1c:	89 c7                	mov    edi,eax
c000cd1e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd22:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd2a:	e8 39 b7 01 00       	call   c0028468 <__muldf3>
c000cd2f:	83 c4 18             	add    esp,0x18
c000cd32:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd36:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd3a:	52                   	push   edx
c000cd3b:	50                   	push   eax
c000cd3c:	e8 6f eb ff ff       	call   c000b8b0 <double_to_fp>
c000cd41:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd44:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd48:	83 c4 0c             	add    esp,0xc
c000cd4b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd4e:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd51:	50                   	push   eax
c000cd52:	50                   	push   eax
c000cd53:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd56:	e8 70 bd 01 00       	call   c0028acb <__floatsidf>
c000cd5b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd5f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd63:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd67:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd6b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd6f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd73:	e8 d4 b9 01 00       	call   c002874c <__divdf3>
c000cd78:	83 c4 18             	add    esp,0x18
c000cd7b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd7f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd83:	52                   	push   edx
c000cd84:	89 fa                	mov    edx,edi
c000cd86:	50                   	push   eax
c000cd87:	89 d8                	mov    eax,ebx
c000cd89:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd8d:	e8 a5 d1 ff ff       	call   c0009f37 <calc_output_quad>
c000cd92:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd96:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd9a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd9e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cda2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cda6:	e8 a1 b9 01 00       	call   c002874c <__divdf3>
c000cdab:	83 c4 10             	add    esp,0x10
c000cdae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdbe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdc2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdc6:	e8 20 b0 01 00       	call   c0027deb <__adddf3>
c000cdcb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdcf:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdd3:	83 c4 18             	add    esp,0x18
c000cdd6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdde:	e8 0d c1 01 00       	call   c0028ef0 <lrint>
c000cde3:	83 ec 0c             	sub    esp,0xc
c000cde6:	50                   	push   eax
c000cde7:	e8 df bc 01 00       	call   c0028acb <__floatsidf>
c000cdec:	83 c4 10             	add    esp,0x10
c000cdef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdf3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdf7:	52                   	push   edx
c000cdf8:	50                   	push   eax
c000cdf9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdfd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce01:	e8 36 b6 01 00       	call   c002843c <__subdf3>
c000ce06:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce0a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce0e:	83 c4 20             	add    esp,0x20
c000ce11:	6a 00                	push   0x0
c000ce13:	6a 00                	push   0x0
c000ce15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1d:	e8 15 bf 01 00       	call   c0028d37 <__ltdf2>
c000ce22:	83 c4 10             	add    esp,0x10
c000ce25:	85 c0                	test   eax,eax
c000ce27:	79 20                	jns    c000ce49 <sinc_quad_vari_process+0x66f>
c000ce29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce39:	e8 ad af 01 00       	call   c0027deb <__adddf3>
c000ce3e:	83 c4 10             	add    esp,0x10
c000ce41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce49:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce4c:	83 ec 10             	sub    esp,0x10
c000ce4f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce53:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce5e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce62:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce66:	e8 d1 b5 01 00       	call   c002843c <__subdf3>
c000ce6b:	83 c4 18             	add    esp,0x18
c000ce6e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce72:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce76:	52                   	push   edx
c000ce77:	50                   	push   eax
c000ce78:	e8 73 c0 01 00       	call   c0028ef0 <lrint>
c000ce7d:	0f af f8             	imul   edi,eax
c000ce80:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce84:	83 c4 10             	add    esp,0x10
c000ce87:	01 f8                	add    eax,edi
c000ce89:	99                   	cdq    
c000ce8a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce8d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce90:	e9 fd fb ff ff       	jmp    c000ca92 <sinc_quad_vari_process+0x2b8>
c000ce95:	83 c4 4c             	add    esp,0x4c
c000ce98:	89 d0                	mov    eax,edx
c000ce9a:	5b                   	pop    ebx
c000ce9b:	5e                   	pop    esi
c000ce9c:	5f                   	pop    edi
c000ce9d:	5d                   	pop    ebp
c000ce9e:	c3                   	ret    

c000ce9f <sinc_stereo_vari_process>:
c000ce9f:	55                   	push   ebp
c000cea0:	ba 05 00 00 00       	mov    edx,0x5
c000cea5:	57                   	push   edi
c000cea6:	56                   	push   esi
c000cea7:	53                   	push   ebx
c000cea8:	83 ec 4c             	sub    esp,0x4c
c000ceab:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ceaf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ceb3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ceb6:	85 db                	test   ebx,ebx
c000ceb8:	0f 84 9c 06 00 00    	je     c000d55a <sinc_stereo_vari_process+0x6bb>
c000cebe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cec1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cec4:	0f af c7             	imul   eax,edi
c000cec7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceca:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cecd:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ced4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cedb:	0f af c7             	imul   eax,edi
c000cede:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cee1:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cee4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cee7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ceeb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ceef:	68 00 00 70 3f       	push   0x3f700000
c000cef4:	6a 00                	push   0x0
c000cef6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cefa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cefe:	e8 34 be 01 00       	call   c0028d37 <__ltdf2>
c000cf03:	83 c4 10             	add    esp,0x10
c000cf06:	ba 16 00 00 00       	mov    edx,0x16
c000cf0b:	85 c0                	test   eax,eax
c000cf0d:	0f 88 47 06 00 00    	js     c000d55a <sinc_stereo_vari_process+0x6bb>
c000cf13:	68 00 00 70 40       	push   0x40700000
c000cf18:	6a 00                	push   0x0
c000cf1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf22:	e8 f2 bd 01 00       	call   c0028d19 <__gtdf2>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	ba 16 00 00 00       	mov    edx,0x16
c000cf2f:	85 c0                	test   eax,eax
c000cf31:	0f 8f 23 06 00 00    	jg     c000d55a <sinc_stereo_vari_process+0x6bb>
c000cf37:	83 ec 0c             	sub    esp,0xc
c000cf3a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf3d:	e8 89 bb 01 00       	call   c0028acb <__floatsidf>
c000cf42:	83 c4 10             	add    esp,0x10
c000cf45:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf49:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf4d:	68 00 00 00 40       	push   0x40000000
c000cf52:	6a 00                	push   0x0
c000cf54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf5c:	e8 8a ae 01 00       	call   c0027deb <__adddf3>
c000cf61:	59                   	pop    ecx
c000cf62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf66:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf6a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf6d:	e8 59 bb 01 00       	call   c0028acb <__floatsidf>
c000cf72:	83 c4 10             	add    esp,0x10
c000cf75:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf79:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7d:	52                   	push   edx
c000cf7e:	50                   	push   eax
c000cf7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf87:	e8 c0 b7 01 00       	call   c002874c <__divdf3>
c000cf8c:	83 c4 10             	add    esp,0x10
c000cf8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf93:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf97:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf9a:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfa5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfb5:	e8 5f bd 01 00       	call   c0028d19 <__gtdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	7e 2d                	jle    c000cfee <sinc_stereo_vari_process+0x14f>
c000cfc1:	68 00 00 f0 3f       	push   0x3ff00000
c000cfc6:	6a 00                	push   0x0
c000cfc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfd0:	e8 62 bd 01 00       	call   c0028d37 <__ltdf2>
c000cfd5:	83 c4 10             	add    esp,0x10
c000cfd8:	85 c0                	test   eax,eax
c000cfda:	79 4d                	jns    c000d029 <sinc_stereo_vari_process+0x18a>
c000cfdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfe0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfe8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfec:	eb 1b                	jmp    c000d009 <sinc_stereo_vari_process+0x16a>
c000cfee:	68 00 00 f0 3f       	push   0x3ff00000
c000cff3:	6a 00                	push   0x0
c000cff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cffd:	e8 35 bd 01 00       	call   c0028d37 <__ltdf2>
c000d002:	83 c4 10             	add    esp,0x10
c000d005:	85 c0                	test   eax,eax
c000d007:	79 20                	jns    c000d029 <sinc_stereo_vari_process+0x18a>
c000d009:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d00d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d011:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d015:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d019:	e8 2e b7 01 00       	call   c002874c <__divdf3>
c000d01e:	83 c4 10             	add    esp,0x10
c000d021:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d025:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d029:	50                   	push   eax
c000d02a:	50                   	push   eax
c000d02b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d02f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d033:	e8 b8 be 01 00       	call   c0028ef0 <lrint>
c000d038:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d03b:	40                   	inc    eax
c000d03c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d040:	0f af c7             	imul   eax,edi
c000d043:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d04a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d04e:	58                   	pop    eax
c000d04f:	5a                   	pop    edx
c000d050:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d054:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d058:	e8 93 be 01 00       	call   c0028ef0 <lrint>
c000d05d:	83 ec 0c             	sub    esp,0xc
c000d060:	50                   	push   eax
c000d061:	e8 65 ba 01 00       	call   c0028acb <__floatsidf>
c000d066:	83 c4 10             	add    esp,0x10
c000d069:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d06d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d071:	52                   	push   edx
c000d072:	50                   	push   eax
c000d073:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d077:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d07b:	e8 bc b3 01 00       	call   c002843c <__subdf3>
c000d080:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d084:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d088:	83 c4 20             	add    esp,0x20
c000d08b:	6a 00                	push   0x0
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 9b bc 01 00       	call   c0028d37 <__ltdf2>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	85 c0                	test   eax,eax
c000d0a1:	79 1f                	jns    c000d0c2 <sinc_stereo_vari_process+0x223>
c000d0a3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0a8:	6a 00                	push   0x0
c000d0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	e8 34 ad 01 00       	call   c0027deb <__adddf3>
c000d0b7:	83 c4 10             	add    esp,0x10
c000d0ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0be:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0c2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0c5:	83 ec 10             	sub    esp,0x10
c000d0c8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0cc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0df:	e8 58 b3 01 00       	call   c002843c <__subdf3>
c000d0e4:	83 c4 18             	add    esp,0x18
c000d0e7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0eb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0ef:	52                   	push   edx
c000d0f0:	50                   	push   eax
c000d0f1:	e8 fa bd 01 00       	call   c0028ef0 <lrint>
c000d0f6:	0f af f8             	imul   edi,eax
c000d0f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0fd:	01 f8                	add    eax,edi
c000d0ff:	99                   	cdq    
c000d100:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d103:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d106:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d10a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d10e:	68 00 00 f0 3f       	push   0x3ff00000
c000d113:	6a 00                	push   0x0
c000d115:	e8 32 b6 01 00       	call   c002874c <__divdf3>
c000d11a:	83 c4 10             	add    esp,0x10
c000d11d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d121:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d125:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d12a:	68 23 42 92 0c       	push   0xc924223
c000d12f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d133:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d137:	e8 af ac 01 00       	call   c0027deb <__adddf3>
c000d13c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d140:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d144:	83 c4 20             	add    esp,0x20
c000d147:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d14f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d157:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d15a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d15d:	7d 50                	jge    c000d1af <sinc_stereo_vari_process+0x310>
c000d15f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d162:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d165:	01 c8                	add    eax,ecx
c000d167:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d16a:	99                   	cdq    
c000d16b:	f7 f9                	idiv   ecx
c000d16d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d171:	7d 0c                	jge    c000d17f <sinc_stereo_vari_process+0x2e0>
c000d173:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d176:	85 ff                	test   edi,edi
c000d178:	79 6c                	jns    c000d1e6 <sinc_stereo_vari_process+0x347>
c000d17a:	e9 e7 00 00 00       	jmp    c000d266 <sinc_stereo_vari_process+0x3c7>
c000d17f:	50                   	push   eax
c000d180:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d184:	56                   	push   esi
c000d185:	53                   	push   ebx
c000d186:	e8 4c e7 ff ff       	call   c000b8d7 <prepare_data>
c000d18b:	83 c4 10             	add    esp,0x10
c000d18e:	89 c2                	mov    edx,eax
c000d190:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d193:	85 c0                	test   eax,eax
c000d195:	0f 85 bf 03 00 00    	jne    c000d55a <sinc_stereo_vari_process+0x6bb>
c000d19b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d19e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1a1:	01 c8                	add    eax,ecx
c000d1a3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1a6:	99                   	cdq    
c000d1a7:	f7 f9                	idiv   ecx
c000d1a9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1ad:	7c c4                	jl     c000d173 <sinc_stereo_vari_process+0x2d4>
c000d1af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1b7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1ba:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1c5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1c8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1cb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ce:	99                   	cdq    
c000d1cf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1d2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1d5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1d8:	99                   	cdq    
c000d1d9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1dc:	31 d2                	xor    edx,edx
c000d1de:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1e1:	e9 74 03 00 00       	jmp    c000d55a <sinc_stereo_vari_process+0x6bb>
c000d1e6:	83 ec 0c             	sub    esp,0xc
c000d1e9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1ec:	e8 da b8 01 00       	call   c0028acb <__floatsidf>
c000d1f1:	83 c4 10             	add    esp,0x10
c000d1f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1fc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d200:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d204:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d208:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20c:	e8 da ab 01 00       	call   c0027deb <__adddf3>
c000d211:	83 c4 10             	add    esp,0x10
c000d214:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d218:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d220:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d224:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d228:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22c:	e8 ba ab 01 00       	call   c0027deb <__adddf3>
c000d231:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d234:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d238:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d23c:	e8 8a b8 01 00       	call   c0028acb <__floatsidf>
c000d241:	83 c4 10             	add    esp,0x10
c000d244:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d248:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d24c:	52                   	push   edx
c000d24d:	50                   	push   eax
c000d24e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d252:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d256:	e8 da ba 01 00       	call   c0028d35 <__gedf2>
c000d25b:	83 c4 10             	add    esp,0x10
c000d25e:	85 c0                	test   eax,eax
c000d260:	0f 89 49 ff ff ff    	jns    c000d1af <sinc_stereo_vari_process+0x310>
c000d266:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d26a:	0f 8e ef 00 00 00    	jle    c000d35f <sinc_stereo_vari_process+0x4c0>
c000d270:	83 ec 10             	sub    esp,0x10
c000d273:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d276:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d279:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d27c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d27f:	e8 b8 b1 01 00       	call   c002843c <__subdf3>
c000d284:	83 c4 18             	add    esp,0x18
c000d287:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d28b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d28f:	52                   	push   edx
c000d290:	50                   	push   eax
c000d291:	e8 3a bc 01 00       	call   c0028ed0 <fabs>
c000d296:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d29a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d29e:	83 c4 10             	add    esp,0x10
c000d2a1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2a6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2b3:	e8 61 ba 01 00       	call   c0028d19 <__gtdf2>
c000d2b8:	83 c4 10             	add    esp,0x10
c000d2bb:	85 c0                	test   eax,eax
c000d2bd:	0f 8e 9c 00 00 00    	jle    c000d35f <sinc_stereo_vari_process+0x4c0>
c000d2c3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2c6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2d1:	52                   	push   edx
c000d2d2:	50                   	push   eax
c000d2d3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2d6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2d9:	e8 5e b1 01 00       	call   c002843c <__subdf3>
c000d2de:	59                   	pop    ecx
c000d2df:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2e3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2e7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2ea:	e8 dc b7 01 00       	call   c0028acb <__floatsidf>
c000d2ef:	83 c4 10             	add    esp,0x10
c000d2f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2fa:	52                   	push   edx
c000d2fb:	50                   	push   eax
c000d2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d300:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d304:	e8 5f b1 01 00       	call   c0028468 <__muldf3>
c000d309:	5f                   	pop    edi
c000d30a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d30e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d312:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d315:	e8 b1 b7 01 00       	call   c0028acb <__floatsidf>
c000d31a:	83 c4 10             	add    esp,0x10
c000d31d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d321:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d325:	52                   	push   edx
c000d326:	50                   	push   eax
c000d327:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d32b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d32f:	e8 18 b4 01 00       	call   c002874c <__divdf3>
c000d334:	83 c4 10             	add    esp,0x10
c000d337:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d33b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d347:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34f:	e8 97 aa 01 00       	call   c0027deb <__adddf3>
c000d354:	83 c4 10             	add    esp,0x10
c000d357:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d35b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d35f:	83 ec 0c             	sub    esp,0xc
c000d362:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d365:	e8 61 b7 01 00       	call   c0028acb <__floatsidf>
c000d36a:	83 c4 10             	add    esp,0x10
c000d36d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d371:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d375:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d379:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d37d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d381:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d385:	e8 ad b9 01 00       	call   c0028d37 <__ltdf2>
c000d38a:	83 c4 10             	add    esp,0x10
c000d38d:	85 c0                	test   eax,eax
c000d38f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d393:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d397:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d39b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d39f:	78 10                	js     c000d3b1 <sinc_stereo_vari_process+0x512>
c000d3a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3b5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c1:	e8 a2 b0 01 00       	call   c0028468 <__muldf3>
c000d3c6:	59                   	pop    ecx
c000d3c7:	5f                   	pop    edi
c000d3c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3d8:	e8 d3 e4 ff ff       	call   c000b8b0 <double_to_fp>
c000d3dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e1:	89 c7                	mov    edi,eax
c000d3e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3ef:	e8 74 b0 01 00       	call   c0028468 <__muldf3>
c000d3f4:	83 c4 18             	add    esp,0x18
c000d3f7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3ff:	52                   	push   edx
c000d400:	50                   	push   eax
c000d401:	e8 aa e4 ff ff       	call   c000b8b0 <double_to_fp>
c000d406:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d409:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d40d:	83 c4 0c             	add    esp,0xc
c000d410:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d413:	8d 04 90             	lea    eax,[eax+edx*4]
c000d416:	50                   	push   eax
c000d417:	50                   	push   eax
c000d418:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d41b:	e8 ab b6 01 00       	call   c0028acb <__floatsidf>
c000d420:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d424:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d428:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d42c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d430:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d434:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d438:	e8 0f b3 01 00       	call   c002874c <__divdf3>
c000d43d:	83 c4 18             	add    esp,0x18
c000d440:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d444:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d448:	52                   	push   edx
c000d449:	89 fa                	mov    edx,edi
c000d44b:	50                   	push   eax
c000d44c:	89 d8                	mov    eax,ebx
c000d44e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d452:	e8 02 c7 ff ff       	call   c0009b59 <calc_output_stereo>
c000d457:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d45b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d45f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d463:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d467:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d46b:	e8 dc b2 01 00       	call   c002874c <__divdf3>
c000d470:	83 c4 10             	add    esp,0x10
c000d473:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d477:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d47b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d47f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d483:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d487:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d48b:	e8 5b a9 01 00       	call   c0027deb <__adddf3>
c000d490:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d494:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d498:	83 c4 18             	add    esp,0x18
c000d49b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d49f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4a3:	e8 48 ba 01 00       	call   c0028ef0 <lrint>
c000d4a8:	83 ec 0c             	sub    esp,0xc
c000d4ab:	50                   	push   eax
c000d4ac:	e8 1a b6 01 00       	call   c0028acb <__floatsidf>
c000d4b1:	83 c4 10             	add    esp,0x10
c000d4b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4bc:	52                   	push   edx
c000d4bd:	50                   	push   eax
c000d4be:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4c2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4c6:	e8 71 af 01 00       	call   c002843c <__subdf3>
c000d4cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4d3:	83 c4 20             	add    esp,0x20
c000d4d6:	6a 00                	push   0x0
c000d4d8:	6a 00                	push   0x0
c000d4da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e2:	e8 50 b8 01 00       	call   c0028d37 <__ltdf2>
c000d4e7:	83 c4 10             	add    esp,0x10
c000d4ea:	85 c0                	test   eax,eax
c000d4ec:	79 20                	jns    c000d50e <sinc_stereo_vari_process+0x66f>
c000d4ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fe:	e8 e8 a8 01 00       	call   c0027deb <__adddf3>
c000d503:	83 c4 10             	add    esp,0x10
c000d506:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d50a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d50e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d511:	83 ec 10             	sub    esp,0x10
c000d514:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d518:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d51b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d51f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d523:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d527:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d52b:	e8 0c af 01 00       	call   c002843c <__subdf3>
c000d530:	83 c4 18             	add    esp,0x18
c000d533:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d537:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d53b:	52                   	push   edx
c000d53c:	50                   	push   eax
c000d53d:	e8 ae b9 01 00       	call   c0028ef0 <lrint>
c000d542:	0f af f8             	imul   edi,eax
c000d545:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d549:	83 c4 10             	add    esp,0x10
c000d54c:	01 f8                	add    eax,edi
c000d54e:	99                   	cdq    
c000d54f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d552:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d555:	e9 fd fb ff ff       	jmp    c000d157 <sinc_stereo_vari_process+0x2b8>
c000d55a:	83 c4 4c             	add    esp,0x4c
c000d55d:	89 d0                	mov    eax,edx
c000d55f:	5b                   	pop    ebx
c000d560:	5e                   	pop    esi
c000d561:	5f                   	pop    edi
c000d562:	5d                   	pop    ebp
c000d563:	c3                   	ret    

c000d564 <sinc_mono_vari_process>:
c000d564:	55                   	push   ebp
c000d565:	ba 05 00 00 00       	mov    edx,0x5
c000d56a:	57                   	push   edi
c000d56b:	56                   	push   esi
c000d56c:	53                   	push   ebx
c000d56d:	83 ec 4c             	sub    esp,0x4c
c000d570:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d574:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d578:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d57b:	85 db                	test   ebx,ebx
c000d57d:	0f 84 c1 06 00 00    	je     c000dc44 <sinc_mono_vari_process+0x6e0>
c000d583:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d586:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d589:	0f af c7             	imul   eax,edi
c000d58c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d58f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d592:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d599:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5a0:	0f af c7             	imul   eax,edi
c000d5a3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5a6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5aa:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5b7:	68 00 00 70 3f       	push   0x3f700000
c000d5bc:	6a 00                	push   0x0
c000d5be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5c6:	e8 6c b7 01 00       	call   c0028d37 <__ltdf2>
c000d5cb:	83 c4 10             	add    esp,0x10
c000d5ce:	ba 16 00 00 00       	mov    edx,0x16
c000d5d3:	85 c0                	test   eax,eax
c000d5d5:	0f 88 69 06 00 00    	js     c000dc44 <sinc_mono_vari_process+0x6e0>
c000d5db:	68 00 00 70 40       	push   0x40700000
c000d5e0:	6a 00                	push   0x0
c000d5e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ea:	e8 2a b7 01 00       	call   c0028d19 <__gtdf2>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	ba 16 00 00 00       	mov    edx,0x16
c000d5f7:	85 c0                	test   eax,eax
c000d5f9:	0f 8f 45 06 00 00    	jg     c000dc44 <sinc_mono_vari_process+0x6e0>
c000d5ff:	83 ec 0c             	sub    esp,0xc
c000d602:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d605:	e8 c1 b4 01 00       	call   c0028acb <__floatsidf>
c000d60a:	83 c4 10             	add    esp,0x10
c000d60d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d611:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d615:	68 00 00 00 40       	push   0x40000000
c000d61a:	6a 00                	push   0x0
c000d61c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d620:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d624:	e8 c2 a7 01 00       	call   c0027deb <__adddf3>
c000d629:	59                   	pop    ecx
c000d62a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d62e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d632:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d635:	e8 91 b4 01 00       	call   c0028acb <__floatsidf>
c000d63a:	83 c4 10             	add    esp,0x10
c000d63d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d641:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d645:	52                   	push   edx
c000d646:	50                   	push   eax
c000d647:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d64b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d64f:	e8 f8 b0 01 00       	call   c002874c <__divdf3>
c000d654:	83 c4 10             	add    esp,0x10
c000d657:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d65b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d65f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d662:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d665:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d669:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d66d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d671:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d675:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d679:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d67d:	e8 97 b6 01 00       	call   c0028d19 <__gtdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	7e 2d                	jle    c000d6b6 <sinc_mono_vari_process+0x152>
c000d689:	68 00 00 f0 3f       	push   0x3ff00000
c000d68e:	6a 00                	push   0x0
c000d690:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d694:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d698:	e8 9a b6 01 00       	call   c0028d37 <__ltdf2>
c000d69d:	83 c4 10             	add    esp,0x10
c000d6a0:	85 c0                	test   eax,eax
c000d6a2:	79 4d                	jns    c000d6f1 <sinc_mono_vari_process+0x18d>
c000d6a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6b4:	eb 1b                	jmp    c000d6d1 <sinc_mono_vari_process+0x16d>
c000d6b6:	68 00 00 f0 3f       	push   0x3ff00000
c000d6bb:	6a 00                	push   0x0
c000d6bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6c5:	e8 6d b6 01 00       	call   c0028d37 <__ltdf2>
c000d6ca:	83 c4 10             	add    esp,0x10
c000d6cd:	85 c0                	test   eax,eax
c000d6cf:	79 20                	jns    c000d6f1 <sinc_mono_vari_process+0x18d>
c000d6d1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6d5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6d9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e1:	e8 66 b0 01 00       	call   c002874c <__divdf3>
c000d6e6:	83 c4 10             	add    esp,0x10
c000d6e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6f1:	50                   	push   eax
c000d6f2:	50                   	push   eax
c000d6f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fb:	e8 f0 b7 01 00       	call   c0028ef0 <lrint>
c000d700:	40                   	inc    eax
c000d701:	0f af c7             	imul   eax,edi
c000d704:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d708:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d70c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d70f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d712:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d716:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d71a:	58                   	pop    eax
c000d71b:	5a                   	pop    edx
c000d71c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d720:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d724:	e8 c7 b7 01 00       	call   c0028ef0 <lrint>
c000d729:	83 ec 0c             	sub    esp,0xc
c000d72c:	50                   	push   eax
c000d72d:	e8 99 b3 01 00       	call   c0028acb <__floatsidf>
c000d732:	83 c4 10             	add    esp,0x10
c000d735:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d739:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d73d:	52                   	push   edx
c000d73e:	50                   	push   eax
c000d73f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d743:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d747:	e8 f0 ac 01 00       	call   c002843c <__subdf3>
c000d74c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d750:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d754:	83 c4 20             	add    esp,0x20
c000d757:	6a 00                	push   0x0
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 cf b5 01 00       	call   c0028d37 <__ltdf2>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	85 c0                	test   eax,eax
c000d76d:	79 1f                	jns    c000d78e <sinc_mono_vari_process+0x22a>
c000d76f:	68 00 00 f0 3f       	push   0x3ff00000
c000d774:	6a 00                	push   0x0
c000d776:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	e8 68 a6 01 00       	call   c0027deb <__adddf3>
c000d783:	83 c4 10             	add    esp,0x10
c000d786:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d78a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d78e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d791:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d794:	83 ec 10             	sub    esp,0x10
c000d797:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d79b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d79f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7a7:	e8 90 ac 01 00       	call   c002843c <__subdf3>
c000d7ac:	83 c4 18             	add    esp,0x18
c000d7af:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7b3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7b7:	52                   	push   edx
c000d7b8:	50                   	push   eax
c000d7b9:	e8 32 b7 01 00       	call   c0028ef0 <lrint>
c000d7be:	0f af f8             	imul   edi,eax
c000d7c1:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7c4:	31 ff                	xor    edi,edi
c000d7c6:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7cb:	99                   	cdq    
c000d7cc:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7cf:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7da:	55                   	push   ebp
c000d7db:	57                   	push   edi
c000d7dc:	e8 6b af 01 00       	call   c002874c <__divdf3>
c000d7e1:	83 c4 10             	add    esp,0x10
c000d7e4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7e8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7ec:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7f1:	68 23 42 92 0c       	push   0xc924223
c000d7f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7fe:	e8 e8 a5 01 00       	call   c0027deb <__adddf3>
c000d803:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d807:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d80b:	83 c4 20             	add    esp,0x20
c000d80e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d812:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d816:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d819:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d81c:	7d 54                	jge    c000d872 <sinc_mono_vari_process+0x30e>
c000d81e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d821:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d824:	01 c8                	add    eax,ecx
c000d826:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d829:	99                   	cdq    
c000d82a:	f7 f9                	idiv   ecx
c000d82c:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d830:	7d 0c                	jge    c000d83e <sinc_mono_vari_process+0x2da>
c000d832:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d835:	85 ff                	test   edi,edi
c000d837:	79 73                	jns    c000d8ac <sinc_mono_vari_process+0x348>
c000d839:	e9 ee 00 00 00       	jmp    c000d92c <sinc_mono_vari_process+0x3c8>
c000d83e:	50                   	push   eax
c000d83f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d843:	56                   	push   esi
c000d844:	53                   	push   ebx
c000d845:	e8 8d e0 ff ff       	call   c000b8d7 <prepare_data>
c000d84a:	89 c2                	mov    edx,eax
c000d84c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d850:	83 c4 10             	add    esp,0x10
c000d853:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d856:	85 d2                	test   edx,edx
c000d858:	0f 85 e6 03 00 00    	jne    c000dc44 <sinc_mono_vari_process+0x6e0>
c000d85e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d861:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d864:	01 c8                	add    eax,ecx
c000d866:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d869:	99                   	cdq    
c000d86a:	f7 f9                	idiv   ecx
c000d86c:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d870:	7c c0                	jl     c000d832 <sinc_mono_vari_process+0x2ce>
c000d872:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d876:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d87a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d87e:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d881:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d888:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d88c:	89 01                	mov    DWORD PTR [ecx],eax
c000d88e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d891:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d894:	99                   	cdq    
c000d895:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d898:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d89b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d89e:	99                   	cdq    
c000d89f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8a2:	31 d2                	xor    edx,edx
c000d8a4:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8a7:	e9 98 03 00 00       	jmp    c000dc44 <sinc_mono_vari_process+0x6e0>
c000d8ac:	83 ec 0c             	sub    esp,0xc
c000d8af:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8b2:	e8 14 b2 01 00       	call   c0028acb <__floatsidf>
c000d8b7:	83 c4 10             	add    esp,0x10
c000d8ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8c6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d2:	e8 14 a5 01 00       	call   c0027deb <__adddf3>
c000d8d7:	83 c4 10             	add    esp,0x10
c000d8da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8ea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f2:	e8 f4 a4 01 00       	call   c0027deb <__adddf3>
c000d8f7:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8fa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8fe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d902:	e8 c4 b1 01 00       	call   c0028acb <__floatsidf>
c000d907:	83 c4 10             	add    esp,0x10
c000d90a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d90e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d912:	52                   	push   edx
c000d913:	50                   	push   eax
c000d914:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d918:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d91c:	e8 f8 b3 01 00       	call   c0028d19 <__gtdf2>
c000d921:	83 c4 10             	add    esp,0x10
c000d924:	85 c0                	test   eax,eax
c000d926:	0f 8f 46 ff ff ff    	jg     c000d872 <sinc_mono_vari_process+0x30e>
c000d92c:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d930:	0f 8e f5 00 00 00    	jle    c000da2b <sinc_mono_vari_process+0x4c7>
c000d936:	83 ec 10             	sub    esp,0x10
c000d939:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d93c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d93f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d943:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d946:	ff 30                	push   DWORD PTR [eax]
c000d948:	e8 ef aa 01 00       	call   c002843c <__subdf3>
c000d94d:	83 c4 18             	add    esp,0x18
c000d950:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d954:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d958:	52                   	push   edx
c000d959:	50                   	push   eax
c000d95a:	e8 71 b5 01 00       	call   c0028ed0 <fabs>
c000d95f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d963:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d967:	83 c4 10             	add    esp,0x10
c000d96a:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d96f:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d974:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d978:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d97c:	e8 98 b3 01 00       	call   c0028d19 <__gtdf2>
c000d981:	83 c4 10             	add    esp,0x10
c000d984:	85 c0                	test   eax,eax
c000d986:	0f 8e 9f 00 00 00    	jle    c000da2b <sinc_mono_vari_process+0x4c7>
c000d98c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d990:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d993:	8b 00                	mov    eax,DWORD PTR [eax]
c000d995:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d999:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d99d:	52                   	push   edx
c000d99e:	50                   	push   eax
c000d99f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9a5:	e8 92 aa 01 00       	call   c002843c <__subdf3>
c000d9aa:	5f                   	pop    edi
c000d9ab:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9af:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9b3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9b6:	e8 10 b1 01 00       	call   c0028acb <__floatsidf>
c000d9bb:	83 c4 10             	add    esp,0x10
c000d9be:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9c2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9c6:	52                   	push   edx
c000d9c7:	50                   	push   eax
c000d9c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9cc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9d0:	e8 93 aa 01 00       	call   c0028468 <__muldf3>
c000d9d5:	5d                   	pop    ebp
c000d9d6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9da:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9de:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9e1:	e8 e5 b0 01 00       	call   c0028acb <__floatsidf>
c000d9e6:	83 c4 10             	add    esp,0x10
c000d9e9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9ed:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9f1:	52                   	push   edx
c000d9f2:	50                   	push   eax
c000d9f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fb:	e8 4c ad 01 00       	call   c002874c <__divdf3>
c000da00:	83 c4 10             	add    esp,0x10
c000da03:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da07:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1b:	e8 cb a3 01 00       	call   c0027deb <__adddf3>
c000da20:	83 c4 10             	add    esp,0x10
c000da23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da2b:	83 ec 0c             	sub    esp,0xc
c000da2e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da31:	e8 95 b0 01 00       	call   c0028acb <__floatsidf>
c000da36:	83 c4 10             	add    esp,0x10
c000da39:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da3d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da51:	e8 e1 b2 01 00       	call   c0028d37 <__ltdf2>
c000da56:	83 c4 10             	add    esp,0x10
c000da59:	85 c0                	test   eax,eax
c000da5b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da5f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da63:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da67:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da6b:	78 10                	js     c000da7d <sinc_mono_vari_process+0x519>
c000da6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da71:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da75:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da79:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da85:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da89:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da8d:	e8 d6 a9 01 00       	call   c0028468 <__muldf3>
c000da92:	59                   	pop    ecx
c000da93:	5f                   	pop    edi
c000da94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da9c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000daa0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000daa4:	e8 07 de ff ff       	call   c000b8b0 <double_to_fp>
c000daa9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daad:	89 c7                	mov    edi,eax
c000daaf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dab3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dab7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dabb:	e8 a8 a9 01 00       	call   c0028468 <__muldf3>
c000dac0:	83 c4 18             	add    esp,0x18
c000dac3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dac7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dacb:	52                   	push   edx
c000dacc:	50                   	push   eax
c000dacd:	e8 de dd ff ff       	call   c000b8b0 <double_to_fp>
c000dad2:	83 ec 0c             	sub    esp,0xc
c000dad5:	89 c5                	mov    ebp,eax
c000dad7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dada:	e8 ec af 01 00       	call   c0028acb <__floatsidf>
c000dadf:	83 c4 10             	add    esp,0x10
c000dae2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000daf0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000daf4:	e8 53 ac 01 00       	call   c002874c <__divdf3>
c000daf9:	83 c4 10             	add    esp,0x10
c000dafc:	89 e9                	mov    ecx,ebp
c000dafe:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db02:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db06:	89 d8                	mov    eax,ebx
c000db08:	89 fa                	mov    edx,edi
c000db0a:	e8 ee bd ff ff       	call   c00098fd <calc_output_single>
c000db0f:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db15:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db19:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db1d:	52                   	push   edx
c000db1e:	50                   	push   eax
c000db1f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db23:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db27:	e8 3c a9 01 00       	call   c0028468 <__muldf3>
c000db2c:	59                   	pop    ecx
c000db2d:	59                   	pop    ecx
c000db2e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db36:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db3a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db3e:	e8 f8 b1 01 00       	call   c0028d3b <__truncdfsf2>
c000db43:	83 c4 10             	add    esp,0x10
c000db46:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db49:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db4c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db50:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db54:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db58:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db5c:	e8 eb ab 01 00       	call   c002874c <__divdf3>
c000db61:	83 c4 10             	add    esp,0x10
c000db64:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db68:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db74:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db78:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db7c:	e8 6a a2 01 00       	call   c0027deb <__adddf3>
c000db81:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db85:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db89:	83 c4 18             	add    esp,0x18
c000db8c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db90:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db94:	e8 57 b3 01 00       	call   c0028ef0 <lrint>
c000db99:	83 ec 0c             	sub    esp,0xc
c000db9c:	50                   	push   eax
c000db9d:	e8 29 af 01 00       	call   c0028acb <__floatsidf>
c000dba2:	83 c4 10             	add    esp,0x10
c000dba5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dba9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbad:	52                   	push   edx
c000dbae:	50                   	push   eax
c000dbaf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbb3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbb7:	e8 80 a8 01 00       	call   c002843c <__subdf3>
c000dbbc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbc0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbc4:	83 c4 20             	add    esp,0x20
c000dbc7:	6a 00                	push   0x0
c000dbc9:	6a 00                	push   0x0
c000dbcb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd3:	e8 5f b1 01 00       	call   c0028d37 <__ltdf2>
c000dbd8:	83 c4 10             	add    esp,0x10
c000dbdb:	85 c0                	test   eax,eax
c000dbdd:	79 20                	jns    c000dbff <sinc_mono_vari_process+0x69b>
c000dbdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbeb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbef:	e8 f7 a1 01 00       	call   c0027deb <__adddf3>
c000dbf4:	83 c4 10             	add    esp,0x10
c000dbf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbfb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbff:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc02:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc05:	83 ec 10             	sub    esp,0x10
c000dc08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc10:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc18:	e8 1f a8 01 00       	call   c002843c <__subdf3>
c000dc1d:	83 c4 18             	add    esp,0x18
c000dc20:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc24:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc28:	52                   	push   edx
c000dc29:	50                   	push   eax
c000dc2a:	e8 c1 b2 01 00       	call   c0028ef0 <lrint>
c000dc2f:	83 c4 10             	add    esp,0x10
c000dc32:	0f af f8             	imul   edi,eax
c000dc35:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc38:	99                   	cdq    
c000dc39:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc3c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc3f:	e9 d2 fb ff ff       	jmp    c000d816 <sinc_mono_vari_process+0x2b2>
c000dc44:	83 c4 4c             	add    esp,0x4c
c000dc47:	89 d0                	mov    eax,edx
c000dc49:	5b                   	pop    ebx
c000dc4a:	5e                   	pop    esi
c000dc4b:	5f                   	pop    edi
c000dc4c:	5d                   	pop    ebp
c000dc4d:	c3                   	ret    

c000dc4e <sinc_get_name>:
c000dc4e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc52:	31 c0                	xor    eax,eax
c000dc54:	83 fa 02             	cmp    edx,0x2
c000dc57:	77 07                	ja     c000dc60 <sinc_get_name+0x12>
c000dc59:	8b 04 95 c4 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd583c]
c000dc60:	c3                   	ret    

c000dc61 <sinc_get_description>:
c000dc61:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc65:	31 c0                	xor    eax,eax
c000dc67:	83 fa 02             	cmp    edx,0x2
c000dc6a:	77 07                	ja     c000dc73 <sinc_get_description+0x12>
c000dc6c:	8b 04 95 b8 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5848]
c000dc73:	c3                   	ret    

c000dc74 <sinc_set_converter>:
c000dc74:	53                   	push   ebx
c000dc75:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc7b:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc82:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc85:	85 c0                	test   eax,eax
c000dc87:	74 13                	je     c000dc9c <sinc_set_converter+0x28>
c000dc89:	83 ec 0c             	sub    esp,0xc
c000dc8c:	50                   	push   eax
c000dc8d:	e8 ac 1c 00 00       	call   c000f93e <free>
c000dc92:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc99:	83 c4 10             	add    esp,0x10
c000dc9c:	50                   	push   eax
c000dc9d:	68 44 08 00 00       	push   0x844
c000dca2:	6a 00                	push   0x0
c000dca4:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dca8:	50                   	push   eax
c000dca9:	e8 be 2a ff ff       	call   c000076c <memset>
c000dcae:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcb1:	83 c4 10             	add    esp,0x10
c000dcb4:	b8 0b 00 00 00       	mov    eax,0xb
c000dcb9:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcbf:	7f 6e                	jg     c000dd2f <sinc_set_converter+0xbb>
c000dcc1:	83 fa 01             	cmp    edx,0x1
c000dcc4:	75 10                	jne    c000dcd6 <sinc_set_converter+0x62>
c000dcc6:	c7 43 24 64 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d564
c000dccd:	c7 43 20 64 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d564
c000dcd4:	eb 4d                	jmp    c000dd23 <sinc_set_converter+0xaf>
c000dcd6:	83 fa 02             	cmp    edx,0x2
c000dcd9:	75 10                	jne    c000dceb <sinc_set_converter+0x77>
c000dcdb:	c7 43 24 9f ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce9f
c000dce2:	c7 43 20 9f ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce9f
c000dce9:	eb 38                	jmp    c000dd23 <sinc_set_converter+0xaf>
c000dceb:	83 fa 04             	cmp    edx,0x4
c000dcee:	75 10                	jne    c000dd00 <sinc_set_converter+0x8c>
c000dcf0:	c7 43 24 da c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7da
c000dcf7:	c7 43 20 da c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7da
c000dcfe:	eb 23                	jmp    c000dd23 <sinc_set_converter+0xaf>
c000dd00:	83 fa 06             	cmp    edx,0x6
c000dd03:	75 10                	jne    c000dd15 <sinc_set_converter+0xa1>
c000dd05:	c7 43 24 15 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c115
c000dd0c:	c7 43 20 15 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c115
c000dd13:	eb 0e                	jmp    c000dd23 <sinc_set_converter+0xaf>
c000dd15:	c7 43 24 51 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba51
c000dd1c:	c7 43 20 51 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba51
c000dd23:	c7 43 28 04 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad04
c000dd2a:	b8 0a 00 00 00       	mov    eax,0xa
c000dd2f:	81 c4 58 08 00 00    	add    esp,0x858
c000dd35:	5b                   	pop    ebx
c000dd36:	c3                   	ret    

c000dd37 <zoh_vari_process>:
c000dd37:	55                   	push   ebp
c000dd38:	31 d2                	xor    edx,edx
c000dd3a:	57                   	push   edi
c000dd3b:	56                   	push   esi
c000dd3c:	53                   	push   ebx
c000dd3d:	83 ec 3c             	sub    esp,0x3c
c000dd40:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd44:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd48:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd4c:	0f 8e 80 06 00 00    	jle    c000e3d2 <zoh_vari_process+0x69b>
c000dd52:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd55:	ba 05 00 00 00       	mov    edx,0x5
c000dd5a:	85 db                	test   ebx,ebx
c000dd5c:	0f 84 70 06 00 00    	je     c000e3d2 <zoh_vari_process+0x69b>
c000dd62:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd65:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd69:	74 19                	je     c000dd84 <zoh_vari_process+0x4d>
c000dd6b:	31 d2                	xor    edx,edx
c000dd6d:	39 c2                	cmp    edx,eax
c000dd6f:	7d 0c                	jge    c000dd7d <zoh_vari_process+0x46>
c000dd71:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd73:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd76:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd7a:	42                   	inc    edx
c000dd7b:	eb f0                	jmp    c000dd6d <zoh_vari_process+0x36>
c000dd7d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd84:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd87:	0f af d0             	imul   edx,eax
c000dd8a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd8d:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd91:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd98:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd9b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dda2:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dda5:	8b 07                	mov    eax,DWORD PTR [edi]
c000dda7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddaf:	68 00 00 70 3f       	push   0x3f700000
c000ddb4:	6a 00                	push   0x0
c000ddb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddbe:	e8 74 af 01 00       	call   c0028d37 <__ltdf2>
c000ddc3:	83 c4 10             	add    esp,0x10
c000ddc6:	ba 16 00 00 00       	mov    edx,0x16
c000ddcb:	85 c0                	test   eax,eax
c000ddcd:	0f 88 ff 05 00 00    	js     c000e3d2 <zoh_vari_process+0x69b>
c000ddd3:	68 00 00 70 40       	push   0x40700000
c000ddd8:	6a 00                	push   0x0
c000ddda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dde2:	e8 32 af 01 00       	call   c0028d19 <__gtdf2>
c000dde7:	83 c4 10             	add    esp,0x10
c000ddea:	ba 16 00 00 00       	mov    edx,0x16
c000ddef:	85 c0                	test   eax,eax
c000ddf1:	0f 8f db 05 00 00    	jg     c000e3d2 <zoh_vari_process+0x69b>
c000ddf7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ddfa:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000ddfd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de01:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de05:	68 00 00 f0 3f       	push   0x3ff00000
c000de0a:	6a 00                	push   0x0
c000de0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de14:	e8 1e af 01 00       	call   c0028d37 <__ltdf2>
c000de19:	83 c4 10             	add    esp,0x10
c000de1c:	85 c0                	test   eax,eax
c000de1e:	0f 89 da 01 00 00    	jns    c000dffe <zoh_vari_process+0x2c7>
c000de24:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de27:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de2a:	0f 8d ce 01 00 00    	jge    c000dffe <zoh_vari_process+0x2c7>
c000de30:	83 ec 0c             	sub    esp,0xc
c000de33:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de36:	e8 90 ac 01 00       	call   c0028acb <__floatsidf>
c000de3b:	83 c4 10             	add    esp,0x10
c000de3e:	89 04 24             	mov    DWORD PTR [esp],eax
c000de41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de51:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de55:	e8 0e a6 01 00       	call   c0028468 <__muldf3>
c000de5a:	59                   	pop    ecx
c000de5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de5f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de63:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de66:	e8 60 ac 01 00       	call   c0028acb <__floatsidf>
c000de6b:	83 c4 10             	add    esp,0x10
c000de6e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de72:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de76:	52                   	push   edx
c000de77:	50                   	push   eax
c000de78:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de7c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de80:	e8 66 9f 01 00       	call   c0027deb <__adddf3>
c000de85:	59                   	pop    ecx
c000de86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de8a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de8e:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de91:	e8 35 ac 01 00       	call   c0028acb <__floatsidf>
c000de96:	83 c4 10             	add    esp,0x10
c000de99:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de9d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dea1:	52                   	push   edx
c000dea2:	50                   	push   eax
c000dea3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dea7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deab:	e8 85 ae 01 00       	call   c0028d35 <__gedf2>
c000deb0:	83 c4 10             	add    esp,0x10
c000deb3:	85 c0                	test   eax,eax
c000deb5:	0f 89 43 01 00 00    	jns    c000dffe <zoh_vari_process+0x2c7>
c000debb:	85 ed                	test   ebp,ebp
c000debd:	0f 8e ec 00 00 00    	jle    c000dfaf <zoh_vari_process+0x278>
c000dec3:	83 ec 10             	sub    esp,0x10
c000dec6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dec9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000decc:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000decf:	ff 37                	push   DWORD PTR [edi]
c000ded1:	e8 66 a5 01 00       	call   c002843c <__subdf3>
c000ded6:	83 c4 18             	add    esp,0x18
c000ded9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dedd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dee1:	52                   	push   edx
c000dee2:	50                   	push   eax
c000dee3:	e8 e8 af 01 00       	call   c0028ed0 <fabs>
c000dee8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000deec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000def0:	83 c4 10             	add    esp,0x10
c000def3:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000def8:	68 23 42 92 0c       	push   0xc924223
c000defd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df05:	e8 0f ae 01 00       	call   c0028d19 <__gtdf2>
c000df0a:	83 c4 10             	add    esp,0x10
c000df0d:	85 c0                	test   eax,eax
c000df0f:	0f 8e 9a 00 00 00    	jle    c000dfaf <zoh_vari_process+0x278>
c000df15:	8b 07                	mov    eax,DWORD PTR [edi]
c000df17:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df1a:	89 04 24             	mov    DWORD PTR [esp],eax
c000df1d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df21:	52                   	push   edx
c000df22:	50                   	push   eax
c000df23:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df26:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df29:	e8 0e a5 01 00       	call   c002843c <__subdf3>
c000df2e:	59                   	pop    ecx
c000df2f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df37:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df3a:	e8 8c ab 01 00       	call   c0028acb <__floatsidf>
c000df3f:	83 c4 10             	add    esp,0x10
c000df42:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df46:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df4a:	52                   	push   edx
c000df4b:	50                   	push   eax
c000df4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df54:	e8 0f a5 01 00       	call   c0028468 <__muldf3>
c000df59:	5d                   	pop    ebp
c000df5a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df5e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df62:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df65:	e8 61 ab 01 00       	call   c0028acb <__floatsidf>
c000df6a:	83 c4 10             	add    esp,0x10
c000df6d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df71:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df75:	52                   	push   edx
c000df76:	50                   	push   eax
c000df77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df7f:	e8 c8 a7 01 00       	call   c002874c <__divdf3>
c000df84:	83 c4 10             	add    esp,0x10
c000df87:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df8b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df8f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df93:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9f:	e8 47 9e 01 00       	call   c0027deb <__adddf3>
c000dfa4:	83 c4 10             	add    esp,0x10
c000dfa7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfaf:	31 c0                	xor    eax,eax
c000dfb1:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfb4:	7e 13                	jle    c000dfc9 <zoh_vari_process+0x292>
c000dfb6:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfbd:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfc0:	40                   	inc    eax
c000dfc1:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfc4:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfc7:	eb e8                	jmp    c000dfb1 <zoh_vari_process+0x27a>
c000dfc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfcd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfd1:	68 00 00 f0 3f       	push   0x3ff00000
c000dfd6:	6a 00                	push   0x0
c000dfd8:	e8 6f a7 01 00       	call   c002874c <__divdf3>
c000dfdd:	83 c4 10             	add    esp,0x10
c000dfe0:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfe3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfe7:	52                   	push   edx
c000dfe8:	50                   	push   eax
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff1:	e8 f5 9d 01 00       	call   c0027deb <__adddf3>
c000dff6:	83 c4 10             	add    esp,0x10
c000dff9:	e9 ff fd ff ff       	jmp    c000ddfd <zoh_vari_process+0xc6>
c000dffe:	55                   	push   ebp
c000dfff:	55                   	push   ebp
c000e000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e008:	e8 e3 ae 01 00       	call   c0028ef0 <lrint>
c000e00d:	83 ec 0c             	sub    esp,0xc
c000e010:	50                   	push   eax
c000e011:	e8 b5 aa 01 00       	call   c0028acb <__floatsidf>
c000e016:	83 c4 10             	add    esp,0x10
c000e019:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e01d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e021:	52                   	push   edx
c000e022:	50                   	push   eax
c000e023:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e027:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e02b:	e8 0c a4 01 00       	call   c002843c <__subdf3>
c000e030:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e034:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e038:	83 c4 20             	add    esp,0x20
c000e03b:	6a 00                	push   0x0
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 eb ac 01 00       	call   c0028d37 <__ltdf2>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	85 c0                	test   eax,eax
c000e051:	79 1e                	jns    c000e071 <zoh_vari_process+0x33a>
c000e053:	68 00 00 f0 3f       	push   0x3ff00000
c000e058:	6a 00                	push   0x0
c000e05a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	e8 84 9d 01 00       	call   c0027deb <__adddf3>
c000e067:	83 c4 10             	add    esp,0x10
c000e06a:	89 04 24             	mov    DWORD PTR [esp],eax
c000e06d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e071:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e074:	83 ec 10             	sub    esp,0x10
c000e077:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e07b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e07f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e083:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e087:	e8 b0 a3 01 00       	call   c002843c <__subdf3>
c000e08c:	83 c4 18             	add    esp,0x18
c000e08f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e093:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e097:	52                   	push   edx
c000e098:	50                   	push   eax
c000e099:	e8 52 ae 01 00       	call   c0028ef0 <lrint>
c000e09e:	83 c4 10             	add    esp,0x10
c000e0a1:	0f af e8             	imul   ebp,eax
c000e0a4:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0a7:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0aa:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0ae:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0b1:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0b8:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0bb:	0f 8d 7a 02 00 00    	jge    c000e33b <zoh_vari_process+0x604>
c000e0c1:	83 ec 0c             	sub    esp,0xc
c000e0c4:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0c7:	e8 ff a9 01 00       	call   c0028acb <__floatsidf>
c000e0cc:	83 c4 10             	add    esp,0x10
c000e0cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0d7:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0db:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0df:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0e7:	e8 7c a3 01 00       	call   c0028468 <__muldf3>
c000e0ec:	59                   	pop    ecx
c000e0ed:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0f1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0f9:	e8 cd a9 01 00       	call   c0028acb <__floatsidf>
c000e0fe:	83 c4 10             	add    esp,0x10
c000e101:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e105:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e109:	52                   	push   edx
c000e10a:	50                   	push   eax
c000e10b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e10f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e113:	e8 d3 9c 01 00       	call   c0027deb <__adddf3>
c000e118:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e11b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e11f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e123:	e8 a3 a9 01 00       	call   c0028acb <__floatsidf>
c000e128:	83 c4 10             	add    esp,0x10
c000e12b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e12f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e133:	52                   	push   edx
c000e134:	50                   	push   eax
c000e135:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e139:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e13d:	e8 f7 ab 01 00       	call   c0028d39 <__ledf2>
c000e142:	83 c4 10             	add    esp,0x10
c000e145:	85 c0                	test   eax,eax
c000e147:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e14b:	0f 8f ea 01 00 00    	jg     c000e33b <zoh_vari_process+0x604>
c000e151:	85 c9                	test   ecx,ecx
c000e153:	0f 8e ed 00 00 00    	jle    c000e246 <zoh_vari_process+0x50f>
c000e159:	83 ec 10             	sub    esp,0x10
c000e15c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e15f:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e162:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e165:	ff 37                	push   DWORD PTR [edi]
c000e167:	e8 d0 a2 01 00       	call   c002843c <__subdf3>
c000e16c:	83 c4 18             	add    esp,0x18
c000e16f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e173:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e177:	52                   	push   edx
c000e178:	50                   	push   eax
c000e179:	e8 52 ad 01 00       	call   c0028ed0 <fabs>
c000e17e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e182:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e186:	83 c4 10             	add    esp,0x10
c000e189:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e18e:	68 23 42 92 0c       	push   0xc924223
c000e193:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e19b:	e8 79 ab 01 00       	call   c0028d19 <__gtdf2>
c000e1a0:	83 c4 10             	add    esp,0x10
c000e1a3:	85 c0                	test   eax,eax
c000e1a5:	0f 8e 9b 00 00 00    	jle    c000e246 <zoh_vari_process+0x50f>
c000e1ab:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1ad:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1b8:	52                   	push   edx
c000e1b9:	50                   	push   eax
c000e1ba:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1bd:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1c0:	e8 77 a2 01 00       	call   c002843c <__subdf3>
c000e1c5:	5d                   	pop    ebp
c000e1c6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1ca:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ce:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1d1:	e8 f5 a8 01 00       	call   c0028acb <__floatsidf>
c000e1d6:	83 c4 10             	add    esp,0x10
c000e1d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1e1:	52                   	push   edx
c000e1e2:	50                   	push   eax
c000e1e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1eb:	e8 78 a2 01 00       	call   c0028468 <__muldf3>
c000e1f0:	59                   	pop    ecx
c000e1f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1f5:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1f9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1fc:	e8 ca a8 01 00       	call   c0028acb <__floatsidf>
c000e201:	83 c4 10             	add    esp,0x10
c000e204:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e208:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e20c:	52                   	push   edx
c000e20d:	50                   	push   eax
c000e20e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e212:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e216:	e8 31 a5 01 00       	call   c002874c <__divdf3>
c000e21b:	83 c4 10             	add    esp,0x10
c000e21e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e222:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e226:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e22a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e22e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e236:	e8 b0 9b 01 00       	call   c0027deb <__adddf3>
c000e23b:	83 c4 10             	add    esp,0x10
c000e23e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e242:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e246:	31 d2                	xor    edx,edx
c000e248:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e24b:	39 d0                	cmp    eax,edx
c000e24d:	7e 1d                	jle    c000e26c <zoh_vari_process+0x535>
c000e24f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e252:	29 c1                	sub    ecx,eax
c000e254:	89 c8                	mov    eax,ecx
c000e256:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e258:	01 d0                	add    eax,edx
c000e25a:	42                   	inc    edx
c000e25b:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e25e:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e261:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e264:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e267:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e26a:	eb dc                	jmp    c000e248 <zoh_vari_process+0x511>
c000e26c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e270:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e274:	68 00 00 f0 3f       	push   0x3ff00000
c000e279:	6a 00                	push   0x0
c000e27b:	e8 cc a4 01 00       	call   c002874c <__divdf3>
c000e280:	83 c4 10             	add    esp,0x10
c000e283:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e287:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e28b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e28f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e29b:	e8 4b 9b 01 00       	call   c0027deb <__adddf3>
c000e2a0:	5d                   	pop    ebp
c000e2a1:	59                   	pop    ecx
c000e2a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b2:	e8 39 ac 01 00       	call   c0028ef0 <lrint>
c000e2b7:	83 ec 0c             	sub    esp,0xc
c000e2ba:	50                   	push   eax
c000e2bb:	e8 0b a8 01 00       	call   c0028acb <__floatsidf>
c000e2c0:	83 c4 10             	add    esp,0x10
c000e2c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2c7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2cb:	52                   	push   edx
c000e2cc:	50                   	push   eax
c000e2cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2d5:	e8 62 a1 01 00       	call   c002843c <__subdf3>
c000e2da:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2de:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2e2:	83 c4 20             	add    esp,0x20
c000e2e5:	6a 00                	push   0x0
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 41 aa 01 00       	call   c0028d37 <__ltdf2>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	85 c0                	test   eax,eax
c000e2fb:	79 1e                	jns    c000e31b <zoh_vari_process+0x5e4>
c000e2fd:	68 00 00 f0 3f       	push   0x3ff00000
c000e302:	6a 00                	push   0x0
c000e304:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	e8 da 9a 01 00       	call   c0027deb <__adddf3>
c000e311:	83 c4 10             	add    esp,0x10
c000e314:	89 04 24             	mov    DWORD PTR [esp],eax
c000e317:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e31b:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e31e:	83 ec 10             	sub    esp,0x10
c000e321:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e325:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e329:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e32d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e331:	e8 06 a1 01 00       	call   c002843c <__subdf3>
c000e336:	e9 51 fd ff ff       	jmp    c000e08c <zoh_vari_process+0x355>
c000e33b:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e33f:	7d 3a                	jge    c000e37b <zoh_vari_process+0x644>
c000e341:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e345:	83 ec 0c             	sub    esp,0xc
c000e348:	29 e8                	sub    eax,ebp
c000e34a:	99                   	cdq    
c000e34b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e34e:	50                   	push   eax
c000e34f:	e8 77 a7 01 00       	call   c0028acb <__floatsidf>
c000e354:	83 c4 10             	add    esp,0x10
c000e357:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e35b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e35f:	52                   	push   edx
c000e360:	50                   	push   eax
c000e361:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e365:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e369:	e8 7d 9a 01 00       	call   c0027deb <__adddf3>
c000e36e:	83 c4 10             	add    esp,0x10
c000e371:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e374:	89 04 24             	mov    DWORD PTR [esp],eax
c000e377:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e37b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e37e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e382:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e385:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e388:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e38b:	85 c0                	test   eax,eax
c000e38d:	7f 25                	jg     c000e3b4 <zoh_vari_process+0x67d>
c000e38f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e393:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e397:	89 07                	mov    DWORD PTR [edi],eax
c000e399:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e39c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e39f:	99                   	cdq    
c000e3a0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3a3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3a6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3a9:	99                   	cdq    
c000e3aa:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3ad:	31 d2                	xor    edx,edx
c000e3af:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3b2:	eb 1e                	jmp    c000e3d2 <zoh_vari_process+0x69b>
c000e3b4:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3b7:	31 d2                	xor    edx,edx
c000e3b9:	29 c8                	sub    eax,ecx
c000e3bb:	c1 e0 02             	shl    eax,0x2
c000e3be:	39 d1                	cmp    ecx,edx
c000e3c0:	7e cd                	jle    c000e38f <zoh_vari_process+0x658>
c000e3c2:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3c4:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3c8:	83 c0 04             	add    eax,0x4
c000e3cb:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3cf:	42                   	inc    edx
c000e3d0:	eb ec                	jmp    c000e3be <zoh_vari_process+0x687>
c000e3d2:	83 c4 3c             	add    esp,0x3c
c000e3d5:	89 d0                	mov    eax,edx
c000e3d7:	5b                   	pop    ebx
c000e3d8:	5e                   	pop    esi
c000e3d9:	5f                   	pop    edi
c000e3da:	5d                   	pop    ebp
c000e3db:	c3                   	ret    

c000e3dc <zoh_reset>:
c000e3dc:	83 ec 0c             	sub    esp,0xc
c000e3df:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3e3:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3e6:	85 c0                	test   eax,eax
c000e3e8:	74 20                	je     c000e40a <zoh_reset+0x2e>
c000e3ea:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3ed:	83 c0 1c             	add    eax,0x1c
c000e3f0:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3f3:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3fa:	c1 e2 02             	shl    edx,0x2
c000e3fd:	51                   	push   ecx
c000e3fe:	52                   	push   edx
c000e3ff:	6a 00                	push   0x0
c000e401:	50                   	push   eax
c000e402:	e8 65 23 ff ff       	call   c000076c <memset>
c000e407:	83 c4 10             	add    esp,0x10
c000e40a:	83 c4 0c             	add    esp,0xc
c000e40d:	c3                   	ret    

c000e40e <zoh_get_name>:
c000e40e:	31 c0                	xor    eax,eax
c000e410:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e415:	75 05                	jne    c000e41c <zoh_get_name+0xe>
c000e417:	b8 de a8 02 c0       	mov    eax,0xc002a8de
c000e41c:	c3                   	ret    

c000e41d <zoh_get_description>:
c000e41d:	31 c0                	xor    eax,eax
c000e41f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e424:	75 05                	jne    c000e42b <zoh_get_description+0xe>
c000e426:	b8 ef a8 02 c0       	mov    eax,0xc002a8ef
c000e42b:	c3                   	ret    

c000e42c <zoh_set_converter>:
c000e42c:	53                   	push   ebx
c000e42d:	b8 0a 00 00 00       	mov    eax,0xa
c000e432:	83 ec 08             	sub    esp,0x8
c000e435:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e439:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e43e:	75 6e                	jne    c000e4ae <zoh_set_converter+0x82>
c000e440:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e443:	85 c0                	test   eax,eax
c000e445:	74 13                	je     c000e45a <zoh_set_converter+0x2e>
c000e447:	83 ec 0c             	sub    esp,0xc
c000e44a:	50                   	push   eax
c000e44b:	e8 ee 14 00 00       	call   c000f93e <free>
c000e450:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e457:	83 c4 10             	add    esp,0x10
c000e45a:	50                   	push   eax
c000e45b:	50                   	push   eax
c000e45c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e45f:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e466:	50                   	push   eax
c000e467:	6a 01                	push   0x1
c000e469:	e8 f0 14 00 00       	call   c000f95e <calloc>
c000e46e:	83 c4 10             	add    esp,0x10
c000e471:	89 c2                	mov    edx,eax
c000e473:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e476:	85 d2                	test   edx,edx
c000e478:	b8 01 00 00 00       	mov    eax,0x1
c000e47d:	74 2f                	je     c000e4ae <zoh_set_converter+0x82>
c000e47f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e482:	83 ec 0c             	sub    esp,0xc
c000e485:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e488:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e48e:	c7 43 24 37 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd37
c000e495:	c7 43 20 37 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd37
c000e49c:	c7 43 28 dc e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3dc
c000e4a3:	53                   	push   ebx
c000e4a4:	e8 33 ff ff ff       	call   c000e3dc <zoh_reset>
c000e4a9:	83 c4 10             	add    esp,0x10
c000e4ac:	31 c0                	xor    eax,eax
c000e4ae:	83 c4 08             	add    esp,0x8
c000e4b1:	5b                   	pop    ebx
c000e4b2:	c3                   	ret    

c000e4b3 <CPU::current()>:
c000e4b3:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c000e4b8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4be:	90                   	nop
c000e4bf:	c3                   	ret    

c000e4c0 <operator new(unsigned long)>:
c000e4c0:	83 ec 0c             	sub    esp,0xc
c000e4c3:	83 ec 0c             	sub    esp,0xc
c000e4c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4ca:	e8 5f 14 00 00       	call   c000f92e <malloc>
c000e4cf:	83 c4 10             	add    esp,0x10
c000e4d2:	83 c4 0c             	add    esp,0xc
c000e4d5:	c3                   	ret    

c000e4d6 <operator delete(void*)>:
c000e4d6:	83 ec 0c             	sub    esp,0xc
c000e4d9:	83 ec 0c             	sub    esp,0xc
c000e4dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e0:	e8 69 14 00 00       	call   c000f94e <rfree>
c000e4e5:	83 c4 10             	add    esp,0x10
c000e4e8:	90                   	nop
c000e4e9:	83 c4 0c             	add    esp,0xc
c000e4ec:	c3                   	ret    

c000e4ed <disableIRQs()>:
c000e4ed:	fa                   	cli    
c000e4ee:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c000e4f3:	40                   	inc    eax
c000e4f4:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c000e4f9:	90                   	nop
c000e4fa:	c3                   	ret    

c000e4fb <enableIRQs()>:
c000e4fb:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c000e500:	48                   	dec    eax
c000e501:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c000e506:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c000e50b:	85 c0                	test   eax,eax
c000e50d:	75 01                	jne    c000e510 <enableIRQs()+0x15>
c000e50f:	fb                   	sti    
c000e510:	90                   	nop
c000e511:	c3                   	ret    

c000e512 <lockScheduler()>:
c000e512:	fa                   	cli    
c000e513:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c000e518:	40                   	inc    eax
c000e519:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c000e51e:	90                   	nop
c000e51f:	c3                   	ret    

c000e520 <unlockScheduler()>:
c000e520:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c000e525:	48                   	dec    eax
c000e526:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c000e52b:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c000e530:	85 c0                	test   eax,eax
c000e532:	75 01                	jne    c000e535 <unlockScheduler()+0x15>
c000e534:	fb                   	sti    
c000e535:	90                   	nop
c000e536:	c3                   	ret    

c000e537 <lockStuff()>:
c000e537:	fa                   	cli    
c000e538:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c000e53d:	40                   	inc    eax
c000e53e:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c000e543:	a1 24 24 03 c0       	mov    eax,ds:0xc0032424
c000e548:	40                   	inc    eax
c000e549:	a3 24 24 03 c0       	mov    ds:0xc0032424,eax
c000e54e:	90                   	nop
c000e54f:	c3                   	ret    

c000e550 <unlockStuff()>:
c000e550:	83 ec 0c             	sub    esp,0xc
c000e553:	a1 24 24 03 c0       	mov    eax,ds:0xc0032424
c000e558:	48                   	dec    eax
c000e559:	a3 24 24 03 c0       	mov    ds:0xc0032424,eax
c000e55e:	a1 24 24 03 c0       	mov    eax,ds:0xc0032424
c000e563:	85 c0                	test   eax,eax
c000e565:	75 18                	jne    c000e57f <unlockStuff()+0x2f>
c000e567:	a1 20 24 03 c0       	mov    eax,ds:0xc0032420
c000e56c:	85 c0                	test   eax,eax
c000e56e:	74 0f                	je     c000e57f <unlockStuff()+0x2f>
c000e570:	c7 05 20 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032420,0x0
c000e57a:	e8 a7 ff 00 00       	call   c001e526 <schedule()>
c000e57f:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c000e584:	48                   	dec    eax
c000e585:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c000e58a:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c000e58f:	85 c0                	test   eax,eax
c000e591:	75 01                	jne    c000e594 <unlockStuff()+0x44>
c000e593:	fb                   	sti    
c000e594:	90                   	nop
c000e595:	83 c4 0c             	add    esp,0xc
c000e598:	c3                   	ret    

c000e599 <Virt::getAKernelVAS()>:
c000e599:	a1 70 f0 02 c0       	mov    eax,ds:0xc002f070
c000e59e:	90                   	nop
c000e59f:	c3                   	ret    

c000e5a0 <__not_memcpy>:
c000e5a0:	57                   	push   edi
c000e5a1:	56                   	push   esi
c000e5a2:	83 ec 10             	sub    esp,0x10
c000e5a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e5a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e5b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e5b9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e5bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5c1:	89 04 24             	mov    DWORD PTR [esp],eax
c000e5c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e5c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e5cc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e5d0:	89 c6                	mov    esi,eax
c000e5d2:	89 d7                	mov    edi,edx
c000e5d4:	fc                   	cld    
c000e5d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e5da:	90                   	nop
c000e5db:	83 c4 10             	add    esp,0x10
c000e5de:	5e                   	pop    esi
c000e5df:	5f                   	pop    edi
c000e5e0:	c3                   	ret    

c000e5e1 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e5e1:	83 ec 0c             	sub    esp,0xc
c000e5e4:	83 ec 08             	sub    esp,0x8
c000e5e7:	68 26 a9 02 c0       	push   0xc002a926
c000e5ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5f0:	e8 bf 22 ff ff       	call   c00008b4 <strcmp>
c000e5f5:	83 c4 10             	add    esp,0x10
c000e5f8:	85 c0                	test   eax,eax
c000e5fa:	0f 94 c0             	sete   al
c000e5fd:	84 c0                	test   al,al
c000e5ff:	74 0a                	je     c000e60b <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e601:	b8 e8 ee 02 c0       	mov    eax,0xc002eee8
c000e606:	e9 e3 00 00 00       	jmp    c000e6ee <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e60b:	83 ec 08             	sub    esp,0x8
c000e60e:	68 2f a9 02 c0       	push   0xc002a92f
c000e613:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e617:	e8 98 22 ff ff       	call   c00008b4 <strcmp>
c000e61c:	83 c4 10             	add    esp,0x10
c000e61f:	85 c0                	test   eax,eax
c000e621:	0f 94 c0             	sete   al
c000e624:	84 c0                	test   al,al
c000e626:	74 0a                	je     c000e632 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e628:	b8 64 72 02 c0       	mov    eax,0xc0027264
c000e62d:	e9 bc 00 00 00       	jmp    c000e6ee <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e632:	83 ec 08             	sub    esp,0x8
c000e635:	68 39 a9 02 c0       	push   0xc002a939
c000e63a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e63e:	e8 71 22 ff ff       	call   c00008b4 <strcmp>
c000e643:	83 c4 10             	add    esp,0x10
c000e646:	85 c0                	test   eax,eax
c000e648:	0f 94 c0             	sete   al
c000e64b:	84 c0                	test   al,al
c000e64d:	74 0a                	je     c000e659 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e64f:	b8 98 6f 02 c0       	mov    eax,0xc0026f98
c000e654:	e9 95 00 00 00       	jmp    c000e6ee <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e659:	83 ec 08             	sub    esp,0x8
c000e65c:	68 42 a9 02 c0       	push   0xc002a942
c000e661:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e665:	e8 4a 22 ff ff       	call   c00008b4 <strcmp>
c000e66a:	83 c4 10             	add    esp,0x10
c000e66d:	85 c0                	test   eax,eax
c000e66f:	0f 94 c0             	sete   al
c000e672:	84 c0                	test   al,al
c000e674:	74 07                	je     c000e67d <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e676:	b8 64 73 02 c0       	mov    eax,0xc0027364
c000e67b:	eb 71                	jmp    c000e6ee <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e67d:	83 ec 08             	sub    esp,0x8
c000e680:	68 4c a9 02 c0       	push   0xc002a94c
c000e685:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e689:	e8 26 22 ff ff       	call   c00008b4 <strcmp>
c000e68e:	83 c4 10             	add    esp,0x10
c000e691:	85 c0                	test   eax,eax
c000e693:	0f 94 c0             	sete   al
c000e696:	84 c0                	test   al,al
c000e698:	74 07                	je     c000e6a1 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e69a:	b8 e4 70 02 c0       	mov    eax,0xc00270e4
c000e69f:	eb 4d                	jmp    c000e6ee <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e6a1:	83 ec 08             	sub    esp,0x8
c000e6a4:	68 55 a9 02 c0       	push   0xc002a955
c000e6a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6ad:	e8 02 22 ff ff       	call   c00008b4 <strcmp>
c000e6b2:	83 c4 10             	add    esp,0x10
c000e6b5:	85 c0                	test   eax,eax
c000e6b7:	0f 94 c0             	sete   al
c000e6ba:	84 c0                	test   al,al
c000e6bc:	74 07                	je     c000e6c5 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e6be:	b8 ec ee 02 c0       	mov    eax,0xc002eeec
c000e6c3:	eb 29                	jmp    c000e6ee <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e6c5:	83 ec 08             	sub    esp,0x8
c000e6c8:	68 62 a9 02 c0       	push   0xc002a962
c000e6cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6d1:	e8 de 21 ff ff       	call   c00008b4 <strcmp>
c000e6d6:	83 c4 10             	add    esp,0x10
c000e6d9:	85 c0                	test   eax,eax
c000e6db:	0f 94 c0             	sete   al
c000e6de:	84 c0                	test   al,al
c000e6e0:	74 07                	je     c000e6e9 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e6e2:	b8 ed ee 02 c0       	mov    eax,0xc002eeed
c000e6e7:	eb 05                	jmp    c000e6ee <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e6e9:	b8 00 00 00 00       	mov    eax,0x0
c000e6ee:	83 c4 0c             	add    esp,0xc
c000e6f1:	c3                   	ret    

c000e6f2 <Computer::close(int, int, void*)>:
c000e6f2:	57                   	push   edi
c000e6f3:	56                   	push   esi
c000e6f4:	53                   	push   ebx
c000e6f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e6f9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e6fd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e701:	83 ec 0c             	sub    esp,0xc
c000e704:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e70a:	e8 57 5d 00 00       	call   c0014466 <Device::closeAll()>
c000e70f:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e715:	83 c4 10             	add    esp,0x10
c000e718:	8b 10                	mov    edx,DWORD PTR [eax]
c000e71a:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e71e:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e726:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e72a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e72e:	5b                   	pop    ebx
c000e72f:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e732:	5e                   	pop    esi
c000e733:	5f                   	pop    edi
c000e734:	ff e0                	jmp    eax

c000e736 <Krnl::firstTask()>:
c000e736:	53                   	push   ebx
c000e737:	83 ec 14             	sub    esp,0x14
c000e73a:	fb                   	sti    
c000e73b:	68 3f 07 00 00       	push   0x73f
c000e740:	e8 e9 11 00 00       	call   c000f92e <malloc>
c000e745:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e74c:	89 c3                	mov    ebx,eax
c000e74e:	ff 35 50 24 03 c0    	push   DWORD PTR ds:0xc0032450
c000e754:	68 6f a9 02 c0       	push   0xc002a96f
c000e759:	6a 01                	push   0x1
c000e75b:	50                   	push   eax
c000e75c:	e8 89 f9 00 00       	call   c001e0ea <Process::Process(bool, char const*, Process*, char**)>
c000e761:	83 c4 20             	add    esp,0x20
c000e764:	68 ff 00 00 00       	push   0xff
c000e769:	6a 00                	push   0x0
c000e76b:	68 c1 f2 00 c0       	push   0xc000f2c1
c000e770:	53                   	push   ebx
c000e771:	e8 6c fb 00 00       	call   c001e2e2 <Process::createThread(void (*)(void*), void*, int)>
c000e776:	6a 7a                	push   0x7a
c000e778:	6a 00                	push   0x0
c000e77a:	68 60 ed 01 c0       	push   0xc001ed60
c000e77f:	ff 35 50 24 03 c0    	push   DWORD PTR ds:0xc0032450
c000e785:	e8 58 fb 00 00       	call   c001e2e2 <Process::createThread(void (*)(void*), void*, int)>
c000e78a:	83 c4 20             	add    esp,0x20
c000e78d:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c000e792:	c6 05 ed ee 02 c0 01 	mov    BYTE PTR ds:0xc002eeed,0x1
c000e799:	e8 16 0a 01 00       	call   c001f1b4 <Vm::initialise8086()>
c000e79e:	e8 b5 4a 00 00       	call   c0013258 <Fs::initVFS()>
c000e7a3:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c000e7a8:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e7ae:	8b 10                	mov    edx,DWORD PTR [eax]
c000e7b0:	6a 00                	push   0x0
c000e7b2:	6a 00                	push   0x0
c000e7b4:	6a 00                	push   0x0
c000e7b6:	50                   	push   eax
c000e7b7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e7ba:	e8 ba e1 00 00       	call   c001c979 <Sys::loadSyscalls()>
c000e7bf:	e8 93 bf 00 00       	call   c001a757 <Krnl::loadSystemEnv()>
c000e7c4:	83 c4 0c             	add    esp,0xc
c000e7c7:	6a 3a                	push   0x3a
c000e7c9:	68 7c a9 02 c0       	push   0xc002a97c
c000e7ce:	68 85 a9 02 c0       	push   0xc002a985
c000e7d3:	e8 52 cd 00 00       	call   c001b52a <Reg::readIntWithDefault(char*, char*, int)>
c000e7d8:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7db:	e8 68 55 00 00       	call   c0013d48 <User::loadClockSettings(int)>
c000e7e0:	58                   	pop    eax
c000e7e1:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c000e7e6:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e7ec:	e8 49 5c 00 00       	call   c001443a <Device::loadDriversForAll()>
c000e7f1:	e8 a8 ba 00 00       	call   c001a29e <Krnl::startCPUs()>
c000e7f6:	5a                   	pop    edx
c000e7f7:	8b 1d e8 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eee8
c000e7fd:	59                   	pop    ecx
c000e7fe:	6a 01                	push   0x1
c000e800:	68 8d a9 02 c0       	push   0xc002a98d
c000e805:	e8 3e f3 00 00       	call   c001db48 <Thr::loadDLL(char const*, bool)>
c000e80a:	5a                   	pop    edx
c000e80b:	59                   	pop    ecx
c000e80c:	53                   	push   ebx
c000e80d:	50                   	push   eax
c000e80e:	e8 60 f5 00 00       	call   c001dd73 <Thr::executeDLL(unsigned long, void*)>
c000e813:	83 c4 10             	add    esp,0x10
c000e816:	83 ec 0c             	sub    esp,0xc
c000e819:	6a 02                	push   0x2
c000e81b:	e8 05 ff 00 00       	call   c001e725 <blockTask(TaskState)>
c000e820:	83 c4 10             	add    esp,0x10
c000e823:	eb f1                	jmp    c000e816 <Krnl::firstTask()+0xe0>
c000e825:	90                   	nop

c000e826 <Computer::Computer()>:
c000e826:	83 ec 0c             	sub    esp,0xc
c000e829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82d:	83 ec 08             	sub    esp,0x8
c000e830:	68 a9 a9 02 c0       	push   0xc002a9a9
c000e835:	50                   	push   eax
c000e836:	e8 a5 5c 00 00       	call   c00144e0 <Device::Device(char const*)>
c000e83b:	83 c4 10             	add    esp,0x10
c000e83e:	ba 48 ab 02 c0       	mov    edx,0xc002ab48
c000e843:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e847:	89 10                	mov    DWORD PTR [eax],edx
c000e849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e869:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e86f:	83 ca 04             	or     edx,0x4
c000e872:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e87c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e882:	0f b6 d0             	movzx  edx,al
c000e885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e889:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e894:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e89a:	0f b6 d0             	movzx  edx,al
c000e89d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a1:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e8a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8aa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b0:	8d 50 01             	lea    edx,[eax+0x1]
c000e8b3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8b7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8bd:	0f b6 d0             	movzx  edx,al
c000e8c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8c4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8c8:	83 e1 3f             	and    ecx,0x3f
c000e8cb:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8d9:	0f b6 d0             	movzx  edx,al
c000e8dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e0:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e8e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8eb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f1:	0f b6 d0             	movzx  edx,al
c000e8f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e901:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e907:	8d 50 01             	lea    edx,[eax+0x1]
c000e90a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e90e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e914:	0f b6 d0             	movzx  edx,al
c000e917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e91b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e91f:	83 e1 3f             	and    ecx,0x3f
c000e922:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e92a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e930:	0f b6 d0             	movzx  edx,al
c000e933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e937:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e93e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e942:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e948:	0f b6 d0             	movzx  edx,al
c000e94b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e94f:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e958:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e95e:	8d 50 01             	lea    edx,[eax+0x1]
c000e961:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e965:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e96b:	0f b6 d0             	movzx  edx,al
c000e96e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e972:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e976:	83 e1 3f             	and    ecx,0x3f
c000e979:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e97d:	90                   	nop
c000e97e:	83 c4 0c             	add    esp,0xc
c000e981:	c3                   	ret    

c000e982 <Computer::setBootMessage(char const*)>:
c000e982:	c3                   	ret    
c000e983:	90                   	nop

c000e984 <Computer::detectFeatures()>:
c000e984:	55                   	push   ebp
c000e985:	57                   	push   edi
c000e986:	56                   	push   esi
c000e987:	53                   	push   ebx
c000e988:	83 ec 1c             	sub    esp,0x1c
c000e98b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e98f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e999:	e8 46 19 ff ff       	call   c00002e4 <detectCPUID>
c000e99e:	85 c0                	test   eax,eax
c000e9a0:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9a6:	0f 95 c2             	setne  dl
c000e9a9:	83 e0 fd             	and    eax,0xfffffffd
c000e9ac:	d1 e2                	shl    edx,1
c000e9ae:	09 d0                	or     eax,edx
c000e9b0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9b6:	a8 02                	test   al,0x2
c000e9b8:	75 46                	jne    c000ea00 <Computer::detectFeatures()+0x7c>
c000e9ba:	f6 05 01 ef 02 c0 04 	test   BYTE PTR ds:0xc002ef01,0x4
c000e9c1:	74 07                	je     c000e9ca <Computer::detectFeatures()+0x46>
c000e9c3:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e9ca:	e8 57 85 01 00       	call   c0026f26 <x87Detect>
c000e9cf:	83 e0 01             	and    eax,0x1
c000e9d2:	c1 e0 04             	shl    eax,0x4
c000e9d5:	88 c2                	mov    dl,al
c000e9d7:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9dd:	83 e0 ef             	and    eax,0xffffffef
c000e9e0:	09 d0                	or     eax,edx
c000e9e2:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9e8:	a8 10                	test   al,0x10
c000e9ea:	0f 85 2a 01 00 00    	jne    c000eb1a <Computer::detectFeatures()+0x196>
c000e9f0:	84 c0                	test   al,al
c000e9f2:	0f 88 45 01 00 00    	js     c000eb3d <Computer::detectFeatures()+0x1b9>
c000e9f8:	83 c4 1c             	add    esp,0x1c
c000e9fb:	5b                   	pop    ebx
c000e9fc:	5e                   	pop    esi
c000e9fd:	5f                   	pop    edi
c000e9fe:	5d                   	pop    ebp
c000e9ff:	c3                   	ret    
c000ea00:	83 ec 0c             	sub    esp,0xc
c000ea03:	6a 20                	push   0x20
c000ea05:	e8 b2 a5 00 00       	call   c0018fbc <CPU::cpuidCheckEDX(unsigned int)>
c000ea0a:	83 e0 01             	and    eax,0x1
c000ea0d:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ea14:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea1a:	83 e0 f7             	and    eax,0xfffffff7
c000ea1d:	09 d0                	or     eax,edx
c000ea1f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea25:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000ea2c:	e8 8b a5 00 00       	call   c0018fbc <CPU::cpuidCheckEDX(unsigned int)>
c000ea31:	83 e0 01             	and    eax,0x1
c000ea34:	88 c2                	mov    dl,al
c000ea36:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea3c:	83 e0 fe             	and    eax,0xfffffffe
c000ea3f:	09 d0                	or     eax,edx
c000ea41:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea47:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000ea4e:	e8 69 a5 00 00       	call   c0018fbc <CPU::cpuidCheckEDX(unsigned int)>
c000ea53:	c1 e0 07             	shl    eax,0x7
c000ea56:	88 c2                	mov    dl,al
c000ea58:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea5e:	83 e0 7f             	and    eax,0x7f
c000ea61:	09 d0                	or     eax,edx
c000ea63:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea69:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea70:	e8 47 a5 00 00       	call   c0018fbc <CPU::cpuidCheckEDX(unsigned int)>
c000ea75:	83 c4 10             	add    esp,0x10
c000ea78:	83 e0 01             	and    eax,0x1
c000ea7b:	c1 e0 05             	shl    eax,0x5
c000ea7e:	88 c2                	mov    dl,al
c000ea80:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea86:	83 e0 df             	and    eax,0xffffffdf
c000ea89:	09 d0                	or     eax,edx
c000ea8b:	f7 05 00 ef 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002ef00,0x401
c000ea95:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9b:	0f 84 c2 00 00 00    	je     c000eb63 <Computer::detectFeatures()+0x1df>
c000eaa1:	83 e0 fe             	and    eax,0xfffffffe
c000eaa4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eaaa:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eab0:	88 c2                	mov    dl,al
c000eab2:	83 e2 09             	and    edx,0x9
c000eab5:	fe ca                	dec    dl
c000eab7:	75 09                	jne    c000eac2 <Computer::detectFeatures()+0x13e>
c000eab9:	83 e0 fe             	and    eax,0xfffffffe
c000eabc:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eac2:	83 ec 0c             	sub    esp,0xc
c000eac5:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eac9:	50                   	push   eax
c000eaca:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000eace:	55                   	push   ebp
c000eacf:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ead3:	57                   	push   edi
c000ead4:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ead8:	56                   	push   esi
c000ead9:	68 00 00 00 80       	push   0x80000000
c000eade:	e8 55 a4 00 00       	call   c0018f38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eae3:	83 c4 20             	add    esp,0x20
c000eae6:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000eaed:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaf1:	0f 86 c3 fe ff ff    	jbe    c000e9ba <Computer::detectFeatures()+0x36>
c000eaf7:	83 ec 0c             	sub    esp,0xc
c000eafa:	50                   	push   eax
c000eafb:	55                   	push   ebp
c000eafc:	57                   	push   edi
c000eafd:	56                   	push   esi
c000eafe:	68 01 00 00 80       	push   0x80000001
c000eb03:	e8 30 a4 00 00       	call   c0018f38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eb08:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eb12:	83 c4 20             	add    esp,0x20
c000eb15:	e9 a0 fe ff ff       	jmp    c000e9ba <Computer::detectFeatures()+0x36>
c000eb1a:	e8 c1 83 01 00       	call   c0026ee0 <absolutelyNoChanceInHell>
c000eb1f:	88 c2                	mov    dl,al
c000eb21:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb27:	c1 e2 07             	shl    edx,0x7
c000eb2a:	83 e0 7f             	and    eax,0x7f
c000eb2d:	09 d0                	or     eax,edx
c000eb2f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb35:	84 c0                	test   al,al
c000eb37:	0f 89 bb fe ff ff    	jns    c000e9f8 <Computer::detectFeatures()+0x74>
c000eb3d:	e8 7e 83 01 00       	call   c0026ec0 <avxDetect>
c000eb42:	83 e0 01             	and    eax,0x1
c000eb45:	c1 e0 05             	shl    eax,0x5
c000eb48:	88 c2                	mov    dl,al
c000eb4a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb50:	83 e0 df             	and    eax,0xffffffdf
c000eb53:	09 d0                	or     eax,edx
c000eb55:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb5b:	83 c4 1c             	add    esp,0x1c
c000eb5e:	5b                   	pop    ebx
c000eb5f:	5e                   	pop    esi
c000eb60:	5f                   	pop    edi
c000eb61:	5d                   	pop    ebp
c000eb62:	c3                   	ret    
c000eb63:	83 ec 0c             	sub    esp,0xc
c000eb66:	68 00 02 00 00       	push   0x200
c000eb6b:	e8 4c a4 00 00       	call   c0018fbc <CPU::cpuidCheckEDX(unsigned int)>
c000eb70:	83 c4 10             	add    esp,0x10
c000eb73:	83 e0 01             	and    eax,0x1
c000eb76:	88 c2                	mov    dl,al
c000eb78:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb7e:	83 e0 fe             	and    eax,0xfffffffe
c000eb81:	09 d0                	or     eax,edx
c000eb83:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb89:	e9 1c ff ff ff       	jmp    c000eaaa <Computer::detectFeatures()+0x126>

c000eb8e <Computer::displayFeatures()>:
c000eb8e:	53                   	push   ebx
c000eb8f:	83 ec 14             	sub    esp,0x14
c000eb92:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb96:	68 b9 a9 02 c0       	push   0xc002a9b9
c000eb9b:	e8 2d 43 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c000eba0:	83 c4 10             	add    esp,0x10
c000eba3:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000ebaa:	0f 85 73 02 00 00    	jne    c000ee23 <Computer::displayFeatures()+0x295>
c000ebb0:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c000ebb5:	83 ec 08             	sub    esp,0x8
c000ebb8:	50                   	push   eax
c000ebb9:	68 cc a9 02 c0       	push   0xc002a9cc
c000ebbe:	e8 0a 43 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c000ebc3:	83 c4 10             	add    esp,0x10
c000ebc6:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000ebcd:	0f 85 8c 02 00 00    	jne    c000ee5f <Computer::displayFeatures()+0x2d1>
c000ebd3:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c000ebd8:	83 ec 08             	sub    esp,0x8
c000ebdb:	50                   	push   eax
c000ebdc:	68 dd a9 02 c0       	push   0xc002a9dd
c000ebe1:	e8 e7 42 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c000ebe6:	83 c4 10             	add    esp,0x10
c000ebe9:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000ebf0:	0f 85 5f 02 00 00    	jne    c000ee55 <Computer::displayFeatures()+0x2c7>
c000ebf6:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c000ebfb:	83 ec 08             	sub    esp,0x8
c000ebfe:	50                   	push   eax
c000ebff:	68 ee a9 02 c0       	push   0xc002a9ee
c000ec04:	e8 c4 42 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c000ec09:	83 c4 10             	add    esp,0x10
c000ec0c:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000ec13:	0f 85 32 02 00 00    	jne    c000ee4b <Computer::displayFeatures()+0x2bd>
c000ec19:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c000ec1e:	83 ec 08             	sub    esp,0x8
c000ec21:	50                   	push   eax
c000ec22:	68 ff a9 02 c0       	push   0xc002a9ff
c000ec27:	e8 a1 42 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c000ec2c:	83 c4 10             	add    esp,0x10
c000ec2f:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000ec36:	0f 85 05 02 00 00    	jne    c000ee41 <Computer::displayFeatures()+0x2b3>
c000ec3c:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c000ec41:	83 ec 08             	sub    esp,0x8
c000ec44:	50                   	push   eax
c000ec45:	68 10 aa 02 c0       	push   0xc002aa10
c000ec4a:	e8 7e 42 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c000ec4f:	83 c4 10             	add    esp,0x10
c000ec52:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ec59:	0f 85 d8 01 00 00    	jne    c000ee37 <Computer::displayFeatures()+0x2a9>
c000ec5f:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c000ec64:	83 ec 08             	sub    esp,0x8
c000ec67:	50                   	push   eax
c000ec68:	68 21 aa 02 c0       	push   0xc002aa21
c000ec6d:	e8 5b 42 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c000ec72:	83 c4 10             	add    esp,0x10
c000ec75:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ec7c:	0f 85 ab 01 00 00    	jne    c000ee2d <Computer::displayFeatures()+0x29f>
c000ec82:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c000ec87:	83 ec 08             	sub    esp,0x8
c000ec8a:	50                   	push   eax
c000ec8b:	68 32 aa 02 c0       	push   0xc002aa32
c000ec90:	e8 38 42 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c000ec95:	83 c4 10             	add    esp,0x10
c000ec98:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ec9f:	0f 88 1b 02 00 00    	js     c000eec0 <Computer::displayFeatures()+0x332>
c000eca5:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c000ecaa:	83 ec 08             	sub    esp,0x8
c000ecad:	50                   	push   eax
c000ecae:	68 43 aa 02 c0       	push   0xc002aa43
c000ecb3:	e8 15 42 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c000ecb8:	83 c4 10             	add    esp,0x10
c000ecbb:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ecc2:	0f 85 a1 01 00 00    	jne    c000ee69 <Computer::displayFeatures()+0x2db>
c000ecc8:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c000eccd:	83 ec 08             	sub    esp,0x8
c000ecd0:	50                   	push   eax
c000ecd1:	68 54 aa 02 c0       	push   0xc002aa54
c000ecd6:	e8 f2 41 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c000ecdb:	83 c4 10             	add    esp,0x10
c000ecde:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ece5:	0f 85 cb 01 00 00    	jne    c000eeb6 <Computer::displayFeatures()+0x328>
c000eceb:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c000ecf0:	83 ec 08             	sub    esp,0x8
c000ecf3:	50                   	push   eax
c000ecf4:	68 65 aa 02 c0       	push   0xc002aa65
c000ecf9:	e8 cf 41 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c000ecfe:	83 c4 10             	add    esp,0x10
c000ed01:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ed08:	0f 85 9e 01 00 00    	jne    c000eeac <Computer::displayFeatures()+0x31e>
c000ed0e:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c000ed13:	83 ec 08             	sub    esp,0x8
c000ed16:	50                   	push   eax
c000ed17:	68 76 aa 02 c0       	push   0xc002aa76
c000ed1c:	e8 ac 41 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c000ed21:	83 c4 10             	add    esp,0x10
c000ed24:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ed2b:	0f 85 71 01 00 00    	jne    c000eea2 <Computer::displayFeatures()+0x314>
c000ed31:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c000ed36:	83 ec 08             	sub    esp,0x8
c000ed39:	50                   	push   eax
c000ed3a:	68 87 aa 02 c0       	push   0xc002aa87
c000ed3f:	e8 89 41 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c000ed44:	83 c4 10             	add    esp,0x10
c000ed47:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ed4e:	0f 85 44 01 00 00    	jne    c000ee98 <Computer::displayFeatures()+0x30a>
c000ed54:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c000ed59:	83 ec 08             	sub    esp,0x8
c000ed5c:	50                   	push   eax
c000ed5d:	68 98 aa 02 c0       	push   0xc002aa98
c000ed62:	e8 66 41 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c000ed67:	83 c4 10             	add    esp,0x10
c000ed6a:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ed71:	0f 85 17 01 00 00    	jne    c000ee8e <Computer::displayFeatures()+0x300>
c000ed77:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c000ed7c:	83 ec 08             	sub    esp,0x8
c000ed7f:	50                   	push   eax
c000ed80:	68 a9 aa 02 c0       	push   0xc002aaa9
c000ed85:	e8 43 41 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c000ed8a:	83 c4 10             	add    esp,0x10
c000ed8d:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ed94:	0f 85 ea 00 00 00    	jne    c000ee84 <Computer::displayFeatures()+0x2f6>
c000ed9a:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c000ed9f:	83 ec 08             	sub    esp,0x8
c000eda2:	50                   	push   eax
c000eda3:	68 ba aa 02 c0       	push   0xc002aaba
c000eda8:	e8 20 41 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c000edad:	83 c4 10             	add    esp,0x10
c000edb0:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000edb7:	0f 88 0d 01 00 00    	js     c000eeca <Computer::displayFeatures()+0x33c>
c000edbd:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c000edc2:	83 ec 08             	sub    esp,0x8
c000edc5:	50                   	push   eax
c000edc6:	68 cb aa 02 c0       	push   0xc002aacb
c000edcb:	e8 fd 40 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c000edd0:	83 c4 10             	add    esp,0x10
c000edd3:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000edda:	0f 85 9a 00 00 00    	jne    c000ee7a <Computer::displayFeatures()+0x2ec>
c000ede0:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c000ede5:	83 ec 08             	sub    esp,0x8
c000ede8:	50                   	push   eax
c000ede9:	68 dc aa 02 c0       	push   0xc002aadc
c000edee:	e8 da 40 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c000edf3:	83 c4 10             	add    esp,0x10
c000edf6:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000edfd:	75 74                	jne    c000ee73 <Computer::displayFeatures()+0x2e5>
c000edff:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c000ee04:	83 ec 08             	sub    esp,0x8
c000ee07:	50                   	push   eax
c000ee08:	68 ed aa 02 c0       	push   0xc002aaed
c000ee0d:	e8 bb 40 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c000ee12:	c7 44 24 20 54 c5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c554
c000ee1a:	83 c4 18             	add    esp,0x18
c000ee1d:	5b                   	pop    ebx
c000ee1e:	e9 aa 40 00 00       	jmp    c0012ecd <Dbg::kprintf(char const*, ...)>
c000ee23:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c000ee28:	e9 88 fd ff ff       	jmp    c000ebb5 <Computer::displayFeatures()+0x27>
c000ee2d:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c000ee32:	e9 50 fe ff ff       	jmp    c000ec87 <Computer::displayFeatures()+0xf9>
c000ee37:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c000ee3c:	e9 23 fe ff ff       	jmp    c000ec64 <Computer::displayFeatures()+0xd6>
c000ee41:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c000ee46:	e9 f6 fd ff ff       	jmp    c000ec41 <Computer::displayFeatures()+0xb3>
c000ee4b:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c000ee50:	e9 c9 fd ff ff       	jmp    c000ec1e <Computer::displayFeatures()+0x90>
c000ee55:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c000ee5a:	e9 9c fd ff ff       	jmp    c000ebfb <Computer::displayFeatures()+0x6d>
c000ee5f:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c000ee64:	e9 6f fd ff ff       	jmp    c000ebd8 <Computer::displayFeatures()+0x4a>
c000ee69:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c000ee6e:	e9 5a fe ff ff       	jmp    c000eccd <Computer::displayFeatures()+0x13f>
c000ee73:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c000ee78:	eb 8a                	jmp    c000ee04 <Computer::displayFeatures()+0x276>
c000ee7a:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c000ee7f:	e9 61 ff ff ff       	jmp    c000ede5 <Computer::displayFeatures()+0x257>
c000ee84:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c000ee89:	e9 11 ff ff ff       	jmp    c000ed9f <Computer::displayFeatures()+0x211>
c000ee8e:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c000ee93:	e9 e4 fe ff ff       	jmp    c000ed7c <Computer::displayFeatures()+0x1ee>
c000ee98:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c000ee9d:	e9 b7 fe ff ff       	jmp    c000ed59 <Computer::displayFeatures()+0x1cb>
c000eea2:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c000eea7:	e9 8a fe ff ff       	jmp    c000ed36 <Computer::displayFeatures()+0x1a8>
c000eeac:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c000eeb1:	e9 5d fe ff ff       	jmp    c000ed13 <Computer::displayFeatures()+0x185>
c000eeb6:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c000eebb:	e9 30 fe ff ff       	jmp    c000ecf0 <Computer::displayFeatures()+0x162>
c000eec0:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c000eec5:	e9 e0 fd ff ff       	jmp    c000ecaa <Computer::displayFeatures()+0x11c>
c000eeca:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c000eecf:	e9 ee fe ff ff       	jmp    c000edc2 <Computer::displayFeatures()+0x234>

c000eed4 <Computer::rdmsr(unsigned int)>:
c000eed4:	83 ec 0c             	sub    esp,0xc
c000eed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eedb:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eee2:	74 0a                	je     c000eeee <Computer::rdmsr(unsigned int)+0x1a>
c000eee4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eee8:	0f 32                	rdmsr  
c000eeea:	83 c4 0c             	add    esp,0xc
c000eeed:	c3                   	ret    
c000eeee:	83 ec 0c             	sub    esp,0xc
c000eef1:	68 fe aa 02 c0       	push   0xc002aafe
c000eef6:	e8 95 b9 00 00       	call   c001a890 <Krnl::panic(char const*)>
c000eefb:	83 c4 10             	add    esp,0x10
c000eefe:	eb e4                	jmp    c000eee4 <Computer::rdmsr(unsigned int)+0x10>

c000ef00 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ef00:	57                   	push   edi
c000ef01:	56                   	push   esi
c000ef02:	52                   	push   edx
c000ef03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef07:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ef0b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ef0f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef16:	74 0e                	je     c000ef26 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ef18:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ef1c:	89 f0                	mov    eax,esi
c000ef1e:	89 fa                	mov    edx,edi
c000ef20:	0f 30                	wrmsr  
c000ef22:	58                   	pop    eax
c000ef23:	5e                   	pop    esi
c000ef24:	5f                   	pop    edi
c000ef25:	c3                   	ret    
c000ef26:	83 ec 0c             	sub    esp,0xc
c000ef29:	68 04 ab 02 c0       	push   0xc002ab04
c000ef2e:	e8 5d b9 00 00       	call   c001a890 <Krnl::panic(char const*)>
c000ef33:	83 c4 10             	add    esp,0x10
c000ef36:	eb e0                	jmp    c000ef18 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ef38 <Computer::nmiEnabled()>:
c000ef38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef3c:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ef42:	c3                   	ret    
c000ef43:	90                   	nop

c000ef44 <Computer::readCMOS(unsigned char)>:
c000ef44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef48:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef4f:	19 c0                	sbb    eax,eax
c000ef51:	83 e0 80             	and    eax,0xffffff80
c000ef54:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef58:	e6 70                	out    0x70,al
c000ef5a:	e4 71                	in     al,0x71
c000ef5c:	c3                   	ret    
c000ef5d:	90                   	nop

c000ef5e <Computer::enableNMI(bool)>:
c000ef5e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef66:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ef6c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ef74:	eb ce                	jmp    c000ef44 <Computer::readCMOS(unsigned char)>

c000ef76 <Computer::open(int, int, void*)>:
c000ef76:	56                   	push   esi
c000ef77:	53                   	push   ebx
c000ef78:	83 ec 10             	sub    esp,0x10
c000ef7b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ef7f:	f6 05 00 ef 02 c0 04 	test   BYTE PTR ds:0xc002ef00,0x4
c000ef86:	68 68 12 00 00       	push   0x1268
c000ef8b:	0f 94 05 24 de 02 c0 	sete   BYTE PTR ds:0xc002de24
c000ef92:	e8 97 09 00 00       	call   c000f92e <malloc>
c000ef97:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef9a:	89 c6                	mov    esi,eax
c000ef9c:	e8 9f 93 00 00       	call   c0018340 <ACPI::ACPI()>
c000efa1:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000efa7:	58                   	pop    eax
c000efa8:	5a                   	pop    edx
c000efa9:	56                   	push   esi
c000efaa:	53                   	push   ebx
c000efab:	e8 40 53 00 00       	call   c00142f0 <Device::addChild(Device*)>
c000efb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000efb3:	e8 cc f9 ff ff       	call   c000e984 <Computer::detectFeatures()>
c000efb8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000efbb:	e8 ce fb ff ff       	call   c000eb8e <Computer::displayFeatures()>
c000efc0:	59                   	pop    ecx
c000efc1:	5e                   	pop    esi
c000efc2:	6a 01                	push   0x1
c000efc4:	53                   	push   ebx
c000efc5:	e8 94 ff ff ff       	call   c000ef5e <Computer::enableNMI(bool)>
c000efca:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000efd1:	e8 58 09 00 00       	call   c000f92e <malloc>
c000efd6:	89 04 24             	mov    DWORD PTR [esp],eax
c000efd9:	89 c6                	mov    esi,eax
c000efdb:	e8 94 a0 00 00       	call   c0019074 <CPU::CPU()>
c000efe0:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000efe6:	58                   	pop    eax
c000efe7:	5a                   	pop    edx
c000efe8:	56                   	push   esi
c000efe9:	53                   	push   ebx
c000efea:	e8 01 53 00 00       	call   c00142f0 <Device::addChild(Device*)>
c000efef:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eff5:	8b 10                	mov    edx,DWORD PTR [eax]
c000eff7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000effb:	6a 00                	push   0x0
c000effd:	6a 00                	push   0x0
c000efff:	50                   	push   eax
c000f000:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000f003:	83 c4 20             	add    esp,0x20
c000f006:	e8 79 58 00 00       	call   c0014884 <setupFPU()>
c000f00b:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000f011:	85 c0                	test   eax,eax
c000f013:	74 1f                	je     c000f034 <Computer::open(int, int, void*)+0xbe>
c000f015:	83 ec 08             	sub    esp,0x8
c000f018:	50                   	push   eax
c000f019:	53                   	push   ebx
c000f01a:	e8 d1 52 00 00       	call   c00142f0 <Device::addChild(Device*)>
c000f01f:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000f025:	8b 10                	mov    edx,DWORD PTR [eax]
c000f027:	6a 00                	push   0x0
c000f029:	6a 00                	push   0x0
c000f02b:	6a 00                	push   0x0
c000f02d:	50                   	push   eax
c000f02e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000f031:	83 c4 20             	add    esp,0x20
c000f034:	83 ec 0c             	sub    esp,0xc
c000f037:	68 36 e7 00 c0       	push   0xc000e736
c000f03c:	e8 c3 f3 00 00       	call   c001e404 <setupMultitasking(void (*)())>
c000f041:	83 c4 14             	add    esp,0x14
c000f044:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f049:	5b                   	pop    ebx
c000f04a:	5e                   	pop    esi
c000f04b:	c3                   	ret    

c000f04c <Computer::disableNMI()>:
c000f04c:	6a 00                	push   0x0
c000f04e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000f052:	e8 07 ff ff ff       	call   c000ef5e <Computer::enableNMI(bool)>
c000f057:	58                   	pop    eax
c000f058:	5a                   	pop    edx
c000f059:	c3                   	ret    

c000f05a <Computer::writeCMOS(unsigned char, unsigned char)>:
c000f05a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05e:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000f065:	19 c0                	sbb    eax,eax
c000f067:	83 e0 80             	and    eax,0xffffff80
c000f06a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000f06e:	e6 70                	out    0x70,al
c000f070:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f074:	e6 71                	out    0x71,al
c000f076:	c3                   	ret    
c000f077:	90                   	nop

c000f078 <Computer::handleNMI()>:
c000f078:	56                   	push   esi
c000f079:	53                   	push   ebx
c000f07a:	83 ec 10             	sub    esp,0x10
c000f07d:	e4 92                	in     al,0x92
c000f07f:	89 c6                	mov    esi,eax
c000f081:	e4 61                	in     al,0x61
c000f083:	68 0a ab 02 c0       	push   0xc002ab0a
c000f088:	88 c3                	mov    bl,al
c000f08a:	e8 3e 3e 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c000f08f:	83 c4 10             	add    esp,0x10
c000f092:	83 e6 10             	and    esi,0x10
c000f095:	75 0d                	jne    c000f0a4 <Computer::handleNMI()+0x2c>
c000f097:	f6 c3 40             	test   bl,0x40
c000f09a:	75 1d                	jne    c000f0b9 <Computer::handleNMI()+0x41>
c000f09c:	84 db                	test   bl,bl
c000f09e:	78 2d                	js     c000f0cd <Computer::handleNMI()+0x55>
c000f0a0:	58                   	pop    eax
c000f0a1:	5b                   	pop    ebx
c000f0a2:	5e                   	pop    esi
c000f0a3:	c3                   	ret    
c000f0a4:	83 ec 0c             	sub    esp,0xc
c000f0a7:	68 1b ab 02 c0       	push   0xc002ab1b
c000f0ac:	e8 df b7 00 00       	call   c001a890 <Krnl::panic(char const*)>
c000f0b1:	83 c4 10             	add    esp,0x10
c000f0b4:	f6 c3 40             	test   bl,0x40
c000f0b7:	74 e3                	je     c000f09c <Computer::handleNMI()+0x24>
c000f0b9:	83 ec 0c             	sub    esp,0xc
c000f0bc:	68 28 ab 02 c0       	push   0xc002ab28
c000f0c1:	e8 ca b7 00 00       	call   c001a890 <Krnl::panic(char const*)>
c000f0c6:	83 c4 10             	add    esp,0x10
c000f0c9:	84 db                	test   bl,bl
c000f0cb:	79 d3                	jns    c000f0a0 <Computer::handleNMI()+0x28>
c000f0cd:	c7 44 24 10 32 ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ab32
c000f0d5:	5a                   	pop    edx
c000f0d6:	5b                   	pop    ebx
c000f0d7:	5e                   	pop    esi
c000f0d8:	e9 b3 b7 00 00       	jmp    c001a890 <Krnl::panic(char const*)>
c000f0dd:	90                   	nop

c000f0de <Computer::setDiskActivityLight(int, bool)>:
c000f0de:	56                   	push   esi
c000f0df:	53                   	push   ebx
c000f0e0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f0e4:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f0e9:	77 1b                	ja     c000f106 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f0eb:	e4 92                	in     al,0x92
c000f0ed:	bb 40 00 00 00       	mov    ebx,0x40
c000f0f2:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f0f6:	89 da                	mov    edx,ebx
c000f0f8:	d3 e2                	shl    edx,cl
c000f0fa:	89 f1                	mov    ecx,esi
c000f0fc:	f7 d2                	not    edx
c000f0fe:	d3 e3                	shl    ebx,cl
c000f100:	21 d0                	and    eax,edx
c000f102:	09 d8                	or     eax,ebx
c000f104:	e6 92                	out    0x92,al
c000f106:	5b                   	pop    ebx
c000f107:	5e                   	pop    esi
c000f108:	c3                   	ret    
c000f109:	90                   	nop

c000f10a <GDTEntry::setBase(unsigned int)>:
c000f10a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f10e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f112:	89 c1                	mov    ecx,eax
c000f114:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f118:	c1 e9 10             	shr    ecx,0x10
c000f11b:	c1 e8 18             	shr    eax,0x18
c000f11e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f121:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f124:	c3                   	ret    
c000f125:	90                   	nop

c000f126 <GDTEntry::setLimit(unsigned int)>:
c000f126:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f12a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f12e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f131:	66 89 01             	mov    WORD PTR [ecx],ax
c000f134:	83 e2 f0             	and    edx,0xfffffff0
c000f137:	c1 e8 10             	shr    eax,0x10
c000f13a:	83 e0 0f             	and    eax,0xf
c000f13d:	09 d0                	or     eax,edx
c000f13f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f142:	c3                   	ret    
c000f143:	90                   	nop

c000f144 <GDT::GDT()>:
c000f144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f148:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f14e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f152:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f158:	90                   	nop
c000f159:	c3                   	ret    

c000f15a <GDT::addEntry(GDTEntry)>:
c000f15a:	53                   	push   ebx
c000f15b:	83 ec 0c             	sub    esp,0xc
c000f15e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f162:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f164:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f16b:	52                   	push   edx
c000f16c:	50                   	push   eax
c000f16d:	68 6c ab 02 c0       	push   0xc002ab6c
c000f172:	e8 56 3d 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c000f177:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f179:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f17d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f181:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f185:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f189:	8d 50 01             	lea    edx,[eax+0x1]
c000f18c:	c1 e0 03             	shl    eax,0x3
c000f18f:	89 13                	mov    DWORD PTR [ebx],edx
c000f191:	83 c4 18             	add    esp,0x18
c000f194:	5b                   	pop    ebx
c000f195:	c3                   	ret    

c000f196 <GDT::getNumberOfEntries()>:
c000f196:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f19a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f19c:	c3                   	ret    
c000f19d:	90                   	nop

c000f19e <GDT::flush()>:
c000f19e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f1a2:	8b 10                	mov    edx,DWORD PTR [eax]
c000f1a4:	83 c0 04             	add    eax,0x4
c000f1a7:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f1ae:	a3 f2 ee 02 c0       	mov    ds:0xc002eef2,eax
c000f1b3:	66 89 15 f0 ee 02 c0 	mov    WORD PTR ds:0xc002eef0,dx
c000f1ba:	e9 91 12 ff ff       	jmp    c0000450 <loadGDT>
c000f1bf:	90                   	nop

c000f1c0 <GDT::setup()>:
c000f1c0:	55                   	push   ebp
c000f1c1:	57                   	push   edi
c000f1c2:	56                   	push   esi
c000f1c3:	53                   	push   ebx
c000f1c4:	83 ec 3c             	sub    esp,0x3c
c000f1c7:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f1cb:	6a 00                	push   0x0
c000f1cd:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f1d1:	53                   	push   ebx
c000f1d2:	e8 33 ff ff ff       	call   c000f10a <GDTEntry::setBase(unsigned int)>
c000f1d7:	6a 00                	push   0x0
c000f1d9:	53                   	push   ebx
c000f1da:	e8 47 ff ff ff       	call   c000f126 <GDTEntry::setLimit(unsigned int)>
c000f1df:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f1e7:	6a 00                	push   0x0
c000f1e9:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f1ed:	53                   	push   ebx
c000f1ee:	e8 17 ff ff ff       	call   c000f10a <GDTEntry::setBase(unsigned int)>
c000f1f3:	68 ff ff ff 00       	push   0xffffff
c000f1f8:	53                   	push   ebx
c000f1f9:	e8 28 ff ff ff       	call   c000f126 <GDTEntry::setLimit(unsigned int)>
c000f1fe:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f202:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f207:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f20c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f210:	83 c4 20             	add    esp,0x20
c000f213:	6a 00                	push   0x0
c000f215:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f219:	53                   	push   ebx
c000f21a:	e8 eb fe ff ff       	call   c000f10a <GDTEntry::setBase(unsigned int)>
c000f21f:	68 ff ff ff 00       	push   0xffffff
c000f224:	53                   	push   ebx
c000f225:	e8 fc fe ff ff       	call   c000f126 <GDTEntry::setLimit(unsigned int)>
c000f22a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f22e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f232:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f236:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f23a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f23e:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f243:	0d 00 92 c0 00       	or     eax,0xc09200
c000f248:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f24c:	89 d8                	mov    eax,ebx
c000f24e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f252:	80 cc 60             	or     ah,0x60
c000f255:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f259:	83 c4 0c             	add    esp,0xc
c000f25c:	89 f8                	mov    eax,edi
c000f25e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f262:	80 cc 60             	or     ah,0x60
c000f265:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f269:	89 c7                	mov    edi,eax
c000f26b:	55                   	push   ebp
c000f26c:	e8 e9 fe ff ff       	call   c000f15a <GDT::addEntry(GDTEntry)>
c000f271:	83 c4 0c             	add    esp,0xc
c000f274:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f278:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f27c:	55                   	push   ebp
c000f27d:	e8 d8 fe ff ff       	call   c000f15a <GDT::addEntry(GDTEntry)>
c000f282:	83 c4 0c             	add    esp,0xc
c000f285:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f289:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f28d:	55                   	push   ebp
c000f28e:	e8 c7 fe ff ff       	call   c000f15a <GDT::addEntry(GDTEntry)>
c000f293:	83 c4 0c             	add    esp,0xc
c000f296:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f29a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f29e:	53                   	push   ebx
c000f29f:	51                   	push   ecx
c000f2a0:	55                   	push   ebp
c000f2a1:	e8 b4 fe ff ff       	call   c000f15a <GDT::addEntry(GDTEntry)>
c000f2a6:	83 c4 0c             	add    esp,0xc
c000f2a9:	57                   	push   edi
c000f2aa:	56                   	push   esi
c000f2ab:	55                   	push   ebp
c000f2ac:	e8 a9 fe ff ff       	call   c000f15a <GDT::addEntry(GDTEntry)>
c000f2b1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f2b4:	e8 e5 fe ff ff       	call   c000f19e <GDT::flush()>
c000f2b9:	83 c4 4c             	add    esp,0x4c
c000f2bc:	5b                   	pop    ebx
c000f2bd:	5e                   	pop    esi
c000f2be:	5f                   	pop    edi
c000f2bf:	5d                   	pop    ebp
c000f2c0:	c3                   	ret    

c000f2c1 <idleFunction(void*)>:
c000f2c1:	53                   	push   ebx
c000f2c2:	83 ec 08             	sub    esp,0x8
c000f2c5:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c000f2ca:	48                   	dec    eax
c000f2cb:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c000f2d0:	75 01                	jne    c000f2d3 <idleFunction(void*)+0x12>
c000f2d2:	fb                   	sti    
c000f2d3:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c000f2d8:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f2de:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f2e5:	74 3c                	je     c000f323 <idleFunction(void*)+0x62>
c000f2e7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f2ee:	74 33                	je     c000f323 <idleFunction(void*)+0x62>
c000f2f0:	31 db                	xor    ebx,ebx
c000f2f2:	52                   	push   edx
c000f2f3:	52                   	push   edx
c000f2f4:	68 e1 00 00 00       	push   0xe1
c000f2f9:	50                   	push   eax
c000f2fa:	e8 d5 fb ff ff       	call   c000eed4 <Computer::rdmsr(unsigned int)>
c000f2ff:	53                   	push   ebx
c000f300:	83 e0 02             	and    eax,0x2
c000f303:	50                   	push   eax
c000f304:	68 e1 00 00 00       	push   0xe1
c000f309:	ff 35 e8 ee 02 c0    	push   DWORD PTR ds:0xc002eee8
c000f30f:	e8 ec fb ff ff       	call   c000ef00 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f314:	83 c4 20             	add    esp,0x20
c000f317:	e8 63 0f ff ff       	call   c000027f <doTPAUSE>
c000f31c:	e8 4f 9c 01 00       	call   c0028f70 <idleCommon()>
c000f321:	eb f4                	jmp    c000f317 <idleFunction(void*)+0x56>
c000f323:	fb                   	sti    
c000f324:	f4                   	hlt    
c000f325:	e8 46 9c 01 00       	call   c0028f70 <idleCommon()>
c000f32a:	eb f7                	jmp    c000f323 <idleFunction(void*)+0x62>

c000f32c <IDTEntry::IDTEntry(bool)>:
c000f32c:	83 ec 04             	sub    esp,0x4
c000f32f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f333:	88 04 24             	mov    BYTE PTR [esp],al
c000f336:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f33a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f340:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f344:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f348:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f34c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f34f:	83 e2 f0             	and    edx,0xfffffff0
c000f352:	83 ca 0e             	or     edx,0xe
c000f355:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f358:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f35c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f35f:	83 e2 ef             	and    edx,0xffffffef
c000f362:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f365:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f369:	74 04                	je     c000f36f <IDTEntry::IDTEntry(bool)+0x43>
c000f36b:	b2 03                	mov    dl,0x3
c000f36d:	eb 02                	jmp    c000f371 <IDTEntry::IDTEntry(bool)+0x45>
c000f36f:	b2 00                	mov    dl,0x0
c000f371:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f375:	83 e2 03             	and    edx,0x3
c000f378:	88 d1                	mov    cl,dl
c000f37a:	c1 e1 05             	shl    ecx,0x5
c000f37d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f380:	83 e2 9f             	and    edx,0xffffff9f
c000f383:	09 ca                	or     edx,ecx
c000f385:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f388:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f38c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f38f:	83 ca 80             	or     edx,0xffffff80
c000f392:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f395:	90                   	nop
c000f396:	83 c4 04             	add    esp,0x4
c000f399:	c3                   	ret    

c000f39a <IDTEntry::setOffset(unsigned int)>:
c000f39a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f39e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3a2:	66 89 02             	mov    WORD PTR [edx],ax
c000f3a5:	c1 e8 10             	shr    eax,0x10
c000f3a8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f3ac:	c3                   	ret    
c000f3ad:	90                   	nop

c000f3ae <IDT::IDT()>:
c000f3ae:	90                   	nop
c000f3af:	c3                   	ret    

c000f3b0 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f3b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f3b4:	83 c0 30             	add    eax,0x30
c000f3b7:	c3                   	ret    

c000f3b8 <IDT::addEntry(IDTEntry, int)>:
c000f3b8:	53                   	push   ebx
c000f3b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f3c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f3c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f3c9:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f3cc:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f3d0:	5b                   	pop    ebx
c000f3d1:	c3                   	ret    

c000f3d2 <IDT::addEntry(int, void (*)(), bool)>:
c000f3d2:	53                   	push   ebx
c000f3d3:	83 ec 10             	sub    esp,0x10
c000f3d6:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f3db:	50                   	push   eax
c000f3dc:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f3e0:	53                   	push   ebx
c000f3e1:	e8 46 ff ff ff       	call   c000f32c <IDTEntry::IDTEntry(bool)>
c000f3e6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f3ea:	53                   	push   ebx
c000f3eb:	e8 aa ff ff ff       	call   c000f39a <IDTEntry::setOffset(unsigned int)>
c000f3f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f3f4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f3f8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f400:	e8 b3 ff ff ff       	call   c000f3b8 <IDT::addEntry(IDTEntry, int)>
c000f405:	83 c4 30             	add    esp,0x30
c000f408:	5b                   	pop    ebx
c000f409:	c3                   	ret    

c000f40a <IDT::flush()>:
c000f40a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f40e:	66 c7 05 f8 ee 02 c0 ff 07 	mov    WORD PTR ds:0xc002eef8,0x7ff
c000f417:	a3 fa ee 02 c0       	mov    ds:0xc002eefa,eax
c000f41c:	0f 01 1d f8 ee 02 c0 	lidtd  ds:0xc002eef8
c000f423:	c3                   	ret    

c000f424 <IDT::setup()>:
c000f424:	57                   	push   edi
c000f425:	56                   	push   esi
c000f426:	53                   	push   ebx
c000f427:	83 ec 10             	sub    esp,0x10
c000f42a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f42e:	6a 00                	push   0x0
c000f430:	68 70 04 00 c0       	push   0xc0000470
c000f435:	6a 00                	push   0x0
c000f437:	53                   	push   ebx
c000f438:	e8 95 ff ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f43d:	6a 00                	push   0x0
c000f43f:	68 80 04 00 c0       	push   0xc0000480
c000f444:	6a 01                	push   0x1
c000f446:	53                   	push   ebx
c000f447:	e8 86 ff ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f44c:	83 c4 20             	add    esp,0x20
c000f44f:	6a 00                	push   0x0
c000f451:	68 8a 04 00 c0       	push   0xc000048a
c000f456:	6a 02                	push   0x2
c000f458:	53                   	push   ebx
c000f459:	e8 74 ff ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f45e:	6a 00                	push   0x0
c000f460:	68 94 04 00 c0       	push   0xc0000494
c000f465:	6a 03                	push   0x3
c000f467:	53                   	push   ebx
c000f468:	e8 65 ff ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f46d:	83 c4 20             	add    esp,0x20
c000f470:	6a 00                	push   0x0
c000f472:	68 9e 04 00 c0       	push   0xc000049e
c000f477:	6a 04                	push   0x4
c000f479:	53                   	push   ebx
c000f47a:	e8 53 ff ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f47f:	6a 00                	push   0x0
c000f481:	68 a8 04 00 c0       	push   0xc00004a8
c000f486:	6a 05                	push   0x5
c000f488:	53                   	push   ebx
c000f489:	e8 44 ff ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f48e:	83 c4 20             	add    esp,0x20
c000f491:	6a 00                	push   0x0
c000f493:	68 b2 04 00 c0       	push   0xc00004b2
c000f498:	6a 06                	push   0x6
c000f49a:	53                   	push   ebx
c000f49b:	e8 32 ff ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f4a0:	6a 00                	push   0x0
c000f4a2:	68 bc 04 00 c0       	push   0xc00004bc
c000f4a7:	6a 07                	push   0x7
c000f4a9:	53                   	push   ebx
c000f4aa:	e8 23 ff ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f4af:	83 c4 20             	add    esp,0x20
c000f4b2:	6a 00                	push   0x0
c000f4b4:	68 c6 04 00 c0       	push   0xc00004c6
c000f4b9:	6a 08                	push   0x8
c000f4bb:	53                   	push   ebx
c000f4bc:	e8 11 ff ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f4c1:	6a 00                	push   0x0
c000f4c3:	68 ce 04 00 c0       	push   0xc00004ce
c000f4c8:	6a 09                	push   0x9
c000f4ca:	53                   	push   ebx
c000f4cb:	e8 02 ff ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f4d0:	83 c4 20             	add    esp,0x20
c000f4d3:	6a 00                	push   0x0
c000f4d5:	68 d8 04 00 c0       	push   0xc00004d8
c000f4da:	6a 0a                	push   0xa
c000f4dc:	53                   	push   ebx
c000f4dd:	e8 f0 fe ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f4e2:	6a 00                	push   0x0
c000f4e4:	68 e0 04 00 c0       	push   0xc00004e0
c000f4e9:	6a 0b                	push   0xb
c000f4eb:	53                   	push   ebx
c000f4ec:	e8 e1 fe ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f4f1:	83 c4 20             	add    esp,0x20
c000f4f4:	6a 00                	push   0x0
c000f4f6:	68 e8 04 00 c0       	push   0xc00004e8
c000f4fb:	6a 0c                	push   0xc
c000f4fd:	53                   	push   ebx
c000f4fe:	e8 cf fe ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f503:	6a 00                	push   0x0
c000f505:	68 f0 04 00 c0       	push   0xc00004f0
c000f50a:	6a 0d                	push   0xd
c000f50c:	53                   	push   ebx
c000f50d:	e8 c0 fe ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f512:	83 c4 20             	add    esp,0x20
c000f515:	6a 00                	push   0x0
c000f517:	68 f8 04 00 c0       	push   0xc00004f8
c000f51c:	6a 0e                	push   0xe
c000f51e:	53                   	push   ebx
c000f51f:	e8 ae fe ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f524:	6a 00                	push   0x0
c000f526:	68 00 05 00 c0       	push   0xc0000500
c000f52b:	6a 0f                	push   0xf
c000f52d:	53                   	push   ebx
c000f52e:	e8 9f fe ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f533:	83 c4 20             	add    esp,0x20
c000f536:	6a 00                	push   0x0
c000f538:	68 0a 05 00 c0       	push   0xc000050a
c000f53d:	6a 10                	push   0x10
c000f53f:	53                   	push   ebx
c000f540:	e8 8d fe ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f545:	6a 00                	push   0x0
c000f547:	68 14 05 00 c0       	push   0xc0000514
c000f54c:	6a 11                	push   0x11
c000f54e:	53                   	push   ebx
c000f54f:	e8 7e fe ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f554:	83 c4 20             	add    esp,0x20
c000f557:	6a 00                	push   0x0
c000f559:	68 1e 05 00 c0       	push   0xc000051e
c000f55e:	6a 12                	push   0x12
c000f560:	53                   	push   ebx
c000f561:	e8 6c fe ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f566:	6a 01                	push   0x1
c000f568:	68 b8 05 00 c0       	push   0xc00005b8
c000f56d:	6a 60                	push   0x60
c000f56f:	53                   	push   ebx
c000f570:	e8 5d fe ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f575:	83 c4 20             	add    esp,0x20
c000f578:	6a 00                	push   0x0
c000f57a:	68 bf 05 00 c0       	push   0xc00005bf
c000f57f:	6a 20                	push   0x20
c000f581:	53                   	push   ebx
c000f582:	e8 4b fe ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f587:	6a 00                	push   0x0
c000f589:	68 aa 05 00 c0       	push   0xc00005aa
c000f58e:	6a 21                	push   0x21
c000f590:	53                   	push   ebx
c000f591:	e8 3c fe ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f596:	83 c4 20             	add    esp,0x20
c000f599:	6a 00                	push   0x0
c000f59b:	68 b1 05 00 c0       	push   0xc00005b1
c000f5a0:	6a 22                	push   0x22
c000f5a2:	53                   	push   ebx
c000f5a3:	e8 2a fe ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f5a8:	6a 00                	push   0x0
c000f5aa:	68 28 05 00 c0       	push   0xc0000528
c000f5af:	6a 23                	push   0x23
c000f5b1:	53                   	push   ebx
c000f5b2:	e8 1b fe ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f5b7:	83 c4 20             	add    esp,0x20
c000f5ba:	6a 00                	push   0x0
c000f5bc:	68 32 05 00 c0       	push   0xc0000532
c000f5c1:	6a 24                	push   0x24
c000f5c3:	53                   	push   ebx
c000f5c4:	e8 09 fe ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f5c9:	6a 00                	push   0x0
c000f5cb:	68 3c 05 00 c0       	push   0xc000053c
c000f5d0:	6a 25                	push   0x25
c000f5d2:	53                   	push   ebx
c000f5d3:	e8 fa fd ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f5d8:	83 c4 20             	add    esp,0x20
c000f5db:	6a 00                	push   0x0
c000f5dd:	68 46 05 00 c0       	push   0xc0000546
c000f5e2:	6a 26                	push   0x26
c000f5e4:	53                   	push   ebx
c000f5e5:	e8 e8 fd ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f5ea:	6a 00                	push   0x0
c000f5ec:	68 50 05 00 c0       	push   0xc0000550
c000f5f1:	6a 27                	push   0x27
c000f5f3:	53                   	push   ebx
c000f5f4:	e8 d9 fd ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f5f9:	83 c4 20             	add    esp,0x20
c000f5fc:	6a 00                	push   0x0
c000f5fe:	68 5a 05 00 c0       	push   0xc000055a
c000f603:	6a 28                	push   0x28
c000f605:	53                   	push   ebx
c000f606:	e8 c7 fd ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f60b:	6a 00                	push   0x0
c000f60d:	68 64 05 00 c0       	push   0xc0000564
c000f612:	6a 29                	push   0x29
c000f614:	53                   	push   ebx
c000f615:	e8 b8 fd ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f61a:	83 c4 20             	add    esp,0x20
c000f61d:	6a 00                	push   0x0
c000f61f:	68 6e 05 00 c0       	push   0xc000056e
c000f624:	6a 2a                	push   0x2a
c000f626:	53                   	push   ebx
c000f627:	e8 a6 fd ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f62c:	6a 00                	push   0x0
c000f62e:	68 78 05 00 c0       	push   0xc0000578
c000f633:	6a 2b                	push   0x2b
c000f635:	53                   	push   ebx
c000f636:	e8 97 fd ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f63b:	83 c4 20             	add    esp,0x20
c000f63e:	6a 00                	push   0x0
c000f640:	68 82 05 00 c0       	push   0xc0000582
c000f645:	6a 2c                	push   0x2c
c000f647:	53                   	push   ebx
c000f648:	e8 85 fd ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f64d:	6a 00                	push   0x0
c000f64f:	68 8c 05 00 c0       	push   0xc000058c
c000f654:	6a 2d                	push   0x2d
c000f656:	53                   	push   ebx
c000f657:	e8 76 fd ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f65c:	83 c4 20             	add    esp,0x20
c000f65f:	6a 00                	push   0x0
c000f661:	68 96 05 00 c0       	push   0xc0000596
c000f666:	6a 2e                	push   0x2e
c000f668:	53                   	push   ebx
c000f669:	e8 64 fd ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f66e:	6a 00                	push   0x0
c000f670:	68 a0 05 00 c0       	push   0xc00005a0
c000f675:	6a 2f                	push   0x2f
c000f677:	53                   	push   ebx
c000f678:	e8 55 fd ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f67d:	83 c4 20             	add    esp,0x20
c000f680:	6a 00                	push   0x0
c000f682:	68 f5 05 00 c0       	push   0xc00005f5
c000f687:	6a 30                	push   0x30
c000f689:	53                   	push   ebx
c000f68a:	e8 43 fd ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f68f:	6a 00                	push   0x0
c000f691:	68 ff 05 00 c0       	push   0xc00005ff
c000f696:	6a 31                	push   0x31
c000f698:	53                   	push   ebx
c000f699:	e8 34 fd ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f69e:	83 c4 20             	add    esp,0x20
c000f6a1:	6a 00                	push   0x0
c000f6a3:	68 09 06 00 c0       	push   0xc0000609
c000f6a8:	6a 32                	push   0x32
c000f6aa:	53                   	push   ebx
c000f6ab:	e8 22 fd ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f6b0:	6a 00                	push   0x0
c000f6b2:	68 13 06 00 c0       	push   0xc0000613
c000f6b7:	6a 33                	push   0x33
c000f6b9:	53                   	push   ebx
c000f6ba:	e8 13 fd ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f6bf:	83 c4 20             	add    esp,0x20
c000f6c2:	6a 00                	push   0x0
c000f6c4:	68 1d 06 00 c0       	push   0xc000061d
c000f6c9:	6a 34                	push   0x34
c000f6cb:	53                   	push   ebx
c000f6cc:	e8 01 fd ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f6d1:	6a 00                	push   0x0
c000f6d3:	68 27 06 00 c0       	push   0xc0000627
c000f6d8:	6a 35                	push   0x35
c000f6da:	53                   	push   ebx
c000f6db:	e8 f2 fc ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f6e0:	83 c4 20             	add    esp,0x20
c000f6e3:	6a 00                	push   0x0
c000f6e5:	68 31 06 00 c0       	push   0xc0000631
c000f6ea:	6a 36                	push   0x36
c000f6ec:	53                   	push   ebx
c000f6ed:	e8 e0 fc ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f6f2:	6a 00                	push   0x0
c000f6f4:	68 3b 06 00 c0       	push   0xc000063b
c000f6f9:	6a 37                	push   0x37
c000f6fb:	53                   	push   ebx
c000f6fc:	e8 d1 fc ff ff       	call   c000f3d2 <IDT::addEntry(int, void (*)(), bool)>
c000f701:	83 c4 1c             	add    esp,0x1c
c000f704:	6a 03                	push   0x3
c000f706:	6a 02                	push   0x2
c000f708:	ff 35 70 f0 02 c0    	push   DWORD PTR ds:0xc002f070
c000f70e:	e8 ed 2c 00 00       	call   c0012400 <VAS::allocatePages(int, int)>
c000f713:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f71a:	89 c6                	mov    esi,eax
c000f71c:	e8 0d 02 00 00       	call   c000f92e <malloc>
c000f721:	81 c6 00 20 00 00    	add    esi,0x2000
c000f727:	89 04 24             	mov    DWORD PTR [esp],eax
c000f72a:	89 c7                	mov    edi,eax
c000f72c:	e8 c7 1c 00 00       	call   c00113f8 <TSS::TSS()>
c000f731:	83 c4 0c             	add    esp,0xc
c000f734:	68 c6 04 00 c0       	push   0xc00004c6
c000f739:	56                   	push   esi
c000f73a:	57                   	push   edi
c000f73b:	e8 f8 1c 00 00       	call   c0011438 <TSS::setup(unsigned long, unsigned long)>
c000f740:	89 c6                	mov    esi,eax
c000f742:	58                   	pop    eax
c000f743:	5a                   	pop    edx
c000f744:	6a 00                	push   0x0
c000f746:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f74a:	50                   	push   eax
c000f74b:	e8 dc fb ff ff       	call   c000f32c <IDTEntry::IDTEntry(bool)>
c000f750:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f754:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f759:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f760:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f766:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f76a:	80 ce 05             	or     dh,0x5
c000f76d:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f770:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f774:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f778:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f77b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f77e:	e8 87 fc ff ff       	call   c000f40a <IDT::flush()>
c000f783:	83 c4 20             	add    esp,0x20
c000f786:	5b                   	pop    ebx
c000f787:	5e                   	pop    esi
c000f788:	5f                   	pop    edi
c000f789:	c3                   	ret    

c000f78a <sbrk>:
c000f78a:	55                   	push   ebp
c000f78b:	57                   	push   edi
c000f78c:	56                   	push   esi
c000f78d:	53                   	push   ebx
c000f78e:	83 ec 1c             	sub    esp,0x1c
c000f791:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f795:	85 c0                	test   eax,eax
c000f797:	74 3e                	je     c000f7d7 <sbrk+0x4d>
c000f799:	78 43                	js     c000f7de <sbrk+0x54>
c000f79b:	8b 15 e8 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002eee8
c000f7a1:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f7a7:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f7ad:	83 e2 01             	and    edx,0x1
c000f7b0:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f7b4:	8b 0d 14 de 02 c0    	mov    ecx,DWORD PTR ds:0xc002de14
c000f7ba:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f7be:	05 ff 0f 00 00       	add    eax,0xfff
c000f7c3:	89 c2                	mov    edx,eax
c000f7c5:	78 2f                	js     c000f7f6 <sbrk+0x6c>
c000f7c7:	c1 fa 0c             	sar    edx,0xc
c000f7ca:	89 d7                	mov    edi,edx
c000f7cc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f7d0:	be 00 00 00 00       	mov    esi,0x0
c000f7d5:	eb 36                	jmp    c000f80d <sbrk+0x83>
c000f7d7:	a1 14 de 02 c0       	mov    eax,ds:0xc002de14
c000f7dc:	eb 73                	jmp    c000f851 <sbrk+0xc7>
c000f7de:	83 ec 08             	sub    esp,0x8
c000f7e1:	50                   	push   eax
c000f7e2:	68 88 ab 02 c0       	push   0xc002ab88
c000f7e7:	e8 e1 36 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c000f7ec:	83 c4 10             	add    esp,0x10
c000f7ef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f7f4:	eb 5b                	jmp    c000f851 <sbrk+0xc7>
c000f7f6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f7fc:	eb c9                	jmp    c000f7c7 <sbrk+0x3d>
c000f7fe:	81 05 14 de 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002de14,0x1000
c000f808:	46                   	inc    esi
c000f809:	39 f7                	cmp    edi,esi
c000f80b:	74 33                	je     c000f840 <sbrk+0xb6>
c000f80d:	8b 1d 70 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f070
c000f813:	8b 2d 14 de 02 c0    	mov    ebp,DWORD PTR ds:0xc002de14
c000f819:	e8 7c 07 00 00       	call   c000ff9a <Phys::allocatePage()>
c000f81e:	68 01 0c 00 00       	push   0xc01
c000f823:	55                   	push   ebp
c000f824:	50                   	push   eax
c000f825:	53                   	push   ebx
c000f826:	e8 d3 2a 00 00       	call   c00122fe <VAS::mapPage(unsigned long, unsigned long, int)>
c000f82b:	83 c4 10             	add    esp,0x10
c000f82e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f833:	74 c9                	je     c000f7fe <sbrk+0x74>
c000f835:	8b 1d 14 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002de14
c000f83b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f83e:	eb be                	jmp    c000f7fe <sbrk+0x74>
c000f840:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f845:	75 12                	jne    c000f859 <sbrk+0xcf>
c000f847:	0f 20 d8             	mov    eax,cr3
c000f84a:	0f 22 d8             	mov    cr3,eax
c000f84d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f851:	83 c4 1c             	add    esp,0x1c
c000f854:	5b                   	pop    ebx
c000f855:	5e                   	pop    esi
c000f856:	5f                   	pop    edi
c000f857:	5d                   	pop    ebp
c000f858:	c3                   	ret    
c000f859:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f85d:	89 cb                	mov    ebx,ecx
c000f85f:	c1 eb 0a             	shr    ebx,0xa
c000f862:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f868:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f86e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f872:	c1 e0 0c             	shl    eax,0xc
c000f875:	01 c8                	add    eax,ecx
c000f877:	c1 e8 0a             	shr    eax,0xa
c000f87a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f87f:	2d 00 00 40 00       	sub    eax,0x400000
c000f884:	39 c3                	cmp    ebx,eax
c000f886:	77 c5                	ja     c000f84d <sbrk+0xc3>
c000f888:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f88b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f891:	39 d8                	cmp    eax,ebx
c000f893:	73 f3                	jae    c000f888 <sbrk+0xfe>
c000f895:	eb b6                	jmp    c000f84d <sbrk+0xc3>

c000f897 <mmap>:
c000f897:	83 ec 18             	sub    esp,0x18
c000f89a:	68 b8 ab 02 c0       	push   0xc002abb8
c000f89f:	e8 ec af 00 00       	call   c001a890 <Krnl::panic(char const*)>
c000f8a4:	b8 00 00 00 00       	mov    eax,0x0
c000f8a9:	83 c4 1c             	add    esp,0x1c
c000f8ac:	c3                   	ret    

c000f8ad <munmap>:
c000f8ad:	83 ec 18             	sub    esp,0x18
c000f8b0:	68 bd ab 02 c0       	push   0xc002abbd
c000f8b5:	e8 d6 af 00 00       	call   c001a890 <Krnl::panic(char const*)>
c000f8ba:	b8 00 00 00 00       	mov    eax,0x0
c000f8bf:	83 c4 1c             	add    esp,0x1c
c000f8c2:	c3                   	ret    

c000f8c3 <liballoc_lock()>:
c000f8c3:	fa                   	cli    
c000f8c4:	ff 05 28 24 03 c0    	inc    DWORD PTR ds:0xc0032428
c000f8ca:	b8 00 00 00 00       	mov    eax,0x0
c000f8cf:	c3                   	ret    

c000f8d0 <liballoc_unlock()>:
c000f8d0:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c000f8d5:	48                   	dec    eax
c000f8d6:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c000f8db:	75 01                	jne    c000f8de <liballoc_unlock()+0xe>
c000f8dd:	fb                   	sti    
c000f8de:	b8 00 00 00 00       	mov    eax,0x0
c000f8e3:	c3                   	ret    

c000f8e4 <liballoc_alloc(int)>:
c000f8e4:	83 ec 10             	sub    esp,0x10
c000f8e7:	68 01 08 00 00       	push   0x801
c000f8ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8f0:	ff 35 70 f0 02 c0    	push   DWORD PTR ds:0xc002f070
c000f8f6:	e8 05 2b 00 00       	call   c0012400 <VAS::allocatePages(int, int)>
c000f8fb:	83 c4 1c             	add    esp,0x1c
c000f8fe:	c3                   	ret    

c000f8ff <liballoc_free(void*, int)>:
c000f8ff:	83 ec 14             	sub    esp,0x14
c000f902:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f906:	ff 35 70 f0 02 c0    	push   DWORD PTR ds:0xc002f070
c000f90c:	e8 99 27 00 00       	call   c00120aa <VAS::freeAllocatedPages(unsigned long)>
c000f911:	b8 00 00 00 00       	mov    eax,0x0
c000f916:	83 c4 1c             	add    esp,0x1c
c000f919:	c3                   	ret    

c000f91a <realloc>:
c000f91a:	83 ec 14             	sub    esp,0x14
c000f91d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f921:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f925:	e8 1e 1d ff ff       	call   c0001648 <dlrealloc>
c000f92a:	83 c4 1c             	add    esp,0x1c
c000f92d:	c3                   	ret    

c000f92e <malloc>:
c000f92e:	83 ec 18             	sub    esp,0x18
c000f931:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f935:	e8 d1 17 ff ff       	call   c000110b <dlmalloc>
c000f93a:	83 c4 1c             	add    esp,0x1c
c000f93d:	c3                   	ret    

c000f93e <free>:
c000f93e:	83 ec 18             	sub    esp,0x18
c000f941:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f945:	e8 66 14 ff ff       	call   c0000db0 <dlfree>
c000f94a:	83 c4 1c             	add    esp,0x1c
c000f94d:	c3                   	ret    

c000f94e <rfree>:
c000f94e:	83 ec 18             	sub    esp,0x18
c000f951:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f955:	e8 56 14 ff ff       	call   c0000db0 <dlfree>
c000f95a:	83 c4 1c             	add    esp,0x1c
c000f95d:	c3                   	ret    

c000f95e <calloc>:
c000f95e:	56                   	push   esi
c000f95f:	53                   	push   ebx
c000f960:	83 ec 10             	sub    esp,0x10
c000f963:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f967:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f96c:	53                   	push   ebx
c000f96d:	e8 bc ff ff ff       	call   c000f92e <malloc>
c000f972:	89 c6                	mov    esi,eax
c000f974:	83 c4 0c             	add    esp,0xc
c000f977:	53                   	push   ebx
c000f978:	6a 00                	push   0x0
c000f97a:	50                   	push   eax
c000f97b:	e8 ec 0d ff ff       	call   c000076c <memset>
c000f980:	89 f0                	mov    eax,esi
c000f982:	83 c4 14             	add    esp,0x14
c000f985:	5b                   	pop    ebx
c000f986:	5e                   	pop    esi
c000f987:	c3                   	ret    

c000f988 <hwTextMode_loadInData(VgaText*)>:
c000f988:	55                   	push   ebp
c000f989:	a1 20 de 02 c0       	mov    eax,ds:0xc002de20
c000f98e:	57                   	push   edi
c000f98f:	56                   	push   esi
c000f990:	53                   	push   ebx
c000f991:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f995:	8b 57 10             	mov    edx,DWORD PTR [edi+0x10]
c000f998:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c000f99b:	85 d2                	test   edx,edx
c000f99d:	7e 29                	jle    c000f9c8 <hwTextMode_loadInData(VgaText*)+0x40>
c000f99f:	8d a8 a0 00 00 00    	lea    ebp,[eax+0xa0]
c000f9a5:	31 f6                	xor    esi,esi
c000f9a7:	29 cd                	sub    ebp,ecx
c000f9a9:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f9ac:	31 c0                	xor    eax,eax
c000f9ae:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f9b2:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f9b6:	40                   	inc    eax
c000f9b7:	83 f8 50             	cmp    eax,0x50
c000f9ba:	75 f2                	jne    c000f9ae <hwTextMode_loadInData(VgaText*)+0x26>
c000f9bc:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f9c2:	46                   	inc    esi
c000f9c3:	39 77 10             	cmp    DWORD PTR [edi+0x10],esi
c000f9c6:	7f e1                	jg     c000f9a9 <hwTextMode_loadInData(VgaText*)+0x21>
c000f9c8:	5b                   	pop    ebx
c000f9c9:	5e                   	pop    esi
c000f9ca:	5f                   	pop    edi
c000f9cb:	5d                   	pop    ebp
c000f9cc:	c3                   	ret    

c000f9cd <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f9cd:	55                   	push   ebp
c000f9ce:	80 3d 80 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef80,0x0
c000f9d5:	57                   	push   edi
c000f9d6:	56                   	push   esi
c000f9d7:	53                   	push   ebx
c000f9d8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f9dc:	75 44                	jne    c000fa22 <hwTextMode_loadInTitle(VgaText*, char*)+0x55>
c000f9de:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f9e1:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f9e4:	8b 15 20 de 02 c0    	mov    edx,DWORD PTR ds:0xc002de20
c000f9ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f9ee:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f9f4:	eb 08                	jmp    c000f9fe <hwTextMode_loadInTitle(VgaText*, char*)+0x31>
c000f9f6:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f9f9:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f9fc:	89 da                	mov    edx,ebx
c000f9fe:	83 e5 0f             	and    ebp,0xf
c000fa01:	c1 e0 04             	shl    eax,0x4
c000fa04:	8d 5a 02             	lea    ebx,[edx+0x2]
c000fa07:	0f b6 c0             	movzx  eax,al
c000fa0a:	41                   	inc    ecx
c000fa0b:	09 e8                	or     eax,ebp
c000fa0d:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000fa11:	c1 e0 08             	shl    eax,0x8
c000fa14:	09 e8                	or     eax,ebp
c000fa16:	39 fb                	cmp    ebx,edi
c000fa18:	66 89 02             	mov    WORD PTR [edx],ax
c000fa1b:	75 d9                	jne    c000f9f6 <hwTextMode_loadInTitle(VgaText*, char*)+0x29>
c000fa1d:	5b                   	pop    ebx
c000fa1e:	5e                   	pop    esi
c000fa1f:	5f                   	pop    edi
c000fa20:	5d                   	pop    ebp
c000fa21:	c3                   	ret    
c000fa22:	c7 46 3c 02 00 00 00 	mov    DWORD PTR [esi+0x3c],0x2
c000fa29:	c7 46 38 00 00 00 00 	mov    DWORD PTR [esi+0x38],0x0
c000fa30:	31 c0                	xor    eax,eax
c000fa32:	bd 02 00 00 00       	mov    ebp,0x2
c000fa37:	eb ab                	jmp    c000f9e4 <hwTextMode_loadInTitle(VgaText*, char*)+0x17>

c000fa39 <hwTextMode_showCursor(VgaText*, bool)>:
c000fa39:	56                   	push   esi
c000fa3a:	80 3d 80 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef80,0x0
c000fa41:	53                   	push   ebx
c000fa42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa46:	75 36                	jne    c000fa7e <hwTextMode_showCursor(VgaText*, bool)+0x45>
c000fa48:	84 c0                	test   al,al
c000fa4a:	74 35                	je     c000fa81 <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000fa4c:	bb d4 03 00 00       	mov    ebx,0x3d4
c000fa51:	b0 0a                	mov    al,0xa
c000fa53:	89 da                	mov    edx,ebx
c000fa55:	ee                   	out    dx,al
c000fa56:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000fa5b:	89 ca                	mov    edx,ecx
c000fa5d:	ec                   	in     al,dx
c000fa5e:	b2 0f                	mov    dl,0xf
c000fa60:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000fa64:	83 e0 c0             	and    eax,0xffffffc0
c000fa67:	2b 56 1c             	sub    edx,DWORD PTR [esi+0x1c]
c000fa6a:	09 d0                	or     eax,edx
c000fa6c:	89 ca                	mov    edx,ecx
c000fa6e:	ee                   	out    dx,al
c000fa6f:	b0 0b                	mov    al,0xb
c000fa71:	89 da                	mov    edx,ebx
c000fa73:	ee                   	out    dx,al
c000fa74:	89 ca                	mov    edx,ecx
c000fa76:	ec                   	in     al,dx
c000fa77:	83 e0 e0             	and    eax,0xffffffe0
c000fa7a:	83 c8 0f             	or     eax,0xf
c000fa7d:	ee                   	out    dx,al
c000fa7e:	5b                   	pop    ebx
c000fa7f:	5e                   	pop    esi
c000fa80:	c3                   	ret    
c000fa81:	b0 0a                	mov    al,0xa
c000fa83:	ba d4 03 00 00       	mov    edx,0x3d4
c000fa88:	ee                   	out    dx,al
c000fa89:	b0 20                	mov    al,0x20
c000fa8b:	ba d5 03 00 00       	mov    edx,0x3d5
c000fa90:	ee                   	out    dx,al
c000fa91:	5b                   	pop    ebx
c000fa92:	5e                   	pop    esi
c000fa93:	c3                   	ret    

c000fa94 <hwTextMode_update(VgaText*)>:
c000fa94:	c3                   	ret    

c000fa95 <hwTextMode_updateCursor(VgaText*)>:
c000fa95:	56                   	push   esi
c000fa96:	80 3d 80 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef80,0x0
c000fa9d:	53                   	push   ebx
c000fa9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000faa2:	75 36                	jne    c000fada <hwTextMode_updateCursor(VgaText*)+0x45>
c000faa4:	be d4 03 00 00       	mov    esi,0x3d4
c000faa9:	b9 19 00 00 00       	mov    ecx,0x19
c000faae:	89 f2                	mov    edx,esi
c000fab0:	2b 48 10             	sub    ecx,DWORD PTR [eax+0x10]
c000fab3:	03 48 18             	add    ecx,DWORD PTR [eax+0x18]
c000fab6:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000fab9:	c1 e1 04             	shl    ecx,0x4
c000fabc:	03 48 14             	add    ecx,DWORD PTR [eax+0x14]
c000fabf:	b0 0f                	mov    al,0xf
c000fac1:	ee                   	out    dx,al
c000fac2:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fac7:	88 c8                	mov    al,cl
c000fac9:	89 da                	mov    edx,ebx
c000facb:	ee                   	out    dx,al
c000facc:	b0 0e                	mov    al,0xe
c000face:	89 f2                	mov    edx,esi
c000fad0:	ee                   	out    dx,al
c000fad1:	89 c8                	mov    eax,ecx
c000fad3:	89 da                	mov    edx,ebx
c000fad5:	66 c1 e8 08          	shr    ax,0x8
c000fad9:	ee                   	out    dx,al
c000fada:	5b                   	pop    ebx
c000fadb:	5e                   	pop    esi
c000fadc:	c3                   	ret    

c000fadd <hwTextMode_disableBlink(VgaText*, bool)>:
c000fadd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fae1:	80 3d 80 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef80,0x0
c000fae8:	75 38                	jne    c000fb22 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000faea:	ba da 03 00 00       	mov    edx,0x3da
c000faef:	84 c0                	test   al,al
c000faf1:	75 18                	jne    c000fb0b <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000faf3:	ec                   	in     al,dx
c000faf4:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000faf9:	b0 30                	mov    al,0x30
c000fafb:	89 ca                	mov    edx,ecx
c000fafd:	ee                   	out    dx,al
c000fafe:	ba c1 03 00 00       	mov    edx,0x3c1
c000fb03:	ec                   	in     al,dx
c000fb04:	83 c8 08             	or     eax,0x8
c000fb07:	89 ca                	mov    edx,ecx
c000fb09:	ee                   	out    dx,al
c000fb0a:	c3                   	ret    
c000fb0b:	ec                   	in     al,dx
c000fb0c:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fb11:	b0 30                	mov    al,0x30
c000fb13:	89 ca                	mov    edx,ecx
c000fb15:	ee                   	out    dx,al
c000fb16:	ba c1 03 00 00       	mov    edx,0x3c1
c000fb1b:	ec                   	in     al,dx
c000fb1c:	83 e0 f7             	and    eax,0xfffffff7
c000fb1f:	89 ca                	mov    edx,ecx
c000fb21:	ee                   	out    dx,al
c000fb22:	c3                   	ret    

c000fb23 <hwTextMode_scrollScreen(VgaText*)>:
c000fb23:	55                   	push   ebp
c000fb24:	57                   	push   edi
c000fb25:	56                   	push   esi
c000fb26:	53                   	push   ebx
c000fb27:	83 ec 1c             	sub    esp,0x1c
c000fb2a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fb2e:	80 3d 80 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef80,0x0
c000fb35:	74 0e                	je     c000fb45 <hwTextMode_scrollScreen(VgaText*)+0x22>
c000fb37:	c7 41 34 02 00 00 00 	mov    DWORD PTR [ecx+0x34],0x2
c000fb3e:	c7 41 30 00 00 00 00 	mov    DWORD PTR [ecx+0x30],0x0
c000fb45:	a1 20 de 02 c0       	mov    eax,ds:0xc002de20
c000fb4a:	bd 02 00 00 00       	mov    ebp,0x2
c000fb4f:	05 a0 00 00 00       	add    eax,0xa0
c000fb54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fb58:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fb5c:	31 c0                	xor    eax,eax
c000fb5e:	eb 0b                	jmp    c000fb6b <hwTextMode_scrollScreen(VgaText*)+0x48>
c000fb60:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fb66:	74 51                	je     c000fbb9 <hwTextMode_scrollScreen(VgaText*)+0x96>
c000fb68:	43                   	inc    ebx
c000fb69:	89 f0                	mov    eax,esi
c000fb6b:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fb71:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fb77:	88 13                	mov    BYTE PTR [ebx],dl
c000fb79:	8d 70 01             	lea    esi,[eax+0x1]
c000fb7c:	83 fd 18             	cmp    ebp,0x18
c000fb7f:	75 df                	jne    c000fb60 <hwTextMode_scrollScreen(VgaText*)+0x3d>
c000fb81:	a8 01                	test   al,0x1
c000fb83:	75 13                	jne    c000fb98 <hwTextMode_scrollScreen(VgaText*)+0x75>
c000fb85:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fb88:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fb8e:	75 d8                	jne    c000fb68 <hwTextMode_scrollScreen(VgaText*)+0x45>
c000fb90:	83 c4 1c             	add    esp,0x1c
c000fb93:	5b                   	pop    ebx
c000fb94:	5e                   	pop    esi
c000fb95:	5f                   	pop    edi
c000fb96:	5d                   	pop    ebp
c000fb97:	c3                   	ret    
c000fb98:	83 ec 08             	sub    esp,0x8
c000fb9b:	0f b6 41 30          	movzx  eax,BYTE PTR [ecx+0x30]
c000fb9f:	50                   	push   eax
c000fba0:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fba4:	0f b6 41 34          	movzx  eax,BYTE PTR [ecx+0x34]
c000fba8:	50                   	push   eax
c000fba9:	e8 00 0c 00 00       	call   c00107ae <VgaText::combineColours(unsigned char, unsigned char)>
c000fbae:	83 c4 10             	add    esp,0x10
c000fbb1:	88 07                	mov    BYTE PTR [edi],al
c000fbb3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fbb7:	eb cf                	jmp    c000fb88 <hwTextMode_scrollScreen(VgaText*)+0x65>
c000fbb9:	45                   	inc    ebp
c000fbba:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fbc2:	eb 94                	jmp    c000fb58 <hwTextMode_scrollScreen(VgaText*)+0x35>

c000fbc4 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fbc4:	57                   	push   edi
c000fbc5:	80 3d 80 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef80,0x0
c000fbcc:	56                   	push   esi
c000fbcd:	53                   	push   ebx
c000fbce:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fbd2:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fbd6:	75 62                	jne    c000fc3a <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x76>
c000fbd8:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fbdd:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fbe2:	83 ec 08             	sub    esp,0x8
c000fbe5:	52                   	push   edx
c000fbe6:	50                   	push   eax
c000fbe7:	e8 c2 0b 00 00       	call   c00107ae <VgaText::combineColours(unsigned char, unsigned char)>
c000fbec:	5a                   	pop    edx
c000fbed:	0f b6 c0             	movzx  eax,al
c000fbf0:	59                   	pop    ecx
c000fbf1:	50                   	push   eax
c000fbf2:	0f be c3             	movsx  eax,bl
c000fbf5:	50                   	push   eax
c000fbf6:	e8 59 0c 00 00       	call   c0010854 <VgaText::combineCharAndColour(char, unsigned char)>
c000fbfb:	83 c4 10             	add    esp,0x10
c000fbfe:	8b 35 20 de 02 c0    	mov    esi,DWORD PTR ds:0xc002de20
c000fc04:	80 3d 80 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef80,0x0
c000fc0b:	74 07                	je     c000fc14 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fc0d:	66 0f be c3          	movsx  ax,bl
c000fc11:	80 cc 02             	or     ah,0x2
c000fc14:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fc18:	ba 19 00 00 00       	mov    edx,0x19
c000fc1d:	2b 51 10             	sub    edx,DWORD PTR [ecx+0x10]
c000fc20:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fc23:	8d 14 92             	lea    edx,[edx+edx*4]
c000fc26:	c1 e1 04             	shl    ecx,0x4
c000fc29:	c1 e2 04             	shl    edx,0x4
c000fc2c:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fc30:	01 ca                	add    edx,ecx
c000fc32:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fc36:	5b                   	pop    ebx
c000fc37:	5e                   	pop    esi
c000fc38:	5f                   	pop    edi
c000fc39:	c3                   	ret    
c000fc3a:	b8 02 00 00 00       	mov    eax,0x2
c000fc3f:	31 d2                	xor    edx,edx
c000fc41:	eb 9f                	jmp    c000fbe2 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fc43 <setupTextMode()>:
c000fc43:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fc48:	83 e0 30             	and    eax,0x30
c000fc4b:	66 83 f8 30          	cmp    ax,0x30
c000fc4f:	75 11                	jne    c000fc62 <setupTextMode()+0x1f>
c000fc51:	81 2d 20 de 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002de20,0x8000
c000fc5b:	c6 05 80 ef 02 c0 01 	mov    BYTE PTR ds:0xc002ef80,0x1
c000fc62:	c7 05 b8 ef 02 c0 dd fa 00 c0 	mov    DWORD PTR ds:0xc002efb8,0xc000fadd
c000fc6c:	c7 05 a4 ef 02 c0 88 f9 00 c0 	mov    DWORD PTR ds:0xc002efa4,0xc000f988
c000fc76:	c7 05 a0 ef 02 c0 cd f9 00 c0 	mov    DWORD PTR ds:0xc002efa0,0xc000f9cd
c000fc80:	c7 05 ac ef 02 c0 23 fb 00 c0 	mov    DWORD PTR ds:0xc002efac,0xc000fb23
c000fc8a:	c7 05 b4 ef 02 c0 39 fa 00 c0 	mov    DWORD PTR ds:0xc002efb4,0xc000fa39
c000fc94:	c7 05 a8 ef 02 c0 94 fa 00 c0 	mov    DWORD PTR ds:0xc002efa8,0xc000fa94
c000fc9e:	c7 05 b0 ef 02 c0 95 fa 00 c0 	mov    DWORD PTR ds:0xc002efb0,0xc000fa95
c000fca8:	c7 05 bc ef 02 c0 c4 fb 00 c0 	mov    DWORD PTR ds:0xc002efbc,0xc000fbc4
c000fcb2:	c3                   	ret    

c000fcb3 <kernel_main>:
c000fcb3:	57                   	push   edi
c000fcb4:	bf f9 03 00 00       	mov    edi,0x3f9
c000fcb9:	56                   	push   esi
c000fcba:	89 fa                	mov    edx,edi
c000fcbc:	53                   	push   ebx
c000fcbd:	31 f6                	xor    esi,esi
c000fcbf:	83 ec 2c             	sub    esp,0x2c
c000fcc2:	89 f0                	mov    eax,esi
c000fcc4:	ee                   	out    dx,al
c000fcc5:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fcca:	b0 80                	mov    al,0x80
c000fccc:	89 da                	mov    edx,ebx
c000fcce:	ee                   	out    dx,al
c000fccf:	b1 03                	mov    cl,0x3
c000fcd1:	ba f8 03 00 00       	mov    edx,0x3f8
c000fcd6:	88 c8                	mov    al,cl
c000fcd8:	ee                   	out    dx,al
c000fcd9:	89 f0                	mov    eax,esi
c000fcdb:	89 fa                	mov    edx,edi
c000fcdd:	ee                   	out    dx,al
c000fcde:	88 c8                	mov    al,cl
c000fce0:	89 da                	mov    edx,ebx
c000fce2:	ee                   	out    dx,al
c000fce3:	b0 c7                	mov    al,0xc7
c000fce5:	ba fa 03 00 00       	mov    edx,0x3fa
c000fcea:	ee                   	out    dx,al
c000fceb:	b0 0b                	mov    al,0xb
c000fced:	ba fc 03 00 00       	mov    edx,0x3fc
c000fcf2:	ee                   	out    dx,al
c000fcf3:	68 c4 ab 02 c0       	push   0xc002abc4
c000fcf8:	e8 d0 31 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c000fcfd:	e8 3e 09 00 00       	call   c0010640 <installVgaTextImplementation()>
c000fd02:	e8 3c ff ff ff       	call   c000fc43 <setupTextMode()>
c000fd07:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fd0c:	05 ff 0f 00 00       	add    eax,0xfff
c000fd11:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fd16:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd19:	e8 f5 03 00 00       	call   c0010113 <Phys::physicalMemorySetup(unsigned int)>
c000fd1e:	e8 63 1f 00 00       	call   c0011c86 <Virt::virtualMemorySetup()>
c000fd23:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fd29:	83 c4 10             	add    esp,0x10
c000fd2c:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fd32:	75 0e                	jne    c000fd42 <kernel_main+0x8f>
c000fd34:	89 d8                	mov    eax,ebx
c000fd36:	25 48 03 00 00       	and    eax,0x348
c000fd3b:	3d 00 03 00 00       	cmp    eax,0x300
c000fd40:	74 10                	je     c000fd52 <kernel_main+0x9f>
c000fd42:	83 ec 0c             	sub    esp,0xc
c000fd45:	68 55 c5 02 c0       	push   0xc002c555
c000fd4a:	e8 41 ab 00 00       	call   c001a890 <Krnl::panic(char const*)>
c000fd4f:	83 c4 10             	add    esp,0x10
c000fd52:	83 ec 0c             	sub    esp,0xc
c000fd55:	89 1d 00 ef 02 c0    	mov    DWORD PTR ds:0xc002ef00,ebx
c000fd5b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fd5f:	53                   	push   ebx
c000fd60:	e8 6d 21 00 00       	call   c0011ed2 <VAS::VAS()>
c000fd65:	89 1d 70 f0 02 c0    	mov    DWORD PTR ds:0xc002f070,ebx
c000fd6b:	e8 b0 02 ff ff       	call   c0000020 <callGlobalConstructors>
c000fd70:	c7 04 24 db ab 02 c0 	mov    DWORD PTR [esp],0xc002abdb
c000fd77:	e8 51 31 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c000fd7c:	e8 84 1f 00 00       	call   c0011d05 <Virt::swappingSetup()>
c000fd81:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fd88:	e8 a1 fb ff ff       	call   c000f92e <malloc>
c000fd8d:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd90:	89 c6                	mov    esi,eax
c000fd92:	e8 8f ea ff ff       	call   c000e826 <Computer::Computer()>
c000fd97:	58                   	pop    eax
c000fd98:	89 35 e8 ee 02 c0    	mov    DWORD PTR ds:0xc002eee8,esi
c000fd9e:	5a                   	pop    edx
c000fd9f:	56                   	push   esi
c000fda0:	68 f8 ab 02 c0       	push   0xc002abf8
c000fda5:	e8 23 31 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c000fdaa:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c000fdaf:	8b 10                	mov    edx,DWORD PTR [eax]
c000fdb1:	6a 00                	push   0x0
c000fdb3:	6a 00                	push   0x0
c000fdb5:	6a 00                	push   0x0
c000fdb7:	50                   	push   eax
c000fdb8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fdbb:	83 c4 14             	add    esp,0x14
c000fdbe:	53                   	push   ebx
c000fdbf:	e8 be 23 00 00       	call   c0012182 <VAS::~VAS()>
c000fdc4:	c7 04 24 0b ac 02 c0 	mov    DWORD PTR [esp],0xc002ac0b
c000fdcb:	e8 c0 aa 00 00       	call   c001a890 <Krnl::panic(char const*)>
c000fdd0:	83 c4 30             	add    esp,0x30
c000fdd3:	5b                   	pop    ebx
c000fdd4:	5e                   	pop    esi
c000fdd5:	5f                   	pop    edi
c000fdd6:	c3                   	ret    

c000fdd7 <Phys::allocateDMA(unsigned long)>:
c000fdd7:	55                   	push   ebp
c000fdd8:	31 d2                	xor    edx,edx
c000fdda:	57                   	push   edi
c000fddb:	31 ed                	xor    ebp,ebp
c000fddd:	56                   	push   esi
c000fdde:	31 c9                	xor    ecx,ecx
c000fde0:	53                   	push   ebx
c000fde1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fde5:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fdeb:	31 c0                	xor    eax,eax
c000fded:	c1 ee 0c             	shr    esi,0xc
c000fdf0:	eb 17                	jmp    c000fe09 <Phys::allocateDMA(unsigned long)+0x32>
c000fdf2:	85 c9                	test   ecx,ecx
c000fdf4:	75 04                	jne    c000fdfa <Phys::allocateDMA(unsigned long)+0x23>
c000fdf6:	89 d5                	mov    ebp,edx
c000fdf8:	89 d0                	mov    eax,edx
c000fdfa:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fdfd:	39 de                	cmp    esi,ebx
c000fdff:	74 20                	je     c000fe21 <Phys::allocateDMA(unsigned long)+0x4a>
c000fe01:	42                   	inc    edx
c000fe02:	89 d9                	mov    ecx,ebx
c000fe04:	83 fa 2f             	cmp    edx,0x2f
c000fe07:	7f 11                	jg     c000fe1a <Phys::allocateDMA(unsigned long)+0x43>
c000fe09:	80 ba 40 ef 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd10c0],0x0
c000fe10:	74 e0                	je     c000fdf2 <Phys::allocateDMA(unsigned long)+0x1b>
c000fe12:	31 c9                	xor    ecx,ecx
c000fe14:	42                   	inc    edx
c000fe15:	83 fa 2f             	cmp    edx,0x2f
c000fe18:	7e ef                	jle    c000fe09 <Phys::allocateDMA(unsigned long)+0x32>
c000fe1a:	5b                   	pop    ebx
c000fe1b:	31 c0                	xor    eax,eax
c000fe1d:	5e                   	pop    esi
c000fe1e:	5f                   	pop    edi
c000fe1f:	5d                   	pop    ebp
c000fe20:	c3                   	ret    
c000fe21:	8d 14 30             	lea    edx,[eax+esi*1]
c000fe24:	89 d7                	mov    edi,edx
c000fe26:	4f                   	dec    edi
c000fe27:	79 03                	jns    c000fe2c <Phys::allocateDMA(unsigned long)+0x55>
c000fe29:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fe2c:	c1 ff 04             	sar    edi,0x4
c000fe2f:	89 c2                	mov    edx,eax
c000fe31:	c1 fa 04             	sar    edx,0x4
c000fe34:	39 fa                	cmp    edx,edi
c000fe36:	75 2f                	jne    c000fe67 <Phys::allocateDMA(unsigned long)+0x90>
c000fe38:	85 db                	test   ebx,ebx
c000fe3a:	74 1a                	je     c000fe56 <Phys::allocateDMA(unsigned long)+0x7f>
c000fe3c:	be 40 ef 02 c0       	mov    esi,0xc002ef40
c000fe41:	8d 90 40 ef 02 c0    	lea    edx,[eax-0x3ffd10c0]
c000fe47:	f7 d6                	not    esi
c000fe49:	29 c6                	sub    esi,eax
c000fe4b:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fe4e:	42                   	inc    edx
c000fe4f:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fe52:	39 d9                	cmp    ecx,ebx
c000fe54:	7f f5                	jg     c000fe4b <Phys::allocateDMA(unsigned long)+0x74>
c000fe56:	85 ff                	test   edi,edi
c000fe58:	74 13                	je     c000fe6d <Phys::allocateDMA(unsigned long)+0x96>
c000fe5a:	5b                   	pop    ebx
c000fe5b:	05 50 20 0c 00       	add    eax,0xc2050
c000fe60:	5e                   	pop    esi
c000fe61:	c1 e0 0c             	shl    eax,0xc
c000fe64:	5f                   	pop    edi
c000fe65:	5d                   	pop    ebp
c000fe66:	c3                   	ret    
c000fe67:	89 ea                	mov    edx,ebp
c000fe69:	31 c9                	xor    ecx,ecx
c000fe6b:	eb a7                	jmp    c000fe14 <Phys::allocateDMA(unsigned long)+0x3d>
c000fe6d:	5b                   	pop    ebx
c000fe6e:	c1 e0 0c             	shl    eax,0xc
c000fe71:	5e                   	pop    esi
c000fe72:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fe77:	5f                   	pop    edi
c000fe78:	5d                   	pop    ebp
c000fe79:	c3                   	ret    

c000fe7a <Phys::freeDMA(unsigned long, unsigned long)>:
c000fe7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe7e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fe82:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fe88:	c1 e9 0c             	shr    ecx,0xc
c000fe8b:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fe90:	76 25                	jbe    c000feb7 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fe92:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fe97:	c1 e8 0c             	shr    eax,0xc
c000fe9a:	8d 50 10             	lea    edx,[eax+0x10]
c000fe9d:	85 c9                	test   ecx,ecx
c000fe9f:	74 15                	je     c000feb6 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fea1:	8d 82 40 ef 02 c0    	lea    eax,[edx-0x3ffd10c0]
c000fea7:	8d 94 11 40 ef 02 c0 	lea    edx,[ecx+edx*1-0x3ffd10c0]
c000feae:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000feb1:	40                   	inc    eax
c000feb2:	39 d0                	cmp    eax,edx
c000feb4:	75 f8                	jne    c000feae <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000feb6:	c3                   	ret    
c000feb7:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000febd:	c1 ea 0c             	shr    edx,0xc
c000fec0:	eb db                	jmp    c000fe9d <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fec2 <Phys::setPageState(unsigned long, bool)>:
c000fec2:	56                   	push   esi
c000fec3:	ba 01 00 00 00       	mov    edx,0x1
c000fec8:	53                   	push   ebx
c000fec9:	8b 35 18 de 02 c0    	mov    esi,DWORD PTR ds:0xc002de18
c000fecf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fed3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fed7:	89 c8                	mov    eax,ecx
c000fed9:	83 e1 07             	and    ecx,0x7
c000fedc:	c1 e8 03             	shr    eax,0x3
c000fedf:	d3 e3                	shl    ebx,cl
c000fee1:	01 c6                	add    esi,eax
c000fee3:	d3 e2                	shl    edx,cl
c000fee5:	f7 d2                	not    edx
c000fee7:	20 16                	and    BYTE PTR [esi],dl
c000fee9:	03 05 18 de 02 c0    	add    eax,DWORD PTR ds:0xc002de18
c000feef:	08 18                	or     BYTE PTR [eax],bl
c000fef1:	5b                   	pop    ebx
c000fef2:	5e                   	pop    esi
c000fef3:	c3                   	ret    

c000fef4 <Phys::getPageState(unsigned long)>:
c000fef4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fef8:	8b 15 18 de 02 c0    	mov    edx,DWORD PTR ds:0xc002de18
c000fefe:	89 c8                	mov    eax,ecx
c000ff00:	83 e1 07             	and    ecx,0x7
c000ff03:	c1 e8 03             	shr    eax,0x3
c000ff06:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000ff0a:	d3 f8                	sar    eax,cl
c000ff0c:	83 e0 01             	and    eax,0x1
c000ff0f:	c3                   	ret    

c000ff10 <Phys::freePage(unsigned long)>:
c000ff10:	53                   	push   ebx
c000ff11:	83 ec 08             	sub    esp,0x8
c000ff14:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff18:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000ff1e:	76 57                	jbe    c000ff77 <Phys::freePage(unsigned long)+0x67>
c000ff20:	c1 eb 0c             	shr    ebx,0xc
c000ff23:	53                   	push   ebx
c000ff24:	e8 cb ff ff ff       	call   c000fef4 <Phys::getPageState(unsigned long)>
c000ff29:	5a                   	pop    edx
c000ff2a:	84 c0                	test   al,al
c000ff2c:	74 5b                	je     c000ff89 <Phys::freePage(unsigned long)+0x79>
c000ff2e:	a1 30 ef 02 c0       	mov    eax,ds:0xc002ef30
c000ff33:	48                   	dec    eax
c000ff34:	a3 30 ef 02 c0       	mov    ds:0xc002ef30,eax
c000ff39:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff3c:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff3f:	c1 e0 02             	shl    eax,0x2
c000ff42:	99                   	cdq    
c000ff43:	f7 3d 34 ef 02 c0    	idiv   DWORD PTR ds:0xc002ef34
c000ff49:	39 05 2c ef 02 c0    	cmp    DWORD PTR ds:0xc002ef2c,eax
c000ff4f:	75 13                	jne    c000ff64 <Phys::freePage(unsigned long)+0x54>
c000ff51:	83 ec 08             	sub    esp,0x8
c000ff54:	6a 00                	push   0x0
c000ff56:	53                   	push   ebx
c000ff57:	e8 66 ff ff ff       	call   c000fec2 <Phys::setPageState(unsigned long, bool)>
c000ff5c:	83 c4 10             	add    esp,0x10
c000ff5f:	83 c4 08             	add    esp,0x8
c000ff62:	5b                   	pop    ebx
c000ff63:	c3                   	ret    
c000ff64:	83 ec 0c             	sub    esp,0xc
c000ff67:	a3 2c ef 02 c0       	mov    ds:0xc002ef2c,eax
c000ff6c:	50                   	push   eax
c000ff6d:	e8 fc 09 00 00       	call   c001096e <VgaText::updateRAMUsageDisplay(int)>
c000ff72:	83 c4 10             	add    esp,0x10
c000ff75:	eb da                	jmp    c000ff51 <Phys::freePage(unsigned long)+0x41>
c000ff77:	68 00 10 00 00       	push   0x1000
c000ff7c:	53                   	push   ebx
c000ff7d:	e8 f8 fe ff ff       	call   c000fe7a <Phys::freeDMA(unsigned long, unsigned long)>
c000ff82:	59                   	pop    ecx
c000ff83:	5b                   	pop    ebx
c000ff84:	83 c4 08             	add    esp,0x8
c000ff87:	5b                   	pop    ebx
c000ff88:	c3                   	ret    
c000ff89:	c7 44 24 10 26 ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ac26
c000ff91:	83 c4 08             	add    esp,0x8
c000ff94:	5b                   	pop    ebx
c000ff95:	e9 f6 a8 00 00       	jmp    c001a890 <Krnl::panic(char const*)>

c000ff9a <Phys::allocatePage()>:
c000ff9a:	56                   	push   esi
c000ff9b:	53                   	push   ebx
c000ff9c:	51                   	push   ecx
c000ff9d:	8b 35 24 ef 02 c0    	mov    esi,DWORD PTR ds:0xc002ef24
c000ffa3:	89 f3                	mov    ebx,esi
c000ffa5:	eb 0a                	jmp    c000ffb1 <Phys::allocatePage()+0x17>
c000ffa7:	89 1d 24 ef 02 c0    	mov    DWORD PTR ds:0xc002ef24,ebx
c000ffad:	39 de                	cmp    esi,ebx
c000ffaf:	74 24                	je     c000ffd5 <Phys::allocatePage()+0x3b>
c000ffb1:	53                   	push   ebx
c000ffb2:	e8 3d ff ff ff       	call   c000fef4 <Phys::getPageState(unsigned long)>
c000ffb7:	5a                   	pop    edx
c000ffb8:	84 c0                	test   al,al
c000ffba:	74 77                	je     c0010033 <Phys::allocatePage()+0x99>
c000ffbc:	43                   	inc    ebx
c000ffbd:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ffc3:	75 e2                	jne    c000ffa7 <Phys::allocatePage()+0xd>
c000ffc5:	31 db                	xor    ebx,ebx
c000ffc7:	c7 05 24 ef 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ef24,0x0
c000ffd1:	39 de                	cmp    esi,ebx
c000ffd3:	75 dc                	jne    c000ffb1 <Phys::allocatePage()+0x17>
c000ffd5:	83 ec 0c             	sub    esp,0xc
c000ffd8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffdd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffe0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ffe6:	e8 0f 2c 00 00       	call   c0012bfa <VAS::scanForEviction()>
c000ffeb:	83 c4 10             	add    esp,0x10
c000ffee:	85 c0                	test   eax,eax
c000fff0:	75 76                	jne    c0010068 <Phys::allocatePage()+0xce>
c000fff2:	83 ec 0c             	sub    esp,0xc
c000fff5:	68 3c ac 02 c0       	push   0xc002ac3c
c000fffa:	e8 ce 2e 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c000ffff:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c0010006:	e8 cc fd ff ff       	call   c000fdd7 <Phys::allocateDMA(unsigned long)>
c001000b:	83 c4 10             	add    esp,0x10
c001000e:	85 c0                	test   eax,eax
c0010010:	75 56                	jne    c0010068 <Phys::allocatePage()+0xce>
c0010012:	83 ec 0c             	sub    esp,0xc
c0010015:	68 4d ac 02 c0       	push   0xc002ac4d
c001001a:	e8 71 a8 00 00       	call   c001a890 <Krnl::panic(char const*)>
c001001f:	83 c4 10             	add    esp,0x10
c0010022:	8b 1d 24 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002ef24
c0010028:	53                   	push   ebx
c0010029:	e8 c6 fe ff ff       	call   c000fef4 <Phys::getPageState(unsigned long)>
c001002e:	5a                   	pop    edx
c001002f:	84 c0                	test   al,al
c0010031:	75 89                	jne    c000ffbc <Phys::allocatePage()+0x22>
c0010033:	6a 01                	push   0x1
c0010035:	53                   	push   ebx
c0010036:	e8 87 fe ff ff       	call   c000fec2 <Phys::setPageState(unsigned long, bool)>
c001003b:	a1 30 ef 02 c0       	mov    eax,ds:0xc002ef30
c0010040:	59                   	pop    ecx
c0010041:	40                   	inc    eax
c0010042:	5b                   	pop    ebx
c0010043:	a3 30 ef 02 c0       	mov    ds:0xc002ef30,eax
c0010048:	8d 04 80             	lea    eax,[eax+eax*4]
c001004b:	8d 04 80             	lea    eax,[eax+eax*4]
c001004e:	c1 e0 02             	shl    eax,0x2
c0010051:	99                   	cdq    
c0010052:	f7 3d 34 ef 02 c0    	idiv   DWORD PTR ds:0xc002ef34
c0010058:	39 05 2c ef 02 c0    	cmp    DWORD PTR ds:0xc002ef2c,eax
c001005e:	75 0c                	jne    c001006c <Phys::allocatePage()+0xd2>
c0010060:	a1 24 ef 02 c0       	mov    eax,ds:0xc002ef24
c0010065:	c1 e0 0c             	shl    eax,0xc
c0010068:	5a                   	pop    edx
c0010069:	5b                   	pop    ebx
c001006a:	5e                   	pop    esi
c001006b:	c3                   	ret    
c001006c:	83 ec 0c             	sub    esp,0xc
c001006f:	a3 2c ef 02 c0       	mov    ds:0xc002ef2c,eax
c0010074:	50                   	push   eax
c0010075:	e8 f4 08 00 00       	call   c001096e <VgaText::updateRAMUsageDisplay(int)>
c001007a:	83 c4 10             	add    esp,0x10
c001007d:	eb e1                	jmp    c0010060 <Phys::allocatePage()+0xc6>

c001007f <Phys::allocateContiguousPages(int)>:
c001007f:	57                   	push   edi
c0010080:	56                   	push   esi
c0010081:	53                   	push   ebx
c0010082:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010086:	fa                   	cli    
c0010087:	ff 05 28 24 03 c0    	inc    DWORD PTR ds:0xc0032428
c001008d:	31 db                	xor    ebx,ebx
c001008f:	85 db                	test   ebx,ebx
c0010091:	75 11                	jne    c00100a4 <Phys::allocateContiguousPages(int)+0x25>
c0010093:	e8 02 ff ff ff       	call   c000ff9a <Phys::allocatePage()>
c0010098:	83 fe 01             	cmp    esi,0x1
c001009b:	89 c7                	mov    edi,eax
c001009d:	74 21                	je     c00100c0 <Phys::allocateContiguousPages(int)+0x41>
c001009f:	bb 01 00 00 00       	mov    ebx,0x1
c00100a4:	e8 f1 fe ff ff       	call   c000ff9a <Phys::allocatePage()>
c00100a9:	89 da                	mov    edx,ebx
c00100ab:	c1 e2 0c             	shl    edx,0xc
c00100ae:	01 fa                	add    edx,edi
c00100b0:	39 c2                	cmp    edx,eax
c00100b2:	74 20                	je     c00100d4 <Phys::allocateContiguousPages(int)+0x55>
c00100b4:	bb 01 00 00 00       	mov    ebx,0x1
c00100b9:	89 c7                	mov    edi,eax
c00100bb:	83 fe 01             	cmp    esi,0x1
c00100be:	75 e4                	jne    c00100a4 <Phys::allocateContiguousPages(int)+0x25>
c00100c0:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c00100c5:	48                   	dec    eax
c00100c6:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c00100cb:	75 01                	jne    c00100ce <Phys::allocateContiguousPages(int)+0x4f>
c00100cd:	fb                   	sti    
c00100ce:	89 f8                	mov    eax,edi
c00100d0:	5b                   	pop    ebx
c00100d1:	5e                   	pop    esi
c00100d2:	5f                   	pop    edi
c00100d3:	c3                   	ret    
c00100d4:	43                   	inc    ebx
c00100d5:	39 f3                	cmp    ebx,esi
c00100d7:	75 b6                	jne    c001008f <Phys::allocateContiguousPages(int)+0x10>
c00100d9:	eb e5                	jmp    c00100c0 <Phys::allocateContiguousPages(int)+0x41>

c00100db <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c00100db:	56                   	push   esi
c00100dc:	53                   	push   ebx
c00100dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00100e1:	39 1d 28 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef28,ebx
c00100e7:	73 06                	jae    c00100ef <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c00100e9:	89 1d 28 ef 02 c0    	mov    DWORD PTR ds:0xc002ef28,ebx
c00100ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100f3:	c1 eb 0c             	shr    ebx,0xc
c00100f6:	c1 e8 0c             	shr    eax,0xc
c00100f9:	39 d8                	cmp    eax,ebx
c00100fb:	73 13                	jae    c0010110 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c00100fd:	6a 00                	push   0x0
c00100ff:	8d 70 01             	lea    esi,[eax+0x1]
c0010102:	50                   	push   eax
c0010103:	e8 ba fd ff ff       	call   c000fec2 <Phys::setPageState(unsigned long, bool)>
c0010108:	5a                   	pop    edx
c0010109:	89 f0                	mov    eax,esi
c001010b:	59                   	pop    ecx
c001010c:	39 f3                	cmp    ebx,esi
c001010e:	75 ed                	jne    c00100fd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010110:	5b                   	pop    ebx
c0010111:	5e                   	pop    esi
c0010112:	c3                   	ret    

c0010113 <Phys::physicalMemorySetup(unsigned int)>:
c0010113:	55                   	push   ebp
c0010114:	57                   	push   edi
c0010115:	56                   	push   esi
c0010116:	53                   	push   ebx
c0010117:	31 db                	xor    ebx,ebx
c0010119:	83 ec 40             	sub    esp,0x40
c001011c:	6a 30                	push   0x30
c001011e:	6a 00                	push   0x0
c0010120:	68 40 ef 02 c0       	push   0xc002ef40
c0010125:	e8 42 06 ff ff       	call   c000076c <memset>
c001012a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001012e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010133:	05 00 10 00 00       	add    eax,0x1000
c0010138:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001013c:	83 c4 10             	add    esp,0x10
c001013f:	83 ec 08             	sub    esp,0x8
c0010142:	6a 01                	push   0x1
c0010144:	53                   	push   ebx
c0010145:	43                   	inc    ebx
c0010146:	e8 77 fd ff ff       	call   c000fec2 <Phys::setPageState(unsigned long, bool)>
c001014b:	83 c4 10             	add    esp,0x10
c001014e:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010154:	75 e9                	jne    c001013f <Phys::physicalMemorySetup(unsigned int)+0x2c>
c0010156:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c001015d:	66 85 c0             	test   ax,ax
c0010160:	0f 84 8e 01 00 00    	je     c00102f4 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c0010166:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001016a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010172:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010176:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c001017b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001017f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010187:	eb 15                	jmp    c001019e <Phys::physicalMemorySetup(unsigned int)+0x8b>
c0010189:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001018d:	83 c3 18             	add    ebx,0x18
c0010190:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010194:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010198:	0f 84 66 01 00 00    	je     c0010304 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001019e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00101a1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00101a4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00101a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00101ab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00101af:	8b 33                	mov    esi,DWORD PTR [ebx]
c00101b1:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00101b4:	01 f0                	add    eax,esi
c00101b6:	55                   	push   ebp
c00101b7:	11 fa                	adc    edx,edi
c00101b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00101bd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00101c1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00101c5:	56                   	push   esi
c00101c6:	68 88 ac 02 c0       	push   0xc002ac88
c00101cb:	e8 fd 2c 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00101d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101d4:	83 c4 10             	add    esp,0x10
c00101d7:	09 f8                	or     eax,edi
c00101d9:	0f 85 25 01 00 00    	jne    c0010304 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00101df:	4d                   	dec    ebp
c00101e0:	75 a7                	jne    c0010189 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101e2:	ba 00 00 08 00       	mov    edx,0x80000
c00101e7:	89 c1                	mov    ecx,eax
c00101e9:	39 f2                	cmp    edx,esi
c00101eb:	19 f9                	sbb    ecx,edi
c00101ed:	0f 82 a7 00 00 00    	jb     c001029a <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101f3:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00101f7:	89 c1                	mov    ecx,eax
c00101f9:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c00101fd:	0f 83 97 00 00 00    	jae    c001029a <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010203:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010208:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001020c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010210:	39 fa                	cmp    edx,edi
c0010212:	19 e8                	sbb    eax,ebp
c0010214:	0f 82 14 01 00 00    	jb     c001032e <Phys::physicalMemorySetup(unsigned int)+0x21b>
c001021a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001021e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010222:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010228:	ba ff 1f 00 00       	mov    edx,0x1fff
c001022d:	83 d5 ff             	adc    ebp,0xffffffff
c0010230:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010234:	31 c0                	xor    eax,eax
c0010236:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c001023a:	39 fa                	cmp    edx,edi
c001023c:	89 c1                	mov    ecx,eax
c001023e:	19 e9                	sbb    ecx,ebp
c0010240:	0f 83 43 ff ff ff    	jae    c0010189 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010246:	be 00 00 08 00       	mov    esi,0x80000
c001024b:	50                   	push   eax
c001024c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010250:	57                   	push   edi
c0010251:	56                   	push   esi
c0010252:	68 ac ac 02 c0       	push   0xc002acac
c0010257:	e8 71 2c 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001025c:	5a                   	pop    edx
c001025d:	59                   	pop    ecx
c001025e:	57                   	push   edi
c001025f:	56                   	push   esi
c0010260:	e8 76 fe ff ff       	call   c00100db <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010265:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010269:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001026d:	83 c4 0c             	add    esp,0xc
c0010270:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010274:	03 05 34 ef 02 c0    	add    eax,DWORD PTR ds:0xc002ef34
c001027a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010281:	a3 34 ef 02 c0       	mov    ds:0xc002ef34,eax
c0010286:	52                   	push   edx
c0010287:	50                   	push   eax
c0010288:	68 69 ac 02 c0       	push   0xc002ac69
c001028d:	e8 3b 2c 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0010292:	83 c4 10             	add    esp,0x10
c0010295:	e9 ef fe ff ff       	jmp    c0010189 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001029a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001029e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00102a6:	39 ea                	cmp    edx,ebp
c00102a8:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00102ac:	0f 82 d7 fe ff ff    	jb     c0010189 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00102b2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00102b7:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00102bb:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00102bf:	0f 83 c4 fe ff ff    	jae    c0010189 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00102c5:	39 ee                	cmp    esi,ebp
c00102c7:	89 f8                	mov    eax,edi
c00102c9:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00102cd:	0f 83 78 ff ff ff    	jae    c001024b <Phys::physicalMemorySetup(unsigned int)+0x138>
c00102d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00102d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00102db:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00102df:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00102e3:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c00102e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00102eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00102ef:	e9 57 ff ff ff       	jmp    c001024b <Phys::physicalMemorySetup(unsigned int)+0x138>
c00102f4:	83 ec 0c             	sub    esp,0xc
c00102f7:	68 5b ac 02 c0       	push   0xc002ac5b
c00102fc:	e8 8f a5 00 00       	call   c001a890 <Krnl::panic(char const*)>
c0010301:	83 c4 10             	add    esp,0x10
c0010304:	bb 40 01 00 00       	mov    ebx,0x140
c0010309:	83 ec 08             	sub    esp,0x8
c001030c:	6a 00                	push   0x0
c001030e:	53                   	push   ebx
c001030f:	43                   	inc    ebx
c0010310:	e8 ad fb ff ff       	call   c000fec2 <Phys::setPageState(unsigned long, bool)>
c0010315:	ff 05 34 ef 02 c0    	inc    DWORD PTR ds:0xc002ef34
c001031b:	83 c4 10             	add    esp,0x10
c001031e:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010324:	75 e3                	jne    c0010309 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010326:	83 c4 3c             	add    esp,0x3c
c0010329:	5b                   	pop    ebx
c001032a:	5e                   	pop    esi
c001032b:	5f                   	pop    edi
c001032c:	5d                   	pop    ebp
c001032d:	c3                   	ret    
c001032e:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010336:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001033e:	e9 d7 fe ff ff       	jmp    c001021a <Phys::physicalMemorySetup(unsigned int)+0x107>
c0010343:	90                   	nop

c0010344 <Pipe::isAtty()>:
c0010344:	31 c0                	xor    eax,eax
c0010346:	c3                   	ret    
c0010347:	90                   	nop

c0010348 <Pipe::~Pipe()>:
c0010348:	83 ec 0c             	sub    esp,0xc
c001034b:	ba 18 ad 02 c0       	mov    edx,0xc002ad18
c0010350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010354:	89 10                	mov    DWORD PTR [eax],edx
c0010356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001035a:	83 ec 0c             	sub    esp,0xc
c001035d:	50                   	push   eax
c001035e:	e8 03 15 00 00       	call   c0011866 <UnixFile::~UnixFile()>
c0010363:	83 c4 10             	add    esp,0x10
c0010366:	90                   	nop
c0010367:	83 c4 0c             	add    esp,0xc
c001036a:	c3                   	ret    
c001036b:	90                   	nop

c001036c <Pipe::~Pipe()>:
c001036c:	83 ec 0c             	sub    esp,0xc
c001036f:	83 ec 0c             	sub    esp,0xc
c0010372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010376:	e8 cd ff ff ff       	call   c0010348 <Pipe::~Pipe()>
c001037b:	83 c4 10             	add    esp,0x10
c001037e:	83 ec 08             	sub    esp,0x8
c0010381:	6a 20                	push   0x20
c0010383:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010387:	e8 61 2a 00 00       	call   c0012ded <operator delete(void*, unsigned long)>
c001038c:	83 c4 10             	add    esp,0x10
c001038f:	83 c4 0c             	add    esp,0xc
c0010392:	c3                   	ret    
c0010393:	90                   	nop

c0010394 <Pipe::read(unsigned long long, void*, int*)>:
c0010394:	55                   	push   ebp
c0010395:	57                   	push   edi
c0010396:	56                   	push   esi
c0010397:	53                   	push   ebx
c0010398:	83 ec 1c             	sub    esp,0x1c
c001039b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001039f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00103a3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00103a7:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00103ab:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00103ae:	89 c8                	mov    eax,ecx
c00103b0:	99                   	cdq    
c00103b1:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00103b5:	74 24                	je     c00103db <Pipe::read(unsigned long long, void*, int*)+0x47>
c00103b7:	39 e9                	cmp    ecx,ebp
c00103b9:	89 d1                	mov    ecx,edx
c00103bb:	19 f1                	sbb    ecx,esi
c00103bd:	73 1c                	jae    c00103db <Pipe::read(unsigned long long, void*, int*)+0x47>
c00103bf:	fa                   	cli    
c00103c0:	ff 05 28 24 03 c0    	inc    DWORD PTR ds:0xc0032428
c00103c6:	e8 5b e1 00 00       	call   c001e526 <schedule()>
c00103cb:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c00103d0:	48                   	dec    eax
c00103d1:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c00103d6:	75 d3                	jne    c00103ab <Pipe::read(unsigned long long, void*, int*)+0x17>
c00103d8:	fb                   	sti    
c00103d9:	eb d0                	jmp    c00103ab <Pipe::read(unsigned long long, void*, int*)+0x17>
c00103db:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00103df:	39 e8                	cmp    eax,ebp
c00103e1:	89 d6                	mov    esi,edx
c00103e3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00103e7:	1b 74 24 0c          	sbb    esi,DWORD PTR [esp+0xc]
c00103eb:	73 08                	jae    c00103f5 <Pipe::read(unsigned long long, void*, int*)+0x61>
c00103ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00103f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00103f5:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00103f8:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00103fb:	29 f1                	sub    ecx,esi
c00103fd:	89 c8                	mov    eax,ecx
c00103ff:	99                   	cdq    
c0010400:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0010404:	89 d0                	mov    eax,edx
c0010406:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001040a:	19 c2                	sbb    edx,eax
c001040c:	73 04                	jae    c0010412 <Pipe::read(unsigned long long, void*, int*)+0x7e>
c001040e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010412:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010416:	89 d0                	mov    eax,edx
c0010418:	29 c8                	sub    eax,ecx
c001041a:	85 c9                	test   ecx,ecx
c001041c:	74 06                	je     c0010424 <Pipe::read(unsigned long long, void*, int*)+0x90>
c001041e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010421:	fc                   	cld    
c0010422:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010424:	85 c0                	test   eax,eax
c0010426:	74 0a                	je     c0010432 <Pipe::read(unsigned long long, void*, int*)+0x9e>
c0010428:	01 cf                	add    edi,ecx
c001042a:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001042d:	89 c1                	mov    ecx,eax
c001042f:	fc                   	cld    
c0010430:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010432:	29 53 14             	sub    DWORD PTR [ebx+0x14],edx
c0010435:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010438:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001043b:	99                   	cdq    
c001043c:	89 f7                	mov    edi,esi
c001043e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010442:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010446:	c1 ff 1f             	sar    edi,0x1f
c0010449:	57                   	push   edi
c001044a:	56                   	push   esi
c001044b:	52                   	push   edx
c001044c:	50                   	push   eax
c001044d:	e8 12 6f 01 00       	call   c0027364 <__umoddi3>
c0010452:	83 c4 10             	add    esp,0x10
c0010455:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010458:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001045d:	75 10                	jne    c001046f <Pipe::read(unsigned long long, void*, int*)+0xdb>
c001045f:	83 ec 0c             	sub    esp,0xc
c0010462:	68 d5 ac 02 c0       	push   0xc002acd5
c0010467:	e8 24 a4 00 00       	call   c001a890 <Krnl::panic(char const*)>
c001046c:	83 c4 10             	add    esp,0x10
c001046f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010473:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010477:	89 10                	mov    DWORD PTR [eax],edx
c0010479:	83 c4 1c             	add    esp,0x1c
c001047c:	31 c0                	xor    eax,eax
c001047e:	5b                   	pop    ebx
c001047f:	5e                   	pop    esi
c0010480:	5f                   	pop    edi
c0010481:	5d                   	pop    ebp
c0010482:	c3                   	ret    
c0010483:	90                   	nop

c0010484 <Pipe::write(unsigned long long, void*, int*)>:
c0010484:	55                   	push   ebp
c0010485:	57                   	push   edi
c0010486:	56                   	push   esi
c0010487:	53                   	push   ebx
c0010488:	83 ec 1c             	sub    esp,0x1c
c001048b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001048f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010493:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0010496:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001049a:	89 04 24             	mov    DWORD PTR [esp],eax
c001049d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00104a1:	89 c8                	mov    eax,ecx
c00104a3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00104a6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00104aa:	89 d6                	mov    esi,edx
c00104ac:	89 d7                	mov    edi,edx
c00104ae:	c1 ff 1f             	sar    edi,0x1f
c00104b1:	03 34 24             	add    esi,DWORD PTR [esp]
c00104b4:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00104b8:	c1 f8 1f             	sar    eax,0x1f
c00104bb:	39 f1                	cmp    ecx,esi
c00104bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00104c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104c5:	19 f8                	sbb    eax,edi
c00104c7:	b8 01 00 00 00       	mov    eax,0x1
c00104cc:	72 6e                	jb     c001053c <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00104ce:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00104d2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00104d5:	01 d0                	add    eax,edx
c00104d7:	99                   	cdq    
c00104d8:	f7 f9                	idiv   ecx
c00104da:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00104dd:	29 d1                	sub    ecx,edx
c00104df:	89 cf                	mov    edi,ecx
c00104e1:	c1 ff 1f             	sar    edi,0x1f
c00104e4:	39 c8                	cmp    eax,ecx
c00104e6:	19 fd                	sbb    ebp,edi
c00104e8:	bd 00 00 00 00       	mov    ebp,0x0
c00104ed:	72 04                	jb     c00104f3 <Pipe::write(unsigned long long, void*, int*)+0x6f>
c00104ef:	89 c5                	mov    ebp,eax
c00104f1:	29 cd                	sub    ebp,ecx
c00104f3:	89 c1                	mov    ecx,eax
c00104f5:	29 e9                	sub    ecx,ebp
c00104f7:	74 0c                	je     c0010505 <Pipe::write(unsigned long long, void*, int*)+0x81>
c00104f9:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00104fc:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010500:	01 d7                	add    edi,edx
c0010502:	fc                   	cld    
c0010503:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010505:	85 ed                	test   ebp,ebp
c0010507:	74 0e                	je     c0010517 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0010509:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001050d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0010510:	01 ce                	add    esi,ecx
c0010512:	89 e9                	mov    ecx,ebp
c0010514:	fc                   	cld    
c0010515:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010517:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c001051a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001051f:	75 10                	jne    c0010531 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0010521:	83 ec 0c             	sub    esp,0xc
c0010524:	68 f1 ac 02 c0       	push   0xc002acf1
c0010529:	e8 62 a3 00 00       	call   c001a890 <Krnl::panic(char const*)>
c001052e:	83 c4 10             	add    esp,0x10
c0010531:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010535:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0010538:	89 18                	mov    DWORD PTR [eax],ebx
c001053a:	31 c0                	xor    eax,eax
c001053c:	83 c4 1c             	add    esp,0x1c
c001053f:	5b                   	pop    ebx
c0010540:	5e                   	pop    esi
c0010541:	5f                   	pop    edi
c0010542:	5d                   	pop    ebp
c0010543:	c3                   	ret    

c0010544 <Pipe::Pipe(int)>:
c0010544:	83 ec 0c             	sub    esp,0xc
c0010547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001054b:	83 ec 08             	sub    esp,0x8
c001054e:	6a 00                	push   0x0
c0010550:	50                   	push   eax
c0010551:	e8 2e 11 00 00       	call   c0011684 <UnixFile::UnixFile(int)>
c0010556:	83 c4 10             	add    esp,0x10
c0010559:	ba 18 ad 02 c0       	mov    edx,0xc002ad18
c001055e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010562:	89 10                	mov    DWORD PTR [eax],edx
c0010564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010568:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001056c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001056f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010573:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001057a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001057e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010585:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010589:	83 ec 0c             	sub    esp,0xc
c001058c:	50                   	push   eax
c001058d:	e8 9c f3 ff ff       	call   c000f92e <malloc>
c0010592:	83 c4 10             	add    esp,0x10
c0010595:	89 c2                	mov    edx,eax
c0010597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001059b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001059e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105a2:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00105a6:	90                   	nop
c00105a7:	83 c4 0c             	add    esp,0xc
c00105aa:	c3                   	ret    
c00105ab:	90                   	nop

c00105ac <VgaText::isAtty()>:
c00105ac:	b0 01                	mov    al,0x1
c00105ae:	c3                   	ret    
c00105af:	90                   	nop

c00105b0 <VgaText::~VgaText()>:
c00105b0:	83 ec 0c             	sub    esp,0xc
c00105b3:	ba d4 ad 02 c0       	mov    edx,0xc002add4
c00105b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105bc:	89 10                	mov    DWORD PTR [eax],edx
c00105be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105c2:	83 ec 0c             	sub    esp,0xc
c00105c5:	50                   	push   eax
c00105c6:	e8 9b 12 00 00       	call   c0011866 <UnixFile::~UnixFile()>
c00105cb:	83 c4 10             	add    esp,0x10
c00105ce:	90                   	nop
c00105cf:	83 c4 0c             	add    esp,0xc
c00105d2:	c3                   	ret    
c00105d3:	90                   	nop

c00105d4 <VgaText::~VgaText()>:
c00105d4:	83 ec 0c             	sub    esp,0xc
c00105d7:	83 ec 0c             	sub    esp,0xc
c00105da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105de:	e8 cd ff ff ff       	call   c00105b0 <VgaText::~VgaText()>
c00105e3:	83 c4 10             	add    esp,0x10
c00105e6:	83 ec 08             	sub    esp,0x8
c00105e9:	68 c4 02 00 00       	push   0x2c4
c00105ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105f2:	e8 f6 27 00 00       	call   c0012ded <operator delete(void*, unsigned long)>
c00105f7:	83 c4 10             	add    esp,0x10
c00105fa:	83 c4 0c             	add    esp,0xc
c00105fd:	c3                   	ret    

c00105fe <VgaText::read(unsigned long long, void*, int*)>:
c00105fe:	83 ec 10             	sub    esp,0x10
c0010601:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010605:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010609:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001060d:	e8 6c 5d 00 00       	call   c001637e <readKeyboard(VgaText*, char*, unsigned long)>
c0010612:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010616:	89 02                	mov    DWORD PTR [edx],eax
c0010618:	31 c0                	xor    eax,eax
c001061a:	83 c4 1c             	add    esp,0x1c
c001061d:	c3                   	ret    

c001061e <setTerminalScrollLock(bool)>:
c001061e:	c3                   	ret    

c001061f <addToTerminalCycle(VgaText*)>:
c001061f:	8b 15 c0 ef 02 c0    	mov    edx,DWORD PTR ds:0xc002efc0
c0010625:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010629:	85 d2                	test   edx,edx
c001062b:	75 09                	jne    c0010636 <addToTerminalCycle(VgaText*)+0x17>
c001062d:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010630:	a3 c0 ef 02 c0       	mov    ds:0xc002efc0,eax
c0010635:	c3                   	ret    
c0010636:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c0010639:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001063c:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c001063f:	c3                   	ret    

c0010640 <installVgaTextImplementation()>:
c0010640:	83 ec 10             	sub    esp,0x10
c0010643:	6a 20                	push   0x20
c0010645:	6a 00                	push   0x0
c0010647:	68 a0 ef 02 c0       	push   0xc002efa0
c001064c:	e8 1b 01 ff ff       	call   c000076c <memset>
c0010651:	83 c4 1c             	add    esp,0x1c
c0010654:	c3                   	ret    

c0010655 <scrollTerminalScrollLock(int)>:
c0010655:	c3                   	ret    

c0010656 <VgaText::load()>:
c0010656:	53                   	push   ebx
c0010657:	31 c0                	xor    eax,eax
c0010659:	83 ec 58             	sub    esp,0x58
c001065c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010660:	89 e2                	mov    edx,esp
c0010662:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010666:	40                   	inc    eax
c0010667:	83 f8 50             	cmp    eax,0x50
c001066a:	75 f6                	jne    c0010662 <VgaText::load()+0xc>
c001066c:	31 c0                	xor    eax,eax
c001066e:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c0010675:	84 c9                	test   cl,cl
c0010677:	74 06                	je     c001067f <VgaText::load()+0x29>
c0010679:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001067c:	40                   	inc    eax
c001067d:	eb ef                	jmp    c001066e <VgaText::load()+0x18>
c001067f:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c0010682:	85 c0                	test   eax,eax
c0010684:	74 09                	je     c001068f <VgaText::load()+0x39>
c0010686:	51                   	push   ecx
c0010687:	51                   	push   ecx
c0010688:	52                   	push   edx
c0010689:	53                   	push   ebx
c001068a:	ff d0                	call   eax
c001068c:	83 c4 10             	add    esp,0x10
c001068f:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c0010692:	85 c0                	test   eax,eax
c0010694:	74 09                	je     c001069f <VgaText::load()+0x49>
c0010696:	83 ec 0c             	sub    esp,0xc
c0010699:	53                   	push   ebx
c001069a:	ff d0                	call   eax
c001069c:	83 c4 10             	add    esp,0x10
c001069f:	83 c4 58             	add    esp,0x58
c00106a2:	5b                   	pop    ebx
c00106a3:	c3                   	ret    

c00106a4 <VgaText::updateCursor()>:
c00106a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106a8:	39 05 c4 ef 02 c0    	cmp    DWORD PTR ds:0xc002efc4,eax
c00106ae:	75 09                	jne    c00106b9 <VgaText::updateCursor()+0x15>
c00106b0:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c00106b3:	85 c0                	test   eax,eax
c00106b5:	74 02                	je     c00106b9 <VgaText::updateCursor()+0x15>
c00106b7:	ff e0                	jmp    eax
c00106b9:	c3                   	ret    

c00106ba <VgaText::showCursor(bool)>:
c00106ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106c2:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c00106c5:	c3                   	ret    

c00106c6 <VgaText::disableBlink(bool)>:
c00106c6:	56                   	push   esi
c00106c7:	53                   	push   ebx
c00106c8:	51                   	push   ecx
c00106c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106cd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00106d1:	39 1d c4 ef 02 c0    	cmp    DWORD PTR ds:0xc002efc4,ebx
c00106d7:	75 15                	jne    c00106ee <VgaText::disableBlink(bool)+0x28>
c00106d9:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c00106dc:	85 c0                	test   eax,eax
c00106de:	74 0e                	je     c00106ee <VgaText::disableBlink(bool)+0x28>
c00106e0:	89 f1                	mov    ecx,esi
c00106e2:	52                   	push   edx
c00106e3:	52                   	push   edx
c00106e4:	0f b6 d1             	movzx  edx,cl
c00106e7:	52                   	push   edx
c00106e8:	53                   	push   ebx
c00106e9:	ff d0                	call   eax
c00106eb:	83 c4 10             	add    esp,0x10
c00106ee:	89 f0                	mov    eax,esi
c00106f0:	83 f0 01             	xor    eax,0x1
c00106f3:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c00106f6:	58                   	pop    eax
c00106f7:	5b                   	pop    ebx
c00106f8:	5e                   	pop    esi
c00106f9:	c3                   	ret    

c00106fa <VgaText::doANSI_SGR(int)>:
c00106fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010702:	85 d2                	test   edx,edx
c0010704:	75 0b                	jne    c0010711 <VgaText::doANSI_SGR(int)+0x17>
c0010706:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010709:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001070c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001070f:	eb 59                	jmp    c001076a <VgaText::doANSI_SGR(int)+0x70>
c0010711:	83 fa 07             	cmp    edx,0x7
c0010714:	75 0b                	jne    c0010721 <VgaText::doANSI_SGR(int)+0x27>
c0010716:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010719:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c001071c:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c001071f:	eb 49                	jmp    c001076a <VgaText::doANSI_SGR(int)+0x70>
c0010721:	83 fa 1b             	cmp    edx,0x1b
c0010724:	74 e0                	je     c0010706 <VgaText::doANSI_SGR(int)+0xc>
c0010726:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010729:	83 f9 07             	cmp    ecx,0x7
c001072c:	77 09                	ja     c0010737 <VgaText::doANSI_SGR(int)+0x3d>
c001072e:	8b 14 8d 40 de 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd21c0]
c0010735:	eb 20                	jmp    c0010757 <VgaText::doANSI_SGR(int)+0x5d>
c0010737:	8d 4a d8             	lea    ecx,[edx-0x28]
c001073a:	83 f9 07             	cmp    ecx,0x7
c001073d:	77 09                	ja     c0010748 <VgaText::doANSI_SGR(int)+0x4e>
c001073f:	8b 14 8d 40 de 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd21c0]
c0010746:	eb 22                	jmp    c001076a <VgaText::doANSI_SGR(int)+0x70>
c0010748:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001074b:	83 f9 07             	cmp    ecx,0x7
c001074e:	77 0b                	ja     c001075b <VgaText::doANSI_SGR(int)+0x61>
c0010750:	8b 14 95 f8 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2308]
c0010757:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001075a:	c3                   	ret    
c001075b:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001075e:	83 f9 07             	cmp    ecx,0x7
c0010761:	77 0a                	ja     c001076d <VgaText::doANSI_SGR(int)+0x73>
c0010763:	8b 14 95 d0 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2330]
c001076a:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001076d:	c3                   	ret    

c001076e <VgaText::setDefaultBgColour(VgaColour)>:
c001076e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010772:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010776:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010779:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001077c:	c3                   	ret    
c001077d:	90                   	nop

c001077e <VgaText::setDefaultFgColour(VgaColour)>:
c001077e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010782:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010786:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010789:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001078c:	c3                   	ret    
c001078d:	90                   	nop

c001078e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001078e:	53                   	push   ebx
c001078f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010793:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010797:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001079b:	51                   	push   ecx
c001079c:	e8 cd ff ff ff       	call   c001076e <VgaText::setDefaultBgColour(VgaColour)>
c00107a1:	58                   	pop    eax
c00107a2:	5a                   	pop    edx
c00107a3:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00107a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00107ab:	5b                   	pop    ebx
c00107ac:	eb d0                	jmp    c001077e <VgaText::setDefaultFgColour(VgaColour)>

c00107ae <VgaText::combineColours(unsigned char, unsigned char)>:
c00107ae:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00107b2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00107b7:	83 e0 0f             	and    eax,0xf
c00107ba:	c1 e2 04             	shl    edx,0x4
c00107bd:	09 d0                	or     eax,edx
c00107bf:	c3                   	ret    

c00107c0 <VgaText::scrollScreen()>:
c00107c0:	55                   	push   ebp
c00107c1:	b9 01 00 00 00       	mov    ecx,0x1
c00107c6:	57                   	push   edi
c00107c7:	56                   	push   esi
c00107c8:	53                   	push   ebx
c00107c9:	83 ec 0c             	sub    esp,0xc
c00107cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00107d0:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00107d6:	31 ff                	xor    edi,edi
c00107d8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00107db:	83 f9 17             	cmp    ecx,0x17
c00107de:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00107e1:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00107e8:	75 27                	jne    c0010811 <VgaText::scrollScreen()+0x51>
c00107ea:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00107ed:	01 f5                	add    ebp,esi
c00107ef:	f7 c7 01 00 00 00    	test   edi,0x1
c00107f5:	74 16                	je     c001080d <VgaText::scrollScreen()+0x4d>
c00107f7:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00107fb:	50                   	push   eax
c00107fc:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010800:	50                   	push   eax
c0010801:	e8 a8 ff ff ff       	call   c00107ae <VgaText::combineColours(unsigned char, unsigned char)>
c0010806:	5a                   	pop    edx
c0010807:	5a                   	pop    edx
c0010808:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c001080b:	eb 04                	jmp    c0010811 <VgaText::scrollScreen()+0x51>
c001080d:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0010811:	47                   	inc    edi
c0010812:	46                   	inc    esi
c0010813:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010819:	75 bd                	jne    c00107d8 <VgaText::scrollScreen()+0x18>
c001081b:	41                   	inc    ecx
c001081c:	83 f9 18             	cmp    ecx,0x18
c001081f:	75 af                	jne    c00107d0 <VgaText::scrollScreen()+0x10>
c0010821:	39 1d c4 ef 02 c0    	cmp    DWORD PTR ds:0xc002efc4,ebx
c0010827:	75 1b                	jne    c0010844 <VgaText::scrollScreen()+0x84>
c0010829:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001082d:	74 05                	je     c0010834 <VgaText::scrollScreen()+0x74>
c001082f:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0010832:	eb 10                	jmp    c0010844 <VgaText::scrollScreen()+0x84>
c0010834:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010837:	85 c0                	test   eax,eax
c0010839:	74 09                	je     c0010844 <VgaText::scrollScreen()+0x84>
c001083b:	83 ec 0c             	sub    esp,0xc
c001083e:	53                   	push   ebx
c001083f:	ff d0                	call   eax
c0010841:	83 c4 10             	add    esp,0x10
c0010844:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010848:	83 c4 0c             	add    esp,0xc
c001084b:	5b                   	pop    ebx
c001084c:	5e                   	pop    esi
c001084d:	5f                   	pop    edi
c001084e:	5d                   	pop    ebp
c001084f:	e9 50 fe ff ff       	jmp    c00106a4 <VgaText::updateCursor()>

c0010854 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010854:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010859:	c1 e0 08             	shl    eax,0x8
c001085c:	89 c2                	mov    edx,eax
c001085e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010863:	09 d0                	or     eax,edx
c0010865:	c3                   	ret    

c0010866 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010866:	56                   	push   esi
c0010867:	53                   	push   ebx
c0010868:	51                   	push   ecx
c0010869:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001086d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010872:	50                   	push   eax
c0010873:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010878:	50                   	push   eax
c0010879:	e8 30 ff ff ff       	call   c00107ae <VgaText::combineColours(unsigned char, unsigned char)>
c001087e:	5b                   	pop    ebx
c001087f:	0f b6 c0             	movzx  eax,al
c0010882:	5e                   	pop    esi
c0010883:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010888:	50                   	push   eax
c0010889:	53                   	push   ebx
c001088a:	e8 c5 ff ff ff       	call   c0010854 <VgaText::combineCharAndColour(char, unsigned char)>
c001088f:	5a                   	pop    edx
c0010890:	5e                   	pop    esi
c0010891:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c0010894:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001089a:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001089e:	0f b7 d2             	movzx  edx,dx
c00108a1:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c00108a5:	39 0d c4 ef 02 c0    	cmp    DWORD PTR ds:0xc002efc4,ecx
c00108ab:	75 10                	jne    c00108bd <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00108ad:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c00108b0:	85 c0                	test   eax,eax
c00108b2:	74 09                	je     c00108bd <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00108b4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00108b8:	5a                   	pop    edx
c00108b9:	5b                   	pop    ebx
c00108ba:	5e                   	pop    esi
c00108bb:	ff e0                	jmp    eax
c00108bd:	58                   	pop    eax
c00108be:	5b                   	pop    ebx
c00108bf:	5e                   	pop    esi
c00108c0:	c3                   	ret    
c00108c1:	90                   	nop

c00108c2 <VgaText::getCursorX()>:
c00108c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108c6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00108c9:	c3                   	ret    

c00108ca <VgaText::getCursorY()>:
c00108ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108ce:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00108d1:	c3                   	ret    

c00108d2 <VgaText::setCursor(int, int)>:
c00108d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108da:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00108dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108e1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00108e4:	e9 bb fd ff ff       	jmp    c00106a4 <VgaText::updateCursor()>
c00108e9:	90                   	nop

c00108ea <VgaText::setCursorX(int)>:
c00108ea:	83 ec 10             	sub    esp,0x10
c00108ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108f1:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00108f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108f8:	50                   	push   eax
c00108f9:	e8 d4 ff ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c00108fe:	83 c4 1c             	add    esp,0x1c
c0010901:	c3                   	ret    

c0010902 <VgaText::setCursorY(int)>:
c0010902:	83 ec 10             	sub    esp,0x10
c0010905:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010909:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001090d:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010910:	50                   	push   eax
c0010911:	e8 bc ff ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c0010916:	83 c4 1c             	add    esp,0x1c
c0010919:	c3                   	ret    

c001091a <VgaText::incrementCursor(bool)>:
c001091a:	56                   	push   esi
c001091b:	53                   	push   ebx
c001091c:	51                   	push   ecx
c001091d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010921:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010925:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0010928:	40                   	inc    eax
c0010929:	83 f8 50             	cmp    eax,0x50
c001092c:	74 05                	je     c0010933 <VgaText::incrementCursor(bool)+0x19>
c001092e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010931:	eb 24                	jmp    c0010957 <VgaText::incrementCursor(bool)+0x3d>
c0010933:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010936:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001093d:	8d 50 01             	lea    edx,[eax+0x1]
c0010940:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010943:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010946:	75 0f                	jne    c0010957 <VgaText::incrementCursor(bool)+0x3d>
c0010948:	83 ec 0c             	sub    esp,0xc
c001094b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001094e:	53                   	push   ebx
c001094f:	e8 6c fe ff ff       	call   c00107c0 <VgaText::scrollScreen()>
c0010954:	83 c4 10             	add    esp,0x10
c0010957:	89 f0                	mov    eax,esi
c0010959:	84 c0                	test   al,al
c001095b:	74 0c                	je     c0010969 <VgaText::incrementCursor(bool)+0x4f>
c001095d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010961:	5a                   	pop    edx
c0010962:	5b                   	pop    ebx
c0010963:	5e                   	pop    esi
c0010964:	e9 3b fd ff ff       	jmp    c00106a4 <VgaText::updateCursor()>
c0010969:	58                   	pop    eax
c001096a:	5b                   	pop    ebx
c001096b:	5e                   	pop    esi
c001096c:	c3                   	ret    
c001096d:	90                   	nop

c001096e <VgaText::updateRAMUsageDisplay(int)>:
c001096e:	56                   	push   esi
c001096f:	8b 35 20 de 02 c0    	mov    esi,DWORD PTR ds:0xc002de20
c0010975:	53                   	push   ebx
c0010976:	bb 0a 00 00 00       	mov    ebx,0xa
c001097b:	6a 0f                	push   0xf
c001097d:	6a 00                	push   0x0
c001097f:	e8 2a fe ff ff       	call   c00107ae <VgaText::combineColours(unsigned char, unsigned char)>
c0010984:	5a                   	pop    edx
c0010985:	59                   	pop    ecx
c0010986:	0f b6 c8             	movzx  ecx,al
c0010989:	51                   	push   ecx
c001098a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001098e:	99                   	cdq    
c001098f:	f7 fb                	idiv   ebx
c0010991:	89 d3                	mov    ebx,edx
c0010993:	83 c0 30             	add    eax,0x30
c0010996:	83 c3 30             	add    ebx,0x30
c0010999:	0f be c0             	movsx  eax,al
c001099c:	0f b6 db             	movzx  ebx,bl
c001099f:	50                   	push   eax
c00109a0:	e8 af fe ff ff       	call   c0010854 <VgaText::combineCharAndColour(char, unsigned char)>
c00109a5:	5a                   	pop    edx
c00109a6:	5a                   	pop    edx
c00109a7:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00109ae:	51                   	push   ecx
c00109af:	53                   	push   ebx
c00109b0:	e8 9f fe ff ff       	call   c0010854 <VgaText::combineCharAndColour(char, unsigned char)>
c00109b5:	5b                   	pop    ebx
c00109b6:	5a                   	pop    edx
c00109b7:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00109be:	51                   	push   ecx
c00109bf:	6a 25                	push   0x25
c00109c1:	e8 8e fe ff ff       	call   c0010854 <VgaText::combineCharAndColour(char, unsigned char)>
c00109c6:	59                   	pop    ecx
c00109c7:	5b                   	pop    ebx
c00109c8:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00109cf:	5b                   	pop    ebx
c00109d0:	5e                   	pop    esi
c00109d1:	c3                   	ret    

c00109d2 <VgaText::updateDiskUsage()>:
c00109d2:	55                   	push   ebp
c00109d3:	bd 10 27 00 00       	mov    ebp,0x2710
c00109d8:	57                   	push   edi
c00109d9:	8b 3d 20 de 02 c0    	mov    edi,DWORD PTR ds:0xc002de20
c00109df:	56                   	push   esi
c00109e0:	53                   	push   ebx
c00109e1:	6a 0f                	push   0xf
c00109e3:	6a 00                	push   0x0
c00109e5:	e8 c4 fd ff ff       	call   c00107ae <VgaText::combineColours(unsigned char, unsigned char)>
c00109ea:	5a                   	pop    edx
c00109eb:	0f b6 d8             	movzx  ebx,al
c00109ee:	59                   	pop    ecx
c00109ef:	8b 35 48 32 03 c0    	mov    esi,DWORD PTR ds:0xc0033248
c00109f5:	53                   	push   ebx
c00109f6:	b9 0a 00 00 00       	mov    ecx,0xa
c00109fb:	89 f0                	mov    eax,esi
c00109fd:	99                   	cdq    
c00109fe:	f7 fd                	idiv   ebp
c0010a00:	99                   	cdq    
c0010a01:	f7 f9                	idiv   ecx
c0010a03:	8d 42 30             	lea    eax,[edx+0x30]
c0010a06:	0f b6 c0             	movzx  eax,al
c0010a09:	50                   	push   eax
c0010a0a:	e8 45 fe ff ff       	call   c0010854 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a0f:	5d                   	pop    ebp
c0010a10:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a15:	5a                   	pop    edx
c0010a16:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a1a:	53                   	push   ebx
c0010a1b:	89 f0                	mov    eax,esi
c0010a1d:	99                   	cdq    
c0010a1e:	f7 fd                	idiv   ebp
c0010a20:	99                   	cdq    
c0010a21:	f7 f9                	idiv   ecx
c0010a23:	8d 42 30             	lea    eax,[edx+0x30]
c0010a26:	0f b6 c0             	movzx  eax,al
c0010a29:	50                   	push   eax
c0010a2a:	e8 25 fe ff ff       	call   c0010854 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a2f:	5d                   	pop    ebp
c0010a30:	bd 64 00 00 00       	mov    ebp,0x64
c0010a35:	5a                   	pop    edx
c0010a36:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a3d:	53                   	push   ebx
c0010a3e:	89 f0                	mov    eax,esi
c0010a40:	99                   	cdq    
c0010a41:	f7 fd                	idiv   ebp
c0010a43:	99                   	cdq    
c0010a44:	f7 f9                	idiv   ecx
c0010a46:	8d 42 30             	lea    eax,[edx+0x30]
c0010a49:	0f b6 c0             	movzx  eax,al
c0010a4c:	50                   	push   eax
c0010a4d:	e8 02 fe ff ff       	call   c0010854 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a52:	5d                   	pop    ebp
c0010a53:	5a                   	pop    edx
c0010a54:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a5b:	53                   	push   ebx
c0010a5c:	89 f0                	mov    eax,esi
c0010a5e:	99                   	cdq    
c0010a5f:	f7 f9                	idiv   ecx
c0010a61:	89 d6                	mov    esi,edx
c0010a63:	99                   	cdq    
c0010a64:	f7 f9                	idiv   ecx
c0010a66:	8d 42 30             	lea    eax,[edx+0x30]
c0010a69:	0f b6 c0             	movzx  eax,al
c0010a6c:	50                   	push   eax
c0010a6d:	e8 e2 fd ff ff       	call   c0010854 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a72:	5d                   	pop    ebp
c0010a73:	5a                   	pop    edx
c0010a74:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a7b:	53                   	push   ebx
c0010a7c:	8d 46 30             	lea    eax,[esi+0x30]
c0010a7f:	0f b6 f0             	movzx  esi,al
c0010a82:	56                   	push   esi
c0010a83:	e8 cc fd ff ff       	call   c0010854 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a88:	5e                   	pop    esi
c0010a89:	8b 35 44 32 03 c0    	mov    esi,DWORD PTR ds:0xc0033244
c0010a8f:	5d                   	pop    ebp
c0010a90:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a97:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a9c:	53                   	push   ebx
c0010a9d:	89 f0                	mov    eax,esi
c0010a9f:	99                   	cdq    
c0010aa0:	f7 fd                	idiv   ebp
c0010aa2:	99                   	cdq    
c0010aa3:	f7 f9                	idiv   ecx
c0010aa5:	8d 42 30             	lea    eax,[edx+0x30]
c0010aa8:	0f b6 c0             	movzx  eax,al
c0010aab:	50                   	push   eax
c0010aac:	e8 a3 fd ff ff       	call   c0010854 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ab1:	5a                   	pop    edx
c0010ab2:	5d                   	pop    ebp
c0010ab3:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010aba:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010abf:	53                   	push   ebx
c0010ac0:	89 f0                	mov    eax,esi
c0010ac2:	99                   	cdq    
c0010ac3:	f7 fd                	idiv   ebp
c0010ac5:	99                   	cdq    
c0010ac6:	f7 f9                	idiv   ecx
c0010ac8:	8d 42 30             	lea    eax,[edx+0x30]
c0010acb:	0f b6 c0             	movzx  eax,al
c0010ace:	50                   	push   eax
c0010acf:	e8 80 fd ff ff       	call   c0010854 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad4:	5a                   	pop    edx
c0010ad5:	5d                   	pop    ebp
c0010ad6:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010add:	bd 64 00 00 00       	mov    ebp,0x64
c0010ae2:	53                   	push   ebx
c0010ae3:	89 f0                	mov    eax,esi
c0010ae5:	99                   	cdq    
c0010ae6:	f7 fd                	idiv   ebp
c0010ae8:	99                   	cdq    
c0010ae9:	f7 f9                	idiv   ecx
c0010aeb:	83 c2 30             	add    edx,0x30
c0010aee:	0f b6 d2             	movzx  edx,dl
c0010af1:	52                   	push   edx
c0010af2:	e8 5d fd ff ff       	call   c0010854 <VgaText::combineCharAndColour(char, unsigned char)>
c0010af7:	5a                   	pop    edx
c0010af8:	5d                   	pop    ebp
c0010af9:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010b00:	53                   	push   ebx
c0010b01:	89 f0                	mov    eax,esi
c0010b03:	99                   	cdq    
c0010b04:	f7 f9                	idiv   ecx
c0010b06:	89 d6                	mov    esi,edx
c0010b08:	99                   	cdq    
c0010b09:	f7 f9                	idiv   ecx
c0010b0b:	8d 42 30             	lea    eax,[edx+0x30]
c0010b0e:	0f b6 c0             	movzx  eax,al
c0010b11:	50                   	push   eax
c0010b12:	e8 3d fd ff ff       	call   c0010854 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b17:	5a                   	pop    edx
c0010b18:	59                   	pop    ecx
c0010b19:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b20:	53                   	push   ebx
c0010b21:	8d 46 30             	lea    eax,[esi+0x30]
c0010b24:	0f b6 f0             	movzx  esi,al
c0010b27:	56                   	push   esi
c0010b28:	e8 27 fd ff ff       	call   c0010854 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b2d:	5b                   	pop    ebx
c0010b2e:	5e                   	pop    esi
c0010b2f:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b36:	5b                   	pop    ebx
c0010b37:	5e                   	pop    esi
c0010b38:	5f                   	pop    edi
c0010b39:	5d                   	pop    ebp
c0010b3a:	c3                   	ret    
c0010b3b:	90                   	nop

c0010b3c <VgaText::updateTitle()>:
c0010b3c:	53                   	push   ebx
c0010b3d:	31 c0                	xor    eax,eax
c0010b3f:	83 ec 58             	sub    esp,0x58
c0010b42:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b46:	89 e1                	mov    ecx,esp
c0010b48:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b4c:	40                   	inc    eax
c0010b4d:	83 f8 50             	cmp    eax,0x50
c0010b50:	75 f6                	jne    c0010b48 <VgaText::updateTitle()+0xc>
c0010b52:	31 c0                	xor    eax,eax
c0010b54:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010b5b:	84 db                	test   bl,bl
c0010b5d:	74 06                	je     c0010b65 <VgaText::updateTitle()+0x29>
c0010b5f:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b62:	40                   	inc    eax
c0010b63:	eb ef                	jmp    c0010b54 <VgaText::updateTitle()+0x18>
c0010b65:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010b68:	85 c0                	test   eax,eax
c0010b6a:	74 09                	je     c0010b75 <VgaText::updateTitle()+0x39>
c0010b6c:	53                   	push   ebx
c0010b6d:	53                   	push   ebx
c0010b6e:	51                   	push   ecx
c0010b6f:	52                   	push   edx
c0010b70:	ff d0                	call   eax
c0010b72:	83 c4 10             	add    esp,0x10
c0010b75:	e8 58 fe ff ff       	call   c00109d2 <VgaText::updateDiskUsage()>
c0010b7a:	83 c4 58             	add    esp,0x58
c0010b7d:	5b                   	pop    ebx
c0010b7e:	c3                   	ret    
c0010b7f:	90                   	nop

c0010b80 <VgaText::setTitleTextColour(VgaColour)>:
c0010b80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b88:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010b8b:	eb af                	jmp    c0010b3c <VgaText::updateTitle()>
c0010b8d:	90                   	nop

c0010b8e <VgaText::setTitleColour(VgaColour)>:
c0010b8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b96:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010b99:	eb a1                	jmp    c0010b3c <VgaText::updateTitle()>
c0010b9b:	90                   	nop

c0010b9c <VgaText::setTitle(char*)>:
c0010b9c:	53                   	push   ebx
c0010b9d:	83 ec 10             	sub    esp,0x10
c0010ba0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010ba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ba8:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010bae:	50                   	push   eax
c0010baf:	e8 74 fc fe ff       	call   c0000828 <strcpy>
c0010bb4:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010bb8:	83 c4 18             	add    esp,0x18
c0010bbb:	5b                   	pop    ebx
c0010bbc:	e9 7b ff ff ff       	jmp    c0010b3c <VgaText::updateTitle()>
c0010bc1:	90                   	nop

c0010bc2 <VgaText::decrementCursor(bool)>:
c0010bc2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010bc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010bca:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010bcd:	85 c0                	test   eax,eax
c0010bcf:	74 04                	je     c0010bd5 <VgaText::decrementCursor(bool)+0x13>
c0010bd1:	48                   	dec    eax
c0010bd2:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010bd5:	84 c9                	test   cl,cl
c0010bd7:	74 09                	je     c0010be2 <VgaText::decrementCursor(bool)+0x20>
c0010bd9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010bdd:	e9 c2 fa ff ff       	jmp    c00106a4 <VgaText::updateCursor()>
c0010be2:	c3                   	ret    
c0010be3:	90                   	nop

c0010be4 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010be4:	53                   	push   ebx
c0010be5:	83 ec 08             	sub    esp,0x8
c0010be8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bf0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010bf4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010bf8:	3c 07                	cmp    al,0x7
c0010bfa:	75 2a                	jne    c0010c26 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010bfc:	a1 78 f0 02 c0       	mov    eax,ds:0xc002f078
c0010c01:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c09:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c11:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c1d:	83 c4 08             	add    esp,0x8
c0010c20:	5b                   	pop    ebx
c0010c21:	e9 b4 30 00 00       	jmp    c0013cda <Buzzer::beep(int, int, bool)>
c0010c26:	3c 0d                	cmp    al,0xd
c0010c28:	75 09                	jne    c0010c33 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010c2a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010c31:	eb 2c                	jmp    c0010c5f <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010c33:	3c 0a                	cmp    al,0xa
c0010c35:	75 31                	jne    c0010c68 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010c37:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010c3a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010c41:	8d 50 01             	lea    edx,[eax+0x1]
c0010c44:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010c47:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010c4a:	75 0f                	jne    c0010c5b <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010c4c:	83 ec 0c             	sub    esp,0xc
c0010c4f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010c52:	53                   	push   ebx
c0010c53:	e8 68 fb ff ff       	call   c00107c0 <VgaText::scrollScreen()>
c0010c58:	83 c4 10             	add    esp,0x10
c0010c5b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c5f:	83 c4 08             	add    esp,0x8
c0010c62:	5b                   	pop    ebx
c0010c63:	e9 3c fa ff ff       	jmp    c00106a4 <VgaText::updateCursor()>
c0010c68:	3c 08                	cmp    al,0x8
c0010c6a:	75 25                	jne    c0010c91 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010c6c:	50                   	push   eax
c0010c6d:	50                   	push   eax
c0010c6e:	6a 01                	push   0x1
c0010c70:	53                   	push   ebx
c0010c71:	e8 4c ff ff ff       	call   c0010bc2 <VgaText::decrementCursor(bool)>
c0010c76:	5a                   	pop    edx
c0010c77:	59                   	pop    ecx
c0010c78:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c7b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c7e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010c81:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010c84:	6a 20                	push   0x20
c0010c86:	53                   	push   ebx
c0010c87:	e8 da fb ff ff       	call   c0010866 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c8c:	83 c4 28             	add    esp,0x28
c0010c8f:	5b                   	pop    ebx
c0010c90:	c3                   	ret    
c0010c91:	83 ec 08             	sub    esp,0x8
c0010c94:	0f be c0             	movsx  eax,al
c0010c97:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c9a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c9d:	51                   	push   ecx
c0010c9e:	52                   	push   edx
c0010c9f:	50                   	push   eax
c0010ca0:	53                   	push   ebx
c0010ca1:	e8 c0 fb ff ff       	call   c0010866 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ca6:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010caa:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010cb2:	83 c4 28             	add    esp,0x28
c0010cb5:	5b                   	pop    ebx
c0010cb6:	e9 5f fc ff ff       	jmp    c001091a <VgaText::incrementCursor(bool)>
c0010cbb:	90                   	nop

c0010cbc <VgaText::isShowingCursor()>:
c0010cbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cc0:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0010cc3:	c3                   	ret    

c0010cc4 <VgaText::isBlinkDisabled()>:
c0010cc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cc8:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0010ccb:	83 f0 01             	xor    eax,0x1
c0010cce:	c3                   	ret    
c0010ccf:	90                   	nop

c0010cd0 <VgaText::setCursorHeight(int)>:
c0010cd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010cd8:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010cdb:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c0010cdf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ce3:	e9 d2 f9 ff ff       	jmp    c00106ba <VgaText::showCursor(bool)>

c0010ce8 <VgaText::getCursorHeight()>:
c0010ce8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cec:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0010cef:	c3                   	ret    

c0010cf0 <setActiveTerminal(VgaText*)>:
c0010cf0:	53                   	push   ebx
c0010cf1:	83 ec 08             	sub    esp,0x8
c0010cf4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cf8:	85 db                	test   ebx,ebx
c0010cfa:	75 11                	jne    c0010d0d <setActiveTerminal(VgaText*)+0x1d>
c0010cfc:	c7 44 24 10 2c ad 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ad2c
c0010d04:	83 c4 08             	add    esp,0x8
c0010d07:	5b                   	pop    ebx
c0010d08:	e9 83 9b 00 00       	jmp    c001a890 <Krnl::panic(char const*)>
c0010d0d:	50                   	push   eax
c0010d0e:	50                   	push   eax
c0010d0f:	53                   	push   ebx
c0010d10:	68 3a ad 02 c0       	push   0xc002ad3a
c0010d15:	e8 b3 21 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0010d1a:	a1 c4 ef 02 c0       	mov    eax,ds:0xc002efc4
c0010d1f:	83 c4 10             	add    esp,0x10
c0010d22:	85 c0                	test   eax,eax
c0010d24:	74 0c                	je     c0010d32 <setActiveTerminal(VgaText*)+0x42>
c0010d26:	83 ec 0c             	sub    esp,0xc
c0010d29:	50                   	push   eax
c0010d2a:	e8 75 f9 ff ff       	call   c00106a4 <VgaText::updateCursor()>
c0010d2f:	83 c4 10             	add    esp,0x10
c0010d32:	89 1d c4 ef 02 c0    	mov    DWORD PTR ds:0xc002efc4,ebx
c0010d38:	51                   	push   ecx
c0010d39:	51                   	push   ecx
c0010d3a:	53                   	push   ebx
c0010d3b:	68 52 ad 02 c0       	push   0xc002ad52
c0010d40:	e8 88 21 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0010d45:	83 c4 0c             	add    esp,0xc
c0010d48:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010d4b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010d4e:	53                   	push   ebx
c0010d4f:	e8 7e fb ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c0010d54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d57:	e8 68 ff ff ff       	call   c0010cc4 <VgaText::isBlinkDisabled()>
c0010d5c:	5a                   	pop    edx
c0010d5d:	0f b6 c0             	movzx  eax,al
c0010d60:	59                   	pop    ecx
c0010d61:	50                   	push   eax
c0010d62:	53                   	push   ebx
c0010d63:	e8 5e f9 ff ff       	call   c00106c6 <VgaText::disableBlink(bool)>
c0010d68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d6b:	e8 78 ff ff ff       	call   c0010ce8 <VgaText::getCursorHeight()>
c0010d70:	5a                   	pop    edx
c0010d71:	59                   	pop    ecx
c0010d72:	50                   	push   eax
c0010d73:	53                   	push   ebx
c0010d74:	e8 57 ff ff ff       	call   c0010cd0 <VgaText::setCursorHeight(int)>
c0010d79:	83 c4 10             	add    esp,0x10
c0010d7c:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010d80:	75 07                	jne    c0010d89 <setActiveTerminal(VgaText*)+0x99>
c0010d82:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010d89:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d8d:	83 c4 08             	add    esp,0x8
c0010d90:	5b                   	pop    ebx
c0010d91:	e9 c0 f8 ff ff       	jmp    c0010656 <VgaText::load()>

c0010d96 <doTerminalCycle()>:
c0010d96:	83 ec 18             	sub    esp,0x18
c0010d99:	a1 c0 ef 02 c0       	mov    eax,ds:0xc002efc0
c0010d9e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010da1:	50                   	push   eax
c0010da2:	a3 c0 ef 02 c0       	mov    ds:0xc002efc0,eax
c0010da7:	e8 44 ff ff ff       	call   c0010cf0 <setActiveTerminal(VgaText*)>
c0010dac:	83 c4 1c             	add    esp,0x1c
c0010daf:	c3                   	ret    

c0010db0 <VgaText::doUpdate()>:
c0010db0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010db4:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010db7:	85 c0                	test   eax,eax
c0010db9:	74 02                	je     c0010dbd <VgaText::doUpdate()+0xd>
c0010dbb:	ff e0                	jmp    eax
c0010dbd:	c3                   	ret    

c0010dbe <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010dbe:	55                   	push   ebp
c0010dbf:	31 ed                	xor    ebp,ebp
c0010dc1:	57                   	push   edi
c0010dc2:	56                   	push   esi
c0010dc3:	53                   	push   ebx
c0010dc4:	83 ec 1c             	sub    esp,0x1c
c0010dc7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010dcb:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dd0:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010dd7:	50                   	push   eax
c0010dd8:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010ddd:	50                   	push   eax
c0010dde:	e8 cb f9 ff ff       	call   c00107ae <VgaText::combineColours(unsigned char, unsigned char)>
c0010de3:	59                   	pop    ecx
c0010de4:	0f b6 c0             	movzx  eax,al
c0010de7:	5e                   	pop    esi
c0010de8:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010ded:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010df1:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010df4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010df8:	0f b7 f6             	movzx  esi,si
c0010dfb:	01 f6                	add    esi,esi
c0010dfd:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e00:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010e03:	84 c0                	test   al,al
c0010e05:	0f 84 fd 00 00 00    	je     c0010f08 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010e0b:	3c 0d                	cmp    al,0xd
c0010e0d:	75 0c                	jne    c0010e1b <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010e0f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010e16:	e9 e7 00 00 00       	jmp    c0010f02 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010e1b:	3c 0a                	cmp    al,0xa
c0010e1d:	75 47                	jne    c0010e66 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010e1f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010e22:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010e29:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e2c:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010e2f:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010e32:	75 0f                	jne    c0010e43 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010e34:	83 ec 0c             	sub    esp,0xc
c0010e37:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010e3a:	53                   	push   ebx
c0010e3b:	e8 80 f9 ff ff       	call   c00107c0 <VgaText::scrollScreen()>
c0010e40:	83 c4 10             	add    esp,0x10
c0010e43:	83 ec 0c             	sub    esp,0xc
c0010e46:	31 ed                	xor    ebp,ebp
c0010e48:	53                   	push   ebx
c0010e49:	e8 56 f8 ff ff       	call   c00106a4 <VgaText::updateCursor()>
c0010e4e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e53:	83 c4 10             	add    esp,0x10
c0010e56:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010e59:	0f b7 f6             	movzx  esi,si
c0010e5c:	01 f6                	add    esi,esi
c0010e5e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e61:	e9 9c 00 00 00       	jmp    c0010f02 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010e66:	3c 08                	cmp    al,0x8
c0010e68:	75 35                	jne    c0010e9f <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010e6a:	56                   	push   esi
c0010e6b:	56                   	push   esi
c0010e6c:	6a 01                	push   0x1
c0010e6e:	53                   	push   ebx
c0010e6f:	e8 4e fd ff ff       	call   c0010bc2 <VgaText::decrementCursor(bool)>
c0010e74:	58                   	pop    eax
c0010e75:	5a                   	pop    edx
c0010e76:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010e79:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010e7c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010e7f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010e82:	6a 20                	push   0x20
c0010e84:	53                   	push   ebx
c0010e85:	e8 dc f9 ff ff       	call   c0010866 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010e8a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e8f:	83 c4 20             	add    esp,0x20
c0010e92:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010e95:	0f b7 f6             	movzx  esi,si
c0010e98:	01 f6                	add    esi,esi
c0010e9a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e9d:	eb 63                	jmp    c0010f02 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010e9f:	51                   	push   ecx
c0010ea0:	51                   	push   ecx
c0010ea1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010ea5:	50                   	push   eax
c0010ea6:	e8 a9 f9 ff ff       	call   c0010854 <VgaText::combineCharAndColour(char, unsigned char)>
c0010eab:	83 c4 10             	add    esp,0x10
c0010eae:	66 89 06             	mov    WORD PTR [esi],ax
c0010eb1:	39 1d c4 ef 02 c0    	cmp    DWORD PTR ds:0xc002efc4,ebx
c0010eb7:	75 21                	jne    c0010eda <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010eb9:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010ebc:	85 c0                	test   eax,eax
c0010ebe:	74 1a                	je     c0010eda <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010ec0:	52                   	push   edx
c0010ec1:	52                   	push   edx
c0010ec2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010ec5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010ec8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010ecc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010ed0:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010ed3:	51                   	push   ecx
c0010ed4:	53                   	push   ebx
c0010ed5:	ff d0                	call   eax
c0010ed7:	83 c4 20             	add    esp,0x20
c0010eda:	83 c6 02             	add    esi,0x2
c0010edd:	50                   	push   eax
c0010ede:	50                   	push   eax
c0010edf:	6a 00                	push   0x0
c0010ee1:	53                   	push   ebx
c0010ee2:	e8 33 fa ff ff       	call   c001091a <VgaText::incrementCursor(bool)>
c0010ee7:	83 c4 10             	add    esp,0x10
c0010eea:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010eee:	75 0d                	jne    c0010efd <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010ef0:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010ef5:	0f b7 f6             	movzx  esi,si
c0010ef8:	01 f6                	add    esi,esi
c0010efa:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010efd:	bd 01 00 00 00       	mov    ebp,0x1
c0010f02:	47                   	inc    edi
c0010f03:	e9 f8 fe ff ff       	jmp    c0010e00 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010f08:	83 ec 0c             	sub    esp,0xc
c0010f0b:	53                   	push   ebx
c0010f0c:	e8 93 f7 ff ff       	call   c00106a4 <VgaText::updateCursor()>
c0010f11:	83 c4 10             	add    esp,0x10
c0010f14:	89 e8                	mov    eax,ebp
c0010f16:	84 c0                	test   al,al
c0010f18:	74 0c                	je     c0010f26 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010f1a:	83 ec 0c             	sub    esp,0xc
c0010f1d:	53                   	push   ebx
c0010f1e:	e8 8d fe ff ff       	call   c0010db0 <VgaText::doUpdate()>
c0010f23:	83 c4 10             	add    esp,0x10
c0010f26:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010f2d:	83 c4 1c             	add    esp,0x1c
c0010f30:	5b                   	pop    ebx
c0010f31:	5e                   	pop    esi
c0010f32:	5f                   	pop    edi
c0010f33:	5d                   	pop    ebp
c0010f34:	c3                   	ret    
c0010f35:	90                   	nop

c0010f36 <VgaText::clearScreen()>:
c0010f36:	57                   	push   edi
c0010f37:	56                   	push   esi
c0010f38:	31 f6                	xor    esi,esi
c0010f3a:	53                   	push   ebx
c0010f3b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f3f:	52                   	push   edx
c0010f40:	6a 00                	push   0x0
c0010f42:	6a 00                	push   0x0
c0010f44:	53                   	push   ebx
c0010f45:	e8 88 f9 ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c0010f4a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010f51:	83 c4 10             	add    esp,0x10
c0010f54:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010f57:	7e 20                	jle    c0010f79 <VgaText::clearScreen()+0x43>
c0010f59:	31 ff                	xor    edi,edi
c0010f5b:	50                   	push   eax
c0010f5c:	50                   	push   eax
c0010f5d:	56                   	push   esi
c0010f5e:	57                   	push   edi
c0010f5f:	47                   	inc    edi
c0010f60:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010f63:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010f66:	6a 20                	push   0x20
c0010f68:	53                   	push   ebx
c0010f69:	e8 f8 f8 ff ff       	call   c0010866 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f6e:	83 c4 20             	add    esp,0x20
c0010f71:	83 ff 50             	cmp    edi,0x50
c0010f74:	75 e5                	jne    c0010f5b <VgaText::clearScreen()+0x25>
c0010f76:	46                   	inc    esi
c0010f77:	eb db                	jmp    c0010f54 <VgaText::clearScreen()+0x1e>
c0010f79:	83 ec 0c             	sub    esp,0xc
c0010f7c:	53                   	push   ebx
c0010f7d:	e8 2e fe ff ff       	call   c0010db0 <VgaText::doUpdate()>
c0010f82:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010f89:	83 c4 10             	add    esp,0x10
c0010f8c:	5b                   	pop    ebx
c0010f8d:	5e                   	pop    esi
c0010f8e:	5f                   	pop    edi
c0010f8f:	c3                   	ret    

c0010f90 <VgaText::putchar(char)>:
c0010f90:	56                   	push   esi
c0010f91:	53                   	push   ebx
c0010f92:	83 ec 14             	sub    esp,0x14
c0010f95:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010f99:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010f9d:	3c 5b                	cmp    al,0x5b
c0010f9f:	75 18                	jne    c0010fb9 <VgaText::putchar(char)+0x29>
c0010fa1:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010fa5:	74 1f                	je     c0010fc6 <VgaText::putchar(char)+0x36>
c0010fa7:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010fad:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010fb4:	e9 bd 00 00 00       	jmp    c0011076 <VgaText::putchar(char)+0xe6>
c0010fb9:	3c 1b                	cmp    al,0x1b
c0010fbb:	75 09                	jne    c0010fc6 <VgaText::putchar(char)+0x36>
c0010fbd:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010fc1:	e9 b0 00 00 00       	jmp    c0011076 <VgaText::putchar(char)+0xe6>
c0010fc6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010fc9:	84 c9                	test   cl,cl
c0010fcb:	0f 84 92 00 00 00    	je     c0011063 <VgaText::putchar(char)+0xd3>
c0010fd1:	8d 50 c0             	lea    edx,[eax-0x40]
c0010fd4:	80 fa 3e             	cmp    dl,0x3e
c0010fd7:	77 76                	ja     c001104f <VgaText::putchar(char)+0xbf>
c0010fd9:	3c 6d                	cmp    al,0x6d
c0010fdb:	75 47                	jne    c0011024 <VgaText::putchar(char)+0x94>
c0010fdd:	31 f6                	xor    esi,esi
c0010fdf:	31 d2                	xor    edx,edx
c0010fe1:	31 c0                	xor    eax,eax
c0010fe3:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010fe6:	7e 2d                	jle    c0011015 <VgaText::putchar(char)+0x85>
c0010fe8:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010fed:	80 fa 3b             	cmp    dl,0x3b
c0010ff0:	75 17                	jne    c0011009 <VgaText::putchar(char)+0x79>
c0010ff2:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010ff6:	50                   	push   eax
c0010ff7:	53                   	push   ebx
c0010ff8:	e8 fd f6 ff ff       	call   c00106fa <VgaText::doANSI_SGR(int)>
c0010ffd:	59                   	pop    ecx
c0010ffe:	31 d2                	xor    edx,edx
c0011000:	58                   	pop    eax
c0011001:	31 c0                	xor    eax,eax
c0011003:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011007:	eb 09                	jmp    c0011012 <VgaText::putchar(char)+0x82>
c0011009:	6b c0 0a             	imul   eax,eax,0xa
c001100c:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0011010:	88 ca                	mov    dl,cl
c0011012:	46                   	inc    esi
c0011013:	eb ce                	jmp    c0010fe3 <VgaText::putchar(char)+0x53>
c0011015:	84 d2                	test   dl,dl
c0011017:	74 2e                	je     c0011047 <VgaText::putchar(char)+0xb7>
c0011019:	50                   	push   eax
c001101a:	53                   	push   ebx
c001101b:	e8 da f6 ff ff       	call   c00106fa <VgaText::doANSI_SGR(int)>
c0011020:	58                   	pop    eax
c0011021:	5a                   	pop    edx
c0011022:	eb 23                	jmp    c0011047 <VgaText::putchar(char)+0xb7>
c0011024:	3c 4a                	cmp    al,0x4a
c0011026:	75 1f                	jne    c0011047 <VgaText::putchar(char)+0xb7>
c0011028:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c001102c:	75 19                	jne    c0011047 <VgaText::putchar(char)+0xb7>
c001102e:	83 ec 0c             	sub    esp,0xc
c0011031:	53                   	push   ebx
c0011032:	e8 ff fe ff ff       	call   c0010f36 <VgaText::clearScreen()>
c0011037:	83 c4 0c             	add    esp,0xc
c001103a:	6a 00                	push   0x0
c001103c:	6a 00                	push   0x0
c001103e:	53                   	push   ebx
c001103f:	e8 8e f8 ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c0011044:	83 c4 10             	add    esp,0x10
c0011047:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c001104d:	eb 27                	jmp    c0011076 <VgaText::putchar(char)+0xe6>
c001104f:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0011052:	83 fa 0e             	cmp    edx,0xe
c0011055:	7f 1f                	jg     c0011076 <VgaText::putchar(char)+0xe6>
c0011057:	8d 4a 01             	lea    ecx,[edx+0x1]
c001105a:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c001105d:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0011061:	eb 13                	jmp    c0011076 <VgaText::putchar(char)+0xe6>
c0011063:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011066:	0f be c0             	movsx  eax,al
c0011069:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001106c:	50                   	push   eax
c001106d:	53                   	push   ebx
c001106e:	e8 71 fb ff ff       	call   c0010be4 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011073:	83 c4 10             	add    esp,0x10
c0011076:	83 c4 14             	add    esp,0x14
c0011079:	5b                   	pop    ebx
c001107a:	5e                   	pop    esi
c001107b:	c3                   	ret    

c001107c <VgaText::puts(char const*)>:
c001107c:	53                   	push   ebx
c001107d:	83 ec 08             	sub    esp,0x8
c0011080:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011084:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011087:	84 c0                	test   al,al
c0011089:	74 12                	je     c001109d <VgaText::puts(char const*)+0x21>
c001108b:	43                   	inc    ebx
c001108c:	51                   	push   ecx
c001108d:	51                   	push   ecx
c001108e:	50                   	push   eax
c001108f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011093:	e8 f8 fe ff ff       	call   c0010f90 <VgaText::putchar(char)>
c0011098:	83 c4 10             	add    esp,0x10
c001109b:	eb e7                	jmp    c0011084 <VgaText::puts(char const*)+0x8>
c001109d:	83 c4 08             	add    esp,0x8
c00110a0:	5b                   	pop    ebx
c00110a1:	c3                   	ret    

c00110a2 <VgaText::putx(unsigned int)>:
c00110a2:	57                   	push   edi
c00110a3:	b9 11 00 00 00       	mov    ecx,0x11
c00110a8:	56                   	push   esi
c00110a9:	be 6e ad 02 c0       	mov    esi,0xc002ad6e
c00110ae:	53                   	push   ebx
c00110af:	83 ec 20             	sub    esp,0x20
c00110b2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00110b6:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00110ba:	fc                   	cld    
c00110bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110bd:	be 08 00 00 00       	mov    esi,0x8
c00110c2:	50                   	push   eax
c00110c3:	50                   	push   eax
c00110c4:	89 d8                	mov    eax,ebx
c00110c6:	c1 e3 04             	shl    ebx,0x4
c00110c9:	c1 e8 1c             	shr    eax,0x1c
c00110cc:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00110d1:	50                   	push   eax
c00110d2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110d6:	e8 b5 fe ff ff       	call   c0010f90 <VgaText::putchar(char)>
c00110db:	83 c4 10             	add    esp,0x10
c00110de:	4e                   	dec    esi
c00110df:	75 e1                	jne    c00110c2 <VgaText::putx(unsigned int)+0x20>
c00110e1:	83 c4 20             	add    esp,0x20
c00110e4:	5b                   	pop    ebx
c00110e5:	5e                   	pop    esi
c00110e6:	5f                   	pop    edi
c00110e7:	c3                   	ret    

c00110e8 <VgaText::VgaText(char const*)>:
c00110e8:	57                   	push   edi
c00110e9:	56                   	push   esi
c00110ea:	53                   	push   ebx
c00110eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110ef:	83 ec 08             	sub    esp,0x8
c00110f2:	6a 00                	push   0x0
c00110f4:	50                   	push   eax
c00110f5:	e8 8a 05 00 00       	call   c0011684 <UnixFile::UnixFile(int)>
c00110fa:	83 c4 10             	add    esp,0x10
c00110fd:	ba d4 ad 02 c0       	mov    edx,0xc002add4
c0011102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011106:	89 10                	mov    DWORD PTR [eax],edx
c0011108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001110c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0011113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011117:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c001111e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011122:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0011126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001112a:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c001112e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011132:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0011139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001113d:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0011144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011148:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c001114f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011153:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c001115a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001115e:	8d 50 60             	lea    edx,[eax+0x60]
c0011161:	bb a0 ef 02 c0       	mov    ebx,0xc002efa0
c0011166:	b8 08 00 00 00       	mov    eax,0x8
c001116b:	fc                   	cld    
c001116c:	89 d7                	mov    edi,edx
c001116e:	89 de                	mov    esi,ebx
c0011170:	89 c1                	mov    ecx,eax
c0011172:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011178:	05 82 00 00 00       	add    eax,0x82
c001117d:	83 ec 08             	sub    esp,0x8
c0011180:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011184:	50                   	push   eax
c0011185:	e8 9e f6 fe ff       	call   c0000828 <strcpy>
c001118a:	83 c4 10             	add    esp,0x10
c001118d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011191:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0011198:	83 ec 0c             	sub    esp,0xc
c001119b:	6a 01                	push   0x1
c001119d:	e8 25 09 00 00       	call   c0011ac7 <Virt::allocateKernelVirtualPages(int)>
c00111a2:	83 c4 10             	add    esp,0x10
c00111a5:	89 c2                	mov    edx,eax
c00111a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ab:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00111ae:	8b 1d 70 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f070
c00111b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00111bb:	89 c6                	mov    esi,eax
c00111bd:	e8 d8 ed ff ff       	call   c000ff9a <Phys::allocatePage()>
c00111c2:	6a 05                	push   0x5
c00111c4:	56                   	push   esi
c00111c5:	50                   	push   eax
c00111c6:	53                   	push   ebx
c00111c7:	e8 32 11 00 00       	call   c00122fe <VAS::mapPage(unsigned long, unsigned long, int)>
c00111cc:	83 c4 10             	add    esp,0x10
c00111cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00111d6:	83 ec 04             	sub    esp,0x4
c00111d9:	68 00 0f 00 00       	push   0xf00
c00111de:	6a 00                	push   0x0
c00111e0:	50                   	push   eax
c00111e1:	e8 86 f5 fe ff       	call   c000076c <memset>
c00111e6:	83 c4 10             	add    esp,0x10
c00111e9:	83 ec 04             	sub    esp,0x4
c00111ec:	6a 00                	push   0x0
c00111ee:	6a 07                	push   0x7
c00111f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111f4:	e8 95 f5 ff ff       	call   c001078e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00111f9:	83 c4 10             	add    esp,0x10
c00111fc:	83 ec 08             	sub    esp,0x8
c00111ff:	6a 02                	push   0x2
c0011201:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011205:	e8 c6 fa ff ff       	call   c0010cd0 <VgaText::setCursorHeight(int)>
c001120a:	83 c4 10             	add    esp,0x10
c001120d:	83 ec 04             	sub    esp,0x4
c0011210:	6a 00                	push   0x0
c0011212:	6a 00                	push   0x0
c0011214:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011218:	e8 b5 f6 ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c001121d:	83 c4 10             	add    esp,0x10
c0011220:	83 ec 08             	sub    esp,0x8
c0011223:	6a 01                	push   0x1
c0011225:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011229:	e8 8c f4 ff ff       	call   c00106ba <VgaText::showCursor(bool)>
c001122e:	83 c4 10             	add    esp,0x10
c0011231:	83 ec 08             	sub    esp,0x8
c0011234:	6a 01                	push   0x1
c0011236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001123a:	e8 87 f4 ff ff       	call   c00106c6 <VgaText::disableBlink(bool)>
c001123f:	83 c4 10             	add    esp,0x10
c0011242:	83 ec 0c             	sub    esp,0xc
c0011245:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011249:	e8 e8 fc ff ff       	call   c0010f36 <VgaText::clearScreen()>
c001124e:	83 c4 10             	add    esp,0x10
c0011251:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011255:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0011259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001125d:	05 02 01 00 00       	add    eax,0x102
c0011262:	83 ec 04             	sub    esp,0x4
c0011265:	68 96 00 00 00       	push   0x96
c001126a:	6a 00                	push   0x0
c001126c:	50                   	push   eax
c001126d:	e8 fa f4 fe ff       	call   c000076c <memset>
c0011272:	83 c4 10             	add    esp,0x10
c0011275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011279:	05 98 01 00 00       	add    eax,0x198
c001127e:	83 ec 04             	sub    esp,0x4
c0011281:	68 2c 01 00 00       	push   0x12c
c0011286:	6a 00                	push   0x0
c0011288:	50                   	push   eax
c0011289:	e8 de f4 fe ff       	call   c000076c <memset>
c001128e:	83 c4 10             	add    esp,0x10
c0011291:	90                   	nop
c0011292:	5b                   	pop    ebx
c0011293:	5e                   	pop    esi
c0011294:	5f                   	pop    edi
c0011295:	c3                   	ret    

c0011296 <VgaText::receiveKey(unsigned char)>:
c0011296:	55                   	push   ebp
c0011297:	57                   	push   edi
c0011298:	56                   	push   esi
c0011299:	53                   	push   ebx
c001129a:	83 ec 1c             	sub    esp,0x1c
c001129d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00112a1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00112a5:	84 db                	test   bl,bl
c00112a7:	0f 84 c9 00 00 00    	je     c0011376 <VgaText::receiveKey(unsigned char)+0xe0>
c00112ad:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c00112b3:	80 fb 08             	cmp    bl,0x8
c00112b6:	75 2c                	jne    c00112e4 <VgaText::receiveKey(unsigned char)+0x4e>
c00112b8:	83 ec 0c             	sub    esp,0xc
c00112bb:	57                   	push   edi
c00112bc:	e8 c7 f4 fe ff       	call   c0000788 <strlen>
c00112c1:	83 c4 10             	add    esp,0x10
c00112c4:	85 c0                	test   eax,eax
c00112c6:	74 41                	je     c0011309 <VgaText::receiveKey(unsigned char)+0x73>
c00112c8:	50                   	push   eax
c00112c9:	50                   	push   eax
c00112ca:	6a 08                	push   0x8
c00112cc:	56                   	push   esi
c00112cd:	e8 be fc ff ff       	call   c0010f90 <VgaText::putchar(char)>
c00112d2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00112d5:	e8 ae f4 fe ff       	call   c0000788 <strlen>
c00112da:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c00112e2:	eb 22                	jmp    c0011306 <VgaText::receiveKey(unsigned char)+0x70>
c00112e4:	0f be c3             	movsx  eax,bl
c00112e7:	52                   	push   edx
c00112e8:	52                   	push   edx
c00112e9:	50                   	push   eax
c00112ea:	56                   	push   esi
c00112eb:	e8 a0 fc ff ff       	call   c0010f90 <VgaText::putchar(char)>
c00112f0:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00112f4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00112f9:	59                   	pop    ecx
c00112fa:	5d                   	pop    ebp
c00112fb:	8d 44 24 16          	lea    eax,[esp+0x16]
c00112ff:	50                   	push   eax
c0011300:	57                   	push   edi
c0011301:	e8 62 f6 fe ff       	call   c0000968 <strcat>
c0011306:	83 c4 10             	add    esp,0x10
c0011309:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0011310:	75 05                	jne    c0011317 <VgaText::receiveKey(unsigned char)+0x81>
c0011312:	80 fb 0a             	cmp    bl,0xa
c0011315:	75 53                	jne    c001136a <VgaText::receiveKey(unsigned char)+0xd4>
c0011317:	83 ec 0c             	sub    esp,0xc
c001131a:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0011320:	53                   	push   ebx
c0011321:	e8 62 f4 fe ff       	call   c0000788 <strlen>
c0011326:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011329:	89 c5                	mov    ebp,eax
c001132b:	e8 58 f4 fe ff       	call   c0000788 <strlen>
c0011330:	83 c4 10             	add    esp,0x10
c0011333:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011337:	3d 2c 01 00 00       	cmp    eax,0x12c
c001133c:	76 10                	jbe    c001134e <VgaText::receiveKey(unsigned char)+0xb8>
c001133e:	83 ec 0c             	sub    esp,0xc
c0011341:	68 7f ad 02 c0       	push   0xc002ad7f
c0011346:	e8 45 95 00 00       	call   c001a890 <Krnl::panic(char const*)>
c001134b:	83 c4 10             	add    esp,0x10
c001134e:	50                   	push   eax
c001134f:	50                   	push   eax
c0011350:	57                   	push   edi
c0011351:	53                   	push   ebx
c0011352:	e8 11 f6 fe ff       	call   c0000968 <strcat>
c0011357:	83 c4 0c             	add    esp,0xc
c001135a:	68 96 00 00 00       	push   0x96
c001135f:	6a 00                	push   0x0
c0011361:	57                   	push   edi
c0011362:	e8 05 f4 fe ff       	call   c000076c <memset>
c0011367:	83 c4 10             	add    esp,0x10
c001136a:	83 ec 0c             	sub    esp,0xc
c001136d:	56                   	push   esi
c001136e:	e8 3d fa ff ff       	call   c0010db0 <VgaText::doUpdate()>
c0011373:	83 c4 10             	add    esp,0x10
c0011376:	83 c4 1c             	add    esp,0x1c
c0011379:	5b                   	pop    ebx
c001137a:	5e                   	pop    esi
c001137b:	5f                   	pop    edi
c001137c:	5d                   	pop    ebp
c001137d:	c3                   	ret    

c001137e <VgaText::write(unsigned long long, void*, int*)>:
c001137e:	55                   	push   ebp
c001137f:	57                   	push   edi
c0011380:	56                   	push   esi
c0011381:	53                   	push   ebx
c0011382:	83 ec 0c             	sub    esp,0xc
c0011385:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011389:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001138d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011391:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0011398:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001139b:	39 eb                	cmp    ebx,ebp
c001139d:	74 13                	je     c00113b2 <VgaText::write(unsigned long long, void*, int*)+0x34>
c001139f:	43                   	inc    ebx
c00113a0:	50                   	push   eax
c00113a1:	50                   	push   eax
c00113a2:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00113a6:	50                   	push   eax
c00113a7:	56                   	push   esi
c00113a8:	e8 e3 fb ff ff       	call   c0010f90 <VgaText::putchar(char)>
c00113ad:	83 c4 10             	add    esp,0x10
c00113b0:	eb e9                	jmp    c001139b <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00113b2:	83 ec 0c             	sub    esp,0xc
c00113b5:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00113bc:	56                   	push   esi
c00113bd:	e8 ee f9 ff ff       	call   c0010db0 <VgaText::doUpdate()>
c00113c2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00113c6:	89 38                	mov    DWORD PTR [eax],edi
c00113c8:	83 c4 1c             	add    esp,0x1c
c00113cb:	31 c0                	xor    eax,eax
c00113cd:	5b                   	pop    ebx
c00113ce:	5e                   	pop    esi
c00113cf:	5f                   	pop    edi
c00113d0:	5d                   	pop    ebp
c00113d1:	c3                   	ret    

c00113d2 <newTerminal(char*)>:
c00113d2:	83 ec 28             	sub    esp,0x28
c00113d5:	68 c4 02 00 00       	push   0x2c4
c00113da:	e8 4f e5 ff ff       	call   c000f92e <malloc>
c00113df:	5a                   	pop    edx
c00113e0:	59                   	pop    ecx
c00113e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00113e5:	50                   	push   eax
c00113e6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00113ea:	e8 f9 fc ff ff       	call   c00110e8 <VgaText::VgaText(char const*)>
c00113ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113f3:	83 c4 2c             	add    esp,0x2c
c00113f6:	c3                   	ret    
c00113f7:	90                   	nop

c00113f8 <TSS::TSS()>:
c00113f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011403:	90                   	nop
c0011404:	c3                   	ret    
c0011405:	90                   	nop

c0011406 <TSS::setESP(unsigned long)>:
c0011406:	55                   	push   ebp
c0011407:	89 e5                	mov    ebp,esp
c0011409:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001140c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001140f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011412:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011415:	90                   	nop
c0011416:	5d                   	pop    ebp
c0011417:	c3                   	ret    

c0011418 <TSS::flush()>:
c0011418:	55                   	push   ebp
c0011419:	89 e5                	mov    ebp,esp
c001141b:	83 ec 10             	sub    esp,0x10
c001141e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011421:	8b 00                	mov    eax,DWORD PTR [eax]
c0011423:	83 c8 03             	or     eax,0x3
c0011426:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001142a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001142e:	66 89 d0             	mov    ax,dx
c0011431:	0f 00 d8             	ltr    ax
c0011434:	90                   	nop
c0011435:	c9                   	leave  
c0011436:	c3                   	ret    
c0011437:	90                   	nop

c0011438 <TSS::setup(unsigned long, unsigned long)>:
c0011438:	55                   	push   ebp
c0011439:	89 e5                	mov    ebp,esp
c001143b:	83 ec 18             	sub    esp,0x18
c001143e:	83 ec 0c             	sub    esp,0xc
c0011441:	6a 68                	push   0x68
c0011443:	e8 e6 e4 ff ff       	call   c000f92e <malloc>
c0011448:	83 c4 10             	add    esp,0x10
c001144b:	89 c2                	mov    edx,eax
c001144d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011450:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011453:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011456:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011459:	83 ec 04             	sub    esp,0x4
c001145c:	6a 68                	push   0x68
c001145e:	6a 00                	push   0x0
c0011460:	50                   	push   eax
c0011461:	e8 06 f3 fe ff       	call   c000076c <memset>
c0011466:	83 c4 10             	add    esp,0x10
c0011469:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001146c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001146f:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011475:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011478:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001147b:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011481:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011484:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011487:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001148a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001148d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011490:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011493:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011499:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001149c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001149f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00114a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114ab:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00114b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114b7:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00114bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114c3:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00114c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114cf:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00114d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114db:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00114de:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00114e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114e7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114ea:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00114ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114f3:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00114fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114fd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011500:	0f 20 da             	mov    edx,cr3
c0011503:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011506:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011509:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c001150c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001150f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011512:	83 ec 08             	sub    esp,0x8
c0011515:	50                   	push   eax
c0011516:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011519:	50                   	push   eax
c001151a:	e8 eb db ff ff       	call   c000f10a <GDTEntry::setBase(unsigned int)>
c001151f:	83 c4 10             	add    esp,0x10
c0011522:	83 ec 08             	sub    esp,0x8
c0011525:	6a 68                	push   0x68
c0011527:	8d 45 ec             	lea    eax,[ebp-0x14]
c001152a:	50                   	push   eax
c001152b:	e8 f6 db ff ff       	call   c000f126 <GDTEntry::setLimit(unsigned int)>
c0011530:	83 c4 10             	add    esp,0x10
c0011533:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011537:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001153a:	83 e0 0f             	and    eax,0xf
c001153d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011540:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011543:	83 c8 40             	or     eax,0x40
c0011546:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011549:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c001154e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011554:	05 78 01 00 00       	add    eax,0x178
c0011559:	83 ec 04             	sub    esp,0x4
c001155c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001155f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011562:	50                   	push   eax
c0011563:	e8 f2 db ff ff       	call   c000f15a <GDT::addEntry(GDTEntry)>
c0011568:	83 c4 10             	add    esp,0x10
c001156b:	89 c2                	mov    edx,eax
c001156d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011570:	89 10                	mov    DWORD PTR [eax],edx
c0011572:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0011577:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001157d:	05 78 01 00 00       	add    eax,0x178
c0011582:	83 ec 0c             	sub    esp,0xc
c0011585:	50                   	push   eax
c0011586:	e8 13 dc ff ff       	call   c000f19e <GDT::flush()>
c001158b:	83 c4 10             	add    esp,0x10
c001158e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011591:	8b 00                	mov    eax,DWORD PTR [eax]
c0011593:	83 ec 08             	sub    esp,0x8
c0011596:	50                   	push   eax
c0011597:	68 e8 ad 02 c0       	push   0xc002ade8
c001159c:	e8 2c 19 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00115a1:	83 c4 10             	add    esp,0x10
c00115a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00115a9:	c9                   	leave  
c00115aa:	c3                   	ret    
c00115ab:	90                   	nop

c00115ac <ReservedFilename::read(unsigned long long, void*, int*)>:
c00115ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00115b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115b7:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00115bc:	75 08                	jne    c00115c6 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00115be:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00115c4:	eb 38                	jmp    c00115fe <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00115c6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00115cb:	75 17                	jne    c00115e4 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00115cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115d2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00115d5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00115db:	8b 10                	mov    edx,DWORD PTR [eax]
c00115dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00115e1:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00115e4:	89 c1                	mov    ecx,eax
c00115e6:	83 e1 fd             	and    ecx,0xfffffffd
c00115e9:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00115ef:	74 cd                	je     c00115be <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00115f1:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00115f6:	83 e0 ef             	and    eax,0xffffffef
c00115f9:	83 f8 08             	cmp    eax,0x8
c00115fc:	76 c0                	jbe    c00115be <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00115fe:	31 c0                	xor    eax,eax
c0011600:	c3                   	ret    
c0011601:	90                   	nop

c0011602 <ReservedFilename::isAtty()>:
c0011602:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011606:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011609:	31 c0                	xor    eax,eax
c001160b:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011611:	74 09                	je     c001161c <ReservedFilename::isAtty()+0x1a>
c0011613:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011619:	0f 94 c0             	sete   al
c001161c:	c3                   	ret    
c001161d:	90                   	nop

c001161e <ReservedFilename::write(unsigned long long, void*, int*)>:
c001161e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011622:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011626:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011629:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001162d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011632:	75 08                	jne    c001163c <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011634:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001163a:	eb 3d                	jmp    c0011679 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001163c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011641:	75 17                	jne    c001165a <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011643:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011648:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001164b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011651:	8b 10                	mov    edx,DWORD PTR [eax]
c0011653:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011657:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c001165a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001165f:	75 04                	jne    c0011665 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011661:	89 0a                	mov    DWORD PTR [edx],ecx
c0011663:	eb 14                	jmp    c0011679 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011665:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c001166a:	74 c8                	je     c0011634 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001166c:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011671:	83 e0 ef             	and    eax,0xffffffef
c0011674:	83 f8 08             	cmp    eax,0x8
c0011677:	76 bb                	jbe    c0011634 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011679:	31 c0                	xor    eax,eax
c001167b:	c3                   	ret    

c001167c <UnixFile::getFileDescriptor()>:
c001167c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011680:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011683:	c3                   	ret    

c0011684 <UnixFile::UnixFile(int)>:
c0011684:	53                   	push   ebx
c0011685:	83 ec 28             	sub    esp,0x28
c0011688:	ba d4 ae 02 c0       	mov    edx,0xc002aed4
c001168d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011691:	89 10                	mov    DWORD PTR [eax],edx
c0011693:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001169b:	0f 8f 8c 01 00 00    	jg     c001182d <UnixFile::UnixFile(int)+0x1a9>
c00116a1:	a1 80 de 02 c0       	mov    eax,ds:0xc002de80
c00116a6:	8d 50 01             	lea    edx,[eax+0x1]
c00116a9:	89 15 80 de 02 c0    	mov    DWORD PTR ds:0xc002de80,edx
c00116af:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00116b3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00116b6:	83 ec 08             	sub    esp,0x8
c00116b9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00116bd:	68 58 f0 02 c0       	push   0xc002f058
c00116c2:	e8 25 79 01 00       	call   c0028fec <LinkedList<UnixFile>::addElement(UnixFile*)>
c00116c7:	83 c4 10             	add    esp,0x10
c00116ca:	a0 54 f0 02 c0       	mov    al,ds:0xc002f054
c00116cf:	83 f0 01             	xor    eax,0x1
c00116d2:	84 c0                	test   al,al
c00116d4:	0f 84 54 01 00 00    	je     c001182e <UnixFile::UnixFile(int)+0x1aa>
c00116da:	c6 05 54 f0 02 c0 01 	mov    BYTE PTR ds:0xc002f054,0x1
c00116e1:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00116e9:	83 ec 0c             	sub    esp,0xc
c00116ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00116f0:	e8 39 e2 ff ff       	call   c000f92e <malloc>
c00116f5:	83 c4 10             	add    esp,0x10
c00116f8:	89 c3                	mov    ebx,eax
c00116fa:	83 ec 08             	sub    esp,0x8
c00116fd:	68 03 ff ff 0f       	push   0xfffff03
c0011702:	53                   	push   ebx
c0011703:	e8 2c 01 00 00       	call   c0011834 <ReservedFilename::ReservedFilename(int)>
c0011708:	83 c4 10             	add    esp,0x10
c001170b:	89 1d 4c f0 02 c0    	mov    DWORD PTR ds:0xc002f04c,ebx
c0011711:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011719:	83 ec 0c             	sub    esp,0xc
c001171c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011720:	e8 09 e2 ff ff       	call   c000f92e <malloc>
c0011725:	83 c4 10             	add    esp,0x10
c0011728:	89 c3                	mov    ebx,eax
c001172a:	83 ec 08             	sub    esp,0x8
c001172d:	68 01 ff ff 0f       	push   0xfffff01
c0011732:	53                   	push   ebx
c0011733:	e8 fc 00 00 00       	call   c0011834 <ReservedFilename::ReservedFilename(int)>
c0011738:	83 c4 10             	add    esp,0x10
c001173b:	89 1d 50 f0 02 c0    	mov    DWORD PTR ds:0xc002f050,ebx
c0011741:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011749:	83 ec 0c             	sub    esp,0xc
c001174c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011750:	e8 d9 e1 ff ff       	call   c000f92e <malloc>
c0011755:	83 c4 10             	add    esp,0x10
c0011758:	89 c3                	mov    ebx,eax
c001175a:	83 ec 08             	sub    esp,0x8
c001175d:	68 00 ff ff 0f       	push   0xfffff00
c0011762:	53                   	push   ebx
c0011763:	e8 cc 00 00 00       	call   c0011834 <ReservedFilename::ReservedFilename(int)>
c0011768:	83 c4 10             	add    esp,0x10
c001176b:	89 1d 44 f0 02 c0    	mov    DWORD PTR ds:0xc002f044,ebx
c0011771:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011779:	83 ec 0c             	sub    esp,0xc
c001177c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011780:	e8 a9 e1 ff ff       	call   c000f92e <malloc>
c0011785:	83 c4 10             	add    esp,0x10
c0011788:	89 c3                	mov    ebx,eax
c001178a:	83 ec 08             	sub    esp,0x8
c001178d:	68 02 ff ff 0f       	push   0xfffff02
c0011792:	53                   	push   ebx
c0011793:	e8 9c 00 00 00       	call   c0011834 <ReservedFilename::ReservedFilename(int)>
c0011798:	83 c4 10             	add    esp,0x10
c001179b:	89 1d 48 f0 02 c0    	mov    DWORD PTR ds:0xc002f048,ebx
c00117a1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00117a9:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00117ae:	7f 7e                	jg     c001182e <UnixFile::UnixFile(int)+0x1aa>
c00117b0:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00117b8:	83 ec 0c             	sub    esp,0xc
c00117bb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00117bf:	e8 6a e1 ff ff       	call   c000f92e <malloc>
c00117c4:	83 c4 10             	add    esp,0x10
c00117c7:	89 c3                	mov    ebx,eax
c00117c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00117cd:	05 10 ff ff 0f       	add    eax,0xfffff10
c00117d2:	83 ec 08             	sub    esp,0x8
c00117d5:	50                   	push   eax
c00117d6:	53                   	push   ebx
c00117d7:	e8 58 00 00 00       	call   c0011834 <ReservedFilename::ReservedFilename(int)>
c00117dc:	83 c4 10             	add    esp,0x10
c00117df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00117e3:	89 1c 85 20 f0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0fe0],ebx
c00117ea:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00117f2:	83 ec 0c             	sub    esp,0xc
c00117f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117f9:	e8 30 e1 ff ff       	call   c000f92e <malloc>
c00117fe:	83 c4 10             	add    esp,0x10
c0011801:	89 c3                	mov    ebx,eax
c0011803:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011807:	05 20 ff ff 0f       	add    eax,0xfffff20
c001180c:	83 ec 08             	sub    esp,0x8
c001180f:	50                   	push   eax
c0011810:	53                   	push   ebx
c0011811:	e8 1e 00 00 00       	call   c0011834 <ReservedFilename::ReservedFilename(int)>
c0011816:	83 c4 10             	add    esp,0x10
c0011819:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001181d:	89 1c 85 e0 ef 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1020],ebx
c0011824:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011828:	e9 7c ff ff ff       	jmp    c00117a9 <UnixFile::UnixFile(int)+0x125>
c001182d:	90                   	nop
c001182e:	83 c4 28             	add    esp,0x28
c0011831:	5b                   	pop    ebx
c0011832:	c3                   	ret    
c0011833:	90                   	nop

c0011834 <ReservedFilename::ReservedFilename(int)>:
c0011834:	83 ec 0c             	sub    esp,0xc
c0011837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001183b:	83 ec 08             	sub    esp,0x8
c001183e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011842:	50                   	push   eax
c0011843:	e8 3c fe ff ff       	call   c0011684 <UnixFile::UnixFile(int)>
c0011848:	83 c4 10             	add    esp,0x10
c001184b:	ba f0 ae 02 c0       	mov    edx,0xc002aef0
c0011850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011854:	89 10                	mov    DWORD PTR [eax],edx
c0011856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001185a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001185e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011861:	90                   	nop
c0011862:	83 c4 0c             	add    esp,0xc
c0011865:	c3                   	ret    

c0011866 <UnixFile::~UnixFile()>:
c0011866:	83 ec 1c             	sub    esp,0x1c
c0011869:	ba d4 ae 02 c0       	mov    edx,0xc002aed4
c001186e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011872:	89 10                	mov    DWORD PTR [eax],edx
c0011874:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011878:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001187b:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011880:	7f 73                	jg     c00118f5 <UnixFile::~UnixFile()+0x8f>
c0011882:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001188a:	83 ec 0c             	sub    esp,0xc
c001188d:	68 58 f0 02 c0       	push   0xc002f058
c0011892:	e8 29 78 01 00       	call   c00290c0 <LinkedList<UnixFile>::getFirstElement()>
c0011897:	83 c4 10             	add    esp,0x10
c001189a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001189e:	83 ec 0c             	sub    esp,0xc
c00118a1:	68 58 f0 02 c0       	push   0xc002f058
c00118a6:	e8 1d 78 01 00       	call   c00290c8 <LinkedList<UnixFile>::removeFirst()>
c00118ab:	83 c4 10             	add    esp,0x10
c00118ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118b2:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00118b6:	74 40                	je     c00118f8 <UnixFile::~UnixFile()+0x92>
c00118b8:	83 ec 08             	sub    esp,0x8
c00118bb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00118bf:	68 58 f0 02 c0       	push   0xc002f058
c00118c4:	e8 23 77 01 00       	call   c0028fec <LinkedList<UnixFile>::addElement(UnixFile*)>
c00118c9:	83 c4 10             	add    esp,0x10
c00118cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118d0:	8d 50 01             	lea    edx,[eax+0x1]
c00118d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00118d7:	3d 88 13 00 00       	cmp    eax,0x1388
c00118dc:	0f 94 c0             	sete   al
c00118df:	84 c0                	test   al,al
c00118e1:	74 a7                	je     c001188a <UnixFile::~UnixFile()+0x24>
c00118e3:	83 ec 0c             	sub    esp,0xc
c00118e6:	68 ac ae 02 c0       	push   0xc002aeac
c00118eb:	e8 a0 8f 00 00       	call   c001a890 <Krnl::panic(char const*)>
c00118f0:	83 c4 10             	add    esp,0x10
c00118f3:	eb 95                	jmp    c001188a <UnixFile::~UnixFile()+0x24>
c00118f5:	90                   	nop
c00118f6:	eb 01                	jmp    c00118f9 <UnixFile::~UnixFile()+0x93>
c00118f8:	90                   	nop
c00118f9:	90                   	nop
c00118fa:	83 c4 1c             	add    esp,0x1c
c00118fd:	c3                   	ret    

c00118fe <UnixFile::~UnixFile()>:
c00118fe:	83 ec 0c             	sub    esp,0xc
c0011901:	83 ec 0c             	sub    esp,0xc
c0011904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011908:	e8 59 ff ff ff       	call   c0011866 <UnixFile::~UnixFile()>
c001190d:	83 c4 10             	add    esp,0x10
c0011910:	83 ec 08             	sub    esp,0x8
c0011913:	6a 0c                	push   0xc
c0011915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011919:	e8 cf 14 00 00       	call   c0012ded <operator delete(void*, unsigned long)>
c001191e:	83 c4 10             	add    esp,0x10
c0011921:	83 c4 0c             	add    esp,0xc
c0011924:	c3                   	ret    
c0011925:	90                   	nop

c0011926 <ReservedFilename::~ReservedFilename()>:
c0011926:	83 ec 0c             	sub    esp,0xc
c0011929:	ba f0 ae 02 c0       	mov    edx,0xc002aef0
c001192e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011932:	89 10                	mov    DWORD PTR [eax],edx
c0011934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011938:	83 ec 0c             	sub    esp,0xc
c001193b:	50                   	push   eax
c001193c:	e8 25 ff ff ff       	call   c0011866 <UnixFile::~UnixFile()>
c0011941:	83 c4 10             	add    esp,0x10
c0011944:	90                   	nop
c0011945:	83 c4 0c             	add    esp,0xc
c0011948:	c3                   	ret    
c0011949:	90                   	nop

c001194a <ReservedFilename::~ReservedFilename()>:
c001194a:	83 ec 0c             	sub    esp,0xc
c001194d:	83 ec 0c             	sub    esp,0xc
c0011950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011954:	e8 cd ff ff ff       	call   c0011926 <ReservedFilename::~ReservedFilename()>
c0011959:	83 c4 10             	add    esp,0x10
c001195c:	83 ec 08             	sub    esp,0x8
c001195f:	6a 0c                	push   0xc
c0011961:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011965:	e8 83 14 00 00       	call   c0012ded <operator delete(void*, unsigned long)>
c001196a:	83 c4 10             	add    esp,0x10
c001196d:	83 c4 0c             	add    esp,0xc
c0011970:	c3                   	ret    

c0011971 <getFromFileDescriptor(int)>:
c0011971:	53                   	push   ebx
c0011972:	83 ec 08             	sub    esp,0x8
c0011975:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011979:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001197f:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011985:	7f 2c                	jg     c00119b3 <getFromFileDescriptor(int)+0x42>
c0011987:	83 ec 0c             	sub    esp,0xc
c001198a:	68 58 f0 02 c0       	push   0xc002f058
c001198f:	e8 2c 77 01 00       	call   c00290c0 <LinkedList<UnixFile>::getFirstElement()>
c0011994:	83 c4 10             	add    esp,0x10
c0011997:	85 c0                	test   eax,eax
c0011999:	75 04                	jne    c001199f <getFromFileDescriptor(int)+0x2e>
c001199b:	31 c0                	xor    eax,eax
c001199d:	eb 6e                	jmp    c0011a0d <getFromFileDescriptor(int)+0x9c>
c001199f:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00119a2:	74 69                	je     c0011a0d <getFromFileDescriptor(int)+0x9c>
c00119a4:	52                   	push   edx
c00119a5:	52                   	push   edx
c00119a6:	50                   	push   eax
c00119a7:	68 58 f0 02 c0       	push   0xc002f058
c00119ac:	e8 b9 77 01 00       	call   c002916a <LinkedList<UnixFile>::getNext(UnixFile*)>
c00119b1:	eb e1                	jmp    c0011994 <getFromFileDescriptor(int)+0x23>
c00119b3:	a1 4c f0 02 c0       	mov    eax,ds:0xc002f04c
c00119b8:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00119be:	74 4d                	je     c0011a0d <getFromFileDescriptor(int)+0x9c>
c00119c0:	a1 50 f0 02 c0       	mov    eax,ds:0xc002f050
c00119c5:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00119cb:	74 40                	je     c0011a0d <getFromFileDescriptor(int)+0x9c>
c00119cd:	a1 48 f0 02 c0       	mov    eax,ds:0xc002f048
c00119d2:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00119d8:	74 33                	je     c0011a0d <getFromFileDescriptor(int)+0x9c>
c00119da:	a1 44 f0 02 c0       	mov    eax,ds:0xc002f044
c00119df:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00119e5:	74 26                	je     c0011a0d <getFromFileDescriptor(int)+0x9c>
c00119e7:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00119ed:	83 f8 08             	cmp    eax,0x8
c00119f0:	77 09                	ja     c00119fb <getFromFileDescriptor(int)+0x8a>
c00119f2:	8b 04 85 20 f0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0fe0]
c00119f9:	eb 12                	jmp    c0011a0d <getFromFileDescriptor(int)+0x9c>
c00119fb:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011a01:	83 fb 08             	cmp    ebx,0x8
c0011a04:	77 95                	ja     c001199b <getFromFileDescriptor(int)+0x2a>
c0011a06:	8b 04 9d e0 ef 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1020]
c0011a0d:	83 c4 08             	add    esp,0x8
c0011a10:	5b                   	pop    ebx
c0011a11:	c3                   	ret    

c0011a12 <__static_initialization_and_destruction_0(int, int)>:
c0011a12:	83 ec 0c             	sub    esp,0xc
c0011a15:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011a1a:	75 34                	jne    c0011a50 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a1c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011a24:	75 2a                	jne    c0011a50 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a26:	83 ec 0c             	sub    esp,0xc
c0011a29:	68 58 f0 02 c0       	push   0xc002f058
c0011a2e:	e8 61 75 01 00       	call   c0028f94 <LinkedList<UnixFile>::LinkedList()>
c0011a33:	83 c4 10             	add    esp,0x10
c0011a36:	83 ec 04             	sub    esp,0x4
c0011a39:	68 10 de 02 c0       	push   0xc002de10
c0011a3e:	68 58 f0 02 c0       	push   0xc002f058
c0011a43:	68 92 8f 02 c0       	push   0xc0028f92
c0011a48:	e8 1a 13 00 00       	call   c0012d67 <__cxa_atexit>
c0011a4d:	83 c4 10             	add    esp,0x10
c0011a50:	90                   	nop
c0011a51:	83 c4 0c             	add    esp,0xc
c0011a54:	c3                   	ret    

c0011a55 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011a55:	83 ec 0c             	sub    esp,0xc
c0011a58:	83 ec 08             	sub    esp,0x8
c0011a5b:	68 ff ff 00 00       	push   0xffff
c0011a60:	6a 01                	push   0x1
c0011a62:	e8 ab ff ff ff       	call   c0011a12 <__static_initialization_and_destruction_0(int, int)>
c0011a67:	83 c4 10             	add    esp,0x10
c0011a6a:	83 c4 0c             	add    esp,0xc
c0011a6d:	c3                   	ret    

c0011a6e <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011a6e:	53                   	push   ebx
c0011a6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011a73:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011a77:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011a7d:	89 c8                	mov    eax,ecx
c0011a7f:	d1 e8                	shr    eax,1
c0011a81:	03 05 88 de 02 c0    	add    eax,DWORD PTR ds:0xc002de88
c0011a87:	83 e1 01             	and    ecx,0x1
c0011a8a:	8a 10                	mov    dl,BYTE PTR [eax]
c0011a8c:	75 09                	jne    c0011a97 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011a8e:	83 e2 f0             	and    edx,0xfffffff0
c0011a91:	09 da                	or     edx,ebx
c0011a93:	88 10                	mov    BYTE PTR [eax],dl
c0011a95:	5b                   	pop    ebx
c0011a96:	c3                   	ret    
c0011a97:	c1 e3 04             	shl    ebx,0x4
c0011a9a:	83 e2 0f             	and    edx,0xf
c0011a9d:	09 da                	or     edx,ebx
c0011a9f:	88 10                	mov    BYTE PTR [eax],dl
c0011aa1:	5b                   	pop    ebx
c0011aa2:	c3                   	ret    

c0011aa3 <Virt::getPageState(unsigned long)>:
c0011aa3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011aa7:	8b 0d 88 de 02 c0    	mov    ecx,DWORD PTR ds:0xc002de88
c0011aad:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011ab3:	89 d0                	mov    eax,edx
c0011ab5:	d1 e8                	shr    eax,1
c0011ab7:	83 e2 01             	and    edx,0x1
c0011aba:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011abd:	75 04                	jne    c0011ac3 <Virt::getPageState(unsigned long)+0x20>
c0011abf:	83 e0 0f             	and    eax,0xf
c0011ac2:	c3                   	ret    
c0011ac3:	c0 e8 04             	shr    al,0x4
c0011ac6:	c3                   	ret    

c0011ac7 <Virt::allocateKernelVirtualPages(int)>:
c0011ac7:	55                   	push   ebp
c0011ac8:	31 ed                	xor    ebp,ebp
c0011aca:	57                   	push   edi
c0011acb:	56                   	push   esi
c0011acc:	53                   	push   ebx
c0011acd:	31 db                	xor    ebx,ebx
c0011acf:	83 ec 1c             	sub    esp,0x1c
c0011ad2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011ad6:	8b 3d 84 de 02 c0    	mov    edi,DWORD PTR ds:0xc002de84
c0011adc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011ae1:	57                   	push   edi
c0011ae2:	e8 bc ff ff ff       	call   c0011aa3 <Virt::getPageState(unsigned long)>
c0011ae7:	5a                   	pop    edx
c0011ae8:	84 c0                	test   al,al
c0011aea:	75 3a                	jne    c0011b26 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011aec:	85 db                	test   ebx,ebx
c0011aee:	75 02                	jne    c0011af2 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011af0:	89 fd                	mov    ebp,edi
c0011af2:	43                   	inc    ebx
c0011af3:	39 f3                	cmp    ebx,esi
c0011af5:	74 5a                	je     c0011b51 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011af7:	47                   	inc    edi
c0011af8:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011afe:	76 31                	jbe    c0011b31 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011b00:	c7 05 84 de 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002de84,0xc8000
c0011b0a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011b0f:	75 28                	jne    c0011b39 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011b11:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011b16:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011b1b:	57                   	push   edi
c0011b1c:	e8 82 ff ff ff       	call   c0011aa3 <Virt::getPageState(unsigned long)>
c0011b21:	5a                   	pop    edx
c0011b22:	84 c0                	test   al,al
c0011b24:	74 c6                	je     c0011aec <Virt::allocateKernelVirtualPages(int)+0x25>
c0011b26:	31 db                	xor    ebx,ebx
c0011b28:	47                   	inc    edi
c0011b29:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b2f:	77 cf                	ja     c0011b00 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011b31:	89 3d 84 de 02 c0    	mov    DWORD PTR ds:0xc002de84,edi
c0011b37:	eb a8                	jmp    c0011ae1 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011b39:	83 ec 0c             	sub    esp,0xc
c0011b3c:	68 04 af 02 c0       	push   0xc002af04
c0011b41:	e8 4a 8d 00 00       	call   c001a890 <Krnl::panic(char const*)>
c0011b46:	8b 3d 84 de 02 c0    	mov    edi,DWORD PTR ds:0xc002de84
c0011b4c:	83 c4 10             	add    esp,0x10
c0011b4f:	eb 90                	jmp    c0011ae1 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011b51:	89 2d 84 de 02 c0    	mov    DWORD PTR ds:0xc002de84,ebp
c0011b57:	4b                   	dec    ebx
c0011b58:	74 5f                	je     c0011bb9 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011b5a:	85 f6                	test   esi,esi
c0011b5c:	74 3d                	je     c0011b9b <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011b5e:	89 e8                	mov    eax,ebp
c0011b60:	31 db                	xor    ebx,ebx
c0011b62:	8d 7e ff             	lea    edi,[esi-0x1]
c0011b65:	eb 14                	jmp    c0011b7b <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011b67:	6a 01                	push   0x1
c0011b69:	43                   	inc    ebx
c0011b6a:	50                   	push   eax
c0011b6b:	e8 fe fe ff ff       	call   c0011a6e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b70:	58                   	pop    eax
c0011b71:	39 f3                	cmp    ebx,esi
c0011b73:	5a                   	pop    edx
c0011b74:	74 25                	je     c0011b9b <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011b76:	a1 84 de 02 c0       	mov    eax,ds:0xc002de84
c0011b7b:	8d 50 01             	lea    edx,[eax+0x1]
c0011b7e:	85 db                	test   ebx,ebx
c0011b80:	89 15 84 de 02 c0    	mov    DWORD PTR ds:0xc002de84,edx
c0011b86:	74 20                	je     c0011ba8 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011b88:	39 df                	cmp    edi,ebx
c0011b8a:	75 db                	jne    c0011b67 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011b8c:	6a 03                	push   0x3
c0011b8e:	43                   	inc    ebx
c0011b8f:	50                   	push   eax
c0011b90:	e8 d9 fe ff ff       	call   c0011a6e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b95:	59                   	pop    ecx
c0011b96:	39 f3                	cmp    ebx,esi
c0011b98:	58                   	pop    eax
c0011b99:	75 db                	jne    c0011b76 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011b9b:	83 c4 1c             	add    esp,0x1c
c0011b9e:	89 e8                	mov    eax,ebp
c0011ba0:	5b                   	pop    ebx
c0011ba1:	c1 e0 0c             	shl    eax,0xc
c0011ba4:	5e                   	pop    esi
c0011ba5:	5f                   	pop    edi
c0011ba6:	5d                   	pop    ebp
c0011ba7:	c3                   	ret    
c0011ba8:	6a 02                	push   0x2
c0011baa:	bb 01 00 00 00       	mov    ebx,0x1
c0011baf:	50                   	push   eax
c0011bb0:	e8 b9 fe ff ff       	call   c0011a6e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bb5:	58                   	pop    eax
c0011bb6:	5a                   	pop    edx
c0011bb7:	eb bd                	jmp    c0011b76 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011bb9:	6a 04                	push   0x4
c0011bbb:	8d 45 01             	lea    eax,[ebp+0x1]
c0011bbe:	55                   	push   ebp
c0011bbf:	a3 84 de 02 c0       	mov    ds:0xc002de84,eax
c0011bc4:	e8 a5 fe ff ff       	call   c0011a6e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bc9:	59                   	pop    ecx
c0011bca:	89 e8                	mov    eax,ebp
c0011bcc:	5b                   	pop    ebx
c0011bcd:	c1 e0 0c             	shl    eax,0xc
c0011bd0:	83 c4 1c             	add    esp,0x1c
c0011bd3:	5b                   	pop    ebx
c0011bd4:	5e                   	pop    esi
c0011bd5:	5f                   	pop    edi
c0011bd6:	5d                   	pop    ebp
c0011bd7:	c3                   	ret    

c0011bd8 <Virt::freeSwapfilePage(unsigned long)>:
c0011bd8:	53                   	push   ebx
c0011bd9:	8b 15 6c f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f06c
c0011bdf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011be3:	b8 01 00 00 00       	mov    eax,0x1
c0011be8:	89 cb                	mov    ebx,ecx
c0011bea:	d3 e0                	shl    eax,cl
c0011bec:	c1 eb 05             	shr    ebx,0x5
c0011bef:	f7 d0                	not    eax
c0011bf1:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011bf4:	5b                   	pop    ebx
c0011bf5:	c3                   	ret    

c0011bf6 <Virt::swapIDToSector(unsigned long)>:
c0011bf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bfa:	0f af 05 8c de 02 c0 	imul   eax,DWORD PTR ds:0xc002de8c
c0011c01:	03 05 94 de 02 c0    	add    eax,DWORD PTR ds:0xc002de94
c0011c07:	c3                   	ret    

c0011c08 <Virt::allocateSwapfilePage()>:
c0011c08:	55                   	push   ebp
c0011c09:	31 d2                	xor    edx,edx
c0011c0b:	57                   	push   edi
c0011c0c:	56                   	push   esi
c0011c0d:	53                   	push   ebx
c0011c0e:	83 ec 0c             	sub    esp,0xc
c0011c11:	8b 0d 8c de 02 c0    	mov    ecx,DWORD PTR ds:0xc002de8c
c0011c17:	a1 90 de 02 c0       	mov    eax,ds:0xc002de90
c0011c1c:	f7 f1                	div    ecx
c0011c1e:	39 0d 90 de 02 c0    	cmp    DWORD PTR ds:0xc002de90,ecx
c0011c24:	72 2d                	jb     c0011c53 <Virt::allocateSwapfilePage()+0x4b>
c0011c26:	8b 35 6c f0 02 c0    	mov    esi,DWORD PTR ds:0xc002f06c
c0011c2c:	8b 16                	mov    edx,DWORD PTR [esi]
c0011c2e:	f6 c2 01             	test   dl,0x1
c0011c31:	74 3c                	je     c0011c6f <Virt::allocateSwapfilePage()+0x67>
c0011c33:	31 c9                	xor    ecx,ecx
c0011c35:	bf 01 00 00 00       	mov    edi,0x1
c0011c3a:	eb 12                	jmp    c0011c4e <Virt::allocateSwapfilePage()+0x46>
c0011c3c:	89 fd                	mov    ebp,edi
c0011c3e:	89 ca                	mov    edx,ecx
c0011c40:	d3 e5                	shl    ebp,cl
c0011c42:	c1 ea 05             	shr    edx,0x5
c0011c45:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011c48:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011c4a:	85 ea                	test   edx,ebp
c0011c4c:	74 2a                	je     c0011c78 <Virt::allocateSwapfilePage()+0x70>
c0011c4e:	41                   	inc    ecx
c0011c4f:	39 c8                	cmp    eax,ecx
c0011c51:	77 e9                	ja     c0011c3c <Virt::allocateSwapfilePage()+0x34>
c0011c53:	83 ec 0c             	sub    esp,0xc
c0011c56:	68 8b b0 02 c0       	push   0xc002b08b
c0011c5b:	e8 30 8c 00 00       	call   c001a890 <Krnl::panic(char const*)>
c0011c60:	83 c4 10             	add    esp,0x10
c0011c63:	31 c9                	xor    ecx,ecx
c0011c65:	83 c4 0c             	add    esp,0xc
c0011c68:	89 c8                	mov    eax,ecx
c0011c6a:	5b                   	pop    ebx
c0011c6b:	5e                   	pop    esi
c0011c6c:	5f                   	pop    edi
c0011c6d:	5d                   	pop    ebp
c0011c6e:	c3                   	ret    
c0011c6f:	89 f3                	mov    ebx,esi
c0011c71:	bd 01 00 00 00       	mov    ebp,0x1
c0011c76:	31 c9                	xor    ecx,ecx
c0011c78:	09 ea                	or     edx,ebp
c0011c7a:	89 c8                	mov    eax,ecx
c0011c7c:	89 13                	mov    DWORD PTR [ebx],edx
c0011c7e:	83 c4 0c             	add    esp,0xc
c0011c81:	5b                   	pop    ebx
c0011c82:	5e                   	pop    esi
c0011c83:	5f                   	pop    edi
c0011c84:	5d                   	pop    ebp
c0011c85:	c3                   	ret    

c0011c86 <Virt::virtualMemorySetup()>:
c0011c86:	53                   	push   ebx
c0011c87:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c8c:	83 ec 08             	sub    esp,0x8
c0011c8f:	6a 0f                	push   0xf
c0011c91:	53                   	push   ebx
c0011c92:	43                   	inc    ebx
c0011c93:	e8 d6 fd ff ff       	call   c0011a6e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c98:	59                   	pop    ecx
c0011c99:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c9f:	58                   	pop    eax
c0011ca0:	75 ed                	jne    c0011c8f <Virt::virtualMemorySetup()+0x9>
c0011ca2:	83 ec 08             	sub    esp,0x8
c0011ca5:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011caa:	68 00 00 00 c8       	push   0xc8000000
c0011caf:	68 a2 b0 02 c0       	push   0xc002b0a2
c0011cb4:	e8 14 12 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0011cb9:	58                   	pop    eax
c0011cba:	5a                   	pop    edx
c0011cbb:	68 00 f0 ff ef       	push   0xeffff000
c0011cc0:	68 b6 b0 02 c0       	push   0xc002b0b6
c0011cc5:	e8 03 12 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0011cca:	83 c4 10             	add    esp,0x10
c0011ccd:	83 ec 08             	sub    esp,0x8
c0011cd0:	6a 00                	push   0x0
c0011cd2:	53                   	push   ebx
c0011cd3:	43                   	inc    ebx
c0011cd4:	e8 95 fd ff ff       	call   c0011a6e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011cd9:	83 c4 10             	add    esp,0x10
c0011cdc:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011ce2:	75 e9                	jne    c0011ccd <Virt::virtualMemorySetup()+0x47>
c0011ce4:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011ce9:	83 ec 08             	sub    esp,0x8
c0011cec:	6a 0f                	push   0xf
c0011cee:	53                   	push   ebx
c0011cef:	43                   	inc    ebx
c0011cf0:	e8 79 fd ff ff       	call   c0011a6e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011cf5:	83 c4 10             	add    esp,0x10
c0011cf8:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011cfe:	75 e9                	jne    c0011ce9 <Virt::virtualMemorySetup()+0x63>
c0011d00:	83 c4 08             	add    esp,0x8
c0011d03:	5b                   	pop    ebx
c0011d04:	c3                   	ret    

c0011d05 <Virt::swappingSetup()>:
c0011d05:	c3                   	ret    

c0011d06 <Virt::setupPageSwapping(int)>:
c0011d06:	57                   	push   edi
c0011d07:	56                   	push   esi
c0011d08:	53                   	push   ebx
c0011d09:	83 ec 1c             	sub    esp,0x1c
c0011d0c:	68 ca b0 02 c0       	push   0xc002b0ca
c0011d11:	e8 b7 11 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0011d16:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011d1d:	e8 0c dc ff ff       	call   c000f92e <malloc>
c0011d22:	83 c4 0c             	add    esp,0xc
c0011d25:	89 c6                	mov    esi,eax
c0011d27:	ff 35 50 24 03 c0    	push   DWORD PTR ds:0xc0032450
c0011d2d:	68 de b0 02 c0       	push   0xc002b0de
c0011d32:	50                   	push   eax
c0011d33:	e8 f4 16 00 00       	call   c001342c <File::File(char const*, Process*)>
c0011d38:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d3b:	e8 c8 18 00 00       	call   c0013608 <File::unlink()>
c0011d40:	59                   	pop    ecx
c0011d41:	5b                   	pop    ebx
c0011d42:	6a 12                	push   0x12
c0011d44:	56                   	push   esi
c0011d45:	e8 46 17 00 00       	call   c0013490 <File::open(FileOpenMode)>
c0011d4a:	83 c4 10             	add    esp,0x10
c0011d4d:	85 c0                	test   eax,eax
c0011d4f:	0f 85 5b 01 00 00    	jne    c0011eb0 <Virt::setupPageSwapping(int)+0x1aa>
c0011d55:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d59:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d61:	c1 e3 08             	shl    ebx,0x8
c0011d64:	83 ec 0c             	sub    esp,0xc
c0011d67:	68 00 00 01 00       	push   0x10000
c0011d6c:	e8 bd db ff ff       	call   c000f92e <malloc>
c0011d71:	83 c4 0c             	add    esp,0xc
c0011d74:	89 c7                	mov    edi,eax
c0011d76:	68 00 00 01 00       	push   0x10000
c0011d7b:	68 ee 00 00 00       	push   0xee
c0011d80:	50                   	push   eax
c0011d81:	e8 e6 e9 fe ff       	call   c000076c <memset>
c0011d86:	83 c4 10             	add    esp,0x10
c0011d89:	85 db                	test   ebx,ebx
c0011d8b:	79 03                	jns    c0011d90 <Virt::setupPageSwapping(int)+0x8a>
c0011d8d:	83 c3 0f             	add    ebx,0xf
c0011d90:	c1 fb 04             	sar    ebx,0x4
c0011d93:	4b                   	dec    ebx
c0011d94:	83 fb ff             	cmp    ebx,0xffffffff
c0011d97:	74 4f                	je     c0011de8 <Virt::setupPageSwapping(int)+0xe2>
c0011d99:	83 ec 0c             	sub    esp,0xc
c0011d9c:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d9e:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011da2:	52                   	push   edx
c0011da3:	57                   	push   edi
c0011da4:	6a 00                	push   0x0
c0011da6:	68 00 00 01 00       	push   0x10000
c0011dab:	56                   	push   esi
c0011dac:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011daf:	83 c4 20             	add    esp,0x20
c0011db2:	85 c0                	test   eax,eax
c0011db4:	0f 85 e0 00 00 00    	jne    c0011e9a <Virt::setupPageSwapping(int)+0x194>
c0011dba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011dbe:	3d 00 00 01 00       	cmp    eax,0x10000
c0011dc3:	74 ce                	je     c0011d93 <Virt::setupPageSwapping(int)+0x8d>
c0011dc5:	83 ec 08             	sub    esp,0x8
c0011dc8:	4b                   	dec    ebx
c0011dc9:	50                   	push   eax
c0011dca:	68 31 b1 02 c0       	push   0xc002b131
c0011dcf:	e8 f9 10 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0011dd4:	c7 04 24 3a b1 02 c0 	mov    DWORD PTR [esp],0xc002b13a
c0011ddb:	e8 b0 8a 00 00       	call   c001a890 <Krnl::panic(char const*)>
c0011de0:	83 c4 10             	add    esp,0x10
c0011de3:	83 fb ff             	cmp    ebx,0xffffffff
c0011de6:	75 b1                	jne    c0011d99 <Virt::setupPageSwapping(int)+0x93>
c0011de8:	83 ec 0c             	sub    esp,0xc
c0011deb:	56                   	push   esi
c0011dec:	e8 fd 16 00 00       	call   c00134ee <File::close()>
c0011df1:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011df4:	e8 55 db ff ff       	call   c000f94e <rfree>
c0011df9:	83 c4 10             	add    esp,0x10
c0011dfc:	85 f6                	test   esi,esi
c0011dfe:	74 0c                	je     c0011e0c <Virt::setupPageSwapping(int)+0x106>
c0011e00:	83 ec 0c             	sub    esp,0xc
c0011e03:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e05:	56                   	push   esi
c0011e06:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e09:	83 c4 10             	add    esp,0x10
c0011e0c:	83 ec 08             	sub    esp,0x8
c0011e0f:	a1 08 f5 02 c0       	mov    eax,ds:0xc002f508
c0011e14:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011e1a:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e1c:	68 de b0 02 c0       	push   0xc002b0de
c0011e21:	50                   	push   eax
c0011e22:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011e25:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011e29:	c6 05 98 de 02 c0 43 	mov    BYTE PTR ds:0xc002de98,0x43
c0011e30:	c1 e2 0b             	shl    edx,0xb
c0011e33:	a3 94 de 02 c0       	mov    ds:0xc002de94,eax
c0011e38:	89 15 90 de 02 c0    	mov    DWORD PTR ds:0xc002de90,edx
c0011e3e:	c7 05 8c de 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002de8c,0x8
c0011e48:	c1 ea 08             	shr    edx,0x8
c0011e4b:	89 14 24             	mov    DWORD PTR [esp],edx
c0011e4e:	e8 db da ff ff       	call   c000f92e <malloc>
c0011e53:	83 c4 0c             	add    esp,0xc
c0011e56:	89 c1                	mov    ecx,eax
c0011e58:	a3 6c f0 02 c0       	mov    ds:0xc002f06c,eax
c0011e5d:	31 d2                	xor    edx,edx
c0011e5f:	a1 90 de 02 c0       	mov    eax,ds:0xc002de90
c0011e64:	f7 35 8c de 02 c0    	div    DWORD PTR ds:0xc002de8c
c0011e6a:	c1 e8 05             	shr    eax,0x5
c0011e6d:	50                   	push   eax
c0011e6e:	6a 00                	push   0x0
c0011e70:	51                   	push   ecx
c0011e71:	e8 f6 e8 fe ff       	call   c000076c <memset>
c0011e76:	58                   	pop    eax
c0011e77:	a1 90 de 02 c0       	mov    eax,ds:0xc002de90
c0011e7c:	5a                   	pop    edx
c0011e7d:	31 d2                	xor    edx,edx
c0011e7f:	f7 35 8c de 02 c0    	div    DWORD PTR ds:0xc002de8c
c0011e85:	c1 e8 05             	shr    eax,0x5
c0011e88:	50                   	push   eax
c0011e89:	68 40 b1 02 c0       	push   0xc002b140
c0011e8e:	e8 3a 10 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0011e93:	83 c4 20             	add    esp,0x20
c0011e96:	5b                   	pop    ebx
c0011e97:	5e                   	pop    esi
c0011e98:	5f                   	pop    edi
c0011e99:	c3                   	ret    
c0011e9a:	83 ec 08             	sub    esp,0x8
c0011e9d:	50                   	push   eax
c0011e9e:	68 19 b1 02 c0       	push   0xc002b119
c0011ea3:	e8 25 10 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0011ea8:	83 c4 10             	add    esp,0x10
c0011eab:	e9 0a ff ff ff       	jmp    c0011dba <Virt::setupPageSwapping(int)+0xb4>
c0011eb0:	83 ec 08             	sub    esp,0x8
c0011eb3:	50                   	push   eax
c0011eb4:	68 f5 b0 02 c0       	push   0xc002b0f5
c0011eb9:	e8 0f 10 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0011ebe:	c7 04 24 fe b0 02 c0 	mov    DWORD PTR [esp],0xc002b0fe
c0011ec5:	e8 c6 89 00 00       	call   c001a890 <Krnl::panic(char const*)>
c0011eca:	83 c4 10             	add    esp,0x10
c0011ecd:	e9 83 fe ff ff       	jmp    c0011d55 <Virt::setupPageSwapping(int)+0x4f>

c0011ed2 <VAS::VAS()>:
c0011ed2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ed6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011edd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ee1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011ee8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011eec:	a3 70 f0 02 c0       	mov    ds:0xc002f070,eax
c0011ef1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ef5:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011ef9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011efd:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f04:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011f0b:	90                   	nop
c0011f0c:	c3                   	ret    
c0011f0d:	90                   	nop

c0011f0e <VAS::VAS(VAS*)>:
c0011f0e:	83 ec 0c             	sub    esp,0xc
c0011f11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f15:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f20:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011f27:	83 ec 0c             	sub    esp,0xc
c0011f2a:	68 24 af 02 c0       	push   0xc002af24
c0011f2f:	e8 5c 89 00 00       	call   c001a890 <Krnl::panic(char const*)>
c0011f34:	83 c4 10             	add    esp,0x10
c0011f37:	90                   	nop
c0011f38:	83 c4 0c             	add    esp,0xc
c0011f3b:	c3                   	ret    

c0011f3c <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011f3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f40:	89 c2                	mov    edx,eax
c0011f42:	c1 e8 0a             	shr    eax,0xa
c0011f45:	c1 ea 16             	shr    edx,0x16
c0011f48:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011f4d:	19 c9                	sbb    ecx,ecx
c0011f4f:	c1 e2 0c             	shl    edx,0xc
c0011f52:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011f58:	25 fc 0f 00 00       	and    eax,0xffc
c0011f5d:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011f64:	01 d0                	add    eax,edx
c0011f66:	c3                   	ret    
c0011f67:	90                   	nop

c0011f68 <VAS::getPageTableEntry(unsigned long)>:
c0011f68:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011f6c:	89 ca                	mov    edx,ecx
c0011f6e:	c1 e9 0a             	shr    ecx,0xa
c0011f71:	c1 ea 16             	shr    edx,0x16
c0011f74:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011f7a:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011f80:	c1 e0 0c             	shl    eax,0xc
c0011f83:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011f86:	c3                   	ret    

c0011f87 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011f87:	57                   	push   edi
c0011f88:	56                   	push   esi
c0011f89:	be 01 00 00 00       	mov    esi,0x1
c0011f8e:	53                   	push   ebx
c0011f8f:	83 ec 10             	sub    esp,0x10
c0011f92:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f96:	c1 eb 0c             	shr    ebx,0xc
c0011f99:	eb 3f                	jmp    c0011fda <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011f9b:	83 ec 08             	sub    esp,0x8
c0011f9e:	57                   	push   edi
c0011f9f:	ff 35 70 f0 02 c0    	push   DWORD PTR ds:0xc002f070
c0011fa5:	e8 be ff ff ff       	call   c0011f68 <VAS::getPageTableEntry(unsigned long)>
c0011faa:	83 c4 10             	add    esp,0x10
c0011fad:	8b 00                	mov    eax,DWORD PTR [eax]
c0011faf:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011fb3:	f6 c4 04             	test   ah,0x4
c0011fb6:	75 5f                	jne    c0012017 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011fb8:	80 fa 04             	cmp    dl,0x4
c0011fbb:	74 78                	je     c0012035 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011fbd:	80 fa 02             	cmp    dl,0x2
c0011fc0:	0f 84 88 00 00 00    	je     c001204e <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011fc6:	80 fa 03             	cmp    dl,0x3
c0011fc9:	0f 84 ad 00 00 00    	je     c001207c <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011fcf:	fe ca                	dec    dl
c0011fd1:	0f 84 92 00 00 00    	je     c0012069 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011fd7:	43                   	inc    ebx
c0011fd8:	31 f6                	xor    esi,esi
c0011fda:	53                   	push   ebx
c0011fdb:	89 df                	mov    edi,ebx
c0011fdd:	e8 c1 fa ff ff       	call   c0011aa3 <Virt::getPageState(unsigned long)>
c0011fe2:	c1 e7 0c             	shl    edi,0xc
c0011fe5:	59                   	pop    ecx
c0011fe6:	84 c0                	test   al,al
c0011fe8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011fec:	75 ad                	jne    c0011f9b <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011fee:	83 ec 0c             	sub    esp,0xc
c0011ff1:	68 5b b1 02 c0       	push   0xc002b15b
c0011ff6:	e8 95 88 00 00       	call   c001a890 <Krnl::panic(char const*)>
c0011ffb:	58                   	pop    eax
c0011ffc:	5a                   	pop    edx
c0011ffd:	57                   	push   edi
c0011ffe:	ff 35 70 f0 02 c0    	push   DWORD PTR ds:0xc002f070
c0012004:	e8 5f ff ff ff       	call   c0011f68 <VAS::getPageTableEntry(unsigned long)>
c0012009:	83 c4 10             	add    esp,0x10
c001200c:	8b 00                	mov    eax,DWORD PTR [eax]
c001200e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012012:	f6 c4 04             	test   ah,0x4
c0012015:	74 c0                	je     c0011fd7 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012017:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001201b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012020:	83 ec 0c             	sub    esp,0xc
c0012023:	50                   	push   eax
c0012024:	e8 e7 de ff ff       	call   c000ff10 <Phys::freePage(unsigned long)>
c0012029:	83 c4 10             	add    esp,0x10
c001202c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012030:	80 fa 04             	cmp    dl,0x4
c0012033:	75 88                	jne    c0011fbd <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0012035:	89 f0                	mov    eax,esi
c0012037:	84 c0                	test   al,al
c0012039:	75 47                	jne    c0012082 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c001203b:	c7 44 24 20 48 af 02 c0 	mov    DWORD PTR [esp+0x20],0xc002af48
c0012043:	83 c4 10             	add    esp,0x10
c0012046:	5b                   	pop    ebx
c0012047:	5e                   	pop    esi
c0012048:	5f                   	pop    edi
c0012049:	e9 42 88 00 00       	jmp    c001a890 <Krnl::panic(char const*)>
c001204e:	89 f0                	mov    eax,esi
c0012050:	84 c0                	test   al,al
c0012052:	75 15                	jne    c0012069 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012054:	83 ec 0c             	sub    esp,0xc
c0012057:	68 77 b1 02 c0       	push   0xc002b177
c001205c:	e8 2f 88 00 00       	call   c001a890 <Krnl::panic(char const*)>
c0012061:	83 c4 10             	add    esp,0x10
c0012064:	e9 6e ff ff ff       	jmp    c0011fd7 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012069:	83 ec 08             	sub    esp,0x8
c001206c:	6a 00                	push   0x0
c001206e:	53                   	push   ebx
c001206f:	e8 fa f9 ff ff       	call   c0011a6e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012074:	83 c4 10             	add    esp,0x10
c0012077:	e9 5b ff ff ff       	jmp    c0011fd7 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001207c:	89 f0                	mov    eax,esi
c001207e:	84 c0                	test   al,al
c0012080:	75 15                	jne    c0012097 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0012082:	83 ec 08             	sub    esp,0x8
c0012085:	6a 00                	push   0x0
c0012087:	53                   	push   ebx
c0012088:	e8 e1 f9 ff ff       	call   c0011a6e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001208d:	83 c4 10             	add    esp,0x10
c0012090:	83 c4 10             	add    esp,0x10
c0012093:	5b                   	pop    ebx
c0012094:	5e                   	pop    esi
c0012095:	5f                   	pop    edi
c0012096:	c3                   	ret    
c0012097:	c7 44 24 20 93 b1 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b193
c001209f:	83 c4 10             	add    esp,0x10
c00120a2:	5b                   	pop    ebx
c00120a3:	5e                   	pop    esi
c00120a4:	5f                   	pop    edi
c00120a5:	e9 e6 87 00 00       	jmp    c001a890 <Krnl::panic(char const*)>

c00120aa <VAS::freeAllocatedPages(unsigned long)>:
c00120aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00120b2:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00120b6:	74 09                	je     c00120c1 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00120b8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00120bc:	e9 c6 fe ff ff       	jmp    c0011f87 <Virt::freeKernelVirtualPages(unsigned long)>
c00120c1:	c7 44 24 04 6c af 02 c0 	mov    DWORD PTR [esp+0x4],0xc002af6c
c00120c9:	e9 ff 0d 00 00       	jmp    c0012ecd <Dbg::kprintf(char const*, ...)>

c00120ce <VAS::virtualToPhysical(unsigned long)>:
c00120ce:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00120d2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00120d6:	e8 8d fe ff ff       	call   c0011f68 <VAS::getPageTableEntry(unsigned long)>
c00120db:	5a                   	pop    edx
c00120dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00120de:	59                   	pop    ecx
c00120df:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120e4:	c3                   	ret    
c00120e5:	90                   	nop

c00120e6 <VAS::reflagRange(unsigned long, int, int, int)>:
c00120e6:	55                   	push   ebp
c00120e7:	57                   	push   edi
c00120e8:	56                   	push   esi
c00120e9:	53                   	push   ebx
c00120ea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00120ee:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00120f2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00120f6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00120fa:	85 db                	test   ebx,ebx
c00120fc:	7e 22                	jle    c0012120 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00120fe:	c1 e3 0c             	shl    ebx,0xc
c0012101:	01 f3                	add    ebx,esi
c0012103:	56                   	push   esi
c0012104:	81 c6 00 10 00 00    	add    esi,0x1000
c001210a:	55                   	push   ebp
c001210b:	e8 58 fe ff ff       	call   c0011f68 <VAS::getPageTableEntry(unsigned long)>
c0012110:	5a                   	pop    edx
c0012111:	59                   	pop    ecx
c0012112:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012114:	21 f9                	and    ecx,edi
c0012116:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001211a:	39 f3                	cmp    ebx,esi
c001211c:	89 08                	mov    DWORD PTR [eax],ecx
c001211e:	75 e3                	jne    c0012103 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0012120:	5b                   	pop    ebx
c0012121:	5e                   	pop    esi
c0012122:	5f                   	pop    edi
c0012123:	5d                   	pop    ebp
c0012124:	c3                   	ret    
c0012125:	90                   	nop

c0012126 <VAS::setToWriteCombining(unsigned long, int)>:
c0012126:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c001212b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012131:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0012138:	75 01                	jne    c001213b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c001213a:	c3                   	ret    
c001213b:	68 80 00 00 00       	push   0x80
c0012140:	6a ff                	push   0xffffffff
c0012142:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012146:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001214a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001214e:	e8 93 ff ff ff       	call   c00120e6 <VAS::reflagRange(unsigned long, int, int, int)>
c0012153:	83 c4 14             	add    esp,0x14
c0012156:	c3                   	ret    
c0012157:	90                   	nop

c0012158 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012158:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001215d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012161:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012168:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c001216b:	19 c0                	sbb    eax,eax
c001216d:	83 ca 03             	or     edx,0x3
c0012170:	83 e0 fc             	and    eax,0xfffffffc
c0012173:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c001217a:	0f 20 d8             	mov    eax,cr3
c001217d:	0f 22 d8             	mov    cr3,eax
c0012180:	c3                   	ret    
c0012181:	90                   	nop

c0012182 <VAS::~VAS()>:
c0012182:	83 ec 2c             	sub    esp,0x2c
c0012185:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001218d:	fa                   	cli    
c001218e:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c0012193:	40                   	inc    eax
c0012194:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c0012199:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001219e:	8b 00                	mov    eax,DWORD PTR [eax]
c00121a0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00121a3:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00121a9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00121ad:	6a 01                	push   0x1
c00121af:	50                   	push   eax
c00121b0:	e8 a3 ff ff ff       	call   c0012158 <VAS::mapOtherVASIn(bool, VAS*)>
c00121b5:	83 c4 0c             	add    esp,0xc
c00121b8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00121c0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00121c8:	0f 8f d4 00 00 00    	jg     c00122a2 <VAS::~VAS()+0x120>
c00121ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121d2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00121d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00121d9:	c1 e2 02             	shl    edx,0x2
c00121dc:	01 d0                	add    eax,edx
c00121de:	8b 00                	mov    eax,DWORD PTR [eax]
c00121e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00121e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121e8:	83 e0 01             	and    eax,0x1
c00121eb:	0f 84 a8 00 00 00    	je     c0012299 <VAS::~VAS()+0x117>
c00121f1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00121f9:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012201:	7f 72                	jg     c0012275 <VAS::~VAS()+0xf3>
c0012203:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012207:	c1 e0 0a             	shl    eax,0xa
c001220a:	89 c2                	mov    edx,eax
c001220c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012210:	01 d0                	add    eax,edx
c0012212:	c1 e0 0c             	shl    eax,0xc
c0012215:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012219:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001221e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012220:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012223:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012229:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001222d:	6a 01                	push   0x1
c001222f:	50                   	push   eax
c0012230:	e8 07 fd ff ff       	call   c0011f3c <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012235:	83 c4 0c             	add    esp,0xc
c0012238:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001223c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012240:	8b 00                	mov    eax,DWORD PTR [eax]
c0012242:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012246:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001224a:	25 01 04 00 00       	and    eax,0x401
c001224f:	3d 01 04 00 00       	cmp    eax,0x401
c0012254:	75 19                	jne    c001226f <VAS::~VAS()+0xed>
c0012256:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001225a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001225f:	83 ec 0c             	sub    esp,0xc
c0012262:	50                   	push   eax
c0012263:	e8 a8 dc ff ff       	call   c000ff10 <Phys::freePage(unsigned long)>
c0012268:	83 c4 10             	add    esp,0x10
c001226b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001226f:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0012273:	eb 84                	jmp    c00121f9 <VAS::~VAS()+0x77>
c0012275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012279:	25 00 04 00 00       	and    eax,0x400
c001227e:	74 19                	je     c0012299 <VAS::~VAS()+0x117>
c0012280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012284:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012289:	83 ec 0c             	sub    esp,0xc
c001228c:	50                   	push   eax
c001228d:	e8 7e dc ff ff       	call   c000ff10 <Phys::freePage(unsigned long)>
c0012292:	83 c4 10             	add    esp,0x10
c0012295:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012299:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001229d:	e9 1e ff ff ff       	jmp    c00121c0 <VAS::~VAS()+0x3e>
c00122a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122a6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00122a9:	83 ec 0c             	sub    esp,0xc
c00122ac:	50                   	push   eax
c00122ad:	e8 d5 fc ff ff       	call   c0011f87 <Virt::freeKernelVirtualPages(unsigned long)>
c00122b2:	83 c4 10             	add    esp,0x10
c00122b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00122bc:	83 ec 0c             	sub    esp,0xc
c00122bf:	50                   	push   eax
c00122c0:	e8 4b dc ff ff       	call   c000ff10 <Phys::freePage(unsigned long)>
c00122c5:	83 c4 10             	add    esp,0x10
c00122c8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00122d0:	c1 e0 02             	shl    eax,0x2
c00122d3:	83 ec 08             	sub    esp,0x8
c00122d6:	50                   	push   eax
c00122d7:	68 90 af 02 c0       	push   0xc002af90
c00122dc:	e8 ec 0b 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00122e1:	83 c4 10             	add    esp,0x10
c00122e4:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c00122e9:	48                   	dec    eax
c00122ea:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c00122ef:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c00122f4:	85 c0                	test   eax,eax
c00122f6:	75 01                	jne    c00122f9 <VAS::~VAS()+0x177>
c00122f8:	fb                   	sti    
c00122f9:	90                   	nop
c00122fa:	83 c4 2c             	add    esp,0x2c
c00122fd:	c3                   	ret    

c00122fe <VAS::mapPage(unsigned long, unsigned long, int)>:
c00122fe:	55                   	push   ebp
c00122ff:	57                   	push   edi
c0012300:	56                   	push   esi
c0012301:	53                   	push   ebx
c0012302:	83 ec 1c             	sub    esp,0x1c
c0012305:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012309:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001230d:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012313:	77 08                	ja     c001231d <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012315:	0f 20 d8             	mov    eax,cr3
c0012318:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c001231b:	75 47                	jne    c0012364 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001231d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012321:	09 d8                	or     eax,ebx
c0012323:	a9 ff 0f 00 00       	test   eax,0xfff
c0012328:	75 57                	jne    c0012381 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001232a:	89 de                	mov    esi,ebx
c001232c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001232f:	c1 ee 16             	shr    esi,0x16
c0012332:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012339:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001233d:	74 54                	je     c0012393 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c001233f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012343:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012349:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001234d:	c1 e6 0c             	shl    esi,0xc
c0012350:	c1 eb 0a             	shr    ebx,0xa
c0012353:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012359:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001235c:	83 c4 1c             	add    esp,0x1c
c001235f:	5b                   	pop    ebx
c0012360:	5e                   	pop    esi
c0012361:	5f                   	pop    edi
c0012362:	5d                   	pop    ebp
c0012363:	c3                   	ret    
c0012364:	83 ec 0c             	sub    esp,0xc
c0012367:	68 b0 af 02 c0       	push   0xc002afb0
c001236c:	e8 5c 0b 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0012371:	83 c4 10             	add    esp,0x10
c0012374:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012378:	09 d8                	or     eax,ebx
c001237a:	a9 ff 0f 00 00       	test   eax,0xfff
c001237f:	74 a9                	je     c001232a <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012381:	83 ec 0c             	sub    esp,0xc
c0012384:	68 18 b0 02 c0       	push   0xc002b018
c0012389:	e8 02 85 00 00       	call   c001a890 <Krnl::panic(char const*)>
c001238e:	83 c4 10             	add    esp,0x10
c0012391:	eb 97                	jmp    c001232a <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012393:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012397:	e8 fe db ff ff       	call   c000ff9a <Phys::allocatePage()>
c001239c:	83 ec 0c             	sub    esp,0xc
c001239f:	89 c5                	mov    ebp,eax
c00123a1:	8b 0d 70 f0 02 c0    	mov    ecx,DWORD PTR ds:0xc002f070
c00123a7:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00123ab:	6a 01                	push   0x1
c00123ad:	e8 15 f7 ff ff       	call   c0011ac7 <Virt::allocateKernelVirtualPages(int)>
c00123b2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00123b9:	6a 01                	push   0x1
c00123bb:	50                   	push   eax
c00123bc:	55                   	push   ebp
c00123bd:	81 cd 07 04 00 00    	or     ebp,0x407
c00123c3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00123c7:	51                   	push   ecx
c00123c8:	e8 27 02 00 00       	call   c00125f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00123cd:	83 c4 1c             	add    esp,0x1c
c00123d0:	68 00 10 00 00       	push   0x1000
c00123d5:	6a 00                	push   0x0
c00123d7:	50                   	push   eax
c00123d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123dc:	e8 8b e3 fe ff       	call   c000076c <memset>
c00123e1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00123e5:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00123e8:	e8 9a fb ff ff       	call   c0011f87 <Virt::freeKernelVirtualPages(unsigned long)>
c00123ed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00123f1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00123f4:	83 c4 10             	add    esp,0x10
c00123f7:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00123fa:	e9 40 ff ff ff       	jmp    c001233f <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c00123ff:	90                   	nop

c0012400 <VAS::allocatePages(int, int)>:
c0012400:	55                   	push   ebp
c0012401:	57                   	push   edi
c0012402:	56                   	push   esi
c0012403:	53                   	push   ebx
c0012404:	83 ec 1c             	sub    esp,0x1c
c0012407:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001240b:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0012410:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012416:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001241c:	83 e0 01             	and    eax,0x1
c001241f:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012423:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012427:	0f 85 cc 00 00 00    	jne    c00124f9 <VAS::allocatePages(int, int)+0xf9>
c001242d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012430:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012434:	85 c0                	test   eax,eax
c0012436:	0f 84 a1 00 00 00    	je     c00124dd <VAS::allocatePages(int, int)+0xdd>
c001243c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012440:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012444:	c1 e6 0c             	shl    esi,0xc
c0012447:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001244b:	85 c0                	test   eax,eax
c001244d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012450:	7e 33                	jle    c0012485 <VAS::allocatePages(int, int)+0x85>
c0012452:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012456:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001245a:	81 cd 00 04 00 00    	or     ebp,0x400
c0012460:	e8 35 db ff ff       	call   c000ff9a <Phys::allocatePage()>
c0012465:	55                   	push   ebp
c0012466:	53                   	push   ebx
c0012467:	50                   	push   eax
c0012468:	57                   	push   edi
c0012469:	e8 90 fe ff ff       	call   c00122fe <VAS::mapPage(unsigned long, unsigned long, int)>
c001246e:	83 c4 10             	add    esp,0x10
c0012471:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012476:	74 03                	je     c001247b <VAS::allocatePages(int, int)+0x7b>
c0012478:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001247b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012481:	39 de                	cmp    esi,ebx
c0012483:	75 db                	jne    c0012460 <VAS::allocatePages(int, int)+0x60>
c0012485:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001248a:	75 12                	jne    c001249e <VAS::allocatePages(int, int)+0x9e>
c001248c:	0f 20 d8             	mov    eax,cr3
c001248f:	0f 22 d8             	mov    cr3,eax
c0012492:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012496:	83 c4 1c             	add    esp,0x1c
c0012499:	5b                   	pop    ebx
c001249a:	5e                   	pop    esi
c001249b:	5f                   	pop    edi
c001249c:	5d                   	pop    ebp
c001249d:	c3                   	ret    
c001249e:	c1 ee 0a             	shr    esi,0xa
c00124a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124a5:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00124ab:	c1 eb 0a             	shr    ebx,0xa
c00124ae:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00124b4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00124ba:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00124c0:	39 c3                	cmp    ebx,eax
c00124c2:	77 ce                	ja     c0012492 <VAS::allocatePages(int, int)+0x92>
c00124c4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124c7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124cd:	39 d8                	cmp    eax,ebx
c00124cf:	73 f3                	jae    c00124c4 <VAS::allocatePages(int, int)+0xc4>
c00124d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124d5:	83 c4 1c             	add    esp,0x1c
c00124d8:	5b                   	pop    ebx
c00124d9:	5e                   	pop    esi
c00124da:	5f                   	pop    edi
c00124db:	5d                   	pop    ebp
c00124dc:	c3                   	ret    
c00124dd:	83 ec 0c             	sub    esp,0xc
c00124e0:	68 3c b0 02 c0       	push   0xc002b03c
c00124e5:	e8 a6 83 00 00       	call   c001a890 <Krnl::panic(char const*)>
c00124ea:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00124ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00124f1:	83 c4 10             	add    esp,0x10
c00124f4:	e9 43 ff ff ff       	jmp    c001243c <VAS::allocatePages(int, int)+0x3c>
c00124f9:	83 ec 0c             	sub    esp,0xc
c00124fc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012500:	e8 c2 f5 ff ff       	call   c0011ac7 <Virt::allocateKernelVirtualPages(int)>
c0012505:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012509:	83 c4 10             	add    esp,0x10
c001250c:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012511:	0f 87 9b 00 00 00    	ja     c00125b2 <VAS::allocatePages(int, int)+0x1b2>
c0012517:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001251b:	85 d2                	test   edx,edx
c001251d:	7e 3c                	jle    c001255b <VAS::allocatePages(int, int)+0x15b>
c001251f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012523:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012527:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001252b:	c1 e5 0c             	shl    ebp,0xc
c001252e:	81 ce 00 04 00 00    	or     esi,0x400
c0012534:	01 dd                	add    ebp,ebx
c0012536:	e8 5f da ff ff       	call   c000ff9a <Phys::allocatePage()>
c001253b:	56                   	push   esi
c001253c:	53                   	push   ebx
c001253d:	50                   	push   eax
c001253e:	57                   	push   edi
c001253f:	e8 ba fd ff ff       	call   c00122fe <VAS::mapPage(unsigned long, unsigned long, int)>
c0012544:	83 c4 10             	add    esp,0x10
c0012547:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001254c:	74 03                	je     c0012551 <VAS::allocatePages(int, int)+0x151>
c001254e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012551:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012557:	39 dd                	cmp    ebp,ebx
c0012559:	75 db                	jne    c0012536 <VAS::allocatePages(int, int)+0x136>
c001255b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012560:	0f 84 26 ff ff ff    	je     c001248c <VAS::allocatePages(int, int)+0x8c>
c0012566:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001256a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001256e:	89 d3                	mov    ebx,edx
c0012570:	c1 e0 0c             	shl    eax,0xc
c0012573:	c1 eb 0a             	shr    ebx,0xa
c0012576:	01 d0                	add    eax,edx
c0012578:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001257e:	c1 e8 0a             	shr    eax,0xa
c0012581:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012587:	25 00 f0 ff ff       	and    eax,0xfffff000
c001258c:	2d 00 00 40 00       	sub    eax,0x400000
c0012591:	39 c3                	cmp    ebx,eax
c0012593:	0f 87 f9 fe ff ff    	ja     c0012492 <VAS::allocatePages(int, int)+0x92>
c0012599:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001259c:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125a2:	39 d8                	cmp    eax,ebx
c00125a4:	73 f3                	jae    c0012599 <VAS::allocatePages(int, int)+0x199>
c00125a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125aa:	83 c4 1c             	add    esp,0x1c
c00125ad:	5b                   	pop    ebx
c00125ae:	5e                   	pop    esi
c00125af:	5f                   	pop    edi
c00125b0:	5d                   	pop    ebp
c00125b1:	c3                   	ret    
c00125b2:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c00125b7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125bd:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00125c4:	0f 84 4d ff ff ff    	je     c0012517 <VAS::allocatePages(int, int)+0x117>
c00125ca:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00125d2:	e9 40 ff ff ff       	jmp    c0012517 <VAS::allocatePages(int, int)+0x117>
c00125d7:	90                   	nop

c00125d8 <VAS::setCPUSpecific(unsigned long)>:
c00125d8:	83 ec 0c             	sub    esp,0xc
c00125db:	6a 05                	push   0x5
c00125dd:	68 00 00 40 c2       	push   0xc2400000
c00125e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125ea:	e8 0f fd ff ff       	call   c00122fe <VAS::mapPage(unsigned long, unsigned long, int)>
c00125ef:	83 c4 1c             	add    esp,0x1c
c00125f2:	c3                   	ret    
c00125f3:	90                   	nop

c00125f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00125f4:	55                   	push   ebp
c00125f5:	57                   	push   edi
c00125f6:	56                   	push   esi
c00125f7:	53                   	push   ebx
c00125f8:	83 ec 1c             	sub    esp,0x1c
c00125fb:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0012600:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012604:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001260a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001260e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012614:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012618:	83 e0 01             	and    eax,0x1
c001261b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001261f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012623:	85 c0                	test   eax,eax
c0012625:	7e 39                	jle    c0012660 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012627:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001262b:	89 f3                	mov    ebx,esi
c001262d:	c1 e0 0c             	shl    eax,0xc
c0012630:	01 f0                	add    eax,esi
c0012632:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012636:	55                   	push   ebp
c0012637:	53                   	push   ebx
c0012638:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001263c:	29 f0                	sub    eax,esi
c001263e:	01 d8                	add    eax,ebx
c0012640:	50                   	push   eax
c0012641:	57                   	push   edi
c0012642:	e8 b7 fc ff ff       	call   c00122fe <VAS::mapPage(unsigned long, unsigned long, int)>
c0012647:	83 c4 10             	add    esp,0x10
c001264a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001264f:	74 03                	je     c0012654 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012651:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012654:	81 c3 00 10 00 00    	add    ebx,0x1000
c001265a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001265e:	75 d6                	jne    c0012636 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012660:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012665:	75 10                	jne    c0012677 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012667:	0f 20 d8             	mov    eax,cr3
c001266a:	0f 22 d8             	mov    cr3,eax
c001266d:	83 c4 1c             	add    esp,0x1c
c0012670:	89 f0                	mov    eax,esi
c0012672:	5b                   	pop    ebx
c0012673:	5e                   	pop    esi
c0012674:	5f                   	pop    edi
c0012675:	5d                   	pop    ebp
c0012676:	c3                   	ret    
c0012677:	89 f3                	mov    ebx,esi
c0012679:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001267d:	c1 eb 0a             	shr    ebx,0xa
c0012680:	c1 e0 0c             	shl    eax,0xc
c0012683:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012689:	01 f0                	add    eax,esi
c001268b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012691:	c1 e8 0a             	shr    eax,0xa
c0012694:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012699:	2d 00 00 40 00       	sub    eax,0x400000
c001269e:	39 c3                	cmp    ebx,eax
c00126a0:	77 cb                	ja     c001266d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00126a2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126a5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126ab:	39 d8                	cmp    eax,ebx
c00126ad:	73 f3                	jae    c00126a2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00126af:	83 c4 1c             	add    esp,0x1c
c00126b2:	89 f0                	mov    eax,esi
c00126b4:	5b                   	pop    ebx
c00126b5:	5e                   	pop    esi
c00126b6:	5f                   	pop    edi
c00126b7:	5d                   	pop    ebp
c00126b8:	c3                   	ret    
c00126b9:	90                   	nop

c00126ba <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00126ba:	55                   	push   ebp
c00126bb:	57                   	push   edi
c00126bc:	56                   	push   esi
c00126bd:	53                   	push   ebx
c00126be:	83 ec 1c             	sub    esp,0x1c
c00126c1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00126c5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00126c9:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00126cd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00126d1:	a9 ff 0f 00 00       	test   eax,0xfff
c00126d6:	75 4a                	jne    c0012722 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00126d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00126dc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00126df:	c1 eb 16             	shr    ebx,0x16
c00126e2:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00126e9:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00126ed:	74 4d                	je     c001273c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00126ef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00126f3:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00126f7:	c1 e8 0a             	shr    eax,0xa
c00126fa:	80 fa 01             	cmp    dl,0x1
c00126fd:	19 d2                	sbb    edx,edx
c00126ff:	c1 e3 0c             	shl    ebx,0xc
c0012702:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012706:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001270c:	25 fc 0f 00 00       	and    eax,0xffc
c0012711:	01 d8                	add    eax,ebx
c0012713:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001271a:	83 c4 1c             	add    esp,0x1c
c001271d:	5b                   	pop    ebx
c001271e:	5e                   	pop    esi
c001271f:	5f                   	pop    edi
c0012720:	5d                   	pop    ebp
c0012721:	c3                   	ret    
c0012722:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012726:	83 ec 0c             	sub    esp,0xc
c0012729:	68 68 b0 02 c0       	push   0xc002b068
c001272e:	e8 5d 81 00 00       	call   c001a890 <Krnl::panic(char const*)>
c0012733:	83 c4 10             	add    esp,0x10
c0012736:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001273a:	eb 9c                	jmp    c00126d8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001273c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012740:	e8 55 d8 ff ff       	call   c000ff9a <Phys::allocatePage()>
c0012745:	83 ec 0c             	sub    esp,0xc
c0012748:	89 c5                	mov    ebp,eax
c001274a:	8b 0d 70 f0 02 c0    	mov    ecx,DWORD PTR ds:0xc002f070
c0012750:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012754:	6a 01                	push   0x1
c0012756:	e8 6c f3 ff ff       	call   c0011ac7 <Virt::allocateKernelVirtualPages(int)>
c001275b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012762:	6a 01                	push   0x1
c0012764:	50                   	push   eax
c0012765:	55                   	push   ebp
c0012766:	81 cd 07 04 00 00    	or     ebp,0x407
c001276c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012770:	51                   	push   ecx
c0012771:	e8 7e fe ff ff       	call   c00125f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012776:	83 c4 1c             	add    esp,0x1c
c0012779:	68 00 10 00 00       	push   0x1000
c001277e:	6a 00                	push   0x0
c0012780:	50                   	push   eax
c0012781:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012785:	e8 e2 df fe ff       	call   c000076c <memset>
c001278a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001278e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012791:	e8 f1 f7 ff ff       	call   c0011f87 <Virt::freeKernelVirtualPages(unsigned long)>
c0012796:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012799:	83 c4 10             	add    esp,0x10
c001279c:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001279f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00127a3:	e9 47 ff ff ff       	jmp    c00126ef <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c00127a8 <VAS::VAS(bool)>:
c00127a8:	53                   	push   ebx
c00127a9:	83 ec 28             	sub    esp,0x28
c00127ac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00127b0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00127b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127b8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00127bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127c3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00127ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127ce:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00127d2:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00127d5:	e8 c0 d7 ff ff       	call   c000ff9a <Phys::allocatePage()>
c00127da:	89 c2                	mov    edx,eax
c00127dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127e0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00127e3:	8b 1d 70 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f070
c00127e9:	83 ec 0c             	sub    esp,0xc
c00127ec:	6a 01                	push   0x1
c00127ee:	e8 d4 f2 ff ff       	call   c0011ac7 <Virt::allocateKernelVirtualPages(int)>
c00127f3:	83 c4 10             	add    esp,0x10
c00127f6:	89 c2                	mov    edx,eax
c00127f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127fc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00127ff:	83 ec 0c             	sub    esp,0xc
c0012802:	6a 03                	push   0x3
c0012804:	6a 01                	push   0x1
c0012806:	52                   	push   edx
c0012807:	50                   	push   eax
c0012808:	53                   	push   ebx
c0012809:	e8 e6 fd ff ff       	call   c00125f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001280e:	83 c4 20             	add    esp,0x20
c0012811:	89 c2                	mov    edx,eax
c0012813:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012817:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001281a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012822:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001282a:	7f 1c                	jg     c0012848 <VAS::VAS(bool)+0xa0>
c001282c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012830:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012833:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012837:	c1 e2 02             	shl    edx,0x2
c001283a:	01 d0                	add    eax,edx
c001283c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012842:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012846:	eb da                	jmp    c0012822 <VAS::VAS(bool)+0x7a>
c0012848:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012850:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012858:	7f 7a                	jg     c00128d4 <VAS::VAS(bool)+0x12c>
c001285a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001285e:	2d 00 02 00 00       	sub    eax,0x200
c0012863:	c1 e0 0c             	shl    eax,0xc
c0012866:	83 c8 03             	or     eax,0x3
c0012869:	89 c2                	mov    edx,eax
c001286b:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0012870:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012876:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001287c:	83 e0 10             	and    eax,0x10
c001287f:	84 c0                	test   al,al
c0012881:	74 07                	je     c001288a <VAS::VAS(bool)+0xe2>
c0012883:	b8 00 01 00 00       	mov    eax,0x100
c0012888:	eb 05                	jmp    c001288f <VAS::VAS(bool)+0xe7>
c001288a:	b8 00 00 00 00       	mov    eax,0x0
c001288f:	09 d0                	or     eax,edx
c0012891:	89 c1                	mov    ecx,eax
c0012893:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012897:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001289a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001289e:	c1 e2 02             	shl    edx,0x2
c00128a1:	01 d0                	add    eax,edx
c00128a3:	89 ca                	mov    edx,ecx
c00128a5:	89 10                	mov    DWORD PTR [eax],edx
c00128a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128ab:	2d 40 03 00 00       	sub    eax,0x340
c00128b0:	83 f8 7f             	cmp    eax,0x7f
c00128b3:	77 16                	ja     c00128cb <VAS::VAS(bool)+0x123>
c00128b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128b9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128bc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00128c0:	c1 e2 02             	shl    edx,0x2
c00128c3:	01 d0                	add    eax,edx
c00128c5:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00128cb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00128cf:	e9 7c ff ff ff       	jmp    c0012850 <VAS::VAS(bool)+0xa8>
c00128d4:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c00128d9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128df:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128e5:	83 e0 10             	and    eax,0x10
c00128e8:	84 c0                	test   al,al
c00128ea:	74 07                	je     c00128f3 <VAS::VAS(bool)+0x14b>
c00128ec:	b8 03 41 00 00       	mov    eax,0x4103
c00128f1:	eb 05                	jmp    c00128f8 <VAS::VAS(bool)+0x150>
c00128f3:	b8 03 40 00 00       	mov    eax,0x4003
c00128f8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00128fc:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00128ff:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012905:	89 02                	mov    DWORD PTR [edx],eax
c0012907:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c001290c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012912:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012918:	83 ec 08             	sub    esp,0x8
c001291b:	50                   	push   eax
c001291c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012920:	e8 b3 fc ff ff       	call   c00125d8 <VAS::setCPUSpecific(unsigned long)>
c0012925:	83 c4 10             	add    esp,0x10
c0012928:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001292c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001292f:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0012934:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001293a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012940:	83 e0 10             	and    eax,0x10
c0012943:	84 c0                	test   al,al
c0012945:	74 07                	je     c001294e <VAS::VAS(bool)+0x1a6>
c0012947:	b8 00 01 00 00       	mov    eax,0x100
c001294c:	eb 05                	jmp    c0012953 <VAS::VAS(bool)+0x1ab>
c001294e:	b8 00 00 00 00       	mov    eax,0x0
c0012953:	09 c2                	or     edx,eax
c0012955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012959:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001295c:	05 fc 0f 00 00       	add    eax,0xffc
c0012961:	83 ca 03             	or     edx,0x3
c0012964:	89 10                	mov    DWORD PTR [eax],edx
c0012966:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c001296b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012971:	83 ec 0c             	sub    esp,0xc
c0012974:	50                   	push   eax
c0012975:	e8 62 1c 00 00       	call   c00145dc <Device::getName()>
c001297a:	83 c4 10             	add    esp,0x10
c001297d:	83 ec 08             	sub    esp,0x8
c0012980:	68 ad b1 02 c0       	push   0xc002b1ad
c0012985:	50                   	push   eax
c0012986:	e8 29 df fe ff       	call   c00008b4 <strcmp>
c001298b:	83 c4 10             	add    esp,0x10
c001298e:	85 c0                	test   eax,eax
c0012990:	0f 94 c0             	sete   al
c0012993:	84 c0                	test   al,al
c0012995:	0f 84 87 00 00 00    	je     c0012a22 <VAS::VAS(bool)+0x27a>
c001299b:	fa                   	cli    
c001299c:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c00129a1:	40                   	inc    eax
c00129a2:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c00129a7:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c00129ac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129b2:	05 7c 09 00 00       	add    eax,0x97c
c00129b7:	83 ec 0c             	sub    esp,0xc
c00129ba:	50                   	push   eax
c00129bb:	e8 f0 c9 ff ff       	call   c000f3b0 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00129c0:	83 c4 10             	add    esp,0x10
c00129c3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00129c8:	89 c3                	mov    ebx,eax
c00129ca:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c00129cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129d5:	05 7c 09 00 00       	add    eax,0x97c
c00129da:	83 ec 0c             	sub    esp,0xc
c00129dd:	50                   	push   eax
c00129de:	e8 cd c9 ff ff       	call   c000f3b0 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00129e3:	83 c4 10             	add    esp,0x10
c00129e6:	83 ec 08             	sub    esp,0x8
c00129e9:	50                   	push   eax
c00129ea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00129ee:	e8 75 f5 ff ff       	call   c0011f68 <VAS::getPageTableEntry(unsigned long)>
c00129f3:	83 c4 10             	add    esp,0x10
c00129f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00129f8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00129fd:	6a 11                	push   0x11
c00129ff:	53                   	push   ebx
c0012a00:	50                   	push   eax
c0012a01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a05:	e8 f4 f8 ff ff       	call   c00122fe <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a0a:	83 c4 10             	add    esp,0x10
c0012a0d:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c0012a12:	48                   	dec    eax
c0012a13:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c0012a18:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c0012a1d:	85 c0                	test   eax,eax
c0012a1f:	75 01                	jne    c0012a22 <VAS::VAS(bool)+0x27a>
c0012a21:	fb                   	sti    
c0012a22:	90                   	nop
c0012a23:	83 c4 28             	add    esp,0x28
c0012a26:	5b                   	pop    ebx
c0012a27:	c3                   	ret    

c0012a28 <VAS::evict(unsigned long)>:
c0012a28:	55                   	push   ebp
c0012a29:	57                   	push   edi
c0012a2a:	56                   	push   esi
c0012a2b:	53                   	push   ebx
c0012a2c:	83 ec 1c             	sub    esp,0x1c
c0012a2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a33:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012a37:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a3b:	e8 c8 f1 ff ff       	call   c0011c08 <Virt::allocateSwapfilePage()>
c0012a40:	89 c7                	mov    edi,eax
c0012a42:	a1 8c de 02 c0       	mov    eax,ds:0xc002de8c
c0012a47:	85 c0                	test   eax,eax
c0012a49:	7e 3d                	jle    c0012a88 <VAS::evict(unsigned long)+0x60>
c0012a4b:	89 ee                	mov    esi,ebp
c0012a4d:	31 db                	xor    ebx,ebx
c0012a4f:	83 ec 0c             	sub    esp,0xc
c0012a52:	57                   	push   edi
c0012a53:	e8 9e f1 ff ff       	call   c0011bf6 <Virt::swapIDToSector(unsigned long)>
c0012a58:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a5b:	01 d8                	add    eax,ebx
c0012a5d:	6a 01                	push   0x1
c0012a5f:	31 d2                	xor    edx,edx
c0012a61:	43                   	inc    ebx
c0012a62:	52                   	push   edx
c0012a63:	81 c6 00 02 00 00    	add    esi,0x200
c0012a69:	50                   	push   eax
c0012a6a:	0f be 05 98 de 02 c0 	movsx  eax,BYTE PTR ds:0xc002de98
c0012a71:	ff 34 85 fc f3 02 c0 	push   DWORD PTR [eax*4-0x3ffd0c04]
c0012a78:	e8 35 3e 00 00       	call   c00168b2 <LogicalDisk::write(unsigned long long, int, void*)>
c0012a7d:	83 c4 20             	add    esp,0x20
c0012a80:	39 1d 8c de 02 c0    	cmp    DWORD PTR ds:0xc002de8c,ebx
c0012a86:	7f c7                	jg     c0012a4f <VAS::evict(unsigned long)+0x27>
c0012a88:	83 ec 08             	sub    esp,0x8
c0012a8b:	c1 e7 0b             	shl    edi,0xb
c0012a8e:	55                   	push   ebp
c0012a8f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a93:	e8 d0 f4 ff ff       	call   c0011f68 <VAS::getPageTableEntry(unsigned long)>
c0012a98:	83 c4 0c             	add    esp,0xc
c0012a9b:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a9d:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012aa3:	09 d7                	or     edi,edx
c0012aa5:	89 38                	mov    DWORD PTR [eax],edi
c0012aa7:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c0012aac:	40                   	inc    eax
c0012aad:	a3 68 f0 02 c0       	mov    ds:0xc002f068,eax
c0012ab2:	0f 20 da             	mov    edx,cr3
c0012ab5:	0f 22 da             	mov    cr3,edx
c0012ab8:	50                   	push   eax
c0012ab9:	55                   	push   ebp
c0012aba:	68 bb b1 02 c0       	push   0xc002b1bb
c0012abf:	e8 09 04 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0012ac4:	a1 64 f0 02 c0       	mov    eax,ds:0xc002f064
c0012ac9:	c7 44 24 40 d0 b1 02 c0 	mov    DWORD PTR [esp+0x40],0xc002b1d0
c0012ad1:	8d 50 01             	lea    edx,[eax+0x1]
c0012ad4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012ad8:	89 15 64 f0 02 c0    	mov    DWORD PTR ds:0xc002f064,edx
c0012ade:	83 c4 2c             	add    esp,0x2c
c0012ae1:	5b                   	pop    ebx
c0012ae2:	5e                   	pop    esi
c0012ae3:	5f                   	pop    edi
c0012ae4:	5d                   	pop    ebp
c0012ae5:	e9 e3 03 00 00       	jmp    c0012ecd <Dbg::kprintf(char const*, ...)>

c0012aea <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012aea:	55                   	push   ebp
c0012aeb:	57                   	push   edi
c0012aec:	56                   	push   esi
c0012aed:	53                   	push   ebx
c0012aee:	83 ec 0c             	sub    esp,0xc
c0012af1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012af5:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012afb:	0f 84 dc 00 00 00    	je     c0012bdd <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012b01:	56                   	push   esi
c0012b02:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012b06:	e8 5d f4 ff ff       	call   c0011f68 <VAS::getPageTableEntry(unsigned long)>
c0012b0b:	5b                   	pop    ebx
c0012b0c:	85 c0                	test   eax,eax
c0012b0e:	5f                   	pop    edi
c0012b0f:	89 c3                	mov    ebx,eax
c0012b11:	0f 84 c6 00 00 00    	je     c0012bdd <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012b17:	8b 38                	mov    edi,DWORD PTR [eax]
c0012b19:	31 c0                	xor    eax,eax
c0012b1b:	89 fa                	mov    edx,edi
c0012b1d:	81 e2 01 04 00 00    	and    edx,0x401
c0012b23:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012b29:	0f 85 b0 00 00 00    	jne    c0012bdf <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012b2f:	e8 66 d4 ff ff       	call   c000ff9a <Phys::allocatePage()>
c0012b34:	c1 ef 0b             	shr    edi,0xb
c0012b37:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012b39:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012b3f:	09 c2                	or     edx,eax
c0012b41:	81 ca 01 08 00 00    	or     edx,0x801
c0012b47:	89 13                	mov    DWORD PTR [ebx],edx
c0012b49:	8b 0d 8c de 02 c0    	mov    ecx,DWORD PTR ds:0xc002de8c
c0012b4f:	85 c9                	test   ecx,ecx
c0012b51:	7e 3d                	jle    c0012b90 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012b53:	89 f5                	mov    ebp,esi
c0012b55:	31 db                	xor    ebx,ebx
c0012b57:	83 ec 0c             	sub    esp,0xc
c0012b5a:	57                   	push   edi
c0012b5b:	e8 96 f0 ff ff       	call   c0011bf6 <Virt::swapIDToSector(unsigned long)>
c0012b60:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012b63:	01 d8                	add    eax,ebx
c0012b65:	6a 01                	push   0x1
c0012b67:	31 d2                	xor    edx,edx
c0012b69:	43                   	inc    ebx
c0012b6a:	52                   	push   edx
c0012b6b:	81 c5 00 02 00 00    	add    ebp,0x200
c0012b71:	50                   	push   eax
c0012b72:	0f be 05 98 de 02 c0 	movsx  eax,BYTE PTR ds:0xc002de98
c0012b79:	ff 34 85 fc f3 02 c0 	push   DWORD PTR [eax*4-0x3ffd0c04]
c0012b80:	e8 c1 3c 00 00       	call   c0016846 <LogicalDisk::read(unsigned long long, int, void*)>
c0012b85:	83 c4 20             	add    esp,0x20
c0012b88:	39 1d 8c de 02 c0    	cmp    DWORD PTR ds:0xc002de8c,ebx
c0012b8e:	7f c7                	jg     c0012b57 <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c0012b90:	a1 68 f0 02 c0       	mov    eax,ds:0xc002f068
c0012b95:	48                   	dec    eax
c0012b96:	52                   	push   edx
c0012b97:	a3 68 f0 02 c0       	mov    ds:0xc002f068,eax
c0012b9c:	50                   	push   eax
c0012b9d:	56                   	push   esi
c0012b9e:	68 e1 b1 02 c0       	push   0xc002b1e1
c0012ba3:	e8 25 03 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0012ba8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012bab:	e8 28 f0 ff ff       	call   c0011bd8 <Virt::freeSwapfilePage(unsigned long)>
c0012bb0:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c0012bb5:	83 c4 10             	add    esp,0x10
c0012bb8:	48                   	dec    eax
c0012bb9:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c0012bbe:	85 c0                	test   eax,eax
c0012bc0:	75 01                	jne    c0012bc3 <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c0012bc2:	fb                   	sti    
c0012bc3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012bc7:	25 ff 0f 00 00       	and    eax,0xfff
c0012bcc:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012bd1:	77 14                	ja     c0012be7 <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c0012bd3:	0f 20 d8             	mov    eax,cr3
c0012bd6:	0f 22 d8             	mov    cr3,eax
c0012bd9:	b0 01                	mov    al,0x1
c0012bdb:	eb 02                	jmp    c0012bdf <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012bdd:	31 c0                	xor    eax,eax
c0012bdf:	83 c4 0c             	add    esp,0xc
c0012be2:	5b                   	pop    ebx
c0012be3:	5e                   	pop    esi
c0012be4:	5f                   	pop    edi
c0012be5:	5d                   	pop    ebp
c0012be6:	c3                   	ret    
c0012be7:	83 ec 0c             	sub    esp,0xc
c0012bea:	68 f6 b1 02 c0       	push   0xc002b1f6
c0012bef:	e8 d9 02 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0012bf4:	83 c4 10             	add    esp,0x10
c0012bf7:	eb da                	jmp    c0012bd3 <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c0012bf9:	90                   	nop

c0012bfa <VAS::scanForEviction()>:
c0012bfa:	57                   	push   edi
c0012bfb:	56                   	push   esi
c0012bfc:	53                   	push   ebx
c0012bfd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012c01:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012c04:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012c0a:	75 0e                	jne    c0012c1a <VAS::scanForEviction()+0x20>
c0012c0c:	89 da                	mov    edx,ebx
c0012c0e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012c11:	c1 ea 16             	shr    edx,0x16
c0012c14:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012c18:	74 48                	je     c0012c62 <VAS::scanForEviction()+0x68>
c0012c1a:	53                   	push   ebx
c0012c1b:	56                   	push   esi
c0012c1c:	e8 47 f3 ff ff       	call   c0011f68 <VAS::getPageTableEntry(unsigned long)>
c0012c21:	5a                   	pop    edx
c0012c22:	8b 38                	mov    edi,DWORD PTR [eax]
c0012c24:	59                   	pop    ecx
c0012c25:	89 fa                	mov    edx,edi
c0012c27:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012c2d:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012c33:	74 3d                	je     c0012c72 <VAS::scanForEviction()+0x78>
c0012c35:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012c3b:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012c41:	76 2a                	jbe    c0012c6d <VAS::scanForEviction()+0x73>
c0012c43:	31 db                	xor    ebx,ebx
c0012c45:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012c4c:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012c52:	75 c6                	jne    c0012c1a <VAS::scanForEviction()+0x20>
c0012c54:	89 da                	mov    edx,ebx
c0012c56:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012c59:	c1 ea 16             	shr    edx,0x16
c0012c5c:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012c60:	75 b8                	jne    c0012c1a <VAS::scanForEviction()+0x20>
c0012c62:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012c68:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012c6b:	eb 97                	jmp    c0012c04 <VAS::scanForEviction()+0xa>
c0012c6d:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012c70:	eb 92                	jmp    c0012c04 <VAS::scanForEviction()+0xa>
c0012c72:	f7 c7 01 00 00 00    	test   edi,0x1
c0012c78:	74 bb                	je     c0012c35 <VAS::scanForEviction()+0x3b>
c0012c7a:	f7 c7 20 00 00 00    	test   edi,0x20
c0012c80:	74 0a                	je     c0012c8c <VAS::scanForEviction()+0x92>
c0012c82:	83 e7 df             	and    edi,0xffffffdf
c0012c85:	89 38                	mov    DWORD PTR [eax],edi
c0012c87:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012c8a:	eb a9                	jmp    c0012c35 <VAS::scanForEviction()+0x3b>
c0012c8c:	83 ec 08             	sub    esp,0x8
c0012c8f:	53                   	push   ebx
c0012c90:	56                   	push   esi
c0012c91:	e8 92 fd ff ff       	call   c0012a28 <VAS::evict(unsigned long)>
c0012c96:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012c9d:	83 c4 10             	add    esp,0x10
c0012ca0:	89 f8                	mov    eax,edi
c0012ca2:	5b                   	pop    ebx
c0012ca3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012ca8:	5e                   	pop    esi
c0012ca9:	5f                   	pop    edi
c0012caa:	c3                   	ret    

c0012cab <mapVASFirstTime>:
c0012cab:	55                   	push   ebp
c0012cac:	57                   	push   edi
c0012cad:	56                   	push   esi
c0012cae:	53                   	push   ebx
c0012caf:	83 ec 0c             	sub    esp,0xc
c0012cb2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012cb7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012cba:	4a                   	dec    edx
c0012cbb:	0f 84 8e 00 00 00    	je     c0012d4f <mapVASFirstTime+0xa4>
c0012cc1:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012cc4:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012cc7:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012ccc:	c1 e5 15             	shl    ebp,0x15
c0012ccf:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012cd4:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012cda:	29 eb                	sub    ebx,ebp
c0012cdc:	29 ee                	sub    esi,ebp
c0012cde:	e8 b7 d2 ff ff       	call   c000ff9a <Phys::allocatePage()>
c0012ce3:	83 ec 0c             	sub    esp,0xc
c0012ce6:	68 03 04 00 00       	push   0x403
c0012ceb:	6a 01                	push   0x1
c0012ced:	53                   	push   ebx
c0012cee:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012cf4:	50                   	push   eax
c0012cf5:	57                   	push   edi
c0012cf6:	e8 f9 f8 ff ff       	call   c00125f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012cfb:	83 c4 20             	add    esp,0x20
c0012cfe:	39 f3                	cmp    ebx,esi
c0012d00:	75 dc                	jne    c0012cde <mapVASFirstTime+0x33>
c0012d02:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012d07:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012d0c:	29 ee                	sub    esi,ebp
c0012d0e:	29 e8                	sub    eax,ebp
c0012d10:	89 c5                	mov    ebp,eax
c0012d12:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012d16:	19 db                	sbb    ebx,ebx
c0012d18:	e8 7d d2 ff ff       	call   c000ff9a <Phys::allocatePage()>
c0012d1d:	83 e3 04             	and    ebx,0x4
c0012d20:	83 ec 0c             	sub    esp,0xc
c0012d23:	81 c3 03 04 00 00    	add    ebx,0x403
c0012d29:	53                   	push   ebx
c0012d2a:	6a 01                	push   0x1
c0012d2c:	56                   	push   esi
c0012d2d:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012d33:	50                   	push   eax
c0012d34:	57                   	push   edi
c0012d35:	e8 ba f8 ff ff       	call   c00125f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d3a:	83 c4 20             	add    esp,0x20
c0012d3d:	39 f5                	cmp    ebp,esi
c0012d3f:	75 d1                	jne    c0012d12 <mapVASFirstTime+0x67>
c0012d41:	0f 20 d8             	mov    eax,cr3
c0012d44:	0f 22 d8             	mov    cr3,eax
c0012d47:	83 c4 0c             	add    esp,0xc
c0012d4a:	5b                   	pop    ebx
c0012d4b:	5e                   	pop    esi
c0012d4c:	5f                   	pop    edi
c0012d4d:	5d                   	pop    ebp
c0012d4e:	c3                   	ret    
c0012d4f:	83 ec 0c             	sub    esp,0xc
c0012d52:	68 06 b2 02 c0       	push   0xc002b206
c0012d57:	e8 71 01 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0012d5c:	83 c4 10             	add    esp,0x10
c0012d5f:	83 c4 0c             	add    esp,0xc
c0012d62:	5b                   	pop    ebx
c0012d63:	5e                   	pop    esi
c0012d64:	5f                   	pop    edi
c0012d65:	5d                   	pop    ebp
c0012d66:	c3                   	ret    

c0012d67 <__cxa_atexit>:
c0012d67:	31 c0                	xor    eax,eax
c0012d69:	c3                   	ret    

c0012d6a <__cxa_finalize>:
c0012d6a:	c3                   	ret    

c0012d6b <__stack_chk_fail>:
c0012d6b:	55                   	push   ebp
c0012d6c:	89 e5                	mov    ebp,esp
c0012d6e:	83 ec 14             	sub    esp,0x14
c0012d71:	68 1f b2 02 c0       	push   0xc002b21f
c0012d76:	e8 52 01 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0012d7b:	58                   	pop    eax
c0012d7c:	5a                   	pop    edx
c0012d7d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012d80:	68 6f b2 02 c0       	push   0xc002b26f
c0012d85:	e8 43 01 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0012d8a:	59                   	pop    ecx
c0012d8b:	58                   	pop    eax
c0012d8c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d8f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d92:	68 6f b2 02 c0       	push   0xc002b26f
c0012d97:	e8 31 01 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0012d9c:	5a                   	pop    edx
c0012d9d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012da0:	59                   	pop    ecx
c0012da1:	8b 00                	mov    eax,DWORD PTR [eax]
c0012da3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012da6:	68 6f b2 02 c0       	push   0xc002b26f
c0012dab:	e8 1d 01 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0012db0:	5a                   	pop    edx
c0012db1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012db4:	59                   	pop    ecx
c0012db5:	8b 00                	mov    eax,DWORD PTR [eax]
c0012db7:	8b 00                	mov    eax,DWORD PTR [eax]
c0012db9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012dbc:	68 6f b2 02 c0       	push   0xc002b26f
c0012dc1:	e8 07 01 00 00       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0012dc6:	c7 04 24 77 b2 02 c0 	mov    DWORD PTR [esp],0xc002b277
c0012dcd:	e8 be 7a 00 00       	call   c001a890 <Krnl::panic(char const*)>
c0012dd2:	83 c4 10             	add    esp,0x10
c0012dd5:	c9                   	leave  
c0012dd6:	c3                   	ret    

c0012dd7 <__cxa_pure_virtual>:
c0012dd7:	83 ec 18             	sub    esp,0x18
c0012dda:	68 8f b2 02 c0       	push   0xc002b28f
c0012ddf:	e8 ac 7a 00 00       	call   c001a890 <Krnl::panic(char const*)>
c0012de4:	83 c4 1c             	add    esp,0x1c
c0012de7:	c3                   	ret    

c0012de8 <operator new[](unsigned long)>:
c0012de8:	e9 41 cb ff ff       	jmp    c000f92e <malloc>

c0012ded <operator delete(void*, unsigned long)>:
c0012ded:	e9 5c cb ff ff       	jmp    c000f94e <rfree>

c0012df2 <operator delete[](void*)>:
c0012df2:	e9 57 cb ff ff       	jmp    c000f94e <rfree>

c0012df7 <operator delete[](void*, unsigned long)>:
c0012df7:	e9 52 cb ff ff       	jmp    c000f94e <rfree>

c0012dfc <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012dfc:	57                   	push   edi
c0012dfd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012e02:	56                   	push   esi
c0012e03:	be a4 b2 02 c0       	mov    esi,0xc002b2a4
c0012e08:	53                   	push   ebx
c0012e09:	83 ec 40             	sub    esp,0x40
c0012e0c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012e10:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012e14:	fc                   	cld    
c0012e15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e17:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012e1b:	83 f9 3e             	cmp    ecx,0x3e
c0012e1e:	7e 05                	jle    c0012e25 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012e20:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012e25:	89 df                	mov    edi,ebx
c0012e27:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012e2b:	eb 02                	jmp    c0012e2f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012e2d:	89 c7                	mov    edi,eax
c0012e2f:	31 d2                	xor    edx,edx
c0012e31:	46                   	inc    esi
c0012e32:	89 f8                	mov    eax,edi
c0012e34:	f7 f1                	div    ecx
c0012e36:	39 cf                	cmp    edi,ecx
c0012e38:	73 f3                	jae    c0012e2d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012e3a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e3d:	eb 02                	jmp    c0012e41 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012e3f:	89 c3                	mov    ebx,eax
c0012e41:	31 d2                	xor    edx,edx
c0012e43:	4e                   	dec    esi
c0012e44:	89 d8                	mov    eax,ebx
c0012e46:	f7 f1                	div    ecx
c0012e48:	39 cb                	cmp    ebx,ecx
c0012e4a:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012e4e:	88 16                	mov    BYTE PTR [esi],dl
c0012e50:	73 ed                	jae    c0012e3f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012e52:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e56:	83 c4 40             	add    esp,0x40
c0012e59:	5b                   	pop    ebx
c0012e5a:	5e                   	pop    esi
c0012e5b:	5f                   	pop    edi
c0012e5c:	c3                   	ret    

c0012e5d <Dbg::logc(char)>:
c0012e5d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e61:	ba fd 03 00 00       	mov    edx,0x3fd
c0012e66:	ec                   	in     al,dx
c0012e67:	a8 20                	test   al,0x20
c0012e69:	74 fb                	je     c0012e66 <Dbg::logc(char)+0x9>
c0012e6b:	ba f8 03 00 00       	mov    edx,0x3f8
c0012e70:	88 c8                	mov    al,cl
c0012e72:	ee                   	out    dx,al
c0012e73:	c3                   	ret    

c0012e74 <Dbg::logs(char*)>:
c0012e74:	53                   	push   ebx
c0012e75:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012e79:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e7c:	84 c0                	test   al,al
c0012e7e:	74 0f                	je     c0012e8f <Dbg::logs(char*)+0x1b>
c0012e80:	50                   	push   eax
c0012e81:	43                   	inc    ebx
c0012e82:	e8 d6 ff ff ff       	call   c0012e5d <Dbg::logc(char)>
c0012e87:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e8a:	5a                   	pop    edx
c0012e8b:	84 c0                	test   al,al
c0012e8d:	75 f1                	jne    c0012e80 <Dbg::logs(char*)+0xc>
c0012e8f:	5b                   	pop    ebx
c0012e90:	c3                   	ret    

c0012e91 <Dbg::logWriteInt(unsigned int)>:
c0012e91:	83 ec 10             	sub    esp,0x10
c0012e94:	6a 0a                	push   0xa
c0012e96:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e9a:	50                   	push   eax
c0012e9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e9f:	e8 58 ff ff ff       	call   c0012dfc <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012ea4:	50                   	push   eax
c0012ea5:	e8 ca ff ff ff       	call   c0012e74 <Dbg::logs(char*)>
c0012eaa:	83 c4 20             	add    esp,0x20
c0012ead:	c3                   	ret    

c0012eae <Dbg::logWriteIntBase(unsigned int, int)>:
c0012eae:	83 ec 10             	sub    esp,0x10
c0012eb1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012eb5:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012eb9:	50                   	push   eax
c0012eba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ebe:	e8 39 ff ff ff       	call   c0012dfc <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012ec3:	50                   	push   eax
c0012ec4:	e8 ab ff ff ff       	call   c0012e74 <Dbg::logs(char*)>
c0012ec9:	83 c4 20             	add    esp,0x20
c0012ecc:	c3                   	ret    

c0012ecd <Dbg::kprintf(char const*, ...)>:
c0012ecd:	55                   	push   ebp
c0012ece:	57                   	push   edi
c0012ecf:	56                   	push   esi
c0012ed0:	53                   	push   ebx
c0012ed1:	83 ec 0c             	sub    esp,0xc
c0012ed4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012ed8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012edc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ee0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012ee3:	84 c0                	test   al,al
c0012ee5:	74 4a                	je     c0012f31 <Dbg::kprintf(char const*, ...)+0x64>
c0012ee7:	31 db                	xor    ebx,ebx
c0012ee9:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012eec:	3c 25                	cmp    al,0x25
c0012eee:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012ef1:	0f 85 e4 00 00 00    	jne    c0012fdb <Dbg::kprintf(char const*, ...)+0x10e>
c0012ef7:	83 c3 02             	add    ebx,0x2
c0012efa:	8a 07                	mov    al,BYTE PTR [edi]
c0012efc:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012eff:	83 e8 25             	sub    eax,0x25
c0012f02:	3c 53                	cmp    al,0x53
c0012f04:	0f 87 ba 00 00 00    	ja     c0012fc4 <Dbg::kprintf(char const*, ...)+0xf7>
c0012f0a:	0f b6 c0             	movzx  eax,al
c0012f0d:	ff 24 85 e4 b2 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4d1c]
c0012f14:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f18:	89 c8                	mov    eax,ecx
c0012f1a:	83 c1 04             	add    ecx,0x4
c0012f1d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f21:	ff 30                	push   DWORD PTR [eax]
c0012f23:	e8 4c ff ff ff       	call   c0012e74 <Dbg::logs(char*)>
c0012f28:	58                   	pop    eax
c0012f29:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012f2d:	84 c0                	test   al,al
c0012f2f:	75 b8                	jne    c0012ee9 <Dbg::kprintf(char const*, ...)+0x1c>
c0012f31:	83 c4 0c             	add    esp,0xc
c0012f34:	5b                   	pop    ebx
c0012f35:	5e                   	pop    esi
c0012f36:	5f                   	pop    edi
c0012f37:	5d                   	pop    ebp
c0012f38:	c3                   	ret    
c0012f39:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f3d:	89 d0                	mov    eax,edx
c0012f3f:	83 c2 04             	add    edx,0x4
c0012f42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f46:	ff 30                	push   DWORD PTR [eax]
c0012f48:	e8 44 ff ff ff       	call   c0012e91 <Dbg::logWriteInt(unsigned int)>
c0012f4d:	58                   	pop    eax
c0012f4e:	eb d9                	jmp    c0012f29 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f50:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f54:	89 d0                	mov    eax,edx
c0012f56:	83 c2 04             	add    edx,0x4
c0012f59:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012f5c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f60:	50                   	push   eax
c0012f61:	e8 f7 fe ff ff       	call   c0012e5d <Dbg::logc(char)>
c0012f66:	58                   	pop    eax
c0012f67:	eb c0                	jmp    c0012f29 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f69:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f6d:	89 c8                	mov    eax,ecx
c0012f6f:	83 c1 04             	add    ecx,0x4
c0012f72:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f76:	ff 30                	push   DWORD PTR [eax]
c0012f78:	e8 14 ff ff ff       	call   c0012e91 <Dbg::logWriteInt(unsigned int)>
c0012f7d:	5f                   	pop    edi
c0012f7e:	eb a9                	jmp    c0012f29 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f80:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f84:	89 c8                	mov    eax,ecx
c0012f86:	83 c1 04             	add    ecx,0x4
c0012f89:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f8d:	6a 10                	push   0x10
c0012f8f:	ff 30                	push   DWORD PTR [eax]
c0012f91:	e8 18 ff ff ff       	call   c0012eae <Dbg::logWriteIntBase(unsigned int, int)>
c0012f96:	59                   	pop    ecx
c0012f97:	5f                   	pop    edi
c0012f98:	eb 8f                	jmp    c0012f29 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f9a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f9e:	89 d0                	mov    eax,edx
c0012fa0:	83 c2 08             	add    edx,0x8
c0012fa3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fa7:	6a 10                	push   0x10
c0012fa9:	ff 30                	push   DWORD PTR [eax]
c0012fab:	e8 fe fe ff ff       	call   c0012eae <Dbg::logWriteIntBase(unsigned int, int)>
c0012fb0:	58                   	pop    eax
c0012fb1:	5a                   	pop    edx
c0012fb2:	e9 72 ff ff ff       	jmp    c0012f29 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fb7:	6a 25                	push   0x25
c0012fb9:	e8 9f fe ff ff       	call   c0012e5d <Dbg::logc(char)>
c0012fbe:	58                   	pop    eax
c0012fbf:	e9 65 ff ff ff       	jmp    c0012f29 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fc4:	6a 25                	push   0x25
c0012fc6:	e8 92 fe ff ff       	call   c0012e5d <Dbg::logc(char)>
c0012fcb:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012fce:	50                   	push   eax
c0012fcf:	e8 89 fe ff ff       	call   c0012e5d <Dbg::logc(char)>
c0012fd4:	5a                   	pop    edx
c0012fd5:	59                   	pop    ecx
c0012fd6:	e9 4e ff ff ff       	jmp    c0012f29 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fdb:	50                   	push   eax
c0012fdc:	89 eb                	mov    ebx,ebp
c0012fde:	e8 7a fe ff ff       	call   c0012e5d <Dbg::logc(char)>
c0012fe3:	89 fd                	mov    ebp,edi
c0012fe5:	58                   	pop    eax
c0012fe6:	e9 3e ff ff ff       	jmp    c0012f29 <Dbg::kprintf(char const*, ...)+0x5c>
c0012feb:	90                   	nop

c0012fec <File::read(unsigned long long, void*, int*)>:
c0012fec:	53                   	push   ebx
c0012fed:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ff1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012ff5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012ffc:	3c 19                	cmp    al,0x19
c0012ffe:	77 35                	ja     c0013035 <File::read(unsigned long long, void*, int*)+0x49>
c0013000:	8b 04 85 00 f5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b00]
c0013007:	85 c0                	test   eax,eax
c0013009:	74 2a                	je     c0013035 <File::read(unsigned long long, void*, int*)+0x49>
c001300b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013011:	85 c0                	test   eax,eax
c0013013:	74 20                	je     c0013035 <File::read(unsigned long long, void*, int*)+0x49>
c0013015:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013019:	74 21                	je     c001303c <File::read(unsigned long long, void*, int*)+0x50>
c001301b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001301d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013021:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013027:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001302b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001302f:	5b                   	pop    ebx
c0013030:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0013033:	ff e0                	jmp    eax
c0013035:	b8 0b 00 00 00       	mov    eax,0xb
c001303a:	eb 05                	jmp    c0013041 <File::read(unsigned long long, void*, int*)+0x55>
c001303c:	b8 05 00 00 00       	mov    eax,0x5
c0013041:	5b                   	pop    ebx
c0013042:	c3                   	ret    
c0013043:	90                   	nop

c0013044 <File::write(unsigned long long, void*, int*)>:
c0013044:	53                   	push   ebx
c0013045:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013049:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001304d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013054:	3c 19                	cmp    al,0x19
c0013056:	77 35                	ja     c001308d <File::write(unsigned long long, void*, int*)+0x49>
c0013058:	8b 04 85 00 f5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b00]
c001305f:	85 c0                	test   eax,eax
c0013061:	74 2a                	je     c001308d <File::write(unsigned long long, void*, int*)+0x49>
c0013063:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013069:	85 c0                	test   eax,eax
c001306b:	74 20                	je     c001308d <File::write(unsigned long long, void*, int*)+0x49>
c001306d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013071:	74 21                	je     c0013094 <File::write(unsigned long long, void*, int*)+0x50>
c0013073:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013075:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013079:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001307f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013083:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013087:	5b                   	pop    ebx
c0013088:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001308b:	ff e0                	jmp    eax
c001308d:	b8 0b 00 00 00       	mov    eax,0xb
c0013092:	eb 05                	jmp    c0013099 <File::write(unsigned long long, void*, int*)+0x55>
c0013094:	b8 05 00 00 00       	mov    eax,0x5
c0013099:	5b                   	pop    ebx
c001309a:	c3                   	ret    
c001309b:	90                   	nop

c001309c <Directory::read(unsigned long long, void*, int*)>:
c001309c:	53                   	push   ebx
c001309d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130a5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130ac:	3c 19                	cmp    al,0x19
c00130ae:	77 35                	ja     c00130e5 <Directory::read(unsigned long long, void*, int*)+0x49>
c00130b0:	8b 04 85 00 f5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b00]
c00130b7:	85 c0                	test   eax,eax
c00130b9:	74 2a                	je     c00130e5 <Directory::read(unsigned long long, void*, int*)+0x49>
c00130bb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130c1:	85 c0                	test   eax,eax
c00130c3:	74 20                	je     c00130e5 <Directory::read(unsigned long long, void*, int*)+0x49>
c00130c5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130c9:	74 21                	je     c00130ec <Directory::read(unsigned long long, void*, int*)+0x50>
c00130cb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00130cd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130d1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130df:	5b                   	pop    ebx
c00130e0:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00130e3:	ff e0                	jmp    eax
c00130e5:	b8 0b 00 00 00       	mov    eax,0xb
c00130ea:	eb 05                	jmp    c00130f1 <Directory::read(unsigned long long, void*, int*)+0x55>
c00130ec:	b8 05 00 00 00       	mov    eax,0x5
c00130f1:	5b                   	pop    ebx
c00130f2:	c3                   	ret    
c00130f3:	90                   	nop

c00130f4 <Directory::write(unsigned long long, void*, int*)>:
c00130f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130f8:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00130ff:	b8 0b 00 00 00       	mov    eax,0xb
c0013104:	80 fa 19             	cmp    dl,0x19
c0013107:	77 18                	ja     c0013121 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013109:	8b 14 95 00 f5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0b00]
c0013110:	85 d2                	test   edx,edx
c0013112:	74 0d                	je     c0013121 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013114:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c001311b:	19 c0                	sbb    eax,eax
c001311d:	83 e0 0a             	and    eax,0xa
c0013120:	40                   	inc    eax
c0013121:	c3                   	ret    

c0013122 <File::isAtty()>:
c0013122:	31 c0                	xor    eax,eax
c0013124:	c3                   	ret    
c0013125:	90                   	nop

c0013126 <Directory::isAtty()>:
c0013126:	31 c0                	xor    eax,eax
c0013128:	c3                   	ret    
c0013129:	90                   	nop

c001312a <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001312a:	b8 0a 00 00 00       	mov    eax,0xa
c001312f:	c3                   	ret    

c0013130 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0013130:	b8 0a 00 00 00       	mov    eax,0xa
c0013135:	c3                   	ret    

c0013136 <Filesystem::getFileFirstSector(char const*)>:
c0013136:	31 c0                	xor    eax,eax
c0013138:	31 d2                	xor    edx,edx
c001313a:	c3                   	ret    
c001313b:	90                   	nop

c001313c <File::~File()>:
c001313c:	83 ec 0c             	sub    esp,0xc
c001313f:	ba a4 b4 02 c0       	mov    edx,0xc002b4a4
c0013144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013148:	89 10                	mov    DWORD PTR [eax],edx
c001314a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001314e:	83 ec 0c             	sub    esp,0xc
c0013151:	50                   	push   eax
c0013152:	e8 0f e7 ff ff       	call   c0011866 <UnixFile::~UnixFile()>
c0013157:	83 c4 10             	add    esp,0x10
c001315a:	90                   	nop
c001315b:	83 c4 0c             	add    esp,0xc
c001315e:	c3                   	ret    
c001315f:	90                   	nop

c0013160 <File::~File()>:
c0013160:	83 ec 0c             	sub    esp,0xc
c0013163:	83 ec 0c             	sub    esp,0xc
c0013166:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001316a:	e8 cd ff ff ff       	call   c001313c <File::~File()>
c001316f:	83 c4 10             	add    esp,0x10
c0013172:	83 ec 08             	sub    esp,0x8
c0013175:	68 14 01 00 00       	push   0x114
c001317a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001317e:	e8 6a fc ff ff       	call   c0012ded <operator delete(void*, unsigned long)>
c0013183:	83 c4 10             	add    esp,0x10
c0013186:	83 c4 0c             	add    esp,0xc
c0013189:	c3                   	ret    

c001318a <Directory::~Directory()>:
c001318a:	83 ec 0c             	sub    esp,0xc
c001318d:	ba c0 b4 02 c0       	mov    edx,0xc002b4c0
c0013192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013196:	89 10                	mov    DWORD PTR [eax],edx
c0013198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001319c:	83 ec 0c             	sub    esp,0xc
c001319f:	50                   	push   eax
c00131a0:	e8 c1 e6 ff ff       	call   c0011866 <UnixFile::~UnixFile()>
c00131a5:	83 c4 10             	add    esp,0x10
c00131a8:	90                   	nop
c00131a9:	83 c4 0c             	add    esp,0xc
c00131ac:	c3                   	ret    
c00131ad:	90                   	nop

c00131ae <Directory::~Directory()>:
c00131ae:	83 ec 0c             	sub    esp,0xc
c00131b1:	83 ec 0c             	sub    esp,0xc
c00131b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131b8:	e8 cd ff ff ff       	call   c001318a <Directory::~Directory()>
c00131bd:	83 c4 10             	add    esp,0x10
c00131c0:	83 ec 08             	sub    esp,0x8
c00131c3:	68 14 01 00 00       	push   0x114
c00131c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131cc:	e8 1c fc ff ff       	call   c0012ded <operator delete(void*, unsigned long)>
c00131d1:	83 c4 10             	add    esp,0x10
c00131d4:	83 c4 0c             	add    esp,0xc
c00131d7:	c3                   	ret    

c00131d8 <Filesystem::Filesystem()>:
c00131d8:	ba 3c b4 02 c0       	mov    edx,0xc002b43c
c00131dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131e1:	89 10                	mov    DWORD PTR [eax],edx
c00131e3:	8b 15 74 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f074
c00131e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131ed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00131f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131f4:	a3 74 f0 02 c0       	mov    ds:0xc002f074,eax
c00131f9:	90                   	nop
c00131fa:	c3                   	ret    
c00131fb:	90                   	nop

c00131fc <Filesystem::~Filesystem()>:
c00131fc:	ba 3c b4 02 c0       	mov    edx,0xc002b43c
c0013201:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013205:	89 10                	mov    DWORD PTR [eax],edx
c0013207:	90                   	nop
c0013208:	c3                   	ret    
c0013209:	90                   	nop

c001320a <Filesystem::~Filesystem()>:
c001320a:	83 ec 0c             	sub    esp,0xc
c001320d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013211:	e8 e6 ff ff ff       	call   c00131fc <Filesystem::~Filesystem()>
c0013216:	83 c4 04             	add    esp,0x4
c0013219:	83 ec 08             	sub    esp,0x8
c001321c:	6a 08                	push   0x8
c001321e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013222:	e8 c6 fb ff ff       	call   c0012ded <operator delete(void*, unsigned long)>
c0013227:	83 c4 10             	add    esp,0x10
c001322a:	83 c4 0c             	add    esp,0xc
c001322d:	c3                   	ret    

c001322e <Fs::getcwd(Process*, char*, int)>:
c001322e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013232:	31 c0                	xor    eax,eax
c0013234:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013237:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001323b:	7d 15                	jge    c0013252 <Fs::getcwd(Process*, char*, int)+0x24>
c001323d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013241:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0013248:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001324b:	84 c9                	test   cl,cl
c001324d:	74 06                	je     c0013255 <Fs::getcwd(Process*, char*, int)+0x27>
c001324f:	40                   	inc    eax
c0013250:	eb e2                	jmp    c0013234 <Fs::getcwd(Process*, char*, int)+0x6>
c0013252:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013255:	31 c0                	xor    eax,eax
c0013257:	c3                   	ret    

c0013258 <Fs::initVFS()>:
c0013258:	83 ec 18             	sub    esp,0x18
c001325b:	6a 08                	push   0x8
c001325d:	e8 cc c6 ff ff       	call   c000f92e <malloc>
c0013262:	89 04 24             	mov    DWORD PTR [esp],eax
c0013265:	e8 d4 e4 00 00       	call   c002173e <FAT::FAT()>
c001326a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013271:	e8 b8 c6 ff ff       	call   c000f92e <malloc>
c0013276:	89 04 24             	mov    DWORD PTR [esp],eax
c0013279:	e8 fa f6 00 00       	call   c0022978 <ISO9660::ISO9660()>
c001327e:	83 c4 1c             	add    esp,0x1c
c0013281:	c3                   	ret    

c0013282 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013282:	55                   	push   ebp
c0013283:	57                   	push   edi
c0013284:	56                   	push   esi
c0013285:	53                   	push   ebx
c0013286:	81 ec 10 04 00 00    	sub    esp,0x410
c001328c:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013293:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c001329a:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00132a1:	68 00 04 00 00       	push   0x400
c00132a6:	6a 00                	push   0x0
c00132a8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00132ac:	56                   	push   esi
c00132ad:	e8 ba d4 fe ff       	call   c000076c <memset>
c00132b2:	83 c4 10             	add    esp,0x10
c00132b5:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00132b9:	75 0b                	jne    c00132c6 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00132bb:	50                   	push   eax
c00132bc:	50                   	push   eax
c00132bd:	57                   	push   edi
c00132be:	56                   	push   esi
c00132bf:	e8 64 d5 fe ff       	call   c0000828 <strcpy>
c00132c4:	eb 41                	jmp    c0013307 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c00132c6:	8a 07                	mov    al,BYTE PTR [edi]
c00132c8:	3c 5c                	cmp    al,0x5c
c00132ca:	74 04                	je     c00132d0 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c00132cc:	3c 2f                	cmp    al,0x2f
c00132ce:	75 18                	jne    c00132e8 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c00132d0:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00132d3:	3c 60                	cmp    al,0x60
c00132d5:	7e 03                	jle    c00132da <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00132d7:	83 e8 20             	sub    eax,0x20
c00132da:	88 04 24             	mov    BYTE PTR [esp],al
c00132dd:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00132e4:	50                   	push   eax
c00132e5:	50                   	push   eax
c00132e6:	eb 18                	jmp    c0013300 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00132e8:	50                   	push   eax
c00132e9:	50                   	push   eax
c00132ea:	55                   	push   ebp
c00132eb:	56                   	push   esi
c00132ec:	e8 37 d5 fe ff       	call   c0000828 <strcpy>
c00132f1:	5a                   	pop    edx
c00132f2:	59                   	pop    ecx
c00132f3:	68 51 cc 02 c0       	push   0xc002cc51
c00132f8:	56                   	push   esi
c00132f9:	e8 6a d6 fe ff       	call   c0000968 <strcat>
c00132fe:	5d                   	pop    ebp
c00132ff:	58                   	pop    eax
c0013300:	57                   	push   edi
c0013301:	56                   	push   esi
c0013302:	e8 61 d6 fe ff       	call   c0000968 <strcat>
c0013307:	83 c4 10             	add    esp,0x10
c001330a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001330d:	3c 60                	cmp    al,0x60
c001330f:	7e 03                	jle    c0013314 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013311:	83 e8 20             	sub    eax,0x20
c0013314:	88 04 24             	mov    BYTE PTR [esp],al
c0013317:	88 03                	mov    BYTE PTR [ebx],al
c0013319:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013320:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0013326:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001332a:	bf 03 00 00 00       	mov    edi,0x3
c001332f:	b8 03 00 00 00       	mov    eax,0x3
c0013334:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0013337:	84 d2                	test   dl,dl
c0013339:	0f 84 91 00 00 00    	je     c00133d0 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c001333f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0013342:	80 fa 5c             	cmp    dl,0x5c
c0013345:	74 05                	je     c001334c <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0013347:	80 fa 2f             	cmp    dl,0x2f
c001334a:	75 12                	jne    c001335e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001334c:	89 c5                	mov    ebp,eax
c001334e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013353:	74 09                	je     c001335e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013355:	40                   	inc    eax
c0013356:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c001335a:	89 cf                	mov    edi,ecx
c001335c:	eb d6                	jmp    c0013334 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c001335e:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013363:	75 5b                	jne    c00133c0 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013365:	80 fa 2e             	cmp    dl,0x2e
c0013368:	75 56                	jne    c00133c0 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001336a:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c001336e:	74 19                	je     c0013389 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013370:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013375:	74 53                	je     c00133ca <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013377:	89 f9                	mov    ecx,edi
c0013379:	41                   	inc    ecx
c001337a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001337d:	80 fa 2f             	cmp    dl,0x2f
c0013380:	74 f7                	je     c0013379 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013382:	80 fa 5c             	cmp    dl,0x5c
c0013385:	74 f2                	je     c0013379 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013387:	eb d1                	jmp    c001335a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013389:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001338e:	74 3a                	je     c00133ca <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013390:	83 f8 03             	cmp    eax,0x3
c0013393:	74 c5                	je     c001335a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013395:	41                   	inc    ecx
c0013396:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013399:	80 fa 2f             	cmp    dl,0x2f
c001339c:	74 f7                	je     c0013395 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c001339e:	80 fa 5c             	cmp    dl,0x5c
c00133a1:	74 f2                	je     c0013395 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00133a3:	48                   	dec    eax
c00133a4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00133a8:	75 06                	jne    c00133b0 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00133aa:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133ae:	eb f3                	jmp    c00133a3 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c00133b0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00133b4:	74 07                	je     c00133bd <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c00133b6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133ba:	48                   	dec    eax
c00133bb:	eb f3                	jmp    c00133b0 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00133bd:	40                   	inc    eax
c00133be:	eb 9a                	jmp    c001335a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133c0:	80 fa 2f             	cmp    dl,0x2f
c00133c3:	74 95                	je     c001335a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133c5:	80 fa 5c             	cmp    dl,0x5c
c00133c8:	74 90                	je     c001335a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133ca:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00133cd:	40                   	inc    eax
c00133ce:	eb 8a                	jmp    c001335a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133d0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133d4:	83 ec 0c             	sub    esp,0xc
c00133d7:	53                   	push   ebx
c00133d8:	e8 ab d3 fe ff       	call   c0000788 <strlen>
c00133dd:	83 c4 10             	add    esp,0x10
c00133e0:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00133e5:	75 26                	jne    c001340d <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00133e7:	83 ec 0c             	sub    esp,0xc
c00133ea:	53                   	push   ebx
c00133eb:	e8 98 d3 fe ff       	call   c0000788 <strlen>
c00133f0:	83 c4 10             	add    esp,0x10
c00133f3:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00133f8:	74 26                	je     c0013420 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c00133fa:	83 ec 0c             	sub    esp,0xc
c00133fd:	53                   	push   ebx
c00133fe:	e8 85 d3 fe ff       	call   c0000788 <strlen>
c0013403:	83 c4 10             	add    esp,0x10
c0013406:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001340b:	eb c7                	jmp    c00133d4 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c001340d:	83 ec 0c             	sub    esp,0xc
c0013410:	53                   	push   ebx
c0013411:	e8 72 d3 fe ff       	call   c0000788 <strlen>
c0013416:	83 c4 10             	add    esp,0x10
c0013419:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001341e:	74 c7                	je     c00133e7 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013420:	81 c4 0c 04 00 00    	add    esp,0x40c
c0013426:	5b                   	pop    ebx
c0013427:	5e                   	pop    esi
c0013428:	5f                   	pop    edi
c0013429:	5d                   	pop    ebp
c001342a:	c3                   	ret    
c001342b:	90                   	nop

c001342c <File::File(char const*, Process*)>:
c001342c:	83 ec 0c             	sub    esp,0xc
c001342f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013433:	83 ec 08             	sub    esp,0x8
c0013436:	6a 00                	push   0x0
c0013438:	50                   	push   eax
c0013439:	e8 46 e2 ff ff       	call   c0011684 <UnixFile::UnixFile(int)>
c001343e:	83 c4 10             	add    esp,0x10
c0013441:	ba a4 b4 02 c0       	mov    edx,0xc002b4a4
c0013446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001344a:	89 10                	mov    DWORD PTR [eax],edx
c001344c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013450:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001345a:	83 c0 0d             	add    eax,0xd
c001345d:	83 ec 04             	sub    esp,0x4
c0013460:	52                   	push   edx
c0013461:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013465:	50                   	push   eax
c0013466:	e8 17 fe ff ff       	call   c0013282 <Fs::standardiseFiles(char*, char const*, char const*)>
c001346b:	83 c4 10             	add    esp,0x10
c001346e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013472:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013475:	8d 50 bf             	lea    edx,[eax-0x41]
c0013478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001347c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013486:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001348a:	90                   	nop
c001348b:	83 c4 0c             	add    esp,0xc
c001348e:	c3                   	ret    
c001348f:	90                   	nop

c0013490 <File::open(FileOpenMode)>:
c0013490:	53                   	push   ebx
c0013491:	b8 0b 00 00 00       	mov    eax,0xb
c0013496:	83 ec 08             	sub    esp,0x8
c0013499:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001349d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00134a4:	80 fa 19             	cmp    dl,0x19
c00134a7:	77 40                	ja     c00134e9 <File::open(FileOpenMode)+0x59>
c00134a9:	8b 14 95 00 f5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0b00]
c00134b0:	85 d2                	test   edx,edx
c00134b2:	74 35                	je     c00134e9 <File::open(FileOpenMode)+0x59>
c00134b4:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00134ba:	85 d2                	test   edx,edx
c00134bc:	74 2b                	je     c00134e9 <File::open(FileOpenMode)+0x59>
c00134be:	b8 06 00 00 00       	mov    eax,0x6
c00134c3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00134c7:	75 20                	jne    c00134e9 <File::open(FileOpenMode)+0x59>
c00134c9:	8b 02                	mov    eax,DWORD PTR [edx]
c00134cb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00134d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00134d5:	51                   	push   ecx
c00134d6:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00134d9:	51                   	push   ecx
c00134da:	52                   	push   edx
c00134db:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00134de:	83 c4 10             	add    esp,0x10
c00134e1:	85 c0                	test   eax,eax
c00134e3:	75 04                	jne    c00134e9 <File::open(FileOpenMode)+0x59>
c00134e5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00134e9:	83 c4 08             	add    esp,0x8
c00134ec:	5b                   	pop    ebx
c00134ed:	c3                   	ret    

c00134ee <File::close()>:
c00134ee:	53                   	push   ebx
c00134ef:	b8 0b 00 00 00       	mov    eax,0xb
c00134f4:	83 ec 08             	sub    esp,0x8
c00134f7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00134fb:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013502:	80 fa 19             	cmp    dl,0x19
c0013505:	77 41                	ja     c0013548 <File::close()+0x5a>
c0013507:	8b 1c 95 00 f5 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0b00]
c001350e:	85 db                	test   ebx,ebx
c0013510:	74 36                	je     c0013548 <File::close()+0x5a>
c0013512:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013519:	74 2d                	je     c0013548 <File::close()+0x5a>
c001351b:	b8 05 00 00 00       	mov    eax,0x5
c0013520:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013524:	74 22                	je     c0013548 <File::close()+0x5a>
c0013526:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001352a:	8b 04 95 00 f5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0b00]
c0013531:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013537:	53                   	push   ebx
c0013538:	53                   	push   ebx
c0013539:	8b 10                	mov    edx,DWORD PTR [eax]
c001353b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013541:	50                   	push   eax
c0013542:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013545:	83 c4 10             	add    esp,0x10
c0013548:	83 c4 08             	add    esp,0x8
c001354b:	5b                   	pop    ebx
c001354c:	c3                   	ret    
c001354d:	90                   	nop

c001354e <File::seek(unsigned long long)>:
c001354e:	56                   	push   esi
c001354f:	53                   	push   ebx
c0013550:	b8 0b 00 00 00       	mov    eax,0xb
c0013555:	51                   	push   ecx
c0013556:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001355a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001355e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013565:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013569:	80 fa 19             	cmp    dl,0x19
c001356c:	77 31                	ja     c001359f <File::seek(unsigned long long)+0x51>
c001356e:	8b 14 95 00 f5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0b00]
c0013575:	85 d2                	test   edx,edx
c0013577:	74 26                	je     c001359f <File::seek(unsigned long long)+0x51>
c0013579:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001357f:	85 d2                	test   edx,edx
c0013581:	74 1c                	je     c001359f <File::seek(unsigned long long)+0x51>
c0013583:	b8 05 00 00 00       	mov    eax,0x5
c0013588:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001358c:	74 11                	je     c001359f <File::seek(unsigned long long)+0x51>
c001358e:	8b 02                	mov    eax,DWORD PTR [edx]
c0013590:	53                   	push   ebx
c0013591:	51                   	push   ecx
c0013592:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0013598:	52                   	push   edx
c0013599:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001359c:	83 c4 10             	add    esp,0x10
c001359f:	5a                   	pop    edx
c00135a0:	5b                   	pop    ebx
c00135a1:	5e                   	pop    esi
c00135a2:	c3                   	ret    
c00135a3:	90                   	nop

c00135a4 <File::tell(unsigned long long*)>:
c00135a4:	83 ec 0c             	sub    esp,0xc
c00135a7:	b8 0b 00 00 00       	mov    eax,0xb
c00135ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00135b0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00135b7:	80 fa 19             	cmp    dl,0x19
c00135ba:	77 34                	ja     c00135f0 <File::tell(unsigned long long*)+0x4c>
c00135bc:	8b 14 95 00 f5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0b00]
c00135c3:	85 d2                	test   edx,edx
c00135c5:	74 29                	je     c00135f0 <File::tell(unsigned long long*)+0x4c>
c00135c7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135cd:	85 d2                	test   edx,edx
c00135cf:	74 1f                	je     c00135f0 <File::tell(unsigned long long*)+0x4c>
c00135d1:	b8 05 00 00 00       	mov    eax,0x5
c00135d6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00135da:	74 14                	je     c00135f0 <File::tell(unsigned long long*)+0x4c>
c00135dc:	50                   	push   eax
c00135dd:	8b 02                	mov    eax,DWORD PTR [edx]
c00135df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00135e3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00135e9:	52                   	push   edx
c00135ea:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00135ed:	83 c4 10             	add    esp,0x10
c00135f0:	83 c4 0c             	add    esp,0xc
c00135f3:	c3                   	ret    

c00135f4 <File::rewind()>:
c00135f4:	83 ec 10             	sub    esp,0x10
c00135f7:	6a 00                	push   0x0
c00135f9:	6a 00                	push   0x0
c00135fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135ff:	e8 4a ff ff ff       	call   c001354e <File::seek(unsigned long long)>
c0013604:	83 c4 1c             	add    esp,0x1c
c0013607:	c3                   	ret    

c0013608 <File::unlink()>:
c0013608:	83 ec 0c             	sub    esp,0xc
c001360b:	b8 0b 00 00 00       	mov    eax,0xb
c0013610:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013614:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001361b:	80 f9 19             	cmp    cl,0x19
c001361e:	77 2f                	ja     c001364f <File::unlink()+0x47>
c0013620:	8b 0c 8d 00 f5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b00]
c0013627:	85 c9                	test   ecx,ecx
c0013629:	74 24                	je     c001364f <File::unlink()+0x47>
c001362b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013631:	85 c9                	test   ecx,ecx
c0013633:	74 1a                	je     c001364f <File::unlink()+0x47>
c0013635:	b8 06 00 00 00       	mov    eax,0x6
c001363a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001363e:	75 0f                	jne    c001364f <File::unlink()+0x47>
c0013640:	83 c2 0d             	add    edx,0xd
c0013643:	50                   	push   eax
c0013644:	50                   	push   eax
c0013645:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013647:	52                   	push   edx
c0013648:	51                   	push   ecx
c0013649:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001364c:	83 c4 10             	add    esp,0x10
c001364f:	83 c4 0c             	add    esp,0xc
c0013652:	c3                   	ret    
c0013653:	90                   	nop

c0013654 <File::rename(char const*)>:
c0013654:	83 ec 0c             	sub    esp,0xc
c0013657:	b8 0b 00 00 00       	mov    eax,0xb
c001365c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013660:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013667:	80 f9 19             	cmp    cl,0x19
c001366a:	77 32                	ja     c001369e <File::rename(char const*)+0x4a>
c001366c:	8b 0c 8d 00 f5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b00]
c0013673:	85 c9                	test   ecx,ecx
c0013675:	74 27                	je     c001369e <File::rename(char const*)+0x4a>
c0013677:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001367d:	85 c9                	test   ecx,ecx
c001367f:	74 1d                	je     c001369e <File::rename(char const*)+0x4a>
c0013681:	b8 06 00 00 00       	mov    eax,0x6
c0013686:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001368a:	75 12                	jne    c001369e <File::rename(char const*)+0x4a>
c001368c:	83 c2 0d             	add    edx,0xd
c001368f:	50                   	push   eax
c0013690:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013692:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013696:	52                   	push   edx
c0013697:	51                   	push   ecx
c0013698:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001369b:	83 c4 10             	add    esp,0x10
c001369e:	83 c4 0c             	add    esp,0xc
c00136a1:	c3                   	ret    

c00136a2 <File::chfatattr(unsigned char, unsigned char)>:
c00136a2:	57                   	push   edi
c00136a3:	b8 0b 00 00 00       	mov    eax,0xb
c00136a8:	56                   	push   esi
c00136a9:	53                   	push   ebx
c00136aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136ae:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00136b2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136b9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00136bd:	80 f9 19             	cmp    cl,0x19
c00136c0:	77 37                	ja     c00136f9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136c2:	8b 0c 8d 00 f5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b00]
c00136c9:	85 c9                	test   ecx,ecx
c00136cb:	74 2c                	je     c00136f9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136cd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136d3:	85 c9                	test   ecx,ecx
c00136d5:	74 22                	je     c00136f9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136d7:	b8 06 00 00 00       	mov    eax,0x6
c00136dc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136e0:	75 17                	jne    c00136f9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136e2:	8b 39                	mov    edi,DWORD PTR [ecx]
c00136e4:	89 f0                	mov    eax,esi
c00136e6:	83 c2 0d             	add    edx,0xd
c00136e9:	0f b6 f0             	movzx  esi,al
c00136ec:	0f b6 db             	movzx  ebx,bl
c00136ef:	56                   	push   esi
c00136f0:	53                   	push   ebx
c00136f1:	52                   	push   edx
c00136f2:	51                   	push   ecx
c00136f3:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00136f6:	83 c4 10             	add    esp,0x10
c00136f9:	5b                   	pop    ebx
c00136fa:	5e                   	pop    esi
c00136fb:	5f                   	pop    edi
c00136fc:	c3                   	ret    
c00136fd:	90                   	nop

c00136fe <File::exists()>:
c00136fe:	83 ec 0c             	sub    esp,0xc
c0013701:	31 c0                	xor    eax,eax
c0013703:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013707:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001370e:	80 f9 19             	cmp    cl,0x19
c0013711:	77 24                	ja     c0013737 <File::exists()+0x39>
c0013713:	8b 0c 8d 00 f5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b00]
c001371a:	85 c9                	test   ecx,ecx
c001371c:	74 19                	je     c0013737 <File::exists()+0x39>
c001371e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013724:	85 c9                	test   ecx,ecx
c0013726:	74 0f                	je     c0013737 <File::exists()+0x39>
c0013728:	83 c2 0d             	add    edx,0xd
c001372b:	50                   	push   eax
c001372c:	50                   	push   eax
c001372d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001372f:	52                   	push   edx
c0013730:	51                   	push   ecx
c0013731:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013734:	83 c4 10             	add    esp,0x10
c0013737:	83 c4 0c             	add    esp,0xc
c001373a:	c3                   	ret    
c001373b:	90                   	nop

c001373c <File::stat(unsigned long long*, bool*)>:
c001373c:	56                   	push   esi
c001373d:	53                   	push   ebx
c001373e:	50                   	push   eax
c001373f:	b8 0b 00 00 00       	mov    eax,0xb
c0013744:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013748:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001374c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013753:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013757:	80 f9 19             	cmp    cl,0x19
c001375a:	77 3d                	ja     c0013799 <File::stat(unsigned long long*, bool*)+0x5d>
c001375c:	8b 0c 8d 00 f5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b00]
c0013763:	85 c9                	test   ecx,ecx
c0013765:	74 32                	je     c0013799 <File::stat(unsigned long long*, bool*)+0x5d>
c0013767:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001376d:	85 c9                	test   ecx,ecx
c001376f:	74 28                	je     c0013799 <File::stat(unsigned long long*, bool*)+0x5d>
c0013771:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013773:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013777:	74 13                	je     c001378c <File::stat(unsigned long long*, bool*)+0x50>
c0013779:	83 ec 04             	sub    esp,0x4
c001377c:	56                   	push   esi
c001377d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013783:	51                   	push   ecx
c0013784:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013787:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001378a:	eb 0a                	jmp    c0013796 <File::stat(unsigned long long*, bool*)+0x5a>
c001378c:	53                   	push   ebx
c001378d:	83 c2 0d             	add    edx,0xd
c0013790:	56                   	push   esi
c0013791:	52                   	push   edx
c0013792:	51                   	push   ecx
c0013793:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013796:	83 c4 10             	add    esp,0x10
c0013799:	5a                   	pop    edx
c001379a:	5b                   	pop    ebx
c001379b:	5e                   	pop    esi
c001379c:	c3                   	ret    

c001379d <Fs::setcwd(Process*, char*)>:
c001379d:	55                   	push   ebp
c001379e:	57                   	push   edi
c001379f:	56                   	push   esi
c00137a0:	53                   	push   ebx
c00137a1:	81 ec 20 02 00 00    	sub    esp,0x220
c00137a7:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00137ae:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00137b4:	57                   	push   edi
c00137b5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00137bc:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00137c0:	56                   	push   esi
c00137c1:	e8 bc fa ff ff       	call   c0013282 <Fs::standardiseFiles(char*, char const*, char const*)>
c00137c6:	89 34 24             	mov    DWORD PTR [esp],esi
c00137c9:	e8 ba cf fe ff       	call   c0000788 <strlen>
c00137ce:	83 c4 10             	add    esp,0x10
c00137d1:	83 f8 02             	cmp    eax,0x2
c00137d4:	77 17                	ja     c00137ed <Fs::setcwd(Process*, char*)+0x50>
c00137d6:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00137db:	83 e8 41             	sub    eax,0x41
c00137de:	83 f8 19             	cmp    eax,0x19
c00137e1:	76 24                	jbe    c0013807 <Fs::setcwd(Process*, char*)+0x6a>
c00137e3:	b8 03 00 00 00       	mov    eax,0x3
c00137e8:	e9 e0 00 00 00       	jmp    c00138cd <Fs::setcwd(Process*, char*)+0x130>
c00137ed:	83 ec 0c             	sub    esp,0xc
c00137f0:	56                   	push   esi
c00137f1:	e8 92 cf fe ff       	call   c0000788 <strlen>
c00137f6:	83 c4 10             	add    esp,0x10
c00137f9:	83 f8 03             	cmp    eax,0x3
c00137fc:	75 34                	jne    c0013832 <Fs::setcwd(Process*, char*)+0x95>
c00137fe:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013803:	75 2d                	jne    c0013832 <Fs::setcwd(Process*, char*)+0x95>
c0013805:	eb cf                	jmp    c00137d6 <Fs::setcwd(Process*, char*)+0x39>
c0013807:	8b 14 85 00 f5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0b00]
c001380e:	b8 05 00 00 00       	mov    eax,0x5
c0013813:	85 d2                	test   edx,edx
c0013815:	0f 84 b2 00 00 00    	je     c00138cd <Fs::setcwd(Process*, char*)+0x130>
c001381b:	b8 06 00 00 00       	mov    eax,0x6
c0013820:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013827:	0f 85 92 00 00 00    	jne    c00138bf <Fs::setcwd(Process*, char*)+0x122>
c001382d:	e9 9b 00 00 00       	jmp    c00138cd <Fs::setcwd(Process*, char*)+0x130>
c0013832:	83 ec 0c             	sub    esp,0xc
c0013835:	68 14 01 00 00       	push   0x114
c001383a:	e8 ef c0 ff ff       	call   c000f92e <malloc>
c001383f:	83 c4 0c             	add    esp,0xc
c0013842:	89 c3                	mov    ebx,eax
c0013844:	55                   	push   ebp
c0013845:	56                   	push   esi
c0013846:	50                   	push   eax
c0013847:	e8 e0 fb ff ff       	call   c001342c <File::File(char const*, Process*)>
c001384c:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013851:	83 c4 0c             	add    esp,0xc
c0013854:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013858:	50                   	push   eax
c0013859:	8d 44 24 10          	lea    eax,[esp+0x10]
c001385d:	50                   	push   eax
c001385e:	53                   	push   ebx
c001385f:	e8 d8 fe ff ff       	call   c001373c <File::stat(unsigned long long*, bool*)>
c0013864:	83 c4 10             	add    esp,0x10
c0013867:	83 f8 02             	cmp    eax,0x2
c001386a:	74 04                	je     c0013870 <Fs::setcwd(Process*, char*)+0xd3>
c001386c:	85 c0                	test   eax,eax
c001386e:	74 1c                	je     c001388c <Fs::setcwd(Process*, char*)+0xef>
c0013870:	b8 01 00 00 00       	mov    eax,0x1
c0013875:	85 db                	test   ebx,ebx
c0013877:	74 54                	je     c00138cd <Fs::setcwd(Process*, char*)+0x130>
c0013879:	83 ec 0c             	sub    esp,0xc
c001387c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001387e:	53                   	push   ebx
c001387f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013882:	83 c4 10             	add    esp,0x10
c0013885:	b8 01 00 00 00       	mov    eax,0x1
c001388a:	eb 41                	jmp    c00138cd <Fs::setcwd(Process*, char*)+0x130>
c001388c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013891:	75 1c                	jne    c00138af <Fs::setcwd(Process*, char*)+0x112>
c0013893:	b8 02 00 00 00       	mov    eax,0x2
c0013898:	85 db                	test   ebx,ebx
c001389a:	74 31                	je     c00138cd <Fs::setcwd(Process*, char*)+0x130>
c001389c:	83 ec 0c             	sub    esp,0xc
c001389f:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138a1:	53                   	push   ebx
c00138a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138a5:	83 c4 10             	add    esp,0x10
c00138a8:	b8 02 00 00 00       	mov    eax,0x2
c00138ad:	eb 1e                	jmp    c00138cd <Fs::setcwd(Process*, char*)+0x130>
c00138af:	85 db                	test   ebx,ebx
c00138b1:	74 0c                	je     c00138bf <Fs::setcwd(Process*, char*)+0x122>
c00138b3:	83 ec 0c             	sub    esp,0xc
c00138b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138b8:	53                   	push   ebx
c00138b9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138bc:	83 c4 10             	add    esp,0x10
c00138bf:	50                   	push   eax
c00138c0:	50                   	push   eax
c00138c1:	56                   	push   esi
c00138c2:	57                   	push   edi
c00138c3:	e8 60 cf fe ff       	call   c0000828 <strcpy>
c00138c8:	83 c4 10             	add    esp,0x10
c00138cb:	31 c0                	xor    eax,eax
c00138cd:	81 c4 1c 02 00 00    	add    esp,0x21c
c00138d3:	5b                   	pop    ebx
c00138d4:	5e                   	pop    esi
c00138d5:	5f                   	pop    edi
c00138d6:	5d                   	pop    ebp
c00138d7:	c3                   	ret    

c00138d8 <Directory::Directory(char const*, Process*)>:
c00138d8:	83 ec 0c             	sub    esp,0xc
c00138db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138df:	83 ec 08             	sub    esp,0x8
c00138e2:	6a 00                	push   0x0
c00138e4:	50                   	push   eax
c00138e5:	e8 9a dd ff ff       	call   c0011684 <UnixFile::UnixFile(int)>
c00138ea:	83 c4 10             	add    esp,0x10
c00138ed:	ba c0 b4 02 c0       	mov    edx,0xc002b4c0
c00138f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138f6:	89 10                	mov    DWORD PTR [eax],edx
c00138f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00138fc:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013906:	83 c0 0d             	add    eax,0xd
c0013909:	83 ec 04             	sub    esp,0x4
c001390c:	52                   	push   edx
c001390d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013911:	50                   	push   eax
c0013912:	e8 6b f9 ff ff       	call   c0013282 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013917:	83 c4 10             	add    esp,0x10
c001391a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001391e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013921:	8d 50 bf             	lea    edx,[eax-0x41]
c0013924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013928:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001392e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013932:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013936:	90                   	nop
c0013937:	83 c4 0c             	add    esp,0xc
c001393a:	c3                   	ret    
c001393b:	90                   	nop

c001393c <Directory::open()>:
c001393c:	53                   	push   ebx
c001393d:	b8 0b 00 00 00       	mov    eax,0xb
c0013942:	83 ec 08             	sub    esp,0x8
c0013945:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013949:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013950:	80 fa 19             	cmp    dl,0x19
c0013953:	77 3d                	ja     c0013992 <Directory::open()+0x56>
c0013955:	8b 14 95 00 f5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0b00]
c001395c:	85 d2                	test   edx,edx
c001395e:	74 32                	je     c0013992 <Directory::open()+0x56>
c0013960:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013966:	85 d2                	test   edx,edx
c0013968:	74 28                	je     c0013992 <Directory::open()+0x56>
c001396a:	b8 06 00 00 00       	mov    eax,0x6
c001396f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013973:	75 1d                	jne    c0013992 <Directory::open()+0x56>
c0013975:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001397b:	50                   	push   eax
c001397c:	8b 02                	mov    eax,DWORD PTR [edx]
c001397e:	51                   	push   ecx
c001397f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013982:	51                   	push   ecx
c0013983:	52                   	push   edx
c0013984:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013987:	83 c4 10             	add    esp,0x10
c001398a:	85 c0                	test   eax,eax
c001398c:	75 04                	jne    c0013992 <Directory::open()+0x56>
c001398e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013992:	83 c4 08             	add    esp,0x8
c0013995:	5b                   	pop    ebx
c0013996:	c3                   	ret    
c0013997:	90                   	nop

c0013998 <Directory::close()>:
c0013998:	53                   	push   ebx
c0013999:	b8 0b 00 00 00       	mov    eax,0xb
c001399e:	83 ec 08             	sub    esp,0x8
c00139a1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00139a5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00139ac:	80 fa 19             	cmp    dl,0x19
c00139af:	77 41                	ja     c00139f2 <Directory::close()+0x5a>
c00139b1:	8b 1c 95 00 f5 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0b00]
c00139b8:	85 db                	test   ebx,ebx
c00139ba:	74 36                	je     c00139f2 <Directory::close()+0x5a>
c00139bc:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00139c3:	74 2d                	je     c00139f2 <Directory::close()+0x5a>
c00139c5:	b8 05 00 00 00       	mov    eax,0x5
c00139ca:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00139ce:	74 22                	je     c00139f2 <Directory::close()+0x5a>
c00139d0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00139d4:	8b 04 95 00 f5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0b00]
c00139db:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00139e1:	53                   	push   ebx
c00139e2:	53                   	push   ebx
c00139e3:	8b 10                	mov    edx,DWORD PTR [eax]
c00139e5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00139eb:	50                   	push   eax
c00139ec:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00139ef:	83 c4 10             	add    esp,0x10
c00139f2:	83 c4 08             	add    esp,0x8
c00139f5:	5b                   	pop    ebx
c00139f6:	c3                   	ret    
c00139f7:	90                   	nop

c00139f8 <Directory::unlink()>:
c00139f8:	83 ec 0c             	sub    esp,0xc
c00139fb:	b8 0b 00 00 00       	mov    eax,0xb
c0013a00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a04:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a0b:	80 f9 19             	cmp    cl,0x19
c0013a0e:	77 2f                	ja     c0013a3f <Directory::unlink()+0x47>
c0013a10:	8b 0c 8d 00 f5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b00]
c0013a17:	85 c9                	test   ecx,ecx
c0013a19:	74 24                	je     c0013a3f <Directory::unlink()+0x47>
c0013a1b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a21:	85 c9                	test   ecx,ecx
c0013a23:	74 1a                	je     c0013a3f <Directory::unlink()+0x47>
c0013a25:	b8 06 00 00 00       	mov    eax,0x6
c0013a2a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a2e:	75 0f                	jne    c0013a3f <Directory::unlink()+0x47>
c0013a30:	83 c2 0d             	add    edx,0xd
c0013a33:	50                   	push   eax
c0013a34:	50                   	push   eax
c0013a35:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a37:	52                   	push   edx
c0013a38:	51                   	push   ecx
c0013a39:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013a3c:	83 c4 10             	add    esp,0x10
c0013a3f:	83 c4 0c             	add    esp,0xc
c0013a42:	c3                   	ret    
c0013a43:	90                   	nop

c0013a44 <Directory::rename(char const*)>:
c0013a44:	83 ec 0c             	sub    esp,0xc
c0013a47:	b8 0b 00 00 00       	mov    eax,0xb
c0013a4c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a50:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a57:	80 f9 19             	cmp    cl,0x19
c0013a5a:	77 32                	ja     c0013a8e <Directory::rename(char const*)+0x4a>
c0013a5c:	8b 0c 8d 00 f5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b00]
c0013a63:	85 c9                	test   ecx,ecx
c0013a65:	74 27                	je     c0013a8e <Directory::rename(char const*)+0x4a>
c0013a67:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a6d:	85 c9                	test   ecx,ecx
c0013a6f:	74 1d                	je     c0013a8e <Directory::rename(char const*)+0x4a>
c0013a71:	b8 06 00 00 00       	mov    eax,0x6
c0013a76:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a7a:	75 12                	jne    c0013a8e <Directory::rename(char const*)+0x4a>
c0013a7c:	83 c2 0d             	add    edx,0xd
c0013a7f:	50                   	push   eax
c0013a80:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a86:	52                   	push   edx
c0013a87:	51                   	push   ecx
c0013a88:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013a8b:	83 c4 10             	add    esp,0x10
c0013a8e:	83 c4 0c             	add    esp,0xc
c0013a91:	c3                   	ret    

c0013a92 <Directory::exists()>:
c0013a92:	83 ec 0c             	sub    esp,0xc
c0013a95:	31 c0                	xor    eax,eax
c0013a97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a9b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013aa2:	80 f9 19             	cmp    cl,0x19
c0013aa5:	77 24                	ja     c0013acb <Directory::exists()+0x39>
c0013aa7:	8b 0c 8d 00 f5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b00]
c0013aae:	85 c9                	test   ecx,ecx
c0013ab0:	74 19                	je     c0013acb <Directory::exists()+0x39>
c0013ab2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013ab8:	85 c9                	test   ecx,ecx
c0013aba:	74 0f                	je     c0013acb <Directory::exists()+0x39>
c0013abc:	83 c2 0d             	add    edx,0xd
c0013abf:	50                   	push   eax
c0013ac0:	50                   	push   eax
c0013ac1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ac3:	52                   	push   edx
c0013ac4:	51                   	push   ecx
c0013ac5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013ac8:	83 c4 10             	add    esp,0x10
c0013acb:	83 c4 0c             	add    esp,0xc
c0013ace:	c3                   	ret    
c0013acf:	90                   	nop

c0013ad0 <Directory::read(dirent*)>:
c0013ad0:	83 ec 1c             	sub    esp,0x1c
c0013ad3:	b8 0b 00 00 00       	mov    eax,0xb
c0013ad8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013adc:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013ae3:	80 fa 19             	cmp    dl,0x19
c0013ae6:	77 30                	ja     c0013b18 <Directory::read(dirent*)+0x48>
c0013ae8:	8b 14 95 00 f5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0b00]
c0013aef:	85 d2                	test   edx,edx
c0013af1:	74 25                	je     c0013b18 <Directory::read(dirent*)+0x48>
c0013af3:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013afa:	74 1c                	je     c0013b18 <Directory::read(dirent*)+0x48>
c0013afc:	83 ec 0c             	sub    esp,0xc
c0013aff:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b01:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013b05:	52                   	push   edx
c0013b06:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013b0a:	6a 00                	push   0x0
c0013b0c:	68 10 01 00 00       	push   0x110
c0013b11:	51                   	push   ecx
c0013b12:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b15:	83 c4 20             	add    esp,0x20
c0013b18:	83 c4 1c             	add    esp,0x1c
c0013b1b:	c3                   	ret    

c0013b1c <Directory::create()>:
c0013b1c:	83 ec 0c             	sub    esp,0xc
c0013b1f:	b8 0b 00 00 00       	mov    eax,0xb
c0013b24:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b28:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b2f:	80 f9 19             	cmp    cl,0x19
c0013b32:	77 2f                	ja     c0013b63 <Directory::create()+0x47>
c0013b34:	8b 0c 8d 00 f5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b00]
c0013b3b:	85 c9                	test   ecx,ecx
c0013b3d:	74 24                	je     c0013b63 <Directory::create()+0x47>
c0013b3f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b45:	85 c9                	test   ecx,ecx
c0013b47:	74 1a                	je     c0013b63 <Directory::create()+0x47>
c0013b49:	b8 06 00 00 00       	mov    eax,0x6
c0013b4e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b52:	75 0f                	jne    c0013b63 <Directory::create()+0x47>
c0013b54:	83 c2 0d             	add    edx,0xd
c0013b57:	50                   	push   eax
c0013b58:	50                   	push   eax
c0013b59:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b5b:	52                   	push   edx
c0013b5c:	51                   	push   ecx
c0013b5d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013b60:	83 c4 10             	add    esp,0x10
c0013b63:	83 c4 0c             	add    esp,0xc
c0013b66:	c3                   	ret    
c0013b67:	90                   	nop

c0013b68 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013b68:	b8 0a 00 00 00       	mov    eax,0xa
c0013b6d:	c3                   	ret    

c0013b6e <Bus::Bus(char const*)>:
c0013b6e:	83 ec 0c             	sub    esp,0xc
c0013b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b75:	83 ec 08             	sub    esp,0x8
c0013b78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b7c:	50                   	push   eax
c0013b7d:	e8 5e 09 00 00       	call   c00144e0 <Device::Device(char const*)>
c0013b82:	83 c4 10             	add    esp,0x10
c0013b85:	ba dc b4 02 c0       	mov    edx,0xc002b4dc
c0013b8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b8e:	89 10                	mov    DWORD PTR [eax],edx
c0013b90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b94:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013b9e:	90                   	nop
c0013b9f:	83 c4 0c             	add    esp,0xc
c0013ba2:	c3                   	ret    
c0013ba3:	90                   	nop

c0013ba4 <Bus::~Bus()>:
c0013ba4:	83 ec 0c             	sub    esp,0xc
c0013ba7:	ba dc b4 02 c0       	mov    edx,0xc002b4dc
c0013bac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bb0:	89 10                	mov    DWORD PTR [eax],edx
c0013bb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bb6:	83 ec 0c             	sub    esp,0xc
c0013bb9:	50                   	push   eax
c0013bba:	e8 15 06 00 00       	call   c00141d4 <Device::~Device()>
c0013bbf:	83 c4 10             	add    esp,0x10
c0013bc2:	90                   	nop
c0013bc3:	83 c4 0c             	add    esp,0xc
c0013bc6:	c3                   	ret    
c0013bc7:	90                   	nop

c0013bc8 <Bus::~Bus()>:
c0013bc8:	83 ec 0c             	sub    esp,0xc
c0013bcb:	83 ec 0c             	sub    esp,0xc
c0013bce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bd2:	e8 cd ff ff ff       	call   c0013ba4 <Bus::~Bus()>
c0013bd7:	83 c4 10             	add    esp,0x10
c0013bda:	83 ec 08             	sub    esp,0x8
c0013bdd:	68 58 01 00 00       	push   0x158
c0013be2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013be6:	e8 02 f2 ff ff       	call   c0012ded <operator delete(void*, unsigned long)>
c0013beb:	83 c4 10             	add    esp,0x10
c0013bee:	83 c4 0c             	add    esp,0xc
c0013bf1:	c3                   	ret    

c0013bf2 <Buzzer::Buzzer(char const*)>:
c0013bf2:	83 ec 0c             	sub    esp,0xc
c0013bf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bf9:	83 ec 08             	sub    esp,0x8
c0013bfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c00:	50                   	push   eax
c0013c01:	e8 da 08 00 00       	call   c00144e0 <Device::Device(char const*)>
c0013c06:	83 c4 10             	add    esp,0x10
c0013c09:	ba 08 b5 02 c0       	mov    edx,0xc002b508
c0013c0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c12:	89 10                	mov    DWORD PTR [eax],edx
c0013c14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c18:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c26:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013c30:	90                   	nop
c0013c31:	83 c4 0c             	add    esp,0xc
c0013c34:	c3                   	ret    
c0013c35:	90                   	nop

c0013c36 <Buzzer::~Buzzer()>:
c0013c36:	83 ec 0c             	sub    esp,0xc
c0013c39:	ba 08 b5 02 c0       	mov    edx,0xc002b508
c0013c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c42:	89 10                	mov    DWORD PTR [eax],edx
c0013c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c48:	83 ec 0c             	sub    esp,0xc
c0013c4b:	50                   	push   eax
c0013c4c:	e8 83 05 00 00       	call   c00141d4 <Device::~Device()>
c0013c51:	83 c4 10             	add    esp,0x10
c0013c54:	90                   	nop
c0013c55:	83 c4 0c             	add    esp,0xc
c0013c58:	c3                   	ret    
c0013c59:	90                   	nop

c0013c5a <Buzzer::~Buzzer()>:
c0013c5a:	83 ec 0c             	sub    esp,0xc
c0013c5d:	83 ec 0c             	sub    esp,0xc
c0013c60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c64:	e8 cd ff ff ff       	call   c0013c36 <Buzzer::~Buzzer()>
c0013c69:	83 c4 10             	add    esp,0x10
c0013c6c:	83 ec 08             	sub    esp,0x8
c0013c6f:	68 5c 01 00 00       	push   0x15c
c0013c74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c78:	e8 70 f1 ff ff       	call   c0012ded <operator delete(void*, unsigned long)>
c0013c7d:	83 c4 10             	add    esp,0x10
c0013c80:	83 c4 0c             	add    esp,0xc
c0013c83:	c3                   	ret    

c0013c84 <Buzzer::stop()>:
c0013c84:	83 ec 14             	sub    esp,0x14
c0013c87:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c8b:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c8d:	6a 00                	push   0x0
c0013c8f:	50                   	push   eax
c0013c90:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013c93:	83 c4 1c             	add    esp,0x1c
c0013c96:	c3                   	ret    

c0013c97 <beepThread(void*)>:
c0013c97:	53                   	push   ebx
c0013c98:	83 ec 08             	sub    esp,0x8
c0013c9b:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c0013ca0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ca4:	48                   	dec    eax
c0013ca5:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c0013caa:	75 01                	jne    c0013cad <beepThread(void*)+0x16>
c0013cac:	fb                   	sti    
c0013cad:	50                   	push   eax
c0013cae:	50                   	push   eax
c0013caf:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013cb4:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013cba:	52                   	push   edx
c0013cbb:	50                   	push   eax
c0013cbc:	e8 68 ab 00 00       	call   c001e829 <nanoSleep(unsigned long long)>
c0013cc1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cc4:	e8 bb ff ff ff       	call   c0013c84 <Buzzer::stop()>
c0013cc9:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013cd1:	83 c4 18             	add    esp,0x18
c0013cd4:	5b                   	pop    ebx
c0013cd5:	e9 4b aa 00 00       	jmp    c001e725 <blockTask(TaskState)>

c0013cda <Buzzer::beep(int, int, bool)>:
c0013cda:	57                   	push   edi
c0013cdb:	56                   	push   esi
c0013cdc:	53                   	push   ebx
c0013cdd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ce1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013ce5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ce9:	52                   	push   edx
c0013cea:	52                   	push   edx
c0013ceb:	8b 06                	mov    eax,DWORD PTR [esi]
c0013ced:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cf1:	56                   	push   esi
c0013cf2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013cf5:	83 c4 10             	add    esp,0x10
c0013cf8:	89 f8                	mov    eax,edi
c0013cfa:	84 c0                	test   al,al
c0013cfc:	74 1f                	je     c0013d1d <Buzzer::beep(int, int, bool)+0x43>
c0013cfe:	50                   	push   eax
c0013cff:	50                   	push   eax
c0013d00:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013d06:	99                   	cdq    
c0013d07:	52                   	push   edx
c0013d08:	50                   	push   eax
c0013d09:	e8 1b ab 00 00       	call   c001e829 <nanoSleep(unsigned long long)>
c0013d0e:	83 c4 10             	add    esp,0x10
c0013d11:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013d15:	5b                   	pop    ebx
c0013d16:	5e                   	pop    esi
c0013d17:	5f                   	pop    edi
c0013d18:	e9 67 ff ff ff       	jmp    c0013c84 <Buzzer::stop()>
c0013d1d:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013d23:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0013d28:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013d30:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013d34:	c7 44 24 14 97 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013c97
c0013d3c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d40:	5b                   	pop    ebx
c0013d41:	5e                   	pop    esi
c0013d42:	5f                   	pop    edi
c0013d43:	e9 9a a5 00 00       	jmp    c001e2e2 <Process::createThread(void (*)(void*), void*, int)>

c0013d48 <User::loadClockSettings(int)>:
c0013d48:	53                   	push   ebx
c0013d49:	83 ec 14             	sub    esp,0x14
c0013d4c:	68 14 01 00 00       	push   0x114
c0013d51:	e8 d8 bb ff ff       	call   c000f92e <malloc>
c0013d56:	83 c4 0c             	add    esp,0xc
c0013d59:	89 c3                	mov    ebx,eax
c0013d5b:	ff 35 50 24 03 c0    	push   DWORD PTR ds:0xc0032450
c0013d61:	68 30 b5 02 c0       	push   0xc002b530
c0013d66:	50                   	push   eax
c0013d67:	e8 c0 f6 ff ff       	call   c001342c <File::File(char const*, Process*)>
c0013d6c:	58                   	pop    eax
c0013d6d:	5a                   	pop    edx
c0013d6e:	6a 01                	push   0x1
c0013d70:	53                   	push   ebx
c0013d71:	e8 1a f7 ff ff       	call   c0013490 <File::open(FileOpenMode)>
c0013d76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d79:	e8 70 f7 ff ff       	call   c00134ee <File::close()>
c0013d7e:	83 c4 10             	add    esp,0x10
c0013d81:	85 db                	test   ebx,ebx
c0013d83:	74 0f                	je     c0013d94 <User::loadClockSettings(int)+0x4c>
c0013d85:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d87:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013d8b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013d8e:	83 c4 08             	add    esp,0x8
c0013d91:	5b                   	pop    ebx
c0013d92:	ff e0                	jmp    eax
c0013d94:	83 c4 08             	add    esp,0x8
c0013d97:	5b                   	pop    ebx
c0013d98:	c3                   	ret    
c0013d99:	90                   	nop

c0013d9a <Clock::Clock(char const*)>:
c0013d9a:	83 ec 0c             	sub    esp,0xc
c0013d9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013da1:	83 ec 08             	sub    esp,0x8
c0013da4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013da8:	50                   	push   eax
c0013da9:	e8 32 07 00 00       	call   c00144e0 <Device::Device(char const*)>
c0013dae:	83 c4 10             	add    esp,0x10
c0013db1:	ba 58 b5 02 c0       	mov    edx,0xc002b558
c0013db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dba:	89 10                	mov    DWORD PTR [eax],edx
c0013dbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dc0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013dca:	90                   	nop
c0013dcb:	83 c4 0c             	add    esp,0xc
c0013dce:	c3                   	ret    
c0013dcf:	90                   	nop

c0013dd0 <Clock::~Clock()>:
c0013dd0:	83 ec 0c             	sub    esp,0xc
c0013dd3:	ba 58 b5 02 c0       	mov    edx,0xc002b558
c0013dd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ddc:	89 10                	mov    DWORD PTR [eax],edx
c0013dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013de2:	83 ec 0c             	sub    esp,0xc
c0013de5:	50                   	push   eax
c0013de6:	e8 e9 03 00 00       	call   c00141d4 <Device::~Device()>
c0013deb:	83 c4 10             	add    esp,0x10
c0013dee:	90                   	nop
c0013def:	83 c4 0c             	add    esp,0xc
c0013df2:	c3                   	ret    
c0013df3:	90                   	nop

c0013df4 <Clock::~Clock()>:
c0013df4:	83 ec 0c             	sub    esp,0xc
c0013df7:	83 ec 0c             	sub    esp,0xc
c0013dfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dfe:	e8 cd ff ff ff       	call   c0013dd0 <Clock::~Clock()>
c0013e03:	83 c4 10             	add    esp,0x10
c0013e06:	83 ec 08             	sub    esp,0x8
c0013e09:	68 58 01 00 00       	push   0x158
c0013e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e12:	e8 d6 ef ff ff       	call   c0012ded <operator delete(void*, unsigned long)>
c0013e17:	83 c4 10             	add    esp,0x10
c0013e1a:	83 c4 0c             	add    esp,0xc
c0013e1d:	c3                   	ret    

c0013e1e <Clock::timeInSecondsLocal()>:
c0013e1e:	53                   	push   ebx
c0013e1f:	83 ec 14             	sub    esp,0x14
c0013e22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e26:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e28:	50                   	push   eax
c0013e29:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013e2c:	0f b6 0d 7c f0 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f07c
c0013e33:	03 0d 80 f0 02 c0    	add    ecx,DWORD PTR ds:0xc002f080
c0013e39:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e3f:	89 cb                	mov    ebx,ecx
c0013e41:	c1 fb 1f             	sar    ebx,0x1f
c0013e44:	01 c8                	add    eax,ecx
c0013e46:	11 da                	adc    edx,ebx
c0013e48:	83 c4 10             	add    esp,0x10
c0013e4b:	31 c9                	xor    ecx,ecx
c0013e4d:	80 3d 7d f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f07d,0x0
c0013e54:	74 05                	je     c0013e5b <Clock::timeInSecondsLocal()+0x3d>
c0013e56:	b9 08 07 00 00       	mov    ecx,0x708
c0013e5b:	31 db                	xor    ebx,ebx
c0013e5d:	01 c8                	add    eax,ecx
c0013e5f:	11 da                	adc    edx,ebx
c0013e61:	83 c4 08             	add    esp,0x8
c0013e64:	5b                   	pop    ebx
c0013e65:	c3                   	ret    

c0013e66 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013e66:	57                   	push   edi
c0013e67:	56                   	push   esi
c0013e68:	53                   	push   ebx
c0013e69:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013e6d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e71:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013e73:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e77:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013e7a:	0f b6 05 7c f0 02 c0 	movzx  eax,BYTE PTR ds:0xc002f07c
c0013e81:	03 05 80 f0 02 c0    	add    eax,DWORD PTR ds:0xc002f080
c0013e87:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013e8d:	99                   	cdq    
c0013e8e:	29 c6                	sub    esi,eax
c0013e90:	19 d7                	sbb    edi,edx
c0013e92:	89 f0                	mov    eax,esi
c0013e94:	89 fa                	mov    edx,edi
c0013e96:	31 f6                	xor    esi,esi
c0013e98:	80 3d 7d f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f07d,0x0
c0013e9f:	74 05                	je     c0013ea6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013ea1:	be 08 07 00 00       	mov    esi,0x708
c0013ea6:	31 ff                	xor    edi,edi
c0013ea8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013eac:	29 f0                	sub    eax,esi
c0013eae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013eb2:	19 fa                	sbb    edx,edi
c0013eb4:	89 d8                	mov    eax,ebx
c0013eb6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013eba:	5b                   	pop    ebx
c0013ebb:	5e                   	pop    esi
c0013ebc:	5f                   	pop    edi
c0013ebd:	ff e0                	jmp    eax

c0013ebf <datetimeToSeconds(datetime_t)>:
c0013ebf:	55                   	push   ebp
c0013ec0:	57                   	push   edi
c0013ec1:	56                   	push   esi
c0013ec2:	53                   	push   ebx
c0013ec3:	83 ec 14             	sub    esp,0x14
c0013ec6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013eca:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013ece:	89 d3                	mov    ebx,edx
c0013ed0:	0f b6 c6             	movzx  eax,dh
c0013ed3:	c1 eb 10             	shr    ebx,0x10
c0013ed6:	48                   	dec    eax
c0013ed7:	66 81 eb 6c 07       	sub    bx,0x76c
c0013edc:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013ee0:	0f b6 f5             	movzx  esi,ch
c0013ee3:	89 cf                	mov    edi,ecx
c0013ee5:	6b f6 3c             	imul   esi,esi,0x3c
c0013ee8:	c1 ef 10             	shr    edi,0x10
c0013eeb:	0f b6 c9             	movzx  ecx,cl
c0013eee:	89 f8                	mov    eax,edi
c0013ef0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013ef6:	0f b6 f8             	movzx  edi,al
c0013ef9:	0f b6 d2             	movzx  edx,dl
c0013efc:	01 fe                	add    esi,edi
c0013efe:	01 f1                	add    ecx,esi
c0013f00:	0f b7 f3             	movzx  esi,bx
c0013f03:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013f07:	c1 f9 1f             	sar    ecx,0x1f
c0013f0a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013f0f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f13:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013f18:	8b 0c 8d a0 b5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4a60]
c0013f1f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013f23:	76 29                	jbe    c0013f4e <datetimeToSeconds(datetime_t)+0x8f>
c0013f25:	f6 c3 03             	test   bl,0x3
c0013f28:	75 24                	jne    c0013f4e <datetimeToSeconds(datetime_t)+0x8f>
c0013f2a:	31 d2                	xor    edx,edx
c0013f2c:	bf 64 00 00 00       	mov    edi,0x64
c0013f31:	89 d8                	mov    eax,ebx
c0013f33:	66 f7 f7             	div    di
c0013f36:	66 85 d2             	test   dx,dx
c0013f39:	75 12                	jne    c0013f4d <datetimeToSeconds(datetime_t)+0x8e>
c0013f3b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013f41:	bf 90 01 00 00       	mov    edi,0x190
c0013f46:	99                   	cdq    
c0013f47:	f7 ff                	idiv   edi
c0013f49:	85 d2                	test   edx,edx
c0013f4b:	75 01                	jne    c0013f4e <datetimeToSeconds(datetime_t)+0x8f>
c0013f4d:	41                   	inc    ecx
c0013f4e:	66 83 fb 46          	cmp    bx,0x46
c0013f52:	76 45                	jbe    c0013f99 <datetimeToSeconds(datetime_t)+0xda>
c0013f54:	bb 46 00 00 00       	mov    ebx,0x46
c0013f59:	bf 64 00 00 00       	mov    edi,0x64
c0013f5e:	bd 90 01 00 00       	mov    ebp,0x190
c0013f63:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f68:	f6 c3 03             	test   bl,0x3
c0013f6b:	75 23                	jne    c0013f90 <datetimeToSeconds(datetime_t)+0xd1>
c0013f6d:	89 d8                	mov    eax,ebx
c0013f6f:	99                   	cdq    
c0013f70:	f7 ff                	idiv   edi
c0013f72:	b8 6e 01 00 00       	mov    eax,0x16e
c0013f77:	85 d2                	test   edx,edx
c0013f79:	75 15                	jne    c0013f90 <datetimeToSeconds(datetime_t)+0xd1>
c0013f7b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013f81:	99                   	cdq    
c0013f82:	f7 fd                	idiv   ebp
c0013f84:	83 fa 01             	cmp    edx,0x1
c0013f87:	19 c0                	sbb    eax,eax
c0013f89:	f7 d0                	not    eax
c0013f8b:	05 6e 01 00 00       	add    eax,0x16e
c0013f90:	01 c1                	add    ecx,eax
c0013f92:	43                   	inc    ebx
c0013f93:	39 f3                	cmp    ebx,esi
c0013f95:	7c cc                	jl     c0013f63 <datetimeToSeconds(datetime_t)+0xa4>
c0013f97:	eb 35                	jmp    c0013fce <datetimeToSeconds(datetime_t)+0x10f>
c0013f99:	74 33                	je     c0013fce <datetimeToSeconds(datetime_t)+0x10f>
c0013f9b:	b8 45 00 00 00       	mov    eax,0x45
c0013fa0:	89 c2                	mov    edx,eax
c0013fa2:	83 e2 03             	and    edx,0x3
c0013fa5:	39 f0                	cmp    eax,esi
c0013fa7:	7e 0f                	jle    c0013fb8 <datetimeToSeconds(datetime_t)+0xf9>
c0013fa9:	83 fa 01             	cmp    edx,0x1
c0013fac:	19 d2                	sbb    edx,edx
c0013fae:	48                   	dec    eax
c0013faf:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013fb6:	eb e8                	jmp    c0013fa0 <datetimeToSeconds(datetime_t)+0xe1>
c0013fb8:	b8 6d 01 00 00       	mov    eax,0x16d
c0013fbd:	85 d2                	test   edx,edx
c0013fbf:	75 0b                	jne    c0013fcc <datetimeToSeconds(datetime_t)+0x10d>
c0013fc1:	66 83 fb 01          	cmp    bx,0x1
c0013fc5:	19 c0                	sbb    eax,eax
c0013fc7:	05 6e 01 00 00       	add    eax,0x16e
c0013fcc:	29 c1                	sub    ecx,eax
c0013fce:	b8 80 51 01 00       	mov    eax,0x15180
c0013fd3:	f7 e9                	imul   ecx
c0013fd5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013fd9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013fdd:	83 c4 14             	add    esp,0x14
c0013fe0:	5b                   	pop    ebx
c0013fe1:	5e                   	pop    esi
c0013fe2:	5f                   	pop    edi
c0013fe3:	5d                   	pop    ebp
c0013fe4:	c3                   	ret    
c0013fe5:	90                   	nop

c0013fe6 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013fe6:	57                   	push   edi
c0013fe7:	56                   	push   esi
c0013fe8:	53                   	push   ebx
c0013fe9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013fed:	8b 06                	mov    eax,DWORD PTR [esi]
c0013fef:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013ff2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ff6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ffa:	e8 c0 fe ff ff       	call   c0013ebf <datetimeToSeconds(datetime_t)>
c0013fff:	59                   	pop    ecx
c0014000:	0f b6 0d 7c f0 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f07c
c0014007:	5b                   	pop    ebx
c0014008:	03 0d 80 f0 02 c0    	add    ecx,DWORD PTR ds:0xc002f080
c001400e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0014014:	89 cb                	mov    ebx,ecx
c0014016:	c1 fb 1f             	sar    ebx,0x1f
c0014019:	29 c8                	sub    eax,ecx
c001401b:	19 da                	sbb    edx,ebx
c001401d:	31 c9                	xor    ecx,ecx
c001401f:	80 3d 7d f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f07d,0x0
c0014026:	74 05                	je     c001402d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0014028:	b9 08 07 00 00       	mov    ecx,0x708
c001402d:	31 db                	xor    ebx,ebx
c001402f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0014033:	29 c8                	sub    eax,ecx
c0014035:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014039:	19 da                	sbb    edx,ebx
c001403b:	89 f8                	mov    eax,edi
c001403d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014041:	5b                   	pop    ebx
c0014042:	5e                   	pop    esi
c0014043:	5f                   	pop    edi
c0014044:	ff e0                	jmp    eax

c0014046 <secondsToDatetime(unsigned long long)>:
c0014046:	55                   	push   ebp
c0014047:	57                   	push   edi
c0014048:	56                   	push   esi
c0014049:	53                   	push   ebx
c001404a:	83 ec 1c             	sub    esp,0x1c
c001404d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0014051:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0014055:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0014059:	6a 00                	push   0x0
c001405b:	68 80 51 01 00       	push   0x15180
c0014060:	55                   	push   ebp
c0014061:	57                   	push   edi
c0014062:	e8 fd 31 01 00       	call   c0027264 <__udivdi3>
c0014067:	83 c4 10             	add    esp,0x10
c001406a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0014070:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014074:	6a 00                	push   0x0
c0014076:	68 80 51 01 00       	push   0x15180
c001407b:	55                   	push   ebp
c001407c:	57                   	push   edi
c001407d:	bf 10 0e 00 00       	mov    edi,0xe10
c0014082:	e8 dd 32 01 00       	call   c0027364 <__umoddi3>
c0014087:	83 c4 10             	add    esp,0x10
c001408a:	99                   	cdq    
c001408b:	f7 ff                	idiv   edi
c001408d:	bf 3c 00 00 00       	mov    edi,0x3c
c0014092:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0014095:	89 d0                	mov    eax,edx
c0014097:	99                   	cdq    
c0014098:	f7 ff                	idiv   edi
c001409a:	85 db                	test   ebx,ebx
c001409c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001409f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00140a2:	79 11                	jns    c00140b5 <secondsToDatetime(unsigned long long)+0x6f>
c00140a4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00140a8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00140ae:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00140b3:	eb 07                	jmp    c00140bc <secondsToDatetime(unsigned long long)+0x76>
c00140b5:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00140ba:	89 d8                	mov    eax,ebx
c00140bc:	bf b4 05 00 00       	mov    edi,0x5b4
c00140c1:	99                   	cdq    
c00140c2:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00140c7:	f7 f9                	idiv   ecx
c00140c9:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00140ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00140d2:	31 d2                	xor    edx,edx
c00140d4:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00140dc:	01 c3                	add    ebx,eax
c00140de:	89 d8                	mov    eax,ebx
c00140e0:	f7 f1                	div    ecx
c00140e2:	31 d2                	xor    edx,edx
c00140e4:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00140e7:	89 d8                	mov    eax,ebx
c00140e9:	f7 f7                	div    edi
c00140eb:	31 d2                	xor    edx,edx
c00140ed:	29 c1                	sub    ecx,eax
c00140ef:	89 d8                	mov    eax,ebx
c00140f1:	f7 f5                	div    ebp
c00140f3:	bd 6d 01 00 00       	mov    ebp,0x16d
c00140f8:	29 c1                	sub    ecx,eax
c00140fa:	31 d2                	xor    edx,edx
c00140fc:	89 c8                	mov    eax,ecx
c00140fe:	f7 f5                	div    ebp
c0014100:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0014105:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014109:	31 d2                	xor    edx,edx
c001410b:	89 c8                	mov    eax,ecx
c001410d:	f7 f5                	div    ebp
c001410f:	31 d2                	xor    edx,edx
c0014111:	01 c3                	add    ebx,eax
c0014113:	89 c8                	mov    eax,ecx
c0014115:	f7 f7                	div    edi
c0014117:	bf 99 00 00 00       	mov    edi,0x99
c001411c:	29 c3                	sub    ebx,eax
c001411e:	31 d2                	xor    edx,edx
c0014120:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0014128:	29 c3                	sub    ebx,eax
c001412a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001412d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0014130:	bb 05 00 00 00       	mov    ebx,0x5
c0014135:	83 c1 02             	add    ecx,0x2
c0014138:	89 c8                	mov    eax,ecx
c001413a:	f7 f7                	div    edi
c001413c:	31 d2                	xor    edx,edx
c001413e:	89 c7                	mov    edi,eax
c0014140:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0014146:	83 c0 02             	add    eax,0x2
c0014149:	f7 f3                	div    ebx
c001414b:	89 eb                	mov    ebx,ebp
c001414d:	29 c3                	sub    ebx,eax
c001414f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0014155:	88 1e                	mov    BYTE PTR [esi],bl
c0014157:	19 c0                	sbb    eax,eax
c0014159:	31 d2                	xor    edx,edx
c001415b:	83 e0 0c             	and    eax,0xc
c001415e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0014162:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001416a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001416e:	83 f9 01             	cmp    ecx,0x1
c0014171:	0f 96 c2             	setbe  dl
c0014174:	41                   	inc    ecx
c0014175:	01 d0                	add    eax,edx
c0014177:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001417a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001417e:	83 c4 1c             	add    esp,0x1c
c0014181:	89 f0                	mov    eax,esi
c0014183:	5b                   	pop    ebx
c0014184:	5e                   	pop    esi
c0014185:	5f                   	pop    edi
c0014186:	5d                   	pop    ebp
c0014187:	c2 04 00             	ret    0x4

c001418a <Clock::timeInDatetimeLocal()>:
c001418a:	53                   	push   ebx
c001418b:	83 ec 14             	sub    esp,0x14
c001418e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014192:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014196:	e8 83 fc ff ff       	call   c0013e1e <Clock::timeInSecondsLocal()>
c001419b:	83 c4 0c             	add    esp,0xc
c001419e:	52                   	push   edx
c001419f:	50                   	push   eax
c00141a0:	53                   	push   ebx
c00141a1:	e8 a0 fe ff ff       	call   c0014046 <secondsToDatetime(unsigned long long)>
c00141a6:	89 d8                	mov    eax,ebx
c00141a8:	83 c4 14             	add    esp,0x14
c00141ab:	5b                   	pop    ebx
c00141ac:	c2 04 00             	ret    0x4
c00141af:	90                   	nop

c00141b0 <Device::hibernate()>:
c00141b0:	c3                   	ret    
c00141b1:	90                   	nop

c00141b2 <Device::wake()>:
c00141b2:	c3                   	ret    
c00141b3:	90                   	nop

c00141b4 <Device::detect()>:
c00141b4:	c3                   	ret    
c00141b5:	90                   	nop

c00141b6 <Device::disableLegacy()>:
c00141b6:	c3                   	ret    
c00141b7:	90                   	nop

c00141b8 <Device::powerSaving(PowerSavingLevel)>:
c00141b8:	c3                   	ret    
c00141b9:	90                   	nop

c00141ba <DriverlessDevice::close(int, int, void*)>:
c00141ba:	31 c0                	xor    eax,eax
c00141bc:	c3                   	ret    
c00141bd:	90                   	nop

c00141be <DriverlessDevice::detect()>:
c00141be:	c3                   	ret    
c00141bf:	90                   	nop

c00141c0 <DriverlessDevice::open(int, int, void*)>:
c00141c0:	83 ec 18             	sub    esp,0x18
c00141c3:	68 d0 b5 02 c0       	push   0xc002b5d0
c00141c8:	e8 c3 66 00 00       	call   c001a890 <Krnl::panic(char const*)>
c00141cd:	83 c8 ff             	or     eax,0xffffffff
c00141d0:	83 c4 1c             	add    esp,0x1c
c00141d3:	c3                   	ret    

c00141d4 <Device::~Device()>:
c00141d4:	ba f8 b5 02 c0       	mov    edx,0xc002b5f8
c00141d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141dd:	89 10                	mov    DWORD PTR [eax],edx
c00141df:	90                   	nop
c00141e0:	c3                   	ret    
c00141e1:	90                   	nop

c00141e2 <Device::~Device()>:
c00141e2:	83 ec 0c             	sub    esp,0xc
c00141e5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00141e9:	e8 e6 ff ff ff       	call   c00141d4 <Device::~Device()>
c00141ee:	83 c4 04             	add    esp,0x4
c00141f1:	83 ec 08             	sub    esp,0x8
c00141f4:	68 58 01 00 00       	push   0x158
c00141f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141fd:	e8 eb eb ff ff       	call   c0012ded <operator delete(void*, unsigned long)>
c0014202:	83 c4 10             	add    esp,0x10
c0014205:	83 c4 0c             	add    esp,0xc
c0014208:	c3                   	ret    
c0014209:	90                   	nop

c001420a <Device::findAndLoadDriver()>:
c001420a:	c3                   	ret    
c001420b:	90                   	nop

c001420c <Device::preOpenPCI(PCIDeviceInfo)>:
c001420c:	57                   	push   edi
c001420d:	b9 09 00 00 00       	mov    ecx,0x9
c0014212:	56                   	push   esi
c0014213:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014217:	8d 74 24 10          	lea    esi,[esp+0x10]
c001421b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0014225:	81 c7 18 01 00 00    	add    edi,0x118
c001422b:	fc                   	cld    
c001422c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001422e:	5e                   	pop    esi
c001422f:	5f                   	pop    edi
c0014230:	c3                   	ret    
c0014231:	90                   	nop

c0014232 <Device::preOpenACPI(void*, char*, char*)>:
c0014232:	57                   	push   edi
c0014233:	b9 1e 00 00 00       	mov    ecx,0x1e
c0014238:	56                   	push   esi
c0014239:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001423d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014241:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c001424b:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0014251:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0014257:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001425b:	fc                   	cld    
c001425c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001425e:	b9 0e 00 00 00       	mov    ecx,0xe
c0014263:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0014269:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001426d:	fc                   	cld    
c001426e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014270:	5e                   	pop    esi
c0014271:	5f                   	pop    edi
c0014272:	c3                   	ret    
c0014273:	90                   	nop

c0014274 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014278:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001427d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014284:	75 0b                	jne    c0014291 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0014286:	8b 00                	mov    eax,DWORD PTR [eax]
c0014288:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001428c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001428f:	eb 1e                	jmp    c00142af <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0014291:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0014296:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001429c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00142a2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142a4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142ac:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00142af:	ff e0                	jmp    eax
c00142b1:	90                   	nop

c00142b2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00142b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142b6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00142bb:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00142c2:	75 0b                	jne    c00142cf <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00142c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00142c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142ca:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00142cd:	eb 1e                	jmp    c00142ed <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00142cf:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c00142d4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142da:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00142e0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142e2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142ea:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c00142ed:	ff e0                	jmp    eax
c00142ef:	90                   	nop

c00142f0 <Device::addChild(Device*)>:
c00142f0:	53                   	push   ebx
c00142f1:	83 ec 08             	sub    esp,0x8
c00142f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00142f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142fc:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014302:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014308:	8b 13                	mov    edx,DWORD PTR [ebx]
c001430a:	85 d2                	test   edx,edx
c001430c:	74 04                	je     c0014312 <Device::addChild(Device*)+0x22>
c001430e:	89 d3                	mov    ebx,edx
c0014310:	eb f6                	jmp    c0014308 <Device::addChild(Device*)+0x18>
c0014312:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014315:	83 ec 0c             	sub    esp,0xc
c0014318:	6a 08                	push   0x8
c001431a:	e8 0f b6 ff ff       	call   c000f92e <malloc>
c001431f:	89 03                	mov    DWORD PTR [ebx],eax
c0014321:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014327:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001432e:	83 c4 18             	add    esp,0x18
c0014331:	5b                   	pop    ebx
c0014332:	c3                   	ret    
c0014333:	90                   	nop

c0014334 <Device::removeAllChildren()>:
c0014334:	56                   	push   esi
c0014335:	53                   	push   ebx
c0014336:	52                   	push   edx
c0014337:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001433b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0014341:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014344:	74 17                	je     c001435d <Device::removeAllChildren()+0x29>
c0014346:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014349:	85 c0                	test   eax,eax
c001434b:	74 0c                	je     c0014359 <Device::removeAllChildren()+0x25>
c001434d:	83 ec 0c             	sub    esp,0xc
c0014350:	8b 10                	mov    edx,DWORD PTR [eax]
c0014352:	50                   	push   eax
c0014353:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0014356:	83 c4 10             	add    esp,0x10
c0014359:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001435b:	eb e4                	jmp    c0014341 <Device::removeAllChildren()+0xd>
c001435d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014363:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014369:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001436f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014376:	58                   	pop    eax
c0014377:	5b                   	pop    ebx
c0014378:	5e                   	pop    esi
c0014379:	c3                   	ret    

c001437a <Device::hibernateAll()>:
c001437a:	53                   	push   ebx
c001437b:	83 ec 14             	sub    esp,0x14
c001437e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014382:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014384:	53                   	push   ebx
c0014385:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014388:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001438e:	83 c4 10             	add    esp,0x10
c0014391:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014394:	74 0f                	je     c00143a5 <Device::hibernateAll()+0x2b>
c0014396:	83 ec 0c             	sub    esp,0xc
c0014399:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001439c:	e8 d9 ff ff ff       	call   c001437a <Device::hibernateAll()>
c00143a1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143a3:	eb e9                	jmp    c001438e <Device::hibernateAll()+0x14>
c00143a5:	83 c4 08             	add    esp,0x8
c00143a8:	5b                   	pop    ebx
c00143a9:	c3                   	ret    

c00143aa <Device::wakeAll()>:
c00143aa:	53                   	push   ebx
c00143ab:	83 ec 14             	sub    esp,0x14
c00143ae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143b4:	53                   	push   ebx
c00143b5:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00143b8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143be:	83 c4 10             	add    esp,0x10
c00143c1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143c4:	74 0f                	je     c00143d5 <Device::wakeAll()+0x2b>
c00143c6:	83 ec 0c             	sub    esp,0xc
c00143c9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143cc:	e8 d9 ff ff ff       	call   c00143aa <Device::wakeAll()>
c00143d1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143d3:	eb e9                	jmp    c00143be <Device::wakeAll()+0x14>
c00143d5:	83 c4 08             	add    esp,0x8
c00143d8:	5b                   	pop    ebx
c00143d9:	c3                   	ret    

c00143da <Device::detectAll()>:
c00143da:	53                   	push   ebx
c00143db:	83 ec 14             	sub    esp,0x14
c00143de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143e4:	53                   	push   ebx
c00143e5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00143e8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143ee:	83 c4 10             	add    esp,0x10
c00143f1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143f4:	74 0f                	je     c0014405 <Device::detectAll()+0x2b>
c00143f6:	83 ec 0c             	sub    esp,0xc
c00143f9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143fc:	e8 d9 ff ff ff       	call   c00143da <Device::detectAll()>
c0014401:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014403:	eb e9                	jmp    c00143ee <Device::detectAll()+0x14>
c0014405:	83 c4 08             	add    esp,0x8
c0014408:	5b                   	pop    ebx
c0014409:	c3                   	ret    

c001440a <Device::disableLegacyAll()>:
c001440a:	53                   	push   ebx
c001440b:	83 ec 14             	sub    esp,0x14
c001440e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014412:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014414:	53                   	push   ebx
c0014415:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014418:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001441e:	83 c4 10             	add    esp,0x10
c0014421:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014424:	74 0f                	je     c0014435 <Device::disableLegacyAll()+0x2b>
c0014426:	83 ec 0c             	sub    esp,0xc
c0014429:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001442c:	e8 d9 ff ff ff       	call   c001440a <Device::disableLegacyAll()>
c0014431:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014433:	eb e9                	jmp    c001441e <Device::disableLegacyAll()+0x14>
c0014435:	83 c4 08             	add    esp,0x8
c0014438:	5b                   	pop    ebx
c0014439:	c3                   	ret    

c001443a <Device::loadDriversForAll()>:
c001443a:	53                   	push   ebx
c001443b:	83 ec 08             	sub    esp,0x8
c001443e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014442:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014448:	8b 18                	mov    ebx,DWORD PTR [eax]
c001444a:	85 db                	test   ebx,ebx
c001444c:	74 12                	je     c0014460 <Device::loadDriversForAll()+0x26>
c001444e:	83 ec 0c             	sub    esp,0xc
c0014451:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014454:	e8 e1 ff ff ff       	call   c001443a <Device::loadDriversForAll()>
c0014459:	83 c4 10             	add    esp,0x10
c001445c:	89 d8                	mov    eax,ebx
c001445e:	eb e8                	jmp    c0014448 <Device::loadDriversForAll()+0xe>
c0014460:	83 c4 08             	add    esp,0x8
c0014463:	5b                   	pop    ebx
c0014464:	c3                   	ret    
c0014465:	90                   	nop

c0014466 <Device::closeAll()>:
c0014466:	53                   	push   ebx
c0014467:	83 ec 08             	sub    esp,0x8
c001446a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001446e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014470:	6a 00                	push   0x0
c0014472:	6a 00                	push   0x0
c0014474:	6a 00                	push   0x0
c0014476:	53                   	push   ebx
c0014477:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001447a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014480:	83 c4 10             	add    esp,0x10
c0014483:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014486:	74 0f                	je     c0014497 <Device::closeAll()+0x31>
c0014488:	83 ec 0c             	sub    esp,0xc
c001448b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001448e:	e8 d3 ff ff ff       	call   c0014466 <Device::closeAll()>
c0014493:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014495:	eb e9                	jmp    c0014480 <Device::closeAll()+0x1a>
c0014497:	83 c4 08             	add    esp,0x8
c001449a:	5b                   	pop    ebx
c001449b:	c3                   	ret    

c001449c <Device::powerSavingAll(PowerSavingLevel)>:
c001449c:	56                   	push   esi
c001449d:	53                   	push   ebx
c001449e:	83 ec 0c             	sub    esp,0xc
c00144a1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00144a5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00144a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144ab:	56                   	push   esi
c00144ac:	53                   	push   ebx
c00144ad:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00144b0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144b6:	83 c4 10             	add    esp,0x10
c00144b9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144bc:	74 0f                	je     c00144cd <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00144be:	52                   	push   edx
c00144bf:	52                   	push   edx
c00144c0:	56                   	push   esi
c00144c1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144c4:	e8 d3 ff ff ff       	call   c001449c <Device::powerSavingAll(PowerSavingLevel)>
c00144c9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144cb:	eb e9                	jmp    c00144b6 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00144cd:	58                   	pop    eax
c00144ce:	5b                   	pop    ebx
c00144cf:	5e                   	pop    esi
c00144d0:	c3                   	ret    
c00144d1:	90                   	nop

c00144d2 <Device::setName(char const*)>:
c00144d2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00144da:	e9 49 c3 fe ff       	jmp    c0000828 <strcpy>
c00144df:	90                   	nop

c00144e0 <Device::Device(char const*)>:
c00144e0:	83 ec 1c             	sub    esp,0x1c
c00144e3:	ba f8 b5 02 c0       	mov    edx,0xc002b5f8
c00144e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ec:	89 10                	mov    DWORD PTR [eax],edx
c00144ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144f2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00144fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014500:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001450a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001450e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014518:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001451c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014526:	83 ec 08             	sub    esp,0x8
c0014529:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001452d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014531:	e8 9c ff ff ff       	call   c00144d2 <Device::setName(char const*)>
c0014536:	83 c4 10             	add    esp,0x10
c0014539:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014541:	83 ec 0c             	sub    esp,0xc
c0014544:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014548:	e8 e1 b3 ff ff       	call   c000f92e <malloc>
c001454d:	83 c4 10             	add    esp,0x10
c0014550:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014556:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001455d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014561:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001456b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014571:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014577:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001457b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014581:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014588:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001458c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0014593:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014597:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001459e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145a2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00145ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145b0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00145ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145be:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00145c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145cc:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c00145d6:	90                   	nop
c00145d7:	83 c4 1c             	add    esp,0x1c
c00145da:	c3                   	ret    
c00145db:	90                   	nop

c00145dc <Device::getName()>:
c00145dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145e0:	05 d0 00 00 00       	add    eax,0xd0
c00145e5:	c3                   	ret    

c00145e6 <DriverlessDevice::DriverlessDevice(char const*)>:
c00145e6:	83 ec 0c             	sub    esp,0xc
c00145e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145ed:	83 ec 08             	sub    esp,0x8
c00145f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145f4:	50                   	push   eax
c00145f5:	e8 e6 fe ff ff       	call   c00144e0 <Device::Device(char const*)>
c00145fa:	83 c4 10             	add    esp,0x10
c00145fd:	ba 24 b6 02 c0       	mov    edx,0xc002b624
c0014602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014606:	89 10                	mov    DWORD PTR [eax],edx
c0014608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001460c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014616:	90                   	nop
c0014617:	83 c4 0c             	add    esp,0xc
c001461a:	c3                   	ret    
c001461b:	90                   	nop

c001461c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001461c:	57                   	push   edi
c001461d:	56                   	push   esi
c001461e:	53                   	push   ebx
c001461f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014623:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014627:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001462b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014631:	75 0c                	jne    c001463f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014633:	52                   	push   edx
c0014634:	52                   	push   edx
c0014635:	53                   	push   ebx
c0014636:	56                   	push   esi
c0014637:	e8 7a 4b 01 00       	call   c00291b6 <LinkedList<Device>::addElement(Device*)>
c001463c:	83 c4 10             	add    esp,0x10
c001463f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014645:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014648:	74 12                	je     c001465c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001464a:	50                   	push   eax
c001464b:	57                   	push   edi
c001464c:	56                   	push   esi
c001464d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014650:	e8 c7 ff ff ff       	call   c001461c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014655:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014657:	83 c4 10             	add    esp,0x10
c001465a:	eb e9                	jmp    c0014645 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001465c:	5b                   	pop    ebx
c001465d:	5e                   	pop    esi
c001465e:	5f                   	pop    edi
c001465f:	c3                   	ret    

c0014660 <getDevicesOfType(DeviceType)>:
c0014660:	53                   	push   ebx
c0014661:	83 ec 14             	sub    esp,0x14
c0014664:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014668:	53                   	push   ebx
c0014669:	e8 24 4c 01 00       	call   c0029292 <LinkedList<Device>::LinkedList()>
c001466e:	83 c4 0c             	add    esp,0xc
c0014671:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014675:	53                   	push   ebx
c0014676:	ff 35 e8 ee 02 c0    	push   DWORD PTR ds:0xc002eee8
c001467c:	e8 9b ff ff ff       	call   c001461c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014681:	89 d8                	mov    eax,ebx
c0014683:	83 c4 18             	add    esp,0x18
c0014686:	5b                   	pop    ebx
c0014687:	c2 04 00             	ret    0x4

c001468a <HardDiskController::HardDiskController(char const*)>:
c001468a:	83 ec 0c             	sub    esp,0xc
c001468d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014691:	83 ec 08             	sub    esp,0x8
c0014694:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014698:	50                   	push   eax
c0014699:	e8 42 fe ff ff       	call   c00144e0 <Device::Device(char const*)>
c001469e:	83 c4 10             	add    esp,0x10
c00146a1:	ba 50 b6 02 c0       	mov    edx,0xc002b650
c00146a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146aa:	89 10                	mov    DWORD PTR [eax],edx
c00146ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146b0:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00146ba:	90                   	nop
c00146bb:	83 c4 0c             	add    esp,0xc
c00146be:	c3                   	ret    
c00146bf:	90                   	nop

c00146c0 <HardDiskController::~HardDiskController()>:
c00146c0:	83 ec 0c             	sub    esp,0xc
c00146c3:	ba 50 b6 02 c0       	mov    edx,0xc002b650
c00146c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146cc:	89 10                	mov    DWORD PTR [eax],edx
c00146ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146d2:	83 ec 0c             	sub    esp,0xc
c00146d5:	50                   	push   eax
c00146d6:	e8 f9 fa ff ff       	call   c00141d4 <Device::~Device()>
c00146db:	83 c4 10             	add    esp,0x10
c00146de:	90                   	nop
c00146df:	83 c4 0c             	add    esp,0xc
c00146e2:	c3                   	ret    
c00146e3:	90                   	nop

c00146e4 <HardDiskController::~HardDiskController()>:
c00146e4:	83 ec 0c             	sub    esp,0xc
c00146e7:	83 ec 0c             	sub    esp,0xc
c00146ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146ee:	e8 cd ff ff ff       	call   c00146c0 <HardDiskController::~HardDiskController()>
c00146f3:	83 c4 10             	add    esp,0x10
c00146f6:	83 ec 08             	sub    esp,0x8
c00146f9:	68 58 01 00 00       	push   0x158
c00146fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014702:	e8 e6 e6 ff ff       	call   c0012ded <operator delete(void*, unsigned long)>
c0014707:	83 c4 10             	add    esp,0x10
c001470a:	83 c4 0c             	add    esp,0xc
c001470d:	c3                   	ret    

c001470e <PhysicalDisk::eject()>:
c001470e:	83 ec 18             	sub    esp,0x18
c0014711:	68 74 b6 02 c0       	push   0xc002b674
c0014716:	e8 b2 e7 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001471b:	83 c8 ff             	or     eax,0xffffffff
c001471e:	83 c4 1c             	add    esp,0x1c
c0014721:	c3                   	ret    

c0014722 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014722:	83 ec 0c             	sub    esp,0xc
c0014725:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014729:	83 ec 08             	sub    esp,0x8
c001472c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014730:	50                   	push   eax
c0014731:	e8 aa fd ff ff       	call   c00144e0 <Device::Device(char const*)>
c0014736:	83 c4 10             	add    esp,0x10
c0014739:	ba a4 b6 02 c0       	mov    edx,0xc002b6a4
c001473e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014742:	89 10                	mov    DWORD PTR [eax],edx
c0014744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014748:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001474f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014753:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001475a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001475e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001476c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014770:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001477a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014784:	90                   	nop
c0014785:	83 c4 0c             	add    esp,0xc
c0014788:	c3                   	ret    
c0014789:	90                   	nop

c001478a <PhysicalDisk::startCache()>:
c001478a:	56                   	push   esi
c001478b:	53                   	push   ebx
c001478c:	83 ec 10             	sub    esp,0x10
c001478f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014793:	6a 44                	push   0x44
c0014795:	e8 94 b1 ff ff       	call   c000f92e <malloc>
c001479a:	89 c6                	mov    esi,eax
c001479c:	58                   	pop    eax
c001479d:	5a                   	pop    edx
c001479e:	53                   	push   ebx
c001479f:	56                   	push   esi
c00147a0:	e8 cf 28 00 00       	call   c0017074 <VCache::VCache(PhysicalDisk*)>
c00147a5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00147ab:	83 c4 14             	add    esp,0x14
c00147ae:	5b                   	pop    ebx
c00147af:	5e                   	pop    esi
c00147b0:	c3                   	ret    
c00147b1:	90                   	nop

c00147b2 <PhysicalDisk::~PhysicalDisk()>:
c00147b2:	83 ec 0c             	sub    esp,0xc
c00147b5:	ba a4 b6 02 c0       	mov    edx,0xc002b6a4
c00147ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147be:	89 10                	mov    DWORD PTR [eax],edx
c00147c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147c4:	83 ec 0c             	sub    esp,0xc
c00147c7:	50                   	push   eax
c00147c8:	e8 07 fa ff ff       	call   c00141d4 <Device::~Device()>
c00147cd:	83 c4 10             	add    esp,0x10
c00147d0:	90                   	nop
c00147d1:	83 c4 0c             	add    esp,0xc
c00147d4:	c3                   	ret    
c00147d5:	90                   	nop

c00147d6 <PhysicalDisk::~PhysicalDisk()>:
c00147d6:	83 ec 0c             	sub    esp,0xc
c00147d9:	83 ec 0c             	sub    esp,0xc
c00147dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147e0:	e8 cd ff ff ff       	call   c00147b2 <PhysicalDisk::~PhysicalDisk()>
c00147e5:	83 c4 10             	add    esp,0x10
c00147e8:	83 ec 08             	sub    esp,0x8
c00147eb:	68 6c 01 00 00       	push   0x16c
c00147f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147f4:	e8 f4 e5 ff ff       	call   c0012ded <operator delete(void*, unsigned long)>
c00147f9:	83 c4 10             	add    esp,0x10
c00147fc:	83 c4 0c             	add    esp,0xc
c00147ff:	c3                   	ret    

c0014800 <FPU::FPU(char const*)>:
c0014800:	83 ec 0c             	sub    esp,0xc
c0014803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014807:	83 ec 08             	sub    esp,0x8
c001480a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001480e:	50                   	push   eax
c001480f:	e8 cc fc ff ff       	call   c00144e0 <Device::Device(char const*)>
c0014814:	83 c4 10             	add    esp,0x10
c0014817:	ba e8 b6 02 c0       	mov    edx,0xc002b6e8
c001481c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014820:	89 10                	mov    DWORD PTR [eax],edx
c0014822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014826:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014830:	90                   	nop
c0014831:	83 c4 0c             	add    esp,0xc
c0014834:	c3                   	ret    
c0014835:	90                   	nop

c0014836 <FPU::~FPU()>:
c0014836:	83 ec 0c             	sub    esp,0xc
c0014839:	ba e8 b6 02 c0       	mov    edx,0xc002b6e8
c001483e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014842:	89 10                	mov    DWORD PTR [eax],edx
c0014844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014848:	83 ec 0c             	sub    esp,0xc
c001484b:	50                   	push   eax
c001484c:	e8 83 f9 ff ff       	call   c00141d4 <Device::~Device()>
c0014851:	83 c4 10             	add    esp,0x10
c0014854:	90                   	nop
c0014855:	83 c4 0c             	add    esp,0xc
c0014858:	c3                   	ret    
c0014859:	90                   	nop

c001485a <FPU::~FPU()>:
c001485a:	83 ec 0c             	sub    esp,0xc
c001485d:	83 ec 0c             	sub    esp,0xc
c0014860:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014864:	e8 cd ff ff ff       	call   c0014836 <FPU::~FPU()>
c0014869:	83 c4 10             	add    esp,0x10
c001486c:	83 ec 08             	sub    esp,0x8
c001486f:	68 58 01 00 00       	push   0x158
c0014874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014878:	e8 70 e5 ff ff       	call   c0012ded <operator delete(void*, unsigned long)>
c001487d:	83 c4 10             	add    esp,0x10
c0014880:	83 c4 0c             	add    esp,0xc
c0014883:	c3                   	ret    

c0014884 <setupFPU()>:
c0014884:	53                   	push   ebx
c0014885:	83 ec 08             	sub    esp,0x8
c0014888:	8b 15 e8 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002eee8
c001488e:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014895:	74 19                	je     c00148b0 <setupFPU()+0x2c>
c0014897:	83 ec 0c             	sub    esp,0xc
c001489a:	68 58 01 00 00       	push   0x158
c001489f:	e8 8a b0 ff ff       	call   c000f92e <malloc>
c00148a4:	89 c3                	mov    ebx,eax
c00148a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00148a9:	e8 34 15 01 00       	call   c0025de2 <AVX::AVX()>
c00148ae:	eb 5b                	jmp    c001490b <setupFPU()+0x87>
c00148b0:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00148b6:	84 c0                	test   al,al
c00148b8:	79 19                	jns    c00148d3 <setupFPU()+0x4f>
c00148ba:	83 ec 0c             	sub    esp,0xc
c00148bd:	68 58 01 00 00       	push   0x158
c00148c2:	e8 67 b0 ff ff       	call   c000f92e <malloc>
c00148c7:	89 c3                	mov    ebx,eax
c00148c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00148cc:	e8 37 16 01 00       	call   c0025f08 <SSE::SSE()>
c00148d1:	eb 38                	jmp    c001490b <setupFPU()+0x87>
c00148d3:	a8 20                	test   al,0x20
c00148d5:	74 19                	je     c00148f0 <setupFPU()+0x6c>
c00148d7:	83 ec 0c             	sub    esp,0xc
c00148da:	68 58 01 00 00       	push   0x158
c00148df:	e8 4a b0 ff ff       	call   c000f92e <malloc>
c00148e4:	89 c3                	mov    ebx,eax
c00148e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00148e9:	e8 84 15 01 00       	call   c0025e72 <MMX::MMX()>
c00148ee:	eb 1b                	jmp    c001490b <setupFPU()+0x87>
c00148f0:	a8 10                	test   al,0x10
c00148f2:	74 1c                	je     c0014910 <setupFPU()+0x8c>
c00148f4:	83 ec 0c             	sub    esp,0xc
c00148f7:	68 58 01 00 00       	push   0x158
c00148fc:	e8 2d b0 ff ff       	call   c000f92e <malloc>
c0014901:	89 c3                	mov    ebx,eax
c0014903:	89 04 24             	mov    DWORD PTR [esp],eax
c0014906:	e8 8b 16 01 00       	call   c0025f96 <x87::x87()>
c001490b:	83 c4 10             	add    esp,0x10
c001490e:	eb 24                	jmp    c0014934 <setupFPU()+0xb0>
c0014910:	83 e0 ef             	and    eax,0xffffffef
c0014913:	83 ec 0c             	sub    esp,0xc
c0014916:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001491c:	68 d4 b6 02 c0       	push   0xc002b6d4
c0014921:	e8 a7 e5 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0014926:	0f 20 c0             	mov    eax,cr0
c0014929:	83 c8 04             	or     eax,0x4
c001492c:	0f 22 c0             	mov    cr0,eax
c001492f:	31 db                	xor    ebx,ebx
c0014931:	83 c4 10             	add    esp,0x10
c0014934:	89 d8                	mov    eax,ebx
c0014936:	83 c4 08             	add    esp,0x8
c0014939:	5b                   	pop    ebx
c001493a:	c3                   	ret    
c001493b:	90                   	nop

c001493c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001493c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014940:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014944:	c1 e0 04             	shl    eax,0x4
c0014947:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001494b:	8d 50 10             	lea    edx,[eax+0x10]
c001494e:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014954:	74 08                	je     c001495e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014956:	83 c0 04             	add    eax,0x4
c0014959:	39 d0                	cmp    eax,edx
c001495b:	75 f1                	jne    c001494e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001495d:	c3                   	ret    
c001495e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014968:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014972:	eb e2                	jmp    c0014956 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014974 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014974:	57                   	push   edi
c0014975:	31 c0                	xor    eax,eax
c0014977:	56                   	push   esi
c0014978:	53                   	push   ebx
c0014979:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001497d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014981:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014985:	89 da                	mov    edx,ebx
c0014987:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001498b:	c1 e2 04             	shl    edx,0x4
c001498e:	01 ca                	add    edx,ecx
c0014990:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014998:	74 16                	je     c00149b0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c001499a:	40                   	inc    eax
c001499b:	83 f8 04             	cmp    eax,0x4
c001499e:	75 f0                	jne    c0014990 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00149a0:	c7 44 24 10 18 b7 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b718
c00149a8:	5b                   	pop    ebx
c00149a9:	5e                   	pop    esi
c00149aa:	5f                   	pop    edi
c00149ab:	e9 e0 5e 00 00       	jmp    c001a890 <Krnl::panic(char const*)>
c00149b0:	8d 04 98             	lea    eax,[eax+ebx*4]
c00149b3:	8d 04 81             	lea    eax,[ecx+eax*4]
c00149b6:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00149bc:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00149c2:	5b                   	pop    ebx
c00149c3:	5e                   	pop    esi
c00149c4:	5f                   	pop    edi
c00149c5:	c3                   	ret    

c00149c6 <doubleFault(regs*, void*)>:
c00149c6:	55                   	push   ebp
c00149c7:	89 e5                	mov    ebp,esp
c00149c9:	83 ec 08             	sub    esp,0x8
c00149cc:	83 ec 0c             	sub    esp,0xc
c00149cf:	68 53 b7 02 c0       	push   0xc002b753
c00149d4:	e8 b7 5e 00 00       	call   c001a890 <Krnl::panic(char const*)>
c00149d9:	83 c4 10             	add    esp,0x10
c00149dc:	90                   	nop
c00149dd:	c9                   	leave  
c00149de:	c3                   	ret    
c00149df:	90                   	nop

c00149e0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00149e0:	56                   	push   esi
c00149e1:	53                   	push   ebx
c00149e2:	50                   	push   eax
c00149e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00149e7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149eb:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00149f0:	75 35                	jne    c0014a27 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00149f2:	8d 43 20             	lea    eax,[ebx+0x20]
c00149f5:	31 d2                	xor    edx,edx
c00149f7:	89 c1                	mov    ecx,eax
c00149f9:	c1 e1 04             	shl    ecx,0x4
c00149fc:	01 f1                	add    ecx,esi
c00149fe:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014a06:	74 3e                	je     c0014a46 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014a08:	42                   	inc    edx
c0014a09:	83 fa 04             	cmp    edx,0x4
c0014a0c:	75 f0                	jne    c00149fe <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014a0e:	83 ec 0c             	sub    esp,0xc
c0014a11:	68 98 b7 02 c0       	push   0xc002b798
c0014a16:	e8 75 5e 00 00       	call   c001a890 <Krnl::panic(char const*)>
c0014a1b:	83 c4 10             	add    esp,0x10
c0014a1e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014a23:	5a                   	pop    edx
c0014a24:	5b                   	pop    ebx
c0014a25:	5e                   	pop    esi
c0014a26:	c3                   	ret    
c0014a27:	83 ec 0c             	sub    esp,0xc
c0014a2a:	56                   	push   esi
c0014a2b:	e8 ac fb ff ff       	call   c00145dc <Device::getName()>
c0014a30:	83 c4 10             	add    esp,0x10
c0014a33:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a36:	75 ba                	jne    c00149f2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a38:	83 fb 0f             	cmp    ebx,0xf
c0014a3b:	7f 29                	jg     c0014a66 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014a3d:	0f b6 9b 40 e1 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd1ec0]
c0014a44:	eb ac                	jmp    c00149f2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a46:	8d 04 82             	lea    eax,[edx+eax*4]
c0014a49:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014a4d:	8d 04 86             	lea    eax,[esi+eax*4]
c0014a50:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014a56:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a5a:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014a60:	89 d8                	mov    eax,ebx
c0014a62:	5a                   	pop    edx
c0014a63:	5b                   	pop    ebx
c0014a64:	5e                   	pop    esi
c0014a65:	c3                   	ret    
c0014a66:	83 ec 0c             	sub    esp,0xc
c0014a69:	68 60 b7 02 c0       	push   0xc002b760
c0014a6e:	e8 1d 5e 00 00       	call   c001a890 <Krnl::panic(char const*)>
c0014a73:	83 c4 10             	add    esp,0x10
c0014a76:	e9 77 ff ff ff       	jmp    c00149f2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a7b:	90                   	nop

c0014a7c <InterruptController::clearAllHandlers(int, bool)>:
c0014a7c:	56                   	push   esi
c0014a7d:	53                   	push   ebx
c0014a7e:	52                   	push   edx
c0014a7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014a83:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014a87:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014a8c:	75 61                	jne    c0014aef <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014a8e:	8d 46 20             	lea    eax,[esi+0x20]
c0014a91:	c1 e6 04             	shl    esi,0x4
c0014a94:	c1 e0 04             	shl    eax,0x4
c0014a97:	01 de                	add    esi,ebx
c0014a99:	01 d8                	add    eax,ebx
c0014a9b:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014aa5:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014aaf:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014ab9:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014ac3:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014acd:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014ad7:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014ae1:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014aeb:	58                   	pop    eax
c0014aec:	5b                   	pop    ebx
c0014aed:	5e                   	pop    esi
c0014aee:	c3                   	ret    
c0014aef:	83 ec 0c             	sub    esp,0xc
c0014af2:	53                   	push   ebx
c0014af3:	e8 e4 fa ff ff       	call   c00145dc <Device::getName()>
c0014af8:	83 c4 10             	add    esp,0x10
c0014afb:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014afe:	75 8e                	jne    c0014a8e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b00:	83 fe 0f             	cmp    esi,0xf
c0014b03:	7f 09                	jg     c0014b0e <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014b05:	0f b6 b6 40 e1 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd1ec0]
c0014b0c:	eb 80                	jmp    c0014a8e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b0e:	83 ec 0c             	sub    esp,0xc
c0014b11:	68 d4 b7 02 c0       	push   0xc002b7d4
c0014b16:	e8 75 5d 00 00       	call   c001a890 <Krnl::panic(char const*)>
c0014b1b:	83 c4 10             	add    esp,0x10
c0014b1e:	e9 6b ff ff ff       	jmp    c0014a8e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b23:	90                   	nop

c0014b24 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014b24:	56                   	push   esi
c0014b25:	53                   	push   ebx
c0014b26:	52                   	push   edx
c0014b27:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014b2b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014b2f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014b34:	75 3a                	jne    c0014b70 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014b36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b3a:	8d 50 20             	lea    edx,[eax+0x20]
c0014b3d:	c1 e2 04             	shl    edx,0x4
c0014b40:	8d 04 16             	lea    eax,[esi+edx*1]
c0014b43:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014b47:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014b4d:	74 0b                	je     c0014b5a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014b4f:	83 c0 04             	add    eax,0x4
c0014b52:	39 d0                	cmp    eax,edx
c0014b54:	75 f1                	jne    c0014b47 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014b56:	58                   	pop    eax
c0014b57:	5b                   	pop    ebx
c0014b58:	5e                   	pop    esi
c0014b59:	c3                   	ret    
c0014b5a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014b64:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014b6e:	eb df                	jmp    c0014b4f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014b70:	83 ec 0c             	sub    esp,0xc
c0014b73:	56                   	push   esi
c0014b74:	e8 63 fa ff ff       	call   c00145dc <Device::getName()>
c0014b79:	83 c4 10             	add    esp,0x10
c0014b7c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b7f:	75 b5                	jne    c0014b36 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b81:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014b86:	7f 11                	jg     c0014b99 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014b88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b8c:	0f b6 80 40 e1 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd1ec0]
c0014b93:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b97:	eb 9d                	jmp    c0014b36 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b99:	83 ec 0c             	sub    esp,0xc
c0014b9c:	68 d4 b7 02 c0       	push   0xc002b7d4
c0014ba1:	e8 ea 5c 00 00       	call   c001a890 <Krnl::panic(char const*)>
c0014ba6:	83 c4 10             	add    esp,0x10
c0014ba9:	eb 8b                	jmp    c0014b36 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014bab <nmiHandler(regs*, void*)>:
c0014bab:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0014bb0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014bb4:	e9 bf a4 ff ff       	jmp    c000f078 <Computer::handleNMI()>

c0014bb9 <int_handler>:
c0014bb9:	55                   	push   ebp
c0014bba:	57                   	push   edi
c0014bbb:	56                   	push   esi
c0014bbc:	53                   	push   ebx
c0014bbd:	83 ec 0c             	sub    esp,0xc
c0014bc0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014bc4:	80 3d 44 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031a44,0x0
c0014bcb:	74 0b                	je     c0014bd8 <int_handler+0x1f>
c0014bcd:	fa                   	cli    
c0014bce:	f4                   	hlt    
c0014bcf:	80 3d 44 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031a44,0x0
c0014bd6:	75 f5                	jne    c0014bcd <int_handler+0x14>
c0014bd8:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0014bdd:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014be0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014be6:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014bec:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014bef:	83 f8 17             	cmp    eax,0x17
c0014bf2:	77 13                	ja     c0014c07 <int_handler+0x4e>
c0014bf4:	83 ec 08             	sub    esp,0x8
c0014bf7:	8b 17                	mov    edx,DWORD PTR [edi]
c0014bf9:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014bfc:	0f b6 c0             	movzx  eax,al
c0014bff:	50                   	push   eax
c0014c00:	57                   	push   edi
c0014c01:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014c04:	83 c4 10             	add    esp,0x10
c0014c07:	83 c3 15             	add    ebx,0x15
c0014c0a:	c1 e3 04             	shl    ebx,0x4
c0014c0d:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014c11:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014c18:	31 db                	xor    ebx,ebx
c0014c1a:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014c1e:	85 c0                	test   eax,eax
c0014c20:	74 13                	je     c0014c35 <int_handler+0x7c>
c0014c22:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014c25:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014c29:	74 1c                	je     c0014c47 <int_handler+0x8e>
c0014c2b:	83 ec 08             	sub    esp,0x8
c0014c2e:	52                   	push   edx
c0014c2f:	56                   	push   esi
c0014c30:	ff d0                	call   eax
c0014c32:	83 c4 10             	add    esp,0x10
c0014c35:	43                   	inc    ebx
c0014c36:	83 fb 04             	cmp    ebx,0x4
c0014c39:	75 df                	jne    c0014c1a <int_handler+0x61>
c0014c3b:	83 c4 0c             	add    esp,0xc
c0014c3e:	31 c0                	xor    eax,eax
c0014c40:	5b                   	pop    ebx
c0014c41:	31 d2                	xor    edx,edx
c0014c43:	5e                   	pop    esi
c0014c44:	5f                   	pop    edi
c0014c45:	5d                   	pop    ebp
c0014c46:	c3                   	ret    
c0014c47:	83 ec 08             	sub    esp,0x8
c0014c4a:	52                   	push   edx
c0014c4b:	56                   	push   esi
c0014c4c:	ff d0                	call   eax
c0014c4e:	83 c4 10             	add    esp,0x10
c0014c51:	83 c4 0c             	add    esp,0xc
c0014c54:	5b                   	pop    ebx
c0014c55:	5e                   	pop    esi
c0014c56:	5f                   	pop    edi
c0014c57:	5d                   	pop    ebp
c0014c58:	c3                   	ret    
c0014c59:	90                   	nop

c0014c5a <InterruptController::InterruptController(char const*)>:
c0014c5a:	83 ec 1c             	sub    esp,0x1c
c0014c5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c61:	83 ec 08             	sub    esp,0x8
c0014c64:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c68:	50                   	push   eax
c0014c69:	e8 72 f8 ff ff       	call   c00144e0 <Device::Device(char const*)>
c0014c6e:	83 c4 10             	add    esp,0x10
c0014c71:	ba 94 ba 02 c0       	mov    edx,0xc002ba94
c0014c76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c7a:	89 10                	mov    DWORD PTR [eax],edx
c0014c7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c80:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014c8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c92:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014c9a:	7f 5e                	jg     c0014cfa <InterruptController::InterruptController(char const*)+0xa0>
c0014c9c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014ca4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014ca9:	7f 49                	jg     c0014cf4 <InterruptController::InterruptController(char const*)+0x9a>
c0014cab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014caf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014cb3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014cba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014cbe:	01 ca                	add    edx,ecx
c0014cc0:	83 c2 54             	add    edx,0x54
c0014cc3:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014ccb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ccf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014cd3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014cda:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014cde:	01 ca                	add    edx,ecx
c0014ce0:	81 c2 54 04 00 00    	add    edx,0x454
c0014ce6:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014cee:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014cf2:	eb b0                	jmp    c0014ca4 <InterruptController::InterruptController(char const*)+0x4a>
c0014cf4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014cf8:	eb 98                	jmp    c0014c92 <InterruptController::InterruptController(char const*)+0x38>
c0014cfa:	90                   	nop
c0014cfb:	83 c4 1c             	add    esp,0x1c
c0014cfe:	c3                   	ret    
c0014cff:	90                   	nop

c0014d00 <InterruptController::~InterruptController()>:
c0014d00:	83 ec 0c             	sub    esp,0xc
c0014d03:	ba 94 ba 02 c0       	mov    edx,0xc002ba94
c0014d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d0c:	89 10                	mov    DWORD PTR [eax],edx
c0014d0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d12:	83 ec 0c             	sub    esp,0xc
c0014d15:	50                   	push   eax
c0014d16:	e8 b9 f4 ff ff       	call   c00141d4 <Device::~Device()>
c0014d1b:	83 c4 10             	add    esp,0x10
c0014d1e:	90                   	nop
c0014d1f:	83 c4 0c             	add    esp,0xc
c0014d22:	c3                   	ret    
c0014d23:	90                   	nop

c0014d24 <InterruptController::~InterruptController()>:
c0014d24:	83 ec 0c             	sub    esp,0xc
c0014d27:	83 ec 0c             	sub    esp,0xc
c0014d2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d2e:	e8 cd ff ff ff       	call   c0014d00 <InterruptController::~InterruptController()>
c0014d33:	83 c4 10             	add    esp,0x10
c0014d36:	83 ec 08             	sub    esp,0x8
c0014d39:	68 58 21 00 00       	push   0x2158
c0014d3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d42:	e8 a6 e0 ff ff       	call   c0012ded <operator delete(void*, unsigned long)>
c0014d47:	83 c4 10             	add    esp,0x10
c0014d4a:	83 c4 0c             	add    esp,0xc
c0014d4d:	c3                   	ret    

c0014d4e <displayDebugInfo(regs*)>:
c0014d4e:	55                   	push   ebp
c0014d4f:	57                   	push   edi
c0014d50:	56                   	push   esi
c0014d51:	53                   	push   ebx
c0014d52:	83 ec 24             	sub    esp,0x24
c0014d55:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014d59:	0f 20 c2             	mov    edx,cr0
c0014d5c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014d60:	0f 20 d7             	mov    edi,cr2
c0014d63:	0f 20 de             	mov    esi,cr3
c0014d66:	0f 20 e5             	mov    ebp,cr4
c0014d69:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014d6c:	68 0e b8 02 c0       	push   0xc002b80e
c0014d71:	e8 57 e1 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0014d76:	59                   	pop    ecx
c0014d77:	58                   	pop    eax
c0014d78:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014d7b:	68 19 b8 02 c0       	push   0xc002b819
c0014d80:	e8 48 e1 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0014d85:	58                   	pop    eax
c0014d86:	5a                   	pop    edx
c0014d87:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014d8a:	68 24 b8 02 c0       	push   0xc002b824
c0014d8f:	e8 39 e1 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0014d94:	59                   	pop    ecx
c0014d95:	58                   	pop    eax
c0014d96:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014d99:	68 2f b8 02 c0       	push   0xc002b82f
c0014d9e:	e8 2a e1 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0014da3:	58                   	pop    eax
c0014da4:	5a                   	pop    edx
c0014da5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014da8:	68 3a b8 02 c0       	push   0xc002b83a
c0014dad:	e8 1b e1 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0014db2:	59                   	pop    ecx
c0014db3:	58                   	pop    eax
c0014db4:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014db7:	68 45 b8 02 c0       	push   0xc002b845
c0014dbc:	e8 0c e1 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0014dc1:	58                   	pop    eax
c0014dc2:	5a                   	pop    edx
c0014dc3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014dc6:	68 50 b8 02 c0       	push   0xc002b850
c0014dcb:	e8 fd e0 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0014dd0:	59                   	pop    ecx
c0014dd1:	58                   	pop    eax
c0014dd2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014dd5:	68 5b b8 02 c0       	push   0xc002b85b
c0014dda:	e8 ee e0 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0014ddf:	58                   	pop    eax
c0014de0:	5a                   	pop    edx
c0014de1:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014de4:	68 66 b8 02 c0       	push   0xc002b866
c0014de9:	e8 df e0 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0014dee:	59                   	pop    ecx
c0014def:	58                   	pop    eax
c0014df0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014df3:	68 75 b8 02 c0       	push   0xc002b875
c0014df8:	e8 d0 e0 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0014dfd:	58                   	pop    eax
c0014dfe:	5a                   	pop    edx
c0014dff:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e02:	68 80 b8 02 c0       	push   0xc002b880
c0014e07:	e8 c1 e0 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0014e0c:	59                   	pop    ecx
c0014e0d:	58                   	pop    eax
c0014e0e:	57                   	push   edi
c0014e0f:	68 8b b8 02 c0       	push   0xc002b88b
c0014e14:	e8 b4 e0 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0014e19:	58                   	pop    eax
c0014e1a:	5a                   	pop    edx
c0014e1b:	56                   	push   esi
c0014e1c:	68 96 b8 02 c0       	push   0xc002b896
c0014e21:	e8 a7 e0 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0014e26:	59                   	pop    ecx
c0014e27:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0014e2c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e32:	e8 b9 be ff ff       	call   c0010cf0 <setActiveTerminal(VgaText*)>
c0014e37:	58                   	pop    eax
c0014e38:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014e3b:	5a                   	pop    edx
c0014e3c:	c1 e0 05             	shl    eax,0x5
c0014e3f:	05 a0 de 02 c0       	add    eax,0xc002dea0
c0014e44:	50                   	push   eax
c0014e45:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0014e4a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e50:	e8 27 c2 ff ff       	call   c001107c <VgaText::puts(char const*)>
c0014e55:	59                   	pop    ecx
c0014e56:	58                   	pop    eax
c0014e57:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0014e5c:	68 a1 b8 02 c0       	push   0xc002b8a1
c0014e61:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e67:	e8 10 c2 ff ff       	call   c001107c <VgaText::puts(char const*)>
c0014e6c:	58                   	pop    eax
c0014e6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e72:	5a                   	pop    edx
c0014e73:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e76:	83 c0 0c             	add    eax,0xc
c0014e79:	50                   	push   eax
c0014e7a:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0014e7f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e85:	e8 f2 c1 ff ff       	call   c001107c <VgaText::puts(char const*)>
c0014e8a:	59                   	pop    ecx
c0014e8b:	58                   	pop    eax
c0014e8c:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0014e91:	68 aa b8 02 c0       	push   0xc002b8aa
c0014e96:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e9c:	e8 db c1 ff ff       	call   c001107c <VgaText::puts(char const*)>
c0014ea1:	58                   	pop    eax
c0014ea2:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0014ea7:	5a                   	pop    edx
c0014ea8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014eab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eb1:	e8 ec c1 ff ff       	call   c00110a2 <VgaText::putx(unsigned int)>
c0014eb6:	59                   	pop    ecx
c0014eb7:	58                   	pop    eax
c0014eb8:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0014ebd:	68 b2 b8 02 c0       	push   0xc002b8b2
c0014ec2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ec8:	e8 af c1 ff ff       	call   c001107c <VgaText::puts(char const*)>
c0014ecd:	58                   	pop    eax
c0014ece:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0014ed3:	5a                   	pop    edx
c0014ed4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014ed7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014edd:	e8 c0 c1 ff ff       	call   c00110a2 <VgaText::putx(unsigned int)>
c0014ee2:	59                   	pop    ecx
c0014ee3:	58                   	pop    eax
c0014ee4:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0014ee9:	68 ba b8 02 c0       	push   0xc002b8ba
c0014eee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ef4:	e8 83 c1 ff ff       	call   c001107c <VgaText::puts(char const*)>
c0014ef9:	58                   	pop    eax
c0014efa:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0014eff:	5a                   	pop    edx
c0014f00:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014f03:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f09:	e8 94 c1 ff ff       	call   c00110a2 <VgaText::putx(unsigned int)>
c0014f0e:	59                   	pop    ecx
c0014f0f:	58                   	pop    eax
c0014f10:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0014f15:	68 c2 b8 02 c0       	push   0xc002b8c2
c0014f1a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f20:	e8 57 c1 ff ff       	call   c001107c <VgaText::puts(char const*)>
c0014f25:	58                   	pop    eax
c0014f26:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0014f2b:	5a                   	pop    edx
c0014f2c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014f2f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f35:	e8 68 c1 ff ff       	call   c00110a2 <VgaText::putx(unsigned int)>
c0014f3a:	59                   	pop    ecx
c0014f3b:	58                   	pop    eax
c0014f3c:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0014f41:	68 ca b8 02 c0       	push   0xc002b8ca
c0014f46:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f4c:	e8 2b c1 ff ff       	call   c001107c <VgaText::puts(char const*)>
c0014f51:	58                   	pop    eax
c0014f52:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0014f57:	5a                   	pop    edx
c0014f58:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014f5b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f61:	e8 3c c1 ff ff       	call   c00110a2 <VgaText::putx(unsigned int)>
c0014f66:	59                   	pop    ecx
c0014f67:	58                   	pop    eax
c0014f68:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0014f6d:	68 d2 b8 02 c0       	push   0xc002b8d2
c0014f72:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f78:	e8 ff c0 ff ff       	call   c001107c <VgaText::puts(char const*)>
c0014f7d:	58                   	pop    eax
c0014f7e:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0014f83:	5a                   	pop    edx
c0014f84:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014f87:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f8d:	e8 10 c1 ff ff       	call   c00110a2 <VgaText::putx(unsigned int)>
c0014f92:	59                   	pop    ecx
c0014f93:	58                   	pop    eax
c0014f94:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0014f99:	68 da b8 02 c0       	push   0xc002b8da
c0014f9e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fa4:	e8 d3 c0 ff ff       	call   c001107c <VgaText::puts(char const*)>
c0014fa9:	58                   	pop    eax
c0014faa:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0014faf:	5a                   	pop    edx
c0014fb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014fb4:	52                   	push   edx
c0014fb5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fbb:	e8 e2 c0 ff ff       	call   c00110a2 <VgaText::putx(unsigned int)>
c0014fc0:	59                   	pop    ecx
c0014fc1:	58                   	pop    eax
c0014fc2:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0014fc7:	68 e3 b8 02 c0       	push   0xc002b8e3
c0014fcc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fd2:	e8 a5 c0 ff ff       	call   c001107c <VgaText::puts(char const*)>
c0014fd7:	58                   	pop    eax
c0014fd8:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0014fdd:	5a                   	pop    edx
c0014fde:	57                   	push   edi
c0014fdf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fe5:	e8 b8 c0 ff ff       	call   c00110a2 <VgaText::putx(unsigned int)>
c0014fea:	59                   	pop    ecx
c0014feb:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0014ff0:	5f                   	pop    edi
c0014ff1:	68 eb b8 02 c0       	push   0xc002b8eb
c0014ff6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ffc:	e8 7b c0 ff ff       	call   c001107c <VgaText::puts(char const*)>
c0015001:	58                   	pop    eax
c0015002:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0015007:	5a                   	pop    edx
c0015008:	56                   	push   esi
c0015009:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001500f:	e8 8e c0 ff ff       	call   c00110a2 <VgaText::putx(unsigned int)>
c0015014:	59                   	pop    ecx
c0015015:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001501a:	5e                   	pop    esi
c001501b:	68 f3 b8 02 c0       	push   0xc002b8f3
c0015020:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015026:	e8 51 c0 ff ff       	call   c001107c <VgaText::puts(char const*)>
c001502b:	5f                   	pop    edi
c001502c:	58                   	pop    eax
c001502d:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0015032:	55                   	push   ebp
c0015033:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015039:	e8 64 c0 ff ff       	call   c00110a2 <VgaText::putx(unsigned int)>
c001503e:	58                   	pop    eax
c001503f:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0015044:	5a                   	pop    edx
c0015045:	68 fb b8 02 c0       	push   0xc002b8fb
c001504a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015050:	e8 27 c0 ff ff       	call   c001107c <VgaText::puts(char const*)>
c0015055:	0f 21 c0             	mov    eax,db0
c0015058:	59                   	pop    ecx
c0015059:	5e                   	pop    esi
c001505a:	50                   	push   eax
c001505b:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0015060:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015066:	e8 37 c0 ff ff       	call   c00110a2 <VgaText::putx(unsigned int)>
c001506b:	5f                   	pop    edi
c001506c:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0015071:	5d                   	pop    ebp
c0015072:	68 04 b9 02 c0       	push   0xc002b904
c0015077:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001507d:	e8 fa bf ff ff       	call   c001107c <VgaText::puts(char const*)>
c0015082:	0f 21 c8             	mov    eax,db1
c0015085:	5a                   	pop    edx
c0015086:	59                   	pop    ecx
c0015087:	50                   	push   eax
c0015088:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001508d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015093:	e8 0a c0 ff ff       	call   c00110a2 <VgaText::putx(unsigned int)>
c0015098:	5e                   	pop    esi
c0015099:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001509e:	5f                   	pop    edi
c001509f:	68 0c b9 02 c0       	push   0xc002b90c
c00150a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150aa:	e8 cd bf ff ff       	call   c001107c <VgaText::puts(char const*)>
c00150af:	0f 21 d0             	mov    eax,db2
c00150b2:	5d                   	pop    ebp
c00150b3:	5a                   	pop    edx
c00150b4:	50                   	push   eax
c00150b5:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c00150ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150c0:	e8 dd bf ff ff       	call   c00110a2 <VgaText::putx(unsigned int)>
c00150c5:	59                   	pop    ecx
c00150c6:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c00150cb:	5e                   	pop    esi
c00150cc:	68 14 b9 02 c0       	push   0xc002b914
c00150d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150d7:	e8 a0 bf ff ff       	call   c001107c <VgaText::puts(char const*)>
c00150dc:	0f 21 d8             	mov    eax,db3
c00150df:	5f                   	pop    edi
c00150e0:	5d                   	pop    ebp
c00150e1:	50                   	push   eax
c00150e2:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c00150e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ed:	e8 b0 bf ff ff       	call   c00110a2 <VgaText::putx(unsigned int)>
c00150f2:	58                   	pop    eax
c00150f3:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c00150f8:	5a                   	pop    edx
c00150f9:	68 1c b9 02 c0       	push   0xc002b91c
c00150fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015104:	e8 73 bf ff ff       	call   c001107c <VgaText::puts(char const*)>
c0015109:	0f 21 f0             	mov    eax,db6
c001510c:	59                   	pop    ecx
c001510d:	5e                   	pop    esi
c001510e:	50                   	push   eax
c001510f:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0015114:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001511a:	e8 83 bf ff ff       	call   c00110a2 <VgaText::putx(unsigned int)>
c001511f:	5f                   	pop    edi
c0015120:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0015125:	5d                   	pop    ebp
c0015126:	68 24 b9 02 c0       	push   0xc002b924
c001512b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015131:	e8 46 bf ff ff       	call   c001107c <VgaText::puts(char const*)>
c0015136:	0f 21 f8             	mov    eax,db7
c0015139:	5a                   	pop    edx
c001513a:	59                   	pop    ecx
c001513b:	50                   	push   eax
c001513c:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0015141:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015147:	e8 56 bf ff ff       	call   c00110a2 <VgaText::putx(unsigned int)>
c001514c:	5e                   	pop    esi
c001514d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015150:	e8 a2 89 00 00       	call   c001daf7 <Thr::getDriverNameFromAddress(unsigned long)>
c0015155:	83 c4 10             	add    esp,0x10
c0015158:	85 c0                	test   eax,eax
c001515a:	74 7d                	je     c00151d9 <displayDebugInfo(regs*)+0x48b>
c001515c:	89 c6                	mov    esi,eax
c001515e:	50                   	push   eax
c001515f:	50                   	push   eax
c0015160:	56                   	push   esi
c0015161:	68 2c b9 02 c0       	push   0xc002b92c
c0015166:	e8 62 dd ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001516b:	5a                   	pop    edx
c001516c:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0015171:	59                   	pop    ecx
c0015172:	68 3a b9 02 c0       	push   0xc002b93a
c0015177:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001517d:	e8 fa be ff ff       	call   c001107c <VgaText::puts(char const*)>
c0015182:	5f                   	pop    edi
c0015183:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0015188:	5d                   	pop    ebp
c0015189:	56                   	push   esi
c001518a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015190:	e8 e7 be ff ff       	call   c001107c <VgaText::puts(char const*)>
c0015195:	58                   	pop    eax
c0015196:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001519b:	5a                   	pop    edx
c001519c:	68 46 b9 02 c0       	push   0xc002b946
c00151a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151a7:	e8 d0 be ff ff       	call   c001107c <VgaText::puts(char const*)>
c00151ac:	59                   	pop    ecx
c00151ad:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c00151b2:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00151b8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00151bb:	e8 6e 89 00 00       	call   c001db2e <Thr::getDriverOffsetFromAddress(unsigned long)>
c00151c0:	5b                   	pop    ebx
c00151c1:	5d                   	pop    ebp
c00151c2:	50                   	push   eax
c00151c3:	57                   	push   edi
c00151c4:	e8 d9 be ff ff       	call   c00110a2 <VgaText::putx(unsigned int)>
c00151c9:	58                   	pop    eax
c00151ca:	5a                   	pop    edx
c00151cb:	56                   	push   esi
c00151cc:	68 52 b9 02 c0       	push   0xc002b952
c00151d1:	e8 f7 dc ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00151d6:	83 c4 10             	add    esp,0x10
c00151d9:	fa                   	cli    
c00151da:	f4                   	hlt    
c00151db:	eb fe                	jmp    c00151db <displayDebugInfo(regs*)+0x48d>

c00151dd <x87EmulHandler(regs*, void*)>:
c00151dd:	83 ec 0c             	sub    esp,0xc
c00151e0:	0f 20 c2             	mov    edx,cr0
c00151e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151e8:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c00151ec:	75 4b                	jne    c0015239 <x87EmulHandler(regs*, void*)+0x5c>
c00151ee:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c00151f3:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c00151f9:	85 c0                	test   eax,eax
c00151fb:	74 05                	je     c0015202 <x87EmulHandler(regs*, void*)+0x25>
c00151fd:	83 e2 08             	and    edx,0x8
c0015200:	75 17                	jne    c0015219 <x87EmulHandler(regs*, void*)+0x3c>
c0015202:	83 ec 0c             	sub    esp,0xc
c0015205:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015209:	e8 59 af 00 00       	call   c0020167 <Vm::x87Handler(regs*)>
c001520e:	83 c4 10             	add    esp,0x10
c0015211:	84 c0                	test   al,al
c0015213:	74 24                	je     c0015239 <x87EmulHandler(regs*, void*)+0x5c>
c0015215:	83 c4 0c             	add    esp,0xc
c0015218:	c3                   	ret    
c0015219:	83 ec 0c             	sub    esp,0xc
c001521c:	68 78 b9 02 c0       	push   0xc002b978
c0015221:	e8 a7 dc ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0015226:	0f 06                	clts   
c0015228:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001522d:	83 c4 10             	add    esp,0x10
c0015230:	a3 88 f0 02 c0       	mov    ds:0xc002f088,eax
c0015235:	83 c4 0c             	add    esp,0xc
c0015238:	c3                   	ret    
c0015239:	83 ec 0c             	sub    esp,0xc
c001523c:	68 62 b9 02 c0       	push   0xc002b962
c0015241:	e8 87 dc ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0015246:	5a                   	pop    edx
c0015247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001524b:	e8 fe fa ff ff       	call   c0014d4e <displayDebugInfo(regs*)>

c0015250 <gpFault(regs*, void*)>:
c0015250:	53                   	push   ebx
c0015251:	83 ec 14             	sub    esp,0x14
c0015254:	c7 05 84 f0 02 c0 e4 f4 01 c0 	mov    DWORD PTR ds:0xc002f084,0xc001f4e4
c001525e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015262:	53                   	push   ebx
c0015263:	e8 7c a2 00 00       	call   c001f4e4 <Vm::faultHandler(regs*)>
c0015268:	83 c4 10             	add    esp,0x10
c001526b:	84 c0                	test   al,al
c001526d:	74 05                	je     c0015274 <gpFault(regs*, void*)+0x24>
c001526f:	83 c4 08             	add    esp,0x8
c0015272:	5b                   	pop    ebx
c0015273:	c3                   	ret    
c0015274:	83 ec 0c             	sub    esp,0xc
c0015277:	68 85 b9 02 c0       	push   0xc002b985
c001527c:	e8 4c dc ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0015281:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015284:	e8 c5 fa ff ff       	call   c0014d4e <displayDebugInfo(regs*)>

c0015289 <pgFault(regs*, void*)>:
c0015289:	83 ec 14             	sub    esp,0x14
c001528c:	0f 20 d0             	mov    eax,cr2
c001528f:	50                   	push   eax
c0015290:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015295:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015298:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001529e:	e8 47 d8 ff ff       	call   c0012aea <VAS::tryLoadBackOffDisk(unsigned long)>
c00152a3:	83 c4 10             	add    esp,0x10
c00152a6:	84 c0                	test   al,al
c00152a8:	74 04                	je     c00152ae <pgFault(regs*, void*)+0x25>
c00152aa:	83 c4 0c             	add    esp,0xc
c00152ad:	c3                   	ret    
c00152ae:	83 ec 0c             	sub    esp,0xc
c00152b1:	68 a0 b9 02 c0       	push   0xc002b9a0
c00152b6:	e8 12 dc ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00152bb:	58                   	pop    eax
c00152bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152c0:	e8 89 fa ff ff       	call   c0014d4e <displayDebugInfo(regs*)>

c00152c5 <otherISRHandler(regs*, void*)>:
c00152c5:	53                   	push   ebx
c00152c6:	83 ec 0c             	sub    esp,0xc
c00152c9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00152cd:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00152d0:	50                   	push   eax
c00152d1:	50                   	push   eax
c00152d2:	68 ad b9 02 c0       	push   0xc002b9ad
c00152d7:	e8 f1 db ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00152dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152df:	e8 6a fa ff ff       	call   c0014d4e <displayDebugInfo(regs*)>

c00152e4 <opcodeFault(regs*, void*)>:
c00152e4:	55                   	push   ebp
c00152e5:	89 e5                	mov    ebp,esp
c00152e7:	56                   	push   esi
c00152e8:	53                   	push   ebx
c00152e9:	83 ec 40             	sub    esp,0x40
c00152ec:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c00152f1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00152f7:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c00152fd:	84 c0                	test   al,al
c00152ff:	74 24                	je     c0015325 <opcodeFault(regs*, void*)+0x41>
c0015301:	83 ec 0c             	sub    esp,0xc
c0015304:	68 cc b9 02 c0       	push   0xc002b9cc
c0015309:	e8 bf db ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001530e:	83 c4 10             	add    esp,0x10
c0015311:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015314:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015317:	8d 50 19             	lea    edx,[eax+0x19]
c001531a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001531d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015320:	e9 d5 05 00 00       	jmp    c00158fa <opcodeFault(regs*, void*)+0x616>
c0015325:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015328:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001532b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001532e:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0015332:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0015336:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015339:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001533c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001533f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015342:	8a 00                	mov    al,BYTE PTR [eax]
c0015344:	3c f0                	cmp    al,0xf0
c0015346:	75 17                	jne    c001535f <opcodeFault(regs*, void*)+0x7b>
c0015348:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001534b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001534e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015351:	8d 50 01             	lea    edx,[eax+0x1]
c0015354:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015357:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001535a:	e9 da 00 00 00       	jmp    c0015439 <opcodeFault(regs*, void*)+0x155>
c001535f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015362:	8a 00                	mov    al,BYTE PTR [eax]
c0015364:	3c f2                	cmp    al,0xf2
c0015366:	74 09                	je     c0015371 <opcodeFault(regs*, void*)+0x8d>
c0015368:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001536b:	8a 00                	mov    al,BYTE PTR [eax]
c001536d:	3c f3                	cmp    al,0xf3
c001536f:	75 1b                	jne    c001538c <opcodeFault(regs*, void*)+0xa8>
c0015371:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015375:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015378:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001537b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001537e:	8d 50 01             	lea    edx,[eax+0x1]
c0015381:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015384:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015387:	e9 ad 00 00 00       	jmp    c0015439 <opcodeFault(regs*, void*)+0x155>
c001538c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001538f:	8a 00                	mov    al,BYTE PTR [eax]
c0015391:	3c 66                	cmp    al,0x66
c0015393:	75 1f                	jne    c00153b4 <opcodeFault(regs*, void*)+0xd0>
c0015395:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015399:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c001539d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153a6:	8d 50 01             	lea    edx,[eax+0x1]
c00153a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ac:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153af:	e9 85 00 00 00       	jmp    c0015439 <opcodeFault(regs*, void*)+0x155>
c00153b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b7:	8a 00                	mov    al,BYTE PTR [eax]
c00153b9:	3c 67                	cmp    al,0x67
c00153bb:	75 18                	jne    c00153d5 <opcodeFault(regs*, void*)+0xf1>
c00153bd:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153c1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153ca:	8d 50 01             	lea    edx,[eax+0x1]
c00153cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153d3:	eb 64                	jmp    c0015439 <opcodeFault(regs*, void*)+0x155>
c00153d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d8:	8a 00                	mov    al,BYTE PTR [eax]
c00153da:	3c 2e                	cmp    al,0x2e
c00153dc:	74 09                	je     c00153e7 <opcodeFault(regs*, void*)+0x103>
c00153de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e1:	8a 00                	mov    al,BYTE PTR [eax]
c00153e3:	3c 3e                	cmp    al,0x3e
c00153e5:	75 18                	jne    c00153ff <opcodeFault(regs*, void*)+0x11b>
c00153e7:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153eb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153f4:	8d 50 01             	lea    edx,[eax+0x1]
c00153f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153fa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153fd:	eb 3a                	jmp    c0015439 <opcodeFault(regs*, void*)+0x155>
c00153ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015402:	8a 00                	mov    al,BYTE PTR [eax]
c0015404:	3c 36                	cmp    al,0x36
c0015406:	74 1b                	je     c0015423 <opcodeFault(regs*, void*)+0x13f>
c0015408:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540b:	8a 00                	mov    al,BYTE PTR [eax]
c001540d:	3c 26                	cmp    al,0x26
c001540f:	74 12                	je     c0015423 <opcodeFault(regs*, void*)+0x13f>
c0015411:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015414:	8a 00                	mov    al,BYTE PTR [eax]
c0015416:	3c 64                	cmp    al,0x64
c0015418:	74 09                	je     c0015423 <opcodeFault(regs*, void*)+0x13f>
c001541a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001541d:	8a 00                	mov    al,BYTE PTR [eax]
c001541f:	3c 65                	cmp    al,0x65
c0015421:	75 16                	jne    c0015439 <opcodeFault(regs*, void*)+0x155>
c0015423:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015427:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001542a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015430:	8d 50 01             	lea    edx,[eax+0x1]
c0015433:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015436:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015439:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001543c:	8a 00                	mov    al,BYTE PTR [eax]
c001543e:	3c 0f                	cmp    al,0xf
c0015440:	0f 85 ad 00 00 00    	jne    c00154f3 <opcodeFault(regs*, void*)+0x20f>
c0015446:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015449:	40                   	inc    eax
c001544a:	8a 00                	mov    al,BYTE PTR [eax]
c001544c:	3c c2                	cmp    al,0xc2
c001544e:	74 0e                	je     c001545e <opcodeFault(regs*, void*)+0x17a>
c0015450:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015453:	40                   	inc    eax
c0015454:	8a 00                	mov    al,BYTE PTR [eax]
c0015456:	3c c3                	cmp    al,0xc3
c0015458:	0f 85 95 00 00 00    	jne    c00154f3 <opcodeFault(regs*, void*)+0x20f>
c001545e:	83 ec 0c             	sub    esp,0xc
c0015461:	68 ef b9 02 c0       	push   0xc002b9ef
c0015466:	e8 62 da ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001546b:	83 c4 10             	add    esp,0x10
c001546e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015471:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015474:	8d 50 01             	lea    edx,[eax+0x1]
c0015477:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001547a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001547d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015480:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015483:	8a 00                	mov    al,BYTE PTR [eax]
c0015485:	8d 50 fe             	lea    edx,[eax-0x2]
c0015488:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001548b:	88 10                	mov    BYTE PTR [eax],dl
c001548d:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015490:	50                   	push   eax
c0015491:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015494:	50                   	push   eax
c0015495:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015498:	50                   	push   eax
c0015499:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001549c:	e8 b7 4a 00 00       	call   c0019f58 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00154a1:	83 c4 10             	add    esp,0x10
c00154a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154aa:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154ad:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00154b0:	01 d0                	add    eax,edx
c00154b2:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00154b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154bb:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154be:	48                   	dec    eax
c00154bf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00154c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c5:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00154c8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ce:	83 ec 04             	sub    esp,0x4
c00154d1:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00154d4:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00154d7:	50                   	push   eax
c00154d8:	e8 d7 ac fe ff       	call   c00001b4 <voodooXADD>
c00154dd:	83 c4 10             	add    esp,0x10
c00154e0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00154e3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00154e6:	01 c2                	add    edx,eax
c00154e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154eb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154ee:	e9 07 04 00 00       	jmp    c00158fa <opcodeFault(regs*, void*)+0x616>
c00154f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154f6:	8a 00                	mov    al,BYTE PTR [eax]
c00154f8:	3c 0f                	cmp    al,0xf
c00154fa:	0f 85 8b 01 00 00    	jne    c001568b <opcodeFault(regs*, void*)+0x3a7>
c0015500:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015503:	40                   	inc    eax
c0015504:	8a 00                	mov    al,BYTE PTR [eax]
c0015506:	3c c7                	cmp    al,0xc7
c0015508:	0f 86 7d 01 00 00    	jbe    c001568b <opcodeFault(regs*, void*)+0x3a7>
c001550e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015511:	40                   	inc    eax
c0015512:	8a 00                	mov    al,BYTE PTR [eax]
c0015514:	3c cf                	cmp    al,0xcf
c0015516:	0f 87 6f 01 00 00    	ja     c001568b <opcodeFault(regs*, void*)+0x3a7>
c001551c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001551f:	40                   	inc    eax
c0015520:	8a 00                	mov    al,BYTE PTR [eax]
c0015522:	83 c0 38             	add    eax,0x38
c0015525:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015528:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001552c:	75 0b                	jne    c0015539 <opcodeFault(regs*, void*)+0x255>
c001552e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015531:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015534:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015537:	eb 75                	jmp    c00155ae <opcodeFault(regs*, void*)+0x2ca>
c0015539:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001553d:	75 0b                	jne    c001554a <opcodeFault(regs*, void*)+0x266>
c001553f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015542:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015545:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015548:	eb 64                	jmp    c00155ae <opcodeFault(regs*, void*)+0x2ca>
c001554a:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001554e:	75 0b                	jne    c001555b <opcodeFault(regs*, void*)+0x277>
c0015550:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015553:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015556:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015559:	eb 53                	jmp    c00155ae <opcodeFault(regs*, void*)+0x2ca>
c001555b:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001555f:	75 0b                	jne    c001556c <opcodeFault(regs*, void*)+0x288>
c0015561:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015564:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015567:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001556a:	eb 42                	jmp    c00155ae <opcodeFault(regs*, void*)+0x2ca>
c001556c:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015570:	75 0b                	jne    c001557d <opcodeFault(regs*, void*)+0x299>
c0015572:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015575:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015578:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001557b:	eb 31                	jmp    c00155ae <opcodeFault(regs*, void*)+0x2ca>
c001557d:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015581:	75 0b                	jne    c001558e <opcodeFault(regs*, void*)+0x2aa>
c0015583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015586:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015589:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001558c:	eb 20                	jmp    c00155ae <opcodeFault(regs*, void*)+0x2ca>
c001558e:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015592:	75 0b                	jne    c001559f <opcodeFault(regs*, void*)+0x2bb>
c0015594:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015597:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001559a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001559d:	eb 0f                	jmp    c00155ae <opcodeFault(regs*, void*)+0x2ca>
c001559f:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00155a3:	75 09                	jne    c00155ae <opcodeFault(regs*, void*)+0x2ca>
c00155a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00155ab:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155ae:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00155b2:	74 10                	je     c00155c4 <opcodeFault(regs*, void*)+0x2e0>
c00155b4:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00155bb:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00155c2:	eb 2d                	jmp    c00155f1 <opcodeFault(regs*, void*)+0x30d>
c00155c4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155c7:	c1 e0 18             	shl    eax,0x18
c00155ca:	89 c2                	mov    edx,eax
c00155cc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155cf:	c1 e0 08             	shl    eax,0x8
c00155d2:	25 00 00 ff 00       	and    eax,0xff0000
c00155d7:	09 c2                	or     edx,eax
c00155d9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155dc:	c1 e8 08             	shr    eax,0x8
c00155df:	25 00 ff 00 00       	and    eax,0xff00
c00155e4:	09 c2                	or     edx,eax
c00155e6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155e9:	c1 e8 18             	shr    eax,0x18
c00155ec:	09 d0                	or     eax,edx
c00155ee:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155f1:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00155f5:	75 0b                	jne    c0015602 <opcodeFault(regs*, void*)+0x31e>
c00155f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155fa:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155fd:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015600:	eb 75                	jmp    c0015677 <opcodeFault(regs*, void*)+0x393>
c0015602:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015606:	75 0b                	jne    c0015613 <opcodeFault(regs*, void*)+0x32f>
c0015608:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001560b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001560e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015611:	eb 64                	jmp    c0015677 <opcodeFault(regs*, void*)+0x393>
c0015613:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015617:	75 0b                	jne    c0015624 <opcodeFault(regs*, void*)+0x340>
c0015619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001561f:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015622:	eb 53                	jmp    c0015677 <opcodeFault(regs*, void*)+0x393>
c0015624:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015628:	75 0b                	jne    c0015635 <opcodeFault(regs*, void*)+0x351>
c001562a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001562d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015630:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015633:	eb 42                	jmp    c0015677 <opcodeFault(regs*, void*)+0x393>
c0015635:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015639:	75 0b                	jne    c0015646 <opcodeFault(regs*, void*)+0x362>
c001563b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001563e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015641:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015644:	eb 31                	jmp    c0015677 <opcodeFault(regs*, void*)+0x393>
c0015646:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001564a:	75 0b                	jne    c0015657 <opcodeFault(regs*, void*)+0x373>
c001564c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001564f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015652:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015655:	eb 20                	jmp    c0015677 <opcodeFault(regs*, void*)+0x393>
c0015657:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001565b:	75 0b                	jne    c0015668 <opcodeFault(regs*, void*)+0x384>
c001565d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015660:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015663:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015666:	eb 0f                	jmp    c0015677 <opcodeFault(regs*, void*)+0x393>
c0015668:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001566c:	75 09                	jne    c0015677 <opcodeFault(regs*, void*)+0x393>
c001566e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015671:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015674:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015677:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001567a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001567d:	8d 50 02             	lea    edx,[eax+0x2]
c0015680:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015683:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015686:	e9 6f 02 00 00       	jmp    c00158fa <opcodeFault(regs*, void*)+0x616>
c001568b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001568e:	8a 00                	mov    al,BYTE PTR [eax]
c0015690:	3c 0f                	cmp    al,0xf
c0015692:	0f 85 8d 01 00 00    	jne    c0015825 <opcodeFault(regs*, void*)+0x541>
c0015698:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001569b:	40                   	inc    eax
c001569c:	8a 00                	mov    al,BYTE PTR [eax]
c001569e:	3c c7                	cmp    al,0xc7
c00156a0:	0f 85 7f 01 00 00    	jne    c0015825 <opcodeFault(regs*, void*)+0x541>
c00156a6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00156a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ac:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156af:	8d 50 01             	lea    edx,[eax+0x1]
c00156b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156b8:	8d 45 ba             	lea    eax,[ebp-0x46]
c00156bb:	50                   	push   eax
c00156bc:	8d 45 bb             	lea    eax,[ebp-0x45]
c00156bf:	50                   	push   eax
c00156c0:	8d 45 bc             	lea    eax,[ebp-0x44]
c00156c3:	50                   	push   eax
c00156c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00156c7:	e8 8c 48 00 00       	call   c0019f58 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00156cc:	83 c4 10             	add    esp,0x10
c00156cf:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00156d2:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00156d5:	83 f0 01             	xor    eax,0x1
c00156d8:	84 c0                	test   al,al
c00156da:	0f 84 45 01 00 00    	je     c0015825 <opcodeFault(regs*, void*)+0x541>
c00156e0:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00156e3:	3c 01                	cmp    al,0x1
c00156e5:	0f 85 3a 01 00 00    	jne    c0015825 <opcodeFault(regs*, void*)+0x541>
c00156eb:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00156ee:	83 f0 01             	xor    eax,0x1
c00156f1:	84 c0                	test   al,al
c00156f3:	0f 84 2c 01 00 00    	je     c0015825 <opcodeFault(regs*, void*)+0x541>
c00156f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156fc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00156ff:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015702:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015709:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001570c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001570f:	89 c2                	mov    edx,eax
c0015711:	b8 00 00 00 00       	mov    eax,0x0
c0015716:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015719:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001571c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001571f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015722:	ba 00 00 00 00       	mov    edx,0x0
c0015727:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001572a:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001572d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015730:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015733:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015736:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001573d:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015740:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015743:	89 c2                	mov    edx,eax
c0015745:	b8 00 00 00 00       	mov    eax,0x0
c001574a:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001574d:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015750:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015753:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015756:	ba 00 00 00 00       	mov    edx,0x0
c001575b:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001575e:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015761:	fa                   	cli    
c0015762:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c0015767:	40                   	inc    eax
c0015768:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c001576d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015770:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015773:	8b 00                	mov    eax,DWORD PTR [eax]
c0015775:	89 c1                	mov    ecx,eax
c0015777:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001577a:	89 cb                	mov    ebx,ecx
c001577c:	89 d0                	mov    eax,edx
c001577e:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015781:	89 c6                	mov    esi,eax
c0015783:	89 f0                	mov    eax,esi
c0015785:	09 d8                	or     eax,ebx
c0015787:	85 c0                	test   eax,eax
c0015789:	75 21                	jne    c00157ac <opcodeFault(regs*, void*)+0x4c8>
c001578b:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c001578e:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015791:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015794:	89 01                	mov    DWORD PTR [ecx],eax
c0015796:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015799:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001579c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001579f:	83 c8 40             	or     eax,0x40
c00157a2:	89 c2                	mov    edx,eax
c00157a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a7:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00157aa:	eb 3e                	jmp    c00157ea <opcodeFault(regs*, void*)+0x506>
c00157ac:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00157af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00157b4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157b7:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00157ba:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00157bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00157c3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00157c6:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00157c9:	89 d0                	mov    eax,edx
c00157cb:	31 d2                	xor    edx,edx
c00157cd:	89 c3                	mov    ebx,eax
c00157cf:	89 d6                	mov    esi,edx
c00157d1:	89 da                	mov    edx,ebx
c00157d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d6:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00157d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157dc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157df:	83 e0 bf             	and    eax,0xffffffbf
c00157e2:	89 c2                	mov    edx,eax
c00157e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e7:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00157ea:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c00157ef:	48                   	dec    eax
c00157f0:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c00157f5:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c00157fa:	85 c0                	test   eax,eax
c00157fc:	75 01                	jne    c00157ff <opcodeFault(regs*, void*)+0x51b>
c00157fe:	fb                   	sti    
c00157ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015802:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015805:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015808:	01 c2                	add    edx,eax
c001580a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015810:	83 ec 0c             	sub    esp,0xc
c0015813:	68 fe b9 02 c0       	push   0xc002b9fe
c0015818:	e8 b0 d6 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001581d:	83 c4 10             	add    esp,0x10
c0015820:	e9 d5 00 00 00       	jmp    c00158fa <opcodeFault(regs*, void*)+0x616>
c0015825:	83 ec 0c             	sub    esp,0xc
c0015828:	68 11 ba 02 c0       	push   0xc002ba11
c001582d:	e8 9b d6 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0015832:	83 c4 10             	add    esp,0x10
c0015835:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015838:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001583b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001583e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015841:	c1 e0 04             	shl    eax,0x4
c0015844:	01 d0                	add    eax,edx
c0015846:	83 c0 03             	add    eax,0x3
c0015849:	8a 00                	mov    al,BYTE PTR [eax]
c001584b:	0f b6 d8             	movzx  ebx,al
c001584e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015851:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015854:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015857:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001585a:	c1 e0 04             	shl    eax,0x4
c001585d:	01 d0                	add    eax,edx
c001585f:	83 c0 02             	add    eax,0x2
c0015862:	8a 00                	mov    al,BYTE PTR [eax]
c0015864:	0f b6 c8             	movzx  ecx,al
c0015867:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001586a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001586d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015870:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015873:	c1 e0 04             	shl    eax,0x4
c0015876:	01 d0                	add    eax,edx
c0015878:	40                   	inc    eax
c0015879:	8a 00                	mov    al,BYTE PTR [eax]
c001587b:	0f b6 d0             	movzx  edx,al
c001587e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015881:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015884:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015887:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001588a:	c1 e0 04             	shl    eax,0x4
c001588d:	01 f0                	add    eax,esi
c001588f:	8a 00                	mov    al,BYTE PTR [eax]
c0015891:	0f b6 c0             	movzx  eax,al
c0015894:	83 ec 0c             	sub    esp,0xc
c0015897:	53                   	push   ebx
c0015898:	51                   	push   ecx
c0015899:	52                   	push   edx
c001589a:	50                   	push   eax
c001589b:	68 24 ba 02 c0       	push   0xc002ba24
c00158a0:	e8 28 d6 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00158a5:	83 c4 20             	add    esp,0x20
c00158a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ab:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158ae:	83 c0 03             	add    eax,0x3
c00158b1:	8a 00                	mov    al,BYTE PTR [eax]
c00158b3:	0f b6 d8             	movzx  ebx,al
c00158b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158bc:	83 c0 02             	add    eax,0x2
c00158bf:	8a 00                	mov    al,BYTE PTR [eax]
c00158c1:	0f b6 c8             	movzx  ecx,al
c00158c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158ca:	40                   	inc    eax
c00158cb:	8a 00                	mov    al,BYTE PTR [eax]
c00158cd:	0f b6 d0             	movzx  edx,al
c00158d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158d6:	8a 00                	mov    al,BYTE PTR [eax]
c00158d8:	0f b6 c0             	movzx  eax,al
c00158db:	83 ec 0c             	sub    esp,0xc
c00158de:	53                   	push   ebx
c00158df:	51                   	push   ecx
c00158e0:	52                   	push   edx
c00158e1:	50                   	push   eax
c00158e2:	68 4c ba 02 c0       	push   0xc002ba4c
c00158e7:	e8 e1 d5 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00158ec:	83 c4 20             	add    esp,0x20
c00158ef:	83 ec 0c             	sub    esp,0xc
c00158f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00158f5:	e8 54 f4 ff ff       	call   c0014d4e <displayDebugInfo(regs*)>
c00158fa:	8d 65 f8             	lea    esp,[ebp-0x8]
c00158fd:	5b                   	pop    ebx
c00158fe:	5e                   	pop    esi
c00158ff:	5d                   	pop    ebp
c0015900:	c3                   	ret    

c0015901 <displayProgramFault(char const*)>:
c0015901:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015906:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015909:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001590f:	85 c0                	test   eax,eax
c0015911:	74 15                	je     c0015928 <displayProgramFault(char const*)+0x27>
c0015913:	83 ec 0c             	sub    esp,0xc
c0015916:	6a 04                	push   0x4
c0015918:	6a 0f                	push   0xf
c001591a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001591e:	50                   	push   eax
c001591f:	e8 9a b4 ff ff       	call   c0010dbe <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015924:	83 c4 1c             	add    esp,0x1c
c0015927:	c3                   	ret    
c0015928:	c3                   	ret    

c0015929 <setupInterruptController()>:
c0015929:	55                   	push   ebp
c001592a:	89 e5                	mov    ebp,esp
c001592c:	53                   	push   ebx
c001592d:	83 ec 24             	sub    esp,0x24
c0015930:	b8 00 00 00 00       	mov    eax,0x0
c0015935:	85 c0                	test   eax,eax
c0015937:	0f 95 c0             	setne  al
c001593a:	84 c0                	test   al,al
c001593c:	74 5b                	je     c0015999 <setupInterruptController()+0x70>
c001593e:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015945:	83 ec 0c             	sub    esp,0xc
c0015948:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001594b:	e8 de 9f ff ff       	call   c000f92e <malloc>
c0015950:	83 c4 10             	add    esp,0x10
c0015953:	89 c3                	mov    ebx,eax
c0015955:	83 ec 0c             	sub    esp,0xc
c0015958:	53                   	push   ebx
c0015959:	e8 76 08 01 00       	call   c00261d4 <APIC::APIC()>
c001595e:	83 c4 10             	add    esp,0x10
c0015961:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015964:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015967:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001596a:	8b 00                	mov    eax,DWORD PTR [eax]
c001596c:	83 c0 08             	add    eax,0x8
c001596f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015971:	6a 00                	push   0x0
c0015973:	6a 00                	push   0x0
c0015975:	6a 00                	push   0x0
c0015977:	52                   	push   edx
c0015978:	ff d0                	call   eax
c001597a:	83 c4 10             	add    esp,0x10
c001597d:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0015982:	83 ec 08             	sub    esp,0x8
c0015985:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015988:	50                   	push   eax
c0015989:	e8 62 e9 ff ff       	call   c00142f0 <Device::addChild(Device*)>
c001598e:	83 c4 10             	add    esp,0x10
c0015991:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015994:	e9 89 03 00 00       	jmp    c0015d22 <setupInterruptController()+0x3f9>
c0015999:	a0 80 18 03 c0       	mov    al,ds:0xc0031880
c001599e:	84 c0                	test   al,al
c00159a0:	75 24                	jne    c00159c6 <setupInterruptController()+0x9d>
c00159a2:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c00159a7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00159ad:	83 e2 fe             	and    edx,0xfffffffe
c00159b0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00159b6:	83 ec 0c             	sub    esp,0xc
c00159b9:	68 71 ba 02 c0       	push   0xc002ba71
c00159be:	e8 0a d5 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00159c3:	83 c4 10             	add    esp,0x10
c00159c6:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c00159cb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00159d1:	83 e0 01             	and    eax,0x1
c00159d4:	84 c0                	test   al,al
c00159d6:	0f 95 c0             	setne  al
c00159d9:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00159dc:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00159e3:	83 ec 0c             	sub    esp,0xc
c00159e6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00159e9:	e8 40 9f ff ff       	call   c000f92e <malloc>
c00159ee:	83 c4 10             	add    esp,0x10
c00159f1:	89 c3                	mov    ebx,eax
c00159f3:	83 ec 0c             	sub    esp,0xc
c00159f6:	53                   	push   ebx
c00159f7:	e8 30 0d 01 00       	call   c002672c <PIC::PIC()>
c00159fc:	83 c4 10             	add    esp,0x10
c00159ff:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a02:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a05:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a08:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a0a:	83 c0 08             	add    eax,0x8
c0015a0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a0f:	6a 00                	push   0x0
c0015a11:	6a 00                	push   0x0
c0015a13:	6a 00                	push   0x0
c0015a15:	52                   	push   edx
c0015a16:	ff d0                	call   eax
c0015a18:	83 c4 10             	add    esp,0x10
c0015a1b:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015a1f:	74 73                	je     c0015a94 <setupInterruptController()+0x16b>
c0015a21:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a24:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a27:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a29:	83 c0 0c             	add    eax,0xc
c0015a2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a2e:	6a 00                	push   0x0
c0015a30:	6a 00                	push   0x0
c0015a32:	6a 00                	push   0x0
c0015a34:	52                   	push   edx
c0015a35:	ff d0                	call   eax
c0015a37:	83 c4 10             	add    esp,0x10
c0015a3a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015a3e:	74 15                	je     c0015a55 <setupInterruptController()+0x12c>
c0015a40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a43:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a45:	83 c0 04             	add    eax,0x4
c0015a48:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a4a:	83 ec 0c             	sub    esp,0xc
c0015a4d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a50:	ff d0                	call   eax
c0015a52:	83 c4 10             	add    esp,0x10
c0015a55:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015a5c:	83 ec 0c             	sub    esp,0xc
c0015a5f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015a62:	e8 c7 9e ff ff       	call   c000f92e <malloc>
c0015a67:	83 c4 10             	add    esp,0x10
c0015a6a:	89 c3                	mov    ebx,eax
c0015a6c:	83 ec 0c             	sub    esp,0xc
c0015a6f:	53                   	push   ebx
c0015a70:	e8 5f 07 01 00       	call   c00261d4 <APIC::APIC()>
c0015a75:	83 c4 10             	add    esp,0x10
c0015a78:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a7b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a7e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a81:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a83:	83 c0 08             	add    eax,0x8
c0015a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a88:	6a 00                	push   0x0
c0015a8a:	6a 00                	push   0x0
c0015a8c:	6a 00                	push   0x0
c0015a8e:	52                   	push   edx
c0015a8f:	ff d0                	call   eax
c0015a91:	83 c4 10             	add    esp,0x10
c0015a94:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0015a99:	83 ec 08             	sub    esp,0x8
c0015a9c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a9f:	50                   	push   eax
c0015aa0:	e8 4b e8 ff ff       	call   c00142f0 <Device::addChild(Device*)>
c0015aa5:	83 c4 10             	add    esp,0x10
c0015aa8:	c7 05 88 f0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f088,0x0
c0015ab2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ab5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab7:	83 c0 24             	add    eax,0x24
c0015aba:	8b 00                	mov    eax,DWORD PTR [eax]
c0015abc:	6a 00                	push   0x0
c0015abe:	68 c5 52 01 c0       	push   0xc00152c5
c0015ac3:	6a 00                	push   0x0
c0015ac5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ac8:	ff d0                	call   eax
c0015aca:	83 c4 10             	add    esp,0x10
c0015acd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ad0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad2:	83 c0 24             	add    eax,0x24
c0015ad5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad7:	6a 00                	push   0x0
c0015ad9:	68 c5 52 01 c0       	push   0xc00152c5
c0015ade:	6a 01                	push   0x1
c0015ae0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ae3:	ff d0                	call   eax
c0015ae5:	83 c4 10             	add    esp,0x10
c0015ae8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aeb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aed:	83 c0 24             	add    eax,0x24
c0015af0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af2:	6a 00                	push   0x0
c0015af4:	68 ab 4b 01 c0       	push   0xc0014bab
c0015af9:	6a 02                	push   0x2
c0015afb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015afe:	ff d0                	call   eax
c0015b00:	83 c4 10             	add    esp,0x10
c0015b03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b06:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b08:	83 c0 24             	add    eax,0x24
c0015b0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b0d:	6a 00                	push   0x0
c0015b0f:	68 c5 52 01 c0       	push   0xc00152c5
c0015b14:	6a 03                	push   0x3
c0015b16:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b19:	ff d0                	call   eax
c0015b1b:	83 c4 10             	add    esp,0x10
c0015b1e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b21:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b23:	83 c0 24             	add    eax,0x24
c0015b26:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b28:	6a 00                	push   0x0
c0015b2a:	68 c5 52 01 c0       	push   0xc00152c5
c0015b2f:	6a 04                	push   0x4
c0015b31:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b34:	ff d0                	call   eax
c0015b36:	83 c4 10             	add    esp,0x10
c0015b39:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3e:	83 c0 24             	add    eax,0x24
c0015b41:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b43:	6a 00                	push   0x0
c0015b45:	68 c5 52 01 c0       	push   0xc00152c5
c0015b4a:	6a 05                	push   0x5
c0015b4c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b4f:	ff d0                	call   eax
c0015b51:	83 c4 10             	add    esp,0x10
c0015b54:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b57:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b59:	83 c0 24             	add    eax,0x24
c0015b5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b5e:	6a 00                	push   0x0
c0015b60:	68 e4 52 01 c0       	push   0xc00152e4
c0015b65:	6a 06                	push   0x6
c0015b67:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b6a:	ff d0                	call   eax
c0015b6c:	83 c4 10             	add    esp,0x10
c0015b6f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b72:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b74:	83 c0 24             	add    eax,0x24
c0015b77:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b79:	6a 00                	push   0x0
c0015b7b:	68 dd 51 01 c0       	push   0xc00151dd
c0015b80:	6a 07                	push   0x7
c0015b82:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b85:	ff d0                	call   eax
c0015b87:	83 c4 10             	add    esp,0x10
c0015b8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b8f:	83 c0 24             	add    eax,0x24
c0015b92:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b94:	6a 00                	push   0x0
c0015b96:	68 c6 49 01 c0       	push   0xc00149c6
c0015b9b:	6a 08                	push   0x8
c0015b9d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ba0:	ff d0                	call   eax
c0015ba2:	83 c4 10             	add    esp,0x10
c0015ba5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ba8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015baa:	83 c0 24             	add    eax,0x24
c0015bad:	8b 00                	mov    eax,DWORD PTR [eax]
c0015baf:	6a 00                	push   0x0
c0015bb1:	68 c5 52 01 c0       	push   0xc00152c5
c0015bb6:	6a 09                	push   0x9
c0015bb8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bbb:	ff d0                	call   eax
c0015bbd:	83 c4 10             	add    esp,0x10
c0015bc0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc5:	83 c0 24             	add    eax,0x24
c0015bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bca:	6a 00                	push   0x0
c0015bcc:	68 c5 52 01 c0       	push   0xc00152c5
c0015bd1:	6a 0a                	push   0xa
c0015bd3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bd6:	ff d0                	call   eax
c0015bd8:	83 c4 10             	add    esp,0x10
c0015bdb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bde:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be0:	83 c0 24             	add    eax,0x24
c0015be3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be5:	6a 00                	push   0x0
c0015be7:	68 c5 52 01 c0       	push   0xc00152c5
c0015bec:	6a 0b                	push   0xb
c0015bee:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bf1:	ff d0                	call   eax
c0015bf3:	83 c4 10             	add    esp,0x10
c0015bf6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bf9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bfb:	83 c0 24             	add    eax,0x24
c0015bfe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c00:	6a 00                	push   0x0
c0015c02:	68 c5 52 01 c0       	push   0xc00152c5
c0015c07:	6a 0c                	push   0xc
c0015c09:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c0c:	ff d0                	call   eax
c0015c0e:	83 c4 10             	add    esp,0x10
c0015c11:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c14:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c16:	83 c0 24             	add    eax,0x24
c0015c19:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c1b:	6a 00                	push   0x0
c0015c1d:	68 50 52 01 c0       	push   0xc0015250
c0015c22:	6a 0d                	push   0xd
c0015c24:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c27:	ff d0                	call   eax
c0015c29:	83 c4 10             	add    esp,0x10
c0015c2c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c31:	83 c0 24             	add    eax,0x24
c0015c34:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c36:	6a 00                	push   0x0
c0015c38:	68 89 52 01 c0       	push   0xc0015289
c0015c3d:	6a 0e                	push   0xe
c0015c3f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c42:	ff d0                	call   eax
c0015c44:	83 c4 10             	add    esp,0x10
c0015c47:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c4c:	83 c0 24             	add    eax,0x24
c0015c4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c51:	6a 00                	push   0x0
c0015c53:	68 c5 52 01 c0       	push   0xc00152c5
c0015c58:	6a 0f                	push   0xf
c0015c5a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c5d:	ff d0                	call   eax
c0015c5f:	83 c4 10             	add    esp,0x10
c0015c62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c65:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c67:	83 c0 24             	add    eax,0x24
c0015c6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c6c:	6a 00                	push   0x0
c0015c6e:	68 c5 52 01 c0       	push   0xc00152c5
c0015c73:	6a 10                	push   0x10
c0015c75:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c78:	ff d0                	call   eax
c0015c7a:	83 c4 10             	add    esp,0x10
c0015c7d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c80:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c82:	83 c0 24             	add    eax,0x24
c0015c85:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c87:	6a 00                	push   0x0
c0015c89:	68 c5 52 01 c0       	push   0xc00152c5
c0015c8e:	6a 11                	push   0x11
c0015c90:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c93:	ff d0                	call   eax
c0015c95:	83 c4 10             	add    esp,0x10
c0015c98:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c9d:	83 c0 24             	add    eax,0x24
c0015ca0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca2:	6a 00                	push   0x0
c0015ca4:	68 c5 52 01 c0       	push   0xc00152c5
c0015ca9:	6a 12                	push   0x12
c0015cab:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cae:	ff d0                	call   eax
c0015cb0:	83 c4 10             	add    esp,0x10
c0015cb3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cb6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cb8:	83 c0 24             	add    eax,0x24
c0015cbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cbd:	6a 00                	push   0x0
c0015cbf:	68 c5 52 01 c0       	push   0xc00152c5
c0015cc4:	6a 13                	push   0x13
c0015cc6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cc9:	ff d0                	call   eax
c0015ccb:	83 c4 10             	add    esp,0x10
c0015cce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cd3:	83 c0 24             	add    eax,0x24
c0015cd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cd8:	6a 00                	push   0x0
c0015cda:	68 c5 52 01 c0       	push   0xc00152c5
c0015cdf:	6a 14                	push   0x14
c0015ce1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ce4:	ff d0                	call   eax
c0015ce6:	83 c4 10             	add    esp,0x10
c0015ce9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cec:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cee:	83 c0 24             	add    eax,0x24
c0015cf1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cf3:	6a 00                	push   0x0
c0015cf5:	68 c5 52 01 c0       	push   0xc00152c5
c0015cfa:	6a 1e                	push   0x1e
c0015cfc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cff:	ff d0                	call   eax
c0015d01:	83 c4 10             	add    esp,0x10
c0015d04:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d07:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d09:	83 c0 24             	add    eax,0x24
c0015d0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d0e:	6a 00                	push   0x0
c0015d10:	68 6e cb 01 c0       	push   0xc001cb6e
c0015d15:	6a 60                	push   0x60
c0015d17:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d1a:	ff d0                	call   eax
c0015d1c:	83 c4 10             	add    esp,0x10
c0015d1f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d22:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d25:	c9                   	leave  
c0015d26:	c3                   	ret    
c0015d27:	90                   	nop

c0015d28 <InterruptController::convertLegacyIRQNumber(int)>:
c0015d28:	55                   	push   ebp
c0015d29:	89 e5                	mov    ebp,esp
c0015d2b:	83 ec 08             	sub    esp,0x8
c0015d2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d31:	83 ec 0c             	sub    esp,0xc
c0015d34:	50                   	push   eax
c0015d35:	e8 a2 e8 ff ff       	call   c00145dc <Device::getName()>
c0015d3a:	83 c4 10             	add    esp,0x10
c0015d3d:	8a 00                	mov    al,BYTE PTR [eax]
c0015d3f:	3c 41                	cmp    al,0x41
c0015d41:	0f 94 c0             	sete   al
c0015d44:	84 c0                	test   al,al
c0015d46:	74 28                	je     c0015d70 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d48:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015d4c:	7f 12                	jg     c0015d60 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015d4e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d51:	05 40 e1 02 c0       	add    eax,0xc002e140
c0015d56:	8a 00                	mov    al,BYTE PTR [eax]
c0015d58:	0f b6 c0             	movzx  eax,al
c0015d5b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015d5e:	eb 10                	jmp    c0015d70 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d60:	83 ec 0c             	sub    esp,0xc
c0015d63:	68 60 b7 02 c0       	push   0xc002b760
c0015d68:	e8 23 4b 00 00       	call   c001a890 <Krnl::panic(char const*)>
c0015d6d:	83 c4 10             	add    esp,0x10
c0015d70:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d73:	c9                   	leave  
c0015d74:	c3                   	ret    
c0015d75:	90                   	nop

c0015d76 <startGUI(void*)>:
c0015d76:	55                   	push   ebp
c0015d77:	89 e5                	mov    ebp,esp
c0015d79:	53                   	push   ebx
c0015d7a:	83 ec 04             	sub    esp,0x4
c0015d7d:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c0015d82:	48                   	dec    eax
c0015d83:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c0015d88:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c0015d8d:	85 c0                	test   eax,eax
c0015d8f:	75 01                	jne    c0015d92 <startGUI(void*)+0x1c>
c0015d91:	fb                   	sti    
c0015d92:	8b 1d e8 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eee8
c0015d98:	83 ec 08             	sub    esp,0x8
c0015d9b:	6a 01                	push   0x1
c0015d9d:	68 d4 ba 02 c0       	push   0xc002bad4
c0015da2:	e8 a1 7d 00 00       	call   c001db48 <Thr::loadDLL(char const*, bool)>
c0015da7:	83 c4 10             	add    esp,0x10
c0015daa:	83 ec 08             	sub    esp,0x8
c0015dad:	53                   	push   ebx
c0015dae:	50                   	push   eax
c0015daf:	e8 bf 7f 00 00       	call   c001dd73 <Thr::executeDLL(unsigned long, void*)>
c0015db4:	83 c4 10             	add    esp,0x10
c0015db7:	8b 1d e8 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eee8
c0015dbd:	83 ec 08             	sub    esp,0x8
c0015dc0:	6a 01                	push   0x1
c0015dc2:	68 ee ba 02 c0       	push   0xc002baee
c0015dc7:	e8 7c 7d 00 00       	call   c001db48 <Thr::loadDLL(char const*, bool)>
c0015dcc:	83 c4 10             	add    esp,0x10
c0015dcf:	83 ec 08             	sub    esp,0x8
c0015dd2:	53                   	push   ebx
c0015dd3:	50                   	push   eax
c0015dd4:	e8 9a 7f 00 00       	call   c001dd73 <Thr::executeDLL(unsigned long, void*)>
c0015dd9:	83 c4 10             	add    esp,0x10
c0015ddc:	90                   	nop
c0015ddd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015de0:	c9                   	leave  
c0015de1:	c3                   	ret    

c0015de2 <startGUIVESA(void*)>:
c0015de2:	55                   	push   ebp
c0015de3:	89 e5                	mov    ebp,esp
c0015de5:	53                   	push   ebx
c0015de6:	83 ec 04             	sub    esp,0x4
c0015de9:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c0015dee:	48                   	dec    eax
c0015def:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c0015df4:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c0015df9:	85 c0                	test   eax,eax
c0015dfb:	75 01                	jne    c0015dfe <startGUIVESA(void*)+0x1c>
c0015dfd:	fb                   	sti    
c0015dfe:	8b 1d e8 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eee8
c0015e04:	83 ec 08             	sub    esp,0x8
c0015e07:	6a 01                	push   0x1
c0015e09:	68 08 bb 02 c0       	push   0xc002bb08
c0015e0e:	e8 35 7d 00 00       	call   c001db48 <Thr::loadDLL(char const*, bool)>
c0015e13:	83 c4 10             	add    esp,0x10
c0015e16:	83 ec 08             	sub    esp,0x8
c0015e19:	53                   	push   ebx
c0015e1a:	50                   	push   eax
c0015e1b:	e8 53 7f 00 00       	call   c001dd73 <Thr::executeDLL(unsigned long, void*)>
c0015e20:	83 c4 10             	add    esp,0x10
c0015e23:	8b 1d e8 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eee8
c0015e29:	83 ec 08             	sub    esp,0x8
c0015e2c:	6a 01                	push   0x1
c0015e2e:	68 ee ba 02 c0       	push   0xc002baee
c0015e33:	e8 10 7d 00 00       	call   c001db48 <Thr::loadDLL(char const*, bool)>
c0015e38:	83 c4 10             	add    esp,0x10
c0015e3b:	83 ec 08             	sub    esp,0x8
c0015e3e:	53                   	push   ebx
c0015e3f:	50                   	push   eax
c0015e40:	e8 2e 7f 00 00       	call   c001dd73 <Thr::executeDLL(unsigned long, void*)>
c0015e45:	83 c4 10             	add    esp,0x10
c0015e48:	90                   	nop
c0015e49:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e4c:	c9                   	leave  
c0015e4d:	c3                   	ret    

c0015e4e <sendKeyToTerminal(unsigned char)>:
c0015e4e:	55                   	push   ebp
c0015e4f:	89 e5                	mov    ebp,esp
c0015e51:	83 ec 28             	sub    esp,0x28
c0015e54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e57:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015e5a:	a1 c4 ef 02 c0       	mov    eax,ds:0xc002efc4
c0015e5f:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015e63:	83 ec 08             	sub    esp,0x8
c0015e66:	52                   	push   edx
c0015e67:	50                   	push   eax
c0015e68:	e8 29 b4 ff ff       	call   c0011296 <VgaText::receiveKey(unsigned char)>
c0015e6d:	83 c4 10             	add    esp,0x10
c0015e70:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015e74:	0f 85 8f 00 00 00    	jne    c0015f09 <sendKeyToTerminal(unsigned char)+0xbb>
c0015e7a:	fa                   	cli    
c0015e7b:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c0015e80:	40                   	inc    eax
c0015e81:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c0015e86:	a1 24 24 03 c0       	mov    eax,ds:0xc0032424
c0015e8b:	40                   	inc    eax
c0015e8c:	a3 24 24 03 c0       	mov    ds:0xc0032424,eax
c0015e91:	a1 a0 f0 02 c0       	mov    eax,ds:0xc002f0a0
c0015e96:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e99:	c7 05 a0 f0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f0a0,0x0
c0015ea3:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015ea7:	74 1f                	je     c0015ec8 <sendKeyToTerminal(unsigned char)+0x7a>
c0015ea9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015eac:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015eaf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015eb2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015eb5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015eb8:	83 ec 0c             	sub    esp,0xc
c0015ebb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015ebe:	e8 27 8b 00 00       	call   c001e9ea <unblockTask(ThreadControlBlock*)>
c0015ec3:	83 c4 10             	add    esp,0x10
c0015ec6:	eb db                	jmp    c0015ea3 <sendKeyToTerminal(unsigned char)+0x55>
c0015ec8:	a1 24 24 03 c0       	mov    eax,ds:0xc0032424
c0015ecd:	48                   	dec    eax
c0015ece:	a3 24 24 03 c0       	mov    ds:0xc0032424,eax
c0015ed3:	a1 24 24 03 c0       	mov    eax,ds:0xc0032424
c0015ed8:	85 c0                	test   eax,eax
c0015eda:	75 18                	jne    c0015ef4 <sendKeyToTerminal(unsigned char)+0xa6>
c0015edc:	a1 20 24 03 c0       	mov    eax,ds:0xc0032420
c0015ee1:	85 c0                	test   eax,eax
c0015ee3:	74 0f                	je     c0015ef4 <sendKeyToTerminal(unsigned char)+0xa6>
c0015ee5:	c7 05 20 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032420,0x0
c0015eef:	e8 32 86 00 00       	call   c001e526 <schedule()>
c0015ef4:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c0015ef9:	48                   	dec    eax
c0015efa:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c0015eff:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c0015f04:	85 c0                	test   eax,eax
c0015f06:	75 01                	jne    c0015f09 <sendKeyToTerminal(unsigned char)+0xbb>
c0015f08:	fb                   	sti    
c0015f09:	90                   	nop
c0015f0a:	c9                   	leave  
c0015f0b:	c3                   	ret    

c0015f0c <sendKeyboardToken(KeyboardToken)>:
c0015f0c:	55                   	push   ebp
c0015f0d:	89 e5                	mov    ebp,esp
c0015f0f:	83 ec 18             	sub    esp,0x18
c0015f12:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015f15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f18:	0f b7 c0             	movzx  eax,ax
c0015f1b:	83 f2 01             	xor    edx,0x1
c0015f1e:	88 90 c0 f0 02 c0    	mov    BYTE PTR [eax-0x3ffd0f40],dl
c0015f24:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0015f29:	85 c0                	test   eax,eax
c0015f2b:	74 24                	je     c0015f51 <sendKeyboardToken(KeyboardToken)+0x45>
c0015f2d:	8b 0d a8 f0 02 c0    	mov    ecx,DWORD PTR ds:0xc002f0a8
c0015f33:	83 ec 04             	sub    esp,0x4
c0015f36:	68 c0 f0 02 c0       	push   0xc002f0c0
c0015f3b:	83 ec 08             	sub    esp,0x8
c0015f3e:	89 e2                	mov    edx,esp
c0015f40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f43:	89 02                	mov    DWORD PTR [edx],eax
c0015f45:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015f48:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015f4c:	ff d1                	call   ecx
c0015f4e:	83 c4 10             	add    esp,0x10
c0015f51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f54:	66 3d 03 02          	cmp    ax,0x203
c0015f58:	75 07                	jne    c0015f61 <sendKeyboardToken(KeyboardToken)+0x55>
c0015f5a:	a0 c0 f1 02 c0       	mov    al,ds:0xc002f1c0
c0015f5f:	84 c0                	test   al,al
c0015f61:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015f65:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015f68:	a0 c8 f4 02 c0       	mov    al,ds:0xc002f4c8
c0015f6d:	38 c2                	cmp    dl,al
c0015f6f:	74 1c                	je     c0015f8d <sendKeyboardToken(KeyboardToken)+0x81>
c0015f71:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015f74:	a2 c8 f4 02 c0       	mov    ds:0xc002f4c8,al
c0015f79:	a0 c8 f4 02 c0       	mov    al,ds:0xc002f4c8
c0015f7e:	0f b6 c0             	movzx  eax,al
c0015f81:	83 ec 0c             	sub    esp,0xc
c0015f84:	50                   	push   eax
c0015f85:	e8 94 a6 ff ff       	call   c001061e <setTerminalScrollLock(bool)>
c0015f8a:	83 c4 10             	add    esp,0x10
c0015f8d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015f90:	84 c0                	test   al,al
c0015f92:	0f 84 ae 00 00 00    	je     c0016046 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f9b:	66 3d 10 03          	cmp    ax,0x310
c0015f9f:	75 06                	jne    c0015fa7 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015fa1:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015fa7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015faa:	66 3d 11 03          	cmp    ax,0x311
c0015fae:	75 06                	jne    c0015fb6 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015fb0:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015fb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb9:	66 3d 12 03          	cmp    ax,0x312
c0015fbd:	75 06                	jne    c0015fc5 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015fbf:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc8:	66 3d 13 03          	cmp    ax,0x313
c0015fcc:	75 06                	jne    c0015fd4 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015fce:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015fd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd7:	66 3d 14 03          	cmp    ax,0x314
c0015fdb:	75 06                	jne    c0015fe3 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015fdd:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015fe3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe6:	66 3d 15 03          	cmp    ax,0x315
c0015fea:	75 06                	jne    c0015ff2 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015fec:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015ff2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff5:	66 3d 16 03          	cmp    ax,0x316
c0015ff9:	75 06                	jne    c0016001 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015ffb:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0016001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016004:	66 3d 17 03          	cmp    ax,0x317
c0016008:	75 06                	jne    c0016010 <sendKeyboardToken(KeyboardToken)+0x104>
c001600a:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0016010:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016013:	66 3d 18 03          	cmp    ax,0x318
c0016017:	75 06                	jne    c001601f <sendKeyboardToken(KeyboardToken)+0x113>
c0016019:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001601f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016022:	66 3d 19 03          	cmp    ax,0x319
c0016026:	75 06                	jne    c001602e <sendKeyboardToken(KeyboardToken)+0x122>
c0016028:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001602e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016031:	66 3d 1a 03          	cmp    ax,0x31a
c0016035:	0f 85 c9 00 00 00    	jne    c0016104 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001603b:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0016041:	e9 be 00 00 00       	jmp    c0016104 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016046:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016049:	66 3d 10 03          	cmp    ax,0x310
c001604d:	75 0a                	jne    c0016059 <sendKeyboardToken(KeyboardToken)+0x14d>
c001604f:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0016055:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016059:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001605c:	66 3d 11 03          	cmp    ax,0x311
c0016060:	75 0a                	jne    c001606c <sendKeyboardToken(KeyboardToken)+0x160>
c0016062:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0016068:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001606c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001606f:	66 3d 12 03          	cmp    ax,0x312
c0016073:	75 0a                	jne    c001607f <sendKeyboardToken(KeyboardToken)+0x173>
c0016075:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001607b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001607f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016082:	66 3d 13 03          	cmp    ax,0x313
c0016086:	75 0a                	jne    c0016092 <sendKeyboardToken(KeyboardToken)+0x186>
c0016088:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001608e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016092:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016095:	66 3d 14 03          	cmp    ax,0x314
c0016099:	75 0a                	jne    c00160a5 <sendKeyboardToken(KeyboardToken)+0x199>
c001609b:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00160a1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160a8:	66 3d 15 03          	cmp    ax,0x315
c00160ac:	75 0a                	jne    c00160b8 <sendKeyboardToken(KeyboardToken)+0x1ac>
c00160ae:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00160b4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160bb:	66 3d 16 03          	cmp    ax,0x316
c00160bf:	75 0a                	jne    c00160cb <sendKeyboardToken(KeyboardToken)+0x1bf>
c00160c1:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00160c7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ce:	66 3d 17 03          	cmp    ax,0x317
c00160d2:	75 0a                	jne    c00160de <sendKeyboardToken(KeyboardToken)+0x1d2>
c00160d4:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00160da:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160e1:	66 3d 18 03          	cmp    ax,0x318
c00160e5:	75 0a                	jne    c00160f1 <sendKeyboardToken(KeyboardToken)+0x1e5>
c00160e7:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00160ed:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f4:	66 3d 19 03          	cmp    ax,0x319
c00160f8:	75 0a                	jne    c0016104 <sendKeyboardToken(KeyboardToken)+0x1f8>
c00160fa:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0016100:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016104:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016107:	66 3d 00 02          	cmp    ax,0x200
c001610b:	75 2c                	jne    c0016139 <sendKeyboardToken(KeyboardToken)+0x22d>
c001610d:	a0 c0 f4 02 c0       	mov    al,ds:0xc002f4c0
c0016112:	83 f0 01             	xor    eax,0x1
c0016115:	84 c0                	test   al,al
c0016117:	74 20                	je     c0016139 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016119:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001611e:	6a 01                	push   0x1
c0016120:	6a 00                	push   0x0
c0016122:	68 76 5d 01 c0       	push   0xc0015d76
c0016127:	50                   	push   eax
c0016128:	e8 b5 81 00 00       	call   c001e2e2 <Process::createThread(void (*)(void*), void*, int)>
c001612d:	83 c4 10             	add    esp,0x10
c0016130:	c6 05 c0 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f4c0,0x1
c0016137:	eb 33                	jmp    c001616c <sendKeyboardToken(KeyboardToken)+0x260>
c0016139:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001613c:	66 3d 01 02          	cmp    ax,0x201
c0016140:	75 2a                	jne    c001616c <sendKeyboardToken(KeyboardToken)+0x260>
c0016142:	a0 c0 f4 02 c0       	mov    al,ds:0xc002f4c0
c0016147:	83 f0 01             	xor    eax,0x1
c001614a:	84 c0                	test   al,al
c001614c:	74 1e                	je     c001616c <sendKeyboardToken(KeyboardToken)+0x260>
c001614e:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0016153:	6a 01                	push   0x1
c0016155:	6a 00                	push   0x0
c0016157:	68 e2 5d 01 c0       	push   0xc0015de2
c001615c:	50                   	push   eax
c001615d:	e8 80 81 00 00       	call   c001e2e2 <Process::createThread(void (*)(void*), void*, int)>
c0016162:	83 c4 10             	add    esp,0x10
c0016165:	c6 05 c0 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f4c0,0x1
c001616c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001616f:	66 3d 1d 03          	cmp    ax,0x31d
c0016173:	75 06                	jne    c001617b <sendKeyboardToken(KeyboardToken)+0x26f>
c0016175:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001617b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001617e:	66 3d 1c 03          	cmp    ax,0x31c
c0016182:	75 06                	jne    c001618a <sendKeyboardToken(KeyboardToken)+0x27e>
c0016184:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001618a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001618d:	66 3d 1b 03          	cmp    ax,0x31b
c0016191:	75 06                	jne    c0016199 <sendKeyboardToken(KeyboardToken)+0x28d>
c0016193:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0016199:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001619c:	66 3d 1e 03          	cmp    ax,0x31e
c00161a0:	75 06                	jne    c00161a8 <sendKeyboardToken(KeyboardToken)+0x29c>
c00161a2:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00161a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161ab:	66 3d 1f 03          	cmp    ax,0x31f
c00161af:	75 06                	jne    c00161b7 <sendKeyboardToken(KeyboardToken)+0x2ab>
c00161b1:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00161b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161ba:	66 3d 1a 03          	cmp    ax,0x31a
c00161be:	75 06                	jne    c00161c6 <sendKeyboardToken(KeyboardToken)+0x2ba>
c00161c0:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00161c6:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00161ca:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00161cd:	83 f0 01             	xor    eax,0x1
c00161d0:	84 c0                	test   al,al
c00161d2:	74 77                	je     c001624b <sendKeyboardToken(KeyboardToken)+0x33f>
c00161d4:	a0 c1 f1 02 c0       	mov    al,ds:0xc002f1c1
c00161d9:	84 c0                	test   al,al
c00161db:	74 41                	je     c001621e <sendKeyboardToken(KeyboardToken)+0x312>
c00161dd:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161e1:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00161e5:	74 2b                	je     c0016212 <sendKeyboardToken(KeyboardToken)+0x306>
c00161e7:	8b 15 c4 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f4c4
c00161ed:	89 d0                	mov    eax,edx
c00161ef:	c1 e0 02             	shl    eax,0x2
c00161f2:	01 d0                	add    eax,edx
c00161f4:	01 c0                	add    eax,eax
c00161f6:	a3 c4 f4 02 c0       	mov    ds:0xc002f4c4,eax
c00161fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161fe:	0f b7 c0             	movzx  eax,ax
c0016201:	8d 50 d0             	lea    edx,[eax-0x30]
c0016204:	a1 c4 f4 02 c0       	mov    eax,ds:0xc002f4c4
c0016209:	01 d0                	add    eax,edx
c001620b:	a3 c4 f4 02 c0       	mov    ds:0xc002f4c4,eax
c0016210:	eb 6d                	jmp    c001627f <sendKeyboardToken(KeyboardToken)+0x373>
c0016212:	c7 05 c4 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f4c4,0x0
c001621c:	eb 61                	jmp    c001627f <sendKeyboardToken(KeyboardToken)+0x373>
c001621e:	a1 c4 f4 02 c0       	mov    eax,ds:0xc002f4c4
c0016223:	85 c0                	test   eax,eax
c0016225:	74 18                	je     c001623f <sendKeyboardToken(KeyboardToken)+0x333>
c0016227:	a1 c4 f4 02 c0       	mov    eax,ds:0xc002f4c4
c001622c:	0f b6 c0             	movzx  eax,al
c001622f:	83 ec 0c             	sub    esp,0xc
c0016232:	50                   	push   eax
c0016233:	e8 16 fc ff ff       	call   c0015e4e <sendKeyToTerminal(unsigned char)>
c0016238:	83 c4 10             	add    esp,0x10
c001623b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001623f:	c7 05 c4 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f4c4,0x0
c0016249:	eb 34                	jmp    c001627f <sendKeyboardToken(KeyboardToken)+0x373>
c001624b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001624e:	66 3d 01 01          	cmp    ax,0x101
c0016252:	75 2b                	jne    c001627f <sendKeyboardToken(KeyboardToken)+0x373>
c0016254:	a1 c4 f4 02 c0       	mov    eax,ds:0xc002f4c4
c0016259:	85 c0                	test   eax,eax
c001625b:	74 18                	je     c0016275 <sendKeyboardToken(KeyboardToken)+0x369>
c001625d:	a1 c4 f4 02 c0       	mov    eax,ds:0xc002f4c4
c0016262:	0f b6 c0             	movzx  eax,al
c0016265:	83 ec 0c             	sub    esp,0xc
c0016268:	50                   	push   eax
c0016269:	e8 e0 fb ff ff       	call   c0015e4e <sendKeyToTerminal(unsigned char)>
c001626e:	83 c4 10             	add    esp,0x10
c0016271:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016275:	c7 05 c4 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f4c4,0x0
c001627f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016282:	83 f0 01             	xor    eax,0x1
c0016285:	84 c0                	test   al,al
c0016287:	74 4c                	je     c00162d5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016289:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001628c:	83 f0 01             	xor    eax,0x1
c001628f:	84 c0                	test   al,al
c0016291:	74 42                	je     c00162d5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016293:	a0 c0 f1 02 c0       	mov    al,ds:0xc002f1c0
c0016298:	83 f0 01             	xor    eax,0x1
c001629b:	84 c0                	test   al,al
c001629d:	74 36                	je     c00162d5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001629f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162a2:	66 83 f8 1f          	cmp    ax,0x1f
c00162a6:	76 09                	jbe    c00162b1 <sendKeyboardToken(KeyboardToken)+0x3a5>
c00162a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162ab:	66 83 f8 7e          	cmp    ax,0x7e
c00162af:	76 12                	jbe    c00162c3 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00162b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162b4:	66 83 f8 0a          	cmp    ax,0xa
c00162b8:	74 09                	je     c00162c3 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00162ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162bd:	66 83 f8 08          	cmp    ax,0x8
c00162c1:	75 12                	jne    c00162d5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162c6:	0f b6 c0             	movzx  eax,al
c00162c9:	83 ec 0c             	sub    esp,0xc
c00162cc:	50                   	push   eax
c00162cd:	e8 7c fb ff ff       	call   c0015e4e <sendKeyToTerminal(unsigned char)>
c00162d2:	83 c4 10             	add    esp,0x10
c00162d5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00162d8:	83 f0 01             	xor    eax,0x1
c00162db:	84 c0                	test   al,al
c00162dd:	74 4f                	je     c001632e <sendKeyboardToken(KeyboardToken)+0x422>
c00162df:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162e2:	83 f0 01             	xor    eax,0x1
c00162e5:	84 c0                	test   al,al
c00162e7:	74 45                	je     c001632e <sendKeyboardToken(KeyboardToken)+0x422>
c00162e9:	a0 c0 f1 02 c0       	mov    al,ds:0xc002f1c0
c00162ee:	84 c0                	test   al,al
c00162f0:	74 3c                	je     c001632e <sendKeyboardToken(KeyboardToken)+0x422>
c00162f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162f5:	66 83 f8 3f          	cmp    ax,0x3f
c00162f9:	76 33                	jbe    c001632e <sendKeyboardToken(KeyboardToken)+0x422>
c00162fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162fe:	66 83 f8 7f          	cmp    ax,0x7f
c0016302:	77 2a                	ja     c001632e <sendKeyboardToken(KeyboardToken)+0x422>
c0016304:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016307:	88 c2                	mov    dl,al
c0016309:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001630c:	66 83 f8 5f          	cmp    ax,0x5f
c0016310:	76 04                	jbe    c0016316 <sendKeyboardToken(KeyboardToken)+0x40a>
c0016312:	b0 20                	mov    al,0x20
c0016314:	eb 02                	jmp    c0016318 <sendKeyboardToken(KeyboardToken)+0x40c>
c0016316:	b0 00                	mov    al,0x0
c0016318:	29 c2                	sub    edx,eax
c001631a:	88 d0                	mov    al,dl
c001631c:	83 e8 40             	sub    eax,0x40
c001631f:	0f b6 c0             	movzx  eax,al
c0016322:	83 ec 0c             	sub    esp,0xc
c0016325:	50                   	push   eax
c0016326:	e8 23 fb ff ff       	call   c0015e4e <sendKeyToTerminal(unsigned char)>
c001632b:	83 c4 10             	add    esp,0x10
c001632e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016331:	66 3d 00 03          	cmp    ax,0x300
c0016335:	75 0f                	jne    c0016346 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016337:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001633a:	83 f0 01             	xor    eax,0x1
c001633d:	84 c0                	test   al,al
c001633f:	74 05                	je     c0016346 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016341:	e8 50 aa ff ff       	call   c0010d96 <doTerminalCycle()>
c0016346:	90                   	nop
c0016347:	c9                   	leave  
c0016348:	c3                   	ret    

c0016349 <clearInternalKeybuffer(VgaText*)>:
c0016349:	55                   	push   ebp
c001634a:	89 e5                	mov    ebp,esp
c001634c:	83 ec 08             	sub    esp,0x8
c001634f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016352:	05 98 01 00 00       	add    eax,0x198
c0016357:	83 ec 0c             	sub    esp,0xc
c001635a:	50                   	push   eax
c001635b:	e8 28 a4 fe ff       	call   c0000788 <strlen>
c0016360:	83 c4 10             	add    esp,0x10
c0016363:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016366:	81 c2 98 01 00 00    	add    edx,0x198
c001636c:	83 ec 04             	sub    esp,0x4
c001636f:	50                   	push   eax
c0016370:	6a 00                	push   0x0
c0016372:	52                   	push   edx
c0016373:	e8 f4 a3 fe ff       	call   c000076c <memset>
c0016378:	83 c4 10             	add    esp,0x10
c001637b:	90                   	nop
c001637c:	c9                   	leave  
c001637d:	c3                   	ret    

c001637e <readKeyboard(VgaText*, char*, unsigned long)>:
c001637e:	55                   	push   ebp
c001637f:	89 e5                	mov    ebp,esp
c0016381:	83 ec 18             	sub    esp,0x18
c0016384:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0016389:	85 c0                	test   eax,eax
c001638b:	74 2a                	je     c00163b7 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c001638d:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0016393:	8b 0d a8 f0 02 c0    	mov    ecx,DWORD PTR ds:0xc002f0a8
c0016399:	83 ec 04             	sub    esp,0x4
c001639c:	68 c0 f0 02 c0       	push   0xc002f0c0
c00163a1:	83 ec 08             	sub    esp,0x8
c00163a4:	89 e2                	mov    edx,esp
c00163a6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00163a9:	89 02                	mov    DWORD PTR [edx],eax
c00163ab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00163ae:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00163b2:	ff d1                	call   ecx
c00163b4:	83 c4 10             	add    esp,0x10
c00163b7:	83 ec 0c             	sub    esp,0xc
c00163ba:	68 23 bb 02 c0       	push   0xc002bb23
c00163bf:	e8 09 cb ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00163c4:	83 c4 10             	add    esp,0x10
c00163c7:	fb                   	sti    
c00163c8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00163cf:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00163d3:	0f 84 a1 00 00 00    	je     c001647a <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c00163d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163dc:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c00163e2:	84 c0                	test   al,al
c00163e4:	75 28                	jne    c001640e <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c00163e6:	fa                   	cli    
c00163e7:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c00163ec:	40                   	inc    eax
c00163ed:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c00163f2:	e8 2f 81 00 00       	call   c001e526 <schedule()>
c00163f7:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c00163fc:	48                   	dec    eax
c00163fd:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c0016402:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c0016407:	85 c0                	test   eax,eax
c0016409:	75 ce                	jne    c00163d9 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c001640b:	fb                   	sti    
c001640c:	eb cb                	jmp    c00163d9 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c001640e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016411:	8d 50 01             	lea    edx,[eax+0x1]
c0016414:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016417:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001641a:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0016420:	88 10                	mov    BYTE PTR [eax],dl
c0016422:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016425:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c001642b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001642e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016431:	05 98 01 00 00       	add    eax,0x198
c0016436:	83 ec 0c             	sub    esp,0xc
c0016439:	50                   	push   eax
c001643a:	e8 49 a3 fe ff       	call   c0000788 <strlen>
c001643f:	83 c4 10             	add    esp,0x10
c0016442:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016445:	81 c2 98 01 00 00    	add    edx,0x198
c001644b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001644e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016451:	81 c2 98 01 00 00    	add    edx,0x198
c0016457:	83 ec 04             	sub    esp,0x4
c001645a:	50                   	push   eax
c001645b:	51                   	push   ecx
c001645c:	52                   	push   edx
c001645d:	e8 42 a2 fe ff       	call   c00006a4 <memmove>
c0016462:	83 c4 10             	add    esp,0x10
c0016465:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0016468:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001646b:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001646f:	0f 85 5a ff ff ff    	jne    c00163cf <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c0016475:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016478:	eb 03                	jmp    c001647d <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c001647a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001647d:	c9                   	leave  
c001647e:	c3                   	ret    
c001647f:	90                   	nop

c0016480 <Keyboard::Keyboard(char const*)>:
c0016480:	83 ec 0c             	sub    esp,0xc
c0016483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016487:	83 ec 08             	sub    esp,0x8
c001648a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001648e:	50                   	push   eax
c001648f:	e8 4c e0 ff ff       	call   c00144e0 <Device::Device(char const*)>
c0016494:	83 c4 10             	add    esp,0x10
c0016497:	ba 44 bb 02 c0       	mov    edx,0xc002bb44
c001649c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164a0:	89 10                	mov    DWORD PTR [eax],edx
c00164a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164a6:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00164b0:	c6 05 a4 f0 02 c0 01 	mov    BYTE PTR ds:0xc002f0a4,0x1
c00164b7:	90                   	nop
c00164b8:	83 c4 0c             	add    esp,0xc
c00164bb:	c3                   	ret    

c00164bc <Keyboard::~Keyboard()>:
c00164bc:	83 ec 0c             	sub    esp,0xc
c00164bf:	ba 44 bb 02 c0       	mov    edx,0xc002bb44
c00164c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164c8:	89 10                	mov    DWORD PTR [eax],edx
c00164ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164ce:	83 ec 0c             	sub    esp,0xc
c00164d1:	50                   	push   eax
c00164d2:	e8 fd dc ff ff       	call   c00141d4 <Device::~Device()>
c00164d7:	83 c4 10             	add    esp,0x10
c00164da:	90                   	nop
c00164db:	83 c4 0c             	add    esp,0xc
c00164de:	c3                   	ret    
c00164df:	90                   	nop

c00164e0 <Keyboard::~Keyboard()>:
c00164e0:	83 ec 0c             	sub    esp,0xc
c00164e3:	83 ec 0c             	sub    esp,0xc
c00164e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164ea:	e8 cd ff ff ff       	call   c00164bc <Keyboard::~Keyboard()>
c00164ef:	83 c4 10             	add    esp,0x10
c00164f2:	83 ec 08             	sub    esp,0x8
c00164f5:	68 5c 01 00 00       	push   0x15c
c00164fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164fe:	e8 ea c8 ff ff       	call   c0012ded <operator delete(void*, unsigned long)>
c0016503:	83 c4 10             	add    esp,0x10
c0016506:	83 c4 0c             	add    esp,0xc
c0016509:	c3                   	ret    

c001650a <LogicalDisk::close(int, int, void*)>:
c001650a:	83 c8 ff             	or     eax,0xffffffff
c001650d:	c3                   	ret    

c001650e <LogicalDisk::~LogicalDisk()>:
c001650e:	83 ec 0c             	sub    esp,0xc
c0016511:	ba f4 bb 02 c0       	mov    edx,0xc002bbf4
c0016516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001651a:	89 10                	mov    DWORD PTR [eax],edx
c001651c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016520:	83 ec 0c             	sub    esp,0xc
c0016523:	50                   	push   eax
c0016524:	e8 ab dc ff ff       	call   c00141d4 <Device::~Device()>
c0016529:	83 c4 10             	add    esp,0x10
c001652c:	90                   	nop
c001652d:	83 c4 0c             	add    esp,0xc
c0016530:	c3                   	ret    
c0016531:	90                   	nop

c0016532 <LogicalDisk::~LogicalDisk()>:
c0016532:	83 ec 0c             	sub    esp,0xc
c0016535:	83 ec 0c             	sub    esp,0xc
c0016538:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001653c:	e8 cd ff ff ff       	call   c001650e <LogicalDisk::~LogicalDisk()>
c0016541:	83 c4 10             	add    esp,0x10
c0016544:	83 ec 08             	sub    esp,0x8
c0016547:	68 74 01 00 00       	push   0x174
c001654c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016550:	e8 98 c8 ff ff       	call   c0012ded <operator delete(void*, unsigned long)>
c0016555:	83 c4 10             	add    esp,0x10
c0016558:	83 c4 0c             	add    esp,0xc
c001655b:	c3                   	ret    

c001655c <LogicalDisk::open(int, int, void*)>:
c001655c:	83 ec 18             	sub    esp,0x18
c001655f:	68 70 bb 02 c0       	push   0xc002bb70
c0016564:	e8 27 43 00 00       	call   c001a890 <Krnl::panic(char const*)>
c0016569:	83 c8 ff             	or     eax,0xffffffff
c001656c:	83 c4 1c             	add    esp,0x1c
c001656f:	c3                   	ret    

c0016570 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016570:	53                   	push   ebx
c0016571:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016575:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016579:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001657d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016583:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016589:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001658f:	77 10                	ja     c00165a1 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016591:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0016597:	89 d3                	mov    ebx,edx
c0016599:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001659f:	72 05                	jb     c00165a6 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00165a1:	83 c8 ff             	or     eax,0xffffffff
c00165a4:	89 c2                	mov    edx,eax
c00165a6:	5b                   	pop    ebx
c00165a7:	c3                   	ret    

c00165a8 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00165a8:	56                   	push   esi
c00165a9:	83 c8 ff             	or     eax,0xffffffff
c00165ac:	53                   	push   ebx
c00165ad:	89 c2                	mov    edx,eax
c00165af:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00165b3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00165b7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00165bb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00165c1:	77 27                	ja     c00165ea <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00165c3:	89 d8                	mov    eax,ebx
c00165c5:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00165cb:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00165d1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00165d6:	89 c2                	mov    edx,eax
c00165d8:	73 10                	jae    c00165ea <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00165da:	89 c8                	mov    eax,ecx
c00165dc:	89 da                	mov    edx,ebx
c00165de:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00165e4:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00165ea:	5b                   	pop    ebx
c00165eb:	5e                   	pop    esi
c00165ec:	c3                   	ret    
c00165ed:	90                   	nop

c00165ee <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00165ee:	83 ec 1c             	sub    esp,0x1c
c00165f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00165f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00165f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00165fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016601:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016605:	89 04 24             	mov    DWORD PTR [esp],eax
c0016608:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001660c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016610:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016614:	83 ec 08             	sub    esp,0x8
c0016617:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001661b:	50                   	push   eax
c001661c:	e8 bf de ff ff       	call   c00144e0 <Device::Device(char const*)>
c0016621:	83 c4 10             	add    esp,0x10
c0016624:	ba f4 bb 02 c0       	mov    edx,0xc002bbf4
c0016629:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001662d:	89 10                	mov    DWORD PTR [eax],edx
c001662f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016633:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001663a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001663e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016645:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016649:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016653:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016657:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001665b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001665f:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016665:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001666b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001666f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016672:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016676:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001667c:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016682:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016686:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001668a:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016690:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016694:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001669e:	90                   	nop
c001669f:	83 c4 1c             	add    esp,0x1c
c00166a2:	c3                   	ret    
c00166a3:	90                   	nop

c00166a4 <LogicalDisk::assignDriveLetter()>:
c00166a4:	55                   	push   ebp
c00166a5:	57                   	push   edi
c00166a6:	56                   	push   esi
c00166a7:	53                   	push   ebx
c00166a8:	83 ec 14             	sub    esp,0x14
c00166ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166af:	8b 3d e0 f4 02 c0    	mov    edi,DWORD PTR ds:0xc002f4e0
c00166b5:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00166bb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00166bf:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00166c5:	8b 3d e4 f4 02 c0    	mov    edi,DWORD PTR ds:0xc002f4e4
c00166cb:	3c 01                	cmp    al,0x1
c00166cd:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00166d1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00166d5:	19 c0                	sbb    eax,eax
c00166d7:	83 e0 02             	and    eax,0x2
c00166da:	83 c0 41             	add    eax,0x41
c00166dd:	0f be e8             	movsx  ebp,al
c00166e0:	3c 43                	cmp    al,0x43
c00166e2:	75 10                	jne    c00166f4 <LogicalDisk::assignDriveLetter()+0x50>
c00166e4:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00166eb:	75 5d                	jne    c001674a <LogicalDisk::assignDriveLetter()+0xa6>
c00166ed:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00166f2:	75 56                	jne    c001674a <LogicalDisk::assignDriveLetter()+0xa6>
c00166f4:	8d 75 bf             	lea    esi,[ebp-0x41]
c00166f7:	ba 01 00 00 00       	mov    edx,0x1
c00166fc:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016700:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016704:	d3 e2                	shl    edx,cl
c0016706:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001670a:	89 d7                	mov    edi,edx
c001670c:	89 d6                	mov    esi,edx
c001670e:	c1 ff 1f             	sar    edi,0x1f
c0016711:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016715:	21 f9                	and    ecx,edi
c0016717:	09 d1                	or     ecx,edx
c0016719:	75 2f                	jne    c001674a <LogicalDisk::assignDriveLetter()+0xa6>
c001671b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001671f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016723:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016729:	09 f2                	or     edx,esi
c001672b:	89 15 e0 f4 02 c0    	mov    DWORD PTR ds:0xc002f4e0,edx
c0016731:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016735:	09 fa                	or     edx,edi
c0016737:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001673b:	89 15 e4 f4 02 c0    	mov    DWORD PTR ds:0xc002f4e4,edx
c0016741:	89 1c bd 00 f5 02 c0 	mov    DWORD PTR [edi*4-0x3ffd0b00],ebx
c0016748:	eb 08                	jmp    c0016752 <LogicalDisk::assignDriveLetter()+0xae>
c001674a:	45                   	inc    ebp
c001674b:	40                   	inc    eax
c001674c:	3c 5b                	cmp    al,0x5b
c001674e:	75 90                	jne    c00166e0 <LogicalDisk::assignDriveLetter()+0x3c>
c0016750:	31 c0                	xor    eax,eax
c0016752:	83 c4 14             	add    esp,0x14
c0016755:	5b                   	pop    ebx
c0016756:	5e                   	pop    esi
c0016757:	5f                   	pop    edi
c0016758:	5d                   	pop    ebp
c0016759:	c3                   	ret    

c001675a <LogicalDisk::mount()>:
c001675a:	56                   	push   esi
c001675b:	53                   	push   ebx
c001675c:	50                   	push   eax
c001675d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016761:	8b 1d 74 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f074
c0016767:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016771:	85 db                	test   ebx,ebx
c0016773:	74 50                	je     c00167c5 <LogicalDisk::mount()+0x6b>
c0016775:	50                   	push   eax
c0016776:	50                   	push   eax
c0016777:	ff 35 28 24 03 c0    	push   DWORD PTR ds:0xc0032428
c001677d:	68 94 bb 02 c0       	push   0xc002bb94
c0016782:	e8 46 c7 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0016787:	83 c4 0c             	add    esp,0xc
c001678a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016791:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016793:	83 e8 41             	sub    eax,0x41
c0016796:	50                   	push   eax
c0016797:	56                   	push   esi
c0016798:	53                   	push   ebx
c0016799:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001679c:	83 c4 10             	add    esp,0x10
c001679f:	84 c0                	test   al,al
c00167a1:	74 08                	je     c00167ab <LogicalDisk::mount()+0x51>
c00167a3:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00167a9:	eb 1c                	jmp    c00167c7 <LogicalDisk::mount()+0x6d>
c00167ab:	51                   	push   ecx
c00167ac:	51                   	push   ecx
c00167ad:	ff 35 28 24 03 c0    	push   DWORD PTR ds:0xc0032428
c00167b3:	68 af bb 02 c0       	push   0xc002bbaf
c00167b8:	e8 10 c7 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00167bd:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00167c0:	83 c4 10             	add    esp,0x10
c00167c3:	eb ac                	jmp    c0016771 <LogicalDisk::mount()+0x17>
c00167c5:	31 c0                	xor    eax,eax
c00167c7:	5a                   	pop    edx
c00167c8:	5b                   	pop    ebx
c00167c9:	5e                   	pop    esi
c00167ca:	c3                   	ret    
c00167cb:	90                   	nop

c00167cc <LogicalDisk::unmount()>:
c00167cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167d0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00167da:	c3                   	ret    
c00167db:	90                   	nop

c00167dc <LogicalDisk::eject()>:
c00167dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167e0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00167e6:	8b 10                	mov    edx,DWORD PTR [eax]
c00167e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167ec:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00167ef:	90                   	nop

c00167f0 <LogicalDisk::unassignDriveLetter()>:
c00167f0:	57                   	push   edi
c00167f1:	56                   	push   esi
c00167f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167f6:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00167fd:	84 c9                	test   cl,cl
c00167ff:	75 0f                	jne    c0016810 <LogicalDisk::unassignDriveLetter()+0x20>
c0016801:	c7 44 24 0c ca bb 02 c0 	mov    DWORD PTR [esp+0xc],0xc002bbca
c0016809:	5e                   	pop    esi
c001680a:	5f                   	pop    edi
c001680b:	e9 80 40 00 00       	jmp    c001a890 <Krnl::panic(char const*)>
c0016810:	83 e9 41             	sub    ecx,0x41
c0016813:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001681a:	b8 01 00 00 00       	mov    eax,0x1
c001681f:	c7 04 8d 00 f5 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd0b00],0x0
c001682a:	d3 e0                	shl    eax,cl
c001682c:	89 c7                	mov    edi,eax
c001682e:	f7 d0                	not    eax
c0016830:	c1 ff 1f             	sar    edi,0x1f
c0016833:	21 05 e0 f4 02 c0    	and    DWORD PTR ds:0xc002f4e0,eax
c0016839:	89 fe                	mov    esi,edi
c001683b:	f7 d6                	not    esi
c001683d:	21 35 e4 f4 02 c0    	and    DWORD PTR ds:0xc002f4e4,esi
c0016843:	5e                   	pop    esi
c0016844:	5f                   	pop    edi
c0016845:	c3                   	ret    

c0016846 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016846:	57                   	push   edi
c0016847:	56                   	push   esi
c0016848:	53                   	push   ebx
c0016849:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001684d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016851:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016859:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001685f:	77 41                	ja     c00168a2 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016861:	99                   	cdq    
c0016862:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016868:	01 c8                	add    eax,ecx
c001686a:	11 da                	adc    edx,ebx
c001686c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016872:	19 d7                	sbb    edi,edx
c0016874:	72 33                	jb     c00168a9 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016876:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001687c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016882:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016886:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001688a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016890:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016896:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001689a:	5b                   	pop    ebx
c001689b:	5e                   	pop    esi
c001689c:	5f                   	pop    edi
c001689d:	e9 ee 0a 00 00       	jmp    c0017390 <VCache::read(unsigned long long, int, void*)>
c00168a2:	b8 05 00 00 00       	mov    eax,0x5
c00168a7:	eb 05                	jmp    c00168ae <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00168a9:	b8 07 00 00 00       	mov    eax,0x7
c00168ae:	5b                   	pop    ebx
c00168af:	5e                   	pop    esi
c00168b0:	5f                   	pop    edi
c00168b1:	c3                   	ret    

c00168b2 <LogicalDisk::write(unsigned long long, int, void*)>:
c00168b2:	57                   	push   edi
c00168b3:	56                   	push   esi
c00168b4:	53                   	push   ebx
c00168b5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00168b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00168bd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00168c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00168c5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00168cb:	77 41                	ja     c001690e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00168cd:	99                   	cdq    
c00168ce:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00168d4:	01 c8                	add    eax,ecx
c00168d6:	11 da                	adc    edx,ebx
c00168d8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00168de:	19 d7                	sbb    edi,edx
c00168e0:	72 33                	jb     c0016915 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00168e2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00168e8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00168ee:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00168f2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00168f6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00168fc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016902:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016906:	5b                   	pop    ebx
c0016907:	5e                   	pop    esi
c0016908:	5f                   	pop    edi
c0016909:	e9 96 09 00 00       	jmp    c00172a4 <VCache::write(unsigned long long, int, void*)>
c001690e:	b8 05 00 00 00       	mov    eax,0x5
c0016913:	eb 05                	jmp    c001691a <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016915:	b8 07 00 00 00       	mov    eax,0x7
c001691a:	5b                   	pop    ebx
c001691b:	5e                   	pop    esi
c001691c:	5f                   	pop    edi
c001691d:	c3                   	ret    

c001691e <Mouse::Mouse(char const*)>:
c001691e:	83 ec 0c             	sub    esp,0xc
c0016921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016925:	83 ec 08             	sub    esp,0x8
c0016928:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001692c:	50                   	push   eax
c001692d:	e8 ae db ff ff       	call   c00144e0 <Device::Device(char const*)>
c0016932:	83 c4 10             	add    esp,0x10
c0016935:	ba 20 bc 02 c0       	mov    edx,0xc002bc20
c001693a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001693e:	89 10                	mov    DWORD PTR [eax],edx
c0016940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016944:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001694e:	90                   	nop
c001694f:	83 c4 0c             	add    esp,0xc
c0016952:	c3                   	ret    
c0016953:	90                   	nop

c0016954 <Mouse::~Mouse()>:
c0016954:	83 ec 0c             	sub    esp,0xc
c0016957:	ba 20 bc 02 c0       	mov    edx,0xc002bc20
c001695c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016960:	89 10                	mov    DWORD PTR [eax],edx
c0016962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016966:	83 ec 0c             	sub    esp,0xc
c0016969:	50                   	push   eax
c001696a:	e8 65 d8 ff ff       	call   c00141d4 <Device::~Device()>
c001696f:	83 c4 10             	add    esp,0x10
c0016972:	90                   	nop
c0016973:	83 c4 0c             	add    esp,0xc
c0016976:	c3                   	ret    
c0016977:	90                   	nop

c0016978 <Mouse::~Mouse()>:
c0016978:	83 ec 0c             	sub    esp,0xc
c001697b:	83 ec 0c             	sub    esp,0xc
c001697e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016982:	e8 cd ff ff ff       	call   c0016954 <Mouse::~Mouse()>
c0016987:	83 c4 10             	add    esp,0x10
c001698a:	83 ec 08             	sub    esp,0x8
c001698d:	68 58 01 00 00       	push   0x158
c0016992:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016996:	e8 52 c4 ff ff       	call   c0012ded <operator delete(void*, unsigned long)>
c001699b:	83 c4 10             	add    esp,0x10
c001699e:	83 c4 0c             	add    esp,0xc
c00169a1:	c3                   	ret    

c00169a2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00169a2:	55                   	push   ebp
c00169a3:	57                   	push   edi
c00169a4:	56                   	push   esi
c00169a5:	53                   	push   ebx
c00169a6:	81 ec 20 01 00 00    	sub    esp,0x120
c00169ac:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c00169b3:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00169ba:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00169c1:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00169c8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00169cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00169d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00169d4:	56                   	push   esi
c00169d5:	68 44 bc 02 c0       	push   0xc002bc44
c00169da:	e8 ee c4 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00169df:	58                   	pop    eax
c00169e0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00169e7:	e8 f0 db ff ff       	call   c00145dc <Device::getName()>
c00169ec:	5a                   	pop    edx
c00169ed:	59                   	pop    ecx
c00169ee:	50                   	push   eax
c00169ef:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00169f3:	53                   	push   ebx
c00169f4:	e8 2f 9e fe ff       	call   c0000828 <strcpy>
c00169f9:	5d                   	pop    ebp
c00169fa:	58                   	pop    eax
c00169fb:	68 75 bc 02 c0       	push   0xc002bc75
c0016a00:	53                   	push   ebx
c0016a01:	e8 62 9f fe ff       	call   c0000968 <strcat>
c0016a06:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016a0d:	e8 1c 8f ff ff       	call   c000f92e <malloc>
c0016a12:	83 c4 0c             	add    esp,0xc
c0016a15:	89 c5                	mov    ebp,eax
c0016a17:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016a1b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016a1f:	57                   	push   edi
c0016a20:	56                   	push   esi
c0016a21:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016a28:	53                   	push   ebx
c0016a29:	50                   	push   eax
c0016a2a:	e8 bf fb ff ff       	call   c00165ee <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a2f:	83 c4 14             	add    esp,0x14
c0016a32:	55                   	push   ebp
c0016a33:	e8 6c fc ff ff       	call   c00166a4 <LogicalDisk::assignDriveLetter()>
c0016a38:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016a3b:	0f be d8             	movsx  ebx,al
c0016a3e:	e8 17 fd ff ff       	call   c001675a <LogicalDisk::mount()>
c0016a43:	58                   	pop    eax
c0016a44:	5a                   	pop    edx
c0016a45:	55                   	push   ebp
c0016a46:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016a4d:	e8 9e d8 ff ff       	call   c00142f0 <Device::addChild(Device*)>
c0016a52:	59                   	pop    ecx
c0016a53:	5e                   	pop    esi
c0016a54:	53                   	push   ebx
c0016a55:	68 80 bc 02 c0       	push   0xc002bc80
c0016a5a:	e8 6e c4 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0016a5f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016a65:	5b                   	pop    ebx
c0016a66:	5e                   	pop    esi
c0016a67:	5f                   	pop    edi
c0016a68:	5d                   	pop    ebp
c0016a69:	c3                   	ret    

c0016a6a <createPartitionsForDisk(PhysicalDisk*)>:
c0016a6a:	55                   	push   ebp
c0016a6b:	57                   	push   edi
c0016a6c:	56                   	push   esi
c0016a6d:	53                   	push   ebx
c0016a6e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016a74:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016a7b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016a81:	3d 00 02 00 00       	cmp    eax,0x200
c0016a86:	74 27                	je     c0016aaf <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016a88:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016a8e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016a94:	83 ec 10             	sub    esp,0x10
c0016a97:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016a9b:	99                   	cdq    
c0016a9c:	c1 e6 0a             	shl    esi,0xa
c0016a9f:	52                   	push   edx
c0016aa0:	89 fd                	mov    ebp,edi
c0016aa2:	50                   	push   eax
c0016aa3:	55                   	push   ebp
c0016aa4:	56                   	push   esi
c0016aa5:	e8 ba 07 01 00       	call   c0027264 <__udivdi3>
c0016aaa:	e9 b1 00 00 00       	jmp    c0016b60 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016aaf:	83 ec 0c             	sub    esp,0xc
c0016ab2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ab4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016ab8:	56                   	push   esi
c0016ab9:	6a 01                	push   0x1
c0016abb:	6a 00                	push   0x0
c0016abd:	6a 00                	push   0x0
c0016abf:	53                   	push   ebx
c0016ac0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016ac3:	83 c4 20             	add    esp,0x20
c0016ac6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016ace:	75 0a                	jne    c0016ada <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016ad0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016ad8:	74 2c                	je     c0016b06 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016ada:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016ae0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016ae6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016aec:	83 ec 10             	sub    esp,0x10
c0016aef:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016af3:	89 f7                	mov    edi,esi
c0016af5:	c1 e0 0a             	shl    eax,0xa
c0016af8:	c1 ff 1f             	sar    edi,0x1f
c0016afb:	57                   	push   edi
c0016afc:	56                   	push   esi
c0016afd:	52                   	push   edx
c0016afe:	50                   	push   eax
c0016aff:	e8 60 07 01 00       	call   c0027264 <__udivdi3>
c0016b04:	eb 5a                	jmp    c0016b60 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016b06:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016b0d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016b14:	83 e1 7f             	and    ecx,0x7f
c0016b17:	83 e0 7f             	and    eax,0x7f
c0016b1a:	01 c1                	add    ecx,eax
c0016b1c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016b23:	83 e0 7f             	and    eax,0x7f
c0016b26:	01 c1                	add    ecx,eax
c0016b28:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016b2f:	83 e0 7f             	and    eax,0x7f
c0016b32:	00 c1                	add    cl,al
c0016b34:	74 41                	je     c0016b77 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016b36:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b3c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b42:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b48:	83 ec 10             	sub    esp,0x10
c0016b4b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b4f:	89 f7                	mov    edi,esi
c0016b51:	c1 e0 0a             	shl    eax,0xa
c0016b54:	c1 ff 1f             	sar    edi,0x1f
c0016b57:	57                   	push   edi
c0016b58:	56                   	push   esi
c0016b59:	52                   	push   edx
c0016b5a:	50                   	push   eax
c0016b5b:	e8 04 07 01 00       	call   c0027264 <__udivdi3>
c0016b60:	83 c4 14             	add    esp,0x14
c0016b63:	52                   	push   edx
c0016b64:	50                   	push   eax
c0016b65:	6a 00                	push   0x0
c0016b67:	6a 00                	push   0x0
c0016b69:	53                   	push   ebx
c0016b6a:	e8 33 fe ff ff       	call   c00169a2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016b6f:	83 c4 20             	add    esp,0x20
c0016b72:	e9 79 01 00 00       	jmp    c0016cf0 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016b77:	89 f0                	mov    eax,esi
c0016b79:	31 f6                	xor    esi,esi
c0016b7b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016b82:	75 02                	jne    c0016b86 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016b84:	89 f1                	mov    ecx,esi
c0016b86:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016b8d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016b94:	c1 e2 08             	shl    edx,0x8
c0016b97:	c1 e7 10             	shl    edi,0x10
c0016b9a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016ba2:	09 fa                	or     edx,edi
c0016ba4:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016bac:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016bb3:	83 c0 10             	add    eax,0x10
c0016bb6:	09 fa                	or     edx,edi
c0016bb8:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016bbf:	c1 e7 18             	shl    edi,0x18
c0016bc2:	09 fa                	or     edx,edi
c0016bc4:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016bcb:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016bcf:	c1 e7 10             	shl    edi,0x10
c0016bd2:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016bd9:	c1 e2 08             	shl    edx,0x8
c0016bdc:	09 fa                	or     edx,edi
c0016bde:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016be5:	09 fa                	or     edx,edi
c0016be7:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016bee:	c1 e7 18             	shl    edi,0x18
c0016bf1:	09 fa                	or     edx,edi
c0016bf3:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016bf7:	46                   	inc    esi
c0016bf8:	83 fe 04             	cmp    esi,0x4
c0016bfb:	0f 85 7a ff ff ff    	jne    c0016b7b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016c01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c05:	83 f0 01             	xor    eax,0x1
c0016c08:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016c0c:	75 57                	jne    c0016c65 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016c0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c12:	83 f0 01             	xor    eax,0x1
c0016c15:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016c19:	75 4a                	jne    c0016c65 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016c1b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016c1f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016c27:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016c2f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016c35:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016c3b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016c41:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016c45:	89 f7                	mov    edi,esi
c0016c47:	c1 e0 0a             	shl    eax,0xa
c0016c4a:	c1 ff 1f             	sar    edi,0x1f
c0016c4d:	57                   	push   edi
c0016c4e:	56                   	push   esi
c0016c4f:	52                   	push   edx
c0016c50:	50                   	push   eax
c0016c51:	e8 0e 06 01 00       	call   c0027264 <__udivdi3>
c0016c56:	83 c4 10             	add    esp,0x10
c0016c59:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c5d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c61:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016c65:	84 c9                	test   cl,cl
c0016c67:	74 53                	je     c0016cbc <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016c69:	0f b6 c9             	movzx  ecx,cl
c0016c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c70:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c74:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c78:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c80:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c84:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016c88:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016c8c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c90:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016c94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c98:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c9c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016ca0:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016ca4:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016ca8:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016cac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016cb0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016cb4:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016cb8:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016cbc:	31 ed                	xor    ebp,ebp
c0016cbe:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016cc2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016cc6:	89 f8                	mov    eax,edi
c0016cc8:	09 f0                	or     eax,esi
c0016cca:	74 1e                	je     c0016cea <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016ccc:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016cd0:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016cd4:	89 d1                	mov    ecx,edx
c0016cd6:	09 c1                	or     ecx,eax
c0016cd8:	74 10                	je     c0016cea <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016cda:	83 ec 0c             	sub    esp,0xc
c0016cdd:	57                   	push   edi
c0016cde:	56                   	push   esi
c0016cdf:	52                   	push   edx
c0016ce0:	50                   	push   eax
c0016ce1:	53                   	push   ebx
c0016ce2:	e8 bb fc ff ff       	call   c00169a2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016ce7:	83 c4 20             	add    esp,0x20
c0016cea:	45                   	inc    ebp
c0016ceb:	83 fd 04             	cmp    ebp,0x4
c0016cee:	75 ce                	jne    c0016cbe <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016cf0:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016cf6:	5b                   	pop    ebx
c0016cf7:	5e                   	pop    esi
c0016cf8:	5f                   	pop    edi
c0016cf9:	5d                   	pop    ebp
c0016cfa:	c3                   	ret    
c0016cfb:	90                   	nop

c0016cfc <Serial::Serial(char const*)>:
c0016cfc:	83 ec 0c             	sub    esp,0xc
c0016cff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d03:	83 ec 08             	sub    esp,0x8
c0016d06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d0a:	50                   	push   eax
c0016d0b:	e8 d0 d7 ff ff       	call   c00144e0 <Device::Device(char const*)>
c0016d10:	83 c4 10             	add    esp,0x10
c0016d13:	ba ac bc 02 c0       	mov    edx,0xc002bcac
c0016d18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d1c:	89 10                	mov    DWORD PTR [eax],edx
c0016d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d22:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016d2c:	90                   	nop
c0016d2d:	83 c4 0c             	add    esp,0xc
c0016d30:	c3                   	ret    
c0016d31:	90                   	nop

c0016d32 <Serial::~Serial()>:
c0016d32:	83 ec 0c             	sub    esp,0xc
c0016d35:	ba ac bc 02 c0       	mov    edx,0xc002bcac
c0016d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d3e:	89 10                	mov    DWORD PTR [eax],edx
c0016d40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d44:	83 ec 0c             	sub    esp,0xc
c0016d47:	50                   	push   eax
c0016d48:	e8 87 d4 ff ff       	call   c00141d4 <Device::~Device()>
c0016d4d:	83 c4 10             	add    esp,0x10
c0016d50:	90                   	nop
c0016d51:	83 c4 0c             	add    esp,0xc
c0016d54:	c3                   	ret    
c0016d55:	90                   	nop

c0016d56 <Serial::~Serial()>:
c0016d56:	83 ec 0c             	sub    esp,0xc
c0016d59:	83 ec 0c             	sub    esp,0xc
c0016d5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d60:	e8 cd ff ff ff       	call   c0016d32 <Serial::~Serial()>
c0016d65:	83 c4 10             	add    esp,0x10
c0016d68:	83 ec 08             	sub    esp,0x8
c0016d6b:	68 58 01 00 00       	push   0x158
c0016d70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d74:	e8 74 c0 ff ff       	call   c0012ded <operator delete(void*, unsigned long)>
c0016d79:	83 c4 10             	add    esp,0x10
c0016d7c:	83 c4 0c             	add    esp,0xc
c0016d7f:	c3                   	ret    

c0016d80 <Timer::Timer(char const*)>:
c0016d80:	83 ec 0c             	sub    esp,0xc
c0016d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d87:	83 ec 08             	sub    esp,0x8
c0016d8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d8e:	50                   	push   eax
c0016d8f:	e8 4c d7 ff ff       	call   c00144e0 <Device::Device(char const*)>
c0016d94:	83 c4 10             	add    esp,0x10
c0016d97:	ba f0 bc 02 c0       	mov    edx,0xc002bcf0
c0016d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016da0:	89 10                	mov    DWORD PTR [eax],edx
c0016da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016da6:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016db0:	90                   	nop
c0016db1:	83 c4 0c             	add    esp,0xc
c0016db4:	c3                   	ret    
c0016db5:	90                   	nop

c0016db6 <Timer::~Timer()>:
c0016db6:	83 ec 0c             	sub    esp,0xc
c0016db9:	ba f0 bc 02 c0       	mov    edx,0xc002bcf0
c0016dbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dc2:	89 10                	mov    DWORD PTR [eax],edx
c0016dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dc8:	83 ec 0c             	sub    esp,0xc
c0016dcb:	50                   	push   eax
c0016dcc:	e8 03 d4 ff ff       	call   c00141d4 <Device::~Device()>
c0016dd1:	83 c4 10             	add    esp,0x10
c0016dd4:	90                   	nop
c0016dd5:	83 c4 0c             	add    esp,0xc
c0016dd8:	c3                   	ret    
c0016dd9:	90                   	nop

c0016dda <Timer::~Timer()>:
c0016dda:	83 ec 0c             	sub    esp,0xc
c0016ddd:	83 ec 0c             	sub    esp,0xc
c0016de0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016de4:	e8 cd ff ff ff       	call   c0016db6 <Timer::~Timer()>
c0016de9:	83 c4 10             	add    esp,0x10
c0016dec:	83 ec 08             	sub    esp,0x8
c0016def:	68 5c 01 00 00       	push   0x15c
c0016df4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016df8:	e8 f0 bf ff ff       	call   c0012ded <operator delete(void*, unsigned long)>
c0016dfd:	83 c4 10             	add    esp,0x10
c0016e00:	83 c4 0c             	add    esp,0xc
c0016e03:	c3                   	ret    

c0016e04 <Timer::read()>:
c0016e04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e08:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016e0e:	c3                   	ret    

c0016e0f <timerHandler(unsigned long long)>:
c0016e0f:	55                   	push   ebp
c0016e10:	57                   	push   edi
c0016e11:	56                   	push   esi
c0016e12:	53                   	push   ebx
c0016e13:	83 ec 0c             	sub    esp,0xc
c0016e16:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016e1a:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016e1e:	01 35 70 f5 02 c0    	add    DWORD PTR ds:0xc002f570,esi
c0016e24:	11 3d 74 f5 02 c0    	adc    DWORD PTR ds:0xc002f574,edi
c0016e2a:	80 3d ed ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eeed,0x0
c0016e31:	0f 84 42 01 00 00    	je     c0016f79 <timerHandler(unsigned long long)+0x16a>
c0016e37:	fa                   	cli    
c0016e38:	ff 05 28 24 03 c0    	inc    DWORD PTR ds:0xc0032428
c0016e3e:	83 ec 0c             	sub    esp,0xc
c0016e41:	ff 05 24 24 03 c0    	inc    DWORD PTR ds:0xc0032424
c0016e47:	68 38 24 03 c0       	push   0xc0032438
c0016e4c:	e8 99 24 01 00       	call   c00292ea <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e51:	83 c4 10             	add    esp,0x10
c0016e54:	84 c0                	test   al,al
c0016e56:	0f 85 a2 00 00 00    	jne    c0016efe <timerHandler(unsigned long long)+0xef>
c0016e5c:	83 ec 0c             	sub    esp,0xc
c0016e5f:	68 38 24 03 c0       	push   0xc0032438
c0016e64:	e8 9d 24 01 00       	call   c0029306 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e69:	83 c4 10             	add    esp,0x10
c0016e6c:	89 c3                	mov    ebx,eax
c0016e6e:	83 ec 0c             	sub    esp,0xc
c0016e71:	68 38 24 03 c0       	push   0xc0032438
c0016e76:	e8 8b 24 01 00       	call   c0029306 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e7b:	c7 04 24 38 24 03 c0 	mov    DWORD PTR [esp],0xc0032438
c0016e82:	89 c5                	mov    ebp,eax
c0016e84:	e8 85 24 01 00       	call   c002930e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e89:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016e8c:	83 c4 10             	add    esp,0x10
c0016e8f:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016e92:	39 15 70 f5 02 c0    	cmp    DWORD PTR ds:0xc002f570,edx
c0016e98:	a1 74 f5 02 c0       	mov    eax,ds:0xc002f574
c0016e9d:	19 c8                	sbb    eax,ecx
c0016e9f:	72 21                	jb     c0016ec2 <timerHandler(unsigned long long)+0xb3>
c0016ea1:	83 ec 0c             	sub    esp,0xc
c0016ea4:	55                   	push   ebp
c0016ea5:	e8 40 7b 00 00       	call   c001e9ea <unblockTask(ThreadControlBlock*)>
c0016eaa:	83 c4 10             	add    esp,0x10
c0016ead:	39 eb                	cmp    ebx,ebp
c0016eaf:	75 21                	jne    c0016ed2 <timerHandler(unsigned long long)+0xc3>
c0016eb1:	83 ec 0c             	sub    esp,0xc
c0016eb4:	68 38 24 03 c0       	push   0xc0032438
c0016eb9:	e8 48 24 01 00       	call   c0029306 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ebe:	89 c3                	mov    ebx,eax
c0016ec0:	eb 0d                	jmp    c0016ecf <timerHandler(unsigned long long)+0xc0>
c0016ec2:	50                   	push   eax
c0016ec3:	50                   	push   eax
c0016ec4:	55                   	push   ebp
c0016ec5:	68 38 24 03 c0       	push   0xc0032438
c0016eca:	e8 ed 24 01 00       	call   c00293bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016ecf:	83 c4 10             	add    esp,0x10
c0016ed2:	83 ec 0c             	sub    esp,0xc
c0016ed5:	68 38 24 03 c0       	push   0xc0032438
c0016eda:	e8 0b 24 01 00       	call   c00292ea <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016edf:	83 c4 10             	add    esp,0x10
c0016ee2:	84 c0                	test   al,al
c0016ee4:	75 18                	jne    c0016efe <timerHandler(unsigned long long)+0xef>
c0016ee6:	83 ec 0c             	sub    esp,0xc
c0016ee9:	68 38 24 03 c0       	push   0xc0032438
c0016eee:	e8 13 24 01 00       	call   c0029306 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ef3:	83 c4 10             	add    esp,0x10
c0016ef6:	39 d8                	cmp    eax,ebx
c0016ef8:	0f 85 70 ff ff ff    	jne    c0016e6e <timerHandler(unsigned long long)+0x5f>
c0016efe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f03:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016f07:	74 3d                	je     c0016f46 <timerHandler(unsigned long long)+0x137>
c0016f09:	80 3d ec ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eeec,0x0
c0016f10:	74 34                	je     c0016f46 <timerHandler(unsigned long long)+0x137>
c0016f12:	fa                   	cli    
c0016f13:	ff 05 28 24 03 c0    	inc    DWORD PTR ds:0xc0032428
c0016f19:	31 d2                	xor    edx,edx
c0016f1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f20:	89 f9                	mov    ecx,edi
c0016f22:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016f25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f2a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016f2d:	39 c6                	cmp    esi,eax
c0016f2f:	19 d1                	sbb    ecx,edx
c0016f31:	72 05                	jb     c0016f38 <timerHandler(unsigned long long)+0x129>
c0016f33:	e8 ee 75 00 00       	call   c001e526 <schedule()>
c0016f38:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c0016f3d:	48                   	dec    eax
c0016f3e:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c0016f43:	75 01                	jne    c0016f46 <timerHandler(unsigned long long)+0x137>
c0016f45:	fb                   	sti    
c0016f46:	a1 24 24 03 c0       	mov    eax,ds:0xc0032424
c0016f4b:	48                   	dec    eax
c0016f4c:	a3 24 24 03 c0       	mov    ds:0xc0032424,eax
c0016f51:	75 18                	jne    c0016f6b <timerHandler(unsigned long long)+0x15c>
c0016f53:	83 3d 20 24 03 c0 00 	cmp    DWORD PTR ds:0xc0032420,0x0
c0016f5a:	74 0f                	je     c0016f6b <timerHandler(unsigned long long)+0x15c>
c0016f5c:	c7 05 20 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032420,0x0
c0016f66:	e8 bb 75 00 00       	call   c001e526 <schedule()>
c0016f6b:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c0016f70:	48                   	dec    eax
c0016f71:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c0016f76:	75 01                	jne    c0016f79 <timerHandler(unsigned long long)+0x16a>
c0016f78:	fb                   	sti    
c0016f79:	83 c4 0c             	add    esp,0xc
c0016f7c:	5b                   	pop    ebx
c0016f7d:	5e                   	pop    esi
c0016f7e:	5f                   	pop    edi
c0016f7f:	5d                   	pop    ebp
c0016f80:	c3                   	ret    

c0016f81 <setupTimer(int)>:
c0016f81:	57                   	push   edi
c0016f82:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0016f87:	56                   	push   esi
c0016f88:	53                   	push   ebx
c0016f89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f8d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f93:	83 ec 0c             	sub    esp,0xc
c0016f96:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f9c:	e8 3b d6 ff ff       	call   c00145dc <Device::getName()>
c0016fa1:	83 c4 10             	add    esp,0x10
c0016fa4:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016fa7:	0f 85 8d 00 00 00    	jne    c001703a <setupTimer(int)+0xb9>
c0016fad:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0016fb2:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016fb9:	74 7f                	je     c001703a <setupTimer(int)+0xb9>
c0016fbb:	83 ec 0c             	sub    esp,0xc
c0016fbe:	68 5c 01 00 00       	push   0x15c
c0016fc3:	e8 66 89 ff ff       	call   c000f92e <malloc>
c0016fc8:	89 04 24             	mov    DWORD PTR [esp],eax
c0016fcb:	89 c3                	mov    ebx,eax
c0016fcd:	e8 64 fe 00 00       	call   c0026e36 <PIT::PIT()>
c0016fd2:	59                   	pop    ecx
c0016fd3:	5f                   	pop    edi
c0016fd4:	53                   	push   ebx
c0016fd5:	ff 35 e8 ee 02 c0    	push   DWORD PTR ds:0xc002eee8
c0016fdb:	e8 10 d3 ff ff       	call   c00142f0 <Device::addChild(Device*)>
c0016fe0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fe2:	6a 00                	push   0x0
c0016fe4:	6a 00                	push   0x0
c0016fe6:	56                   	push   esi
c0016fe7:	53                   	push   ebx
c0016fe8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016feb:	83 c4 14             	add    esp,0x14
c0016fee:	68 60 01 00 00       	push   0x160
c0016ff3:	e8 36 89 ff ff       	call   c000f92e <malloc>
c0016ff8:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ffb:	89 c7                	mov    edi,eax
c0016ffd:	e8 e4 fc 00 00       	call   c0026ce6 <APICTimer::APICTimer()>
c0017002:	6a 00                	push   0x0
c0017004:	6a 00                	push   0x0
c0017006:	56                   	push   esi
c0017007:	57                   	push   edi
c0017008:	e8 db fb 00 00       	call   c0026be8 <APICTimer::open(int, int, void*)>
c001700d:	83 c4 20             	add    esp,0x20
c0017010:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017012:	6a 00                	push   0x0
c0017014:	6a 00                	push   0x0
c0017016:	6a 00                	push   0x0
c0017018:	53                   	push   ebx
c0017019:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001701c:	58                   	pop    eax
c001701d:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0017022:	5a                   	pop    edx
c0017023:	57                   	push   edi
c0017024:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001702a:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0017030:	e8 bb d2 ff ff       	call   c00142f0 <Device::addChild(Device*)>
c0017035:	83 c4 10             	add    esp,0x10
c0017038:	eb 33                	jmp    c001706d <setupTimer(int)+0xec>
c001703a:	83 ec 0c             	sub    esp,0xc
c001703d:	68 5c 01 00 00       	push   0x15c
c0017042:	e8 e7 88 ff ff       	call   c000f92e <malloc>
c0017047:	89 04 24             	mov    DWORD PTR [esp],eax
c001704a:	89 c3                	mov    ebx,eax
c001704c:	e8 e5 fd 00 00       	call   c0026e36 <PIT::PIT()>
c0017051:	58                   	pop    eax
c0017052:	5a                   	pop    edx
c0017053:	53                   	push   ebx
c0017054:	ff 35 e8 ee 02 c0    	push   DWORD PTR ds:0xc002eee8
c001705a:	e8 91 d2 ff ff       	call   c00142f0 <Device::addChild(Device*)>
c001705f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017061:	6a 00                	push   0x0
c0017063:	6a 00                	push   0x0
c0017065:	56                   	push   esi
c0017066:	53                   	push   ebx
c0017067:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001706a:	83 c4 20             	add    esp,0x20
c001706d:	89 d8                	mov    eax,ebx
c001706f:	5b                   	pop    ebx
c0017070:	5e                   	pop    esi
c0017071:	5f                   	pop    edi
c0017072:	c3                   	ret    
c0017073:	90                   	nop

c0017074 <VCache::VCache(PhysicalDisk*)>:
c0017074:	53                   	push   ebx
c0017075:	83 ec 18             	sub    esp,0x18
c0017078:	ba 20 bd 02 c0       	mov    edx,0xc002bd20
c001707d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017081:	89 10                	mov    DWORD PTR [eax],edx
c0017083:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017087:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001708e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017092:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0017099:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001709d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00170a4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00170ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170af:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00170b6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00170bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00170c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170cc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00170d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170d4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00170db:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c00170e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170e6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00170ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ee:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c00170f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170f6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00170fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170fe:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017105:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001710d:	83 ec 0c             	sub    esp,0xc
c0017110:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017114:	e8 15 88 ff ff       	call   c000f92e <malloc>
c0017119:	83 c4 10             	add    esp,0x10
c001711c:	89 c3                	mov    ebx,eax
c001711e:	83 ec 0c             	sub    esp,0xc
c0017121:	53                   	push   ebx
c0017122:	e8 a9 71 00 00       	call   c001e2d0 <Mutex::Mutex()>
c0017127:	83 c4 10             	add    esp,0x10
c001712a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001712e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0017131:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017135:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017139:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001713c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017140:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0017147:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001714b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017151:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017155:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017158:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001715c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0017162:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017168:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001716c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001716f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0017172:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017176:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001717a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001717e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017184:	05 00 01 00 00       	add    eax,0x100
c0017189:	c1 e0 04             	shl    eax,0x4
c001718c:	83 ec 0c             	sub    esp,0xc
c001718f:	50                   	push   eax
c0017190:	e8 99 87 ff ff       	call   c000f92e <malloc>
c0017195:	83 c4 10             	add    esp,0x10
c0017198:	89 c2                	mov    edx,eax
c001719a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001719e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00171a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171a5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00171ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171b0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00171b4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00171b8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00171be:	c1 e0 07             	shl    eax,0x7
c00171c1:	83 ec 0c             	sub    esp,0xc
c00171c4:	50                   	push   eax
c00171c5:	e8 64 87 ff ff       	call   c000f92e <malloc>
c00171ca:	83 c4 10             	add    esp,0x10
c00171cd:	89 c2                	mov    edx,eax
c00171cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171d3:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00171d6:	90                   	nop
c00171d7:	83 c4 18             	add    esp,0x18
c00171da:	5b                   	pop    ebx
c00171db:	c3                   	ret    

c00171dc <VCache::invalidateReadBuffer()>:
c00171dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171e0:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00171e6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00171ea:	c3                   	ret    
c00171eb:	90                   	nop

c00171ec <VCache::writeWriteBuffer()>:
c00171ec:	53                   	push   ebx
c00171ed:	83 ec 14             	sub    esp,0x14
c00171f0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00171f4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171f7:	8b 10                	mov    edx,DWORD PTR [eax]
c00171f9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00171fc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00171ff:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0017202:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0017205:	50                   	push   eax
c0017206:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017209:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0017210:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0017217:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001721b:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0017222:	83 c4 28             	add    esp,0x28
c0017225:	5b                   	pop    ebx
c0017226:	c3                   	ret    
c0017227:	90                   	nop

c0017228 <VCache::~VCache()>:
c0017228:	83 ec 0c             	sub    esp,0xc
c001722b:	ba 20 bd 02 c0       	mov    edx,0xc002bd20
c0017230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017234:	89 10                	mov    DWORD PTR [eax],edx
c0017236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001723a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001723d:	84 c0                	test   al,al
c001723f:	74 0f                	je     c0017250 <VCache::~VCache()+0x28>
c0017241:	83 ec 0c             	sub    esp,0xc
c0017244:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017248:	e8 9f ff ff ff       	call   c00171ec <VCache::writeWriteBuffer()>
c001724d:	83 c4 10             	add    esp,0x10
c0017250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017254:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0017257:	83 ec 0c             	sub    esp,0xc
c001725a:	50                   	push   eax
c001725b:	e8 de 86 ff ff       	call   c000f93e <free>
c0017260:	83 c4 10             	add    esp,0x10
c0017263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017267:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001726a:	83 ec 0c             	sub    esp,0xc
c001726d:	50                   	push   eax
c001726e:	e8 cb 86 ff ff       	call   c000f93e <free>
c0017273:	83 c4 10             	add    esp,0x10
c0017276:	90                   	nop
c0017277:	83 c4 0c             	add    esp,0xc
c001727a:	c3                   	ret    
c001727b:	90                   	nop

c001727c <VCache::~VCache()>:
c001727c:	83 ec 0c             	sub    esp,0xc
c001727f:	83 ec 0c             	sub    esp,0xc
c0017282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017286:	e8 9d ff ff ff       	call   c0017228 <VCache::~VCache()>
c001728b:	83 c4 10             	add    esp,0x10
c001728e:	83 ec 08             	sub    esp,0x8
c0017291:	6a 44                	push   0x44
c0017293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017297:	e8 51 bb ff ff       	call   c0012ded <operator delete(void*, unsigned long)>
c001729c:	83 c4 10             	add    esp,0x10
c001729f:	83 c4 0c             	add    esp,0xc
c00172a2:	c3                   	ret    
c00172a3:	90                   	nop

c00172a4 <VCache::write(unsigned long long, int, void*)>:
c00172a4:	55                   	push   ebp
c00172a5:	57                   	push   edi
c00172a6:	56                   	push   esi
c00172a7:	53                   	push   ebx
c00172a8:	83 ec 18             	sub    esp,0x18
c00172ab:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00172af:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00172b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00172b7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172ba:	e8 9f 75 00 00       	call   c001e85e <Semaphore::acquire()>
c00172bf:	83 c4 10             	add    esp,0x10
c00172c2:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00172c6:	74 0c                	je     c00172d4 <VCache::write(unsigned long long, int, void*)+0x30>
c00172c8:	83 ec 0c             	sub    esp,0xc
c00172cb:	53                   	push   ebx
c00172cc:	e8 0b ff ff ff       	call   c00171dc <VCache::invalidateReadBuffer()>
c00172d1:	83 c4 10             	add    esp,0x10
c00172d4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00172d8:	74 5d                	je     c0017337 <VCache::write(unsigned long long, int, void*)+0x93>
c00172da:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c00172dd:	89 e8                	mov    eax,ebp
c00172df:	99                   	cdq    
c00172e0:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00172e3:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00172e6:	89 c1                	mov    ecx,eax
c00172e8:	89 d0                	mov    eax,edx
c00172ea:	31 f1                	xor    ecx,esi
c00172ec:	31 f8                	xor    eax,edi
c00172ee:	09 c1                	or     ecx,eax
c00172f0:	75 39                	jne    c001732b <VCache::write(unsigned long long, int, void*)+0x87>
c00172f2:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00172f7:	75 32                	jne    c001732b <VCache::write(unsigned long long, int, void*)+0x87>
c00172f9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172fc:	89 ef                	mov    edi,ebp
c00172fe:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0017304:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017308:	0f af f9             	imul   edi,ecx
c001730b:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001730e:	fc                   	cld    
c001730f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017311:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017314:	40                   	inc    eax
c0017315:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0017318:	83 c0 80             	add    eax,0xffffff80
c001731b:	75 5d                	jne    c001737a <VCache::write(unsigned long long, int, void*)+0xd6>
c001731d:	83 ec 0c             	sub    esp,0xc
c0017320:	53                   	push   ebx
c0017321:	e8 c6 fe ff ff       	call   c00171ec <VCache::writeWriteBuffer()>
c0017326:	83 c4 10             	add    esp,0x10
c0017329:	eb 4f                	jmp    c001737a <VCache::write(unsigned long long, int, void*)+0xd6>
c001732b:	83 ec 0c             	sub    esp,0xc
c001732e:	53                   	push   ebx
c001732f:	e8 b8 fe ff ff       	call   c00171ec <VCache::writeWriteBuffer()>
c0017334:	83 c4 10             	add    esp,0x10
c0017337:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001733a:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c001733f:	7f 23                	jg     c0017364 <VCache::write(unsigned long long, int, void*)+0xc0>
c0017341:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0017344:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0017347:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001734b:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001734f:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0017352:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0017355:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001735b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001735f:	fc                   	cld    
c0017360:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017362:	eb 16                	jmp    c001737a <VCache::write(unsigned long long, int, void*)+0xd6>
c0017364:	83 ec 0c             	sub    esp,0xc
c0017367:	8b 10                	mov    edx,DWORD PTR [eax]
c0017369:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001736d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017371:	57                   	push   edi
c0017372:	56                   	push   esi
c0017373:	50                   	push   eax
c0017374:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017377:	83 c4 20             	add    esp,0x20
c001737a:	83 ec 0c             	sub    esp,0xc
c001737d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017380:	e8 13 7c 00 00       	call   c001ef98 <Semaphore::release()>
c0017385:	83 c4 1c             	add    esp,0x1c
c0017388:	31 c0                	xor    eax,eax
c001738a:	5b                   	pop    ebx
c001738b:	5e                   	pop    esi
c001738c:	5f                   	pop    edi
c001738d:	5d                   	pop    ebp
c001738e:	c3                   	ret    
c001738f:	90                   	nop

c0017390 <VCache::read(unsigned long long, int, void*)>:
c0017390:	55                   	push   ebp
c0017391:	57                   	push   edi
c0017392:	56                   	push   esi
c0017393:	53                   	push   ebx
c0017394:	83 ec 28             	sub    esp,0x28
c0017397:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001739b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001739f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00173a3:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00173a7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00173aa:	e8 af 74 00 00       	call   c001e85e <Semaphore::acquire()>
c00173af:	83 c4 10             	add    esp,0x10
c00173b2:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00173b6:	74 0c                	je     c00173c4 <VCache::read(unsigned long long, int, void*)+0x34>
c00173b8:	83 ec 0c             	sub    esp,0xc
c00173bb:	53                   	push   ebx
c00173bc:	e8 2b fe ff ff       	call   c00171ec <VCache::writeWriteBuffer()>
c00173c1:	83 c4 10             	add    esp,0x10
c00173c4:	83 fd 01             	cmp    ebp,0x1
c00173c7:	0f 85 81 00 00 00    	jne    c001744e <VCache::read(unsigned long long, int, void*)+0xbe>
c00173cd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00173d4:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00173db:	75 71                	jne    c001744e <VCache::read(unsigned long long, int, void*)+0xbe>
c00173dd:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c00173e0:	89 e9                	mov    ecx,ebp
c00173e2:	f7 d9                	neg    ecx
c00173e4:	89 c8                	mov    eax,ecx
c00173e6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00173ea:	c1 f8 1f             	sar    eax,0x1f
c00173ed:	21 f1                	and    ecx,esi
c00173ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173f3:	89 c8                	mov    eax,ecx
c00173f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00173f9:	21 f9                	and    ecx,edi
c00173fb:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00173ff:	89 ca                	mov    edx,ecx
c0017401:	74 0a                	je     c001740d <VCache::read(unsigned long long, int, void*)+0x7d>
c0017403:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0017406:	75 05                	jne    c001740d <VCache::read(unsigned long long, int, void*)+0x7d>
c0017408:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c001740b:	74 23                	je     c0017430 <VCache::read(unsigned long long, int, void*)+0xa0>
c001740d:	83 ec 0c             	sub    esp,0xc
c0017410:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0017414:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017418:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c001741b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c001741e:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0017420:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0017423:	55                   	push   ebp
c0017424:	52                   	push   edx
c0017425:	50                   	push   eax
c0017426:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001742a:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001742d:	83 c4 20             	add    esp,0x20
c0017430:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017433:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017437:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001743d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017440:	48                   	dec    eax
c0017441:	21 c6                	and    esi,eax
c0017443:	0f af f1             	imul   esi,ecx
c0017446:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0017449:	fc                   	cld    
c001744a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001744c:	eb 1d                	jmp    c001746b <VCache::read(unsigned long long, int, void*)+0xdb>
c001744e:	83 ec 0c             	sub    esp,0xc
c0017451:	53                   	push   ebx
c0017452:	e8 85 fd ff ff       	call   c00171dc <VCache::invalidateReadBuffer()>
c0017457:	5a                   	pop    edx
c0017458:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001745b:	8b 10                	mov    edx,DWORD PTR [eax]
c001745d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017461:	55                   	push   ebp
c0017462:	57                   	push   edi
c0017463:	56                   	push   esi
c0017464:	50                   	push   eax
c0017465:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0017468:	83 c4 20             	add    esp,0x20
c001746b:	83 ec 0c             	sub    esp,0xc
c001746e:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017471:	e8 22 7b 00 00       	call   c001ef98 <Semaphore::release()>
c0017476:	83 c4 2c             	add    esp,0x2c
c0017479:	31 c0                	xor    eax,eax
c001747b:	5b                   	pop    ebx
c001747c:	5e                   	pop    esi
c001747d:	5f                   	pop    edi
c001747e:	5d                   	pop    ebp
c001747f:	c3                   	ret    

c0017480 <Video::putrect(int, int, int, int, unsigned int)>:
c0017480:	55                   	push   ebp
c0017481:	57                   	push   edi
c0017482:	56                   	push   esi
c0017483:	53                   	push   ebx
c0017484:	83 ec 1c             	sub    esp,0x1c
c0017487:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001748b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001748f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017493:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017497:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001749b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001749f:	01 df                	add    edi,ebx
c00174a1:	39 fb                	cmp    ebx,edi
c00174a3:	7d 1f                	jge    c00174c4 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00174a5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00174a9:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00174ad:	7d 12                	jge    c00174c1 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00174af:	8b 16                	mov    edx,DWORD PTR [esi]
c00174b1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00174b5:	53                   	push   ebx
c00174b6:	55                   	push   ebp
c00174b7:	45                   	inc    ebp
c00174b8:	56                   	push   esi
c00174b9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00174bc:	83 c4 10             	add    esp,0x10
c00174bf:	eb e8                	jmp    c00174a9 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00174c1:	43                   	inc    ebx
c00174c2:	eb dd                	jmp    c00174a1 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00174c4:	83 c4 1c             	add    esp,0x1c
c00174c7:	5b                   	pop    ebx
c00174c8:	5e                   	pop    esi
c00174c9:	5f                   	pop    edi
c00174ca:	5d                   	pop    ebp
c00174cb:	c3                   	ret    

c00174cc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00174cc:	55                   	push   ebp
c00174cd:	57                   	push   edi
c00174ce:	31 ff                	xor    edi,edi
c00174d0:	56                   	push   esi
c00174d1:	53                   	push   ebx
c00174d2:	83 ec 1c             	sub    esp,0x1c
c00174d5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00174d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00174dd:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00174e4:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00174e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00174ed:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00174f1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00174f5:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00174f8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00174fc:	01 f9                	add    ecx,edi
c00174fe:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017502:	7d 2f                	jge    c0017533 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017504:	31 f6                	xor    esi,esi
c0017506:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001750a:	01 f2                	add    edx,esi
c001750c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017510:	7d 1a                	jge    c001752c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017512:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017515:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0017518:	46                   	inc    esi
c0017519:	51                   	push   ecx
c001751a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001751e:	52                   	push   edx
c001751f:	55                   	push   ebp
c0017520:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017523:	83 c4 10             	add    esp,0x10
c0017526:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001752a:	eb da                	jmp    c0017506 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001752c:	47                   	inc    edi
c001752d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017531:	eb c5                	jmp    c00174f8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017533:	83 c4 1c             	add    esp,0x1c
c0017536:	5b                   	pop    ebx
c0017537:	5e                   	pop    esi
c0017538:	5f                   	pop    edi
c0017539:	5d                   	pop    ebp
c001753a:	c3                   	ret    
c001753b:	90                   	nop

c001753c <Video::blit(unsigned int*, int, int, int, int)>:
c001753c:	55                   	push   ebp
c001753d:	57                   	push   edi
c001753e:	56                   	push   esi
c001753f:	53                   	push   ebx
c0017540:	83 ec 1c             	sub    esp,0x1c
c0017543:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017547:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001754b:	85 c0                	test   eax,eax
c001754d:	79 02                	jns    c0017551 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001754f:	31 c0                	xor    eax,eax
c0017551:	c1 e0 02             	shl    eax,0x2
c0017554:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017558:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001755c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017560:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0017564:	39 d8                	cmp    eax,ebx
c0017566:	7e 49                	jle    c00175b1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017568:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001756e:	7c 41                	jl     c00175b1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017570:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017574:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017578:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001757c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017580:	39 f9                	cmp    ecx,edi
c0017582:	7e 22                	jle    c00175a6 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0017584:	83 c5 04             	add    ebp,0x4
c0017587:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001758d:	7c 14                	jl     c00175a3 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001758f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017591:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017594:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017598:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001759c:	56                   	push   esi
c001759d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00175a0:	83 c4 10             	add    esp,0x10
c00175a3:	47                   	inc    edi
c00175a4:	eb d2                	jmp    c0017578 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00175a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175aa:	43                   	inc    ebx
c00175ab:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00175af:	eb ab                	jmp    c001755c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00175b1:	83 c4 1c             	add    esp,0x1c
c00175b4:	5b                   	pop    ebx
c00175b5:	5e                   	pop    esi
c00175b6:	5f                   	pop    edi
c00175b7:	5d                   	pop    ebp
c00175b8:	c3                   	ret    
c00175b9:	90                   	nop

c00175ba <Video::clearScreen(unsigned int)>:
c00175ba:	57                   	push   edi
c00175bb:	56                   	push   esi
c00175bc:	53                   	push   ebx
c00175bd:	31 db                	xor    ebx,ebx
c00175bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00175c3:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00175c9:	7e 1f                	jle    c00175ea <Video::clearScreen(unsigned int)+0x30>
c00175cb:	31 ff                	xor    edi,edi
c00175cd:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00175d3:	7e 12                	jle    c00175e7 <Video::clearScreen(unsigned int)+0x2d>
c00175d5:	8b 06                	mov    eax,DWORD PTR [esi]
c00175d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00175db:	53                   	push   ebx
c00175dc:	57                   	push   edi
c00175dd:	47                   	inc    edi
c00175de:	56                   	push   esi
c00175df:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00175e2:	83 c4 10             	add    esp,0x10
c00175e5:	eb e6                	jmp    c00175cd <Video::clearScreen(unsigned int)+0x13>
c00175e7:	43                   	inc    ebx
c00175e8:	eb d9                	jmp    c00175c3 <Video::clearScreen(unsigned int)+0x9>
c00175ea:	5b                   	pop    ebx
c00175eb:	5e                   	pop    esi
c00175ec:	5f                   	pop    edi
c00175ed:	c3                   	ret    

c00175ee <Video::putpixel(int, int, unsigned int)>:
c00175ee:	c7 44 24 04 28 bd 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bd28
c00175f6:	e9 95 32 00 00       	jmp    c001a890 <Krnl::panic(char const*)>
c00175fb:	90                   	nop

c00175fc <Video::Video(char const*)>:
c00175fc:	83 ec 0c             	sub    esp,0xc
c00175ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017603:	83 ec 08             	sub    esp,0x8
c0017606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001760a:	50                   	push   eax
c001760b:	e8 d0 ce ff ff       	call   c00144e0 <Device::Device(char const*)>
c0017610:	83 c4 10             	add    esp,0x10
c0017613:	ba ac bd 02 c0       	mov    edx,0xc002bdac
c0017618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001761c:	89 10                	mov    DWORD PTR [eax],edx
c001761e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017622:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001762c:	90                   	nop
c001762d:	83 c4 0c             	add    esp,0xc
c0017630:	c3                   	ret    
c0017631:	90                   	nop

c0017632 <Video::~Video()>:
c0017632:	83 ec 0c             	sub    esp,0xc
c0017635:	ba ac bd 02 c0       	mov    edx,0xc002bdac
c001763a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001763e:	89 10                	mov    DWORD PTR [eax],edx
c0017640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017644:	83 ec 0c             	sub    esp,0xc
c0017647:	50                   	push   eax
c0017648:	e8 87 cb ff ff       	call   c00141d4 <Device::~Device()>
c001764d:	83 c4 10             	add    esp,0x10
c0017650:	90                   	nop
c0017651:	83 c4 0c             	add    esp,0xc
c0017654:	c3                   	ret    
c0017655:	90                   	nop

c0017656 <Video::~Video()>:
c0017656:	83 ec 0c             	sub    esp,0xc
c0017659:	83 ec 0c             	sub    esp,0xc
c001765c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017660:	e8 cd ff ff ff       	call   c0017632 <Video::~Video()>
c0017665:	83 c4 10             	add    esp,0x10
c0017668:	83 ec 08             	sub    esp,0x8
c001766b:	68 64 01 00 00       	push   0x164
c0017670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017674:	e8 74 b7 ff ff       	call   c0012ded <operator delete(void*, unsigned long)>
c0017679:	83 c4 10             	add    esp,0x10
c001767c:	83 c4 0c             	add    esp,0xc
c001767f:	c3                   	ret    

c0017680 <Video::isMonochrome()>:
c0017680:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017684:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001768a:	c3                   	ret    
c001768b:	90                   	nop

c001768c <Video::getWidth()>:
c001768c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017690:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017696:	c3                   	ret    
c0017697:	90                   	nop

c0017698 <Video::getHeight()>:
c0017698:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001769c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00176a2:	c3                   	ret    
c00176a3:	90                   	nop

c00176a4 <Video::drawCursor(int, int, unsigned char*, int)>:
c00176a4:	55                   	push   ebp
c00176a5:	57                   	push   edi
c00176a6:	56                   	push   esi
c00176a7:	53                   	push   ebx
c00176a8:	83 ec 2c             	sub    esp,0x2c
c00176ab:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00176af:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00176b3:	83 f8 01             	cmp    eax,0x1
c00176b6:	19 c9                	sbb    ecx,ecx
c00176b8:	31 db                	xor    ebx,ebx
c00176ba:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00176be:	89 cd                	mov    ebp,ecx
c00176c0:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00176c8:	f7 d5                	not    ebp
c00176ca:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00176d0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00176d4:	01 d8                	add    eax,ebx
c00176d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176da:	56                   	push   esi
c00176db:	e8 b8 ff ff ff       	call   c0017698 <Video::getHeight()>
c00176e0:	59                   	pop    ecx
c00176e1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00176e5:	7e 70                	jle    c0017757 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00176e7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00176eb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00176ef:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00176f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00176f6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00176fa:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017701:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017705:	89 f8                	mov    eax,edi
c0017707:	83 c0 20             	add    eax,0x20
c001770a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001770e:	56                   	push   esi
c001770f:	e8 78 ff ff ff       	call   c001768c <Video::getWidth()>
c0017714:	5a                   	pop    edx
c0017715:	39 c7                	cmp    edi,eax
c0017717:	7d 34                	jge    c001774d <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017719:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001771e:	74 05                	je     c0017725 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017720:	8b 06                	mov    eax,DWORD PTR [esi]
c0017722:	55                   	push   ebp
c0017723:	eb 0d                	jmp    c0017732 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017725:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001772a:	74 12                	je     c001773e <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001772c:	8b 06                	mov    eax,DWORD PTR [esi]
c001772e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017732:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017736:	57                   	push   edi
c0017737:	56                   	push   esi
c0017738:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001773b:	83 c4 10             	add    esp,0x10
c001773e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017742:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017746:	47                   	inc    edi
c0017747:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001774b:	75 c1                	jne    c001770e <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001774d:	43                   	inc    ebx
c001774e:	83 fb 20             	cmp    ebx,0x20
c0017751:	0f 85 79 ff ff ff    	jne    c00176d0 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017757:	83 c4 2c             	add    esp,0x2c
c001775a:	5b                   	pop    ebx
c001775b:	5e                   	pop    esi
c001775c:	5f                   	pop    edi
c001775d:	5d                   	pop    ebp
c001775e:	c3                   	ret    
c001775f:	90                   	nop

c0017760 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017760:	55                   	push   ebp
c0017761:	57                   	push   edi
c0017762:	56                   	push   esi
c0017763:	53                   	push   ebx
c0017764:	83 ec 28             	sub    esp,0x28
c0017767:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001776b:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c001776f:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017773:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017777:	c1 e7 08             	shl    edi,0x8
c001777a:	01 c7                	add    edi,eax
c001777c:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017780:	c1 e0 08             	shl    eax,0x8
c0017783:	01 d0                	add    eax,edx
c0017785:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017789:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001778d:	0f af c7             	imul   eax,edi
c0017790:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017797:	50                   	push   eax
c0017798:	e8 91 81 ff ff       	call   c000f92e <malloc>
c001779d:	83 c4 10             	add    esp,0x10
c00177a0:	89 c5                	mov    ebp,eax
c00177a2:	85 c0                	test   eax,eax
c00177a4:	75 15                	jne    c00177bb <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00177a6:	83 ec 0c             	sub    esp,0xc
c00177a9:	68 49 bd 02 c0       	push   0xc002bd49
c00177ae:	e8 1a b7 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00177b3:	83 c4 10             	add    esp,0x10
c00177b6:	e9 1c 01 00 00       	jmp    c00178d7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00177bb:	be 12 00 00 00       	mov    esi,0x12
c00177c0:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00177c4:	74 11                	je     c00177d7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00177c6:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00177ca:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00177ce:	c1 fe 03             	sar    esi,0x3
c00177d1:	0f af f0             	imul   esi,eax
c00177d4:	83 c6 12             	add    esi,0x12
c00177d7:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00177db:	74 04                	je     c00177e1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00177dd:	85 ff                	test   edi,edi
c00177df:	75 12                	jne    c00177f3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00177e1:	83 ec 0c             	sub    esp,0xc
c00177e4:	68 60 bd 02 c0       	push   0xc002bd60
c00177e9:	e8 df b6 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00177ee:	e9 ce 00 00 00       	jmp    c00178c1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00177f3:	52                   	push   edx
c00177f4:	52                   	push   edx
c00177f5:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00177f9:	50                   	push   eax
c00177fa:	68 75 bd 02 c0       	push   0xc002bd75
c00177ff:	e8 c9 b6 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0017804:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017808:	83 c4 10             	add    esp,0x10
c001780b:	80 fa 02             	cmp    dl,0x2
c001780e:	0f 85 98 00 00 00    	jne    c00178ac <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017814:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017819:	75 10                	jne    c001782b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001781b:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001781f:	75 0a                	jne    c001782b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017821:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017824:	83 e8 18             	sub    eax,0x18
c0017827:	a8 f7                	test   al,0xf7
c0017829:	74 0a                	je     c0017835 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c001782b:	83 ec 0c             	sub    esp,0xc
c001782e:	68 82 bd 02 c0       	push   0xc002bd82
c0017833:	eb 7f                	jmp    c00178b4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017835:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001783d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017845:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017849:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017851:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017855:	75 0c                	jne    c0017863 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017857:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001785c:	c1 e0 18             	shl    eax,0x18
c001785f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017863:	41                   	inc    ecx
c0017864:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017869:	c1 e2 10             	shl    edx,0x10
c001786c:	89 d0                	mov    eax,edx
c001786e:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017873:	c1 e2 08             	shl    edx,0x8
c0017876:	09 c2                	or     edx,eax
c0017878:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c001787c:	09 c2                	or     edx,eax
c001787e:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017882:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0017886:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001788a:	c1 f8 03             	sar    eax,0x3
c001788d:	01 c6                	add    esi,eax
c001788f:	89 c8                	mov    eax,ecx
c0017891:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017895:	39 c7                	cmp    edi,eax
c0017897:	7f b0                	jg     c0017849 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017899:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001789d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00178a1:	39 14 24             	cmp    DWORD PTR [esp],edx
c00178a4:	7e 22                	jle    c00178c8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00178a6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00178aa:	eb 99                	jmp    c0017845 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00178ac:	50                   	push   eax
c00178ad:	50                   	push   eax
c00178ae:	52                   	push   edx
c00178af:	68 90 bd 02 c0       	push   0xc002bd90
c00178b4:	e8 14 b6 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00178b9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00178bc:	e8 7d 80 ff ff       	call   c000f93e <free>
c00178c1:	83 c4 10             	add    esp,0x10
c00178c4:	31 ed                	xor    ebp,ebp
c00178c6:	eb 0f                	jmp    c00178d7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00178c8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00178cc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00178cf:	89 38                	mov    DWORD PTR [eax],edi
c00178d1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00178d5:	89 08                	mov    DWORD PTR [eax],ecx
c00178d7:	83 c4 1c             	add    esp,0x1c
c00178da:	89 e8                	mov    eax,ebp
c00178dc:	5b                   	pop    ebx
c00178dd:	5e                   	pop    esi
c00178de:	5f                   	pop    edi
c00178df:	5d                   	pop    ebp
c00178e0:	c3                   	ret    
c00178e1:	90                   	nop

c00178e2 <Video::putTGA(int, int, unsigned char*, int)>:
c00178e2:	55                   	push   ebp
c00178e3:	57                   	push   edi
c00178e4:	56                   	push   esi
c00178e5:	53                   	push   ebx
c00178e6:	83 ec 28             	sub    esp,0x28
c00178e9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00178ed:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178f1:	50                   	push   eax
c00178f2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178f6:	50                   	push   eax
c00178f7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00178fb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00178ff:	56                   	push   esi
c0017900:	e8 5b fe ff ff       	call   c0017760 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017905:	83 c4 20             	add    esp,0x20
c0017908:	85 c0                	test   eax,eax
c001790a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001790e:	74 35                	je     c0017945 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017910:	89 c7                	mov    edi,eax
c0017912:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017916:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001791a:	39 d8                	cmp    eax,ebx
c001791c:	7e 27                	jle    c0017945 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001791e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017922:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017926:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001792a:	39 e8                	cmp    eax,ebp
c001792c:	7e 14                	jle    c0017942 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001792e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017930:	83 c7 04             	add    edi,0x4
c0017933:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017936:	53                   	push   ebx
c0017937:	55                   	push   ebp
c0017938:	45                   	inc    ebp
c0017939:	56                   	push   esi
c001793a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001793d:	83 c4 10             	add    esp,0x10
c0017940:	eb e0                	jmp    c0017922 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017942:	43                   	inc    ebx
c0017943:	eb cd                	jmp    c0017912 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017945:	83 c4 1c             	add    esp,0x1c
c0017948:	5b                   	pop    ebx
c0017949:	5e                   	pop    esi
c001794a:	5f                   	pop    edi
c001794b:	5d                   	pop    ebp
c001794c:	c3                   	ret    
c001794d:	90                   	nop

c001794e <ACPI::close(int, int, void*)>:
c001794e:	83 ec 1c             	sub    esp,0x1c
c0017951:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017959:	74 0a                	je     c0017965 <ACPI::close(int, int, void*)+0x17>
c001795b:	b8 00 00 00 00       	mov    eax,0x0
c0017960:	e9 9a 00 00 00       	jmp    c00179ff <ACPI::close(int, int, void*)+0xb1>
c0017965:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001796a:	75 37                	jne    c00179a3 <ACPI::close(int, int, void*)+0x55>
c001796c:	83 ec 0c             	sub    esp,0xc
c001796f:	68 ec bd 02 c0       	push   0xc002bdec
c0017974:	e8 54 b5 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0017979:	83 c4 10             	add    esp,0x10
c001797c:	a1 a8 15 03 c0       	mov    eax,ds:0xc00315a8
c0017981:	85 c0                	test   eax,eax
c0017983:	74 07                	je     c001798c <ACPI::close(int, int, void*)+0x3e>
c0017985:	a1 a8 15 03 c0       	mov    eax,ds:0xc00315a8
c001798a:	ff d0                	call   eax
c001798c:	83 ec 0c             	sub    esp,0xc
c001798f:	68 60 bf 02 c0       	push   0xc002bf60
c0017994:	e8 f7 2e 00 00       	call   c001a890 <Krnl::panic(char const*)>
c0017999:	83 c4 10             	add    esp,0x10
c001799c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00179a1:	eb 5c                	jmp    c00179ff <ACPI::close(int, int, void*)+0xb1>
c00179a3:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00179a8:	75 50                	jne    c00179fa <ACPI::close(int, int, void*)+0xac>
c00179aa:	a1 a4 15 03 c0       	mov    eax,ds:0xc00315a4
c00179af:	85 c0                	test   eax,eax
c00179b1:	74 07                	je     c00179ba <ACPI::close(int, int, void*)+0x6c>
c00179b3:	a1 a4 15 03 c0       	mov    eax,ds:0xc00315a4
c00179b8:	ff d0                	call   eax
c00179ba:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00179bf:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00179c4:	83 e0 02             	and    eax,0x2
c00179c7:	74 1c                	je     c00179e5 <ACPI::close(int, int, void*)+0x97>
c00179c9:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00179d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179d4:	89 c2                	mov    edx,eax
c00179d6:	ec                   	in     al,dx
c00179d7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00179db:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00179df:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00179e3:	eb da                	jmp    c00179bf <ACPI::close(int, int, void*)+0x71>
c00179e5:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00179ec:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00179f1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00179f5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00179f9:	ee                   	out    dx,al
c00179fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00179ff:	83 c4 1c             	add    esp,0x1c
c0017a02:	c3                   	ret    

c0017a03 <findRSDP()>:
c0017a03:	83 ec 1c             	sub    esp,0x1c
c0017a06:	83 ec 0c             	sub    esp,0xc
c0017a09:	68 f9 bd 02 c0       	push   0xc002bdf9
c0017a0e:	e8 ba b4 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0017a13:	83 c4 10             	add    esp,0x10
c0017a16:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0017a1b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a21:	83 e0 04             	and    eax,0x4
c0017a24:	84 c0                	test   al,al
c0017a26:	75 07                	jne    c0017a2f <findRSDP()+0x2c>
c0017a28:	b8 00 00 00 00       	mov    eax,0x0
c0017a2d:	eb 6a                	jmp    c0017a99 <findRSDP()+0x96>
c0017a2f:	a1 34 ef 02 c0       	mov    eax,ds:0xc002ef34
c0017a34:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017a39:	7f 1b                	jg     c0017a56 <findRSDP()+0x53>
c0017a3b:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0017a40:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017a46:	83 e2 fb             	and    edx,0xfffffffb
c0017a49:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017a4f:	b8 00 00 00 00       	mov    eax,0x0
c0017a54:	eb 43                	jmp    c0017a99 <findRSDP()+0x96>
c0017a56:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017a5e:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017a66:	77 2c                	ja     c0017a94 <findRSDP()+0x91>
c0017a68:	83 ec 04             	sub    esp,0x4
c0017a6b:	6a 08                	push   0x8
c0017a6d:	68 07 be 02 c0       	push   0xc002be07
c0017a72:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a76:	e8 ed 8b fe ff       	call   c0000668 <memcmp>
c0017a7b:	83 c4 10             	add    esp,0x10
c0017a7e:	85 c0                	test   eax,eax
c0017a80:	0f 94 c0             	sete   al
c0017a83:	84 c0                	test   al,al
c0017a85:	74 06                	je     c0017a8d <findRSDP()+0x8a>
c0017a87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a8b:	eb 0c                	jmp    c0017a99 <findRSDP()+0x96>
c0017a8d:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017a92:	eb ca                	jmp    c0017a5e <findRSDP()+0x5b>
c0017a94:	b8 00 00 00 00       	mov    eax,0x0
c0017a99:	83 c4 1c             	add    esp,0x1c
c0017a9c:	c3                   	ret    

c0017a9d <loadACPITables(unsigned char*)>:
c0017a9d:	57                   	push   edi
c0017a9e:	56                   	push   esi
c0017a9f:	53                   	push   ebx
c0017aa0:	83 ec 50             	sub    esp,0x50
c0017aa3:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0017aa8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017aae:	83 e0 04             	and    eax,0x4
c0017ab1:	84 c0                	test   al,al
c0017ab3:	0f 84 21 02 00 00    	je     c0017cda <loadACPITables(unsigned char*)+0x23d>
c0017ab9:	a0 c0 17 03 c0       	mov    al,ds:0xc00317c0
c0017abe:	84 c0                	test   al,al
c0017ac0:	74 75                	je     c0017b37 <loadACPITables(unsigned char*)+0x9a>
c0017ac2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017ac6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017aca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017ace:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ad1:	83 e8 24             	sub    eax,0x24
c0017ad4:	c1 e8 03             	shr    eax,0x3
c0017ad7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017adb:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017ae3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017ae7:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017aeb:	0f 8d b2 00 00 00    	jge    c0017ba3 <loadACPITables(unsigned char*)+0x106>
c0017af1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017af5:	83 c0 24             	add    eax,0x24
c0017af8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017afc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017b00:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017b04:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017b08:	c1 e0 03             	shl    eax,0x3
c0017b0b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017b0f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b13:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017b16:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b18:	89 c1                	mov    ecx,eax
c0017b1a:	a1 ac 15 03 c0       	mov    eax,ds:0xc00315ac
c0017b1f:	8d 50 01             	lea    edx,[eax+0x1]
c0017b22:	89 15 ac 15 03 c0    	mov    DWORD PTR ds:0xc00315ac,edx
c0017b28:	89 ca                	mov    edx,ecx
c0017b2a:	89 14 c5 c4 15 03 c0 	mov    DWORD PTR [eax*8-0x3ffcea3c],edx
c0017b31:	ff 44 24 4c          	inc    DWORD PTR [esp+0x4c]
c0017b35:	eb ac                	jmp    c0017ae3 <loadACPITables(unsigned char*)+0x46>
c0017b37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017b3b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b43:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b46:	83 e8 24             	sub    eax,0x24
c0017b49:	c1 e8 02             	shr    eax,0x2
c0017b4c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017b50:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017b58:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017b5c:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017b60:	7d 41                	jge    c0017ba3 <loadACPITables(unsigned char*)+0x106>
c0017b62:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017b66:	83 c0 24             	add    eax,0x24
c0017b69:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017b6d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b71:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017b75:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017b79:	c1 e0 02             	shl    eax,0x2
c0017b7c:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017b80:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017b84:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017b86:	a1 ac 15 03 c0       	mov    eax,ds:0xc00315ac
c0017b8b:	8d 50 01             	lea    edx,[eax+0x1]
c0017b8e:	89 15 ac 15 03 c0    	mov    DWORD PTR ds:0xc00315ac,edx
c0017b94:	89 ca                	mov    edx,ecx
c0017b96:	89 14 c5 c4 15 03 c0 	mov    DWORD PTR [eax*8-0x3ffcea3c],edx
c0017b9d:	ff 44 24 48          	inc    DWORD PTR [esp+0x48]
c0017ba1:	eb b5                	jmp    c0017b58 <loadACPITables(unsigned char*)+0xbb>
c0017ba3:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0017bab:	a1 ac 15 03 c0       	mov    eax,ds:0xc00315ac
c0017bb0:	39 44 24 44          	cmp    DWORD PTR [esp+0x44],eax
c0017bb4:	0f 8d 21 01 00 00    	jge    c0017cdb <loadACPITables(unsigned char*)+0x23e>
c0017bba:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017bbe:	8b 04 c5 c4 15 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcea3c]
c0017bc5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017bc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bcd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017bd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bd5:	25 ff 0f 00 00       	and    eax,0xfff
c0017bda:	89 c6                	mov    esi,eax
c0017bdc:	8b 1d 70 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f070
c0017be2:	83 ec 0c             	sub    esp,0xc
c0017be5:	6a 01                	push   0x1
c0017be7:	e8 db 9e ff ff       	call   c0011ac7 <Virt::allocateKernelVirtualPages(int)>
c0017bec:	83 c4 10             	add    esp,0x10
c0017bef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017bf3:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017bf9:	83 ec 0c             	sub    esp,0xc
c0017bfc:	6a 01                	push   0x1
c0017bfe:	6a 01                	push   0x1
c0017c00:	50                   	push   eax
c0017c01:	52                   	push   edx
c0017c02:	53                   	push   ebx
c0017c03:	e8 ec a9 ff ff       	call   c00125f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c08:	83 c4 20             	add    esp,0x20
c0017c0b:	09 f0                	or     eax,esi
c0017c0d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017c11:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017c15:	c1 e0 03             	shl    eax,0x3
c0017c18:	05 c0 15 03 c0       	add    eax,0xc00315c0
c0017c1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017c21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017c29:	c7 44 24 04 04 00 00 00 	mov    DWORD PTR [esp+0x4],0x4
c0017c31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c35:	89 04 24             	mov    DWORD PTR [esp],eax
c0017c38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c40:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017c44:	89 c6                	mov    esi,eax
c0017c46:	89 d7                	mov    edi,edx
c0017c48:	fc                   	cld    
c0017c49:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017c4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c4f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017c56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c5a:	05 00 10 00 00       	add    eax,0x1000
c0017c5f:	c1 e8 0c             	shr    eax,0xc
c0017c62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017c66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c6a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c72:	25 ff 0f 00 00       	and    eax,0xfff
c0017c77:	89 c6                	mov    esi,eax
c0017c79:	8b 1d 70 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f070
c0017c7f:	83 ec 0c             	sub    esp,0xc
c0017c82:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017c86:	e8 3c 9e ff ff       	call   c0011ac7 <Virt::allocateKernelVirtualPages(int)>
c0017c8b:	83 c4 10             	add    esp,0x10
c0017c8e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c92:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c98:	83 ec 0c             	sub    esp,0xc
c0017c9b:	6a 01                	push   0x1
c0017c9d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017ca1:	50                   	push   eax
c0017ca2:	52                   	push   edx
c0017ca3:	53                   	push   ebx
c0017ca4:	e8 4b a9 ff ff       	call   c00125f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017ca9:	83 c4 20             	add    esp,0x20
c0017cac:	09 f0                	or     eax,esi
c0017cae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017cb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cb6:	83 ec 0c             	sub    esp,0xc
c0017cb9:	50                   	push   eax
c0017cba:	e8 c8 a2 ff ff       	call   c0011f87 <Virt::freeKernelVirtualPages(unsigned long)>
c0017cbf:	83 c4 10             	add    esp,0x10
c0017cc2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017cc6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017cca:	89 14 c5 c4 15 03 c0 	mov    DWORD PTR [eax*8-0x3ffcea3c],edx
c0017cd1:	ff 44 24 44          	inc    DWORD PTR [esp+0x44]
c0017cd5:	e9 d1 fe ff ff       	jmp    c0017bab <loadACPITables(unsigned char*)+0x10e>
c0017cda:	90                   	nop
c0017cdb:	83 c4 50             	add    esp,0x50
c0017cde:	5b                   	pop    ebx
c0017cdf:	5e                   	pop    esi
c0017ce0:	5f                   	pop    edi
c0017ce1:	c3                   	ret    

c0017ce2 <findRSDT(unsigned char*)>:
c0017ce2:	57                   	push   edi
c0017ce3:	56                   	push   esi
c0017ce4:	53                   	push   ebx
c0017ce5:	83 ec 50             	sub    esp,0x50
c0017ce8:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0017ced:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017cf3:	83 e0 04             	and    eax,0x4
c0017cf6:	84 c0                	test   al,al
c0017cf8:	75 0a                	jne    c0017d04 <findRSDT(unsigned char*)+0x22>
c0017cfa:	b8 00 00 00 00       	mov    eax,0x0
c0017cff:	e9 12 01 00 00       	jmp    c0017e16 <findRSDT(unsigned char*)+0x134>
c0017d04:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017d08:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017d0c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017d10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017d14:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017d1c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017d20:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017d24:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017d28:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017d2c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0017d30:	89 c6                	mov    esi,eax
c0017d32:	89 d7                	mov    edi,edx
c0017d34:	fc                   	cld    
c0017d35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017d37:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017d3b:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017d3f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017d47:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d4b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d4f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017d53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d57:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017d5b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017d5f:	25 ff 0f 00 00       	and    eax,0xfff
c0017d64:	89 c6                	mov    esi,eax
c0017d66:	8b 1d 70 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f070
c0017d6c:	83 ec 0c             	sub    esp,0xc
c0017d6f:	6a 02                	push   0x2
c0017d71:	e8 51 9d ff ff       	call   c0011ac7 <Virt::allocateKernelVirtualPages(int)>
c0017d76:	83 c4 10             	add    esp,0x10
c0017d79:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017d7d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d83:	83 ec 0c             	sub    esp,0xc
c0017d86:	6a 01                	push   0x1
c0017d88:	6a 02                	push   0x2
c0017d8a:	50                   	push   eax
c0017d8b:	52                   	push   edx
c0017d8c:	53                   	push   ebx
c0017d8d:	e8 62 a8 ff ff       	call   c00125f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d92:	83 c4 20             	add    esp,0x20
c0017d95:	09 f0                	or     eax,esi
c0017d97:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017d9b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017d9f:	25 ff 0f 00 00       	and    eax,0xfff
c0017da4:	89 c6                	mov    esi,eax
c0017da6:	8b 1d 70 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f070
c0017dac:	83 ec 0c             	sub    esp,0xc
c0017daf:	6a 02                	push   0x2
c0017db1:	e8 11 9d ff ff       	call   c0011ac7 <Virt::allocateKernelVirtualPages(int)>
c0017db6:	83 c4 10             	add    esp,0x10
c0017db9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017dbd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017dc3:	83 ec 0c             	sub    esp,0xc
c0017dc6:	6a 01                	push   0x1
c0017dc8:	6a 02                	push   0x2
c0017dca:	50                   	push   eax
c0017dcb:	52                   	push   edx
c0017dcc:	53                   	push   ebx
c0017dcd:	e8 22 a8 ff ff       	call   c00125f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017dd2:	83 c4 20             	add    esp,0x20
c0017dd5:	09 f0                	or     eax,esi
c0017dd7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017ddb:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017de0:	75 11                	jne    c0017df3 <findRSDT(unsigned char*)+0x111>
c0017de2:	c6 05 c0 17 03 c0 00 	mov    BYTE PTR ds:0xc00317c0,0x0
c0017de9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017ded:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017df1:	eb 1f                	jmp    c0017e12 <findRSDT(unsigned char*)+0x130>
c0017df3:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017df8:	75 11                	jne    c0017e0b <findRSDT(unsigned char*)+0x129>
c0017dfa:	c6 05 c0 17 03 c0 01 	mov    BYTE PTR ds:0xc00317c0,0x1
c0017e01:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017e05:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017e09:	eb 07                	jmp    c0017e12 <findRSDT(unsigned char*)+0x130>
c0017e0b:	b8 00 00 00 00       	mov    eax,0x0
c0017e10:	eb 04                	jmp    c0017e16 <findRSDT(unsigned char*)+0x134>
c0017e12:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017e16:	83 c4 50             	add    esp,0x50
c0017e19:	5b                   	pop    ebx
c0017e1a:	5e                   	pop    esi
c0017e1b:	5f                   	pop    edi
c0017e1c:	c3                   	ret    

c0017e1d <findDataTable(unsigned char*, char*)>:
c0017e1d:	83 ec 1c             	sub    esp,0x1c
c0017e20:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0017e25:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e2b:	83 e0 04             	and    eax,0x4
c0017e2e:	84 c0                	test   al,al
c0017e30:	75 07                	jne    c0017e39 <findDataTable(unsigned char*, char*)+0x1c>
c0017e32:	b8 00 00 00 00       	mov    eax,0x0
c0017e37:	eb 7c                	jmp    c0017eb5 <findDataTable(unsigned char*, char*)+0x98>
c0017e39:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017e41:	a1 ac 15 03 c0       	mov    eax,ds:0xc00315ac
c0017e46:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017e4a:	7d 3a                	jge    c0017e86 <findDataTable(unsigned char*, char*)+0x69>
c0017e4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e50:	c1 e0 03             	shl    eax,0x3
c0017e53:	05 c0 15 03 c0       	add    eax,0xc00315c0
c0017e58:	83 ec 04             	sub    esp,0x4
c0017e5b:	6a 04                	push   0x4
c0017e5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e61:	50                   	push   eax
c0017e62:	e8 01 88 fe ff       	call   c0000668 <memcmp>
c0017e67:	83 c4 10             	add    esp,0x10
c0017e6a:	85 c0                	test   eax,eax
c0017e6c:	0f 94 c0             	sete   al
c0017e6f:	84 c0                	test   al,al
c0017e71:	74 0d                	je     c0017e80 <findDataTable(unsigned char*, char*)+0x63>
c0017e73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e77:	8b 04 c5 c4 15 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcea3c]
c0017e7e:	eb 35                	jmp    c0017eb5 <findDataTable(unsigned char*, char*)+0x98>
c0017e80:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017e84:	eb bb                	jmp    c0017e41 <findDataTable(unsigned char*, char*)+0x24>
c0017e86:	a0 c0 17 03 c0       	mov    al,ds:0xc00317c0
c0017e8b:	84 c0                	test   al,al
c0017e8d:	74 07                	je     c0017e96 <findDataTable(unsigned char*, char*)+0x79>
c0017e8f:	b8 58 00 00 00       	mov    eax,0x58
c0017e94:	eb 05                	jmp    c0017e9b <findDataTable(unsigned char*, char*)+0x7e>
c0017e96:	b8 52 00 00 00       	mov    eax,0x52
c0017e9b:	83 ec 04             	sub    esp,0x4
c0017e9e:	50                   	push   eax
c0017e9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ea3:	68 84 bf 02 c0       	push   0xc002bf84
c0017ea8:	e8 20 b0 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0017ead:	83 c4 10             	add    esp,0x10
c0017eb0:	b8 00 00 00 00       	mov    eax,0x0
c0017eb5:	83 c4 1c             	add    esp,0x1c
c0017eb8:	c3                   	ret    

c0017eb9 <scanMADT()>:
c0017eb9:	53                   	push   ebx
c0017eba:	83 ec 38             	sub    esp,0x38
c0017ebd:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0017ec2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017ec8:	83 e0 04             	and    eax,0x4
c0017ecb:	84 c0                	test   al,al
c0017ecd:	0f 84 63 04 00 00    	je     c0018336 <scanMADT()+0x47d>
c0017ed3:	e8 2b fb ff ff       	call   c0017a03 <findRSDP()>
c0017ed8:	a3 cc 17 03 c0       	mov    ds:0xc00317cc,eax
c0017edd:	a1 cc 17 03 c0       	mov    eax,ds:0xc00317cc
c0017ee2:	85 c0                	test   eax,eax
c0017ee4:	75 19                	jne    c0017eff <scanMADT()+0x46>
c0017ee6:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0017eeb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017ef1:	83 e2 fb             	and    edx,0xfffffffb
c0017ef4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017efa:	e9 3b 04 00 00       	jmp    c001833a <scanMADT()+0x481>
c0017eff:	a1 cc 17 03 c0       	mov    eax,ds:0xc00317cc
c0017f04:	83 ec 0c             	sub    esp,0xc
c0017f07:	50                   	push   eax
c0017f08:	e8 d5 fd ff ff       	call   c0017ce2 <findRSDT(unsigned char*)>
c0017f0d:	83 c4 10             	add    esp,0x10
c0017f10:	a3 c8 17 03 c0       	mov    ds:0xc00317c8,eax
c0017f15:	a1 c8 17 03 c0       	mov    eax,ds:0xc00317c8
c0017f1a:	85 c0                	test   eax,eax
c0017f1c:	75 19                	jne    c0017f37 <scanMADT()+0x7e>
c0017f1e:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0017f23:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017f29:	83 e2 fb             	and    edx,0xfffffffb
c0017f2c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017f32:	e9 03 04 00 00       	jmp    c001833a <scanMADT()+0x481>
c0017f37:	a1 c8 17 03 c0       	mov    eax,ds:0xc00317c8
c0017f3c:	83 ec 0c             	sub    esp,0xc
c0017f3f:	50                   	push   eax
c0017f40:	e8 58 fb ff ff       	call   c0017a9d <loadACPITables(unsigned char*)>
c0017f45:	83 c4 10             	add    esp,0x10
c0017f48:	a1 c8 17 03 c0       	mov    eax,ds:0xc00317c8
c0017f4d:	83 ec 08             	sub    esp,0x8
c0017f50:	68 10 be 02 c0       	push   0xc002be10
c0017f55:	50                   	push   eax
c0017f56:	e8 c2 fe ff ff       	call   c0017e1d <findDataTable(unsigned char*, char*)>
c0017f5b:	83 c4 10             	add    esp,0x10
c0017f5e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017f62:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017f67:	75 19                	jne    c0017f82 <scanMADT()+0xc9>
c0017f69:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0017f6e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017f74:	83 e2 fe             	and    edx,0xfffffffe
c0017f77:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017f7d:	e9 b8 03 00 00       	jmp    c001833a <scanMADT()+0x481>
c0017f82:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017f8a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017f91:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017f95:	0f 87 9f 03 00 00    	ja     c001833a <scanMADT()+0x481>
c0017f9b:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017fa3:	0f 87 91 03 00 00    	ja     c001833a <scanMADT()+0x481>
c0017fa9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fad:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017fb1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fb5:	8d 50 01             	lea    edx,[eax+0x1]
c0017fb8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fbc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fc0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fc4:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017fc8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fcc:	8d 50 01             	lea    edx,[eax+0x1]
c0017fcf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fd3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fd7:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fdb:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017fdf:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017fe4:	0f 86 4f 03 00 00    	jbe    c0018339 <scanMADT()+0x480>
c0017fea:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017fef:	75 57                	jne    c0018048 <scanMADT()+0x18f>
c0017ff1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ff5:	8d 50 01             	lea    edx,[eax+0x1]
c0017ff8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ffc:	8a 15 c0 19 03 c0    	mov    dl,BYTE PTR ds:0xc00319c0
c0018002:	0f b6 d2             	movzx  edx,dl
c0018005:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0018009:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001800d:	88 82 00 1a 03 c0    	mov    BYTE PTR [edx-0x3ffce600],al
c0018013:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018017:	8d 50 01             	lea    edx,[eax+0x1]
c001801a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001801e:	8a 15 c0 19 03 c0    	mov    dl,BYTE PTR ds:0xc00319c0
c0018024:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018027:	88 0d c0 19 03 c0    	mov    BYTE PTR ds:0xc00319c0,cl
c001802d:	0f b6 d2             	movzx  edx,dl
c0018030:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0018034:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0018038:	88 82 e0 19 03 c0    	mov    BYTE PTR [edx-0x3ffce620],al
c001803e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018043:	e9 da 02 00 00       	jmp    c0018322 <scanMADT()+0x469>
c0018048:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c001804d:	0f 85 14 01 00 00    	jne    c0018167 <scanMADT()+0x2ae>
c0018053:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018057:	8d 50 01             	lea    edx,[eax+0x1]
c001805a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001805e:	8a 15 80 18 03 c0    	mov    dl,BYTE PTR ds:0xc0031880
c0018064:	0f b6 d2             	movzx  edx,dl
c0018067:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001806b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001806f:	88 82 a0 18 03 c0    	mov    BYTE PTR [edx-0x3ffce760],al
c0018075:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0018079:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001807d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018081:	01 d0                	add    eax,edx
c0018083:	83 c0 2c             	add    eax,0x2c
c0018086:	8a 00                	mov    al,BYTE PTR [eax]
c0018088:	0f b6 d0             	movzx  edx,al
c001808b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001808f:	8d 48 01             	lea    ecx,[eax+0x1]
c0018092:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018096:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001809a:	0f b6 c0             	movzx  eax,al
c001809d:	c1 e0 08             	shl    eax,0x8
c00180a0:	89 d1                	mov    ecx,edx
c00180a2:	09 c1                	or     ecx,eax
c00180a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180a8:	8d 50 02             	lea    edx,[eax+0x2]
c00180ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180af:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180b3:	0f b6 c0             	movzx  eax,al
c00180b6:	c1 e0 10             	shl    eax,0x10
c00180b9:	09 c1                	or     ecx,eax
c00180bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180bf:	8d 50 03             	lea    edx,[eax+0x3]
c00180c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180c6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180ca:	0f b6 c0             	movzx  eax,al
c00180cd:	c1 e0 18             	shl    eax,0x18
c00180d0:	09 c1                	or     ecx,eax
c00180d2:	89 ca                	mov    edx,ecx
c00180d4:	a0 80 18 03 c0       	mov    al,ds:0xc0031880
c00180d9:	0f b6 c0             	movzx  eax,al
c00180dc:	89 14 85 c0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce740],edx
c00180e3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180e8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180f0:	01 d0                	add    eax,edx
c00180f2:	83 c0 2c             	add    eax,0x2c
c00180f5:	8a 00                	mov    al,BYTE PTR [eax]
c00180f7:	0f b6 d0             	movzx  edx,al
c00180fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180fe:	8d 48 01             	lea    ecx,[eax+0x1]
c0018101:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018105:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018109:	0f b6 c0             	movzx  eax,al
c001810c:	c1 e0 08             	shl    eax,0x8
c001810f:	89 d1                	mov    ecx,edx
c0018111:	09 c1                	or     ecx,eax
c0018113:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018117:	8d 50 02             	lea    edx,[eax+0x2]
c001811a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001811e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018122:	0f b6 c0             	movzx  eax,al
c0018125:	c1 e0 10             	shl    eax,0x10
c0018128:	09 c1                	or     ecx,eax
c001812a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001812e:	8d 50 03             	lea    edx,[eax+0x3]
c0018131:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018135:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018139:	0f b6 c0             	movzx  eax,al
c001813c:	c1 e0 18             	shl    eax,0x18
c001813f:	09 c1                	or     ecx,eax
c0018141:	89 ca                	mov    edx,ecx
c0018143:	a0 80 18 03 c0       	mov    al,ds:0xc0031880
c0018148:	0f b6 c0             	movzx  eax,al
c001814b:	89 14 85 40 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6c0],edx
c0018152:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018157:	a0 80 18 03 c0       	mov    al,ds:0xc0031880
c001815c:	40                   	inc    eax
c001815d:	a2 80 18 03 c0       	mov    ds:0xc0031880,al
c0018162:	e9 bb 01 00 00       	jmp    c0018322 <scanMADT()+0x469>
c0018167:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c001816c:	0f 85 e9 00 00 00    	jne    c001825b <scanMADT()+0x3a2>
c0018172:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018176:	8d 50 01             	lea    edx,[eax+0x1]
c0018179:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001817d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018181:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018185:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0018189:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001818d:	8d 50 01             	lea    edx,[eax+0x1]
c0018190:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018194:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018198:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001819c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00181a0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181a8:	01 d0                	add    eax,edx
c00181aa:	83 c0 2c             	add    eax,0x2c
c00181ad:	8a 00                	mov    al,BYTE PTR [eax]
c00181af:	0f b6 d0             	movzx  edx,al
c00181b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181b6:	8d 48 01             	lea    ecx,[eax+0x1]
c00181b9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181bd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00181c1:	0f b6 c0             	movzx  eax,al
c00181c4:	c1 e0 08             	shl    eax,0x8
c00181c7:	89 d1                	mov    ecx,edx
c00181c9:	09 c1                	or     ecx,eax
c00181cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181cf:	8d 50 02             	lea    edx,[eax+0x2]
c00181d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181d6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00181da:	0f b6 c0             	movzx  eax,al
c00181dd:	c1 e0 10             	shl    eax,0x10
c00181e0:	09 c1                	or     ecx,eax
c00181e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181e6:	8d 50 03             	lea    edx,[eax+0x3]
c00181e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181ed:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00181f1:	0f b6 c0             	movzx  eax,al
c00181f4:	c1 e0 18             	shl    eax,0x18
c00181f7:	09 c8                	or     eax,ecx
c00181f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00181fd:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018202:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018206:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001820a:	01 d0                	add    eax,edx
c001820c:	83 c0 2c             	add    eax,0x2c
c001820f:	8a 00                	mov    al,BYTE PTR [eax]
c0018211:	0f b6 c0             	movzx  eax,al
c0018214:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018218:	8d 4a 01             	lea    ecx,[edx+0x1]
c001821b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001821f:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0018223:	0f b6 d2             	movzx  edx,dl
c0018226:	c1 e2 08             	shl    edx,0x8
c0018229:	09 d0                	or     eax,edx
c001822b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0018230:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018235:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001823a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001823e:	88 90 40 e1 02 c0    	mov    BYTE PTR [eax-0x3ffd1ec0],dl
c0018244:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0018249:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001824e:	66 89 84 12 60 18 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce7a0],ax
c0018256:	e9 c7 00 00 00       	jmp    c0018322 <scanMADT()+0x469>
c001825b:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0018260:	0f 85 b0 00 00 00    	jne    c0018316 <scanMADT()+0x45d>
c0018266:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001826a:	8d 50 01             	lea    edx,[eax+0x1]
c001826d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018271:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018275:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018279:	0f b6 c0             	movzx  eax,al
c001827c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018280:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018284:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018288:	01 d0                	add    eax,edx
c001828a:	83 c0 2c             	add    eax,0x2c
c001828d:	8a 00                	mov    al,BYTE PTR [eax]
c001828f:	0f b6 d0             	movzx  edx,al
c0018292:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018296:	8d 48 01             	lea    ecx,[eax+0x1]
c0018299:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001829d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00182a1:	0f b6 c0             	movzx  eax,al
c00182a4:	c1 e0 08             	shl    eax,0x8
c00182a7:	09 d0                	or     eax,edx
c00182a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00182ad:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00182b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00182b6:	8d 50 01             	lea    edx,[eax+0x1]
c00182b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00182bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00182c1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00182c5:	0f b6 c0             	movzx  eax,al
c00182c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00182cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182d0:	c1 e0 08             	shl    eax,0x8
c00182d3:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00182d7:	89 c1                	mov    ecx,eax
c00182d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182dd:	c1 e0 18             	shl    eax,0x18
c00182e0:	89 c3                	mov    ebx,eax
c00182e2:	a1 d0 17 03 c0       	mov    eax,ds:0xc00317d0
c00182e7:	8d 50 01             	lea    edx,[eax+0x1]
c00182ea:	89 15 d0 17 03 c0    	mov    DWORD PTR ds:0xc00317d0,edx
c00182f0:	09 d9                	or     ecx,ebx
c00182f2:	89 ca                	mov    edx,ecx
c00182f4:	89 14 85 e0 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce820],edx
c00182fb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00182ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018307:	68 b4 bf 02 c0       	push   0xc002bfb4
c001830c:	e8 bc ab ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0018311:	83 c4 10             	add    esp,0x10
c0018314:	eb 0c                	jmp    c0018322 <scanMADT()+0x469>
c0018316:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c001831b:	75 05                	jne    c0018322 <scanMADT()+0x469>
c001831d:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0018322:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0018327:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001832b:	01 d0                	add    eax,edx
c001832d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018331:	e9 54 fc ff ff       	jmp    c0017f8a <scanMADT()+0xd1>
c0018336:	90                   	nop
c0018337:	eb 01                	jmp    c001833a <scanMADT()+0x481>
c0018339:	90                   	nop
c001833a:	83 c4 38             	add    esp,0x38
c001833d:	5b                   	pop    ebx
c001833e:	c3                   	ret    
c001833f:	90                   	nop

c0018340 <ACPI::ACPI()>:
c0018340:	83 ec 0c             	sub    esp,0xc
c0018343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018347:	83 ec 08             	sub    esp,0x8
c001834a:	68 15 be 02 c0       	push   0xc002be15
c001834f:	50                   	push   eax
c0018350:	e8 8b c1 ff ff       	call   c00144e0 <Device::Device(char const*)>
c0018355:	83 c4 10             	add    esp,0x10
c0018358:	ba 50 c0 02 c0       	mov    edx,0xc002c050
c001835d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018361:	89 10                	mov    DWORD PTR [eax],edx
c0018363:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018367:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001836e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018372:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001837c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018380:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001838a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001838e:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018399:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00183a0:	e8 14 fb ff ff       	call   c0017eb9 <scanMADT()>
c00183a5:	90                   	nop
c00183a6:	83 c4 0c             	add    esp,0xc
c00183a9:	c3                   	ret    

c00183aa <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00183aa:	83 ec 2c             	sub    esp,0x2c
c00183ad:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00183b1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00183b5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00183b9:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00183bd:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00183c2:	88 d0                	mov    al,dl
c00183c4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00183c8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00183cd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00183d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183d9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183df:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00183e3:	0f 8d 97 00 00 00    	jge    c0018480 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00183e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183f1:	83 c2 2a             	add    edx,0x2a
c00183f4:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00183f8:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00183fd:	75 78                	jne    c0018477 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00183ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018403:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018407:	83 c2 2a             	add    edx,0x2a
c001840a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001840e:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0018412:	75 63                	jne    c0018477 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018414:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018419:	74 3a                	je     c0018455 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c001841b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001841f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018423:	83 c2 2a             	add    edx,0x2a
c0018426:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001842a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001842e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018431:	39 c2                	cmp    edx,eax
c0018433:	74 10                	je     c0018445 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0018435:	83 ec 0c             	sub    esp,0xc
c0018438:	68 f0 bf 02 c0       	push   0xc002bff0
c001843d:	e8 4e 24 00 00       	call   c001a890 <Krnl::panic(char const*)>
c0018442:	83 c4 10             	add    esp,0x10
c0018445:	83 ec 0c             	sub    esp,0xc
c0018448:	68 1a be 02 c0       	push   0xc002be1a
c001844d:	e8 3e 24 00 00       	call   c001a890 <Krnl::panic(char const*)>
c0018452:	83 c4 10             	add    esp,0x10
c0018455:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018459:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001845d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018461:	83 c2 2a             	add    edx,0x2a
c0018464:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0018468:	8b 02                	mov    eax,DWORD PTR [edx]
c001846a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001846d:	89 01                	mov    DWORD PTR [ecx],eax
c001846f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018472:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018477:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001847b:	e9 55 ff ff ff       	jmp    c00183d5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018480:	90                   	nop
c0018481:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018485:	83 c4 2c             	add    esp,0x2c
c0018488:	c2 04 00             	ret    0x4
c001848b:	90                   	nop

c001848c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001848c:	83 ec 1c             	sub    esp,0x1c
c001848f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018493:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0018497:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001849b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00184a0:	88 c8                	mov    al,cl
c00184a2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00184a6:	88 d0                	mov    al,dl
c00184a8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00184ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184b0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00184b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184ba:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00184bd:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00184c1:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00184c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184c9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00184cf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00184d3:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00184d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00184da:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00184df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184e3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00184e9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00184ed:	8d 48 01             	lea    ecx,[eax+0x1]
c00184f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184f4:	83 c2 2a             	add    edx,0x2a
c00184f7:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00184fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184ff:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018505:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018509:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001850c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018510:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0018514:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018518:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001851e:	8d 50 01             	lea    edx,[eax+0x1]
c0018521:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018525:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001852b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001852f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018535:	3d 00 02 00 00       	cmp    eax,0x200
c001853a:	75 10                	jne    c001854c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c001853c:	83 ec 0c             	sub    esp,0xc
c001853f:	68 29 be 02 c0       	push   0xc002be29
c0018544:	e8 47 23 00 00       	call   c001a890 <Krnl::panic(char const*)>
c0018549:	83 c4 10             	add    esp,0x10
c001854c:	90                   	nop
c001854d:	83 c4 1c             	add    esp,0x1c
c0018550:	c3                   	ret    
c0018551:	90                   	nop

c0018552 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018552:	b8 00 00 00 00       	mov    eax,0x0
c0018557:	c3                   	ret    

c0018558 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018558:	83 ec 1c             	sub    esp,0x1c
c001855b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001855f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018562:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018566:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c001856b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018570:	83 ec 08             	sub    esp,0x8
c0018573:	52                   	push   edx
c0018574:	50                   	push   eax
c0018575:	e8 ca 69 ff ff       	call   c000ef44 <Computer::readCMOS(unsigned char)>
c001857a:	83 c4 10             	add    esp,0x10
c001857d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018581:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0018586:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001858b:	83 ec 04             	sub    esp,0x4
c001858e:	6a 01                	push   0x1
c0018590:	52                   	push   edx
c0018591:	50                   	push   eax
c0018592:	e8 c3 6a ff ff       	call   c000f05a <Computer::writeCMOS(unsigned char, unsigned char)>
c0018597:	83 c4 10             	add    esp,0x10
c001859a:	90                   	nop
c001859b:	83 c4 1c             	add    esp,0x1c
c001859e:	c3                   	ret    
c001859f:	90                   	nop

c00185a0 <ACPI::sleep()>:
c00185a0:	83 ec 0c             	sub    esp,0xc
c00185a3:	a1 a0 15 03 c0       	mov    eax,ds:0xc00315a0
c00185a8:	85 c0                	test   eax,eax
c00185aa:	74 07                	je     c00185b3 <ACPI::sleep()+0x13>
c00185ac:	a1 a0 15 03 c0       	mov    eax,ds:0xc00315a0
c00185b1:	ff d0                	call   eax
c00185b3:	90                   	nop
c00185b4:	83 c4 0c             	add    esp,0xc
c00185b7:	c3                   	ret    

c00185b8 <ACPI::open(int, int, void*)>:
c00185b8:	57                   	push   edi
c00185b9:	56                   	push   esi
c00185ba:	53                   	push   ebx
c00185bb:	83 ec 60             	sub    esp,0x60
c00185be:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185c2:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00185c9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185cd:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00185d4:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c00185d9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00185df:	83 e0 04             	and    eax,0x4
c00185e2:	84 c0                	test   al,al
c00185e4:	74 47                	je     c001862d <ACPI::open(int, int, void*)+0x75>
c00185e6:	a1 c8 17 03 c0       	mov    eax,ds:0xc00317c8
c00185eb:	83 ec 08             	sub    esp,0x8
c00185ee:	68 46 be 02 c0       	push   0xc002be46
c00185f3:	50                   	push   eax
c00185f4:	e8 24 f8 ff ff       	call   c0017e1d <findDataTable(unsigned char*, char*)>
c00185f9:	83 c4 10             	add    esp,0x10
c00185fc:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0018600:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
c0018605:	74 26                	je     c001862d <ACPI::open(int, int, void*)+0x75>
c0018607:	83 ec 0c             	sub    esp,0xc
c001860a:	68 4b be 02 c0       	push   0xc002be4b
c001860f:	e8 b9 a8 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0018614:	83 c4 10             	add    esp,0x10
c0018617:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001861b:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018622:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018626:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001862d:	c7 44 24 58 5f 0c 00 00 	mov    DWORD PTR [esp+0x58],0xc5f
c0018635:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0018639:	8a 00                	mov    al,BYTE PTR [eax]
c001863b:	3c 01                	cmp    al,0x1
c001863d:	75 28                	jne    c0018667 <ACPI::open(int, int, void*)+0xaf>
c001863f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018643:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001864a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001864e:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018655:	83 ec 0c             	sub    esp,0xc
c0018658:	68 5c be 02 c0       	push   0xc002be5c
c001865d:	e8 6b a8 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0018662:	83 c4 10             	add    esp,0x10
c0018665:	eb 25                	jmp    c001868c <ACPI::open(int, int, void*)+0xd4>
c0018667:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001866b:	8a 00                	mov    al,BYTE PTR [eax]
c001866d:	3c 02                	cmp    al,0x2
c001866f:	75 1b                	jne    c001868c <ACPI::open(int, int, void*)+0xd4>
c0018671:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018675:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001867c:	83 ec 0c             	sub    esp,0xc
c001867f:	68 64 be 02 c0       	push   0xc002be64
c0018684:	e8 44 a8 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0018689:	83 c4 10             	add    esp,0x10
c001868c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018690:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018696:	83 f0 01             	xor    eax,0x1
c0018699:	84 c0                	test   al,al
c001869b:	74 6a                	je     c0018707 <ACPI::open(int, int, void*)+0x14f>
c001869d:	83 ec 0c             	sub    esp,0xc
c00186a0:	68 6c be 02 c0       	push   0xc002be6c
c00186a5:	e8 23 a8 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00186aa:	83 c4 10             	add    esp,0x10
c00186ad:	e8 9e 7a fe ff       	call   c0000150 <manualPCIProbe>
c00186b2:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00186b6:	83 7c 24 54 01       	cmp    DWORD PTR [esp+0x54],0x1
c00186bb:	75 28                	jne    c00186e5 <ACPI::open(int, int, void*)+0x12d>
c00186bd:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186c1:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00186c8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186cc:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00186d3:	83 ec 0c             	sub    esp,0xc
c00186d6:	68 7a be 02 c0       	push   0xc002be7a
c00186db:	e8 ed a7 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00186e0:	83 c4 10             	add    esp,0x10
c00186e3:	eb 22                	jmp    c0018707 <ACPI::open(int, int, void*)+0x14f>
c00186e5:	83 7c 24 54 02       	cmp    DWORD PTR [esp+0x54],0x2
c00186ea:	75 1b                	jne    c0018707 <ACPI::open(int, int, void*)+0x14f>
c00186ec:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186f0:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00186f7:	83 ec 0c             	sub    esp,0xc
c00186fa:	68 84 be 02 c0       	push   0xc002be84
c00186ff:	e8 c9 a7 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0018704:	83 c4 10             	add    esp,0x10
c0018707:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001870b:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018711:	84 c0                	test   al,al
c0018713:	74 13                	je     c0018728 <ACPI::open(int, int, void*)+0x170>
c0018715:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018719:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c001871f:	83 f0 01             	xor    eax,0x1
c0018722:	0f b6 c0             	movzx  eax,al
c0018725:	40                   	inc    eax
c0018726:	eb 05                	jmp    c001872d <ACPI::open(int, int, void*)+0x175>
c0018728:	b8 00 00 00 00       	mov    eax,0x0
c001872d:	83 ec 08             	sub    esp,0x8
c0018730:	50                   	push   eax
c0018731:	68 8e be 02 c0       	push   0xc002be8e
c0018736:	e8 92 a7 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001873b:	83 c4 10             	add    esp,0x10
c001873e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018742:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018748:	84 c0                	test   al,al
c001874a:	74 67                	je     c00187b3 <ACPI::open(int, int, void*)+0x1fb>
c001874c:	c7 44 24 38 58 01 00 00 	mov    DWORD PTR [esp+0x38],0x158
c0018754:	83 ec 0c             	sub    esp,0xc
c0018757:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001875b:	e8 ce 71 ff ff       	call   c000f92e <malloc>
c0018760:	83 c4 10             	add    esp,0x10
c0018763:	89 c3                	mov    ebx,eax
c0018765:	83 ec 0c             	sub    esp,0xc
c0018768:	53                   	push   ebx
c0018769:	e8 42 a9 00 00       	call   c00230b0 <PCI::PCI()>
c001876e:	83 c4 10             	add    esp,0x10
c0018771:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c0018775:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018779:	83 ec 08             	sub    esp,0x8
c001877c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0018780:	50                   	push   eax
c0018781:	e8 6a bb ff ff       	call   c00142f0 <Device::addChild(Device*)>
c0018786:	83 c4 10             	add    esp,0x10
c0018789:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001878d:	8b 00                	mov    eax,DWORD PTR [eax]
c001878f:	83 c0 08             	add    eax,0x8
c0018792:	8b 00                	mov    eax,DWORD PTR [eax]
c0018794:	6a 00                	push   0x0
c0018796:	6a 00                	push   0x0
c0018798:	6a 00                	push   0x0
c001879a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001879e:	ff d0                	call   eax
c00187a0:	83 c4 10             	add    esp,0x10
c00187a3:	83 ec 0c             	sub    esp,0xc
c00187a6:	68 97 be 02 c0       	push   0xc002be97
c00187ab:	e8 1d a7 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00187b0:	83 c4 10             	add    esp,0x10
c00187b3:	83 ec 0c             	sub    esp,0xc
c00187b6:	68 a2 be 02 c0       	push   0xc002bea2
c00187bb:	e8 11 49 00 00       	call   c001d0d1 <Thr::loadKernelSymbolTable(char const*)>
c00187c0:	83 c4 10             	add    esp,0x10
c00187c3:	83 ec 0c             	sub    esp,0xc
c00187c6:	6a 0c                	push   0xc
c00187c8:	e8 39 95 ff ff       	call   c0011d06 <Virt::setupPageSwapping(int)>
c00187cd:	83 c4 10             	add    esp,0x10
c00187d0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00187d4:	83 ec 08             	sub    esp,0x8
c00187d7:	6a 12                	push   0x12
c00187d9:	50                   	push   eax
c00187da:	e8 81 be ff ff       	call   c0014660 <getDevicesOfType(DeviceType)>
c00187df:	83 c4 0c             	add    esp,0xc
c00187e2:	83 ec 0c             	sub    esp,0xc
c00187e5:	8d 44 24 34          	lea    eax,[esp+0x34]
c00187e9:	50                   	push   eax
c00187ea:	e8 f1 0c 01 00       	call   c00294e0 <LinkedList<Device>::isEmpty()>
c00187ef:	83 c4 10             	add    esp,0x10
c00187f2:	83 f0 01             	xor    eax,0x1
c00187f5:	84 c0                	test   al,al
c00187f7:	0f 84 fd 00 00 00    	je     c00188fa <ACPI::open(int, int, void*)+0x342>
c00187fd:	83 ec 0c             	sub    esp,0xc
c0018800:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018804:	50                   	push   eax
c0018805:	e8 f2 0c 01 00       	call   c00294fc <LinkedList<Device>::getFirstElement()>
c001880a:	83 c4 10             	add    esp,0x10
c001880d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018811:	83 ec 0c             	sub    esp,0xc
c0018814:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018818:	50                   	push   eax
c0018819:	e8 e6 0c 01 00       	call   c0029504 <LinkedList<Device>::removeFirst()>
c001881e:	83 c4 10             	add    esp,0x10
c0018821:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018825:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0018829:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001882d:	83 ec 0c             	sub    esp,0xc
c0018830:	50                   	push   eax
c0018831:	e8 a6 bd ff ff       	call   c00145dc <Device::getName()>
c0018836:	83 c4 10             	add    esp,0x10
c0018839:	83 ec 08             	sub    esp,0x8
c001883c:	50                   	push   eax
c001883d:	68 20 c0 02 c0       	push   0xc002c020
c0018842:	e8 86 a6 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0018847:	83 c4 10             	add    esp,0x10
c001884a:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001884e:	8d 44 24 04          	lea    eax,[esp+0x4]
c0018852:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0018858:	ba 09 00 00 00       	mov    edx,0x9
c001885d:	fc                   	cld    
c001885e:	89 c7                	mov    edi,eax
c0018860:	89 de                	mov    esi,ebx
c0018862:	89 d1                	mov    ecx,edx
c0018864:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018866:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001886a:	0f b6 c0             	movzx  eax,al
c001886d:	83 ec 08             	sub    esp,0x8
c0018870:	50                   	push   eax
c0018871:	68 c0 be 02 c0       	push   0xc002bec0
c0018876:	e8 52 a6 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001887b:	83 c4 10             	add    esp,0x10
c001887e:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018882:	0f b6 c0             	movzx  eax,al
c0018885:	83 ec 08             	sub    esp,0x8
c0018888:	50                   	push   eax
c0018889:	68 d2 be 02 c0       	push   0xc002bed2
c001888e:	e8 3a a6 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0018893:	83 c4 10             	add    esp,0x10
c0018896:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c001889b:	0f b7 c0             	movzx  eax,ax
c001889e:	83 ec 08             	sub    esp,0x8
c00188a1:	50                   	push   eax
c00188a2:	68 e4 be 02 c0       	push   0xc002bee4
c00188a7:	e8 21 a6 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00188ac:	83 c4 10             	add    esp,0x10
c00188af:	83 ec 0c             	sub    esp,0xc
c00188b2:	83 ec 24             	sub    esp,0x24
c00188b5:	89 e0                	mov    eax,esp
c00188b7:	89 c3                	mov    ebx,eax
c00188b9:	8d 44 24 34          	lea    eax,[esp+0x34]
c00188bd:	ba 09 00 00 00       	mov    edx,0x9
c00188c2:	89 df                	mov    edi,ebx
c00188c4:	89 c6                	mov    esi,eax
c00188c6:	89 d1                	mov    ecx,edx
c00188c8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00188ca:	e8 43 ab 00 00       	call   c0023412 <PCI::pciDetailsToFilepath(PCIDeviceInfo)>
c00188cf:	83 c4 30             	add    esp,0x30
c00188d2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00188d6:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00188db:	0f 84 01 ff ff ff    	je     c00187e2 <ACPI::open(int, int, void*)+0x22a>
c00188e1:	83 ec 08             	sub    esp,0x8
c00188e4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00188e8:	68 f6 be 02 c0       	push   0xc002bef6
c00188ed:	e8 db a5 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00188f2:	83 c4 10             	add    esp,0x10
c00188f5:	e9 e8 fe ff ff       	jmp    c00187e2 <ACPI::open(int, int, void*)+0x22a>
c00188fa:	83 ec 0c             	sub    esp,0xc
c00188fd:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018901:	50                   	push   eax
c0018902:	e8 d7 0b 01 00       	call   c00294de <LinkedList<Device>::~LinkedList()>
c0018907:	83 c4 10             	add    esp,0x10
c001890a:	8b 1d e8 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eee8
c0018910:	83 ec 08             	sub    esp,0x8
c0018913:	6a 01                	push   0x1
c0018915:	68 02 bf 02 c0       	push   0xc002bf02
c001891a:	e8 29 52 00 00       	call   c001db48 <Thr::loadDLL(char const*, bool)>
c001891f:	83 c4 10             	add    esp,0x10
c0018922:	83 ec 08             	sub    esp,0x8
c0018925:	53                   	push   ebx
c0018926:	50                   	push   eax
c0018927:	e8 47 54 00 00       	call   c001dd73 <Thr::executeDLL(unsigned long, void*)>
c001892c:	83 c4 10             	add    esp,0x10
c001892f:	8b 1d e8 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eee8
c0018935:	83 ec 08             	sub    esp,0x8
c0018938:	6a 01                	push   0x1
c001893a:	68 1f bf 02 c0       	push   0xc002bf1f
c001893f:	e8 04 52 00 00       	call   c001db48 <Thr::loadDLL(char const*, bool)>
c0018944:	83 c4 10             	add    esp,0x10
c0018947:	83 ec 08             	sub    esp,0x8
c001894a:	53                   	push   ebx
c001894b:	50                   	push   eax
c001894c:	e8 22 54 00 00       	call   c001dd73 <Thr::executeDLL(unsigned long, void*)>
c0018951:	83 c4 10             	add    esp,0x10
c0018954:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0018959:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001895f:	83 e0 04             	and    eax,0x4
c0018962:	84 c0                	test   al,al
c0018964:	0f 84 d3 00 00 00    	je     c0018a3d <ACPI::open(int, int, void*)+0x485>
c001896a:	c7 44 24 34 14 01 00 00 	mov    DWORD PTR [esp+0x34],0x114
c0018972:	83 ec 0c             	sub    esp,0xc
c0018975:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018979:	e8 b0 6f ff ff       	call   c000f92e <malloc>
c001897e:	83 c4 10             	add    esp,0x10
c0018981:	89 c3                	mov    ebx,eax
c0018983:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0018988:	83 ec 04             	sub    esp,0x4
c001898b:	50                   	push   eax
c001898c:	68 3c bf 02 c0       	push   0xc002bf3c
c0018991:	53                   	push   ebx
c0018992:	e8 95 aa ff ff       	call   c001342c <File::File(char const*, Process*)>
c0018997:	83 c4 10             	add    esp,0x10
c001899a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001899e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00189a3:	74 17                	je     c00189bc <ACPI::open(int, int, void*)+0x404>
c00189a5:	83 ec 0c             	sub    esp,0xc
c00189a8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00189ac:	e8 4d ad ff ff       	call   c00136fe <File::exists()>
c00189b1:	83 c4 10             	add    esp,0x10
c00189b4:	84 c0                	test   al,al
c00189b6:	74 04                	je     c00189bc <ACPI::open(int, int, void*)+0x404>
c00189b8:	b0 01                	mov    al,0x1
c00189ba:	eb 02                	jmp    c00189be <ACPI::open(int, int, void*)+0x406>
c00189bc:	b0 00                	mov    al,0x0
c00189be:	84 c0                	test   al,al
c00189c0:	74 22                	je     c00189e4 <ACPI::open(int, int, void*)+0x42c>
c00189c2:	83 ec 08             	sub    esp,0x8
c00189c5:	6a 01                	push   0x1
c00189c7:	68 3c bf 02 c0       	push   0xc002bf3c
c00189cc:	e8 77 51 00 00       	call   c001db48 <Thr::loadDLL(char const*, bool)>
c00189d1:	83 c4 10             	add    esp,0x10
c00189d4:	83 ec 08             	sub    esp,0x8
c00189d7:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00189db:	50                   	push   eax
c00189dc:	e8 92 53 00 00       	call   c001dd73 <Thr::executeDLL(unsigned long, void*)>
c00189e1:	83 c4 10             	add    esp,0x10
c00189e4:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00189e9:	74 1e                	je     c0018a09 <ACPI::open(int, int, void*)+0x451>
c00189eb:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00189f0:	74 17                	je     c0018a09 <ACPI::open(int, int, void*)+0x451>
c00189f2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00189f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00189f8:	83 c0 08             	add    eax,0x8
c00189fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00189fd:	83 ec 0c             	sub    esp,0xc
c0018a00:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018a04:	ff d0                	call   eax
c0018a06:	83 c4 10             	add    esp,0x10
c0018a09:	a1 c8 17 03 c0       	mov    eax,ds:0xc00317c8
c0018a0e:	83 ec 08             	sub    esp,0x8
c0018a11:	68 59 bf 02 c0       	push   0xc002bf59
c0018a16:	50                   	push   eax
c0018a17:	e8 01 f4 ff ff       	call   c0017e1d <findDataTable(unsigned char*, char*)>
c0018a1c:	83 c4 10             	add    esp,0x10
c0018a1f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0018a23:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0018a28:	74 13                	je     c0018a3d <ACPI::open(int, int, void*)+0x485>
c0018a2a:	83 ec 08             	sub    esp,0x8
c0018a2d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0018a31:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0018a35:	e8 1e fb ff ff       	call   c0018558 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018a3a:	83 c4 10             	add    esp,0x10
c0018a3d:	b8 00 00 00 00       	mov    eax,0x0
c0018a42:	83 c4 60             	add    esp,0x60
c0018a45:	5b                   	pop    ebx
c0018a46:	5e                   	pop    esi
c0018a47:	5f                   	pop    edi
c0018a48:	c3                   	ret    
c0018a49:	90                   	nop

c0018a4a <CPU::close(int, int, void*)>:
c0018a4a:	31 c0                	xor    eax,eax
c0018a4c:	c3                   	ret    
c0018a4d:	90                   	nop

c0018a4e <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018a4e:	55                   	push   ebp
c0018a4f:	57                   	push   edi
c0018a50:	56                   	push   esi
c0018a51:	53                   	push   ebx
c0018a52:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018a56:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a5a:	89 ce                	mov    esi,ecx
c0018a5c:	89 d5                	mov    ebp,edx
c0018a5e:	80 f9 04             	cmp    cl,0x4
c0018a61:	75 28                	jne    c0018a8b <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018a63:	8d 42 f9             	lea    eax,[edx-0x7]
c0018a66:	3c 03                	cmp    al,0x3
c0018a68:	0f 86 63 01 00 00    	jbe    c0018bd1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018a6e:	80 fa 03             	cmp    dl,0x3
c0018a71:	0f 84 5a 01 00 00    	je     c0018bd1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018a77:	8d 7a f2             	lea    edi,[edx-0xe]
c0018a7a:	b8 10 e3 02 c0       	mov    eax,0xc002e310
c0018a7f:	89 fb                	mov    ebx,edi
c0018a81:	80 fb 01             	cmp    bl,0x1
c0018a84:	77 4e                	ja     c0018ad4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018a86:	e9 52 01 00 00       	jmp    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a8b:	80 f9 05             	cmp    cl,0x5
c0018a8e:	75 4d                	jne    c0018add <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018a90:	b8 20 e3 02 c0       	mov    eax,0xc002e320
c0018a95:	80 fa 03             	cmp    dl,0x3
c0018a98:	0f 86 3f 01 00 00    	jbe    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a9e:	8d 7a fa             	lea    edi,[edx-0x6]
c0018aa1:	b8 30 e3 02 c0       	mov    eax,0xc002e330
c0018aa6:	89 fb                	mov    ebx,edi
c0018aa8:	80 fb 01             	cmp    bl,0x1
c0018aab:	0f 86 2c 01 00 00    	jbe    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ab1:	b8 40 e3 02 c0       	mov    eax,0xc002e340
c0018ab6:	80 fa 08             	cmp    dl,0x8
c0018ab9:	0f 84 1e 01 00 00    	je     c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018abf:	89 d7                	mov    edi,edx
c0018ac1:	b8 50 e3 02 c0       	mov    eax,0xc002e350
c0018ac6:	83 e7 fb             	and    edi,0xfffffffb
c0018ac9:	89 fb                	mov    ebx,edi
c0018acb:	80 fb 09             	cmp    bl,0x9
c0018ace:	0f 84 09 01 00 00    	je     c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ad4:	31 c0                	xor    eax,eax
c0018ad6:	89 eb                	mov    ebx,ebp
c0018ad8:	0f b6 fb             	movzx  edi,bl
c0018adb:	eb 30                	jmp    c0018b0d <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018add:	31 c0                	xor    eax,eax
c0018adf:	80 f9 06             	cmp    cl,0x6
c0018ae2:	75 f2                	jne    c0018ad6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018ae4:	80 fa 0a             	cmp    dl,0xa
c0018ae7:	77 ed                	ja     c0018ad6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018ae9:	bf de 05 00 00       	mov    edi,0x5de
c0018aee:	0f a3 d7             	bt     edi,edx
c0018af1:	73 e3                	jae    c0018ad6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018af3:	b8 60 e3 02 c0       	mov    eax,0xc002e360
c0018af8:	e9 e0 00 00 00       	jmp    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018afd:	39 c7                	cmp    edi,eax
c0018aff:	0f 84 d3 00 00 00    	je     c0018bd8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018b05:	40                   	inc    eax
c0018b06:	3d d0 00 00 00       	cmp    eax,0xd0
c0018b0b:	74 09                	je     c0018b16 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018b0d:	89 f3                	mov    ebx,esi
c0018b0f:	80 fb 0f             	cmp    bl,0xf
c0018b12:	75 f1                	jne    c0018b05 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018b14:	eb e7                	jmp    c0018afd <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018b16:	80 f9 10             	cmp    cl,0x10
c0018b19:	75 14                	jne    c0018b2f <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018b1b:	8d 42 fc             	lea    eax,[edx-0x4]
c0018b1e:	83 e0 fb             	and    eax,0xfffffffb
c0018b21:	3c 02                	cmp    al,0x2
c0018b23:	76 34                	jbe    c0018b59 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018b25:	b8 66 c3 02 c0       	mov    eax,0xc002c366
c0018b2a:	80 fa 02             	cmp    dl,0x2
c0018b2d:	eb 24                	jmp    c0018b53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018b2f:	80 f9 11             	cmp    cl,0x11
c0018b32:	75 13                	jne    c0018b47 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018b34:	b8 66 c3 02 c0       	mov    eax,0xc002c366
c0018b39:	80 fa 03             	cmp    dl,0x3
c0018b3c:	0f 85 9b 00 00 00    	jne    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b42:	e9 91 00 00 00       	jmp    c0018bd8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018b47:	80 f9 12             	cmp    cl,0x12
c0018b4a:	75 14                	jne    c0018b60 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018b4c:	b8 66 c3 02 c0       	mov    eax,0xc002c366
c0018b51:	fe ca                	dec    dl
c0018b53:	0f 85 84 00 00 00    	jne    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b59:	b8 80 e3 02 c0       	mov    eax,0xc002e380
c0018b5e:	eb 7d                	jmp    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b60:	80 f9 14             	cmp    cl,0x14
c0018b63:	75 12                	jne    c0018b77 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018b65:	4a                   	dec    edx
c0018b66:	b8 66 c3 02 c0       	mov    eax,0xc002c366
c0018b6b:	80 fa 01             	cmp    dl,0x1
c0018b6e:	77 6d                	ja     c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b70:	b8 90 e3 02 c0       	mov    eax,0xc002e390
c0018b75:	eb 66                	jmp    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b77:	80 f9 15             	cmp    cl,0x15
c0018b7a:	75 31                	jne    c0018bad <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018b7c:	b8 a0 e3 02 c0       	mov    eax,0xc002e3a0
c0018b81:	80 fa 01             	cmp    dl,0x1
c0018b84:	74 57                	je     c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b86:	b8 66 c3 02 c0       	mov    eax,0xc002c366
c0018b8b:	80 fa 13             	cmp    dl,0x13
c0018b8e:	76 0c                	jbe    c0018b9c <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018b90:	80 fa 30             	cmp    dl,0x30
c0018b93:	75 48                	jne    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b95:	b8 c0 e3 02 c0       	mov    eax,0xc002e3c0
c0018b9a:	eb 41                	jmp    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b9c:	b9 04 00 09 00       	mov    ecx,0x90004
c0018ba1:	0f a3 d1             	bt     ecx,edx
c0018ba4:	73 37                	jae    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ba6:	b8 b0 e3 02 c0       	mov    eax,0xc002e3b0
c0018bab:	eb 30                	jmp    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bad:	b8 66 c3 02 c0       	mov    eax,0xc002c366
c0018bb2:	80 f9 16             	cmp    cl,0x16
c0018bb5:	75 26                	jne    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bb7:	b8 d0 e3 02 c0       	mov    eax,0xc002e3d0
c0018bbc:	84 d2                	test   dl,dl
c0018bbe:	74 1d                	je     c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bc0:	b8 66 c3 02 c0       	mov    eax,0xc002c366
c0018bc5:	80 fa 30             	cmp    dl,0x30
c0018bc8:	75 13                	jne    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bca:	b8 e0 e3 02 c0       	mov    eax,0xc002e3e0
c0018bcf:	eb 0c                	jmp    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bd1:	b8 00 e3 02 c0       	mov    eax,0xc002e300
c0018bd6:	eb 05                	jmp    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bd8:	b8 70 e3 02 c0       	mov    eax,0xc002e370
c0018bdd:	5b                   	pop    ebx
c0018bde:	5e                   	pop    esi
c0018bdf:	5f                   	pop    edi
c0018be0:	5d                   	pop    ebp
c0018be1:	c3                   	ret    

c0018be2 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018be2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018be6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018bea:	80 f9 04             	cmp    cl,0x4
c0018bed:	75 6b                	jne    c0018c5a <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018bef:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c0018bf4:	80 fa 01             	cmp    dl,0x1
c0018bf7:	0f 86 92 02 00 00    	jbe    c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bfd:	b8 70 e1 02 c0       	mov    eax,0xc002e170
c0018c02:	80 fa 02             	cmp    dl,0x2
c0018c05:	0f 84 84 02 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c0b:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0018c10:	80 fa 03             	cmp    dl,0x3
c0018c13:	0f 84 76 02 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c19:	b8 90 e1 02 c0       	mov    eax,0xc002e190
c0018c1e:	80 fa 04             	cmp    dl,0x4
c0018c21:	0f 84 68 02 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c27:	b8 a0 e1 02 c0       	mov    eax,0xc002e1a0
c0018c2c:	80 fa 05             	cmp    dl,0x5
c0018c2f:	0f 84 5a 02 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c35:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0018c3a:	80 fa 07             	cmp    dl,0x7
c0018c3d:	0f 84 4c 02 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c43:	83 ea 08             	sub    edx,0x8
c0018c46:	b8 66 c3 02 c0       	mov    eax,0xc002c366
c0018c4b:	80 fa 01             	cmp    dl,0x1
c0018c4e:	0f 87 3b 02 00 00    	ja     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c54:	b8 b0 e1 02 c0       	mov    eax,0xc002e1b0
c0018c59:	c3                   	ret    
c0018c5a:	80 f9 05             	cmp    cl,0x5
c0018c5d:	75 45                	jne    c0018ca4 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018c5f:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018c62:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0018c67:	80 f9 02             	cmp    cl,0x2
c0018c6a:	0f 86 1f 02 00 00    	jbe    c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c70:	80 fa 04             	cmp    dl,0x4
c0018c73:	0f 84 f3 01 00 00    	je     c0018e6c <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018c79:	80 fa 07             	cmp    dl,0x7
c0018c7c:	0f 84 0d 02 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c82:	b8 d0 e1 02 c0       	mov    eax,0xc002e1d0
c0018c87:	80 fa 08             	cmp    dl,0x8
c0018c8a:	0f 84 ff 01 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c90:	b8 66 c3 02 c0       	mov    eax,0xc002c366
c0018c95:	80 fa 09             	cmp    dl,0x9
c0018c98:	0f 85 f1 01 00 00    	jne    c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c9e:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0018ca3:	c3                   	ret    
c0018ca4:	80 f9 06             	cmp    cl,0x6
c0018ca7:	0f 85 85 01 00 00    	jne    c0018e32 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018cad:	b8 f0 e1 02 c0       	mov    eax,0xc002e1f0
c0018cb2:	80 fa 01             	cmp    dl,0x1
c0018cb5:	0f 84 d4 01 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cbb:	8d 42 fb             	lea    eax,[edx-0x5]
c0018cbe:	3c 01                	cmp    al,0x1
c0018cc0:	0f 86 ac 01 00 00    	jbe    c0018e72 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018cc6:	80 fa 03             	cmp    dl,0x3
c0018cc9:	0f 84 a3 01 00 00    	je     c0018e72 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018ccf:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018cd2:	b8 10 e2 02 c0       	mov    eax,0xc002e210
c0018cd7:	80 f9 01             	cmp    cl,0x1
c0018cda:	0f 86 af 01 00 00    	jbe    c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ce0:	80 fa 09             	cmp    dl,0x9
c0018ce3:	0f 84 8f 01 00 00    	je     c0018e78 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018ce9:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018cec:	80 f9 01             	cmp    cl,0x1
c0018cef:	0f 86 9a 01 00 00    	jbe    c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cf5:	b8 20 e2 02 c0       	mov    eax,0xc002e220
c0018cfa:	80 fa 0d             	cmp    dl,0xd
c0018cfd:	0f 84 8c 01 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d03:	b8 30 e2 02 c0       	mov    eax,0xc002e230
c0018d08:	80 fa 0e             	cmp    dl,0xe
c0018d0b:	0f 84 7e 01 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d11:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c0018d16:	80 fa 0f             	cmp    dl,0xf
c0018d19:	0f 84 70 01 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d1f:	b8 20 e2 02 c0       	mov    eax,0xc002e220
c0018d24:	80 fa 15             	cmp    dl,0x15
c0018d27:	0f 84 62 01 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d2d:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018d30:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c0018d35:	80 f9 01             	cmp    cl,0x1
c0018d38:	0f 86 51 01 00 00    	jbe    c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d3e:	80 fa 1a             	cmp    dl,0x1a
c0018d41:	0f 84 37 01 00 00    	je     c0018e7e <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018d47:	80 fa 1c             	cmp    dl,0x1c
c0018d4a:	0f 84 34 01 00 00    	je     c0018e84 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018d50:	80 fa 1d             	cmp    dl,0x1d
c0018d53:	0f 84 36 01 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d59:	b8 70 e2 02 c0       	mov    eax,0xc002e270
c0018d5e:	80 fa 25             	cmp    dl,0x25
c0018d61:	0f 84 28 01 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d67:	8d 4a da             	lea    ecx,[edx-0x26]
c0018d6a:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0018d6f:	80 f9 01             	cmp    cl,0x1
c0018d72:	0f 86 17 01 00 00    	jbe    c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d78:	b8 80 e2 02 c0       	mov    eax,0xc002e280
c0018d7d:	80 fa 2a             	cmp    dl,0x2a
c0018d80:	0f 84 09 01 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d86:	b8 70 e2 02 c0       	mov    eax,0xc002e270
c0018d8b:	80 fa 2c             	cmp    dl,0x2c
c0018d8e:	0f 84 fb 00 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d94:	b8 80 e2 02 c0       	mov    eax,0xc002e280
c0018d99:	80 fa 2d             	cmp    dl,0x2d
c0018d9c:	0f 84 ed 00 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018da2:	b8 50 e2 02 c0       	mov    eax,0xc002e250
c0018da7:	80 fa 2e             	cmp    dl,0x2e
c0018daa:	0f 84 df 00 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018db0:	b8 70 e2 02 c0       	mov    eax,0xc002e270
c0018db5:	80 fa 2f             	cmp    dl,0x2f
c0018db8:	0f 84 d1 00 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dbe:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018dc1:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0018dc6:	80 f9 01             	cmp    cl,0x1
c0018dc9:	0f 86 c0 00 00 00    	jbe    c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dcf:	b8 90 e2 02 c0       	mov    eax,0xc002e290
c0018dd4:	80 fa 37             	cmp    dl,0x37
c0018dd7:	0f 84 b2 00 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ddd:	b8 a0 e2 02 c0       	mov    eax,0xc002e2a0
c0018de2:	80 fa 3a             	cmp    dl,0x3a
c0018de5:	0f 84 a4 00 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018deb:	b8 b0 e2 02 c0       	mov    eax,0xc002e2b0
c0018df0:	80 fa 3c             	cmp    dl,0x3c
c0018df3:	0f 84 96 00 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018df9:	b8 c0 e2 02 c0       	mov    eax,0xc002e2c0
c0018dfe:	80 fa 3d             	cmp    dl,0x3d
c0018e01:	0f 84 88 00 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e07:	b8 a0 e2 02 c0       	mov    eax,0xc002e2a0
c0018e0c:	80 fa 3e             	cmp    dl,0x3e
c0018e0f:	74 7e                	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e11:	8d 42 bb             	lea    eax,[edx-0x45]
c0018e14:	3c 01                	cmp    al,0x1
c0018e16:	76 72                	jbe    c0018e8a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018e18:	80 fa 3f             	cmp    dl,0x3f
c0018e1b:	74 6d                	je     c0018e8a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018e1d:	80 fa 4a             	cmp    dl,0x4a
c0018e20:	74 0a                	je     c0018e2c <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018e22:	b8 66 c3 02 c0       	mov    eax,0xc002c366
c0018e27:	80 fa 4d             	cmp    dl,0x4d
c0018e2a:	75 63                	jne    c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e2c:	b8 90 e2 02 c0       	mov    eax,0xc002e290
c0018e31:	c3                   	ret    
c0018e32:	b8 66 c3 02 c0       	mov    eax,0xc002c366
c0018e37:	80 f9 0b             	cmp    cl,0xb
c0018e3a:	75 0a                	jne    c0018e46 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018e3c:	fe ca                	dec    dl
c0018e3e:	75 4f                	jne    c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e40:	b8 d0 e2 02 c0       	mov    eax,0xc002e2d0
c0018e45:	c3                   	ret    
c0018e46:	80 f9 0f             	cmp    cl,0xf
c0018e49:	75 44                	jne    c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e4b:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c0018e50:	80 fa 02             	cmp    dl,0x2
c0018e53:	76 3a                	jbe    c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e55:	8d 42 fd             	lea    eax,[edx-0x3]
c0018e58:	3c 01                	cmp    al,0x1
c0018e5a:	76 0a                	jbe    c0018e66 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018e5c:	b8 66 c3 02 c0       	mov    eax,0xc002c366
c0018e61:	80 fa 06             	cmp    dl,0x6
c0018e64:	75 29                	jne    c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e66:	b8 f0 e2 02 c0       	mov    eax,0xc002e2f0
c0018e6b:	c3                   	ret    
c0018e6c:	b8 d0 e1 02 c0       	mov    eax,0xc002e1d0
c0018e71:	c3                   	ret    
c0018e72:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0018e77:	c3                   	ret    
c0018e78:	b8 20 e2 02 c0       	mov    eax,0xc002e220
c0018e7d:	c3                   	ret    
c0018e7e:	b8 50 e2 02 c0       	mov    eax,0xc002e250
c0018e83:	c3                   	ret    
c0018e84:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0018e89:	c3                   	ret    
c0018e8a:	b8 b0 e2 02 c0       	mov    eax,0xc002e2b0
c0018e8f:	c3                   	ret    

c0018e90 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018e90:	60                   	pusha  
c0018e91:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018e95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e9d:	9c                   	pushf  
c0018e9e:	fa                   	cli    
c0018e9f:	0f 09                	wbinvd 
c0018ea1:	0f 30                	wrmsr  
c0018ea3:	9d                   	popf   
c0018ea4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ea8:	89 02                	mov    DWORD PTR [edx],eax
c0018eaa:	61                   	popa   
c0018eab:	c3                   	ret    

c0018eac <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018eac:	60                   	pusha  
c0018ead:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018eb1:	9c                   	pushf  
c0018eb2:	fa                   	cli    
c0018eb3:	0f 09                	wbinvd 
c0018eb5:	31 c0                	xor    eax,eax
c0018eb7:	31 d2                	xor    edx,edx
c0018eb9:	0f 32                	rdmsr  
c0018ebb:	9d                   	popf   
c0018ebc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018ec0:	89 02                	mov    DWORD PTR [edx],eax
c0018ec2:	61                   	popa   
c0018ec3:	c3                   	ret    

c0018ec4 <CPU::AMD_K6_writeback(int, int, int)>:
c0018ec4:	56                   	push   esi
c0018ec5:	53                   	push   ebx
c0018ec6:	83 ec 10             	sub    esp,0x10
c0018ec9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ecd:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018ed2:	75 5d                	jne    c0018f31 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ed4:	83 f8 08             	cmp    eax,0x8
c0018ed7:	75 09                	jne    c0018ee2 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018ed9:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018ede:	7e 13                	jle    c0018ef3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018ee0:	eb 30                	jmp    c0018f12 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018ee2:	83 f8 06             	cmp    eax,0x6
c0018ee5:	7c 4a                	jl     c0018f31 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ee7:	83 f8 07             	cmp    eax,0x7
c0018eea:	7e 07                	jle    c0018ef3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018eec:	83 f8 09             	cmp    eax,0x9
c0018eef:	74 21                	je     c0018f12 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018ef1:	eb 3e                	jmp    c0018f31 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ef3:	89 e6                	mov    esi,esp
c0018ef5:	8b 1d 28 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002ef28
c0018efb:	56                   	push   esi
c0018efc:	c1 eb 15             	shr    ebx,0x15
c0018eff:	68 82 00 00 c0       	push   0xc0000082
c0018f04:	83 e3 7e             	and    ebx,0x7e
c0018f07:	e8 a0 ff ff ff       	call   c0018eac <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018f0c:	56                   	push   esi
c0018f0d:	6a 00                	push   0x0
c0018f0f:	53                   	push   ebx
c0018f10:	eb 12                	jmp    c0018f24 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018f12:	89 e3                	mov    ebx,esp
c0018f14:	53                   	push   ebx
c0018f15:	68 82 00 00 c0       	push   0xc0000082
c0018f1a:	e8 8d ff ff ff       	call   c0018eac <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018f1f:	53                   	push   ebx
c0018f20:	6a 00                	push   0x0
c0018f22:	6a 00                	push   0x0
c0018f24:	68 82 00 00 c0       	push   0xc0000082
c0018f29:	e8 62 ff ff ff       	call   c0018e90 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018f2e:	83 c4 18             	add    esp,0x18
c0018f31:	83 c4 10             	add    esp,0x10
c0018f34:	5b                   	pop    ebx
c0018f35:	5e                   	pop    esi
c0018f36:	c3                   	ret    
c0018f37:	90                   	nop

c0018f38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018f38:	55                   	push   ebp
c0018f39:	57                   	push   edi
c0018f3a:	56                   	push   esi
c0018f3b:	53                   	push   ebx
c0018f3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f40:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018f44:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018f48:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018f4c:	39 05 00 e4 02 c0    	cmp    DWORD PTR ds:0xc002e400,eax
c0018f52:	75 23                	jne    c0018f77 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018f54:	a1 2c 1a 03 c0       	mov    eax,ds:0xc0031a2c
c0018f59:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018f5d:	89 06                	mov    DWORD PTR [esi],eax
c0018f5f:	a1 28 1a 03 c0       	mov    eax,ds:0xc0031a28
c0018f64:	89 07                	mov    DWORD PTR [edi],eax
c0018f66:	a1 24 1a 03 c0       	mov    eax,ds:0xc0031a24
c0018f6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018f6e:	a1 20 1a 03 c0       	mov    eax,ds:0xc0031a20
c0018f73:	89 02                	mov    DWORD PTR [edx],eax
c0018f75:	eb 3f                	jmp    c0018fb6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018f77:	31 c9                	xor    ecx,ecx
c0018f79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f7d:	0f a2                	cpuid  
c0018f7f:	89 06                	mov    DWORD PTR [esi],eax
c0018f81:	89 1f                	mov    DWORD PTR [edi],ebx
c0018f83:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f87:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018f8a:	89 10                	mov    DWORD PTR [eax],edx
c0018f8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f90:	a3 00 e4 02 c0       	mov    ds:0xc002e400,eax
c0018f95:	8b 06                	mov    eax,DWORD PTR [esi]
c0018f97:	a3 2c 1a 03 c0       	mov    ds:0xc0031a2c,eax
c0018f9c:	8b 07                	mov    eax,DWORD PTR [edi]
c0018f9e:	a3 28 1a 03 c0       	mov    ds:0xc0031a28,eax
c0018fa3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018fa6:	a3 24 1a 03 c0       	mov    ds:0xc0031a24,eax
c0018fab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018faf:	8b 00                	mov    eax,DWORD PTR [eax]
c0018fb1:	a3 20 1a 03 c0       	mov    ds:0xc0031a20,eax
c0018fb6:	5b                   	pop    ebx
c0018fb7:	5e                   	pop    esi
c0018fb8:	5f                   	pop    edi
c0018fb9:	5d                   	pop    ebp
c0018fba:	c3                   	ret    
c0018fbb:	90                   	nop

c0018fbc <CPU::cpuidCheckEDX(unsigned int)>:
c0018fbc:	83 ec 10             	sub    esp,0x10
c0018fbf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fc3:	50                   	push   eax
c0018fc4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fc8:	50                   	push   eax
c0018fc9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fcd:	50                   	push   eax
c0018fce:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fd2:	50                   	push   eax
c0018fd3:	6a 01                	push   0x1
c0018fd5:	e8 5e ff ff ff       	call   c0018f38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018fda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fde:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018fe2:	0f 95 c0             	setne  al
c0018fe5:	83 c4 24             	add    esp,0x24
c0018fe8:	c3                   	ret    
c0018fe9:	90                   	nop

c0018fea <CPU::cpuidCheckECX(unsigned int)>:
c0018fea:	83 ec 10             	sub    esp,0x10
c0018fed:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ff1:	50                   	push   eax
c0018ff2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ff6:	50                   	push   eax
c0018ff7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ffb:	50                   	push   eax
c0018ffc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019000:	50                   	push   eax
c0019001:	6a 01                	push   0x1
c0019003:	e8 30 ff ff ff       	call   c0018f38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019008:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001900c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0019010:	0f 95 c0             	setne  al
c0019013:	83 c4 24             	add    esp,0x24
c0019016:	c3                   	ret    
c0019017:	90                   	nop

c0019018 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0019018:	83 ec 10             	sub    esp,0x10
c001901b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001901f:	50                   	push   eax
c0019020:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019024:	50                   	push   eax
c0019025:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019029:	50                   	push   eax
c001902a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001902e:	50                   	push   eax
c001902f:	6a 07                	push   0x7
c0019031:	e8 02 ff ff ff       	call   c0018f38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019036:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001903a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001903e:	0f 95 c0             	setne  al
c0019041:	83 c4 24             	add    esp,0x24
c0019044:	c3                   	ret    
c0019045:	90                   	nop

c0019046 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0019046:	83 ec 10             	sub    esp,0x10
c0019049:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001904d:	50                   	push   eax
c001904e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019052:	50                   	push   eax
c0019053:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019057:	50                   	push   eax
c0019058:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001905c:	50                   	push   eax
c001905d:	6a 07                	push   0x7
c001905f:	e8 d4 fe ff ff       	call   c0018f38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019064:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019068:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001906c:	0f 95 c0             	setne  al
c001906f:	83 c4 24             	add    esp,0x24
c0019072:	c3                   	ret    
c0019073:	90                   	nop

c0019074 <CPU::CPU()>:
c0019074:	83 ec 0c             	sub    esp,0xc
c0019077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001907b:	83 ec 08             	sub    esp,0x8
c001907e:	68 66 c3 02 c0       	push   0xc002c366
c0019083:	50                   	push   eax
c0019084:	e8 57 b4 ff ff       	call   c00144e0 <Device::Device(char const*)>
c0019089:	83 c4 10             	add    esp,0x10
c001908c:	ba 40 c4 02 c0       	mov    edx,0xc002c440
c0019091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019095:	89 10                	mov    DWORD PTR [eax],edx
c0019097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001909b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00190a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190a9:	05 78 01 00 00       	add    eax,0x178
c00190ae:	83 ec 0c             	sub    esp,0xc
c00190b1:	50                   	push   eax
c00190b2:	e8 8d 60 ff ff       	call   c000f144 <GDT::GDT()>
c00190b7:	83 c4 10             	add    esp,0x10
c00190ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190be:	05 7c 09 00 00       	add    eax,0x97c
c00190c3:	83 ec 0c             	sub    esp,0xc
c00190c6:	50                   	push   eax
c00190c7:	e8 e2 62 ff ff       	call   c000f3ae <IDT::IDT()>
c00190cc:	83 c4 10             	add    esp,0x10
c00190cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190d3:	05 7c 11 00 00       	add    eax,0x117c
c00190d8:	83 ec 0c             	sub    esp,0xc
c00190db:	50                   	push   eax
c00190dc:	e8 17 83 ff ff       	call   c00113f8 <TSS::TSS()>
c00190e1:	83 c4 10             	add    esp,0x10
c00190e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190e8:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00190ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190f3:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00190fd:	90                   	nop
c00190fe:	83 c4 0c             	add    esp,0xc
c0019101:	c3                   	ret    

c0019102 <CPU::displayFeatures()>:
c0019102:	53                   	push   ebx
c0019103:	83 ec 10             	sub    esp,0x10
c0019106:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001910a:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0019110:	68 74 c0 02 c0       	push   0xc002c074
c0019115:	e8 b3 9d ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001911a:	59                   	pop    ecx
c001911b:	58                   	pop    eax
c001911c:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0019122:	50                   	push   eax
c0019123:	68 85 c0 02 c0       	push   0xc002c085
c0019128:	e8 a0 9d ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001912d:	58                   	pop    eax
c001912e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019134:	5a                   	pop    edx
c0019135:	c1 e8 0e             	shr    eax,0xe
c0019138:	0f b6 c0             	movzx  eax,al
c001913b:	50                   	push   eax
c001913c:	68 96 c0 02 c0       	push   0xc002c096
c0019141:	e8 87 9d ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0019146:	59                   	pop    ecx
c0019147:	58                   	pop    eax
c0019148:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001914e:	66 c1 e8 06          	shr    ax,0x6
c0019152:	0f b6 c0             	movzx  eax,al
c0019155:	50                   	push   eax
c0019156:	68 a7 c0 02 c0       	push   0xc002c0a7
c001915b:	e8 6d 9d ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0019160:	c7 04 24 54 c5 02 c0 	mov    DWORD PTR [esp],0xc002c554
c0019167:	e8 61 9d ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001916c:	83 c4 10             	add    esp,0x10
c001916f:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c0019174:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c001917b:	74 05                	je     c0019182 <CPU::displayFeatures()+0x80>
c001917d:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c0019182:	52                   	push   edx
c0019183:	52                   	push   edx
c0019184:	50                   	push   eax
c0019185:	68 b8 c0 02 c0       	push   0xc002c0b8
c001918a:	e8 3e 9d ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001918f:	83 c4 10             	add    esp,0x10
c0019192:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c0019197:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c001919e:	78 05                	js     c00191a5 <CPU::displayFeatures()+0xa3>
c00191a0:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c00191a5:	51                   	push   ecx
c00191a6:	51                   	push   ecx
c00191a7:	50                   	push   eax
c00191a8:	68 cf c0 02 c0       	push   0xc002c0cf
c00191ad:	e8 1b 9d ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00191b2:	83 c4 10             	add    esp,0x10
c00191b5:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c00191ba:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00191c1:	75 05                	jne    c00191c8 <CPU::displayFeatures()+0xc6>
c00191c3:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c00191c8:	52                   	push   edx
c00191c9:	52                   	push   edx
c00191ca:	50                   	push   eax
c00191cb:	68 e6 c0 02 c0       	push   0xc002c0e6
c00191d0:	e8 f8 9c ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00191d5:	83 c4 10             	add    esp,0x10
c00191d8:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c00191dd:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c00191e4:	75 05                	jne    c00191eb <CPU::displayFeatures()+0xe9>
c00191e6:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c00191eb:	51                   	push   ecx
c00191ec:	51                   	push   ecx
c00191ed:	50                   	push   eax
c00191ee:	68 fd c0 02 c0       	push   0xc002c0fd
c00191f3:	e8 d5 9c ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00191f8:	83 c4 10             	add    esp,0x10
c00191fb:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c0019200:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0019207:	75 05                	jne    c001920e <CPU::displayFeatures()+0x10c>
c0019209:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c001920e:	52                   	push   edx
c001920f:	52                   	push   edx
c0019210:	50                   	push   eax
c0019211:	68 14 c1 02 c0       	push   0xc002c114
c0019216:	e8 b2 9c ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001921b:	83 c4 10             	add    esp,0x10
c001921e:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c0019223:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001922a:	75 05                	jne    c0019231 <CPU::displayFeatures()+0x12f>
c001922c:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c0019231:	51                   	push   ecx
c0019232:	51                   	push   ecx
c0019233:	50                   	push   eax
c0019234:	68 2b c1 02 c0       	push   0xc002c12b
c0019239:	e8 8f 9c ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001923e:	83 c4 10             	add    esp,0x10
c0019241:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c0019246:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001924d:	75 05                	jne    c0019254 <CPU::displayFeatures()+0x152>
c001924f:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c0019254:	52                   	push   edx
c0019255:	52                   	push   edx
c0019256:	50                   	push   eax
c0019257:	68 42 c1 02 c0       	push   0xc002c142
c001925c:	e8 6c 9c ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0019261:	83 c4 10             	add    esp,0x10
c0019264:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c0019269:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0019270:	75 05                	jne    c0019277 <CPU::displayFeatures()+0x175>
c0019272:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c0019277:	51                   	push   ecx
c0019278:	51                   	push   ecx
c0019279:	50                   	push   eax
c001927a:	68 59 c1 02 c0       	push   0xc002c159
c001927f:	e8 49 9c ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0019284:	83 c4 10             	add    esp,0x10
c0019287:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c001928c:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0019293:	75 05                	jne    c001929a <CPU::displayFeatures()+0x198>
c0019295:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c001929a:	52                   	push   edx
c001929b:	52                   	push   edx
c001929c:	50                   	push   eax
c001929d:	68 70 c1 02 c0       	push   0xc002c170
c00192a2:	e8 26 9c ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00192a7:	83 c4 10             	add    esp,0x10
c00192aa:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c00192af:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00192b6:	75 05                	jne    c00192bd <CPU::displayFeatures()+0x1bb>
c00192b8:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c00192bd:	51                   	push   ecx
c00192be:	51                   	push   ecx
c00192bf:	50                   	push   eax
c00192c0:	68 87 c1 02 c0       	push   0xc002c187
c00192c5:	e8 03 9c ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00192ca:	83 c4 10             	add    esp,0x10
c00192cd:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c00192d2:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00192d9:	75 05                	jne    c00192e0 <CPU::displayFeatures()+0x1de>
c00192db:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c00192e0:	52                   	push   edx
c00192e1:	52                   	push   edx
c00192e2:	50                   	push   eax
c00192e3:	68 9e c1 02 c0       	push   0xc002c19e
c00192e8:	e8 e0 9b ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00192ed:	83 c4 10             	add    esp,0x10
c00192f0:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c00192f5:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00192fc:	75 05                	jne    c0019303 <CPU::displayFeatures()+0x201>
c00192fe:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c0019303:	51                   	push   ecx
c0019304:	51                   	push   ecx
c0019305:	50                   	push   eax
c0019306:	68 b5 c1 02 c0       	push   0xc002c1b5
c001930b:	e8 bd 9b ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0019310:	83 c4 10             	add    esp,0x10
c0019313:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c0019318:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c001931f:	75 05                	jne    c0019326 <CPU::displayFeatures()+0x224>
c0019321:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c0019326:	52                   	push   edx
c0019327:	52                   	push   edx
c0019328:	50                   	push   eax
c0019329:	68 cc c1 02 c0       	push   0xc002c1cc
c001932e:	e8 9a 9b ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0019333:	83 c4 10             	add    esp,0x10
c0019336:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c001933b:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0019342:	78 05                	js     c0019349 <CPU::displayFeatures()+0x247>
c0019344:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c0019349:	51                   	push   ecx
c001934a:	51                   	push   ecx
c001934b:	50                   	push   eax
c001934c:	68 e3 c1 02 c0       	push   0xc002c1e3
c0019351:	e8 77 9b ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0019356:	83 c4 10             	add    esp,0x10
c0019359:	b8 b2 a9 02 c0       	mov    eax,0xc002a9b2
c001935e:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0019365:	75 05                	jne    c001936c <CPU::displayFeatures()+0x26a>
c0019367:	b8 b6 a9 02 c0       	mov    eax,0xc002a9b6
c001936c:	52                   	push   edx
c001936d:	52                   	push   edx
c001936e:	50                   	push   eax
c001936f:	68 fa c1 02 c0       	push   0xc002c1fa
c0019374:	e8 54 9b ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0019379:	83 c4 18             	add    esp,0x18
c001937c:	5b                   	pop    ebx
c001937d:	c3                   	ret    

c001937e <CPU::detectFeatures()>:
c001937e:	55                   	push   ebp
c001937f:	57                   	push   edi
c0019380:	56                   	push   esi
c0019381:	53                   	push   ebx
c0019382:	83 ec 40             	sub    esp,0x40
c0019385:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0019389:	81 a5 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebp+0x1190],0xfff80700
c0019393:	c6 85 94 11 00 00 01 	mov    BYTE PTR [ebp+0x1194],0x1
c001939a:	8d 9d 5f 01 00 00    	lea    ebx,[ebp+0x15f]
c00193a0:	6a 0d                	push   0xd
c00193a2:	6a 00                	push   0x0
c00193a4:	53                   	push   ebx
c00193a5:	e8 c2 73 fe ff       	call   c000076c <memset>
c00193aa:	83 c4 10             	add    esp,0x10
c00193ad:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c00193b2:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00193b9:	0f 84 14 09 00 00    	je     c0019cd3 <CPU::detectFeatures()+0x955>
c00193bf:	83 ec 0c             	sub    esp,0xc
c00193c2:	89 df                	mov    edi,ebx
c00193c4:	6a 10                	push   0x10
c00193c6:	e8 f1 fb ff ff       	call   c0018fbc <CPU::cpuidCheckEDX(unsigned int)>
c00193cb:	83 e0 01             	and    eax,0x1
c00193ce:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00193d1:	8a 85 90 11 00 00    	mov    al,BYTE PTR [ebp+0x1190]
c00193d7:	83 e0 fd             	and    eax,0xfffffffd
c00193da:	09 c8                	or     eax,ecx
c00193dc:	88 85 90 11 00 00    	mov    BYTE PTR [ebp+0x1190],al
c00193e2:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00193e9:	e8 ce fb ff ff       	call   c0018fbc <CPU::cpuidCheckEDX(unsigned int)>
c00193ee:	83 e0 01             	and    eax,0x1
c00193f1:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c00193f8:	8a 85 90 11 00 00    	mov    al,BYTE PTR [ebp+0x1190]
c00193fe:	83 e0 fb             	and    eax,0xfffffffb
c0019401:	09 c8                	or     eax,ecx
c0019403:	88 85 90 11 00 00    	mov    BYTE PTR [ebp+0x1190],al
c0019409:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019410:	e8 a7 fb ff ff       	call   c0018fbc <CPU::cpuidCheckEDX(unsigned int)>
c0019415:	83 e0 01             	and    eax,0x1
c0019418:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001941f:	8a 85 90 11 00 00    	mov    al,BYTE PTR [ebp+0x1190]
c0019425:	83 e0 f7             	and    eax,0xfffffff7
c0019428:	09 c8                	or     eax,ecx
c001942a:	88 85 90 11 00 00    	mov    BYTE PTR [ebp+0x1190],al
c0019430:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019437:	e8 80 fb ff ff       	call   c0018fbc <CPU::cpuidCheckEDX(unsigned int)>
c001943c:	83 e0 01             	and    eax,0x1
c001943f:	c1 e0 04             	shl    eax,0x4
c0019442:	88 c1                	mov    cl,al
c0019444:	8a 85 90 11 00 00    	mov    al,BYTE PTR [ebp+0x1190]
c001944a:	83 e0 ef             	and    eax,0xffffffef
c001944d:	09 c8                	or     eax,ecx
c001944f:	88 85 90 11 00 00    	mov    BYTE PTR [ebp+0x1190],al
c0019455:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001945c:	e8 5b fb ff ff       	call   c0018fbc <CPU::cpuidCheckEDX(unsigned int)>
c0019461:	83 e0 01             	and    eax,0x1
c0019464:	c1 e0 05             	shl    eax,0x5
c0019467:	88 c1                	mov    cl,al
c0019469:	8a 85 90 11 00 00    	mov    al,BYTE PTR [ebp+0x1190]
c001946f:	83 e0 df             	and    eax,0xffffffdf
c0019472:	09 c8                	or     eax,ecx
c0019474:	88 85 90 11 00 00    	mov    BYTE PTR [ebp+0x1190],al
c001947a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0019481:	e8 36 fb ff ff       	call   c0018fbc <CPU::cpuidCheckEDX(unsigned int)>
c0019486:	83 e0 01             	and    eax,0x1
c0019489:	8d 0c 00             	lea    ecx,[eax+eax*1]
c001948c:	8a 85 92 11 00 00    	mov    al,BYTE PTR [ebp+0x1192]
c0019492:	83 e0 fd             	and    eax,0xfffffffd
c0019495:	09 c8                	or     eax,ecx
c0019497:	88 85 92 11 00 00    	mov    BYTE PTR [ebp+0x1192],al
c001949d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00194a4:	e8 13 fb ff ff       	call   c0018fbc <CPU::cpuidCheckEDX(unsigned int)>
c00194a9:	83 e0 01             	and    eax,0x1
c00194ac:	c1 e0 06             	shl    eax,0x6
c00194af:	88 c1                	mov    cl,al
c00194b1:	8a 85 91 11 00 00    	mov    al,BYTE PTR [ebp+0x1191]
c00194b7:	83 e0 bf             	and    eax,0xffffffbf
c00194ba:	09 c8                	or     eax,ecx
c00194bc:	88 85 91 11 00 00    	mov    BYTE PTR [ebp+0x1191],al
c00194c2:	58                   	pop    eax
c00194c3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00194c7:	50                   	push   eax
c00194c8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00194cc:	50                   	push   eax
c00194cd:	8d 74 24 18          	lea    esi,[esp+0x18]
c00194d1:	56                   	push   esi
c00194d2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00194d6:	50                   	push   eax
c00194d7:	6a 00                	push   0x0
c00194d9:	e8 5a fa ff ff       	call   c0018f38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00194de:	b9 04 00 00 00       	mov    ecx,0x4
c00194e3:	fc                   	cld    
c00194e4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00194e6:	8d bd 63 01 00 00    	lea    edi,[ebp+0x163]
c00194ec:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00194f0:	fc                   	cld    
c00194f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00194f3:	8d bd 67 01 00 00    	lea    edi,[ebp+0x167]
c00194f9:	8d 74 24 28          	lea    esi,[esp+0x28]
c00194fd:	fc                   	cld    
c00194fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019500:	83 c4 18             	add    esp,0x18
c0019503:	68 11 c2 02 c0       	push   0xc002c211
c0019508:	53                   	push   ebx
c0019509:	e8 a6 73 fe ff       	call   c00008b4 <strcmp>
c001950e:	83 c4 10             	add    esp,0x10
c0019511:	85 c0                	test   eax,eax
c0019513:	75 0f                	jne    c0019524 <CPU::detectFeatures()+0x1a6>
c0019515:	c7 85 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebp+0x158],0x2
c001951f:	e9 22 02 00 00       	jmp    c0019746 <CPU::detectFeatures()+0x3c8>
c0019524:	50                   	push   eax
c0019525:	50                   	push   eax
c0019526:	68 1e c2 02 c0       	push   0xc002c21e
c001952b:	53                   	push   ebx
c001952c:	e8 83 73 fe ff       	call   c00008b4 <strcmp>
c0019531:	83 c4 10             	add    esp,0x10
c0019534:	85 c0                	test   eax,eax
c0019536:	74 dd                	je     c0019515 <CPU::detectFeatures()+0x197>
c0019538:	50                   	push   eax
c0019539:	50                   	push   eax
c001953a:	68 2b c2 02 c0       	push   0xc002c22b
c001953f:	53                   	push   ebx
c0019540:	e8 6f 73 fe ff       	call   c00008b4 <strcmp>
c0019545:	83 c4 10             	add    esp,0x10
c0019548:	85 c0                	test   eax,eax
c001954a:	74 2a                	je     c0019576 <CPU::detectFeatures()+0x1f8>
c001954c:	50                   	push   eax
c001954d:	50                   	push   eax
c001954e:	68 38 c2 02 c0       	push   0xc002c238
c0019553:	53                   	push   ebx
c0019554:	e8 5b 73 fe ff       	call   c00008b4 <strcmp>
c0019559:	83 c4 10             	add    esp,0x10
c001955c:	85 c0                	test   eax,eax
c001955e:	74 16                	je     c0019576 <CPU::detectFeatures()+0x1f8>
c0019560:	50                   	push   eax
c0019561:	50                   	push   eax
c0019562:	68 45 c2 02 c0       	push   0xc002c245
c0019567:	53                   	push   ebx
c0019568:	e8 47 73 fe ff       	call   c00008b4 <strcmp>
c001956d:	83 c4 10             	add    esp,0x10
c0019570:	85 c0                	test   eax,eax
c0019572:	74 48                	je     c00195bc <CPU::detectFeatures()+0x23e>
c0019574:	eb 0f                	jmp    c0019585 <CPU::detectFeatures()+0x207>
c0019576:	c7 85 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebp+0x158],0x4
c0019580:	e9 c1 01 00 00       	jmp    c0019746 <CPU::detectFeatures()+0x3c8>
c0019585:	50                   	push   eax
c0019586:	50                   	push   eax
c0019587:	68 52 c2 02 c0       	push   0xc002c252
c001958c:	53                   	push   ebx
c001958d:	e8 22 73 fe ff       	call   c00008b4 <strcmp>
c0019592:	83 c4 10             	add    esp,0x10
c0019595:	85 c0                	test   eax,eax
c0019597:	74 23                	je     c00195bc <CPU::detectFeatures()+0x23e>
c0019599:	57                   	push   edi
c001959a:	57                   	push   edi
c001959b:	68 5f c2 02 c0       	push   0xc002c25f
c00195a0:	53                   	push   ebx
c00195a1:	e8 0e 73 fe ff       	call   c00008b4 <strcmp>
c00195a6:	83 c4 10             	add    esp,0x10
c00195a9:	85 c0                	test   eax,eax
c00195ab:	75 1e                	jne    c00195cb <CPU::detectFeatures()+0x24d>
c00195ad:	c7 85 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebp+0x158],0x1
c00195b7:	e9 8a 01 00 00       	jmp    c0019746 <CPU::detectFeatures()+0x3c8>
c00195bc:	c7 85 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebp+0x158],0x5
c00195c6:	e9 7b 01 00 00       	jmp    c0019746 <CPU::detectFeatures()+0x3c8>
c00195cb:	56                   	push   esi
c00195cc:	56                   	push   esi
c00195cd:	68 6c c2 02 c0       	push   0xc002c26c
c00195d2:	53                   	push   ebx
c00195d3:	e8 dc 72 fe ff       	call   c00008b4 <strcmp>
c00195d8:	83 c4 10             	add    esp,0x10
c00195db:	85 c0                	test   eax,eax
c00195dd:	75 0f                	jne    c00195ee <CPU::detectFeatures()+0x270>
c00195df:	c7 85 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebp+0x158],0x3
c00195e9:	e9 58 01 00 00       	jmp    c0019746 <CPU::detectFeatures()+0x3c8>
c00195ee:	51                   	push   ecx
c00195ef:	51                   	push   ecx
c00195f0:	68 2b c2 02 c0       	push   0xc002c22b
c00195f5:	53                   	push   ebx
c00195f6:	e8 b9 72 fe ff       	call   c00008b4 <strcmp>
c00195fb:	83 c4 10             	add    esp,0x10
c00195fe:	85 c0                	test   eax,eax
c0019600:	75 0f                	jne    c0019611 <CPU::detectFeatures()+0x293>
c0019602:	c7 85 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebp+0x158],0x6
c001960c:	e9 35 01 00 00       	jmp    c0019746 <CPU::detectFeatures()+0x3c8>
c0019611:	52                   	push   edx
c0019612:	52                   	push   edx
c0019613:	68 79 c2 02 c0       	push   0xc002c279
c0019618:	53                   	push   ebx
c0019619:	e8 96 72 fe ff       	call   c00008b4 <strcmp>
c001961e:	83 c4 10             	add    esp,0x10
c0019621:	85 c0                	test   eax,eax
c0019623:	75 0f                	jne    c0019634 <CPU::detectFeatures()+0x2b6>
c0019625:	c7 85 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebp+0x158],0x7
c001962f:	e9 12 01 00 00       	jmp    c0019746 <CPU::detectFeatures()+0x3c8>
c0019634:	50                   	push   eax
c0019635:	50                   	push   eax
c0019636:	68 86 c2 02 c0       	push   0xc002c286
c001963b:	53                   	push   ebx
c001963c:	e8 73 72 fe ff       	call   c00008b4 <strcmp>
c0019641:	83 c4 10             	add    esp,0x10
c0019644:	85 c0                	test   eax,eax
c0019646:	75 0f                	jne    c0019657 <CPU::detectFeatures()+0x2d9>
c0019648:	c7 85 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebp+0x158],0x8
c0019652:	e9 ef 00 00 00       	jmp    c0019746 <CPU::detectFeatures()+0x3c8>
c0019657:	50                   	push   eax
c0019658:	50                   	push   eax
c0019659:	68 93 c2 02 c0       	push   0xc002c293
c001965e:	53                   	push   ebx
c001965f:	e8 50 72 fe ff       	call   c00008b4 <strcmp>
c0019664:	83 c4 10             	add    esp,0x10
c0019667:	85 c0                	test   eax,eax
c0019669:	75 0f                	jne    c001967a <CPU::detectFeatures()+0x2fc>
c001966b:	c7 85 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebp+0x158],0x9
c0019675:	e9 cc 00 00 00       	jmp    c0019746 <CPU::detectFeatures()+0x3c8>
c001967a:	50                   	push   eax
c001967b:	50                   	push   eax
c001967c:	68 a0 c2 02 c0       	push   0xc002c2a0
c0019681:	53                   	push   ebx
c0019682:	e8 2d 72 fe ff       	call   c00008b4 <strcmp>
c0019687:	83 c4 10             	add    esp,0x10
c001968a:	85 c0                	test   eax,eax
c001968c:	75 0f                	jne    c001969d <CPU::detectFeatures()+0x31f>
c001968e:	c7 85 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebp+0x158],0xa
c0019698:	e9 a9 00 00 00       	jmp    c0019746 <CPU::detectFeatures()+0x3c8>
c001969d:	50                   	push   eax
c001969e:	50                   	push   eax
c001969f:	68 ad c2 02 c0       	push   0xc002c2ad
c00196a4:	53                   	push   ebx
c00196a5:	e8 0a 72 fe ff       	call   c00008b4 <strcmp>
c00196aa:	83 c4 10             	add    esp,0x10
c00196ad:	85 c0                	test   eax,eax
c00196af:	75 0f                	jne    c00196c0 <CPU::detectFeatures()+0x342>
c00196b1:	c7 85 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebp+0x158],0xb
c00196bb:	e9 86 00 00 00       	jmp    c0019746 <CPU::detectFeatures()+0x3c8>
c00196c0:	50                   	push   eax
c00196c1:	50                   	push   eax
c00196c2:	68 ba c2 02 c0       	push   0xc002c2ba
c00196c7:	53                   	push   ebx
c00196c8:	e8 e7 71 fe ff       	call   c00008b4 <strcmp>
c00196cd:	83 c4 10             	add    esp,0x10
c00196d0:	85 c0                	test   eax,eax
c00196d2:	75 0c                	jne    c00196e0 <CPU::detectFeatures()+0x362>
c00196d4:	c7 85 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebp+0x158],0xc
c00196de:	eb 66                	jmp    c0019746 <CPU::detectFeatures()+0x3c8>
c00196e0:	50                   	push   eax
c00196e1:	50                   	push   eax
c00196e2:	68 c7 c2 02 c0       	push   0xc002c2c7
c00196e7:	53                   	push   ebx
c00196e8:	e8 c7 71 fe ff       	call   c00008b4 <strcmp>
c00196ed:	83 c4 10             	add    esp,0x10
c00196f0:	85 c0                	test   eax,eax
c00196f2:	75 0c                	jne    c0019700 <CPU::detectFeatures()+0x382>
c00196f4:	c7 85 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebp+0x158],0xd
c00196fe:	eb 46                	jmp    c0019746 <CPU::detectFeatures()+0x3c8>
c0019700:	57                   	push   edi
c0019701:	57                   	push   edi
c0019702:	68 d4 c2 02 c0       	push   0xc002c2d4
c0019707:	53                   	push   ebx
c0019708:	e8 a7 71 fe ff       	call   c00008b4 <strcmp>
c001970d:	83 c4 10             	add    esp,0x10
c0019710:	85 c0                	test   eax,eax
c0019712:	74 e0                	je     c00196f4 <CPU::detectFeatures()+0x376>
c0019714:	56                   	push   esi
c0019715:	56                   	push   esi
c0019716:	68 e1 c2 02 c0       	push   0xc002c2e1
c001971b:	53                   	push   ebx
c001971c:	e8 93 71 fe ff       	call   c00008b4 <strcmp>
c0019721:	83 c4 10             	add    esp,0x10
c0019724:	85 c0                	test   eax,eax
c0019726:	74 cc                	je     c00196f4 <CPU::detectFeatures()+0x376>
c0019728:	51                   	push   ecx
c0019729:	51                   	push   ecx
c001972a:	68 ee c2 02 c0       	push   0xc002c2ee
c001972f:	53                   	push   ebx
c0019730:	e8 7f 71 fe ff       	call   c00008b4 <strcmp>
c0019735:	83 c4 10             	add    esp,0x10
c0019738:	85 c0                	test   eax,eax
c001973a:	74 b8                	je     c00196f4 <CPU::detectFeatures()+0x376>
c001973c:	c7 85 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0x158],0x0
c0019746:	83 3c 24 06          	cmp    DWORD PTR [esp],0x6
c001974a:	0f 86 be 00 00 00    	jbe    c001980e <CPU::detectFeatures()+0x490>
c0019750:	83 ec 0c             	sub    esp,0xc
c0019753:	68 80 00 00 00       	push   0x80
c0019758:	e8 bb f8 ff ff       	call   c0019018 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001975d:	83 e0 01             	and    eax,0x1
c0019760:	c1 e0 06             	shl    eax,0x6
c0019763:	88 c1                	mov    cl,al
c0019765:	8a 85 90 11 00 00    	mov    al,BYTE PTR [ebp+0x1190]
c001976b:	83 e0 bf             	and    eax,0xffffffbf
c001976e:	09 c8                	or     eax,ecx
c0019770:	88 85 90 11 00 00    	mov    BYTE PTR [ebp+0x1190],al
c0019776:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001977d:	e8 96 f8 ff ff       	call   c0019018 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019782:	83 e0 01             	and    eax,0x1
c0019785:	c1 e0 04             	shl    eax,0x4
c0019788:	88 c1                	mov    cl,al
c001978a:	8a 85 91 11 00 00    	mov    al,BYTE PTR [ebp+0x1191]
c0019790:	83 e0 ef             	and    eax,0xffffffef
c0019793:	09 c8                	or     eax,ecx
c0019795:	88 85 91 11 00 00    	mov    BYTE PTR [ebp+0x1191],al
c001979b:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00197a2:	e8 71 f8 ff ff       	call   c0019018 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00197a7:	c1 e0 07             	shl    eax,0x7
c00197aa:	88 c1                	mov    cl,al
c00197ac:	8a 85 90 11 00 00    	mov    al,BYTE PTR [ebp+0x1190]
c00197b2:	83 e0 7f             	and    eax,0x7f
c00197b5:	09 c8                	or     eax,ecx
c00197b7:	88 85 90 11 00 00    	mov    BYTE PTR [ebp+0x1190],al
c00197bd:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00197c4:	e8 7d f8 ff ff       	call   c0019046 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00197c9:	83 e0 01             	and    eax,0x1
c00197cc:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00197d3:	8a 85 91 11 00 00    	mov    al,BYTE PTR [ebp+0x1191]
c00197d9:	83 e0 f7             	and    eax,0xfffffff7
c00197dc:	09 c8                	or     eax,ecx
c00197de:	88 85 91 11 00 00    	mov    BYTE PTR [ebp+0x1191],al
c00197e4:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00197eb:	e8 56 f8 ff ff       	call   c0019046 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00197f0:	83 c4 10             	add    esp,0x10
c00197f3:	83 e0 01             	and    eax,0x1
c00197f6:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c00197fd:	8a 85 92 11 00 00    	mov    al,BYTE PTR [ebp+0x1192]
c0019803:	83 e0 fb             	and    eax,0xfffffffb
c0019806:	09 c8                	or     eax,ecx
c0019808:	88 85 92 11 00 00    	mov    BYTE PTR [ebp+0x1192],al
c001980e:	83 ec 0c             	sub    esp,0xc
c0019811:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019815:	50                   	push   eax
c0019816:	8d 44 24 18          	lea    eax,[esp+0x18]
c001981a:	50                   	push   eax
c001981b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c001981f:	57                   	push   edi
c0019820:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019824:	50                   	push   eax
c0019825:	6a 01                	push   0x1
c0019827:	e8 0c f7 ff ff       	call   c0018f38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001982c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019830:	8a 85 5c 01 00 00    	mov    al,BYTE PTR [ebp+0x15c]
c0019836:	88 d9                	mov    cl,bl
c0019838:	83 e0 f0             	and    eax,0xfffffff0
c001983b:	83 e1 0f             	and    ecx,0xf
c001983e:	83 c4 20             	add    esp,0x20
c0019841:	09 c8                	or     eax,ecx
c0019843:	88 d9                	mov    cl,bl
c0019845:	88 85 5c 01 00 00    	mov    BYTE PTR [ebp+0x15c],al
c001984b:	c0 e9 04             	shr    cl,0x4
c001984e:	0f b6 c1             	movzx  eax,cl
c0019851:	c1 e0 06             	shl    eax,0x6
c0019854:	89 c6                	mov    esi,eax
c0019856:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c001985c:	66 25 3f c0          	and    ax,0xc03f
c0019860:	09 f0                	or     eax,esi
c0019862:	66 89 85 5c 01 00 00 	mov    WORD PTR [ebp+0x15c],ax
c0019869:	89 d8                	mov    eax,ebx
c001986b:	8a 95 5d 01 00 00    	mov    dl,BYTE PTR [ebp+0x15d]
c0019871:	c1 e8 08             	shr    eax,0x8
c0019874:	83 e2 3f             	and    edx,0x3f
c0019877:	83 e0 0f             	and    eax,0xf
c001987a:	89 c6                	mov    esi,eax
c001987c:	c1 e6 06             	shl    esi,0x6
c001987f:	09 d6                	or     esi,edx
c0019881:	89 f2                	mov    edx,esi
c0019883:	88 95 5d 01 00 00    	mov    BYTE PTR [ebp+0x15d],dl
c0019889:	88 c2                	mov    dl,al
c001988b:	c0 ea 02             	shr    dl,0x2
c001988e:	89 d6                	mov    esi,edx
c0019890:	8a 95 5e 01 00 00    	mov    dl,BYTE PTR [ebp+0x15e]
c0019896:	83 e2 c0             	and    edx,0xffffffc0
c0019899:	09 d6                	or     esi,edx
c001989b:	89 f2                	mov    edx,esi
c001989d:	89 de                	mov    esi,ebx
c001989f:	88 95 5e 01 00 00    	mov    BYTE PTR [ebp+0x15e],dl
c00198a5:	c1 ee 0c             	shr    esi,0xc
c00198a8:	8a 95 5c 01 00 00    	mov    dl,BYTE PTR [ebp+0x15c]
c00198ae:	83 e6 03             	and    esi,0x3
c00198b1:	83 e2 cf             	and    edx,0xffffffcf
c00198b4:	c1 e6 04             	shl    esi,0x4
c00198b7:	09 d6                	or     esi,edx
c00198b9:	3c 06                	cmp    al,0x6
c00198bb:	89 f2                	mov    edx,esi
c00198bd:	88 95 5c 01 00 00    	mov    BYTE PTR [ebp+0x15c],dl
c00198c3:	74 04                	je     c00198c9 <CPU::detectFeatures()+0x54b>
c00198c5:	3c 0f                	cmp    al,0xf
c00198c7:	75 58                	jne    c0019921 <CPU::detectFeatures()+0x5a3>
c00198c9:	89 de                	mov    esi,ebx
c00198cb:	c1 ee 10             	shr    esi,0x10
c00198ce:	c1 e6 04             	shl    esi,0x4
c00198d1:	09 f1                	or     ecx,esi
c00198d3:	8b b5 5c 01 00 00    	mov    esi,DWORD PTR [ebp+0x15c]
c00198d9:	0f b6 c9             	movzx  ecx,cl
c00198dc:	66 81 e6 3f c0       	and    si,0xc03f
c00198e1:	c1 e1 06             	shl    ecx,0x6
c00198e4:	09 f1                	or     ecx,esi
c00198e6:	3c 0f                	cmp    al,0xf
c00198e8:	66 89 8d 5c 01 00 00 	mov    WORD PTR [ebp+0x15c],cx
c00198ef:	75 30                	jne    c0019921 <CPU::detectFeatures()+0x5a3>
c00198f1:	8a 85 5d 01 00 00    	mov    al,BYTE PTR [ebp+0x15d]
c00198f7:	c1 eb 14             	shr    ebx,0x14
c00198fa:	83 e0 3f             	and    eax,0x3f
c00198fd:	83 c3 0f             	add    ebx,0xf
c0019900:	88 d9                	mov    cl,bl
c0019902:	c0 eb 02             	shr    bl,0x2
c0019905:	c1 e1 06             	shl    ecx,0x6
c0019908:	09 c8                	or     eax,ecx
c001990a:	88 85 5d 01 00 00    	mov    BYTE PTR [ebp+0x15d],al
c0019910:	8a 85 5e 01 00 00    	mov    al,BYTE PTR [ebp+0x15e]
c0019916:	83 e0 c0             	and    eax,0xffffffc0
c0019919:	09 c3                	or     ebx,eax
c001991b:	88 9d 5e 01 00 00    	mov    BYTE PTR [ebp+0x15e],bl
c0019921:	83 ec 0c             	sub    esp,0xc
c0019924:	80 8d 91 11 00 00 07 	or     BYTE PTR [ebp+0x1191],0x7
c001992b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001992f:	50                   	push   eax
c0019930:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019934:	56                   	push   esi
c0019935:	57                   	push   edi
c0019936:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c001993a:	53                   	push   ebx
c001993b:	68 00 00 00 80       	push   0x80000000
c0019940:	e8 f3 f5 ff ff       	call   c0018f38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019945:	83 c4 20             	add    esp,0x20
c0019948:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c001994f:	76 22                	jbe    c0019973 <CPU::detectFeatures()+0x5f5>
c0019951:	83 ec 0c             	sub    esp,0xc
c0019954:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019958:	50                   	push   eax
c0019959:	56                   	push   esi
c001995a:	57                   	push   edi
c001995b:	53                   	push   ebx
c001995c:	68 01 00 00 80       	push   0x80000001
c0019961:	e8 d2 f5 ff ff       	call   c0018f38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019966:	81 a5 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebp+0x1190],0xfffe5fff
c0019970:	83 c4 20             	add    esp,0x20
c0019973:	8b 85 58 01 00 00    	mov    eax,DWORD PTR [ebp+0x158]
c0019979:	83 f8 01             	cmp    eax,0x1
c001997c:	75 6f                	jne    c00199ed <CPU::detectFeatures()+0x66f>
c001997e:	51                   	push   ecx
c001997f:	51                   	push   ecx
c0019980:	68 fa c2 02 c0       	push   0xc002c2fa
c0019985:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0019989:	53                   	push   ebx
c001998a:	e8 99 6e fe ff       	call   c0000828 <strcpy>
c001998f:	5e                   	pop    esi
c0019990:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c0019996:	5f                   	pop    edi
c0019997:	66 c1 e8 06          	shr    ax,0x6
c001999b:	0f b6 c0             	movzx  eax,al
c001999e:	50                   	push   eax
c001999f:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c00199a5:	c1 e8 0e             	shr    eax,0xe
c00199a8:	0f b6 c0             	movzx  eax,al
c00199ab:	50                   	push   eax
c00199ac:	e8 31 f2 ff ff       	call   c0018be2 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00199b1:	5a                   	pop    edx
c00199b2:	59                   	pop    ecx
c00199b3:	50                   	push   eax
c00199b4:	53                   	push   ebx
c00199b5:	e8 ae 6f fe ff       	call   c0000968 <strcat>
c00199ba:	5e                   	pop    esi
c00199bb:	5f                   	pop    edi
c00199bc:	53                   	push   ebx
c00199bd:	55                   	push   ebp
c00199be:	e8 0f ab ff ff       	call   c00144d2 <Device::setName(char const*)>
c00199c3:	58                   	pop    eax
c00199c4:	8d 85 d0 00 00 00    	lea    eax,[ebp+0xd0]
c00199ca:	5a                   	pop    edx
c00199cb:	68 01 c3 02 c0       	push   0xc002c301
c00199d0:	50                   	push   eax
c00199d1:	e8 de 6e fe ff       	call   c00008b4 <strcmp>
c00199d6:	83 c4 10             	add    esp,0x10
c00199d9:	85 c0                	test   eax,eax
c00199db:	0f 85 72 03 00 00    	jne    c0019d53 <CPU::detectFeatures()+0x9d5>
c00199e1:	80 a5 91 11 00 00 3f 	and    BYTE PTR [ebp+0x1191],0x3f
c00199e8:	e9 66 03 00 00       	jmp    c0019d53 <CPU::detectFeatures()+0x9d5>
c00199ed:	83 f8 02             	cmp    eax,0x2
c00199f0:	0f 85 b5 00 00 00    	jne    c0019aab <CPU::detectFeatures()+0x72d>
c00199f6:	56                   	push   esi
c00199f7:	56                   	push   esi
c00199f8:	68 13 c3 02 c0       	push   0xc002c313
c00199fd:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0019a01:	53                   	push   ebx
c0019a02:	e8 21 6e fe ff       	call   c0000828 <strcpy>
c0019a07:	5f                   	pop    edi
c0019a08:	58                   	pop    eax
c0019a09:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c0019a0f:	66 c1 e8 06          	shr    ax,0x6
c0019a13:	0f b6 c0             	movzx  eax,al
c0019a16:	50                   	push   eax
c0019a17:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c0019a1d:	c1 e8 0e             	shr    eax,0xe
c0019a20:	0f b6 c0             	movzx  eax,al
c0019a23:	50                   	push   eax
c0019a24:	e8 25 f0 ff ff       	call   c0018a4e <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019a29:	5a                   	pop    edx
c0019a2a:	59                   	pop    ecx
c0019a2b:	50                   	push   eax
c0019a2c:	53                   	push   ebx
c0019a2d:	e8 36 6f fe ff       	call   c0000968 <strcat>
c0019a32:	5e                   	pop    esi
c0019a33:	5f                   	pop    edi
c0019a34:	53                   	push   ebx
c0019a35:	55                   	push   ebp
c0019a36:	e8 97 aa ff ff       	call   c00144d2 <Device::setName(char const*)>
c0019a3b:	58                   	pop    eax
c0019a3c:	8d 85 d0 00 00 00    	lea    eax,[ebp+0xd0]
c0019a42:	5a                   	pop    edx
c0019a43:	68 18 c3 02 c0       	push   0xc002c318
c0019a48:	50                   	push   eax
c0019a49:	e8 66 6e fe ff       	call   c00008b4 <strcmp>
c0019a4e:	83 c4 10             	add    esp,0x10
c0019a51:	85 c0                	test   eax,eax
c0019a53:	75 20                	jne    c0019a75 <CPU::detectFeatures()+0x6f7>
c0019a55:	8b 0d e8 ee 02 c0    	mov    ecx,DWORD PTR ds:0xc002eee8
c0019a5b:	8a 81 e8 01 00 00    	mov    al,BYTE PTR [ecx+0x1e8]
c0019a61:	a8 01                	test   al,0x1
c0019a63:	74 10                	je     c0019a75 <CPU::detectFeatures()+0x6f7>
c0019a65:	83 e0 fe             	and    eax,0xfffffffe
c0019a68:	88 81 e8 01 00 00    	mov    BYTE PTR [ecx+0x1e8],al
c0019a6e:	80 8d 90 11 00 00 10 	or     BYTE PTR [ebp+0x1190],0x10
c0019a75:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c0019a7b:	c1 e8 0e             	shr    eax,0xe
c0019a7e:	3c 05                	cmp    al,0x5
c0019a80:	0f 85 cd 02 00 00    	jne    c0019d53 <CPU::detectFeatures()+0x9d5>
c0019a86:	53                   	push   ebx
c0019a87:	8a 85 5c 01 00 00    	mov    al,BYTE PTR [ebp+0x15c]
c0019a8d:	83 e0 0f             	and    eax,0xf
c0019a90:	50                   	push   eax
c0019a91:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c0019a97:	66 c1 e8 06          	shr    ax,0x6
c0019a9b:	0f b6 c0             	movzx  eax,al
c0019a9e:	50                   	push   eax
c0019a9f:	6a 05                	push   0x5
c0019aa1:	e8 1e f4 ff ff       	call   c0018ec4 <CPU::AMD_K6_writeback(int, int, int)>
c0019aa6:	e9 20 02 00 00       	jmp    c0019ccb <CPU::detectFeatures()+0x94d>
c0019aab:	8d 48 fd             	lea    ecx,[eax-0x3]
c0019aae:	83 f9 01             	cmp    ecx,0x1
c0019ab1:	76 09                	jbe    c0019abc <CPU::detectFeatures()+0x73e>
c0019ab3:	83 f8 06             	cmp    eax,0x6
c0019ab6:	0f 85 92 01 00 00    	jne    c0019c4e <CPU::detectFeatures()+0x8d0>
c0019abc:	8b 8d 5c 01 00 00    	mov    ecx,DWORD PTR [ebp+0x15c]
c0019ac2:	c1 e9 0e             	shr    ecx,0xe
c0019ac5:	80 f9 05             	cmp    cl,0x5
c0019ac8:	75 7b                	jne    c0019b45 <CPU::detectFeatures()+0x7c7>
c0019aca:	8b 8d 5c 01 00 00    	mov    ecx,DWORD PTR [ebp+0x15c]
c0019ad0:	66 81 e1 c0 3f       	and    cx,0x3fc0
c0019ad5:	66 81 f9 00 01       	cmp    cx,0x100
c0019ada:	75 0c                	jne    c0019ae8 <CPU::detectFeatures()+0x76a>
c0019adc:	51                   	push   ecx
c0019add:	51                   	push   ecx
c0019ade:	68 1f c3 02 c0       	push   0xc002c31f
c0019ae3:	e9 dd 01 00 00       	jmp    c0019cc5 <CPU::detectFeatures()+0x947>
c0019ae8:	66 81 f9 00 02       	cmp    cx,0x200
c0019aed:	75 0c                	jne    c0019afb <CPU::detectFeatures()+0x77d>
c0019aef:	52                   	push   edx
c0019af0:	52                   	push   edx
c0019af1:	68 32 c3 02 c0       	push   0xc002c332
c0019af6:	e9 ca 01 00 00       	jmp    c0019cc5 <CPU::detectFeatures()+0x947>
c0019afb:	66 81 f9 40 02       	cmp    cx,0x240
c0019b00:	75 0c                	jne    c0019b0e <CPU::detectFeatures()+0x790>
c0019b02:	50                   	push   eax
c0019b03:	50                   	push   eax
c0019b04:	68 44 c3 02 c0       	push   0xc002c344
c0019b09:	e9 b7 01 00 00       	jmp    c0019cc5 <CPU::detectFeatures()+0x947>
c0019b0e:	83 f8 06             	cmp    eax,0x6
c0019b11:	75 0c                	jne    c0019b1f <CPU::detectFeatures()+0x7a1>
c0019b13:	50                   	push   eax
c0019b14:	50                   	push   eax
c0019b15:	68 56 c3 02 c0       	push   0xc002c356
c0019b1a:	e9 a6 01 00 00       	jmp    c0019cc5 <CPU::detectFeatures()+0x947>
c0019b1f:	83 f8 04             	cmp    eax,0x4
c0019b22:	75 0c                	jne    c0019b30 <CPU::detectFeatures()+0x7b2>
c0019b24:	50                   	push   eax
c0019b25:	50                   	push   eax
c0019b26:	68 62 c3 02 c0       	push   0xc002c362
c0019b2b:	e9 95 01 00 00       	jmp    c0019cc5 <CPU::detectFeatures()+0x947>
c0019b30:	83 f8 03             	cmp    eax,0x3
c0019b33:	0f 85 1a 02 00 00    	jne    c0019d53 <CPU::detectFeatures()+0x9d5>
c0019b39:	50                   	push   eax
c0019b3a:	50                   	push   eax
c0019b3b:	68 6a c3 02 c0       	push   0xc002c36a
c0019b40:	e9 80 01 00 00       	jmp    c0019cc5 <CPU::detectFeatures()+0x947>
c0019b45:	80 f9 06             	cmp    cl,0x6
c0019b48:	0f 85 dc 00 00 00    	jne    c0019c2a <CPU::detectFeatures()+0x8ac>
c0019b4e:	8b 8d 5c 01 00 00    	mov    ecx,DWORD PTR [ebp+0x15c]
c0019b54:	66 81 e1 c0 3f       	and    cx,0x3fc0
c0019b59:	66 81 f9 80 01       	cmp    cx,0x180
c0019b5e:	75 0c                	jne    c0019b6c <CPU::detectFeatures()+0x7ee>
c0019b60:	50                   	push   eax
c0019b61:	50                   	push   eax
c0019b62:	68 75 c3 02 c0       	push   0xc002c375
c0019b67:	e9 59 01 00 00       	jmp    c0019cc5 <CPU::detectFeatures()+0x947>
c0019b6c:	8d 99 40 fe ff ff    	lea    ebx,[ecx-0x1c0]
c0019b72:	66 f7 c3 80 ff       	test   bx,0xff80
c0019b77:	75 0c                	jne    c0019b85 <CPU::detectFeatures()+0x807>
c0019b79:	50                   	push   eax
c0019b7a:	50                   	push   eax
c0019b7b:	68 85 c3 02 c0       	push   0xc002c385
c0019b80:	e9 40 01 00 00       	jmp    c0019cc5 <CPU::detectFeatures()+0x947>
c0019b85:	66 81 f9 40 02       	cmp    cx,0x240
c0019b8a:	75 0c                	jne    c0019b98 <CPU::detectFeatures()+0x81a>
c0019b8c:	57                   	push   edi
c0019b8d:	57                   	push   edi
c0019b8e:	68 8c c3 02 c0       	push   0xc002c38c
c0019b93:	e9 2d 01 00 00       	jmp    c0019cc5 <CPU::detectFeatures()+0x947>
c0019b98:	66 81 f9 80 02       	cmp    cx,0x280
c0019b9d:	75 0c                	jne    c0019bab <CPU::detectFeatures()+0x82d>
c0019b9f:	56                   	push   esi
c0019ba0:	56                   	push   esi
c0019ba1:	68 95 c3 02 c0       	push   0xc002c395
c0019ba6:	e9 1a 01 00 00       	jmp    c0019cc5 <CPU::detectFeatures()+0x947>
c0019bab:	66 81 f9 40 03       	cmp    cx,0x340
c0019bb0:	74 ed                	je     c0019b9f <CPU::detectFeatures()+0x821>
c0019bb2:	66 81 f9 c0 03       	cmp    cx,0x3c0
c0019bb7:	75 0c                	jne    c0019bc5 <CPU::detectFeatures()+0x847>
c0019bb9:	53                   	push   ebx
c0019bba:	53                   	push   ebx
c0019bbb:	68 9c c3 02 c0       	push   0xc002c39c
c0019bc0:	e9 00 01 00 00       	jmp    c0019cc5 <CPU::detectFeatures()+0x947>
c0019bc5:	83 f8 06             	cmp    eax,0x6
c0019bc8:	0f 84 45 ff ff ff    	je     c0019b13 <CPU::detectFeatures()+0x795>
c0019bce:	83 f8 04             	cmp    eax,0x4
c0019bd1:	0f 84 4d ff ff ff    	je     c0019b24 <CPU::detectFeatures()+0x7a6>
c0019bd7:	83 f8 03             	cmp    eax,0x3
c0019bda:	0f 85 73 01 00 00    	jne    c0019d53 <CPU::detectFeatures()+0x9d5>
c0019be0:	b3 c1                	mov    bl,0xc1
c0019be2:	51                   	push   ecx
c0019be3:	51                   	push   ecx
c0019be4:	68 a5 c3 02 c0       	push   0xc002c3a5
c0019be9:	55                   	push   ebp
c0019bea:	e8 e3 a8 ff ff       	call   c00144d2 <Device::setName(char const*)>
c0019bef:	88 d8                	mov    al,bl
c0019bf1:	e6 22                	out    0x22,al
c0019bf3:	e4 23                	in     al,0x23
c0019bf5:	88 c1                	mov    cl,al
c0019bf7:	88 d8                	mov    al,bl
c0019bf9:	e6 22                	out    0x22,al
c0019bfb:	88 c8                	mov    al,cl
c0019bfd:	83 c8 10             	or     eax,0x10
c0019c00:	e6 23                	out    0x23,al
c0019c02:	0f b6 8d c4 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc4]
c0019c09:	8d 5c 8d 00          	lea    ebx,[ebp+ecx*4+0x0]
c0019c0d:	89 c8                	mov    eax,ecx
c0019c0f:	66 c7 43 04 22 00    	mov    WORD PTR [ebx+0x4],0x22
c0019c15:	c6 43 06 02          	mov    BYTE PTR [ebx+0x6],0x2
c0019c19:	40                   	inc    eax
c0019c1a:	88 85 c4 00 00 00    	mov    BYTE PTR [ebp+0xc4],al
c0019c20:	80 64 8d 07 3f       	and    BYTE PTR [ebp+ecx*4+0x7],0x3f
c0019c25:	e9 a1 00 00 00       	jmp    c0019ccb <CPU::detectFeatures()+0x94d>
c0019c2a:	83 f8 06             	cmp    eax,0x6
c0019c2d:	0f 84 e0 fe ff ff    	je     c0019b13 <CPU::detectFeatures()+0x795>
c0019c33:	83 f8 04             	cmp    eax,0x4
c0019c36:	0f 84 e8 fe ff ff    	je     c0019b24 <CPU::detectFeatures()+0x7a6>
c0019c3c:	83 f8 03             	cmp    eax,0x3
c0019c3f:	0f 85 0e 01 00 00    	jne    c0019d53 <CPU::detectFeatures()+0x9d5>
c0019c45:	52                   	push   edx
c0019c46:	52                   	push   edx
c0019c47:	68 b0 c3 02 c0       	push   0xc002c3b0
c0019c4c:	eb 77                	jmp    c0019cc5 <CPU::detectFeatures()+0x947>
c0019c4e:	83 f8 07             	cmp    eax,0x7
c0019c51:	75 09                	jne    c0019c5c <CPU::detectFeatures()+0x8de>
c0019c53:	50                   	push   eax
c0019c54:	50                   	push   eax
c0019c55:	68 ba c3 02 c0       	push   0xc002c3ba
c0019c5a:	eb 69                	jmp    c0019cc5 <CPU::detectFeatures()+0x947>
c0019c5c:	83 f8 0a             	cmp    eax,0xa
c0019c5f:	75 09                	jne    c0019c6a <CPU::detectFeatures()+0x8ec>
c0019c61:	50                   	push   eax
c0019c62:	50                   	push   eax
c0019c63:	68 c5 c3 02 c0       	push   0xc002c3c5
c0019c68:	eb 5b                	jmp    c0019cc5 <CPU::detectFeatures()+0x947>
c0019c6a:	83 f8 0b             	cmp    eax,0xb
c0019c6d:	75 09                	jne    c0019c78 <CPU::detectFeatures()+0x8fa>
c0019c6f:	50                   	push   eax
c0019c70:	50                   	push   eax
c0019c71:	68 cd c3 02 c0       	push   0xc002c3cd
c0019c76:	eb 4d                	jmp    c0019cc5 <CPU::detectFeatures()+0x947>
c0019c78:	83 f8 08             	cmp    eax,0x8
c0019c7b:	75 09                	jne    c0019c86 <CPU::detectFeatures()+0x908>
c0019c7d:	50                   	push   eax
c0019c7e:	50                   	push   eax
c0019c7f:	68 d6 c3 02 c0       	push   0xc002c3d6
c0019c84:	eb 3f                	jmp    c0019cc5 <CPU::detectFeatures()+0x947>
c0019c86:	83 f8 09             	cmp    eax,0x9
c0019c89:	75 09                	jne    c0019c94 <CPU::detectFeatures()+0x916>
c0019c8b:	50                   	push   eax
c0019c8c:	50                   	push   eax
c0019c8d:	68 de c3 02 c0       	push   0xc002c3de
c0019c92:	eb 31                	jmp    c0019cc5 <CPU::detectFeatures()+0x947>
c0019c94:	83 f8 05             	cmp    eax,0x5
c0019c97:	75 09                	jne    c0019ca2 <CPU::detectFeatures()+0x924>
c0019c99:	50                   	push   eax
c0019c9a:	50                   	push   eax
c0019c9b:	68 e6 c3 02 c0       	push   0xc002c3e6
c0019ca0:	eb 23                	jmp    c0019cc5 <CPU::detectFeatures()+0x947>
c0019ca2:	83 f8 0c             	cmp    eax,0xc
c0019ca5:	75 09                	jne    c0019cb0 <CPU::detectFeatures()+0x932>
c0019ca7:	57                   	push   edi
c0019ca8:	57                   	push   edi
c0019ca9:	68 f4 c3 02 c0       	push   0xc002c3f4
c0019cae:	eb 15                	jmp    c0019cc5 <CPU::detectFeatures()+0x947>
c0019cb0:	83 f8 0d             	cmp    eax,0xd
c0019cb3:	75 09                	jne    c0019cbe <CPU::detectFeatures()+0x940>
c0019cb5:	56                   	push   esi
c0019cb6:	56                   	push   esi
c0019cb7:	68 ff c3 02 c0       	push   0xc002c3ff
c0019cbc:	eb 07                	jmp    c0019cc5 <CPU::detectFeatures()+0x947>
c0019cbe:	53                   	push   ebx
c0019cbf:	53                   	push   ebx
c0019cc0:	68 13 c4 02 c0       	push   0xc002c413
c0019cc5:	55                   	push   ebp
c0019cc6:	e8 07 a8 ff ff       	call   c00144d2 <Device::setName(char const*)>
c0019ccb:	83 c4 10             	add    esp,0x10
c0019cce:	e9 80 00 00 00       	jmp    c0019d53 <CPU::detectFeatures()+0x9d5>
c0019cd3:	51                   	push   ecx
c0019cd4:	51                   	push   ecx
c0019cd5:	68 5f c2 02 c0       	push   0xc002c25f
c0019cda:	53                   	push   ebx
c0019cdb:	e8 48 6b fe ff       	call   c0000828 <strcpy>
c0019ce0:	c7 85 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebp+0x158],0x1
c0019cea:	e8 bf 65 fe ff       	call   c00002ae <is486>
c0019cef:	83 c4 10             	add    esp,0x10
c0019cf2:	85 c0                	test   eax,eax
c0019cf4:	74 2b                	je     c0019d21 <CPU::detectFeatures()+0x9a3>
c0019cf6:	52                   	push   edx
c0019cf7:	52                   	push   edx
c0019cf8:	68 1f c4 02 c0       	push   0xc002c41f
c0019cfd:	55                   	push   ebp
c0019cfe:	e8 cf a7 ff ff       	call   c00144d2 <Device::setName(char const*)>
c0019d03:	80 8d 91 11 00 00 07 	or     BYTE PTR [ebp+0x1191],0x7
c0019d0a:	0f 20 c0             	mov    eax,cr0
c0019d0d:	83 e0 14             	and    eax,0x14
c0019d10:	83 c4 10             	add    esp,0x10
c0019d13:	83 f8 04             	cmp    eax,0x4
c0019d16:	75 1f                	jne    c0019d37 <CPU::detectFeatures()+0x9b9>
c0019d18:	80 a5 92 11 00 00 fd 	and    BYTE PTR [ebp+0x1192],0xfd
c0019d1f:	eb 32                	jmp    c0019d53 <CPU::detectFeatures()+0x9d5>
c0019d21:	50                   	push   eax
c0019d22:	50                   	push   eax
c0019d23:	68 2a c4 02 c0       	push   0xc002c42a
c0019d28:	55                   	push   ebp
c0019d29:	e8 a4 a7 ff ff       	call   c00144d2 <Device::setName(char const*)>
c0019d2e:	80 a5 91 11 00 00 f8 	and    BYTE PTR [ebp+0x1191],0xf8
c0019d35:	eb d3                	jmp    c0019d0a <CPU::detectFeatures()+0x98c>
c0019d37:	e8 4d 65 fe ff       	call   c0000289 <hasLegacyFPU>
c0019d3c:	83 e0 01             	and    eax,0x1
c0019d3f:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019d42:	8a 85 92 11 00 00    	mov    al,BYTE PTR [ebp+0x1192]
c0019d48:	83 e0 fd             	and    eax,0xfffffffd
c0019d4b:	09 c8                	or     eax,ecx
c0019d4d:	88 85 92 11 00 00    	mov    BYTE PTR [ebp+0x1192],al
c0019d53:	c6 85 94 11 00 00 00 	mov    BYTE PTR [ebp+0x1194],0x0
c0019d5a:	83 c4 3c             	add    esp,0x3c
c0019d5d:	5b                   	pop    ebx
c0019d5e:	5e                   	pop    esi
c0019d5f:	5f                   	pop    edi
c0019d60:	5d                   	pop    ebp
c0019d61:	c3                   	ret    

c0019d62 <CPU::setupSMEP()>:
c0019d62:	0f 20 e0             	mov    eax,cr4
c0019d65:	0d 00 00 10 00       	or     eax,0x100000
c0019d6a:	0f 22 e0             	mov    cr4,eax
c0019d6d:	c3                   	ret    

c0019d6e <CPU::setupUMIP()>:
c0019d6e:	0f 20 e0             	mov    eax,cr4
c0019d71:	80 cc 08             	or     ah,0x8
c0019d74:	0f 22 e0             	mov    cr4,eax
c0019d77:	c3                   	ret    

c0019d78 <CPU::setupTSC()>:
c0019d78:	0f 20 e0             	mov    eax,cr4
c0019d7b:	83 c8 04             	or     eax,0x4
c0019d7e:	0f 22 e0             	mov    cr4,eax
c0019d81:	c3                   	ret    

c0019d82 <CPU::setupLargePages()>:
c0019d82:	0f 20 e0             	mov    eax,cr4
c0019d85:	83 c8 10             	or     eax,0x10
c0019d88:	0f 22 e0             	mov    cr4,eax
c0019d8b:	c3                   	ret    

c0019d8c <CPU::setupPAT()>:
c0019d8c:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0019d91:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019d98:	74 2c                	je     c0019dc6 <CPU::setupPAT()+0x3a>
c0019d9a:	53                   	push   ebx
c0019d9b:	83 ec 10             	sub    esp,0x10
c0019d9e:	68 77 02 00 00       	push   0x277
c0019da3:	50                   	push   eax
c0019da4:	e8 2b 51 ff ff       	call   c000eed4 <Computer::rdmsr(unsigned int)>
c0019da9:	83 e2 f8             	and    edx,0xfffffff8
c0019dac:	83 ca 01             	or     edx,0x1
c0019daf:	52                   	push   edx
c0019db0:	50                   	push   eax
c0019db1:	68 77 02 00 00       	push   0x277
c0019db6:	ff 35 e8 ee 02 c0    	push   DWORD PTR ds:0xc002eee8
c0019dbc:	e8 3f 51 ff ff       	call   c000ef00 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019dc1:	83 c4 28             	add    esp,0x28
c0019dc4:	5b                   	pop    ebx
c0019dc5:	c3                   	ret    
c0019dc6:	c3                   	ret    
c0019dc7:	90                   	nop

c0019dc8 <CPU::setupMTRR()>:
c0019dc8:	c3                   	ret    
c0019dc9:	90                   	nop

c0019dca <CPU::setupGlobalPages()>:
c0019dca:	0f 20 e0             	mov    eax,cr4
c0019dcd:	0c 80                	or     al,0x80
c0019dcf:	0f 22 e0             	mov    cr4,eax
c0019dd2:	c3                   	ret    
c0019dd3:	90                   	nop

c0019dd4 <CPU::allowUsermodeDataAccess()>:
c0019dd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dd8:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019ddf:	74 03                	je     c0019de4 <CPU::allowUsermodeDataAccess()+0x10>
c0019de1:	0f 01 cb             	stac   
c0019de4:	c3                   	ret    
c0019de5:	90                   	nop

c0019de6 <CPU::prohibitUsermodeDataAccess()>:
c0019de6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dea:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019df1:	74 03                	je     c0019df6 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019df3:	0f 01 ca             	clac   
c0019df6:	c3                   	ret    
c0019df7:	90                   	nop

c0019df8 <CPU::setupSMAP()>:
c0019df8:	0f 20 e0             	mov    eax,cr4
c0019dfb:	0d 00 00 20 00       	or     eax,0x200000
c0019e00:	0f 22 e0             	mov    cr4,eax
c0019e03:	eb e1                	jmp    c0019de6 <CPU::prohibitUsermodeDataAccess()>
c0019e05:	90                   	nop

c0019e06 <CPU::setupFeatures()>:
c0019e06:	83 ec 0c             	sub    esp,0xc
c0019e09:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019e0d:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019e14:	74 07                	je     c0019e1d <CPU::setupFeatures()+0x17>
c0019e16:	52                   	push   edx
c0019e17:	e8 46 ff ff ff       	call   c0019d62 <CPU::setupSMEP()>
c0019e1c:	58                   	pop    eax
c0019e1d:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019e24:	74 07                	je     c0019e2d <CPU::setupFeatures()+0x27>
c0019e26:	52                   	push   edx
c0019e27:	e8 cc ff ff ff       	call   c0019df8 <CPU::setupSMAP()>
c0019e2c:	58                   	pop    eax
c0019e2d:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019e34:	74 07                	je     c0019e3d <CPU::setupFeatures()+0x37>
c0019e36:	52                   	push   edx
c0019e37:	e8 32 ff ff ff       	call   c0019d6e <CPU::setupUMIP()>
c0019e3c:	58                   	pop    eax
c0019e3d:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019e44:	74 07                	je     c0019e4d <CPU::setupFeatures()+0x47>
c0019e46:	52                   	push   edx
c0019e47:	e8 2c ff ff ff       	call   c0019d78 <CPU::setupTSC()>
c0019e4c:	58                   	pop    eax
c0019e4d:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019e54:	74 07                	je     c0019e5d <CPU::setupFeatures()+0x57>
c0019e56:	52                   	push   edx
c0019e57:	e8 26 ff ff ff       	call   c0019d82 <CPU::setupLargePages()>
c0019e5c:	59                   	pop    ecx
c0019e5d:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019e64:	74 07                	je     c0019e6d <CPU::setupFeatures()+0x67>
c0019e66:	52                   	push   edx
c0019e67:	e8 5e ff ff ff       	call   c0019dca <CPU::setupGlobalPages()>
c0019e6c:	58                   	pop    eax
c0019e6d:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019e74:	74 0c                	je     c0019e82 <CPU::setupFeatures()+0x7c>
c0019e76:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019e7a:	83 c4 0c             	add    esp,0xc
c0019e7d:	e9 0a ff ff ff       	jmp    c0019d8c <CPU::setupPAT()>
c0019e82:	83 c4 0c             	add    esp,0xc
c0019e85:	c3                   	ret    

c0019e86 <CPU::open(int, int, void*)>:
c0019e86:	57                   	push   edi
c0019e87:	56                   	push   esi
c0019e88:	53                   	push   ebx
c0019e89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e8d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019e91:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019e97:	83 ec 0c             	sub    esp,0xc
c0019e9a:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019ea0:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019ea6:	50                   	push   eax
c0019ea7:	e8 14 53 ff ff       	call   c000f1c0 <GDT::setup()>
c0019eac:	83 c4 0c             	add    esp,0xc
c0019eaf:	6a 00                	push   0x0
c0019eb1:	68 ef be ad de       	push   0xdeadbeef
c0019eb6:	57                   	push   edi
c0019eb7:	e8 7c 75 ff ff       	call   c0011438 <TSS::setup(unsigned long, unsigned long)>
c0019ebc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019ebf:	e8 54 75 ff ff       	call   c0011418 <TSS::flush()>
c0019ec4:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019eca:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ecd:	e8 52 55 ff ff       	call   c000f424 <IDT::setup()>
c0019ed2:	b8 00 04 00 00       	mov    eax,0x400
c0019ed7:	0f 23 f8             	mov    db7,eax
c0019eda:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019ee4:	e8 b1 60 ff ff       	call   c000ff9a <Phys::allocatePage()>
c0019ee9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019eef:	89 30                	mov    DWORD PTR [eax],esi
c0019ef1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019ef7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019efa:	58                   	pop    eax
c0019efb:	5a                   	pop    edx
c0019efc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f02:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019f06:	e8 cd 86 ff ff       	call   c00125d8 <VAS::setCPUSpecific(unsigned long)>
c0019f0b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f0e:	e8 6b f4 ff ff       	call   c001937e <CPU::detectFeatures()>
c0019f13:	e8 11 ba ff ff       	call   c0015929 <setupInterruptController()>
c0019f18:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019f1e:	a1 00 ef 02 c0       	mov    eax,ds:0xc002ef00
c0019f23:	83 e0 10             	and    eax,0x10
c0019f26:	83 f8 01             	cmp    eax,0x1
c0019f29:	19 c0                	sbb    eax,eax
c0019f2b:	83 e0 46             	and    eax,0x46
c0019f2e:	83 c0 1e             	add    eax,0x1e
c0019f31:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f34:	e8 48 d0 ff ff       	call   c0016f81 <setupTimer(int)>
c0019f39:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019f3f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f42:	e8 bf fe ff ff       	call   c0019e06 <CPU::setupFeatures()>
c0019f47:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f4a:	e8 b3 f1 ff ff       	call   c0019102 <CPU::displayFeatures()>
c0019f4f:	83 c4 10             	add    esp,0x10
c0019f52:	31 c0                	xor    eax,eax
c0019f54:	5b                   	pop    ebx
c0019f55:	5e                   	pop    esi
c0019f56:	5f                   	pop    edi
c0019f57:	c3                   	ret    

c0019f58 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019f58:	57                   	push   edi
c0019f59:	56                   	push   esi
c0019f5a:	53                   	push   ebx
c0019f5b:	51                   	push   ecx
c0019f5c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019f60:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019f63:	0f 02 c0             	lar    eax,ax
c0019f66:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019f69:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019f6d:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019f70:	88 ca                	mov    dl,cl
c0019f72:	c0 ea 06             	shr    dl,0x6
c0019f75:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019f79:	89 ca                	mov    edx,ecx
c0019f7b:	66 c1 ea 03          	shr    dx,0x3
c0019f7f:	83 e2 07             	and    edx,0x7
c0019f82:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019f87:	88 17                	mov    BYTE PTR [edi],dl
c0019f89:	0f 84 a6 01 00 00    	je     c001a135 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019f8f:	83 e1 07             	and    ecx,0x7
c0019f92:	80 f9 04             	cmp    cl,0x4
c0019f95:	0f 84 98 00 00 00    	je     c001a033 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019f9b:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019fa0:	0f 95 c0             	setne  al
c0019fa3:	80 f9 05             	cmp    cl,0x5
c0019fa6:	0f 95 c2             	setne  dl
c0019fa9:	08 c2                	or     dl,al
c0019fab:	74 79                	je     c001a026 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019fad:	84 c9                	test   cl,cl
c0019faf:	75 05                	jne    c0019fb6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019fb1:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019fb4:	eb 3c                	jmp    c0019ff2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fb6:	80 f9 01             	cmp    cl,0x1
c0019fb9:	75 05                	jne    c0019fc0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019fbb:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019fbe:	eb 32                	jmp    c0019ff2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fc0:	80 f9 02             	cmp    cl,0x2
c0019fc3:	75 05                	jne    c0019fca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019fc5:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019fc8:	eb 28                	jmp    c0019ff2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fca:	31 c0                	xor    eax,eax
c0019fcc:	80 f9 03             	cmp    cl,0x3
c0019fcf:	75 05                	jne    c0019fd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019fd1:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019fd4:	eb 1c                	jmp    c0019ff2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fd6:	80 f9 05             	cmp    cl,0x5
c0019fd9:	75 05                	jne    c0019fe0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019fdb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019fde:	eb 12                	jmp    c0019ff2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fe0:	80 f9 06             	cmp    cl,0x6
c0019fe3:	75 05                	jne    c0019fea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019fe5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019fe8:	eb 08                	jmp    c0019ff2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fea:	80 f9 07             	cmp    cl,0x7
c0019fed:	75 03                	jne    c0019ff2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fef:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019ff2:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019ff7:	75 10                	jne    c001a009 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019ff9:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019ffd:	b9 03 00 00 00       	mov    ecx,0x3
c001a002:	01 d0                	add    eax,edx
c001a004:	e9 37 01 00 00       	jmp    c001a140 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a009:	b9 02 00 00 00       	mov    ecx,0x2
c001a00e:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001a013:	0f 85 27 01 00 00    	jne    c001a140 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a019:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001a01c:	b9 06 00 00 00       	mov    ecx,0x6
c001a021:	e9 1a 01 00 00       	jmp    c001a140 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a026:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001a029:	b9 06 00 00 00       	mov    ecx,0x6
c001a02e:	e9 0f 01 00 00       	jmp    c001a142 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a033:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001a036:	88 ca                	mov    dl,cl
c001a038:	c0 ea 06             	shr    dl,0x6
c001a03b:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001a03f:	89 ca                	mov    edx,ecx
c001a041:	66 c1 ea 03          	shr    dx,0x3
c001a045:	83 e2 07             	and    edx,0x7
c001a048:	80 e1 07             	and    cl,0x7
c001a04b:	75 05                	jne    c001a052 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001a04d:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001a050:	eb 4c                	jmp    c001a09e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a052:	80 f9 01             	cmp    cl,0x1
c001a055:	75 05                	jne    c001a05c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001a057:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001a05a:	eb 42                	jmp    c001a09e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a05c:	80 f9 02             	cmp    cl,0x2
c001a05f:	75 05                	jne    c001a066 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001a061:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001a064:	eb 38                	jmp    c001a09e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a066:	80 f9 03             	cmp    cl,0x3
c001a069:	75 05                	jne    c001a070 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001a06b:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001a06e:	eb 2e                	jmp    c001a09e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a070:	80 f9 04             	cmp    cl,0x4
c001a073:	75 12                	jne    c001a087 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001a075:	f6 c4 60             	test   ah,0x60
c001a078:	75 08                	jne    c001a082 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001a07a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001a07d:	8d 78 14             	lea    edi,[eax+0x14]
c001a080:	eb 1c                	jmp    c001a09e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a082:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001a085:	eb 17                	jmp    c001a09e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a087:	80 f9 05             	cmp    cl,0x5
c001a08a:	75 05                	jne    c001a091 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001a08c:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001a08f:	eb 0d                	jmp    c001a09e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a091:	80 f9 06             	cmp    cl,0x6
c001a094:	75 05                	jne    c001a09b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001a096:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001a099:	eb 03                	jmp    c001a09e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a09b:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a09e:	84 d2                	test   dl,dl
c001a0a0:	75 05                	jne    c001a0a7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001a0a2:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001a0a5:	eb 3c                	jmp    c001a0e3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0a7:	80 fa 01             	cmp    dl,0x1
c001a0aa:	75 05                	jne    c001a0b1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001a0ac:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a0af:	eb 32                	jmp    c001a0e3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0b1:	80 fa 02             	cmp    dl,0x2
c001a0b4:	75 05                	jne    c001a0bb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001a0b6:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a0b9:	eb 28                	jmp    c001a0e3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0bb:	80 fa 03             	cmp    dl,0x3
c001a0be:	75 05                	jne    c001a0c5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001a0c0:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a0c3:	eb 1e                	jmp    c001a0e3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0c5:	31 c0                	xor    eax,eax
c001a0c7:	80 fa 04             	cmp    dl,0x4
c001a0ca:	74 17                	je     c001a0e3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0cc:	80 fa 05             	cmp    dl,0x5
c001a0cf:	75 05                	jne    c001a0d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001a0d1:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001a0d4:	eb 0d                	jmp    c001a0e3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0d6:	80 fa 06             	cmp    dl,0x6
c001a0d9:	75 05                	jne    c001a0e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001a0db:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a0de:	eb 03                	jmp    c001a0e3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0e0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a0e3:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a0e8:	0f 94 c2             	sete   dl
c001a0eb:	80 f9 05             	cmp    cl,0x5
c001a0ee:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001a0f2:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001a0f7:	d3 e0                	shl    eax,cl
c001a0f9:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001a0fd:	74 0a                	je     c001a109 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001a0ff:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a102:	b9 07 00 00 00       	mov    ecx,0x7
c001a107:	eb 37                	jmp    c001a140 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a109:	01 f8                	add    eax,edi
c001a10b:	b9 03 00 00 00       	mov    ecx,0x3
c001a110:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a115:	74 2b                	je     c001a142 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a117:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001a11c:	75 0d                	jne    c001a12b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001a11e:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001a122:	01 c8                	add    eax,ecx
c001a124:	b9 04 00 00 00       	mov    ecx,0x4
c001a129:	eb 17                	jmp    c001a142 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a12b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a12e:	b9 07 00 00 00       	mov    ecx,0x7
c001a133:	eb 0d                	jmp    c001a142 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a135:	b9 02 00 00 00       	mov    ecx,0x2
c001a13a:	b2 01                	mov    dl,0x1
c001a13c:	31 c0                	xor    eax,eax
c001a13e:	eb 02                	jmp    c001a142 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a140:	31 d2                	xor    edx,edx
c001a142:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a146:	89 0b                	mov    DWORD PTR [ebx],ecx
c001a148:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a14c:	88 11                	mov    BYTE PTR [ecx],dl
c001a14e:	5a                   	pop    edx
c001a14f:	5b                   	pop    ebx
c001a150:	5e                   	pop    esi
c001a151:	5f                   	pop    edi
c001a152:	c3                   	ret    

c001a153 <Krnl::smpEntry()>:
c001a153:	eb fe                	jmp    c001a153 <Krnl::smpEntry()>

c001a155 <Krnl::startCPU(int)>:
c001a155:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c001a15a:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001a161:	0f 84 36 01 00 00    	je     c001a29d <Krnl::startCPU(int)+0x148>
c001a167:	53                   	push   ebx
c001a168:	83 ec 10             	sub    esp,0x10
c001a16b:	fa                   	cli    
c001a16c:	ff 05 28 24 03 c0    	inc    DWORD PTR ds:0xc0032428
c001a172:	6a 1b                	push   0x1b
c001a174:	ff 35 e8 ee 02 c0    	push   DWORD PTR ds:0xc002eee8
c001a17a:	e8 55 4d ff ff       	call   c000eed4 <Computer::rdmsr(unsigned int)>
c001a17f:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a184:	89 c3                	mov    ebx,eax
c001a186:	58                   	pop    eax
c001a187:	5a                   	pop    edx
c001a188:	53                   	push   ebx
c001a189:	68 64 c4 02 c0       	push   0xc002c464
c001a18e:	e8 3a 8d ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001a193:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a19d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a1a1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a1ab:	c1 e0 18             	shl    eax,0x18
c001a1ae:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c001a1b4:	83 c4 10             	add    esp,0x10
c001a1b7:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001a1bd:	09 c2                	or     edx,eax
c001a1bf:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001a1c5:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001a1cb:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a1d1:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a1d7:	80 cd c5             	or     ch,0xc5
c001a1da:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a1e0:	f3 90                	pause  
c001a1e2:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a1e4:	0f ba e1 0c          	bt     ecx,0xc
c001a1e8:	72 f6                	jb     c001a1e0 <Krnl::startCPU(int)+0x8b>
c001a1ea:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a1f0:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a1f6:	09 c1                	or     ecx,eax
c001a1f8:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a1fe:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a204:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a20a:	80 cd 85             	or     ch,0x85
c001a20d:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a213:	f3 90                	pause  
c001a215:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a217:	0f ba e1 0c          	bt     ecx,0xc
c001a21b:	72 f6                	jb     c001a213 <Krnl::startCPU(int)+0xbe>
c001a21d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a227:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a22d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a233:	09 c1                	or     ecx,eax
c001a235:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a23b:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a241:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a247:	81 c9 02 06 00 00    	or     ecx,0x602
c001a24d:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a253:	f3 90                	pause  
c001a255:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a257:	0f ba e1 0c          	bt     ecx,0xc
c001a25b:	72 f6                	jb     c001a253 <Krnl::startCPU(int)+0xfe>
c001a25d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a267:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a26d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a273:	09 c8                	or     eax,ecx
c001a275:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a27b:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a281:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a286:	0d 02 06 00 00       	or     eax,0x602
c001a28b:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a291:	f3 90                	pause  
c001a293:	8b 02                	mov    eax,DWORD PTR [edx]
c001a295:	0f ba e0 0c          	bt     eax,0xc
c001a299:	72 f6                	jb     c001a291 <Krnl::startCPU(int)+0x13c>
c001a29b:	eb fe                	jmp    c001a29b <Krnl::startCPU(int)+0x146>
c001a29d:	c3                   	ret    

c001a29e <Krnl::startCPUs()>:
c001a29e:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c001a2a3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a2a9:	88 c2                	mov    dl,al
c001a2ab:	83 e2 0a             	and    edx,0xa
c001a2ae:	80 fa 0a             	cmp    dl,0xa
c001a2b1:	75 09                	jne    c001a2bc <Krnl::startCPUs()+0x1e>
c001a2b3:	a8 01                	test   al,0x1
c001a2b5:	74 05                	je     c001a2bc <Krnl::startCPUs()+0x1e>
c001a2b7:	e9 df 5e fe ff       	jmp    c000019b <prepareTramp>
c001a2bc:	c3                   	ret    
c001a2bd:	90                   	nop

c001a2be <EnvVarContainer::getEnv(char const*)>:
c001a2be:	57                   	push   edi
c001a2bf:	56                   	push   esi
c001a2c0:	53                   	push   ebx
c001a2c1:	31 db                	xor    ebx,ebx
c001a2c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a2c7:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a2c9:	7e 2b                	jle    c001a2f6 <EnvVarContainer::getEnv(char const*)+0x38>
c001a2cb:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a2d2:	50                   	push   eax
c001a2d3:	50                   	push   eax
c001a2d4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a2d7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a2da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a2de:	e8 d1 65 fe ff       	call   c00008b4 <strcmp>
c001a2e3:	83 c4 10             	add    esp,0x10
c001a2e6:	85 c0                	test   eax,eax
c001a2e8:	75 09                	jne    c001a2f3 <EnvVarContainer::getEnv(char const*)+0x35>
c001a2ea:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a2ed:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a2f1:	eb 05                	jmp    c001a2f8 <EnvVarContainer::getEnv(char const*)+0x3a>
c001a2f3:	43                   	inc    ebx
c001a2f4:	eb d1                	jmp    c001a2c7 <EnvVarContainer::getEnv(char const*)+0x9>
c001a2f6:	31 c0                	xor    eax,eax
c001a2f8:	5b                   	pop    ebx
c001a2f9:	5e                   	pop    esi
c001a2fa:	5f                   	pop    edi
c001a2fb:	c3                   	ret    

c001a2fc <EnvVarContainer::setEnv(char const*, char const*)>:
c001a2fc:	55                   	push   ebp
c001a2fd:	57                   	push   edi
c001a2fe:	56                   	push   esi
c001a2ff:	53                   	push   ebx
c001a300:	83 ec 28             	sub    esp,0x28
c001a303:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001a307:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a30b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a30f:	56                   	push   esi
c001a310:	e8 73 64 fe ff       	call   c0000788 <strlen>
c001a315:	40                   	inc    eax
c001a316:	89 04 24             	mov    DWORD PTR [esp],eax
c001a319:	e8 10 56 ff ff       	call   c000f92e <malloc>
c001a31e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a321:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a325:	e8 5e 64 fe ff       	call   c0000788 <strlen>
c001a32a:	40                   	inc    eax
c001a32b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a32e:	e8 fb 55 ff ff       	call   c000f92e <malloc>
c001a333:	89 34 24             	mov    DWORD PTR [esp],esi
c001a336:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a33a:	e8 49 64 fe ff       	call   c0000788 <strlen>
c001a33f:	83 c4 0c             	add    esp,0xc
c001a342:	40                   	inc    eax
c001a343:	50                   	push   eax
c001a344:	6a 00                	push   0x0
c001a346:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a34a:	e8 1d 64 fe ff       	call   c000076c <memset>
c001a34f:	89 34 24             	mov    DWORD PTR [esp],esi
c001a352:	e8 31 64 fe ff       	call   c0000788 <strlen>
c001a357:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a35b:	8d 48 01             	lea    ecx,[eax+0x1]
c001a35e:	fc                   	cld    
c001a35f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a361:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a364:	89 ee                	mov    esi,ebp
c001a366:	e8 1d 64 fe ff       	call   c0000788 <strlen>
c001a36b:	83 c4 0c             	add    esp,0xc
c001a36e:	40                   	inc    eax
c001a36f:	50                   	push   eax
c001a370:	6a 00                	push   0x0
c001a372:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a376:	e8 f1 63 fe ff       	call   c000076c <memset>
c001a37b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a37e:	e8 05 64 fe ff       	call   c0000788 <strlen>
c001a383:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a387:	8d 48 01             	lea    ecx,[eax+0x1]
c001a38a:	fc                   	cld    
c001a38b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a38d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a38f:	40                   	inc    eax
c001a390:	89 03                	mov    DWORD PTR [ebx],eax
c001a392:	c1 e0 03             	shl    eax,0x3
c001a395:	5a                   	pop    edx
c001a396:	59                   	pop    ecx
c001a397:	50                   	push   eax
c001a398:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a39b:	e8 7a 55 ff ff       	call   c000f91a <realloc>
c001a3a0:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a3a4:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a3a6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a3a9:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a3ad:	b9 08 00 00 00       	mov    ecx,0x8
c001a3b2:	fc                   	cld    
c001a3b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a3b5:	83 c4 2c             	add    esp,0x2c
c001a3b8:	5b                   	pop    ebx
c001a3b9:	5e                   	pop    esi
c001a3ba:	5f                   	pop    edi
c001a3bb:	5d                   	pop    ebp
c001a3bc:	c3                   	ret    
c001a3bd:	90                   	nop

c001a3be <EnvVarContainer::deleteEnv(char const*)>:
c001a3be:	c3                   	ret    
c001a3bf:	90                   	nop

c001a3c0 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a3c0:	55                   	push   ebp
c001a3c1:	57                   	push   edi
c001a3c2:	56                   	push   esi
c001a3c3:	53                   	push   ebx
c001a3c4:	81 ec 38 01 00 00    	sub    esp,0x138
c001a3ca:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001a3d1:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001a3d8:	68 14 01 00 00       	push   0x114
c001a3dd:	e8 4c 55 ff ff       	call   c000f92e <malloc>
c001a3e2:	83 c4 0c             	add    esp,0xc
c001a3e5:	89 c5                	mov    ebp,eax
c001a3e7:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001a3ea:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a3f1:	50                   	push   eax
c001a3f2:	e8 35 90 ff ff       	call   c001342c <File::File(char const*, Process*)>
c001a3f7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a3fa:	e8 ff 92 ff ff       	call   c00136fe <File::exists()>
c001a3ff:	83 c4 10             	add    esp,0x10
c001a402:	84 c0                	test   al,al
c001a404:	75 32                	jne    c001a438 <EnvVarContainer::loadFrom(char const*, char const*)+0x78>
c001a406:	51                   	push   ecx
c001a407:	51                   	push   ecx
c001a408:	6a 12                	push   0x12
c001a40a:	55                   	push   ebp
c001a40b:	e8 80 90 ff ff       	call   c0013490 <File::open(FileOpenMode)>
c001a410:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a413:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001a416:	89 34 24             	mov    DWORD PTR [esp],esi
c001a419:	e8 6a 63 fe ff       	call   c0000788 <strlen>
c001a41e:	5a                   	pop    edx
c001a41f:	31 d2                	xor    edx,edx
c001a421:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a425:	51                   	push   ecx
c001a426:	56                   	push   esi
c001a427:	52                   	push   edx
c001a428:	50                   	push   eax
c001a429:	55                   	push   ebp
c001a42a:	ff d7                	call   edi
c001a42c:	83 c4 14             	add    esp,0x14
c001a42f:	55                   	push   ebp
c001a430:	e8 b9 90 ff ff       	call   c00134ee <File::close()>
c001a435:	83 c4 10             	add    esp,0x10
c001a438:	31 f6                	xor    esi,esi
c001a43a:	50                   	push   eax
c001a43b:	68 00 01 00 00       	push   0x100
c001a440:	6a 00                	push   0x0
c001a442:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a446:	50                   	push   eax
c001a447:	e8 20 63 fe ff       	call   c000076c <memset>
c001a44c:	58                   	pop    eax
c001a44d:	5a                   	pop    edx
c001a44e:	6a 01                	push   0x1
c001a450:	55                   	push   ebp
c001a451:	e8 3a 90 ff ff       	call   c0013490 <File::open(FileOpenMode)>
c001a456:	83 c4 10             	add    esp,0x10
c001a459:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a461:	83 ec 0c             	sub    esp,0xc
c001a464:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a467:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a46b:	51                   	push   ecx
c001a46c:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a470:	52                   	push   edx
c001a471:	6a 00                	push   0x0
c001a473:	6a 01                	push   0x1
c001a475:	55                   	push   ebp
c001a476:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a479:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a47d:	83 c4 20             	add    esp,0x20
c001a480:	3c 0d                	cmp    al,0xd
c001a482:	0f 84 19 01 00 00    	je     c001a5a1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e1>
c001a488:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a48d:	0f 84 ff 00 00 00    	je     c001a592 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a493:	3c 0a                	cmp    al,0xa
c001a495:	74 13                	je     c001a4aa <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a497:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a49c:	74 0c                	je     c001a4aa <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a49e:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a4a4:	0f 8e e8 00 00 00    	jle    c001a592 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a4aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a4ae:	83 ec 0c             	sub    esp,0xc
c001a4b1:	8d 78 01             	lea    edi,[eax+0x1]
c001a4b4:	57                   	push   edi
c001a4b5:	e8 74 54 ff ff       	call   c000f92e <malloc>
c001a4ba:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001a4be:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a4c2:	8d 56 04             	lea    edx,[esi+0x4]
c001a4c5:	89 14 24             	mov    DWORD PTR [esp],edx
c001a4c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a4cc:	e8 5d 54 ff ff       	call   c000f92e <malloc>
c001a4d1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a4d5:	83 c4 0c             	add    esp,0xc
c001a4d8:	57                   	push   edi
c001a4d9:	6a 00                	push   0x0
c001a4db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a4df:	e8 88 62 fe ff       	call   c000076c <memset>
c001a4e4:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a4e8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a4ec:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a4f0:	fc                   	cld    
c001a4f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a4f3:	83 c4 0c             	add    esp,0xc
c001a4f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a4fa:	52                   	push   edx
c001a4fb:	6a 00                	push   0x0
c001a4fd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a501:	e8 66 62 fe ff       	call   c000076c <memset>
c001a506:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a50a:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001a50e:	89 34 24             	mov    DWORD PTR [esp],esi
c001a511:	e8 72 62 fe ff       	call   c0000788 <strlen>
c001a516:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a51a:	89 c1                	mov    ecx,eax
c001a51c:	fc                   	cld    
c001a51d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a51f:	5e                   	pop    esi
c001a520:	5f                   	pop    edi
c001a521:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a525:	68 75 c4 02 c0       	push   0xc002c475
c001a52a:	e8 9e 89 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001a52f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a531:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c001a534:	40                   	inc    eax
c001a535:	83 c4 10             	add    esp,0x10
c001a538:	89 03                	mov    DWORD PTR [ebx],eax
c001a53a:	85 d2                	test   edx,edx
c001a53c:	75 0c                	jne    c001a54a <EnvVarContainer::loadFrom(char const*, char const*)+0x18a>
c001a53e:	83 ec 0c             	sub    esp,0xc
c001a541:	6a 08                	push   0x8
c001a543:	e8 e6 53 ff ff       	call   c000f92e <malloc>
c001a548:	eb 0c                	jmp    c001a556 <EnvVarContainer::loadFrom(char const*, char const*)+0x196>
c001a54a:	c1 e0 03             	shl    eax,0x3
c001a54d:	51                   	push   ecx
c001a54e:	51                   	push   ecx
c001a54f:	50                   	push   eax
c001a550:	52                   	push   edx
c001a551:	e8 c4 53 ff ff       	call   c000f91a <realloc>
c001a556:	83 c4 10             	add    esp,0x10
c001a559:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a55c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a55e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001a561:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a565:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a569:	b9 08 00 00 00       	mov    ecx,0x8
c001a56e:	fc                   	cld    
c001a56f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a571:	31 f6                	xor    esi,esi
c001a573:	52                   	push   edx
c001a574:	68 00 01 00 00       	push   0x100
c001a579:	6a 00                	push   0x0
c001a57b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a57f:	50                   	push   eax
c001a580:	e8 e7 61 fe ff       	call   c000076c <memset>
c001a585:	83 c4 10             	add    esp,0x10
c001a588:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a590:	eb 0f                	jmp    c001a5a1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e1>
c001a592:	3c 3d                	cmp    al,0x3d
c001a594:	74 07                	je     c001a59d <EnvVarContainer::loadFrom(char const*, char const*)+0x1dd>
c001a596:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001a59a:	46                   	inc    esi
c001a59b:	eb 04                	jmp    c001a5a1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e1>
c001a59d:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001a5a1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a5a6:	0f 85 b5 fe ff ff    	jne    c001a461 <EnvVarContainer::loadFrom(char const*, char const*)+0xa1>
c001a5ac:	50                   	push   eax
c001a5ad:	50                   	push   eax
c001a5ae:	ff 33                	push   DWORD PTR [ebx]
c001a5b0:	68 83 c4 02 c0       	push   0xc002c483
c001a5b5:	e8 13 89 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001a5ba:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a5c0:	5b                   	pop    ebx
c001a5c1:	5e                   	pop    esi
c001a5c2:	5f                   	pop    edi
c001a5c3:	5d                   	pop    ebp
c001a5c4:	c3                   	ret    
c001a5c5:	90                   	nop

c001a5c6 <EnvVarContainer::__loadSystem()>:
c001a5c6:	83 ec 10             	sub    esp,0x10
c001a5c9:	68 20 e4 02 c0       	push   0xc002e420
c001a5ce:	68 ae c4 02 c0       	push   0xc002c4ae
c001a5d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5d7:	e8 e4 fd ff ff       	call   c001a3c0 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a5dc:	83 c4 1c             	add    esp,0x1c
c001a5df:	c3                   	ret    

c001a5e0 <EnvVarContainer::__loadUser()>:
c001a5e0:	c3                   	ret    
c001a5e1:	90                   	nop

c001a5e2 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a5e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a5ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a5f4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a5f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5fb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a602:	90                   	nop
c001a603:	c3                   	ret    

c001a604 <EnvVarContainer::~EnvVarContainer()>:
c001a604:	83 ec 0c             	sub    esp,0xc
c001a607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a60b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a60e:	85 c0                	test   eax,eax
c001a610:	74 1d                	je     c001a62f <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a616:	8b 00                	mov    eax,DWORD PTR [eax]
c001a618:	85 c0                	test   eax,eax
c001a61a:	74 13                	je     c001a62f <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a61c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a620:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a623:	83 ec 0c             	sub    esp,0xc
c001a626:	50                   	push   eax
c001a627:	e8 12 53 ff ff       	call   c000f93e <free>
c001a62c:	83 c4 10             	add    esp,0x10
c001a62f:	90                   	nop
c001a630:	83 c4 0c             	add    esp,0xc
c001a633:	c3                   	ret    

c001a634 <Krnl::getEnv(Process*, char const*)>:
c001a634:	53                   	push   ebx
c001a635:	83 ec 08             	sub    esp,0x8
c001a638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a63c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a640:	39 05 50 24 03 c0    	cmp    DWORD PTR ds:0xc0032450,eax
c001a646:	74 04                	je     c001a64c <Krnl::getEnv(Process*, char const*)+0x18>
c001a648:	85 c0                	test   eax,eax
c001a64a:	75 0b                	jne    c001a657 <Krnl::getEnv(Process*, char const*)+0x23>
c001a64c:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a651:	85 c0                	test   eax,eax
c001a653:	75 19                	jne    c001a66e <Krnl::getEnv(Process*, char const*)+0x3a>
c001a655:	eb 27                	jmp    c001a67e <Krnl::getEnv(Process*, char const*)+0x4a>
c001a657:	52                   	push   edx
c001a658:	52                   	push   edx
c001a659:	53                   	push   ebx
c001a65a:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a660:	e8 59 fc ff ff       	call   c001a2be <EnvVarContainer::getEnv(char const*)>
c001a665:	83 c4 10             	add    esp,0x10
c001a668:	85 c0                	test   eax,eax
c001a66a:	75 28                	jne    c001a694 <Krnl::getEnv(Process*, char const*)+0x60>
c001a66c:	eb de                	jmp    c001a64c <Krnl::getEnv(Process*, char const*)+0x18>
c001a66e:	52                   	push   edx
c001a66f:	52                   	push   edx
c001a670:	53                   	push   ebx
c001a671:	50                   	push   eax
c001a672:	e8 47 fc ff ff       	call   c001a2be <EnvVarContainer::getEnv(char const*)>
c001a677:	83 c4 10             	add    esp,0x10
c001a67a:	85 c0                	test   eax,eax
c001a67c:	75 16                	jne    c001a694 <Krnl::getEnv(Process*, char const*)+0x60>
c001a67e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a682:	a1 38 1a 03 c0       	mov    eax,ds:0xc0031a38
c001a687:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a68b:	83 c4 08             	add    esp,0x8
c001a68e:	5b                   	pop    ebx
c001a68f:	e9 2a fc ff ff       	jmp    c001a2be <EnvVarContainer::getEnv(char const*)>
c001a694:	83 c4 08             	add    esp,0x8
c001a697:	5b                   	pop    ebx
c001a698:	c3                   	ret    

c001a699 <Krnl::setEnvSystem(char const*, char const*)>:
c001a699:	83 ec 10             	sub    esp,0x10
c001a69c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6a4:	ff 35 38 1a 03 c0    	push   DWORD PTR ds:0xc0031a38
c001a6aa:	e8 4d fc ff ff       	call   c001a2fc <EnvVarContainer::setEnv(char const*, char const*)>
c001a6af:	83 c4 1c             	add    esp,0x1c
c001a6b2:	c3                   	ret    

c001a6b3 <Krnl::setEnvUser(char const*, char const*)>:
c001a6b3:	a1 34 1a 03 c0       	mov    eax,ds:0xc0031a34
c001a6b8:	85 c0                	test   eax,eax
c001a6ba:	74 15                	je     c001a6d1 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a6bc:	83 ec 10             	sub    esp,0x10
c001a6bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6c7:	50                   	push   eax
c001a6c8:	e8 2f fc ff ff       	call   c001a2fc <EnvVarContainer::setEnv(char const*, char const*)>
c001a6cd:	83 c4 1c             	add    esp,0x1c
c001a6d0:	c3                   	ret    
c001a6d1:	c3                   	ret    

c001a6d2 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a6d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6d6:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a6dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a6e0:	e9 17 fc ff ff       	jmp    c001a2fc <EnvVarContainer::setEnv(char const*, char const*)>

c001a6e5 <Krnl::deleteEnvSystem(char const*)>:
c001a6e5:	c3                   	ret    

c001a6e6 <Krnl::deleteEnvUser(char const*)>:
c001a6e6:	c3                   	ret    

c001a6e7 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a6e7:	c3                   	ret    

c001a6e8 <Krnl::newProcessEnv(Process*)>:
c001a6e8:	83 ec 28             	sub    esp,0x28
c001a6eb:	6a 0c                	push   0xc
c001a6ed:	e8 3c 52 ff ff       	call   c000f92e <malloc>
c001a6f2:	5a                   	pop    edx
c001a6f3:	59                   	pop    ecx
c001a6f4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a6f8:	50                   	push   eax
c001a6f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a6fd:	e8 e0 fe ff ff       	call   c001a5e2 <EnvVarContainer::EnvVarContainer(Process*)>
c001a702:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a706:	83 c4 2c             	add    esp,0x2c
c001a709:	c3                   	ret    

c001a70a <Krnl::copyProcessEnv(Process*, Process*)>:
c001a70a:	57                   	push   edi
c001a70b:	56                   	push   esi
c001a70c:	53                   	push   ebx
c001a70d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a711:	83 ec 0c             	sub    esp,0xc
c001a714:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a71a:	6a 0c                	push   0xc
c001a71c:	e8 0d 52 ff ff       	call   c000f92e <malloc>
c001a721:	89 c3                	mov    ebx,eax
c001a723:	58                   	pop    eax
c001a724:	5a                   	pop    edx
c001a725:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a729:	53                   	push   ebx
c001a72a:	e8 b3 fe ff ff       	call   c001a5e2 <EnvVarContainer::EnvVarContainer(Process*)>
c001a72f:	8b 07                	mov    eax,DWORD PTR [edi]
c001a731:	89 03                	mov    DWORD PTR [ebx],eax
c001a733:	c1 e0 03             	shl    eax,0x3
c001a736:	89 04 24             	mov    DWORD PTR [esp],eax
c001a739:	e8 f0 51 ff ff       	call   c000f92e <malloc>
c001a73e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a741:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a743:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a746:	c1 e1 03             	shl    ecx,0x3
c001a749:	89 c7                	mov    edi,eax
c001a74b:	fc                   	cld    
c001a74c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a74e:	83 c4 10             	add    esp,0x10
c001a751:	89 d8                	mov    eax,ebx
c001a753:	5b                   	pop    ebx
c001a754:	5e                   	pop    esi
c001a755:	5f                   	pop    edi
c001a756:	c3                   	ret    

c001a757 <Krnl::loadSystemEnv()>:
c001a757:	53                   	push   ebx
c001a758:	83 ec 14             	sub    esp,0x14
c001a75b:	6a 0c                	push   0xc
c001a75d:	e8 cc 51 ff ff       	call   c000f92e <malloc>
c001a762:	89 c3                	mov    ebx,eax
c001a764:	58                   	pop    eax
c001a765:	5a                   	pop    edx
c001a766:	ff 35 50 24 03 c0    	push   DWORD PTR ds:0xc0032450
c001a76c:	53                   	push   ebx
c001a76d:	e8 70 fe ff ff       	call   c001a5e2 <EnvVarContainer::EnvVarContainer(Process*)>
c001a772:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a775:	89 1d 38 1a 03 c0    	mov    DWORD PTR ds:0xc0031a38,ebx
c001a77b:	e8 46 fe ff ff       	call   c001a5c6 <EnvVarContainer::__loadSystem()>
c001a780:	83 c4 18             	add    esp,0x18
c001a783:	5b                   	pop    ebx
c001a784:	c3                   	ret    

c001a785 <Krnl::loadUserEnv()>:
c001a785:	53                   	push   ebx
c001a786:	83 ec 14             	sub    esp,0x14
c001a789:	6a 0c                	push   0xc
c001a78b:	e8 9e 51 ff ff       	call   c000f92e <malloc>
c001a790:	89 c3                	mov    ebx,eax
c001a792:	58                   	pop    eax
c001a793:	5a                   	pop    edx
c001a794:	ff 35 50 24 03 c0    	push   DWORD PTR ds:0xc0032450
c001a79a:	53                   	push   ebx
c001a79b:	e8 42 fe ff ff       	call   c001a5e2 <EnvVarContainer::EnvVarContainer(Process*)>
c001a7a0:	89 1d 34 1a 03 c0    	mov    DWORD PTR ds:0xc0031a34,ebx
c001a7a6:	83 c4 18             	add    esp,0x18
c001a7a9:	5b                   	pop    ebx
c001a7aa:	c3                   	ret    

c001a7ab <Krnl::flushEnv()>:
c001a7ab:	c3                   	ret    

c001a7ac <Krnl::getProcessTotalEnvCount(Process*)>:
c001a7ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7b0:	8b 15 34 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a34
c001a7b6:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a7bc:	a1 38 1a 03 c0       	mov    eax,ds:0xc0031a38
c001a7c1:	8b 00                	mov    eax,DWORD PTR [eax]
c001a7c3:	03 01                	add    eax,DWORD PTR [ecx]
c001a7c5:	85 d2                	test   edx,edx
c001a7c7:	74 02                	je     c001a7cb <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a7c9:	03 02                	add    eax,DWORD PTR [edx]
c001a7cb:	c3                   	ret    

c001a7cc <Krnl::getProcessEnvPair(Process*, int)>:
c001a7cc:	57                   	push   edi
c001a7cd:	8b 0d 34 1a 03 c0    	mov    ecx,DWORD PTR ds:0xc0031a34
c001a7d3:	56                   	push   esi
c001a7d4:	85 c9                	test   ecx,ecx
c001a7d6:	53                   	push   ebx
c001a7d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a7db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a7df:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a7e5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a7e9:	8b 02                	mov    eax,DWORD PTR [edx]
c001a7eb:	75 47                	jne    c001a834 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a7ed:	39 c3                	cmp    ebx,eax
c001a7ef:	7c 47                	jl     c001a838 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a7f1:	8b 15 38 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a38
c001a7f7:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a7f9:	01 c1                	add    ecx,eax
c001a7fb:	39 d9                	cmp    ecx,ebx
c001a7fd:	7e 6c                	jle    c001a86b <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a7ff:	51                   	push   ecx
c001a800:	89 d9                	mov    ecx,ebx
c001a802:	29 c1                	sub    ecx,eax
c001a804:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a807:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a80b:	53                   	push   ebx
c001a80c:	68 d0 c4 02 c0       	push   0xc002c4d0
c001a811:	e8 b7 86 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001a816:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a81c:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a81e:	a1 38 1a 03 c0       	mov    eax,ds:0xc0031a38
c001a823:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a826:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a82a:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a82d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a830:	89 06                	mov    DWORD PTR [esi],eax
c001a832:	eb 51                	jmp    c001a885 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a834:	39 c3                	cmp    ebx,eax
c001a836:	7d 05                	jge    c001a83d <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a838:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a83b:	eb 20                	jmp    c001a85d <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a83d:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a83f:	8d 14 07             	lea    edx,[edi+eax*1]
c001a842:	39 da                	cmp    edx,ebx
c001a844:	7e 04                	jle    c001a84a <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a846:	29 c3                	sub    ebx,eax
c001a848:	eb 10                	jmp    c001a85a <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a84a:	8b 0d 38 1a 03 c0    	mov    ecx,DWORD PTR ds:0xc0031a38
c001a850:	03 11                	add    edx,DWORD PTR [ecx]
c001a852:	39 da                	cmp    edx,ebx
c001a854:	7e 15                	jle    c001a86b <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a856:	29 c3                	sub    ebx,eax
c001a858:	29 fb                	sub    ebx,edi
c001a85a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a85d:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a861:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a864:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a867:	89 06                	mov    DWORD PTR [esi],eax
c001a869:	eb 1d                	jmp    c001a888 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a86b:	83 ec 0c             	sub    esp,0xc
c001a86e:	68 e4 c4 02 c0       	push   0xc002c4e4
c001a873:	e8 18 00 00 00       	call   c001a890 <Krnl::panic(char const*)>
c001a878:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a87e:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a885:	83 c4 10             	add    esp,0x10
c001a888:	89 f0                	mov    eax,esi
c001a88a:	5b                   	pop    ebx
c001a88b:	5e                   	pop    esi
c001a88c:	5f                   	pop    edi
c001a88d:	c2 04 00             	ret    0x4

c001a890 <Krnl::panic(char const*)>:
c001a890:	55                   	push   ebp
c001a891:	89 e5                	mov    ebp,esp
c001a893:	53                   	push   ebx
c001a894:	83 ec 0c             	sub    esp,0xc
c001a897:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a89a:	fa                   	cli    
c001a89b:	c6 05 44 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031a44,0x1
c001a8a2:	53                   	push   ebx
c001a8a3:	c6 05 24 de 02 c0 00 	mov    BYTE PTR ds:0xc002de24,0x0
c001a8aa:	68 fe c4 02 c0       	push   0xc002c4fe
c001a8af:	e8 19 86 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001a8b4:	58                   	pop    eax
c001a8b5:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001a8ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8c0:	e8 2b 64 ff ff       	call   c0010cf0 <setActiveTerminal(VgaText*)>
c001a8c5:	83 c4 0c             	add    esp,0xc
c001a8c8:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001a8cd:	6a 01                	push   0x1
c001a8cf:	6a 0f                	push   0xf
c001a8d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8d7:	e8 b2 5e ff ff       	call   c001078e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a8dc:	58                   	pop    eax
c001a8dd:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001a8e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8e8:	e8 49 66 ff ff       	call   c0010f36 <VgaText::clearScreen()>
c001a8ed:	58                   	pop    eax
c001a8ee:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001a8f3:	5a                   	pop    edx
c001a8f4:	68 17 c5 02 c0       	push   0xc002c517
c001a8f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8ff:	e8 78 67 ff ff       	call   c001107c <VgaText::puts(char const*)>
c001a904:	59                   	pop    ecx
c001a905:	58                   	pop    eax
c001a906:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001a90b:	68 bc c5 02 c0       	push   0xc002c5bc
c001a910:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a916:	e8 61 67 ff ff       	call   c001107c <VgaText::puts(char const*)>
c001a91b:	58                   	pop    eax
c001a91c:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001a921:	5a                   	pop    edx
c001a922:	68 33 c5 02 c0       	push   0xc002c533
c001a927:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a92d:	e8 4a 67 ff ff       	call   c001107c <VgaText::puts(char const*)>
c001a932:	59                   	pop    ecx
c001a933:	58                   	pop    eax
c001a934:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001a939:	53                   	push   ebx
c001a93a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a940:	e8 37 67 ff ff       	call   c001107c <VgaText::puts(char const*)>
c001a945:	58                   	pop    eax
c001a946:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001a94b:	5a                   	pop    edx
c001a94c:	68 53 c5 02 c0       	push   0xc002c553
c001a951:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a957:	e8 20 67 ff ff       	call   c001107c <VgaText::puts(char const*)>
c001a95c:	a1 40 1a 03 c0       	mov    eax,ds:0xc0031a40
c001a961:	83 c4 10             	add    esp,0x10
c001a964:	85 c0                	test   eax,eax
c001a966:	74 02                	je     c001a96a <Krnl::panic(char const*)+0xda>
c001a968:	ff d0                	call   eax
c001a96a:	83 ec 0c             	sub    esp,0xc
c001a96d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a970:	e8 82 31 00 00       	call   c001daf7 <Thr::getDriverNameFromAddress(unsigned long)>
c001a975:	83 c4 10             	add    esp,0x10
c001a978:	89 c3                	mov    ebx,eax
c001a97a:	85 c0                	test   eax,eax
c001a97c:	0f 84 50 02 00 00    	je     c001abd2 <Krnl::panic(char const*)+0x342>
c001a982:	83 ec 08             	sub    esp,0x8
c001a985:	8b 15 50 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032450
c001a98b:	68 f8 c5 02 c0       	push   0xc002c5f8
c001a990:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a996:	e8 e1 66 ff ff       	call   c001107c <VgaText::puts(char const*)>
c001a99b:	58                   	pop    eax
c001a99c:	5a                   	pop    edx
c001a99d:	8b 15 50 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032450
c001a9a3:	68 33 c5 02 c0       	push   0xc002c533
c001a9a8:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a9ae:	e8 c9 66 ff ff       	call   c001107c <VgaText::puts(char const*)>
c001a9b3:	59                   	pop    ecx
c001a9b4:	58                   	pop    eax
c001a9b5:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001a9ba:	53                   	push   ebx
c001a9bb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9c1:	e8 b6 66 ff ff       	call   c001107c <VgaText::puts(char const*)>
c001a9c6:	83 c4 10             	add    esp,0x10
c001a9c9:	83 ec 08             	sub    esp,0x8
c001a9cc:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001a9d1:	68 52 c5 02 c0       	push   0xc002c552
c001a9d6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9dc:	e8 9b 66 ff ff       	call   c001107c <VgaText::puts(char const*)>
c001a9e1:	58                   	pop    eax
c001a9e2:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001a9e7:	5a                   	pop    edx
c001a9e8:	68 50 c6 02 c0       	push   0xc002c650
c001a9ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9f3:	e8 84 66 ff ff       	call   c001107c <VgaText::puts(char const*)>
c001a9f8:	59                   	pop    ecx
c001a9f9:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001a9fe:	5b                   	pop    ebx
c001a9ff:	68 90 c6 02 c0       	push   0xc002c690
c001aa04:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa0a:	e8 6d 66 ff ff       	call   c001107c <VgaText::puts(char const*)>
c001aa0f:	58                   	pop    eax
c001aa10:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001aa15:	5a                   	pop    edx
c001aa16:	68 3e c5 02 c0       	push   0xc002c53e
c001aa1b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa21:	e8 56 66 ff ff       	call   c001107c <VgaText::puts(char const*)>
c001aa26:	59                   	pop    ecx
c001aa27:	5b                   	pop    ebx
c001aa28:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001aa2b:	68 56 c5 02 c0       	push   0xc002c556
c001aa30:	e8 98 84 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001aa35:	58                   	pop    eax
c001aa36:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001aa39:	5a                   	pop    edx
c001aa3a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001aa3d:	68 5f c5 02 c0       	push   0xc002c55f
c001aa42:	e8 86 84 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001aa47:	59                   	pop    ecx
c001aa48:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001aa4b:	5b                   	pop    ebx
c001aa4c:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa4e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001aa51:	68 68 c5 02 c0       	push   0xc002c568
c001aa56:	e8 72 84 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001aa5b:	58                   	pop    eax
c001aa5c:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001aa61:	5a                   	pop    edx
c001aa62:	68 d4 c6 02 c0       	push   0xc002c6d4
c001aa67:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa6d:	e8 0a 66 ff ff       	call   c001107c <VgaText::puts(char const*)>
c001aa72:	59                   	pop    ecx
c001aa73:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001aa78:	5b                   	pop    ebx
c001aa79:	68 71 c5 02 c0       	push   0xc002c571
c001aa7e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa84:	e8 f3 65 ff ff       	call   c001107c <VgaText::puts(char const*)>
c001aa89:	0f 20 c0             	mov    eax,cr0
c001aa8c:	5a                   	pop    edx
c001aa8d:	59                   	pop    ecx
c001aa8e:	50                   	push   eax
c001aa8f:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001aa94:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa9a:	e8 03 66 ff ff       	call   c00110a2 <VgaText::putx(unsigned int)>
c001aa9f:	5b                   	pop    ebx
c001aaa0:	58                   	pop    eax
c001aaa1:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001aaa6:	68 7b c5 02 c0       	push   0xc002c57b
c001aaab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aab1:	e8 c6 65 ff ff       	call   c001107c <VgaText::puts(char const*)>
c001aab6:	0f 20 d0             	mov    eax,cr2
c001aab9:	5a                   	pop    edx
c001aaba:	59                   	pop    ecx
c001aabb:	50                   	push   eax
c001aabc:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001aac1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aac7:	e8 d6 65 ff ff       	call   c00110a2 <VgaText::putx(unsigned int)>
c001aacc:	5b                   	pop    ebx
c001aacd:	58                   	pop    eax
c001aace:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001aad3:	68 85 c5 02 c0       	push   0xc002c585
c001aad8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aade:	e8 99 65 ff ff       	call   c001107c <VgaText::puts(char const*)>
c001aae3:	0f 20 d8             	mov    eax,cr3
c001aae6:	5a                   	pop    edx
c001aae7:	59                   	pop    ecx
c001aae8:	50                   	push   eax
c001aae9:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001aaee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aaf4:	e8 a9 65 ff ff       	call   c00110a2 <VgaText::putx(unsigned int)>
c001aaf9:	5b                   	pop    ebx
c001aafa:	58                   	pop    eax
c001aafb:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001ab00:	68 98 c5 02 c0       	push   0xc002c598
c001ab05:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab0b:	e8 6c 65 ff ff       	call   c001107c <VgaText::puts(char const*)>
c001ab10:	0f 20 e0             	mov    eax,cr4
c001ab13:	5a                   	pop    edx
c001ab14:	59                   	pop    ecx
c001ab15:	50                   	push   eax
c001ab16:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001ab1b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab21:	e8 7c 65 ff ff       	call   c00110a2 <VgaText::putx(unsigned int)>
c001ab26:	5b                   	pop    ebx
c001ab27:	58                   	pop    eax
c001ab28:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001ab2d:	68 a2 c5 02 c0       	push   0xc002c5a2
c001ab32:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab38:	e8 3f 65 ff ff       	call   c001107c <VgaText::puts(char const*)>
c001ab3d:	5a                   	pop    edx
c001ab3e:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001ab43:	59                   	pop    ecx
c001ab44:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ab4a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001ab4d:	50                   	push   eax
c001ab4e:	e8 4f 65 ff ff       	call   c00110a2 <VgaText::putx(unsigned int)>
c001ab53:	5b                   	pop    ebx
c001ab54:	58                   	pop    eax
c001ab55:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001ab5a:	68 b9 c5 02 c0       	push   0xc002c5b9
c001ab5f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab65:	e8 12 65 ff ff       	call   c001107c <VgaText::puts(char const*)>
c001ab6a:	5a                   	pop    edx
c001ab6b:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001ab70:	59                   	pop    ecx
c001ab71:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ab77:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ab7a:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001ab7d:	50                   	push   eax
c001ab7e:	e8 1f 65 ff ff       	call   c00110a2 <VgaText::putx(unsigned int)>
c001ab83:	5b                   	pop    ebx
c001ab84:	58                   	pop    eax
c001ab85:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001ab8a:	68 b9 c5 02 c0       	push   0xc002c5b9
c001ab8f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab95:	e8 e2 64 ff ff       	call   c001107c <VgaText::puts(char const*)>
c001ab9a:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001ab9f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001aba2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001aba8:	8b 12                	mov    edx,DWORD PTR [edx]
c001abaa:	59                   	pop    ecx
c001abab:	5b                   	pop    ebx
c001abac:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001abaf:	50                   	push   eax
c001abb0:	e8 ed 64 ff ff       	call   c00110a2 <VgaText::putx(unsigned int)>
c001abb5:	83 c4 10             	add    esp,0x10
c001abb8:	b2 fe                	mov    dl,0xfe
c001abba:	e4 60                	in     al,0x60
c001abbc:	3c 1c                	cmp    al,0x1c
c001abbe:	74 04                	je     c001abc4 <Krnl::panic(char const*)+0x334>
c001abc0:	3c 5a                	cmp    al,0x5a
c001abc2:	75 f6                	jne    c001abba <Krnl::panic(char const*)+0x32a>
c001abc4:	e4 64                	in     al,0x64
c001abc6:	a8 02                	test   al,0x2
c001abc8:	75 fa                	jne    c001abc4 <Krnl::panic(char const*)+0x334>
c001abca:	88 d0                	mov    al,dl
c001abcc:	e6 64                	out    0x64,al
c001abce:	fa                   	cli    
c001abcf:	f4                   	hlt    
c001abd0:	eb e8                	jmp    c001abba <Krnl::panic(char const*)+0x32a>
c001abd2:	50                   	push   eax
c001abd3:	50                   	push   eax
c001abd4:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001abd9:	68 24 c6 02 c0       	push   0xc002c624
c001abde:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abe4:	e8 93 64 ff ff       	call   c001107c <VgaText::puts(char const*)>
c001abe9:	58                   	pop    eax
c001abea:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001abef:	5a                   	pop    edx
c001abf0:	68 33 c5 02 c0       	push   0xc002c533
c001abf5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abfb:	e8 7c 64 ff ff       	call   c001107c <VgaText::puts(char const*)>
c001ac00:	59                   	pop    ecx
c001ac01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac06:	5b                   	pop    ebx
c001ac07:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ac0a:	83 c0 0c             	add    eax,0xc
c001ac0d:	50                   	push   eax
c001ac0e:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001ac13:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac19:	e8 5e 64 ff ff       	call   c001107c <VgaText::puts(char const*)>
c001ac1e:	83 c4 10             	add    esp,0x10
c001ac21:	e9 a3 fd ff ff       	jmp    c001a9c9 <Krnl::panic(char const*)+0x139>

c001ac26 <Net::switchEndian16(unsigned short)>:
c001ac26:	83 ec 04             	sub    esp,0x4
c001ac29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac2d:	66 89 04 24          	mov    WORD PTR [esp],ax
c001ac31:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001ac35:	c1 f8 08             	sar    eax,0x8
c001ac38:	89 c2                	mov    edx,eax
c001ac3a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001ac3e:	c1 e0 08             	shl    eax,0x8
c001ac41:	09 d0                	or     eax,edx
c001ac43:	83 c4 04             	add    esp,0x4
c001ac46:	c3                   	ret    

c001ac47 <Net::switchEndian32(unsigned int)>:
c001ac47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac4b:	c1 e8 18             	shr    eax,0x18
c001ac4e:	89 c2                	mov    edx,eax
c001ac50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac54:	c1 e0 08             	shl    eax,0x8
c001ac57:	25 00 00 ff 00       	and    eax,0xff0000
c001ac5c:	09 c2                	or     edx,eax
c001ac5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac62:	c1 e8 08             	shr    eax,0x8
c001ac65:	25 00 ff 00 00       	and    eax,0xff00
c001ac6a:	09 c2                	or     edx,eax
c001ac6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac70:	c1 e0 18             	shl    eax,0x18
c001ac73:	09 d0                	or     eax,edx
c001ac75:	c3                   	ret    

c001ac76 <Net::crc32Calc(unsigned char*, int)>:
c001ac76:	83 ec 10             	sub    esp,0x10
c001ac79:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ac7e:	75 07                	jne    c001ac87 <Net::crc32Calc(unsigned char*, int)+0x11>
c001ac80:	b8 00 00 00 00       	mov    eax,0x0
c001ac85:	eb 7c                	jmp    c001ad03 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001ac87:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001ac8c:	7f 07                	jg     c001ac95 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001ac8e:	b8 00 00 00 00       	mov    eax,0x0
c001ac93:	eb 6e                	jmp    c001ad03 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001ac95:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001ac9d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aca9:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001acad:	7d 4e                	jge    c001acfd <Net::crc32Calc(unsigned char*, int)+0x87>
c001acaf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001acb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acb7:	01 d0                	add    eax,edx
c001acb9:	8a 00                	mov    al,BYTE PTR [eax]
c001acbb:	0f b6 c0             	movzx  eax,al
c001acbe:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001acc2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001acca:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001accf:	7f 26                	jg     c001acf7 <Net::crc32Calc(unsigned char*, int)+0x81>
c001acd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acd5:	83 e0 01             	and    eax,0x1
c001acd8:	74 0d                	je     c001ace7 <Net::crc32Calc(unsigned char*, int)+0x71>
c001acda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acde:	d1 e8                	shr    eax,1
c001ace0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001ace5:	eb 06                	jmp    c001aced <Net::crc32Calc(unsigned char*, int)+0x77>
c001ace7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aceb:	d1 e8                	shr    eax,1
c001aced:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001acf1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001acf5:	eb d3                	jmp    c001acca <Net::crc32Calc(unsigned char*, int)+0x54>
c001acf7:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001acfb:	eb a8                	jmp    c001aca5 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001acfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad01:	f7 d0                	not    eax
c001ad03:	83 c4 10             	add    esp,0x10
c001ad06:	c3                   	ret    

c001ad07 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001ad07:	57                   	push   edi
c001ad08:	56                   	push   esi
c001ad09:	83 ec 40             	sub    esp,0x40
c001ad0c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001ad10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ad14:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001ad1c:	83 7c 24 3c 06       	cmp    DWORD PTR [esp+0x3c],0x6
c001ad21:	7f 14                	jg     c001ad37 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x30>
c001ad23:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001ad27:	8d 50 01             	lea    edx,[eax+0x1]
c001ad2a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c001ad2e:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001ad31:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c001ad35:	eb e5                	jmp    c001ad1c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x15>
c001ad37:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001ad3b:	8d 50 01             	lea    edx,[eax+0x1]
c001ad3e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c001ad42:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001ad45:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001ad49:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ad4d:	8d 44 24 5a          	lea    eax,[esp+0x5a]
c001ad51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad55:	c7 44 24 08 06 00 00 00 	mov    DWORD PTR [esp+0x8],0x6
c001ad5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad61:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad69:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad6d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ad71:	89 c6                	mov    esi,eax
c001ad73:	89 d7                	mov    edi,edx
c001ad75:	fc                   	cld    
c001ad76:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad78:	83 44 24 64 06       	add    DWORD PTR [esp+0x64],0x6
c001ad7d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001ad81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ad85:	8d 44 24 54          	lea    eax,[esp+0x54]
c001ad89:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ad8d:	c7 44 24 18 06 00 00 00 	mov    DWORD PTR [esp+0x18],0x6
c001ad95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad99:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ad9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ada5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001ada9:	89 c6                	mov    esi,eax
c001adab:	89 d7                	mov    edi,edx
c001adad:	fc                   	cld    
c001adae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001adb0:	83 44 24 64 06       	add    DWORD PTR [esp+0x64],0x6
c001adb5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001adb9:	0f b7 c0             	movzx  eax,ax
c001adbc:	c1 f8 08             	sar    eax,0x8
c001adbf:	89 c1                	mov    ecx,eax
c001adc1:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001adc5:	8d 50 01             	lea    edx,[eax+0x1]
c001adc8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c001adcc:	88 ca                	mov    dl,cl
c001adce:	88 10                	mov    BYTE PTR [eax],dl
c001add0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c001add4:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001add8:	8d 48 01             	lea    ecx,[eax+0x1]
c001addb:	89 4c 24 64          	mov    DWORD PTR [esp+0x64],ecx
c001addf:	88 10                	mov    BYTE PTR [eax],dl
c001ade1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ade5:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001ade9:	8b 4c 24 64          	mov    ecx,DWORD PTR [esp+0x64]
c001aded:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c001adf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001adf5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001adf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001adfd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ae01:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae05:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ae09:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ae0d:	89 c6                	mov    esi,eax
c001ae0f:	89 d7                	mov    edi,edx
c001ae11:	fc                   	cld    
c001ae12:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae14:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ae18:	01 44 24 64          	add    DWORD PTR [esp+0x64],eax
c001ae1c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001ae20:	2b 44 24 38          	sub    eax,DWORD PTR [esp+0x38]
c001ae24:	50                   	push   eax
c001ae25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae29:	e8 48 fe ff ff       	call   c001ac76 <Net::crc32Calc(unsigned char*, int)>
c001ae2e:	83 c4 08             	add    esp,0x8
c001ae31:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001ae35:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ae39:	c1 e8 18             	shr    eax,0x18
c001ae3c:	89 c1                	mov    ecx,eax
c001ae3e:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001ae42:	8d 50 01             	lea    edx,[eax+0x1]
c001ae45:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c001ae49:	88 ca                	mov    dl,cl
c001ae4b:	88 10                	mov    BYTE PTR [eax],dl
c001ae4d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ae51:	c1 e8 10             	shr    eax,0x10
c001ae54:	89 c1                	mov    ecx,eax
c001ae56:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001ae5a:	8d 50 01             	lea    edx,[eax+0x1]
c001ae5d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c001ae61:	88 ca                	mov    dl,cl
c001ae63:	88 10                	mov    BYTE PTR [eax],dl
c001ae65:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ae69:	c1 e8 08             	shr    eax,0x8
c001ae6c:	89 c1                	mov    ecx,eax
c001ae6e:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001ae72:	8d 50 01             	lea    edx,[eax+0x1]
c001ae75:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c001ae79:	88 ca                	mov    dl,cl
c001ae7b:	88 10                	mov    BYTE PTR [eax],dl
c001ae7d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001ae81:	8d 50 01             	lea    edx,[eax+0x1]
c001ae84:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c001ae88:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ae8c:	88 10                	mov    BYTE PTR [eax],dl
c001ae8e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ae92:	83 c4 40             	add    esp,0x40
c001ae95:	5e                   	pop    esi
c001ae96:	5f                   	pop    edi
c001ae97:	c3                   	ret    

c001ae98 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ae98:	57                   	push   edi
c001ae99:	56                   	push   esi
c001ae9a:	83 ec 54             	sub    esp,0x54
c001ae9d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001aea1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001aea5:	83 44 24 64 08       	add    DWORD PTR [esp+0x64],0x8
c001aeaa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001aeae:	83 c0 0e             	add    eax,0xe
c001aeb1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aeb5:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001aeb9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aebd:	c7 44 24 18 06 00 00 00 	mov    DWORD PTR [esp+0x18],0x6
c001aec5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aec9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aecd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aed1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001aed5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001aed9:	89 c6                	mov    esi,eax
c001aedb:	89 d7                	mov    edi,edx
c001aedd:	fc                   	cld    
c001aede:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aee0:	83 44 24 64 06       	add    DWORD PTR [esp+0x64],0x6
c001aee5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001aee9:	83 c0 08             	add    eax,0x8
c001aeec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001aef0:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001aef4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001aef8:	c7 44 24 28 06 00 00 00 	mov    DWORD PTR [esp+0x28],0x6
c001af00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001af04:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001af08:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001af0c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001af10:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001af14:	89 c6                	mov    esi,eax
c001af16:	89 d7                	mov    edi,edx
c001af18:	fc                   	cld    
c001af19:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001af1b:	83 44 24 64 06       	add    DWORD PTR [esp+0x64],0x6
c001af20:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001af24:	8d 50 01             	lea    edx,[eax+0x1]
c001af27:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c001af2b:	8a 00                	mov    al,BYTE PTR [eax]
c001af2d:	0f b6 c0             	movzx  eax,al
c001af30:	66 89 44 24 4a       	mov    WORD PTR [esp+0x4a],ax
c001af35:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001af39:	8d 50 01             	lea    edx,[eax+0x1]
c001af3c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c001af40:	8a 00                	mov    al,BYTE PTR [eax]
c001af42:	0f b6 c0             	movzx  eax,al
c001af45:	66 89 44 24 48       	mov    WORD PTR [esp+0x48],ax
c001af4a:	0f b7 44 24 4a       	movzx  eax,WORD PTR [esp+0x4a]
c001af4f:	c1 e0 08             	shl    eax,0x8
c001af52:	89 c2                	mov    edx,eax
c001af54:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001af58:	09 d0                	or     eax,edx
c001af5a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c001af5e:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001af62:	83 7c 24 68 ff       	cmp    DWORD PTR [esp+0x68],0xffffffff
c001af67:	75 3a                	jne    c001afa3 <Net::unwrapEthernetFrame(unsigned char*, int)+0x10b>
c001af69:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001af6d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001af70:	66 3d dc 05          	cmp    ax,0x5dc
c001af74:	77 10                	ja     c001af86 <Net::unwrapEthernetFrame(unsigned char*, int)+0xee>
c001af76:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001af7a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001af7d:	0f b7 c0             	movzx  eax,ax
c001af80:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c001af84:	eb 1d                	jmp    c001afa3 <Net::unwrapEthernetFrame(unsigned char*, int)+0x10b>
c001af86:	83 ec 0c             	sub    esp,0xc
c001af89:	68 fc c6 02 c0       	push   0xc002c6fc
c001af8e:	e8 3a 7f ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001af93:	83 c4 10             	add    esp,0x10
c001af96:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001af9a:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001af9e:	e9 da 00 00 00       	jmp    c001b07d <Net::unwrapEthernetFrame(unsigned char*, int)+0x1e5>
c001afa3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001afa7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c001afab:	8b 12                	mov    edx,DWORD PTR [edx]
c001afad:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001afb1:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c001afb5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001afb9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001afbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afc1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001afc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001afc9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001afcd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001afd1:	89 c6                	mov    esi,eax
c001afd3:	89 d7                	mov    edi,edx
c001afd5:	fc                   	cld    
c001afd6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001afd8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001afdc:	01 44 24 64          	add    DWORD PTR [esp+0x64],eax
c001afe0:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001afe4:	8d 50 01             	lea    edx,[eax+0x1]
c001afe7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c001afeb:	8a 00                	mov    al,BYTE PTR [eax]
c001afed:	0f b6 c0             	movzx  eax,al
c001aff0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001aff4:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001aff8:	8d 50 01             	lea    edx,[eax+0x1]
c001affb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c001afff:	8a 00                	mov    al,BYTE PTR [eax]
c001b001:	0f b6 c0             	movzx  eax,al
c001b004:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001b008:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001b00c:	8d 50 01             	lea    edx,[eax+0x1]
c001b00f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c001b013:	8a 00                	mov    al,BYTE PTR [eax]
c001b015:	0f b6 c0             	movzx  eax,al
c001b018:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001b01c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001b020:	8d 50 01             	lea    edx,[eax+0x1]
c001b023:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c001b027:	8a 00                	mov    al,BYTE PTR [eax]
c001b029:	0f b6 c0             	movzx  eax,al
c001b02c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001b030:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b034:	c1 e0 18             	shl    eax,0x18
c001b037:	89 c2                	mov    edx,eax
c001b039:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b03d:	c1 e0 10             	shl    eax,0x10
c001b040:	09 c2                	or     edx,eax
c001b042:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b046:	c1 e0 08             	shl    eax,0x8
c001b049:	09 d0                	or     eax,edx
c001b04b:	0b 44 24 38          	or     eax,DWORD PTR [esp+0x38]
c001b04f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001b053:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001b057:	2b 44 24 4c          	sub    eax,DWORD PTR [esp+0x4c]
c001b05b:	83 e8 04             	sub    eax,0x4
c001b05e:	83 ec 08             	sub    esp,0x8
c001b061:	50                   	push   eax
c001b062:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b066:	e8 0b fc ff ff       	call   c001ac76 <Net::crc32Calc(unsigned char*, int)>
c001b06b:	83 c4 10             	add    esp,0x10
c001b06e:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c001b072:	0f 94 c2             	sete   dl
c001b075:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001b079:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001b07c:	90                   	nop
c001b07d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001b081:	83 c4 54             	add    esp,0x54
c001b084:	5e                   	pop    esi
c001b085:	5f                   	pop    edi
c001b086:	c2 04 00             	ret    0x4

c001b089 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001b089:	55                   	push   ebp
c001b08a:	57                   	push   edi
c001b08b:	56                   	push   esi
c001b08c:	53                   	push   ebx
c001b08d:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b093:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001b09a:	8a 1e                	mov    bl,BYTE PTR [esi]
c001b09c:	8d 6e 01             	lea    ebp,[esi+0x1]
c001b09f:	80 fb 40             	cmp    bl,0x40
c001b0a2:	75 1b                	jne    c001b0bf <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001b0a4:	8a 16                	mov    dl,BYTE PTR [esi]
c001b0a6:	84 d2                	test   dl,dl
c001b0a8:	0f 84 f1 00 00 00    	je     c001b19f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b0ae:	8d 46 01             	lea    eax,[esi+0x1]
c001b0b1:	80 fa 3a             	cmp    dl,0x3a
c001b0b4:	74 04                	je     c001b0ba <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001b0b6:	89 c6                	mov    esi,eax
c001b0b8:	eb ea                	jmp    c001b0a4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001b0ba:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b0bd:	89 c6                	mov    esi,eax
c001b0bf:	50                   	push   eax
c001b0c0:	6a 40                	push   0x40
c001b0c2:	6a 00                	push   0x0
c001b0c4:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b0c8:	50                   	push   eax
c001b0c9:	e8 9e 56 fe ff       	call   c000076c <memset>
c001b0ce:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001b0d5:	31 c0                	xor    eax,eax
c001b0d7:	83 c4 10             	add    esp,0x10
c001b0da:	8a 0f                	mov    cl,BYTE PTR [edi]
c001b0dc:	84 c9                	test   cl,cl
c001b0de:	0f 84 bb 00 00 00    	je     c001b19f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b0e4:	3d c7 00 00 00       	cmp    eax,0xc7
c001b0e9:	0f 8f b0 00 00 00    	jg     c001b19f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b0ef:	80 f9 0a             	cmp    cl,0xa
c001b0f2:	0f 85 98 00 00 00    	jne    c001b190 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001b0f8:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001b0fd:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001b101:	a8 df                	test   al,0xdf
c001b103:	0f 94 c1             	sete   cl
c001b106:	3c 23                	cmp    al,0x23
c001b108:	0f 94 c2             	sete   dl
c001b10b:	08 d1                	or     cl,dl
c001b10d:	75 4a                	jne    c001b159 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b10f:	8d 50 f7             	lea    edx,[eax-0x9]
c001b112:	80 fa 01             	cmp    dl,0x1
c001b115:	76 42                	jbe    c001b159 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b117:	3c 5b                	cmp    al,0x5b
c001b119:	75 42                	jne    c001b15d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001b11b:	80 fb 40             	cmp    bl,0x40
c001b11e:	75 39                	jne    c001b159 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b120:	83 ec 0c             	sub    esp,0xc
c001b123:	8d 54 24 65          	lea    edx,[esp+0x65]
c001b127:	52                   	push   edx
c001b128:	e8 5b 56 fe ff       	call   c0000788 <strlen>
c001b12d:	83 c4 10             	add    esp,0x10
c001b130:	83 f8 3f             	cmp    eax,0x3f
c001b133:	77 6a                	ja     c001b19f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b135:	50                   	push   eax
c001b136:	50                   	push   eax
c001b137:	8d 54 24 61          	lea    edx,[esp+0x61]
c001b13b:	52                   	push   edx
c001b13c:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b140:	52                   	push   edx
c001b141:	e8 e2 56 fe ff       	call   c0000828 <strcpy>
c001b146:	58                   	pop    eax
c001b147:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b14b:	52                   	push   edx
c001b14c:	e8 37 56 fe ff       	call   c0000788 <strlen>
c001b151:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001b156:	83 c4 10             	add    esp,0x10
c001b159:	31 d2                	xor    edx,edx
c001b15b:	eb 3a                	jmp    c001b197 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001b15d:	80 fb 40             	cmp    bl,0x40
c001b160:	74 06                	je     c001b168 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001b162:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b166:	eb 20                	jmp    c001b188 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001b168:	50                   	push   eax
c001b169:	50                   	push   eax
c001b16a:	55                   	push   ebp
c001b16b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b16f:	50                   	push   eax
c001b170:	e8 3f 57 fe ff       	call   c00008b4 <strcmp>
c001b175:	83 c4 10             	add    esp,0x10
c001b178:	85 c0                	test   eax,eax
c001b17a:	75 dd                	jne    c001b159 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b17c:	eb e4                	jmp    c001b162 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001b17e:	8d 50 01             	lea    edx,[eax+0x1]
c001b181:	80 f9 3d             	cmp    cl,0x3d
c001b184:	74 1d                	je     c001b1a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001b186:	89 d0                	mov    eax,edx
c001b188:	8a 08                	mov    cl,BYTE PTR [eax]
c001b18a:	84 c9                	test   cl,cl
c001b18c:	75 f0                	jne    c001b17e <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001b18e:	eb 0f                	jmp    c001b19f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b190:	8d 50 01             	lea    edx,[eax+0x1]
c001b193:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001b197:	47                   	inc    edi
c001b198:	89 d0                	mov    eax,edx
c001b19a:	e9 3b ff ff ff       	jmp    c001b0da <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001b19f:	31 c0                	xor    eax,eax
c001b1a1:	eb 33                	jmp    c001b1d6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001b1a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b1a7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001b1aa:	50                   	push   eax
c001b1ab:	50                   	push   eax
c001b1ac:	8d 44 24 60          	lea    eax,[esp+0x60]
c001b1b0:	50                   	push   eax
c001b1b1:	56                   	push   esi
c001b1b2:	e8 fd 56 fe ff       	call   c00008b4 <strcmp>
c001b1b7:	83 c4 10             	add    esp,0x10
c001b1ba:	85 c0                	test   eax,eax
c001b1bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b1c0:	75 97                	jne    c001b159 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b1c2:	51                   	push   ecx
c001b1c3:	51                   	push   ecx
c001b1c4:	52                   	push   edx
c001b1c5:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001b1cc:	e8 57 56 fe ff       	call   c0000828 <strcpy>
c001b1d1:	83 c4 10             	add    esp,0x10
c001b1d4:	b0 01                	mov    al,0x1
c001b1d6:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b1dc:	5b                   	pop    ebx
c001b1dd:	5e                   	pop    esi
c001b1de:	5f                   	pop    edi
c001b1df:	5d                   	pop    ebp
c001b1e0:	c3                   	ret    

c001b1e1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001b1e1:	57                   	push   edi
c001b1e2:	56                   	push   esi
c001b1e3:	53                   	push   ebx
c001b1e4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b1ea:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001b1f1:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b1f8:	53                   	push   ebx
c001b1f9:	e8 8a 55 fe ff       	call   c0000788 <strlen>
c001b1fe:	89 34 24             	mov    DWORD PTR [esp],esi
c001b201:	89 c7                	mov    edi,eax
c001b203:	e8 80 55 fe ff       	call   c0000788 <strlen>
c001b208:	83 c4 10             	add    esp,0x10
c001b20b:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001b20f:	3d ff 00 00 00       	cmp    eax,0xff
c001b214:	0f 87 d3 00 00 00    	ja     c001b2ed <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b21a:	57                   	push   edi
c001b21b:	57                   	push   edi
c001b21c:	56                   	push   esi
c001b21d:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001b221:	56                   	push   esi
c001b222:	e8 01 56 fe ff       	call   c0000828 <strcpy>
c001b227:	58                   	pop    eax
c001b228:	5a                   	pop    edx
c001b229:	68 51 cc 02 c0       	push   0xc002cc51
c001b22e:	56                   	push   esi
c001b22f:	e8 34 57 fe ff       	call   c0000968 <strcat>
c001b234:	59                   	pop    ecx
c001b235:	5f                   	pop    edi
c001b236:	53                   	push   ebx
c001b237:	56                   	push   esi
c001b238:	e8 2b 57 fe ff       	call   c0000968 <strcat>
c001b23d:	58                   	pop    eax
c001b23e:	5a                   	pop    edx
c001b23f:	68 48 c7 02 c0       	push   0xc002c748
c001b244:	56                   	push   esi
c001b245:	e8 1e 57 fe ff       	call   c0000968 <strcat>
c001b24a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b251:	e8 d8 46 ff ff       	call   c000f92e <malloc>
c001b256:	83 c4 0c             	add    esp,0xc
c001b259:	89 c3                	mov    ebx,eax
c001b25b:	ff 35 50 24 03 c0    	push   DWORD PTR ds:0xc0032450
c001b261:	56                   	push   esi
c001b262:	50                   	push   eax
c001b263:	e8 c4 81 ff ff       	call   c001342c <File::File(char const*, Process*)>
c001b268:	83 c4 10             	add    esp,0x10
c001b26b:	85 db                	test   ebx,ebx
c001b26d:	74 7e                	je     c001b2ed <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b26f:	51                   	push   ecx
c001b270:	51                   	push   ecx
c001b271:	6a 01                	push   0x1
c001b273:	53                   	push   ebx
c001b274:	e8 17 82 ff ff       	call   c0013490 <File::open(FileOpenMode)>
c001b279:	83 c4 10             	add    esp,0x10
c001b27c:	85 c0                	test   eax,eax
c001b27e:	74 08                	je     c001b288 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001b280:	83 ec 0c             	sub    esp,0xc
c001b283:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b285:	53                   	push   ebx
c001b286:	eb 5f                	jmp    c001b2e7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001b288:	52                   	push   edx
c001b289:	8d 44 24 17          	lea    eax,[esp+0x17]
c001b28d:	50                   	push   eax
c001b28e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b292:	50                   	push   eax
c001b293:	53                   	push   ebx
c001b294:	e8 a3 84 ff ff       	call   c001373c <File::stat(unsigned long long*, bool*)>
c001b299:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b29d:	83 c4 10             	add    esp,0x10
c001b2a0:	89 c1                	mov    ecx,eax
c001b2a2:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001b2a6:	74 31                	je     c001b2d9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b2a8:	83 ec 0c             	sub    esp,0xc
c001b2ab:	50                   	push   eax
c001b2ac:	e8 7d 46 ff ff       	call   c000f92e <malloc>
c001b2b1:	89 c6                	mov    esi,eax
c001b2b3:	58                   	pop    eax
c001b2b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2b6:	8d 54 24 20          	lea    edx,[esp+0x20]
c001b2ba:	52                   	push   edx
c001b2bb:	56                   	push   esi
c001b2bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b2c0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b2c4:	53                   	push   ebx
c001b2c5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b2c8:	83 c4 20             	add    esp,0x20
c001b2cb:	85 c0                	test   eax,eax
c001b2cd:	75 0a                	jne    c001b2d9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b2cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2d3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b2d7:	74 18                	je     c001b2f1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b2d9:	83 ec 0c             	sub    esp,0xc
c001b2dc:	53                   	push   ebx
c001b2dd:	e8 0c 82 ff ff       	call   c00134ee <File::close()>
c001b2e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b2e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2ea:	83 c4 10             	add    esp,0x10
c001b2ed:	31 c0                	xor    eax,eax
c001b2ef:	eb 3b                	jmp    c001b32c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b2f1:	83 ec 0c             	sub    esp,0xc
c001b2f4:	53                   	push   ebx
c001b2f5:	e8 f4 81 ff ff       	call   c00134ee <File::close()>
c001b2fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b2ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b302:	83 c4 0c             	add    esp,0xc
c001b305:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b30c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b313:	56                   	push   esi
c001b314:	e8 70 fd ff ff       	call   c001b089 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b319:	89 34 24             	mov    DWORD PTR [esp],esi
c001b31c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b320:	e8 19 46 ff ff       	call   c000f93e <free>
c001b325:	83 c4 10             	add    esp,0x10
c001b328:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b32c:	81 c4 20 01 00 00    	add    esp,0x120
c001b332:	5b                   	pop    ebx
c001b333:	5e                   	pop    esi
c001b334:	5f                   	pop    edi
c001b335:	c3                   	ret    

c001b336 <Reg::getLine(char*, char*, char*)>:
c001b336:	57                   	push   edi
c001b337:	56                   	push   esi
c001b338:	53                   	push   ebx
c001b339:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b33d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b341:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b345:	57                   	push   edi
c001b346:	56                   	push   esi
c001b347:	53                   	push   ebx
c001b348:	68 4d c7 02 c0       	push   0xc002c74d
c001b34d:	e8 8f fe ff ff       	call   c001b1e1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b352:	83 c4 10             	add    esp,0x10
c001b355:	84 c0                	test   al,al
c001b357:	75 10                	jne    c001b369 <Reg::getLine(char*, char*, char*)+0x33>
c001b359:	57                   	push   edi
c001b35a:	56                   	push   esi
c001b35b:	53                   	push   ebx
c001b35c:	68 72 c7 02 c0       	push   0xc002c772
c001b361:	e8 7b fe ff ff       	call   c001b1e1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b366:	83 c4 10             	add    esp,0x10
c001b369:	5b                   	pop    ebx
c001b36a:	5e                   	pop    esi
c001b36b:	5f                   	pop    edi
c001b36c:	c3                   	ret    

c001b36d <Reg::readInt(char*, char*, int*)>:
c001b36d:	55                   	push   ebp
c001b36e:	57                   	push   edi
c001b36f:	56                   	push   esi
c001b370:	53                   	push   ebx
c001b371:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b377:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b37b:	57                   	push   edi
c001b37c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b383:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b38a:	e8 a7 ff ff ff       	call   c001b336 <Reg::getLine(char*, char*, char*)>
c001b38f:	83 c4 10             	add    esp,0x10
c001b392:	84 c0                	test   al,al
c001b394:	0f 84 b3 00 00 00    	je     c001b44d <Reg::readInt(char*, char*, int*)+0xe0>
c001b39a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b39e:	80 fa 2b             	cmp    dl,0x2b
c001b3a1:	74 0c                	je     c001b3af <Reg::readInt(char*, char*, int*)+0x42>
c001b3a3:	80 fa 2d             	cmp    dl,0x2d
c001b3a6:	75 0e                	jne    c001b3b6 <Reg::readInt(char*, char*, int*)+0x49>
c001b3a8:	ba 01 00 00 00       	mov    edx,0x1
c001b3ad:	eb 0b                	jmp    c001b3ba <Reg::readInt(char*, char*, int*)+0x4d>
c001b3af:	ba 01 00 00 00       	mov    edx,0x1
c001b3b4:	eb 02                	jmp    c001b3b8 <Reg::readInt(char*, char*, int*)+0x4b>
c001b3b6:	31 d2                	xor    edx,edx
c001b3b8:	31 c0                	xor    eax,eax
c001b3ba:	be 0a 00 00 00       	mov    esi,0xa
c001b3bf:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b3c4:	75 20                	jne    c001b3e6 <Reg::readInt(char*, char*, int*)+0x79>
c001b3c6:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b3ca:	80 f9 78             	cmp    cl,0x78
c001b3cd:	75 0a                	jne    c001b3d9 <Reg::readInt(char*, char*, int*)+0x6c>
c001b3cf:	83 c2 02             	add    edx,0x2
c001b3d2:	be 10 00 00 00       	mov    esi,0x10
c001b3d7:	eb 0d                	jmp    c001b3e6 <Reg::readInt(char*, char*, int*)+0x79>
c001b3d9:	80 f9 62             	cmp    cl,0x62
c001b3dc:	75 08                	jne    c001b3e6 <Reg::readInt(char*, char*, int*)+0x79>
c001b3de:	83 c2 02             	add    edx,0x2
c001b3e1:	be 02 00 00 00       	mov    esi,0x2
c001b3e6:	01 d7                	add    edi,edx
c001b3e8:	31 d2                	xor    edx,edx
c001b3ea:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b3ec:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b3f0:	80 fb 0d             	cmp    bl,0xd
c001b3f3:	0f 94 c3             	sete   bl
c001b3f6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b3fb:	0f 94 c1             	sete   cl
c001b3fe:	08 cb                	or     bl,cl
c001b400:	75 3a                	jne    c001b43c <Reg::readInt(char*, char*, int*)+0xcf>
c001b402:	0f af d6             	imul   edx,esi
c001b405:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b40a:	83 fe 10             	cmp    esi,0x10
c001b40d:	75 26                	jne    c001b435 <Reg::readInt(char*, char*, int*)+0xc8>
c001b40f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b413:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b416:	89 e9                	mov    ecx,ebp
c001b418:	80 f9 05             	cmp    cl,0x5
c001b41b:	77 06                	ja     c001b423 <Reg::readInt(char*, char*, int*)+0xb6>
c001b41d:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b421:	eb 16                	jmp    c001b439 <Reg::readInt(char*, char*, int*)+0xcc>
c001b423:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b427:	83 e9 61             	sub    ecx,0x61
c001b42a:	80 f9 05             	cmp    cl,0x5
c001b42d:	77 06                	ja     c001b435 <Reg::readInt(char*, char*, int*)+0xc8>
c001b42f:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b433:	eb 04                	jmp    c001b439 <Reg::readInt(char*, char*, int*)+0xcc>
c001b435:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b439:	47                   	inc    edi
c001b43a:	eb ae                	jmp    c001b3ea <Reg::readInt(char*, char*, int*)+0x7d>
c001b43c:	84 c0                	test   al,al
c001b43e:	74 02                	je     c001b442 <Reg::readInt(char*, char*, int*)+0xd5>
c001b440:	f7 da                	neg    edx
c001b442:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b449:	89 10                	mov    DWORD PTR [eax],edx
c001b44b:	88 d8                	mov    al,bl
c001b44d:	81 c4 ec 00 00 00    	add    esp,0xec
c001b453:	5b                   	pop    ebx
c001b454:	5e                   	pop    esi
c001b455:	5f                   	pop    edi
c001b456:	5d                   	pop    ebp
c001b457:	c3                   	ret    

c001b458 <Reg::readString(char*, char*, char*, int)>:
c001b458:	57                   	push   edi
c001b459:	56                   	push   esi
c001b45a:	53                   	push   ebx
c001b45b:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b461:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b468:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b46c:	57                   	push   edi
c001b46d:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b474:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b47b:	e8 b6 fe ff ff       	call   c001b336 <Reg::getLine(char*, char*, char*)>
c001b480:	83 c4 10             	add    esp,0x10
c001b483:	89 c6                	mov    esi,eax
c001b485:	84 c0                	test   al,al
c001b487:	74 44                	je     c001b4cd <Reg::readString(char*, char*, char*, int)+0x75>
c001b489:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b490:	31 c0                	xor    eax,eax
c001b492:	4a                   	dec    edx
c001b493:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b496:	84 c9                	test   cl,cl
c001b498:	74 0f                	je     c001b4a9 <Reg::readString(char*, char*, char*, int)+0x51>
c001b49a:	39 c2                	cmp    edx,eax
c001b49c:	7e 0b                	jle    c001b4a9 <Reg::readString(char*, char*, char*, int)+0x51>
c001b49e:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b4a1:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b4a6:	40                   	inc    eax
c001b4a7:	eb ea                	jmp    c001b493 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b4a9:	83 ec 0c             	sub    esp,0xc
c001b4ac:	53                   	push   ebx
c001b4ad:	e8 d6 52 fe ff       	call   c0000788 <strlen>
c001b4b2:	83 c4 10             	add    esp,0x10
c001b4b5:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b4ba:	75 11                	jne    c001b4cd <Reg::readString(char*, char*, char*, int)+0x75>
c001b4bc:	83 ec 0c             	sub    esp,0xc
c001b4bf:	53                   	push   ebx
c001b4c0:	e8 c3 52 fe ff       	call   c0000788 <strlen>
c001b4c5:	83 c4 10             	add    esp,0x10
c001b4c8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b4cd:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b4d3:	89 f0                	mov    eax,esi
c001b4d5:	5b                   	pop    ebx
c001b4d6:	5e                   	pop    esi
c001b4d7:	5f                   	pop    edi
c001b4d8:	c3                   	ret    

c001b4d9 <Reg::readBool(char*, char*, bool*)>:
c001b4d9:	83 ec 20             	sub    esp,0x20
c001b4dc:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b4e0:	50                   	push   eax
c001b4e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4e9:	e8 7f fe ff ff       	call   c001b36d <Reg::readInt(char*, char*, int*)>
c001b4ee:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b4f3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b4f7:	0f 95 02             	setne  BYTE PTR [edx]
c001b4fa:	83 c4 2c             	add    esp,0x2c
c001b4fd:	c3                   	ret    

c001b4fe <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b4fe:	53                   	push   ebx
c001b4ff:	83 ec 1c             	sub    esp,0x1c
c001b502:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b506:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b50a:	50                   	push   eax
c001b50b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b50f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b513:	e8 c1 ff ff ff       	call   c001b4d9 <Reg::readBool(char*, char*, bool*)>
c001b518:	83 c4 10             	add    esp,0x10
c001b51b:	84 c0                	test   al,al
c001b51d:	74 04                	je     c001b523 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b51f:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b523:	88 d8                	mov    al,bl
c001b525:	83 c4 18             	add    esp,0x18
c001b528:	5b                   	pop    ebx
c001b529:	c3                   	ret    

c001b52a <Reg::readIntWithDefault(char*, char*, int)>:
c001b52a:	53                   	push   ebx
c001b52b:	83 ec 1c             	sub    esp,0x1c
c001b52e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b532:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b536:	50                   	push   eax
c001b537:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b53b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b53f:	e8 29 fe ff ff       	call   c001b36d <Reg::readInt(char*, char*, int*)>
c001b544:	83 c4 10             	add    esp,0x10
c001b547:	84 c0                	test   al,al
c001b549:	74 04                	je     c001b54f <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b54b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b54f:	89 d8                	mov    eax,ebx
c001b551:	83 c4 18             	add    esp,0x18
c001b554:	5b                   	pop    ebx
c001b555:	c3                   	ret    

c001b556 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b556:	57                   	push   edi
c001b557:	56                   	push   esi
c001b558:	53                   	push   ebx
c001b559:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b55d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b561:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b565:	53                   	push   ebx
c001b566:	57                   	push   edi
c001b567:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b56b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b56f:	e8 e4 fe ff ff       	call   c001b458 <Reg::readString(char*, char*, char*, int)>
c001b574:	83 c4 10             	add    esp,0x10
c001b577:	84 c0                	test   al,al
c001b579:	75 15                	jne    c001b590 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3a>
c001b57b:	50                   	push   eax
c001b57c:	53                   	push   ebx
c001b57d:	6a 00                	push   0x0
c001b57f:	57                   	push   edi
c001b580:	e8 e7 51 fe ff       	call   c000076c <memset>
c001b585:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001b588:	fc                   	cld    
c001b589:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b58b:	83 c4 10             	add    esp,0x10
c001b58e:	89 f7                	mov    edi,esi
c001b590:	89 f8                	mov    eax,edi
c001b592:	5b                   	pop    ebx
c001b593:	5e                   	pop    esi
c001b594:	5f                   	pop    edi
c001b595:	c3                   	ret    

c001b596 <Sys::eject(regs*)>:
c001b596:	83 ec 0c             	sub    esp,0xc
c001b599:	83 ca ff             	or     edx,0xffffffff
c001b59c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5a0:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b5a3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b5a8:	83 e9 41             	sub    ecx,0x41
c001b5ab:	83 f9 19             	cmp    ecx,0x19
c001b5ae:	77 18                	ja     c001b5c8 <Sys::eject(regs*)+0x32>
c001b5b0:	8b 0c 8d 00 f5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b00]
c001b5b7:	85 c9                	test   ecx,ecx
c001b5b9:	74 0d                	je     c001b5c8 <Sys::eject(regs*)+0x32>
c001b5bb:	83 ec 0c             	sub    esp,0xc
c001b5be:	51                   	push   ecx
c001b5bf:	e8 18 b2 ff ff       	call   c00167dc <LogicalDisk::eject()>
c001b5c4:	83 c4 10             	add    esp,0x10
c001b5c7:	99                   	cdq    
c001b5c8:	83 c4 0c             	add    esp,0xc
c001b5cb:	c3                   	ret    

c001b5cc <Sys::exit(regs*)>:
c001b5cc:	83 ec 18             	sub    esp,0x18
c001b5cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b5d3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b5d6:	e8 7e 38 00 00       	call   c001ee59 <terminateTask(int)>
c001b5db:	83 c8 ff             	or     eax,0xffffffff
c001b5de:	83 c4 1c             	add    esp,0x1c
c001b5e1:	89 c2                	mov    edx,eax
c001b5e3:	c3                   	ret    

c001b5e4 <Sys::getCwd(regs*)>:
c001b5e4:	83 ec 10             	sub    esp,0x10
c001b5e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b5eb:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b5ee:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b5f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5f6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b5f9:	e8 30 7c ff ff       	call   c001322e <Fs::getcwd(Process*, char*, int)>
c001b5fe:	83 c4 1c             	add    esp,0x1c
c001b601:	99                   	cdq    
c001b602:	c3                   	ret    

c001b603 <Sys::getPID(regs*)>:
c001b603:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b608:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b60b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b60d:	99                   	cdq    
c001b60e:	c3                   	ret    

c001b60f <Sys::getRAMData(regs*)>:
c001b60f:	8b 0d 34 ef 02 c0    	mov    ecx,DWORD PTR ds:0xc002ef34
c001b615:	6b 05 30 ef 02 c0 64 	imul   eax,DWORD PTR ds:0xc002ef30,0x64
c001b61c:	99                   	cdq    
c001b61d:	f7 f9                	idiv   ecx
c001b61f:	c1 e0 18             	shl    eax,0x18
c001b622:	09 c8                	or     eax,ecx
c001b624:	99                   	cdq    
c001b625:	c3                   	ret    

c001b626 <Sys::getVGAPtr(regs*)>:
c001b626:	55                   	push   ebp
c001b627:	57                   	push   edi
c001b628:	56                   	push   esi
c001b629:	53                   	push   ebx
c001b62a:	83 ec 18             	sub    esp,0x18
c001b62d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b631:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b634:	e8 02 33 00 00       	call   c001e93b <Thr::processFromPID(int)>
c001b639:	83 c4 10             	add    esp,0x10
c001b63c:	89 c1                	mov    ecx,eax
c001b63e:	b8 01 00 00 00       	mov    eax,0x1
c001b643:	85 c9                	test   ecx,ecx
c001b645:	74 5a                	je     c001b6a1 <Sys::getVGAPtr(regs*)+0x7b>
c001b647:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b64d:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b651:	74 0c                	je     c001b65f <Sys::getVGAPtr(regs*)+0x39>
c001b653:	83 ec 0c             	sub    esp,0xc
c001b656:	53                   	push   ebx
c001b657:	e8 94 56 ff ff       	call   c0010cf0 <setActiveTerminal(VgaText*)>
c001b65c:	83 c4 10             	add    esp,0x10
c001b65f:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b664:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b667:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b66a:	fc                   	cld    
c001b66b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b66d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b670:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b673:	81 c3 82 00 00 00    	add    ebx,0x82
c001b679:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b67f:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b682:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b685:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b68b:	50                   	push   eax
c001b68c:	50                   	push   eax
c001b68d:	53                   	push   ebx
c001b68e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b691:	05 a8 0f 00 00       	add    eax,0xfa8
c001b696:	50                   	push   eax
c001b697:	e8 8c 51 fe ff       	call   c0000828 <strcpy>
c001b69c:	83 c4 10             	add    esp,0x10
c001b69f:	31 c0                	xor    eax,eax
c001b6a1:	83 c4 0c             	add    esp,0xc
c001b6a4:	31 d2                	xor    edx,edx
c001b6a6:	5b                   	pop    ebx
c001b6a7:	5e                   	pop    esi
c001b6a8:	5f                   	pop    edi
c001b6a9:	5d                   	pop    ebp
c001b6aa:	c3                   	ret    

c001b6ab <Sys::loadDLL(regs*)>:
c001b6ab:	56                   	push   esi
c001b6ac:	53                   	push   ebx
c001b6ad:	31 d2                	xor    edx,edx
c001b6af:	51                   	push   ecx
c001b6b0:	b8 01 00 00 00       	mov    eax,0x1
c001b6b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b6b9:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b6bd:	0f 84 8c 00 00 00    	je     c001b74f <Sys::loadDLL(regs*)+0xa4>
c001b6c3:	83 ec 0c             	sub    esp,0xc
c001b6c6:	68 14 01 00 00       	push   0x114
c001b6cb:	e8 5e 42 ff ff       	call   c000f92e <malloc>
c001b6d0:	83 c4 0c             	add    esp,0xc
c001b6d3:	89 c3                	mov    ebx,eax
c001b6d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6da:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b6dd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b6e0:	53                   	push   ebx
c001b6e1:	e8 46 7d ff ff       	call   c001342c <File::File(char const*, Process*)>
c001b6e6:	83 c4 10             	add    esp,0x10
c001b6e9:	31 d2                	xor    edx,edx
c001b6eb:	b8 02 00 00 00       	mov    eax,0x2
c001b6f0:	85 db                	test   ebx,ebx
c001b6f2:	74 5b                	je     c001b74f <Sys::loadDLL(regs*)+0xa4>
c001b6f4:	83 ec 0c             	sub    esp,0xc
c001b6f7:	53                   	push   ebx
c001b6f8:	e8 01 80 ff ff       	call   c00136fe <File::exists()>
c001b6fd:	83 c4 10             	add    esp,0x10
c001b700:	84 c0                	test   al,al
c001b702:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b704:	75 11                	jne    c001b717 <Sys::loadDLL(regs*)+0x6c>
c001b706:	83 ec 0c             	sub    esp,0xc
c001b709:	53                   	push   ebx
c001b70a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b70d:	83 c4 10             	add    esp,0x10
c001b710:	b8 03 00 00 00       	mov    eax,0x3
c001b715:	eb 36                	jmp    c001b74d <Sys::loadDLL(regs*)+0xa2>
c001b717:	83 ec 0c             	sub    esp,0xc
c001b71a:	53                   	push   ebx
c001b71b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b71e:	58                   	pop    eax
c001b71f:	5a                   	pop    edx
c001b720:	6a 00                	push   0x0
c001b722:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b725:	e8 1e 24 00 00       	call   c001db48 <Thr::loadDLL(char const*, bool)>
c001b72a:	83 c4 10             	add    esp,0x10
c001b72d:	89 c1                	mov    ecx,eax
c001b72f:	31 d2                	xor    edx,edx
c001b731:	b8 04 00 00 00       	mov    eax,0x4
c001b736:	85 c9                	test   ecx,ecx
c001b738:	74 15                	je     c001b74f <Sys::loadDLL(regs*)+0xa4>
c001b73a:	53                   	push   ebx
c001b73b:	53                   	push   ebx
c001b73c:	ff 35 e8 ee 02 c0    	push   DWORD PTR ds:0xc002eee8
c001b742:	51                   	push   ecx
c001b743:	e8 2b 26 00 00       	call   c001dd73 <Thr::executeDLL(unsigned long, void*)>
c001b748:	83 c4 10             	add    esp,0x10
c001b74b:	31 c0                	xor    eax,eax
c001b74d:	31 d2                	xor    edx,edx
c001b74f:	59                   	pop    ecx
c001b750:	5b                   	pop    ebx
c001b751:	5e                   	pop    esi
c001b752:	c3                   	ret    

c001b753 <Sys::read(regs*)>:
c001b753:	57                   	push   edi
c001b754:	56                   	push   esi
c001b755:	53                   	push   ebx
c001b756:	83 ec 10             	sub    esp,0x10
c001b759:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b75d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b760:	83 f8 02             	cmp    eax,0x2
c001b763:	77 10                	ja     c001b775 <Sys::read(regs*)+0x22>
c001b765:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b76a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b76d:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b773:	eb 0e                	jmp    c001b783 <Sys::read(regs*)+0x30>
c001b775:	83 ec 0c             	sub    esp,0xc
c001b778:	50                   	push   eax
c001b779:	e8 f3 61 ff ff       	call   c0011971 <getFromFileDescriptor(int)>
c001b77e:	83 c4 10             	add    esp,0x10
c001b781:	89 c1                	mov    ecx,eax
c001b783:	83 c8 ff             	or     eax,0xffffffff
c001b786:	85 c9                	test   ecx,ecx
c001b788:	89 c2                	mov    edx,eax
c001b78a:	74 28                	je     c001b7b4 <Sys::read(regs*)+0x61>
c001b78c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b794:	31 ff                	xor    edi,edi
c001b796:	83 ec 0c             	sub    esp,0xc
c001b799:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b79b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b79f:	52                   	push   edx
c001b7a0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b7a3:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b7a6:	57                   	push   edi
c001b7a7:	56                   	push   esi
c001b7a8:	51                   	push   ecx
c001b7a9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b7ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b7b0:	83 c4 20             	add    esp,0x20
c001b7b3:	99                   	cdq    
c001b7b4:	83 c4 10             	add    esp,0x10
c001b7b7:	5b                   	pop    ebx
c001b7b8:	5e                   	pop    esi
c001b7b9:	5f                   	pop    edi
c001b7ba:	c3                   	ret    

c001b7bb <Sys::sbrk(regs*)>:
c001b7bb:	56                   	push   esi
c001b7bc:	53                   	push   ebx
c001b7bd:	50                   	push   eax
c001b7be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b7c7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b7ca:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b7cd:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b7d3:	85 db                	test   ebx,ebx
c001b7d5:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b7d8:	74 02                	je     c001b7dc <Sys::sbrk(regs*)+0x21>
c001b7da:	79 06                	jns    c001b7e2 <Sys::sbrk(regs*)+0x27>
c001b7dc:	89 f0                	mov    eax,esi
c001b7de:	31 d2                	xor    edx,edx
c001b7e0:	eb 2a                	jmp    c001b80c <Sys::sbrk(regs*)+0x51>
c001b7e2:	83 c8 ff             	or     eax,0xffffffff
c001b7e5:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b7eb:	89 c2                	mov    edx,eax
c001b7ed:	77 1d                	ja     c001b80c <Sys::sbrk(regs*)+0x51>
c001b7ef:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b7f5:	50                   	push   eax
c001b7f6:	c1 ea 0c             	shr    edx,0xc
c001b7f9:	68 07 0c 00 00       	push   0xc07
c001b7fe:	52                   	push   edx
c001b7ff:	51                   	push   ecx
c001b800:	e8 fb 6b ff ff       	call   c0012400 <VAS::allocatePages(int, int)>
c001b805:	89 f0                	mov    eax,esi
c001b807:	31 d2                	xor    edx,edx
c001b809:	83 c4 10             	add    esp,0x10
c001b80c:	59                   	pop    ecx
c001b80d:	5b                   	pop    ebx
c001b80e:	5e                   	pop    esi
c001b80f:	c3                   	ret    

c001b810 <Sys::setCwd(regs*)>:
c001b810:	83 ec 14             	sub    esp,0x14
c001b813:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b817:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b81a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b81f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b822:	e8 76 7f ff ff       	call   c001379d <Fs::setcwd(Process*, char*)>
c001b827:	83 c4 1c             	add    esp,0x1c
c001b82a:	99                   	cdq    
c001b82b:	c3                   	ret    

c001b82c <Sys::setTime(regs*)>:
c001b82c:	55                   	push   ebp
c001b82d:	31 d2                	xor    edx,edx
c001b82f:	57                   	push   edi
c001b830:	bf 18 00 00 00       	mov    edi,0x18
c001b835:	56                   	push   esi
c001b836:	53                   	push   ebx
c001b837:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b83c:	83 ec 30             	sub    esp,0x30
c001b83f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b843:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b846:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b849:	f7 f3                	div    ebx
c001b84b:	89 d6                	mov    esi,edx
c001b84d:	31 d2                	xor    edx,edx
c001b84f:	f7 f3                	div    ebx
c001b851:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b854:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b858:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b85d:	31 d2                	xor    edx,edx
c001b85f:	f7 f3                	div    ebx
c001b861:	31 d2                	xor    edx,edx
c001b863:	bb 0c 00 00 00       	mov    ebx,0xc
c001b868:	f7 f7                	div    edi
c001b86a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b86d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b871:	0f b7 cd             	movzx  ecx,bp
c001b874:	56                   	push   esi
c001b875:	89 c7                	mov    edi,eax
c001b877:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b87b:	c1 e6 10             	shl    esi,0x10
c001b87e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b882:	83 e7 1f             	and    edi,0x1f
c001b885:	51                   	push   ecx
c001b886:	47                   	inc    edi
c001b887:	c1 e8 05             	shr    eax,0x5
c001b88a:	31 d2                	xor    edx,edx
c001b88c:	f7 f3                	div    ebx
c001b88e:	31 db                	xor    ebx,ebx
c001b890:	52                   	push   edx
c001b891:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b895:	57                   	push   edi
c001b896:	68 8d c7 02 c0       	push   0xc002c78d
c001b89b:	e8 2d 76 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001b8a0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b8a4:	89 f8                	mov    eax,edi
c001b8a6:	31 c9                	xor    ecx,ecx
c001b8a8:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b8ac:	88 c1                	mov    cl,al
c001b8ae:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b8b4:	88 d5                	mov    ch,dl
c001b8b6:	c1 e0 10             	shl    eax,0x10
c001b8b9:	0f b7 d1             	movzx  edx,cx
c001b8bc:	09 c2                	or     edx,eax
c001b8be:	89 d8                	mov    eax,ebx
c001b8c0:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b8c5:	09 f0                	or     eax,esi
c001b8c7:	89 c3                	mov    ebx,eax
c001b8c9:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b8cd:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b8d1:	83 c4 18             	add    esp,0x18
c001b8d4:	53                   	push   ebx
c001b8d5:	52                   	push   edx
c001b8d6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b8da:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b8de:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b8e2:	e8 d8 85 ff ff       	call   c0013ebf <datetimeToSeconds(datetime_t)>
c001b8e7:	83 c4 0c             	add    esp,0xc
c001b8ea:	52                   	push   edx
c001b8eb:	50                   	push   eax
c001b8ec:	56                   	push   esi
c001b8ed:	e8 54 87 ff ff       	call   c0014046 <secondsToDatetime(unsigned long long)>
c001b8f2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b8f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b8fa:	51                   	push   ecx
c001b8fb:	89 d6                	mov    esi,edx
c001b8fd:	51                   	push   ecx
c001b8fe:	c1 ee 10             	shr    esi,0x10
c001b901:	89 f3                	mov    ebx,esi
c001b903:	0f b6 f3             	movzx  esi,bl
c001b906:	56                   	push   esi
c001b907:	0f b6 f6             	movzx  esi,dh
c001b90a:	0f b6 d2             	movzx  edx,dl
c001b90d:	56                   	push   esi
c001b90e:	52                   	push   edx
c001b90f:	89 c2                	mov    edx,eax
c001b911:	c1 ea 10             	shr    edx,0x10
c001b914:	52                   	push   edx
c001b915:	0f b6 d4             	movzx  edx,ah
c001b918:	0f b6 c0             	movzx  eax,al
c001b91b:	52                   	push   edx
c001b91c:	50                   	push   eax
c001b91d:	68 a9 c7 02 c0       	push   0xc002c7a9
c001b922:	e8 a6 75 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001b927:	83 c4 2c             	add    esp,0x2c
c001b92a:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c001b92f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b933:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b937:	53                   	push   ebx
c001b938:	51                   	push   ecx
c001b939:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b93f:	e8 a2 86 ff ff       	call   c0013fe6 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b944:	83 f0 01             	xor    eax,0x1
c001b947:	31 d2                	xor    edx,edx
c001b949:	0f b6 c0             	movzx  eax,al
c001b94c:	83 c4 3c             	add    esp,0x3c
c001b94f:	5b                   	pop    ebx
c001b950:	5e                   	pop    esi
c001b951:	5f                   	pop    edi
c001b952:	5d                   	pop    ebp
c001b953:	c3                   	ret    

c001b954 <Sys::timezone(regs*)>:
c001b954:	53                   	push   ebx
c001b955:	83 ec 08             	sub    esp,0x8
c001b958:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b95c:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b960:	75 17                	jne    c001b979 <Sys::timezone(regs*)+0x25>
c001b962:	83 ec 0c             	sub    esp,0xc
c001b965:	68 c5 c7 02 c0       	push   0xc002c7c5
c001b96a:	e8 5e 75 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001b96f:	83 c8 ff             	or     eax,0xffffffff
c001b972:	83 c4 10             	add    esp,0x10
c001b975:	89 c2                	mov    edx,eax
c001b977:	eb 20                	jmp    c001b999 <Sys::timezone(regs*)+0x45>
c001b979:	83 ec 0c             	sub    esp,0xc
c001b97c:	68 fd c7 02 c0       	push   0xc002c7fd
c001b981:	e8 47 75 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001b986:	58                   	pop    eax
c001b987:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b98a:	e8 b9 83 ff ff       	call   c0013d48 <User::loadClockSettings(int)>
c001b98f:	83 c4 10             	add    esp,0x10
c001b992:	b8 01 00 00 00       	mov    eax,0x1
c001b997:	31 d2                	xor    edx,edx
c001b999:	83 c4 08             	add    esp,0x8
c001b99c:	5b                   	pop    ebx
c001b99d:	c3                   	ret    

c001b99e <Sys::write(regs*)>:
c001b99e:	57                   	push   edi
c001b99f:	56                   	push   esi
c001b9a0:	53                   	push   ebx
c001b9a1:	83 ec 10             	sub    esp,0x10
c001b9a4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b9a8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9ab:	83 f8 02             	cmp    eax,0x2
c001b9ae:	77 10                	ja     c001b9c0 <Sys::write(regs*)+0x22>
c001b9b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9b8:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b9be:	eb 0e                	jmp    c001b9ce <Sys::write(regs*)+0x30>
c001b9c0:	83 ec 0c             	sub    esp,0xc
c001b9c3:	50                   	push   eax
c001b9c4:	e8 a8 5f ff ff       	call   c0011971 <getFromFileDescriptor(int)>
c001b9c9:	83 c4 10             	add    esp,0x10
c001b9cc:	89 c1                	mov    ecx,eax
c001b9ce:	83 c8 ff             	or     eax,0xffffffff
c001b9d1:	85 c9                	test   ecx,ecx
c001b9d3:	89 c2                	mov    edx,eax
c001b9d5:	74 28                	je     c001b9ff <Sys::write(regs*)+0x61>
c001b9d7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b9df:	31 ff                	xor    edi,edi
c001b9e1:	83 ec 0c             	sub    esp,0xc
c001b9e4:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b9e6:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b9ea:	52                   	push   edx
c001b9eb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b9ee:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b9f1:	57                   	push   edi
c001b9f2:	56                   	push   esi
c001b9f3:	51                   	push   ecx
c001b9f4:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b9f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b9fb:	83 c4 20             	add    esp,0x20
c001b9fe:	99                   	cdq    
c001b9ff:	83 c4 10             	add    esp,0x10
c001ba02:	5b                   	pop    ebx
c001ba03:	5e                   	pop    esi
c001ba04:	5f                   	pop    edi
c001ba05:	c3                   	ret    

c001ba06 <Sys::wsbe(regs*)>:
c001ba06:	57                   	push   edi
c001ba07:	b9 0b 00 00 00       	mov    ecx,0xb
c001ba0c:	56                   	push   esi
c001ba0d:	be 3c c8 02 c0       	mov    esi,0xc002c83c
c001ba12:	53                   	push   ebx
c001ba13:	83 ec 30             	sub    esp,0x30
c001ba16:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ba1a:	fc                   	cld    
c001ba1b:	83 ec 0c             	sub    esp,0xc
c001ba1e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ba20:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001ba24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba29:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba2c:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001ba32:	8b 06                	mov    eax,DWORD PTR [esi]
c001ba34:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001ba37:	57                   	push   edi
c001ba38:	e8 4b 4d fe ff       	call   c0000788 <strlen>
c001ba3d:	5a                   	pop    edx
c001ba3e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001ba42:	52                   	push   edx
c001ba43:	31 d2                	xor    edx,edx
c001ba45:	57                   	push   edi
c001ba46:	52                   	push   edx
c001ba47:	50                   	push   eax
c001ba48:	56                   	push   esi
c001ba49:	ff d3                	call   ebx
c001ba4b:	83 c4 14             	add    esp,0x14
c001ba4e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ba52:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ba55:	e8 ff 33 00 00       	call   c001ee59 <terminateTask(int)>
c001ba5a:	83 c4 40             	add    esp,0x40
c001ba5d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ba62:	5b                   	pop    ebx
c001ba63:	31 d2                	xor    edx,edx
c001ba65:	5e                   	pop    esi
c001ba66:	5f                   	pop    edi
c001ba67:	c3                   	ret    

c001ba68 <Sys::yield(regs*)>:
c001ba68:	57                   	push   edi
c001ba69:	56                   	push   esi
c001ba6a:	53                   	push   ebx
c001ba6b:	fa                   	cli    
c001ba6c:	ff 05 28 24 03 c0    	inc    DWORD PTR ds:0xc0032428
c001ba72:	e8 af 2a 00 00       	call   c001e526 <schedule()>
c001ba77:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c001ba7c:	48                   	dec    eax
c001ba7d:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c001ba82:	75 01                	jne    c001ba85 <Sys::yield(regs*)+0x1d>
c001ba84:	fb                   	sti    
c001ba85:	8b 35 70 f5 02 c0    	mov    esi,DWORD PTR ds:0xc002f570
c001ba8b:	8b 3d 74 f5 02 c0    	mov    edi,DWORD PTR ds:0xc002f574
c001ba91:	89 f0                	mov    eax,esi
c001ba93:	89 fb                	mov    ebx,edi
c001ba95:	89 f1                	mov    ecx,esi
c001ba97:	c1 e0 07             	shl    eax,0x7
c001ba9a:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001ba9e:	25 80 30 0f 00       	and    eax,0xf3080
c001baa3:	c1 eb 17             	shr    ebx,0x17
c001baa6:	31 c8                	xor    eax,ecx
c001baa8:	89 da                	mov    edx,ebx
c001baaa:	5b                   	pop    ebx
c001baab:	5e                   	pop    esi
c001baac:	5f                   	pop    edi
c001baad:	c3                   	ret    

c001baae <sysCallSeekDir(regs*)>:
c001baae:	31 c0                	xor    eax,eax
c001bab0:	31 d2                	xor    edx,edx
c001bab2:	c3                   	ret    

c001bab3 <sysCallTellDir(regs*)>:
c001bab3:	31 c0                	xor    eax,eax
c001bab5:	31 d2                	xor    edx,edx
c001bab7:	c3                   	ret    

c001bab8 <sysCallVerify(regs*)>:
c001bab8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001babc:	31 d2                	xor    edx,edx
c001babe:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bac1:	c3                   	ret    

c001bac2 <sysFormatDisk(regs*)>:
c001bac2:	56                   	push   esi
c001bac3:	53                   	push   ebx
c001bac4:	53                   	push   ebx
c001bac5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bac9:	8b 1d 74 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f074
c001bacf:	eb 25                	jmp    c001baf6 <sysFormatDisk(regs*)+0x34>
c001bad1:	83 ec 0c             	sub    esp,0xc
c001bad4:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bad7:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bad9:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001badc:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001badf:	50                   	push   eax
c001bae0:	ff 34 85 00 f5 02 c0 	push   DWORD PTR [eax*4-0x3ffd0b00]
c001bae7:	53                   	push   ebx
c001bae8:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001baeb:	83 c4 20             	add    esp,0x20
c001baee:	83 f8 08             	cmp    eax,0x8
c001baf1:	75 12                	jne    c001bb05 <sysFormatDisk(regs*)+0x43>
c001baf3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001baf6:	85 db                	test   ebx,ebx
c001baf8:	75 d7                	jne    c001bad1 <sysFormatDisk(regs*)+0xf>
c001bafa:	59                   	pop    ecx
c001bafb:	b8 03 00 00 00       	mov    eax,0x3
c001bb00:	31 d2                	xor    edx,edx
c001bb02:	5b                   	pop    ebx
c001bb03:	5e                   	pop    esi
c001bb04:	c3                   	ret    
c001bb05:	85 c0                	test   eax,eax
c001bb07:	74 1b                	je     c001bb24 <sysFormatDisk(regs*)+0x62>
c001bb09:	83 f8 09             	cmp    eax,0x9
c001bb0c:	74 0b                	je     c001bb19 <sysFormatDisk(regs*)+0x57>
c001bb0e:	59                   	pop    ecx
c001bb0f:	b8 02 00 00 00       	mov    eax,0x2
c001bb14:	31 d2                	xor    edx,edx
c001bb16:	5b                   	pop    ebx
c001bb17:	5e                   	pop    esi
c001bb18:	c3                   	ret    
c001bb19:	59                   	pop    ecx
c001bb1a:	b8 01 00 00 00       	mov    eax,0x1
c001bb1f:	31 d2                	xor    edx,edx
c001bb21:	5b                   	pop    ebx
c001bb22:	5e                   	pop    esi
c001bb23:	c3                   	ret    
c001bb24:	59                   	pop    ecx
c001bb25:	31 c0                	xor    eax,eax
c001bb27:	31 d2                	xor    edx,edx
c001bb29:	5b                   	pop    ebx
c001bb2a:	5e                   	pop    esi
c001bb2b:	c3                   	ret    

c001bb2c <sysSetDiskVolumeLabel(regs*)>:
c001bb2c:	56                   	push   esi
c001bb2d:	53                   	push   ebx
c001bb2e:	53                   	push   ebx
c001bb2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bb33:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bb36:	83 f8 19             	cmp    eax,0x19
c001bb39:	77 29                	ja     c001bb64 <sysSetDiskVolumeLabel(regs*)+0x38>
c001bb3b:	8b 0c 85 00 f5 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd0b00]
c001bb42:	85 c9                	test   ecx,ecx
c001bb44:	74 1e                	je     c001bb64 <sysSetDiskVolumeLabel(regs*)+0x38>
c001bb46:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001bb49:	85 d2                	test   edx,edx
c001bb4b:	74 17                	je     c001bb64 <sysSetDiskVolumeLabel(regs*)+0x38>
c001bb4d:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001bb53:	8b 33                	mov    esi,DWORD PTR [ebx]
c001bb55:	52                   	push   edx
c001bb56:	50                   	push   eax
c001bb57:	51                   	push   ecx
c001bb58:	53                   	push   ebx
c001bb59:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001bb5c:	83 c4 10             	add    esp,0x10
c001bb5f:	99                   	cdq    
c001bb60:	59                   	pop    ecx
c001bb61:	5b                   	pop    ebx
c001bb62:	5e                   	pop    esi
c001bb63:	c3                   	ret    
c001bb64:	59                   	pop    ecx
c001bb65:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bb6a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb6f:	5b                   	pop    ebx
c001bb70:	5e                   	pop    esi
c001bb71:	c3                   	ret    

c001bb72 <sysGetDiskVolumeLabel(regs*)>:
c001bb72:	57                   	push   edi
c001bb73:	56                   	push   esi
c001bb74:	53                   	push   ebx
c001bb75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb79:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001bb7c:	83 fa 19             	cmp    edx,0x19
c001bb7f:	77 34                	ja     c001bbb5 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bb81:	8b 0c 95 00 f5 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd0b00]
c001bb88:	85 c9                	test   ecx,ecx
c001bb8a:	74 29                	je     c001bbb5 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bb8c:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001bb8f:	85 db                	test   ebx,ebx
c001bb91:	74 22                	je     c001bbb5 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bb93:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001bb96:	85 c0                	test   eax,eax
c001bb98:	74 1b                	je     c001bbb5 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bb9a:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001bba0:	83 ec 0c             	sub    esp,0xc
c001bba3:	8b 3e                	mov    edi,DWORD PTR [esi]
c001bba5:	50                   	push   eax
c001bba6:	53                   	push   ebx
c001bba7:	52                   	push   edx
c001bba8:	51                   	push   ecx
c001bba9:	56                   	push   esi
c001bbaa:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001bbad:	83 c4 20             	add    esp,0x20
c001bbb0:	99                   	cdq    
c001bbb1:	5b                   	pop    ebx
c001bbb2:	5e                   	pop    esi
c001bbb3:	5f                   	pop    edi
c001bbb4:	c3                   	ret    
c001bbb5:	5b                   	pop    ebx
c001bbb6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bbbb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbc0:	5e                   	pop    esi
c001bbc1:	5f                   	pop    edi
c001bbc2:	c3                   	ret    

c001bbc3 <sysShutdown(regs*)>:
c001bbc3:	83 ec 0c             	sub    esp,0xc
c001bbc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbca:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bbcd:	85 c0                	test   eax,eax
c001bbcf:	74 18                	je     c001bbe9 <sysShutdown(regs*)+0x26>
c001bbd1:	83 f8 01             	cmp    eax,0x1
c001bbd4:	74 38                	je     c001bc0e <sysShutdown(regs*)+0x4b>
c001bbd6:	83 f8 02             	cmp    eax,0x2
c001bbd9:	74 24                	je     c001bbff <sysShutdown(regs*)+0x3c>
c001bbdb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbe0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbe5:	83 c4 0c             	add    esp,0xc
c001bbe8:	c3                   	ret    
c001bbe9:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c001bbee:	8b 10                	mov    edx,DWORD PTR [eax]
c001bbf0:	6a 00                	push   0x0
c001bbf2:	6a 00                	push   0x0
c001bbf4:	6a 00                	push   0x0
c001bbf6:	50                   	push   eax
c001bbf7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bbfa:	83 c4 10             	add    esp,0x10
c001bbfd:	eb dc                	jmp    c001bbdb <sysShutdown(regs*)+0x18>
c001bbff:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c001bc04:	8b 10                	mov    edx,DWORD PTR [eax]
c001bc06:	6a 00                	push   0x0
c001bc08:	6a 00                	push   0x0
c001bc0a:	6a 01                	push   0x1
c001bc0c:	eb e8                	jmp    c001bbf6 <sysShutdown(regs*)+0x33>
c001bc0e:	a1 a0 15 03 c0       	mov    eax,ds:0xc00315a0
c001bc13:	85 c0                	test   eax,eax
c001bc15:	74 02                	je     c001bc19 <sysShutdown(regs*)+0x56>
c001bc17:	ff d0                	call   eax
c001bc19:	31 c0                	xor    eax,eax
c001bc1b:	31 d2                	xor    edx,edx
c001bc1d:	83 c4 0c             	add    esp,0xc
c001bc20:	c3                   	ret    

c001bc21 <sysCallRealpath(regs*)>:
c001bc21:	83 ec 0c             	sub    esp,0xc
c001bc24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc28:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001bc2b:	85 d2                	test   edx,edx
c001bc2d:	74 07                	je     c001bc36 <sysCallRealpath(regs*)+0x15>
c001bc2f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bc32:	85 c0                	test   eax,eax
c001bc34:	75 0b                	jne    c001bc41 <sysCallRealpath(regs*)+0x20>
c001bc36:	b8 01 00 00 00       	mov    eax,0x1
c001bc3b:	31 d2                	xor    edx,edx
c001bc3d:	83 c4 0c             	add    esp,0xc
c001bc40:	c3                   	ret    
c001bc41:	51                   	push   ecx
c001bc42:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bc48:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bc4b:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001bc51:	51                   	push   ecx
c001bc52:	52                   	push   edx
c001bc53:	50                   	push   eax
c001bc54:	e8 29 76 ff ff       	call   c0013282 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bc59:	83 c4 10             	add    esp,0x10
c001bc5c:	31 c0                	xor    eax,eax
c001bc5e:	31 d2                	xor    edx,edx
c001bc60:	83 c4 0c             	add    esp,0xc
c001bc63:	c3                   	ret    

c001bc64 <sysCallGetArgc(regs*)>:
c001bc64:	83 ec 14             	sub    esp,0x14
c001bc67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc6c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc6f:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001bc75:	68 68 c8 02 c0       	push   0xc002c868
c001bc7a:	e8 4e 72 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001bc7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc84:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc87:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001bc8d:	83 c4 1c             	add    esp,0x1c
c001bc90:	99                   	cdq    
c001bc91:	c3                   	ret    

c001bc92 <sysCallReadDir(regs*)>:
c001bc92:	53                   	push   ebx
c001bc93:	83 ec 18             	sub    esp,0x18
c001bc96:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bc9a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bc9d:	83 f8 02             	cmp    eax,0x2
c001bca0:	76 53                	jbe    c001bcf5 <sysCallReadDir(regs*)+0x63>
c001bca2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bca5:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001bcab:	77 4f                	ja     c001bcfc <sysCallReadDir(regs*)+0x6a>
c001bcad:	83 ec 0c             	sub    esp,0xc
c001bcb0:	50                   	push   eax
c001bcb1:	e8 bb 5c ff ff       	call   c0011971 <getFromFileDescriptor(int)>
c001bcb6:	83 c4 10             	add    esp,0x10
c001bcb9:	85 c0                	test   eax,eax
c001bcbb:	74 50                	je     c001bd0d <sysCallReadDir(regs*)+0x7b>
c001bcbd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bcc5:	83 ec 0c             	sub    esp,0xc
c001bcc8:	8b 10                	mov    edx,DWORD PTR [eax]
c001bcca:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001bcce:	51                   	push   ecx
c001bccf:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bcd2:	6a 00                	push   0x0
c001bcd4:	68 10 01 00 00       	push   0x110
c001bcd9:	50                   	push   eax
c001bcda:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bcdd:	83 c4 20             	add    esp,0x20
c001bce0:	85 c0                	test   eax,eax
c001bce2:	74 38                	je     c001bd1c <sysCallReadDir(regs*)+0x8a>
c001bce4:	83 f8 07             	cmp    eax,0x7
c001bce7:	74 0c                	je     c001bcf5 <sysCallReadDir(regs*)+0x63>
c001bce9:	b8 02 00 00 00       	mov    eax,0x2
c001bcee:	31 d2                	xor    edx,edx
c001bcf0:	83 c4 18             	add    esp,0x18
c001bcf3:	5b                   	pop    ebx
c001bcf4:	c3                   	ret    
c001bcf5:	b8 01 00 00 00       	mov    eax,0x1
c001bcfa:	eb f2                	jmp    c001bcee <sysCallReadDir(regs*)+0x5c>
c001bcfc:	83 ec 08             	sub    esp,0x8
c001bcff:	52                   	push   edx
c001bd00:	68 8c c9 02 c0       	push   0xc002c98c
c001bd05:	e8 c3 71 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001bd0a:	83 c4 10             	add    esp,0x10
c001bd0d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd12:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd17:	83 c4 18             	add    esp,0x18
c001bd1a:	5b                   	pop    ebx
c001bd1b:	c3                   	ret    
c001bd1c:	31 c0                	xor    eax,eax
c001bd1e:	eb ce                	jmp    c001bcee <sysCallReadDir(regs*)+0x5c>

c001bd20 <sysCallIsATTY(regs*)>:
c001bd20:	83 ec 0c             	sub    esp,0xc
c001bd23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd27:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bd2a:	83 f8 02             	cmp    eax,0x2
c001bd2d:	76 07                	jbe    c001bd36 <sysCallIsATTY(regs*)+0x16>
c001bd2f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bd34:	75 26                	jne    c001bd5c <sysCallIsATTY(regs*)+0x3c>
c001bd36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd3b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bd3e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001bd44:	85 c0                	test   eax,eax
c001bd46:	74 24                	je     c001bd6c <sysCallIsATTY(regs*)+0x4c>
c001bd48:	83 ec 0c             	sub    esp,0xc
c001bd4b:	8b 10                	mov    edx,DWORD PTR [eax]
c001bd4d:	50                   	push   eax
c001bd4e:	ff 12                	call   DWORD PTR [edx]
c001bd50:	31 d2                	xor    edx,edx
c001bd52:	0f b6 c0             	movzx  eax,al
c001bd55:	83 c4 10             	add    esp,0x10
c001bd58:	83 c4 0c             	add    esp,0xc
c001bd5b:	c3                   	ret    
c001bd5c:	83 ec 0c             	sub    esp,0xc
c001bd5f:	50                   	push   eax
c001bd60:	e8 0c 5c ff ff       	call   c0011971 <getFromFileDescriptor(int)>
c001bd65:	83 c4 10             	add    esp,0x10
c001bd68:	85 c0                	test   eax,eax
c001bd6a:	75 dc                	jne    c001bd48 <sysCallIsATTY(regs*)+0x28>
c001bd6c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd71:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd76:	83 c4 0c             	add    esp,0xc
c001bd79:	c3                   	ret    

c001bd7a <sysCallSeek(regs*)>:
c001bd7a:	53                   	push   ebx
c001bd7b:	83 ec 08             	sub    esp,0x8
c001bd7e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd82:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bd85:	83 f8 02             	cmp    eax,0x2
c001bd88:	76 4a                	jbe    c001bdd4 <sysCallSeek(regs*)+0x5a>
c001bd8a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd8f:	77 32                	ja     c001bdc3 <sysCallSeek(regs*)+0x49>
c001bd91:	83 ec 0c             	sub    esp,0xc
c001bd94:	50                   	push   eax
c001bd95:	e8 d7 5b ff ff       	call   c0011971 <getFromFileDescriptor(int)>
c001bd9a:	83 c4 0c             	add    esp,0xc
c001bd9d:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bda0:	31 db                	xor    ebx,ebx
c001bda2:	53                   	push   ebx
c001bda3:	51                   	push   ecx
c001bda4:	50                   	push   eax
c001bda5:	e8 a4 77 ff ff       	call   c001354e <File::seek(unsigned long long)>
c001bdaa:	83 c4 10             	add    esp,0x10
c001bdad:	85 c0                	test   eax,eax
c001bdaf:	0f 95 c0             	setne  al
c001bdb2:	31 d2                	xor    edx,edx
c001bdb4:	0f b6 c0             	movzx  eax,al
c001bdb7:	f7 d8                	neg    eax
c001bdb9:	83 d2 00             	adc    edx,0x0
c001bdbc:	83 c4 08             	add    esp,0x8
c001bdbf:	f7 da                	neg    edx
c001bdc1:	5b                   	pop    ebx
c001bdc2:	c3                   	ret    
c001bdc3:	83 ec 08             	sub    esp,0x8
c001bdc6:	50                   	push   eax
c001bdc7:	68 73 c8 02 c0       	push   0xc002c873
c001bdcc:	e8 fc 70 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001bdd1:	83 c4 10             	add    esp,0x10
c001bdd4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdd9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdde:	83 c4 08             	add    esp,0x8
c001bde1:	5b                   	pop    ebx
c001bde2:	c3                   	ret    

c001bde3 <sysCallTell(regs*)>:
c001bde3:	53                   	push   ebx
c001bde4:	83 ec 08             	sub    esp,0x8
c001bde7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bdeb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bdee:	83 f8 02             	cmp    eax,0x2
c001bdf1:	76 5e                	jbe    c001be51 <sysCallTell(regs*)+0x6e>
c001bdf3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bdf8:	77 2d                	ja     c001be27 <sysCallTell(regs*)+0x44>
c001bdfa:	83 ec 0c             	sub    esp,0xc
c001bdfd:	50                   	push   eax
c001bdfe:	e8 6e 5b ff ff       	call   c0011971 <getFromFileDescriptor(int)>
c001be03:	5a                   	pop    edx
c001be04:	59                   	pop    ecx
c001be05:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001be08:	50                   	push   eax
c001be09:	e8 96 77 ff ff       	call   c00135a4 <File::tell(unsigned long long*)>
c001be0e:	83 c4 10             	add    esp,0x10
c001be11:	85 c0                	test   eax,eax
c001be13:	0f 95 c0             	setne  al
c001be16:	31 d2                	xor    edx,edx
c001be18:	0f b6 c0             	movzx  eax,al
c001be1b:	f7 d8                	neg    eax
c001be1d:	83 d2 00             	adc    edx,0x0
c001be20:	83 c4 08             	add    esp,0x8
c001be23:	f7 da                	neg    edx
c001be25:	5b                   	pop    ebx
c001be26:	c3                   	ret    
c001be27:	83 ec 08             	sub    esp,0x8
c001be2a:	50                   	push   eax
c001be2b:	68 8d c8 02 c0       	push   0xc002c88d
c001be30:	e8 98 70 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001be35:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001be38:	83 c4 10             	add    esp,0x10
c001be3b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001be41:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001be48:	31 d2                	xor    edx,edx
c001be4a:	31 c0                	xor    eax,eax
c001be4c:	83 c4 08             	add    esp,0x8
c001be4f:	5b                   	pop    ebx
c001be50:	c3                   	ret    
c001be51:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be56:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be5b:	83 c4 08             	add    esp,0x8
c001be5e:	5b                   	pop    ebx
c001be5f:	c3                   	ret    

c001be60 <sysCallSize(regs*)>:
c001be60:	53                   	push   ebx
c001be61:	83 ec 18             	sub    esp,0x18
c001be64:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001be68:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001be6b:	83 f8 02             	cmp    eax,0x2
c001be6e:	76 64                	jbe    c001bed4 <sysCallSize(regs*)+0x74>
c001be70:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001be75:	77 33                	ja     c001beaa <sysCallSize(regs*)+0x4a>
c001be77:	83 ec 0c             	sub    esp,0xc
c001be7a:	50                   	push   eax
c001be7b:	e8 f1 5a ff ff       	call   c0011971 <getFromFileDescriptor(int)>
c001be80:	83 c4 0c             	add    esp,0xc
c001be83:	8d 54 24 13          	lea    edx,[esp+0x13]
c001be87:	52                   	push   edx
c001be88:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001be8b:	50                   	push   eax
c001be8c:	e8 ab 78 ff ff       	call   c001373c <File::stat(unsigned long long*, bool*)>
c001be91:	83 c4 10             	add    esp,0x10
c001be94:	85 c0                	test   eax,eax
c001be96:	0f 95 c0             	setne  al
c001be99:	31 d2                	xor    edx,edx
c001be9b:	0f b6 c0             	movzx  eax,al
c001be9e:	f7 d8                	neg    eax
c001bea0:	83 d2 00             	adc    edx,0x0
c001bea3:	83 c4 18             	add    esp,0x18
c001bea6:	f7 da                	neg    edx
c001bea8:	5b                   	pop    ebx
c001bea9:	c3                   	ret    
c001beaa:	83 ec 08             	sub    esp,0x8
c001bead:	50                   	push   eax
c001beae:	68 a7 c8 02 c0       	push   0xc002c8a7
c001beb3:	e8 15 70 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001beb8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bebb:	83 c4 10             	add    esp,0x10
c001bebe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bec4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001becb:	31 d2                	xor    edx,edx
c001becd:	31 c0                	xor    eax,eax
c001becf:	83 c4 18             	add    esp,0x18
c001bed2:	5b                   	pop    ebx
c001bed3:	c3                   	ret    
c001bed4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bed9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bede:	83 c4 18             	add    esp,0x18
c001bee1:	5b                   	pop    ebx
c001bee2:	c3                   	ret    

c001bee3 <sysCallSizeFromFilename(regs*)>:
c001bee3:	57                   	push   edi
c001bee4:	56                   	push   esi
c001bee5:	53                   	push   ebx
c001bee6:	83 ec 20             	sub    esp,0x20
c001bee9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001beed:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bef0:	83 fb 02             	cmp    ebx,0x2
c001bef3:	0f 86 99 00 00 00    	jbe    c001bf92 <sysCallSizeFromFilename(regs*)+0xaf>
c001bef9:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001beff:	77 65                	ja     c001bf66 <sysCallSizeFromFilename(regs*)+0x83>
c001bf01:	83 ec 0c             	sub    esp,0xc
c001bf04:	68 14 01 00 00       	push   0x114
c001bf09:	e8 20 3a ff ff       	call   c000f92e <malloc>
c001bf0e:	83 c4 0c             	add    esp,0xc
c001bf11:	89 c6                	mov    esi,eax
c001bf13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf18:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf1b:	53                   	push   ebx
c001bf1c:	56                   	push   esi
c001bf1d:	e8 0a 75 ff ff       	call   c001342c <File::File(char const*, Process*)>
c001bf22:	83 c4 0c             	add    esp,0xc
c001bf25:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bf29:	50                   	push   eax
c001bf2a:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bf2d:	56                   	push   esi
c001bf2e:	e8 09 78 ff ff       	call   c001373c <File::stat(unsigned long long*, bool*)>
c001bf33:	83 c4 10             	add    esp,0x10
c001bf36:	85 f6                	test   esi,esi
c001bf38:	74 14                	je     c001bf4e <sysCallSizeFromFilename(regs*)+0x6b>
c001bf3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf3e:	8b 16                	mov    edx,DWORD PTR [esi]
c001bf40:	83 ec 0c             	sub    esp,0xc
c001bf43:	56                   	push   esi
c001bf44:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf47:	83 c4 10             	add    esp,0x10
c001bf4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf4e:	85 c0                	test   eax,eax
c001bf50:	0f 95 c0             	setne  al
c001bf53:	31 d2                	xor    edx,edx
c001bf55:	0f b6 c0             	movzx  eax,al
c001bf58:	f7 d8                	neg    eax
c001bf5a:	83 d2 00             	adc    edx,0x0
c001bf5d:	83 c4 20             	add    esp,0x20
c001bf60:	f7 da                	neg    edx
c001bf62:	5b                   	pop    ebx
c001bf63:	5e                   	pop    esi
c001bf64:	5f                   	pop    edi
c001bf65:	c3                   	ret    
c001bf66:	83 ec 08             	sub    esp,0x8
c001bf69:	53                   	push   ebx
c001bf6a:	68 a7 c8 02 c0       	push   0xc002c8a7
c001bf6f:	e8 59 6f ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001bf74:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bf77:	83 c4 10             	add    esp,0x10
c001bf7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bf80:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bf87:	31 d2                	xor    edx,edx
c001bf89:	83 c4 20             	add    esp,0x20
c001bf8c:	31 c0                	xor    eax,eax
c001bf8e:	5b                   	pop    ebx
c001bf8f:	5e                   	pop    esi
c001bf90:	5f                   	pop    edi
c001bf91:	c3                   	ret    
c001bf92:	83 c4 20             	add    esp,0x20
c001bf95:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf9a:	5b                   	pop    ebx
c001bf9b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bfa0:	5e                   	pop    esi
c001bfa1:	5f                   	pop    edi
c001bfa2:	c3                   	ret    

c001bfa3 <sysCallClose(regs*)>:
c001bfa3:	53                   	push   ebx
c001bfa4:	83 ec 08             	sub    esp,0x8
c001bfa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfab:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bfae:	83 f8 02             	cmp    eax,0x2
c001bfb1:	76 50                	jbe    c001c003 <sysCallClose(regs*)+0x60>
c001bfb3:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bfb8:	74 58                	je     c001c012 <sysCallClose(regs*)+0x6f>
c001bfba:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bfbf:	74 60                	je     c001c021 <sysCallClose(regs*)+0x7e>
c001bfc1:	77 2f                	ja     c001bff2 <sysCallClose(regs*)+0x4f>
c001bfc3:	83 ec 0c             	sub    esp,0xc
c001bfc6:	50                   	push   eax
c001bfc7:	e8 a5 59 ff ff       	call   c0011971 <getFromFileDescriptor(int)>
c001bfcc:	89 c3                	mov    ebx,eax
c001bfce:	89 04 24             	mov    DWORD PTR [esp],eax
c001bfd1:	e8 18 75 ff ff       	call   c00134ee <File::close()>
c001bfd6:	83 c4 10             	add    esp,0x10
c001bfd9:	85 db                	test   ebx,ebx
c001bfdb:	74 0c                	je     c001bfe9 <sysCallClose(regs*)+0x46>
c001bfdd:	83 ec 0c             	sub    esp,0xc
c001bfe0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bfe2:	53                   	push   ebx
c001bfe3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bfe6:	83 c4 10             	add    esp,0x10
c001bfe9:	31 c0                	xor    eax,eax
c001bfeb:	31 d2                	xor    edx,edx
c001bfed:	83 c4 08             	add    esp,0x8
c001bff0:	5b                   	pop    ebx
c001bff1:	c3                   	ret    
c001bff2:	83 ec 08             	sub    esp,0x8
c001bff5:	50                   	push   eax
c001bff6:	68 b0 c9 02 c0       	push   0xc002c9b0
c001bffb:	e8 cd 6e ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001c000:	83 c4 10             	add    esp,0x10
c001c003:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c008:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c00d:	83 c4 08             	add    esp,0x8
c001c010:	5b                   	pop    ebx
c001c011:	c3                   	ret    
c001c012:	83 ec 0c             	sub    esp,0xc
c001c015:	68 c2 c8 02 c0       	push   0xc002c8c2
c001c01a:	e8 ae 6e ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001c01f:	eb c5                	jmp    c001bfe6 <sysCallClose(regs*)+0x43>
c001c021:	83 ec 0c             	sub    esp,0xc
c001c024:	68 d0 c8 02 c0       	push   0xc002c8d0
c001c029:	eb ef                	jmp    c001c01a <sysCallClose(regs*)+0x77>

c001c02b <sysCallOpenDir(regs*)>:
c001c02b:	56                   	push   esi
c001c02c:	53                   	push   ebx
c001c02d:	53                   	push   ebx
c001c02e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c032:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001c035:	85 f6                	test   esi,esi
c001c037:	74 59                	je     c001c092 <sysCallOpenDir(regs*)+0x67>
c001c039:	83 ec 0c             	sub    esp,0xc
c001c03c:	68 14 01 00 00       	push   0x114
c001c041:	e8 e8 38 ff ff       	call   c000f92e <malloc>
c001c046:	83 c4 0c             	add    esp,0xc
c001c049:	89 c6                	mov    esi,eax
c001c04b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c050:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c053:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c056:	56                   	push   esi
c001c057:	e8 7c 78 ff ff       	call   c00138d8 <Directory::Directory(char const*, Process*)>
c001c05c:	83 c4 10             	add    esp,0x10
c001c05f:	85 f6                	test   esi,esi
c001c061:	74 2f                	je     c001c092 <sysCallOpenDir(regs*)+0x67>
c001c063:	83 ec 0c             	sub    esp,0xc
c001c066:	56                   	push   esi
c001c067:	e8 d0 78 ff ff       	call   c001393c <Directory::open()>
c001c06c:	83 c4 10             	add    esp,0x10
c001c06f:	85 c0                	test   eax,eax
c001c071:	75 1f                	jne    c001c092 <sysCallOpenDir(regs*)+0x67>
c001c073:	83 ec 0c             	sub    esp,0xc
c001c076:	56                   	push   esi
c001c077:	e8 00 56 ff ff       	call   c001167c <UnixFile::getFileDescriptor()>
c001c07c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c07f:	83 c4 10             	add    esp,0x10
c001c082:	89 02                	mov    DWORD PTR [edx],eax
c001c084:	c1 f8 1f             	sar    eax,0x1f
c001c087:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c08a:	31 c0                	xor    eax,eax
c001c08c:	59                   	pop    ecx
c001c08d:	31 d2                	xor    edx,edx
c001c08f:	5b                   	pop    ebx
c001c090:	5e                   	pop    esi
c001c091:	c3                   	ret    
c001c092:	59                   	pop    ecx
c001c093:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c098:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c09d:	5b                   	pop    ebx
c001c09e:	5e                   	pop    esi
c001c09f:	c3                   	ret    

c001c0a0 <sysCallCloseDir(regs*)>:
c001c0a0:	53                   	push   ebx
c001c0a1:	83 ec 08             	sub    esp,0x8
c001c0a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0a8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c0ab:	83 f8 02             	cmp    eax,0x2
c001c0ae:	76 47                	jbe    c001c0f7 <sysCallCloseDir(regs*)+0x57>
c001c0b0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c0b5:	77 2f                	ja     c001c0e6 <sysCallCloseDir(regs*)+0x46>
c001c0b7:	83 ec 0c             	sub    esp,0xc
c001c0ba:	50                   	push   eax
c001c0bb:	e8 b1 58 ff ff       	call   c0011971 <getFromFileDescriptor(int)>
c001c0c0:	89 c3                	mov    ebx,eax
c001c0c2:	89 04 24             	mov    DWORD PTR [esp],eax
c001c0c5:	e8 ce 78 ff ff       	call   c0013998 <Directory::close()>
c001c0ca:	83 c4 10             	add    esp,0x10
c001c0cd:	85 db                	test   ebx,ebx
c001c0cf:	74 0c                	je     c001c0dd <sysCallCloseDir(regs*)+0x3d>
c001c0d1:	83 ec 0c             	sub    esp,0xc
c001c0d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c0d6:	53                   	push   ebx
c001c0d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c0da:	83 c4 10             	add    esp,0x10
c001c0dd:	31 c0                	xor    eax,eax
c001c0df:	31 d2                	xor    edx,edx
c001c0e1:	83 c4 08             	add    esp,0x8
c001c0e4:	5b                   	pop    ebx
c001c0e5:	c3                   	ret    
c001c0e6:	83 ec 08             	sub    esp,0x8
c001c0e9:	50                   	push   eax
c001c0ea:	68 d8 c9 02 c0       	push   0xc002c9d8
c001c0ef:	e8 d9 6d ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001c0f4:	83 c4 10             	add    esp,0x10
c001c0f7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c0fc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c101:	83 c4 08             	add    esp,0x8
c001c104:	5b                   	pop    ebx
c001c105:	c3                   	ret    

c001c106 <sysCallMakeDir(regs*)>:
c001c106:	56                   	push   esi
c001c107:	53                   	push   ebx
c001c108:	83 ec 10             	sub    esp,0x10
c001c10b:	68 14 01 00 00       	push   0x114
c001c110:	e8 19 38 ff ff       	call   c000f92e <malloc>
c001c115:	83 c4 0c             	add    esp,0xc
c001c118:	89 c3                	mov    ebx,eax
c001c11a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c11f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c122:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c126:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c129:	53                   	push   ebx
c001c12a:	e8 a9 77 ff ff       	call   c00138d8 <Directory::Directory(char const*, Process*)>
c001c12f:	83 c4 10             	add    esp,0x10
c001c132:	85 db                	test   ebx,ebx
c001c134:	74 32                	je     c001c168 <sysCallMakeDir(regs*)+0x62>
c001c136:	83 ec 0c             	sub    esp,0xc
c001c139:	53                   	push   ebx
c001c13a:	e8 dd 79 ff ff       	call   c0013b1c <Directory::create()>
c001c13f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c142:	89 c6                	mov    esi,eax
c001c144:	e8 4f 78 ff ff       	call   c0013998 <Directory::close()>
c001c149:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c14b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c14e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c151:	83 c4 10             	add    esp,0x10
c001c154:	31 c0                	xor    eax,eax
c001c156:	59                   	pop    ecx
c001c157:	85 f6                	test   esi,esi
c001c159:	5b                   	pop    ebx
c001c15a:	0f 95 c0             	setne  al
c001c15d:	5e                   	pop    esi
c001c15e:	31 d2                	xor    edx,edx
c001c160:	f7 d8                	neg    eax
c001c162:	83 d2 00             	adc    edx,0x0
c001c165:	f7 da                	neg    edx
c001c167:	c3                   	ret    
c001c168:	59                   	pop    ecx
c001c169:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c16e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c173:	5b                   	pop    ebx
c001c174:	5e                   	pop    esi
c001c175:	c3                   	ret    

c001c176 <sysCallWait(regs*)>:
c001c176:	83 ec 10             	sub    esp,0x10
c001c179:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c17d:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001c180:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c183:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001c186:	e8 c7 25 00 00       	call   c001e752 <waitTask(int, int*, int)>
c001c18b:	83 c4 1c             	add    esp,0x1c
c001c18e:	99                   	cdq    
c001c18f:	c3                   	ret    

c001c190 <sysCallNotImpl(regs*)>:
c001c190:	83 ec 18             	sub    esp,0x18
c001c193:	68 de c8 02 c0       	push   0xc002c8de
c001c198:	e8 f3 e6 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c001c19d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c1a2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c1a7:	83 c4 1c             	add    esp,0x1c
c001c1aa:	c3                   	ret    

c001c1ab <sysPanic(regs*)>:
c001c1ab:	83 ec 18             	sub    esp,0x18
c001c1ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c1b2:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c1b5:	e8 d6 e6 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c001c1ba:	c7 04 24 f8 c8 02 c0 	mov    DWORD PTR [esp],0xc002c8f8
c001c1c1:	e8 ca e6 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c001c1c6:	b8 01 00 00 00       	mov    eax,0x1
c001c1cb:	31 d2                	xor    edx,edx
c001c1cd:	83 c4 1c             	add    esp,0x1c
c001c1d0:	c3                   	ret    

c001c1d1 <sysCallRmdir(regs*)>:
c001c1d1:	56                   	push   esi
c001c1d2:	53                   	push   ebx
c001c1d3:	83 ec 20             	sub    esp,0x20
c001c1d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c1da:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c1dd:	68 14 01 00 00       	push   0x114
c001c1e2:	e8 47 37 ff ff       	call   c000f92e <malloc>
c001c1e7:	83 c4 0c             	add    esp,0xc
c001c1ea:	89 c3                	mov    ebx,eax
c001c1ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1f1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c1f4:	56                   	push   esi
c001c1f5:	53                   	push   ebx
c001c1f6:	e8 31 72 ff ff       	call   c001342c <File::File(char const*, Process*)>
c001c1fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1fe:	e8 05 74 ff ff       	call   c0013608 <File::unlink()>
c001c203:	83 c4 10             	add    esp,0x10
c001c206:	85 db                	test   ebx,ebx
c001c208:	74 14                	je     c001c21e <sysCallRmdir(regs*)+0x4d>
c001c20a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c20e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c210:	83 ec 0c             	sub    esp,0xc
c001c213:	53                   	push   ebx
c001c214:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c217:	83 c4 10             	add    esp,0x10
c001c21a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c21e:	85 c0                	test   eax,eax
c001c220:	0f 95 c0             	setne  al
c001c223:	31 d2                	xor    edx,edx
c001c225:	0f b6 c0             	movzx  eax,al
c001c228:	f7 d8                	neg    eax
c001c22a:	83 d2 00             	adc    edx,0x0
c001c22d:	83 c4 14             	add    esp,0x14
c001c230:	f7 da                	neg    edx
c001c232:	5b                   	pop    ebx
c001c233:	5e                   	pop    esi
c001c234:	c3                   	ret    

c001c235 <sysCallUnlink(regs*)>:
c001c235:	56                   	push   esi
c001c236:	53                   	push   ebx
c001c237:	83 ec 20             	sub    esp,0x20
c001c23a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c23e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c241:	68 14 01 00 00       	push   0x114
c001c246:	e8 e3 36 ff ff       	call   c000f92e <malloc>
c001c24b:	83 c4 0c             	add    esp,0xc
c001c24e:	89 c3                	mov    ebx,eax
c001c250:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c255:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c258:	56                   	push   esi
c001c259:	53                   	push   ebx
c001c25a:	e8 cd 71 ff ff       	call   c001342c <File::File(char const*, Process*)>
c001c25f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c262:	e8 a1 73 ff ff       	call   c0013608 <File::unlink()>
c001c267:	83 c4 10             	add    esp,0x10
c001c26a:	85 db                	test   ebx,ebx
c001c26c:	74 14                	je     c001c282 <sysCallUnlink(regs*)+0x4d>
c001c26e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c272:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c274:	83 ec 0c             	sub    esp,0xc
c001c277:	53                   	push   ebx
c001c278:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c27b:	83 c4 10             	add    esp,0x10
c001c27e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c282:	85 c0                	test   eax,eax
c001c284:	0f 95 c0             	setne  al
c001c287:	31 d2                	xor    edx,edx
c001c289:	0f b6 c0             	movzx  eax,al
c001c28c:	f7 d8                	neg    eax
c001c28e:	83 d2 00             	adc    edx,0x0
c001c291:	83 c4 14             	add    esp,0x14
c001c294:	f7 da                	neg    edx
c001c296:	5b                   	pop    ebx
c001c297:	5e                   	pop    esi
c001c298:	c3                   	ret    

c001c299 <sysCallGetArgv(regs*)>:
c001c299:	83 ec 0c             	sub    esp,0xc
c001c29c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c2a0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001c2a3:	85 c0                	test   eax,eax
c001c2a5:	78 2b                	js     c001c2d2 <sysCallGetArgv(regs*)+0x39>
c001c2a7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c2ad:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c2b0:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001c2b6:	7d 1a                	jge    c001c2d2 <sysCallGetArgv(regs*)+0x39>
c001c2b8:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001c2bf:	85 c0                	test   eax,eax
c001c2c1:	74 17                	je     c001c2da <sysCallGetArgv(regs*)+0x41>
c001c2c3:	83 ec 08             	sub    esp,0x8
c001c2c6:	50                   	push   eax
c001c2c7:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001c2ca:	e8 59 45 fe ff       	call   c0000828 <strcpy>
c001c2cf:	83 c4 10             	add    esp,0x10
c001c2d2:	31 c0                	xor    eax,eax
c001c2d4:	31 d2                	xor    edx,edx
c001c2d6:	83 c4 0c             	add    esp,0xc
c001c2d9:	c3                   	ret    
c001c2da:	b8 01 00 00 00       	mov    eax,0x1
c001c2df:	31 d2                	xor    edx,edx
c001c2e1:	83 c4 0c             	add    esp,0xc
c001c2e4:	c3                   	ret    

c001c2e5 <sysCallTTYName(regs*)>:
c001c2e5:	56                   	push   esi
c001c2e6:	53                   	push   ebx
c001c2e7:	53                   	push   ebx
c001c2e8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c2ec:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001c2ef:	85 c0                	test   eax,eax
c001c2f1:	74 5f                	je     c001c352 <sysCallTTYName(regs*)+0x6d>
c001c2f3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001c2f6:	83 f8 02             	cmp    eax,0x2
c001c2f9:	77 3e                	ja     c001c339 <sysCallTTYName(regs*)+0x54>
c001c2fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c300:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c303:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001c309:	85 db                	test   ebx,ebx
c001c30b:	74 45                	je     c001c352 <sysCallTTYName(regs*)+0x6d>
c001c30d:	83 ec 0c             	sub    esp,0xc
c001c310:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c312:	53                   	push   ebx
c001c313:	ff 10                	call   DWORD PTR [eax]
c001c315:	83 c4 10             	add    esp,0x10
c001c318:	84 c0                	test   al,al
c001c31a:	74 41                	je     c001c35d <sysCallTTYName(regs*)+0x78>
c001c31c:	83 ec 08             	sub    esp,0x8
c001c31f:	81 c3 82 00 00 00    	add    ebx,0x82
c001c325:	53                   	push   ebx
c001c326:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c329:	e8 fa 44 fe ff       	call   c0000828 <strcpy>
c001c32e:	83 c4 10             	add    esp,0x10
c001c331:	31 c0                	xor    eax,eax
c001c333:	59                   	pop    ecx
c001c334:	31 d2                	xor    edx,edx
c001c336:	5b                   	pop    ebx
c001c337:	5e                   	pop    esi
c001c338:	c3                   	ret    
c001c339:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c33e:	74 bb                	je     c001c2fb <sysCallTTYName(regs*)+0x16>
c001c340:	83 ec 0c             	sub    esp,0xc
c001c343:	50                   	push   eax
c001c344:	e8 28 56 ff ff       	call   c0011971 <getFromFileDescriptor(int)>
c001c349:	83 c4 10             	add    esp,0x10
c001c34c:	89 c3                	mov    ebx,eax
c001c34e:	85 db                	test   ebx,ebx
c001c350:	75 bb                	jne    c001c30d <sysCallTTYName(regs*)+0x28>
c001c352:	59                   	pop    ecx
c001c353:	b8 01 00 00 00       	mov    eax,0x1
c001c358:	31 d2                	xor    edx,edx
c001c35a:	5b                   	pop    ebx
c001c35b:	5e                   	pop    esi
c001c35c:	c3                   	ret    
c001c35d:	59                   	pop    ecx
c001c35e:	b8 02 00 00 00       	mov    eax,0x2
c001c363:	31 d2                	xor    edx,edx
c001c365:	5b                   	pop    ebx
c001c366:	5e                   	pop    esi
c001c367:	c3                   	ret    

c001c368 <sysCallUSleep(regs*)>:
c001c368:	83 ec 14             	sub    esp,0x14
c001c36b:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c370:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c374:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c37b:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c37e:	01 ca                	add    edx,ecx
c001c380:	52                   	push   edx
c001c381:	50                   	push   eax
c001c382:	e8 a2 24 00 00       	call   c001e829 <nanoSleep(unsigned long long)>
c001c387:	31 c0                	xor    eax,eax
c001c389:	31 d2                	xor    edx,edx
c001c38b:	83 c4 1c             	add    esp,0x1c
c001c38e:	c3                   	ret    

c001c38f <sysCallSpawn(regs*)>:
c001c38f:	56                   	push   esi
c001c390:	53                   	push   ebx
c001c391:	50                   	push   eax
c001c392:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c396:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c399:	85 c0                	test   eax,eax
c001c39b:	75 08                	jne    c001c3a5 <sysCallSpawn(regs*)+0x16>
c001c39d:	59                   	pop    ecx
c001c39e:	31 c0                	xor    eax,eax
c001c3a0:	31 d2                	xor    edx,edx
c001c3a2:	5b                   	pop    ebx
c001c3a3:	5e                   	pop    esi
c001c3a4:	c3                   	ret    
c001c3a5:	83 ec 08             	sub    esp,0x8
c001c3a8:	50                   	push   eax
c001c3a9:	68 07 c9 02 c0       	push   0xc002c907
c001c3ae:	e8 1a 6b ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001c3b3:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001c3ba:	e8 6f 35 ff ff       	call   c000f92e <malloc>
c001c3bf:	83 c4 10             	add    esp,0x10
c001c3c2:	89 c6                	mov    esi,eax
c001c3c4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c3c7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c3ca:	85 c0                	test   eax,eax
c001c3cc:	75 32                	jne    c001c400 <sysCallSpawn(regs*)+0x71>
c001c3ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3d3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c3d6:	52                   	push   edx
c001c3d7:	50                   	push   eax
c001c3d8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3db:	56                   	push   esi
c001c3dc:	e8 25 1b 00 00       	call   c001df06 <Process::Process(char const*, Process*, char**)>
c001c3e1:	83 c4 10             	add    esp,0x10
c001c3e4:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c3eb:	75 b0                	jne    c001c39d <sysCallSpawn(regs*)+0xe>
c001c3ed:	83 ec 0c             	sub    esp,0xc
c001c3f0:	56                   	push   esi
c001c3f1:	e8 f2 1f 00 00       	call   c001e3e8 <Process::createUserThread()>
c001c3f6:	8b 06                	mov    eax,DWORD PTR [esi]
c001c3f8:	83 c4 10             	add    esp,0x10
c001c3fb:	99                   	cdq    
c001c3fc:	59                   	pop    ecx
c001c3fd:	5b                   	pop    ebx
c001c3fe:	5e                   	pop    esi
c001c3ff:	c3                   	ret    
c001c400:	31 c0                	xor    eax,eax
c001c402:	eb d2                	jmp    c001c3d6 <sysCallSpawn(regs*)+0x47>

c001c404 <sysCallGetEnv(regs*)>:
c001c404:	55                   	push   ebp
c001c405:	57                   	push   edi
c001c406:	56                   	push   esi
c001c407:	53                   	push   ebx
c001c408:	83 ec 28             	sub    esp,0x28
c001c40b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c40f:	68 15 c9 02 c0       	push   0xc002c915
c001c414:	e8 b4 6a ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001c419:	5f                   	pop    edi
c001c41a:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c41d:	5d                   	pop    ebp
c001c41e:	53                   	push   ebx
c001c41f:	68 42 cc 02 c0       	push   0xc002cc42
c001c424:	e8 a4 6a ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001c429:	58                   	pop    eax
c001c42a:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c42d:	5a                   	pop    edx
c001c42e:	57                   	push   edi
c001c42f:	68 1e c9 02 c0       	push   0xc002c91e
c001c434:	e8 94 6a ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001c439:	59                   	pop    ecx
c001c43a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c43f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c442:	e8 65 e3 ff ff       	call   c001a7ac <Krnl::getProcessTotalEnvCount(Process*)>
c001c447:	5a                   	pop    edx
c001c448:	89 c5                	mov    ebp,eax
c001c44a:	59                   	pop    ecx
c001c44b:	50                   	push   eax
c001c44c:	68 28 c9 02 c0       	push   0xc002c928
c001c451:	e8 77 6a ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001c456:	83 c4 10             	add    esp,0x10
c001c459:	39 ef                	cmp    edi,ebp
c001c45b:	7c 15                	jl     c001c472 <sysCallGetEnv(regs*)+0x6e>
c001c45d:	85 db                	test   ebx,ebx
c001c45f:	75 0c                	jne    c001c46d <sysCallGetEnv(regs*)+0x69>
c001c461:	83 c4 1c             	add    esp,0x1c
c001c464:	31 c0                	xor    eax,eax
c001c466:	5b                   	pop    ebx
c001c467:	31 d2                	xor    edx,edx
c001c469:	5e                   	pop    esi
c001c46a:	5f                   	pop    edi
c001c46b:	5d                   	pop    ebp
c001c46c:	c3                   	ret    
c001c46d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c470:	eb ef                	jmp    c001c461 <sysCallGetEnv(regs*)+0x5d>
c001c472:	83 ec 0c             	sub    esp,0xc
c001c475:	68 34 c9 02 c0       	push   0xc002c934
c001c47a:	e8 4e 6a ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001c47f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c483:	83 c4 0c             	add    esp,0xc
c001c486:	57                   	push   edi
c001c487:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c48d:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c490:	50                   	push   eax
c001c491:	e8 36 e3 ff ff       	call   c001a7cc <Krnl::getProcessEnvPair(Process*, int)>
c001c496:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c49a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c49e:	68 f3 cc 02 c0       	push   0xc002ccf3
c001c4a3:	e8 25 6a ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001c4a8:	83 c4 10             	add    esp,0x10
c001c4ab:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c4ae:	85 f6                	test   esi,esi
c001c4b0:	75 47                	jne    c001c4f9 <sysCallGetEnv(regs*)+0xf5>
c001c4b2:	83 ec 0c             	sub    esp,0xc
c001c4b5:	55                   	push   ebp
c001c4b6:	e8 cd 42 fe ff       	call   c0000788 <strlen>
c001c4bb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c4be:	89 c3                	mov    ebx,eax
c001c4c0:	e8 c3 42 fe ff       	call   c0000788 <strlen>
c001c4c5:	5a                   	pop    edx
c001c4c6:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c4ca:	59                   	pop    ecx
c001c4cb:	50                   	push   eax
c001c4cc:	68 37 c9 02 c0       	push   0xc002c937
c001c4d1:	e8 f7 69 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001c4d6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c4d9:	e8 aa 42 fe ff       	call   c0000788 <strlen>
c001c4de:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c4e1:	89 c3                	mov    ebx,eax
c001c4e3:	e8 a0 42 fe ff       	call   c0000788 <strlen>
c001c4e8:	83 c4 10             	add    esp,0x10
c001c4eb:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c4ef:	83 c4 1c             	add    esp,0x1c
c001c4f2:	31 d2                	xor    edx,edx
c001c4f4:	5b                   	pop    ebx
c001c4f5:	5e                   	pop    esi
c001c4f6:	5f                   	pop    edi
c001c4f7:	5d                   	pop    ebp
c001c4f8:	c3                   	ret    
c001c4f9:	83 ec 0c             	sub    esp,0xc
c001c4fc:	68 0d cd 02 c0       	push   0xc002cd0d
c001c501:	e8 c7 69 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001c506:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c509:	58                   	pop    eax
c001c50a:	5a                   	pop    edx
c001c50b:	55                   	push   ebp
c001c50c:	53                   	push   ebx
c001c50d:	e8 16 43 fe ff       	call   c0000828 <strcpy>
c001c512:	59                   	pop    ecx
c001c513:	5e                   	pop    esi
c001c514:	68 41 c9 02 c0       	push   0xc002c941
c001c519:	53                   	push   ebx
c001c51a:	e8 49 44 fe ff       	call   c0000968 <strcat>
c001c51f:	5d                   	pop    ebp
c001c520:	58                   	pop    eax
c001c521:	57                   	push   edi
c001c522:	53                   	push   ebx
c001c523:	e8 40 44 fe ff       	call   c0000968 <strcat>
c001c528:	c7 04 24 27 cd 02 c0 	mov    DWORD PTR [esp],0xc002cd27
c001c52f:	e8 99 69 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001c534:	83 c4 10             	add    esp,0x10
c001c537:	e9 25 ff ff ff       	jmp    c001c461 <sysCallGetEnv(regs*)+0x5d>

c001c53c <sysAppSettings(regs*)>:
c001c53c:	57                   	push   edi
c001c53d:	56                   	push   esi
c001c53e:	56                   	push   esi
c001c53f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c543:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c546:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001c54c:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c551:	66 3d c0 09          	cmp    ax,0x9c0
c001c555:	75 2e                	jne    c001c585 <sysAppSettings(regs*)+0x49>
c001c557:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001c55d:	83 e0 1f             	and    eax,0x1f
c001c560:	3c 01                	cmp    al,0x1
c001c562:	74 2c                	je     c001c590 <sysAppSettings(regs*)+0x54>
c001c564:	3c 07                	cmp    al,0x7
c001c566:	0f 84 b4 00 00 00    	je     c001c620 <sysAppSettings(regs*)+0xe4>
c001c56c:	84 c0                	test   al,al
c001c56e:	0f 84 d3 00 00 00    	je     c001c647 <sysAppSettings(regs*)+0x10b>
c001c574:	3c 08                	cmp    al,0x8
c001c576:	74 64                	je     c001c5dc <sysAppSettings(regs*)+0xa0>
c001c578:	59                   	pop    ecx
c001c579:	0f b6 c0             	movzx  eax,al
c001c57c:	5e                   	pop    esi
c001c57d:	05 e8 03 00 00       	add    eax,0x3e8
c001c582:	5f                   	pop    edi
c001c583:	99                   	cdq    
c001c584:	c3                   	ret    
c001c585:	b8 01 00 00 00       	mov    eax,0x1
c001c58a:	59                   	pop    ecx
c001c58b:	31 d2                	xor    edx,edx
c001c58d:	5e                   	pop    esi
c001c58e:	5f                   	pop    edi
c001c58f:	c3                   	ret    
c001c590:	50                   	push   eax
c001c591:	68 00 01 00 00       	push   0x100
c001c596:	6a 00                	push   0x0
c001c598:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c59d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c5a0:	83 c0 0c             	add    eax,0xc
c001c5a3:	50                   	push   eax
c001c5a4:	e8 c3 41 fe ff       	call   c000076c <memset>
c001c5a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5ae:	b9 ff 00 00 00       	mov    ecx,0xff
c001c5b3:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001c5b6:	83 c7 0c             	add    edi,0xc
c001c5b9:	fc                   	cld    
c001c5ba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c5bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5c1:	5a                   	pop    edx
c001c5c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c5c5:	59                   	pop    ecx
c001c5c6:	8d 50 0c             	lea    edx,[eax+0xc]
c001c5c9:	52                   	push   edx
c001c5ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c5d0:	e8 c7 45 ff ff       	call   c0010b9c <VgaText::setTitle(char*)>
c001c5d5:	83 c4 10             	add    esp,0x10
c001c5d8:	31 c0                	xor    eax,eax
c001c5da:	eb ae                	jmp    c001c58a <sysAppSettings(regs*)+0x4e>
c001c5dc:	83 ec 08             	sub    esp,0x8
c001c5df:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c5e5:	83 e0 0f             	and    eax,0xf
c001c5e8:	50                   	push   eax
c001c5e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c5f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c5f7:	e8 92 45 ff ff       	call   c0010b8e <VgaText::setTitleColour(VgaColour)>
c001c5fc:	5f                   	pop    edi
c001c5fd:	58                   	pop    eax
c001c5fe:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c604:	c1 e8 04             	shr    eax,0x4
c001c607:	83 e0 0f             	and    eax,0xf
c001c60a:	50                   	push   eax
c001c60b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c610:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c613:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c619:	e8 62 45 ff ff       	call   c0010b80 <VgaText::setTitleTextColour(VgaColour)>
c001c61e:	eb b5                	jmp    c001c5d5 <sysAppSettings(regs*)+0x99>
c001c620:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c625:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c628:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c62e:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001c634:	c0 e8 06             	shr    al,0x6
c001c637:	83 e0 01             	and    eax,0x1
c001c63a:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c640:	31 c0                	xor    eax,eax
c001c642:	e9 43 ff ff ff       	jmp    c001c58a <sysAppSettings(regs*)+0x4e>
c001c647:	b8 02 00 00 00       	mov    eax,0x2
c001c64c:	e9 39 ff ff ff       	jmp    c001c58a <sysAppSettings(regs*)+0x4e>

c001c651 <sysSetFatAttrib(regs*)>:
c001c651:	57                   	push   edi
c001c652:	56                   	push   esi
c001c653:	53                   	push   ebx
c001c654:	83 ec 1c             	sub    esp,0x1c
c001c657:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c65b:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c65e:	68 14 01 00 00       	push   0x114
c001c663:	e8 c6 32 ff ff       	call   c000f92e <malloc>
c001c668:	83 c4 0c             	add    esp,0xc
c001c66b:	89 c3                	mov    ebx,eax
c001c66d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c672:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c675:	57                   	push   edi
c001c676:	53                   	push   ebx
c001c677:	e8 b0 6d ff ff       	call   c001342c <File::File(char const*, Process*)>
c001c67c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c67f:	83 c4 0c             	add    esp,0xc
c001c682:	0f b6 d4             	movzx  edx,ah
c001c685:	0f b6 c0             	movzx  eax,al
c001c688:	52                   	push   edx
c001c689:	50                   	push   eax
c001c68a:	53                   	push   ebx
c001c68b:	e8 12 70 ff ff       	call   c00136a2 <File::chfatattr(unsigned char, unsigned char)>
c001c690:	83 c4 10             	add    esp,0x10
c001c693:	85 db                	test   ebx,ebx
c001c695:	74 14                	je     c001c6ab <sysSetFatAttrib(regs*)+0x5a>
c001c697:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c69b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c69d:	83 ec 0c             	sub    esp,0xc
c001c6a0:	53                   	push   ebx
c001c6a1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c6a4:	83 c4 10             	add    esp,0x10
c001c6a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c6ab:	85 c0                	test   eax,eax
c001c6ad:	0f 95 c0             	setne  al
c001c6b0:	31 d2                	xor    edx,edx
c001c6b2:	0f b6 c0             	movzx  eax,al
c001c6b5:	f7 d8                	neg    eax
c001c6b7:	83 d2 00             	adc    edx,0x0
c001c6ba:	83 c4 10             	add    esp,0x10
c001c6bd:	f7 da                	neg    edx
c001c6bf:	5b                   	pop    ebx
c001c6c0:	5e                   	pop    esi
c001c6c1:	5f                   	pop    edi
c001c6c2:	c3                   	ret    

c001c6c3 <sysPipe(regs*)>:
c001c6c3:	57                   	push   edi
c001c6c4:	56                   	push   esi
c001c6c5:	53                   	push   ebx
c001c6c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6ca:	83 ec 0c             	sub    esp,0xc
c001c6cd:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c6d0:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c6d3:	6a 20                	push   0x20
c001c6d5:	e8 54 32 ff ff       	call   c000f92e <malloc>
c001c6da:	89 c3                	mov    ebx,eax
c001c6dc:	58                   	pop    eax
c001c6dd:	5a                   	pop    edx
c001c6de:	68 00 50 00 00       	push   0x5000
c001c6e3:	53                   	push   ebx
c001c6e4:	e8 5b 3e ff ff       	call   c0010544 <Pipe::Pipe(int)>
c001c6e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c6ec:	e8 8b 4f ff ff       	call   c001167c <UnixFile::getFileDescriptor()>
c001c6f1:	89 07                	mov    DWORD PTR [edi],eax
c001c6f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c6f6:	e8 81 4f ff ff       	call   c001167c <UnixFile::getFileDescriptor()>
c001c6fb:	83 c4 10             	add    esp,0x10
c001c6fe:	89 06                	mov    DWORD PTR [esi],eax
c001c700:	31 d2                	xor    edx,edx
c001c702:	5b                   	pop    ebx
c001c703:	31 c0                	xor    eax,eax
c001c705:	5e                   	pop    esi
c001c706:	5f                   	pop    edi
c001c707:	c3                   	ret    

c001c708 <sysGetUnixTime(regs*)>:
c001c708:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c001c70d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c713:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c717:	e9 02 77 ff ff       	jmp    c0013e1e <Clock::timeInSecondsLocal()>

c001c71c <string_ends_with(char const*, char const*)>:
c001c71c:	57                   	push   edi
c001c71d:	56                   	push   esi
c001c71e:	53                   	push   ebx
c001c71f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c723:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c727:	83 ec 0c             	sub    esp,0xc
c001c72a:	53                   	push   ebx
c001c72b:	e8 58 40 fe ff       	call   c0000788 <strlen>
c001c730:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c733:	89 c6                	mov    esi,eax
c001c735:	e8 4e 40 fe ff       	call   c0000788 <strlen>
c001c73a:	83 c4 10             	add    esp,0x10
c001c73d:	39 c6                	cmp    esi,eax
c001c73f:	7d 06                	jge    c001c747 <string_ends_with(char const*, char const*)+0x2b>
c001c741:	5b                   	pop    ebx
c001c742:	31 c0                	xor    eax,eax
c001c744:	5e                   	pop    esi
c001c745:	5f                   	pop    edi
c001c746:	c3                   	ret    
c001c747:	83 ec 08             	sub    esp,0x8
c001c74a:	29 c6                	sub    esi,eax
c001c74c:	57                   	push   edi
c001c74d:	01 f3                	add    ebx,esi
c001c74f:	53                   	push   ebx
c001c750:	e8 5f 41 fe ff       	call   c00008b4 <strcmp>
c001c755:	83 c4 10             	add    esp,0x10
c001c758:	85 c0                	test   eax,eax
c001c75a:	5b                   	pop    ebx
c001c75b:	0f 94 c0             	sete   al
c001c75e:	5e                   	pop    esi
c001c75f:	0f b6 c0             	movzx  eax,al
c001c762:	5f                   	pop    edi
c001c763:	c3                   	ret    

c001c764 <sysCallOpen(regs*)>:
c001c764:	56                   	push   esi
c001c765:	53                   	push   ebx
c001c766:	81 ec 04 01 00 00    	sub    esp,0x104
c001c76c:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c773:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c776:	85 c9                	test   ecx,ecx
c001c778:	0f 84 b3 00 00 00    	je     c001c831 <sysCallOpen(regs*)+0xcd>
c001c77e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c781:	85 c0                	test   eax,eax
c001c783:	0f 84 a8 00 00 00    	je     c001c831 <sysCallOpen(regs*)+0xcd>
c001c789:	52                   	push   edx
c001c78a:	68 43 c9 02 c0       	push   0xc002c943
c001c78f:	50                   	push   eax
c001c790:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c794:	56                   	push   esi
c001c795:	e8 e8 6a ff ff       	call   c0013282 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c79a:	89 34 24             	mov    DWORD PTR [esp],esi
c001c79d:	e8 e6 3f fe ff       	call   c0000788 <strlen>
c001c7a2:	83 c4 10             	add    esp,0x10
c001c7a5:	48                   	dec    eax
c001c7a6:	74 1d                	je     c001c7c5 <sysCallOpen(regs*)+0x61>
c001c7a8:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c7ab:	eb 0f                	jmp    c001c7bc <sysCallOpen(regs*)+0x58>
c001c7ad:	80 fa 3a             	cmp    dl,0x3a
c001c7b0:	74 0f                	je     c001c7c1 <sysCallOpen(regs*)+0x5d>
c001c7b2:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c7b6:	48                   	dec    eax
c001c7b7:	74 0c                	je     c001c7c5 <sysCallOpen(regs*)+0x61>
c001c7b9:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c7bc:	80 fa 2e             	cmp    dl,0x2e
c001c7bf:	75 ec                	jne    c001c7ad <sysCallOpen(regs*)+0x49>
c001c7c1:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c7c5:	83 ec 08             	sub    esp,0x8
c001c7c8:	68 47 c9 02 c0       	push   0xc002c947
c001c7cd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c7d0:	e8 47 ff ff ff       	call   c001c71c <string_ends_with(char const*, char const*)>
c001c7d5:	83 c4 10             	add    esp,0x10
c001c7d8:	85 c0                	test   eax,eax
c001c7da:	75 17                	jne    c001c7f3 <sysCallOpen(regs*)+0x8f>
c001c7dc:	83 ec 08             	sub    esp,0x8
c001c7df:	68 68 c9 02 c0       	push   0xc002c968
c001c7e4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c7e7:	e8 30 ff ff ff       	call   c001c71c <string_ends_with(char const*, char const*)>
c001c7ec:	83 c4 10             	add    esp,0x10
c001c7ef:	85 c0                	test   eax,eax
c001c7f1:	74 51                	je     c001c844 <sysCallOpen(regs*)+0xe0>
c001c7f3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c7f6:	83 ec 08             	sub    esp,0x8
c001c7f9:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c7ff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c806:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c809:	ff 30                	push   DWORD PTR [eax]
c001c80b:	68 4c c9 02 c0       	push   0xc002c94c
c001c810:	e8 b8 66 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001c815:	c7 04 24 5b c9 02 c0 	mov    DWORD PTR [esp],0xc002c95b
c001c81c:	e8 ac 66 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001c821:	83 c4 10             	add    esp,0x10
c001c824:	81 c4 04 01 00 00    	add    esp,0x104
c001c82a:	31 c0                	xor    eax,eax
c001c82c:	31 d2                	xor    edx,edx
c001c82e:	5b                   	pop    ebx
c001c82f:	5e                   	pop    esi
c001c830:	c3                   	ret    
c001c831:	81 c4 04 01 00 00    	add    esp,0x104
c001c837:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c83c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c841:	5b                   	pop    ebx
c001c842:	5e                   	pop    esi
c001c843:	c3                   	ret    
c001c844:	83 ec 08             	sub    esp,0x8
c001c847:	68 48 c9 02 c0       	push   0xc002c948
c001c84c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c84f:	e8 60 40 fe ff       	call   c00008b4 <strcmp>
c001c854:	83 c4 10             	add    esp,0x10
c001c857:	85 c0                	test   eax,eax
c001c859:	74 98                	je     c001c7f3 <sysCallOpen(regs*)+0x8f>
c001c85b:	83 ec 08             	sub    esp,0x8
c001c85e:	68 47 c9 02 c0       	push   0xc002c947
c001c863:	56                   	push   esi
c001c864:	e8 b3 fe ff ff       	call   c001c71c <string_ends_with(char const*, char const*)>
c001c869:	83 c4 10             	add    esp,0x10
c001c86c:	85 c0                	test   eax,eax
c001c86e:	75 83                	jne    c001c7f3 <sysCallOpen(regs*)+0x8f>
c001c870:	83 ec 08             	sub    esp,0x8
c001c873:	68 6d c9 02 c0       	push   0xc002c96d
c001c878:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c87b:	e8 9c fe ff ff       	call   c001c71c <string_ends_with(char const*, char const*)>
c001c880:	83 c4 10             	add    esp,0x10
c001c883:	85 c0                	test   eax,eax
c001c885:	0f 85 d9 00 00 00    	jne    c001c964 <sysCallOpen(regs*)+0x200>
c001c88b:	83 ec 08             	sub    esp,0x8
c001c88e:	68 72 c9 02 c0       	push   0xc002c972
c001c893:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c896:	e8 81 fe ff ff       	call   c001c71c <string_ends_with(char const*, char const*)>
c001c89b:	83 c4 10             	add    esp,0x10
c001c89e:	85 c0                	test   eax,eax
c001c8a0:	0f 85 be 00 00 00    	jne    c001c964 <sysCallOpen(regs*)+0x200>
c001c8a6:	83 ec 08             	sub    esp,0x8
c001c8a9:	68 6e c9 02 c0       	push   0xc002c96e
c001c8ae:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c8b1:	e8 fe 3f fe ff       	call   c00008b4 <strcmp>
c001c8b6:	83 c4 10             	add    esp,0x10
c001c8b9:	85 c0                	test   eax,eax
c001c8bb:	0f 84 a3 00 00 00    	je     c001c964 <sysCallOpen(regs*)+0x200>
c001c8c1:	83 ec 08             	sub    esp,0x8
c001c8c4:	68 6d c9 02 c0       	push   0xc002c96d
c001c8c9:	56                   	push   esi
c001c8ca:	e8 4d fe ff ff       	call   c001c71c <string_ends_with(char const*, char const*)>
c001c8cf:	83 c4 10             	add    esp,0x10
c001c8d2:	85 c0                	test   eax,eax
c001c8d4:	0f 85 8a 00 00 00    	jne    c001c964 <sysCallOpen(regs*)+0x200>
c001c8da:	83 ec 0c             	sub    esp,0xc
c001c8dd:	68 14 01 00 00       	push   0x114
c001c8e2:	e8 47 30 ff ff       	call   c000f92e <malloc>
c001c8e7:	83 c4 0c             	add    esp,0xc
c001c8ea:	89 c6                	mov    esi,eax
c001c8ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8f1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c8f4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c8f7:	56                   	push   esi
c001c8f8:	e8 2f 6b ff ff       	call   c001342c <File::File(char const*, Process*)>
c001c8fd:	83 c4 10             	add    esp,0x10
c001c900:	85 f6                	test   esi,esi
c001c902:	0f 84 29 ff ff ff    	je     c001c831 <sysCallOpen(regs*)+0xcd>
c001c908:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c90b:	0f b6 c2             	movzx  eax,dl
c001c90e:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c911:	89 d0                	mov    eax,edx
c001c913:	83 e0 01             	and    eax,0x1
c001c916:	f6 c2 02             	test   dl,0x2
c001c919:	74 03                	je     c001c91e <sysCallOpen(regs*)+0x1ba>
c001c91b:	83 c8 02             	or     eax,0x2
c001c91e:	f6 c2 04             	test   dl,0x4
c001c921:	74 03                	je     c001c926 <sysCallOpen(regs*)+0x1c2>
c001c923:	83 c8 04             	or     eax,0x4
c001c926:	f6 c2 08             	test   dl,0x8
c001c929:	74 03                	je     c001c92e <sysCallOpen(regs*)+0x1ca>
c001c92b:	83 c8 0a             	or     eax,0xa
c001c92e:	83 e2 10             	and    edx,0x10
c001c931:	74 03                	je     c001c936 <sysCallOpen(regs*)+0x1d2>
c001c933:	83 c8 12             	or     eax,0x12
c001c936:	83 ec 08             	sub    esp,0x8
c001c939:	50                   	push   eax
c001c93a:	56                   	push   esi
c001c93b:	e8 50 6b ff ff       	call   c0013490 <File::open(FileOpenMode)>
c001c940:	83 c4 10             	add    esp,0x10
c001c943:	85 c0                	test   eax,eax
c001c945:	0f 85 e6 fe ff ff    	jne    c001c831 <sysCallOpen(regs*)+0xcd>
c001c94b:	83 ec 0c             	sub    esp,0xc
c001c94e:	56                   	push   esi
c001c94f:	e8 28 4d ff ff       	call   c001167c <UnixFile::getFileDescriptor()>
c001c954:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c957:	89 02                	mov    DWORD PTR [edx],eax
c001c959:	c1 f8 1f             	sar    eax,0x1f
c001c95c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c95f:	e9 bd fe ff ff       	jmp    c001c821 <sysCallOpen(regs*)+0xbd>
c001c964:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c967:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c96d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c974:	e9 ab fe ff ff       	jmp    c001c824 <sysCallOpen(regs*)+0xc0>

c001c979 <Sys::loadSyscalls()>:
c001c979:	c7 05 60 1a 03 c0 68 ba 01 c0 	mov    DWORD PTR ds:0xc0031a60,0xc001ba68
c001c983:	c7 05 64 1a 03 c0 cc b5 01 c0 	mov    DWORD PTR ds:0xc0031a64,0xc001b5cc
c001c98d:	c7 05 68 1a 03 c0 bb b7 01 c0 	mov    DWORD PTR ds:0xc0031a68,0xc001b7bb
c001c997:	c7 05 6c 1a 03 c0 9e b9 01 c0 	mov    DWORD PTR ds:0xc0031a6c,0xc001b99e
c001c9a1:	c7 05 70 1a 03 c0 53 b7 01 c0 	mov    DWORD PTR ds:0xc0031a70,0xc001b753
c001c9ab:	c7 05 74 1a 03 c0 03 b6 01 c0 	mov    DWORD PTR ds:0xc0031a74,0xc001b603
c001c9b5:	c7 05 78 1a 03 c0 e4 b5 01 c0 	mov    DWORD PTR ds:0xc0031a78,0xc001b5e4
c001c9bf:	c7 05 7c 1a 03 c0 10 b8 01 c0 	mov    DWORD PTR ds:0xc0031a7c,0xc001b810
c001c9c9:	c7 05 84 1a 03 c0 a3 bf 01 c0 	mov    DWORD PTR ds:0xc0031a84,0xc001bfa3
c001c9d3:	c7 05 80 1a 03 c0 64 c7 01 c0 	mov    DWORD PTR ds:0xc0031a80,0xc001c764
c001c9dd:	c7 05 88 1a 03 c0 2b c0 01 c0 	mov    DWORD PTR ds:0xc0031a88,0xc001c02b
c001c9e7:	c7 05 8c 1a 03 c0 92 bc 01 c0 	mov    DWORD PTR ds:0xc0031a8c,0xc001bc92
c001c9f1:	c7 05 90 1a 03 c0 ae ba 01 c0 	mov    DWORD PTR ds:0xc0031a90,0xc001baae
c001c9fb:	c7 05 94 1a 03 c0 b3 ba 01 c0 	mov    DWORD PTR ds:0xc0031a94,0xc001bab3
c001ca05:	c7 05 98 1a 03 c0 06 c1 01 c0 	mov    DWORD PTR ds:0xc0031a98,0xc001c106
c001ca0f:	c7 05 9c 1a 03 c0 a0 c0 01 c0 	mov    DWORD PTR ds:0xc0031a9c,0xc001c0a0
c001ca19:	c7 05 a0 1a 03 c0 7a bd 01 c0 	mov    DWORD PTR ds:0xc0031aa0,0xc001bd7a
c001ca23:	c7 05 a4 1a 03 c0 e3 bd 01 c0 	mov    DWORD PTR ds:0xc0031aa4,0xc001bde3
c001ca2d:	c7 05 a8 1a 03 c0 60 be 01 c0 	mov    DWORD PTR ds:0xc0031aa8,0xc001be60
c001ca37:	c7 05 ac 1a 03 c0 b8 ba 01 c0 	mov    DWORD PTR ds:0xc0031aac,0xc001bab8
c001ca41:	c7 05 b0 1a 03 c0 76 c1 01 c0 	mov    DWORD PTR ds:0xc0031ab0,0xc001c176
c001ca4b:	c7 05 b4 1a 03 c0 90 c1 01 c0 	mov    DWORD PTR ds:0xc0031ab4,0xc001c190
c001ca55:	c7 05 b8 1a 03 c0 90 c1 01 c0 	mov    DWORD PTR ds:0xc0031ab8,0xc001c190
c001ca5f:	c7 05 bc 1a 03 c0 d1 c1 01 c0 	mov    DWORD PTR ds:0xc0031abc,0xc001c1d1
c001ca69:	c7 05 c0 1a 03 c0 35 c2 01 c0 	mov    DWORD PTR ds:0xc0031ac0,0xc001c235
c001ca73:	c7 05 c4 1a 03 c0 64 bc 01 c0 	mov    DWORD PTR ds:0xc0031ac4,0xc001bc64
c001ca7d:	c7 05 c8 1a 03 c0 99 c2 01 c0 	mov    DWORD PTR ds:0xc0031ac8,0xc001c299
c001ca87:	c7 05 cc 1a 03 c0 21 bc 01 c0 	mov    DWORD PTR ds:0xc0031acc,0xc001bc21
c001ca91:	c7 05 d0 1a 03 c0 e5 c2 01 c0 	mov    DWORD PTR ds:0xc0031ad0,0xc001c2e5
c001ca9b:	c7 05 d4 1a 03 c0 20 bd 01 c0 	mov    DWORD PTR ds:0xc0031ad4,0xc001bd20
c001caa5:	c7 05 d8 1a 03 c0 68 c3 01 c0 	mov    DWORD PTR ds:0xc0031ad8,0xc001c368
c001caaf:	c7 05 dc 1a 03 c0 e3 be 01 c0 	mov    DWORD PTR ds:0xc0031adc,0xc001bee3
c001cab9:	c7 05 e0 1a 03 c0 8f c3 01 c0 	mov    DWORD PTR ds:0xc0031ae0,0xc001c38f
c001cac3:	c7 05 e4 1a 03 c0 04 c4 01 c0 	mov    DWORD PTR ds:0xc0031ae4,0xc001c404
c001cacd:	c7 05 e8 1a 03 c0 3c c5 01 c0 	mov    DWORD PTR ds:0xc0031ae8,0xc001c53c
c001cad7:	c7 05 ec 1a 03 c0 c2 ba 01 c0 	mov    DWORD PTR ds:0xc0031aec,0xc001bac2
c001cae1:	c7 05 f0 1a 03 c0 2c bb 01 c0 	mov    DWORD PTR ds:0xc0031af0,0xc001bb2c
c001caeb:	c7 05 f4 1a 03 c0 72 bb 01 c0 	mov    DWORD PTR ds:0xc0031af4,0xc001bb72
c001caf5:	c7 05 f8 1a 03 c0 51 c6 01 c0 	mov    DWORD PTR ds:0xc0031af8,0xc001c651
c001caff:	c7 05 fc 1a 03 c0 ab c1 01 c0 	mov    DWORD PTR ds:0xc0031afc,0xc001c1ab
c001cb09:	c7 05 00 1b 03 c0 c3 bb 01 c0 	mov    DWORD PTR ds:0xc0031b00,0xc001bbc3
c001cb13:	c7 05 04 1b 03 c0 c3 c6 01 c0 	mov    DWORD PTR ds:0xc0031b04,0xc001c6c3
c001cb1d:	c7 05 08 1b 03 c0 08 c7 01 c0 	mov    DWORD PTR ds:0xc0031b08,0xc001c708
c001cb27:	c7 05 0c 1b 03 c0 ab b6 01 c0 	mov    DWORD PTR ds:0xc0031b0c,0xc001b6ab
c001cb31:	c7 05 10 1b 03 c0 2c b8 01 c0 	mov    DWORD PTR ds:0xc0031b10,0xc001b82c
c001cb3b:	c7 05 14 1b 03 c0 54 b9 01 c0 	mov    DWORD PTR ds:0xc0031b14,0xc001b954
c001cb45:	c7 05 18 1b 03 c0 96 b5 01 c0 	mov    DWORD PTR ds:0xc0031b18,0xc001b596
c001cb4f:	c7 05 1c 1b 03 c0 06 ba 01 c0 	mov    DWORD PTR ds:0xc0031b1c,0xc001ba06
c001cb59:	c7 05 20 1b 03 c0 0f b6 01 c0 	mov    DWORD PTR ds:0xc0031b20,0xc001b60f
c001cb63:	c7 05 24 1b 03 c0 26 b6 01 c0 	mov    DWORD PTR ds:0xc0031b24,0xc001b626
c001cb6d:	c3                   	ret    

c001cb6e <Sys::systemCall(regs*, void*)>:
c001cb6e:	53                   	push   ebx
c001cb6f:	83 ec 08             	sub    esp,0x8
c001cb72:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cb76:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cb79:	83 f8 7f             	cmp    eax,0x7f
c001cb7c:	77 16                	ja     c001cb94 <Sys::systemCall(regs*, void*)+0x26>
c001cb7e:	8b 14 85 60 1a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce5a0]
c001cb85:	85 d2                	test   edx,edx
c001cb87:	74 0b                	je     c001cb94 <Sys::systemCall(regs*, void*)+0x26>
c001cb89:	83 ec 0c             	sub    esp,0xc
c001cb8c:	53                   	push   ebx
c001cb8d:	ff d2                	call   edx
c001cb8f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001cb92:	eb 0d                	jmp    c001cba1 <Sys::systemCall(regs*, void*)+0x33>
c001cb94:	52                   	push   edx
c001cb95:	52                   	push   edx
c001cb96:	50                   	push   eax
c001cb97:	68 77 c9 02 c0       	push   0xc002c977
c001cb9c:	e8 2c 63 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001cba1:	83 c4 10             	add    esp,0x10
c001cba4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cba9:	31 d2                	xor    edx,edx
c001cbab:	83 c4 08             	add    esp,0x8
c001cbae:	5b                   	pop    ebx
c001cbaf:	c3                   	ret    

c001cbb0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001cbb0:	55                   	push   ebp
c001cbb1:	57                   	push   edi
c001cbb2:	56                   	push   esi
c001cbb3:	53                   	push   ebx
c001cbb4:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001cbba:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cbc1:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001cbc8:	85 c0                	test   eax,eax
c001cbca:	0f 95 c1             	setne  cl
c001cbcd:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001cbd5:	0f 94 c2             	sete   dl
c001cbd8:	84 d1                	test   cl,dl
c001cbda:	74 23                	je     c001cbff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cbdc:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001cbe2:	74 1b                	je     c001cbff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cbe4:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cbea:	89 da                	mov    edx,ebx
c001cbec:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001cbf2:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001cbf8:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001cbff:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001cc06:	05 ff 0f 00 00       	add    eax,0xfff
c001cc0b:	83 ec 0c             	sub    esp,0xc
c001cc0e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cc12:	8d aa ff 0f 00 00    	lea    ebp,[edx+0xfff]
c001cc18:	c1 e8 0c             	shr    eax,0xc
c001cc1b:	89 ee                	mov    esi,ebp
c001cc1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc21:	c1 ee 0c             	shr    esi,0xc
c001cc24:	6a 01                	push   0x1
c001cc26:	e8 9c 4e ff ff       	call   c0011ac7 <Virt::allocateKernelVirtualPages(int)>
c001cc2b:	89 c7                	mov    edi,eax
c001cc2d:	58                   	pop    eax
c001cc2e:	5a                   	pop    edx
c001cc2f:	56                   	push   esi
c001cc30:	68 fb c9 02 c0       	push   0xc002c9fb
c001cc35:	e8 93 62 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001cc3a:	59                   	pop    ecx
c001cc3b:	58                   	pop    eax
c001cc3c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cc40:	68 0d ca 02 c0       	push   0xc002ca0d
c001cc45:	e8 83 62 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001cc4a:	83 c4 10             	add    esp,0x10
c001cc4d:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001cc53:	0f 86 30 01 00 00    	jbe    c001cd89 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d9>
c001cc59:	c1 e6 0c             	shl    esi,0xc
c001cc5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc5f:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001cc62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc66:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001cc6d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001cc70:	01 dd                	add    ebp,ebx
c001cc72:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c001cc75:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001cc79:	0f 84 07 01 00 00    	je     c001cd86 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d6>
c001cc7f:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001cc85:	76 05                	jbe    c001cc8c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001cc87:	bd 00 10 00 00       	mov    ebp,0x1000
c001cc8c:	83 ec 0c             	sub    esp,0xc
c001cc8f:	31 d2                	xor    edx,edx
c001cc91:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cc98:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cc9a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001cc9e:	50                   	push   eax
c001cc9f:	8d 74 24 30          	lea    esi,[esp+0x30]
c001cca3:	56                   	push   esi
c001cca4:	52                   	push   edx
c001cca5:	55                   	push   ebp
c001cca6:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001ccad:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ccb0:	83 c4 20             	add    esp,0x20
c001ccb3:	85 c0                	test   eax,eax
c001ccb5:	74 0a                	je     c001ccc1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001ccb7:	53                   	push   ebx
c001ccb8:	53                   	push   ebx
c001ccb9:	50                   	push   eax
c001ccba:	68 1f ca 02 c0       	push   0xc002ca1f
c001ccbf:	eb 0f                	jmp    c001ccd0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001ccc1:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001ccc5:	74 20                	je     c001cce7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001ccc7:	51                   	push   ecx
c001ccc8:	51                   	push   ecx
c001ccc9:	6a 00                	push   0x0
c001cccb:	68 4a ca 02 c0       	push   0xc002ca4a
c001ccd0:	e8 f8 61 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001ccd5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ccd8:	e8 aa 52 ff ff       	call   c0011f87 <Virt::freeKernelVirtualPages(unsigned long)>
c001ccdd:	83 c4 10             	add    esp,0x10
c001cce0:	31 c0                	xor    eax,eax
c001cce2:	e9 67 01 00 00       	jmp    c001ce4e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29e>
c001cce7:	fa                   	cli    
c001cce8:	ff 05 28 24 03 c0    	inc    DWORD PTR ds:0xc0032428
c001ccee:	e8 a7 32 ff ff       	call   c000ff9a <Phys::allocatePage()>
c001ccf3:	6a 07                	push   0x7
c001ccf5:	89 c5                	mov    ebp,eax
c001ccf7:	57                   	push   edi
c001ccf8:	50                   	push   eax
c001ccf9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ccfe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd01:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd07:	e8 f2 55 ff ff       	call   c00122fe <VAS::mapPage(unsigned long, unsigned long, int)>
c001cd0c:	83 c4 0c             	add    esp,0xc
c001cd0f:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cd16:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd1c:	6a 00                	push   0x0
c001cd1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd23:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd26:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd2c:	e8 27 54 ff ff       	call   c0012158 <VAS::mapOtherVASIn(bool, VAS*)>
c001cd31:	58                   	pop    eax
c001cd32:	5a                   	pop    edx
c001cd33:	68 07 0c 00 00       	push   0xc07
c001cd38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001cd3c:	55                   	push   ebp
c001cd3d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cd44:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd4a:	6a 00                	push   0x0
c001cd4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd51:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd54:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd5a:	e8 5b 59 ff ff       	call   c00126ba <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cd5f:	b9 00 10 00 00       	mov    ecx,0x1000
c001cd64:	fc                   	cld    
c001cd65:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cd67:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c001cd6c:	83 c4 20             	add    esp,0x20
c001cd6f:	48                   	dec    eax
c001cd70:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c001cd75:	85 c0                	test   eax,eax
c001cd77:	75 01                	jne    c001cd7a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ca>
c001cd79:	fb                   	sti    
c001cd7a:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001cd81:	e9 e0 fe ff ff       	jmp    c001cc66 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001cd86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001cd89:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001cd91:	0f 86 a9 00 00 00    	jbe    c001ce40 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x290>
c001cd97:	fa                   	cli    
c001cd98:	ff 05 28 24 03 c0    	inc    DWORD PTR ds:0xc0032428
c001cd9e:	51                   	push   ecx
c001cd9f:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cda6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cdac:	6a 00                	push   0x0
c001cdae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cdb3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cdb6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cdbc:	e8 97 53 ff ff       	call   c0012158 <VAS::mapOtherVASIn(bool, VAS*)>
c001cdc1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cdc5:	c1 e6 0c             	shl    esi,0xc
c001cdc8:	01 de                	add    esi,ebx
c001cdca:	83 c4 10             	add    esp,0x10
c001cdcd:	39 de                	cmp    esi,ebx
c001cdcf:	74 61                	je     c001ce32 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x282>
c001cdd1:	e8 c4 31 ff ff       	call   c000ff9a <Phys::allocatePage()>
c001cdd6:	6a 07                	push   0x7
c001cdd8:	89 c5                	mov    ebp,eax
c001cdda:	57                   	push   edi
c001cddb:	50                   	push   eax
c001cddc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cde1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cde4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cdea:	e8 0f 55 ff ff       	call   c00122fe <VAS::mapPage(unsigned long, unsigned long, int)>
c001cdef:	58                   	pop    eax
c001cdf0:	5a                   	pop    edx
c001cdf1:	68 07 0c 00 00       	push   0xc07
c001cdf6:	53                   	push   ebx
c001cdf7:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cdfd:	55                   	push   ebp
c001cdfe:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ce05:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ce0b:	6a 00                	push   0x0
c001ce0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce12:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ce15:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ce1b:	e8 9a 58 ff ff       	call   c00126ba <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ce20:	83 c4 1c             	add    esp,0x1c
c001ce23:	68 00 10 00 00       	push   0x1000
c001ce28:	6a 00                	push   0x0
c001ce2a:	57                   	push   edi
c001ce2b:	e8 3c 39 fe ff       	call   c000076c <memset>
c001ce30:	eb 98                	jmp    c001cdca <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21a>
c001ce32:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c001ce37:	48                   	dec    eax
c001ce38:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c001ce3d:	75 01                	jne    c001ce40 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x290>
c001ce3f:	fb                   	sti    
c001ce40:	83 ec 0c             	sub    esp,0xc
c001ce43:	57                   	push   edi
c001ce44:	e8 3e 51 ff ff       	call   c0011f87 <Virt::freeKernelVirtualPages(unsigned long)>
c001ce49:	83 c4 10             	add    esp,0x10
c001ce4c:	b0 01                	mov    al,0x1
c001ce4e:	81 c4 2c 10 00 00    	add    esp,0x102c
c001ce54:	5b                   	pop    ebx
c001ce55:	5e                   	pop    esi
c001ce56:	5f                   	pop    edi
c001ce57:	5d                   	pop    ebp
c001ce58:	c3                   	ret    

c001ce59 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001ce59:	55                   	push   ebp
c001ce5a:	57                   	push   edi
c001ce5b:	56                   	push   esi
c001ce5c:	53                   	push   ebx
c001ce5d:	83 ec 48             	sub    esp,0x48
c001ce60:	68 14 01 00 00       	push   0x114
c001ce65:	e8 c4 2a ff ff       	call   c000f92e <malloc>
c001ce6a:	83 c4 0c             	add    esp,0xc
c001ce6d:	89 c6                	mov    esi,eax
c001ce6f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001ce73:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ce77:	50                   	push   eax
c001ce78:	e8 af 65 ff ff       	call   c001342c <File::File(char const*, Process*)>
c001ce7d:	58                   	pop    eax
c001ce7e:	5a                   	pop    edx
c001ce7f:	6a 01                	push   0x1
c001ce81:	56                   	push   esi
c001ce82:	e8 09 66 ff ff       	call   c0013490 <File::open(FileOpenMode)>
c001ce87:	83 c4 10             	add    esp,0x10
c001ce8a:	85 c0                	test   eax,eax
c001ce8c:	0f 85 47 01 00 00    	jne    c001cfd9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce92:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ce9a:	83 ec 0c             	sub    esp,0xc
c001ce9d:	6a 34                	push   0x34
c001ce9f:	e8 8a 2a ff ff       	call   c000f92e <malloc>
c001cea4:	89 c3                	mov    ebx,eax
c001cea6:	58                   	pop    eax
c001cea7:	8b 06                	mov    eax,DWORD PTR [esi]
c001cea9:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cead:	57                   	push   edi
c001ceae:	53                   	push   ebx
c001ceaf:	6a 00                	push   0x0
c001ceb1:	6a 34                	push   0x34
c001ceb3:	56                   	push   esi
c001ceb4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ceb7:	83 c4 20             	add    esp,0x20
c001ceba:	85 c0                	test   eax,eax
c001cebc:	0f 85 17 01 00 00    	jne    c001cfd9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cec2:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cec8:	0f 85 0b 01 00 00    	jne    c001cfd9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cece:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ced1:	85 c0                	test   eax,eax
c001ced3:	0f 84 00 01 00 00    	je     c001cfd9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ced9:	31 d2                	xor    edx,edx
c001cedb:	55                   	push   ebp
c001cedc:	52                   	push   edx
c001cedd:	50                   	push   eax
c001cede:	56                   	push   esi
c001cedf:	e8 6a 66 ff ff       	call   c001354e <File::seek(unsigned long long)>
c001cee4:	83 c4 10             	add    esp,0x10
c001cee7:	85 c0                	test   eax,eax
c001cee9:	0f 85 ea 00 00 00    	jne    c001cfd9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ceef:	83 ec 0c             	sub    esp,0xc
c001cef2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cef5:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cef9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cefd:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cf01:	0f af c2             	imul   eax,edx
c001cf04:	50                   	push   eax
c001cf05:	e8 24 2a ff ff       	call   c000f92e <malloc>
c001cf0a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cf0c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cf10:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf13:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf17:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cf1b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cf1f:	0f af c2             	imul   eax,edx
c001cf22:	99                   	cdq    
c001cf23:	52                   	push   edx
c001cf24:	50                   	push   eax
c001cf25:	56                   	push   esi
c001cf26:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf29:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cf2c:	83 c4 20             	add    esp,0x20
c001cf2f:	85 c0                	test   eax,eax
c001cf31:	0f 84 a2 00 00 00    	je     c001cfd9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cf37:	31 d2                	xor    edx,edx
c001cf39:	51                   	push   ecx
c001cf3a:	52                   	push   edx
c001cf3b:	50                   	push   eax
c001cf3c:	56                   	push   esi
c001cf3d:	e8 0c 66 ff ff       	call   c001354e <File::seek(unsigned long long)>
c001cf42:	83 c4 10             	add    esp,0x10
c001cf45:	85 c0                	test   eax,eax
c001cf47:	0f 85 8c 00 00 00    	jne    c001cfd9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cf4d:	83 ec 0c             	sub    esp,0xc
c001cf50:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cf54:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cf58:	31 ed                	xor    ebp,ebp
c001cf5a:	0f af c2             	imul   eax,edx
c001cf5d:	50                   	push   eax
c001cf5e:	e8 cb 29 ff ff       	call   c000f92e <malloc>
c001cf63:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cf65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cf69:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf70:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cf74:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cf78:	0f af c2             	imul   eax,edx
c001cf7b:	99                   	cdq    
c001cf7c:	52                   	push   edx
c001cf7d:	50                   	push   eax
c001cf7e:	56                   	push   esi
c001cf7f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf82:	83 c4 20             	add    esp,0x20
c001cf85:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cf8d:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cf91:	0f 86 80 00 00 00    	jbe    c001d017 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cf97:	0f b7 fd             	movzx  edi,bp
c001cf9a:	c1 e7 05             	shl    edi,0x5
c001cf9d:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cfa1:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cfa4:	75 6b                	jne    c001d011 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cfa6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cfa9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cfad:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cfb0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cfb4:	52                   	push   edx
c001cfb5:	31 d2                	xor    edx,edx
c001cfb7:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cfba:	52                   	push   edx
c001cfbb:	50                   	push   eax
c001cfbc:	56                   	push   esi
c001cfbd:	e8 8c 65 ff ff       	call   c001354e <File::seek(unsigned long long)>
c001cfc2:	83 c4 10             	add    esp,0x10
c001cfc5:	85 c0                	test   eax,eax
c001cfc7:	74 17                	je     c001cfe0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cfc9:	83 ec 0c             	sub    esp,0xc
c001cfcc:	68 76 ca 02 c0       	push   0xc002ca76
c001cfd1:	e8 f7 5e ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001cfd6:	83 c4 10             	add    esp,0x10
c001cfd9:	31 c0                	xor    eax,eax
c001cfdb:	e9 87 00 00 00       	jmp    c001d067 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cfe0:	83 ec 0c             	sub    esp,0xc
c001cfe3:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cfe6:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cfe9:	50                   	push   eax
c001cfea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cfee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cff2:	56                   	push   esi
c001cff3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cff7:	e8 b4 fb ff ff       	call   c001cbb0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cffc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d000:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001d004:	83 c4 20             	add    esp,0x20
c001d007:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001d00b:	73 04                	jae    c001d011 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001d00d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d011:	45                   	inc    ebp
c001d012:	e9 76 ff ff ff       	jmp    c001cf8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001d017:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d01b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d01f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d023:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001d029:	83 ec 0c             	sub    esp,0xc
c001d02c:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001d032:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d037:	05 00 10 00 00       	add    eax,0x1000
c001d03c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001d03f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d043:	e8 f6 28 ff ff       	call   c000f93e <free>
c001d048:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d04b:	e8 ee 28 ff ff       	call   c000f93e <free>
c001d050:	58                   	pop    eax
c001d051:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d055:	e8 e4 28 ff ff       	call   c000f93e <free>
c001d05a:	89 34 24             	mov    DWORD PTR [esp],esi
c001d05d:	e8 8c 64 ff ff       	call   c00134ee <File::close()>
c001d062:	83 c4 10             	add    esp,0x10
c001d065:	b0 01                	mov    al,0x1
c001d067:	83 c4 3c             	add    esp,0x3c
c001d06a:	5b                   	pop    ebx
c001d06b:	5e                   	pop    esi
c001d06c:	5f                   	pop    edi
c001d06d:	5d                   	pop    ebp
c001d06e:	c3                   	ret    

c001d06f <Thr::runtimeReferenceHelper()>:
c001d06f:	83 ec 18             	sub    esp,0x18
c001d072:	68 7e ca 02 c0       	push   0xc002ca7e
c001d077:	e8 51 5e ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001d07c:	fa                   	cli    
c001d07d:	83 c4 10             	add    esp,0x10
c001d080:	eb fe                	jmp    c001d080 <Thr::runtimeReferenceHelper()+0x11>

c001d082 <Thr::getAddressOfKernelSymbol(char const*)>:
c001d082:	57                   	push   edi
c001d083:	56                   	push   esi
c001d084:	53                   	push   ebx
c001d085:	31 db                	xor    ebx,ebx
c001d087:	39 1d 00 24 03 c0    	cmp    DWORD PTR ds:0xc0032400,ebx
c001d08d:	7e 3c                	jle    c001d0cb <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001d08f:	8b 34 9d 80 23 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcdc80]
c001d096:	31 ff                	xor    edi,edi
c001d098:	39 3c 9d 80 22 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcdd80],edi
c001d09f:	7e 27                	jle    c001d0c8 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001d0a1:	50                   	push   eax
c001d0a2:	50                   	push   eax
c001d0a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d0a7:	8b 06                	mov    eax,DWORD PTR [esi]
c001d0a9:	03 04 9d 00 23 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcdd00]
c001d0b0:	50                   	push   eax
c001d0b1:	e8 fe 37 fe ff       	call   c00008b4 <strcmp>
c001d0b6:	83 c4 10             	add    esp,0x10
c001d0b9:	85 c0                	test   eax,eax
c001d0bb:	75 05                	jne    c001d0c2 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001d0bd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001d0c0:	eb 0b                	jmp    c001d0cd <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001d0c2:	83 c6 10             	add    esi,0x10
c001d0c5:	47                   	inc    edi
c001d0c6:	eb d0                	jmp    c001d098 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001d0c8:	43                   	inc    ebx
c001d0c9:	eb bc                	jmp    c001d087 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001d0cb:	31 c0                	xor    eax,eax
c001d0cd:	5b                   	pop    ebx
c001d0ce:	5e                   	pop    esi
c001d0cf:	5f                   	pop    edi
c001d0d0:	c3                   	ret    

c001d0d1 <Thr::loadKernelSymbolTable(char const*)>:
c001d0d1:	55                   	push   ebp
c001d0d2:	57                   	push   edi
c001d0d3:	56                   	push   esi
c001d0d4:	53                   	push   ebx
c001d0d5:	83 ec 68             	sub    esp,0x68
c001d0d8:	8b 35 50 24 03 c0    	mov    esi,DWORD PTR ds:0xc0032450
c001d0de:	68 14 01 00 00       	push   0x114
c001d0e3:	e8 46 28 ff ff       	call   c000f92e <malloc>
c001d0e8:	83 c4 0c             	add    esp,0xc
c001d0eb:	89 c3                	mov    ebx,eax
c001d0ed:	56                   	push   esi
c001d0ee:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001d0f2:	50                   	push   eax
c001d0f3:	e8 34 63 ff ff       	call   c001342c <File::File(char const*, Process*)>
c001d0f8:	5e                   	pop    esi
c001d0f9:	5f                   	pop    edi
c001d0fa:	6a 01                	push   0x1
c001d0fc:	53                   	push   ebx
c001d0fd:	e8 8e 63 ff ff       	call   c0013490 <File::open(FileOpenMode)>
c001d102:	83 c4 10             	add    esp,0x10
c001d105:	85 c0                	test   eax,eax
c001d107:	74 0a                	je     c001d113 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001d109:	83 ec 0c             	sub    esp,0xc
c001d10c:	68 a0 ca 02 c0       	push   0xc002caa0
c001d111:	eb 34                	jmp    c001d147 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001d113:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001d11b:	83 ec 0c             	sub    esp,0xc
c001d11e:	6a 34                	push   0x34
c001d120:	e8 09 28 ff ff       	call   c000f92e <malloc>
c001d125:	59                   	pop    ecx
c001d126:	89 c7                	mov    edi,eax
c001d128:	8d 74 24 34          	lea    esi,[esp+0x34]
c001d12c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d12e:	56                   	push   esi
c001d12f:	57                   	push   edi
c001d130:	6a 00                	push   0x0
c001d132:	6a 34                	push   0x34
c001d134:	53                   	push   ebx
c001d135:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d138:	83 c4 20             	add    esp,0x20
c001d13b:	85 c0                	test   eax,eax
c001d13d:	74 17                	je     c001d156 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001d13f:	83 ec 0c             	sub    esp,0xc
c001d142:	68 b7 ca 02 c0       	push   0xc002cab7
c001d147:	e8 44 d7 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c001d14c:	83 c4 10             	add    esp,0x10
c001d14f:	31 c0                	xor    eax,eax
c001d151:	e9 31 02 00 00       	jmp    c001d387 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001d156:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d15c:	75 e1                	jne    c001d13f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d15e:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d161:	85 c0                	test   eax,eax
c001d163:	74 da                	je     c001d13f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d165:	52                   	push   edx
c001d166:	31 d2                	xor    edx,edx
c001d168:	52                   	push   edx
c001d169:	50                   	push   eax
c001d16a:	53                   	push   ebx
c001d16b:	e8 de 63 ff ff       	call   c001354e <File::seek(unsigned long long)>
c001d170:	83 c4 10             	add    esp,0x10
c001d173:	85 c0                	test   eax,eax
c001d175:	75 c8                	jne    c001d13f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d177:	83 ec 0c             	sub    esp,0xc
c001d17a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d17e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d182:	31 ed                	xor    ebp,ebp
c001d184:	0f af c2             	imul   eax,edx
c001d187:	50                   	push   eax
c001d188:	e8 a1 27 ff ff       	call   c000f92e <malloc>
c001d18d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d18f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d193:	89 34 24             	mov    DWORD PTR [esp],esi
c001d196:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d19a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d19e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d1a2:	0f af c2             	imul   eax,edx
c001d1a5:	99                   	cdq    
c001d1a6:	52                   	push   edx
c001d1a7:	50                   	push   eax
c001d1a8:	53                   	push   ebx
c001d1a9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1ac:	83 c4 20             	add    esp,0x20
c001d1af:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d1b7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d1bf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d1c7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d1cf:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001d1d3:	0f 86 aa 00 00 00    	jbe    c001d283 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001d1d9:	0f b7 f5             	movzx  esi,bp
c001d1dc:	6b f6 28             	imul   esi,esi,0x28
c001d1df:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d1e3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d1e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d1ea:	50                   	push   eax
c001d1eb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d1ef:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001d1f3:	8b 16                	mov    edx,DWORD PTR [esi]
c001d1f5:	6b c0 28             	imul   eax,eax,0x28
c001d1f8:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001d1fc:	89 d0                	mov    eax,edx
c001d1fe:	31 d2                	xor    edx,edx
c001d200:	52                   	push   edx
c001d201:	50                   	push   eax
c001d202:	53                   	push   ebx
c001d203:	e8 46 63 ff ff       	call   c001354e <File::seek(unsigned long long)>
c001d208:	83 c4 0c             	add    esp,0xc
c001d20b:	6a 20                	push   0x20
c001d20d:	6a 00                	push   0x0
c001d20f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d213:	52                   	push   edx
c001d214:	e8 53 35 fe ff       	call   c000076c <memset>
c001d219:	58                   	pop    eax
c001d21a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d21c:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001d220:	51                   	push   ecx
c001d221:	8d 54 24 40          	lea    edx,[esp+0x40]
c001d225:	52                   	push   edx
c001d226:	6a 00                	push   0x0
c001d228:	6a 1f                	push   0x1f
c001d22a:	53                   	push   ebx
c001d22b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d22e:	83 c4 18             	add    esp,0x18
c001d231:	68 ce ca 02 c0       	push   0xc002cace
c001d236:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d23a:	52                   	push   edx
c001d23b:	e8 74 36 fe ff       	call   c00008b4 <strcmp>
c001d240:	83 c4 10             	add    esp,0x10
c001d243:	85 c0                	test   eax,eax
c001d245:	75 0f                	jne    c001d256 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001d247:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d24a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d24e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d252:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d256:	50                   	push   eax
c001d257:	50                   	push   eax
c001d258:	68 d6 ca 02 c0       	push   0xc002cad6
c001d25d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d261:	50                   	push   eax
c001d262:	e8 4d 36 fe ff       	call   c00008b4 <strcmp>
c001d267:	83 c4 10             	add    esp,0x10
c001d26a:	85 c0                	test   eax,eax
c001d26c:	75 0f                	jne    c001d27d <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001d26e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d271:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d275:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d279:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d27d:	45                   	inc    ebp
c001d27e:	e9 4c ff ff ff       	jmp    c001d1cf <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001d283:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d288:	75 10                	jne    c001d29a <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001d28a:	83 ec 0c             	sub    esp,0xc
c001d28d:	68 de ca 02 c0       	push   0xc002cade
c001d292:	e8 f9 d5 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c001d297:	83 c4 10             	add    esp,0x10
c001d29a:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001d29f:	75 10                	jne    c001d2b1 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001d2a1:	83 ec 0c             	sub    esp,0xc
c001d2a4:	68 de ca 02 c0       	push   0xc002cade
c001d2a9:	e8 e2 d5 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c001d2ae:	83 c4 10             	add    esp,0x10
c001d2b1:	31 d2                	xor    edx,edx
c001d2b3:	50                   	push   eax
c001d2b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2b8:	52                   	push   edx
c001d2b9:	50                   	push   eax
c001d2ba:	53                   	push   ebx
c001d2bb:	e8 8e 62 ff ff       	call   c001354e <File::seek(unsigned long long)>
c001d2c0:	5a                   	pop    edx
c001d2c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d2c5:	e8 64 26 ff ff       	call   c000f92e <malloc>
c001d2ca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d2ce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d2d2:	31 c9                	xor    ecx,ecx
c001d2d4:	5e                   	pop    esi
c001d2d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d2d7:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001d2db:	55                   	push   ebp
c001d2dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2e0:	51                   	push   ecx
c001d2e1:	52                   	push   edx
c001d2e2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001d2e6:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001d2ea:	53                   	push   ebx
c001d2eb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d2ee:	83 c4 14             	add    esp,0x14
c001d2f1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d2f5:	e8 34 26 ff ff       	call   c000f92e <malloc>
c001d2fa:	89 c6                	mov    esi,eax
c001d2fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d2fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d301:	56                   	push   esi
c001d302:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d306:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d30a:	51                   	push   ecx
c001d30b:	52                   	push   edx
c001d30c:	53                   	push   ebx
c001d30d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d310:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d314:	8b 15 00 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032400
c001d31a:	83 c4 1c             	add    esp,0x1c
c001d31d:	c1 e8 04             	shr    eax,0x4
c001d320:	89 04 95 80 22 03 c0 	mov    DWORD PTR [edx*4-0x3ffcdd80],eax
c001d327:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d32b:	31 d2                	xor    edx,edx
c001d32d:	52                   	push   edx
c001d32e:	50                   	push   eax
c001d32f:	53                   	push   ebx
c001d330:	e8 19 62 ff ff       	call   c001354e <File::seek(unsigned long long)>
c001d335:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d337:	31 d2                	xor    edx,edx
c001d339:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d33c:	56                   	push   esi
c001d33d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d341:	52                   	push   edx
c001d342:	50                   	push   eax
c001d343:	53                   	push   ebx
c001d344:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d347:	83 c4 14             	add    esp,0x14
c001d34a:	53                   	push   ebx
c001d34b:	e8 9e 61 ff ff       	call   c00134ee <File::close()>
c001d350:	5d                   	pop    ebp
c001d351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d355:	e8 e4 25 ff ff       	call   c000f93e <free>
c001d35a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d35d:	e8 dc 25 ff ff       	call   c000f93e <free>
c001d362:	a1 00 24 03 c0       	mov    eax,ds:0xc0032400
c001d367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d36b:	8d 50 01             	lea    edx,[eax+0x1]
c001d36e:	89 0c 85 80 23 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdc80],ecx
c001d375:	89 34 85 00 23 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdd00],esi
c001d37c:	89 15 00 24 03 c0    	mov    DWORD PTR ds:0xc0032400,edx
c001d382:	83 c4 10             	add    esp,0x10
c001d385:	b0 01                	mov    al,0x1
c001d387:	83 c4 5c             	add    esp,0x5c
c001d38a:	5b                   	pop    ebx
c001d38b:	5e                   	pop    esi
c001d38c:	5f                   	pop    edi
c001d38d:	5d                   	pop    ebp
c001d38e:	c3                   	ret    

c001d38f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d38f:	55                   	push   ebp
c001d390:	57                   	push   edi
c001d391:	56                   	push   esi
c001d392:	53                   	push   ebx
c001d393:	81 ec 68 03 00 00    	sub    esp,0x368
c001d399:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d3a0:	8b 1d 50 24 03 c0    	mov    ebx,DWORD PTR ds:0xc0032450
c001d3a6:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d3aa:	68 14 01 00 00       	push   0x114
c001d3af:	e8 7a 25 ff ff       	call   c000f92e <malloc>
c001d3b4:	83 c4 0c             	add    esp,0xc
c001d3b7:	89 c5                	mov    ebp,eax
c001d3b9:	53                   	push   ebx
c001d3ba:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d3c1:	50                   	push   eax
c001d3c2:	e8 65 60 ff ff       	call   c001342c <File::File(char const*, Process*)>
c001d3c7:	5e                   	pop    esi
c001d3c8:	5f                   	pop    edi
c001d3c9:	6a 01                	push   0x1
c001d3cb:	55                   	push   ebp
c001d3cc:	e8 bf 60 ff ff       	call   c0013490 <File::open(FileOpenMode)>
c001d3d1:	83 c4 10             	add    esp,0x10
c001d3d4:	85 c0                	test   eax,eax
c001d3d6:	0f 85 a7 06 00 00    	jne    c001da83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d3dc:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d3e4:	83 ec 0c             	sub    esp,0xc
c001d3e7:	6a 34                	push   0x34
c001d3e9:	e8 40 25 ff ff       	call   c000f92e <malloc>
c001d3ee:	5b                   	pop    ebx
c001d3ef:	89 c7                	mov    edi,eax
c001d3f1:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d3f5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d3f8:	53                   	push   ebx
c001d3f9:	57                   	push   edi
c001d3fa:	6a 00                	push   0x0
c001d3fc:	6a 34                	push   0x34
c001d3fe:	55                   	push   ebp
c001d3ff:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d402:	83 c4 20             	add    esp,0x20
c001d405:	85 c0                	test   eax,eax
c001d407:	0f 85 76 06 00 00    	jne    c001da83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d40d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d413:	0f 85 6a 06 00 00    	jne    c001da83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d419:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d41c:	85 c0                	test   eax,eax
c001d41e:	0f 84 5f 06 00 00    	je     c001da83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d424:	31 d2                	xor    edx,edx
c001d426:	51                   	push   ecx
c001d427:	52                   	push   edx
c001d428:	50                   	push   eax
c001d429:	55                   	push   ebp
c001d42a:	e8 1f 61 ff ff       	call   c001354e <File::seek(unsigned long long)>
c001d42f:	83 c4 10             	add    esp,0x10
c001d432:	85 c0                	test   eax,eax
c001d434:	0f 85 49 06 00 00    	jne    c001da83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d43a:	83 ec 0c             	sub    esp,0xc
c001d43d:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d440:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d444:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d448:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d44c:	0f af c2             	imul   eax,edx
c001d44f:	50                   	push   eax
c001d450:	e8 d9 24 ff ff       	call   c000f92e <malloc>
c001d455:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d458:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d45c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d45f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d463:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d467:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d46b:	0f af c2             	imul   eax,edx
c001d46e:	99                   	cdq    
c001d46f:	52                   	push   edx
c001d470:	50                   	push   eax
c001d471:	55                   	push   ebp
c001d472:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d475:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d478:	83 c4 20             	add    esp,0x20
c001d47b:	85 c0                	test   eax,eax
c001d47d:	0f 84 00 06 00 00    	je     c001da83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d483:	52                   	push   edx
c001d484:	31 d2                	xor    edx,edx
c001d486:	52                   	push   edx
c001d487:	50                   	push   eax
c001d488:	55                   	push   ebp
c001d489:	e8 c0 60 ff ff       	call   c001354e <File::seek(unsigned long long)>
c001d48e:	83 c4 10             	add    esp,0x10
c001d491:	85 c0                	test   eax,eax
c001d493:	0f 85 ea 05 00 00    	jne    c001da83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d499:	83 ec 0c             	sub    esp,0xc
c001d49c:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d4a0:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d4a4:	31 f6                	xor    esi,esi
c001d4a6:	0f af c2             	imul   eax,edx
c001d4a9:	50                   	push   eax
c001d4aa:	e8 7f 24 ff ff       	call   c000f92e <malloc>
c001d4af:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d4b2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d4b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d4b9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d4bd:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d4c1:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d4c5:	0f af c2             	imul   eax,edx
c001d4c8:	99                   	cdq    
c001d4c9:	52                   	push   edx
c001d4ca:	50                   	push   eax
c001d4cb:	55                   	push   ebp
c001d4cc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d4cf:	83 c4 20             	add    esp,0x20
c001d4d2:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d4d6:	0f 86 8a 00 00 00    	jbe    c001d566 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d4dc:	0f b7 de             	movzx  ebx,si
c001d4df:	c1 e3 05             	shl    ebx,0x5
c001d4e2:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d4e6:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d4e9:	75 75                	jne    c001d560 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d4eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d4ee:	31 d2                	xor    edx,edx
c001d4f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d4f4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d4f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d4fb:	50                   	push   eax
c001d4fc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d4ff:	52                   	push   edx
c001d500:	50                   	push   eax
c001d501:	55                   	push   ebp
c001d502:	e8 47 60 ff ff       	call   c001354e <File::seek(unsigned long long)>
c001d507:	83 c4 10             	add    esp,0x10
c001d50a:	85 c0                	test   eax,eax
c001d50c:	0f 85 71 05 00 00    	jne    c001da83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d512:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d519:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d51c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d520:	31 d2                	xor    edx,edx
c001d522:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d526:	83 ec 0c             	sub    esp,0xc
c001d529:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d52d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d534:	50                   	push   eax
c001d535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d539:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d53d:	52                   	push   edx
c001d53e:	50                   	push   eax
c001d53f:	55                   	push   ebp
c001d540:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d543:	83 c4 1c             	add    esp,0x1c
c001d546:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d549:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d54c:	50                   	push   eax
c001d54d:	6a 00                	push   0x0
c001d54f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d553:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d557:	50                   	push   eax
c001d558:	e8 0f 32 fe ff       	call   c000076c <memset>
c001d55d:	83 c4 10             	add    esp,0x10
c001d560:	46                   	inc    esi
c001d561:	e9 6c ff ff ff       	jmp    c001d4d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d566:	53                   	push   ebx
c001d567:	31 db                	xor    ebx,ebx
c001d569:	68 00 01 00 00       	push   0x100
c001d56e:	6a 00                	push   0x0
c001d570:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d574:	50                   	push   eax
c001d575:	e8 f2 31 fe ff       	call   c000076c <memset>
c001d57a:	83 c4 0c             	add    esp,0xc
c001d57d:	68 00 01 00 00       	push   0x100
c001d582:	6a 00                	push   0x0
c001d584:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d58b:	50                   	push   eax
c001d58c:	e8 db 31 fe ff       	call   c000076c <memset>
c001d591:	83 c4 10             	add    esp,0x10
c001d594:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d59c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d5a4:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d5ac:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d5b4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d5bc:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d5c0:	0f 86 30 01 00 00    	jbe    c001d6f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d5c6:	0f b7 f3             	movzx  esi,bx
c001d5c9:	6b f6 28             	imul   esi,esi,0x28
c001d5cc:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d5d0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d5d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d5d7:	52                   	push   edx
c001d5d8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d5dc:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d5e0:	8b 06                	mov    eax,DWORD PTR [esi]
c001d5e2:	6b d2 28             	imul   edx,edx,0x28
c001d5e5:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d5e9:	31 d2                	xor    edx,edx
c001d5eb:	52                   	push   edx
c001d5ec:	50                   	push   eax
c001d5ed:	55                   	push   ebp
c001d5ee:	e8 5b 5f ff ff       	call   c001354e <File::seek(unsigned long long)>
c001d5f3:	83 c4 0c             	add    esp,0xc
c001d5f6:	6a 20                	push   0x20
c001d5f8:	6a 00                	push   0x0
c001d5fa:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d601:	51                   	push   ecx
c001d602:	e8 65 31 fe ff       	call   c000076c <memset>
c001d607:	59                   	pop    ecx
c001d608:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d60b:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d60f:	52                   	push   edx
c001d610:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d617:	51                   	push   ecx
c001d618:	6a 00                	push   0x0
c001d61a:	6a 1f                	push   0x1f
c001d61c:	55                   	push   ebp
c001d61d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d620:	83 c4 1c             	add    esp,0x1c
c001d623:	6a 09                	push   0x9
c001d625:	68 f8 ca 02 c0       	push   0xc002caf8
c001d62a:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d631:	51                   	push   ecx
c001d632:	e8 31 30 fe ff       	call   c0000668 <memcmp>
c001d637:	83 c4 10             	add    esp,0x10
c001d63a:	85 c0                	test   eax,eax
c001d63c:	75 21                	jne    c001d65f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d63e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d642:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d646:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d64a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d64e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d651:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d658:	89 d0                	mov    eax,edx
c001d65a:	40                   	inc    eax
c001d65b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d65f:	50                   	push   eax
c001d660:	6a 09                	push   0x9
c001d662:	68 02 cb 02 c0       	push   0xc002cb02
c001d667:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d66e:	50                   	push   eax
c001d66f:	e8 f4 2f fe ff       	call   c0000668 <memcmp>
c001d674:	83 c4 10             	add    esp,0x10
c001d677:	85 c0                	test   eax,eax
c001d679:	75 21                	jne    c001d69c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d67b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d67f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d683:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d68b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d68e:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d695:	89 d0                	mov    eax,edx
c001d697:	40                   	inc    eax
c001d698:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d69c:	50                   	push   eax
c001d69d:	50                   	push   eax
c001d69e:	68 ce ca 02 c0       	push   0xc002cace
c001d6a3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d6aa:	50                   	push   eax
c001d6ab:	e8 04 32 fe ff       	call   c00008b4 <strcmp>
c001d6b0:	83 c4 10             	add    esp,0x10
c001d6b3:	85 c0                	test   eax,eax
c001d6b5:	75 0f                	jne    c001d6c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d6b7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d6ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d6be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d6c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d6c6:	50                   	push   eax
c001d6c7:	50                   	push   eax
c001d6c8:	68 d6 ca 02 c0       	push   0xc002cad6
c001d6cd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d6d4:	50                   	push   eax
c001d6d5:	e8 da 31 fe ff       	call   c00008b4 <strcmp>
c001d6da:	83 c4 10             	add    esp,0x10
c001d6dd:	85 c0                	test   eax,eax
c001d6df:	75 0f                	jne    c001d6f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d6e1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d6e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d6e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d6ec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d6f0:	43                   	inc    ebx
c001d6f1:	e9 c6 fe ff ff       	jmp    c001d5bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d6f6:	31 d2                	xor    edx,edx
c001d6f8:	50                   	push   eax
c001d6f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d6fd:	52                   	push   edx
c001d6fe:	50                   	push   eax
c001d6ff:	55                   	push   ebp
c001d700:	e8 49 5e ff ff       	call   c001354e <File::seek(unsigned long long)>
c001d705:	58                   	pop    eax
c001d706:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d70a:	e8 1f 22 ff ff       	call   c000f92e <malloc>
c001d70f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d712:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d716:	31 d2                	xor    edx,edx
c001d718:	58                   	pop    eax
c001d719:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d71d:	53                   	push   ebx
c001d71e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d722:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d726:	52                   	push   edx
c001d727:	50                   	push   eax
c001d728:	55                   	push   ebp
c001d729:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d72c:	83 c4 14             	add    esp,0x14
c001d72f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d733:	e8 f6 21 ff ff       	call   c000f92e <malloc>
c001d738:	31 d2                	xor    edx,edx
c001d73a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d73e:	83 c4 0c             	add    esp,0xc
c001d741:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d745:	52                   	push   edx
c001d746:	50                   	push   eax
c001d747:	55                   	push   ebp
c001d748:	e8 01 5e ff ff       	call   c001354e <File::seek(unsigned long long)>
c001d74d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d750:	31 d2                	xor    edx,edx
c001d752:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d755:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d759:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d75d:	52                   	push   edx
c001d75e:	50                   	push   eax
c001d75f:	55                   	push   ebp
c001d760:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d763:	83 c4 20             	add    esp,0x20
c001d766:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d76e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d772:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d776:	0f 84 0b 03 00 00    	je     c001da87 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d77c:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d783:	31 d2                	xor    edx,edx
c001d785:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d789:	c1 e8 03             	shr    eax,0x3
c001d78c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d790:	51                   	push   ecx
c001d791:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d795:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d799:	52                   	push   edx
c001d79a:	50                   	push   eax
c001d79b:	55                   	push   ebp
c001d79c:	e8 ad 5d ff ff       	call   c001354e <File::seek(unsigned long long)>
c001d7a1:	5b                   	pop    ebx
c001d7a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7a6:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d7ad:	e8 7c 21 ff ff       	call   c000f92e <malloc>
c001d7b2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d7b5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d7b9:	31 d2                	xor    edx,edx
c001d7bb:	5e                   	pop    esi
c001d7bc:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d7c0:	50                   	push   eax
c001d7c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d7c5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d7c9:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d7d0:	52                   	push   edx
c001d7d1:	50                   	push   eax
c001d7d2:	55                   	push   ebp
c001d7d3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d7d6:	83 c4 20             	add    esp,0x20
c001d7d9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d7e1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d7e5:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d7e9:	0f 8d 7c 02 00 00    	jge    c001da6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d7ef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d7f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d7f7:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d7fc:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d7ff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d803:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d807:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d80b:	89 d8                	mov    eax,ebx
c001d80d:	c1 e8 08             	shr    eax,0x8
c001d810:	89 c6                	mov    esi,eax
c001d812:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d816:	c1 e6 04             	shl    esi,0x4
c001d819:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d81d:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d820:	85 d2                	test   edx,edx
c001d822:	0f 85 bf 00 00 00    	jne    c001d8e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d828:	83 ec 0c             	sub    esp,0xc
c001d82b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d82f:	03 06                	add    eax,DWORD PTR [esi]
c001d831:	50                   	push   eax
c001d832:	e8 4b f8 ff ff       	call   c001d082 <Thr::getAddressOfKernelSymbol(char const*)>
c001d837:	83 c4 10             	add    esp,0x10
c001d83a:	89 c2                	mov    edx,eax
c001d83c:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d841:	85 c0                	test   eax,eax
c001d843:	0f 85 9e 00 00 00    	jne    c001d8e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d849:	83 ec 0c             	sub    esp,0xc
c001d84c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d850:	03 06                	add    eax,DWORD PTR [esi]
c001d852:	50                   	push   eax
c001d853:	e8 89 0d ff ff       	call   c000e5e1 <Krnl::resolveCompatibilitySymbol(char*)>
c001d858:	83 c4 10             	add    esp,0x10
c001d85b:	89 c2                	mov    edx,eax
c001d85d:	85 c0                	test   eax,eax
c001d85f:	0f 85 82 00 00 00    	jne    c001d8e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d865:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d869:	50                   	push   eax
c001d86a:	50                   	push   eax
c001d86b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d86f:	03 06                	add    eax,DWORD PTR [esi]
c001d871:	50                   	push   eax
c001d872:	68 0c cb 02 c0       	push   0xc002cb0c
c001d877:	e8 51 56 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001d87c:	58                   	pop    eax
c001d87d:	5a                   	pop    edx
c001d87e:	68 26 cb 02 c0       	push   0xc002cb26
c001d883:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d88a:	50                   	push   eax
c001d88b:	e8 98 2f fe ff       	call   c0000828 <strcpy>
c001d890:	59                   	pop    ecx
c001d891:	58                   	pop    eax
c001d892:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d896:	03 06                	add    eax,DWORD PTR [esi]
c001d898:	50                   	push   eax
c001d899:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d8a0:	50                   	push   eax
c001d8a1:	e8 c2 30 fe ff       	call   c0000968 <strcat>
c001d8a6:	58                   	pop    eax
c001d8a7:	5a                   	pop    edx
c001d8a8:	68 bc cb 02 c0       	push   0xc002cbbc
c001d8ad:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d8b4:	50                   	push   eax
c001d8b5:	e8 ae 30 fe ff       	call   c0000968 <strcat>
c001d8ba:	83 c4 10             	add    esp,0x10
c001d8bd:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d8c2:	0f 84 5d 01 00 00    	je     c001da25 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d8c8:	83 ec 0c             	sub    esp,0xc
c001d8cb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d8d2:	50                   	push   eax
c001d8d3:	e8 b8 cf ff ff       	call   c001a890 <Krnl::panic(char const*)>
c001d8d8:	83 c4 10             	add    esp,0x10
c001d8db:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d8df:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d8e3:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d8e7:	80 fb 01             	cmp    bl,0x1
c001d8ea:	0f 85 88 00 00 00    	jne    c001d978 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d8f0:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d8f7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d8fb:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d8ff:	01 ce                	add    esi,ecx
c001d901:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d907:	0f 94 c0             	sete   al
c001d90a:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d910:	0f 94 c3             	sete   bl
c001d913:	09 c3                	or     ebx,eax
c001d915:	8b 06                	mov    eax,DWORD PTR [esi]
c001d917:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d91c:	74 41                	je     c001d95f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d91e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d921:	84 db                	test   bl,bl
c001d923:	75 15                	jne    c001d93a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d925:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d929:	66 83 f8 0c          	cmp    ax,0xc
c001d92d:	76 05                	jbe    c001d934 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d92f:	b8 0c 00 00 00       	mov    eax,0xc
c001d934:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d938:	76 37                	jbe    c001d971 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d93a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d93e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d943:	0f 84 dc 00 00 00    	je     c001da25 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d949:	83 ec 0c             	sub    esp,0xc
c001d94c:	68 3d cb 02 c0       	push   0xc002cb3d
c001d951:	e8 3a cf ff ff       	call   c001a890 <Krnl::panic(char const*)>
c001d956:	83 c4 10             	add    esp,0x10
c001d959:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d95d:	eb 12                	jmp    c001d971 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d95f:	01 c1                	add    ecx,eax
c001d961:	84 db                	test   bl,bl
c001d963:	75 0c                	jne    c001d971 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d965:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d969:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d96d:	77 02                	ja     c001d971 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d96f:	01 d1                	add    ecx,edx
c001d971:	89 0e                	mov    DWORD PTR [esi],ecx
c001d973:	e9 ea 00 00 00       	jmp    c001da62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d978:	80 fb 02             	cmp    bl,0x2
c001d97b:	75 7c                	jne    c001d9f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d97d:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d984:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d988:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d98c:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d992:	74 20                	je     c001d9b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d994:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d99a:	74 18                	je     c001d9b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d99c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d9a0:	b9 0a 00 00 00       	mov    ecx,0xa
c001d9a5:	66 83 f8 0e          	cmp    ax,0xe
c001d9a9:	77 03                	ja     c001d9ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d9ab:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d9ae:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d9b2:	76 1f                	jbe    c001d9d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d9b4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d9b8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d9bd:	74 66                	je     c001da25 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d9bf:	83 ec 0c             	sub    esp,0xc
c001d9c2:	68 59 cb 02 c0       	push   0xc002cb59
c001d9c7:	e8 c4 ce ff ff       	call   c001a890 <Krnl::panic(char const*)>
c001d9cc:	83 c4 10             	add    esp,0x10
c001d9cf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d9d3:	8b 06                	mov    eax,DWORD PTR [esi]
c001d9d5:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d9da:	74 13                	je     c001d9ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d9dc:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d9e0:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d9e7:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d9eb:	01 c8                	add    eax,ecx
c001d9ed:	eb 04                	jmp    c001d9f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d9ef:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d9f3:	01 c2                	add    edx,eax
c001d9f5:	89 16                	mov    DWORD PTR [esi],edx
c001d9f7:	eb 69                	jmp    c001da62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d9f9:	0f b6 db             	movzx  ebx,bl
c001d9fc:	50                   	push   eax
c001d9fd:	50                   	push   eax
c001d9fe:	53                   	push   ebx
c001d9ff:	68 75 cb 02 c0       	push   0xc002cb75
c001da04:	e8 c4 54 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001da09:	83 c4 10             	add    esp,0x10
c001da0c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001da11:	74 12                	je     c001da25 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001da13:	83 ec 0c             	sub    esp,0xc
c001da16:	68 80 cb 02 c0       	push   0xc002cb80
c001da1b:	e8 70 ce ff ff       	call   c001a890 <Krnl::panic(char const*)>
c001da20:	83 c4 10             	add    esp,0x10
c001da23:	eb 3d                	jmp    c001da62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001da25:	83 ec 0c             	sub    esp,0xc
c001da28:	55                   	push   ebp
c001da29:	e8 c0 5a ff ff       	call   c00134ee <File::close()>
c001da2e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001da31:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001da34:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001da37:	59                   	pop    ecx
c001da38:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001da3c:	e8 fd 1e ff ff       	call   c000f93e <free>
c001da41:	5b                   	pop    ebx
c001da42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001da46:	e8 f3 1e ff ff       	call   c000f93e <free>
c001da4b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001da4e:	e8 eb 1e ff ff       	call   c000f93e <free>
c001da53:	5e                   	pop    esi
c001da54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001da58:	e8 e1 1e ff ff       	call   c000f93e <free>
c001da5d:	83 c4 10             	add    esp,0x10
c001da60:	eb 21                	jmp    c001da83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001da62:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001da66:	e9 76 fd ff ff       	jmp    c001d7e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001da6b:	83 ec 0c             	sub    esp,0xc
c001da6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001da72:	e8 c7 1e ff ff       	call   c000f93e <free>
c001da77:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001da7b:	83 c4 10             	add    esp,0x10
c001da7e:	e9 eb fc ff ff       	jmp    c001d76e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001da83:	31 c0                	xor    eax,eax
c001da85:	eb 33                	jmp    c001daba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001da87:	83 ec 0c             	sub    esp,0xc
c001da8a:	55                   	push   ebp
c001da8b:	e8 5e 5a ff ff       	call   c00134ee <File::close()>
c001da90:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001da93:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001da96:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001da99:	58                   	pop    eax
c001da9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001da9e:	e8 9b 1e ff ff       	call   c000f93e <free>
c001daa3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001daa6:	e8 93 1e ff ff       	call   c000f93e <free>
c001daab:	5a                   	pop    edx
c001daac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dab0:	e8 89 1e ff ff       	call   c000f93e <free>
c001dab5:	83 c4 10             	add    esp,0x10
c001dab8:	b0 01                	mov    al,0x1
c001daba:	81 c4 5c 03 00 00    	add    esp,0x35c
c001dac0:	5b                   	pop    ebx
c001dac1:	5e                   	pop    esi
c001dac2:	5f                   	pop    edi
c001dac3:	5d                   	pop    ebp
c001dac4:	c3                   	ret    

c001dac5 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001dac5:	56                   	push   esi
c001dac6:	31 d2                	xor    edx,edx
c001dac8:	53                   	push   ebx
c001dac9:	8b 1d 60 1c 03 c0    	mov    ebx,DWORD PTR ds:0xc0031c60
c001dacf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dad3:	39 d3                	cmp    ebx,edx
c001dad5:	7e 1b                	jle    c001daf2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001dad7:	8b 04 95 80 1e 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffce180]
c001dade:	39 c8                	cmp    eax,ecx
c001dae0:	77 0d                	ja     c001daef <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001dae2:	8b 34 95 80 1c 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffce380]
c001dae9:	01 c6                	add    esi,eax
c001daeb:	39 ce                	cmp    esi,ecx
c001daed:	77 05                	ja     c001daf4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001daef:	42                   	inc    edx
c001daf0:	eb e1                	jmp    c001dad3 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001daf2:	31 c0                	xor    eax,eax
c001daf4:	5b                   	pop    ebx
c001daf5:	5e                   	pop    esi
c001daf6:	c3                   	ret    

c001daf7 <Thr::getDriverNameFromAddress(unsigned long)>:
c001daf7:	53                   	push   ebx
c001daf8:	31 c0                	xor    eax,eax
c001dafa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dafe:	8b 1d 60 1c 03 c0    	mov    ebx,DWORD PTR ds:0xc0031c60
c001db04:	39 c3                	cmp    ebx,eax
c001db06:	7e 22                	jle    c001db2a <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001db08:	8b 14 85 80 1e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce180]
c001db0f:	39 ca                	cmp    edx,ecx
c001db11:	77 14                	ja     c001db27 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001db13:	03 14 85 80 1c 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffce380]
c001db1a:	39 ca                	cmp    edx,ecx
c001db1c:	76 09                	jbe    c001db27 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001db1e:	8b 04 85 80 20 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdf80]
c001db25:	eb 05                	jmp    c001db2c <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001db27:	40                   	inc    eax
c001db28:	eb da                	jmp    c001db04 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001db2a:	31 c0                	xor    eax,eax
c001db2c:	5b                   	pop    ebx
c001db2d:	c3                   	ret    

c001db2e <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001db2e:	53                   	push   ebx
c001db2f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001db33:	53                   	push   ebx
c001db34:	e8 8c ff ff ff       	call   c001dac5 <Thr::getDriverBaseFromAddress(unsigned long)>
c001db39:	5a                   	pop    edx
c001db3a:	31 d2                	xor    edx,edx
c001db3c:	85 c0                	test   eax,eax
c001db3e:	74 04                	je     c001db44 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001db40:	89 da                	mov    edx,ebx
c001db42:	29 c2                	sub    edx,eax
c001db44:	89 d0                	mov    eax,edx
c001db46:	5b                   	pop    ebx
c001db47:	c3                   	ret    

c001db48 <Thr::loadDLL(char const*, bool)>:
c001db48:	55                   	push   ebp
c001db49:	57                   	push   edi
c001db4a:	56                   	push   esi
c001db4b:	53                   	push   ebx
c001db4c:	81 ec 34 01 00 00    	sub    esp,0x134
c001db52:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001db59:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001db60:	56                   	push   esi
c001db61:	68 98 cb 02 c0       	push   0xc002cb98
c001db66:	e8 62 53 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001db6b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001db72:	e8 b7 1d ff ff       	call   c000f92e <malloc>
c001db77:	83 c4 0c             	add    esp,0xc
c001db7a:	89 c3                	mov    ebx,eax
c001db7c:	ff 35 50 24 03 c0    	push   DWORD PTR ds:0xc0032450
c001db82:	56                   	push   esi
c001db83:	50                   	push   eax
c001db84:	e8 a3 58 ff ff       	call   c001342c <File::File(char const*, Process*)>
c001db89:	83 c4 10             	add    esp,0x10
c001db8c:	85 db                	test   ebx,ebx
c001db8e:	75 3c                	jne    c001dbcc <Thr::loadDLL(char const*, bool)+0x84>
c001db90:	89 f8                	mov    eax,edi
c001db92:	84 c0                	test   al,al
c001db94:	0f 84 cc 01 00 00    	je     c001dd66 <Thr::loadDLL(char const*, bool)+0x21e>
c001db9a:	55                   	push   ebp
c001db9b:	55                   	push   ebp
c001db9c:	68 a9 cb 02 c0       	push   0xc002cba9
c001dba1:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001dba5:	55                   	push   ebp
c001dba6:	e8 7d 2c fe ff       	call   c0000828 <strcpy>
c001dbab:	58                   	pop    eax
c001dbac:	5a                   	pop    edx
c001dbad:	56                   	push   esi
c001dbae:	55                   	push   ebp
c001dbaf:	e8 b4 2d fe ff       	call   c0000968 <strcat>
c001dbb4:	59                   	pop    ecx
c001dbb5:	58                   	pop    eax
c001dbb6:	68 bc cb 02 c0       	push   0xc002cbbc
c001dbbb:	55                   	push   ebp
c001dbbc:	e8 a7 2d fe ff       	call   c0000968 <strcat>
c001dbc1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001dbc4:	e8 c7 cc ff ff       	call   c001a890 <Krnl::panic(char const*)>
c001dbc9:	83 c4 10             	add    esp,0x10
c001dbcc:	51                   	push   ecx
c001dbcd:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001dbd1:	50                   	push   eax
c001dbd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c001dbd6:	50                   	push   eax
c001dbd7:	53                   	push   ebx
c001dbd8:	e8 5f 5b ff ff       	call   c001373c <File::stat(unsigned long long*, bool*)>
c001dbdd:	83 c4 10             	add    esp,0x10
c001dbe0:	85 db                	test   ebx,ebx
c001dbe2:	74 0c                	je     c001dbf0 <Thr::loadDLL(char const*, bool)+0xa8>
c001dbe4:	83 ec 0c             	sub    esp,0xc
c001dbe7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dbe9:	53                   	push   ebx
c001dbea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dbed:	83 c4 10             	add    esp,0x10
c001dbf0:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001dbf5:	75 0a                	jne    c001dc01 <Thr::loadDLL(char const*, bool)+0xb9>
c001dbf7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dbfb:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001dbff:	75 3c                	jne    c001dc3d <Thr::loadDLL(char const*, bool)+0xf5>
c001dc01:	89 f8                	mov    eax,edi
c001dc03:	84 c0                	test   al,al
c001dc05:	0f 84 43 01 00 00    	je     c001dd4e <Thr::loadDLL(char const*, bool)+0x206>
c001dc0b:	51                   	push   ecx
c001dc0c:	51                   	push   ecx
c001dc0d:	68 a9 cb 02 c0       	push   0xc002cba9
c001dc12:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001dc16:	53                   	push   ebx
c001dc17:	e8 0c 2c fe ff       	call   c0000828 <strcpy>
c001dc1c:	5d                   	pop    ebp
c001dc1d:	58                   	pop    eax
c001dc1e:	56                   	push   esi
c001dc1f:	53                   	push   ebx
c001dc20:	e8 43 2d fe ff       	call   c0000968 <strcat>
c001dc25:	58                   	pop    eax
c001dc26:	5a                   	pop    edx
c001dc27:	68 bc cb 02 c0       	push   0xc002cbbc
c001dc2c:	53                   	push   ebx
c001dc2d:	e8 36 2d fe ff       	call   c0000968 <strcat>
c001dc32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dc35:	e8 56 cc ff ff       	call   c001a890 <Krnl::panic(char const*)>
c001dc3a:	83 c4 10             	add    esp,0x10
c001dc3d:	52                   	push   edx
c001dc3e:	6a 03                	push   0x3
c001dc40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001dc48:	05 ff 0f 00 00       	add    eax,0xfff
c001dc4d:	83 d2 00             	adc    edx,0x0
c001dc50:	0f ac d0 0c          	shrd   eax,edx,0xc
c001dc54:	50                   	push   eax
c001dc55:	ff 35 70 f0 02 c0    	push   DWORD PTR ds:0xc002f070
c001dc5b:	e8 a0 47 ff ff       	call   c0012400 <VAS::allocatePages(int, int)>
c001dc60:	59                   	pop    ecx
c001dc61:	89 c3                	mov    ebx,eax
c001dc63:	5d                   	pop    ebp
c001dc64:	50                   	push   eax
c001dc65:	68 be cb 02 c0       	push   0xc002cbbe
c001dc6a:	e8 5e 52 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001dc6f:	89 34 24             	mov    DWORD PTR [esp],esi
c001dc72:	e8 11 2b fe ff       	call   c0000788 <strlen>
c001dc77:	8b 2d 60 1c 03 c0    	mov    ebp,DWORD PTR ds:0xc0031c60
c001dc7d:	40                   	inc    eax
c001dc7e:	89 04 24             	mov    DWORD PTR [esp],eax
c001dc81:	e8 a8 1c ff ff       	call   c000f92e <malloc>
c001dc86:	89 04 ad 80 20 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcdf80],eax
c001dc8d:	58                   	pop    eax
c001dc8e:	a1 60 1c 03 c0       	mov    eax,ds:0xc0031c60
c001dc93:	5a                   	pop    edx
c001dc94:	56                   	push   esi
c001dc95:	ff 34 85 80 20 03 c0 	push   DWORD PTR [eax*4-0x3ffcdf80]
c001dc9c:	e8 87 2b fe ff       	call   c0000828 <strcpy>
c001dca1:	a1 60 1c 03 c0       	mov    eax,ds:0xc0031c60
c001dca6:	8d 50 01             	lea    edx,[eax+0x1]
c001dca9:	89 1c 85 80 1e 03 c0 	mov    DWORD PTR [eax*4-0x3ffce180],ebx
c001dcb0:	89 15 60 1c 03 c0    	mov    DWORD PTR ds:0xc0031c60,edx
c001dcb6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dcba:	83 c4 0c             	add    esp,0xc
c001dcbd:	89 14 85 80 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce380],edx
c001dcc4:	6a 01                	push   0x1
c001dcc6:	53                   	push   ebx
c001dcc7:	56                   	push   esi
c001dcc8:	e8 c2 f6 ff ff       	call   c001d38f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001dccd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001dcd1:	83 c4 10             	add    esp,0x10
c001dcd4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001dcd9:	0f 85 83 00 00 00    	jne    c001dd62 <Thr::loadDLL(char const*, bool)+0x21a>
c001dcdf:	89 f8                	mov    eax,edi
c001dce1:	84 c0                	test   al,al
c001dce3:	74 6d                	je     c001dd52 <Thr::loadDLL(char const*, bool)+0x20a>
c001dce5:	83 ec 0c             	sub    esp,0xc
c001dce8:	68 cb cb 02 c0       	push   0xc002cbcb
c001dced:	e8 9e cb ff ff       	call   c001a890 <Krnl::panic(char const*)>
c001dcf2:	83 c4 10             	add    esp,0x10
c001dcf5:	eb 5b                	jmp    c001dd52 <Thr::loadDLL(char const*, bool)+0x20a>
c001dcf7:	89 ee                	mov    esi,ebp
c001dcf9:	50                   	push   eax
c001dcfa:	c1 e6 0c             	shl    esi,0xc
c001dcfd:	50                   	push   eax
c001dcfe:	01 de                	add    esi,ebx
c001dd00:	56                   	push   esi
c001dd01:	ff 35 70 f0 02 c0    	push   DWORD PTR ds:0xc002f070
c001dd07:	e8 5c 42 ff ff       	call   c0011f68 <VAS::getPageTableEntry(unsigned long)>
c001dd0c:	83 c4 10             	add    esp,0x10
c001dd0f:	f6 00 60             	test   BYTE PTR [eax],0x60
c001dd12:	75 0c                	jne    c001dd20 <Thr::loadDLL(char const*, bool)+0x1d8>
c001dd14:	83 ec 0c             	sub    esp,0xc
c001dd17:	56                   	push   esi
c001dd18:	e8 f3 21 ff ff       	call   c000ff10 <Phys::freePage(unsigned long)>
c001dd1d:	83 c4 10             	add    esp,0x10
c001dd20:	45                   	inc    ebp
c001dd21:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd25:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dd29:	05 ff 0f 00 00       	add    eax,0xfff
c001dd2e:	bf 00 00 00 00       	mov    edi,0x0
c001dd33:	83 d2 00             	adc    edx,0x0
c001dd36:	0f ac d0 0c          	shrd   eax,edx,0xc
c001dd3a:	c1 ea 0c             	shr    edx,0xc
c001dd3d:	39 c5                	cmp    ebp,eax
c001dd3f:	89 d1                	mov    ecx,edx
c001dd41:	89 f8                	mov    eax,edi
c001dd43:	19 c8                	sbb    eax,ecx
c001dd45:	72 b0                	jb     c001dcf7 <Thr::loadDLL(char const*, bool)+0x1af>
c001dd47:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001dd4c:	75 18                	jne    c001dd66 <Thr::loadDLL(char const*, bool)+0x21e>
c001dd4e:	31 db                	xor    ebx,ebx
c001dd50:	eb 14                	jmp    c001dd66 <Thr::loadDLL(char const*, bool)+0x21e>
c001dd52:	83 ec 0c             	sub    esp,0xc
c001dd55:	68 ea cb 02 c0       	push   0xc002cbea
c001dd5a:	e8 31 cb ff ff       	call   c001a890 <Krnl::panic(char const*)>
c001dd5f:	83 c4 10             	add    esp,0x10
c001dd62:	31 ed                	xor    ebp,ebp
c001dd64:	eb bb                	jmp    c001dd21 <Thr::loadDLL(char const*, bool)+0x1d9>
c001dd66:	81 c4 2c 01 00 00    	add    esp,0x12c
c001dd6c:	89 d8                	mov    eax,ebx
c001dd6e:	5b                   	pop    ebx
c001dd6f:	5e                   	pop    esi
c001dd70:	5f                   	pop    edi
c001dd71:	5d                   	pop    ebp
c001dd72:	c3                   	ret    

c001dd73 <Thr::executeDLL(unsigned long, void*)>:
c001dd73:	56                   	push   esi
c001dd74:	53                   	push   ebx
c001dd75:	52                   	push   edx
c001dd76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dd7a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001dd7e:	85 db                	test   ebx,ebx
c001dd80:	75 10                	jne    c001dd92 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001dd82:	83 ec 0c             	sub    esp,0xc
c001dd85:	68 06 cc 02 c0       	push   0xc002cc06
c001dd8a:	e8 01 cb ff ff       	call   c001a890 <Krnl::panic(char const*)>
c001dd8f:	83 c4 10             	add    esp,0x10
c001dd92:	50                   	push   eax
c001dd93:	50                   	push   eax
c001dd94:	53                   	push   ebx
c001dd95:	68 30 cc 02 c0       	push   0xc002cc30
c001dd9a:	e8 2e 51 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001dd9f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001dda3:	89 d8                	mov    eax,ebx
c001dda5:	83 c4 14             	add    esp,0x14
c001dda8:	5b                   	pop    ebx
c001dda9:	5e                   	pop    esi
c001ddaa:	ff e0                	jmp    eax

c001ddac <userModeEntryPoint(void*)>:
c001ddac:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c001ddb1:	48                   	dec    eax
c001ddb2:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c001ddb7:	75 01                	jne    c001ddba <userModeEntryPoint(void*)+0xe>
c001ddb9:	fb                   	sti    
c001ddba:	fb                   	sti    
c001ddbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ddc0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ddc3:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001ddc9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ddcd:	e9 58 25 fe ff       	jmp    c000032a <goToUsermode>

c001ddd2 <changeTSS>:
c001ddd2:	83 ec 14             	sub    esp,0x14
c001ddd5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ddda:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001dddd:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001dde2:	c1 e2 15             	shl    edx,0x15
c001dde5:	29 d0                	sub    eax,edx
c001dde7:	50                   	push   eax
c001dde8:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c001dded:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ddf3:	05 7c 11 00 00       	add    eax,0x117c
c001ddf8:	50                   	push   eax
c001ddf9:	e8 08 36 ff ff       	call   c0011406 <TSS::setESP(unsigned long)>
c001ddfe:	83 c4 1c             	add    esp,0x1c
c001de01:	c3                   	ret    

c001de02 <switchToThread(ThreadControlBlock*)>:
c001de02:	57                   	push   edi
c001de03:	a1 24 24 03 c0       	mov    eax,ds:0xc0032424
c001de08:	56                   	push   esi
c001de09:	85 c0                	test   eax,eax
c001de0b:	53                   	push   ebx
c001de0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001de10:	0f 85 88 00 00 00    	jne    c001de9e <switchToThread(ThreadControlBlock*)+0x9c>
c001de16:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001de19:	3c ff                	cmp    al,0xff
c001de1b:	74 7d                	je     c001de9a <switchToThread(ThreadControlBlock*)+0x98>
c001de1d:	0f b6 d0             	movzx  edx,al
c001de20:	b8 84 03 00 00       	mov    eax,0x384
c001de25:	29 d0                	sub    eax,edx
c001de27:	c1 e0 10             	shl    eax,0x10
c001de2a:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001de2d:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001de30:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c001de35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001de3b:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001de42:	74 4a                	je     c001de8e <switchToThread(ThreadControlBlock*)+0x8c>
c001de44:	0f 31                	rdtsc  
c001de46:	a3 68 24 03 c0       	mov    ds:0xc0032468,eax
c001de4b:	89 c6                	mov    esi,eax
c001de4d:	89 d7                	mov    edi,edx
c001de4f:	2b 35 58 24 03 c0    	sub    esi,DWORD PTR ds:0xc0032458
c001de55:	89 15 6c 24 03 c0    	mov    DWORD PTR ds:0xc003246c,edx
c001de5b:	1b 3d 5c 24 03 c0    	sbb    edi,DWORD PTR ds:0xc003245c
c001de61:	89 35 60 24 03 c0    	mov    DWORD PTR ds:0xc0032460,esi
c001de67:	a3 58 24 03 c0       	mov    ds:0xc0032458,eax
c001de6c:	89 3d 64 24 03 c0    	mov    DWORD PTR ds:0xc0032464,edi
c001de72:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001de78:	89 15 5c 24 03 c0    	mov    DWORD PTR ds:0xc003245c,edx
c001de7e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001de81:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001de84:	01 c6                	add    esi,eax
c001de86:	11 d7                	adc    edi,edx
c001de88:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001de8b:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001de8e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001de92:	5b                   	pop    ebx
c001de93:	5e                   	pop    esi
c001de94:	5f                   	pop    edi
c001de95:	e9 c8 24 fe ff       	jmp    c0000362 <switchToThreadASM>
c001de9a:	31 c0                	xor    eax,eax
c001de9c:	eb 8f                	jmp    c001de2d <switchToThread(ThreadControlBlock*)+0x2b>
c001de9e:	5b                   	pop    ebx
c001de9f:	c7 05 20 24 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032420,0x1
c001dea9:	5e                   	pop    esi
c001deaa:	5f                   	pop    edi
c001deab:	c3                   	ret    

c001deac <Process::addArgs(char**)>:
c001deac:	57                   	push   edi
c001dead:	56                   	push   esi
c001deae:	53                   	push   ebx
c001deaf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001deb3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001deb7:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001dec1:	85 ff                	test   edi,edi
c001dec3:	74 3d                	je     c001df02 <Process::addArgs(char**)+0x56>
c001dec5:	8b 07                	mov    eax,DWORD PTR [edi]
c001dec7:	85 c0                	test   eax,eax
c001dec9:	74 37                	je     c001df02 <Process::addArgs(char**)+0x56>
c001decb:	31 db                	xor    ebx,ebx
c001decd:	83 ec 0c             	sub    esp,0xc
c001ded0:	50                   	push   eax
c001ded1:	e8 b2 28 fe ff       	call   c0000788 <strlen>
c001ded6:	40                   	inc    eax
c001ded7:	89 04 24             	mov    DWORD PTR [esp],eax
c001deda:	e8 4f 1a ff ff       	call   c000f92e <malloc>
c001dedf:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001dee6:	5a                   	pop    edx
c001dee7:	59                   	pop    ecx
c001dee8:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001deeb:	43                   	inc    ebx
c001deec:	50                   	push   eax
c001deed:	e8 36 29 fe ff       	call   c0000828 <strcpy>
c001def2:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001def8:	83 c4 10             	add    esp,0x10
c001defb:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001defe:	85 c0                	test   eax,eax
c001df00:	75 cb                	jne    c001decd <Process::addArgs(char**)+0x21>
c001df02:	5b                   	pop    ebx
c001df03:	5e                   	pop    esi
c001df04:	5f                   	pop    edi
c001df05:	c3                   	ret    

c001df06 <Process::Process(char const*, Process*, char**)>:
c001df06:	56                   	push   esi
c001df07:	53                   	push   ebx
c001df08:	83 ec 14             	sub    esp,0x14
c001df0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df0f:	05 0c 02 00 00       	add    eax,0x20c
c001df14:	bb 07 00 00 00       	mov    ebx,0x7
c001df19:	89 c6                	mov    esi,eax
c001df1b:	85 db                	test   ebx,ebx
c001df1d:	78 12                	js     c001df31 <Process::Process(char const*, Process*, char**)+0x2b>
c001df1f:	83 ec 0c             	sub    esp,0xc
c001df22:	56                   	push   esi
c001df23:	e8 da b6 00 00       	call   c0029602 <ThreadControlBlock::ThreadControlBlock()>
c001df28:	83 c4 10             	add    esp,0x10
c001df2b:	83 c6 63             	add    esi,0x63
c001df2e:	4b                   	dec    ebx
c001df2f:	eb ea                	jmp    c001df1b <Process::Process(char const*, Process*, char**)+0x15>
c001df31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df35:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001df3c:	83 ec 0c             	sub    esp,0xc
c001df3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df43:	e8 a0 c7 ff ff       	call   c001a6e8 <Krnl::newProcessEnv(Process*)>
c001df48:	83 c4 10             	add    esp,0x10
c001df4b:	89 c2                	mov    edx,eax
c001df4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df51:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001df57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df5b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001df64:	a1 70 e4 02 c0       	mov    eax,ds:0xc002e470
c001df69:	8d 50 01             	lea    edx,[eax+0x1]
c001df6c:	89 15 70 e4 02 c0    	mov    DWORD PTR ds:0xc002e470,edx
c001df72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001df76:	89 02                	mov    DWORD PTR [edx],eax
c001df78:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001df80:	83 ec 0c             	sub    esp,0xc
c001df83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001df87:	e8 a2 19 ff ff       	call   c000f92e <malloc>
c001df8c:	83 c4 10             	add    esp,0x10
c001df8f:	89 c3                	mov    ebx,eax
c001df91:	83 ec 08             	sub    esp,0x8
c001df94:	6a 00                	push   0x0
c001df96:	53                   	push   ebx
c001df97:	e8 0c 48 ff ff       	call   c00127a8 <VAS::VAS(bool)>
c001df9c:	83 c4 10             	add    esp,0x10
c001df9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfa3:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dfa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfad:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dfb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfbb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dfbf:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dfc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfc9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dfcf:	85 c0                	test   eax,eax
c001dfd1:	74 42                	je     c001e015 <Process::Process(char const*, Process*, char**)+0x10f>
c001dfd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfd7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dfdd:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dfe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfe7:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dfed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dff1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dff7:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dffd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e001:	05 0c 01 00 00       	add    eax,0x10c
c001e006:	83 ec 08             	sub    esp,0x8
c001e009:	52                   	push   edx
c001e00a:	50                   	push   eax
c001e00b:	e8 18 28 fe ff       	call   c0000828 <strcpy>
c001e010:	83 c4 10             	add    esp,0x10
c001e013:	eb 63                	jmp    c001e078 <Process::Process(char const*, Process*, char**)+0x172>
c001e015:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001e01d:	83 ec 0c             	sub    esp,0xc
c001e020:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e024:	e8 05 19 ff ff       	call   c000f92e <malloc>
c001e029:	83 c4 10             	add    esp,0x10
c001e02c:	89 c3                	mov    ebx,eax
c001e02e:	83 ec 08             	sub    esp,0x8
c001e031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e035:	53                   	push   ebx
c001e036:	e8 ad 30 ff ff       	call   c00110e8 <VgaText::VgaText(char const*)>
c001e03b:	83 c4 10             	add    esp,0x10
c001e03e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e042:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e048:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e04c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e052:	83 ec 0c             	sub    esp,0xc
c001e055:	50                   	push   eax
c001e056:	e8 c4 25 ff ff       	call   c001061f <addToTerminalCycle(VgaText*)>
c001e05b:	83 c4 10             	add    esp,0x10
c001e05e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e062:	05 0c 01 00 00       	add    eax,0x10c
c001e067:	83 ec 08             	sub    esp,0x8
c001e06a:	68 4f cc 02 c0       	push   0xc002cc4f
c001e06f:	50                   	push   eax
c001e070:	e8 b3 27 fe ff       	call   c0000828 <strcpy>
c001e075:	83 c4 10             	add    esp,0x10
c001e078:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e07c:	83 c0 0c             	add    eax,0xc
c001e07f:	83 ec 08             	sub    esp,0x8
c001e082:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e086:	50                   	push   eax
c001e087:	e8 9c 27 fe ff       	call   c0000828 <strcpy>
c001e08c:	83 c4 10             	add    esp,0x10
c001e08f:	83 ec 08             	sub    esp,0x8
c001e092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e096:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e09a:	e8 0d fe ff ff       	call   c001deac <Process::addArgs(char**)>
c001e09f:	83 c4 10             	add    esp,0x10
c001e0a2:	83 ec 08             	sub    esp,0x8
c001e0a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e0a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e0ad:	e8 a7 ed ff ff       	call   c001ce59 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001e0b2:	83 c4 10             	add    esp,0x10
c001e0b5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e0b9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e0bd:	83 f0 01             	xor    eax,0x1
c001e0c0:	88 c2                	mov    dl,al
c001e0c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0c6:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001e0cc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001e0d1:	83 ec 08             	sub    esp,0x8
c001e0d4:	50                   	push   eax
c001e0d5:	68 7c cd 02 c0       	push   0xc002cd7c
c001e0da:	e8 ee 4d ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001e0df:	83 c4 10             	add    esp,0x10
c001e0e2:	90                   	nop
c001e0e3:	83 c4 14             	add    esp,0x14
c001e0e6:	5b                   	pop    ebx
c001e0e7:	5e                   	pop    esi
c001e0e8:	c3                   	ret    
c001e0e9:	90                   	nop

c001e0ea <Process::Process(bool, char const*, Process*, char**)>:
c001e0ea:	56                   	push   esi
c001e0eb:	53                   	push   ebx
c001e0ec:	83 ec 24             	sub    esp,0x24
c001e0ef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e0f3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e0f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0fb:	05 0c 02 00 00       	add    eax,0x20c
c001e100:	bb 07 00 00 00       	mov    ebx,0x7
c001e105:	89 c6                	mov    esi,eax
c001e107:	85 db                	test   ebx,ebx
c001e109:	78 12                	js     c001e11d <Process::Process(bool, char const*, Process*, char**)+0x33>
c001e10b:	83 ec 0c             	sub    esp,0xc
c001e10e:	56                   	push   esi
c001e10f:	e8 ee b4 00 00       	call   c0029602 <ThreadControlBlock::ThreadControlBlock()>
c001e114:	83 c4 10             	add    esp,0x10
c001e117:	83 c6 63             	add    esi,0x63
c001e11a:	4b                   	dec    ebx
c001e11b:	eb ea                	jmp    c001e107 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001e11d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e121:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001e128:	83 ec 0c             	sub    esp,0xc
c001e12b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e12f:	e8 b4 c5 ff ff       	call   c001a6e8 <Krnl::newProcessEnv(Process*)>
c001e134:	83 c4 10             	add    esp,0x10
c001e137:	89 c2                	mov    edx,eax
c001e139:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e13d:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001e143:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e147:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001e150:	a1 70 e4 02 c0       	mov    eax,ds:0xc002e470
c001e155:	8d 50 01             	lea    edx,[eax+0x1]
c001e158:	89 15 70 e4 02 c0    	mov    DWORD PTR ds:0xc002e470,edx
c001e15e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e162:	89 02                	mov    DWORD PTR [edx],eax
c001e164:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001e16c:	83 ec 0c             	sub    esp,0xc
c001e16f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001e173:	e8 b6 17 ff ff       	call   c000f92e <malloc>
c001e178:	83 c4 10             	add    esp,0x10
c001e17b:	89 c3                	mov    ebx,eax
c001e17d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e182:	83 ec 08             	sub    esp,0x8
c001e185:	50                   	push   eax
c001e186:	53                   	push   ebx
c001e187:	e8 1c 46 ff ff       	call   c00127a8 <VAS::VAS(bool)>
c001e18c:	83 c4 10             	add    esp,0x10
c001e18f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e193:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001e199:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e19d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e1a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1ab:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e1af:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001e1b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1b9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e1bf:	85 c0                	test   eax,eax
c001e1c1:	74 42                	je     c001e205 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001e1c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1c7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e1cd:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e1d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1d7:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001e1dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1e1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e1e7:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001e1ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1f1:	05 0c 01 00 00       	add    eax,0x10c
c001e1f6:	83 ec 08             	sub    esp,0x8
c001e1f9:	52                   	push   edx
c001e1fa:	50                   	push   eax
c001e1fb:	e8 28 26 fe ff       	call   c0000828 <strcpy>
c001e200:	83 c4 10             	add    esp,0x10
c001e203:	eb 63                	jmp    c001e268 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001e205:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001e20d:	83 ec 0c             	sub    esp,0xc
c001e210:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e214:	e8 15 17 ff ff       	call   c000f92e <malloc>
c001e219:	83 c4 10             	add    esp,0x10
c001e21c:	89 c3                	mov    ebx,eax
c001e21e:	83 ec 08             	sub    esp,0x8
c001e221:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e225:	53                   	push   ebx
c001e226:	e8 bd 2e ff ff       	call   c00110e8 <VgaText::VgaText(char const*)>
c001e22b:	83 c4 10             	add    esp,0x10
c001e22e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e232:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e238:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e23c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e242:	83 ec 0c             	sub    esp,0xc
c001e245:	50                   	push   eax
c001e246:	e8 d4 23 ff ff       	call   c001061f <addToTerminalCycle(VgaText*)>
c001e24b:	83 c4 10             	add    esp,0x10
c001e24e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e252:	05 0c 01 00 00       	add    eax,0x10c
c001e257:	83 ec 08             	sub    esp,0x8
c001e25a:	68 4f cc 02 c0       	push   0xc002cc4f
c001e25f:	50                   	push   eax
c001e260:	e8 c3 25 fe ff       	call   c0000828 <strcpy>
c001e265:	83 c4 10             	add    esp,0x10
c001e268:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e26c:	83 c0 0c             	add    eax,0xc
c001e26f:	83 ec 08             	sub    esp,0x8
c001e272:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e276:	50                   	push   eax
c001e277:	e8 ac 25 fe ff       	call   c0000828 <strcpy>
c001e27c:	83 c4 10             	add    esp,0x10
c001e27f:	83 ec 08             	sub    esp,0x8
c001e282:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e286:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e28a:	e8 1d fc ff ff       	call   c001deac <Process::addArgs(char**)>
c001e28f:	83 c4 10             	add    esp,0x10
c001e292:	90                   	nop
c001e293:	83 c4 24             	add    esp,0x24
c001e296:	5b                   	pop    ebx
c001e297:	5e                   	pop    esi
c001e298:	c3                   	ret    

c001e299 <taskStartupFunction>:
c001e299:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e29e:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001e2a1:	c3                   	ret    

c001e2a2 <Semaphore::Semaphore(int)>:
c001e2a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e2aa:	89 10                	mov    DWORD PTR [eax],edx
c001e2ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2b0:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001e2b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2bb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e2c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2c6:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e2cd:	90                   	nop
c001e2ce:	c3                   	ret    
c001e2cf:	90                   	nop

c001e2d0 <Mutex::Mutex()>:
c001e2d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2d4:	6a 01                	push   0x1
c001e2d6:	50                   	push   eax
c001e2d7:	e8 c6 ff ff ff       	call   c001e2a2 <Semaphore::Semaphore(int)>
c001e2dc:	83 c4 08             	add    esp,0x8
c001e2df:	90                   	nop
c001e2e0:	c3                   	ret    
c001e2e1:	90                   	nop

c001e2e2 <Process::createThread(void (*)(void*), void*, int)>:
c001e2e2:	55                   	push   ebp
c001e2e3:	31 c9                	xor    ecx,ecx
c001e2e5:	57                   	push   edi
c001e2e6:	56                   	push   esi
c001e2e7:	53                   	push   ebx
c001e2e8:	83 ec 1c             	sub    esp,0x1c
c001e2eb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e2ef:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001e2f6:	89 f2                	mov    edx,esi
c001e2f8:	0f b7 c2             	movzx  eax,dx
c001e2fb:	83 e2 01             	and    edx,0x1
c001e2fe:	74 16                	je     c001e316 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001e300:	d1 f8                	sar    eax,1
c001e302:	41                   	inc    ecx
c001e303:	89 c2                	mov    edx,eax
c001e305:	83 f9 10             	cmp    ecx,0x10
c001e308:	75 ee                	jne    c001e2f8 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001e30a:	83 c4 1c             	add    esp,0x1c
c001e30d:	31 db                	xor    ebx,ebx
c001e30f:	89 d8                	mov    eax,ebx
c001e311:	5b                   	pop    ebx
c001e312:	5e                   	pop    esi
c001e313:	5f                   	pop    edi
c001e314:	5d                   	pop    ebp
c001e315:	c3                   	ret    
c001e316:	b8 01 00 00 00       	mov    eax,0x1
c001e31b:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e31e:	d3 e0                	shl    eax,cl
c001e320:	09 c6                	or     esi,eax
c001e322:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001e325:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e32c:	89 c6                	mov    esi,eax
c001e32e:	c1 e6 05             	shl    esi,0x5
c001e331:	01 f0                	add    eax,esi
c001e333:	01 d8                	add    eax,ebx
c001e335:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001e33c:	75 0a                	jne    c001e348 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001e33e:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001e348:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e34e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e352:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001e355:	01 ca                	add    edx,ecx
c001e357:	83 ec 08             	sub    esp,0x8
c001e35a:	89 d0                	mov    eax,edx
c001e35c:	c1 e0 05             	shl    eax,0x5
c001e35f:	01 d0                	add    eax,edx
c001e361:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001e365:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e369:	01 d8                	add    eax,ebx
c001e36b:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001e371:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001e377:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e37d:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e383:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e389:	89 cd                	mov    ebp,ecx
c001e38b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001e38f:	f7 dd                	neg    ebp
c001e391:	c1 e5 15             	shl    ebp,0x15
c001e394:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001e39a:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001e3a0:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e3aa:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001e3b0:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e3ba:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e3c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e3c8:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001e3cf:	53                   	push   ebx
c001e3d0:	68 44 24 03 c0       	push   0xc0032444
c001e3d5:	e8 e2 af 00 00       	call   c00293bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e3da:	89 d8                	mov    eax,ebx
c001e3dc:	83 c4 10             	add    esp,0x10
c001e3df:	83 c4 1c             	add    esp,0x1c
c001e3e2:	5b                   	pop    ebx
c001e3e3:	5e                   	pop    esi
c001e3e4:	5f                   	pop    edi
c001e3e5:	5d                   	pop    ebp
c001e3e6:	c3                   	ret    
c001e3e7:	90                   	nop

c001e3e8 <Process::createUserThread()>:
c001e3e8:	83 ec 0c             	sub    esp,0xc
c001e3eb:	68 80 00 00 00       	push   0x80
c001e3f0:	6a 00                	push   0x0
c001e3f2:	68 ac dd 01 c0       	push   0xc001ddac
c001e3f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e3fb:	e8 e2 fe ff ff       	call   c001e2e2 <Process::createThread(void (*)(void*), void*, int)>
c001e400:	83 c4 1c             	add    esp,0x1c
c001e403:	c3                   	ret    

c001e404 <setupMultitasking(void (*)())>:
c001e404:	56                   	push   esi
c001e405:	53                   	push   ebx
c001e406:	51                   	push   ecx
c001e407:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e40b:	eb 10                	jmp    c001e41d <setupMultitasking(void (*)())+0x19>
c001e40d:	83 ec 0c             	sub    esp,0xc
c001e410:	68 44 24 03 c0       	push   0xc0032444
c001e415:	e8 f4 ae 00 00       	call   c002930e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e41a:	83 c4 10             	add    esp,0x10
c001e41d:	83 ec 0c             	sub    esp,0xc
c001e420:	68 44 24 03 c0       	push   0xc0032444
c001e425:	e8 c0 ae 00 00       	call   c00292ea <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e42a:	83 c4 10             	add    esp,0x10
c001e42d:	84 c0                	test   al,al
c001e42f:	74 dc                	je     c001e40d <setupMultitasking(void (*)())+0x9>
c001e431:	83 ec 0c             	sub    esp,0xc
c001e434:	68 3f 07 00 00       	push   0x73f
c001e439:	e8 f0 14 ff ff       	call   c000f92e <malloc>
c001e43e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e445:	89 c3                	mov    ebx,eax
c001e447:	6a 00                	push   0x0
c001e449:	68 53 cc 02 c0       	push   0xc002cc53
c001e44e:	6a 01                	push   0x1
c001e450:	50                   	push   eax
c001e451:	e8 94 fc ff ff       	call   c001e0ea <Process::Process(bool, char const*, Process*, char**)>
c001e456:	83 c4 18             	add    esp,0x18
c001e459:	89 1d 50 24 03 c0    	mov    DWORD PTR ds:0xc0032450,ebx
c001e45f:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e465:	68 a4 cd 02 c0       	push   0xc002cda4
c001e46a:	e8 5e 4a ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001e46f:	58                   	pop    eax
c001e470:	5a                   	pop    edx
c001e471:	6a 63                	push   0x63
c001e473:	68 d8 cd 02 c0       	push   0xc002cdd8
c001e478:	e8 50 4a ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001e47d:	59                   	pop    ecx
c001e47e:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e484:	e8 67 28 ff ff       	call   c0010cf0 <setActiveTerminal(VgaText*)>
c001e489:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e491:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e49b:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e4a1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e4a4:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e4ae:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e4b4:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e4ba:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e4c4:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e4ce:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e4d8:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e4de:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e4e8:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e4ee:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e4f8:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e4fe:	58                   	pop    eax
c001e4ff:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e505:	5a                   	pop    edx
c001e506:	68 4f cc 02 c0       	push   0xc002cc4f
c001e50b:	50                   	push   eax
c001e50c:	e8 17 23 fe ff       	call   c0000828 <strcpy>
c001e511:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e518:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e51c:	83 c4 14             	add    esp,0x14
c001e51f:	5b                   	pop    ebx
c001e520:	5e                   	pop    esi
c001e521:	e9 2e 1e fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e526 <schedule()>:
c001e526:	a1 24 24 03 c0       	mov    eax,ds:0xc0032424
c001e52b:	85 c0                	test   eax,eax
c001e52d:	74 0b                	je     c001e53a <schedule()+0x14>
c001e52f:	c7 05 20 24 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032420,0x1
c001e539:	c3                   	ret    
c001e53a:	53                   	push   ebx
c001e53b:	83 ec 14             	sub    esp,0x14
c001e53e:	68 44 24 03 c0       	push   0xc0032444
c001e543:	e8 a2 ad 00 00       	call   c00292ea <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e548:	83 c4 10             	add    esp,0x10
c001e54b:	84 c0                	test   al,al
c001e54d:	75 38                	jne    c001e587 <schedule()+0x61>
c001e54f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e554:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e557:	4a                   	dec    edx
c001e558:	74 32                	je     c001e58c <schedule()+0x66>
c001e55a:	83 ec 0c             	sub    esp,0xc
c001e55d:	68 44 24 03 c0       	push   0xc0032444
c001e562:	e8 9f ad 00 00       	call   c0029306 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e567:	c7 04 24 44 24 03 c0 	mov    DWORD PTR [esp],0xc0032444
c001e56e:	89 c3                	mov    ebx,eax
c001e570:	e8 99 ad 00 00       	call   c002930e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e575:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e57c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e57f:	e8 7e f8 ff ff       	call   c001de02 <switchToThread(ThreadControlBlock*)>
c001e584:	83 c4 10             	add    esp,0x10
c001e587:	83 c4 08             	add    esp,0x8
c001e58a:	5b                   	pop    ebx
c001e58b:	c3                   	ret    
c001e58c:	83 ec 08             	sub    esp,0x8
c001e58f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e596:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e59c:	68 44 24 03 c0       	push   0xc0032444
c001e5a1:	e8 16 ae 00 00       	call   c00293bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e5a6:	83 c4 10             	add    esp,0x10
c001e5a9:	eb af                	jmp    c001e55a <schedule()+0x34>
c001e5ab:	90                   	nop

c001e5ac <Semaphore::tryAcquire()>:
c001e5ac:	53                   	push   ebx
c001e5ad:	83 ec 08             	sub    esp,0x8
c001e5b0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e5b4:	fa                   	cli    
c001e5b5:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c001e5ba:	8d 50 01             	lea    edx,[eax+0x1]
c001e5bd:	89 15 28 24 03 c0    	mov    DWORD PTR ds:0xc0032428,edx
c001e5c3:	8b 15 24 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032424
c001e5c9:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e5cc:	89 1d 24 24 03 c0    	mov    DWORD PTR ds:0xc0032424,ebx
c001e5d2:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e5d5:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e5d7:	7c 2a                	jl     c001e603 <Semaphore::tryAcquire()+0x57>
c001e5d9:	89 15 24 24 03 c0    	mov    DWORD PTR ds:0xc0032424,edx
c001e5df:	85 d2                	test   edx,edx
c001e5e1:	75 0a                	jne    c001e5ed <Semaphore::tryAcquire()+0x41>
c001e5e3:	8b 15 20 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032420
c001e5e9:	85 d2                	test   edx,edx
c001e5eb:	75 5b                	jne    c001e648 <Semaphore::tryAcquire()+0x9c>
c001e5ed:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c001e5f2:	85 c0                	test   eax,eax
c001e5f4:	74 07                	je     c001e5fd <Semaphore::tryAcquire()+0x51>
c001e5f6:	31 c0                	xor    eax,eax
c001e5f8:	83 c4 08             	add    esp,0x8
c001e5fb:	5b                   	pop    ebx
c001e5fc:	c3                   	ret    
c001e5fd:	fb                   	sti    
c001e5fe:	83 c4 08             	add    esp,0x8
c001e601:	5b                   	pop    ebx
c001e602:	c3                   	ret    
c001e603:	43                   	inc    ebx
c001e604:	89 15 24 24 03 c0    	mov    DWORD PTR ds:0xc0032424,edx
c001e60a:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e60d:	85 d2                	test   edx,edx
c001e60f:	75 1f                	jne    c001e630 <Semaphore::tryAcquire()+0x84>
c001e611:	8b 0d 20 24 03 c0    	mov    ecx,DWORD PTR ds:0xc0032420
c001e617:	85 c9                	test   ecx,ecx
c001e619:	74 15                	je     c001e630 <Semaphore::tryAcquire()+0x84>
c001e61b:	c7 05 20 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032420,0x0
c001e625:	e8 fc fe ff ff       	call   c001e526 <schedule()>
c001e62a:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c001e62f:	48                   	dec    eax
c001e630:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c001e635:	85 c0                	test   eax,eax
c001e637:	75 08                	jne    c001e641 <Semaphore::tryAcquire()+0x95>
c001e639:	fb                   	sti    
c001e63a:	b0 01                	mov    al,0x1
c001e63c:	83 c4 08             	add    esp,0x8
c001e63f:	5b                   	pop    ebx
c001e640:	c3                   	ret    
c001e641:	b0 01                	mov    al,0x1
c001e643:	83 c4 08             	add    esp,0x8
c001e646:	5b                   	pop    ebx
c001e647:	c3                   	ret    
c001e648:	c7 05 20 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032420,0x0
c001e652:	e8 cf fe ff ff       	call   c001e526 <schedule()>
c001e657:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c001e65c:	48                   	dec    eax
c001e65d:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c001e662:	85 c0                	test   eax,eax
c001e664:	75 90                	jne    c001e5f6 <Semaphore::tryAcquire()+0x4a>
c001e666:	eb 95                	jmp    c001e5fd <Semaphore::tryAcquire()+0x51>

c001e668 <Semaphore::assertLocked(char const*)>:
c001e668:	83 ec 0c             	sub    esp,0xc
c001e66b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e66f:	fa                   	cli    
c001e670:	ff 05 28 24 03 c0    	inc    DWORD PTR ds:0xc0032428
c001e676:	a1 24 24 03 c0       	mov    eax,ds:0xc0032424
c001e67b:	8d 48 01             	lea    ecx,[eax+0x1]
c001e67e:	89 0d 24 24 03 c0    	mov    DWORD PTR ds:0xc0032424,ecx
c001e684:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e686:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e689:	7c 24                	jl     c001e6af <Semaphore::assertLocked(char const*)+0x47>
c001e68b:	a3 24 24 03 c0       	mov    ds:0xc0032424,eax
c001e690:	85 c0                	test   eax,eax
c001e692:	75 09                	jne    c001e69d <Semaphore::assertLocked(char const*)+0x35>
c001e694:	a1 20 24 03 c0       	mov    eax,ds:0xc0032420
c001e699:	85 c0                	test   eax,eax
c001e69b:	75 29                	jne    c001e6c6 <Semaphore::assertLocked(char const*)+0x5e>
c001e69d:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c001e6a2:	48                   	dec    eax
c001e6a3:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c001e6a8:	75 01                	jne    c001e6ab <Semaphore::assertLocked(char const*)+0x43>
c001e6aa:	fb                   	sti    
c001e6ab:	83 c4 0c             	add    esp,0xc
c001e6ae:	c3                   	ret    
c001e6af:	83 ec 0c             	sub    esp,0xc
c001e6b2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e6b6:	e8 d5 c1 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c001e6bb:	a1 24 24 03 c0       	mov    eax,ds:0xc0032424
c001e6c0:	83 c4 10             	add    esp,0x10
c001e6c3:	48                   	dec    eax
c001e6c4:	eb c5                	jmp    c001e68b <Semaphore::assertLocked(char const*)+0x23>
c001e6c6:	c7 05 20 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032420,0x0
c001e6d0:	e8 51 fe ff ff       	call   c001e526 <schedule()>
c001e6d5:	eb c6                	jmp    c001e69d <Semaphore::assertLocked(char const*)+0x35>

c001e6d7 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e6d7:	83 ec 14             	sub    esp,0x14
c001e6da:	ff 35 28 24 03 c0    	push   DWORD PTR ds:0xc0032428
c001e6e0:	68 fc cd 02 c0       	push   0xc002cdfc
c001e6e5:	e8 e3 47 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001e6ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6ef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e6f3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e6f6:	e8 2b fe ff ff       	call   c001e526 <schedule()>
c001e6fb:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c001e700:	83 c4 10             	add    esp,0x10
c001e703:	48                   	dec    eax
c001e704:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c001e709:	85 c0                	test   eax,eax
c001e70b:	75 06                	jne    c001e713 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e70d:	fb                   	sti    
c001e70e:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c001e713:	83 ec 08             	sub    esp,0x8
c001e716:	50                   	push   eax
c001e717:	68 30 ce 02 c0       	push   0xc002ce30
c001e71c:	e8 ac 47 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001e721:	83 c4 1c             	add    esp,0x1c
c001e724:	c3                   	ret    

c001e725 <blockTask(TaskState)>:
c001e725:	83 ec 0c             	sub    esp,0xc
c001e728:	fa                   	cli    
c001e729:	ff 05 28 24 03 c0    	inc    DWORD PTR ds:0xc0032428
c001e72f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e733:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e738:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e73b:	e8 e6 fd ff ff       	call   c001e526 <schedule()>
c001e740:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c001e745:	48                   	dec    eax
c001e746:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c001e74b:	75 01                	jne    c001e74e <blockTask(TaskState)+0x29>
c001e74d:	fb                   	sti    
c001e74e:	83 c4 0c             	add    esp,0xc
c001e751:	c3                   	ret    

c001e752 <waitTask(int, int*, int)>:
c001e752:	83 ec 18             	sub    esp,0x18
c001e755:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e75a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e75e:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e761:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e765:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e76a:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e76d:	6a 07                	push   0x7
c001e76f:	e8 b1 ff ff ff       	call   c001e725 <blockTask(TaskState)>
c001e774:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e779:	83 c4 10             	add    esp,0x10
c001e77c:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e77f:	85 d2                	test   edx,edx
c001e781:	74 0a                	je     c001e78d <waitTask(int, int*, int)+0x3b>
c001e783:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e786:	89 02                	mov    DWORD PTR [edx],eax
c001e788:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e78d:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e790:	83 c4 0c             	add    esp,0xc
c001e793:	c3                   	ret    

c001e794 <nanoSleepUntil(unsigned long long)>:
c001e794:	83 ec 0c             	sub    esp,0xc
c001e797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e79b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e79f:	3b 05 70 f5 02 c0    	cmp    eax,DWORD PTR ds:0xc002f570
c001e7a5:	89 d1                	mov    ecx,edx
c001e7a7:	1b 0d 74 f5 02 c0    	sbb    ecx,DWORD PTR ds:0xc002f574
c001e7ad:	73 04                	jae    c001e7b3 <nanoSleepUntil(unsigned long long)+0x1f>
c001e7af:	83 c4 0c             	add    esp,0xc
c001e7b2:	c3                   	ret    
c001e7b3:	fa                   	cli    
c001e7b4:	ff 05 28 24 03 c0    	inc    DWORD PTR ds:0xc0032428
c001e7ba:	83 ec 08             	sub    esp,0x8
c001e7bd:	ff 05 24 24 03 c0    	inc    DWORD PTR ds:0xc0032424
c001e7c3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e7c9:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e7cc:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e7cf:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e7d5:	68 38 24 03 c0       	push   0xc0032438
c001e7da:	e8 dd ab 00 00       	call   c00293bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e7df:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e7e6:	e8 3a ff ff ff       	call   c001e725 <blockTask(TaskState)>
c001e7eb:	a1 24 24 03 c0       	mov    eax,ds:0xc0032424
c001e7f0:	83 c4 10             	add    esp,0x10
c001e7f3:	48                   	dec    eax
c001e7f4:	a3 24 24 03 c0       	mov    ds:0xc0032424,eax
c001e7f9:	85 c0                	test   eax,eax
c001e7fb:	75 09                	jne    c001e806 <nanoSleepUntil(unsigned long long)+0x72>
c001e7fd:	a1 20 24 03 c0       	mov    eax,ds:0xc0032420
c001e802:	85 c0                	test   eax,eax
c001e804:	75 12                	jne    c001e818 <nanoSleepUntil(unsigned long long)+0x84>
c001e806:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c001e80b:	48                   	dec    eax
c001e80c:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c001e811:	75 9c                	jne    c001e7af <nanoSleepUntil(unsigned long long)+0x1b>
c001e813:	fb                   	sti    
c001e814:	83 c4 0c             	add    esp,0xc
c001e817:	c3                   	ret    
c001e818:	c7 05 20 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032420,0x0
c001e822:	e8 ff fc ff ff       	call   c001e526 <schedule()>
c001e827:	eb dd                	jmp    c001e806 <nanoSleepUntil(unsigned long long)+0x72>

c001e829 <nanoSleep(unsigned long long)>:
c001e829:	a1 70 f5 02 c0       	mov    eax,ds:0xc002f570
c001e82e:	8b 15 74 f5 02 c0    	mov    edx,DWORD PTR ds:0xc002f574
c001e834:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e838:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e83c:	e9 53 ff ff ff       	jmp    c001e794 <nanoSleepUntil(unsigned long long)>

c001e841 <sleep(unsigned long long)>:
c001e841:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e849:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e84e:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e852:	01 ca                	add    edx,ecx
c001e854:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e858:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e85c:	eb cb                	jmp    c001e829 <nanoSleep(unsigned long long)>

c001e85e <Semaphore::acquire()>:
c001e85e:	83 ec 0c             	sub    esp,0xc
c001e861:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e865:	fa                   	cli    
c001e866:	a1 24 24 03 c0       	mov    eax,ds:0xc0032424
c001e86b:	ff 05 28 24 03 c0    	inc    DWORD PTR ds:0xc0032428
c001e871:	8d 48 01             	lea    ecx,[eax+0x1]
c001e874:	89 0d 24 24 03 c0    	mov    DWORD PTR ds:0xc0032424,ecx
c001e87a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e87d:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e87f:	7d 28                	jge    c001e8a9 <Semaphore::acquire()+0x4b>
c001e881:	41                   	inc    ecx
c001e882:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e885:	a3 24 24 03 c0       	mov    ds:0xc0032424,eax
c001e88a:	85 c0                	test   eax,eax
c001e88c:	75 09                	jne    c001e897 <Semaphore::acquire()+0x39>
c001e88e:	a1 20 24 03 c0       	mov    eax,ds:0xc0032420
c001e893:	85 c0                	test   eax,eax
c001e895:	75 4e                	jne    c001e8e5 <Semaphore::acquire()+0x87>
c001e897:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c001e89c:	48                   	dec    eax
c001e89d:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c001e8a2:	75 01                	jne    c001e8a5 <Semaphore::acquire()+0x47>
c001e8a4:	fb                   	sti    
c001e8a5:	83 c4 0c             	add    esp,0xc
c001e8a8:	c3                   	ret    
c001e8a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8ae:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e8b5:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e8b8:	85 c9                	test   ecx,ecx
c001e8ba:	74 3a                	je     c001e8f6 <Semaphore::acquire()+0x98>
c001e8bc:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e8bf:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e8c5:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e8c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8cd:	83 ec 0c             	sub    esp,0xc
c001e8d0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e8d3:	6a 05                	push   0x5
c001e8d5:	e8 4b fe ff ff       	call   c001e725 <blockTask(TaskState)>
c001e8da:	a1 24 24 03 c0       	mov    eax,ds:0xc0032424
c001e8df:	83 c4 10             	add    esp,0x10
c001e8e2:	48                   	dec    eax
c001e8e3:	eb a0                	jmp    c001e885 <Semaphore::acquire()+0x27>
c001e8e5:	c7 05 20 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032420,0x0
c001e8ef:	e8 32 fc ff ff       	call   c001e526 <schedule()>
c001e8f4:	eb a1                	jmp    c001e897 <Semaphore::acquire()+0x39>
c001e8f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8fb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e8fe:	eb c8                	jmp    c001e8c8 <Semaphore::acquire()+0x6a>

c001e900 <taskReturned>:
c001e900:	83 ec 18             	sub    esp,0x18
c001e903:	68 64 ce 02 c0       	push   0xc002ce64
c001e908:	e8 83 bf ff ff       	call   c001a890 <Krnl::panic(char const*)>
c001e90d:	83 c4 10             	add    esp,0x10
c001e910:	83 ec 0c             	sub    esp,0xc
c001e913:	6a 02                	push   0x2
c001e915:	e8 0b fe ff ff       	call   c001e725 <blockTask(TaskState)>
c001e91a:	fa                   	cli    
c001e91b:	ff 05 28 24 03 c0    	inc    DWORD PTR ds:0xc0032428
c001e921:	e8 00 fc ff ff       	call   c001e526 <schedule()>
c001e926:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c001e92b:	83 c4 10             	add    esp,0x10
c001e92e:	48                   	dec    eax
c001e92f:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c001e934:	85 c0                	test   eax,eax
c001e936:	75 d8                	jne    c001e910 <taskReturned+0x10>
c001e938:	fb                   	sti    
c001e939:	eb d5                	jmp    c001e910 <taskReturned+0x10>

c001e93b <Thr::processFromPID(int)>:
c001e93b:	57                   	push   edi
c001e93c:	56                   	push   esi
c001e93d:	53                   	push   ebx
c001e93e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e942:	83 ec 0c             	sub    esp,0xc
c001e945:	68 5a cc 02 c0       	push   0xc002cc5a
c001e94a:	e8 7e 45 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001e94f:	fa                   	cli    
c001e950:	ff 05 28 24 03 c0    	inc    DWORD PTR ds:0xc0032428
c001e956:	c7 04 24 44 24 03 c0 	mov    DWORD PTR [esp],0xc0032444
c001e95d:	e8 a4 a9 00 00       	call   c0029306 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e962:	83 c4 10             	add    esp,0x10
c001e965:	89 c7                	mov    edi,eax
c001e967:	eb 14                	jmp    c001e97d <Thr::processFromPID(int)+0x42>
c001e969:	83 ec 0c             	sub    esp,0xc
c001e96c:	68 44 24 03 c0       	push   0xc0032444
c001e971:	e8 90 a9 00 00       	call   c0029306 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e976:	83 c4 10             	add    esp,0x10
c001e979:	39 f8                	cmp    eax,edi
c001e97b:	74 49                	je     c001e9c6 <Thr::processFromPID(int)+0x8b>
c001e97d:	83 ec 0c             	sub    esp,0xc
c001e980:	68 44 24 03 c0       	push   0xc0032444
c001e985:	e8 7c a9 00 00       	call   c0029306 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e98a:	c7 04 24 44 24 03 c0 	mov    DWORD PTR [esp],0xc0032444
c001e991:	89 c3                	mov    ebx,eax
c001e993:	e8 76 a9 00 00       	call   c002930e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e998:	58                   	pop    eax
c001e999:	5a                   	pop    edx
c001e99a:	53                   	push   ebx
c001e99b:	68 44 24 03 c0       	push   0xc0032444
c001e9a0:	e8 17 aa 00 00       	call   c00293bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e9a5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e9a8:	83 c4 10             	add    esp,0x10
c001e9ab:	39 30                	cmp    DWORD PTR [eax],esi
c001e9ad:	75 ba                	jne    c001e969 <Thr::processFromPID(int)+0x2e>
c001e9af:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c001e9b4:	48                   	dec    eax
c001e9b5:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c001e9ba:	74 07                	je     c001e9c3 <Thr::processFromPID(int)+0x88>
c001e9bc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e9bf:	5b                   	pop    ebx
c001e9c0:	5e                   	pop    esi
c001e9c1:	5f                   	pop    edi
c001e9c2:	c3                   	ret    
c001e9c3:	fb                   	sti    
c001e9c4:	eb f6                	jmp    c001e9bc <Thr::processFromPID(int)+0x81>
c001e9c6:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c001e9cb:	48                   	dec    eax
c001e9cc:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c001e9d1:	75 01                	jne    c001e9d4 <Thr::processFromPID(int)+0x99>
c001e9d3:	fb                   	sti    
c001e9d4:	83 ec 0c             	sub    esp,0xc
c001e9d7:	68 75 cc 02 c0       	push   0xc002cc75
c001e9dc:	e8 ec 44 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001e9e1:	83 c4 10             	add    esp,0x10
c001e9e4:	31 c0                	xor    eax,eax
c001e9e6:	5b                   	pop    ebx
c001e9e7:	5e                   	pop    esi
c001e9e8:	5f                   	pop    edi
c001e9e9:	c3                   	ret    

c001e9ea <unblockTask(ThreadControlBlock*)>:
c001e9ea:	53                   	push   ebx
c001e9eb:	83 ec 08             	sub    esp,0x8
c001e9ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e9f2:	fa                   	cli    
c001e9f3:	ff 05 28 24 03 c0    	inc    DWORD PTR ds:0xc0032428
c001e9f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e9fc:	85 c0                	test   eax,eax
c001e9fe:	74 66                	je     c001ea66 <unblockTask(ThreadControlBlock*)+0x7c>
c001ea00:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ea03:	48                   	dec    eax
c001ea04:	74 31                	je     c001ea37 <unblockTask(ThreadControlBlock*)+0x4d>
c001ea06:	83 ec 0c             	sub    esp,0xc
c001ea09:	68 44 24 03 c0       	push   0xc0032444
c001ea0e:	e8 f3 a8 00 00       	call   c0029306 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ea13:	83 c4 10             	add    esp,0x10
c001ea16:	85 c0                	test   eax,eax
c001ea18:	75 17                	jne    c001ea31 <unblockTask(ThreadControlBlock*)+0x47>
c001ea1a:	eb 68                	jmp    c001ea84 <unblockTask(ThreadControlBlock*)+0x9a>
c001ea1c:	83 ec 08             	sub    esp,0x8
c001ea1f:	50                   	push   eax
c001ea20:	68 44 24 03 c0       	push   0xc0032444
c001ea25:	e8 7a ac 00 00       	call   c00296a4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001ea2a:	83 c4 10             	add    esp,0x10
c001ea2d:	85 c0                	test   eax,eax
c001ea2f:	74 53                	je     c001ea84 <unblockTask(ThreadControlBlock*)+0x9a>
c001ea31:	39 c3                	cmp    ebx,eax
c001ea33:	75 e7                	jne    c001ea1c <unblockTask(ThreadControlBlock*)+0x32>
c001ea35:	eb 1c                	jmp    c001ea53 <unblockTask(ThreadControlBlock*)+0x69>
c001ea37:	83 ec 0c             	sub    esp,0xc
c001ea3a:	68 54 cf 02 c0       	push   0xc002cf54
c001ea3f:	e8 89 44 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001ea44:	c7 04 24 e0 ce 02 c0 	mov    DWORD PTR [esp],0xc002cee0
c001ea4b:	e8 7d 44 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001ea50:	83 c4 10             	add    esp,0x10
c001ea53:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c001ea58:	48                   	dec    eax
c001ea59:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c001ea5e:	75 01                	jne    c001ea61 <unblockTask(ThreadControlBlock*)+0x77>
c001ea60:	fb                   	sti    
c001ea61:	83 c4 08             	add    esp,0x8
c001ea64:	5b                   	pop    ebx
c001ea65:	c3                   	ret    
c001ea66:	83 ec 0c             	sub    esp,0xc
c001ea69:	68 98 ce 02 c0       	push   0xc002ce98
c001ea6e:	e8 5a 44 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001ea73:	c7 04 24 e0 ce 02 c0 	mov    DWORD PTR [esp],0xc002cee0
c001ea7a:	e8 4e 44 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001ea7f:	83 c4 10             	add    esp,0x10
c001ea82:	eb cf                	jmp    c001ea53 <unblockTask(ThreadControlBlock*)+0x69>
c001ea84:	83 ec 08             	sub    esp,0x8
c001ea87:	53                   	push   ebx
c001ea88:	68 44 24 03 c0       	push   0xc0032444
c001ea8d:	e8 2a a9 00 00       	call   c00293bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ea92:	83 c4 10             	add    esp,0x10
c001ea95:	eb bc                	jmp    c001ea53 <unblockTask(ThreadControlBlock*)+0x69>

c001ea97 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001ea97:	55                   	push   ebp
c001ea98:	57                   	push   edi
c001ea99:	56                   	push   esi
c001ea9a:	53                   	push   ebx
c001ea9b:	83 ec 1c             	sub    esp,0x1c
c001ea9e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001eaa2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eaa5:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001eaab:	85 ff                	test   edi,edi
c001eaad:	7e 20                	jle    c001eacf <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001eaaf:	31 f6                	xor    esi,esi
c001eab1:	83 ec 0c             	sub    esp,0xc
c001eab4:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001eabb:	46                   	inc    esi
c001eabc:	e8 7d 0e ff ff       	call   c000f93e <free>
c001eac1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eac4:	83 c4 10             	add    esp,0x10
c001eac7:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001eacd:	7f e2                	jg     c001eab1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001eacf:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ead9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001eade:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001eae1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001eae4:	d3 c0                	rol    eax,cl
c001eae6:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001eaed:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001eaf0:	89 f7                	mov    edi,esi
c001eaf2:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001eafa:	0f 85 74 01 00 00    	jne    c001ec74 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001eb00:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001eb06:	85 ed                	test   ebp,ebp
c001eb08:	74 1b                	je     c001eb25 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001eb0a:	83 ec 0c             	sub    esp,0xc
c001eb0d:	55                   	push   ebp
c001eb0e:	e8 f1 ba ff ff       	call   c001a604 <EnvVarContainer::~EnvVarContainer()>
c001eb13:	59                   	pop    ecx
c001eb14:	5e                   	pop    esi
c001eb15:	6a 0c                	push   0xc
c001eb17:	55                   	push   ebp
c001eb18:	e8 d0 42 ff ff       	call   c0012ded <operator delete(void*, unsigned long)>
c001eb1d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001eb20:	83 c4 10             	add    esp,0x10
c001eb23:	89 f7                	mov    edi,esi
c001eb25:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001eb2b:	85 c0                	test   eax,eax
c001eb2d:	0f 84 aa 00 00 00    	je     c001ebdd <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001eb33:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001eb36:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001eb3a:	31 c9                	xor    ecx,ecx
c001eb3c:	eb 10                	jmp    c001eb4e <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001eb3e:	41                   	inc    ecx
c001eb3f:	83 f9 10             	cmp    ecx,0x10
c001eb42:	0f 84 95 00 00 00    	je     c001ebdd <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001eb48:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001eb4e:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001eb55:	d3 fa                	sar    edx,cl
c001eb57:	83 e2 01             	and    edx,0x1
c001eb5a:	74 e2                	je     c001eb3e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001eb5c:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001eb5f:	01 ca                	add    edx,ecx
c001eb61:	89 d5                	mov    ebp,edx
c001eb63:	c1 e5 05             	shl    ebp,0x5
c001eb66:	01 ea                	add    edx,ebp
c001eb68:	01 d0                	add    eax,edx
c001eb6a:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001eb70:	83 fd 07             	cmp    ebp,0x7
c001eb73:	75 c9                	jne    c001eb3e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001eb75:	05 40 02 00 00       	add    eax,0x240
c001eb7a:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001eb7d:	83 fd ff             	cmp    ebp,0xffffffff
c001eb80:	0f 8c 08 01 00 00    	jl     c001ec8e <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001eb86:	0f 84 b9 01 00 00    	je     c001ed45 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001eb8c:	85 ed                	test   ebp,ebp
c001eb8e:	0f 84 a0 01 00 00    	je     c001ed34 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001eb94:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001eb96:	75 a6                	jne    c001eb3e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001eb98:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001eb9e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eba2:	01 d0                	add    eax,edx
c001eba4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001eba8:	83 ec 0c             	sub    esp,0xc
c001ebab:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001ebb1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ebb4:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ebba:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001ebc1:	50                   	push   eax
c001ebc2:	e8 23 fe ff ff       	call   c001e9ea <unblockTask(ThreadControlBlock*)>
c001ebc7:	83 c4 10             	add    esp,0x10
c001ebca:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ebcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ebd1:	89 f7                	mov    edi,esi
c001ebd3:	41                   	inc    ecx
c001ebd4:	83 f9 10             	cmp    ecx,0x10
c001ebd7:	0f 85 6b ff ff ff    	jne    c001eb48 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001ebdd:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001ebe3:	85 c0                	test   eax,eax
c001ebe5:	74 5d                	je     c001ec44 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001ebe7:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001ebed:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001ebf3:	74 4f                	je     c001ec44 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001ebf5:	83 ec 0c             	sub    esp,0xc
c001ebf8:	68 44 24 03 c0       	push   0xc0032444
c001ebfd:	e8 04 a7 00 00       	call   c0029306 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ec02:	c7 04 24 44 24 03 c0 	mov    DWORD PTR [esp],0xc0032444
c001ec09:	89 c7                	mov    edi,eax
c001ec0b:	e8 da a6 00 00       	call   c00292ea <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ec10:	83 c4 10             	add    esp,0x10
c001ec13:	84 c0                	test   al,al
c001ec15:	0f 84 e4 00 00 00    	je     c001ecff <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001ec1b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ec1e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ec24:	85 d2                	test   edx,edx
c001ec26:	74 0f                	je     c001ec37 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001ec28:	83 ec 0c             	sub    esp,0xc
c001ec2b:	8b 02                	mov    eax,DWORD PTR [edx]
c001ec2d:	52                   	push   edx
c001ec2e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ec31:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ec34:	83 c4 10             	add    esp,0x10
c001ec37:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001ec41:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001ec44:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001ec4a:	85 db                	test   ebx,ebx
c001ec4c:	74 16                	je     c001ec64 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001ec4e:	83 ec 0c             	sub    esp,0xc
c001ec51:	53                   	push   ebx
c001ec52:	e8 2b 35 ff ff       	call   c0012182 <VAS::~VAS()>
c001ec57:	58                   	pop    eax
c001ec58:	5a                   	pop    edx
c001ec59:	6a 14                	push   0x14
c001ec5b:	53                   	push   ebx
c001ec5c:	e8 8c 41 ff ff       	call   c0012ded <operator delete(void*, unsigned long)>
c001ec61:	83 c4 10             	add    esp,0x10
c001ec64:	83 ec 0c             	sub    esp,0xc
c001ec67:	68 8c cc 02 c0       	push   0xc002cc8c
c001ec6c:	e8 5c 42 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001ec71:	83 c4 10             	add    esp,0x10
c001ec74:	83 ec 08             	sub    esp,0x8
c001ec77:	68 3f 07 00 00       	push   0x73f
c001ec7c:	68 9a cc 02 c0       	push   0xc002cc9a
c001ec81:	e8 47 42 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001ec86:	83 c4 2c             	add    esp,0x2c
c001ec89:	5b                   	pop    ebx
c001ec8a:	5e                   	pop    esi
c001ec8b:	5f                   	pop    edi
c001ec8c:	5d                   	pop    ebp
c001ec8d:	c3                   	ret    
c001ec8e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ec92:	83 ec 0c             	sub    esp,0xc
c001ec95:	68 98 cf 02 c0       	push   0xc002cf98
c001ec9a:	e8 f1 bb ff ff       	call   c001a890 <Krnl::panic(char const*)>
c001ec9f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001eca2:	83 c4 10             	add    esp,0x10
c001eca5:	89 f7                	mov    edi,esi
c001eca7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ecab:	e9 8e fe ff ff       	jmp    c001eb3e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ecb0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ecb6:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001ecbc:	75 1c                	jne    c001ecda <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ecbe:	83 ec 0c             	sub    esp,0xc
c001ecc1:	68 00 d0 02 c0       	push   0xc002d000
c001ecc6:	e8 02 42 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001eccb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ecd2:	e8 4e fa ff ff       	call   c001e725 <blockTask(TaskState)>
c001ecd7:	83 c4 10             	add    esp,0x10
c001ecda:	83 ec 08             	sub    esp,0x8
c001ecdd:	56                   	push   esi
c001ecde:	68 44 24 03 c0       	push   0xc0032444
c001ece3:	e8 d4 a6 00 00       	call   c00293bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ece8:	c7 04 24 44 24 03 c0 	mov    DWORD PTR [esp],0xc0032444
c001ecef:	e8 12 a6 00 00       	call   c0029306 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ecf4:	83 c4 10             	add    esp,0x10
c001ecf7:	39 f8                	cmp    eax,edi
c001ecf9:	0f 84 1c ff ff ff    	je     c001ec1b <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001ecff:	83 ec 0c             	sub    esp,0xc
c001ed02:	68 44 24 03 c0       	push   0xc0032444
c001ed07:	e8 fa a5 00 00       	call   c0029306 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ed0c:	c7 04 24 44 24 03 c0 	mov    DWORD PTR [esp],0xc0032444
c001ed13:	89 c6                	mov    esi,eax
c001ed15:	e8 f4 a5 00 00       	call   c002930e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ed1a:	83 c4 10             	add    esp,0x10
c001ed1d:	39 f3                	cmp    ebx,esi
c001ed1f:	74 b9                	je     c001ecda <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ed21:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001ed24:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ed27:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001ed2d:	75 ab                	jne    c001ecda <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ed2f:	e9 7c ff ff ff       	jmp    c001ecb0 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001ed34:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ed38:	83 ec 0c             	sub    esp,0xc
c001ed3b:	68 cc cf 02 c0       	push   0xc002cfcc
c001ed40:	e9 55 ff ff ff       	jmp    c001ec9a <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001ed45:	8b 36                	mov    esi,DWORD PTR [esi]
c001ed47:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ed4b:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001ed4e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ed51:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001ed57:	01 d7                	add    edi,edx
c001ed59:	89 f8                	mov    eax,edi
c001ed5b:	e9 44 fe ff ff       	jmp    c001eba4 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001ed60 <cleanerTaskFunction(void*)>:
c001ed60:	53                   	push   ebx
c001ed61:	83 ec 08             	sub    esp,0x8
c001ed64:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c001ed69:	48                   	dec    eax
c001ed6a:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c001ed6f:	75 01                	jne    c001ed72 <cleanerTaskFunction(void*)+0x12>
c001ed71:	fb                   	sti    
c001ed72:	fa                   	cli    
c001ed73:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c001ed78:	80 3d 0c 24 03 c0 00 	cmp    BYTE PTR ds:0xc003240c,0x0
c001ed7f:	8d 50 01             	lea    edx,[eax+0x1]
c001ed82:	89 15 28 24 03 c0    	mov    DWORD PTR ds:0xc0032428,edx
c001ed88:	0f 84 b9 00 00 00    	je     c001ee47 <cleanerTaskFunction(void*)+0xe7>
c001ed8e:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c001ed93:	85 c0                	test   eax,eax
c001ed95:	75 01                	jne    c001ed98 <cleanerTaskFunction(void*)+0x38>
c001ed97:	fb                   	sti    
c001ed98:	c6 05 0c 24 03 c0 00 	mov    BYTE PTR ds:0xc003240c,0x0
c001ed9f:	fa                   	cli    
c001eda0:	ff 05 28 24 03 c0    	inc    DWORD PTR ds:0xc0032428
c001eda6:	ff 05 24 24 03 c0    	inc    DWORD PTR ds:0xc0032424
c001edac:	fa                   	cli    
c001edad:	ff 05 28 24 03 c0    	inc    DWORD PTR ds:0xc0032428
c001edb3:	eb 3e                	jmp    c001edf3 <cleanerTaskFunction(void*)+0x93>
c001edb5:	83 ec 0c             	sub    esp,0xc
c001edb8:	68 2c 24 03 c0       	push   0xc003242c
c001edbd:	e8 44 a5 00 00       	call   c0029306 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001edc2:	c7 04 24 2c 24 03 c0 	mov    DWORD PTR [esp],0xc003242c
c001edc9:	89 c3                	mov    ebx,eax
c001edcb:	e8 3e a5 00 00       	call   c002930e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001edd0:	c7 04 24 b0 cc 02 c0 	mov    DWORD PTR [esp],0xc002ccb0
c001edd7:	e8 f1 40 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001eddc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001eddf:	e8 b3 fc ff ff       	call   c001ea97 <cleanupTerminatedTask(ThreadControlBlock*)>
c001ede4:	c7 04 24 c9 cc 02 c0 	mov    DWORD PTR [esp],0xc002ccc9
c001edeb:	e8 dd 40 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001edf0:	83 c4 10             	add    esp,0x10
c001edf3:	83 ec 0c             	sub    esp,0xc
c001edf6:	68 2c 24 03 c0       	push   0xc003242c
c001edfb:	e8 ea a4 00 00       	call   c00292ea <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ee00:	83 c4 10             	add    esp,0x10
c001ee03:	84 c0                	test   al,al
c001ee05:	74 ae                	je     c001edb5 <cleanerTaskFunction(void*)+0x55>
c001ee07:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c001ee0c:	48                   	dec    eax
c001ee0d:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c001ee12:	75 01                	jne    c001ee15 <cleanerTaskFunction(void*)+0xb5>
c001ee14:	fb                   	sti    
c001ee15:	a1 24 24 03 c0       	mov    eax,ds:0xc0032424
c001ee1a:	48                   	dec    eax
c001ee1b:	a3 24 24 03 c0       	mov    ds:0xc0032424,eax
c001ee20:	0f 85 3e ff ff ff    	jne    c001ed64 <cleanerTaskFunction(void*)+0x4>
c001ee26:	a1 20 24 03 c0       	mov    eax,ds:0xc0032420
c001ee2b:	85 c0                	test   eax,eax
c001ee2d:	0f 84 31 ff ff ff    	je     c001ed64 <cleanerTaskFunction(void*)+0x4>
c001ee33:	c7 05 20 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032420,0x0
c001ee3d:	e8 e4 f6 ff ff       	call   c001e526 <schedule()>
c001ee42:	e9 1d ff ff ff       	jmp    c001ed64 <cleanerTaskFunction(void*)+0x4>
c001ee47:	83 ec 0c             	sub    esp,0xc
c001ee4a:	6a 02                	push   0x2
c001ee4c:	e8 86 f8 ff ff       	call   c001e6d7 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ee51:	83 c4 10             	add    esp,0x10
c001ee54:	e9 3f ff ff ff       	jmp    c001ed98 <cleanerTaskFunction(void*)+0x38>

c001ee59 <terminateTask(int)>:
c001ee59:	83 ec 14             	sub    esp,0x14
c001ee5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee61:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ee64:	83 c0 0c             	add    eax,0xc
c001ee67:	50                   	push   eax
c001ee68:	68 28 d0 02 c0       	push   0xc002d028
c001ee6d:	e8 5b 40 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001ee72:	fa                   	cli    
c001ee73:	ff 05 28 24 03 c0    	inc    DWORD PTR ds:0xc0032428
c001ee79:	ff 05 24 24 03 c0    	inc    DWORD PTR ds:0xc0032424
c001ee7f:	fa                   	cli    
c001ee80:	ff 05 28 24 03 c0    	inc    DWORD PTR ds:0xc0032428
c001ee86:	c7 04 24 dc cc 02 c0 	mov    DWORD PTR [esp],0xc002ccdc
c001ee8d:	e8 3b 40 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001ee92:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ee96:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee9b:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001ee9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eea3:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001eea6:	5a                   	pop    edx
c001eea7:	59                   	pop    ecx
c001eea8:	50                   	push   eax
c001eea9:	68 2c 24 03 c0       	push   0xc003242c
c001eeae:	e8 09 a5 00 00       	call   c00293bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001eeb3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eeb8:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001eebf:	c7 04 24 f6 cc 02 c0 	mov    DWORD PTR [esp],0xc002ccf6
c001eec6:	e8 02 40 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001eecb:	83 c4 10             	add    esp,0x10
c001eece:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001eed3:	85 c0                	test   eax,eax
c001eed5:	0f 84 8d 00 00 00    	je     c001ef68 <terminateTask(int)+0x10f>
c001eedb:	83 ec 0c             	sub    esp,0xc
c001eede:	68 10 cd 02 c0       	push   0xc002cd10
c001eee3:	e8 e5 3f ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001eee8:	58                   	pop    eax
c001eee9:	c6 05 0c 24 03 c0 01 	mov    BYTE PTR ds:0xc003240c,0x1
c001eef0:	ff 35 08 24 03 c0    	push   DWORD PTR ds:0xc0032408
c001eef6:	e8 ef fa ff ff       	call   c001e9ea <unblockTask(ThreadControlBlock*)>
c001eefb:	c7 04 24 2a cd 02 c0 	mov    DWORD PTR [esp],0xc002cd2a
c001ef02:	e8 c6 3f ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001ef07:	83 c4 10             	add    esp,0x10
c001ef0a:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c001ef0f:	48                   	dec    eax
c001ef10:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c001ef15:	75 01                	jne    c001ef18 <terminateTask(int)+0xbf>
c001ef17:	fb                   	sti    
c001ef18:	a1 24 24 03 c0       	mov    eax,ds:0xc0032424
c001ef1d:	48                   	dec    eax
c001ef1e:	a3 24 24 03 c0       	mov    ds:0xc0032424,eax
c001ef23:	75 09                	jne    c001ef2e <terminateTask(int)+0xd5>
c001ef25:	83 3d 20 24 03 c0 00 	cmp    DWORD PTR ds:0xc0032420,0x0
c001ef2c:	75 4c                	jne    c001ef7a <terminateTask(int)+0x121>
c001ef2e:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c001ef33:	48                   	dec    eax
c001ef34:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c001ef39:	75 01                	jne    c001ef3c <terminateTask(int)+0xe3>
c001ef3b:	fb                   	sti    
c001ef3c:	83 ec 0c             	sub    esp,0xc
c001ef3f:	68 62 cd 02 c0       	push   0xc002cd62
c001ef44:	e8 84 3f ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001ef49:	83 c4 10             	add    esp,0x10
c001ef4c:	fa                   	cli    
c001ef4d:	ff 05 28 24 03 c0    	inc    DWORD PTR ds:0xc0032428
c001ef53:	e8 ce f5 ff ff       	call   c001e526 <schedule()>
c001ef58:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c001ef5d:	48                   	dec    eax
c001ef5e:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c001ef63:	75 e7                	jne    c001ef4c <terminateTask(int)+0xf3>
c001ef65:	fb                   	sti    
c001ef66:	eb e4                	jmp    c001ef4c <terminateTask(int)+0xf3>
c001ef68:	83 ec 0c             	sub    esp,0xc
c001ef6b:	68 44 cd 02 c0       	push   0xc002cd44
c001ef70:	e8 58 3f ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001ef75:	83 c4 10             	add    esp,0x10
c001ef78:	eb 90                	jmp    c001ef0a <terminateTask(int)+0xb1>
c001ef7a:	c7 05 20 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032420,0x0
c001ef84:	e8 9d f5 ff ff       	call   c001e526 <schedule()>
c001ef89:	eb a3                	jmp    c001ef2e <terminateTask(int)+0xd5>

c001ef8b <Thr::terminateFromIRQ(int)>:
c001ef8b:	83 ec 18             	sub    esp,0x18
c001ef8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef92:	e8 c2 fe ff ff       	call   c001ee59 <terminateTask(int)>
c001ef97:	90                   	nop

c001ef98 <Semaphore::release()>:
c001ef98:	83 ec 0c             	sub    esp,0xc
c001ef9b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef9f:	fa                   	cli    
c001efa0:	a1 24 24 03 c0       	mov    eax,ds:0xc0032424
c001efa5:	ff 05 28 24 03 c0    	inc    DWORD PTR ds:0xc0032428
c001efab:	8d 48 01             	lea    ecx,[eax+0x1]
c001efae:	89 0d 24 24 03 c0    	mov    DWORD PTR ds:0xc0032424,ecx
c001efb4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001efb7:	85 c9                	test   ecx,ecx
c001efb9:	74 3c                	je     c001eff7 <Semaphore::release()+0x5f>
c001efbb:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001efbe:	83 ec 0c             	sub    esp,0xc
c001efc1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001efc4:	51                   	push   ecx
c001efc5:	e8 20 fa ff ff       	call   c001e9ea <unblockTask(ThreadControlBlock*)>
c001efca:	a1 24 24 03 c0       	mov    eax,ds:0xc0032424
c001efcf:	83 c4 10             	add    esp,0x10
c001efd2:	48                   	dec    eax
c001efd3:	a3 24 24 03 c0       	mov    ds:0xc0032424,eax
c001efd8:	85 c0                	test   eax,eax
c001efda:	75 09                	jne    c001efe5 <Semaphore::release()+0x4d>
c001efdc:	a1 20 24 03 c0       	mov    eax,ds:0xc0032420
c001efe1:	85 c0                	test   eax,eax
c001efe3:	75 17                	jne    c001effc <Semaphore::release()+0x64>
c001efe5:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c001efea:	48                   	dec    eax
c001efeb:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c001eff0:	75 01                	jne    c001eff3 <Semaphore::release()+0x5b>
c001eff2:	fb                   	sti    
c001eff3:	83 c4 0c             	add    esp,0xc
c001eff6:	c3                   	ret    
c001eff7:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001effa:	eb d7                	jmp    c001efd3 <Semaphore::release()+0x3b>
c001effc:	c7 05 20 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032420,0x0
c001f006:	e8 1b f5 ff ff       	call   c001e526 <schedule()>
c001f00b:	eb d8                	jmp    c001efe5 <Semaphore::release()+0x4d>

c001f00d <__static_initialization_and_destruction_0(int, int)>:
c001f00d:	83 ec 0c             	sub    esp,0xc
c001f010:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001f015:	0f 85 88 00 00 00    	jne    c001f0a3 <__static_initialization_and_destruction_0(int, int)+0x96>
c001f01b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001f023:	75 7e                	jne    c001f0a3 <__static_initialization_and_destruction_0(int, int)+0x96>
c001f025:	83 ec 0c             	sub    esp,0xc
c001f028:	68 44 24 03 c0       	push   0xc0032444
c001f02d:	e8 1a a6 00 00       	call   c002964c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f032:	83 c4 10             	add    esp,0x10
c001f035:	83 ec 04             	sub    esp,0x4
c001f038:	68 10 de 02 c0       	push   0xc002de10
c001f03d:	68 44 24 03 c0       	push   0xc0032444
c001f042:	68 00 96 02 c0       	push   0xc0029600
c001f047:	e8 1b 3d ff ff       	call   c0012d67 <__cxa_atexit>
c001f04c:	83 c4 10             	add    esp,0x10
c001f04f:	83 ec 0c             	sub    esp,0xc
c001f052:	68 38 24 03 c0       	push   0xc0032438
c001f057:	e8 f0 a5 00 00       	call   c002964c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f05c:	83 c4 10             	add    esp,0x10
c001f05f:	83 ec 04             	sub    esp,0x4
c001f062:	68 10 de 02 c0       	push   0xc002de10
c001f067:	68 38 24 03 c0       	push   0xc0032438
c001f06c:	68 00 96 02 c0       	push   0xc0029600
c001f071:	e8 f1 3c ff ff       	call   c0012d67 <__cxa_atexit>
c001f076:	83 c4 10             	add    esp,0x10
c001f079:	83 ec 0c             	sub    esp,0xc
c001f07c:	68 2c 24 03 c0       	push   0xc003242c
c001f081:	e8 c6 a5 00 00       	call   c002964c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f086:	83 c4 10             	add    esp,0x10
c001f089:	83 ec 04             	sub    esp,0x4
c001f08c:	68 10 de 02 c0       	push   0xc002de10
c001f091:	68 2c 24 03 c0       	push   0xc003242c
c001f096:	68 00 96 02 c0       	push   0xc0029600
c001f09b:	e8 c7 3c ff ff       	call   c0012d67 <__cxa_atexit>
c001f0a0:	83 c4 10             	add    esp,0x10
c001f0a3:	90                   	nop
c001f0a4:	83 c4 0c             	add    esp,0xc
c001f0a7:	c3                   	ret    

c001f0a8 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001f0a8:	83 ec 0c             	sub    esp,0xc
c001f0ab:	83 ec 08             	sub    esp,0x8
c001f0ae:	68 ff ff 00 00       	push   0xffff
c001f0b3:	6a 01                	push   0x1
c001f0b5:	e8 53 ff ff ff       	call   c001f00d <__static_initialization_and_destruction_0(int, int)>
c001f0ba:	83 c4 10             	add    esp,0x10
c001f0bd:	83 c4 0c             	add    esp,0xc
c001f0c0:	c3                   	ret    

c001f0c1 <Vm::inbv(unsigned short)>:
c001f0c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f0c5:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f0ca:	75 06                	jne    c001f0d2 <Vm::inbv(unsigned short)+0x11>
c001f0cc:	a0 8c 24 03 c0       	mov    al,ds:0xc003248c
c001f0d1:	c3                   	ret    
c001f0d2:	ec                   	in     al,dx
c001f0d3:	c3                   	ret    

c001f0d4 <Vm::outbv(unsigned short, unsigned char)>:
c001f0d4:	53                   	push   ebx
c001f0d5:	83 ec 08             	sub    esp,0x8
c001f0d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f0dc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f0e0:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f0e5:	75 38                	jne    c001f11f <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001f0e7:	0f b6 c3             	movzx  eax,bl
c001f0ea:	51                   	push   ecx
c001f0eb:	51                   	push   ecx
c001f0ec:	50                   	push   eax
c001f0ed:	68 47 d0 02 c0       	push   0xc002d047
c001f0f2:	e8 d6 3d ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001f0f7:	8b 15 8c 24 03 c0    	mov    edx,DWORD PTR ds:0xc003248c
c001f0fd:	83 c4 10             	add    esp,0x10
c001f100:	8d 42 01             	lea    eax,[edx+0x1]
c001f103:	88 9a a0 24 03 c0    	mov    BYTE PTR [edx-0x3ffcdb60],bl
c001f109:	a3 8c 24 03 c0       	mov    ds:0xc003248c,eax
c001f10e:	83 f8 20             	cmp    eax,0x20
c001f111:	75 0f                	jne    c001f122 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f113:	c7 05 8c 24 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003248c,0x1f
c001f11d:	eb 03                	jmp    c001f122 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f11f:	88 d8                	mov    al,bl
c001f121:	ee                   	out    dx,al
c001f122:	83 c4 08             	add    esp,0x8
c001f125:	5b                   	pop    ebx
c001f126:	c3                   	ret    

c001f127 <Vm::realToLinear(unsigned short, unsigned short)>:
c001f127:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f12c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f131:	c1 e0 04             	shl    eax,0x4
c001f134:	01 d0                	add    eax,edx
c001f136:	c3                   	ret    

c001f137 <Vm::getSegment(unsigned int)>:
c001f137:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f13b:	c1 e8 10             	shr    eax,0x10
c001f13e:	c3                   	ret    

c001f13f <Vm::getOffset(unsigned int)>:
c001f13f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f143:	c3                   	ret    

c001f144 <Vm::mainloop2()>:
c001f144:	83 ec 18             	sub    esp,0x18
c001f147:	fa                   	cli    
c001f148:	ff 05 28 24 03 c0    	inc    DWORD PTR ds:0xc0032428
c001f14e:	6a 02                	push   0x2
c001f150:	c6 05 85 24 03 c0 01 	mov    BYTE PTR ds:0xc0032485,0x1
c001f157:	e8 7b f5 ff ff       	call   c001e6d7 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f15c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f161:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001f165:	52                   	push   edx
c001f166:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001f16a:	52                   	push   edx
c001f16b:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001f16f:	52                   	push   edx
c001f170:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001f174:	50                   	push   eax
c001f175:	e8 80 11 fe ff       	call   c00002fa <goToVM86>
c001f17a:	83 c4 2c             	add    esp,0x2c
c001f17d:	c3                   	ret    

c001f17e <Vm::mainVm8086Loop(void*)>:
c001f17e:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c001f183:	48                   	dec    eax
c001f184:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c001f189:	75 01                	jne    c001f18c <Vm::mainVm8086Loop(void*)+0xe>
c001f18b:	fb                   	sti    
c001f18c:	eb b6                	jmp    c001f144 <Vm::mainloop2()>

c001f18e <Vm::mainloop3(unsigned long)>:
c001f18e:	83 ec 18             	sub    esp,0x18
c001f191:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f195:	fa                   	cli    
c001f196:	ff 05 28 24 03 c0    	inc    DWORD PTR ds:0xc0032428
c001f19c:	6a 02                	push   0x2
c001f19e:	c6 05 84 24 03 c0 01 	mov    BYTE PTR ds:0xc0032484,0x1
c001f1a5:	a3 80 24 03 c0       	mov    ds:0xc0032480,eax
c001f1aa:	e8 28 f5 ff ff       	call   c001e6d7 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f1af:	83 c4 1c             	add    esp,0x1c
c001f1b2:	eb 90                	jmp    c001f144 <Vm::mainloop2()>

c001f1b4 <Vm::initialise8086()>:
c001f1b4:	83 ec 0c             	sub    esp,0xc
c001f1b7:	68 80 00 00 00       	push   0x80
c001f1bc:	6a 00                	push   0x0
c001f1be:	68 7e f1 01 c0       	push   0xc001f17e
c001f1c3:	ff 35 50 24 03 c0    	push   DWORD PTR ds:0xc0032450
c001f1c9:	e8 14 f1 ff ff       	call   c001e2e2 <Process::createThread(void (*)(void*), void*, int)>
c001f1ce:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001f1d5:	a3 88 24 03 c0       	mov    ds:0xc0032488,eax
c001f1da:	68 00 01 00 00       	push   0x100
c001f1df:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c001f1e4:	6a 00                	push   0x0
c001f1e6:	6a 00                	push   0x0
c001f1e8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001f1ee:	e8 01 34 ff ff       	call   c00125f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f1f3:	83 c4 2c             	add    esp,0x2c
c001f1f6:	c3                   	ret    

c001f1f7 <Vm::finish8086()>:
c001f1f7:	53                   	push   ebx
c001f1f8:	83 ec 08             	sub    esp,0x8
c001f1fb:	fa                   	cli    
c001f1fc:	ff 05 28 24 03 c0    	inc    DWORD PTR ds:0xc0032428
c001f202:	80 3d 84 24 03 c0 00 	cmp    BYTE PTR ds:0xc0032484,0x0
c001f209:	75 15                	jne    c001f220 <Vm::finish8086()+0x29>
c001f20b:	e8 16 f3 ff ff       	call   c001e526 <schedule()>
c001f210:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c001f215:	48                   	dec    eax
c001f216:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c001f21b:	75 de                	jne    c001f1fb <Vm::finish8086()+0x4>
c001f21d:	fb                   	sti    
c001f21e:	eb db                	jmp    c001f1fb <Vm::finish8086()+0x4>
c001f220:	83 ec 0c             	sub    esp,0xc
c001f223:	8b 1d 80 24 03 c0    	mov    ebx,DWORD PTR ds:0xc0032480
c001f229:	ff 35 88 24 03 c0    	push   DWORD PTR ds:0xc0032488
c001f22f:	c6 05 84 24 03 c0 00 	mov    BYTE PTR ds:0xc0032484,0x0
c001f236:	e8 af f7 ff ff       	call   c001e9ea <unblockTask(ThreadControlBlock*)>
c001f23b:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c001f240:	83 c4 10             	add    esp,0x10
c001f243:	8d 50 ff             	lea    edx,[eax-0x1]
c001f246:	89 15 28 24 03 c0    	mov    DWORD PTR ds:0xc0032428,edx
c001f24c:	85 d2                	test   edx,edx
c001f24e:	75 01                	jne    c001f251 <Vm::finish8086()+0x5a>
c001f250:	fb                   	sti    
c001f251:	89 d8                	mov    eax,ebx
c001f253:	83 c4 08             	add    esp,0x8
c001f256:	5b                   	pop    ebx
c001f257:	c3                   	ret    

c001f258 <Vm::getOutput8086(unsigned char*)>:
c001f258:	57                   	push   edi
c001f259:	8b 0d 8c 24 03 c0    	mov    ecx,DWORD PTR ds:0xc003248c
c001f25f:	56                   	push   esi
c001f260:	be a0 24 03 c0       	mov    esi,0xc00324a0
c001f265:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f269:	fc                   	cld    
c001f26a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f26c:	a1 8c 24 03 c0       	mov    eax,ds:0xc003248c
c001f271:	5e                   	pop    esi
c001f272:	c7 05 8c 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003248c,0x0
c001f27c:	5f                   	pop    edi
c001f27d:	c3                   	ret    

c001f27e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001f27e:	55                   	push   ebp
c001f27f:	57                   	push   edi
c001f280:	56                   	push   esi
c001f281:	53                   	push   ebx
c001f282:	83 ec 2c             	sub    esp,0x2c
c001f285:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f289:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f28d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f291:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001f295:	fa                   	cli    
c001f296:	ff 05 28 24 03 c0    	inc    DWORD PTR ds:0xc0032428
c001f29c:	0f b6 35 85 24 03 c0 	movzx  esi,BYTE PTR ds:0xc0032485
c001f2a3:	89 f0                	mov    eax,esi
c001f2a5:	84 c0                	test   al,al
c001f2a7:	75 1d                	jne    c001f2c6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001f2a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f2ad:	e8 74 f2 ff ff       	call   c001e526 <schedule()>
c001f2b2:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c001f2b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f2bb:	48                   	dec    eax
c001f2bc:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c001f2c1:	75 d2                	jne    c001f295 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f2c3:	fb                   	sti    
c001f2c4:	eb cf                	jmp    c001f295 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f2c6:	a1 88 24 03 c0       	mov    eax,ds:0xc0032488
c001f2cb:	c7 05 8c 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003248c,0x0
c001f2d5:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001f2d9:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001f2dd:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001f2e1:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001f2e5:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001f2e9:	50                   	push   eax
c001f2ea:	6a 20                	push   0x20
c001f2ec:	6a 00                	push   0x0
c001f2ee:	68 a0 24 03 c0       	push   0xc00324a0
c001f2f3:	e8 74 14 fe ff       	call   c000076c <memset>
c001f2f8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001f2ff:	e8 2a 06 ff ff       	call   c000f92e <malloc>
c001f304:	83 c4 0c             	add    esp,0xc
c001f307:	89 c3                	mov    ebx,eax
c001f309:	ff 35 50 24 03 c0    	push   DWORD PTR ds:0xc0032450
c001f30f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f313:	50                   	push   eax
c001f314:	e8 13 41 ff ff       	call   c001342c <File::File(char const*, Process*)>
c001f319:	83 c4 10             	add    esp,0x10
c001f31c:	85 db                	test   ebx,ebx
c001f31e:	75 0a                	jne    c001f32a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001f320:	83 ec 0c             	sub    esp,0xc
c001f323:	68 63 d0 02 c0       	push   0xc002d063
c001f328:	eb 3e                	jmp    c001f368 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f32a:	50                   	push   eax
c001f32b:	8d 44 24 17          	lea    eax,[esp+0x17]
c001f32f:	50                   	push   eax
c001f330:	8d 44 24 20          	lea    eax,[esp+0x20]
c001f334:	50                   	push   eax
c001f335:	53                   	push   ebx
c001f336:	e8 01 44 ff ff       	call   c001373c <File::stat(unsigned long long*, bool*)>
c001f33b:	83 c4 10             	add    esp,0x10
c001f33e:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001f343:	74 0a                	je     c001f34f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001f345:	83 ec 0c             	sub    esp,0xc
c001f348:	68 77 d0 02 c0       	push   0xc002d077
c001f34d:	eb 19                	jmp    c001f368 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f34f:	51                   	push   ecx
c001f350:	51                   	push   ecx
c001f351:	6a 01                	push   0x1
c001f353:	53                   	push   ebx
c001f354:	e8 37 41 ff ff       	call   c0013490 <File::open(FileOpenMode)>
c001f359:	83 c4 10             	add    esp,0x10
c001f35c:	85 c0                	test   eax,eax
c001f35e:	74 24                	je     c001f384 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001f360:	83 ec 0c             	sub    esp,0xc
c001f363:	68 90 d0 02 c0       	push   0xc002d090
c001f368:	e8 23 b5 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c001f36d:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c001f372:	83 c4 10             	add    esp,0x10
c001f375:	48                   	dec    eax
c001f376:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c001f37b:	85 c0                	test   eax,eax
c001f37d:	75 01                	jne    c001f380 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001f37f:	fb                   	sti    
c001f380:	31 f6                	xor    esi,esi
c001f382:	eb 58                	jmp    c001f3dc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001f384:	0f b7 ed             	movzx  ebp,bp
c001f387:	50                   	push   eax
c001f388:	0f b7 ff             	movzx  edi,di
c001f38b:	50                   	push   eax
c001f38c:	55                   	push   ebp
c001f38d:	57                   	push   edi
c001f38e:	e8 94 fd ff ff       	call   c001f127 <Vm::realToLinear(unsigned short, unsigned short)>
c001f393:	5a                   	pop    edx
c001f394:	8b 13                	mov    edx,DWORD PTR [ebx]
c001f396:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001f39a:	51                   	push   ecx
c001f39b:	50                   	push   eax
c001f39c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f3a0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f3a4:	53                   	push   ebx
c001f3a5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001f3a8:	83 c4 14             	add    esp,0x14
c001f3ab:	53                   	push   ebx
c001f3ac:	e8 3d 41 ff ff       	call   c00134ee <File::close()>
c001f3b1:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c001f3b6:	83 c4 10             	add    esp,0x10
c001f3b9:	48                   	dec    eax
c001f3ba:	c6 05 85 24 03 c0 00 	mov    BYTE PTR ds:0xc0032485,0x0
c001f3c1:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c001f3c6:	85 c0                	test   eax,eax
c001f3c8:	75 01                	jne    c001f3cb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001f3ca:	fb                   	sti    
c001f3cb:	83 ec 0c             	sub    esp,0xc
c001f3ce:	ff 35 88 24 03 c0    	push   DWORD PTR ds:0xc0032488
c001f3d4:	e8 11 f6 ff ff       	call   c001e9ea <unblockTask(ThreadControlBlock*)>
c001f3d9:	83 c4 10             	add    esp,0x10
c001f3dc:	83 c4 2c             	add    esp,0x2c
c001f3df:	89 f0                	mov    eax,esi
c001f3e1:	5b                   	pop    ebx
c001f3e2:	5e                   	pop    esi
c001f3e3:	5f                   	pop    edi
c001f3e4:	5d                   	pop    ebp
c001f3e5:	c3                   	ret    

c001f3e6 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001f3e6:	57                   	push   edi
c001f3e7:	56                   	push   esi
c001f3e8:	53                   	push   ebx
c001f3e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f3ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f3f1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f3f5:	83 e8 06             	sub    eax,0x6
c001f3f8:	0f b7 c0             	movzx  eax,ax
c001f3fb:	50                   	push   eax
c001f3fc:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001f401:	50                   	push   eax
c001f402:	e8 20 fd ff ff       	call   c001f127 <Vm::realToLinear(unsigned short, unsigned short)>
c001f407:	5a                   	pop    edx
c001f408:	5e                   	pop    esi
c001f409:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001f40c:	8d 56 fa             	lea    edx,[esi-0x6]
c001f40f:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f415:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001f418:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001f41b:	83 c2 02             	add    edx,0x2
c001f41e:	66 89 10             	mov    WORD PTR [eax],dx
c001f421:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001f424:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001f428:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001f42b:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001f42f:	89 d6                	mov    esi,edx
c001f431:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001f437:	66 81 e6 ff fd       	and    si,0xfdff
c001f43c:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001f440:	74 07                	je     c001f449 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001f442:	89 d6                	mov    esi,edx
c001f444:	66 81 ce 00 02       	or     si,0x200
c001f449:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001f44d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f452:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f456:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001f45e:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001f461:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001f469:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001f46c:	5b                   	pop    ebx
c001f46d:	5e                   	pop    esi
c001f46e:	5f                   	pop    edi
c001f46f:	c3                   	ret    

c001f470 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001f470:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f475:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f47a:	c1 e0 04             	shl    eax,0x4
c001f47d:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001f480:	c3                   	ret    

c001f481 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001f481:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f486:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f48b:	c1 e0 04             	shl    eax,0x4
c001f48e:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001f492:	c3                   	ret    

c001f493 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001f493:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f498:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f49d:	c1 e0 04             	shl    eax,0x4
c001f4a0:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001f4a3:	c3                   	ret    

c001f4a4 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001f4a4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f4a9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f4ae:	c1 e0 04             	shl    eax,0x4
c001f4b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f4b5:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001f4b8:	c3                   	ret    

c001f4b9 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001f4b9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f4be:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f4c3:	c1 e0 04             	shl    eax,0x4
c001f4c6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f4ca:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001f4ce:	c3                   	ret    

c001f4cf <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001f4cf:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f4d4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f4d9:	c1 e0 04             	shl    eax,0x4
c001f4dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f4e0:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001f4e3:	c3                   	ret    

c001f4e4 <Vm::faultHandler(regs*)>:
c001f4e4:	55                   	push   ebp
c001f4e5:	57                   	push   edi
c001f4e6:	56                   	push   esi
c001f4e7:	53                   	push   ebx
c001f4e8:	83 ec 1c             	sub    esp,0x1c
c001f4eb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f4ef:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001f4f2:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001f4f5:	0f b7 c1             	movzx  eax,cx
c001f4f8:	50                   	push   eax
c001f4f9:	0f b7 c3             	movzx  eax,bx
c001f4fc:	c1 e3 04             	shl    ebx,0x4
c001f4ff:	50                   	push   eax
c001f500:	e8 22 fc ff ff       	call   c001f127 <Vm::realToLinear(unsigned short, unsigned short)>
c001f505:	5a                   	pop    edx
c001f506:	89 c5                	mov    ebp,eax
c001f508:	5e                   	pop    esi
c001f509:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001f50d:	50                   	push   eax
c001f50e:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f512:	50                   	push   eax
c001f513:	e8 0f fc ff ff       	call   c001f127 <Vm::realToLinear(unsigned short, unsigned short)>
c001f518:	01 cb                	add    ebx,ecx
c001f51a:	89 c6                	mov    esi,eax
c001f51c:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001f520:	50                   	push   eax
c001f521:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f525:	50                   	push   eax
c001f526:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f52a:	50                   	push   eax
c001f52b:	55                   	push   ebp
c001f52c:	53                   	push   ebx
c001f52d:	b3 06                	mov    bl,0x6
c001f52f:	68 a9 d0 02 c0       	push   0xc002d0a9
c001f534:	e8 94 39 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001f539:	83 c4 20             	add    esp,0x20
c001f53c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001f541:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f546:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f54a:	3c 9d                	cmp    al,0x9d
c001f54c:	0f 84 d7 02 00 00    	je     c001f829 <Vm::faultHandler(regs*)+0x345>
c001f552:	0f 87 a3 00 00 00    	ja     c001f5fb <Vm::faultHandler(regs*)+0x117>
c001f558:	3c 66                	cmp    al,0x66
c001f55a:	0f 84 15 02 00 00    	je     c001f775 <Vm::faultHandler(regs*)+0x291>
c001f560:	77 5f                	ja     c001f5c1 <Vm::faultHandler(regs*)+0xdd>
c001f562:	3c 36                	cmp    al,0x36
c001f564:	0f 84 f1 01 00 00    	je     c001f75b <Vm::faultHandler(regs*)+0x277>
c001f56a:	77 28                	ja     c001f594 <Vm::faultHandler(regs*)+0xb0>
c001f56c:	3c 26                	cmp    al,0x26
c001f56e:	0f 84 99 01 00 00    	je     c001f70d <Vm::faultHandler(regs*)+0x229>
c001f574:	3c 2e                	cmp    al,0x2e
c001f576:	0f 85 3b 07 00 00    	jne    c001fcb7 <Vm::faultHandler(regs*)+0x7d3>
c001f57c:	83 ec 0c             	sub    esp,0xc
c001f57f:	31 db                	xor    ebx,ebx
c001f581:	68 be d0 02 c0       	push   0xc002d0be
c001f586:	e8 42 39 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001f58b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f58e:	83 c4 10             	add    esp,0x10
c001f591:	45                   	inc    ebp
c001f592:	eb b2                	jmp    c001f546 <Vm::faultHandler(regs*)+0x62>
c001f594:	3c 64                	cmp    al,0x64
c001f596:	0f 84 8b 01 00 00    	je     c001f727 <Vm::faultHandler(regs*)+0x243>
c001f59c:	0f 87 9f 01 00 00    	ja     c001f741 <Vm::faultHandler(regs*)+0x25d>
c001f5a2:	3c 3e                	cmp    al,0x3e
c001f5a4:	0f 85 0d 07 00 00    	jne    c001fcb7 <Vm::faultHandler(regs*)+0x7d3>
c001f5aa:	83 ec 0c             	sub    esp,0xc
c001f5ad:	b3 01                	mov    bl,0x1
c001f5af:	68 c2 d0 02 c0       	push   0xc002d0c2
c001f5b4:	e8 14 39 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001f5b9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f5bc:	83 c4 10             	add    esp,0x10
c001f5bf:	eb d0                	jmp    c001f591 <Vm::faultHandler(regs*)+0xad>
c001f5c1:	3c 6d                	cmp    al,0x6d
c001f5c3:	0f 84 af 03 00 00    	je     c001f978 <Vm::faultHandler(regs*)+0x494>
c001f5c9:	77 15                	ja     c001f5e0 <Vm::faultHandler(regs*)+0xfc>
c001f5cb:	3c 67                	cmp    al,0x67
c001f5cd:	0f 84 bf 01 00 00    	je     c001f792 <Vm::faultHandler(regs*)+0x2ae>
c001f5d3:	3c 6c                	cmp    al,0x6c
c001f5d5:	0f 84 3f 03 00 00    	je     c001f91a <Vm::faultHandler(regs*)+0x436>
c001f5db:	e9 d7 06 00 00       	jmp    c001fcb7 <Vm::faultHandler(regs*)+0x7d3>
c001f5e0:	3c 6f                	cmp    al,0x6f
c001f5e2:	0f 84 a4 04 00 00    	je     c001fa8c <Vm::faultHandler(regs*)+0x5a8>
c001f5e8:	0f 82 11 04 00 00    	jb     c001f9ff <Vm::faultHandler(regs*)+0x51b>
c001f5ee:	3c 9c                	cmp    al,0x9c
c001f5f0:	0f 84 ba 01 00 00    	je     c001f7b0 <Vm::faultHandler(regs*)+0x2cc>
c001f5f6:	e9 bc 06 00 00       	jmp    c001fcb7 <Vm::faultHandler(regs*)+0x7d3>
c001f5fb:	3c ec                	cmp    al,0xec
c001f5fd:	0f 84 24 06 00 00    	je     c001fc27 <Vm::faultHandler(regs*)+0x743>
c001f603:	0f 87 93 00 00 00    	ja     c001f69c <Vm::faultHandler(regs*)+0x1b8>
c001f609:	3c e4                	cmp    al,0xe4
c001f60b:	0f 84 5c 05 00 00    	je     c001fb6d <Vm::faultHandler(regs*)+0x689>
c001f611:	77 6a                	ja     c001f67d <Vm::faultHandler(regs*)+0x199>
c001f613:	3c cd                	cmp    al,0xcd
c001f615:	0f 84 7e 02 00 00    	je     c001f899 <Vm::faultHandler(regs*)+0x3b5>
c001f61b:	3c cf                	cmp    al,0xcf
c001f61d:	0f 85 94 06 00 00    	jne    c001fcb7 <Vm::faultHandler(regs*)+0x7d3>
c001f623:	83 ec 0c             	sub    esp,0xc
c001f626:	68 06 d1 02 c0       	push   0xc002d106
c001f62b:	e8 9d 38 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001f630:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001f633:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001f636:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001f63a:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001f63d:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001f641:	0d 00 02 02 00       	or     eax,0x20200
c001f646:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f649:	56                   	push   esi
c001f64a:	53                   	push   ebx
c001f64b:	52                   	push   edx
c001f64c:	68 0c d1 02 c0       	push   0xc002d10c
c001f651:	e8 77 38 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001f656:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001f65a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f660:	66 c1 e8 09          	shr    ax,0x9
c001f664:	83 e0 01             	and    eax,0x1
c001f667:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f66a:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f66d:	83 c0 06             	add    eax,0x6
c001f670:	25 ff ff 00 00       	and    eax,0xffff
c001f675:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f678:	e9 95 02 00 00       	jmp    c001f912 <Vm::faultHandler(regs*)+0x42e>
c001f67d:	3c e6                	cmp    al,0xe6
c001f67f:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f683:	0f 84 4e 05 00 00    	je     c001fbd7 <Vm::faultHandler(regs*)+0x6f3>
c001f689:	0f 82 0a 05 00 00    	jb     c001fb99 <Vm::faultHandler(regs*)+0x6b5>
c001f68f:	3c e7                	cmp    al,0xe7
c001f691:	0f 84 69 05 00 00    	je     c001fc00 <Vm::faultHandler(regs*)+0x71c>
c001f697:	e9 1b 06 00 00       	jmp    c001fcb7 <Vm::faultHandler(regs*)+0x7d3>
c001f69c:	3c ef                	cmp    al,0xef
c001f69e:	0f 84 e6 05 00 00    	je     c001fc8a <Vm::faultHandler(regs*)+0x7a6>
c001f6a4:	77 37                	ja     c001f6dd <Vm::faultHandler(regs*)+0x1f9>
c001f6a6:	3c ed                	cmp    al,0xed
c001f6a8:	0f 84 a3 05 00 00    	je     c001fc51 <Vm::faultHandler(regs*)+0x76d>
c001f6ae:	3c ee                	cmp    al,0xee
c001f6b0:	0f 85 01 06 00 00    	jne    c001fcb7 <Vm::faultHandler(regs*)+0x7d3>
c001f6b6:	52                   	push   edx
c001f6b7:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f6ba:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f6bd:	68 a7 d1 02 c0       	push   0xc002d1a7
c001f6c2:	e8 06 38 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001f6c7:	59                   	pop    ecx
c001f6c8:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f6cc:	5b                   	pop    ebx
c001f6cd:	50                   	push   eax
c001f6ce:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f6d2:	50                   	push   eax
c001f6d3:	e8 fc f9 ff ff       	call   c001f0d4 <Vm::outbv(unsigned short, unsigned char)>
c001f6d8:	e9 a5 05 00 00       	jmp    c001fc82 <Vm::faultHandler(regs*)+0x79e>
c001f6dd:	3c fa                	cmp    al,0xfa
c001f6df:	0f 84 f7 01 00 00    	je     c001f8dc <Vm::faultHandler(regs*)+0x3f8>
c001f6e5:	3c fb                	cmp    al,0xfb
c001f6e7:	0f 84 0a 02 00 00    	je     c001f8f7 <Vm::faultHandler(regs*)+0x413>
c001f6ed:	3c f3                	cmp    al,0xf3
c001f6ef:	0f 85 c2 05 00 00    	jne    c001fcb7 <Vm::faultHandler(regs*)+0x7d3>
c001f6f5:	83 ec 0c             	sub    esp,0xc
c001f6f8:	68 df d0 02 c0       	push   0xc002d0df
c001f6fd:	e8 cb 37 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001f702:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f705:	83 c4 10             	add    esp,0x10
c001f708:	e9 84 fe ff ff       	jmp    c001f591 <Vm::faultHandler(regs*)+0xad>
c001f70d:	83 ec 0c             	sub    esp,0xc
c001f710:	b3 02                	mov    bl,0x2
c001f712:	68 ba d0 02 c0       	push   0xc002d0ba
c001f717:	e8 b1 37 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001f71c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f71f:	83 c4 10             	add    esp,0x10
c001f722:	e9 6a fe ff ff       	jmp    c001f591 <Vm::faultHandler(regs*)+0xad>
c001f727:	83 ec 0c             	sub    esp,0xc
c001f72a:	b3 03                	mov    bl,0x3
c001f72c:	68 c6 d0 02 c0       	push   0xc002d0c6
c001f731:	e8 97 37 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001f736:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f739:	83 c4 10             	add    esp,0x10
c001f73c:	e9 50 fe ff ff       	jmp    c001f591 <Vm::faultHandler(regs*)+0xad>
c001f741:	83 ec 0c             	sub    esp,0xc
c001f744:	b3 04                	mov    bl,0x4
c001f746:	68 ca d0 02 c0       	push   0xc002d0ca
c001f74b:	e8 7d 37 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001f750:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f753:	83 c4 10             	add    esp,0x10
c001f756:	e9 36 fe ff ff       	jmp    c001f591 <Vm::faultHandler(regs*)+0xad>
c001f75b:	83 ec 0c             	sub    esp,0xc
c001f75e:	b3 05                	mov    bl,0x5
c001f760:	68 ce d0 02 c0       	push   0xc002d0ce
c001f765:	e8 63 37 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001f76a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f76d:	83 c4 10             	add    esp,0x10
c001f770:	e9 1c fe ff ff       	jmp    c001f591 <Vm::faultHandler(regs*)+0xad>
c001f775:	83 ec 0c             	sub    esp,0xc
c001f778:	68 d2 d0 02 c0       	push   0xc002d0d2
c001f77d:	e8 4b 37 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001f782:	83 c4 10             	add    esp,0x10
c001f785:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f788:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f78d:	e9 ff fd ff ff       	jmp    c001f591 <Vm::faultHandler(regs*)+0xad>
c001f792:	50                   	push   eax
c001f793:	50                   	push   eax
c001f794:	6a 01                	push   0x1
c001f796:	68 d7 d0 02 c0       	push   0xc002d0d7
c001f79b:	e8 2d 37 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001f7a0:	83 c4 10             	add    esp,0x10
c001f7a3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f7a6:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f7ab:	e9 e1 fd ff ff       	jmp    c001f591 <Vm::faultHandler(regs*)+0xad>
c001f7b0:	83 ec 0c             	sub    esp,0xc
c001f7b3:	68 e5 d0 02 c0       	push   0xc002d0e5
c001f7b8:	e8 10 37 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001f7bd:	83 c4 10             	add    esp,0x10
c001f7c0:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f7c3:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f7c8:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f7cb:	74 2f                	je     c001f7fc <Vm::faultHandler(regs*)+0x318>
c001f7cd:	83 ea 04             	sub    edx,0x4
c001f7d0:	25 ff 0d 00 00       	and    eax,0xdff
c001f7d5:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f7db:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f7de:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f7e1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f7e7:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f7eb:	0f 84 bf 04 00 00    	je     c001fcb0 <Vm::faultHandler(regs*)+0x7cc>
c001f7f1:	80 cc 02             	or     ah,0x2
c001f7f4:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f7f7:	e9 b4 04 00 00       	jmp    c001fcb0 <Vm::faultHandler(regs*)+0x7cc>
c001f7fc:	83 ea 02             	sub    edx,0x2
c001f7ff:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f805:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f808:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f80c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f812:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f816:	74 05                	je     c001f81d <Vm::faultHandler(regs*)+0x339>
c001f818:	80 cc 02             	or     ah,0x2
c001f81b:	eb 03                	jmp    c001f820 <Vm::faultHandler(regs*)+0x33c>
c001f81d:	80 e4 fd             	and    ah,0xfd
c001f820:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f824:	e9 87 04 00 00       	jmp    c001fcb0 <Vm::faultHandler(regs*)+0x7cc>
c001f829:	83 ec 0c             	sub    esp,0xc
c001f82c:	68 ec d0 02 c0       	push   0xc002d0ec
c001f831:	e8 97 36 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001f836:	83 c4 10             	add    esp,0x10
c001f839:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f83e:	74 28                	je     c001f868 <Vm::faultHandler(regs*)+0x384>
c001f840:	8b 06                	mov    eax,DWORD PTR [esi]
c001f842:	25 ff 0d 00 00       	and    eax,0xdff
c001f847:	0d 00 02 02 00       	or     eax,0x20200
c001f84c:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f84f:	8b 06                	mov    eax,DWORD PTR [esi]
c001f851:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f857:	c1 e8 09             	shr    eax,0x9
c001f85a:	83 e0 01             	and    eax,0x1
c001f85d:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f860:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f863:	83 c0 04             	add    eax,0x4
c001f866:	eb 24                	jmp    c001f88c <Vm::faultHandler(regs*)+0x3a8>
c001f868:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f86b:	0d 00 02 02 00       	or     eax,0x20200
c001f870:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f873:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f876:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f87c:	66 c1 e8 09          	shr    ax,0x9
c001f880:	83 e0 01             	and    eax,0x1
c001f883:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f886:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f889:	83 c0 02             	add    eax,0x2
c001f88c:	25 ff ff 00 00       	and    eax,0xffff
c001f891:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f894:	e9 17 04 00 00       	jmp    c001fcb0 <Vm::faultHandler(regs*)+0x7cc>
c001f899:	53                   	push   ebx
c001f89a:	53                   	push   ebx
c001f89b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f89f:	50                   	push   eax
c001f8a0:	68 f2 d0 02 c0       	push   0xc002d0f2
c001f8a5:	e8 23 36 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001f8aa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8ae:	83 c4 10             	add    esp,0x10
c001f8b1:	3c ee                	cmp    al,0xee
c001f8b3:	75 10                	jne    c001f8c5 <Vm::faultHandler(regs*)+0x3e1>
c001f8b5:	83 ec 0c             	sub    esp,0xc
c001f8b8:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f8bb:	e8 ce f8 ff ff       	call   c001f18e <Vm::mainloop3(unsigned long)>
c001f8c0:	e9 c0 03 00 00       	jmp    c001fc85 <Vm::faultHandler(regs*)+0x7a1>
c001f8c5:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f8c9:	83 ec 0c             	sub    esp,0xc
c001f8cc:	53                   	push   ebx
c001f8cd:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f8d1:	53                   	push   ebx
c001f8d2:	55                   	push   ebp
c001f8d3:	50                   	push   eax
c001f8d4:	57                   	push   edi
c001f8d5:	e8 0c fb ff ff       	call   c001f3e6 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f8da:	eb 36                	jmp    c001f912 <Vm::faultHandler(regs*)+0x42e>
c001f8dc:	83 ec 0c             	sub    esp,0xc
c001f8df:	68 fc d0 02 c0       	push   0xc002d0fc
c001f8e4:	e8 e4 35 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001f8e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f8ee:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f8f2:	e9 8b 03 00 00       	jmp    c001fc82 <Vm::faultHandler(regs*)+0x79e>
c001f8f7:	83 ec 0c             	sub    esp,0xc
c001f8fa:	68 01 d1 02 c0       	push   0xc002d101
c001f8ff:	e8 c9 35 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001f904:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f909:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f90d:	e9 70 03 00 00       	jmp    c001fc82 <Vm::faultHandler(regs*)+0x79e>
c001f912:	83 c4 20             	add    esp,0x20
c001f915:	e9 99 03 00 00       	jmp    c001fcb3 <Vm::faultHandler(regs*)+0x7cf>
c001f91a:	83 ec 0c             	sub    esp,0xc
c001f91d:	68 3f d1 02 c0       	push   0xc002d13f
c001f922:	e8 a6 35 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001f927:	83 c4 10             	add    esp,0x10
c001f92a:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f92d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f932:	74 0d                	je     c001f941 <Vm::faultHandler(regs*)+0x45d>
c001f934:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f93b:	0f 87 9e 01 00 00    	ja     c001fadf <Vm::faultHandler(regs*)+0x5fb>
c001f941:	83 ec 0c             	sub    esp,0xc
c001f944:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f948:	0f b7 db             	movzx  ebx,bx
c001f94b:	50                   	push   eax
c001f94c:	e8 70 f7 ff ff       	call   c001f0c1 <Vm::inbv(unsigned short)>
c001f951:	83 c4 0c             	add    esp,0xc
c001f954:	0f b6 c0             	movzx  eax,al
c001f957:	50                   	push   eax
c001f958:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f95c:	50                   	push   eax
c001f95d:	53                   	push   ebx
c001f95e:	e8 41 fb ff ff       	call   c001f4a4 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f963:	83 c4 10             	add    esp,0x10
c001f966:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f969:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f96d:	74 03                	je     c001f972 <Vm::faultHandler(regs*)+0x48e>
c001f96f:	48                   	dec    eax
c001f970:	eb 01                	jmp    c001f973 <Vm::faultHandler(regs*)+0x48f>
c001f972:	40                   	inc    eax
c001f973:	0f b7 c0             	movzx  eax,ax
c001f976:	eb 7f                	jmp    c001f9f7 <Vm::faultHandler(regs*)+0x513>
c001f978:	83 ec 0c             	sub    esp,0xc
c001f97b:	68 71 d1 02 c0       	push   0xc002d171
c001f980:	e8 48 35 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001f985:	83 c4 10             	add    esp,0x10
c001f988:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f98b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f990:	74 0d                	je     c001f99f <Vm::faultHandler(regs*)+0x4bb>
c001f992:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f999:	0f 87 40 01 00 00    	ja     c001fadf <Vm::faultHandler(regs*)+0x5fb>
c001f99f:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f9a2:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f9a6:	0f b7 db             	movzx  ebx,bx
c001f9a9:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f9ae:	74 20                	je     c001f9d0 <Vm::faultHandler(regs*)+0x4ec>
c001f9b0:	ed                   	in     eax,dx
c001f9b1:	51                   	push   ecx
c001f9b2:	50                   	push   eax
c001f9b3:	56                   	push   esi
c001f9b4:	53                   	push   ebx
c001f9b5:	e8 15 fb ff ff       	call   c001f4cf <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f9ba:	83 c4 10             	add    esp,0x10
c001f9bd:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f9c0:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f9c4:	74 05                	je     c001f9cb <Vm::faultHandler(regs*)+0x4e7>
c001f9c6:	83 e8 04             	sub    eax,0x4
c001f9c9:	eb 27                	jmp    c001f9f2 <Vm::faultHandler(regs*)+0x50e>
c001f9cb:	83 c0 04             	add    eax,0x4
c001f9ce:	eb 22                	jmp    c001f9f2 <Vm::faultHandler(regs*)+0x50e>
c001f9d0:	66 ed                	in     ax,dx
c001f9d2:	0f b7 c0             	movzx  eax,ax
c001f9d5:	52                   	push   edx
c001f9d6:	50                   	push   eax
c001f9d7:	56                   	push   esi
c001f9d8:	53                   	push   ebx
c001f9d9:	e8 db fa ff ff       	call   c001f4b9 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f9de:	83 c4 10             	add    esp,0x10
c001f9e1:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f9e4:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f9e8:	74 05                	je     c001f9ef <Vm::faultHandler(regs*)+0x50b>
c001f9ea:	83 e8 02             	sub    eax,0x2
c001f9ed:	eb 03                	jmp    c001f9f2 <Vm::faultHandler(regs*)+0x50e>
c001f9ef:	83 c0 02             	add    eax,0x2
c001f9f2:	25 ff ff 00 00       	and    eax,0xffff
c001f9f7:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f9fa:	e9 b1 02 00 00       	jmp    c001fcb0 <Vm::faultHandler(regs*)+0x7cc>
c001f9ff:	83 ec 0c             	sub    esp,0xc
c001fa02:	4b                   	dec    ebx
c001fa03:	68 77 d1 02 c0       	push   0xc002d177
c001fa08:	e8 c0 34 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001fa0d:	83 c4 10             	add    esp,0x10
c001fa10:	80 fb 05             	cmp    bl,0x5
c001fa13:	77 0a                	ja     c001fa1f <Vm::faultHandler(regs*)+0x53b>
c001fa15:	0f b6 db             	movzx  ebx,bl
c001fa18:	ff 24 9d e8 d1 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2e18]
c001fa1f:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001fa23:	eb 1b                	jmp    c001fa40 <Vm::faultHandler(regs*)+0x55c>
c001fa25:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001fa29:	eb 15                	jmp    c001fa40 <Vm::faultHandler(regs*)+0x55c>
c001fa2b:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001fa2f:	eb 0f                	jmp    c001fa40 <Vm::faultHandler(regs*)+0x55c>
c001fa31:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001fa35:	eb 09                	jmp    c001fa40 <Vm::faultHandler(regs*)+0x55c>
c001fa37:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001fa3a:	eb 04                	jmp    c001fa40 <Vm::faultHandler(regs*)+0x55c>
c001fa3c:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001fa40:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fa45:	74 0d                	je     c001fa54 <Vm::faultHandler(regs*)+0x570>
c001fa47:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001fa4e:	0f 87 8b 00 00 00    	ja     c001fadf <Vm::faultHandler(regs*)+0x5fb>
c001fa54:	53                   	push   ebx
c001fa55:	53                   	push   ebx
c001fa56:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001fa5a:	52                   	push   edx
c001fa5b:	50                   	push   eax
c001fa5c:	e8 0f fa ff ff       	call   c001f470 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001fa61:	5e                   	pop    esi
c001fa62:	0f b6 c0             	movzx  eax,al
c001fa65:	5d                   	pop    ebp
c001fa66:	50                   	push   eax
c001fa67:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fa6b:	50                   	push   eax
c001fa6c:	e8 63 f6 ff ff       	call   c001f0d4 <Vm::outbv(unsigned short, unsigned char)>
c001fa71:	83 c4 10             	add    esp,0x10
c001fa74:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001fa77:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fa7b:	74 03                	je     c001fa80 <Vm::faultHandler(regs*)+0x59c>
c001fa7d:	48                   	dec    eax
c001fa7e:	eb 01                	jmp    c001fa81 <Vm::faultHandler(regs*)+0x59d>
c001fa80:	40                   	inc    eax
c001fa81:	0f b7 c0             	movzx  eax,ax
c001fa84:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001fa87:	e9 24 02 00 00       	jmp    c001fcb0 <Vm::faultHandler(regs*)+0x7cc>
c001fa8c:	83 ec 0c             	sub    esp,0xc
c001fa8f:	4b                   	dec    ebx
c001fa90:	68 77 d1 02 c0       	push   0xc002d177
c001fa95:	e8 33 34 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001fa9a:	83 c4 10             	add    esp,0x10
c001fa9d:	80 fb 05             	cmp    bl,0x5
c001faa0:	77 0a                	ja     c001faac <Vm::faultHandler(regs*)+0x5c8>
c001faa2:	0f b6 db             	movzx  ebx,bl
c001faa5:	ff 24 9d 00 d2 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2e00]
c001faac:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001fab0:	eb 1b                	jmp    c001facd <Vm::faultHandler(regs*)+0x5e9>
c001fab2:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001fab6:	eb 15                	jmp    c001facd <Vm::faultHandler(regs*)+0x5e9>
c001fab8:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001fabc:	eb 0f                	jmp    c001facd <Vm::faultHandler(regs*)+0x5e9>
c001fabe:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001fac2:	eb 09                	jmp    c001facd <Vm::faultHandler(regs*)+0x5e9>
c001fac4:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001fac7:	eb 04                	jmp    c001facd <Vm::faultHandler(regs*)+0x5e9>
c001fac9:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001facd:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001fad0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fad5:	74 39                	je     c001fb10 <Vm::faultHandler(regs*)+0x62c>
c001fad7:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001fadd:	76 31                	jbe    c001fb10 <Vm::faultHandler(regs*)+0x62c>
c001fadf:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fae3:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001fae7:	51                   	push   ecx
c001fae8:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001faec:	51                   	push   ecx
c001faed:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001faf1:	51                   	push   ecx
c001faf2:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001faf6:	51                   	push   ecx
c001faf7:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fafb:	52                   	push   edx
c001fafc:	50                   	push   eax
c001fafd:	50                   	push   eax
c001fafe:	68 44 d1 02 c0       	push   0xc002d144
c001fb03:	e8 c5 33 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001fb08:	83 c4 20             	add    esp,0x20
c001fb0b:	e9 fb 01 00 00       	jmp    c001fd0b <Vm::faultHandler(regs*)+0x827>
c001fb10:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001fb13:	0f b7 d3             	movzx  edx,bx
c001fb16:	81 e6 00 04 00 00    	and    esi,0x400
c001fb1c:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001fb1f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fb24:	74 1d                	je     c001fb43 <Vm::faultHandler(regs*)+0x65f>
c001fb26:	51                   	push   ecx
c001fb27:	51                   	push   ecx
c001fb28:	52                   	push   edx
c001fb29:	50                   	push   eax
c001fb2a:	e8 64 f9 ff ff       	call   c001f493 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001fb2f:	83 c4 10             	add    esp,0x10
c001fb32:	89 ea                	mov    edx,ebp
c001fb34:	ef                   	out    dx,eax
c001fb35:	85 f6                	test   esi,esi
c001fb37:	74 05                	je     c001fb3e <Vm::faultHandler(regs*)+0x65a>
c001fb39:	83 eb 04             	sub    ebx,0x4
c001fb3c:	eb 21                	jmp    c001fb5f <Vm::faultHandler(regs*)+0x67b>
c001fb3e:	83 c3 04             	add    ebx,0x4
c001fb41:	eb 1c                	jmp    c001fb5f <Vm::faultHandler(regs*)+0x67b>
c001fb43:	51                   	push   ecx
c001fb44:	51                   	push   ecx
c001fb45:	52                   	push   edx
c001fb46:	50                   	push   eax
c001fb47:	e8 35 f9 ff ff       	call   c001f481 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001fb4c:	83 c4 10             	add    esp,0x10
c001fb4f:	89 ea                	mov    edx,ebp
c001fb51:	66 ef                	out    dx,ax
c001fb53:	85 f6                	test   esi,esi
c001fb55:	74 05                	je     c001fb5c <Vm::faultHandler(regs*)+0x678>
c001fb57:	83 eb 02             	sub    ebx,0x2
c001fb5a:	eb 03                	jmp    c001fb5f <Vm::faultHandler(regs*)+0x67b>
c001fb5c:	83 c3 02             	add    ebx,0x2
c001fb5f:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001fb65:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001fb68:	e9 43 01 00 00       	jmp    c001fcb0 <Vm::faultHandler(regs*)+0x7cc>
c001fb6d:	53                   	push   ebx
c001fb6e:	53                   	push   ebx
c001fb6f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb73:	50                   	push   eax
c001fb74:	68 7d d1 02 c0       	push   0xc002d17d
c001fb79:	e8 4f 33 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001fb7e:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fb85:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb89:	89 04 24             	mov    DWORD PTR [esp],eax
c001fb8c:	e8 30 f5 ff ff       	call   c001f0c1 <Vm::inbv(unsigned short)>
c001fb91:	0f b6 c0             	movzx  eax,al
c001fb94:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fb97:	eb 5e                	jmp    c001fbf7 <Vm::faultHandler(regs*)+0x713>
c001fb99:	51                   	push   ecx
c001fb9a:	51                   	push   ecx
c001fb9b:	53                   	push   ebx
c001fb9c:	68 83 d1 02 c0       	push   0xc002d183
c001fba1:	e8 27 33 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001fba6:	83 c4 10             	add    esp,0x10
c001fba9:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fbae:	74 07                	je     c001fbb7 <Vm::faultHandler(regs*)+0x6d3>
c001fbb0:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fbb4:	ed                   	in     eax,dx
c001fbb5:	eb 14                	jmp    c001fbcb <Vm::faultHandler(regs*)+0x6e7>
c001fbb7:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001fbba:	66 31 db             	xor    bx,bx
c001fbbd:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001fbc0:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fbc4:	66 ed                	in     ax,dx
c001fbc6:	0f b7 c0             	movzx  eax,ax
c001fbc9:	09 d8                	or     eax,ebx
c001fbcb:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fbce:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fbd2:	e9 dc 00 00 00       	jmp    c001fcb3 <Vm::faultHandler(regs*)+0x7cf>
c001fbd7:	50                   	push   eax
c001fbd8:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fbdb:	53                   	push   ebx
c001fbdc:	68 89 d1 02 c0       	push   0xc002d189
c001fbe1:	e8 e7 32 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001fbe6:	58                   	pop    eax
c001fbe7:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001fbeb:	5a                   	pop    edx
c001fbec:	50                   	push   eax
c001fbed:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbf1:	50                   	push   eax
c001fbf2:	e8 dd f4 ff ff       	call   c001f0d4 <Vm::outbv(unsigned short, unsigned char)>
c001fbf7:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fbfb:	e9 85 00 00 00       	jmp    c001fc85 <Vm::faultHandler(regs*)+0x7a1>
c001fc00:	50                   	push   eax
c001fc01:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fc04:	53                   	push   ebx
c001fc05:	68 92 d1 02 c0       	push   0xc002d192
c001fc0a:	e8 be 32 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001fc0f:	83 c4 10             	add    esp,0x10
c001fc12:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fc16:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fc1b:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fc1e:	74 03                	je     c001fc23 <Vm::faultHandler(regs*)+0x73f>
c001fc20:	ef                   	out    dx,eax
c001fc21:	eb ab                	jmp    c001fbce <Vm::faultHandler(regs*)+0x6ea>
c001fc23:	66 ef                	out    dx,ax
c001fc25:	eb a7                	jmp    c001fbce <Vm::faultHandler(regs*)+0x6ea>
c001fc27:	55                   	push   ebp
c001fc28:	55                   	push   ebp
c001fc29:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fc2c:	68 9b d1 02 c0       	push   0xc002d19b
c001fc31:	e8 97 32 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001fc36:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fc3d:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fc41:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc44:	e8 78 f4 ff ff       	call   c001f0c1 <Vm::inbv(unsigned short)>
c001fc49:	0f b6 c0             	movzx  eax,al
c001fc4c:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fc4f:	eb 31                	jmp    c001fc82 <Vm::faultHandler(regs*)+0x79e>
c001fc51:	56                   	push   esi
c001fc52:	56                   	push   esi
c001fc53:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fc56:	68 a1 d1 02 c0       	push   0xc002d1a1
c001fc5b:	e8 6d 32 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001fc60:	83 c4 10             	add    esp,0x10
c001fc63:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fc66:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fc6b:	74 03                	je     c001fc70 <Vm::faultHandler(regs*)+0x78c>
c001fc6d:	ed                   	in     eax,dx
c001fc6e:	eb 0d                	jmp    c001fc7d <Vm::faultHandler(regs*)+0x799>
c001fc70:	66 ed                	in     ax,dx
c001fc72:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001fc75:	0f b7 c0             	movzx  eax,ax
c001fc78:	66 31 d2             	xor    dx,dx
c001fc7b:	09 d0                	or     eax,edx
c001fc7d:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fc80:	eb 2e                	jmp    c001fcb0 <Vm::faultHandler(regs*)+0x7cc>
c001fc82:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fc85:	83 c4 10             	add    esp,0x10
c001fc88:	eb 29                	jmp    c001fcb3 <Vm::faultHandler(regs*)+0x7cf>
c001fc8a:	50                   	push   eax
c001fc8b:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fc8e:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fc91:	68 b0 d1 02 c0       	push   0xc002d1b0
c001fc96:	e8 32 32 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001fc9b:	83 c4 10             	add    esp,0x10
c001fc9e:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fca1:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fca6:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fca9:	74 03                	je     c001fcae <Vm::faultHandler(regs*)+0x7ca>
c001fcab:	ef                   	out    dx,eax
c001fcac:	eb 02                	jmp    c001fcb0 <Vm::faultHandler(regs*)+0x7cc>
c001fcae:	66 ef                	out    dx,ax
c001fcb0:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fcb3:	b0 01                	mov    al,0x1
c001fcb5:	eb 56                	jmp    c001fd0d <Vm::faultHandler(regs*)+0x829>
c001fcb7:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fcbb:	51                   	push   ecx
c001fcbc:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fcc0:	51                   	push   ecx
c001fcc1:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fcc5:	51                   	push   ecx
c001fcc6:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fcca:	51                   	push   ecx
c001fccb:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fccf:	52                   	push   edx
c001fcd0:	50                   	push   eax
c001fcd1:	50                   	push   eax
c001fcd2:	68 b9 d1 02 c0       	push   0xc002d1b9
c001fcd7:	e8 f1 31 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c001fcdc:	83 c4 20             	add    esp,0x20
c001fcdf:	83 ec 0c             	sub    esp,0xc
c001fce2:	6a 60                	push   0x60
c001fce4:	e8 d8 f3 ff ff       	call   c001f0c1 <Vm::inbv(unsigned short)>
c001fce9:	83 c4 10             	add    esp,0x10
c001fcec:	3c 1c                	cmp    al,0x1c
c001fcee:	74 04                	je     c001fcf4 <Vm::faultHandler(regs*)+0x810>
c001fcf0:	3c 5a                	cmp    al,0x5a
c001fcf2:	75 eb                	jne    c001fcdf <Vm::faultHandler(regs*)+0x7fb>
c001fcf4:	3c 1c                	cmp    al,0x1c
c001fcf6:	74 04                	je     c001fcfc <Vm::faultHandler(regs*)+0x818>
c001fcf8:	3c 5a                	cmp    al,0x5a
c001fcfa:	75 0f                	jne    c001fd0b <Vm::faultHandler(regs*)+0x827>
c001fcfc:	83 ec 0c             	sub    esp,0xc
c001fcff:	6a 60                	push   0x60
c001fd01:	e8 bb f3 ff ff       	call   c001f0c1 <Vm::inbv(unsigned short)>
c001fd06:	83 c4 10             	add    esp,0x10
c001fd09:	eb e9                	jmp    c001fcf4 <Vm::faultHandler(regs*)+0x810>
c001fd0b:	31 c0                	xor    eax,eax
c001fd0d:	83 c4 1c             	add    esp,0x1c
c001fd10:	5b                   	pop    ebx
c001fd11:	5e                   	pop    esi
c001fd12:	5f                   	pop    edi
c001fd13:	5d                   	pop    ebp
c001fd14:	c3                   	ret    

c001fd15 <Vm::fpuInternalTo32(unsigned long long)>:
c001fd15:	57                   	push   edi
c001fd16:	56                   	push   esi
c001fd17:	53                   	push   ebx
c001fd18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd20:	89 d6                	mov    esi,edx
c001fd22:	89 d7                	mov    edi,edx
c001fd24:	89 c1                	mov    ecx,eax
c001fd26:	c1 ef 14             	shr    edi,0x14
c001fd29:	89 d3                	mov    ebx,edx
c001fd2b:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001fd31:	31 d2                	xor    edx,edx
c001fd33:	89 f8                	mov    eax,edi
c001fd35:	81 e6 00 00 00 80    	and    esi,0x80000000
c001fd3b:	bf ff 00 00 00       	mov    edi,0xff
c001fd40:	05 80 fc ff ff       	add    eax,0xfffffc80
c001fd45:	83 d2 ff             	adc    edx,0xffffffff
c001fd48:	39 c7                	cmp    edi,eax
c001fd4a:	bf 00 00 00 00       	mov    edi,0x0
c001fd4f:	19 d7                	sbb    edi,edx
c001fd51:	72 15                	jb     c001fd68 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001fd53:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001fd57:	c1 e0 17             	shl    eax,0x17
c001fd5a:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001fd60:	09 f1                	or     ecx,esi
c001fd62:	09 c1                	or     ecx,eax
c001fd64:	89 cf                	mov    edi,ecx
c001fd66:	eb 02                	jmp    c001fd6a <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001fd68:	31 ff                	xor    edi,edi
c001fd6a:	89 f8                	mov    eax,edi
c001fd6c:	5b                   	pop    ebx
c001fd6d:	5e                   	pop    esi
c001fd6e:	5f                   	pop    edi
c001fd6f:	c3                   	ret    

c001fd70 <Vm::fpuInternalTo64(unsigned long long)>:
c001fd70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd74:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fd78:	c3                   	ret    

c001fd79 <Vm::fpu32ToInternal(unsigned int)>:
c001fd79:	57                   	push   edi
c001fd7a:	31 ff                	xor    edi,edi
c001fd7c:	56                   	push   esi
c001fd7d:	53                   	push   ebx
c001fd7e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fd82:	89 cb                	mov    ebx,ecx
c001fd84:	89 ce                	mov    esi,ecx
c001fd86:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001fd8c:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001fd92:	c1 e9 17             	shr    ecx,0x17
c001fd95:	89 f0                	mov    eax,esi
c001fd97:	0f b6 d1             	movzx  edx,cl
c001fd9a:	81 c2 80 03 00 00    	add    edx,0x380
c001fda0:	89 d1                	mov    ecx,edx
c001fda2:	89 fa                	mov    edx,edi
c001fda4:	c1 e1 14             	shl    ecx,0x14
c001fda7:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001fdab:	c1 e0 1d             	shl    eax,0x1d
c001fdae:	89 d7                	mov    edi,edx
c001fdb0:	89 c6                	mov    esi,eax
c001fdb2:	89 ca                	mov    edx,ecx
c001fdb4:	89 f0                	mov    eax,esi
c001fdb6:	09 fa                	or     edx,edi
c001fdb8:	09 da                	or     edx,ebx
c001fdba:	5b                   	pop    ebx
c001fdbb:	5e                   	pop    esi
c001fdbc:	5f                   	pop    edi
c001fdbd:	c3                   	ret    

c001fdbe <Vm::fpu64ToInternal(unsigned long long)>:
c001fdbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fdc6:	c3                   	ret    

c001fdc7 <Vm::fpuFloatToLong(unsigned long long)>:
c001fdc7:	57                   	push   edi
c001fdc8:	31 c0                	xor    eax,eax
c001fdca:	56                   	push   esi
c001fdcb:	31 d2                	xor    edx,edx
c001fdcd:	53                   	push   ebx
c001fdce:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fdd2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fdd6:	89 d9                	mov    ecx,ebx
c001fdd8:	c1 e9 14             	shr    ecx,0x14
c001fddb:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001fde1:	89 cf                	mov    edi,ecx
c001fde3:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001fde9:	78 33                	js     c001fe1e <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001fdeb:	89 d9                	mov    ecx,ebx
c001fded:	89 f0                	mov    eax,esi
c001fdef:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001fdf5:	81 c9 00 00 10 00    	or     ecx,0x100000
c001fdfb:	89 ca                	mov    edx,ecx
c001fdfd:	b9 34 00 00 00       	mov    ecx,0x34
c001fe02:	29 f9                	sub    ecx,edi
c001fe04:	0f ad d0             	shrd   eax,edx,cl
c001fe07:	d3 fa                	sar    edx,cl
c001fe09:	f6 c1 20             	test   cl,0x20
c001fe0c:	74 05                	je     c001fe13 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001fe0e:	89 d0                	mov    eax,edx
c001fe10:	c1 fa 1f             	sar    edx,0x1f
c001fe13:	85 db                	test   ebx,ebx
c001fe15:	79 07                	jns    c001fe1e <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001fe17:	f7 d8                	neg    eax
c001fe19:	83 d2 00             	adc    edx,0x0
c001fe1c:	f7 da                	neg    edx
c001fe1e:	5b                   	pop    ebx
c001fe1f:	5e                   	pop    esi
c001fe20:	5f                   	pop    edi
c001fe21:	c3                   	ret    

c001fe22 <Vm::fpuULongToFloat(unsigned long long)>:
c001fe22:	57                   	push   edi
c001fe23:	31 c9                	xor    ecx,ecx
c001fe25:	56                   	push   esi
c001fe26:	53                   	push   ebx
c001fe27:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fe2b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001fe2f:	0f ba e7 14          	bt     edi,0x14
c001fe33:	72 07                	jb     c001fe3c <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001fe35:	01 f6                	add    esi,esi
c001fe37:	11 ff                	adc    edi,edi
c001fe39:	41                   	inc    ecx
c001fe3a:	eb f3                	jmp    c001fe2f <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001fe3c:	89 fa                	mov    edx,edi
c001fe3e:	89 f0                	mov    eax,esi
c001fe40:	bb 33 04 00 00       	mov    ebx,0x433
c001fe45:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001fe4b:	29 cb                	sub    ebx,ecx
c001fe4d:	89 d9                	mov    ecx,ebx
c001fe4f:	5b                   	pop    ebx
c001fe50:	c1 e1 14             	shl    ecx,0x14
c001fe53:	5e                   	pop    esi
c001fe54:	09 ca                	or     edx,ecx
c001fe56:	5f                   	pop    edi
c001fe57:	c3                   	ret    

c001fe58 <Vm::fpuLongToFloat(long long)>:
c001fe58:	56                   	push   esi
c001fe59:	31 c0                	xor    eax,eax
c001fe5b:	53                   	push   ebx
c001fe5c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fe60:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fe64:	39 c8                	cmp    eax,ecx
c001fe66:	19 d8                	sbb    eax,ebx
c001fe68:	7d 04                	jge    c001fe6e <Vm::fpuLongToFloat(long long)+0x16>
c001fe6a:	31 f6                	xor    esi,esi
c001fe6c:	eb 0c                	jmp    c001fe7a <Vm::fpuLongToFloat(long long)+0x22>
c001fe6e:	f7 d9                	neg    ecx
c001fe70:	be 01 00 00 00       	mov    esi,0x1
c001fe75:	83 d3 00             	adc    ebx,0x0
c001fe78:	f7 db                	neg    ebx
c001fe7a:	31 c0                	xor    eax,eax
c001fe7c:	0f ba e3 14          	bt     ebx,0x14
c001fe80:	72 07                	jb     c001fe89 <Vm::fpuLongToFloat(long long)+0x31>
c001fe82:	01 c9                	add    ecx,ecx
c001fe84:	11 db                	adc    ebx,ebx
c001fe86:	40                   	inc    eax
c001fe87:	eb f3                	jmp    c001fe7c <Vm::fpuLongToFloat(long long)+0x24>
c001fe89:	ba 33 04 00 00       	mov    edx,0x433
c001fe8e:	29 c2                	sub    edx,eax
c001fe90:	89 c8                	mov    eax,ecx
c001fe92:	c1 e2 14             	shl    edx,0x14
c001fe95:	89 d9                	mov    ecx,ebx
c001fe97:	89 f3                	mov    ebx,esi
c001fe99:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001fe9f:	09 ca                	or     edx,ecx
c001fea1:	84 db                	test   bl,bl
c001fea3:	74 06                	je     c001feab <Vm::fpuLongToFloat(long long)+0x53>
c001fea5:	81 ca 00 00 00 80    	or     edx,0x80000000
c001feab:	5b                   	pop    ebx
c001feac:	5e                   	pop    esi
c001fead:	c3                   	ret    

c001feae <Vm::fpuGet0()>:
c001feae:	31 c0                	xor    eax,eax
c001feb0:	31 d2                	xor    edx,edx
c001feb2:	c3                   	ret    

c001feb3 <Vm::fpuGet1()>:
c001feb3:	b8 01 00 00 00       	mov    eax,0x1
c001feb8:	31 d2                	xor    edx,edx
c001feba:	c3                   	ret    

c001febb <Vm::fpuGetPi()>:
c001febb:	b8 03 00 00 00       	mov    eax,0x3
c001fec0:	31 d2                	xor    edx,edx
c001fec2:	c3                   	ret    

c001fec3 <Vm::fpuGetLog2E()>:
c001fec3:	83 ec 18             	sub    esp,0x18
c001fec6:	68 18 d2 02 c0       	push   0xc002d218
c001fecb:	e8 c0 a9 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c001fed0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fed5:	31 d2                	xor    edx,edx
c001fed7:	83 c4 1c             	add    esp,0x1c
c001feda:	c3                   	ret    

c001fedb <Vm::fpuGetLogE2()>:
c001fedb:	83 ec 18             	sub    esp,0x18
c001fede:	68 24 d2 02 c0       	push   0xc002d224
c001fee3:	e8 a8 a9 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c001fee8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001feed:	31 d2                	xor    edx,edx
c001feef:	83 c4 1c             	add    esp,0x1c
c001fef2:	c3                   	ret    

c001fef3 <Vm::fpuGetLog210()>:
c001fef3:	83 ec 18             	sub    esp,0x18
c001fef6:	68 30 d2 02 c0       	push   0xc002d230
c001fefb:	e8 90 a9 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c001ff00:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ff05:	31 d2                	xor    edx,edx
c001ff07:	83 c4 1c             	add    esp,0x1c
c001ff0a:	c3                   	ret    

c001ff0b <Vm::fpuGetLog102()>:
c001ff0b:	83 ec 18             	sub    esp,0x18
c001ff0e:	68 3d d2 02 c0       	push   0xc002d23d
c001ff13:	e8 78 a9 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c001ff18:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ff1d:	31 d2                	xor    edx,edx
c001ff1f:	83 c4 1c             	add    esp,0x1c
c001ff22:	c3                   	ret    

c001ff23 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001ff23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ff27:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ff2b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff2f:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001ff33:	0f 92 c0             	setb   al
c001ff36:	c3                   	ret    

c001ff37 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001ff37:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ff3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff3f:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001ff43:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001ff47:	09 c2                	or     edx,eax
c001ff49:	0f 94 c0             	sete   al
c001ff4c:	c3                   	ret    

c001ff4d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001ff4d:	57                   	push   edi
c001ff4e:	56                   	push   esi
c001ff4f:	53                   	push   ebx
c001ff50:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ff54:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ff58:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ff5c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ff60:	57                   	push   edi
c001ff61:	56                   	push   esi
c001ff62:	53                   	push   ebx
c001ff63:	51                   	push   ecx
c001ff64:	e8 ce ff ff ff       	call   c001ff37 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001ff69:	83 c4 10             	add    esp,0x10
c001ff6c:	88 c2                	mov    dl,al
c001ff6e:	31 c0                	xor    eax,eax
c001ff70:	84 d2                	test   dl,dl
c001ff72:	75 0c                	jne    c001ff80 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001ff74:	57                   	push   edi
c001ff75:	56                   	push   esi
c001ff76:	53                   	push   ebx
c001ff77:	51                   	push   ecx
c001ff78:	e8 a6 ff ff ff       	call   c001ff23 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001ff7d:	83 c4 10             	add    esp,0x10
c001ff80:	83 e0 01             	and    eax,0x1
c001ff83:	5b                   	pop    ebx
c001ff84:	88 c1                	mov    cl,al
c001ff86:	83 e2 01             	and    edx,0x1
c001ff89:	a0 c1 24 03 c0       	mov    al,ds:0xc00324c1
c001ff8e:	c1 e2 06             	shl    edx,0x6
c001ff91:	83 e0 ba             	and    eax,0xffffffba
c001ff94:	5e                   	pop    esi
c001ff95:	09 c8                	or     eax,ecx
c001ff97:	5f                   	pop    edi
c001ff98:	09 d0                	or     eax,edx
c001ff9a:	a2 c1 24 03 c0       	mov    ds:0xc00324c1,al
c001ff9f:	c3                   	ret    

c001ffa0 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001ffa0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ffa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ffa8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001ffac:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001ffb0:	c3                   	ret    

c001ffb1 <Vm::fpuAbs(unsigned long long)>:
c001ffb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffb5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ffb9:	c3                   	ret    

c001ffba <Vm::fpuChs(unsigned long long)>:
c001ffba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffbe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ffc2:	f7 d8                	neg    eax
c001ffc4:	83 d2 00             	adc    edx,0x0
c001ffc7:	f7 da                	neg    edx
c001ffc9:	c3                   	ret    

c001ffca <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001ffca:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001ffce:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001ffd3:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001ffd7:	eb c7                	jmp    c001ffa0 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001ffd9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001ffd9:	53                   	push   ebx
c001ffda:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ffde:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ffe2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ffe6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ffea:	0f af ca             	imul   ecx,edx
c001ffed:	0f af d8             	imul   ebx,eax
c001fff0:	f7 e2                	mul    edx
c001fff2:	01 d9                	add    ecx,ebx
c001fff4:	5b                   	pop    ebx
c001fff5:	01 ca                	add    edx,ecx
c001fff7:	c3                   	ret    

c001fff8 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001fff8:	83 ec 0c             	sub    esp,0xc
c001fffb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020003:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020007:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002000b:	e8 54 72 00 00       	call   c0027264 <__udivdi3>
c0020010:	83 c4 1c             	add    esp,0x1c
c0020013:	c3                   	ret    

c0020014 <Vm::fpuSquare(unsigned long long)>:
c0020014:	50                   	push   eax
c0020015:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020019:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002001d:	52                   	push   edx
c002001e:	50                   	push   eax
c002001f:	52                   	push   edx
c0020020:	50                   	push   eax
c0020021:	e8 b3 ff ff ff       	call   c001ffd9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020026:	83 c4 14             	add    esp,0x14
c0020029:	c3                   	ret    

c002002a <Vm::fpuGetReg(int)>:
c002002a:	83 ec 0c             	sub    esp,0xc
c002002d:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0020032:	76 10                	jbe    c0020044 <Vm::fpuGetReg(int)+0x1a>
c0020034:	83 ec 0c             	sub    esp,0xc
c0020037:	68 4a d2 02 c0       	push   0xc002d24a
c002003c:	e8 4f a8 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c0020041:	83 c4 10             	add    esp,0x10
c0020044:	a0 c1 24 03 c0       	mov    al,ds:0xc00324c1
c0020049:	b9 08 00 00 00       	mov    ecx,0x8
c002004e:	c0 e8 03             	shr    al,0x3
c0020051:	83 e0 07             	and    eax,0x7
c0020054:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020058:	99                   	cdq    
c0020059:	f7 f9                	idiv   ecx
c002005b:	8b 04 d5 c4 24 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcdb3c]
c0020062:	8b 14 d5 c8 24 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcdb38]
c0020069:	83 c4 0c             	add    esp,0xc
c002006c:	c3                   	ret    

c002006d <Vm::fpuSetReg(int, unsigned long long)>:
c002006d:	57                   	push   edi
c002006e:	56                   	push   esi
c002006f:	52                   	push   edx
c0020070:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0020074:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0020078:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c002007d:	76 10                	jbe    c002008f <Vm::fpuSetReg(int, unsigned long long)+0x22>
c002007f:	83 ec 0c             	sub    esp,0xc
c0020082:	68 5d d2 02 c0       	push   0xc002d25d
c0020087:	e8 04 a8 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c002008c:	83 c4 10             	add    esp,0x10
c002008f:	a0 c1 24 03 c0       	mov    al,ds:0xc00324c1
c0020094:	b9 08 00 00 00       	mov    ecx,0x8
c0020099:	c0 e8 03             	shr    al,0x3
c002009c:	83 e0 07             	and    eax,0x7
c002009f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00200a3:	99                   	cdq    
c00200a4:	f7 f9                	idiv   ecx
c00200a6:	89 34 d5 c4 24 03 c0 	mov    DWORD PTR [edx*8-0x3ffcdb3c],esi
c00200ad:	89 3c d5 c8 24 03 c0 	mov    DWORD PTR [edx*8-0x3ffcdb38],edi
c00200b4:	58                   	pop    eax
c00200b5:	5e                   	pop    esi
c00200b6:	5f                   	pop    edi
c00200b7:	c3                   	ret    

c00200b8 <Vm::fpuPush(unsigned long long)>:
c00200b8:	a0 c1 24 03 c0       	mov    al,ds:0xc00324c1
c00200bd:	c0 e8 03             	shr    al,0x3
c00200c0:	83 e0 07             	and    eax,0x7
c00200c3:	83 c0 07             	add    eax,0x7
c00200c6:	88 c2                	mov    dl,al
c00200c8:	83 e0 07             	and    eax,0x7
c00200cb:	83 e2 07             	and    edx,0x7
c00200ce:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c00200d5:	8a 15 c1 24 03 c0    	mov    dl,BYTE PTR ds:0xc00324c1
c00200db:	83 e2 c7             	and    edx,0xffffffc7
c00200de:	09 ca                	or     edx,ecx
c00200e0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00200e4:	88 15 c1 24 03 c0    	mov    BYTE PTR ds:0xc00324c1,dl
c00200ea:	89 0c c5 c8 24 03 c0 	mov    DWORD PTR [eax*8-0x3ffcdb38],ecx
c00200f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00200f5:	89 14 c5 c4 24 03 c0 	mov    DWORD PTR [eax*8-0x3ffcdb3c],edx
c00200fc:	a1 04 25 03 c0       	mov    eax,ds:0xc0032504
c0020101:	83 f8 08             	cmp    eax,0x8
c0020104:	75 08                	jne    c002010e <Vm::fpuPush(unsigned long long)+0x56>
c0020106:	80 0d c0 24 03 c0 40 	or     BYTE PTR ds:0xc00324c0,0x40
c002010d:	c3                   	ret    
c002010e:	40                   	inc    eax
c002010f:	a3 04 25 03 c0       	mov    ds:0xc0032504,eax
c0020114:	c3                   	ret    

c0020115 <Vm::fpuPop()>:
c0020115:	8a 0d c1 24 03 c0    	mov    cl,BYTE PTR ds:0xc00324c1
c002011b:	53                   	push   ebx
c002011c:	c0 e9 03             	shr    cl,0x3
c002011f:	8a 1d c1 24 03 c0    	mov    bl,BYTE PTR ds:0xc00324c1
c0020125:	83 e1 07             	and    ecx,0x7
c0020128:	83 e3 c7             	and    ebx,0xffffffc7
c002012b:	8b 04 cd c4 24 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcdb3c]
c0020132:	8b 14 cd c8 24 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcdb38]
c0020139:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c0020140:	83 e1 38             	and    ecx,0x38
c0020143:	09 d9                	or     ecx,ebx
c0020145:	88 0d c1 24 03 c0    	mov    BYTE PTR ds:0xc00324c1,cl
c002014b:	8b 0d 04 25 03 c0    	mov    ecx,DWORD PTR ds:0xc0032504
c0020151:	85 c9                	test   ecx,ecx
c0020153:	74 09                	je     c002015e <Vm::fpuPop()+0x49>
c0020155:	49                   	dec    ecx
c0020156:	89 0d 04 25 03 c0    	mov    DWORD PTR ds:0xc0032504,ecx
c002015c:	eb 07                	jmp    c0020165 <Vm::fpuPop()+0x50>
c002015e:	80 0d c0 24 03 c0 40 	or     BYTE PTR ds:0xc00324c0,0x40
c0020165:	5b                   	pop    ebx
c0020166:	c3                   	ret    

c0020167 <Vm::x87Handler(regs*)>:
c0020167:	55                   	push   ebp
c0020168:	57                   	push   edi
c0020169:	56                   	push   esi
c002016a:	53                   	push   ebx
c002016b:	83 ec 1c             	sub    esp,0x1c
c002016e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0020172:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c0020177:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c002017a:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0020182:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0020186:	50                   	push   eax
c0020187:	8d 44 24 0e          	lea    eax,[esp+0xe]
c002018b:	50                   	push   eax
c002018c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020190:	50                   	push   eax
c0020191:	53                   	push   ebx
c0020192:	e8 c1 9d ff ff       	call   c0019f58 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0020197:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c002019a:	83 c4 10             	add    esp,0x10
c002019d:	89 c6                	mov    esi,eax
c002019f:	80 fa d9             	cmp    dl,0xd9
c00201a2:	0f 85 52 01 00 00    	jne    c00202fa <Vm::x87Handler(regs*)+0x193>
c00201a8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201ac:	8d 50 20             	lea    edx,[eax+0x20]
c00201af:	80 fa 0e             	cmp    dl,0xe
c00201b2:	0f 87 86 00 00 00    	ja     c002023e <Vm::x87Handler(regs*)+0xd7>
c00201b8:	0f b6 d2             	movzx  edx,dl
c00201bb:	ff 24 95 70 d2 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd2d90]
c00201c2:	e8 e7 fc ff ff       	call   c001feae <Vm::fpuGet0()>
c00201c7:	eb 05                	jmp    c00201ce <Vm::x87Handler(regs*)+0x67>
c00201c9:	e8 e5 fc ff ff       	call   c001feb3 <Vm::fpuGet1()>
c00201ce:	57                   	push   edi
c00201cf:	57                   	push   edi
c00201d0:	52                   	push   edx
c00201d1:	50                   	push   eax
c00201d2:	e8 e1 fe ff ff       	call   c00200b8 <Vm::fpuPush(unsigned long long)>
c00201d7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201db:	83 c4 10             	add    esp,0x10
c00201de:	b0 01                	mov    al,0x1
c00201e0:	e9 e3 09 00 00       	jmp    c0020bc8 <Vm::x87Handler(regs*)+0xa61>
c00201e5:	83 ec 0c             	sub    esp,0xc
c00201e8:	6a 00                	push   0x0
c00201ea:	e8 3b fe ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c00201ef:	59                   	pop    ecx
c00201f0:	5e                   	pop    esi
c00201f1:	52                   	push   edx
c00201f2:	50                   	push   eax
c00201f3:	e8 c2 fd ff ff       	call   c001ffba <Vm::fpuChs(unsigned long long)>
c00201f8:	eb 13                	jmp    c002020d <Vm::x87Handler(regs*)+0xa6>
c00201fa:	83 ec 0c             	sub    esp,0xc
c00201fd:	6a 00                	push   0x0
c00201ff:	e8 26 fe ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c0020204:	5f                   	pop    edi
c0020205:	5d                   	pop    ebp
c0020206:	52                   	push   edx
c0020207:	50                   	push   eax
c0020208:	e8 a4 fd ff ff       	call   c001ffb1 <Vm::fpuAbs(unsigned long long)>
c002020d:	83 c4 0c             	add    esp,0xc
c0020210:	52                   	push   edx
c0020211:	50                   	push   eax
c0020212:	6a 00                	push   0x0
c0020214:	e8 54 fe ff ff       	call   c002006d <Vm::fpuSetReg(int, unsigned long long)>
c0020219:	eb bc                	jmp    c00201d7 <Vm::x87Handler(regs*)+0x70>
c002021b:	e8 d3 fc ff ff       	call   c001fef3 <Vm::fpuGetLog210()>
c0020220:	eb ac                	jmp    c00201ce <Vm::x87Handler(regs*)+0x67>
c0020222:	e8 9c fc ff ff       	call   c001fec3 <Vm::fpuGetLog2E()>
c0020227:	eb a5                	jmp    c00201ce <Vm::x87Handler(regs*)+0x67>
c0020229:	e8 8d fc ff ff       	call   c001febb <Vm::fpuGetPi()>
c002022e:	eb 9e                	jmp    c00201ce <Vm::x87Handler(regs*)+0x67>
c0020230:	e8 d6 fc ff ff       	call   c001ff0b <Vm::fpuGetLog102()>
c0020235:	eb 97                	jmp    c00201ce <Vm::x87Handler(regs*)+0x67>
c0020237:	e8 9f fc ff ff       	call   c001fedb <Vm::fpuGetLogE2()>
c002023c:	eb 90                	jmp    c00201ce <Vm::x87Handler(regs*)+0x67>
c002023e:	8d 50 40             	lea    edx,[eax+0x40]
c0020241:	80 fa 07             	cmp    dl,0x7
c0020244:	77 15                	ja     c002025b <Vm::x87Handler(regs*)+0xf4>
c0020246:	83 ec 0c             	sub    esp,0xc
c0020249:	2d c0 00 00 00       	sub    eax,0xc0
c002024e:	50                   	push   eax
c002024f:	e8 d6 fd ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c0020254:	59                   	pop    ecx
c0020255:	5e                   	pop    esi
c0020256:	e9 75 ff ff ff       	jmp    c00201d0 <Vm::x87Handler(regs*)+0x69>
c002025b:	8d 50 38             	lea    edx,[eax+0x38]
c002025e:	80 fa 07             	cmp    dl,0x7
c0020261:	77 3c                	ja     c002029f <Vm::x87Handler(regs*)+0x138>
c0020263:	83 ec 0c             	sub    esp,0xc
c0020266:	2d c8 00 00 00       	sub    eax,0xc8
c002026b:	50                   	push   eax
c002026c:	e8 b9 fd ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c0020271:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020278:	89 c6                	mov    esi,eax
c002027a:	89 d7                	mov    edi,edx
c002027c:	e8 a9 fd ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c0020281:	83 c4 0c             	add    esp,0xc
c0020284:	52                   	push   edx
c0020285:	50                   	push   eax
c0020286:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002028a:	2d c8 00 00 00       	sub    eax,0xc8
c002028f:	50                   	push   eax
c0020290:	e8 d8 fd ff ff       	call   c002006d <Vm::fpuSetReg(int, unsigned long long)>
c0020295:	83 c4 0c             	add    esp,0xc
c0020298:	57                   	push   edi
c0020299:	56                   	push   esi
c002029a:	e9 73 ff ff ff       	jmp    c0020212 <Vm::x87Handler(regs*)+0xab>
c002029f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202a3:	84 d2                	test   dl,dl
c00202a5:	75 0f                	jne    c00202b6 <Vm::x87Handler(regs*)+0x14f>
c00202a7:	83 ec 0c             	sub    esp,0xc
c00202aa:	ff 36                	push   DWORD PTR [esi]
c00202ac:	e8 c8 fa ff ff       	call   c001fd79 <Vm::fpu32ToInternal(unsigned int)>
c00202b1:	e9 bf 00 00 00       	jmp    c0020375 <Vm::x87Handler(regs*)+0x20e>
c00202b6:	80 fa 03             	cmp    dl,0x3
c00202b9:	75 13                	jne    c00202ce <Vm::x87Handler(regs*)+0x167>
c00202bb:	e8 55 fe ff ff       	call   c0020115 <Vm::fpuPop()>
c00202c0:	55                   	push   ebp
c00202c1:	55                   	push   ebp
c00202c2:	52                   	push   edx
c00202c3:	50                   	push   eax
c00202c4:	e8 4c fa ff ff       	call   c001fd15 <Vm::fpuInternalTo32(unsigned long long)>
c00202c9:	e9 88 00 00 00       	jmp    c0020356 <Vm::x87Handler(regs*)+0x1ef>
c00202ce:	80 fa 05             	cmp    dl,0x5
c00202d1:	75 0e                	jne    c00202e1 <Vm::x87Handler(regs*)+0x17a>
c00202d3:	66 8b 06             	mov    ax,WORD PTR [esi]
c00202d6:	66 a3 c2 24 03 c0    	mov    ds:0xc00324c2,ax
c00202dc:	e9 df 00 00 00       	jmp    c00203c0 <Vm::x87Handler(regs*)+0x259>
c00202e1:	31 c0                	xor    eax,eax
c00202e3:	80 fa 07             	cmp    dl,0x7
c00202e6:	0f 85 dc 08 00 00    	jne    c0020bc8 <Vm::x87Handler(regs*)+0xa61>
c00202ec:	66 a1 c2 24 03 c0    	mov    ax,ds:0xc00324c2
c00202f2:	66 89 06             	mov    WORD PTR [esi],ax
c00202f5:	e9 c6 00 00 00       	jmp    c00203c0 <Vm::x87Handler(regs*)+0x259>
c00202fa:	80 fa d8             	cmp    dl,0xd8
c00202fd:	0f 84 c9 00 00 00    	je     c00203cc <Vm::x87Handler(regs*)+0x265>
c0020303:	80 fa dc             	cmp    dl,0xdc
c0020306:	0f 84 0d 02 00 00    	je     c0020519 <Vm::x87Handler(regs*)+0x3b2>
c002030c:	80 fa de             	cmp    dl,0xde
c002030f:	0f 84 cd 02 00 00    	je     c00205e2 <Vm::x87Handler(regs*)+0x47b>
c0020315:	80 fa dd             	cmp    dl,0xdd
c0020318:	0f 84 5f 04 00 00    	je     c002077d <Vm::x87Handler(regs*)+0x616>
c002031e:	80 fa da             	cmp    dl,0xda
c0020321:	0f 84 24 05 00 00    	je     c002084b <Vm::x87Handler(regs*)+0x6e4>
c0020327:	80 fa df             	cmp    dl,0xdf
c002032a:	0f 84 68 05 00 00    	je     c0020898 <Vm::x87Handler(regs*)+0x731>
c0020330:	31 c0                	xor    eax,eax
c0020332:	80 fa db             	cmp    dl,0xdb
c0020335:	0f 85 8d 08 00 00    	jne    c0020bc8 <Vm::x87Handler(regs*)+0xa61>
c002033b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002033f:	80 fa 03             	cmp    dl,0x3
c0020342:	0f 85 70 06 00 00    	jne    c00209b8 <Vm::x87Handler(regs*)+0x851>
c0020348:	e8 c8 fd ff ff       	call   c0020115 <Vm::fpuPop()>
c002034d:	55                   	push   ebp
c002034e:	55                   	push   ebp
c002034f:	52                   	push   edx
c0020350:	50                   	push   eax
c0020351:	e8 71 fa ff ff       	call   c001fdc7 <Vm::fpuFloatToLong(unsigned long long)>
c0020356:	83 c4 10             	add    esp,0x10
c0020359:	89 06                	mov    DWORD PTR [esi],eax
c002035b:	eb 63                	jmp    c00203c0 <Vm::x87Handler(regs*)+0x259>
c002035d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020361:	84 d2                	test   dl,dl
c0020363:	0f 85 e6 05 00 00    	jne    c002094f <Vm::x87Handler(regs*)+0x7e8>
c0020369:	57                   	push   edi
c002036a:	57                   	push   edi
c002036b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002036e:	ff 36                	push   DWORD PTR [esi]
c0020370:	e8 49 fa ff ff       	call   c001fdbe <Vm::fpu64ToInternal(unsigned long long)>
c0020375:	5e                   	pop    esi
c0020376:	5f                   	pop    edi
c0020377:	52                   	push   edx
c0020378:	50                   	push   eax
c0020379:	e8 3a fd ff ff       	call   c00200b8 <Vm::fpuPush(unsigned long long)>
c002037e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020382:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020385:	e9 51 fe ff ff       	jmp    c00201db <Vm::x87Handler(regs*)+0x74>
c002038a:	80 fa 03             	cmp    dl,0x3
c002038d:	0f 85 d7 06 00 00    	jne    c0020a6a <Vm::x87Handler(regs*)+0x903>
c0020393:	57                   	push   edi
c0020394:	57                   	push   edi
c0020395:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020398:	ff 36                	push   DWORD PTR [esi]
c002039a:	e8 1f fa ff ff       	call   c001fdbe <Vm::fpu64ToInternal(unsigned long long)>
c002039f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203a6:	89 c6                	mov    esi,eax
c00203a8:	89 d7                	mov    edi,edx
c00203aa:	e8 7b fc ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c00203af:	57                   	push   edi
c00203b0:	56                   	push   esi
c00203b1:	52                   	push   edx
c00203b2:	50                   	push   eax
c00203b3:	e8 95 fb ff ff       	call   c001ff4d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00203b8:	83 c4 20             	add    esp,0x20
c00203bb:	e8 55 fd ff ff       	call   c0020115 <Vm::fpuPop()>
c00203c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00203c4:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00203c7:	e9 12 fe ff ff       	jmp    c00201de <Vm::x87Handler(regs*)+0x77>
c00203cc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00203d0:	8d 50 40             	lea    edx,[eax+0x40]
c00203d3:	80 fa 07             	cmp    dl,0x7
c00203d6:	77 29                	ja     c0020401 <Vm::x87Handler(regs*)+0x29a>
c00203d8:	83 ec 0c             	sub    esp,0xc
c00203db:	2d c0 00 00 00       	sub    eax,0xc0
c00203e0:	50                   	push   eax
c00203e1:	e8 44 fc ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c00203e6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203ed:	89 c6                	mov    esi,eax
c00203ef:	89 d7                	mov    edi,edx
c00203f1:	e8 34 fc ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c00203f6:	57                   	push   edi
c00203f7:	56                   	push   esi
c00203f8:	52                   	push   edx
c00203f9:	50                   	push   eax
c00203fa:	e8 a1 fb ff ff       	call   c001ffa0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00203ff:	eb 2f                	jmp    c0020430 <Vm::x87Handler(regs*)+0x2c9>
c0020401:	8d 50 38             	lea    edx,[eax+0x38]
c0020404:	80 fa 07             	cmp    dl,0x7
c0020407:	77 2f                	ja     c0020438 <Vm::x87Handler(regs*)+0x2d1>
c0020409:	83 ec 0c             	sub    esp,0xc
c002040c:	2d c8 00 00 00       	sub    eax,0xc8
c0020411:	50                   	push   eax
c0020412:	e8 13 fc ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c0020417:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002041e:	89 c6                	mov    esi,eax
c0020420:	89 d7                	mov    edi,edx
c0020422:	e8 03 fc ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c0020427:	57                   	push   edi
c0020428:	56                   	push   esi
c0020429:	52                   	push   edx
c002042a:	50                   	push   eax
c002042b:	e8 a9 fb ff ff       	call   c001ffd9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020430:	83 c4 1c             	add    esp,0x1c
c0020433:	e9 d8 fd ff ff       	jmp    c0020210 <Vm::x87Handler(regs*)+0xa9>
c0020438:	8d 50 30             	lea    edx,[eax+0x30]
c002043b:	80 fa 07             	cmp    dl,0x7
c002043e:	77 0d                	ja     c002044d <Vm::x87Handler(regs*)+0x2e6>
c0020440:	83 ec 0c             	sub    esp,0xc
c0020443:	2d d0 00 00 00       	sub    eax,0xd0
c0020448:	e9 99 03 00 00       	jmp    c00207e6 <Vm::x87Handler(regs*)+0x67f>
c002044d:	8d 50 28             	lea    edx,[eax+0x28]
c0020450:	80 fa 07             	cmp    dl,0x7
c0020453:	77 0d                	ja     c0020462 <Vm::x87Handler(regs*)+0x2fb>
c0020455:	83 ec 0c             	sub    esp,0xc
c0020458:	2d d8 00 00 00       	sub    eax,0xd8
c002045d:	e9 c0 03 00 00       	jmp    c0020822 <Vm::x87Handler(regs*)+0x6bb>
c0020462:	8d 50 20             	lea    edx,[eax+0x20]
c0020465:	80 fa 07             	cmp    dl,0x7
c0020468:	77 1b                	ja     c0020485 <Vm::x87Handler(regs*)+0x31e>
c002046a:	83 ec 0c             	sub    esp,0xc
c002046d:	2d e0 00 00 00       	sub    eax,0xe0
c0020472:	50                   	push   eax
c0020473:	e8 b2 fb ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c0020478:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002047f:	89 c6                	mov    esi,eax
c0020481:	89 d7                	mov    edi,edx
c0020483:	eb 22                	jmp    c00204a7 <Vm::x87Handler(regs*)+0x340>
c0020485:	8d 50 18             	lea    edx,[eax+0x18]
c0020488:	80 fa 07             	cmp    dl,0x7
c002048b:	77 2d                	ja     c00204ba <Vm::x87Handler(regs*)+0x353>
c002048d:	83 ec 0c             	sub    esp,0xc
c0020490:	6a 00                	push   0x0
c0020492:	e8 93 fb ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c0020497:	89 c6                	mov    esi,eax
c0020499:	89 d7                	mov    edi,edx
c002049b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002049f:	2d e8 00 00 00       	sub    eax,0xe8
c00204a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00204a7:	e8 7e fb ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c00204ac:	57                   	push   edi
c00204ad:	56                   	push   esi
c00204ae:	52                   	push   edx
c00204af:	50                   	push   eax
c00204b0:	e8 15 fb ff ff       	call   c001ffca <Vm::fpuSub(unsigned long long, unsigned long long)>
c00204b5:	e9 76 ff ff ff       	jmp    c0020430 <Vm::x87Handler(regs*)+0x2c9>
c00204ba:	8d 50 10             	lea    edx,[eax+0x10]
c00204bd:	80 fa 07             	cmp    dl,0x7
c00204c0:	77 1b                	ja     c00204dd <Vm::x87Handler(regs*)+0x376>
c00204c2:	83 ec 0c             	sub    esp,0xc
c00204c5:	2d f0 00 00 00       	sub    eax,0xf0
c00204ca:	50                   	push   eax
c00204cb:	e8 5a fb ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c00204d0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204d7:	89 c6                	mov    esi,eax
c00204d9:	89 d7                	mov    edi,edx
c00204db:	eb 22                	jmp    c00204ff <Vm::x87Handler(regs*)+0x398>
c00204dd:	3c f7                	cmp    al,0xf7
c00204df:	0f 86 d1 03 00 00    	jbe    c00208b6 <Vm::x87Handler(regs*)+0x74f>
c00204e5:	83 ec 0c             	sub    esp,0xc
c00204e8:	6a 00                	push   0x0
c00204ea:	e8 3b fb ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c00204ef:	89 c6                	mov    esi,eax
c00204f1:	89 d7                	mov    edi,edx
c00204f3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00204f7:	2d f8 00 00 00       	sub    eax,0xf8
c00204fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00204ff:	e8 26 fb ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c0020504:	57                   	push   edi
c0020505:	56                   	push   esi
c0020506:	52                   	push   edx
c0020507:	50                   	push   eax
c0020508:	e8 eb fa ff ff       	call   c001fff8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002050d:	83 c4 1c             	add    esp,0x1c
c0020510:	52                   	push   edx
c0020511:	50                   	push   eax
c0020512:	6a 00                	push   0x0
c0020514:	e9 51 02 00 00       	jmp    c002076a <Vm::x87Handler(regs*)+0x603>
c0020519:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002051d:	8d 50 40             	lea    edx,[eax+0x40]
c0020520:	80 fa 07             	cmp    dl,0x7
c0020523:	77 37                	ja     c002055c <Vm::x87Handler(regs*)+0x3f5>
c0020525:	83 ec 0c             	sub    esp,0xc
c0020528:	2d c0 00 00 00       	sub    eax,0xc0
c002052d:	50                   	push   eax
c002052e:	e8 f7 fa ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c0020533:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002053a:	89 c6                	mov    esi,eax
c002053c:	89 d7                	mov    edi,edx
c002053e:	e8 e7 fa ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c0020543:	57                   	push   edi
c0020544:	56                   	push   esi
c0020545:	52                   	push   edx
c0020546:	50                   	push   eax
c0020547:	e8 54 fa ff ff       	call   c001ffa0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002054c:	83 c4 1c             	add    esp,0x1c
c002054f:	52                   	push   edx
c0020550:	50                   	push   eax
c0020551:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020555:	2d c0 00 00 00       	sub    eax,0xc0
c002055a:	eb 3d                	jmp    c0020599 <Vm::x87Handler(regs*)+0x432>
c002055c:	8d 50 38             	lea    edx,[eax+0x38]
c002055f:	80 fa 07             	cmp    dl,0x7
c0020562:	77 3b                	ja     c002059f <Vm::x87Handler(regs*)+0x438>
c0020564:	83 ec 0c             	sub    esp,0xc
c0020567:	2d c8 00 00 00       	sub    eax,0xc8
c002056c:	50                   	push   eax
c002056d:	e8 b8 fa ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c0020572:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020579:	89 c6                	mov    esi,eax
c002057b:	89 d7                	mov    edi,edx
c002057d:	e8 a8 fa ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c0020582:	57                   	push   edi
c0020583:	56                   	push   esi
c0020584:	52                   	push   edx
c0020585:	50                   	push   eax
c0020586:	e8 4e fa ff ff       	call   c001ffd9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002058b:	83 c4 1c             	add    esp,0x1c
c002058e:	52                   	push   edx
c002058f:	50                   	push   eax
c0020590:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020594:	2d c8 00 00 00       	sub    eax,0xc8
c0020599:	50                   	push   eax
c002059a:	e9 75 fc ff ff       	jmp    c0020214 <Vm::x87Handler(regs*)+0xad>
c002059f:	83 c0 18             	add    eax,0x18
c00205a2:	3c 07                	cmp    al,0x7
c00205a4:	0f 87 3b 04 00 00    	ja     c00209e5 <Vm::x87Handler(regs*)+0x87e>
c00205aa:	83 ec 0c             	sub    esp,0xc
c00205ad:	6a 00                	push   0x0
c00205af:	e8 76 fa ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c00205b4:	89 c6                	mov    esi,eax
c00205b6:	89 d7                	mov    edi,edx
c00205b8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00205bc:	2d e8 00 00 00       	sub    eax,0xe8
c00205c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00205c4:	e8 61 fa ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c00205c9:	57                   	push   edi
c00205ca:	56                   	push   esi
c00205cb:	52                   	push   edx
c00205cc:	50                   	push   eax
c00205cd:	e8 f8 f9 ff ff       	call   c001ffca <Vm::fpuSub(unsigned long long, unsigned long long)>
c00205d2:	83 c4 1c             	add    esp,0x1c
c00205d5:	52                   	push   edx
c00205d6:	50                   	push   eax
c00205d7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00205db:	2d e8 00 00 00       	sub    eax,0xe8
c00205e0:	eb b7                	jmp    c0020599 <Vm::x87Handler(regs*)+0x432>
c00205e2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00205e6:	8d 50 40             	lea    edx,[eax+0x40]
c00205e9:	80 fa 07             	cmp    dl,0x7
c00205ec:	77 3a                	ja     c0020628 <Vm::x87Handler(regs*)+0x4c1>
c00205ee:	83 ec 0c             	sub    esp,0xc
c00205f1:	2d c0 00 00 00       	sub    eax,0xc0
c00205f6:	50                   	push   eax
c00205f7:	e8 2e fa ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c00205fc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020603:	89 c6                	mov    esi,eax
c0020605:	89 d7                	mov    edi,edx
c0020607:	e8 1e fa ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c002060c:	57                   	push   edi
c002060d:	56                   	push   esi
c002060e:	52                   	push   edx
c002060f:	50                   	push   eax
c0020610:	e8 8b f9 ff ff       	call   c001ffa0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020615:	83 c4 1c             	add    esp,0x1c
c0020618:	52                   	push   edx
c0020619:	50                   	push   eax
c002061a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002061e:	2d c0 00 00 00       	sub    eax,0xc0
c0020623:	e9 9e 01 00 00       	jmp    c00207c6 <Vm::x87Handler(regs*)+0x65f>
c0020628:	8d 50 20             	lea    edx,[eax+0x20]
c002062b:	80 fa 07             	cmp    dl,0x7
c002062e:	77 3a                	ja     c002066a <Vm::x87Handler(regs*)+0x503>
c0020630:	83 ec 0c             	sub    esp,0xc
c0020633:	2d e0 00 00 00       	sub    eax,0xe0
c0020638:	50                   	push   eax
c0020639:	e8 ec f9 ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c002063e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020645:	89 c6                	mov    esi,eax
c0020647:	89 d7                	mov    edi,edx
c0020649:	e8 dc f9 ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c002064e:	57                   	push   edi
c002064f:	56                   	push   esi
c0020650:	52                   	push   edx
c0020651:	50                   	push   eax
c0020652:	e8 73 f9 ff ff       	call   c001ffca <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020657:	83 c4 1c             	add    esp,0x1c
c002065a:	52                   	push   edx
c002065b:	50                   	push   eax
c002065c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020660:	2d e0 00 00 00       	sub    eax,0xe0
c0020665:	e9 5c 01 00 00       	jmp    c00207c6 <Vm::x87Handler(regs*)+0x65f>
c002066a:	8d 50 18             	lea    edx,[eax+0x18]
c002066d:	80 fa 07             	cmp    dl,0x7
c0020670:	77 3b                	ja     c00206ad <Vm::x87Handler(regs*)+0x546>
c0020672:	83 ec 0c             	sub    esp,0xc
c0020675:	6a 00                	push   0x0
c0020677:	e8 ae f9 ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c002067c:	89 c6                	mov    esi,eax
c002067e:	89 d7                	mov    edi,edx
c0020680:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020684:	2d e8 00 00 00       	sub    eax,0xe8
c0020689:	89 04 24             	mov    DWORD PTR [esp],eax
c002068c:	e8 99 f9 ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c0020691:	57                   	push   edi
c0020692:	56                   	push   esi
c0020693:	52                   	push   edx
c0020694:	50                   	push   eax
c0020695:	e8 30 f9 ff ff       	call   c001ffca <Vm::fpuSub(unsigned long long, unsigned long long)>
c002069a:	83 c4 1c             	add    esp,0x1c
c002069d:	52                   	push   edx
c002069e:	50                   	push   eax
c002069f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206a3:	2d e8 00 00 00       	sub    eax,0xe8
c00206a8:	e9 19 01 00 00       	jmp    c00207c6 <Vm::x87Handler(regs*)+0x65f>
c00206ad:	8d 50 38             	lea    edx,[eax+0x38]
c00206b0:	80 fa 07             	cmp    dl,0x7
c00206b3:	77 37                	ja     c00206ec <Vm::x87Handler(regs*)+0x585>
c00206b5:	83 ec 0c             	sub    esp,0xc
c00206b8:	2d c8 00 00 00       	sub    eax,0xc8
c00206bd:	50                   	push   eax
c00206be:	e8 67 f9 ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c00206c3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00206ca:	89 c6                	mov    esi,eax
c00206cc:	89 d7                	mov    edi,edx
c00206ce:	e8 57 f9 ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c00206d3:	57                   	push   edi
c00206d4:	56                   	push   esi
c00206d5:	52                   	push   edx
c00206d6:	50                   	push   eax
c00206d7:	e8 fd f8 ff ff       	call   c001ffd9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00206dc:	83 c4 1c             	add    esp,0x1c
c00206df:	52                   	push   edx
c00206e0:	50                   	push   eax
c00206e1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206e5:	2d c8 00 00 00       	sub    eax,0xc8
c00206ea:	eb 7d                	jmp    c0020769 <Vm::x87Handler(regs*)+0x602>
c00206ec:	3c f7                	cmp    al,0xf7
c00206ee:	76 38                	jbe    c0020728 <Vm::x87Handler(regs*)+0x5c1>
c00206f0:	83 ec 0c             	sub    esp,0xc
c00206f3:	6a 00                	push   0x0
c00206f5:	e8 30 f9 ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c00206fa:	89 c6                	mov    esi,eax
c00206fc:	89 d7                	mov    edi,edx
c00206fe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020702:	2d f8 00 00 00       	sub    eax,0xf8
c0020707:	89 04 24             	mov    DWORD PTR [esp],eax
c002070a:	e8 1b f9 ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c002070f:	57                   	push   edi
c0020710:	56                   	push   esi
c0020711:	52                   	push   edx
c0020712:	50                   	push   eax
c0020713:	e8 e0 f8 ff ff       	call   c001fff8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020718:	83 c4 1c             	add    esp,0x1c
c002071b:	52                   	push   edx
c002071c:	50                   	push   eax
c002071d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020721:	2d f8 00 00 00       	sub    eax,0xf8
c0020726:	eb 41                	jmp    c0020769 <Vm::x87Handler(regs*)+0x602>
c0020728:	8d 50 10             	lea    edx,[eax+0x10]
c002072b:	80 fa 07             	cmp    dl,0x7
c002072e:	0f 87 5a 01 00 00    	ja     c002088e <Vm::x87Handler(regs*)+0x727>
c0020734:	83 ec 0c             	sub    esp,0xc
c0020737:	2d f0 00 00 00       	sub    eax,0xf0
c002073c:	50                   	push   eax
c002073d:	e8 e8 f8 ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c0020742:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020749:	89 c6                	mov    esi,eax
c002074b:	89 d7                	mov    edi,edx
c002074d:	e8 d8 f8 ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c0020752:	57                   	push   edi
c0020753:	56                   	push   esi
c0020754:	52                   	push   edx
c0020755:	50                   	push   eax
c0020756:	e8 9d f8 ff ff       	call   c001fff8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002075b:	83 c4 1c             	add    esp,0x1c
c002075e:	52                   	push   edx
c002075f:	50                   	push   eax
c0020760:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020764:	2d f0 00 00 00       	sub    eax,0xf0
c0020769:	50                   	push   eax
c002076a:	e8 fe f8 ff ff       	call   c002006d <Vm::fpuSetReg(int, unsigned long long)>
c002076f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020773:	e8 9d f9 ff ff       	call   c0020115 <Vm::fpuPop()>
c0020778:	e9 5e fa ff ff       	jmp    c00201db <Vm::x87Handler(regs*)+0x74>
c002077d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020781:	8d 50 30             	lea    edx,[eax+0x30]
c0020784:	80 fa 07             	cmp    dl,0x7
c0020787:	77 1d                	ja     c00207a6 <Vm::x87Handler(regs*)+0x63f>
c0020789:	83 ec 0c             	sub    esp,0xc
c002078c:	6a 00                	push   0x0
c002078e:	e8 97 f8 ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c0020793:	83 c4 0c             	add    esp,0xc
c0020796:	52                   	push   edx
c0020797:	50                   	push   eax
c0020798:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002079c:	2d d0 00 00 00       	sub    eax,0xd0
c00207a1:	e9 f3 fd ff ff       	jmp    c0020599 <Vm::x87Handler(regs*)+0x432>
c00207a6:	8d 50 28             	lea    edx,[eax+0x28]
c00207a9:	80 fa 07             	cmp    dl,0x7
c00207ac:	77 28                	ja     c00207d6 <Vm::x87Handler(regs*)+0x66f>
c00207ae:	83 ec 0c             	sub    esp,0xc
c00207b1:	6a 00                	push   0x0
c00207b3:	e8 72 f8 ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c00207b8:	83 c4 0c             	add    esp,0xc
c00207bb:	52                   	push   edx
c00207bc:	50                   	push   eax
c00207bd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00207c1:	2d d8 00 00 00       	sub    eax,0xd8
c00207c6:	50                   	push   eax
c00207c7:	e8 a1 f8 ff ff       	call   c002006d <Vm::fpuSetReg(int, unsigned long long)>
c00207cc:	e8 44 f9 ff ff       	call   c0020115 <Vm::fpuPop()>
c00207d1:	e9 01 fa ff ff       	jmp    c00201d7 <Vm::x87Handler(regs*)+0x70>
c00207d6:	8d 50 20             	lea    edx,[eax+0x20]
c00207d9:	80 fa 07             	cmp    dl,0x7
c00207dc:	77 30                	ja     c002080e <Vm::x87Handler(regs*)+0x6a7>
c00207de:	83 ec 0c             	sub    esp,0xc
c00207e1:	2d e0 00 00 00       	sub    eax,0xe0
c00207e6:	50                   	push   eax
c00207e7:	e8 3e f8 ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c00207ec:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00207f3:	89 c6                	mov    esi,eax
c00207f5:	89 d7                	mov    edi,edx
c00207f7:	e8 2e f8 ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c00207fc:	57                   	push   edi
c00207fd:	56                   	push   esi
c00207fe:	52                   	push   edx
c00207ff:	50                   	push   eax
c0020800:	e8 48 f7 ff ff       	call   c001ff4d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020805:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020809:	e9 54 02 00 00       	jmp    c0020a62 <Vm::x87Handler(regs*)+0x8fb>
c002080e:	8d 50 18             	lea    edx,[eax+0x18]
c0020811:	80 fa 07             	cmp    dl,0x7
c0020814:	0f 87 43 fb ff ff    	ja     c002035d <Vm::x87Handler(regs*)+0x1f6>
c002081a:	83 ec 0c             	sub    esp,0xc
c002081d:	2d e8 00 00 00       	sub    eax,0xe8
c0020822:	50                   	push   eax
c0020823:	e8 02 f8 ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c0020828:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002082f:	89 c6                	mov    esi,eax
c0020831:	89 d7                	mov    edi,edx
c0020833:	e8 f2 f7 ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c0020838:	57                   	push   edi
c0020839:	56                   	push   esi
c002083a:	52                   	push   edx
c002083b:	50                   	push   eax
c002083c:	e8 0c f7 ff ff       	call   c001ff4d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020841:	83 c4 20             	add    esp,0x20
c0020844:	e8 cc f8 ff ff       	call   c0020115 <Vm::fpuPop()>
c0020849:	eb 62                	jmp    c00208ad <Vm::x87Handler(regs*)+0x746>
c002084b:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c002084f:	0f 85 0f 01 00 00    	jne    c0020964 <Vm::x87Handler(regs*)+0x7fd>
c0020855:	83 ec 0c             	sub    esp,0xc
c0020858:	6a 01                	push   0x1
c002085a:	e8 cb f7 ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c002085f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020866:	89 c6                	mov    esi,eax
c0020868:	89 d7                	mov    edi,edx
c002086a:	e8 bb f7 ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c002086f:	57                   	push   edi
c0020870:	56                   	push   esi
c0020871:	52                   	push   edx
c0020872:	50                   	push   eax
c0020873:	e8 d5 f6 ff ff       	call   c001ff4d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020878:	83 c4 20             	add    esp,0x20
c002087b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002087f:	e8 91 f8 ff ff       	call   c0020115 <Vm::fpuPop()>
c0020884:	e8 8c f8 ff ff       	call   c0020115 <Vm::fpuPop()>
c0020889:	e9 50 f9 ff ff       	jmp    c00201de <Vm::x87Handler(regs*)+0x77>
c002088e:	3c d9                	cmp    al,0xd9
c0020890:	0f 85 b5 02 00 00    	jne    c0020b4b <Vm::x87Handler(regs*)+0x9e4>
c0020896:	eb bd                	jmp    c0020855 <Vm::x87Handler(regs*)+0x6ee>
c0020898:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c002089c:	0f 85 ea 02 00 00    	jne    c0020b8c <Vm::x87Handler(regs*)+0xa25>
c00208a2:	0f b7 05 c0 24 03 c0 	movzx  eax,WORD PTR ds:0xc00324c0
c00208a9:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00208ad:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00208b1:	e9 28 f9 ff ff       	jmp    c00201de <Vm::x87Handler(regs*)+0x77>
c00208b6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00208ba:	84 d2                	test   dl,dl
c00208bc:	75 0f                	jne    c00208cd <Vm::x87Handler(regs*)+0x766>
c00208be:	83 ec 0c             	sub    esp,0xc
c00208c1:	ff 36                	push   DWORD PTR [esi]
c00208c3:	e8 b1 f4 ff ff       	call   c001fd79 <Vm::fpu32ToInternal(unsigned int)>
c00208c8:	e9 2c 01 00 00       	jmp    c00209f9 <Vm::x87Handler(regs*)+0x892>
c00208cd:	80 fa 01             	cmp    dl,0x1
c00208d0:	75 0f                	jne    c00208e1 <Vm::x87Handler(regs*)+0x77a>
c00208d2:	83 ec 0c             	sub    esp,0xc
c00208d5:	ff 36                	push   DWORD PTR [esi]
c00208d7:	e8 9d f4 ff ff       	call   c001fd79 <Vm::fpu32ToInternal(unsigned int)>
c00208dc:	e9 81 02 00 00       	jmp    c0020b62 <Vm::x87Handler(regs*)+0x9fb>
c00208e1:	80 fa 04             	cmp    dl,0x4
c00208e4:	75 0f                	jne    c00208f5 <Vm::x87Handler(regs*)+0x78e>
c00208e6:	83 ec 0c             	sub    esp,0xc
c00208e9:	ff 36                	push   DWORD PTR [esi]
c00208eb:	e8 89 f4 ff ff       	call   c001fd79 <Vm::fpu32ToInternal(unsigned int)>
c00208f0:	e9 86 01 00 00       	jmp    c0020a7b <Vm::x87Handler(regs*)+0x914>
c00208f5:	80 fa 05             	cmp    dl,0x5
c00208f8:	75 1b                	jne    c0020915 <Vm::x87Handler(regs*)+0x7ae>
c00208fa:	83 ec 0c             	sub    esp,0xc
c00208fd:	6a 00                	push   0x0
c00208ff:	e8 26 f7 ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c0020904:	89 c7                	mov    edi,eax
c0020906:	89 d5                	mov    ebp,edx
c0020908:	58                   	pop    eax
c0020909:	ff 36                	push   DWORD PTR [esi]
c002090b:	e8 69 f4 ff ff       	call   c001fd79 <Vm::fpu32ToInternal(unsigned int)>
c0020910:	e9 a3 01 00 00       	jmp    c0020ab8 <Vm::x87Handler(regs*)+0x951>
c0020915:	80 fa 06             	cmp    dl,0x6
c0020918:	75 0f                	jne    c0020929 <Vm::x87Handler(regs*)+0x7c2>
c002091a:	83 ec 0c             	sub    esp,0xc
c002091d:	ff 36                	push   DWORD PTR [esi]
c002091f:	e8 55 f4 ff ff       	call   c001fd79 <Vm::fpu32ToInternal(unsigned int)>
c0020924:	e9 ae 01 00 00       	jmp    c0020ad7 <Vm::x87Handler(regs*)+0x970>
c0020929:	31 c0                	xor    eax,eax
c002092b:	80 fa 07             	cmp    dl,0x7
c002092e:	0f 85 94 02 00 00    	jne    c0020bc8 <Vm::x87Handler(regs*)+0xa61>
c0020934:	83 ec 0c             	sub    esp,0xc
c0020937:	6a 00                	push   0x0
c0020939:	e8 ec f6 ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c002093e:	89 c7                	mov    edi,eax
c0020940:	89 d5                	mov    ebp,edx
c0020942:	58                   	pop    eax
c0020943:	ff 36                	push   DWORD PTR [esi]
c0020945:	e8 2f f4 ff ff       	call   c001fd79 <Vm::fpu32ToInternal(unsigned int)>
c002094a:	e9 cb 01 00 00       	jmp    c0020b1a <Vm::x87Handler(regs*)+0x9b3>
c002094f:	80 fa 03             	cmp    dl,0x3
c0020952:	0f 85 d3 01 00 00    	jne    c0020b2b <Vm::x87Handler(regs*)+0x9c4>
c0020958:	e8 b8 f7 ff ff       	call   c0020115 <Vm::fpuPop()>
c002095d:	51                   	push   ecx
c002095e:	51                   	push   ecx
c002095f:	e9 de 01 00 00       	jmp    c0020b42 <Vm::x87Handler(regs*)+0x9db>
c0020964:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020968:	80 fa 01             	cmp    dl,0x1
c002096b:	75 09                	jne    c0020976 <Vm::x87Handler(regs*)+0x80f>
c002096d:	57                   	push   edi
c002096e:	57                   	push   edi
c002096f:	8b 06                	mov    eax,DWORD PTR [esi]
c0020971:	e9 e3 01 00 00       	jmp    c0020b59 <Vm::x87Handler(regs*)+0x9f2>
c0020976:	80 fa 04             	cmp    dl,0x4
c0020979:	75 12                	jne    c002098d <Vm::x87Handler(regs*)+0x826>
c002097b:	31 d2                	xor    edx,edx
c002097d:	51                   	push   ecx
c002097e:	51                   	push   ecx
c002097f:	8b 06                	mov    eax,DWORD PTR [esi]
c0020981:	52                   	push   edx
c0020982:	50                   	push   eax
c0020983:	e8 d0 f4 ff ff       	call   c001fe58 <Vm::fpuLongToFloat(long long)>
c0020988:	e9 ee 00 00 00       	jmp    c0020a7b <Vm::x87Handler(regs*)+0x914>
c002098d:	31 c0                	xor    eax,eax
c002098f:	80 fa 07             	cmp    dl,0x7
c0020992:	0f 85 30 02 00 00    	jne    c0020bc8 <Vm::x87Handler(regs*)+0xa61>
c0020998:	83 ec 0c             	sub    esp,0xc
c002099b:	6a 00                	push   0x0
c002099d:	e8 88 f6 ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c00209a2:	89 c7                	mov    edi,eax
c00209a4:	89 d5                	mov    ebp,edx
c00209a6:	58                   	pop    eax
c00209a7:	8b 06                	mov    eax,DWORD PTR [esi]
c00209a9:	5a                   	pop    edx
c00209aa:	31 d2                	xor    edx,edx
c00209ac:	52                   	push   edx
c00209ad:	50                   	push   eax
c00209ae:	e8 a5 f4 ff ff       	call   c001fe58 <Vm::fpuLongToFloat(long long)>
c00209b3:	e9 62 01 00 00       	jmp    c0020b1a <Vm::x87Handler(regs*)+0x9b3>
c00209b8:	84 d2                	test   dl,dl
c00209ba:	75 0d                	jne    c00209c9 <Vm::x87Handler(regs*)+0x862>
c00209bc:	31 d2                	xor    edx,edx
c00209be:	55                   	push   ebp
c00209bf:	55                   	push   ebp
c00209c0:	8b 06                	mov    eax,DWORD PTR [esi]
c00209c2:	52                   	push   edx
c00209c3:	50                   	push   eax
c00209c4:	e9 d3 01 00 00       	jmp    c0020b9c <Vm::x87Handler(regs*)+0xa35>
c00209c9:	31 c0                	xor    eax,eax
c00209cb:	80 fa 02             	cmp    dl,0x2
c00209ce:	0f 85 f4 01 00 00    	jne    c0020bc8 <Vm::x87Handler(regs*)+0xa61>
c00209d4:	83 ec 0c             	sub    esp,0xc
c00209d7:	6a 00                	push   0x0
c00209d9:	e8 4c f6 ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c00209de:	59                   	pop    ecx
c00209df:	5f                   	pop    edi
c00209e0:	e9 6a f9 ff ff       	jmp    c002034f <Vm::x87Handler(regs*)+0x1e8>
c00209e5:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00209e9:	84 d2                	test   dl,dl
c00209eb:	75 2a                	jne    c0020a17 <Vm::x87Handler(regs*)+0x8b0>
c00209ed:	50                   	push   eax
c00209ee:	50                   	push   eax
c00209ef:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00209f2:	ff 36                	push   DWORD PTR [esi]
c00209f4:	e8 c5 f3 ff ff       	call   c001fdbe <Vm::fpu64ToInternal(unsigned long long)>
c00209f9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020a00:	89 c6                	mov    esi,eax
c0020a02:	89 d7                	mov    edi,edx
c0020a04:	e8 21 f6 ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c0020a09:	57                   	push   edi
c0020a0a:	56                   	push   esi
c0020a0b:	52                   	push   edx
c0020a0c:	50                   	push   eax
c0020a0d:	e8 8e f5 ff ff       	call   c001ffa0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020a12:	e9 64 01 00 00       	jmp    c0020b7b <Vm::x87Handler(regs*)+0xa14>
c0020a17:	80 fa 01             	cmp    dl,0x1
c0020a1a:	75 11                	jne    c0020a2d <Vm::x87Handler(regs*)+0x8c6>
c0020a1c:	50                   	push   eax
c0020a1d:	50                   	push   eax
c0020a1e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020a21:	ff 36                	push   DWORD PTR [esi]
c0020a23:	e8 96 f3 ff ff       	call   c001fdbe <Vm::fpu64ToInternal(unsigned long long)>
c0020a28:	e9 35 01 00 00       	jmp    c0020b62 <Vm::x87Handler(regs*)+0x9fb>
c0020a2d:	80 fa 02             	cmp    dl,0x2
c0020a30:	0f 85 54 f9 ff ff    	jne    c002038a <Vm::x87Handler(regs*)+0x223>
c0020a36:	55                   	push   ebp
c0020a37:	55                   	push   ebp
c0020a38:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020a3b:	ff 36                	push   DWORD PTR [esi]
c0020a3d:	e8 7c f3 ff ff       	call   c001fdbe <Vm::fpu64ToInternal(unsigned long long)>
c0020a42:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020a49:	89 c6                	mov    esi,eax
c0020a4b:	89 d7                	mov    edi,edx
c0020a4d:	e8 d8 f5 ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c0020a52:	57                   	push   edi
c0020a53:	56                   	push   esi
c0020a54:	52                   	push   edx
c0020a55:	50                   	push   eax
c0020a56:	e8 f2 f4 ff ff       	call   c001ff4d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020a5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020a5f:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020a62:	83 c4 20             	add    esp,0x20
c0020a65:	e9 74 f7 ff ff       	jmp    c00201de <Vm::x87Handler(regs*)+0x77>
c0020a6a:	80 fa 04             	cmp    dl,0x4
c0020a6d:	75 2a                	jne    c0020a99 <Vm::x87Handler(regs*)+0x932>
c0020a6f:	51                   	push   ecx
c0020a70:	51                   	push   ecx
c0020a71:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020a74:	ff 36                	push   DWORD PTR [esi]
c0020a76:	e8 43 f3 ff ff       	call   c001fdbe <Vm::fpu64ToInternal(unsigned long long)>
c0020a7b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020a82:	89 c6                	mov    esi,eax
c0020a84:	89 d7                	mov    edi,edx
c0020a86:	e8 9f f5 ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c0020a8b:	57                   	push   edi
c0020a8c:	56                   	push   esi
c0020a8d:	52                   	push   edx
c0020a8e:	50                   	push   eax
c0020a8f:	e8 36 f5 ff ff       	call   c001ffca <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020a94:	e9 e2 00 00 00       	jmp    c0020b7b <Vm::x87Handler(regs*)+0xa14>
c0020a99:	80 fa 05             	cmp    dl,0x5
c0020a9c:	75 28                	jne    c0020ac6 <Vm::x87Handler(regs*)+0x95f>
c0020a9e:	83 ec 0c             	sub    esp,0xc
c0020aa1:	6a 00                	push   0x0
c0020aa3:	e8 82 f5 ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c0020aa8:	89 c7                	mov    edi,eax
c0020aaa:	89 d5                	mov    ebp,edx
c0020aac:	58                   	pop    eax
c0020aad:	5a                   	pop    edx
c0020aae:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020ab1:	ff 36                	push   DWORD PTR [esi]
c0020ab3:	e8 06 f3 ff ff       	call   c001fdbe <Vm::fpu64ToInternal(unsigned long long)>
c0020ab8:	83 c4 10             	add    esp,0x10
c0020abb:	55                   	push   ebp
c0020abc:	57                   	push   edi
c0020abd:	52                   	push   edx
c0020abe:	50                   	push   eax
c0020abf:	e8 06 f5 ff ff       	call   c001ffca <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020ac4:	eb 60                	jmp    c0020b26 <Vm::x87Handler(regs*)+0x9bf>
c0020ac6:	80 fa 06             	cmp    dl,0x6
c0020ac9:	75 2a                	jne    c0020af5 <Vm::x87Handler(regs*)+0x98e>
c0020acb:	51                   	push   ecx
c0020acc:	51                   	push   ecx
c0020acd:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020ad0:	ff 36                	push   DWORD PTR [esi]
c0020ad2:	e8 e7 f2 ff ff       	call   c001fdbe <Vm::fpu64ToInternal(unsigned long long)>
c0020ad7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020ade:	89 c6                	mov    esi,eax
c0020ae0:	89 d7                	mov    edi,edx
c0020ae2:	e8 43 f5 ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c0020ae7:	57                   	push   edi
c0020ae8:	56                   	push   esi
c0020ae9:	52                   	push   edx
c0020aea:	50                   	push   eax
c0020aeb:	e8 08 f5 ff ff       	call   c001fff8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020af0:	e9 86 00 00 00       	jmp    c0020b7b <Vm::x87Handler(regs*)+0xa14>
c0020af5:	31 c0                	xor    eax,eax
c0020af7:	80 fa 07             	cmp    dl,0x7
c0020afa:	0f 85 c8 00 00 00    	jne    c0020bc8 <Vm::x87Handler(regs*)+0xa61>
c0020b00:	83 ec 0c             	sub    esp,0xc
c0020b03:	6a 00                	push   0x0
c0020b05:	e8 20 f5 ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c0020b0a:	89 c7                	mov    edi,eax
c0020b0c:	89 d5                	mov    ebp,edx
c0020b0e:	58                   	pop    eax
c0020b0f:	5a                   	pop    edx
c0020b10:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020b13:	ff 36                	push   DWORD PTR [esi]
c0020b15:	e8 a4 f2 ff ff       	call   c001fdbe <Vm::fpu64ToInternal(unsigned long long)>
c0020b1a:	83 c4 10             	add    esp,0x10
c0020b1d:	55                   	push   ebp
c0020b1e:	57                   	push   edi
c0020b1f:	52                   	push   edx
c0020b20:	50                   	push   eax
c0020b21:	e8 d2 f4 ff ff       	call   c001fff8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020b26:	83 c4 0c             	add    esp,0xc
c0020b29:	eb 53                	jmp    c0020b7e <Vm::x87Handler(regs*)+0xa17>
c0020b2b:	31 c0                	xor    eax,eax
c0020b2d:	80 fa 02             	cmp    dl,0x2
c0020b30:	0f 85 92 00 00 00    	jne    c0020bc8 <Vm::x87Handler(regs*)+0xa61>
c0020b36:	83 ec 0c             	sub    esp,0xc
c0020b39:	6a 00                	push   0x0
c0020b3b:	e8 ea f4 ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c0020b40:	59                   	pop    ecx
c0020b41:	5f                   	pop    edi
c0020b42:	52                   	push   edx
c0020b43:	50                   	push   eax
c0020b44:	e8 27 f2 ff ff       	call   c001fd70 <Vm::fpuInternalTo64(unsigned long long)>
c0020b49:	eb 70                	jmp    c0020bbb <Vm::x87Handler(regs*)+0xa54>
c0020b4b:	31 c0                	xor    eax,eax
c0020b4d:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020b52:	75 74                	jne    c0020bc8 <Vm::x87Handler(regs*)+0xa61>
c0020b54:	50                   	push   eax
c0020b55:	50                   	push   eax
c0020b56:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020b59:	31 d2                	xor    edx,edx
c0020b5b:	52                   	push   edx
c0020b5c:	50                   	push   eax
c0020b5d:	e8 f6 f2 ff ff       	call   c001fe58 <Vm::fpuLongToFloat(long long)>
c0020b62:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020b69:	89 c6                	mov    esi,eax
c0020b6b:	89 d7                	mov    edi,edx
c0020b6d:	e8 b8 f4 ff ff       	call   c002002a <Vm::fpuGetReg(int)>
c0020b72:	57                   	push   edi
c0020b73:	56                   	push   esi
c0020b74:	52                   	push   edx
c0020b75:	50                   	push   eax
c0020b76:	e8 5e f4 ff ff       	call   c001ffd9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020b7b:	83 c4 1c             	add    esp,0x1c
c0020b7e:	52                   	push   edx
c0020b7f:	50                   	push   eax
c0020b80:	6a 00                	push   0x0
c0020b82:	e8 e6 f4 ff ff       	call   c002006d <Vm::fpuSetReg(int, unsigned long long)>
c0020b87:	e9 f2 f7 ff ff       	jmp    c002037e <Vm::x87Handler(regs*)+0x217>
c0020b8c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020b90:	80 fa 05             	cmp    dl,0x5
c0020b93:	75 11                	jne    c0020ba6 <Vm::x87Handler(regs*)+0xa3f>
c0020b95:	55                   	push   ebp
c0020b96:	55                   	push   ebp
c0020b97:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020b9a:	ff 36                	push   DWORD PTR [esi]
c0020b9c:	e8 81 f2 ff ff       	call   c001fe22 <Vm::fpuULongToFloat(unsigned long long)>
c0020ba1:	e9 cf f7 ff ff       	jmp    c0020375 <Vm::x87Handler(regs*)+0x20e>
c0020ba6:	31 c0                	xor    eax,eax
c0020ba8:	80 fa 07             	cmp    dl,0x7
c0020bab:	75 1b                	jne    c0020bc8 <Vm::x87Handler(regs*)+0xa61>
c0020bad:	e8 63 f5 ff ff       	call   c0020115 <Vm::fpuPop()>
c0020bb2:	51                   	push   ecx
c0020bb3:	51                   	push   ecx
c0020bb4:	52                   	push   edx
c0020bb5:	50                   	push   eax
c0020bb6:	e8 0c f2 ff ff       	call   c001fdc7 <Vm::fpuFloatToLong(unsigned long long)>
c0020bbb:	83 c4 10             	add    esp,0x10
c0020bbe:	89 06                	mov    DWORD PTR [esi],eax
c0020bc0:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020bc3:	e9 f8 f7 ff ff       	jmp    c00203c0 <Vm::x87Handler(regs*)+0x259>
c0020bc8:	83 c4 1c             	add    esp,0x1c
c0020bcb:	5b                   	pop    ebx
c0020bcc:	5e                   	pop    esi
c0020bcd:	5f                   	pop    edi
c0020bce:	5d                   	pop    ebp
c0020bcf:	c3                   	ret    

c0020bd0 <__static_initialization_and_destruction_0(int, int)>:
c0020bd0:	83 ec 0c             	sub    esp,0xc
c0020bd3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020bd8:	75 1a                	jne    c0020bf4 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020bda:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020be2:	75 10                	jne    c0020bf4 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020be4:	83 ec 0c             	sub    esp,0xc
c0020be7:	68 c0 24 03 c0       	push   0xc00324c0
c0020bec:	e8 bb 8a 00 00       	call   c00296ac <Vm::_FPUState::_FPUState()>
c0020bf1:	83 c4 10             	add    esp,0x10
c0020bf4:	90                   	nop
c0020bf5:	83 c4 0c             	add    esp,0xc
c0020bf8:	c3                   	ret    

c0020bf9 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020bf9:	83 ec 0c             	sub    esp,0xc
c0020bfc:	83 ec 08             	sub    esp,0x8
c0020bff:	68 ff ff 00 00       	push   0xffff
c0020c04:	6a 01                	push   0x1
c0020c06:	e8 c5 ff ff ff       	call   c0020bd0 <__static_initialization_and_destruction_0(int, int)>
c0020c0b:	83 c4 10             	add    esp,0x10
c0020c0e:	83 c4 0c             	add    esp,0xc
c0020c11:	c3                   	ret    

c0020c12 <FAT::getName()>:
c0020c12:	b8 ac d2 02 c0       	mov    eax,0xc002d2ac
c0020c17:	c3                   	ret    

c0020c18 <FAT::tell(void*, unsigned long long*)>:
c0020c18:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020c1d:	75 06                	jne    c0020c25 <FAT::tell(void*, unsigned long long*)+0xd>
c0020c1f:	b8 04 00 00 00       	mov    eax,0x4
c0020c24:	c3                   	ret    
c0020c25:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020c2a:	75 06                	jne    c0020c32 <FAT::tell(void*, unsigned long long*)+0x1a>
c0020c2c:	b8 04 00 00 00       	mov    eax,0x4
c0020c31:	c3                   	ret    
c0020c32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c36:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020c39:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020c3c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020c40:	89 01                	mov    DWORD PTR [ecx],eax
c0020c42:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020c45:	b8 00 00 00 00       	mov    eax,0x0
c0020c4a:	c3                   	ret    
c0020c4b:	90                   	nop

c0020c4c <FAT::stat(void*, unsigned long long*)>:
c0020c4c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020c51:	75 06                	jne    c0020c59 <FAT::stat(void*, unsigned long long*)+0xd>
c0020c53:	b8 04 00 00 00       	mov    eax,0x4
c0020c58:	c3                   	ret    
c0020c59:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020c5e:	75 06                	jne    c0020c66 <FAT::stat(void*, unsigned long long*)+0x1a>
c0020c60:	b8 04 00 00 00       	mov    eax,0x4
c0020c65:	c3                   	ret    
c0020c66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c6a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020c6d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020c70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020c74:	89 01                	mov    DWORD PTR [ecx],eax
c0020c76:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020c79:	b8 00 00 00 00       	mov    eax,0x0
c0020c7e:	c3                   	ret    
c0020c7f:	90                   	nop

c0020c80 <FAT::~FAT()>:
c0020c80:	83 ec 0c             	sub    esp,0xc
c0020c83:	ba 3c d3 02 c0       	mov    edx,0xc002d33c
c0020c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c8c:	89 10                	mov    DWORD PTR [eax],edx
c0020c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c92:	83 ec 0c             	sub    esp,0xc
c0020c95:	50                   	push   eax
c0020c96:	e8 61 25 ff ff       	call   c00131fc <Filesystem::~Filesystem()>
c0020c9b:	83 c4 10             	add    esp,0x10
c0020c9e:	90                   	nop
c0020c9f:	83 c4 0c             	add    esp,0xc
c0020ca2:	c3                   	ret    
c0020ca3:	90                   	nop

c0020ca4 <FAT::~FAT()>:
c0020ca4:	83 ec 0c             	sub    esp,0xc
c0020ca7:	83 ec 0c             	sub    esp,0xc
c0020caa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020cae:	e8 cd ff ff ff       	call   c0020c80 <FAT::~FAT()>
c0020cb3:	83 c4 10             	add    esp,0x10
c0020cb6:	83 ec 08             	sub    esp,0x8
c0020cb9:	6a 08                	push   0x8
c0020cbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020cbf:	e8 29 21 ff ff       	call   c0012ded <operator delete(void*, unsigned long)>
c0020cc4:	83 c4 10             	add    esp,0x10
c0020cc7:	83 c4 0c             	add    esp,0xc
c0020cca:	c3                   	ret    
c0020ccb:	90                   	nop

c0020ccc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020ccc:	83 ec 1c             	sub    esp,0x1c
c0020ccf:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020cd6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020cdb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020cdf:	8b 04 85 40 25 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdac0]
c0020ce6:	83 f8 ff             	cmp    eax,0xffffffff
c0020ce9:	75 34                	jne    c0020d1f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020ceb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020cef:	88 c2                	mov    dl,al
c0020cf1:	a1 20 25 03 c0       	mov    eax,ds:0xc0032520
c0020cf6:	01 d0                	add    eax,edx
c0020cf8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020cfc:	8b 15 20 25 03 c0    	mov    edx,DWORD PTR ds:0xc0032520
c0020d02:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020d06:	89 14 85 40 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdac0],edx
c0020d0d:	a1 20 25 03 c0       	mov    eax,ds:0xc0032520
c0020d12:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020d16:	89 14 85 c0 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcda40],edx
c0020d1d:	eb 17                	jmp    c0020d36 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020d1f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020d23:	88 c2                	mov    dl,al
c0020d25:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020d29:	8b 04 85 40 25 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdac0]
c0020d30:	01 d0                	add    eax,edx
c0020d32:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020d36:	83 ec 04             	sub    esp,0x4
c0020d39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020d3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020d41:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020d45:	50                   	push   eax
c0020d46:	e8 ce 5f fe ff       	call   c0006d19 <f_getlabel>
c0020d4b:	83 c4 10             	add    esp,0x10
c0020d4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d52:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020d57:	75 07                	jne    c0020d60 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020d59:	b8 00 00 00 00       	mov    eax,0x0
c0020d5e:	eb 05                	jmp    c0020d65 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020d60:	b8 01 00 00 00       	mov    eax,0x1
c0020d65:	83 c4 1c             	add    esp,0x1c
c0020d68:	c3                   	ret    
c0020d69:	90                   	nop

c0020d6a <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020d6a:	57                   	push   edi
c0020d6b:	83 ec 58             	sub    esp,0x58
c0020d6e:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020d76:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020d7a:	b9 0f 00 00 00       	mov    ecx,0xf
c0020d7f:	b8 00 00 00 00       	mov    eax,0x0
c0020d84:	fc                   	cld    
c0020d85:	89 d7                	mov    edi,edx
c0020d87:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020d89:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020d8d:	8b 04 85 40 25 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdac0]
c0020d94:	83 f8 ff             	cmp    eax,0xffffffff
c0020d97:	75 34                	jne    c0020dcd <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020d99:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020d9d:	88 c2                	mov    dl,al
c0020d9f:	a1 20 25 03 c0       	mov    eax,ds:0xc0032520
c0020da4:	01 d0                	add    eax,edx
c0020da6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020daa:	8b 15 20 25 03 c0    	mov    edx,DWORD PTR ds:0xc0032520
c0020db0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020db4:	89 14 85 40 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdac0],edx
c0020dbb:	a1 20 25 03 c0       	mov    eax,ds:0xc0032520
c0020dc0:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020dc4:	89 14 85 c0 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcda40],edx
c0020dcb:	eb 17                	jmp    c0020de4 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020dcd:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020dd1:	88 c2                	mov    dl,al
c0020dd3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020dd7:	8b 04 85 40 25 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdac0]
c0020dde:	01 d0                	add    eax,edx
c0020de0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020de4:	83 ec 08             	sub    esp,0x8
c0020de7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020deb:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020def:	50                   	push   eax
c0020df0:	e8 73 fb fd ff       	call   c0000968 <strcat>
c0020df5:	83 c4 10             	add    esp,0x10
c0020df8:	83 ec 0c             	sub    esp,0xc
c0020dfb:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020dff:	50                   	push   eax
c0020e00:	e8 02 61 fe ff       	call   c0006f07 <f_setlabel>
c0020e05:	83 c4 10             	add    esp,0x10
c0020e08:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020e0c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020e11:	75 07                	jne    c0020e1a <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020e13:	b8 00 00 00 00       	mov    eax,0x0
c0020e18:	eb 05                	jmp    c0020e1f <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020e1a:	b8 01 00 00 00       	mov    eax,0x1
c0020e1f:	83 c4 58             	add    esp,0x58
c0020e22:	5f                   	pop    edi
c0020e23:	c3                   	ret    

c0020e24 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020e24:	83 ec 2c             	sub    esp,0x2c
c0020e27:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020e2f:	83 ec 08             	sub    esp,0x8
c0020e32:	68 d0 d2 02 c0       	push   0xc002d2d0
c0020e37:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020e3b:	e8 74 fa fd ff       	call   c00008b4 <strcmp>
c0020e40:	83 c4 10             	add    esp,0x10
c0020e43:	85 c0                	test   eax,eax
c0020e45:	0f 94 c0             	sete   al
c0020e48:	84 c0                	test   al,al
c0020e4a:	74 0d                	je     c0020e59 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020e4c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020e54:	e9 a6 00 00 00       	jmp    c0020eff <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020e59:	83 ec 08             	sub    esp,0x8
c0020e5c:	68 c2 d2 02 c0       	push   0xc002d2c2
c0020e61:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020e65:	e8 4a fa fd ff       	call   c00008b4 <strcmp>
c0020e6a:	83 c4 10             	add    esp,0x10
c0020e6d:	85 c0                	test   eax,eax
c0020e6f:	0f 94 c0             	sete   al
c0020e72:	84 c0                	test   al,al
c0020e74:	74 0a                	je     c0020e80 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020e76:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020e7e:	eb 7f                	jmp    c0020eff <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020e80:	83 ec 08             	sub    esp,0x8
c0020e83:	68 c8 d2 02 c0       	push   0xc002d2c8
c0020e88:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020e8c:	e8 23 fa fd ff       	call   c00008b4 <strcmp>
c0020e91:	83 c4 10             	add    esp,0x10
c0020e94:	85 c0                	test   eax,eax
c0020e96:	0f 94 c0             	sete   al
c0020e99:	84 c0                	test   al,al
c0020e9b:	74 0a                	je     c0020ea7 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020e9d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020ea5:	eb 58                	jmp    c0020eff <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020ea7:	83 ec 08             	sub    esp,0x8
c0020eaa:	68 0c 9e 02 c0       	push   0xc0029e0c
c0020eaf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020eb3:	e8 fc f9 fd ff       	call   c00008b4 <strcmp>
c0020eb8:	83 c4 10             	add    esp,0x10
c0020ebb:	85 c0                	test   eax,eax
c0020ebd:	0f 94 c0             	sete   al
c0020ec0:	84 c0                	test   al,al
c0020ec2:	74 0a                	je     c0020ece <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020ec4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020ecc:	eb 31                	jmp    c0020eff <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020ece:	83 ec 08             	sub    esp,0x8
c0020ed1:	68 ce d2 02 c0       	push   0xc002d2ce
c0020ed6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020eda:	e8 d5 f9 fd ff       	call   c00008b4 <strcmp>
c0020edf:	83 c4 10             	add    esp,0x10
c0020ee2:	85 c0                	test   eax,eax
c0020ee4:	0f 94 c0             	sete   al
c0020ee7:	84 c0                	test   al,al
c0020ee9:	74 0a                	je     c0020ef5 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020eeb:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020ef3:	eb 0a                	jmp    c0020eff <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020ef5:	b8 08 00 00 00       	mov    eax,0x8
c0020efa:	e9 04 01 00 00       	jmp    c0021003 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020eff:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020f06:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020f0b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f0f:	8b 04 85 40 25 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdac0]
c0020f16:	83 f8 ff             	cmp    eax,0xffffffff
c0020f19:	75 34                	jne    c0020f4f <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020f1b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020f1f:	88 c2                	mov    dl,al
c0020f21:	a1 20 25 03 c0       	mov    eax,ds:0xc0032520
c0020f26:	01 d0                	add    eax,edx
c0020f28:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020f2c:	8b 15 20 25 03 c0    	mov    edx,DWORD PTR ds:0xc0032520
c0020f32:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f36:	89 14 85 40 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdac0],edx
c0020f3d:	a1 20 25 03 c0       	mov    eax,ds:0xc0032520
c0020f42:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020f46:	89 14 85 c0 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcda40],edx
c0020f4d:	eb 17                	jmp    c0020f66 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020f4f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020f53:	88 c2                	mov    dl,al
c0020f55:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f59:	8b 04 85 40 25 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdac0]
c0020f60:	01 d0                	add    eax,edx
c0020f62:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020f6a:	88 04 24             	mov    BYTE PTR [esp],al
c0020f6d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020f71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020f75:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020f7d:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020f82:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020f8a:	83 ec 0c             	sub    esp,0xc
c0020f8d:	68 00 20 00 00       	push   0x2000
c0020f92:	e8 97 e9 fe ff       	call   c000f92e <malloc>
c0020f97:	83 c4 10             	add    esp,0x10
c0020f9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020f9e:	68 00 20 00 00       	push   0x2000
c0020fa3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020fa7:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020fab:	50                   	push   eax
c0020fac:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020fb0:	50                   	push   eax
c0020fb1:	e8 9c 63 fe ff       	call   c0007352 <f_mkfs>
c0020fb6:	83 c4 10             	add    esp,0x10
c0020fb9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020fbd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020fc2:	75 07                	jne    c0020fcb <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020fc4:	b8 00 00 00 00       	mov    eax,0x0
c0020fc9:	eb 38                	jmp    c0021003 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020fcb:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020fd0:	75 17                	jne    c0020fe9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020fd2:	83 ec 0c             	sub    esp,0xc
c0020fd5:	68 0c d3 02 c0       	push   0xc002d30c
c0020fda:	e8 ee 1e ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0020fdf:	83 c4 10             	add    esp,0x10
c0020fe2:	b8 09 00 00 00       	mov    eax,0x9
c0020fe7:	eb 1a                	jmp    c0021003 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020fe9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020fed:	83 ec 08             	sub    esp,0x8
c0020ff0:	50                   	push   eax
c0020ff1:	68 d4 d2 02 c0       	push   0xc002d2d4
c0020ff6:	e8 d2 1e ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0020ffb:	83 c4 10             	add    esp,0x10
c0020ffe:	b8 01 00 00 00       	mov    eax,0x1
c0021003:	83 c4 2c             	add    esp,0x2c
c0021006:	c3                   	ret    
c0021007:	90                   	nop

c0021008 <FAT::tryMount(LogicalDisk*, int)>:
c0021008:	81 ec 6c 03 00 00    	sub    esp,0x36c
c002100e:	a1 20 25 03 c0       	mov    eax,ds:0xc0032520
c0021013:	83 f8 14             	cmp    eax,0x14
c0021016:	75 17                	jne    c002102f <FAT::tryMount(LogicalDisk*, int)+0x27>
c0021018:	83 ec 0c             	sub    esp,0xc
c002101b:	68 e6 d2 02 c0       	push   0xc002d2e6
c0021020:	e8 6b 98 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c0021025:	83 c4 10             	add    esp,0x10
c0021028:	b0 00                	mov    al,0x0
c002102a:	e9 d7 01 00 00       	jmp    c0021206 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002102f:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0021036:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002103c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021042:	3d 00 02 00 00       	cmp    eax,0x200
c0021047:	74 07                	je     c0021050 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0021049:	b0 00                	mov    al,0x0
c002104b:	e9 b6 01 00 00       	jmp    c0021206 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021050:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0021058:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002105f:	8b 04 85 40 25 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdac0]
c0021066:	83 f8 ff             	cmp    eax,0xffffffff
c0021069:	74 07                	je     c0021072 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c002106b:	b0 01                	mov    al,0x1
c002106d:	e9 94 01 00 00       	jmp    c0021206 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021072:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c002107c:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0021084:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c002108b:	88 c2                	mov    dl,al
c002108d:	a1 20 25 03 c0       	mov    eax,ds:0xc0032520
c0021092:	01 d0                	add    eax,edx
c0021094:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c002109b:	8b 15 20 25 03 c0    	mov    edx,DWORD PTR ds:0xc0032520
c00210a1:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00210a8:	89 14 85 40 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdac0],edx
c00210af:	a1 20 25 03 c0       	mov    eax,ds:0xc0032520
c00210b4:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00210bb:	89 14 85 c0 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcda40],edx
c00210c2:	83 ec 0c             	sub    esp,0xc
c00210c5:	68 54 02 00 00       	push   0x254
c00210ca:	e8 5f e8 fe ff       	call   c000f92e <malloc>
c00210cf:	83 c4 10             	add    esp,0x10
c00210d2:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00210d9:	83 ec 04             	sub    esp,0x4
c00210dc:	6a 00                	push   0x0
c00210de:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00210e5:	50                   	push   eax
c00210e6:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00210ed:	e8 1e 3e fe ff       	call   c0004f10 <f_mount>
c00210f2:	83 c4 10             	add    esp,0x10
c00210f5:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00210fc:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0021104:	74 19                	je     c002111f <FAT::tryMount(LogicalDisk*, int)+0x117>
c0021106:	83 ec 0c             	sub    esp,0xc
c0021109:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0021110:	e8 39 e8 fe ff       	call   c000f94e <rfree>
c0021115:	83 c4 10             	add    esp,0x10
c0021118:	b0 00                	mov    al,0x0
c002111a:	e9 e7 00 00 00       	jmp    c0021206 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002111f:	83 ec 04             	sub    esp,0x4
c0021122:	68 00 01 00 00       	push   0x100
c0021127:	6a 00                	push   0x0
c0021129:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0021130:	50                   	push   eax
c0021131:	e8 36 f6 fd ff       	call   c000076c <memset>
c0021136:	83 c4 10             	add    esp,0x10
c0021139:	83 ec 08             	sub    esp,0x8
c002113c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0021143:	50                   	push   eax
c0021144:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002114b:	50                   	push   eax
c002114c:	e8 17 f8 fd ff       	call   c0000968 <strcat>
c0021151:	83 c4 10             	add    esp,0x10
c0021154:	83 ec 08             	sub    esp,0x8
c0021157:	68 f4 d2 02 c0       	push   0xc002d2f4
c002115c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0021163:	50                   	push   eax
c0021164:	e8 ff f7 fd ff       	call   c0000968 <strcat>
c0021169:	83 c4 10             	add    esp,0x10
c002116c:	83 ec 04             	sub    esp,0x4
c002116f:	6a 01                	push   0x1
c0021171:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0021178:	50                   	push   eax
c0021179:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002117d:	50                   	push   eax
c002117e:	e8 ef 3d fe ff       	call   c0004f72 <f_open>
c0021183:	83 c4 10             	add    esp,0x10
c0021186:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002118d:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0021194:	85 c0                	test   eax,eax
c0021196:	74 0a                	je     c00211a2 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0021198:	78 2d                	js     c00211c7 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002119a:	83 e8 04             	sub    eax,0x4
c002119d:	83 f8 01             	cmp    eax,0x1
c00211a0:	77 25                	ja     c00211c7 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00211a2:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00211aa:	83 ec 0c             	sub    esp,0xc
c00211ad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00211b1:	50                   	push   eax
c00211b2:	e8 0d 49 fe ff       	call   c0005ac4 <f_close>
c00211b7:	83 c4 10             	add    esp,0x10
c00211ba:	90                   	nop
c00211bb:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00211c3:	74 3a                	je     c00211ff <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00211c5:	eb 2d                	jmp    c00211f4 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00211c7:	83 ec 0c             	sub    esp,0xc
c00211ca:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00211d1:	e8 78 e7 fe ff       	call   c000f94e <rfree>
c00211d6:	83 c4 10             	add    esp,0x10
c00211d9:	83 ec 04             	sub    esp,0x4
c00211dc:	6a 00                	push   0x0
c00211de:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00211e5:	50                   	push   eax
c00211e6:	6a 00                	push   0x0
c00211e8:	e8 23 3d fe ff       	call   c0004f10 <f_mount>
c00211ed:	83 c4 10             	add    esp,0x10
c00211f0:	b0 00                	mov    al,0x0
c00211f2:	eb 12                	jmp    c0021206 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00211f4:	a1 20 25 03 c0       	mov    eax,ds:0xc0032520
c00211f9:	40                   	inc    eax
c00211fa:	a3 20 25 03 c0       	mov    ds:0xc0032520,eax
c00211ff:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0021206:	81 c4 6c 03 00 00    	add    esp,0x36c
c002120c:	c3                   	ret    
c002120d:	90                   	nop

c002120e <FAT::getFileFirstSector(char const*)>:
c002120e:	53                   	push   ebx
c002120f:	83 ec 28             	sub    esp,0x28
c0021212:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c002121a:	83 ec 0c             	sub    esp,0xc
c002121d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021221:	e8 08 e7 fe ff       	call   c000f92e <malloc>
c0021226:	83 c4 10             	add    esp,0x10
c0021229:	89 c3                	mov    ebx,eax
c002122b:	a1 50 24 03 c0       	mov    eax,ds:0xc0032450
c0021230:	83 ec 04             	sub    esp,0x4
c0021233:	50                   	push   eax
c0021234:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021238:	53                   	push   ebx
c0021239:	e8 ee 21 ff ff       	call   c001342c <File::File(char const*, Process*)>
c002123e:	83 c4 10             	add    esp,0x10
c0021241:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0021245:	83 ec 08             	sub    esp,0x8
c0021248:	6a 01                	push   0x1
c002124a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002124e:	e8 3d 22 ff ff       	call   c0013490 <File::open(FileOpenMode)>
c0021253:	83 c4 10             	add    esp,0x10
c0021256:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002125a:	8b 00                	mov    eax,DWORD PTR [eax]
c002125c:	83 c0 0c             	add    eax,0xc
c002125f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021261:	83 ec 0c             	sub    esp,0xc
c0021264:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021268:	52                   	push   edx
c0021269:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002126d:	52                   	push   edx
c002126e:	6a 00                	push   0x0
c0021270:	6a 04                	push   0x4
c0021272:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021276:	ff d0                	call   eax
c0021278:	83 c4 20             	add    esp,0x20
c002127b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002127f:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0021285:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021289:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002128d:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0021290:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0021293:	83 ec 04             	sub    esp,0x4
c0021296:	52                   	push   edx
c0021297:	50                   	push   eax
c0021298:	68 ff d2 02 c0       	push   0xc002d2ff
c002129d:	e8 2b 1c ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00212a2:	83 c4 10             	add    esp,0x10
c00212a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00212a9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00212ac:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00212af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00212b3:	83 ec 0c             	sub    esp,0xc
c00212b6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00212ba:	e8 2f 22 ff ff       	call   c00134ee <File::close()>
c00212bf:	83 c4 10             	add    esp,0x10
c00212c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00212c6:	ba 00 00 00 00       	mov    edx,0x0
c00212cb:	83 c4 28             	add    esp,0x28
c00212ce:	5b                   	pop    ebx
c00212cf:	c3                   	ret    

c00212d0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00212d0:	57                   	push   edi
c00212d1:	56                   	push   esi
c00212d2:	81 ec 44 02 00 00    	sub    esp,0x244
c00212d8:	83 bc 24 54 02 00 00 00 	cmp    DWORD PTR [esp+0x254],0x0
c00212e0:	74 0a                	je     c00212ec <FAT::readDir(void*, unsigned long, void*, int*)+0x1c>
c00212e2:	83 bc 24 60 02 00 00 00 	cmp    DWORD PTR [esp+0x260],0x0
c00212ea:	75 0a                	jne    c00212f6 <FAT::readDir(void*, unsigned long, void*, int*)+0x26>
c00212ec:	b8 04 00 00 00       	mov    eax,0x4
c00212f1:	e9 0c 01 00 00       	jmp    c0021402 <FAT::readDir(void*, unsigned long, void*, int*)+0x132>
c00212f6:	83 ec 08             	sub    esp,0x8
c00212f9:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021300:	50                   	push   eax
c0021301:	ff b4 24 60 02 00 00 	push   DWORD PTR [esp+0x260]
c0021308:	e8 c1 4d fe ff       	call   c00060ce <f_readdir>
c002130d:	83 c4 10             	add    esp,0x10
c0021310:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0021317:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c002131d:	83 ec 0c             	sub    esp,0xc
c0021320:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0021327:	83 c0 1a             	add    eax,0x1a
c002132a:	50                   	push   eax
c002132b:	e8 58 f4 fd ff       	call   c0000788 <strlen>
c0021330:	83 c4 10             	add    esp,0x10
c0021333:	ba 00 00 00 00       	mov    edx,0x0
c0021338:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002133c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021340:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0021347:	0f b6 c0             	movzx  eax,al
c002134a:	83 e0 10             	and    eax,0x10
c002134d:	74 07                	je     c0021356 <FAT::readDir(void*, unsigned long, void*, int*)+0x86>
c002134f:	b8 02 00 00 00       	mov    eax,0x2
c0021354:	eb 05                	jmp    c002135b <FAT::readDir(void*, unsigned long, void*, int*)+0x8b>
c0021356:	b8 01 00 00 00       	mov    eax,0x1
c002135b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002135f:	83 ec 08             	sub    esp,0x8
c0021362:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021369:	83 c0 1a             	add    eax,0x1a
c002136c:	50                   	push   eax
c002136d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021371:	83 c0 10             	add    eax,0x10
c0021374:	50                   	push   eax
c0021375:	e8 ae f4 fd ff       	call   c0000828 <strcpy>
c002137a:	83 c4 10             	add    esp,0x10
c002137d:	8b 84 24 5c 02 00 00 	mov    eax,DWORD PTR [esp+0x25c]
c0021384:	89 84 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],eax
c002138b:	89 e0                	mov    eax,esp
c002138d:	89 84 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],eax
c0021394:	8b 84 24 58 02 00 00 	mov    eax,DWORD PTR [esp+0x258]
c002139b:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00213a2:	8b 84 24 38 02 00 00 	mov    eax,DWORD PTR [esp+0x238]
c00213a9:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c00213b0:	8b 84 24 34 02 00 00 	mov    eax,DWORD PTR [esp+0x234]
c00213b7:	8b 94 24 38 02 00 00 	mov    edx,DWORD PTR [esp+0x238]
c00213be:	8b 8c 24 30 02 00 00 	mov    ecx,DWORD PTR [esp+0x230]
c00213c5:	89 c6                	mov    esi,eax
c00213c7:	89 d7                	mov    edi,edx
c00213c9:	fc                   	cld    
c00213ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00213cc:	8b 84 24 60 02 00 00 	mov    eax,DWORD PTR [esp+0x260]
c00213d3:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00213d9:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c00213e0:	84 c0                	test   al,al
c00213e2:	75 07                	jne    c00213eb <FAT::readDir(void*, unsigned long, void*, int*)+0x11b>
c00213e4:	b8 07 00 00 00       	mov    eax,0x7
c00213e9:	eb 17                	jmp    c0021402 <FAT::readDir(void*, unsigned long, void*, int*)+0x132>
c00213eb:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00213f2:	85 c0                	test   eax,eax
c00213f4:	75 07                	jne    c00213fd <FAT::readDir(void*, unsigned long, void*, int*)+0x12d>
c00213f6:	b8 00 00 00 00       	mov    eax,0x0
c00213fb:	eb 05                	jmp    c0021402 <FAT::readDir(void*, unsigned long, void*, int*)+0x132>
c00213fd:	b8 01 00 00 00       	mov    eax,0x1
c0021402:	81 c4 44 02 00 00    	add    esp,0x244
c0021408:	5e                   	pop    esi
c0021409:	5f                   	pop    edi
c002140a:	c3                   	ret    
c002140b:	90                   	nop

c002140c <FAT::read(void*, unsigned long, void*, int*)>:
c002140c:	83 ec 1c             	sub    esp,0x1c
c002140f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021414:	74 07                	je     c002141d <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0021416:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002141b:	75 07                	jne    c0021424 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c002141d:	b8 04 00 00 00       	mov    eax,0x4
c0021422:	eb 3d                	jmp    c0021461 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0021424:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021428:	50                   	push   eax
c0021429:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002142d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0021431:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021435:	e8 74 3f fe ff       	call   c00053ae <f_read>
c002143a:	83 c4 10             	add    esp,0x10
c002143d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021441:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021445:	89 c2                	mov    edx,eax
c0021447:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002144b:	89 10                	mov    DWORD PTR [eax],edx
c002144d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021451:	85 c0                	test   eax,eax
c0021453:	75 07                	jne    c002145c <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0021455:	b8 00 00 00 00       	mov    eax,0x0
c002145a:	eb 05                	jmp    c0021461 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c002145c:	b8 01 00 00 00       	mov    eax,0x1
c0021461:	83 c4 1c             	add    esp,0x1c
c0021464:	c3                   	ret    
c0021465:	90                   	nop

c0021466 <FAT::write(void*, unsigned long, void*, int*)>:
c0021466:	83 ec 1c             	sub    esp,0x1c
c0021469:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002146e:	74 07                	je     c0021477 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0021470:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0021475:	75 07                	jne    c002147e <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0021477:	b8 04 00 00 00       	mov    eax,0x4
c002147c:	eb 3d                	jmp    c00214bb <FAT::write(void*, unsigned long, void*, int*)+0x55>
c002147e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021482:	50                   	push   eax
c0021483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021487:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002148b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002148f:	e8 9a 41 fe ff       	call   c000562e <f_write>
c0021494:	83 c4 10             	add    esp,0x10
c0021497:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002149b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002149f:	89 c2                	mov    edx,eax
c00214a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00214a5:	89 10                	mov    DWORD PTR [eax],edx
c00214a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00214ab:	85 c0                	test   eax,eax
c00214ad:	75 07                	jne    c00214b6 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00214af:	b8 00 00 00 00       	mov    eax,0x0
c00214b4:	eb 05                	jmp    c00214bb <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00214b6:	b8 01 00 00 00       	mov    eax,0x1
c00214bb:	83 c4 1c             	add    esp,0x1c
c00214be:	c3                   	ret    
c00214bf:	90                   	nop

c00214c0 <FAT::close(void*)>:
c00214c0:	83 ec 1c             	sub    esp,0x1c
c00214c3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00214c8:	75 07                	jne    c00214d1 <FAT::close(void*)+0x11>
c00214ca:	b8 04 00 00 00       	mov    eax,0x4
c00214cf:	eb 36                	jmp    c0021507 <FAT::close(void*)+0x47>
c00214d1:	83 ec 0c             	sub    esp,0xc
c00214d4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00214d8:	e8 e7 45 fe ff       	call   c0005ac4 <f_close>
c00214dd:	83 c4 10             	add    esp,0x10
c00214e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00214e4:	83 ec 0c             	sub    esp,0xc
c00214e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00214eb:	e8 4e e4 fe ff       	call   c000f93e <free>
c00214f0:	83 c4 10             	add    esp,0x10
c00214f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00214f7:	85 c0                	test   eax,eax
c00214f9:	75 07                	jne    c0021502 <FAT::close(void*)+0x42>
c00214fb:	b8 00 00 00 00       	mov    eax,0x0
c0021500:	eb 05                	jmp    c0021507 <FAT::close(void*)+0x47>
c0021502:	b8 01 00 00 00       	mov    eax,0x1
c0021507:	83 c4 1c             	add    esp,0x1c
c002150a:	c3                   	ret    
c002150b:	90                   	nop

c002150c <FAT::closeDir(void*)>:
c002150c:	83 ec 1c             	sub    esp,0x1c
c002150f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021514:	75 07                	jne    c002151d <FAT::closeDir(void*)+0x11>
c0021516:	b8 04 00 00 00       	mov    eax,0x4
c002151b:	eb 36                	jmp    c0021553 <FAT::closeDir(void*)+0x47>
c002151d:	83 ec 0c             	sub    esp,0xc
c0021520:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021524:	e8 83 4b fe ff       	call   c00060ac <f_closedir>
c0021529:	83 c4 10             	add    esp,0x10
c002152c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021530:	83 ec 0c             	sub    esp,0xc
c0021533:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021537:	e8 02 e4 fe ff       	call   c000f93e <free>
c002153c:	83 c4 10             	add    esp,0x10
c002153f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021543:	85 c0                	test   eax,eax
c0021545:	75 07                	jne    c002154e <FAT::closeDir(void*)+0x42>
c0021547:	b8 00 00 00 00       	mov    eax,0x0
c002154c:	eb 05                	jmp    c0021553 <FAT::closeDir(void*)+0x47>
c002154e:	b8 01 00 00 00       	mov    eax,0x1
c0021553:	83 c4 1c             	add    esp,0x1c
c0021556:	c3                   	ret    
c0021557:	90                   	nop

c0021558 <FAT::seek(void*, unsigned long long)>:
c0021558:	83 ec 2c             	sub    esp,0x2c
c002155b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002155f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021563:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021567:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002156b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0021570:	75 07                	jne    c0021579 <FAT::seek(void*, unsigned long long)+0x21>
c0021572:	b8 04 00 00 00       	mov    eax,0x4
c0021577:	eb 2f                	jmp    c00215a8 <FAT::seek(void*, unsigned long long)+0x50>
c0021579:	83 ec 04             	sub    esp,0x4
c002157c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021580:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021584:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0021588:	e8 66 45 fe ff       	call   c0005af3 <f_lseek>
c002158d:	83 c4 10             	add    esp,0x10
c0021590:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021594:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021598:	85 c0                	test   eax,eax
c002159a:	75 07                	jne    c00215a3 <FAT::seek(void*, unsigned long long)+0x4b>
c002159c:	b8 00 00 00 00       	mov    eax,0x0
c00215a1:	eb 05                	jmp    c00215a8 <FAT::seek(void*, unsigned long long)+0x50>
c00215a3:	b8 01 00 00 00       	mov    eax,0x1
c00215a8:	83 c4 2c             	add    esp,0x2c
c00215ab:	c3                   	ret    

c00215ac <fatWrapperReadDisk>:
c00215ac:	83 ec 1c             	sub    esp,0x1c
c00215af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00215b3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00215b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00215bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00215be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00215c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00215c6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00215cb:	8b 04 85 00 f5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b00]
c00215d2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00215d6:	83 ec 0c             	sub    esp,0xc
c00215d9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00215dd:	52                   	push   edx
c00215de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00215e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00215e6:	50                   	push   eax
c00215e7:	e8 5a 52 ff ff       	call   c0016846 <LogicalDisk::read(unsigned long long, int, void*)>
c00215ec:	83 c4 20             	add    esp,0x20
c00215ef:	83 c4 1c             	add    esp,0x1c
c00215f2:	c3                   	ret    

c00215f3 <fatWrapperWriteDisk>:
c00215f3:	83 ec 1c             	sub    esp,0x1c
c00215f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00215fa:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00215fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021602:	89 04 24             	mov    DWORD PTR [esp],eax
c0021605:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021609:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002160d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021612:	8b 04 85 00 f5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b00]
c0021619:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002161d:	83 ec 0c             	sub    esp,0xc
c0021620:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021624:	52                   	push   edx
c0021625:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021629:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002162d:	50                   	push   eax
c002162e:	e8 7f 52 ff ff       	call   c00168b2 <LogicalDisk::write(unsigned long long, int, void*)>
c0021633:	83 c4 20             	add    esp,0x20
c0021636:	83 c4 1c             	add    esp,0x1c
c0021639:	c3                   	ret    

c002163a <fatWrapperIoctl>:
c002163a:	53                   	push   ebx
c002163b:	83 ec 28             	sub    esp,0x28
c002163e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021642:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021646:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002164a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002164e:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0021653:	75 31                	jne    c0021686 <fatWrapperIoctl+0x4c>
c0021655:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021659:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002165d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021662:	8b 04 85 00 f5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b00]
c0021669:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002166f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021675:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021679:	66 89 02             	mov    WORD PTR [edx],ax
c002167c:	b8 00 00 00 00       	mov    eax,0x0
c0021681:	e9 b2 00 00 00       	jmp    c0021738 <fatWrapperIoctl+0xfe>
c0021686:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c002168b:	75 6a                	jne    c00216f7 <fatWrapperIoctl+0xbd>
c002168d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021691:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021695:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002169a:	8b 04 85 00 f5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b00]
c00216a1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00216a7:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00216ad:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00216b3:	89 c8                	mov    eax,ecx
c00216b5:	89 da                	mov    edx,ebx
c00216b7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00216bb:	c1 e0 0a             	shl    eax,0xa
c00216be:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00216c3:	8b 0c 8d 00 f5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b00]
c00216ca:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00216d0:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00216d6:	89 cb                	mov    ebx,ecx
c00216d8:	c1 fb 1f             	sar    ebx,0x1f
c00216db:	53                   	push   ebx
c00216dc:	51                   	push   ecx
c00216dd:	52                   	push   edx
c00216de:	50                   	push   eax
c00216df:	e8 80 5b 00 00       	call   c0027264 <__udivdi3>
c00216e4:	83 c4 10             	add    esp,0x10
c00216e7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00216eb:	89 01                	mov    DWORD PTR [ecx],eax
c00216ed:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00216f0:	b8 00 00 00 00       	mov    eax,0x0
c00216f5:	eb 41                	jmp    c0021738 <fatWrapperIoctl+0xfe>
c00216f7:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00216fc:	75 07                	jne    c0021705 <fatWrapperIoctl+0xcb>
c00216fe:	b8 00 00 00 00       	mov    eax,0x0
c0021703:	eb 33                	jmp    c0021738 <fatWrapperIoctl+0xfe>
c0021705:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c002170a:	75 19                	jne    c0021725 <fatWrapperIoctl+0xeb>
c002170c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021710:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021714:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021718:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002171e:	b8 00 00 00 00       	mov    eax,0x0
c0021723:	eb 13                	jmp    c0021738 <fatWrapperIoctl+0xfe>
c0021725:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c002172a:	75 07                	jne    c0021733 <fatWrapperIoctl+0xf9>
c002172c:	b8 00 00 00 00       	mov    eax,0x0
c0021731:	eb 05                	jmp    c0021738 <fatWrapperIoctl+0xfe>
c0021733:	b8 04 00 00 00       	mov    eax,0x4
c0021738:	83 c4 28             	add    esp,0x28
c002173b:	5b                   	pop    ebx
c002173c:	c3                   	ret    
c002173d:	90                   	nop

c002173e <FAT::FAT()>:
c002173e:	83 ec 1c             	sub    esp,0x1c
c0021741:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021745:	83 ec 0c             	sub    esp,0xc
c0021748:	50                   	push   eax
c0021749:	e8 8a 1a ff ff       	call   c00131d8 <Filesystem::Filesystem()>
c002174e:	83 c4 10             	add    esp,0x10
c0021751:	ba 3c d3 02 c0       	mov    edx,0xc002d33c
c0021756:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002175a:	89 10                	mov    DWORD PTR [eax],edx
c002175c:	c7 05 20 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032520,0x0
c0021766:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002176e:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0021773:	7f 15                	jg     c002178a <FAT::FAT()+0x4c>
c0021775:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021779:	c7 04 85 40 25 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcdac0],0xffffffff
c0021784:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021788:	eb e4                	jmp    c002176e <FAT::FAT()+0x30>
c002178a:	90                   	nop
c002178b:	83 c4 1c             	add    esp,0x1c
c002178e:	c3                   	ret    
c002178f:	90                   	nop

c0021790 <FAT::fixFilepath(char*)>:
c0021790:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021794:	8a 00                	mov    al,BYTE PTR [eax]
c0021796:	3c 40                	cmp    al,0x40
c0021798:	7e 2c                	jle    c00217c6 <FAT::fixFilepath(char*)+0x36>
c002179a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002179e:	8a 00                	mov    al,BYTE PTR [eax]
c00217a0:	83 e8 41             	sub    eax,0x41
c00217a3:	88 c2                	mov    dl,al
c00217a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00217a9:	88 10                	mov    BYTE PTR [eax],dl
c00217ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00217af:	8a 00                	mov    al,BYTE PTR [eax]
c00217b1:	0f be c0             	movsx  eax,al
c00217b4:	8b 04 85 40 25 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdac0]
c00217bb:	83 c0 30             	add    eax,0x30
c00217be:	88 c2                	mov    dl,al
c00217c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00217c4:	88 10                	mov    BYTE PTR [eax],dl
c00217c6:	90                   	nop
c00217c7:	c3                   	ret    

c00217c8 <FAT::open(char const*, void**, FileOpenMode)>:
c00217c8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00217ce:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00217d6:	74 0a                	je     c00217e2 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00217d8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00217e0:	75 0a                	jne    c00217ec <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00217e2:	b8 04 00 00 00       	mov    eax,0x4
c00217e7:	e9 fd 00 00 00       	jmp    c00218e9 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00217ec:	83 ec 08             	sub    esp,0x8
c00217ef:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00217f6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00217fa:	50                   	push   eax
c00217fb:	e8 28 f0 fd ff       	call   c0000828 <strcpy>
c0021800:	83 c4 10             	add    esp,0x10
c0021803:	83 ec 08             	sub    esp,0x8
c0021806:	8d 44 24 10          	lea    eax,[esp+0x10]
c002180a:	50                   	push   eax
c002180b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021812:	e8 79 ff ff ff       	call   c0021790 <FAT::fixFilepath(char*)>
c0021817:	83 c4 10             	add    esp,0x10
c002181a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021822:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021829:	83 e0 01             	and    eax,0x1
c002182c:	74 08                	je     c0021836 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c002182e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021836:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002183d:	83 e0 04             	and    eax,0x4
c0021840:	74 10                	je     c0021852 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021842:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c002184a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021852:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021859:	83 e0 02             	and    eax,0x2
c002185c:	74 08                	je     c0021866 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c002185e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021866:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002186d:	83 e0 08             	and    eax,0x8
c0021870:	74 08                	je     c002187a <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0021872:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c002187a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021881:	83 e0 10             	and    eax,0x10
c0021884:	74 08                	je     c002188e <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021886:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c002188e:	83 ec 0c             	sub    esp,0xc
c0021891:	68 50 02 00 00       	push   0x250
c0021896:	e8 93 e0 fe ff       	call   c000f92e <malloc>
c002189b:	83 c4 10             	add    esp,0x10
c002189e:	89 c2                	mov    edx,eax
c00218a0:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00218a7:	89 10                	mov    DWORD PTR [eax],edx
c00218a9:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00218b1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00218b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00218ba:	83 ec 04             	sub    esp,0x4
c00218bd:	52                   	push   edx
c00218be:	8d 54 24 10          	lea    edx,[esp+0x10]
c00218c2:	52                   	push   edx
c00218c3:	50                   	push   eax
c00218c4:	e8 a9 36 fe ff       	call   c0004f72 <f_open>
c00218c9:	83 c4 10             	add    esp,0x10
c00218cc:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00218d3:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00218db:	74 07                	je     c00218e4 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00218dd:	b8 01 00 00 00       	mov    eax,0x1
c00218e2:	eb 05                	jmp    c00218e9 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00218e4:	b8 00 00 00 00       	mov    eax,0x0
c00218e9:	81 c4 1c 01 00 00    	add    esp,0x11c
c00218ef:	c3                   	ret    

c00218f0 <FAT::openDir(char const*, void**)>:
c00218f0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00218f6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00218fe:	74 0a                	je     c002190a <FAT::openDir(char const*, void**)+0x1a>
c0021900:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021908:	75 07                	jne    c0021911 <FAT::openDir(char const*, void**)+0x21>
c002190a:	b8 04 00 00 00       	mov    eax,0x4
c002190f:	eb 7d                	jmp    c002198e <FAT::openDir(char const*, void**)+0x9e>
c0021911:	83 ec 08             	sub    esp,0x8
c0021914:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002191b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002191f:	50                   	push   eax
c0021920:	e8 03 ef fd ff       	call   c0000828 <strcpy>
c0021925:	83 c4 10             	add    esp,0x10
c0021928:	83 ec 08             	sub    esp,0x8
c002192b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002192f:	50                   	push   eax
c0021930:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021937:	e8 54 fe ff ff       	call   c0021790 <FAT::fixFilepath(char*)>
c002193c:	83 c4 10             	add    esp,0x10
c002193f:	83 ec 0c             	sub    esp,0xc
c0021942:	6a 4c                	push   0x4c
c0021944:	e8 e5 df fe ff       	call   c000f92e <malloc>
c0021949:	83 c4 10             	add    esp,0x10
c002194c:	89 c2                	mov    edx,eax
c002194e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021955:	89 10                	mov    DWORD PTR [eax],edx
c0021957:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002195e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021960:	83 ec 08             	sub    esp,0x8
c0021963:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021967:	52                   	push   edx
c0021968:	50                   	push   eax
c0021969:	e8 3c 46 fe ff       	call   c0005faa <f_opendir>
c002196e:	83 c4 10             	add    esp,0x10
c0021971:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021978:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021980:	74 07                	je     c0021989 <FAT::openDir(char const*, void**)+0x99>
c0021982:	b8 01 00 00 00       	mov    eax,0x1
c0021987:	eb 05                	jmp    c002198e <FAT::openDir(char const*, void**)+0x9e>
c0021989:	b8 00 00 00 00       	mov    eax,0x0
c002198e:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021994:	c3                   	ret    
c0021995:	90                   	nop

c0021996 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021996:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002199c:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00219a4:	75 0a                	jne    c00219b0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00219a6:	b8 04 00 00 00       	mov    eax,0x4
c00219ab:	e9 c9 00 00 00       	jmp    c0021a79 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00219b0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00219b8:	75 0a                	jne    c00219c4 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00219ba:	b8 04 00 00 00       	mov    eax,0x4
c00219bf:	e9 b5 00 00 00       	jmp    c0021a79 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00219c4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00219cc:	75 0a                	jne    c00219d8 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00219ce:	b8 04 00 00 00       	mov    eax,0x4
c00219d3:	e9 a1 00 00 00       	jmp    c0021a79 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00219d8:	83 ec 08             	sub    esp,0x8
c00219db:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00219e2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00219e9:	50                   	push   eax
c00219ea:	e8 39 ee fd ff       	call   c0000828 <strcpy>
c00219ef:	83 c4 10             	add    esp,0x10
c00219f2:	83 ec 08             	sub    esp,0x8
c00219f5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00219fc:	50                   	push   eax
c00219fd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021a04:	e8 87 fd ff ff       	call   c0021790 <FAT::fixFilepath(char*)>
c0021a09:	83 c4 10             	add    esp,0x10
c0021a0c:	83 ec 08             	sub    esp,0x8
c0021a0f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021a13:	50                   	push   eax
c0021a14:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021a1b:	50                   	push   eax
c0021a1c:	e8 48 47 fe ff       	call   c0006169 <f_stat>
c0021a21:	83 c4 10             	add    esp,0x10
c0021a24:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021a2b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021a32:	85 c0                	test   eax,eax
c0021a34:	74 07                	je     c0021a3d <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021a36:	83 f8 04             	cmp    eax,0x4
c0021a39:	74 32                	je     c0021a6d <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021a3b:	eb 37                	jmp    c0021a74 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021a3d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021a41:	0f b6 c0             	movzx  eax,al
c0021a44:	83 e0 10             	and    eax,0x10
c0021a47:	0f 95 c2             	setne  dl
c0021a4a:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021a51:	88 10                	mov    BYTE PTR [eax],dl
c0021a53:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021a56:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021a5a:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021a61:	89 01                	mov    DWORD PTR [ecx],eax
c0021a63:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021a66:	b8 00 00 00 00       	mov    eax,0x0
c0021a6b:	eb 0c                	jmp    c0021a79 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021a6d:	b8 02 00 00 00       	mov    eax,0x2
c0021a72:	eb 05                	jmp    c0021a79 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021a74:	b8 01 00 00 00       	mov    eax,0x1
c0021a79:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021a7f:	c3                   	ret    

c0021a80 <FAT::unlink(char const*)>:
c0021a80:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021a86:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021a8e:	75 07                	jne    c0021a97 <FAT::unlink(char const*)+0x17>
c0021a90:	b8 04 00 00 00       	mov    eax,0x4
c0021a95:	eb 5c                	jmp    c0021af3 <FAT::unlink(char const*)+0x73>
c0021a97:	83 ec 08             	sub    esp,0x8
c0021a9a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021aa1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021aa5:	50                   	push   eax
c0021aa6:	e8 7d ed fd ff       	call   c0000828 <strcpy>
c0021aab:	83 c4 10             	add    esp,0x10
c0021aae:	83 ec 08             	sub    esp,0x8
c0021ab1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021ab5:	50                   	push   eax
c0021ab6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021abd:	e8 ce fc ff ff       	call   c0021790 <FAT::fixFilepath(char*)>
c0021ac2:	83 c4 10             	add    esp,0x10
c0021ac5:	83 ec 0c             	sub    esp,0xc
c0021ac8:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021acc:	50                   	push   eax
c0021acd:	e8 e9 49 fe ff       	call   c00064bb <f_unlink>
c0021ad2:	83 c4 10             	add    esp,0x10
c0021ad5:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021adc:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021ae3:	85 c0                	test   eax,eax
c0021ae5:	75 07                	jne    c0021aee <FAT::unlink(char const*)+0x6e>
c0021ae7:	b8 00 00 00 00       	mov    eax,0x0
c0021aec:	eb 05                	jmp    c0021af3 <FAT::unlink(char const*)+0x73>
c0021aee:	b8 01 00 00 00       	mov    eax,0x1
c0021af3:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021af9:	c3                   	ret    

c0021afa <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021afa:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021b00:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021b07:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021b0e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021b12:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021b16:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021b1e:	75 0a                	jne    c0021b2a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021b20:	b8 04 00 00 00       	mov    eax,0x4
c0021b25:	e9 1c 01 00 00       	jmp    c0021c46 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021b2a:	83 ec 08             	sub    esp,0x8
c0021b2d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021b34:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021b38:	50                   	push   eax
c0021b39:	e8 ea ec fd ff       	call   c0000828 <strcpy>
c0021b3e:	83 c4 10             	add    esp,0x10
c0021b41:	83 ec 08             	sub    esp,0x8
c0021b44:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021b48:	50                   	push   eax
c0021b49:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021b50:	e8 3b fc ff ff       	call   c0021790 <FAT::fixFilepath(char*)>
c0021b55:	83 c4 10             	add    esp,0x10
c0021b58:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021b60:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021b68:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021b6d:	83 e0 01             	and    eax,0x1
c0021b70:	74 08                	je     c0021b7a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021b72:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021b7a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021b7f:	83 e0 02             	and    eax,0x2
c0021b82:	74 08                	je     c0021b8c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021b84:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021b8c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021b91:	83 e0 04             	and    eax,0x4
c0021b94:	74 08                	je     c0021b9e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021b96:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021b9e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021ba3:	83 e0 08             	and    eax,0x8
c0021ba6:	74 08                	je     c0021bb0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021ba8:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021bb0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021bb5:	83 e0 01             	and    eax,0x1
c0021bb8:	74 08                	je     c0021bc2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021bba:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021bc2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021bc7:	83 e0 02             	and    eax,0x2
c0021bca:	74 08                	je     c0021bd4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021bcc:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021bd4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021bd9:	83 e0 04             	and    eax,0x4
c0021bdc:	74 08                	je     c0021be6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021bde:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021be6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021beb:	83 e0 08             	and    eax,0x8
c0021bee:	74 08                	je     c0021bf8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021bf0:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021bf8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021bff:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021c06:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021c0e:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021c16:	83 ec 04             	sub    esp,0x4
c0021c19:	52                   	push   edx
c0021c1a:	50                   	push   eax
c0021c1b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021c1f:	50                   	push   eax
c0021c20:	e8 38 4f fe ff       	call   c0006b5d <f_chmod>
c0021c25:	83 c4 10             	add    esp,0x10
c0021c28:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021c2f:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021c36:	85 c0                	test   eax,eax
c0021c38:	75 07                	jne    c0021c41 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021c3a:	b8 00 00 00 00       	mov    eax,0x0
c0021c3f:	eb 05                	jmp    c0021c46 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021c41:	b8 01 00 00 00       	mov    eax,0x1
c0021c46:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021c4c:	c3                   	ret    
c0021c4d:	90                   	nop

c0021c4e <FAT::rename(char const*, char const*)>:
c0021c4e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021c54:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021c5c:	74 0a                	je     c0021c68 <FAT::rename(char const*, char const*)+0x1a>
c0021c5e:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021c66:	75 0a                	jne    c0021c72 <FAT::rename(char const*, char const*)+0x24>
c0021c68:	b8 04 00 00 00       	mov    eax,0x4
c0021c6d:	e9 98 00 00 00       	jmp    c0021d0a <FAT::rename(char const*, char const*)+0xbc>
c0021c72:	83 ec 08             	sub    esp,0x8
c0021c75:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021c7c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021c83:	50                   	push   eax
c0021c84:	e8 9f eb fd ff       	call   c0000828 <strcpy>
c0021c89:	83 c4 10             	add    esp,0x10
c0021c8c:	83 ec 08             	sub    esp,0x8
c0021c8f:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021c96:	50                   	push   eax
c0021c97:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021c9e:	e8 ed fa ff ff       	call   c0021790 <FAT::fixFilepath(char*)>
c0021ca3:	83 c4 10             	add    esp,0x10
c0021ca6:	83 ec 08             	sub    esp,0x8
c0021ca9:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021cb0:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021cb4:	50                   	push   eax
c0021cb5:	e8 6e eb fd ff       	call   c0000828 <strcpy>
c0021cba:	83 c4 10             	add    esp,0x10
c0021cbd:	83 ec 08             	sub    esp,0x8
c0021cc0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021cc4:	50                   	push   eax
c0021cc5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021ccc:	e8 bf fa ff ff       	call   c0021790 <FAT::fixFilepath(char*)>
c0021cd1:	83 c4 10             	add    esp,0x10
c0021cd4:	83 ec 08             	sub    esp,0x8
c0021cd7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021cdb:	50                   	push   eax
c0021cdc:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021ce3:	50                   	push   eax
c0021ce4:	e8 81 4b fe ff       	call   c000686a <f_rename>
c0021ce9:	83 c4 10             	add    esp,0x10
c0021cec:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021cf3:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021cfa:	85 c0                	test   eax,eax
c0021cfc:	75 07                	jne    c0021d05 <FAT::rename(char const*, char const*)+0xb7>
c0021cfe:	b8 00 00 00 00       	mov    eax,0x0
c0021d03:	eb 05                	jmp    c0021d0a <FAT::rename(char const*, char const*)+0xbc>
c0021d05:	b8 01 00 00 00       	mov    eax,0x1
c0021d0a:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021d10:	c3                   	ret    
c0021d11:	90                   	nop

c0021d12 <FAT::mkdir(char const*)>:
c0021d12:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021d18:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021d20:	75 07                	jne    c0021d29 <FAT::mkdir(char const*)+0x17>
c0021d22:	b8 04 00 00 00       	mov    eax,0x4
c0021d27:	eb 5c                	jmp    c0021d85 <FAT::mkdir(char const*)+0x73>
c0021d29:	83 ec 08             	sub    esp,0x8
c0021d2c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021d33:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021d37:	50                   	push   eax
c0021d38:	e8 eb ea fd ff       	call   c0000828 <strcpy>
c0021d3d:	83 c4 10             	add    esp,0x10
c0021d40:	83 ec 08             	sub    esp,0x8
c0021d43:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021d47:	50                   	push   eax
c0021d48:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021d4f:	e8 3c fa ff ff       	call   c0021790 <FAT::fixFilepath(char*)>
c0021d54:	83 c4 10             	add    esp,0x10
c0021d57:	83 ec 0c             	sub    esp,0xc
c0021d5a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021d5e:	50                   	push   eax
c0021d5f:	e8 da 48 fe ff       	call   c000663e <f_mkdir>
c0021d64:	83 c4 10             	add    esp,0x10
c0021d67:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021d6e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021d75:	85 c0                	test   eax,eax
c0021d77:	75 07                	jne    c0021d80 <FAT::mkdir(char const*)+0x6e>
c0021d79:	b8 00 00 00 00       	mov    eax,0x0
c0021d7e:	eb 05                	jmp    c0021d85 <FAT::mkdir(char const*)+0x73>
c0021d80:	b8 01 00 00 00       	mov    eax,0x1
c0021d85:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021d8b:	c3                   	ret    

c0021d8c <FAT::exists(char const*)>:
c0021d8c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021d92:	83 ec 08             	sub    esp,0x8
c0021d95:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021d9c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021da0:	50                   	push   eax
c0021da1:	e8 82 ea fd ff       	call   c0000828 <strcpy>
c0021da6:	83 c4 10             	add    esp,0x10
c0021da9:	83 ec 08             	sub    esp,0x8
c0021dac:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021db0:	50                   	push   eax
c0021db1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021db8:	e8 d3 f9 ff ff       	call   c0021790 <FAT::fixFilepath(char*)>
c0021dbd:	83 c4 10             	add    esp,0x10
c0021dc0:	83 ec 08             	sub    esp,0x8
c0021dc3:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021dca:	50                   	push   eax
c0021dcb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021dcf:	50                   	push   eax
c0021dd0:	e8 94 43 fe ff       	call   c0006169 <f_stat>
c0021dd5:	83 c4 10             	add    esp,0x10
c0021dd8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021ddf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021de6:	85 c0                	test   eax,eax
c0021de8:	75 04                	jne    c0021dee <FAT::exists(char const*)+0x62>
c0021dea:	b0 01                	mov    al,0x1
c0021dec:	eb 02                	jmp    c0021df0 <FAT::exists(char const*)+0x64>
c0021dee:	b0 00                	mov    al,0x0
c0021df0:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021df6:	c3                   	ret    
c0021df7:	90                   	nop

c0021df8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021df8:	b8 08 00 00 00       	mov    eax,0x8
c0021dfd:	c3                   	ret    

c0021dfe <ISO9660::seek(void*, unsigned long long)>:
c0021dfe:	53                   	push   ebx
c0021dff:	b8 04 00 00 00       	mov    eax,0x4
c0021e04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021e08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021e0c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021e10:	85 d2                	test   edx,edx
c0021e12:	74 17                	je     c0021e2b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021e14:	89 c8                	mov    eax,ecx
c0021e16:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021e19:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021e1c:	b8 01 00 00 00       	mov    eax,0x1
c0021e21:	73 08                	jae    c0021e2b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021e23:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021e26:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021e29:	31 c0                	xor    eax,eax
c0021e2b:	5b                   	pop    ebx
c0021e2c:	c3                   	ret    
c0021e2d:	90                   	nop

c0021e2e <ISO9660::tell(void*, unsigned long long*)>:
c0021e2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021e36:	85 d2                	test   edx,edx
c0021e38:	74 12                	je     c0021e4c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021e3a:	85 c0                	test   eax,eax
c0021e3c:	74 0e                	je     c0021e4c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021e3e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021e41:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021e44:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021e47:	89 10                	mov    DWORD PTR [eax],edx
c0021e49:	31 c0                	xor    eax,eax
c0021e4b:	c3                   	ret    
c0021e4c:	b8 04 00 00 00       	mov    eax,0x4
c0021e51:	c3                   	ret    

c0021e52 <ISO9660::getName()>:
c0021e52:	b8 9c d3 02 c0       	mov    eax,0xc002d39c
c0021e57:	c3                   	ret    

c0021e58 <ISO9660::stat(void*, unsigned long long*)>:
c0021e58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021e5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021e60:	85 d2                	test   edx,edx
c0021e62:	74 12                	je     c0021e76 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021e64:	85 c0                	test   eax,eax
c0021e66:	74 0e                	je     c0021e76 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021e68:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021e6b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021e6e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021e71:	89 10                	mov    DWORD PTR [eax],edx
c0021e73:	31 c0                	xor    eax,eax
c0021e75:	c3                   	ret    
c0021e76:	b8 04 00 00 00       	mov    eax,0x4
c0021e7b:	c3                   	ret    

c0021e7c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021e7c:	b8 01 00 00 00       	mov    eax,0x1
c0021e81:	c3                   	ret    

c0021e82 <ISO9660::unlink(char const*)>:
c0021e82:	b8 01 00 00 00       	mov    eax,0x1
c0021e87:	c3                   	ret    

c0021e88 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021e88:	b8 01 00 00 00       	mov    eax,0x1
c0021e8d:	c3                   	ret    

c0021e8e <ISO9660::rename(char const*, char const*)>:
c0021e8e:	b8 01 00 00 00       	mov    eax,0x1
c0021e93:	c3                   	ret    

c0021e94 <ISO9660::mkdir(char const*)>:
c0021e94:	b8 01 00 00 00       	mov    eax,0x1
c0021e99:	c3                   	ret    

c0021e9a <ISO9660::close(void*)>:
c0021e9a:	83 ec 0c             	sub    esp,0xc
c0021e9d:	b8 04 00 00 00       	mov    eax,0x4
c0021ea2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021ea6:	85 d2                	test   edx,edx
c0021ea8:	74 0e                	je     c0021eb8 <ISO9660::close(void*)+0x1e>
c0021eaa:	83 ec 0c             	sub    esp,0xc
c0021ead:	52                   	push   edx
c0021eae:	e8 8b da fe ff       	call   c000f93e <free>
c0021eb3:	83 c4 10             	add    esp,0x10
c0021eb6:	31 c0                	xor    eax,eax
c0021eb8:	83 c4 0c             	add    esp,0xc
c0021ebb:	c3                   	ret    

c0021ebc <ISO9660::closeDir(void*)>:
c0021ebc:	83 ec 0c             	sub    esp,0xc
c0021ebf:	b8 04 00 00 00       	mov    eax,0x4
c0021ec4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021ec8:	85 d2                	test   edx,edx
c0021eca:	74 0e                	je     c0021eda <ISO9660::closeDir(void*)+0x1e>
c0021ecc:	83 ec 0c             	sub    esp,0xc
c0021ecf:	52                   	push   edx
c0021ed0:	e8 69 da fe ff       	call   c000f93e <free>
c0021ed5:	83 c4 10             	add    esp,0x10
c0021ed8:	31 c0                	xor    eax,eax
c0021eda:	83 c4 0c             	add    esp,0xc
c0021edd:	c3                   	ret    

c0021ede <ISO9660::~ISO9660()>:
c0021ede:	83 ec 0c             	sub    esp,0xc
c0021ee1:	ba 00 d4 02 c0       	mov    edx,0xc002d400
c0021ee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eea:	89 10                	mov    DWORD PTR [eax],edx
c0021eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ef0:	83 ec 0c             	sub    esp,0xc
c0021ef3:	50                   	push   eax
c0021ef4:	e8 03 13 ff ff       	call   c00131fc <Filesystem::~Filesystem()>
c0021ef9:	83 c4 10             	add    esp,0x10
c0021efc:	90                   	nop
c0021efd:	83 c4 0c             	add    esp,0xc
c0021f00:	c3                   	ret    
c0021f01:	90                   	nop

c0021f02 <ISO9660::~ISO9660()>:
c0021f02:	83 ec 0c             	sub    esp,0xc
c0021f05:	83 ec 0c             	sub    esp,0xc
c0021f08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f0c:	e8 cd ff ff ff       	call   c0021ede <ISO9660::~ISO9660()>
c0021f11:	83 c4 10             	add    esp,0x10
c0021f14:	83 ec 08             	sub    esp,0x8
c0021f17:	6a 08                	push   0x8
c0021f19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f1d:	e8 cb 0e ff ff       	call   c0012ded <operator delete(void*, unsigned long)>
c0021f22:	83 c4 10             	add    esp,0x10
c0021f25:	83 c4 0c             	add    esp,0xc
c0021f28:	c3                   	ret    

c0021f29 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021f29:	55                   	push   ebp
c0021f2a:	31 c9                	xor    ecx,ecx
c0021f2c:	57                   	push   edi
c0021f2d:	56                   	push   esi
c0021f2e:	53                   	push   ebx
c0021f2f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021f33:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021f37:	89 eb                	mov    ebx,ebp
c0021f39:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021f3d:	39 ce                	cmp    esi,ecx
c0021f3f:	7e 17                	jle    c0021f58 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021f41:	31 d2                	xor    edx,edx
c0021f43:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021f47:	7d 13                	jge    c0021f5c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021f49:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021f4d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021f50:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021f53:	75 0d                	jne    c0021f62 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021f55:	42                   	inc    edx
c0021f56:	eb eb                	jmp    c0021f43 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021f58:	31 c0                	xor    eax,eax
c0021f5a:	eb 0a                	jmp    c0021f66 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021f5c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021f60:	eb 04                	jmp    c0021f66 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021f62:	41                   	inc    ecx
c0021f63:	43                   	inc    ebx
c0021f64:	eb d7                	jmp    c0021f3d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021f66:	5b                   	pop    ebx
c0021f67:	5e                   	pop    esi
c0021f68:	5f                   	pop    edi
c0021f69:	5d                   	pop    ebp
c0021f6a:	c3                   	ret    

c0021f6b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021f6b:	57                   	push   edi
c0021f6c:	56                   	push   esi
c0021f6d:	53                   	push   ebx
c0021f6e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021f72:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021f76:	39 0d 20 26 03 c0    	cmp    DWORD PTR ds:0xc0032620,ecx
c0021f7c:	75 08                	jne    c0021f86 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0021f7e:	38 05 74 e4 02 c0    	cmp    BYTE PTR ds:0xc002e474,al
c0021f84:	74 2b                	je     c0021fb1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0021f86:	83 ec 0c             	sub    esp,0xc
c0021f89:	a2 74 e4 02 c0       	mov    ds:0xc002e474,al
c0021f8e:	68 40 26 03 c0       	push   0xc0032640
c0021f93:	0f be c0             	movsx  eax,al
c0021f96:	6a 01                	push   0x1
c0021f98:	89 0d 20 26 03 c0    	mov    DWORD PTR ds:0xc0032620,ecx
c0021f9e:	31 db                	xor    ebx,ebx
c0021fa0:	53                   	push   ebx
c0021fa1:	51                   	push   ecx
c0021fa2:	ff 34 85 fc f3 02 c0 	push   DWORD PTR [eax*4-0x3ffd0c04]
c0021fa9:	e8 98 48 ff ff       	call   c0016846 <LogicalDisk::read(unsigned long long, int, void*)>
c0021fae:	83 c4 20             	add    esp,0x20
c0021fb1:	be 40 26 03 c0       	mov    esi,0xc0032640
c0021fb6:	b9 00 08 00 00       	mov    ecx,0x800
c0021fbb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021fbf:	fc                   	cld    
c0021fc0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021fc2:	5b                   	pop    ebx
c0021fc3:	5e                   	pop    esi
c0021fc4:	5f                   	pop    edi
c0021fc5:	c3                   	ret    

c0021fc6 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021fc6:	81 ec 10 08 00 00    	sub    esp,0x810
c0021fcc:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021fd3:	83 c0 41             	add    eax,0x41
c0021fd6:	0f be c0             	movsx  eax,al
c0021fd9:	50                   	push   eax
c0021fda:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021fde:	50                   	push   eax
c0021fdf:	6a 10                	push   0x10
c0021fe1:	e8 85 ff ff ff       	call   c0021f6b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021fe6:	83 c4 10             	add    esp,0x10
c0021fe9:	31 c0                	xor    eax,eax
c0021feb:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021ff0:	75 1d                	jne    c002200f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021ff2:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021ff7:	75 16                	jne    c002200f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021ff9:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021ffe:	75 0f                	jne    c002200f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0022000:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0022005:	75 08                	jne    c002200f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0022007:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c002200c:	0f 94 c0             	sete   al
c002200f:	81 c4 0c 08 00 00    	add    esp,0x80c
c0022015:	c3                   	ret    

c0022016 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0022016:	55                   	push   ebp
c0022017:	57                   	push   edi
c0022018:	56                   	push   esi
c0022019:	53                   	push   ebx
c002201a:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0022020:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0022027:	85 ed                	test   ebp,ebp
c0022029:	0f 84 d6 01 00 00    	je     c0022205 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002202f:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0022037:	0f 84 c8 01 00 00    	je     c0022205 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002203d:	b8 01 00 00 00       	mov    eax,0x1
c0022042:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0022046:	0f 85 be 01 00 00    	jne    c002220a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c002204c:	31 d2                	xor    edx,edx
c002204e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0022055:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0022058:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c002205b:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c002205e:	89 04 24             	mov    DWORD PTR [esp],eax
c0022061:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022065:	01 f0                	add    eax,esi
c0022067:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002206a:	11 fa                	adc    edx,edi
c002206c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022070:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0022074:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0022078:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002207c:	19 d3                	sbb    ebx,edx
c002207e:	72 0a                	jb     c002208a <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0022080:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022084:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022088:	eb 13                	jmp    c002209d <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c002208a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002208e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022092:	29 f0                	sub    eax,esi
c0022094:	19 fa                	sbb    edx,edi
c0022096:	89 04 24             	mov    DWORD PTR [esp],eax
c0022099:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002209d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00220a0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00220a3:	0f a4 c2 0b          	shld   edx,eax,0xb
c00220a7:	c1 e0 0b             	shl    eax,0xb
c00220aa:	01 f0                	add    eax,esi
c00220ac:	11 fa                	adc    edx,edi
c00220ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00220b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00220b6:	51                   	push   ecx
c00220b7:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00220bb:	50                   	push   eax
c00220bc:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00220c0:	53                   	push   ebx
c00220c1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00220c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00220c9:	0f ac d0 0b          	shrd   eax,edx,0xb
c00220cd:	50                   	push   eax
c00220ce:	e8 98 fe ff ff       	call   c0021f6b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00220d3:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00220d7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00220da:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00220de:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00220e4:	83 c4 10             	add    esp,0x10
c00220e7:	b8 00 08 00 00       	mov    eax,0x800
c00220ec:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00220f0:	29 d0                	sub    eax,edx
c00220f2:	39 c7                	cmp    edi,eax
c00220f4:	83 de 00             	sbb    esi,0x0
c00220f7:	7d 1c                	jge    c0022115 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c00220f9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00220fe:	75 12                	jne    c0022112 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0022100:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022107:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002210d:	e9 ef 00 00 00       	jmp    c0022201 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0022112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022115:	01 d3                	add    ebx,edx
c0022117:	31 d2                	xor    edx,edx
c0022119:	39 c2                	cmp    edx,eax
c002211b:	7d 10                	jge    c002212d <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c002211d:	8a 0c 13             	mov    cl,BYTE PTR [ebx+edx*1]
c0022120:	8b bc 24 4c 08 00 00 	mov    edi,DWORD PTR [esp+0x84c]
c0022127:	88 0c 17             	mov    BYTE PTR [edi+edx*1],cl
c002212a:	42                   	inc    edx
c002212b:	eb ec                	jmp    c0022119 <ISO9660::read(void*, unsigned long, void*, int*)+0x103>
c002212d:	89 c7                	mov    edi,eax
c002212f:	85 c0                	test   eax,eax
c0022131:	79 02                	jns    c0022135 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0022133:	31 ff                	xor    edi,edi
c0022135:	99                   	cdq    
c0022136:	01 c7                	add    edi,eax
c0022138:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002213c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0022140:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0022144:	03 bc 24 4c 08 00 00 	add    edi,DWORD PTR [esp+0x84c]
c002214b:	01 c1                	add    ecx,eax
c002214d:	11 d3                	adc    ebx,edx
c002214f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0022153:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0022157:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c002215a:	29 c3                	sub    ebx,eax
c002215c:	19 d6                	sbb    esi,edx
c002215e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022161:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0022165:	b8 ff 07 00 00       	mov    eax,0x7ff
c002216a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002216d:	b8 00 00 00 00       	mov    eax,0x0
c0022172:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0022176:	7d 3e                	jge    c00221b6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a0>
c0022178:	52                   	push   edx
c0022179:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002217d:	50                   	push   eax
c002217e:	57                   	push   edi
c002217f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022183:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022187:	0f ac d0 0b          	shrd   eax,edx,0xb
c002218b:	50                   	push   eax
c002218c:	e8 da fd ff ff       	call   c0021f6b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022191:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0022199:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c002219e:	81 c7 00 08 00 00    	add    edi,0x800
c00221a4:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00221ac:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00221b1:	83 c4 10             	add    esp,0x10
c00221b4:	eb af                	jmp    c0022165 <ISO9660::read(void*, unsigned long, void*, int*)+0x14f>
c00221b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221ba:	0b 04 24             	or     eax,DWORD PTR [esp]
c00221bd:	74 27                	je     c00221e6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c00221bf:	50                   	push   eax
c00221c0:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00221c4:	50                   	push   eax
c00221c5:	8d 74 24 28          	lea    esi,[esp+0x28]
c00221c9:	56                   	push   esi
c00221ca:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00221ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00221d2:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c00221d6:	51                   	push   ecx
c00221d7:	e8 8f fd ff ff       	call   c0021f6b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00221dc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00221e0:	fc                   	cld    
c00221e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00221e3:	83 c4 10             	add    esp,0x10
c00221e6:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00221ed:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00221f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00221f5:	89 18                	mov    DWORD PTR [eax],ebx
c00221f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221fb:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00221fe:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0022201:	31 c0                	xor    eax,eax
c0022203:	eb 05                	jmp    c002220a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0022205:	b8 04 00 00 00       	mov    eax,0x4
c002220a:	81 c4 2c 08 00 00    	add    esp,0x82c
c0022210:	5b                   	pop    ebx
c0022211:	5e                   	pop    esi
c0022212:	5f                   	pop    edi
c0022213:	5d                   	pop    ebp
c0022214:	c3                   	ret    
c0022215:	90                   	nop

c0022216 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0022216:	55                   	push   ebp
c0022217:	57                   	push   edi
c0022218:	56                   	push   esi
c0022219:	53                   	push   ebx
c002221a:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0022220:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0022227:	85 ed                	test   ebp,ebp
c0022229:	0f 84 52 02 00 00    	je     c0022481 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26b>
c002222f:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0022237:	0f 84 44 02 00 00    	je     c0022481 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26b>
c002223d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022240:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0022243:	75 0a                	jne    c002224f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0022245:	b8 07 00 00 00       	mov    eax,0x7
c002224a:	e9 37 02 00 00       	jmp    c0022486 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x270>
c002224f:	50                   	push   eax
c0022250:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022254:	50                   	push   eax
c0022255:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002225c:	53                   	push   ebx
c002225d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022260:	c1 e0 0b             	shl    eax,0xb
c0022263:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0022266:	c1 e8 0b             	shr    eax,0xb
c0022269:	50                   	push   eax
c002226a:	e8 fc fc ff ff       	call   c0021f6b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002226f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022272:	83 c4 10             	add    esp,0x10
c0022275:	89 c1                	mov    ecx,eax
c0022277:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002227a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0022280:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0022283:	84 db                	test   bl,bl
c0022285:	0f 85 8b 00 00 00    	jne    c0022316 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c002228b:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0022291:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0022294:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002229a:	29 c6                	sub    esi,eax
c002229c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00222a0:	89 f3                	mov    ebx,esi
c00222a2:	89 f1                	mov    ecx,esi
c00222a4:	c1 fb 1f             	sar    ebx,0x1f
c00222a7:	01 f0                	add    eax,esi
c00222a9:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00222ac:	11 da                	adc    edx,ebx
c00222ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00222b1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00222b5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00222b8:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00222bb:	89 d8                	mov    eax,ebx
c00222bd:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c00222c1:	ba 00 00 00 00       	mov    edx,0x0
c00222c6:	19 f8                	sbb    eax,edi
c00222c8:	b8 00 00 00 00       	mov    eax,0x0
c00222cd:	73 08                	jae    c00222d7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c00222cf:	89 f0                	mov    eax,esi
c00222d1:	89 fa                	mov    edx,edi
c00222d3:	29 c8                	sub    eax,ecx
c00222d5:	19 da                	sbb    edx,ebx
c00222d7:	89 d7                	mov    edi,edx
c00222d9:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00222dc:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00222df:	09 c7                	or     edi,eax
c00222e1:	0f 84 5e ff ff ff    	je     c0022245 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00222e7:	57                   	push   edi
c00222e8:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00222ec:	50                   	push   eax
c00222ed:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00222f4:	53                   	push   ebx
c00222f5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00222f8:	c1 e0 0b             	shl    eax,0xb
c00222fb:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00222ff:	c1 e8 0b             	shr    eax,0xb
c0022302:	50                   	push   eax
c0022303:	e8 63 fc ff ff       	call   c0021f6b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022308:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002230b:	83 c4 10             	add    esp,0x10
c002230e:	25 ff 07 00 00       	and    eax,0x7ff
c0022313:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0022316:	31 ff                	xor    edi,edi
c0022318:	56                   	push   esi
c0022319:	6a 28                	push   0x28
c002231b:	6a 00                	push   0x0
c002231d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022321:	50                   	push   eax
c0022322:	e8 45 e4 fd ff       	call   c000076c <memset>
c0022327:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002232a:	25 ff 07 00 00       	and    eax,0x7ff
c002232f:	89 c6                	mov    esi,eax
c0022331:	83 c6 21             	add    esi,0x21
c0022334:	83 d7 00             	adc    edi,0x0
c0022337:	83 c4 10             	add    esp,0x10
c002233a:	31 c9                	xor    ecx,ecx
c002233c:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0022343:	83 f9 28             	cmp    ecx,0x28
c0022346:	88 04 24             	mov    BYTE PTR [esp],al
c0022349:	0f 94 c2             	sete   dl
c002234c:	88 d0                	mov    al,dl
c002234e:	ba ff 07 00 00       	mov    edx,0x7ff
c0022353:	39 f2                	cmp    edx,esi
c0022355:	ba 00 00 00 00       	mov    edx,0x0
c002235a:	19 fa                	sbb    edx,edi
c002235c:	0f 92 c2             	setb   dl
c002235f:	09 c2                	or     edx,eax
c0022361:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0022365:	0f 94 c0             	sete   al
c0022368:	08 d0                	or     al,dl
c002236a:	75 16                	jne    c0022382 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c002236c:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0022370:	74 10                	je     c0022382 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0022372:	8a 04 24             	mov    al,BYTE PTR [esp]
c0022375:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0022379:	41                   	inc    ecx
c002237a:	83 c6 01             	add    esi,0x1
c002237d:	83 d7 00             	adc    edi,0x0
c0022380:	eb ba                	jmp    c002233c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0022382:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0022389:	83 ec 0c             	sub    esp,0xc
c002238c:	8d 74 24 24          	lea    esi,[esp+0x24]
c0022390:	56                   	push   esi
c0022391:	e8 f2 e3 fd ff       	call   c0000788 <strlen>
c0022396:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c002239d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00223a1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00223a9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00223ac:	5a                   	pop    edx
c00223ad:	25 ff 07 00 00       	and    eax,0x7ff
c00223b2:	59                   	pop    ecx
c00223b3:	01 f8                	add    eax,edi
c00223b5:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c00223bb:	83 e0 02             	and    eax,0x2
c00223be:	3c 01                	cmp    al,0x1
c00223c0:	19 c0                	sbb    eax,eax
c00223c2:	83 c0 02             	add    eax,0x2
c00223c5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00223c9:	56                   	push   esi
c00223ca:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00223ce:	50                   	push   eax
c00223cf:	e8 54 e4 fd ff       	call   c0000828 <strcpy>
c00223d4:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c00223d8:	83 c4 10             	add    esp,0x10
c00223db:	84 c0                	test   al,al
c00223dd:	75 21                	jne    c0022400 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c00223df:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c00223e7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00223ef:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00223f7:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c00223fe:	eb 28                	jmp    c0022428 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0022400:	fe c8                	dec    al
c0022402:	75 24                	jne    c0022428 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0022404:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c002240c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0022414:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002241c:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0022423:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0022428:	8d 74 24 40          	lea    esi,[esp+0x40]
c002242c:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0022433:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c002243a:	fc                   	cld    
c002243b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002243d:	0f b6 f3             	movzx  esi,bl
c0022440:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0022447:	31 db                	xor    ebx,ebx
c0022449:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002244f:	89 df                	mov    edi,ebx
c0022451:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0022454:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022457:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c002245a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002245d:	39 c6                	cmp    esi,eax
c002245f:	19 d7                	sbb    edi,edx
c0022461:	72 10                	jb     c0022473 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25d>
c0022463:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c002246a:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0022471:	eb 0a                	jmp    c002247d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x267>
c0022473:	29 f0                	sub    eax,esi
c0022475:	19 da                	sbb    edx,ebx
c0022477:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c002247a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c002247d:	31 c0                	xor    eax,eax
c002247f:	eb 05                	jmp    c0022486 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x270>
c0022481:	b8 04 00 00 00       	mov    eax,0x4
c0022486:	81 c4 5c 09 00 00    	add    esp,0x95c
c002248c:	5b                   	pop    ebx
c002248d:	5e                   	pop    esi
c002248e:	5f                   	pop    edi
c002248f:	5d                   	pop    ebp
c0022490:	c3                   	ret    

c0022491 <readRoot(unsigned int*, unsigned int*, char)>:
c0022491:	57                   	push   edi
c0022492:	56                   	push   esi
c0022493:	81 ec 38 08 00 00    	sub    esp,0x838
c0022499:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c00224a1:	50                   	push   eax
c00224a2:	8d 44 24 38          	lea    eax,[esp+0x38]
c00224a6:	50                   	push   eax
c00224a7:	6a 10                	push   0x10
c00224a9:	e8 bd fa ff ff       	call   c0021f6b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00224ae:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c00224b5:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c00224b9:	b9 22 00 00 00       	mov    ecx,0x22
c00224be:	fc                   	cld    
c00224bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00224c1:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00224c8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00224cc:	89 10                	mov    DWORD PTR [eax],edx
c00224ce:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c00224d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00224d9:	89 10                	mov    DWORD PTR [eax],edx
c00224db:	81 c4 44 08 00 00    	add    esp,0x844
c00224e1:	b0 01                	mov    al,0x1
c00224e3:	5e                   	pop    esi
c00224e4:	5f                   	pop    edi
c00224e5:	c3                   	ret    

c00224e6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c00224e6:	55                   	push   ebp
c00224e7:	57                   	push   edi
c00224e8:	56                   	push   esi
c00224e9:	53                   	push   ebx
c00224ea:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00224f0:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00224f7:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c00224fe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022502:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0022506:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002250a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002250e:	75 03                	jne    c0022513 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0022510:	83 c3 02             	add    ebx,0x2
c0022513:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0022516:	75 03                	jne    c002251b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0022518:	43                   	inc    ebx
c0022519:	eb f8                	jmp    c0022513 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002251b:	51                   	push   ecx
c002251c:	68 00 01 00 00       	push   0x100
c0022521:	6a 00                	push   0x0
c0022523:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022527:	50                   	push   eax
c0022528:	e8 3f e2 fd ff       	call   c000076c <memset>
c002252d:	83 c4 10             	add    esp,0x10
c0022530:	31 d2                	xor    edx,edx
c0022532:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0022535:	84 c0                	test   al,al
c0022537:	74 21                	je     c002255a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0022539:	3c 2f                	cmp    al,0x2f
c002253b:	75 0b                	jne    c0022548 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c002253d:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0022541:	bd 01 00 00 00       	mov    ebp,0x1
c0022546:	eb 14                	jmp    c002255c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0022548:	8d 48 9f             	lea    ecx,[eax-0x61]
c002254b:	80 f9 19             	cmp    cl,0x19
c002254e:	77 03                	ja     c0022553 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0022550:	83 e8 20             	sub    eax,0x20
c0022553:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0022557:	42                   	inc    edx
c0022558:	eb d8                	jmp    c0022532 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c002255a:	31 ed                	xor    ebp,ebp
c002255c:	83 ec 0c             	sub    esp,0xc
c002255f:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0022566:	e8 c3 d3 fe ff       	call   c000f92e <malloc>
c002256b:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0022572:	89 c6                	mov    esi,eax
c0022574:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c002257a:	c1 ef 0b             	shr    edi,0xb
c002257d:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0022584:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0022588:	83 c4 10             	add    esp,0x10
c002258b:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0022590:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022594:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c002259b:	74 28                	je     c00225c5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c002259d:	52                   	push   edx
c002259e:	57                   	push   edi
c002259f:	50                   	push   eax
c00225a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00225a4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00225ab:	e8 bb f9 ff ff       	call   c0021f6b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00225b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00225b4:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c00225bb:	05 00 08 00 00       	add    eax,0x800
c00225c0:	83 c4 10             	add    esp,0x10
c00225c3:	eb cb                	jmp    c0022590 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c00225c5:	83 ec 0c             	sub    esp,0xc
c00225c8:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00225cc:	57                   	push   edi
c00225cd:	e8 b6 e1 fd ff       	call   c0000788 <strlen>
c00225d2:	50                   	push   eax
c00225d3:	57                   	push   edi
c00225d4:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00225db:	56                   	push   esi
c00225dc:	e8 48 f9 ff ff       	call   c0021f29 <__memmem(unsigned char*, int, unsigned char*, int)>
c00225e1:	83 c4 20             	add    esp,0x20
c00225e4:	85 c0                	test   eax,eax
c00225e6:	75 13                	jne    c00225fb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c00225e8:	83 ec 0c             	sub    esp,0xc
c00225eb:	56                   	push   esi
c00225ec:	e8 4d d3 fe ff       	call   c000f93e <free>
c00225f1:	83 c4 10             	add    esp,0x10
c00225f4:	31 c0                	xor    eax,eax
c00225f6:	e9 b3 00 00 00       	jmp    c00226ae <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00225fb:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c00225ff:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0022603:	c1 e7 08             	shl    edi,0x8
c0022606:	c1 e2 10             	shl    edx,0x10
c0022609:	09 d7                	or     edi,edx
c002260b:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c002260f:	09 d7                	or     edi,edx
c0022611:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0022615:	c1 e2 18             	shl    edx,0x18
c0022618:	09 d7                	or     edi,edx
c002261a:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c002261e:	89 d1                	mov    ecx,edx
c0022620:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0022624:	c1 e1 08             	shl    ecx,0x8
c0022627:	c1 e2 10             	shl    edx,0x10
c002262a:	09 ca                	or     edx,ecx
c002262c:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0022630:	09 ca                	or     edx,ecx
c0022632:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0022636:	c1 e1 18             	shl    ecx,0x18
c0022639:	09 ca                	or     edx,ecx
c002263b:	89 e9                	mov    ecx,ebp
c002263d:	84 c9                	test   cl,cl
c002263f:	74 3c                	je     c002267d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0022641:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0022645:	83 ec 0c             	sub    esp,0xc
c0022648:	56                   	push   esi
c0022649:	e8 f0 d2 fe ff       	call   c000f93e <free>
c002264e:	83 c4 0c             	add    esp,0xc
c0022651:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022658:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c002265d:	50                   	push   eax
c002265e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022665:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002266c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022670:	52                   	push   edx
c0022671:	57                   	push   edi
c0022672:	53                   	push   ebx
c0022673:	e8 6e fe ff ff       	call   c00224e6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022678:	83 c4 20             	add    esp,0x20
c002267b:	eb 31                	jmp    c00226ae <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002267d:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0022680:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0022687:	d0 e8                	shr    al,1
c0022689:	89 3b                	mov    DWORD PTR [ebx],edi
c002268b:	83 e0 01             	and    eax,0x1
c002268e:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0022695:	83 ec 0c             	sub    esp,0xc
c0022698:	89 13                	mov    DWORD PTR [ebx],edx
c002269a:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00226a1:	89 03                	mov    DWORD PTR [ebx],eax
c00226a3:	56                   	push   esi
c00226a4:	e8 95 d2 fe ff       	call   c000f93e <free>
c00226a9:	83 c4 10             	add    esp,0x10
c00226ac:	b0 01                	mov    al,0x1
c00226ae:	81 c4 1c 01 00 00    	add    esp,0x11c
c00226b4:	5b                   	pop    ebx
c00226b5:	5e                   	pop    esi
c00226b6:	5f                   	pop    edi
c00226b7:	5d                   	pop    ebp
c00226b8:	c3                   	ret    

c00226b9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00226b9:	55                   	push   ebp
c00226ba:	57                   	push   edi
c00226bb:	56                   	push   esi
c00226bc:	53                   	push   ebx
c00226bd:	83 ec 20             	sub    esp,0x20
c00226c0:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00226c4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00226c8:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00226cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00226d4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00226dc:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00226e1:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00226e7:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00226ed:	57                   	push   edi
c00226ee:	8d 44 24 14          	lea    eax,[esp+0x14]
c00226f2:	50                   	push   eax
c00226f3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00226f7:	50                   	push   eax
c00226f8:	e8 94 fd ff ff       	call   c0022491 <readRoot(unsigned int*, unsigned int*, char)>
c00226fd:	5a                   	pop    edx
c00226fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022702:	e8 81 e0 fd ff       	call   c0000788 <strlen>
c0022707:	83 c4 10             	add    esp,0x10
c002270a:	83 f8 03             	cmp    eax,0x3
c002270d:	77 17                	ja     c0022726 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c002270f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022713:	89 03                	mov    DWORD PTR [ebx],eax
c0022715:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022719:	89 06                	mov    DWORD PTR [esi],eax
c002271b:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0022722:	b0 01                	mov    al,0x1
c0022724:	eb 19                	jmp    c002273f <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0022726:	50                   	push   eax
c0022727:	55                   	push   ebp
c0022728:	57                   	push   edi
c0022729:	56                   	push   esi
c002272a:	53                   	push   ebx
c002272b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002272f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022733:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022737:	e8 aa fd ff ff       	call   c00224e6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002273c:	83 c4 20             	add    esp,0x20
c002273f:	83 c4 1c             	add    esp,0x1c
c0022742:	5b                   	pop    ebx
c0022743:	5e                   	pop    esi
c0022744:	5f                   	pop    edi
c0022745:	5d                   	pop    ebp
c0022746:	c3                   	ret    
c0022747:	90                   	nop

c0022748 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0022748:	57                   	push   edi
c0022749:	56                   	push   esi
c002274a:	53                   	push   ebx
c002274b:	83 ec 10             	sub    esp,0x10
c002274e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022752:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022756:	85 ff                	test   edi,edi
c0022758:	0f 84 9d 00 00 00    	je     c00227fb <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002275e:	85 f6                	test   esi,esi
c0022760:	0f 84 95 00 00 00    	je     c00227fb <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022766:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c002276b:	74 17                	je     c0022784 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c002276d:	83 ec 0c             	sub    esp,0xc
c0022770:	68 b7 d3 02 c0       	push   0xc002d3b7
c0022775:	e8 53 07 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c002277a:	83 c4 10             	add    esp,0x10
c002277d:	b8 03 00 00 00       	mov    eax,0x3
c0022782:	eb 7c                	jmp    c0022800 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022784:	83 ec 0c             	sub    esp,0xc
c0022787:	6a 1c                	push   0x1c
c0022789:	e8 a0 d1 fe ff       	call   c000f92e <malloc>
c002278e:	89 07                	mov    DWORD PTR [edi],eax
c0022790:	89 c3                	mov    ebx,eax
c0022792:	58                   	pop    eax
c0022793:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022797:	50                   	push   eax
c0022798:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002279b:	50                   	push   eax
c002279c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00227a0:	50                   	push   eax
c00227a1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00227a5:	50                   	push   eax
c00227a6:	56                   	push   esi
c00227a7:	e8 0d ff ff ff       	call   c00226b9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00227ac:	83 c4 20             	add    esp,0x20
c00227af:	84 c0                	test   al,al
c00227b1:	74 07                	je     c00227ba <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c00227b3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00227b8:	74 0b                	je     c00227c5 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c00227ba:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00227be:	b8 01 00 00 00       	mov    eax,0x1
c00227c3:	eb 3b                	jmp    c0022800 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00227c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00227c9:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00227cd:	89 03                	mov    DWORD PTR [ebx],eax
c00227cf:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00227d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00227da:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00227e1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00227e8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00227eb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00227f2:	8a 06                	mov    al,BYTE PTR [esi]
c00227f4:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00227f7:	31 c0                	xor    eax,eax
c00227f9:	eb 05                	jmp    c0022800 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00227fb:	b8 04 00 00 00       	mov    eax,0x4
c0022800:	83 c4 10             	add    esp,0x10
c0022803:	5b                   	pop    ebx
c0022804:	5e                   	pop    esi
c0022805:	5f                   	pop    edi
c0022806:	c3                   	ret    
c0022807:	90                   	nop

c0022808 <ISO9660::exists(char const*)>:
c0022808:	83 ec 28             	sub    esp,0x28
c002280b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002280f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022813:	52                   	push   edx
c0022814:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0022817:	52                   	push   edx
c0022818:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002281c:	52                   	push   edx
c002281d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022821:	52                   	push   edx
c0022822:	50                   	push   eax
c0022823:	e8 91 fe ff ff       	call   c00226b9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022828:	83 c4 3c             	add    esp,0x3c
c002282b:	c3                   	ret    

c002282c <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c002282c:	56                   	push   esi
c002282d:	53                   	push   ebx
c002282e:	83 ec 14             	sub    esp,0x14
c0022831:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022835:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022839:	85 db                	test   ebx,ebx
c002283b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002283f:	0f 94 c2             	sete   dl
c0022842:	85 f6                	test   esi,esi
c0022844:	0f 94 c0             	sete   al
c0022847:	08 c2                	or     dl,al
c0022849:	75 68                	jne    c00228b3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002284b:	85 c9                	test   ecx,ecx
c002284d:	74 64                	je     c00228b3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002284f:	83 ec 0c             	sub    esp,0xc
c0022852:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022855:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022859:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002285f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022866:	50                   	push   eax
c0022867:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c002286a:	50                   	push   eax
c002286b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002286f:	50                   	push   eax
c0022870:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022874:	50                   	push   eax
c0022875:	51                   	push   ecx
c0022876:	e8 3e fe ff ff       	call   c00226b9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002287b:	83 c4 20             	add    esp,0x20
c002287e:	ba 01 00 00 00       	mov    edx,0x1
c0022883:	84 c0                	test   al,al
c0022885:	74 31                	je     c00228b8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022887:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002288b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022892:	89 03                	mov    DWORD PTR [ebx],eax
c0022894:	ba 00 00 00 00       	mov    edx,0x0
c0022899:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002289d:	85 c0                	test   eax,eax
c002289f:	0f 95 06             	setne  BYTE PTR [esi]
c00228a2:	74 14                	je     c00228b8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00228a4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00228aa:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00228b1:	eb 05                	jmp    c00228b8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00228b3:	ba 04 00 00 00       	mov    edx,0x4
c00228b8:	83 c4 14             	add    esp,0x14
c00228bb:	89 d0                	mov    eax,edx
c00228bd:	5b                   	pop    ebx
c00228be:	5e                   	pop    esi
c00228bf:	c3                   	ret    

c00228c0 <ISO9660::openDir(char const*, void**)>:
c00228c0:	57                   	push   edi
c00228c1:	56                   	push   esi
c00228c2:	53                   	push   ebx
c00228c3:	83 ec 10             	sub    esp,0x10
c00228c6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00228ca:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00228ce:	85 ff                	test   edi,edi
c00228d0:	0f 84 95 00 00 00    	je     c002296b <ISO9660::openDir(char const*, void**)+0xab>
c00228d6:	85 f6                	test   esi,esi
c00228d8:	0f 84 8d 00 00 00    	je     c002296b <ISO9660::openDir(char const*, void**)+0xab>
c00228de:	83 ec 0c             	sub    esp,0xc
c00228e1:	6a 1c                	push   0x1c
c00228e3:	e8 46 d0 fe ff       	call   c000f92e <malloc>
c00228e8:	89 07                	mov    DWORD PTR [edi],eax
c00228ea:	89 c3                	mov    ebx,eax
c00228ec:	59                   	pop    ecx
c00228ed:	8d 44 24 18          	lea    eax,[esp+0x18]
c00228f1:	50                   	push   eax
c00228f2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00228f5:	50                   	push   eax
c00228f6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00228fa:	50                   	push   eax
c00228fb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00228ff:	50                   	push   eax
c0022900:	56                   	push   esi
c0022901:	e8 b3 fd ff ff       	call   c00226b9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022906:	83 c4 20             	add    esp,0x20
c0022909:	84 c0                	test   al,al
c002290b:	74 07                	je     c0022914 <ISO9660::openDir(char const*, void**)+0x54>
c002290d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022912:	75 21                	jne    c0022935 <ISO9660::openDir(char const*, void**)+0x75>
c0022914:	0f b6 c0             	movzx  eax,al
c0022917:	52                   	push   edx
c0022918:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002291c:	50                   	push   eax
c002291d:	68 dd d3 02 c0       	push   0xc002d3dd
c0022922:	e8 a6 05 ff ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0022927:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002292b:	83 c4 10             	add    esp,0x10
c002292e:	b8 01 00 00 00       	mov    eax,0x1
c0022933:	eb 3b                	jmp    c0022970 <ISO9660::openDir(char const*, void**)+0xb0>
c0022935:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022939:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002293d:	89 03                	mov    DWORD PTR [ebx],eax
c002293f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022946:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002294a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022951:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022958:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002295b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022962:	8a 06                	mov    al,BYTE PTR [esi]
c0022964:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022967:	31 c0                	xor    eax,eax
c0022969:	eb 05                	jmp    c0022970 <ISO9660::openDir(char const*, void**)+0xb0>
c002296b:	b8 04 00 00 00       	mov    eax,0x4
c0022970:	83 c4 10             	add    esp,0x10
c0022973:	5b                   	pop    ebx
c0022974:	5e                   	pop    esi
c0022975:	5f                   	pop    edi
c0022976:	c3                   	ret    
c0022977:	90                   	nop

c0022978 <ISO9660::ISO9660()>:
c0022978:	83 ec 0c             	sub    esp,0xc
c002297b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002297f:	83 ec 0c             	sub    esp,0xc
c0022982:	50                   	push   eax
c0022983:	e8 50 08 ff ff       	call   c00131d8 <Filesystem::Filesystem()>
c0022988:	83 c4 10             	add    esp,0x10
c002298b:	ba 00 d4 02 c0       	mov    edx,0xc002d400
c0022990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022994:	89 10                	mov    DWORD PTR [eax],edx
c0022996:	90                   	nop
c0022997:	83 c4 0c             	add    esp,0xc
c002299a:	c3                   	ret    
c002299b:	90                   	nop

c002299c <SoundChannel::~SoundChannel()>:
c002299c:	83 ec 0c             	sub    esp,0xc
c002299f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00229a6:	83 ec 0c             	sub    esp,0xc
c00229a9:	50                   	push   eax
c00229aa:	e8 8f cf fe ff       	call   c000f93e <free>
c00229af:	83 c4 10             	add    esp,0x10
c00229b2:	90                   	nop
c00229b3:	83 c4 0c             	add    esp,0xc
c00229b6:	c3                   	ret    
c00229b7:	90                   	nop

c00229b8 <SoundChannel::setSpeed(float)>:
c00229b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00229c0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00229c3:	c3                   	ret    

c00229c4 <SoundChannel::getSpeed()>:
c00229c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229c8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00229cb:	c3                   	ret    

c00229cc <SoundChannel::setVolume(int)>:
c00229cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00229d0:	83 f8 64             	cmp    eax,0x64
c00229d3:	7e 05                	jle    c00229da <SoundChannel::setVolume(int)+0xe>
c00229d5:	b8 64 00 00 00       	mov    eax,0x64
c00229da:	85 c0                	test   eax,eax
c00229dc:	79 02                	jns    c00229e0 <SoundChannel::setVolume(int)+0x14>
c00229de:	31 c0                	xor    eax,eax
c00229e0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00229e4:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00229e7:	c3                   	ret    

c00229e8 <SoundChannel::getVolume()>:
c00229e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229ec:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00229ef:	c3                   	ret    

c00229f0 <SoundChannel::pause()>:
c00229f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229f4:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00229f8:	c3                   	ret    
c00229f9:	90                   	nop

c00229fa <SoundChannel::SoundChannel(int, int, int, int)>:
c00229fa:	83 ec 1c             	sub    esp,0x1c
c00229fd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022a01:	e8 ea ff ff ff       	call   c00229f0 <SoundChannel::pause()>
c0022a06:	83 c4 04             	add    esp,0x4
c0022a09:	6a 50                	push   0x50
c0022a0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022a0f:	e8 b8 ff ff ff       	call   c00229cc <SoundChannel::setVolume(int)>
c0022a14:	83 c4 08             	add    esp,0x8
c0022a17:	a1 7c d4 02 c0       	mov    eax,ds:0xc002d47c
c0022a1c:	50                   	push   eax
c0022a1d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022a21:	e8 92 ff ff ff       	call   c00229b8 <SoundChannel::setSpeed(float)>
c0022a26:	83 c4 08             	add    esp,0x8
c0022a29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a2d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022a31:	89 10                	mov    DWORD PTR [eax],edx
c0022a33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a37:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022a3b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022a3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a42:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022a46:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022a49:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022a4e:	75 23                	jne    c0022a73 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022a50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a54:	8b 10                	mov    edx,DWORD PTR [eax]
c0022a56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022a5d:	0f af c2             	imul   eax,edx
c0022a60:	85 c0                	test   eax,eax
c0022a62:	79 03                	jns    c0022a67 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022a64:	83 c0 03             	add    eax,0x3
c0022a67:	c1 f8 02             	sar    eax,0x2
c0022a6a:	05 a0 0f 00 00       	add    eax,0xfa0
c0022a6f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a77:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022a7b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022a7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a82:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022a89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a8d:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a98:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022a9b:	c1 e0 02             	shl    eax,0x2
c0022a9e:	83 ec 0c             	sub    esp,0xc
c0022aa1:	50                   	push   eax
c0022aa2:	e8 87 ce fe ff       	call   c000f92e <malloc>
c0022aa7:	83 c4 10             	add    esp,0x10
c0022aaa:	89 c2                	mov    edx,eax
c0022aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022ab0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022ab3:	83 ec 04             	sub    esp,0x4
c0022ab6:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022aba:	50                   	push   eax
c0022abb:	6a 01                	push   0x1
c0022abd:	6a 04                	push   0x4
c0022abf:	e8 bc 60 fe ff       	call   c0008b80 <src_new>
c0022ac4:	83 c4 10             	add    esp,0x10
c0022ac7:	89 c2                	mov    edx,eax
c0022ac9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022acd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022ad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ad4:	85 c0                	test   eax,eax
c0022ad6:	74 10                	je     c0022ae8 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022ad8:	83 ec 0c             	sub    esp,0xc
c0022adb:	68 60 d4 02 c0       	push   0xc002d460
c0022ae0:	e8 ab 7d ff ff       	call   c001a890 <Krnl::panic(char const*)>
c0022ae5:	83 c4 10             	add    esp,0x10
c0022ae8:	a0 40 32 03 c0       	mov    al,ds:0xc0033240
c0022aed:	83 f0 01             	xor    eax,0x1
c0022af0:	84 c0                	test   al,al
c0022af2:	74 57                	je     c0022b4b <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022af4:	a1 80 d4 02 c0       	mov    eax,ds:0xc002d480
c0022af9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022afd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022b05:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022b0d:	7f 35                	jg     c0022b44 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022b0f:	83 ec 0c             	sub    esp,0xc
c0022b12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022b16:	e8 74 50 00 00       	call   c0027b8f <__floatsisf>
c0022b1b:	83 c4 10             	add    esp,0x10
c0022b1e:	8b 15 80 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d480
c0022b24:	83 ec 08             	sub    esp,0x8
c0022b27:	52                   	push   edx
c0022b28:	50                   	push   eax
c0022b29:	e8 73 4c 00 00       	call   c00277a1 <__mulsf3>
c0022b2e:	83 c4 10             	add    esp,0x10
c0022b31:	89 c2                	mov    edx,eax
c0022b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022b37:	89 14 85 40 2e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd1c0],edx
c0022b3e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022b42:	eb c1                	jmp    c0022b05 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022b44:	c6 05 40 32 03 c0 01 	mov    BYTE PTR ds:0xc0033240,0x1
c0022b4b:	90                   	nop
c0022b4c:	83 c4 1c             	add    esp,0x1c
c0022b4f:	c3                   	ret    

c0022b50 <SoundChannel::play()>:
c0022b50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b54:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022b58:	c3                   	ret    
c0022b59:	90                   	nop

c0022b5a <SoundChannel::paused()>:
c0022b5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b5e:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022b61:	c3                   	ret    

c0022b62 <SoundChannel::getSampleRate()>:
c0022b62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b66:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b68:	c3                   	ret    
c0022b69:	90                   	nop

c0022b6a <SoundChannel::getBits()>:
c0022b6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b71:	c3                   	ret    

c0022b72 <SoundChannel::getBufferUsed()>:
c0022b72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b76:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022b79:	c3                   	ret    

c0022b7a <SoundChannel::getBufferSize()>:
c0022b7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b7e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022b81:	c3                   	ret    

c0022b82 <SoundChannel::unbuffer(float*, int, int)>:
c0022b82:	56                   	push   esi
c0022b83:	53                   	push   ebx
c0022b84:	83 ec 40             	sub    esp,0x40
c0022b87:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022b8b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022b8e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022b92:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022b95:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022b99:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022b9d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022ba1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022ba5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022ba9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022bad:	e8 dd 4f 00 00       	call   c0027b8f <__floatsisf>
c0022bb2:	5a                   	pop    edx
c0022bb3:	89 c6                	mov    esi,eax
c0022bb5:	ff 33                	push   DWORD PTR [ebx]
c0022bb7:	e8 d3 4f 00 00       	call   c0027b8f <__floatsisf>
c0022bbc:	59                   	pop    ecx
c0022bbd:	5a                   	pop    edx
c0022bbe:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022bc1:	50                   	push   eax
c0022bc2:	e8 da 4b 00 00       	call   c00277a1 <__mulsf3>
c0022bc7:	59                   	pop    ecx
c0022bc8:	5a                   	pop    edx
c0022bc9:	50                   	push   eax
c0022bca:	56                   	push   esi
c0022bcb:	e8 94 4d 00 00       	call   c0027964 <__divsf3>
c0022bd0:	89 04 24             	mov    DWORD PTR [esp],eax
c0022bd3:	e8 87 62 00 00       	call   c0028e5f <__extendsfdf2>
c0022bd8:	59                   	pop    ecx
c0022bd9:	5e                   	pop    esi
c0022bda:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022bde:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022be2:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022bea:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022bee:	50                   	push   eax
c0022bef:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022bf2:	e8 7e 5b fe ff       	call   c0008775 <src_process>
c0022bf7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022bfb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022bfe:	83 c4 0c             	add    esp,0xc
c0022c01:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022c04:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022c07:	29 d0                	sub    eax,edx
c0022c09:	c1 e0 02             	shl    eax,0x2
c0022c0c:	50                   	push   eax
c0022c0d:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022c10:	50                   	push   eax
c0022c11:	51                   	push   ecx
c0022c12:	e8 8d da fd ff       	call   c00006a4 <memmove>
c0022c17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022c1b:	83 c4 44             	add    esp,0x44
c0022c1e:	5b                   	pop    ebx
c0022c1f:	5e                   	pop    esi
c0022c20:	c3                   	ret    
c0022c21:	90                   	nop

c0022c22 <SoundChannel::buffer8(unsigned char*, int)>:
c0022c22:	55                   	push   ebp
c0022c23:	57                   	push   edi
c0022c24:	56                   	push   esi
c0022c25:	53                   	push   ebx
c0022c26:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022c2a:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022c2e:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022c31:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022c35:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022c38:	74 7a                	je     c0022cb4 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022c3a:	85 ff                	test   edi,edi
c0022c3c:	7e 76                	jle    c0022cb4 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022c3e:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022c42:	8d 70 01             	lea    esi,[eax+0x1]
c0022c45:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022c48:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022c4b:	8b 1c 9d 40 2e 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd1c0]
c0022c52:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022c55:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022c58:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022c5b:	74 5e                	je     c0022cbb <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022c5d:	83 ff 01             	cmp    edi,0x1
c0022c60:	74 4b                	je     c0022cad <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022c62:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022c66:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022c69:	8d 70 01             	lea    esi,[eax+0x1]
c0022c6c:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022c6f:	8b 1c 9d 40 2e 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd1c0]
c0022c76:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022c79:	b8 02 00 00 00       	mov    eax,0x2
c0022c7e:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022c81:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022c84:	75 23                	jne    c0022ca9 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022c86:	eb 27                	jmp    c0022caf <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022c88:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022c8d:	8d 71 01             	lea    esi,[ecx+0x1]
c0022c90:	40                   	inc    eax
c0022c91:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022c94:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022c97:	8b 1c 9d 40 2e 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd1c0]
c0022c9e:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022ca1:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022ca4:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022ca7:	74 06                	je     c0022caf <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022ca9:	39 c7                	cmp    edi,eax
c0022cab:	75 db                	jne    c0022c88 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022cad:	89 f8                	mov    eax,edi
c0022caf:	5b                   	pop    ebx
c0022cb0:	5e                   	pop    esi
c0022cb1:	5f                   	pop    edi
c0022cb2:	5d                   	pop    ebp
c0022cb3:	c3                   	ret    
c0022cb4:	5b                   	pop    ebx
c0022cb5:	31 c0                	xor    eax,eax
c0022cb7:	5e                   	pop    esi
c0022cb8:	5f                   	pop    edi
c0022cb9:	5d                   	pop    ebp
c0022cba:	c3                   	ret    
c0022cbb:	b8 01 00 00 00       	mov    eax,0x1
c0022cc0:	eb ed                	jmp    c0022caf <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022cc2 <SoundDevice::SoundDevice(char const*)>:
c0022cc2:	83 ec 1c             	sub    esp,0x1c
c0022cc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022cc9:	83 ec 08             	sub    esp,0x8
c0022ccc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022cd0:	50                   	push   eax
c0022cd1:	e8 0a 18 ff ff       	call   c00144e0 <Device::Device(char const*)>
c0022cd6:	83 c4 10             	add    esp,0x10
c0022cd9:	ba 8c d4 02 c0       	mov    edx,0xc002d48c
c0022cde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022ce2:	89 10                	mov    DWORD PTR [eax],edx
c0022ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022ce8:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022cf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022cf6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022d00:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022d08:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022d0d:	7f 19                	jg     c0022d28 <SoundDevice::SoundDevice(char const*)+0x66>
c0022d0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022d13:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022d17:	83 c2 54             	add    edx,0x54
c0022d1a:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022d22:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022d26:	eb e0                	jmp    c0022d08 <SoundDevice::SoundDevice(char const*)+0x46>
c0022d28:	90                   	nop
c0022d29:	83 c4 1c             	add    esp,0x1c
c0022d2c:	c3                   	ret    
c0022d2d:	90                   	nop

c0022d2e <SoundDevice::~SoundDevice()>:
c0022d2e:	53                   	push   ebx
c0022d2f:	83 ec 18             	sub    esp,0x18
c0022d32:	ba 8c d4 02 c0       	mov    edx,0xc002d48c
c0022d37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022d3b:	89 10                	mov    DWORD PTR [eax],edx
c0022d3d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022d45:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022d4a:	7f 46                	jg     c0022d92 <SoundDevice::~SoundDevice()+0x64>
c0022d4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022d50:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022d54:	83 c2 54             	add    edx,0x54
c0022d57:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022d5b:	85 c0                	test   eax,eax
c0022d5d:	74 2d                	je     c0022d8c <SoundDevice::~SoundDevice()+0x5e>
c0022d5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022d63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022d67:	83 c2 54             	add    edx,0x54
c0022d6a:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022d6e:	85 db                	test   ebx,ebx
c0022d70:	74 1a                	je     c0022d8c <SoundDevice::~SoundDevice()+0x5e>
c0022d72:	83 ec 0c             	sub    esp,0xc
c0022d75:	53                   	push   ebx
c0022d76:	e8 21 fc ff ff       	call   c002299c <SoundChannel::~SoundChannel()>
c0022d7b:	83 c4 10             	add    esp,0x10
c0022d7e:	83 ec 08             	sub    esp,0x8
c0022d81:	6a 2c                	push   0x2c
c0022d83:	53                   	push   ebx
c0022d84:	e8 64 00 ff ff       	call   c0012ded <operator delete(void*, unsigned long)>
c0022d89:	83 c4 10             	add    esp,0x10
c0022d8c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022d90:	eb b3                	jmp    c0022d45 <SoundDevice::~SoundDevice()+0x17>
c0022d92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022d96:	83 ec 0c             	sub    esp,0xc
c0022d99:	50                   	push   eax
c0022d9a:	e8 35 14 ff ff       	call   c00141d4 <Device::~Device()>
c0022d9f:	83 c4 10             	add    esp,0x10
c0022da2:	90                   	nop
c0022da3:	83 c4 18             	add    esp,0x18
c0022da6:	5b                   	pop    ebx
c0022da7:	c3                   	ret    

c0022da8 <SoundDevice::~SoundDevice()>:
c0022da8:	83 ec 0c             	sub    esp,0xc
c0022dab:	83 ec 0c             	sub    esp,0xc
c0022dae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022db2:	e8 77 ff ff ff       	call   c0022d2e <SoundDevice::~SoundDevice()>
c0022db7:	83 c4 10             	add    esp,0x10
c0022dba:	83 ec 08             	sub    esp,0x8
c0022dbd:	68 e4 01 00 00       	push   0x1e4
c0022dc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022dc6:	e8 22 00 ff ff       	call   c0012ded <operator delete(void*, unsigned long)>
c0022dcb:	83 c4 10             	add    esp,0x10
c0022dce:	83 c4 0c             	add    esp,0xc
c0022dd1:	c3                   	ret    

c0022dd2 <SoundDevice::getFreeChannelNum()>:
c0022dd2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022dd6:	31 c0                	xor    eax,eax
c0022dd8:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022de0:	74 09                	je     c0022deb <SoundDevice::getFreeChannelNum()+0x19>
c0022de2:	40                   	inc    eax
c0022de3:	83 f8 20             	cmp    eax,0x20
c0022de6:	75 f0                	jne    c0022dd8 <SoundDevice::getFreeChannelNum()+0x6>
c0022de8:	83 c8 ff             	or     eax,0xffffffff
c0022deb:	c3                   	ret    

c0022dec <SoundDevice::addChannel(SoundChannel*)>:
c0022dec:	56                   	push   esi
c0022ded:	53                   	push   ebx
c0022dee:	51                   	push   ecx
c0022def:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022df3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022df7:	53                   	push   ebx
c0022df8:	e8 d5 ff ff ff       	call   c0022dd2 <SoundDevice::getFreeChannelNum()>
c0022dfd:	5a                   	pop    edx
c0022dfe:	83 f8 ff             	cmp    eax,0xffffffff
c0022e01:	74 51                	je     c0022e54 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022e03:	85 f6                	test   esi,esi
c0022e05:	74 4d                	je     c0022e54 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022e07:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022e0e:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022e15:	75 30                	jne    c0022e47 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022e17:	83 ec 0c             	sub    esp,0xc
c0022e1a:	56                   	push   esi
c0022e1b:	e8 42 fd ff ff       	call   c0022b62 <SoundChannel::getSampleRate()>
c0022e20:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022e26:	89 34 24             	mov    DWORD PTR [esp],esi
c0022e29:	e8 3c fd ff ff       	call   c0022b6a <SoundChannel::getBits()>
c0022e2e:	83 c4 0c             	add    esp,0xc
c0022e31:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022e37:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022e39:	50                   	push   eax
c0022e3a:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022e40:	53                   	push   ebx
c0022e41:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022e44:	83 c4 10             	add    esp,0x10
c0022e47:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022e4d:	b8 01 00 00 00       	mov    eax,0x1
c0022e52:	eb 03                	jmp    c0022e57 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022e54:	83 c8 ff             	or     eax,0xffffffff
c0022e57:	5a                   	pop    edx
c0022e58:	5b                   	pop    ebx
c0022e59:	5e                   	pop    esi
c0022e5a:	c3                   	ret    
c0022e5b:	90                   	nop

c0022e5c <SoundDevice::removeChannel(int)>:
c0022e5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022e60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e64:	83 fa 1f             	cmp    edx,0x1f
c0022e67:	77 23                	ja     c0022e8c <SoundDevice::removeChannel(int)+0x30>
c0022e69:	8d 14 90             	lea    edx,[eax+edx*4]
c0022e6c:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022e73:	74 17                	je     c0022e8c <SoundDevice::removeChannel(int)+0x30>
c0022e75:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022e7f:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022e85:	75 05                	jne    c0022e8c <SoundDevice::removeChannel(int)+0x30>
c0022e87:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e89:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022e8c:	c3                   	ret    
c0022e8d:	90                   	nop

c0022e8e <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022e8e:	57                   	push   edi
c0022e8f:	56                   	push   esi
c0022e90:	53                   	push   ebx
c0022e91:	31 db                	xor    ebx,ebx
c0022e93:	83 ec 10             	sub    esp,0x10
c0022e96:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022e9a:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022e9e:	0f 8d cb 00 00 00    	jge    c0022f6f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022ea4:	83 ec 0c             	sub    esp,0xc
c0022ea7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022eab:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022eae:	e8 ac 5f 00 00       	call   c0028e5f <__extendsfdf2>
c0022eb3:	83 c4 10             	add    esp,0x10
c0022eb6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022eba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022ebe:	68 00 00 f0 3f       	push   0x3ff00000
c0022ec3:	6a 00                	push   0x0
c0022ec5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ec9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ecd:	e8 19 4f 00 00       	call   c0027deb <__adddf3>
c0022ed2:	83 c4 10             	add    esp,0x10
c0022ed5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022ed9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022edd:	68 00 00 e0 3f       	push   0x3fe00000
c0022ee2:	6a 00                	push   0x0
c0022ee4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ee8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022eec:	e8 77 55 00 00       	call   c0028468 <__muldf3>
c0022ef1:	83 c4 10             	add    esp,0x10
c0022ef4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022ef8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022efc:	68 00 00 60 40       	push   0x40600000
c0022f01:	6a 00                	push   0x0
c0022f03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022f07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022f0b:	e8 58 55 00 00       	call   c0028468 <__muldf3>
c0022f10:	59                   	pop    ecx
c0022f11:	5f                   	pop    edi
c0022f12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022f16:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022f1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022f1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022f22:	e8 14 5e 00 00       	call   c0028d3b <__truncdfsf2>
c0022f27:	5a                   	pop    edx
c0022f28:	89 c7                	mov    edi,eax
c0022f2a:	59                   	pop    ecx
c0022f2b:	68 00 00 fe 42       	push   0x42fe0000
c0022f30:	50                   	push   eax
c0022f31:	e8 af 4e 00 00       	call   c0027de5 <__gesf2>
c0022f36:	83 c4 10             	add    esp,0x10
c0022f39:	85 c0                	test   eax,eax
c0022f3b:	78 06                	js     c0022f43 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022f3d:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022f41:	eb 26                	jmp    c0022f69 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022f43:	50                   	push   eax
c0022f44:	50                   	push   eax
c0022f45:	6a 00                	push   0x0
c0022f47:	57                   	push   edi
c0022f48:	e8 9c 4e 00 00       	call   c0027de9 <__lesf2>
c0022f4d:	83 c4 10             	add    esp,0x10
c0022f50:	85 c0                	test   eax,eax
c0022f52:	7f 06                	jg     c0022f5a <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022f54:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022f58:	eb 0f                	jmp    c0022f69 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022f5a:	83 ec 0c             	sub    esp,0xc
c0022f5d:	57                   	push   edi
c0022f5e:	e8 99 5f 00 00       	call   c0028efc <lrintf>
c0022f63:	83 c4 10             	add    esp,0x10
c0022f66:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022f69:	43                   	inc    ebx
c0022f6a:	e9 2b ff ff ff       	jmp    c0022e9a <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022f6f:	83 c4 10             	add    esp,0x10
c0022f72:	5b                   	pop    ebx
c0022f73:	5e                   	pop    esi
c0022f74:	5f                   	pop    edi
c0022f75:	c3                   	ret    

c0022f76 <SoundDevice::getAudio(int, float*, float*)>:
c0022f76:	55                   	push   ebp
c0022f77:	57                   	push   edi
c0022f78:	56                   	push   esi
c0022f79:	53                   	push   ebx
c0022f7a:	31 db                	xor    ebx,ebx
c0022f7c:	83 ec 20             	sub    esp,0x20
c0022f7f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022f83:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022f87:	c1 e0 02             	shl    eax,0x2
c0022f8a:	50                   	push   eax
c0022f8b:	6a 00                	push   0x0
c0022f8d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022f91:	e8 d6 d7 fd ff       	call   c000076c <memset>
c0022f96:	83 c4 10             	add    esp,0x10
c0022f99:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022f9d:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0022fa4:	85 c0                	test   eax,eax
c0022fa6:	0f 84 d7 00 00 00    	je     c0023083 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022fac:	83 ec 0c             	sub    esp,0xc
c0022faf:	50                   	push   eax
c0022fb0:	e8 a5 fb ff ff       	call   c0022b5a <SoundChannel::paused()>
c0022fb5:	83 c4 10             	add    esp,0x10
c0022fb8:	84 c0                	test   al,al
c0022fba:	0f 85 c3 00 00 00    	jne    c0023083 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022fc0:	83 ec 0c             	sub    esp,0xc
c0022fc3:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022fca:	e8 19 fa ff ff       	call   c00229e8 <SoundChannel::getVolume()>
c0022fcf:	83 c4 10             	add    esp,0x10
c0022fd2:	85 c0                	test   eax,eax
c0022fd4:	0f 84 a9 00 00 00    	je     c0023083 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022fda:	83 ec 0c             	sub    esp,0xc
c0022fdd:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022fe4:	e8 ff f9 ff ff       	call   c00229e8 <SoundChannel::getVolume()>
c0022fe9:	83 ec 0c             	sub    esp,0xc
c0022fec:	50                   	push   eax
c0022fed:	e8 9d 4b 00 00       	call   c0027b8f <__floatsisf>
c0022ff2:	59                   	pop    ecx
c0022ff3:	5d                   	pop    ebp
c0022ff4:	31 ed                	xor    ebp,ebp
c0022ff6:	68 00 00 c8 42       	push   0x42c80000
c0022ffb:	50                   	push   eax
c0022ffc:	e8 63 49 00 00       	call   c0027964 <__divsf3>
c0023001:	83 c4 10             	add    esp,0x10
c0023004:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023008:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c002300c:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0023012:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0023016:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002301d:	e8 60 fb ff ff       	call   c0022b82 <SoundChannel::unbuffer(float*, int, int)>
c0023022:	83 c4 20             	add    esp,0x20
c0023025:	89 c1                	mov    ecx,eax
c0023027:	39 cd                	cmp    ebp,ecx
c0023029:	7d 52                	jge    c002307d <SoundDevice::getAudio(int, float*, float*)+0x107>
c002302b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002302f:	50                   	push   eax
c0023030:	50                   	push   eax
c0023031:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0023035:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0023038:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002303c:	e8 60 47 00 00       	call   c00277a1 <__mulsf3>
c0023041:	5a                   	pop    edx
c0023042:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023046:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c002304c:	e8 3e 4b 00 00       	call   c0027b8f <__floatsisf>
c0023051:	59                   	pop    ecx
c0023052:	5a                   	pop    edx
c0023053:	50                   	push   eax
c0023054:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023058:	e8 07 49 00 00       	call   c0027964 <__divsf3>
c002305d:	59                   	pop    ecx
c002305e:	5a                   	pop    edx
c002305f:	50                   	push   eax
c0023060:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0023064:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0023067:	e8 12 44 00 00       	call   c002747e <__addsf3>
c002306c:	83 c4 10             	add    esp,0x10
c002306f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023073:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0023077:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c002307a:	45                   	inc    ebp
c002307b:	eb aa                	jmp    c0023027 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c002307d:	39 cf                	cmp    edi,ecx
c002307f:	7e 02                	jle    c0023083 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0023081:	89 cf                	mov    edi,ecx
c0023083:	43                   	inc    ebx
c0023084:	83 fb 20             	cmp    ebx,0x20
c0023087:	0f 85 10 ff ff ff    	jne    c0022f9d <SoundDevice::getAudio(int, float*, float*)+0x27>
c002308d:	83 c4 1c             	add    esp,0x1c
c0023090:	89 f8                	mov    eax,edi
c0023092:	5b                   	pop    ebx
c0023093:	5e                   	pop    esi
c0023094:	5f                   	pop    edi
c0023095:	5d                   	pop    ebp
c0023096:	c3                   	ret    
c0023097:	90                   	nop

c0023098 <PCI::open(int, int, void*)>:
c0023098:	83 ec 18             	sub    esp,0x18
c002309b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002309f:	8b 10                	mov    edx,DWORD PTR [eax]
c00230a1:	50                   	push   eax
c00230a2:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00230a5:	31 c0                	xor    eax,eax
c00230a7:	83 c4 1c             	add    esp,0x1c
c00230aa:	c3                   	ret    
c00230ab:	90                   	nop

c00230ac <PCI::close(int, int, void*)>:
c00230ac:	31 c0                	xor    eax,eax
c00230ae:	c3                   	ret    
c00230af:	90                   	nop

c00230b0 <PCI::PCI()>:
c00230b0:	83 ec 0c             	sub    esp,0xc
c00230b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230b7:	83 ec 08             	sub    esp,0x8
c00230ba:	68 bc d4 02 c0       	push   0xc002d4bc
c00230bf:	50                   	push   eax
c00230c0:	e8 a9 0a ff ff       	call   c0013b6e <Bus::Bus(char const*)>
c00230c5:	83 c4 10             	add    esp,0x10
c00230c8:	ba 44 d5 02 c0       	mov    edx,0xc002d544
c00230cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230d1:	89 10                	mov    DWORD PTR [eax],edx
c00230d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230d7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00230dd:	0f b6 d0             	movzx  edx,al
c00230e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230e4:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00230eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230ef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00230f5:	0f b6 d0             	movzx  edx,al
c00230f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230fc:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0023101:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023105:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002310b:	8d 50 01             	lea    edx,[eax+0x1]
c002310e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023112:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0023118:	0f b6 d0             	movzx  edx,al
c002311b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002311f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0023123:	83 c9 c0             	or     ecx,0xffffffc0
c0023126:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002312a:	90                   	nop
c002312b:	83 c4 0c             	add    esp,0xc
c002312e:	c3                   	ret    
c002312f:	90                   	nop

c0023130 <PCI::readBAR8(unsigned int, int)>:
c0023130:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023134:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023138:	f6 c2 01             	test   dl,0x1
c002313b:	74 07                	je     c0023144 <PCI::readBAR8(unsigned int, int)+0x14>
c002313d:	83 e2 fc             	and    edx,0xfffffffc
c0023140:	01 c2                	add    edx,eax
c0023142:	ec                   	in     al,dx
c0023143:	c3                   	ret    
c0023144:	83 e2 f0             	and    edx,0xfffffff0
c0023147:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c002314a:	c3                   	ret    
c002314b:	90                   	nop

c002314c <PCI::readBAR16(unsigned int, int)>:
c002314c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023150:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023154:	f6 c2 01             	test   dl,0x1
c0023157:	74 08                	je     c0023161 <PCI::readBAR16(unsigned int, int)+0x15>
c0023159:	83 e2 fc             	and    edx,0xfffffffc
c002315c:	01 c2                	add    edx,eax
c002315e:	66 ed                	in     ax,dx
c0023160:	c3                   	ret    
c0023161:	83 e2 f0             	and    edx,0xfffffff0
c0023164:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0023168:	c3                   	ret    
c0023169:	90                   	nop

c002316a <PCI::readBAR32(unsigned int, int)>:
c002316a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002316e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023172:	f6 c2 01             	test   dl,0x1
c0023175:	74 07                	je     c002317e <PCI::readBAR32(unsigned int, int)+0x14>
c0023177:	83 e2 fc             	and    edx,0xfffffffc
c002317a:	01 c2                	add    edx,eax
c002317c:	ed                   	in     eax,dx
c002317d:	c3                   	ret    
c002317e:	83 e2 f0             	and    edx,0xfffffff0
c0023181:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0023184:	c3                   	ret    
c0023185:	90                   	nop

c0023186 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0023186:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002318a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002318e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023192:	f6 c2 01             	test   dl,0x1
c0023195:	74 07                	je     c002319e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0023197:	83 e2 fc             	and    edx,0xfffffffc
c002319a:	01 ca                	add    edx,ecx
c002319c:	ee                   	out    dx,al
c002319d:	c3                   	ret    
c002319e:	83 e2 f0             	and    edx,0xfffffff0
c00231a1:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00231a4:	c3                   	ret    
c00231a5:	90                   	nop

c00231a6 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00231a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00231aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00231ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00231b2:	f6 c2 01             	test   dl,0x1
c00231b5:	74 08                	je     c00231bf <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00231b7:	83 e2 fc             	and    edx,0xfffffffc
c00231ba:	01 ca                	add    edx,ecx
c00231bc:	66 ef                	out    dx,ax
c00231be:	c3                   	ret    
c00231bf:	83 e2 f0             	and    edx,0xfffffff0
c00231c2:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00231c6:	c3                   	ret    
c00231c7:	90                   	nop

c00231c8 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00231c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00231cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00231d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00231d4:	f6 c2 01             	test   dl,0x1
c00231d7:	74 07                	je     c00231e0 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00231d9:	83 e2 fc             	and    edx,0xfffffffc
c00231dc:	01 ca                	add    edx,ecx
c00231de:	ef                   	out    dx,eax
c00231df:	c3                   	ret    
c00231e0:	83 e2 f0             	and    edx,0xfffffff0
c00231e3:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00231e6:	c3                   	ret    
c00231e7:	90                   	nop

c00231e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00231e8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00231ec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00231f1:	89 ca                	mov    edx,ecx
c00231f3:	c1 e0 10             	shl    eax,0x10
c00231f6:	81 e2 fc 00 00 00    	and    edx,0xfc
c00231fc:	09 d0                	or     eax,edx
c00231fe:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0023203:	c1 e2 08             	shl    edx,0x8
c0023206:	09 d0                	or     eax,edx
c0023208:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c002320d:	c1 e2 0b             	shl    edx,0xb
c0023210:	09 d0                	or     eax,edx
c0023212:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023217:	0d 00 00 00 80       	or     eax,0x80000000
c002321c:	ef                   	out    dx,eax
c002321d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023222:	ed                   	in     eax,dx
c0023223:	83 e1 02             	and    ecx,0x2
c0023226:	0f b6 c9             	movzx  ecx,cl
c0023229:	c1 e1 03             	shl    ecx,0x3
c002322c:	d3 e8                	shr    eax,cl
c002322e:	c3                   	ret    
c002322f:	90                   	nop

c0023230 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0023230:	6a 00                	push   0x0
c0023232:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023237:	50                   	push   eax
c0023238:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002323d:	50                   	push   eax
c002323e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023243:	50                   	push   eax
c0023244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023248:	e8 9b ff ff ff       	call   c00231e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002324d:	83 c4 14             	add    esp,0x14
c0023250:	c3                   	ret    
c0023251:	90                   	nop

c0023252 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0023252:	6a 0e                	push   0xe
c0023254:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023259:	50                   	push   eax
c002325a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002325f:	50                   	push   eax
c0023260:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023265:	50                   	push   eax
c0023266:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002326a:	e8 79 ff ff ff       	call   c00231e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002326f:	83 c4 14             	add    esp,0x14
c0023272:	0f b6 c0             	movzx  eax,al
c0023275:	c3                   	ret    

c0023276 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0023276:	55                   	push   ebp
c0023277:	57                   	push   edi
c0023278:	56                   	push   esi
c0023279:	53                   	push   ebx
c002327a:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c002327f:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0023284:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0023289:	6a 0a                	push   0xa
c002328b:	56                   	push   esi
c002328c:	55                   	push   ebp
c002328d:	57                   	push   edi
c002328e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0023292:	e8 51 ff ff ff       	call   c00231e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023297:	6a 0a                	push   0xa
c0023299:	89 c3                	mov    ebx,eax
c002329b:	56                   	push   esi
c002329c:	0f b6 db             	movzx  ebx,bl
c002329f:	55                   	push   ebp
c00232a0:	57                   	push   edi
c00232a1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00232a5:	e8 3e ff ff ff       	call   c00231e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00232aa:	83 c4 28             	add    esp,0x28
c00232ad:	25 00 ff 00 00       	and    eax,0xff00
c00232b2:	09 d8                	or     eax,ebx
c00232b4:	5b                   	pop    ebx
c00232b5:	5e                   	pop    esi
c00232b6:	5f                   	pop    edi
c00232b7:	5d                   	pop    ebp
c00232b8:	c3                   	ret    
c00232b9:	90                   	nop

c00232ba <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00232ba:	6a 08                	push   0x8
c00232bc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232c1:	50                   	push   eax
c00232c2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232c7:	50                   	push   eax
c00232c8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232cd:	50                   	push   eax
c00232ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00232d2:	e8 11 ff ff ff       	call   c00231e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00232d7:	83 c4 14             	add    esp,0x14
c00232da:	0f b6 c4             	movzx  eax,ah
c00232dd:	c3                   	ret    

c00232de <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00232de:	6a 08                	push   0x8
c00232e0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232e5:	50                   	push   eax
c00232e6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232eb:	50                   	push   eax
c00232ec:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232f1:	50                   	push   eax
c00232f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00232f6:	e8 ed fe ff ff       	call   c00231e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00232fb:	83 c4 14             	add    esp,0x14
c00232fe:	c3                   	ret    
c00232ff:	90                   	nop

c0023300 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0023300:	6a 3c                	push   0x3c
c0023302:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023307:	50                   	push   eax
c0023308:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002330d:	50                   	push   eax
c002330e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023313:	50                   	push   eax
c0023314:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023318:	e8 cb fe ff ff       	call   c00231e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002331d:	83 c4 14             	add    esp,0x14
c0023320:	c3                   	ret    
c0023321:	90                   	nop

c0023322 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0023322:	6a 18                	push   0x18
c0023324:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023329:	50                   	push   eax
c002332a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002332f:	50                   	push   eax
c0023330:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023335:	50                   	push   eax
c0023336:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002333a:	e8 a9 fe ff ff       	call   c00231e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002333f:	83 c4 14             	add    esp,0x14
c0023342:	0f b6 c4             	movzx  eax,ah
c0023345:	c3                   	ret    

c0023346 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0023346:	55                   	push   ebp
c0023347:	57                   	push   edi
c0023348:	56                   	push   esi
c0023349:	53                   	push   ebx
c002334a:	50                   	push   eax
c002334b:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002334f:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0023354:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0023359:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c002335e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0023365:	8d 43 12             	lea    eax,[ebx+0x12]
c0023368:	83 c3 10             	add    ebx,0x10
c002336b:	0f b6 c0             	movzx  eax,al
c002336e:	0f b6 db             	movzx  ebx,bl
c0023371:	50                   	push   eax
c0023372:	51                   	push   ecx
c0023373:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023377:	57                   	push   edi
c0023378:	55                   	push   ebp
c0023379:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002337d:	e8 66 fe ff ff       	call   c00231e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023382:	53                   	push   ebx
c0023383:	89 c6                	mov    esi,eax
c0023385:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023389:	c1 e6 10             	shl    esi,0x10
c002338c:	51                   	push   ecx
c002338d:	57                   	push   edi
c002338e:	55                   	push   ebp
c002338f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023393:	e8 50 fe ff ff       	call   c00231e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023398:	83 c4 2c             	add    esp,0x2c
c002339b:	0f b7 c0             	movzx  eax,ax
c002339e:	5b                   	pop    ebx
c002339f:	09 f0                	or     eax,esi
c00233a1:	5e                   	pop    esi
c00233a2:	5f                   	pop    edi
c00233a3:	5d                   	pop    ebp
c00233a4:	c3                   	ret    
c00233a5:	90                   	nop

c00233a6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00233a6:	53                   	push   ebx
c00233a7:	ba f8 0c 00 00       	mov    edx,0xcf8
c00233ac:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00233b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00233b5:	c1 e1 10             	shl    ecx,0x10
c00233b8:	25 fc 00 00 00       	and    eax,0xfc
c00233bd:	09 c1                	or     ecx,eax
c00233bf:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00233c4:	c1 e0 08             	shl    eax,0x8
c00233c7:	09 c1                	or     ecx,eax
c00233c9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00233ce:	c1 e0 0b             	shl    eax,0xb
c00233d1:	09 c1                	or     ecx,eax
c00233d3:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00233d9:	89 c8                	mov    eax,ecx
c00233db:	ef                   	out    dx,eax
c00233dc:	ba fc 0c 00 00       	mov    edx,0xcfc
c00233e1:	ed                   	in     eax,dx
c00233e2:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00233e7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00233ec:	74 0a                	je     c00233f8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c00233ee:	0f b7 d8             	movzx  ebx,ax
c00233f1:	89 d0                	mov    eax,edx
c00233f3:	c1 e0 10             	shl    eax,0x10
c00233f6:	eb 05                	jmp    c00233fd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c00233f8:	66 31 c0             	xor    ax,ax
c00233fb:	89 d3                	mov    ebx,edx
c00233fd:	09 c3                	or     ebx,eax
c00233ff:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023404:	89 c8                	mov    eax,ecx
c0023406:	ef                   	out    dx,eax
c0023407:	ba fc 0c 00 00       	mov    edx,0xcfc
c002340c:	89 d8                	mov    eax,ebx
c002340e:	ef                   	out    dx,eax
c002340f:	5b                   	pop    ebx
c0023410:	c3                   	ret    
c0023411:	90                   	nop

c0023412 <PCI::pciDetailsToFilepath(PCIDeviceInfo)>:
c0023412:	31 c0                	xor    eax,eax
c0023414:	c3                   	ret    
c0023415:	90                   	nop

c0023416 <PCI::checkBus(unsigned char)>:
c0023416:	56                   	push   esi
c0023417:	53                   	push   ebx
c0023418:	31 db                	xor    ebx,ebx
c002341a:	51                   	push   ecx
c002341b:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023420:	52                   	push   edx
c0023421:	53                   	push   ebx
c0023422:	43                   	inc    ebx
c0023423:	56                   	push   esi
c0023424:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023428:	e8 41 03 00 00       	call   c002376e <PCI::checkDevice(unsigned char, unsigned char)>
c002342d:	83 c4 10             	add    esp,0x10
c0023430:	83 fb 20             	cmp    ebx,0x20
c0023433:	75 eb                	jne    c0023420 <PCI::checkBus(unsigned char)+0xa>
c0023435:	58                   	pop    eax
c0023436:	5b                   	pop    ebx
c0023437:	5e                   	pop    esi
c0023438:	c3                   	ret    
c0023439:	90                   	nop

c002343a <PCI::foundDevice(PCIDeviceInfo)>:
c002343a:	55                   	push   ebp
c002343b:	57                   	push   edi
c002343c:	56                   	push   esi
c002343d:	53                   	push   ebx
c002343e:	83 ec 1c             	sub    esp,0x1c
c0023441:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023445:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c002344b:	0f 84 68 01 00 00    	je     c00235b9 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c0023451:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0023455:	66 81 f9 06 04       	cmp    cx,0x406
c002345a:	75 2c                	jne    c0023488 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c002345c:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0023461:	50                   	push   eax
c0023462:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0023467:	50                   	push   eax
c0023468:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c002346d:	50                   	push   eax
c002346e:	56                   	push   esi
c002346f:	e8 ae fe ff ff       	call   c0023322 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0023474:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023478:	0f b6 c0             	movzx  eax,al
c002347b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c002347f:	83 c4 2c             	add    esp,0x2c
c0023482:	5b                   	pop    ebx
c0023483:	5e                   	pop    esi
c0023484:	5f                   	pop    edi
c0023485:	5d                   	pop    ebp
c0023486:	eb 8e                	jmp    c0023416 <PCI::checkBus(unsigned char)>
c0023488:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002348c:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0023492:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023496:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c002349a:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c002349e:	88 d3                	mov    bl,dl
c00234a0:	85 c0                	test   eax,eax
c00234a2:	74 33                	je     c00234d7 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00234a4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00234a7:	85 d2                	test   edx,edx
c00234a9:	74 28                	je     c00234d3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00234ab:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00234b1:	31 ef                	xor    edi,ebp
c00234b3:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c00234b9:	75 18                	jne    c00234d3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00234bb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00234bf:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c00234c5:	75 0c                	jne    c00234d3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00234c7:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c00234cd:	0f 84 e6 00 00 00    	je     c00235b9 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c00234d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00234d5:	eb c9                	jmp    c00234a0 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c00234d7:	66 81 f9 01 06       	cmp    cx,0x601
c00234dc:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00234e0:	75 19                	jne    c00234fb <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00234e2:	83 ec 0c             	sub    esp,0xc
c00234e5:	68 64 01 00 00       	push   0x164
c00234ea:	e8 3f c4 fe ff       	call   c000f92e <malloc>
c00234ef:	89 c5                	mov    ebp,eax
c00234f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00234f4:	e8 ab 0f 00 00       	call   c00244a4 <SATABus::SATABus()>
c00234f9:	eb 1e                	jmp    c0023519 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00234fb:	66 81 f9 01 01       	cmp    cx,0x101
c0023500:	75 60                	jne    c0023562 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0023502:	83 ec 0c             	sub    esp,0xc
c0023505:	68 70 02 00 00       	push   0x270
c002350a:	e8 1f c4 fe ff       	call   c000f92e <malloc>
c002350f:	89 c5                	mov    ebp,eax
c0023511:	89 04 24             	mov    DWORD PTR [esp],eax
c0023514:	e8 19 03 00 00       	call   c0023832 <IDE::IDE()>
c0023519:	58                   	pop    eax
c002351a:	5a                   	pop    edx
c002351b:	55                   	push   ebp
c002351c:	56                   	push   esi
c002351d:	e8 ce 0d ff ff       	call   c00142f0 <Device::addChild(Device*)>
c0023522:	83 ec 1c             	sub    esp,0x1c
c0023525:	b9 09 00 00 00       	mov    ecx,0x9
c002352a:	fc                   	cld    
c002352b:	89 e7                	mov    edi,esp
c002352d:	89 de                	mov    esi,ebx
c002352f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023531:	55                   	push   ebp
c0023532:	e8 d5 0c ff ff       	call   c001420c <Device::preOpenPCI(PCIDeviceInfo)>
c0023537:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002353a:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002353e:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0023546:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c002354e:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0023556:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023559:	83 c4 4c             	add    esp,0x4c
c002355c:	5b                   	pop    ebx
c002355d:	5e                   	pop    esi
c002355e:	5f                   	pop    edi
c002355f:	5d                   	pop    ebp
c0023560:	ff e0                	jmp    eax
c0023562:	50                   	push   eax
c0023563:	0f b6 44 24 39       	movzx  eax,BYTE PTR [esp+0x39]
c0023568:	50                   	push   eax
c0023569:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c002356e:	50                   	push   eax
c002356f:	68 c4 d4 02 c0       	push   0xc002d4c4
c0023574:	e8 54 f9 fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0023579:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
c0023580:	e8 a9 c3 fe ff       	call   c000f92e <malloc>
c0023585:	5a                   	pop    edx
c0023586:	89 c5                	mov    ebp,eax
c0023588:	59                   	pop    ecx
c0023589:	68 e0 d4 02 c0       	push   0xc002d4e0
c002358e:	50                   	push   eax
c002358f:	e8 52 10 ff ff       	call   c00145e6 <DriverlessDevice::DriverlessDevice(char const*)>
c0023594:	5f                   	pop    edi
c0023595:	58                   	pop    eax
c0023596:	55                   	push   ebp
c0023597:	56                   	push   esi
c0023598:	e8 53 0d ff ff       	call   c00142f0 <Device::addChild(Device*)>
c002359d:	b9 09 00 00 00       	mov    ecx,0x9
c00235a2:	fc                   	cld    
c00235a3:	89 df                	mov    edi,ebx
c00235a5:	89 de                	mov    esi,ebx
c00235a7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00235a9:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00235ad:	83 c4 2c             	add    esp,0x2c
c00235b0:	5b                   	pop    ebx
c00235b1:	5e                   	pop    esi
c00235b2:	5f                   	pop    edi
c00235b3:	5d                   	pop    ebp
c00235b4:	e9 53 0c ff ff       	jmp    c001420c <Device::preOpenPCI(PCIDeviceInfo)>
c00235b9:	83 c4 1c             	add    esp,0x1c
c00235bc:	5b                   	pop    ebx
c00235bd:	5e                   	pop    esi
c00235be:	5f                   	pop    edi
c00235bf:	5d                   	pop    ebp
c00235c0:	c3                   	ret    
c00235c1:	90                   	nop

c00235c2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00235c2:	55                   	push   ebp
c00235c3:	57                   	push   edi
c00235c4:	56                   	push   esi
c00235c5:	53                   	push   ebx
c00235c6:	83 ec 5c             	sub    esp,0x5c
c00235c9:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00235cd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00235d1:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00235d5:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c00235da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00235de:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c00235e2:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c00235e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00235eb:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00235f0:	6a 0c                	push   0xc
c00235f2:	55                   	push   ebp
c00235f3:	53                   	push   ebx
c00235f4:	57                   	push   edi
c00235f5:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c00235fc:	e8 e7 fb ff ff       	call   c00231e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023601:	55                   	push   ebp
c0023602:	53                   	push   ebx
c0023603:	57                   	push   edi
c0023604:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002360b:	e8 66 fc ff ff       	call   c0023276 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0023610:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0023615:	83 c4 24             	add    esp,0x24
c0023618:	55                   	push   ebp
c0023619:	53                   	push   ebx
c002361a:	57                   	push   edi
c002361b:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c002361f:	e8 dc fc ff ff       	call   c0023300 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0023624:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0023628:	6a 3c                	push   0x3c
c002362a:	55                   	push   ebp
c002362b:	53                   	push   ebx
c002362c:	57                   	push   edi
c002362d:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0023634:	e8 af fb ff ff       	call   c00231e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023639:	0f b6 c4             	movzx  eax,ah
c002363c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0023640:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0023644:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0023648:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c002364d:	83 c4 24             	add    esp,0x24
c0023650:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0023656:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c002365d:	74 6c                	je     c00236cb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c002365f:	31 f6                	xor    esi,esi
c0023661:	8b 15 e8 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002eee8
c0023667:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c002366d:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0023673:	7e 56                	jle    c00236cb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0023675:	8d 14 f2             	lea    edx,[edx+esi*8]
c0023678:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c002367f:	39 cb                	cmp    ebx,ecx
c0023681:	75 45                	jne    c00236c8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0023683:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c002368a:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c002368e:	75 38                	jne    c00236c8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0023690:	83 ec 0c             	sub    esp,0xc
c0023693:	68 fa d4 02 c0       	push   0xc002d4fa
c0023698:	e8 30 f8 fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c002369d:	8b 15 e8 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002eee8
c00236a3:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00236a9:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c00236b1:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c00236b5:	52                   	push   edx
c00236b6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00236ba:	53                   	push   ebx
c00236bb:	68 1f d5 02 c0       	push   0xc002d51f
c00236c0:	e8 08 f8 fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00236c5:	83 c4 20             	add    esp,0x20
c00236c8:	46                   	inc    esi
c00236c9:	eb 96                	jmp    c0023661 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c00236cb:	31 d2                	xor    edx,edx
c00236cd:	83 ec 0c             	sub    esp,0xc
c00236d0:	55                   	push   ebp
c00236d1:	53                   	push   ebx
c00236d2:	57                   	push   edi
c00236d3:	52                   	push   edx
c00236d4:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00236d8:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00236df:	e8 62 fc ff ff       	call   c0023346 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c00236e4:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c00236e8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00236ec:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00236f0:	42                   	inc    edx
c00236f1:	83 c4 20             	add    esp,0x20
c00236f4:	83 fa 06             	cmp    edx,0x6
c00236f7:	75 d4                	jne    c00236cd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c00236f9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00236fd:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0023701:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0023705:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0023709:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002370d:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0023711:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0023716:	86 e0                	xchg   al,ah
c0023718:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c002371d:	55                   	push   ebp
c002371e:	53                   	push   ebx
c002371f:	57                   	push   edi
c0023720:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0023724:	e8 91 fb ff ff       	call   c00232ba <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0023729:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002372d:	55                   	push   ebp
c002372e:	53                   	push   ebx
c002372f:	57                   	push   edi
c0023730:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0023737:	e8 f4 fa ff ff       	call   c0023230 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002373c:	83 ec 0c             	sub    esp,0xc
c002373f:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0023744:	b9 09 00 00 00       	mov    ecx,0x9
c0023749:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c002374d:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0023751:	fc                   	cld    
c0023752:	89 e7                	mov    edi,esp
c0023754:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023756:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002375d:	e8 d8 fc ff ff       	call   c002343a <PCI::foundDevice(PCIDeviceInfo)>
c0023762:	81 c4 8c 00 00 00    	add    esp,0x8c
c0023768:	5b                   	pop    ebx
c0023769:	5e                   	pop    esi
c002376a:	5f                   	pop    edi
c002376b:	5d                   	pop    ebp
c002376c:	c3                   	ret    
c002376d:	90                   	nop

c002376e <PCI::checkDevice(unsigned char, unsigned char)>:
c002376e:	55                   	push   ebp
c002376f:	57                   	push   edi
c0023770:	56                   	push   esi
c0023771:	53                   	push   ebx
c0023772:	83 ec 0c             	sub    esp,0xc
c0023775:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0023779:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002377e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0023783:	6a 00                	push   0x0
c0023785:	56                   	push   esi
c0023786:	57                   	push   edi
c0023787:	55                   	push   ebp
c0023788:	e8 a3 fa ff ff       	call   c0023230 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002378d:	6a 00                	push   0x0
c002378f:	56                   	push   esi
c0023790:	57                   	push   edi
c0023791:	55                   	push   ebp
c0023792:	e8 2b fe ff ff       	call   c00235c2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023797:	83 c4 20             	add    esp,0x20
c002379a:	6a 00                	push   0x0
c002379c:	56                   	push   esi
c002379d:	57                   	push   edi
c002379e:	55                   	push   ebp
c002379f:	e8 ae fa ff ff       	call   c0023252 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00237a4:	83 c4 10             	add    esp,0x10
c00237a7:	84 c0                	test   al,al
c00237a9:	79 27                	jns    c00237d2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00237ab:	bb 01 00 00 00       	mov    ebx,0x1
c00237b0:	53                   	push   ebx
c00237b1:	56                   	push   esi
c00237b2:	57                   	push   edi
c00237b3:	55                   	push   ebp
c00237b4:	e8 77 fa ff ff       	call   c0023230 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00237b9:	83 c4 10             	add    esp,0x10
c00237bc:	66 40                	inc    ax
c00237be:	74 0c                	je     c00237cc <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c00237c0:	53                   	push   ebx
c00237c1:	56                   	push   esi
c00237c2:	57                   	push   edi
c00237c3:	55                   	push   ebp
c00237c4:	e8 f9 fd ff ff       	call   c00235c2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00237c9:	83 c4 10             	add    esp,0x10
c00237cc:	43                   	inc    ebx
c00237cd:	83 fb 08             	cmp    ebx,0x8
c00237d0:	75 de                	jne    c00237b0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00237d2:	83 c4 0c             	add    esp,0xc
c00237d5:	5b                   	pop    ebx
c00237d6:	5e                   	pop    esi
c00237d7:	5f                   	pop    edi
c00237d8:	5d                   	pop    ebp
c00237d9:	c3                   	ret    

c00237da <PCI::detect()>:
c00237da:	56                   	push   esi
c00237db:	53                   	push   ebx
c00237dc:	53                   	push   ebx
c00237dd:	31 db                	xor    ebx,ebx
c00237df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00237e3:	6a 00                	push   0x0
c00237e5:	6a 00                	push   0x0
c00237e7:	6a 00                	push   0x0
c00237e9:	56                   	push   esi
c00237ea:	e8 63 fa ff ff       	call   c0023252 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00237ef:	83 c4 10             	add    esp,0x10
c00237f2:	a8 80                	test   al,0x80
c00237f4:	75 21                	jne    c0023817 <PCI::detect()+0x3d>
c00237f6:	51                   	push   ecx
c00237f7:	51                   	push   ecx
c00237f8:	6a 00                	push   0x0
c00237fa:	56                   	push   esi
c00237fb:	e8 16 fc ff ff       	call   c0023416 <PCI::checkBus(unsigned char)>
c0023800:	83 c4 10             	add    esp,0x10
c0023803:	eb 24                	jmp    c0023829 <PCI::detect()+0x4f>
c0023805:	52                   	push   edx
c0023806:	52                   	push   edx
c0023807:	53                   	push   ebx
c0023808:	43                   	inc    ebx
c0023809:	56                   	push   esi
c002380a:	e8 07 fc ff ff       	call   c0023416 <PCI::checkBus(unsigned char)>
c002380f:	83 c4 10             	add    esp,0x10
c0023812:	83 fb 08             	cmp    ebx,0x8
c0023815:	74 12                	je     c0023829 <PCI::detect()+0x4f>
c0023817:	53                   	push   ebx
c0023818:	6a 00                	push   0x0
c002381a:	6a 00                	push   0x0
c002381c:	56                   	push   esi
c002381d:	e8 0e fa ff ff       	call   c0023230 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023822:	83 c4 10             	add    esp,0x10
c0023825:	66 40                	inc    ax
c0023827:	74 dc                	je     c0023805 <PCI::detect()+0x2b>
c0023829:	58                   	pop    eax
c002382a:	5b                   	pop    ebx
c002382b:	5e                   	pop    esi
c002382c:	c3                   	ret    
c002382d:	90                   	nop

c002382e <IDE::close(int, int, void*)>:
c002382e:	83 c8 ff             	or     eax,0xffffffff
c0023831:	c3                   	ret    

c0023832 <IDE::IDE()>:
c0023832:	83 ec 0c             	sub    esp,0xc
c0023835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023839:	83 ec 08             	sub    esp,0x8
c002383c:	68 68 d5 02 c0       	push   0xc002d568
c0023841:	50                   	push   eax
c0023842:	e8 43 0e ff ff       	call   c001468a <HardDiskController::HardDiskController(char const*)>
c0023847:	83 c4 10             	add    esp,0x10
c002384a:	ba a8 d7 02 c0       	mov    edx,0xc002d7a8
c002384f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023853:	89 10                	mov    DWORD PTR [eax],edx
c0023855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023859:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023860:	90                   	nop
c0023861:	83 c4 0c             	add    esp,0xc
c0023864:	c3                   	ret    
c0023865:	90                   	nop

c0023866 <IDE::prepareInterrupt(unsigned char)>:
c0023866:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002386b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002386f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023877:	c3                   	ret    

c0023878 <selectDrive(unsigned char, unsigned char)>:
c0023878:	c3                   	ret    
c0023879:	90                   	nop

c002387a <IDE::getBase(unsigned char)>:
c002387a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002387f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023883:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002388b:	c3                   	ret    

c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002388c:	55                   	push   ebp
c002388d:	57                   	push   edi
c002388e:	56                   	push   esi
c002388f:	53                   	push   ebx
c0023890:	83 ec 1c             	sub    esp,0x1c
c0023893:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023897:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002389b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002389e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00238a2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00238a6:	80 f9 03             	cmp    cl,0x3
c00238a9:	77 51                	ja     c00238fc <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00238ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00238af:	0f b6 f2             	movzx  esi,dl
c00238b2:	0f b6 db             	movzx  ebx,bl
c00238b5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00238b8:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00238bc:	83 ca 80             	or     edx,0xffffff80
c00238bf:	0f b6 d2             	movzx  edx,dl
c00238c2:	52                   	push   edx
c00238c3:	6a 0c                	push   0xc
c00238c5:	56                   	push   esi
c00238c6:	57                   	push   edi
c00238c7:	e8 c0 ff ff ff       	call   c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238cc:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00238d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00238d5:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00238d9:	ee                   	out    dx,al
c00238da:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00238df:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00238e3:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00238e7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00238eb:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00238f3:	83 c4 2c             	add    esp,0x2c
c00238f6:	5b                   	pop    ebx
c00238f7:	5e                   	pop    esi
c00238f8:	5f                   	pop    edi
c00238f9:	5d                   	pop    ebp
c00238fa:	eb 90                	jmp    c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238fc:	80 fb 07             	cmp    bl,0x7
c00238ff:	77 12                	ja     c0023913 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023901:	0f b6 d2             	movzx  edx,dl
c0023904:	0f b6 db             	movzx  ebx,bl
c0023907:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c002390f:	89 da                	mov    edx,ebx
c0023911:	eb 2f                	jmp    c0023942 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023913:	80 fb 0d             	cmp    bl,0xd
c0023916:	77 13                	ja     c002392b <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023918:	0f b6 d2             	movzx  edx,dl
c002391b:	0f b6 db             	movzx  ebx,bl
c002391e:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023925:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023929:	eb 17                	jmp    c0023942 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002392b:	80 fb 15             	cmp    bl,0x15
c002392e:	77 13                	ja     c0023943 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023930:	0f b6 d2             	movzx  edx,dl
c0023933:	0f b6 db             	movzx  ebx,bl
c0023936:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002393e:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023942:	ee                   	out    dx,al
c0023943:	83 c4 1c             	add    esp,0x1c
c0023946:	5b                   	pop    ebx
c0023947:	5e                   	pop    esi
c0023948:	5f                   	pop    edi
c0023949:	5d                   	pop    ebp
c002394a:	c3                   	ret    
c002394b:	90                   	nop

c002394c <IDE::read(unsigned char, unsigned char)>:
c002394c:	55                   	push   ebp
c002394d:	57                   	push   edi
c002394e:	56                   	push   esi
c002394f:	53                   	push   ebx
c0023950:	83 ec 1c             	sub    esp,0x1c
c0023953:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023957:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002395b:	8d 43 f8             	lea    eax,[ebx-0x8]
c002395e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023962:	3c 03                	cmp    al,0x3
c0023964:	77 43                	ja     c00239a9 <IDE::read(unsigned char, unsigned char)+0x5d>
c0023966:	0f b6 f2             	movzx  esi,dl
c0023969:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002396c:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023970:	83 c8 80             	or     eax,0xffffff80
c0023973:	0f b6 c0             	movzx  eax,al
c0023976:	50                   	push   eax
c0023977:	6a 0c                	push   0xc
c0023979:	56                   	push   esi
c002397a:	57                   	push   edi
c002397b:	e8 0c ff ff ff       	call   c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023980:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023985:	0f b6 c3             	movzx  eax,bl
c0023988:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c002398c:	ec                   	in     al,dx
c002398d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023991:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023996:	52                   	push   edx
c0023997:	6a 0c                	push   0xc
c0023999:	56                   	push   esi
c002399a:	57                   	push   edi
c002399b:	e8 ec fe ff ff       	call   c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239a0:	83 c4 20             	add    esp,0x20
c00239a3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00239a7:	eb 49                	jmp    c00239f2 <IDE::read(unsigned char, unsigned char)+0xa6>
c00239a9:	80 fb 07             	cmp    bl,0x7
c00239ac:	77 12                	ja     c00239c0 <IDE::read(unsigned char, unsigned char)+0x74>
c00239ae:	0f b6 d2             	movzx  edx,dl
c00239b1:	0f b6 c3             	movzx  eax,bl
c00239b4:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00239bc:	89 c2                	mov    edx,eax
c00239be:	eb 31                	jmp    c00239f1 <IDE::read(unsigned char, unsigned char)+0xa5>
c00239c0:	80 fb 0d             	cmp    bl,0xd
c00239c3:	77 13                	ja     c00239d8 <IDE::read(unsigned char, unsigned char)+0x8c>
c00239c5:	0f b6 d2             	movzx  edx,dl
c00239c8:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00239cf:	0f b6 d3             	movzx  edx,bl
c00239d2:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00239d6:	eb 19                	jmp    c00239f1 <IDE::read(unsigned char, unsigned char)+0xa5>
c00239d8:	31 c0                	xor    eax,eax
c00239da:	80 fb 15             	cmp    bl,0x15
c00239dd:	77 13                	ja     c00239f2 <IDE::read(unsigned char, unsigned char)+0xa6>
c00239df:	0f b6 d2             	movzx  edx,dl
c00239e2:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00239ea:	0f b6 d3             	movzx  edx,bl
c00239ed:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00239f1:	ec                   	in     al,dx
c00239f2:	83 c4 1c             	add    esp,0x1c
c00239f5:	5b                   	pop    ebx
c00239f6:	5e                   	pop    esi
c00239f7:	5f                   	pop    edi
c00239f8:	5d                   	pop    ebp
c00239f9:	c3                   	ret    

c00239fa <IDE::waitInterrupt(unsigned char)>:
c00239fa:	55                   	push   ebp
c00239fb:	57                   	push   edi
c00239fc:	56                   	push   esi
c00239fd:	53                   	push   ebx
c00239fe:	31 db                	xor    ebx,ebx
c0023a00:	83 ec 0c             	sub    esp,0xc
c0023a03:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023a07:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023a0c:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023a14:	89 e8                	mov    eax,ebp
c0023a16:	84 c0                	test   al,al
c0023a18:	75 34                	jne    c0023a4e <IDE::waitInterrupt(unsigned char)+0x54>
c0023a1a:	52                   	push   edx
c0023a1b:	6a 0c                	push   0xc
c0023a1d:	56                   	push   esi
c0023a1e:	57                   	push   edi
c0023a1f:	e8 28 ff ff ff       	call   c002394c <IDE::read(unsigned char, unsigned char)>
c0023a24:	83 c4 10             	add    esp,0x10
c0023a27:	a8 01                	test   al,0x1
c0023a29:	75 2b                	jne    c0023a56 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023a2b:	f6 c3 04             	test   bl,0x4
c0023a2e:	75 16                	jne    c0023a46 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023a30:	83 fb 32             	cmp    ebx,0x32
c0023a33:	7e 11                	jle    c0023a46 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023a35:	50                   	push   eax
c0023a36:	50                   	push   eax
c0023a37:	6a 00                	push   0x0
c0023a39:	68 80 96 98 00       	push   0x989680
c0023a3e:	e8 e6 ad ff ff       	call   c001e829 <nanoSleep(unsigned long long)>
c0023a43:	83 c4 10             	add    esp,0x10
c0023a46:	83 fb 3c             	cmp    ebx,0x3c
c0023a49:	74 0b                	je     c0023a56 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023a4b:	43                   	inc    ebx
c0023a4c:	eb be                	jmp    c0023a0c <IDE::waitInterrupt(unsigned char)+0x12>
c0023a4e:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023a56:	83 c4 0c             	add    esp,0xc
c0023a59:	89 e8                	mov    eax,ebp
c0023a5b:	5b                   	pop    ebx
c0023a5c:	5e                   	pop    esi
c0023a5d:	5f                   	pop    edi
c0023a5e:	5d                   	pop    ebp
c0023a5f:	c3                   	ret    

c0023a60 <ideChannel0IRQHandler(regs*, void*)>:
c0023a60:	83 ec 10             	sub    esp,0x10
c0023a63:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023a67:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023a6e:	6a 07                	push   0x7
c0023a70:	6a 00                	push   0x0
c0023a72:	50                   	push   eax
c0023a73:	e8 d4 fe ff ff       	call   c002394c <IDE::read(unsigned char, unsigned char)>
c0023a78:	83 c4 1c             	add    esp,0x1c
c0023a7b:	c3                   	ret    

c0023a7c <ideChannel1IRQHandler(regs*, void*)>:
c0023a7c:	83 ec 10             	sub    esp,0x10
c0023a7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023a83:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023a8a:	6a 07                	push   0x7
c0023a8c:	6a 01                	push   0x1
c0023a8e:	50                   	push   eax
c0023a8f:	e8 b8 fe ff ff       	call   c002394c <IDE::read(unsigned char, unsigned char)>
c0023a94:	83 c4 1c             	add    esp,0x1c
c0023a97:	c3                   	ret    

c0023a98 <IDE::enableIRQs(unsigned char, bool)>:
c0023a98:	57                   	push   edi
c0023a99:	56                   	push   esi
c0023a9a:	be 04 00 00 00       	mov    esi,0x4
c0023a9f:	53                   	push   ebx
c0023aa0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023aa5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023aa9:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023aae:	0f 94 c0             	sete   al
c0023ab1:	d1 e0                	shl    eax,1
c0023ab3:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023aba:	0f b6 c0             	movzx  eax,al
c0023abd:	50                   	push   eax
c0023abe:	6a 0c                	push   0xc
c0023ac0:	57                   	push   edi
c0023ac1:	53                   	push   ebx
c0023ac2:	e8 c5 fd ff ff       	call   c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ac7:	83 c4 10             	add    esp,0x10
c0023aca:	50                   	push   eax
c0023acb:	6a 0c                	push   0xc
c0023acd:	57                   	push   edi
c0023ace:	53                   	push   ebx
c0023acf:	e8 78 fe ff ff       	call   c002394c <IDE::read(unsigned char, unsigned char)>
c0023ad4:	83 c4 10             	add    esp,0x10
c0023ad7:	4e                   	dec    esi
c0023ad8:	75 f0                	jne    c0023aca <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023ada:	5b                   	pop    ebx
c0023adb:	5e                   	pop    esi
c0023adc:	5f                   	pop    edi
c0023add:	c3                   	ret    

c0023ade <IDE::open(int, int, void*)>:
c0023ade:	55                   	push   ebp
c0023adf:	57                   	push   edi
c0023ae0:	56                   	push   esi
c0023ae1:	53                   	push   ebx
c0023ae2:	83 ec 1c             	sub    esp,0x1c
c0023ae5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023ae9:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023af2:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023afb:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023b02:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023b09:	0f 85 b0 02 00 00    	jne    c0023dbf <IDE::open(int, int, void*)+0x2e1>
c0023b0f:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023b15:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023b19:	83 e0 7f             	and    eax,0x7f
c0023b1c:	3c 05                	cmp    al,0x5
c0023b1e:	74 04                	je     c0023b24 <IDE::open(int, int, void*)+0x46>
c0023b20:	3c 0f                	cmp    al,0xf
c0023b22:	75 32                	jne    c0023b56 <IDE::open(int, int, void*)+0x78>
c0023b24:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023b2a:	83 e0 fc             	and    eax,0xfffffffc
c0023b2d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023b34:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023b3a:	83 e0 fc             	and    eax,0xfffffffc
c0023b3d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023b44:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023b4a:	83 e0 fc             	and    eax,0xfffffffc
c0023b4d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023b54:	eb 14                	jmp    c0023b6a <IDE::open(int, int, void*)+0x8c>
c0023b56:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023b60:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023b6a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023b71:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023b78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023b7c:	89 c6                	mov    esi,eax
c0023b7e:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023b83:	c1 e6 10             	shl    esi,0x10
c0023b86:	89 e8                	mov    eax,ebp
c0023b88:	89 fa                	mov    edx,edi
c0023b8a:	c1 e0 0b             	shl    eax,0xb
c0023b8d:	09 f0                	or     eax,esi
c0023b8f:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023b96:	c1 e6 08             	shl    esi,0x8
c0023b99:	09 c6                	or     esi,eax
c0023b9b:	89 f0                	mov    eax,esi
c0023b9d:	0d 08 00 00 80       	or     eax,0x80000008
c0023ba2:	ef                   	out    dx,eax
c0023ba3:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023ba8:	89 ca                	mov    edx,ecx
c0023baa:	ed                   	in     eax,dx
c0023bab:	c1 e8 10             	shr    eax,0x10
c0023bae:	3d ff ff 00 00       	cmp    eax,0xffff
c0023bb3:	0f 84 f5 00 00 00    	je     c0023cae <IDE::open(int, int, void*)+0x1d0>
c0023bb9:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023bbf:	89 fa                	mov    edx,edi
c0023bc1:	89 f0                	mov    eax,esi
c0023bc3:	ef                   	out    dx,eax
c0023bc4:	b0 fe                	mov    al,0xfe
c0023bc6:	89 ca                	mov    edx,ecx
c0023bc8:	ee                   	out    dx,al
c0023bc9:	89 f0                	mov    eax,esi
c0023bcb:	89 fa                	mov    edx,edi
c0023bcd:	ef                   	out    dx,eax
c0023bce:	89 ca                	mov    edx,ecx
c0023bd0:	ed                   	in     eax,dx
c0023bd1:	3c fe                	cmp    al,0xfe
c0023bd3:	0f 85 a9 00 00 00    	jne    c0023c82 <IDE::open(int, int, void*)+0x1a4>
c0023bd9:	8b 15 e8 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002eee8
c0023bdf:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023be6:	74 33                	je     c0023c1b <IDE::open(int, int, void*)+0x13d>
c0023be8:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023bee:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023bf2:	40                   	inc    eax
c0023bf3:	83 ec 0c             	sub    esp,0xc
c0023bf6:	0f b6 c0             	movzx  eax,al
c0023bf9:	50                   	push   eax
c0023bfa:	55                   	push   ebp
c0023bfb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023bff:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023c05:	51                   	push   ecx
c0023c06:	e8 9f 47 ff ff       	call   c00183aa <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023c0b:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023c10:	83 c4 1c             	add    esp,0x1c
c0023c13:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023c19:	eb 0a                	jmp    c0023c25 <IDE::open(int, int, void*)+0x147>
c0023c1b:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023c25:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023c2c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023c33:	c1 e1 10             	shl    ecx,0x10
c0023c36:	c1 e0 08             	shl    eax,0x8
c0023c39:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023c3e:	09 c1                	or     ecx,eax
c0023c40:	89 fa                	mov    edx,edi
c0023c42:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023c49:	c1 e0 0b             	shl    eax,0xb
c0023c4c:	09 c1                	or     ecx,eax
c0023c4e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023c54:	89 c8                	mov    eax,ecx
c0023c56:	ef                   	out    dx,eax
c0023c57:	be fc 0c 00 00       	mov    esi,0xcfc
c0023c5c:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023c62:	89 f2                	mov    edx,esi
c0023c64:	ee                   	out    dx,al
c0023c65:	89 c8                	mov    eax,ecx
c0023c67:	89 fa                	mov    edx,edi
c0023c69:	ef                   	out    dx,eax
c0023c6a:	89 f2                	mov    edx,esi
c0023c6c:	ed                   	in     eax,dx
c0023c6d:	0f b6 c0             	movzx  eax,al
c0023c70:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023c76:	74 46                	je     c0023cbe <IDE::open(int, int, void*)+0x1e0>
c0023c78:	83 ec 0c             	sub    esp,0xc
c0023c7b:	68 80 d5 02 c0       	push   0xc002d580
c0023c80:	eb 34                	jmp    c0023cb6 <IDE::open(int, int, void*)+0x1d8>
c0023c82:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023c8b:	75 17                	jne    c0023ca4 <IDE::open(int, int, void*)+0x1c6>
c0023c8d:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023c92:	74 07                	je     c0023c9b <IDE::open(int, int, void*)+0x1bd>
c0023c94:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023c99:	75 09                	jne    c0023ca4 <IDE::open(int, int, void*)+0x1c6>
c0023c9b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023ca2:	eb 1a                	jmp    c0023cbe <IDE::open(int, int, void*)+0x1e0>
c0023ca4:	83 ec 0c             	sub    esp,0xc
c0023ca7:	68 88 d5 02 c0       	push   0xc002d588
c0023cac:	eb 08                	jmp    c0023cb6 <IDE::open(int, int, void*)+0x1d8>
c0023cae:	83 ec 0c             	sub    esp,0xc
c0023cb1:	68 b9 d5 02 c0       	push   0xc002d5b9
c0023cb6:	e8 d5 6b ff ff       	call   c001a890 <Krnl::panic(char const*)>
c0023cbb:	83 c4 10             	add    esp,0x10
c0023cbe:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023cc5:	79 1a                	jns    c0023ce1 <IDE::open(int, int, void*)+0x203>
c0023cc7:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023ccd:	83 e0 fc             	and    eax,0xfffffffc
c0023cd0:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023cd7:	83 c0 08             	add    eax,0x8
c0023cda:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023ce1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023ce7:	89 c2                	mov    edx,eax
c0023ce9:	83 e2 0f             	and    edx,0xf
c0023cec:	66 83 fa 08          	cmp    dx,0x8
c0023cf0:	75 0a                	jne    c0023cfc <IDE::open(int, int, void*)+0x21e>
c0023cf2:	83 e8 02             	sub    eax,0x2
c0023cf5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023cfc:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023d02:	89 c2                	mov    edx,eax
c0023d04:	83 e2 0f             	and    edx,0xf
c0023d07:	66 83 fa 08          	cmp    dx,0x8
c0023d0b:	75 0a                	jne    c0023d17 <IDE::open(int, int, void*)+0x239>
c0023d0d:	83 e8 02             	sub    eax,0x2
c0023d10:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023d17:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023d1e:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023d25:	89 d0                	mov    eax,edx
c0023d27:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023d2a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023d2e:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023d32:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023d35:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023d3a:	0f b6 c9             	movzx  ecx,cl
c0023d3d:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023d44:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023d47:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023d4b:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023d4f:	8d 50 02             	lea    edx,[eax+0x2]
c0023d52:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023d57:	0f b6 d2             	movzx  edx,dl
c0023d5a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023d60:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023d63:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023d67:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023d6b:	8d 48 03             	lea    ecx,[eax+0x3]
c0023d6e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023d73:	0f b6 c9             	movzx  ecx,cl
c0023d76:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023d7c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023d7f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023d83:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023d87:	8d 50 04             	lea    edx,[eax+0x4]
c0023d8a:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023d90:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023d95:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023d9c:	66 85 f6             	test   si,si
c0023d9f:	74 3e                	je     c0023ddf <IDE::open(int, int, void*)+0x301>
c0023da1:	0f b6 d2             	movzx  edx,dl
c0023da4:	83 c0 05             	add    eax,0x5
c0023da7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023daa:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023dae:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023db2:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023db8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023dbd:	eb 20                	jmp    c0023ddf <IDE::open(int, int, void*)+0x301>
c0023dbf:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023dc9:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023dd3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023dda:	e9 02 ff ff ff       	jmp    c0023ce1 <IDE::open(int, int, void*)+0x203>
c0023ddf:	52                   	push   edx
c0023de0:	52                   	push   edx
c0023de1:	6a 00                	push   0x0
c0023de3:	53                   	push   ebx
c0023de4:	e8 7d fa ff ff       	call   c0023866 <IDE::prepareInterrupt(unsigned char)>
c0023de9:	59                   	pop    ecx
c0023dea:	5e                   	pop    esi
c0023deb:	6a 01                	push   0x1
c0023ded:	53                   	push   ebx
c0023dee:	e8 73 fa ff ff       	call   c0023866 <IDE::prepareInterrupt(unsigned char)>
c0023df3:	83 c4 0c             	add    esp,0xc
c0023df6:	6a 00                	push   0x0
c0023df8:	6a 00                	push   0x0
c0023dfa:	53                   	push   ebx
c0023dfb:	e8 98 fc ff ff       	call   c0023a98 <IDE::enableIRQs(unsigned char, bool)>
c0023e00:	83 c4 0c             	add    esp,0xc
c0023e03:	6a 00                	push   0x0
c0023e05:	6a 01                	push   0x1
c0023e07:	53                   	push   ebx
c0023e08:	e8 8b fc ff ff       	call   c0023a98 <IDE::enableIRQs(unsigned char, bool)>
c0023e0d:	83 c4 10             	add    esp,0x10
c0023e10:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023e17:	74 40                	je     c0023e59 <IDE::open(int, int, void*)+0x37b>
c0023e19:	83 ec 0c             	sub    esp,0xc
c0023e1c:	68 e3 d5 02 c0       	push   0xc002d5e3
c0023e21:	e8 a7 f0 fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0023e26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023e29:	6a 01                	push   0x1
c0023e2b:	68 60 3a 02 c0       	push   0xc0023a60
c0023e30:	6a 0e                	push   0xe
c0023e32:	53                   	push   ebx
c0023e33:	e8 3c 04 ff ff       	call   c0014274 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023e38:	83 c4 14             	add    esp,0x14
c0023e3b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023e41:	53                   	push   ebx
c0023e42:	6a 01                	push   0x1
c0023e44:	68 7c 3a 02 c0       	push   0xc0023a7c
c0023e49:	6a 0f                	push   0xf
c0023e4b:	53                   	push   ebx
c0023e4c:	e8 23 04 ff ff       	call   c0014274 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023e51:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023e57:	eb 4a                	jmp    c0023ea3 <IDE::open(int, int, void*)+0x3c5>
c0023e59:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023e63:	50                   	push   eax
c0023e64:	6a 0f                	push   0xf
c0023e66:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023e6c:	68 ff d5 02 c0       	push   0xc002d5ff
c0023e71:	e8 57 f0 fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0023e76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023e79:	6a 00                	push   0x0
c0023e7b:	68 60 3a 02 c0       	push   0xc0023a60
c0023e80:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023e86:	53                   	push   ebx
c0023e87:	e8 e8 03 ff ff       	call   c0014274 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023e8c:	83 c4 14             	add    esp,0x14
c0023e8f:	53                   	push   ebx
c0023e90:	6a 00                	push   0x0
c0023e92:	68 7c 3a 02 c0       	push   0xc0023a7c
c0023e97:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023e9d:	53                   	push   ebx
c0023e9e:	e8 d1 03 ff ff       	call   c0014274 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023ea3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023ea5:	83 c4 20             	add    esp,0x20
c0023ea8:	83 ec 0c             	sub    esp,0xc
c0023eab:	53                   	push   ebx
c0023eac:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023eaf:	83 c4 0c             	add    esp,0xc
c0023eb2:	6a 07                	push   0x7
c0023eb4:	6a 00                	push   0x0
c0023eb6:	53                   	push   ebx
c0023eb7:	e8 90 fa ff ff       	call   c002394c <IDE::read(unsigned char, unsigned char)>
c0023ebc:	83 c4 0c             	add    esp,0xc
c0023ebf:	6a 07                	push   0x7
c0023ec1:	6a 01                	push   0x1
c0023ec3:	53                   	push   ebx
c0023ec4:	e8 83 fa ff ff       	call   c002394c <IDE::read(unsigned char, unsigned char)>
c0023ec9:	83 c4 0c             	add    esp,0xc
c0023ecc:	6a 01                	push   0x1
c0023ece:	6a 00                	push   0x0
c0023ed0:	53                   	push   ebx
c0023ed1:	e8 c2 fb ff ff       	call   c0023a98 <IDE::enableIRQs(unsigned char, bool)>
c0023ed6:	83 c4 0c             	add    esp,0xc
c0023ed9:	6a 01                	push   0x1
c0023edb:	6a 01                	push   0x1
c0023edd:	53                   	push   ebx
c0023ede:	e8 b5 fb ff ff       	call   c0023a98 <IDE::enableIRQs(unsigned char, bool)>
c0023ee3:	83 c4 2c             	add    esp,0x2c
c0023ee6:	31 c0                	xor    eax,eax
c0023ee8:	5b                   	pop    ebx
c0023ee9:	5e                   	pop    esi
c0023eea:	5f                   	pop    edi
c0023eeb:	5d                   	pop    ebp
c0023eec:	c3                   	ret    
c0023eed:	90                   	nop

c0023eee <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023eee:	55                   	push   ebp
c0023eef:	57                   	push   edi
c0023ef0:	56                   	push   esi
c0023ef1:	53                   	push   ebx
c0023ef2:	83 ec 1c             	sub    esp,0x1c
c0023ef5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023ef9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023efd:	8d 50 f8             	lea    edx,[eax-0x8]
c0023f00:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023f04:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023f08:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023f0c:	80 fa 03             	cmp    dl,0x3
c0023f0f:	77 5d                	ja     c0023f6e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023f11:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023f15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023f19:	0f b6 db             	movzx  ebx,bl
c0023f1c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023f1f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023f23:	83 ca 80             	or     edx,0xffffff80
c0023f26:	0f b6 d2             	movzx  edx,dl
c0023f29:	52                   	push   edx
c0023f2a:	6a 0c                	push   0xc
c0023f2c:	53                   	push   ebx
c0023f2d:	56                   	push   esi
c0023f2e:	e8 59 f9 ff ff       	call   c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f33:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023f38:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f3c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023f40:	0f b6 c0             	movzx  eax,al
c0023f43:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023f47:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023f49:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023f4e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023f52:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023f56:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023f5a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023f62:	83 c4 2c             	add    esp,0x2c
c0023f65:	5b                   	pop    ebx
c0023f66:	5e                   	pop    esi
c0023f67:	5f                   	pop    edi
c0023f68:	5d                   	pop    ebp
c0023f69:	e9 1e f9 ff ff       	jmp    c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f6e:	3c 07                	cmp    al,0x7
c0023f70:	77 10                	ja     c0023f82 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023f72:	0f b6 db             	movzx  ebx,bl
c0023f75:	0f b6 d0             	movzx  edx,al
c0023f78:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023f80:	eb 2d                	jmp    c0023faf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023f82:	3c 0d                	cmp    al,0xd
c0023f84:	77 13                	ja     c0023f99 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023f86:	0f b6 db             	movzx  ebx,bl
c0023f89:	0f b6 c0             	movzx  eax,al
c0023f8c:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023f93:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023f97:	eb 16                	jmp    c0023faf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023f99:	3c 15                	cmp    al,0x15
c0023f9b:	77 14                	ja     c0023fb1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023f9d:	0f b6 db             	movzx  ebx,bl
c0023fa0:	0f b6 c0             	movzx  eax,al
c0023fa3:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023fab:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023faf:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023fb1:	83 c4 1c             	add    esp,0x1c
c0023fb4:	5b                   	pop    ebx
c0023fb5:	5e                   	pop    esi
c0023fb6:	5f                   	pop    edi
c0023fb7:	5d                   	pop    ebp
c0023fb8:	c3                   	ret    
c0023fb9:	90                   	nop

c0023fba <IDE::detect()>:
c0023fba:	55                   	push   ebp
c0023fbb:	57                   	push   edi
c0023fbc:	56                   	push   esi
c0023fbd:	53                   	push   ebx
c0023fbe:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023fc4:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023fcb:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023fd2:	0f 85 be 02 00 00    	jne    c0024296 <IDE::detect()+0x2dc>
c0023fd8:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023fdf:	31 f6                	xor    esi,esi
c0023fe1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023fe9:	31 ed                	xor    ebp,ebp
c0023feb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023fef:	c1 e0 06             	shl    eax,0x6
c0023ff2:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023ffa:	89 e8                	mov    eax,ebp
c0023ffc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0024000:	c1 e0 04             	shl    eax,0x4
c0024003:	83 c8 a0             	or     eax,0xffffffa0
c0024006:	0f b6 c0             	movzx  eax,al
c0024009:	50                   	push   eax
c002400a:	6a 06                	push   0x6
c002400c:	56                   	push   esi
c002400d:	53                   	push   ebx
c002400e:	e8 79 f8 ff ff       	call   c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024013:	83 c4 0c             	add    esp,0xc
c0024016:	6a 0c                	push   0xc
c0024018:	56                   	push   esi
c0024019:	53                   	push   ebx
c002401a:	e8 2d f9 ff ff       	call   c002394c <IDE::read(unsigned char, unsigned char)>
c002401f:	83 c4 0c             	add    esp,0xc
c0024022:	6a 0c                	push   0xc
c0024024:	56                   	push   esi
c0024025:	53                   	push   ebx
c0024026:	e8 21 f9 ff ff       	call   c002394c <IDE::read(unsigned char, unsigned char)>
c002402b:	83 c4 0c             	add    esp,0xc
c002402e:	6a 0c                	push   0xc
c0024030:	56                   	push   esi
c0024031:	53                   	push   ebx
c0024032:	e8 15 f9 ff ff       	call   c002394c <IDE::read(unsigned char, unsigned char)>
c0024037:	83 c4 0c             	add    esp,0xc
c002403a:	6a 0c                	push   0xc
c002403c:	56                   	push   esi
c002403d:	53                   	push   ebx
c002403e:	e8 09 f9 ff ff       	call   c002394c <IDE::read(unsigned char, unsigned char)>
c0024043:	68 ec 00 00 00       	push   0xec
c0024048:	6a 07                	push   0x7
c002404a:	56                   	push   esi
c002404b:	53                   	push   ebx
c002404c:	e8 3b f8 ff ff       	call   c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024051:	83 c4 1c             	add    esp,0x1c
c0024054:	6a 0c                	push   0xc
c0024056:	56                   	push   esi
c0024057:	53                   	push   ebx
c0024058:	e8 ef f8 ff ff       	call   c002394c <IDE::read(unsigned char, unsigned char)>
c002405d:	83 c4 0c             	add    esp,0xc
c0024060:	6a 0c                	push   0xc
c0024062:	56                   	push   esi
c0024063:	53                   	push   ebx
c0024064:	e8 e3 f8 ff ff       	call   c002394c <IDE::read(unsigned char, unsigned char)>
c0024069:	83 c4 0c             	add    esp,0xc
c002406c:	6a 0c                	push   0xc
c002406e:	56                   	push   esi
c002406f:	53                   	push   ebx
c0024070:	e8 d7 f8 ff ff       	call   c002394c <IDE::read(unsigned char, unsigned char)>
c0024075:	83 c4 0c             	add    esp,0xc
c0024078:	6a 0c                	push   0xc
c002407a:	56                   	push   esi
c002407b:	53                   	push   ebx
c002407c:	e8 cb f8 ff ff       	call   c002394c <IDE::read(unsigned char, unsigned char)>
c0024081:	83 c4 0c             	add    esp,0xc
c0024084:	6a 0c                	push   0xc
c0024086:	56                   	push   esi
c0024087:	53                   	push   ebx
c0024088:	e8 bf f8 ff ff       	call   c002394c <IDE::read(unsigned char, unsigned char)>
c002408d:	83 c4 10             	add    esp,0x10
c0024090:	84 c0                	test   al,al
c0024092:	0f 84 8b 01 00 00    	je     c0024223 <IDE::detect()+0x269>
c0024098:	31 ff                	xor    edi,edi
c002409a:	50                   	push   eax
c002409b:	6a 0c                	push   0xc
c002409d:	56                   	push   esi
c002409e:	53                   	push   ebx
c002409f:	e8 a8 f8 ff ff       	call   c002394c <IDE::read(unsigned char, unsigned char)>
c00240a4:	83 c4 10             	add    esp,0x10
c00240a7:	a8 01                	test   al,0x1
c00240a9:	0f 85 8e 01 00 00    	jne    c002423d <IDE::detect()+0x283>
c00240af:	84 c0                	test   al,al
c00240b1:	78 04                	js     c00240b7 <IDE::detect()+0xfd>
c00240b3:	a8 08                	test   al,0x8
c00240b5:	75 27                	jne    c00240de <IDE::detect()+0x124>
c00240b7:	47                   	inc    edi
c00240b8:	81 ff 17 01 00 00    	cmp    edi,0x117
c00240be:	7e da                	jle    c002409a <IDE::detect()+0xe0>
c00240c0:	50                   	push   eax
c00240c1:	50                   	push   eax
c00240c2:	6a 00                	push   0x0
c00240c4:	68 40 4b 4c 00       	push   0x4c4b40
c00240c9:	e8 5b a7 ff ff       	call   c001e829 <nanoSleep(unsigned long long)>
c00240ce:	83 c4 10             	add    esp,0x10
c00240d1:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00240d7:	75 c1                	jne    c002409a <IDE::detect()+0xe0>
c00240d9:	e9 5f 01 00 00       	jmp    c002423d <IDE::detect()+0x283>
c00240de:	31 c9                	xor    ecx,ecx
c00240e0:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00240e4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00240e8:	83 ec 0c             	sub    esp,0xc
c00240eb:	68 80 00 00 00       	push   0x80
c00240f0:	57                   	push   edi
c00240f1:	6a 00                	push   0x0
c00240f3:	56                   	push   esi
c00240f4:	53                   	push   ebx
c00240f5:	e8 f4 fd ff ff       	call   c0023eee <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00240fa:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00240ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024103:	89 d1                	mov    ecx,edx
c0024105:	c1 e0 06             	shl    eax,0x6
c0024108:	01 d8                	add    eax,ebx
c002410a:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0024111:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0024118:	89 f2                	mov    edx,esi
c002411a:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0024120:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0024124:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002412a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002412e:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0024135:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002413d:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0024144:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002414c:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0024152:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0024159:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002415f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0024163:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0024167:	83 c4 20             	add    esp,0x20
c002416a:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c002416d:	83 c0 02             	add    eax,0x2
c0024170:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0024176:	83 c7 02             	add    edi,0x2
c0024179:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002417c:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0024182:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0024186:	75 e2                	jne    c002416a <IDE::detect()+0x1b0>
c0024188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002418c:	c1 e0 06             	shl    eax,0x6
c002418f:	01 d8                	add    eax,ebx
c0024191:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0024197:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002419e:	66 c1 ea 09          	shr    dx,0x9
c00241a2:	83 e2 01             	and    edx,0x1
c00241a5:	84 c9                	test   cl,cl
c00241a7:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00241ad:	75 2f                	jne    c00241de <IDE::detect()+0x224>
c00241af:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00241b5:	85 c0                	test   eax,eax
c00241b7:	74 66                	je     c002421f <IDE::detect()+0x265>
c00241b9:	50                   	push   eax
c00241ba:	55                   	push   ebp
c00241bb:	56                   	push   esi
c00241bc:	68 1b d6 02 c0       	push   0xc002d61b
c00241c1:	e8 07 ed fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00241c6:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00241cd:	e8 5c b7 fe ff       	call   c000f92e <malloc>
c00241d2:	89 c7                	mov    edi,eax
c00241d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00241d7:	e8 78 06 00 00       	call   c0024854 <ATA::ATA()>
c00241dc:	eb 28                	jmp    c0024206 <IDE::detect()+0x24c>
c00241de:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00241e4:	55                   	push   ebp
c00241e5:	56                   	push   esi
c00241e6:	68 4a d6 02 c0       	push   0xc002d64a
c00241eb:	e8 dd ec fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00241f0:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00241f7:	e8 32 b7 fe ff       	call   c000f92e <malloc>
c00241fc:	89 c7                	mov    edi,eax
c00241fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0024201:	e8 8e 0c 00 00       	call   c0024e94 <ATAPI::ATAPI()>
c0024206:	5a                   	pop    edx
c0024207:	59                   	pop    ecx
c0024208:	57                   	push   edi
c0024209:	53                   	push   ebx
c002420a:	e8 e1 00 ff ff       	call   c00142f0 <Device::addChild(Device*)>
c002420f:	8b 07                	mov    eax,DWORD PTR [edi]
c0024211:	53                   	push   ebx
c0024212:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024216:	6a 00                	push   0x0
c0024218:	57                   	push   edi
c0024219:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002421c:	83 c4 20             	add    esp,0x20
c002421f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0024223:	4d                   	dec    ebp
c0024224:	74 0a                	je     c0024230 <IDE::detect()+0x276>
c0024226:	bd 01 00 00 00       	mov    ebp,0x1
c002422b:	e9 bb fd ff ff       	jmp    c0023feb <IDE::detect()+0x31>
c0024230:	4e                   	dec    esi
c0024231:	74 63                	je     c0024296 <IDE::detect()+0x2dc>
c0024233:	be 01 00 00 00       	mov    esi,0x1
c0024238:	e9 ac fd ff ff       	jmp    c0023fe9 <IDE::detect()+0x2f>
c002423d:	50                   	push   eax
c002423e:	6a 04                	push   0x4
c0024240:	56                   	push   esi
c0024241:	53                   	push   ebx
c0024242:	e8 05 f7 ff ff       	call   c002394c <IDE::read(unsigned char, unsigned char)>
c0024247:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002424b:	83 c4 0c             	add    esp,0xc
c002424e:	6a 05                	push   0x5
c0024250:	56                   	push   esi
c0024251:	53                   	push   ebx
c0024252:	e8 f5 f6 ff ff       	call   c002394c <IDE::read(unsigned char, unsigned char)>
c0024257:	83 c4 10             	add    esp,0x10
c002425a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c002425e:	80 fa 14             	cmp    dl,0x14
c0024261:	75 04                	jne    c0024267 <IDE::detect()+0x2ad>
c0024263:	3c eb                	cmp    al,0xeb
c0024265:	eb 07                	jmp    c002426e <IDE::detect()+0x2b4>
c0024267:	3c 96                	cmp    al,0x96
c0024269:	75 b8                	jne    c0024223 <IDE::detect()+0x269>
c002426b:	80 fa 69             	cmp    dl,0x69
c002426e:	75 b3                	jne    c0024223 <IDE::detect()+0x269>
c0024270:	68 a1 00 00 00       	push   0xa1
c0024275:	6a 07                	push   0x7
c0024277:	56                   	push   esi
c0024278:	53                   	push   ebx
c0024279:	e8 0e f6 ff ff       	call   c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002427e:	5f                   	pop    edi
c002427f:	58                   	pop    eax
c0024280:	6a 00                	push   0x0
c0024282:	68 40 42 0f 00       	push   0xf4240
c0024287:	e8 9d a5 ff ff       	call   c001e829 <nanoSleep(unsigned long long)>
c002428c:	83 c4 10             	add    esp,0x10
c002428f:	b1 01                	mov    cl,0x1
c0024291:	e9 4a fe ff ff       	jmp    c00240e0 <IDE::detect()+0x126>
c0024296:	81 c4 1c 02 00 00    	add    esp,0x21c
c002429c:	5b                   	pop    ebx
c002429d:	5e                   	pop    esi
c002429e:	5f                   	pop    edi
c002429f:	5d                   	pop    ebp
c00242a0:	c3                   	ret    
c00242a1:	90                   	nop

c00242a2 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00242a2:	55                   	push   ebp
c00242a3:	57                   	push   edi
c00242a4:	56                   	push   esi
c00242a5:	53                   	push   ebx
c00242a6:	83 ec 1c             	sub    esp,0x1c
c00242a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00242ad:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00242b1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00242b5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00242b9:	88 c3                	mov    bl,al
c00242bb:	84 c0                	test   al,al
c00242bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00242c1:	0f 84 67 01 00 00    	je     c002442e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00242c7:	83 ec 0c             	sub    esp,0xc
c00242ca:	68 7b d6 02 c0       	push   0xc002d67b
c00242cf:	e8 f9 eb fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00242d4:	83 c4 10             	add    esp,0x10
c00242d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00242db:	3c 01                	cmp    al,0x1
c00242dd:	75 17                	jne    c00242f6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00242df:	83 ec 0c             	sub    esp,0xc
c00242e2:	b3 13                	mov    bl,0x13
c00242e4:	68 87 d6 02 c0       	push   0xc002d687
c00242e9:	e8 df eb fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00242ee:	83 c4 10             	add    esp,0x10
c00242f1:	e9 25 01 00 00       	jmp    c002441b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00242f6:	3c 02                	cmp    al,0x2
c00242f8:	0f 85 ef 00 00 00    	jne    c00243ed <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c00242fe:	d1 e6                	shl    esi,1
c0024300:	09 ee                	or     esi,ebp
c0024302:	52                   	push   edx
c0024303:	89 f0                	mov    eax,esi
c0024305:	6a 01                	push   0x1
c0024307:	0f b6 f0             	movzx  esi,al
c002430a:	c1 e6 06             	shl    esi,0x6
c002430d:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0024315:	50                   	push   eax
c0024316:	57                   	push   edi
c0024317:	e8 30 f6 ff ff       	call   c002394c <IDE::read(unsigned char, unsigned char)>
c002431c:	83 c4 10             	add    esp,0x10
c002431f:	89 c6                	mov    esi,eax
c0024321:	a8 01                	test   al,0x1
c0024323:	74 12                	je     c0024337 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0024325:	83 ec 0c             	sub    esp,0xc
c0024328:	b3 07                	mov    bl,0x7
c002432a:	68 9c d6 02 c0       	push   0xc002d69c
c002432f:	e8 99 eb fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0024334:	83 c4 10             	add    esp,0x10
c0024337:	f7 c6 02 00 00 00    	test   esi,0x2
c002433d:	74 12                	je     c0024351 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c002433f:	83 ec 0c             	sub    esp,0xc
c0024342:	b3 03                	mov    bl,0x3
c0024344:	68 ba d6 02 c0       	push   0xc002d6ba
c0024349:	e8 7f eb fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c002434e:	83 c4 10             	add    esp,0x10
c0024351:	f7 c6 04 00 00 00    	test   esi,0x4
c0024357:	74 12                	je     c002436b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0024359:	83 ec 0c             	sub    esp,0xc
c002435c:	b3 14                	mov    bl,0x14
c002435e:	68 da d6 02 c0       	push   0xc002d6da
c0024363:	e8 65 eb fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0024368:	83 c4 10             	add    esp,0x10
c002436b:	f7 c6 08 00 00 00    	test   esi,0x8
c0024371:	74 12                	je     c0024385 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0024373:	83 ec 0c             	sub    esp,0xc
c0024376:	b3 03                	mov    bl,0x3
c0024378:	68 ba d6 02 c0       	push   0xc002d6ba
c002437d:	e8 4b eb fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0024382:	83 c4 10             	add    esp,0x10
c0024385:	f7 c6 10 00 00 00    	test   esi,0x10
c002438b:	74 12                	je     c002439f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c002438d:	83 ec 0c             	sub    esp,0xc
c0024390:	b3 15                	mov    bl,0x15
c0024392:	68 f2 d6 02 c0       	push   0xc002d6f2
c0024397:	e8 31 eb fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c002439c:	83 c4 10             	add    esp,0x10
c002439f:	f7 c6 20 00 00 00    	test   esi,0x20
c00243a5:	74 12                	je     c00243b9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00243a7:	83 ec 0c             	sub    esp,0xc
c00243aa:	b3 03                	mov    bl,0x3
c00243ac:	68 ba d6 02 c0       	push   0xc002d6ba
c00243b1:	e8 17 eb fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00243b6:	83 c4 10             	add    esp,0x10
c00243b9:	f7 c6 40 00 00 00    	test   esi,0x40
c00243bf:	74 12                	je     c00243d3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c00243c1:	83 ec 0c             	sub    esp,0xc
c00243c4:	b3 16                	mov    bl,0x16
c00243c6:	68 0c d7 02 c0       	push   0xc002d70c
c00243cb:	e8 fd ea fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00243d0:	83 c4 10             	add    esp,0x10
c00243d3:	89 f0                	mov    eax,esi
c00243d5:	84 c0                	test   al,al
c00243d7:	79 42                	jns    c002441b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00243d9:	83 ec 0c             	sub    esp,0xc
c00243dc:	b3 0d                	mov    bl,0xd
c00243de:	68 2d d7 02 c0       	push   0xc002d72d
c00243e3:	e8 e5 ea fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00243e8:	83 c4 10             	add    esp,0x10
c00243eb:	eb 2e                	jmp    c002441b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00243ed:	3c 03                	cmp    al,0x3
c00243ef:	75 14                	jne    c0024405 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c00243f1:	83 ec 0c             	sub    esp,0xc
c00243f4:	b3 17                	mov    bl,0x17
c00243f6:	68 41 d7 02 c0       	push   0xc002d741
c00243fb:	e8 cd ea fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0024400:	83 c4 10             	add    esp,0x10
c0024403:	eb 16                	jmp    c002441b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024405:	3c 04                	cmp    al,0x4
c0024407:	75 12                	jne    c002441b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024409:	83 ec 0c             	sub    esp,0xc
c002440c:	b3 08                	mov    bl,0x8
c002440e:	68 57 d7 02 c0       	push   0xc002d757
c0024413:	e8 b5 ea fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0024418:	83 c4 10             	add    esp,0x10
c002441b:	50                   	push   eax
c002441c:	50                   	push   eax
c002441d:	0f b6 c3             	movzx  eax,bl
c0024420:	50                   	push   eax
c0024421:	68 6f d7 02 c0       	push   0xc002d76f
c0024426:	e8 a2 ea fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c002442b:	83 c4 10             	add    esp,0x10
c002442e:	83 c4 1c             	add    esp,0x1c
c0024431:	88 d8                	mov    al,bl
c0024433:	5b                   	pop    ebx
c0024434:	5e                   	pop    esi
c0024435:	5f                   	pop    edi
c0024436:	5d                   	pop    ebp
c0024437:	c3                   	ret    

c0024438 <IDE::polling(unsigned char, unsigned int)>:
c0024438:	57                   	push   edi
c0024439:	56                   	push   esi
c002443a:	53                   	push   ebx
c002443b:	bb 04 00 00 00       	mov    ebx,0x4
c0024440:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0024444:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0024449:	52                   	push   edx
c002444a:	6a 0c                	push   0xc
c002444c:	56                   	push   esi
c002444d:	57                   	push   edi
c002444e:	e8 f9 f4 ff ff       	call   c002394c <IDE::read(unsigned char, unsigned char)>
c0024453:	83 c4 10             	add    esp,0x10
c0024456:	4b                   	dec    ebx
c0024457:	75 f0                	jne    c0024449 <IDE::polling(unsigned char, unsigned int)+0x11>
c0024459:	bb a0 86 01 00       	mov    ebx,0x186a0
c002445e:	50                   	push   eax
c002445f:	6a 0c                	push   0xc
c0024461:	56                   	push   esi
c0024462:	57                   	push   edi
c0024463:	e8 e4 f4 ff ff       	call   c002394c <IDE::read(unsigned char, unsigned char)>
c0024468:	83 c4 10             	add    esp,0x10
c002446b:	a8 01                	test   al,0x1
c002446d:	74 12                	je     c0024481 <IDE::polling(unsigned char, unsigned int)+0x49>
c002446f:	83 ec 0c             	sub    esp,0xc
c0024472:	68 89 d7 02 c0       	push   0xc002d789
c0024477:	e8 51 ea fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c002447c:	83 c4 10             	add    esp,0x10
c002447f:	eb 17                	jmp    c0024498 <IDE::polling(unsigned char, unsigned int)+0x60>
c0024481:	a8 20                	test   al,0x20
c0024483:	75 0f                	jne    c0024494 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0024485:	4b                   	dec    ebx
c0024486:	74 10                	je     c0024498 <IDE::polling(unsigned char, unsigned int)+0x60>
c0024488:	84 c0                	test   al,al
c002448a:	78 d2                	js     c002445e <IDE::polling(unsigned char, unsigned int)+0x26>
c002448c:	a8 08                	test   al,0x8
c002448e:	74 ce                	je     c002445e <IDE::polling(unsigned char, unsigned int)+0x26>
c0024490:	31 c0                	xor    eax,eax
c0024492:	eb 06                	jmp    c002449a <IDE::polling(unsigned char, unsigned int)+0x62>
c0024494:	b0 01                	mov    al,0x1
c0024496:	eb 02                	jmp    c002449a <IDE::polling(unsigned char, unsigned int)+0x62>
c0024498:	b0 02                	mov    al,0x2
c002449a:	5b                   	pop    ebx
c002449b:	5e                   	pop    esi
c002449c:	5f                   	pop    edi
c002449d:	c3                   	ret    

c002449e <SATABus::close(int, int, void*)>:
c002449e:	31 c0                	xor    eax,eax
c00244a0:	c3                   	ret    
c00244a1:	90                   	nop

c00244a2 <SATABus::detect()>:
c00244a2:	c3                   	ret    
c00244a3:	90                   	nop

c00244a4 <SATABus::SATABus()>:
c00244a4:	83 ec 0c             	sub    esp,0xc
c00244a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244ab:	83 ec 08             	sub    esp,0x8
c00244ae:	68 cc d7 02 c0       	push   0xc002d7cc
c00244b3:	50                   	push   eax
c00244b4:	e8 d1 01 ff ff       	call   c001468a <HardDiskController::HardDiskController(char const*)>
c00244b9:	83 c4 10             	add    esp,0x10
c00244bc:	ba 88 d8 02 c0       	mov    edx,0xc002d888
c00244c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244c5:	89 10                	mov    DWORD PTR [eax],edx
c00244c7:	83 ec 0c             	sub    esp,0xc
c00244ca:	6a 50                	push   0x50
c00244cc:	e8 ae bb fe ff       	call   c001007f <Phys::allocateContiguousPages(int)>
c00244d1:	83 c4 10             	add    esp,0x10
c00244d4:	89 c2                	mov    edx,eax
c00244d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244da:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00244e0:	83 ec 0c             	sub    esp,0xc
c00244e3:	6a 50                	push   0x50
c00244e5:	e8 dd d5 fe ff       	call   c0011ac7 <Virt::allocateKernelVirtualPages(int)>
c00244ea:	83 c4 10             	add    esp,0x10
c00244ed:	89 c2                	mov    edx,eax
c00244ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244f3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00244f9:	a1 70 f0 02 c0       	mov    eax,ds:0xc002f070
c00244fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024502:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0024508:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002450c:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0024512:	83 ec 0c             	sub    esp,0xc
c0024515:	6a 03                	push   0x3
c0024517:	6a 50                	push   0x50
c0024519:	51                   	push   ecx
c002451a:	52                   	push   edx
c002451b:	50                   	push   eax
c002451c:	e8 d3 e0 fe ff       	call   c00125f4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0024521:	83 c4 20             	add    esp,0x20
c0024524:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024528:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c002452e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024532:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024538:	83 ec 04             	sub    esp,0x4
c002453b:	52                   	push   edx
c002453c:	50                   	push   eax
c002453d:	68 f0 d7 02 c0       	push   0xc002d7f0
c0024542:	e8 86 e9 fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0024547:	83 c4 10             	add    esp,0x10
c002454a:	90                   	nop
c002454b:	83 c4 0c             	add    esp,0xc
c002454e:	c3                   	ret    
c002454f:	90                   	nop

c0024550 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0024550:	83 ec 0c             	sub    esp,0xc
c0024553:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024557:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002455a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002455d:	09 c2                	or     edx,eax
c002455f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024563:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024569:	8b 08                	mov    ecx,DWORD PTR [eax]
c002456b:	31 c0                	xor    eax,eax
c002456d:	c1 e9 08             	shr    ecx,0x8
c0024570:	83 e1 0f             	and    ecx,0xf
c0024573:	39 c8                	cmp    eax,ecx
c0024575:	74 0a                	je     c0024581 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0024577:	f6 c2 01             	test   dl,0x1
c002457a:	74 18                	je     c0024594 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c002457c:	d1 ea                	shr    edx,1
c002457e:	40                   	inc    eax
c002457f:	eb f2                	jmp    c0024573 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0024581:	83 ec 0c             	sub    esp,0xc
c0024584:	68 14 d8 02 c0       	push   0xc002d814
c0024589:	e8 02 63 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c002458e:	83 c4 10             	add    esp,0x10
c0024591:	83 c8 ff             	or     eax,0xffffffff
c0024594:	83 c4 0c             	add    esp,0xc
c0024597:	c3                   	ret    

c0024598 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0024598:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002459c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002459f:	89 c2                	mov    edx,eax
c00245a1:	c1 ea 08             	shr    edx,0x8
c00245a4:	83 e2 0f             	and    edx,0xf
c00245a7:	fe ca                	dec    dl
c00245a9:	75 31                	jne    c00245dc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00245ab:	83 e0 0f             	and    eax,0xf
c00245ae:	3c 03                	cmp    al,0x3
c00245b0:	75 2a                	jne    c00245dc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00245b2:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c00245b5:	b8 02 00 00 00       	mov    eax,0x2
c00245ba:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c00245c0:	74 1c                	je     c00245de <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00245c2:	b8 04 00 00 00       	mov    eax,0x4
c00245c7:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c00245cd:	74 0f                	je     c00245de <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00245cf:	31 c0                	xor    eax,eax
c00245d1:	83 fa 03             	cmp    edx,0x3
c00245d4:	0f 94 c0             	sete   al
c00245d7:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c00245db:	c3                   	ret    
c00245dc:	31 c0                	xor    eax,eax
c00245de:	c3                   	ret    
c00245df:	90                   	nop

c00245e0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c00245e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00245e4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00245e7:	0f ba e2 0f          	bt     edx,0xf
c00245eb:	72 f7                	jb     c00245e4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c00245ed:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00245f0:	83 ca 10             	or     edx,0x10
c00245f3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00245f6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00245f9:	83 ca 01             	or     edx,0x1
c00245fc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00245ff:	c3                   	ret    

c0024600 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0024600:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024604:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024607:	83 e2 fe             	and    edx,0xfffffffe
c002460a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002460d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024610:	83 e2 ef             	and    edx,0xffffffef
c0024613:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024616:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024619:	0f ba e2 0e          	bt     edx,0xe
c002461d:	72 f7                	jb     c0024616 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002461f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024622:	0f ba e2 0f          	bt     edx,0xf
c0024626:	72 ee                	jb     c0024616 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024628:	c3                   	ret    
c0024629:	90                   	nop

c002462a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002462a:	55                   	push   ebp
c002462b:	57                   	push   edi
c002462c:	56                   	push   esi
c002462d:	53                   	push   ebx
c002462e:	83 ec 1c             	sub    esp,0x1c
c0024631:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024635:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024639:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002463d:	53                   	push   ebx
c002463e:	89 fd                	mov    ebp,edi
c0024640:	56                   	push   esi
c0024641:	c1 e5 0a             	shl    ebp,0xa
c0024644:	e8 b7 ff ff ff       	call   c0024600 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0024649:	83 ec 0c             	sub    esp,0xc
c002464c:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0024652:	01 e8                	add    eax,ebp
c0024654:	89 03                	mov    DWORD PTR [ebx],eax
c0024656:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024658:	68 00 04 00 00       	push   0x400
c002465d:	6a 00                	push   0x0
c002465f:	50                   	push   eax
c0024660:	e8 07 c1 fd ff       	call   c000076c <memset>
c0024665:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c002466b:	89 fa                	mov    edx,edi
c002466d:	01 e8                	add    eax,ebp
c002466f:	c1 e7 0d             	shl    edi,0xd
c0024672:	89 03                	mov    DWORD PTR [ebx],eax
c0024674:	c1 e2 08             	shl    edx,0x8
c0024677:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002467e:	81 c2 00 80 00 00    	add    edx,0x8000
c0024684:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0024688:	89 d0                	mov    eax,edx
c002468a:	83 c4 1c             	add    esp,0x1c
c002468d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024693:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0024696:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0024699:	68 00 01 00 00       	push   0x100
c002469e:	6a 00                	push   0x0
c00246a0:	50                   	push   eax
c00246a1:	e8 c6 c0 fd ff       	call   c000076c <memset>
c00246a6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00246aa:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00246b0:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c00246b6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00246ba:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00246bd:	83 c4 10             	add    esp,0x10
c00246c0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00246c7:	31 ff                	xor    edi,edi
c00246c9:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00246cf:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00246d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00246d9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00246df:	83 c5 20             	add    ebp,0x20
c00246e2:	01 f8                	add    eax,edi
c00246e4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00246e7:	52                   	push   edx
c00246e8:	68 00 01 00 00       	push   0x100
c00246ed:	6a 00                	push   0x0
c00246ef:	50                   	push   eax
c00246f0:	e8 77 c0 fd ff       	call   c000076c <memset>
c00246f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00246f9:	83 c4 10             	add    esp,0x10
c00246fc:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0024702:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0024709:	01 f8                	add    eax,edi
c002470b:	81 c7 00 01 00 00    	add    edi,0x100
c0024711:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024714:	81 ff 00 20 00 00    	cmp    edi,0x2000
c002471a:	75 b3                	jne    c00246cf <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c002471c:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0024720:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0024724:	83 c4 1c             	add    esp,0x1c
c0024727:	5b                   	pop    ebx
c0024728:	5e                   	pop    esi
c0024729:	5f                   	pop    edi
c002472a:	5d                   	pop    ebp
c002472b:	e9 b0 fe ff ff       	jmp    c00245e0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0024730 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0024730:	55                   	push   ebp
c0024731:	57                   	push   edi
c0024732:	56                   	push   esi
c0024733:	53                   	push   ebx
c0024734:	31 db                	xor    ebx,ebx
c0024736:	83 ec 0c             	sub    esp,0xc
c0024739:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002473d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024741:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0024744:	f7 c7 01 00 00 00    	test   edi,0x1
c002474a:	0f 84 aa 00 00 00    	je     c00247fa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024750:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024754:	89 d8                	mov    eax,ebx
c0024756:	c1 e0 07             	shl    eax,0x7
c0024759:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0024760:	55                   	push   ebp
c0024761:	56                   	push   esi
c0024762:	e8 31 fe ff ff       	call   c0024598 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0024767:	5a                   	pop    edx
c0024768:	83 f8 01             	cmp    eax,0x1
c002476b:	59                   	pop    ecx
c002476c:	75 30                	jne    c002479e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c002476e:	50                   	push   eax
c002476f:	50                   	push   eax
c0024770:	53                   	push   ebx
c0024771:	68 39 d8 02 c0       	push   0xc002d839
c0024776:	e8 52 e7 fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c002477b:	83 c4 0c             	add    esp,0xc
c002477e:	53                   	push   ebx
c002477f:	55                   	push   ebp
c0024780:	56                   	push   esi
c0024781:	e8 a4 fe ff ff       	call   c002462a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024786:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002478d:	e8 9c b1 fe ff       	call   c000f92e <malloc>
c0024792:	89 c5                	mov    ebp,eax
c0024794:	89 04 24             	mov    DWORD PTR [esp],eax
c0024797:	e8 5c 0d 00 00       	call   c00254f8 <SATA::SATA()>
c002479c:	eb 33                	jmp    c00247d1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c002479e:	83 f8 04             	cmp    eax,0x4
c00247a1:	75 47                	jne    c00247ea <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c00247a3:	50                   	push   eax
c00247a4:	50                   	push   eax
c00247a5:	53                   	push   ebx
c00247a6:	68 50 d8 02 c0       	push   0xc002d850
c00247ab:	e8 1d e7 fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00247b0:	83 c4 0c             	add    esp,0xc
c00247b3:	53                   	push   ebx
c00247b4:	55                   	push   ebp
c00247b5:	56                   	push   esi
c00247b6:	e8 6f fe ff ff       	call   c002462a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00247bb:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00247c2:	e8 67 b1 fe ff       	call   c000f92e <malloc>
c00247c7:	89 c5                	mov    ebp,eax
c00247c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00247cc:	e8 d5 10 00 00       	call   c00258a6 <SATAPI::SATAPI()>
c00247d1:	5a                   	pop    edx
c00247d2:	59                   	pop    ecx
c00247d3:	55                   	push   ebp
c00247d4:	56                   	push   esi
c00247d5:	e8 16 fb fe ff       	call   c00142f0 <Device::addChild(Device*)>
c00247da:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00247dd:	56                   	push   esi
c00247de:	6a 00                	push   0x0
c00247e0:	53                   	push   ebx
c00247e1:	55                   	push   ebp
c00247e2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00247e5:	83 c4 20             	add    esp,0x20
c00247e8:	eb 10                	jmp    c00247fa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c00247ea:	50                   	push   eax
c00247eb:	50                   	push   eax
c00247ec:	53                   	push   ebx
c00247ed:	68 69 d8 02 c0       	push   0xc002d869
c00247f2:	e8 d6 e6 fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00247f7:	83 c4 10             	add    esp,0x10
c00247fa:	d1 ef                	shr    edi,1
c00247fc:	43                   	inc    ebx
c00247fd:	83 fb 20             	cmp    ebx,0x20
c0024800:	0f 85 3e ff ff ff    	jne    c0024744 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0024806:	83 c4 0c             	add    esp,0xc
c0024809:	5b                   	pop    ebx
c002480a:	5e                   	pop    esi
c002480b:	5f                   	pop    edi
c002480c:	5d                   	pop    ebp
c002480d:	c3                   	ret    

c002480e <SATABus::open(int, int, void*)>:
c002480e:	83 ec 14             	sub    esp,0x14
c0024811:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024815:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c002481b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024821:	52                   	push   edx
c0024822:	50                   	push   eax
c0024823:	e8 08 ff ff ff       	call   c0024730 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024828:	31 c0                	xor    eax,eax
c002482a:	83 c4 1c             	add    esp,0x1c
c002482d:	c3                   	ret    

c002482e <ATA::close(int, int, void*)>:
c002482e:	83 ec 0c             	sub    esp,0xc
c0024831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024835:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002483b:	85 c0                	test   eax,eax
c002483d:	74 0c                	je     c002484b <ATA::close(int, int, void*)+0x1d>
c002483f:	83 ec 0c             	sub    esp,0xc
c0024842:	8b 10                	mov    edx,DWORD PTR [eax]
c0024844:	50                   	push   eax
c0024845:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024848:	83 c4 10             	add    esp,0x10
c002484b:	31 c0                	xor    eax,eax
c002484d:	83 c4 0c             	add    esp,0xc
c0024850:	c3                   	ret    
c0024851:	90                   	nop

c0024852 <ATA::powerSaving(PowerSavingLevel)>:
c0024852:	c3                   	ret    
c0024853:	90                   	nop

c0024854 <ATA::ATA()>:
c0024854:	83 ec 0c             	sub    esp,0xc
c0024857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002485b:	83 ec 04             	sub    esp,0x4
c002485e:	68 00 02 00 00       	push   0x200
c0024863:	68 51 d9 02 c0       	push   0xc002d951
c0024868:	50                   	push   eax
c0024869:	e8 b4 fe fe ff       	call   c0014722 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002486e:	83 c4 10             	add    esp,0x10
c0024871:	ba d4 d8 02 c0       	mov    edx,0xc002d8d4
c0024876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002487a:	89 10                	mov    DWORD PTR [eax],edx
c002487c:	90                   	nop
c002487d:	83 c4 0c             	add    esp,0xc
c0024880:	c3                   	ret    
c0024881:	90                   	nop

c0024882 <ATA::flush(bool)>:
c0024882:	53                   	push   ebx
c0024883:	83 ec 08             	sub    esp,0x8
c0024886:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c002488b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002488f:	19 c0                	sbb    eax,eax
c0024891:	83 e0 fd             	and    eax,0xfffffffd
c0024894:	05 ea 00 00 00       	add    eax,0xea
c0024899:	50                   	push   eax
c002489a:	6a 07                	push   0x7
c002489c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00248a3:	50                   	push   eax
c00248a4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00248aa:	e8 dd ef ff ff       	call   c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00248af:	83 c4 0c             	add    esp,0xc
c00248b2:	6a 00                	push   0x0
c00248b4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00248bb:	50                   	push   eax
c00248bc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00248c2:	e8 71 fb ff ff       	call   c0024438 <IDE::polling(unsigned char, unsigned int)>
c00248c7:	83 c4 18             	add    esp,0x18
c00248ca:	5b                   	pop    ebx
c00248cb:	c3                   	ret    

c00248cc <ATA::readyForCommand()>:
c00248cc:	56                   	push   esi
c00248cd:	53                   	push   ebx
c00248ce:	31 db                	xor    ebx,ebx
c00248d0:	50                   	push   eax
c00248d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00248d5:	50                   	push   eax
c00248d6:	6a 0c                	push   0xc
c00248d8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00248df:	50                   	push   eax
c00248e0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00248e6:	e8 61 f0 ff ff       	call   c002394c <IDE::read(unsigned char, unsigned char)>
c00248eb:	83 c4 10             	add    esp,0x10
c00248ee:	a8 88                	test   al,0x88
c00248f0:	74 23                	je     c0024915 <ATA::readyForCommand()+0x49>
c00248f2:	43                   	inc    ebx
c00248f3:	83 fb 63             	cmp    ebx,0x63
c00248f6:	7e dd                	jle    c00248d5 <ATA::readyForCommand()+0x9>
c00248f8:	51                   	push   ecx
c00248f9:	51                   	push   ecx
c00248fa:	6a 00                	push   0x0
c00248fc:	68 40 42 0f 00       	push   0xf4240
c0024901:	e8 23 9f ff ff       	call   c001e829 <nanoSleep(unsigned long long)>
c0024906:	83 c4 10             	add    esp,0x10
c0024909:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002490f:	75 c4                	jne    c00248d5 <ATA::readyForCommand()+0x9>
c0024911:	31 c0                	xor    eax,eax
c0024913:	eb 02                	jmp    c0024917 <ATA::readyForCommand()+0x4b>
c0024915:	b0 01                	mov    al,0x1
c0024917:	5a                   	pop    edx
c0024918:	5b                   	pop    ebx
c0024919:	5e                   	pop    esi
c002491a:	c3                   	ret    
c002491b:	90                   	nop

c002491c <ATA::access(unsigned long long, int, void*, bool)>:
c002491c:	55                   	push   ebp
c002491d:	57                   	push   edi
c002491e:	56                   	push   esi
c002491f:	53                   	push   ebx
c0024920:	83 ec 2c             	sub    esp,0x2c
c0024923:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024927:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002492b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002492f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024933:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024937:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002493b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002493f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024945:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024949:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002494f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024953:	c1 e0 06             	shl    eax,0x6
c0024956:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002495e:	74 5d                	je     c00249bd <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024960:	89 fa                	mov    edx,edi
c0024962:	89 f0                	mov    eax,esi
c0024964:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024968:	c1 ea 1c             	shr    edx,0x1c
c002496b:	89 d1                	mov    ecx,edx
c002496d:	09 c1                	or     ecx,eax
c002496f:	74 25                	je     c0024996 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024971:	31 ed                	xor    ebp,ebp
c0024973:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002497a:	89 fa                	mov    edx,edi
c002497c:	89 f0                	mov    eax,esi
c002497e:	0f ad d0             	shrd   eax,edx,cl
c0024981:	d3 ea                	shr    edx,cl
c0024983:	f6 c1 20             	test   cl,0x20
c0024986:	74 02                	je     c002498a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024988:	89 d0                	mov    eax,edx
c002498a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002498e:	45                   	inc    ebp
c002498f:	83 fd 06             	cmp    ebp,0x6
c0024992:	75 df                	jne    c0024973 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0024994:	eb 76                	jmp    c0024a0c <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0024996:	89 f0                	mov    eax,esi
c0024998:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002499d:	89 fa                	mov    edx,edi
c002499f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00249a6:	0f ac d0 10          	shrd   eax,edx,0x10
c00249aa:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00249af:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00249b3:	c1 ee 18             	shr    esi,0x18
c00249b6:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00249bb:	eb 56                	jmp    c0024a13 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00249bd:	6a 00                	push   0x0
c00249bf:	6a 3f                	push   0x3f
c00249c1:	57                   	push   edi
c00249c2:	56                   	push   esi
c00249c3:	e8 9c 29 00 00       	call   c0027364 <__umoddi3>
c00249c8:	83 c4 10             	add    esp,0x10
c00249cb:	40                   	inc    eax
c00249cc:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00249d0:	6a 00                	push   0x0
c00249d2:	68 f0 03 00 00       	push   0x3f0
c00249d7:	57                   	push   edi
c00249d8:	56                   	push   esi
c00249d9:	e8 86 28 00 00       	call   c0027264 <__udivdi3>
c00249de:	83 c4 10             	add    esp,0x10
c00249e1:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00249e6:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00249ed:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00249f2:	6a 00                	push   0x0
c00249f4:	6a 3f                	push   0x3f
c00249f6:	57                   	push   edi
c00249f7:	56                   	push   esi
c00249f8:	e8 67 28 00 00       	call   c0027264 <__udivdi3>
c00249fd:	83 c4 10             	add    esp,0x10
c0024a00:	89 c6                	mov    esi,eax
c0024a02:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024a07:	83 e6 0f             	and    esi,0xf
c0024a0a:	eb 07                	jmp    c0024a13 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024a0c:	31 f6                	xor    esi,esi
c0024a0e:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024a13:	bf 01 00 00 00       	mov    edi,0x1
c0024a18:	50                   	push   eax
c0024a19:	6a 00                	push   0x0
c0024a1b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a22:	50                   	push   eax
c0024a23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024a27:	e8 6c f0 ff ff       	call   c0023a98 <IDE::enableIRQs(unsigned char, bool)>
c0024a2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024a2f:	e8 98 fe ff ff       	call   c00248cc <ATA::readyForCommand()>
c0024a34:	83 c4 10             	add    esp,0x10
c0024a37:	84 c0                	test   al,al
c0024a39:	0f 84 5a 02 00 00    	je     c0024c99 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024a3f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024a45:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024a4b:	c1 e0 04             	shl    eax,0x4
c0024a4e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024a55:	09 c6                	or     esi,eax
c0024a57:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024a5c:	75 05                	jne    c0024a63 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024a5e:	83 ce a0             	or     esi,0xffffffa0
c0024a61:	eb 03                	jmp    c0024a66 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024a63:	83 ce e0             	or     esi,0xffffffe0
c0024a66:	89 f0                	mov    eax,esi
c0024a68:	0f b6 f0             	movzx  esi,al
c0024a6b:	56                   	push   esi
c0024a6c:	6a 06                	push   0x6
c0024a6e:	51                   	push   ecx
c0024a6f:	52                   	push   edx
c0024a70:	e8 17 ee ff ff       	call   c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a75:	83 c4 10             	add    esp,0x10
c0024a78:	6a 00                	push   0x0
c0024a7a:	6a 01                	push   0x1
c0024a7c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a83:	50                   	push   eax
c0024a84:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a8a:	e8 fd ed ff ff       	call   c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a8f:	83 c4 10             	add    esp,0x10
c0024a92:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024a97:	75 6e                	jne    c0024b07 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024a99:	6a 00                	push   0x0
c0024a9b:	6a 08                	push   0x8
c0024a9d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024aa4:	50                   	push   eax
c0024aa5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024aab:	e8 dc ed ff ff       	call   c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ab0:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024ab5:	50                   	push   eax
c0024ab6:	6a 09                	push   0x9
c0024ab8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024abf:	50                   	push   eax
c0024ac0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ac6:	e8 c1 ed ff ff       	call   c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024acb:	83 c4 20             	add    esp,0x20
c0024ace:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024ad3:	50                   	push   eax
c0024ad4:	6a 0a                	push   0xa
c0024ad6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024add:	50                   	push   eax
c0024ade:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ae4:	e8 a3 ed ff ff       	call   c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ae9:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024aee:	50                   	push   eax
c0024aef:	6a 0b                	push   0xb
c0024af1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024af8:	50                   	push   eax
c0024af9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024aff:	e8 88 ed ff ff       	call   c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b04:	83 c4 20             	add    esp,0x20
c0024b07:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024b0c:	50                   	push   eax
c0024b0d:	6a 02                	push   0x2
c0024b0f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b16:	50                   	push   eax
c0024b17:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b1d:	e8 6a ed ff ff       	call   c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b22:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024b27:	50                   	push   eax
c0024b28:	6a 03                	push   0x3
c0024b2a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b31:	50                   	push   eax
c0024b32:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b38:	e8 4f ed ff ff       	call   c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b3d:	83 c4 20             	add    esp,0x20
c0024b40:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024b45:	50                   	push   eax
c0024b46:	6a 04                	push   0x4
c0024b48:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b4f:	50                   	push   eax
c0024b50:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b56:	e8 31 ed ff ff       	call   c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b5b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024b60:	50                   	push   eax
c0024b61:	6a 05                	push   0x5
c0024b63:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b6a:	50                   	push   eax
c0024b6b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b71:	e8 16 ed ff ff       	call   c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b76:	83 c4 20             	add    esp,0x20
c0024b79:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024b7e:	0f 94 c0             	sete   al
c0024b81:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024b86:	74 09                	je     c0024b91 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024b88:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024b8f:	eb 07                	jmp    c0024b98 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024b91:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024b98:	0f b6 c0             	movzx  eax,al
c0024b9b:	50                   	push   eax
c0024b9c:	6a 07                	push   0x7
c0024b9e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ba5:	50                   	push   eax
c0024ba6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bac:	e8 db ec ff ff       	call   c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bb1:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024bb5:	83 c4 10             	add    esp,0x10
c0024bb8:	85 f6                	test   esi,esi
c0024bba:	0f 84 ba 00 00 00    	je     c0024c7a <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024bc0:	50                   	push   eax
c0024bc1:	6a 01                	push   0x1
c0024bc3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bca:	50                   	push   eax
c0024bcb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bd1:	e8 62 f8 ff ff       	call   c0024438 <IDE::polling(unsigned char, unsigned int)>
c0024bd6:	83 c4 10             	add    esp,0x10
c0024bd9:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024bdf:	84 c0                	test   al,al
c0024be1:	74 2c                	je     c0024c0f <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024be3:	0f b6 f8             	movzx  edi,al
c0024be6:	0f b6 d2             	movzx  edx,dl
c0024be9:	57                   	push   edi
c0024bea:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024bf1:	50                   	push   eax
c0024bf2:	52                   	push   edx
c0024bf3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bf9:	e8 a4 f6 ff ff       	call   c00242a2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024bfe:	c7 04 24 ac d8 02 c0 	mov    DWORD PTR [esp],0xc002d8ac
c0024c05:	e8 c3 e2 fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0024c0a:	e9 87 00 00 00       	jmp    c0024c96 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024c0f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024c14:	74 33                	je     c0024c49 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024c16:	31 ed                	xor    ebp,ebp
c0024c18:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024c1c:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024c20:	50                   	push   eax
c0024c21:	50                   	push   eax
c0024c22:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c29:	50                   	push   eax
c0024c2a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c30:	e8 45 ec ff ff       	call   c002387a <IDE::getBase(unsigned char)>
c0024c35:	89 c2                	mov    edx,eax
c0024c37:	89 f8                	mov    eax,edi
c0024c39:	66 ef                	out    dx,ax
c0024c3b:	45                   	inc    ebp
c0024c3c:	83 c4 10             	add    esp,0x10
c0024c3f:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024c45:	75 d1                	jne    c0024c18 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024c47:	eb 23                	jmp    c0024c6c <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024c49:	0f b6 d2             	movzx  edx,dl
c0024c4c:	51                   	push   ecx
c0024c4d:	51                   	push   ecx
c0024c4e:	52                   	push   edx
c0024c4f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c55:	e8 20 ec ff ff       	call   c002387a <IDE::getBase(unsigned char)>
c0024c5a:	b9 00 01 00 00       	mov    ecx,0x100
c0024c5f:	89 c2                	mov    edx,eax
c0024c61:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024c65:	fc                   	cld    
c0024c66:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024c69:	83 c4 10             	add    esp,0x10
c0024c6c:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024c74:	4e                   	dec    esi
c0024c75:	e9 3e ff ff ff       	jmp    c0024bb8 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024c7a:	31 ff                	xor    edi,edi
c0024c7c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024c81:	74 16                	je     c0024c99 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024c83:	50                   	push   eax
c0024c84:	50                   	push   eax
c0024c85:	31 c0                	xor    eax,eax
c0024c87:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024c8c:	0f 94 c0             	sete   al
c0024c8f:	50                   	push   eax
c0024c90:	53                   	push   ebx
c0024c91:	e8 ec fb ff ff       	call   c0024882 <ATA::flush(bool)>
c0024c96:	83 c4 10             	add    esp,0x10
c0024c99:	83 c4 2c             	add    esp,0x2c
c0024c9c:	89 f8                	mov    eax,edi
c0024c9e:	5b                   	pop    ebx
c0024c9f:	5e                   	pop    esi
c0024ca0:	5f                   	pop    edi
c0024ca1:	5d                   	pop    ebp
c0024ca2:	c3                   	ret    
c0024ca3:	90                   	nop

c0024ca4 <ATA::read(unsigned long long, int, void*)>:
c0024ca4:	57                   	push   edi
c0024ca5:	b8 04 00 00 00       	mov    eax,0x4
c0024caa:	56                   	push   esi
c0024cab:	53                   	push   ebx
c0024cac:	83 ec 10             	sub    esp,0x10
c0024caf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024cb3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024cb7:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024cba:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024cbe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024cc2:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024cc8:	77 3b                	ja     c0024d05 <ATA::read(unsigned long long, int, void*)+0x61>
c0024cca:	b8 06 00 00 00       	mov    eax,0x6
c0024ccf:	85 d2                	test   edx,edx
c0024cd1:	74 32                	je     c0024d05 <ATA::read(unsigned long long, int, void*)+0x61>
c0024cd3:	50                   	push   eax
c0024cd4:	50                   	push   eax
c0024cd5:	6a 00                	push   0x0
c0024cd7:	52                   	push   edx
c0024cd8:	53                   	push   ebx
c0024cd9:	57                   	push   edi
c0024cda:	56                   	push   esi
c0024cdb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024cdf:	e8 38 fc ff ff       	call   c002491c <ATA::access(unsigned long long, int, void*, bool)>
c0024ce4:	83 c4 20             	add    esp,0x20
c0024ce7:	85 c0                	test   eax,eax
c0024ce9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024ced:	75 11                	jne    c0024d00 <ATA::read(unsigned long long, int, void*)+0x5c>
c0024cef:	01 1d 48 32 03 c0    	add    DWORD PTR ds:0xc0033248,ebx
c0024cf5:	e8 d8 bc fe ff       	call   c00109d2 <VgaText::updateDiskUsage()>
c0024cfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024cfe:	eb 05                	jmp    c0024d05 <ATA::read(unsigned long long, int, void*)+0x61>
c0024d00:	b8 01 00 00 00       	mov    eax,0x1
c0024d05:	83 c4 10             	add    esp,0x10
c0024d08:	5b                   	pop    ebx
c0024d09:	5e                   	pop    esi
c0024d0a:	5f                   	pop    edi
c0024d0b:	c3                   	ret    

c0024d0c <ATA::write(unsigned long long, int, void*)>:
c0024d0c:	57                   	push   edi
c0024d0d:	b8 04 00 00 00       	mov    eax,0x4
c0024d12:	56                   	push   esi
c0024d13:	53                   	push   ebx
c0024d14:	83 ec 10             	sub    esp,0x10
c0024d17:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024d1b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024d1f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024d22:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024d26:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024d2a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024d30:	77 3b                	ja     c0024d6d <ATA::write(unsigned long long, int, void*)+0x61>
c0024d32:	b8 06 00 00 00       	mov    eax,0x6
c0024d37:	85 d2                	test   edx,edx
c0024d39:	74 32                	je     c0024d6d <ATA::write(unsigned long long, int, void*)+0x61>
c0024d3b:	50                   	push   eax
c0024d3c:	50                   	push   eax
c0024d3d:	6a 01                	push   0x1
c0024d3f:	52                   	push   edx
c0024d40:	53                   	push   ebx
c0024d41:	57                   	push   edi
c0024d42:	56                   	push   esi
c0024d43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024d47:	e8 d0 fb ff ff       	call   c002491c <ATA::access(unsigned long long, int, void*, bool)>
c0024d4c:	83 c4 20             	add    esp,0x20
c0024d4f:	85 c0                	test   eax,eax
c0024d51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024d55:	75 11                	jne    c0024d68 <ATA::write(unsigned long long, int, void*)+0x5c>
c0024d57:	01 1d 44 32 03 c0    	add    DWORD PTR ds:0xc0033244,ebx
c0024d5d:	e8 70 bc fe ff       	call   c00109d2 <VgaText::updateDiskUsage()>
c0024d62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024d66:	eb 05                	jmp    c0024d6d <ATA::write(unsigned long long, int, void*)+0x61>
c0024d68:	b8 01 00 00 00       	mov    eax,0x1
c0024d6d:	83 c4 10             	add    esp,0x10
c0024d70:	5b                   	pop    ebx
c0024d71:	5e                   	pop    esi
c0024d72:	5f                   	pop    edi
c0024d73:	c3                   	ret    

c0024d74 <ATA::detectCHS()>:
c0024d74:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024d78:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024d7e:	c1 e0 06             	shl    eax,0x6
c0024d81:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024d87:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024d91:	c7 44 24 04 b7 d8 02 c0 	mov    DWORD PTR [esp+0x4],0xc002d8b7
c0024d99:	e9 f2 5a ff ff       	jmp    c001a890 <Krnl::panic(char const*)>

c0024d9e <ATA::open(int, int, void*)>:
c0024d9e:	53                   	push   ebx
c0024d9f:	83 ec 08             	sub    esp,0x8
c0024da2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024da6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024daa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024dae:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024db4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024dba:	c1 e0 06             	shl    eax,0x6
c0024dbd:	01 d0                	add    eax,edx
c0024dbf:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024dc6:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024dcc:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024dd3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024ddd:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024de3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024dea:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024df1:	75 0c                	jne    c0024dff <ATA::open(int, int, void*)+0x61>
c0024df3:	83 ec 0c             	sub    esp,0xc
c0024df6:	53                   	push   ebx
c0024df7:	e8 78 ff ff ff       	call   c0024d74 <ATA::detectCHS()>
c0024dfc:	83 c4 10             	add    esp,0x10
c0024dff:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024e05:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024e0b:	c1 e0 06             	shl    eax,0x6
c0024e0e:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024e15:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024e1f:	d1 e8                	shr    eax,1
c0024e21:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024e27:	6a 04                	push   0x4
c0024e29:	6a 0c                	push   0xc
c0024e2b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e32:	50                   	push   eax
c0024e33:	52                   	push   edx
c0024e34:	e8 53 ea ff ff       	call   c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e39:	90                   	nop
c0024e3a:	90                   	nop
c0024e3b:	6a 00                	push   0x0
c0024e3d:	6a 0c                	push   0xc
c0024e3f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e46:	50                   	push   eax
c0024e47:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e4d:	e8 3a ea ff ff       	call   c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e52:	83 c4 14             	add    esp,0x14
c0024e55:	53                   	push   ebx
c0024e56:	e8 2f f9 fe ff       	call   c001478a <PhysicalDisk::startCache()>
c0024e5b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024e5e:	e8 07 1c ff ff       	call   c0016a6a <createPartitionsForDisk(PhysicalDisk*)>
c0024e63:	31 c0                	xor    eax,eax
c0024e65:	83 c4 18             	add    esp,0x18
c0024e68:	5b                   	pop    ebx
c0024e69:	c3                   	ret    

c0024e6a <ATAPI::write(unsigned long long, int, void*)>:
c0024e6a:	b8 03 00 00 00       	mov    eax,0x3
c0024e6f:	c3                   	ret    

c0024e70 <ATAPI::close(int, int, void*)>:
c0024e70:	83 ec 0c             	sub    esp,0xc
c0024e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e77:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024e7d:	85 c0                	test   eax,eax
c0024e7f:	74 0c                	je     c0024e8d <ATAPI::close(int, int, void*)+0x1d>
c0024e81:	83 ec 0c             	sub    esp,0xc
c0024e84:	8b 10                	mov    edx,DWORD PTR [eax]
c0024e86:	50                   	push   eax
c0024e87:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024e8a:	83 c4 10             	add    esp,0x10
c0024e8d:	31 c0                	xor    eax,eax
c0024e8f:	83 c4 0c             	add    esp,0xc
c0024e92:	c3                   	ret    
c0024e93:	90                   	nop

c0024e94 <ATAPI::ATAPI()>:
c0024e94:	83 ec 0c             	sub    esp,0xc
c0024e97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e9b:	83 ec 04             	sub    esp,0x4
c0024e9e:	68 00 08 00 00       	push   0x800
c0024ea3:	68 f1 d9 02 c0       	push   0xc002d9f1
c0024ea8:	50                   	push   eax
c0024ea9:	e8 74 f8 fe ff       	call   c0014722 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024eae:	83 c4 10             	add    esp,0x10
c0024eb1:	ba 0c d9 02 c0       	mov    edx,0xc002d90c
c0024eb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024eba:	89 10                	mov    DWORD PTR [eax],edx
c0024ebc:	90                   	nop
c0024ebd:	83 c4 0c             	add    esp,0xc
c0024ec0:	c3                   	ret    
c0024ec1:	90                   	nop

c0024ec2 <ATAPI::readyForCommand()>:
c0024ec2:	56                   	push   esi
c0024ec3:	53                   	push   ebx
c0024ec4:	31 db                	xor    ebx,ebx
c0024ec6:	50                   	push   eax
c0024ec7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024ecb:	50                   	push   eax
c0024ecc:	6a 0c                	push   0xc
c0024ece:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024ed5:	50                   	push   eax
c0024ed6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024edc:	e8 6b ea ff ff       	call   c002394c <IDE::read(unsigned char, unsigned char)>
c0024ee1:	83 c4 10             	add    esp,0x10
c0024ee4:	a8 88                	test   al,0x88
c0024ee6:	74 23                	je     c0024f0b <ATAPI::readyForCommand()+0x49>
c0024ee8:	43                   	inc    ebx
c0024ee9:	83 fb 63             	cmp    ebx,0x63
c0024eec:	7e dd                	jle    c0024ecb <ATAPI::readyForCommand()+0x9>
c0024eee:	51                   	push   ecx
c0024eef:	51                   	push   ecx
c0024ef0:	6a 00                	push   0x0
c0024ef2:	68 40 42 0f 00       	push   0xf4240
c0024ef7:	e8 2d 99 ff ff       	call   c001e829 <nanoSleep(unsigned long long)>
c0024efc:	83 c4 10             	add    esp,0x10
c0024eff:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024f05:	75 c4                	jne    c0024ecb <ATAPI::readyForCommand()+0x9>
c0024f07:	31 c0                	xor    eax,eax
c0024f09:	eb 02                	jmp    c0024f0d <ATAPI::readyForCommand()+0x4b>
c0024f0b:	b0 01                	mov    al,0x1
c0024f0d:	5a                   	pop    edx
c0024f0e:	5b                   	pop    ebx
c0024f0f:	5e                   	pop    esi
c0024f10:	c3                   	ret    
c0024f11:	90                   	nop

c0024f12 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024f12:	55                   	push   ebp
c0024f13:	57                   	push   edi
c0024f14:	56                   	push   esi
c0024f15:	53                   	push   ebx
c0024f16:	83 ec 20             	sub    esp,0x20
c0024f19:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024f1d:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024f21:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024f25:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024f29:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024f2d:	6a 01                	push   0x1
c0024f2f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f36:	50                   	push   eax
c0024f37:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f3d:	e8 56 eb ff ff       	call   c0023a98 <IDE::enableIRQs(unsigned char, bool)>
c0024f42:	5e                   	pop    esi
c0024f43:	58                   	pop    eax
c0024f44:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f4b:	50                   	push   eax
c0024f4c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f52:	e8 0f e9 ff ff       	call   c0023866 <IDE::prepareInterrupt(unsigned char)>
c0024f57:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024f5a:	e8 63 ff ff ff       	call   c0024ec2 <ATAPI::readyForCommand()>
c0024f5f:	83 c4 10             	add    esp,0x10
c0024f62:	84 c0                	test   al,al
c0024f64:	75 0a                	jne    c0024f70 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024f66:	bb 01 00 00 00       	mov    ebx,0x1
c0024f6b:	e9 57 02 00 00       	jmp    c00251c7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024f70:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024f76:	c1 e0 04             	shl    eax,0x4
c0024f79:	0f b6 c0             	movzx  eax,al
c0024f7c:	50                   	push   eax
c0024f7d:	6a 06                	push   0x6
c0024f7f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f86:	50                   	push   eax
c0024f87:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f8d:	e8 fa e8 ff ff       	call   c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f92:	6a 00                	push   0x0
c0024f94:	6a 01                	push   0x1
c0024f96:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f9d:	50                   	push   eax
c0024f9e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fa4:	e8 e3 e8 ff ff       	call   c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024fa9:	83 c4 20             	add    esp,0x20
c0024fac:	0f b6 c3             	movzx  eax,bl
c0024faf:	0f b6 df             	movzx  ebx,bh
c0024fb2:	50                   	push   eax
c0024fb3:	6a 04                	push   0x4
c0024fb5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024fbc:	50                   	push   eax
c0024fbd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fc3:	e8 c4 e8 ff ff       	call   c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024fc8:	53                   	push   ebx
c0024fc9:	6a 05                	push   0x5
c0024fcb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024fd2:	50                   	push   eax
c0024fd3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fd9:	e8 ae e8 ff ff       	call   c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024fde:	83 c4 20             	add    esp,0x20
c0024fe1:	68 a0 00 00 00       	push   0xa0
c0024fe6:	6a 07                	push   0x7
c0024fe8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024fef:	50                   	push   eax
c0024ff0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ff6:	e8 91 e8 ff ff       	call   c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ffb:	83 c4 0c             	add    esp,0xc
c0024ffe:	6a 01                	push   0x1
c0025000:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025007:	50                   	push   eax
c0025008:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002500e:	e8 25 f4 ff ff       	call   c0024438 <IDE::polling(unsigned char, unsigned int)>
c0025013:	83 c4 10             	add    esp,0x10
c0025016:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c002501c:	84 c0                	test   al,al
c002501e:	74 23                	je     c0025043 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0025020:	0f b6 d8             	movzx  ebx,al
c0025023:	0f b6 d2             	movzx  edx,dl
c0025026:	53                   	push   ebx
c0025027:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002502e:	50                   	push   eax
c002502f:	52                   	push   edx
c0025030:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025036:	e8 67 f2 ff ff       	call   c00242a2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002503b:	83 c4 10             	add    esp,0x10
c002503e:	e9 84 01 00 00       	jmp    c00251c7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025043:	0f b6 d2             	movzx  edx,dl
c0025046:	53                   	push   ebx
c0025047:	53                   	push   ebx
c0025048:	52                   	push   edx
c0025049:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002504f:	e8 26 e8 ff ff       	call   c002387a <IDE::getBase(unsigned char)>
c0025054:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0025058:	b9 06 00 00 00       	mov    ecx,0x6
c002505d:	89 c2                	mov    edx,eax
c002505f:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0025062:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0025066:	83 c4 10             	add    esp,0x10
c0025069:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002506f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025076:	85 db                	test   ebx,ebx
c0025078:	0f 84 ec 00 00 00    	je     c002516a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002507e:	51                   	push   ecx
c002507f:	51                   	push   ecx
c0025080:	52                   	push   edx
c0025081:	50                   	push   eax
c0025082:	e8 73 e9 ff ff       	call   c00239fa <IDE::waitInterrupt(unsigned char)>
c0025087:	83 c4 10             	add    esp,0x10
c002508a:	84 c0                	test   al,al
c002508c:	0f 84 d4 fe ff ff    	je     c0024f66 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0025092:	56                   	push   esi
c0025093:	56                   	push   esi
c0025094:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002509b:	50                   	push   eax
c002509c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250a2:	e8 bf e7 ff ff       	call   c0023866 <IDE::prepareInterrupt(unsigned char)>
c00250a7:	83 c4 0c             	add    esp,0xc
c00250aa:	6a 04                	push   0x4
c00250ac:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00250b3:	50                   	push   eax
c00250b4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250ba:	e8 8d e8 ff ff       	call   c002394c <IDE::read(unsigned char, unsigned char)>
c00250bf:	83 c4 0c             	add    esp,0xc
c00250c2:	89 c6                	mov    esi,eax
c00250c4:	6a 05                	push   0x5
c00250c6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00250cd:	50                   	push   eax
c00250ce:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250d4:	e8 73 e8 ff ff       	call   c002394c <IDE::read(unsigned char, unsigned char)>
c00250d9:	89 f1                	mov    ecx,esi
c00250db:	0f b6 c0             	movzx  eax,al
c00250de:	0f b6 f1             	movzx  esi,cl
c00250e1:	c1 e0 08             	shl    eax,0x8
c00250e4:	09 c6                	or     esi,eax
c00250e6:	d1 fe                	sar    esi,1
c00250e8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00250ec:	83 c4 10             	add    esp,0x10
c00250ef:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00250f4:	74 41                	je     c0025137 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00250f6:	31 c9                	xor    ecx,ecx
c00250f8:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00250fe:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025105:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0025109:	75 0a                	jne    c0025115 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002510b:	01 c9                	add    ecx,ecx
c002510d:	01 cd                	add    ebp,ecx
c002510f:	4b                   	dec    ebx
c0025110:	e9 54 ff ff ff       	jmp    c0025069 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0025115:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002511a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002511e:	51                   	push   ecx
c002511f:	51                   	push   ecx
c0025120:	52                   	push   edx
c0025121:	50                   	push   eax
c0025122:	e8 53 e7 ff ff       	call   c002387a <IDE::getBase(unsigned char)>
c0025127:	89 c2                	mov    edx,eax
c0025129:	89 f0                	mov    eax,esi
c002512b:	66 ef                	out    dx,ax
c002512d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0025131:	83 c4 10             	add    esp,0x10
c0025134:	41                   	inc    ecx
c0025135:	eb c1                	jmp    c00250f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0025137:	31 f6                	xor    esi,esi
c0025139:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002513f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025146:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002514a:	75 06                	jne    c0025152 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c002514c:	01 f6                	add    esi,esi
c002514e:	01 f5                	add    ebp,esi
c0025150:	eb bd                	jmp    c002510f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0025152:	51                   	push   ecx
c0025153:	51                   	push   ecx
c0025154:	52                   	push   edx
c0025155:	50                   	push   eax
c0025156:	e8 1f e7 ff ff       	call   c002387a <IDE::getBase(unsigned char)>
c002515b:	89 c2                	mov    edx,eax
c002515d:	66 ed                	in     ax,dx
c002515f:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0025164:	83 c4 10             	add    esp,0x10
c0025167:	46                   	inc    esi
c0025168:	eb cf                	jmp    c0025139 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002516a:	51                   	push   ecx
c002516b:	51                   	push   ecx
c002516c:	52                   	push   edx
c002516d:	50                   	push   eax
c002516e:	e8 87 e8 ff ff       	call   c00239fa <IDE::waitInterrupt(unsigned char)>
c0025173:	83 c4 10             	add    esp,0x10
c0025176:	84 c0                	test   al,al
c0025178:	0f 84 e8 fd ff ff    	je     c0024f66 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002517e:	bb a0 86 01 00       	mov    ebx,0x186a0
c0025183:	52                   	push   edx
c0025184:	52                   	push   edx
c0025185:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002518c:	50                   	push   eax
c002518d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025193:	e8 ce e6 ff ff       	call   c0023866 <IDE::prepareInterrupt(unsigned char)>
c0025198:	83 c4 10             	add    esp,0x10
c002519b:	50                   	push   eax
c002519c:	50                   	push   eax
c002519d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00251a4:	50                   	push   eax
c00251a5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00251ab:	e8 ca e6 ff ff       	call   c002387a <IDE::getBase(unsigned char)>
c00251b0:	8d 50 07             	lea    edx,[eax+0x7]
c00251b3:	ec                   	in     al,dx
c00251b4:	83 c4 10             	add    esp,0x10
c00251b7:	a8 88                	test   al,0x88
c00251b9:	74 0a                	je     c00251c5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00251bb:	4b                   	dec    ebx
c00251bc:	75 dd                	jne    c002519b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00251be:	bb 02 00 00 00       	mov    ebx,0x2
c00251c3:	eb 02                	jmp    c00251c7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00251c5:	31 db                	xor    ebx,ebx
c00251c7:	83 c4 1c             	add    esp,0x1c
c00251ca:	89 d8                	mov    eax,ebx
c00251cc:	5b                   	pop    ebx
c00251cd:	5e                   	pop    esi
c00251ce:	5f                   	pop    edi
c00251cf:	5d                   	pop    ebp
c00251d0:	c3                   	ret    
c00251d1:	90                   	nop

c00251d2 <ATAPI::diskRemoved()>:
c00251d2:	83 ec 18             	sub    esp,0x18
c00251d5:	68 fd d9 02 c0       	push   0xc002d9fd
c00251da:	e8 ee dc fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00251df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00251e3:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00251ea:	83 c4 1c             	add    esp,0x1c
c00251ed:	c3                   	ret    

c00251ee <ATAPI::eject()>:
c00251ee:	57                   	push   edi
c00251ef:	b9 03 00 00 00       	mov    ecx,0x3
c00251f4:	53                   	push   ebx
c00251f5:	83 ec 14             	sub    esp,0x14
c00251f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00251fc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025200:	fc                   	cld    
c0025201:	31 c0                	xor    eax,eax
c0025203:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025205:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002520a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002520f:	50                   	push   eax
c0025210:	50                   	push   eax
c0025211:	6a 00                	push   0x0
c0025213:	6a 00                	push   0x0
c0025215:	6a 00                	push   0x0
c0025217:	6a 02                	push   0x2
c0025219:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002521d:	50                   	push   eax
c002521e:	53                   	push   ebx
c002521f:	e8 ee fc ff ff       	call   c0024f12 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025224:	83 c4 14             	add    esp,0x14
c0025227:	53                   	push   ebx
c0025228:	e8 a5 ff ff ff       	call   c00251d2 <ATAPI::diskRemoved()>
c002522d:	83 c4 24             	add    esp,0x24
c0025230:	31 c0                	xor    eax,eax
c0025232:	5b                   	pop    ebx
c0025233:	5f                   	pop    edi
c0025234:	c3                   	ret    
c0025235:	90                   	nop

c0025236 <ATAPI::diskInserted()>:
c0025236:	53                   	push   ebx
c0025237:	83 ec 14             	sub    esp,0x14
c002523a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002523e:	68 14 da 02 c0       	push   0xc002da14
c0025243:	e8 85 dc fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0025248:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c002524f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025252:	e8 33 f5 fe ff       	call   c001478a <PhysicalDisk::startCache()>
c0025257:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002525b:	83 c4 18             	add    esp,0x18
c002525e:	5b                   	pop    ebx
c002525f:	e9 06 18 ff ff       	jmp    c0016a6a <createPartitionsForDisk(PhysicalDisk*)>

c0025264 <ATAPI::detectMedia()>:
c0025264:	56                   	push   esi
c0025265:	53                   	push   ebx
c0025266:	83 ec 28             	sub    esp,0x28
c0025269:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002526d:	6a 0c                	push   0xc
c002526f:	6a 00                	push   0x0
c0025271:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025275:	56                   	push   esi
c0025276:	e8 f1 b4 fd ff       	call   c000076c <memset>
c002527b:	58                   	pop    eax
c002527c:	5a                   	pop    edx
c002527d:	6a 00                	push   0x0
c002527f:	6a 00                	push   0x0
c0025281:	6a 00                	push   0x0
c0025283:	6a 00                	push   0x0
c0025285:	56                   	push   esi
c0025286:	53                   	push   ebx
c0025287:	e8 86 fc ff ff       	call   c0024f12 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002528c:	83 c4 1c             	add    esp,0x1c
c002528f:	6a 0c                	push   0xc
c0025291:	6a 00                	push   0x0
c0025293:	56                   	push   esi
c0025294:	e8 d3 b4 fd ff       	call   c000076c <memset>
c0025299:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002529e:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00252a3:	59                   	pop    ecx
c00252a4:	58                   	pop    eax
c00252a5:	6a 01                	push   0x1
c00252a7:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00252ab:	50                   	push   eax
c00252ac:	6a 00                	push   0x0
c00252ae:	6a 12                	push   0x12
c00252b0:	56                   	push   esi
c00252b1:	53                   	push   ebx
c00252b2:	e8 5b fc ff ff       	call   c0024f12 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00252b7:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00252bb:	83 c4 20             	add    esp,0x20
c00252be:	83 e0 7f             	and    eax,0x7f
c00252c1:	3c 70                	cmp    al,0x70
c00252c3:	74 15                	je     c00252da <ATAPI::detectMedia()+0x76>
c00252c5:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00252cc:	75 0c                	jne    c00252da <ATAPI::detectMedia()+0x76>
c00252ce:	83 ec 0c             	sub    esp,0xc
c00252d1:	53                   	push   ebx
c00252d2:	e8 5f ff ff ff       	call   c0025236 <ATAPI::diskInserted()>
c00252d7:	83 c4 10             	add    esp,0x10
c00252da:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00252de:	83 e0 0f             	and    eax,0xf
c00252e1:	3c 02                	cmp    al,0x2
c00252e3:	75 1b                	jne    c0025300 <ATAPI::detectMedia()+0x9c>
c00252e5:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00252ea:	75 2d                	jne    c0025319 <ATAPI::detectMedia()+0xb5>
c00252ec:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00252f3:	74 24                	je     c0025319 <ATAPI::detectMedia()+0xb5>
c00252f5:	83 ec 0c             	sub    esp,0xc
c00252f8:	53                   	push   ebx
c00252f9:	e8 d4 fe ff ff       	call   c00251d2 <ATAPI::diskRemoved()>
c00252fe:	eb 16                	jmp    c0025316 <ATAPI::detectMedia()+0xb2>
c0025300:	84 c0                	test   al,al
c0025302:	75 15                	jne    c0025319 <ATAPI::detectMedia()+0xb5>
c0025304:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002530b:	75 0c                	jne    c0025319 <ATAPI::detectMedia()+0xb5>
c002530d:	83 ec 0c             	sub    esp,0xc
c0025310:	53                   	push   ebx
c0025311:	e8 20 ff ff ff       	call   c0025236 <ATAPI::diskInserted()>
c0025316:	83 c4 10             	add    esp,0x10
c0025319:	83 c4 24             	add    esp,0x24
c002531c:	5b                   	pop    ebx
c002531d:	5e                   	pop    esi
c002531e:	c3                   	ret    
c002531f:	90                   	nop

c0025320 <ATAPI::open(int, int, void*)>:
c0025320:	53                   	push   ebx
c0025321:	83 ec 08             	sub    esp,0x8
c0025324:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025328:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002532c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025330:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025336:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002533c:	c1 e0 06             	shl    eax,0x6
c002533f:	01 d0                	add    eax,edx
c0025341:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0025348:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002534e:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0025355:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002535f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0025365:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002536c:	6a 04                	push   0x4
c002536e:	6a 0c                	push   0xc
c0025370:	51                   	push   ecx
c0025371:	52                   	push   edx
c0025372:	e8 15 e5 ff ff       	call   c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025377:	90                   	nop
c0025378:	90                   	nop
c0025379:	6a 00                	push   0x0
c002537b:	6a 0c                	push   0xc
c002537d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025384:	50                   	push   eax
c0025385:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002538b:	e8 fc e4 ff ff       	call   c002388c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025390:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0025397:	83 c4 14             	add    esp,0x14
c002539a:	53                   	push   ebx
c002539b:	e8 c4 fe ff ff       	call   c0025264 <ATAPI::detectMedia()>
c00253a0:	31 c0                	xor    eax,eax
c00253a2:	83 c4 18             	add    esp,0x18
c00253a5:	5b                   	pop    ebx
c00253a6:	c3                   	ret    
c00253a7:	90                   	nop

c00253a8 <ATAPI::read(unsigned long long, int, void*)>:
c00253a8:	55                   	push   ebp
c00253a9:	57                   	push   edi
c00253aa:	56                   	push   esi
c00253ab:	53                   	push   ebx
c00253ac:	83 ec 1c             	sub    esp,0x1c
c00253af:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00253b3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00253b7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00253bb:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00253c2:	74 41                	je     c0025405 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00253c4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00253c8:	b9 03 00 00 00       	mov    ecx,0x3
c00253cd:	fc                   	cld    
c00253ce:	31 c0                	xor    eax,eax
c00253d0:	86 fb                	xchg   bl,bh
c00253d2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00253d4:	c1 c3 10             	rol    ebx,0x10
c00253d7:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00253dc:	89 e8                	mov    eax,ebp
c00253de:	86 fb                	xchg   bl,bh
c00253e0:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00253e4:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00253e8:	50                   	push   eax
c00253e9:	50                   	push   eax
c00253ea:	55                   	push   ebp
c00253eb:	c1 e5 0b             	shl    ebp,0xb
c00253ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00253f2:	6a 00                	push   0x0
c00253f4:	55                   	push   ebp
c00253f5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00253f9:	50                   	push   eax
c00253fa:	56                   	push   esi
c00253fb:	e8 12 fb ff ff       	call   c0024f12 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025400:	83 c4 20             	add    esp,0x20
c0025403:	eb 1a                	jmp    c002541f <ATAPI::read(unsigned long long, int, void*)+0x77>
c0025405:	83 ec 0c             	sub    esp,0xc
c0025408:	56                   	push   esi
c0025409:	e8 56 fe ff ff       	call   c0025264 <ATAPI::detectMedia()>
c002540e:	83 c4 10             	add    esp,0x10
c0025411:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0025418:	75 aa                	jne    c00253c4 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002541a:	b8 02 00 00 00       	mov    eax,0x2
c002541f:	83 c4 1c             	add    esp,0x1c
c0025422:	5b                   	pop    ebx
c0025423:	5e                   	pop    esi
c0025424:	5f                   	pop    edi
c0025425:	5d                   	pop    ebp
c0025426:	c3                   	ret    
c0025427:	90                   	nop

c0025428 <SATA::close(int, int, void*)>:
c0025428:	83 ec 0c             	sub    esp,0xc
c002542b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002542f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025435:	85 c0                	test   eax,eax
c0025437:	74 0c                	je     c0025445 <SATA::close(int, int, void*)+0x1d>
c0025439:	83 ec 0c             	sub    esp,0xc
c002543c:	8b 10                	mov    edx,DWORD PTR [eax]
c002543e:	50                   	push   eax
c002543f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025442:	83 c4 10             	add    esp,0x10
c0025445:	31 c0                	xor    eax,eax
c0025447:	83 c4 0c             	add    esp,0xc
c002544a:	c3                   	ret    
c002544b:	90                   	nop

c002544c <SATA::powerSaving(PowerSavingLevel)>:
c002544c:	c3                   	ret    
c002544d:	90                   	nop

c002544e <SATA::open(int, int, void*)>:
c002544e:	56                   	push   esi
c002544f:	53                   	push   ebx
c0025450:	50                   	push   eax
c0025451:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025455:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025459:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0025463:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025469:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025473:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025477:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025481:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025487:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002548e:	e8 07 ab fe ff       	call   c000ff9a <Phys::allocatePage()>
c0025493:	89 c6                	mov    esi,eax
c0025495:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002549b:	81 c6 00 10 00 00    	add    esi,0x1000
c00254a1:	e8 f4 aa fe ff       	call   c000ff9a <Phys::allocatePage()>
c00254a6:	39 c6                	cmp    esi,eax
c00254a8:	74 10                	je     c00254ba <SATA::open(int, int, void*)+0x6c>
c00254aa:	83 ec 0c             	sub    esp,0xc
c00254ad:	68 3c d9 02 c0       	push   0xc002d93c
c00254b2:	e8 d9 53 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c00254b7:	83 c4 10             	add    esp,0x10
c00254ba:	83 ec 0c             	sub    esp,0xc
c00254bd:	6a 02                	push   0x2
c00254bf:	e8 03 c6 fe ff       	call   c0011ac7 <Virt::allocateKernelVirtualPages(int)>
c00254c4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00254ca:	6a 03                	push   0x3
c00254cc:	50                   	push   eax
c00254cd:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00254d3:	ff 35 70 f0 02 c0    	push   DWORD PTR ds:0xc002f070
c00254d9:	e8 20 ce fe ff       	call   c00122fe <VAS::mapPage(unsigned long, unsigned long, int)>
c00254de:	83 c4 14             	add    esp,0x14
c00254e1:	53                   	push   ebx
c00254e2:	e8 a3 f2 fe ff       	call   c001478a <PhysicalDisk::startCache()>
c00254e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00254ea:	e8 7b 15 ff ff       	call   c0016a6a <createPartitionsForDisk(PhysicalDisk*)>
c00254ef:	83 c4 14             	add    esp,0x14
c00254f2:	31 c0                	xor    eax,eax
c00254f4:	5b                   	pop    ebx
c00254f5:	5e                   	pop    esi
c00254f6:	c3                   	ret    
c00254f7:	90                   	nop

c00254f8 <SATA::SATA()>:
c00254f8:	83 ec 0c             	sub    esp,0xc
c00254fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254ff:	83 ec 04             	sub    esp,0x4
c0025502:	68 00 02 00 00       	push   0x200
c0025507:	68 50 d9 02 c0       	push   0xc002d950
c002550c:	50                   	push   eax
c002550d:	e8 10 f2 fe ff       	call   c0014722 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025512:	83 c4 10             	add    esp,0x10
c0025515:	ba c0 d9 02 c0       	mov    edx,0xc002d9c0
c002551a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002551e:	89 10                	mov    DWORD PTR [eax],edx
c0025520:	90                   	nop
c0025521:	83 c4 0c             	add    esp,0xc
c0025524:	c3                   	ret    
c0025525:	90                   	nop

c0025526 <SATA::access(unsigned long long, int, void*, bool)>:
c0025526:	55                   	push   ebp
c0025527:	57                   	push   edi
c0025528:	56                   	push   esi
c0025529:	53                   	push   ebx
c002552a:	83 ec 2c             	sub    esp,0x2c
c002552d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025531:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0025535:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025539:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002553d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0025541:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0025546:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002554a:	7e 10                	jle    c002555c <SATA::access(unsigned long long, int, void*, bool)+0x36>
c002554c:	83 ec 0c             	sub    esp,0xc
c002554f:	68 60 d9 02 c0       	push   0xc002d960
c0025554:	e8 37 53 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c0025559:	83 c4 10             	add    esp,0x10
c002555c:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0025562:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0025568:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002556e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025572:	89 d0                	mov    eax,edx
c0025574:	c1 e0 07             	shl    eax,0x7
c0025577:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002557b:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025585:	51                   	push   ecx
c0025586:	8d 42 02             	lea    eax,[edx+0x2]
c0025589:	51                   	push   ecx
c002558a:	c1 e0 07             	shl    eax,0x7
c002558d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025591:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025595:	50                   	push   eax
c0025596:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002559c:	e8 af ef ff ff       	call   c0024550 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00255a1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00255a5:	83 c4 10             	add    esp,0x10
c00255a8:	b8 01 00 00 00       	mov    eax,0x1
c00255ad:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00255b2:	0f 84 cd 01 00 00    	je     c0025785 <SATA::access(unsigned long long, int, void*, bool)+0x25f>
c00255b8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00255bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00255c0:	c1 e0 09             	shl    eax,0x9
c00255c3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00255c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00255cc:	74 0f                	je     c00255dd <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c00255ce:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00255d2:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00255d8:	89 c1                	mov    ecx,eax
c00255da:	fc                   	cld    
c00255db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00255dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00255e1:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00255e7:	8d 42 02             	lea    eax,[edx+0x2]
c00255ea:	c1 e0 07             	shl    eax,0x7
c00255ed:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00255f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00255f3:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00255f9:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00255ff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025603:	c1 e1 05             	shl    ecx,0x5
c0025606:	01 c8                	add    eax,ecx
c0025608:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c002560c:	83 e1 01             	and    ecx,0x1
c002560f:	89 ce                	mov    esi,ecx
c0025611:	8a 08                	mov    cl,BYTE PTR [eax]
c0025613:	c1 e6 06             	shl    esi,0x6
c0025616:	83 e1 bf             	and    ecx,0xffffffbf
c0025619:	09 f1                	or     ecx,esi
c002561b:	88 08                	mov    BYTE PTR [eax],cl
c002561d:	8b 08                	mov    ecx,DWORD PTR [eax]
c002561f:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0025625:	81 c9 05 00 01 00    	or     ecx,0x10005
c002562b:	89 08                	mov    DWORD PTR [eax],ecx
c002562d:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0025633:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0025639:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c002563f:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0025642:	50                   	push   eax
c0025643:	68 90 00 00 00       	push   0x90
c0025648:	6a 00                	push   0x0
c002564a:	56                   	push   esi
c002564b:	e8 1c b1 fd ff       	call   c000076c <memset>
c0025650:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0025656:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c002565a:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0025660:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0025664:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0025668:	83 c4 10             	add    esp,0x10
c002566b:	48                   	dec    eax
c002566c:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025671:	89 c1                	mov    ecx,eax
c0025673:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0025679:	25 00 00 c0 ff       	and    eax,0xffc00000
c002567e:	09 c8                	or     eax,ecx
c0025680:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0025686:	66 8b 06             	mov    ax,WORD PTR [esi]
c0025689:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0025690:	66 25 00 7f          	and    ax,0x7f00
c0025694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025698:	66 0d 27 80          	or     ax,0x8027
c002569c:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c00256a1:	66 89 06             	mov    WORD PTR [esi],ax
c00256a4:	19 c0                	sbb    eax,eax
c00256a6:	83 e0 f0             	and    eax,0xfffffff0
c00256a9:	83 c0 35             	add    eax,0x35
c00256ac:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00256af:	89 e8                	mov    eax,ebp
c00256b1:	c1 e8 10             	shr    eax,0x10
c00256b4:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c00256b7:	89 e8                	mov    eax,ebp
c00256b9:	c1 e8 18             	shr    eax,0x18
c00256bc:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c00256bf:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00256c3:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c00256c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00256ca:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00256cd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00256d1:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00256d5:	89 d6                	mov    esi,edx
c00256d7:	31 c0                	xor    eax,eax
c00256d9:	c1 e6 07             	shl    esi,0x7
c00256dc:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00256e0:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c00256e6:	80 e1 88             	and    cl,0x88
c00256e9:	74 0a                	je     c00256f5 <SATA::access(unsigned long long, int, void*, bool)+0x1cf>
c00256eb:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00256f0:	74 0a                	je     c00256fc <SATA::access(unsigned long long, int, void*, bool)+0x1d6>
c00256f2:	40                   	inc    eax
c00256f3:	eb eb                	jmp    c00256e0 <SATA::access(unsigned long long, int, void*, bool)+0x1ba>
c00256f5:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00256fa:	75 0a                	jne    c0025706 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c00256fc:	83 ec 0c             	sub    esp,0xc
c00256ff:	68 99 d9 02 c0       	push   0xc002d999
c0025704:	eb 56                	jmp    c002575c <SATA::access(unsigned long long, int, void*, bool)+0x236>
c0025706:	b8 01 00 00 00       	mov    eax,0x1
c002570b:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002570f:	c1 e2 07             	shl    edx,0x7
c0025712:	d3 e0                	shl    eax,cl
c0025714:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0025718:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002571e:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0025724:	85 c8                	test   eax,ecx
c0025726:	74 20                	je     c0025748 <SATA::access(unsigned long long, int, void*, bool)+0x222>
c0025728:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002572e:	0f ba e1 1e          	bt     ecx,0x1e
c0025732:	73 ea                	jae    c002571e <SATA::access(unsigned long long, int, void*, bool)+0x1f8>
c0025734:	83 ec 0c             	sub    esp,0xc
c0025737:	68 a7 d9 02 c0       	push   0xc002d9a7
c002573c:	e8 4f 51 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c0025741:	83 c4 10             	add    esp,0x10
c0025744:	31 c0                	xor    eax,eax
c0025746:	eb 3d                	jmp    c0025785 <SATA::access(unsigned long long, int, void*, bool)+0x25f>
c0025748:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c002574e:	0f ba e0 1e          	bt     eax,0x1e
c0025752:	73 17                	jae    c002576b <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0025754:	83 ec 0c             	sub    esp,0xc
c0025757:	68 a7 d9 02 c0       	push   0xc002d9a7
c002575c:	e8 2f 51 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c0025761:	83 c4 10             	add    esp,0x10
c0025764:	b8 01 00 00 00       	mov    eax,0x1
c0025769:	eb 1a                	jmp    c0025785 <SATA::access(unsigned long long, int, void*, bool)+0x25f>
c002576b:	31 c0                	xor    eax,eax
c002576d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025772:	75 11                	jne    c0025785 <SATA::access(unsigned long long, int, void*, bool)+0x25f>
c0025774:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002577a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002577e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0025782:	fc                   	cld    
c0025783:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025785:	83 c4 2c             	add    esp,0x2c
c0025788:	5b                   	pop    ebx
c0025789:	5e                   	pop    esi
c002578a:	5f                   	pop    edi
c002578b:	5d                   	pop    ebp
c002578c:	c3                   	ret    
c002578d:	90                   	nop

c002578e <SATA::read(unsigned long long, int, void*)>:
c002578e:	57                   	push   edi
c002578f:	b8 04 00 00 00       	mov    eax,0x4
c0025794:	56                   	push   esi
c0025795:	53                   	push   ebx
c0025796:	83 ec 10             	sub    esp,0x10
c0025799:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002579d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00257a1:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00257a4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00257a8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00257ac:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00257b2:	77 3b                	ja     c00257ef <SATA::read(unsigned long long, int, void*)+0x61>
c00257b4:	b8 06 00 00 00       	mov    eax,0x6
c00257b9:	85 d2                	test   edx,edx
c00257bb:	74 32                	je     c00257ef <SATA::read(unsigned long long, int, void*)+0x61>
c00257bd:	50                   	push   eax
c00257be:	50                   	push   eax
c00257bf:	6a 00                	push   0x0
c00257c1:	52                   	push   edx
c00257c2:	53                   	push   ebx
c00257c3:	57                   	push   edi
c00257c4:	56                   	push   esi
c00257c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00257c9:	e8 58 fd ff ff       	call   c0025526 <SATA::access(unsigned long long, int, void*, bool)>
c00257ce:	83 c4 20             	add    esp,0x20
c00257d1:	85 c0                	test   eax,eax
c00257d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00257d7:	75 11                	jne    c00257ea <SATA::read(unsigned long long, int, void*)+0x5c>
c00257d9:	01 1d 48 32 03 c0    	add    DWORD PTR ds:0xc0033248,ebx
c00257df:	e8 ee b1 fe ff       	call   c00109d2 <VgaText::updateDiskUsage()>
c00257e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00257e8:	eb 05                	jmp    c00257ef <SATA::read(unsigned long long, int, void*)+0x61>
c00257ea:	b8 01 00 00 00       	mov    eax,0x1
c00257ef:	83 c4 10             	add    esp,0x10
c00257f2:	5b                   	pop    ebx
c00257f3:	5e                   	pop    esi
c00257f4:	5f                   	pop    edi
c00257f5:	c3                   	ret    

c00257f6 <SATA::write(unsigned long long, int, void*)>:
c00257f6:	55                   	push   ebp
c00257f7:	b8 04 00 00 00       	mov    eax,0x4
c00257fc:	57                   	push   edi
c00257fd:	56                   	push   esi
c00257fe:	53                   	push   ebx
c00257ff:	83 ec 1c             	sub    esp,0x1c
c0025802:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025806:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002580a:	8d 75 ff             	lea    esi,[ebp-0x1]
c002580d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0025811:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0025815:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002581b:	77 56                	ja     c0025873 <SATA::write(unsigned long long, int, void*)+0x7d>
c002581d:	b8 06 00 00 00       	mov    eax,0x6
c0025822:	85 ff                	test   edi,edi
c0025824:	74 4d                	je     c0025873 <SATA::write(unsigned long long, int, void*)+0x7d>
c0025826:	89 ee                	mov    esi,ebp
c0025828:	c1 e6 09             	shl    esi,0x9
c002582b:	01 fe                	add    esi,edi
c002582d:	89 c8                	mov    eax,ecx
c002582f:	89 da                	mov    edx,ebx
c0025831:	83 c0 01             	add    eax,0x1
c0025834:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025838:	83 d2 00             	adc    edx,0x0
c002583b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002583f:	50                   	push   eax
c0025840:	50                   	push   eax
c0025841:	6a 01                	push   0x1
c0025843:	57                   	push   edi
c0025844:	81 c7 00 02 00 00    	add    edi,0x200
c002584a:	6a 01                	push   0x1
c002584c:	53                   	push   ebx
c002584d:	51                   	push   ecx
c002584e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025852:	e8 cf fc ff ff       	call   c0025526 <SATA::access(unsigned long long, int, void*, bool)>
c0025857:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002585b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002585f:	83 c4 20             	add    esp,0x20
c0025862:	39 f7                	cmp    edi,esi
c0025864:	75 c7                	jne    c002582d <SATA::write(unsigned long long, int, void*)+0x37>
c0025866:	01 2d 44 32 03 c0    	add    DWORD PTR ds:0xc0033244,ebp
c002586c:	e8 61 b1 fe ff       	call   c00109d2 <VgaText::updateDiskUsage()>
c0025871:	31 c0                	xor    eax,eax
c0025873:	83 c4 1c             	add    esp,0x1c
c0025876:	5b                   	pop    ebx
c0025877:	5e                   	pop    esi
c0025878:	5f                   	pop    edi
c0025879:	5d                   	pop    ebp
c002587a:	c3                   	ret    
c002587b:	90                   	nop

c002587c <SATAPI::write(unsigned long long, int, void*)>:
c002587c:	b8 03 00 00 00       	mov    eax,0x3
c0025881:	c3                   	ret    

c0025882 <SATAPI::close(int, int, void*)>:
c0025882:	83 ec 0c             	sub    esp,0xc
c0025885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025889:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002588f:	85 c0                	test   eax,eax
c0025891:	74 0c                	je     c002589f <SATAPI::close(int, int, void*)+0x1d>
c0025893:	83 ec 0c             	sub    esp,0xc
c0025896:	8b 10                	mov    edx,DWORD PTR [eax]
c0025898:	50                   	push   eax
c0025899:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002589c:	83 c4 10             	add    esp,0x10
c002589f:	31 c0                	xor    eax,eax
c00258a1:	83 c4 0c             	add    esp,0xc
c00258a4:	c3                   	ret    
c00258a5:	90                   	nop

c00258a6 <SATAPI::SATAPI()>:
c00258a6:	83 ec 0c             	sub    esp,0xc
c00258a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258ad:	83 ec 04             	sub    esp,0x4
c00258b0:	68 00 08 00 00       	push   0x800
c00258b5:	68 f0 d9 02 c0       	push   0xc002d9f0
c00258ba:	50                   	push   eax
c00258bb:	e8 62 ee fe ff       	call   c0014722 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00258c0:	83 c4 10             	add    esp,0x10
c00258c3:	ba 9c da 02 c0       	mov    edx,0xc002da9c
c00258c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258cc:	89 10                	mov    DWORD PTR [eax],edx
c00258ce:	90                   	nop
c00258cf:	83 c4 0c             	add    esp,0xc
c00258d2:	c3                   	ret    
c00258d3:	90                   	nop

c00258d4 <SATAPI::diskRemoved()>:
c00258d4:	83 ec 18             	sub    esp,0x18
c00258d7:	68 fc d9 02 c0       	push   0xc002d9fc
c00258dc:	e8 ec d5 fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00258e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00258e5:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c00258ec:	83 c4 1c             	add    esp,0x1c
c00258ef:	c3                   	ret    

c00258f0 <SATAPI::diskInserted()>:
c00258f0:	53                   	push   ebx
c00258f1:	83 ec 14             	sub    esp,0x14
c00258f4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00258f8:	68 13 da 02 c0       	push   0xc002da13
c00258fd:	e8 cb d5 fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0025902:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025909:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002590c:	e8 79 ee fe ff       	call   c001478a <PhysicalDisk::startCache()>
c0025911:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025915:	83 c4 18             	add    esp,0x18
c0025918:	5b                   	pop    ebx
c0025919:	e9 4c 11 ff ff       	jmp    c0016a6a <createPartitionsForDisk(PhysicalDisk*)>

c002591e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002591e:	55                   	push   ebp
c002591f:	57                   	push   edi
c0025920:	56                   	push   esi
c0025921:	53                   	push   ebx
c0025922:	83 ec 34             	sub    esp,0x34
c0025925:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0025929:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002592d:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0025931:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025935:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025939:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002593f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025945:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025949:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c002594f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025953:	c1 e0 07             	shl    eax,0x7
c0025956:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002595a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002595e:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025968:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002596c:	8d 58 02             	lea    ebx,[eax+0x2]
c002596f:	c1 e3 07             	shl    ebx,0x7
c0025972:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0025976:	53                   	push   ebx
c0025977:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002597d:	e8 ce eb ff ff       	call   c0024550 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025982:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025986:	83 c4 10             	add    esp,0x10
c0025989:	b8 01 00 00 00       	mov    eax,0x1
c002598e:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025993:	0f 84 87 01 00 00    	je     c0025b20 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x202>
c0025999:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002599f:	8b 03                	mov    eax,DWORD PTR [ebx]
c00259a1:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00259a7:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00259ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00259b1:	c1 e1 05             	shl    ecx,0x5
c00259b4:	01 c8                	add    eax,ecx
c00259b6:	8b 08                	mov    ecx,DWORD PTR [eax]
c00259b8:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00259be:	81 c9 25 00 01 00    	or     ecx,0x10025
c00259c4:	89 08                	mov    DWORD PTR [eax],ecx
c00259c6:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00259cc:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00259d2:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00259d8:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00259db:	8d 7b 40             	lea    edi,[ebx+0x40]
c00259de:	50                   	push   eax
c00259df:	68 90 00 00 00       	push   0x90
c00259e4:	6a 00                	push   0x0
c00259e6:	53                   	push   ebx
c00259e7:	e8 80 ad fd ff       	call   c000076c <memset>
c00259ec:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00259f0:	b9 0c 00 00 00       	mov    ecx,0xc
c00259f5:	fc                   	cld    
c00259f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00259f8:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c00259fe:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025a02:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025a08:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025a0c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025a10:	48                   	dec    eax
c0025a11:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025a16:	89 c1                	mov    ecx,eax
c0025a18:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025a1e:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025a23:	09 c8                	or     eax,ecx
c0025a25:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025a2b:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025a2e:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025a35:	66 25 00 7f          	and    ax,0x7f00
c0025a39:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0025a3d:	66 0d 27 80          	or     ax,0x8027
c0025a41:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0025a45:	66 89 03             	mov    WORD PTR [ebx],ax
c0025a48:	89 d0                	mov    eax,edx
c0025a4a:	c1 ea 18             	shr    edx,0x18
c0025a4d:	c1 e8 10             	shr    eax,0x10
c0025a50:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025a53:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025a56:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0025a5a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025a5d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025a61:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025a64:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0025a68:	83 c4 10             	add    esp,0x10
c0025a6b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025a6f:	31 c0                	xor    eax,eax
c0025a71:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0025a75:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0025a7b:	80 e2 88             	and    dl,0x88
c0025a7e:	74 0a                	je     c0025a8a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16c>
c0025a80:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025a85:	74 0a                	je     c0025a91 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c0025a87:	40                   	inc    eax
c0025a88:	eb eb                	jmp    c0025a75 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x157>
c0025a8a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025a8f:	75 0f                	jne    c0025aa0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x182>
c0025a91:	83 ec 0c             	sub    esp,0xc
c0025a94:	68 99 d9 02 c0       	push   0xc002d999
c0025a99:	e8 f2 4d ff ff       	call   c001a890 <Krnl::panic(char const*)>
c0025a9e:	eb 3f                	jmp    c0025adf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c1>
c0025aa0:	ba 01 00 00 00       	mov    edx,0x1
c0025aa5:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025aa9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025aad:	d3 e2                	shl    edx,cl
c0025aaf:	c1 e0 07             	shl    eax,0x7
c0025ab2:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0025ab8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025abc:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0025ac2:	85 ca                	test   edx,ecx
c0025ac4:	74 23                	je     c0025ae9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c0025ac6:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025acc:	0f ba e1 1e          	bt     ecx,0x1e
c0025ad0:	73 ea                	jae    c0025abc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19e>
c0025ad2:	83 ec 0c             	sub    esp,0xc
c0025ad5:	68 2b da 02 c0       	push   0xc002da2b
c0025ada:	e8 ee d3 fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0025adf:	83 c4 10             	add    esp,0x10
c0025ae2:	b8 01 00 00 00       	mov    eax,0x1
c0025ae7:	eb 37                	jmp    c0025b20 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x202>
c0025ae9:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025aef:	0f ba e0 1e          	bt     eax,0x1e
c0025af3:	73 0a                	jae    c0025aff <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e1>
c0025af5:	83 ec 0c             	sub    esp,0xc
c0025af8:	68 3e da 02 c0       	push   0xc002da3e
c0025afd:	eb db                	jmp    c0025ada <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bc>
c0025aff:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0025b04:	74 18                	je     c0025b1e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025b06:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025b0b:	74 11                	je     c0025b1e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025b0d:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025b13:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0025b17:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025b1b:	fc                   	cld    
c0025b1c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025b1e:	31 c0                	xor    eax,eax
c0025b20:	83 c4 2c             	add    esp,0x2c
c0025b23:	5b                   	pop    ebx
c0025b24:	5e                   	pop    esi
c0025b25:	5f                   	pop    edi
c0025b26:	5d                   	pop    ebp
c0025b27:	c3                   	ret    

c0025b28 <SATAPI::eject()>:
c0025b28:	57                   	push   edi
c0025b29:	b9 03 00 00 00       	mov    ecx,0x3
c0025b2e:	53                   	push   ebx
c0025b2f:	83 ec 14             	sub    esp,0x14
c0025b32:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025b36:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025b3a:	fc                   	cld    
c0025b3b:	31 c0                	xor    eax,eax
c0025b3d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025b3f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025b44:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025b49:	50                   	push   eax
c0025b4a:	6a 00                	push   0x0
c0025b4c:	6a 00                	push   0x0
c0025b4e:	6a 00                	push   0x0
c0025b50:	6a 00                	push   0x0
c0025b52:	6a 02                	push   0x2
c0025b54:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025b58:	50                   	push   eax
c0025b59:	53                   	push   ebx
c0025b5a:	e8 bf fd ff ff       	call   c002591e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025b5f:	83 c4 14             	add    esp,0x14
c0025b62:	53                   	push   ebx
c0025b63:	e8 6c fd ff ff       	call   c00258d4 <SATAPI::diskRemoved()>
c0025b68:	83 c4 24             	add    esp,0x24
c0025b6b:	31 c0                	xor    eax,eax
c0025b6d:	5b                   	pop    ebx
c0025b6e:	5f                   	pop    edi
c0025b6f:	c3                   	ret    

c0025b70 <SATAPI::detectMedia()>:
c0025b70:	56                   	push   esi
c0025b71:	53                   	push   ebx
c0025b72:	83 ec 28             	sub    esp,0x28
c0025b75:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025b79:	6a 0c                	push   0xc
c0025b7b:	6a 00                	push   0x0
c0025b7d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025b81:	56                   	push   esi
c0025b82:	e8 e5 ab fd ff       	call   c000076c <memset>
c0025b87:	83 c4 0c             	add    esp,0xc
c0025b8a:	6a 00                	push   0x0
c0025b8c:	6a 00                	push   0x0
c0025b8e:	6a 00                	push   0x0
c0025b90:	6a 00                	push   0x0
c0025b92:	6a 00                	push   0x0
c0025b94:	56                   	push   esi
c0025b95:	53                   	push   ebx
c0025b96:	e8 83 fd ff ff       	call   c002591e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025b9b:	83 c4 1c             	add    esp,0x1c
c0025b9e:	6a 0c                	push   0xc
c0025ba0:	6a 00                	push   0x0
c0025ba2:	56                   	push   esi
c0025ba3:	e8 c4 ab fd ff       	call   c000076c <memset>
c0025ba8:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025bad:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025bb2:	83 c4 0c             	add    esp,0xc
c0025bb5:	6a 01                	push   0x1
c0025bb7:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025bbb:	50                   	push   eax
c0025bbc:	6a 00                	push   0x0
c0025bbe:	6a 00                	push   0x0
c0025bc0:	6a 12                	push   0x12
c0025bc2:	56                   	push   esi
c0025bc3:	53                   	push   ebx
c0025bc4:	e8 55 fd ff ff       	call   c002591e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025bc9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025bcd:	83 c4 20             	add    esp,0x20
c0025bd0:	83 e0 7f             	and    eax,0x7f
c0025bd3:	3c 70                	cmp    al,0x70
c0025bd5:	74 15                	je     c0025bec <SATAPI::detectMedia()+0x7c>
c0025bd7:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025bde:	75 0c                	jne    c0025bec <SATAPI::detectMedia()+0x7c>
c0025be0:	83 ec 0c             	sub    esp,0xc
c0025be3:	53                   	push   ebx
c0025be4:	e8 07 fd ff ff       	call   c00258f0 <SATAPI::diskInserted()>
c0025be9:	83 c4 10             	add    esp,0x10
c0025bec:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025bf0:	83 e0 0f             	and    eax,0xf
c0025bf3:	3c 02                	cmp    al,0x2
c0025bf5:	75 1b                	jne    c0025c12 <SATAPI::detectMedia()+0xa2>
c0025bf7:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025bfc:	75 2d                	jne    c0025c2b <SATAPI::detectMedia()+0xbb>
c0025bfe:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025c05:	74 24                	je     c0025c2b <SATAPI::detectMedia()+0xbb>
c0025c07:	83 ec 0c             	sub    esp,0xc
c0025c0a:	53                   	push   ebx
c0025c0b:	e8 c4 fc ff ff       	call   c00258d4 <SATAPI::diskRemoved()>
c0025c10:	eb 16                	jmp    c0025c28 <SATAPI::detectMedia()+0xb8>
c0025c12:	84 c0                	test   al,al
c0025c14:	75 15                	jne    c0025c2b <SATAPI::detectMedia()+0xbb>
c0025c16:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025c1d:	75 0c                	jne    c0025c2b <SATAPI::detectMedia()+0xbb>
c0025c1f:	83 ec 0c             	sub    esp,0xc
c0025c22:	53                   	push   ebx
c0025c23:	e8 c8 fc ff ff       	call   c00258f0 <SATAPI::diskInserted()>
c0025c28:	83 c4 10             	add    esp,0x10
c0025c2b:	83 c4 24             	add    esp,0x24
c0025c2e:	5b                   	pop    ebx
c0025c2f:	5e                   	pop    esi
c0025c30:	c3                   	ret    
c0025c31:	90                   	nop

c0025c32 <SATAPI::open(int, int, void*)>:
c0025c32:	56                   	push   esi
c0025c33:	53                   	push   ebx
c0025c34:	50                   	push   eax
c0025c35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025c39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025c3d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025c47:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025c4d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025c57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025c5b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025c65:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025c6b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025c72:	e8 23 a3 fe ff       	call   c000ff9a <Phys::allocatePage()>
c0025c77:	89 c6                	mov    esi,eax
c0025c79:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025c7f:	81 c6 00 10 00 00    	add    esi,0x1000
c0025c85:	e8 10 a3 fe ff       	call   c000ff9a <Phys::allocatePage()>
c0025c8a:	39 c6                	cmp    esi,eax
c0025c8c:	74 10                	je     c0025c9e <SATAPI::open(int, int, void*)+0x6c>
c0025c8e:	83 ec 0c             	sub    esp,0xc
c0025c91:	68 53 da 02 c0       	push   0xc002da53
c0025c96:	e8 f5 4b ff ff       	call   c001a890 <Krnl::panic(char const*)>
c0025c9b:	83 c4 10             	add    esp,0x10
c0025c9e:	83 ec 0c             	sub    esp,0xc
c0025ca1:	6a 02                	push   0x2
c0025ca3:	e8 1f be fe ff       	call   c0011ac7 <Virt::allocateKernelVirtualPages(int)>
c0025ca8:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025cae:	6a 03                	push   0x3
c0025cb0:	50                   	push   eax
c0025cb1:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025cb7:	ff 35 70 f0 02 c0    	push   DWORD PTR ds:0xc002f070
c0025cbd:	e8 3c c6 fe ff       	call   c00122fe <VAS::mapPage(unsigned long, unsigned long, int)>
c0025cc2:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025cc9:	83 c4 14             	add    esp,0x14
c0025ccc:	53                   	push   ebx
c0025ccd:	e8 9e fe ff ff       	call   c0025b70 <SATAPI::detectMedia()>
c0025cd2:	83 c4 14             	add    esp,0x14
c0025cd5:	31 c0                	xor    eax,eax
c0025cd7:	5b                   	pop    ebx
c0025cd8:	5e                   	pop    esi
c0025cd9:	c3                   	ret    

c0025cda <SATAPI::read(unsigned long long, int, void*)>:
c0025cda:	55                   	push   ebp
c0025cdb:	57                   	push   edi
c0025cdc:	56                   	push   esi
c0025cdd:	53                   	push   ebx
c0025cde:	83 ec 1c             	sub    esp,0x1c
c0025ce1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025ce5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025ce9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025ced:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025cf4:	74 19                	je     c0025d0f <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025cf6:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025cfb:	7e 2e                	jle    c0025d2b <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025cfd:	83 ec 0c             	sub    esp,0xc
c0025d00:	68 69 da 02 c0       	push   0xc002da69
c0025d05:	e8 86 4b ff ff       	call   c001a890 <Krnl::panic(char const*)>
c0025d0a:	83 c4 10             	add    esp,0x10
c0025d0d:	eb 1c                	jmp    c0025d2b <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025d0f:	83 ec 0c             	sub    esp,0xc
c0025d12:	55                   	push   ebp
c0025d13:	e8 58 fe ff ff       	call   c0025b70 <SATAPI::detectMedia()>
c0025d18:	83 c4 10             	add    esp,0x10
c0025d1b:	b8 02 00 00 00       	mov    eax,0x2
c0025d20:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025d27:	75 cd                	jne    c0025cf6 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025d29:	eb 49                	jmp    c0025d74 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025d2b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025d2f:	b9 03 00 00 00       	mov    ecx,0x3
c0025d34:	fc                   	cld    
c0025d35:	31 c0                	xor    eax,eax
c0025d37:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025d39:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025d3e:	89 d8                	mov    eax,ebx
c0025d40:	86 e0                	xchg   al,ah
c0025d42:	c1 c0 10             	rol    eax,0x10
c0025d45:	86 e0                	xchg   al,ah
c0025d47:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025d4b:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025d4f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025d53:	50                   	push   eax
c0025d54:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025d58:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025d5c:	56                   	push   esi
c0025d5d:	53                   	push   ebx
c0025d5e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025d62:	c1 e0 0b             	shl    eax,0xb
c0025d65:	50                   	push   eax
c0025d66:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025d6a:	50                   	push   eax
c0025d6b:	55                   	push   ebp
c0025d6c:	e8 ad fb ff ff       	call   c002591e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025d71:	83 c4 20             	add    esp,0x20
c0025d74:	83 c4 1c             	add    esp,0x1c
c0025d77:	5b                   	pop    ebx
c0025d78:	5e                   	pop    esi
c0025d79:	5f                   	pop    edi
c0025d7a:	5d                   	pop    ebp
c0025d7b:	c3                   	ret    

c0025d7c <AVX::open(int, int, void*)>:
c0025d7c:	83 ec 0c             	sub    esp,0xc
c0025d7f:	e8 44 11 00 00       	call   c0026ec8 <avxInit>
c0025d84:	b8 00 00 00 00       	mov    eax,0x0
c0025d89:	83 c4 0c             	add    esp,0xc
c0025d8c:	c3                   	ret    
c0025d8d:	90                   	nop

c0025d8e <AVX::close(int, int, void*)>:
c0025d8e:	83 ec 0c             	sub    esp,0xc
c0025d91:	e8 33 11 00 00       	call   c0026ec9 <avxClose>
c0025d96:	b8 00 00 00 00       	mov    eax,0x0
c0025d9b:	83 c4 0c             	add    esp,0xc
c0025d9e:	c3                   	ret    
c0025d9f:	90                   	nop

c0025da0 <AVX::available()>:
c0025da0:	83 ec 0c             	sub    esp,0xc
c0025da3:	e8 18 11 00 00       	call   c0026ec0 <avxDetect>
c0025da8:	85 c0                	test   eax,eax
c0025daa:	0f 95 c0             	setne  al
c0025dad:	83 c4 0c             	add    esp,0xc
c0025db0:	c3                   	ret    
c0025db1:	90                   	nop

c0025db2 <AVX::save(void*)>:
c0025db2:	83 ec 0c             	sub    esp,0xc
c0025db5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025db9:	83 ec 0c             	sub    esp,0xc
c0025dbc:	50                   	push   eax
c0025dbd:	e8 04 11 00 00       	call   c0026ec6 <avxSave>
c0025dc2:	83 c4 10             	add    esp,0x10
c0025dc5:	90                   	nop
c0025dc6:	83 c4 0c             	add    esp,0xc
c0025dc9:	c3                   	ret    

c0025dca <AVX::load(void*)>:
c0025dca:	83 ec 0c             	sub    esp,0xc
c0025dcd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025dd1:	83 ec 0c             	sub    esp,0xc
c0025dd4:	50                   	push   eax
c0025dd5:	e8 ed 10 00 00       	call   c0026ec7 <avxLoad>
c0025dda:	83 c4 10             	add    esp,0x10
c0025ddd:	90                   	nop
c0025dde:	83 c4 0c             	add    esp,0xc
c0025de1:	c3                   	ret    

c0025de2 <AVX::AVX()>:
c0025de2:	83 ec 0c             	sub    esp,0xc
c0025de5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025de9:	83 ec 08             	sub    esp,0x8
c0025dec:	68 cc da 02 c0       	push   0xc002dacc
c0025df1:	50                   	push   eax
c0025df2:	e8 09 ea fe ff       	call   c0014800 <FPU::FPU(char const*)>
c0025df7:	83 c4 10             	add    esp,0x10
c0025dfa:	ba dc da 02 c0       	mov    edx,0xc002dadc
c0025dff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e03:	89 10                	mov    DWORD PTR [eax],edx
c0025e05:	90                   	nop
c0025e06:	83 c4 0c             	add    esp,0xc
c0025e09:	c3                   	ret    

c0025e0a <MMX::available()>:
c0025e0a:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0025e0f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025e15:	83 e0 20             	and    eax,0x20
c0025e18:	84 c0                	test   al,al
c0025e1a:	0f 95 c0             	setne  al
c0025e1d:	c3                   	ret    

c0025e1e <MMX::open(int, int, void*)>:
c0025e1e:	83 ec 0c             	sub    esp,0xc
c0025e21:	e8 2c 11 00 00       	call   c0026f52 <x87Init>
c0025e26:	b8 00 00 00 00       	mov    eax,0x0
c0025e2b:	83 c4 0c             	add    esp,0xc
c0025e2e:	c3                   	ret    
c0025e2f:	90                   	nop

c0025e30 <MMX::close(int, int, void*)>:
c0025e30:	83 ec 0c             	sub    esp,0xc
c0025e33:	e8 34 11 00 00       	call   c0026f6c <x87Close>
c0025e38:	b8 00 00 00 00       	mov    eax,0x0
c0025e3d:	83 c4 0c             	add    esp,0xc
c0025e40:	c3                   	ret    
c0025e41:	90                   	nop

c0025e42 <MMX::save(void*)>:
c0025e42:	83 ec 0c             	sub    esp,0xc
c0025e45:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e49:	83 ec 0c             	sub    esp,0xc
c0025e4c:	50                   	push   eax
c0025e4d:	e8 ef 10 00 00       	call   c0026f41 <x87Save>
c0025e52:	83 c4 10             	add    esp,0x10
c0025e55:	90                   	nop
c0025e56:	83 c4 0c             	add    esp,0xc
c0025e59:	c3                   	ret    

c0025e5a <MMX::load(void*)>:
c0025e5a:	83 ec 0c             	sub    esp,0xc
c0025e5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e61:	83 ec 0c             	sub    esp,0xc
c0025e64:	50                   	push   eax
c0025e65:	e8 e0 10 00 00       	call   c0026f4a <x87Load>
c0025e6a:	83 c4 10             	add    esp,0x10
c0025e6d:	90                   	nop
c0025e6e:	83 c4 0c             	add    esp,0xc
c0025e71:	c3                   	ret    

c0025e72 <MMX::MMX()>:
c0025e72:	83 ec 0c             	sub    esp,0xc
c0025e75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e79:	83 ec 08             	sub    esp,0x8
c0025e7c:	68 0c db 02 c0       	push   0xc002db0c
c0025e81:	50                   	push   eax
c0025e82:	e8 79 e9 fe ff       	call   c0014800 <FPU::FPU(char const*)>
c0025e87:	83 c4 10             	add    esp,0x10
c0025e8a:	ba 1c db 02 c0       	mov    edx,0xc002db1c
c0025e8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e93:	89 10                	mov    DWORD PTR [eax],edx
c0025e95:	90                   	nop
c0025e96:	83 c4 0c             	add    esp,0xc
c0025e99:	c3                   	ret    

c0025e9a <SSE::open(int, int, void*)>:
c0025e9a:	83 ec 0c             	sub    esp,0xc
c0025e9d:	e8 62 10 00 00       	call   c0026f04 <sseInit>
c0025ea2:	b8 00 00 00 00       	mov    eax,0x0
c0025ea7:	83 c4 0c             	add    esp,0xc
c0025eaa:	c3                   	ret    
c0025eab:	90                   	nop

c0025eac <SSE::close(int, int, void*)>:
c0025eac:	83 ec 0c             	sub    esp,0xc
c0025eaf:	e8 60 10 00 00       	call   c0026f14 <sseClose>
c0025eb4:	b8 00 00 00 00       	mov    eax,0x0
c0025eb9:	83 c4 0c             	add    esp,0xc
c0025ebc:	c3                   	ret    
c0025ebd:	90                   	nop

c0025ebe <SSE::available()>:
c0025ebe:	83 ec 1c             	sub    esp,0x1c
c0025ec1:	e8 1a 10 00 00       	call   c0026ee0 <absolutelyNoChanceInHell>
c0025ec6:	85 c0                	test   eax,eax
c0025ec8:	0f 95 c0             	setne  al
c0025ecb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025ecf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025ed3:	83 c4 1c             	add    esp,0x1c
c0025ed6:	c3                   	ret    
c0025ed7:	90                   	nop

c0025ed8 <SSE::save(void*)>:
c0025ed8:	83 ec 0c             	sub    esp,0xc
c0025edb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025edf:	83 ec 0c             	sub    esp,0xc
c0025ee2:	50                   	push   eax
c0025ee3:	e8 10 10 00 00       	call   c0026ef8 <sseSave>
c0025ee8:	83 c4 10             	add    esp,0x10
c0025eeb:	90                   	nop
c0025eec:	83 c4 0c             	add    esp,0xc
c0025eef:	c3                   	ret    

c0025ef0 <SSE::load(void*)>:
c0025ef0:	83 ec 0c             	sub    esp,0xc
c0025ef3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ef7:	83 ec 0c             	sub    esp,0xc
c0025efa:	50                   	push   eax
c0025efb:	e8 fe 0f 00 00       	call   c0026efe <sseLoad>
c0025f00:	83 c4 10             	add    esp,0x10
c0025f03:	90                   	nop
c0025f04:	83 c4 0c             	add    esp,0xc
c0025f07:	c3                   	ret    

c0025f08 <SSE::SSE()>:
c0025f08:	83 ec 0c             	sub    esp,0xc
c0025f0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f0f:	83 ec 08             	sub    esp,0x8
c0025f12:	68 4c db 02 c0       	push   0xc002db4c
c0025f17:	50                   	push   eax
c0025f18:	e8 e3 e8 fe ff       	call   c0014800 <FPU::FPU(char const*)>
c0025f1d:	83 c4 10             	add    esp,0x10
c0025f20:	ba 5c db 02 c0       	mov    edx,0xc002db5c
c0025f25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f29:	89 10                	mov    DWORD PTR [eax],edx
c0025f2b:	90                   	nop
c0025f2c:	83 c4 0c             	add    esp,0xc
c0025f2f:	c3                   	ret    

c0025f30 <x87::open(int, int, void*)>:
c0025f30:	83 ec 0c             	sub    esp,0xc
c0025f33:	e8 1a 10 00 00       	call   c0026f52 <x87Init>
c0025f38:	b8 00 00 00 00       	mov    eax,0x0
c0025f3d:	83 c4 0c             	add    esp,0xc
c0025f40:	c3                   	ret    
c0025f41:	90                   	nop

c0025f42 <x87::close(int, int, void*)>:
c0025f42:	83 ec 0c             	sub    esp,0xc
c0025f45:	e8 22 10 00 00       	call   c0026f6c <x87Close>
c0025f4a:	b8 00 00 00 00       	mov    eax,0x0
c0025f4f:	83 c4 0c             	add    esp,0xc
c0025f52:	c3                   	ret    
c0025f53:	90                   	nop

c0025f54 <x87::available()>:
c0025f54:	83 ec 0c             	sub    esp,0xc
c0025f57:	e8 ca 0f 00 00       	call   c0026f26 <x87Detect>
c0025f5c:	85 c0                	test   eax,eax
c0025f5e:	0f 95 c0             	setne  al
c0025f61:	83 c4 0c             	add    esp,0xc
c0025f64:	c3                   	ret    
c0025f65:	90                   	nop

c0025f66 <x87::save(void*)>:
c0025f66:	83 ec 0c             	sub    esp,0xc
c0025f69:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f6d:	83 ec 0c             	sub    esp,0xc
c0025f70:	50                   	push   eax
c0025f71:	e8 cb 0f 00 00       	call   c0026f41 <x87Save>
c0025f76:	83 c4 10             	add    esp,0x10
c0025f79:	90                   	nop
c0025f7a:	83 c4 0c             	add    esp,0xc
c0025f7d:	c3                   	ret    

c0025f7e <x87::load(void*)>:
c0025f7e:	83 ec 0c             	sub    esp,0xc
c0025f81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f85:	83 ec 0c             	sub    esp,0xc
c0025f88:	50                   	push   eax
c0025f89:	e8 bc 0f 00 00       	call   c0026f4a <x87Load>
c0025f8e:	83 c4 10             	add    esp,0x10
c0025f91:	90                   	nop
c0025f92:	83 c4 0c             	add    esp,0xc
c0025f95:	c3                   	ret    

c0025f96 <x87::x87()>:
c0025f96:	83 ec 0c             	sub    esp,0xc
c0025f99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f9d:	83 ec 08             	sub    esp,0x8
c0025fa0:	68 8c db 02 c0       	push   0xc002db8c
c0025fa5:	50                   	push   eax
c0025fa6:	e8 55 e8 fe ff       	call   c0014800 <FPU::FPU(char const*)>
c0025fab:	83 c4 10             	add    esp,0x10
c0025fae:	ba 9c db 02 c0       	mov    edx,0xc002db9c
c0025fb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fb7:	89 10                	mov    DWORD PTR [eax],edx
c0025fb9:	90                   	nop
c0025fba:	83 c4 0c             	add    esp,0xc
c0025fbd:	c3                   	ret    

c0025fbe <APIC::disable()>:
c0025fbe:	90                   	nop
c0025fbf:	c3                   	ret    

c0025fc0 <APIC::close(int, int, void*)>:
c0025fc0:	55                   	push   ebp
c0025fc1:	89 e5                	mov    ebp,esp
c0025fc3:	83 ec 08             	sub    esp,0x8
c0025fc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025fc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0025fcb:	83 c0 3c             	add    eax,0x3c
c0025fce:	8b 00                	mov    eax,DWORD PTR [eax]
c0025fd0:	83 ec 0c             	sub    esp,0xc
c0025fd3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fd6:	ff d0                	call   eax
c0025fd8:	83 c4 10             	add    esp,0x10
c0025fdb:	b8 00 00 00 00       	mov    eax,0x0
c0025fe0:	c9                   	leave  
c0025fe1:	c3                   	ret    

c0025fe2 <IOAPIC::close(int, int, void*)>:
c0025fe2:	b8 00 00 00 00       	mov    eax,0x0
c0025fe7:	c3                   	ret    

c0025fe8 <APIC::io_wait()>:
c0025fe8:	eb 00                	jmp    c0025fea <APIC::io_wait()+0x2>
c0025fea:	eb 00                	jmp    c0025fec <APIC::io_wait()+0x4>
c0025fec:	90                   	nop
c0025fed:	c3                   	ret    

c0025fee <APIC::getBase()>:
c0025fee:	55                   	push   ebp
c0025fef:	89 e5                	mov    ebp,esp
c0025ff1:	83 ec 18             	sub    esp,0x18
c0025ff4:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0025ff9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025fff:	83 e0 08             	and    eax,0x8
c0026002:	84 c0                	test   al,al
c0026004:	75 07                	jne    c002600d <APIC::getBase()+0x1f>
c0026006:	b8 00 00 00 00       	mov    eax,0x0
c002600b:	eb 21                	jmp    c002602e <APIC::getBase()+0x40>
c002600d:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0026012:	83 ec 08             	sub    esp,0x8
c0026015:	6a 1b                	push   0x1b
c0026017:	50                   	push   eax
c0026018:	e8 b7 8e fe ff       	call   c000eed4 <Computer::rdmsr(unsigned int)>
c002601d:	83 c4 10             	add    esp,0x10
c0026020:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026023:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026026:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026029:	25 00 f0 ff ff       	and    eax,0xfffff000
c002602e:	c9                   	leave  
c002602f:	c3                   	ret    

c0026030 <APIC::eoi(unsigned char)>:
c0026030:	55                   	push   ebp
c0026031:	89 e5                	mov    ebp,esp
c0026033:	83 ec 28             	sub    esp,0x28
c0026036:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026039:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002603c:	83 ec 0c             	sub    esp,0xc
c002603f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026042:	e8 a7 ff ff ff       	call   c0025fee <APIC::getBase()>
c0026047:	83 c4 10             	add    esp,0x10
c002604a:	05 b0 00 00 00       	add    eax,0xb0
c002604f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0026052:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026055:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002605b:	90                   	nop
c002605c:	c9                   	leave  
c002605d:	c3                   	ret    

c002605e <APIC::open(int, int, void*)>:
c002605e:	55                   	push   ebp
c002605f:	89 e5                	mov    ebp,esp
c0026061:	57                   	push   edi
c0026062:	56                   	push   esi
c0026063:	53                   	push   ebx
c0026064:	83 ec 2c             	sub    esp,0x2c
c0026067:	83 ec 0c             	sub    esp,0xc
c002606a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002606d:	e8 7c ff ff ff       	call   c0025fee <APIC::getBase()>
c0026072:	83 c4 10             	add    esp,0x10
c0026075:	89 c2                	mov    edx,eax
c0026077:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002607a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026080:	0f b6 f8             	movzx  edi,al
c0026083:	89 d0                	mov    eax,edx
c0026085:	ba 00 00 00 00       	mov    edx,0x0
c002608a:	89 c1                	mov    ecx,eax
c002608c:	80 e5 ff             	and    ch,0xff
c002608f:	89 cb                	mov    ebx,ecx
c0026091:	0f b6 f2             	movzx  esi,dl
c0026094:	89 d8                	mov    eax,ebx
c0026096:	89 f2                	mov    edx,esi
c0026098:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002609b:	8d 5f 08             	lea    ebx,[edi+0x8]
c002609e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00260a2:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00260a6:	83 e0 00             	and    eax,0x0
c00260a9:	09 d0                	or     eax,edx
c00260ab:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00260af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00260b2:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00260b8:	8d 50 01             	lea    edx,[eax+0x1]
c00260bb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00260be:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00260c4:	0f b6 d0             	movzx  edx,al
c00260c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00260ca:	83 c2 08             	add    edx,0x8
c00260cd:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00260d1:	0f b6 c9             	movzx  ecx,cl
c00260d4:	81 c9 00 00 01 00    	or     ecx,0x10000
c00260da:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00260de:	83 ec 0c             	sub    esp,0xc
c00260e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260e4:	e8 05 ff ff ff       	call   c0025fee <APIC::getBase()>
c00260e9:	83 c4 10             	add    esp,0x10
c00260ec:	05 f0 00 00 00       	add    eax,0xf0
c00260f1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00260f4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00260f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00260f9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00260fc:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0026103:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002610a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002610d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026110:	89 10                	mov    DWORD PTR [eax],edx
c0026112:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0026119:	a1 d0 17 03 c0       	mov    eax,ds:0xc00317d0
c002611e:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0026121:	7d 7c                	jge    c002619f <APIC::open(int, int, void*)+0x141>
c0026123:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026126:	8b 04 85 e0 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce820]
c002612d:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0026130:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026133:	8b 04 85 e0 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce820]
c002613a:	c1 e8 08             	shr    eax,0x8
c002613d:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0026141:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026144:	8b 04 85 e0 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce820]
c002614b:	c1 e8 18             	shr    eax,0x18
c002614e:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0026151:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0026155:	75 40                	jne    c0026197 <APIC::open(int, int, void*)+0x139>
c0026157:	83 ec 0c             	sub    esp,0xc
c002615a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002615d:	e8 8c fe ff ff       	call   c0025fee <APIC::getBase()>
c0026162:	83 c4 10             	add    esp,0x10
c0026165:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0026169:	75 07                	jne    c0026172 <APIC::open(int, int, void*)+0x114>
c002616b:	ba 60 03 00 00       	mov    edx,0x360
c0026170:	eb 05                	jmp    c0026177 <APIC::open(int, int, void*)+0x119>
c0026172:	ba 50 03 00 00       	mov    edx,0x350
c0026177:	01 d0                	add    eax,edx
c0026179:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002617c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002617f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026181:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0026184:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c002618b:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c002618f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026192:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026195:	89 10                	mov    DWORD PTR [eax],edx
c0026197:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c002619a:	e9 7a ff ff ff       	jmp    c0026119 <APIC::open(int, int, void*)+0xbb>
c002619f:	b8 00 00 00 00       	mov    eax,0x0
c00261a4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00261a7:	5b                   	pop    ebx
c00261a8:	5e                   	pop    esi
c00261a9:	5f                   	pop    edi
c00261aa:	5d                   	pop    ebp
c00261ab:	c3                   	ret    

c00261ac <IOAPIC::IOAPIC()>:
c00261ac:	83 ec 0c             	sub    esp,0xc
c00261af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261b3:	83 ec 08             	sub    esp,0x8
c00261b6:	68 cc db 02 c0       	push   0xc002dbcc
c00261bb:	50                   	push   eax
c00261bc:	e8 1f e3 fe ff       	call   c00144e0 <Device::Device(char const*)>
c00261c1:	83 c4 10             	add    esp,0x10
c00261c4:	ba f4 dc 02 c0       	mov    edx,0xc002dcf4
c00261c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261cd:	89 10                	mov    DWORD PTR [eax],edx
c00261cf:	90                   	nop
c00261d0:	83 c4 0c             	add    esp,0xc
c00261d3:	c3                   	ret    

c00261d4 <APIC::APIC()>:
c00261d4:	53                   	push   ebx
c00261d5:	83 ec 18             	sub    esp,0x18
c00261d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00261dc:	83 ec 08             	sub    esp,0x8
c00261df:	68 d4 db 02 c0       	push   0xc002dbd4
c00261e4:	50                   	push   eax
c00261e5:	e8 70 ea fe ff       	call   c0014c5a <InterruptController::InterruptController(char const*)>
c00261ea:	83 c4 10             	add    esp,0x10
c00261ed:	ba ac dc 02 c0       	mov    edx,0xc002dcac
c00261f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00261f6:	89 10                	mov    DWORD PTR [eax],edx
c00261f8:	a0 a0 32 03 c0       	mov    al,ds:0xc00332a0
c00261fd:	83 f0 01             	xor    eax,0x1
c0026200:	84 c0                	test   al,al
c0026202:	0f 84 a1 00 00 00    	je     c00262a9 <APIC::APIC()+0xd5>
c0026208:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002620d:	a0 80 18 03 c0       	mov    al,ds:0xc0031880
c0026212:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0026216:	0f 83 86 00 00 00    	jae    c00262a2 <APIC::APIC()+0xce>
c002621c:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0026224:	83 ec 0c             	sub    esp,0xc
c0026227:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002622b:	e8 fe 96 fe ff       	call   c000f92e <malloc>
c0026230:	83 c4 10             	add    esp,0x10
c0026233:	89 c3                	mov    ebx,eax
c0026235:	83 ec 0c             	sub    esp,0xc
c0026238:	53                   	push   ebx
c0026239:	e8 6e ff ff ff       	call   c00261ac <IOAPIC::IOAPIC()>
c002623e:	83 c4 10             	add    esp,0x10
c0026241:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0026245:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002624a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002624e:	89 14 85 80 32 03 c0 	mov    DWORD PTR [eax*4-0x3ffccd80],edx
c0026255:	a1 60 32 03 c0       	mov    eax,ds:0xc0033260
c002625a:	40                   	inc    eax
c002625b:	a3 60 32 03 c0       	mov    ds:0xc0033260,eax
c0026260:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0026265:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002626b:	83 ec 08             	sub    esp,0x8
c002626e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026272:	50                   	push   eax
c0026273:	e8 78 e0 fe ff       	call   c00142f0 <Device::addChild(Device*)>
c0026278:	83 c4 10             	add    esp,0x10
c002627b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002627f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026281:	83 c0 08             	add    eax,0x8
c0026284:	8b 00                	mov    eax,DWORD PTR [eax]
c0026286:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c002628b:	6a 00                	push   0x0
c002628d:	6a 00                	push   0x0
c002628f:	52                   	push   edx
c0026290:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0026294:	ff d0                	call   eax
c0026296:	83 c4 10             	add    esp,0x10
c0026299:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c002629d:	e9 6b ff ff ff       	jmp    c002620d <APIC::APIC()+0x39>
c00262a2:	c6 05 a0 32 03 c0 01 	mov    BYTE PTR ds:0xc00332a0,0x1
c00262a9:	90                   	nop
c00262aa:	83 c4 18             	add    esp,0x18
c00262ad:	5b                   	pop    ebx
c00262ae:	c3                   	ret    
c00262af:	90                   	nop

c00262b0 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00262b0:	55                   	push   ebp
c00262b1:	89 e5                	mov    ebp,esp
c00262b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262b6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00262bc:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00262bf:	72 1d                	jb     c00262de <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00262c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262c4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00262ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262cd:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00262d3:	01 d0                	add    eax,edx
c00262d5:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00262d8:	73 04                	jae    c00262de <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00262da:	b0 01                	mov    al,0x1
c00262dc:	eb 02                	jmp    c00262e0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00262de:	b0 00                	mov    al,0x0
c00262e0:	5d                   	pop    ebp
c00262e1:	c3                   	ret    

c00262e2 <IOAPIC::read(int)>:
c00262e2:	55                   	push   ebp
c00262e3:	89 e5                	mov    ebp,esp
c00262e5:	83 ec 10             	sub    esp,0x10
c00262e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262eb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00262f1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00262f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00262f7:	0f b6 d0             	movzx  edx,al
c00262fa:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00262fd:	89 10                	mov    DWORD PTR [eax],edx
c00262ff:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026302:	83 c0 10             	add    eax,0x10
c0026305:	8b 00                	mov    eax,DWORD PTR [eax]
c0026307:	c9                   	leave  
c0026308:	c3                   	ret    
c0026309:	90                   	nop

c002630a <IOAPIC::open(int, int, void*)>:
c002630a:	55                   	push   ebp
c002630b:	89 e5                	mov    ebp,esp
c002630d:	57                   	push   edi
c002630e:	56                   	push   esi
c002630f:	53                   	push   ebx
c0026310:	83 ec 0c             	sub    esp,0xc
c0026313:	83 ec 0c             	sub    esp,0xc
c0026316:	68 ff db 02 c0       	push   0xc002dbff
c002631b:	e8 ad cb fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0026320:	83 c4 10             	add    esp,0x10
c0026323:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026326:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026329:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002632f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026332:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0026338:	8b 14 85 c0 18 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce740]
c002633f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026342:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026348:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002634b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0026351:	8b 14 85 40 19 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce6c0]
c0026358:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002635b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0026361:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026364:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002636a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002636d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026373:	0f b6 f8             	movzx  edi,al
c0026376:	89 d0                	mov    eax,edx
c0026378:	ba 00 00 00 00       	mov    edx,0x0
c002637d:	89 c1                	mov    ecx,eax
c002637f:	80 e5 ff             	and    ch,0xff
c0026382:	89 cb                	mov    ebx,ecx
c0026384:	0f b6 f2             	movzx  esi,dl
c0026387:	89 d8                	mov    eax,ebx
c0026389:	89 f2                	mov    edx,esi
c002638b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002638e:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026391:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026395:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026399:	83 e0 00             	and    eax,0x0
c002639c:	09 d0                	or     eax,edx
c002639e:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00263a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263a5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00263ab:	8d 50 01             	lea    edx,[eax+0x1]
c00263ae:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00263b1:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00263b7:	0f b6 d0             	movzx  edx,al
c00263ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263bd:	83 c2 08             	add    edx,0x8
c00263c0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00263c4:	0f b6 c9             	movzx  ecx,cl
c00263c7:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00263cd:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00263d1:	83 ec 08             	sub    esp,0x8
c00263d4:	6a 01                	push   0x1
c00263d6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263d9:	e8 04 ff ff ff       	call   c00262e2 <IOAPIC::read(int)>
c00263de:	83 c4 10             	add    esp,0x10
c00263e1:	c1 f8 10             	sar    eax,0x10
c00263e4:	0f b6 c0             	movzx  eax,al
c00263e7:	8d 50 01             	lea    edx,[eax+0x1]
c00263ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263ed:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00263f3:	b8 00 00 00 00       	mov    eax,0x0
c00263f8:	8d 65 f4             	lea    esp,[ebp-0xc]
c00263fb:	5b                   	pop    ebx
c00263fc:	5e                   	pop    esi
c00263fd:	5f                   	pop    edi
c00263fe:	5d                   	pop    ebp
c00263ff:	c3                   	ret    

c0026400 <IOAPIC::write(int, int)>:
c0026400:	55                   	push   ebp
c0026401:	89 e5                	mov    ebp,esp
c0026403:	83 ec 10             	sub    esp,0x10
c0026406:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026409:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002640f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0026412:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026415:	0f b6 d0             	movzx  edx,al
c0026418:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002641b:	89 10                	mov    DWORD PTR [eax],edx
c002641d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026420:	8d 50 10             	lea    edx,[eax+0x10]
c0026423:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026426:	89 02                	mov    DWORD PTR [edx],eax
c0026428:	90                   	nop
c0026429:	c9                   	leave  
c002642a:	c3                   	ret    
c002642b:	90                   	nop

c002642c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002642c:	55                   	push   ebp
c002642d:	89 e5                	mov    ebp,esp
c002642f:	53                   	push   ebx
c0026430:	83 ec 2c             	sub    esp,0x2c
c0026433:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026436:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0026439:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002643c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002643f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0026442:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026445:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0026448:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002644b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002644e:	88 d8                	mov    al,bl
c0026450:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0026453:	88 c8                	mov    al,cl
c0026455:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0026458:	88 d0                	mov    al,dl
c002645a:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002645d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026461:	83 c0 08             	add    eax,0x8
c0026464:	01 c0                	add    eax,eax
c0026466:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026469:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002646d:	83 c0 08             	add    eax,0x8
c0026470:	01 c0                	add    eax,eax
c0026472:	40                   	inc    eax
c0026473:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026476:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026479:	50                   	push   eax
c002647a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002647d:	e8 60 fe ff ff       	call   c00262e2 <IOAPIC::read(int)>
c0026482:	83 c4 08             	add    esp,0x8
c0026485:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0026488:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002648f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0026492:	c1 e0 18             	shl    eax,0x18
c0026495:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0026498:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002649b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002649e:	52                   	push   edx
c002649f:	50                   	push   eax
c00264a0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264a3:	e8 58 ff ff ff       	call   c0026400 <IOAPIC::write(int, int)>
c00264a8:	83 c4 0c             	add    esp,0xc
c00264ab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00264ae:	50                   	push   eax
c00264af:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264b2:	e8 2b fe ff ff       	call   c00262e2 <IOAPIC::read(int)>
c00264b7:	83 c4 08             	add    esp,0x8
c00264ba:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00264bd:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00264c4:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00264cb:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00264d2:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00264d6:	74 09                	je     c00264e1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00264d8:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00264df:	eb 07                	jmp    c00264e8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00264e1:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00264e8:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00264ec:	74 09                	je     c00264f7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00264ee:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00264f5:	eb 07                	jmp    c00264fe <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00264f7:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00264fe:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0026505:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0026509:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002650c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002650f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026512:	52                   	push   edx
c0026513:	50                   	push   eax
c0026514:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026517:	e8 e4 fe ff ff       	call   c0026400 <IOAPIC::write(int, int)>
c002651c:	83 c4 0c             	add    esp,0xc
c002651f:	90                   	nop
c0026520:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0026523:	c9                   	leave  
c0026524:	c3                   	ret    
c0026525:	90                   	nop

c0026526 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0026526:	55                   	push   ebp
c0026527:	89 e5                	mov    ebp,esp
c0026529:	57                   	push   edi
c002652a:	56                   	push   esi
c002652b:	53                   	push   ebx
c002652c:	83 ec 2c             	sub    esp,0x2c
c002652f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026532:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0026535:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0026539:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002653d:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026541:	74 5a                	je     c002659d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026543:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0026547:	7f 44                	jg     c002658d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0026549:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002654c:	05 40 e1 02 c0       	add    eax,0xc002e140
c0026551:	8a 00                	mov    al,BYTE PTR [eax]
c0026553:	0f b6 c0             	movzx  eax,al
c0026556:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026559:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002655c:	66 8b 84 00 60 18 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce7a0]
c0026564:	0f b7 c0             	movzx  eax,ax
c0026567:	83 e0 02             	and    eax,0x2
c002656a:	85 c0                	test   eax,eax
c002656c:	74 04                	je     c0026572 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c002656e:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0026572:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026575:	66 8b 84 00 60 18 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce7a0]
c002657d:	0f b7 c0             	movzx  eax,ax
c0026580:	83 e0 08             	and    eax,0x8
c0026583:	85 c0                	test   eax,eax
c0026585:	74 16                	je     c002659d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026587:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002658b:	eb 10                	jmp    c002659d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002658d:	83 ec 0c             	sub    esp,0xc
c0026590:	68 10 dc 02 c0       	push   0xc002dc10
c0026595:	e8 f6 42 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c002659a:	83 c4 10             	add    esp,0x10
c002659d:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00265a1:	a1 60 32 03 c0       	mov    eax,ds:0xc0033260
c00265a6:	83 ec 08             	sub    esp,0x8
c00265a9:	50                   	push   eax
c00265aa:	68 48 dc 02 c0       	push   0xc002dc48
c00265af:	e8 19 c9 fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00265b4:	83 c4 10             	add    esp,0x10
c00265b7:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00265be:	a1 60 32 03 c0       	mov    eax,ds:0xc0033260
c00265c3:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00265c6:	7d 67                	jge    c002662f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00265c8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00265cb:	8b 04 85 80 32 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccd80]
c00265d2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00265d5:	83 ec 08             	sub    esp,0x8
c00265d8:	52                   	push   edx
c00265d9:	50                   	push   eax
c00265da:	e8 d1 fc ff ff       	call   c00262b0 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00265df:	83 c4 10             	add    esp,0x10
c00265e2:	84 c0                	test   al,al
c00265e4:	74 44                	je     c002662a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00265e6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00265e9:	8b 1c 85 80 32 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffccd80]
c00265f0:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00265f4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00265f7:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00265fb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00265fe:	83 c0 20             	add    eax,0x20
c0026601:	0f b6 f0             	movzx  esi,al
c0026604:	b8 00 00 00 00       	mov    eax,0x0
c0026609:	99                   	cdq    
c002660a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002660d:	0f b6 c9             	movzx  ecx,cl
c0026610:	83 ec 04             	sub    esp,0x4
c0026613:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0026616:	57                   	push   edi
c0026617:	56                   	push   esi
c0026618:	52                   	push   edx
c0026619:	50                   	push   eax
c002661a:	51                   	push   ecx
c002661b:	53                   	push   ebx
c002661c:	e8 0b fe ff ff       	call   c002642c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0026621:	83 c4 20             	add    esp,0x20
c0026624:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0026628:	eb 05                	jmp    c002662f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002662a:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c002662d:	eb 8f                	jmp    c00265be <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c002662f:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0026632:	83 f0 01             	xor    eax,0x1
c0026635:	84 c0                	test   al,al
c0026637:	74 10                	je     c0026649 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0026639:	83 ec 0c             	sub    esp,0xc
c002663c:	68 5f dc 02 c0       	push   0xc002dc5f
c0026641:	e8 4a 42 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c0026646:	83 c4 10             	add    esp,0x10
c0026649:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c002664d:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0026654:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0026658:	7f 65                	jg     c00266bf <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c002665a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002665d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026660:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026667:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002666a:	01 ca                	add    edx,ecx
c002666c:	83 c2 54             	add    edx,0x54
c002666f:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0026673:	85 c0                	test   eax,eax
c0026675:	75 43                	jne    c00266ba <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0026677:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002667a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002667d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026684:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026687:	01 ca                	add    edx,ecx
c0026689:	8d 4a 54             	lea    ecx,[edx+0x54]
c002668c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c002668f:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026693:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026696:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026699:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00266a0:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00266a3:	01 ca                	add    edx,ecx
c00266a5:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00266ab:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00266ae:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00266b2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00266b5:	83 e8 20             	sub    eax,0x20
c00266b8:	eb 1a                	jmp    c00266d4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00266ba:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00266bd:	eb 95                	jmp    c0026654 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00266bf:	83 ec 0c             	sub    esp,0xc
c00266c2:	68 6c dc 02 c0       	push   0xc002dc6c
c00266c7:	e8 c4 41 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c00266cc:	83 c4 10             	add    esp,0x10
c00266cf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00266d4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00266d7:	5b                   	pop    ebx
c00266d8:	5e                   	pop    esi
c00266d9:	5f                   	pop    edi
c00266da:	5d                   	pop    ebp
c00266db:	c3                   	ret    

c00266dc <PIC::disable()>:
c00266dc:	55                   	push   ebp
c00266dd:	89 e5                	mov    ebp,esp
c00266df:	83 ec 10             	sub    esp,0x10
c00266e2:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00266e8:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00266ec:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00266ef:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00266f3:	ee                   	out    dx,al
c00266f4:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00266fa:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00266fe:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026701:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0026705:	ee                   	out    dx,al
c0026706:	90                   	nop
c0026707:	c9                   	leave  
c0026708:	c3                   	ret    
c0026709:	90                   	nop

c002670a <PIC::close(int, int, void*)>:
c002670a:	55                   	push   ebp
c002670b:	89 e5                	mov    ebp,esp
c002670d:	83 ec 08             	sub    esp,0x8
c0026710:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026713:	8b 00                	mov    eax,DWORD PTR [eax]
c0026715:	83 c0 3c             	add    eax,0x3c
c0026718:	8b 00                	mov    eax,DWORD PTR [eax]
c002671a:	83 ec 0c             	sub    esp,0xc
c002671d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026720:	ff d0                	call   eax
c0026722:	83 c4 10             	add    esp,0x10
c0026725:	b8 00 00 00 00       	mov    eax,0x0
c002672a:	c9                   	leave  
c002672b:	c3                   	ret    

c002672c <PIC::PIC()>:
c002672c:	83 ec 0c             	sub    esp,0xc
c002672f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026733:	83 ec 08             	sub    esp,0x8
c0026736:	68 18 dd 02 c0       	push   0xc002dd18
c002673b:	50                   	push   eax
c002673c:	e8 19 e5 fe ff       	call   c0014c5a <InterruptController::InterruptController(char const*)>
c0026741:	83 c4 10             	add    esp,0x10
c0026744:	ba 44 dd 02 c0       	mov    edx,0xc002dd44
c0026749:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002674d:	89 10                	mov    DWORD PTR [eax],edx
c002674f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026753:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026759:	0f b6 d0             	movzx  edx,al
c002675c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026760:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0026767:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002676b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026771:	0f b6 d0             	movzx  edx,al
c0026774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026778:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002677d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026781:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026787:	8d 50 01             	lea    edx,[eax+0x1]
c002678a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002678e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026794:	0f b6 d0             	movzx  edx,al
c0026797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002679b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002679f:	83 e1 3f             	and    ecx,0x3f
c00267a2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00267a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267aa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00267b0:	0f b6 d0             	movzx  edx,al
c00267b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267b7:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00267be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267c2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00267c8:	0f b6 d0             	movzx  edx,al
c00267cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267cf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00267d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267d8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00267de:	8d 50 01             	lea    edx,[eax+0x1]
c00267e1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00267e5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00267eb:	0f b6 d0             	movzx  edx,al
c00267ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267f2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00267f6:	83 e1 3f             	and    ecx,0x3f
c00267f9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00267fd:	90                   	nop
c00267fe:	83 c4 0c             	add    esp,0xc
c0026801:	c3                   	ret    

c0026802 <PIC::ioWait()>:
c0026802:	eb 00                	jmp    c0026804 <PIC::ioWait()+0x2>
c0026804:	eb 00                	jmp    c0026806 <PIC::ioWait()+0x4>
c0026806:	90                   	nop
c0026807:	c3                   	ret    

c0026808 <PIC::getIRQReg(int)>:
c0026808:	55                   	push   ebp
c0026809:	89 e5                	mov    ebp,esp
c002680b:	83 ec 10             	sub    esp,0x10
c002680e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026811:	0f b6 c0             	movzx  eax,al
c0026814:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002681a:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c002681d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026820:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026824:	ee                   	out    dx,al
c0026825:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026828:	0f b6 c0             	movzx  eax,al
c002682b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026831:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026834:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026837:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002683b:	ee                   	out    dx,al
c002683c:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026842:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0026846:	89 c2                	mov    edx,eax
c0026848:	ec                   	in     al,dx
c0026849:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c002684c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002684f:	0f b6 c0             	movzx  eax,al
c0026852:	c1 e0 08             	shl    eax,0x8
c0026855:	89 c1                	mov    ecx,eax
c0026857:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c002685d:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026861:	89 c2                	mov    edx,eax
c0026863:	ec                   	in     al,dx
c0026864:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0026867:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002686a:	0f b6 c0             	movzx  eax,al
c002686d:	09 c8                	or     eax,ecx
c002686f:	c9                   	leave  
c0026870:	c3                   	ret    
c0026871:	90                   	nop

c0026872 <PIC::eoi(unsigned char)>:
c0026872:	55                   	push   ebp
c0026873:	89 e5                	mov    ebp,esp
c0026875:	83 ec 14             	sub    esp,0x14
c0026878:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002687b:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c002687e:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026882:	75 1e                	jne    c00268a2 <PIC::eoi(unsigned char)+0x30>
c0026884:	6a 0b                	push   0xb
c0026886:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026889:	e8 7a ff ff ff       	call   c0026808 <PIC::getIRQReg(int)>
c002688e:	83 c4 08             	add    esp,0x8
c0026891:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0026895:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026899:	25 80 00 00 00       	and    eax,0x80
c002689e:	85 c0                	test   eax,eax
c00268a0:	74 5f                	je     c0026901 <PIC::eoi(unsigned char)+0x8f>
c00268a2:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00268a6:	75 2d                	jne    c00268d5 <PIC::eoi(unsigned char)+0x63>
c00268a8:	6a 0b                	push   0xb
c00268aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00268ad:	e8 56 ff ff ff       	call   c0026808 <PIC::getIRQReg(int)>
c00268b2:	83 c4 08             	add    esp,0x8
c00268b5:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00268b9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00268bc:	66 85 c0             	test   ax,ax
c00268bf:	78 14                	js     c00268d5 <PIC::eoi(unsigned char)+0x63>
c00268c1:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00268c7:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00268cb:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00268ce:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00268d2:	ee                   	out    dx,al
c00268d3:	eb 2d                	jmp    c0026902 <PIC::eoi(unsigned char)+0x90>
c00268d5:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00268d9:	76 12                	jbe    c00268ed <PIC::eoi(unsigned char)+0x7b>
c00268db:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00268e1:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00268e5:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00268e8:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00268ec:	ee                   	out    dx,al
c00268ed:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00268f3:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00268f7:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00268fa:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00268fe:	ee                   	out    dx,al
c00268ff:	eb 01                	jmp    c0026902 <PIC::eoi(unsigned char)+0x90>
c0026901:	90                   	nop
c0026902:	c9                   	leave  
c0026903:	c3                   	ret    

c0026904 <PIC::remap()>:
c0026904:	55                   	push   ebp
c0026905:	89 e5                	mov    ebp,esp
c0026907:	83 ec 48             	sub    esp,0x48
c002690a:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026911:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026918:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c002691e:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026921:	89 c2                	mov    edx,eax
c0026923:	ec                   	in     al,dx
c0026924:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026927:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c002692a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c002692d:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026933:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026936:	89 c2                	mov    edx,eax
c0026938:	ec                   	in     al,dx
c0026939:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c002693c:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c002693f:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026942:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026948:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c002694c:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c002694f:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026952:	ee                   	out    dx,al
c0026953:	83 ec 0c             	sub    esp,0xc
c0026956:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026959:	e8 a4 fe ff ff       	call   c0026802 <PIC::ioWait()>
c002695e:	83 c4 10             	add    esp,0x10
c0026961:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026967:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c002696b:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c002696e:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026971:	ee                   	out    dx,al
c0026972:	83 ec 0c             	sub    esp,0xc
c0026975:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026978:	e8 85 fe ff ff       	call   c0026802 <PIC::ioWait()>
c002697d:	83 c4 10             	add    esp,0x10
c0026980:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026983:	0f b6 c0             	movzx  eax,al
c0026986:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c002698c:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c002698f:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026992:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026995:	ee                   	out    dx,al
c0026996:	83 ec 0c             	sub    esp,0xc
c0026999:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002699c:	e8 61 fe ff ff       	call   c0026802 <PIC::ioWait()>
c00269a1:	83 c4 10             	add    esp,0x10
c00269a4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00269a7:	0f b6 c0             	movzx  eax,al
c00269aa:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00269b0:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00269b3:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00269b6:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00269b9:	ee                   	out    dx,al
c00269ba:	83 ec 0c             	sub    esp,0xc
c00269bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269c0:	e8 3d fe ff ff       	call   c0026802 <PIC::ioWait()>
c00269c5:	83 c4 10             	add    esp,0x10
c00269c8:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00269ce:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00269d2:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00269d5:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00269d8:	ee                   	out    dx,al
c00269d9:	83 ec 0c             	sub    esp,0xc
c00269dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269df:	e8 1e fe ff ff       	call   c0026802 <PIC::ioWait()>
c00269e4:	83 c4 10             	add    esp,0x10
c00269e7:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00269ed:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00269f1:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00269f4:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00269f7:	ee                   	out    dx,al
c00269f8:	83 ec 0c             	sub    esp,0xc
c00269fb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269fe:	e8 ff fd ff ff       	call   c0026802 <PIC::ioWait()>
c0026a03:	83 c4 10             	add    esp,0x10
c0026a06:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026a0c:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026a10:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026a13:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026a16:	ee                   	out    dx,al
c0026a17:	83 ec 0c             	sub    esp,0xc
c0026a1a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a1d:	e8 e0 fd ff ff       	call   c0026802 <PIC::ioWait()>
c0026a22:	83 c4 10             	add    esp,0x10
c0026a25:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026a2b:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026a2f:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026a32:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026a35:	ee                   	out    dx,al
c0026a36:	83 ec 0c             	sub    esp,0xc
c0026a39:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a3c:	e8 c1 fd ff ff       	call   c0026802 <PIC::ioWait()>
c0026a41:	83 c4 10             	add    esp,0x10
c0026a44:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026a48:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026a4e:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026a51:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026a54:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026a57:	ee                   	out    dx,al
c0026a58:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026a5c:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026a62:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026a65:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026a68:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026a6b:	ee                   	out    dx,al
c0026a6c:	90                   	nop
c0026a6d:	c9                   	leave  
c0026a6e:	c3                   	ret    
c0026a6f:	90                   	nop

c0026a70 <PIC::open(int, int, void*)>:
c0026a70:	55                   	push   ebp
c0026a71:	89 e5                	mov    ebp,esp
c0026a73:	83 ec 18             	sub    esp,0x18
c0026a76:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026a7c:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026a80:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026a83:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026a87:	ee                   	out    dx,al
c0026a88:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026a8e:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026a92:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026a95:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026a99:	ee                   	out    dx,al
c0026a9a:	83 ec 0c             	sub    esp,0xc
c0026a9d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026aa0:	e8 5f fe ff ff       	call   c0026904 <PIC::remap()>
c0026aa5:	83 c4 10             	add    esp,0x10
c0026aa8:	b8 00 00 00 00       	mov    eax,0x0
c0026aad:	c9                   	leave  
c0026aae:	c3                   	ret    
c0026aaf:	90                   	nop

c0026ab0 <APICTimer::close(int, int, void*)>:
c0026ab0:	b8 00 00 00 00       	mov    eax,0x0
c0026ab5:	c3                   	ret    

c0026ab6 <apicTimerHandler(regs*, void*)>:
c0026ab6:	83 ec 0c             	sub    esp,0xc
c0026ab9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026abd:	8b 00                	mov    eax,DWORD PTR [eax]
c0026abf:	99                   	cdq    
c0026ac0:	52                   	push   edx
c0026ac1:	50                   	push   eax
c0026ac2:	6a 00                	push   0x0
c0026ac4:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026ac9:	e8 96 07 00 00       	call   c0027264 <__udivdi3>
c0026ace:	83 c4 10             	add    esp,0x10
c0026ad1:	83 ec 08             	sub    esp,0x8
c0026ad4:	52                   	push   edx
c0026ad5:	50                   	push   eax
c0026ad6:	e8 34 03 ff ff       	call   c0016e0f <timerHandler(unsigned long long)>
c0026adb:	83 c4 10             	add    esp,0x10
c0026ade:	90                   	nop
c0026adf:	83 c4 0c             	add    esp,0xc
c0026ae2:	c3                   	ret    
c0026ae3:	90                   	nop

c0026ae4 <APICTimer::write(int)>:
c0026ae4:	53                   	push   ebx
c0026ae5:	83 ec 28             	sub    esp,0x28
c0026ae8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026aec:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026af0:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026af6:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0026afb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026b01:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026b07:	83 ec 0c             	sub    esp,0xc
c0026b0a:	50                   	push   eax
c0026b0b:	e8 de f4 ff ff       	call   c0025fee <APIC::getBase()>
c0026b10:	83 c4 10             	add    esp,0x10
c0026b13:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026b17:	a1 70 f5 02 c0       	mov    eax,ds:0xc002f570
c0026b1c:	8b 15 74 f5 02 c0    	mov    edx,DWORD PTR ds:0xc002f574
c0026b22:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026b26:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026b2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b2e:	05 e0 03 00 00       	add    eax,0x3e0
c0026b33:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026b39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b3d:	05 80 03 00 00       	add    eax,0x380
c0026b42:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026b48:	fb                   	sti    
c0026b49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b4d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026b51:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026b56:	83 d2 00             	adc    edx,0x0
c0026b59:	89 c1                	mov    ecx,eax
c0026b5b:	89 d3                	mov    ebx,edx
c0026b5d:	a1 70 f5 02 c0       	mov    eax,ds:0xc002f570
c0026b62:	8b 15 74 f5 02 c0    	mov    edx,DWORD PTR ds:0xc002f574
c0026b68:	39 c8                	cmp    eax,ecx
c0026b6a:	89 d0                	mov    eax,edx
c0026b6c:	19 d8                	sbb    eax,ebx
c0026b6e:	73 02                	jae    c0026b72 <APICTimer::write(int)+0x8e>
c0026b70:	eb d7                	jmp    c0026b49 <APICTimer::write(int)+0x65>
c0026b72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b76:	05 20 03 00 00       	add    eax,0x320
c0026b7b:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026b81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b85:	05 90 03 00 00       	add    eax,0x390
c0026b8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b8c:	f7 d0                	not    eax
c0026b8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026b92:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026b96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026b9a:	ba 00 00 00 00       	mov    edx,0x0
c0026b9f:	f7 f3                	div    ebx
c0026ba1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026ba5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026ba9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026baf:	0d 00 00 02 00       	or     eax,0x20000
c0026bb4:	89 c2                	mov    edx,eax
c0026bb6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026bba:	05 20 03 00 00       	add    eax,0x320
c0026bbf:	89 10                	mov    DWORD PTR [eax],edx
c0026bc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026bc5:	05 e0 03 00 00       	add    eax,0x3e0
c0026bca:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026bd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026bd4:	05 80 03 00 00       	add    eax,0x380
c0026bd9:	89 c2                	mov    edx,eax
c0026bdb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026bdf:	89 02                	mov    DWORD PTR [edx],eax
c0026be1:	90                   	nop
c0026be2:	83 c4 28             	add    esp,0x28
c0026be5:	5b                   	pop    ebx
c0026be6:	c3                   	ret    
c0026be7:	90                   	nop

c0026be8 <APICTimer::open(int, int, void*)>:
c0026be8:	57                   	push   edi
c0026be9:	56                   	push   esi
c0026bea:	53                   	push   ebx
c0026beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bef:	8b 00                	mov    eax,DWORD PTR [eax]
c0026bf1:	83 c0 24             	add    eax,0x24
c0026bf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0026bf6:	83 ec 08             	sub    esp,0x8
c0026bf9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026bfd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026c01:	ff d0                	call   eax
c0026c03:	83 c4 10             	add    esp,0x10
c0026c06:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0026c0b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026c11:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026c17:	83 ec 0c             	sub    esp,0xc
c0026c1a:	50                   	push   eax
c0026c1b:	e8 ce f3 ff ff       	call   c0025fee <APIC::getBase()>
c0026c20:	83 c4 10             	add    esp,0x10
c0026c23:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026c29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c2d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026c33:	0f b6 f8             	movzx  edi,al
c0026c36:	89 d0                	mov    eax,edx
c0026c38:	ba 00 00 00 00       	mov    edx,0x0
c0026c3d:	89 c1                	mov    ecx,eax
c0026c3f:	80 e5 ff             	and    ch,0xff
c0026c42:	89 cb                	mov    ebx,ecx
c0026c44:	0f b6 f2             	movzx  esi,dl
c0026c47:	89 d8                	mov    eax,ebx
c0026c49:	89 f2                	mov    edx,esi
c0026c4b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026c4f:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026c52:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026c56:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026c5a:	83 e0 00             	and    eax,0x0
c0026c5d:	09 d0                	or     eax,edx
c0026c5f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c67:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026c6d:	8d 50 01             	lea    edx,[eax+0x1]
c0026c70:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026c74:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026c7a:	0f b6 d0             	movzx  edx,al
c0026c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c81:	83 c2 08             	add    edx,0x8
c0026c84:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026c88:	0f b6 c9             	movzx  ecx,cl
c0026c8b:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026c91:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026c95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c99:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026c9d:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026ca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ca7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026cab:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026cb1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026cb5:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026cbb:	83 ec 0c             	sub    esp,0xc
c0026cbe:	51                   	push   ecx
c0026cbf:	6a 01                	push   0x1
c0026cc1:	68 b6 6a 02 c0       	push   0xc0026ab6
c0026cc6:	52                   	push   edx
c0026cc7:	50                   	push   eax
c0026cc8:	e8 a7 d5 fe ff       	call   c0014274 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026ccd:	83 c4 20             	add    esp,0x20
c0026cd0:	89 c2                	mov    edx,eax
c0026cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cd6:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026cdc:	b8 00 00 00 00       	mov    eax,0x0
c0026ce1:	5b                   	pop    ebx
c0026ce2:	5e                   	pop    esi
c0026ce3:	5f                   	pop    edi
c0026ce4:	c3                   	ret    
c0026ce5:	90                   	nop

c0026ce6 <APICTimer::APICTimer()>:
c0026ce6:	83 ec 0c             	sub    esp,0xc
c0026ce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ced:	83 ec 08             	sub    esp,0x8
c0026cf0:	68 84 dd 02 c0       	push   0xc002dd84
c0026cf5:	50                   	push   eax
c0026cf6:	e8 85 00 ff ff       	call   c0016d80 <Timer::Timer(char const*)>
c0026cfb:	83 c4 10             	add    esp,0x10
c0026cfe:	ba 98 dd 02 c0       	mov    edx,0xc002dd98
c0026d03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d07:	89 10                	mov    DWORD PTR [eax],edx
c0026d09:	90                   	nop
c0026d0a:	83 c4 0c             	add    esp,0xc
c0026d0d:	c3                   	ret    

c0026d0e <PIT::write(int)>:
c0026d0e:	83 ec 10             	sub    esp,0x10
c0026d11:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026d15:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026d19:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026d1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026d23:	a3 a4 32 03 c0       	mov    ds:0xc00332a4,eax
c0026d28:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026d2d:	99                   	cdq    
c0026d2e:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026d32:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026d36:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026d3d:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026d42:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026d46:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026d4b:	ee                   	out    dx,al
c0026d4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026d50:	0f b6 c0             	movzx  eax,al
c0026d53:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026d5a:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026d5e:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026d62:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026d67:	ee                   	out    dx,al
c0026d68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026d6c:	c1 f8 08             	sar    eax,0x8
c0026d6f:	0f b6 c0             	movzx  eax,al
c0026d72:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026d79:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026d7d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026d81:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026d86:	ee                   	out    dx,al
c0026d87:	90                   	nop
c0026d88:	83 c4 10             	add    esp,0x10
c0026d8b:	c3                   	ret    

c0026d8c <pitHandler(regs*, void*)>:
c0026d8c:	83 ec 0c             	sub    esp,0xc
c0026d8f:	a1 a4 32 03 c0       	mov    eax,ds:0xc00332a4
c0026d94:	99                   	cdq    
c0026d95:	52                   	push   edx
c0026d96:	50                   	push   eax
c0026d97:	6a 00                	push   0x0
c0026d99:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026d9e:	e8 c1 04 00 00       	call   c0027264 <__udivdi3>
c0026da3:	83 c4 10             	add    esp,0x10
c0026da6:	83 ec 08             	sub    esp,0x8
c0026da9:	52                   	push   edx
c0026daa:	50                   	push   eax
c0026dab:	e8 5f 00 ff ff       	call   c0016e0f <timerHandler(unsigned long long)>
c0026db0:	83 c4 10             	add    esp,0x10
c0026db3:	90                   	nop
c0026db4:	83 c4 0c             	add    esp,0xc
c0026db7:	c3                   	ret    

c0026db8 <PIT::open(int, int, void*)>:
c0026db8:	83 ec 0c             	sub    esp,0xc
c0026dbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dbf:	8b 00                	mov    eax,DWORD PTR [eax]
c0026dc1:	83 c0 24             	add    eax,0x24
c0026dc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0026dc6:	83 ec 08             	sub    esp,0x8
c0026dc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026dcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026dd1:	ff d0                	call   eax
c0026dd3:	83 c4 10             	add    esp,0x10
c0026dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dda:	83 ec 0c             	sub    esp,0xc
c0026ddd:	6a 00                	push   0x0
c0026ddf:	6a 01                	push   0x1
c0026de1:	68 8c 6d 02 c0       	push   0xc0026d8c
c0026de6:	6a 00                	push   0x0
c0026de8:	50                   	push   eax
c0026de9:	e8 86 d4 fe ff       	call   c0014274 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026dee:	83 c4 20             	add    esp,0x20
c0026df1:	89 c2                	mov    edx,eax
c0026df3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026df7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026dfd:	b8 00 00 00 00       	mov    eax,0x0
c0026e02:	83 c4 0c             	add    esp,0xc
c0026e05:	c3                   	ret    

c0026e06 <PIT::close(int, int, void*)>:
c0026e06:	83 ec 0c             	sub    esp,0xc
c0026e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e0d:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e1b:	6a 01                	push   0x1
c0026e1d:	68 8c 6d 02 c0       	push   0xc0026d8c
c0026e22:	6a 00                	push   0x0
c0026e24:	50                   	push   eax
c0026e25:	e8 88 d4 fe ff       	call   c00142b2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026e2a:	83 c4 10             	add    esp,0x10
c0026e2d:	b8 00 00 00 00       	mov    eax,0x0
c0026e32:	83 c4 0c             	add    esp,0xc
c0026e35:	c3                   	ret    

c0026e36 <PIT::PIT()>:
c0026e36:	83 ec 0c             	sub    esp,0xc
c0026e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e3d:	83 ec 08             	sub    esp,0x8
c0026e40:	68 c0 dd 02 c0       	push   0xc002ddc0
c0026e45:	50                   	push   eax
c0026e46:	e8 35 ff fe ff       	call   c0016d80 <Timer::Timer(char const*)>
c0026e4b:	83 c4 10             	add    esp,0x10
c0026e4e:	ba e8 dd 02 c0       	mov    edx,0xc002dde8
c0026e53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e57:	89 10                	mov    DWORD PTR [eax],edx
c0026e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e5d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026e63:	0f b6 d0             	movzx  edx,al
c0026e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e6a:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e75:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026e7b:	0f b6 d0             	movzx  edx,al
c0026e7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e82:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026e87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e8b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026e91:	8d 50 01             	lea    edx,[eax+0x1]
c0026e94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026e98:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026e9e:	0f b6 d0             	movzx  edx,al
c0026ea1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ea5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026ea9:	83 e1 3f             	and    ecx,0x3f
c0026eac:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026eb0:	90                   	nop
c0026eb1:	83 c4 0c             	add    esp,0xc
c0026eb4:	c3                   	ret    
c0026eb5:	66 90                	xchg   ax,ax
c0026eb7:	66 90                	xchg   ax,ax
c0026eb9:	66 90                	xchg   ax,ax
c0026ebb:	66 90                	xchg   ax,ax
c0026ebd:	66 90                	xchg   ax,ax
c0026ebf:	90                   	nop

c0026ec0 <avxDetect>:
c0026ec0:	b8 00 00 00 00       	mov    eax,0x0
c0026ec5:	c3                   	ret    

c0026ec6 <avxSave>:
c0026ec6:	c3                   	ret    

c0026ec7 <avxLoad>:
c0026ec7:	c3                   	ret    

c0026ec8 <avxInit>:
c0026ec8:	c3                   	ret    

c0026ec9 <avxClose>:
c0026ec9:	c3                   	ret    

c0026eca <wouldSheSayYes>:
c0026eca:	c3                   	ret    
c0026ecb:	49                   	dec    ecx
c0026ecc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026ed0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026ed4:	75 20                	jne    c0026ef6 <sseDetect.noSSE+0x1>
c0026ed6:	4e                   	dec    esi
c0026ed7:	79 61                	jns    c0026f3a <x87Detect+0x14>
c0026ed9:	68 2e 2e 2e 00       	push   0x2e2e2e
c0026ede:	66 90                	xchg   ax,ax

c0026ee0 <absolutelyNoChanceInHell>:
c0026ee0:	b8 01 00 00 00       	mov    eax,0x1
c0026ee5:	0f a2                	cpuid  
c0026ee7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0026eed:	74 06                	je     c0026ef5 <sseDetect.noSSE>
c0026eef:	b8 01 00 00 00       	mov    eax,0x1
c0026ef4:	c3                   	ret    

c0026ef5 <sseDetect.noSSE>:
c0026ef5:	31 c0                	xor    eax,eax
c0026ef7:	c3                   	ret    

c0026ef8 <sseSave>:
c0026ef8:	0f ae 44 24 04       	fxsave [esp+0x4]
c0026efd:	c3                   	ret    

c0026efe <sseLoad>:
c0026efe:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026f03:	c3                   	ret    

c0026f04 <sseInit>:
c0026f04:	e8 49 00 00 00       	call   c0026f52 <x87Init>
c0026f09:	0f 20 e0             	mov    eax,cr4
c0026f0c:	66 0d 00 06          	or     ax,0x600
c0026f10:	0f 22 e0             	mov    cr4,eax
c0026f13:	c3                   	ret    

c0026f14 <sseClose>:
c0026f14:	c3                   	ret    
c0026f15:	66 90                	xchg   ax,ax
c0026f17:	66 90                	xchg   ax,ax
c0026f19:	66 90                	xchg   ax,ax
c0026f1b:	66 90                	xchg   ax,ax
c0026f1d:	66 90                	xchg   ax,ax
c0026f1f:	90                   	nop

c0026f20 <value_37F>:
c0026f20:	7f 03                	jg     c0026f25 <value_37A+0x1>

c0026f22 <value_37E>:
c0026f22:	7e 03                	jle    c0026f27 <x87Detect+0x1>

c0026f24 <value_37A>:
c0026f24:	7a 03                	jp     c0026f29 <x87Detect+0x3>

c0026f26 <x87Detect>:
c0026f26:	b8 01 00 00 00       	mov    eax,0x1
c0026f2b:	0f a2                	cpuid  
c0026f2d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026f33:	74 06                	je     c0026f3b <x87Detect.nox87>
c0026f35:	b8 01 00 00 00       	mov    eax,0x1
c0026f3a:	c3                   	ret    

c0026f3b <x87Detect.nox87>:
c0026f3b:	b8 00 00 00 00       	mov    eax,0x0
c0026f40:	c3                   	ret    

c0026f41 <x87Save>:
c0026f41:	55                   	push   ebp
c0026f42:	89 e5                	mov    ebp,esp
c0026f44:	9b dd 75 08          	fsave  [ebp+0x8]
c0026f48:	c9                   	leave  
c0026f49:	c3                   	ret    

c0026f4a <x87Load>:
c0026f4a:	55                   	push   ebp
c0026f4b:	89 e5                	mov    ebp,esp
c0026f4d:	dd 65 08             	frstor [ebp+0x8]
c0026f50:	c9                   	leave  
c0026f51:	c3                   	ret    

c0026f52 <x87Init>:
c0026f52:	9b db e3             	finit  
c0026f55:	0f 20 c0             	mov    eax,cr0
c0026f58:	66 25 fb ff          	and    ax,0xfffb
c0026f5c:	66 0d 22 00          	or     ax,0x22
c0026f60:	0f 22 c0             	mov    cr0,eax
c0026f63:	0f 06                	clts   
c0026f65:	d9 2d 24 6f 02 c0    	fldcw  WORD PTR ds:0xc0026f24
c0026f6b:	c3                   	ret    

c0026f6c <x87Close>:
c0026f6c:	c3                   	ret    
c0026f6d:	66 90                	xchg   ax,ax
c0026f6f:	90                   	nop

c0026f70 <__do_global_ctors_aux>:
c0026f70:	a1 a8 9b 02 c0       	mov    eax,ds:0xc0029ba8
c0026f75:	83 f8 ff             	cmp    eax,0xffffffff
c0026f78:	74 1a                	je     c0026f94 <__do_global_ctors_aux+0x24>
c0026f7a:	55                   	push   ebp
c0026f7b:	89 e5                	mov    ebp,esp
c0026f7d:	53                   	push   ebx
c0026f7e:	52                   	push   edx
c0026f7f:	bb a8 9b 02 c0       	mov    ebx,0xc0029ba8
c0026f84:	ff d0                	call   eax
c0026f86:	83 eb 04             	sub    ebx,0x4
c0026f89:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026f8b:	83 f8 ff             	cmp    eax,0xffffffff
c0026f8e:	75 f4                	jne    c0026f84 <__do_global_ctors_aux+0x14>
c0026f90:	58                   	pop    eax
c0026f91:	5b                   	pop    ebx
c0026f92:	5d                   	pop    ebp
c0026f93:	c3                   	ret    
c0026f94:	c3                   	ret    
c0026f95:	66 90                	xchg   ax,ax
c0026f97:	90                   	nop

c0026f98 <__divdi3>:
c0026f98:	55                   	push   ebp
c0026f99:	57                   	push   edi
c0026f9a:	56                   	push   esi
c0026f9b:	53                   	push   ebx
c0026f9c:	83 ec 1c             	sub    esp,0x1c
c0026f9f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026fa3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026fa7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026faa:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026fae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026fb2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026fb6:	85 db                	test   ebx,ebx
c0026fb8:	0f 88 8e 00 00 00    	js     c002704c <__divdi3+0xb4>
c0026fbe:	89 dd                	mov    ebp,ebx
c0026fc0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026fc8:	89 d3                	mov    ebx,edx
c0026fca:	85 d2                	test   edx,edx
c0026fcc:	79 0d                	jns    c0026fdb <__divdi3+0x43>
c0026fce:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026fd2:	f7 d8                	neg    eax
c0026fd4:	83 d2 00             	adc    edx,0x0
c0026fd7:	f7 da                	neg    edx
c0026fd9:	89 d3                	mov    ebx,edx
c0026fdb:	89 c7                	mov    edi,eax
c0026fdd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026fe0:	85 db                	test   ebx,ebx
c0026fe2:	75 48                	jne    c002702c <__divdi3+0x94>
c0026fe4:	39 ef                	cmp    edi,ebp
c0026fe6:	76 24                	jbe    c002700c <__divdi3+0x74>
c0026fe8:	89 ea                	mov    edx,ebp
c0026fea:	f7 f7                	div    edi
c0026fec:	89 c1                	mov    ecx,eax
c0026fee:	31 f6                	xor    esi,esi
c0026ff0:	89 c8                	mov    eax,ecx
c0026ff2:	89 f2                	mov    edx,esi
c0026ff4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026ff8:	85 c9                	test   ecx,ecx
c0026ffa:	74 07                	je     c0027003 <__divdi3+0x6b>
c0026ffc:	f7 d8                	neg    eax
c0026ffe:	83 d2 00             	adc    edx,0x0
c0027001:	f7 da                	neg    edx
c0027003:	83 c4 1c             	add    esp,0x1c
c0027006:	5b                   	pop    ebx
c0027007:	5e                   	pop    esi
c0027008:	5f                   	pop    edi
c0027009:	5d                   	pop    ebp
c002700a:	c3                   	ret    
c002700b:	90                   	nop
c002700c:	85 ff                	test   edi,edi
c002700e:	75 0b                	jne    c002701b <__divdi3+0x83>
c0027010:	b8 01 00 00 00       	mov    eax,0x1
c0027015:	31 d2                	xor    edx,edx
c0027017:	f7 f3                	div    ebx
c0027019:	89 c7                	mov    edi,eax
c002701b:	31 d2                	xor    edx,edx
c002701d:	89 e8                	mov    eax,ebp
c002701f:	f7 f7                	div    edi
c0027021:	89 c6                	mov    esi,eax
c0027023:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0027026:	f7 f7                	div    edi
c0027028:	89 c1                	mov    ecx,eax
c002702a:	eb c4                	jmp    c0026ff0 <__divdi3+0x58>
c002702c:	39 eb                	cmp    ebx,ebp
c002702e:	77 3c                	ja     c002706c <__divdi3+0xd4>
c0027030:	0f bd f3             	bsr    esi,ebx
c0027033:	83 f6 1f             	xor    esi,0x1f
c0027036:	75 40                	jne    c0027078 <__divdi3+0xe0>
c0027038:	39 eb                	cmp    ebx,ebp
c002703a:	72 09                	jb     c0027045 <__divdi3+0xad>
c002703c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002703f:	0f 87 97 00 00 00    	ja     c00270dc <__divdi3+0x144>
c0027045:	b9 01 00 00 00       	mov    ecx,0x1
c002704a:	eb a4                	jmp    c0026ff0 <__divdi3+0x58>
c002704c:	f7 d9                	neg    ecx
c002704e:	83 d3 00             	adc    ebx,0x0
c0027051:	f7 db                	neg    ebx
c0027053:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0027056:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002705a:	89 dd                	mov    ebp,ebx
c002705c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0027064:	e9 5f ff ff ff       	jmp    c0026fc8 <__divdi3+0x30>
c0027069:	8d 76 00             	lea    esi,[esi+0x0]
c002706c:	31 f6                	xor    esi,esi
c002706e:	31 c9                	xor    ecx,ecx
c0027070:	e9 7b ff ff ff       	jmp    c0026ff0 <__divdi3+0x58>
c0027075:	8d 76 00             	lea    esi,[esi+0x0]
c0027078:	b8 20 00 00 00       	mov    eax,0x20
c002707d:	29 f0                	sub    eax,esi
c002707f:	89 f1                	mov    ecx,esi
c0027081:	d3 e3                	shl    ebx,cl
c0027083:	89 fa                	mov    edx,edi
c0027085:	88 c1                	mov    cl,al
c0027087:	d3 ea                	shr    edx,cl
c0027089:	09 da                	or     edx,ebx
c002708b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002708f:	89 f1                	mov    ecx,esi
c0027091:	d3 e7                	shl    edi,cl
c0027093:	89 eb                	mov    ebx,ebp
c0027095:	88 c1                	mov    cl,al
c0027097:	d3 eb                	shr    ebx,cl
c0027099:	89 f1                	mov    ecx,esi
c002709b:	d3 e5                	shl    ebp,cl
c002709d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00270a0:	88 c1                	mov    cl,al
c00270a2:	d3 ea                	shr    edx,cl
c00270a4:	09 d5                	or     ebp,edx
c00270a6:	89 e8                	mov    eax,ebp
c00270a8:	89 da                	mov    edx,ebx
c00270aa:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00270ae:	89 d3                	mov    ebx,edx
c00270b0:	89 c5                	mov    ebp,eax
c00270b2:	f7 e7                	mul    edi
c00270b4:	39 d3                	cmp    ebx,edx
c00270b6:	72 18                	jb     c00270d0 <__divdi3+0x138>
c00270b8:	74 0a                	je     c00270c4 <__divdi3+0x12c>
c00270ba:	89 e9                	mov    ecx,ebp
c00270bc:	31 f6                	xor    esi,esi
c00270be:	e9 2d ff ff ff       	jmp    c0026ff0 <__divdi3+0x58>
c00270c3:	90                   	nop
c00270c4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00270c7:	89 f1                	mov    ecx,esi
c00270c9:	d3 e7                	shl    edi,cl
c00270cb:	39 c7                	cmp    edi,eax
c00270cd:	73 eb                	jae    c00270ba <__divdi3+0x122>
c00270cf:	90                   	nop
c00270d0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00270d3:	31 f6                	xor    esi,esi
c00270d5:	e9 16 ff ff ff       	jmp    c0026ff0 <__divdi3+0x58>
c00270da:	66 90                	xchg   ax,ax
c00270dc:	31 c9                	xor    ecx,ecx
c00270de:	e9 0d ff ff ff       	jmp    c0026ff0 <__divdi3+0x58>
c00270e3:	90                   	nop

c00270e4 <__moddi3>:
c00270e4:	55                   	push   ebp
c00270e5:	57                   	push   edi
c00270e6:	56                   	push   esi
c00270e7:	53                   	push   ebx
c00270e8:	83 ec 2c             	sub    esp,0x2c
c00270eb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00270ef:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00270f3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00270f7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00270fb:	85 db                	test   ebx,ebx
c00270fd:	0f 88 85 00 00 00    	js     c0027188 <__moddi3+0xa4>
c0027103:	89 de                	mov    esi,ebx
c0027105:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002710d:	89 d7                	mov    edi,edx
c002710f:	85 d2                	test   edx,edx
c0027111:	79 09                	jns    c002711c <__moddi3+0x38>
c0027113:	f7 d8                	neg    eax
c0027115:	83 d2 00             	adc    edx,0x0
c0027118:	f7 da                	neg    edx
c002711a:	89 d7                	mov    edi,edx
c002711c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027120:	89 cd                	mov    ebp,ecx
c0027122:	85 ff                	test   edi,edi
c0027124:	75 52                	jne    c0027178 <__moddi3+0x94>
c0027126:	89 c3                	mov    ebx,eax
c0027128:	39 f0                	cmp    eax,esi
c002712a:	76 24                	jbe    c0027150 <__moddi3+0x6c>
c002712c:	89 c8                	mov    eax,ecx
c002712e:	89 f2                	mov    edx,esi
c0027130:	f7 f3                	div    ebx
c0027132:	89 d6                	mov    esi,edx
c0027134:	89 f0                	mov    eax,esi
c0027136:	31 d2                	xor    edx,edx
c0027138:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002713c:	85 c9                	test   ecx,ecx
c002713e:	74 07                	je     c0027147 <__moddi3+0x63>
c0027140:	f7 d8                	neg    eax
c0027142:	83 d2 00             	adc    edx,0x0
c0027145:	f7 da                	neg    edx
c0027147:	83 c4 2c             	add    esp,0x2c
c002714a:	5b                   	pop    ebx
c002714b:	5e                   	pop    esi
c002714c:	5f                   	pop    edi
c002714d:	5d                   	pop    ebp
c002714e:	c3                   	ret    
c002714f:	90                   	nop
c0027150:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0027154:	85 db                	test   ebx,ebx
c0027156:	75 0d                	jne    c0027165 <__moddi3+0x81>
c0027158:	b8 01 00 00 00       	mov    eax,0x1
c002715d:	31 d2                	xor    edx,edx
c002715f:	f7 f7                	div    edi
c0027161:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027165:	89 f0                	mov    eax,esi
c0027167:	31 d2                	xor    edx,edx
c0027169:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002716d:	f7 f7                	div    edi
c002716f:	89 e8                	mov    eax,ebp
c0027171:	f7 f7                	div    edi
c0027173:	89 d6                	mov    esi,edx
c0027175:	eb bd                	jmp    c0027134 <__moddi3+0x50>
c0027177:	90                   	nop
c0027178:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002717c:	39 f7                	cmp    edi,esi
c002717e:	76 20                	jbe    c00271a0 <__moddi3+0xbc>
c0027180:	89 c8                	mov    eax,ecx
c0027182:	89 f2                	mov    edx,esi
c0027184:	eb b2                	jmp    c0027138 <__moddi3+0x54>
c0027186:	66 90                	xchg   ax,ax
c0027188:	f7 d9                	neg    ecx
c002718a:	83 d3 00             	adc    ebx,0x0
c002718d:	f7 db                	neg    ebx
c002718f:	89 de                	mov    esi,ebx
c0027191:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0027199:	e9 6f ff ff ff       	jmp    c002710d <__moddi3+0x29>
c002719e:	66 90                	xchg   ax,ax
c00271a0:	0f bd c7             	bsr    eax,edi
c00271a3:	83 f0 1f             	xor    eax,0x1f
c00271a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00271aa:	75 24                	jne    c00271d0 <__moddi3+0xec>
c00271ac:	39 f7                	cmp    edi,esi
c00271ae:	72 06                	jb     c00271b6 <__moddi3+0xd2>
c00271b0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00271b4:	77 0c                	ja     c00271c2 <__moddi3+0xde>
c00271b6:	89 e9                	mov    ecx,ebp
c00271b8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00271bc:	19 fe                	sbb    esi,edi
c00271be:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00271c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00271c6:	89 f2                	mov    edx,esi
c00271c8:	e9 6b ff ff ff       	jmp    c0027138 <__moddi3+0x54>
c00271cd:	8d 76 00             	lea    esi,[esi+0x0]
c00271d0:	b8 20 00 00 00       	mov    eax,0x20
c00271d5:	89 c2                	mov    edx,eax
c00271d7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00271db:	29 da                	sub    edx,ebx
c00271dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00271e1:	88 d9                	mov    cl,bl
c00271e3:	d3 e7                	shl    edi,cl
c00271e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00271e9:	88 d1                	mov    cl,dl
c00271eb:	d3 e8                	shr    eax,cl
c00271ed:	09 c7                	or     edi,eax
c00271ef:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00271f3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00271f7:	89 d8                	mov    eax,ebx
c00271f9:	88 d9                	mov    cl,bl
c00271fb:	d3 e7                	shl    edi,cl
c00271fd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027201:	89 f3                	mov    ebx,esi
c0027203:	88 d1                	mov    cl,dl
c0027205:	d3 eb                	shr    ebx,cl
c0027207:	89 c7                	mov    edi,eax
c0027209:	88 c1                	mov    cl,al
c002720b:	d3 e6                	shl    esi,cl
c002720d:	89 e8                	mov    eax,ebp
c002720f:	88 d1                	mov    cl,dl
c0027211:	d3 e8                	shr    eax,cl
c0027213:	09 f0                	or     eax,esi
c0027215:	89 f9                	mov    ecx,edi
c0027217:	d3 e5                	shl    ebp,cl
c0027219:	89 da                	mov    edx,ebx
c002721b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002721f:	89 d3                	mov    ebx,edx
c0027221:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027225:	89 c6                	mov    esi,eax
c0027227:	89 d1                	mov    ecx,edx
c0027229:	39 d3                	cmp    ebx,edx
c002722b:	72 27                	jb     c0027254 <__moddi3+0x170>
c002722d:	74 21                	je     c0027250 <__moddi3+0x16c>
c002722f:	29 f5                	sub    ebp,esi
c0027231:	19 cb                	sbb    ebx,ecx
c0027233:	89 de                	mov    esi,ebx
c0027235:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0027239:	d3 e6                	shl    esi,cl
c002723b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002723f:	89 f9                	mov    ecx,edi
c0027241:	d3 ed                	shr    ebp,cl
c0027243:	09 ee                	or     esi,ebp
c0027245:	89 f0                	mov    eax,esi
c0027247:	d3 eb                	shr    ebx,cl
c0027249:	89 da                	mov    edx,ebx
c002724b:	e9 e8 fe ff ff       	jmp    c0027138 <__moddi3+0x54>
c0027250:	39 c5                	cmp    ebp,eax
c0027252:	73 db                	jae    c002722f <__moddi3+0x14b>
c0027254:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027258:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002725c:	89 d1                	mov    ecx,edx
c002725e:	89 c6                	mov    esi,eax
c0027260:	eb cd                	jmp    c002722f <__moddi3+0x14b>
c0027262:	66 90                	xchg   ax,ax

c0027264 <__udivdi3>:
c0027264:	55                   	push   ebp
c0027265:	57                   	push   edi
c0027266:	56                   	push   esi
c0027267:	53                   	push   ebx
c0027268:	83 ec 1c             	sub    esp,0x1c
c002726b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002726f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0027273:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027277:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002727b:	85 d2                	test   edx,edx
c002727d:	75 41                	jne    c00272c0 <__udivdi3+0x5c>
c002727f:	39 f7                	cmp    edi,esi
c0027281:	76 15                	jbe    c0027298 <__udivdi3+0x34>
c0027283:	89 e8                	mov    eax,ebp
c0027285:	89 f2                	mov    edx,esi
c0027287:	f7 f7                	div    edi
c0027289:	31 db                	xor    ebx,ebx
c002728b:	89 da                	mov    edx,ebx
c002728d:	83 c4 1c             	add    esp,0x1c
c0027290:	5b                   	pop    ebx
c0027291:	5e                   	pop    esi
c0027292:	5f                   	pop    edi
c0027293:	5d                   	pop    ebp
c0027294:	c3                   	ret    
c0027295:	8d 76 00             	lea    esi,[esi+0x0]
c0027298:	89 f9                	mov    ecx,edi
c002729a:	85 ff                	test   edi,edi
c002729c:	75 0b                	jne    c00272a9 <__udivdi3+0x45>
c002729e:	b8 01 00 00 00       	mov    eax,0x1
c00272a3:	31 d2                	xor    edx,edx
c00272a5:	f7 f7                	div    edi
c00272a7:	89 c1                	mov    ecx,eax
c00272a9:	31 d2                	xor    edx,edx
c00272ab:	89 f0                	mov    eax,esi
c00272ad:	f7 f1                	div    ecx
c00272af:	89 c3                	mov    ebx,eax
c00272b1:	89 e8                	mov    eax,ebp
c00272b3:	f7 f1                	div    ecx
c00272b5:	89 da                	mov    edx,ebx
c00272b7:	83 c4 1c             	add    esp,0x1c
c00272ba:	5b                   	pop    ebx
c00272bb:	5e                   	pop    esi
c00272bc:	5f                   	pop    edi
c00272bd:	5d                   	pop    ebp
c00272be:	c3                   	ret    
c00272bf:	90                   	nop
c00272c0:	39 f2                	cmp    edx,esi
c00272c2:	77 1c                	ja     c00272e0 <__udivdi3+0x7c>
c00272c4:	0f bd da             	bsr    ebx,edx
c00272c7:	83 f3 1f             	xor    ebx,0x1f
c00272ca:	75 24                	jne    c00272f0 <__udivdi3+0x8c>
c00272cc:	39 f2                	cmp    edx,esi
c00272ce:	72 08                	jb     c00272d8 <__udivdi3+0x74>
c00272d0:	39 ef                	cmp    edi,ebp
c00272d2:	0f 87 84 00 00 00    	ja     c002735c <__udivdi3+0xf8>
c00272d8:	b8 01 00 00 00       	mov    eax,0x1
c00272dd:	eb ac                	jmp    c002728b <__udivdi3+0x27>
c00272df:	90                   	nop
c00272e0:	31 db                	xor    ebx,ebx
c00272e2:	31 c0                	xor    eax,eax
c00272e4:	89 da                	mov    edx,ebx
c00272e6:	83 c4 1c             	add    esp,0x1c
c00272e9:	5b                   	pop    ebx
c00272ea:	5e                   	pop    esi
c00272eb:	5f                   	pop    edi
c00272ec:	5d                   	pop    ebp
c00272ed:	c3                   	ret    
c00272ee:	66 90                	xchg   ax,ax
c00272f0:	b8 20 00 00 00       	mov    eax,0x20
c00272f5:	29 d8                	sub    eax,ebx
c00272f7:	88 d9                	mov    cl,bl
c00272f9:	d3 e2                	shl    edx,cl
c00272fb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00272ff:	89 fa                	mov    edx,edi
c0027301:	88 c1                	mov    cl,al
c0027303:	d3 ea                	shr    edx,cl
c0027305:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027309:	09 d1                	or     ecx,edx
c002730b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002730f:	88 d9                	mov    cl,bl
c0027311:	d3 e7                	shl    edi,cl
c0027313:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027317:	89 f7                	mov    edi,esi
c0027319:	88 c1                	mov    cl,al
c002731b:	d3 ef                	shr    edi,cl
c002731d:	88 d9                	mov    cl,bl
c002731f:	d3 e6                	shl    esi,cl
c0027321:	89 ea                	mov    edx,ebp
c0027323:	88 c1                	mov    cl,al
c0027325:	d3 ea                	shr    edx,cl
c0027327:	09 d6                	or     esi,edx
c0027329:	89 f0                	mov    eax,esi
c002732b:	89 fa                	mov    edx,edi
c002732d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0027331:	89 d7                	mov    edi,edx
c0027333:	89 c6                	mov    esi,eax
c0027335:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027339:	39 d7                	cmp    edi,edx
c002733b:	72 13                	jb     c0027350 <__udivdi3+0xec>
c002733d:	74 09                	je     c0027348 <__udivdi3+0xe4>
c002733f:	89 f0                	mov    eax,esi
c0027341:	31 db                	xor    ebx,ebx
c0027343:	e9 43 ff ff ff       	jmp    c002728b <__udivdi3+0x27>
c0027348:	88 d9                	mov    cl,bl
c002734a:	d3 e5                	shl    ebp,cl
c002734c:	39 c5                	cmp    ebp,eax
c002734e:	73 ef                	jae    c002733f <__udivdi3+0xdb>
c0027350:	8d 46 ff             	lea    eax,[esi-0x1]
c0027353:	31 db                	xor    ebx,ebx
c0027355:	e9 31 ff ff ff       	jmp    c002728b <__udivdi3+0x27>
c002735a:	66 90                	xchg   ax,ax
c002735c:	31 c0                	xor    eax,eax
c002735e:	e9 28 ff ff ff       	jmp    c002728b <__udivdi3+0x27>
c0027363:	90                   	nop

c0027364 <__umoddi3>:
c0027364:	55                   	push   ebp
c0027365:	57                   	push   edi
c0027366:	56                   	push   esi
c0027367:	53                   	push   ebx
c0027368:	83 ec 1c             	sub    esp,0x1c
c002736b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002736f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0027373:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027377:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002737b:	89 da                	mov    edx,ebx
c002737d:	85 c0                	test   eax,eax
c002737f:	75 37                	jne    c00273b8 <__umoddi3+0x54>
c0027381:	39 df                	cmp    edi,ebx
c0027383:	76 13                	jbe    c0027398 <__umoddi3+0x34>
c0027385:	89 f0                	mov    eax,esi
c0027387:	f7 f7                	div    edi
c0027389:	89 d0                	mov    eax,edx
c002738b:	31 d2                	xor    edx,edx
c002738d:	83 c4 1c             	add    esp,0x1c
c0027390:	5b                   	pop    ebx
c0027391:	5e                   	pop    esi
c0027392:	5f                   	pop    edi
c0027393:	5d                   	pop    ebp
c0027394:	c3                   	ret    
c0027395:	8d 76 00             	lea    esi,[esi+0x0]
c0027398:	89 fd                	mov    ebp,edi
c002739a:	85 ff                	test   edi,edi
c002739c:	75 0b                	jne    c00273a9 <__umoddi3+0x45>
c002739e:	b8 01 00 00 00       	mov    eax,0x1
c00273a3:	31 d2                	xor    edx,edx
c00273a5:	f7 f7                	div    edi
c00273a7:	89 c5                	mov    ebp,eax
c00273a9:	89 d8                	mov    eax,ebx
c00273ab:	31 d2                	xor    edx,edx
c00273ad:	f7 f5                	div    ebp
c00273af:	89 f0                	mov    eax,esi
c00273b1:	f7 f5                	div    ebp
c00273b3:	89 d0                	mov    eax,edx
c00273b5:	eb d4                	jmp    c002738b <__umoddi3+0x27>
c00273b7:	90                   	nop
c00273b8:	89 f1                	mov    ecx,esi
c00273ba:	39 d8                	cmp    eax,ebx
c00273bc:	76 0a                	jbe    c00273c8 <__umoddi3+0x64>
c00273be:	89 f0                	mov    eax,esi
c00273c0:	83 c4 1c             	add    esp,0x1c
c00273c3:	5b                   	pop    ebx
c00273c4:	5e                   	pop    esi
c00273c5:	5f                   	pop    edi
c00273c6:	5d                   	pop    ebp
c00273c7:	c3                   	ret    
c00273c8:	0f bd e8             	bsr    ebp,eax
c00273cb:	83 f5 1f             	xor    ebp,0x1f
c00273ce:	75 1c                	jne    c00273ec <__umoddi3+0x88>
c00273d0:	39 d8                	cmp    eax,ebx
c00273d2:	72 04                	jb     c00273d8 <__umoddi3+0x74>
c00273d4:	39 f7                	cmp    edi,esi
c00273d6:	77 08                	ja     c00273e0 <__umoddi3+0x7c>
c00273d8:	89 da                	mov    edx,ebx
c00273da:	29 fe                	sub    esi,edi
c00273dc:	19 c2                	sbb    edx,eax
c00273de:	89 f1                	mov    ecx,esi
c00273e0:	89 c8                	mov    eax,ecx
c00273e2:	83 c4 1c             	add    esp,0x1c
c00273e5:	5b                   	pop    ebx
c00273e6:	5e                   	pop    esi
c00273e7:	5f                   	pop    edi
c00273e8:	5d                   	pop    ebp
c00273e9:	c3                   	ret    
c00273ea:	66 90                	xchg   ax,ax
c00273ec:	ba 20 00 00 00       	mov    edx,0x20
c00273f1:	29 ea                	sub    edx,ebp
c00273f3:	89 e9                	mov    ecx,ebp
c00273f5:	d3 e0                	shl    eax,cl
c00273f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00273fb:	89 f8                	mov    eax,edi
c00273fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0027401:	88 d1                	mov    cl,dl
c0027403:	d3 e8                	shr    eax,cl
c0027405:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027409:	09 c1                	or     ecx,eax
c002740b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002740f:	89 e9                	mov    ecx,ebp
c0027411:	d3 e7                	shl    edi,cl
c0027413:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027417:	89 d8                	mov    eax,ebx
c0027419:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002741d:	88 d1                	mov    cl,dl
c002741f:	d3 e8                	shr    eax,cl
c0027421:	89 c7                	mov    edi,eax
c0027423:	89 e9                	mov    ecx,ebp
c0027425:	d3 e3                	shl    ebx,cl
c0027427:	89 f0                	mov    eax,esi
c0027429:	88 d1                	mov    cl,dl
c002742b:	d3 e8                	shr    eax,cl
c002742d:	09 d8                	or     eax,ebx
c002742f:	89 e9                	mov    ecx,ebp
c0027431:	d3 e6                	shl    esi,cl
c0027433:	89 f3                	mov    ebx,esi
c0027435:	89 fa                	mov    edx,edi
c0027437:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002743b:	89 d1                	mov    ecx,edx
c002743d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027441:	89 c6                	mov    esi,eax
c0027443:	89 d7                	mov    edi,edx
c0027445:	39 d1                	cmp    ecx,edx
c0027447:	72 27                	jb     c0027470 <__umoddi3+0x10c>
c0027449:	74 21                	je     c002746c <__umoddi3+0x108>
c002744b:	89 ca                	mov    edx,ecx
c002744d:	29 f3                	sub    ebx,esi
c002744f:	19 fa                	sbb    edx,edi
c0027451:	89 d0                	mov    eax,edx
c0027453:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0027457:	d3 e0                	shl    eax,cl
c0027459:	89 e9                	mov    ecx,ebp
c002745b:	d3 eb                	shr    ebx,cl
c002745d:	09 d8                	or     eax,ebx
c002745f:	d3 ea                	shr    edx,cl
c0027461:	83 c4 1c             	add    esp,0x1c
c0027464:	5b                   	pop    ebx
c0027465:	5e                   	pop    esi
c0027466:	5f                   	pop    edi
c0027467:	5d                   	pop    ebp
c0027468:	c3                   	ret    
c0027469:	8d 76 00             	lea    esi,[esi+0x0]
c002746c:	39 c3                	cmp    ebx,eax
c002746e:	73 db                	jae    c002744b <__umoddi3+0xe7>
c0027470:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027474:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0027478:	89 d7                	mov    edi,edx
c002747a:	89 c6                	mov    esi,eax
c002747c:	eb cd                	jmp    c002744b <__umoddi3+0xe7>

c002747e <__addsf3>:
c002747e:	55                   	push   ebp
c002747f:	89 e5                	mov    ebp,esp
c0027481:	57                   	push   edi
c0027482:	56                   	push   esi
c0027483:	53                   	push   ebx
c0027484:	83 ec 08             	sub    esp,0x8
c0027487:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002748a:	89 fa                	mov    edx,edi
c002748c:	89 f8                	mov    eax,edi
c002748e:	c1 f8 17             	sar    eax,0x17
c0027491:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027494:	c1 e2 08             	shl    edx,0x8
c0027497:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002749d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00274a0:	89 de                	mov    esi,ebx
c00274a2:	c1 fe 17             	sar    esi,0x17
c00274a5:	c1 e3 08             	shl    ebx,0x8
c00274a8:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00274ae:	31 f0                	xor    eax,esi
c00274b0:	0f 88 3b 01 00 00    	js     c00275f1 <__addsf3+0x173>
c00274b6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00274b9:	29 f1                	sub    ecx,esi
c00274bb:	85 c9                	test   ecx,ecx
c00274bd:	7e 54                	jle    c0027513 <__addsf3+0x95>
c00274bf:	89 f0                	mov    eax,esi
c00274c1:	84 c0                	test   al,al
c00274c3:	75 10                	jne    c00274d5 <__addsf3+0x57>
c00274c5:	85 db                	test   ebx,ebx
c00274c7:	0f 84 aa 02 00 00    	je     c0027777 <__addsf3+0x2f9>
c00274cd:	49                   	dec    ecx
c00274ce:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00274d1:	74 38                	je     c002750b <__addsf3+0x8d>
c00274d3:	eb 13                	jmp    c00274e8 <__addsf3+0x6a>
c00274d5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00274d8:	f7 d0                	not    eax
c00274da:	84 c0                	test   al,al
c00274dc:	0f 84 95 02 00 00    	je     c0027777 <__addsf3+0x2f9>
c00274e2:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00274e8:	83 f9 1f             	cmp    ecx,0x1f
c00274eb:	0f 8f 86 02 00 00    	jg     c0027777 <__addsf3+0x2f9>
c00274f1:	89 de                	mov    esi,ebx
c00274f3:	d3 ee                	shr    esi,cl
c00274f5:	b8 20 00 00 00       	mov    eax,0x20
c00274fa:	29 c8                	sub    eax,ecx
c00274fc:	89 c1                	mov    ecx,eax
c00274fe:	d3 e3                	shl    ebx,cl
c0027500:	31 c0                	xor    eax,eax
c0027502:	85 db                	test   ebx,ebx
c0027504:	0f 95 c0             	setne  al
c0027507:	09 f0                	or     eax,esi
c0027509:	01 d0                	add    eax,edx
c002750b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002750e:	e9 b6 00 00 00       	jmp    c00275c9 <__addsf3+0x14b>
c0027513:	74 5c                	je     c0027571 <__addsf3+0xf3>
c0027515:	89 f1                	mov    ecx,esi
c0027517:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c002751a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002751d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027521:	75 14                	jne    c0027537 <__addsf3+0xb9>
c0027523:	85 d2                	test   edx,edx
c0027525:	0f 84 4c 02 00 00    	je     c0027777 <__addsf3+0x2f9>
c002752b:	49                   	dec    ecx
c002752c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002752f:	0f 84 94 00 00 00    	je     c00275c9 <__addsf3+0x14b>
c0027535:	eb 12                	jmp    c0027549 <__addsf3+0xcb>
c0027537:	89 f0                	mov    eax,esi
c0027539:	f7 d0                	not    eax
c002753b:	84 c0                	test   al,al
c002753d:	0f 84 34 02 00 00    	je     c0027777 <__addsf3+0x2f9>
c0027543:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027549:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002754c:	83 f9 1f             	cmp    ecx,0x1f
c002754f:	0f 8f 22 02 00 00    	jg     c0027777 <__addsf3+0x2f9>
c0027555:	89 d7                	mov    edi,edx
c0027557:	d3 ef                	shr    edi,cl
c0027559:	b8 20 00 00 00       	mov    eax,0x20
c002755e:	29 c8                	sub    eax,ecx
c0027560:	89 c1                	mov    ecx,eax
c0027562:	d3 e2                	shl    edx,cl
c0027564:	31 c0                	xor    eax,eax
c0027566:	85 d2                	test   edx,edx
c0027568:	0f 95 c0             	setne  al
c002756b:	09 f8                	or     eax,edi
c002756d:	01 d8                	add    eax,ebx
c002756f:	eb 58                	jmp    c00275c9 <__addsf3+0x14b>
c0027571:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027574:	8d 70 01             	lea    esi,[eax+0x1]
c0027577:	f7 c6 fe 00 00 00    	test   esi,0xfe
c002757d:	75 32                	jne    c00275b1 <__addsf3+0x133>
c002757f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027583:	75 1f                	jne    c00275a4 <__addsf3+0x126>
c0027585:	85 d2                	test   edx,edx
c0027587:	0f 84 e0 01 00 00    	je     c002776d <__addsf3+0x2ef>
c002758d:	85 db                	test   ebx,ebx
c002758f:	0f 84 e2 01 00 00    	je     c0027777 <__addsf3+0x2f9>
c0027595:	89 d0                	mov    eax,edx
c0027597:	01 d8                	add    eax,ebx
c0027599:	0f 89 a9 01 00 00    	jns    c0027748 <__addsf3+0x2ca>
c002759f:	e9 9d 01 00 00       	jmp    c0027741 <__addsf3+0x2c3>
c00275a4:	85 d2                	test   edx,edx
c00275a6:	0f 85 cb 01 00 00    	jne    c0027777 <__addsf3+0x2f9>
c00275ac:	e9 bc 01 00 00       	jmp    c002776d <__addsf3+0x2ef>
c00275b1:	31 c0                	xor    eax,eax
c00275b3:	89 f1                	mov    ecx,esi
c00275b5:	f7 d1                	not    ecx
c00275b7:	84 c9                	test   cl,cl
c00275b9:	0f 84 90 01 00 00    	je     c002774f <__addsf3+0x2d1>
c00275bf:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00275c2:	d1 e8                	shr    eax,1
c00275c4:	e9 86 01 00 00       	jmp    c002774f <__addsf3+0x2d1>
c00275c9:	85 c0                	test   eax,eax
c00275cb:	0f 89 7e 01 00 00    	jns    c002774f <__addsf3+0x2d1>
c00275d1:	46                   	inc    esi
c00275d2:	89 f2                	mov    edx,esi
c00275d4:	f7 d2                	not    edx
c00275d6:	84 d2                	test   dl,dl
c00275d8:	0f 84 6f 01 00 00    	je     c002774d <__addsf3+0x2cf>
c00275de:	89 c2                	mov    edx,eax
c00275e0:	83 e2 01             	and    edx,0x1
c00275e3:	d1 e8                	shr    eax,1
c00275e5:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00275ea:	09 d0                	or     eax,edx
c00275ec:	e9 5e 01 00 00       	jmp    c002774f <__addsf3+0x2d1>
c00275f1:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00275f5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00275f8:	89 f0                	mov    eax,esi
c00275fa:	0f b6 c0             	movzx  eax,al
c00275fd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027600:	29 c1                	sub    ecx,eax
c0027602:	85 c9                	test   ecx,ecx
c0027604:	7e 55                	jle    c002765b <__addsf3+0x1dd>
c0027606:	85 c0                	test   eax,eax
c0027608:	75 11                	jne    c002761b <__addsf3+0x19d>
c002760a:	85 db                	test   ebx,ebx
c002760c:	0f 84 65 01 00 00    	je     c0027777 <__addsf3+0x2f9>
c0027612:	49                   	dec    ecx
c0027613:	75 19                	jne    c002762e <__addsf3+0x1b0>
c0027615:	89 d0                	mov    eax,edx
c0027617:	29 d8                	sub    eax,ebx
c0027619:	eb 38                	jmp    c0027653 <__addsf3+0x1d5>
c002761b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002761e:	f7 d0                	not    eax
c0027620:	84 c0                	test   al,al
c0027622:	0f 84 4f 01 00 00    	je     c0027777 <__addsf3+0x2f9>
c0027628:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002762e:	83 f9 1f             	cmp    ecx,0x1f
c0027631:	0f 8f 40 01 00 00    	jg     c0027777 <__addsf3+0x2f9>
c0027637:	89 de                	mov    esi,ebx
c0027639:	d3 ee                	shr    esi,cl
c002763b:	b8 20 00 00 00       	mov    eax,0x20
c0027640:	29 c8                	sub    eax,ecx
c0027642:	89 c1                	mov    ecx,eax
c0027644:	d3 e3                	shl    ebx,cl
c0027646:	31 c0                	xor    eax,eax
c0027648:	85 db                	test   ebx,ebx
c002764a:	0f 95 c0             	setne  al
c002764d:	09 f0                	or     eax,esi
c002764f:	29 c2                	sub    edx,eax
c0027651:	89 d0                	mov    eax,edx
c0027653:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027656:	e9 af 00 00 00       	jmp    c002770a <__addsf3+0x28c>
c002765b:	74 5c                	je     c00276b9 <__addsf3+0x23b>
c002765d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0027660:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027663:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027667:	75 14                	jne    c002767d <__addsf3+0x1ff>
c0027669:	85 d2                	test   edx,edx
c002766b:	0f 84 06 01 00 00    	je     c0027777 <__addsf3+0x2f9>
c0027671:	48                   	dec    eax
c0027672:	75 1b                	jne    c002768f <__addsf3+0x211>
c0027674:	89 d8                	mov    eax,ebx
c0027676:	29 d0                	sub    eax,edx
c0027678:	e9 8d 00 00 00       	jmp    c002770a <__addsf3+0x28c>
c002767d:	89 f1                	mov    ecx,esi
c002767f:	f7 d1                	not    ecx
c0027681:	84 c9                	test   cl,cl
c0027683:	0f 84 ee 00 00 00    	je     c0027777 <__addsf3+0x2f9>
c0027689:	81 ca 00 00 00 80    	or     edx,0x80000000
c002768f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027692:	83 f8 1f             	cmp    eax,0x1f
c0027695:	0f 8f dc 00 00 00    	jg     c0027777 <__addsf3+0x2f9>
c002769b:	89 d7                	mov    edi,edx
c002769d:	88 c1                	mov    cl,al
c002769f:	d3 ef                	shr    edi,cl
c00276a1:	b9 20 00 00 00       	mov    ecx,0x20
c00276a6:	29 c1                	sub    ecx,eax
c00276a8:	d3 e2                	shl    edx,cl
c00276aa:	31 c0                	xor    eax,eax
c00276ac:	85 d2                	test   edx,edx
c00276ae:	0f 95 c0             	setne  al
c00276b1:	09 f8                	or     eax,edi
c00276b3:	29 c3                	sub    ebx,eax
c00276b5:	89 d8                	mov    eax,ebx
c00276b7:	eb 51                	jmp    c002770a <__addsf3+0x28c>
c00276b9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00276bc:	40                   	inc    eax
c00276bd:	a8 fe                	test   al,0xfe
c00276bf:	75 3d                	jne    c00276fe <__addsf3+0x280>
c00276c1:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00276c5:	0f 85 a7 00 00 00    	jne    c0027772 <__addsf3+0x2f4>
c00276cb:	85 d2                	test   edx,edx
c00276cd:	75 12                	jne    c00276e1 <__addsf3+0x263>
c00276cf:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00276d2:	85 db                	test   ebx,ebx
c00276d4:	0f 85 9d 00 00 00    	jne    c0027777 <__addsf3+0x2f9>
c00276da:	31 ff                	xor    edi,edi
c00276dc:	e9 96 00 00 00       	jmp    c0027777 <__addsf3+0x2f9>
c00276e1:	85 db                	test   ebx,ebx
c00276e3:	0f 84 8e 00 00 00    	je     c0027777 <__addsf3+0x2f9>
c00276e9:	89 d0                	mov    eax,edx
c00276eb:	29 d8                	sub    eax,ebx
c00276ed:	79 06                	jns    c00276f5 <__addsf3+0x277>
c00276ef:	89 d8                	mov    eax,ebx
c00276f1:	29 d0                	sub    eax,edx
c00276f3:	eb 5a                	jmp    c002774f <__addsf3+0x2d1>
c00276f5:	bf 00 00 00 00       	mov    edi,0x0
c00276fa:	74 7b                	je     c0027777 <__addsf3+0x2f9>
c00276fc:	eb 4a                	jmp    c0027748 <__addsf3+0x2ca>
c00276fe:	89 d0                	mov    eax,edx
c0027700:	29 d8                	sub    eax,ebx
c0027702:	79 12                	jns    c0027716 <__addsf3+0x298>
c0027704:	89 d8                	mov    eax,ebx
c0027706:	29 d0                	sub    eax,edx
c0027708:	eb 09                	jmp    c0027713 <__addsf3+0x295>
c002770a:	85 c0                	test   eax,eax
c002770c:	79 41                	jns    c002774f <__addsf3+0x2d1>
c002770e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027713:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0027716:	31 f6                	xor    esi,esi
c0027718:	85 c0                	test   eax,eax
c002771a:	74 33                	je     c002774f <__addsf3+0x2d1>
c002771c:	0f bd c8             	bsr    ecx,eax
c002771f:	83 f1 1f             	xor    ecx,0x1f
c0027722:	d3 e0                	shl    eax,cl
c0027724:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0027728:	39 ca                	cmp    edx,ecx
c002772a:	7f 10                	jg     c002773c <__addsf3+0x2be>
c002772c:	29 d1                	sub    ecx,edx
c002772e:	41                   	inc    ecx
c002772f:	d3 e8                	shr    eax,cl
c0027731:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027734:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c002773a:	eb 13                	jmp    c002774f <__addsf3+0x2d1>
c002773c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002773f:	29 ce                	sub    esi,ecx
c0027741:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027746:	eb 07                	jmp    c002774f <__addsf3+0x2d1>
c0027748:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002774b:	eb 02                	jmp    c002774f <__addsf3+0x2d1>
c002774d:	31 c0                	xor    eax,eax
c002774f:	89 c2                	mov    edx,eax
c0027751:	c1 ea 08             	shr    edx,0x8
c0027754:	a8 7f                	test   al,0x7f
c0027756:	0f 95 c1             	setne  cl
c0027759:	09 d1                	or     ecx,edx
c002775b:	83 e1 01             	and    ecx,0x1
c002775e:	c1 e8 07             	shr    eax,0x7
c0027761:	21 c8                	and    eax,ecx
c0027763:	c1 e6 17             	shl    esi,0x17
c0027766:	09 d6                	or     esi,edx
c0027768:	8d 3c 30             	lea    edi,[eax+esi*1]
c002776b:	eb 0a                	jmp    c0027777 <__addsf3+0x2f9>
c002776d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027770:	eb 05                	jmp    c0027777 <__addsf3+0x2f9>
c0027772:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0027777:	89 f8                	mov    eax,edi
c0027779:	5a                   	pop    edx
c002777a:	59                   	pop    ecx
c002777b:	5b                   	pop    ebx
c002777c:	5e                   	pop    esi
c002777d:	5f                   	pop    edi
c002777e:	5d                   	pop    ebp
c002777f:	c3                   	ret    

c0027780 <__subsf3>:
c0027780:	55                   	push   ebp
c0027781:	89 e5                	mov    ebp,esp
c0027783:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027786:	05 00 00 00 80       	add    eax,0x80000000
c002778b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002778e:	5d                   	pop    ebp
c002778f:	e9 ea fc ff ff       	jmp    c002747e <__addsf3>

c0027794 <__negsf2>:
c0027794:	55                   	push   ebp
c0027795:	89 e5                	mov    ebp,esp
c0027797:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002779a:	05 00 00 00 80       	add    eax,0x80000000
c002779f:	5d                   	pop    ebp
c00277a0:	c3                   	ret    

c00277a1 <__mulsf3>:
c00277a1:	55                   	push   ebp
c00277a2:	89 e5                	mov    ebp,esp
c00277a4:	57                   	push   edi
c00277a5:	56                   	push   esi
c00277a6:	53                   	push   ebx
c00277a7:	83 ec 1c             	sub    esp,0x1c
c00277aa:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00277ad:	89 f0                	mov    eax,esi
c00277af:	89 f1                	mov    ecx,esi
c00277b1:	c1 f9 17             	sar    ecx,0x17
c00277b4:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00277b7:	c1 e0 08             	shl    eax,0x8
c00277ba:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00277bf:	89 c1                	mov    ecx,eax
c00277c1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00277c4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00277c7:	89 c7                	mov    edi,eax
c00277c9:	c1 ff 17             	sar    edi,0x17
c00277cc:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00277d0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00277d3:	89 f8                	mov    eax,edi
c00277d5:	0f b6 c0             	movzx  eax,al
c00277d8:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00277db:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00277df:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00277e2:	42                   	inc    edx
c00277e3:	80 e2 fe             	and    dl,0xfe
c00277e6:	75 7b                	jne    c0027863 <__mulsf3+0xc2>
c00277e8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00277ec:	74 54                	je     c0027842 <__mulsf3+0xa1>
c00277ee:	85 c9                	test   ecx,ecx
c00277f0:	0f 85 64 01 00 00    	jne    c002795a <__mulsf3+0x1b9>
c00277f6:	8d 57 01             	lea    edx,[edi+0x1]
c00277f9:	80 e2 fe             	and    dl,0xfe
c00277fc:	75 1f                	jne    c002781d <__mulsf3+0x7c>
c00277fe:	85 c0                	test   eax,eax
c0027800:	b8 00 00 00 00       	mov    eax,0x0
c0027805:	74 29                	je     c0027830 <__mulsf3+0x8f>
c0027807:	53                   	push   ebx
c0027808:	53                   	push   ebx
c0027809:	50                   	push   eax
c002780a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002780d:	e8 96 05 00 00       	call   c0027da8 <__nesf2>
c0027812:	83 c4 10             	add    esp,0x10
c0027815:	85 c0                	test   eax,eax
c0027817:	0f 85 3a 01 00 00    	jne    c0027957 <__mulsf3+0x1b6>
c002781d:	85 ff                	test   edi,edi
c002781f:	0f 89 35 01 00 00    	jns    c002795a <__mulsf3+0x1b9>
c0027825:	81 c6 00 00 00 80    	add    esi,0x80000000
c002782b:	e9 2a 01 00 00       	jmp    c002795a <__mulsf3+0x1b9>
c0027830:	51                   	push   ecx
c0027831:	51                   	push   ecx
c0027832:	50                   	push   eax
c0027833:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027836:	e8 6d 05 00 00       	call   c0027da8 <__nesf2>
c002783b:	83 c4 10             	add    esp,0x10
c002783e:	85 c0                	test   eax,eax
c0027840:	eb 15                	jmp    c0027857 <__mulsf3+0xb6>
c0027842:	85 c9                	test   ecx,ecx
c0027844:	74 0b                	je     c0027851 <__mulsf3+0xb0>
c0027846:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027849:	01 c9                	add    ecx,ecx
c002784b:	78 16                	js     c0027863 <__mulsf3+0xc2>
c002784d:	89 d3                	mov    ebx,edx
c002784f:	eb f5                	jmp    c0027846 <__mulsf3+0xa5>
c0027851:	89 f8                	mov    eax,edi
c0027853:	f7 d0                	not    eax
c0027855:	84 c0                	test   al,al
c0027857:	75 c4                	jne    c002781d <__mulsf3+0x7c>
c0027859:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c002785e:	e9 f7 00 00 00       	jmp    c002795a <__mulsf3+0x1b9>
c0027863:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027866:	c1 e6 08             	shl    esi,0x8
c0027869:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c002786f:	8d 57 01             	lea    edx,[edi+0x1]
c0027872:	80 e2 fe             	and    dl,0xfe
c0027875:	75 63                	jne    c00278da <__mulsf3+0x139>
c0027877:	85 c0                	test   eax,eax
c0027879:	74 2f                	je     c00278aa <__mulsf3+0x109>
c002787b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002787f:	0f 89 d2 00 00 00    	jns    c0027957 <__mulsf3+0x1b6>
c0027885:	52                   	push   edx
c0027886:	52                   	push   edx
c0027887:	6a 00                	push   0x0
c0027889:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002788c:	e8 dc 04 00 00       	call   c0027d6d <__eqsf2>
c0027891:	83 c4 10             	add    esp,0x10
c0027894:	85 c0                	test   eax,eax
c0027896:	0f 85 bb 00 00 00    	jne    c0027957 <__mulsf3+0x1b6>
c002789c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002789f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00278a5:	e9 b0 00 00 00       	jmp    c002795a <__mulsf3+0x1b9>
c00278aa:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00278ad:	50                   	push   eax
c00278ae:	50                   	push   eax
c00278af:	6a 00                	push   0x0
c00278b1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00278b4:	e8 b4 04 00 00       	call   c0027d6d <__eqsf2>
c00278b9:	83 c4 10             	add    esp,0x10
c00278bc:	85 c0                	test   eax,eax
c00278be:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00278c1:	75 0c                	jne    c00278cf <__mulsf3+0x12e>
c00278c3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00278c7:	0f 89 8a 00 00 00    	jns    c0027957 <__mulsf3+0x1b6>
c00278cd:	eb cd                	jmp    c002789c <__mulsf3+0xfb>
c00278cf:	8d 43 ff             	lea    eax,[ebx-0x1]
c00278d2:	01 f6                	add    esi,esi
c00278d4:	78 04                	js     c00278da <__mulsf3+0x139>
c00278d6:	89 c3                	mov    ebx,eax
c00278d8:	eb f5                	jmp    c00278cf <__mulsf3+0x12e>
c00278da:	89 c8                	mov    eax,ecx
c00278dc:	0d 00 00 00 80       	or     eax,0x80000000
c00278e1:	81 ce 00 00 00 80    	or     esi,0x80000000
c00278e7:	f7 e6                	mul    esi
c00278e9:	85 c0                	test   eax,eax
c00278eb:	0f 95 c0             	setne  al
c00278ee:	0f b6 c0             	movzx  eax,al
c00278f1:	09 c2                	or     edx,eax
c00278f3:	78 03                	js     c00278f8 <__mulsf3+0x157>
c00278f5:	01 d2                	add    edx,edx
c00278f7:	4b                   	dec    ebx
c00278f8:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c00278fe:	7f 22                	jg     c0027922 <__mulsf3+0x181>
c0027900:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027906:	85 db                	test   ebx,ebx
c0027908:	7f 23                	jg     c002792d <__mulsf3+0x18c>
c002790a:	83 fb e9             	cmp    ebx,0xffffffe9
c002790d:	7c 1a                	jl     c0027929 <__mulsf3+0x188>
c002790f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027915:	b9 01 00 00 00       	mov    ecx,0x1
c002791a:	29 d9                	sub    ecx,ebx
c002791c:	d3 ea                	shr    edx,cl
c002791e:	31 db                	xor    ebx,ebx
c0027920:	eb 0b                	jmp    c002792d <__mulsf3+0x18c>
c0027922:	bb ff 00 00 00       	mov    ebx,0xff
c0027927:	eb 02                	jmp    c002792b <__mulsf3+0x18a>
c0027929:	31 db                	xor    ebx,ebx
c002792b:	31 d2                	xor    edx,edx
c002792d:	89 d0                	mov    eax,edx
c002792f:	c1 e8 08             	shr    eax,0x8
c0027932:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027935:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002793b:	09 fb                	or     ebx,edi
c002793d:	c1 e3 17             	shl    ebx,0x17
c0027940:	09 c3                	or     ebx,eax
c0027942:	f6 c2 7f             	test   dl,0x7f
c0027945:	0f 95 c1             	setne  cl
c0027948:	09 c8                	or     eax,ecx
c002794a:	83 e0 01             	and    eax,0x1
c002794d:	c1 ea 07             	shr    edx,0x7
c0027950:	21 c2                	and    edx,eax
c0027952:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027955:	eb 03                	jmp    c002795a <__mulsf3+0x1b9>
c0027957:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c002795a:	89 f0                	mov    eax,esi
c002795c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002795f:	5b                   	pop    ebx
c0027960:	5e                   	pop    esi
c0027961:	5f                   	pop    edi
c0027962:	5d                   	pop    ebp
c0027963:	c3                   	ret    

c0027964 <__divsf3>:
c0027964:	55                   	push   ebp
c0027965:	89 e5                	mov    ebp,esp
c0027967:	57                   	push   edi
c0027968:	56                   	push   esi
c0027969:	53                   	push   ebx
c002796a:	83 ec 1c             	sub    esp,0x1c
c002796d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027970:	89 d8                	mov    eax,ebx
c0027972:	89 d9                	mov    ecx,ebx
c0027974:	c1 f9 17             	sar    ecx,0x17
c0027977:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002797a:	c1 e0 08             	shl    eax,0x8
c002797d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027982:	89 c1                	mov    ecx,eax
c0027984:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027987:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002798a:	89 c7                	mov    edi,eax
c002798c:	c1 ff 17             	sar    edi,0x17
c002798f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027993:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027996:	89 f8                	mov    eax,edi
c0027998:	0f b6 c0             	movzx  eax,al
c002799b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002799e:	29 c6                	sub    esi,eax
c00279a0:	83 c6 7f             	add    esi,0x7f
c00279a3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00279a6:	42                   	inc    edx
c00279a7:	80 e2 fe             	and    dl,0xfe
c00279aa:	0f 85 9c 00 00 00    	jne    c0027a4c <__divsf3+0xe8>
c00279b0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00279b4:	74 33                	je     c00279e9 <__divsf3+0x85>
c00279b6:	85 c9                	test   ecx,ecx
c00279b8:	0f 85 c7 01 00 00    	jne    c0027b85 <__divsf3+0x221>
c00279be:	8d 57 01             	lea    edx,[edi+0x1]
c00279c1:	80 e2 fe             	and    dl,0xfe
c00279c4:	75 2f                	jne    c00279f5 <__divsf3+0x91>
c00279c6:	85 c0                	test   eax,eax
c00279c8:	74 2b                	je     c00279f5 <__divsf3+0x91>
c00279ca:	51                   	push   ecx
c00279cb:	51                   	push   ecx
c00279cc:	6a 00                	push   0x0
c00279ce:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279d1:	e8 d2 03 00 00       	call   c0027da8 <__nesf2>
c00279d6:	83 c4 10             	add    esp,0x10
c00279d9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00279dc:	85 c0                	test   eax,eax
c00279de:	0f 85 a1 01 00 00    	jne    c0027b85 <__divsf3+0x221>
c00279e4:	e9 92 01 00 00       	jmp    c0027b7b <__divsf3+0x217>
c00279e9:	85 c9                	test   ecx,ecx
c00279eb:	75 1b                	jne    c0027a08 <__divsf3+0xa4>
c00279ed:	8d 57 01             	lea    edx,[edi+0x1]
c00279f0:	80 e2 fe             	and    dl,0xfe
c00279f3:	74 1e                	je     c0027a13 <__divsf3+0xaf>
c00279f5:	85 ff                	test   edi,edi
c00279f7:	0f 89 88 01 00 00    	jns    c0027b85 <__divsf3+0x221>
c00279fd:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027a03:	e9 7d 01 00 00       	jmp    c0027b85 <__divsf3+0x221>
c0027a08:	8d 56 ff             	lea    edx,[esi-0x1]
c0027a0b:	01 c9                	add    ecx,ecx
c0027a0d:	78 3d                	js     c0027a4c <__divsf3+0xe8>
c0027a0f:	89 d6                	mov    esi,edx
c0027a11:	eb f5                	jmp    c0027a08 <__divsf3+0xa4>
c0027a13:	85 c0                	test   eax,eax
c0027a15:	b8 00 00 00 00       	mov    eax,0x0
c0027a1a:	74 18                	je     c0027a34 <__divsf3+0xd0>
c0027a1c:	52                   	push   edx
c0027a1d:	52                   	push   edx
c0027a1e:	50                   	push   eax
c0027a1f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a22:	e8 81 03 00 00       	call   c0027da8 <__nesf2>
c0027a27:	83 c4 10             	add    esp,0x10
c0027a2a:	85 c0                	test   eax,eax
c0027a2c:	0f 85 50 01 00 00    	jne    c0027b82 <__divsf3+0x21e>
c0027a32:	eb c1                	jmp    c00279f5 <__divsf3+0x91>
c0027a34:	56                   	push   esi
c0027a35:	56                   	push   esi
c0027a36:	50                   	push   eax
c0027a37:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a3a:	e8 69 03 00 00       	call   c0027da8 <__nesf2>
c0027a3f:	83 c4 10             	add    esp,0x10
c0027a42:	85 c0                	test   eax,eax
c0027a44:	0f 84 31 01 00 00    	je     c0027b7b <__divsf3+0x217>
c0027a4a:	eb a9                	jmp    c00279f5 <__divsf3+0x91>
c0027a4c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027a4f:	c1 e3 08             	shl    ebx,0x8
c0027a52:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027a58:	8d 57 01             	lea    edx,[edi+0x1]
c0027a5b:	80 e2 fe             	and    dl,0xfe
c0027a5e:	75 71                	jne    c0027ad1 <__divsf3+0x16d>
c0027a60:	85 c0                	test   eax,eax
c0027a62:	ba 00 00 00 00       	mov    edx,0x0
c0027a67:	74 2f                	je     c0027a98 <__divsf3+0x134>
c0027a69:	51                   	push   ecx
c0027a6a:	51                   	push   ecx
c0027a6b:	52                   	push   edx
c0027a6c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a6f:	e8 f9 02 00 00       	call   c0027d6d <__eqsf2>
c0027a74:	83 c4 10             	add    esp,0x10
c0027a77:	85 c0                	test   eax,eax
c0027a79:	0f 85 03 01 00 00    	jne    c0027b82 <__divsf3+0x21e>
c0027a7f:	31 d2                	xor    edx,edx
c0027a81:	89 d3                	mov    ebx,edx
c0027a83:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a86:	31 f8                	xor    eax,edi
c0027a88:	0f 89 f7 00 00 00    	jns    c0027b85 <__divsf3+0x221>
c0027a8e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027a93:	e9 ed 00 00 00       	jmp    c0027b85 <__divsf3+0x221>
c0027a98:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027a9b:	50                   	push   eax
c0027a9c:	50                   	push   eax
c0027a9d:	52                   	push   edx
c0027a9e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027aa1:	e8 c7 02 00 00       	call   c0027d6d <__eqsf2>
c0027aa6:	83 c4 10             	add    esp,0x10
c0027aa9:	85 c0                	test   eax,eax
c0027aab:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027aae:	75 16                	jne    c0027ac6 <__divsf3+0x162>
c0027ab0:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027ab3:	31 fb                	xor    ebx,edi
c0027ab5:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027abb:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027ac1:	e9 bf 00 00 00       	jmp    c0027b85 <__divsf3+0x221>
c0027ac6:	8d 46 01             	lea    eax,[esi+0x1]
c0027ac9:	01 db                	add    ebx,ebx
c0027acb:	78 04                	js     c0027ad1 <__divsf3+0x16d>
c0027acd:	89 c6                	mov    esi,eax
c0027acf:	eb f5                	jmp    c0027ac6 <__divsf3+0x162>
c0027ad1:	89 c8                	mov    eax,ecx
c0027ad3:	0d 00 00 00 80       	or     eax,0x80000000
c0027ad8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027ade:	31 d2                	xor    edx,edx
c0027ae0:	39 d8                	cmp    eax,ebx
c0027ae2:	72 07                	jb     c0027aeb <__divsf3+0x187>
c0027ae4:	29 d8                	sub    eax,ebx
c0027ae6:	ba 01 00 00 00       	mov    edx,0x1
c0027aeb:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027af2:	01 d2                	add    edx,edx
c0027af4:	89 c1                	mov    ecx,eax
c0027af6:	01 c0                	add    eax,eax
c0027af8:	85 c9                	test   ecx,ecx
c0027afa:	78 04                	js     c0027b00 <__divsf3+0x19c>
c0027afc:	39 c3                	cmp    ebx,eax
c0027afe:	77 05                	ja     c0027b05 <__divsf3+0x1a1>
c0027b00:	29 d8                	sub    eax,ebx
c0027b02:	83 ca 01             	or     edx,0x1
c0027b05:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027b08:	75 e8                	jne    c0027af2 <__divsf3+0x18e>
c0027b0a:	85 c0                	test   eax,eax
c0027b0c:	0f 95 c0             	setne  al
c0027b0f:	0f b6 c0             	movzx  eax,al
c0027b12:	c1 e2 06             	shl    edx,0x6
c0027b15:	09 c2                	or     edx,eax
c0027b17:	78 03                	js     c0027b1c <__divsf3+0x1b8>
c0027b19:	01 d2                	add    edx,edx
c0027b1b:	4e                   	dec    esi
c0027b1c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027b22:	7f 22                	jg     c0027b46 <__divsf3+0x1e2>
c0027b24:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027b2a:	85 f6                	test   esi,esi
c0027b2c:	7f 23                	jg     c0027b51 <__divsf3+0x1ed>
c0027b2e:	83 fe e9             	cmp    esi,0xffffffe9
c0027b31:	7c 1a                	jl     c0027b4d <__divsf3+0x1e9>
c0027b33:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027b39:	b9 01 00 00 00       	mov    ecx,0x1
c0027b3e:	29 f1                	sub    ecx,esi
c0027b40:	d3 ea                	shr    edx,cl
c0027b42:	31 f6                	xor    esi,esi
c0027b44:	eb 0b                	jmp    c0027b51 <__divsf3+0x1ed>
c0027b46:	be ff 00 00 00       	mov    esi,0xff
c0027b4b:	eb 02                	jmp    c0027b4f <__divsf3+0x1eb>
c0027b4d:	31 f6                	xor    esi,esi
c0027b4f:	31 d2                	xor    edx,edx
c0027b51:	89 d0                	mov    eax,edx
c0027b53:	c1 e8 08             	shr    eax,0x8
c0027b56:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027b59:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027b5f:	09 fe                	or     esi,edi
c0027b61:	c1 e6 17             	shl    esi,0x17
c0027b64:	09 c6                	or     esi,eax
c0027b66:	f6 c2 7f             	test   dl,0x7f
c0027b69:	0f 95 c1             	setne  cl
c0027b6c:	09 c8                	or     eax,ecx
c0027b6e:	83 e0 01             	and    eax,0x1
c0027b71:	c1 ea 07             	shr    edx,0x7
c0027b74:	21 c2                	and    edx,eax
c0027b76:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027b79:	eb 0a                	jmp    c0027b85 <__divsf3+0x221>
c0027b7b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027b80:	eb 03                	jmp    c0027b85 <__divsf3+0x221>
c0027b82:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027b85:	89 d8                	mov    eax,ebx
c0027b87:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027b8a:	5b                   	pop    ebx
c0027b8b:	5e                   	pop    esi
c0027b8c:	5f                   	pop    edi
c0027b8d:	5d                   	pop    ebp
c0027b8e:	c3                   	ret    

c0027b8f <__floatsisf>:
c0027b8f:	55                   	push   ebp
c0027b90:	89 e5                	mov    ebp,esp
c0027b92:	53                   	push   ebx
c0027b93:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027b96:	85 d2                	test   edx,edx
c0027b98:	7e 2b                	jle    c0027bc5 <__floatsisf+0x36>
c0027b9a:	0f bd ca             	bsr    ecx,edx
c0027b9d:	83 f1 1f             	xor    ecx,0x1f
c0027ba0:	d3 e2                	shl    edx,cl
c0027ba2:	89 d0                	mov    eax,edx
c0027ba4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027ba9:	89 c3                	mov    ebx,eax
c0027bab:	c1 eb 08             	shr    ebx,0x8
c0027bae:	80 e2 7f             	and    dl,0x7f
c0027bb1:	0f 95 c2             	setne  dl
c0027bb4:	09 da                	or     edx,ebx
c0027bb6:	83 e2 01             	and    edx,0x1
c0027bb9:	c1 e8 07             	shr    eax,0x7
c0027bbc:	21 c2                	and    edx,eax
c0027bbe:	b8 9e 00 00 00       	mov    eax,0x9e
c0027bc3:	eb 32                	jmp    c0027bf7 <__floatsisf+0x68>
c0027bc5:	b8 00 00 00 00       	mov    eax,0x0
c0027bca:	74 34                	je     c0027c00 <__floatsisf+0x71>
c0027bcc:	f7 da                	neg    edx
c0027bce:	0f bd ca             	bsr    ecx,edx
c0027bd1:	83 f1 1f             	xor    ecx,0x1f
c0027bd4:	d3 e2                	shl    edx,cl
c0027bd6:	89 d0                	mov    eax,edx
c0027bd8:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027bdd:	89 c3                	mov    ebx,eax
c0027bdf:	c1 eb 08             	shr    ebx,0x8
c0027be2:	80 e2 7f             	and    dl,0x7f
c0027be5:	0f 95 c2             	setne  dl
c0027be8:	09 da                	or     edx,ebx
c0027bea:	83 e2 01             	and    edx,0x1
c0027bed:	c1 e8 07             	shr    eax,0x7
c0027bf0:	21 c2                	and    edx,eax
c0027bf2:	b8 9e 01 00 00       	mov    eax,0x19e
c0027bf7:	29 c8                	sub    eax,ecx
c0027bf9:	c1 e0 17             	shl    eax,0x17
c0027bfc:	09 d8                	or     eax,ebx
c0027bfe:	01 d0                	add    eax,edx
c0027c00:	5b                   	pop    ebx
c0027c01:	5d                   	pop    ebp
c0027c02:	c3                   	ret    

c0027c03 <__floatunsisf>:
c0027c03:	55                   	push   ebp
c0027c04:	89 e5                	mov    ebp,esp
c0027c06:	53                   	push   ebx
c0027c07:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027c0a:	31 c0                	xor    eax,eax
c0027c0c:	85 d2                	test   edx,edx
c0027c0e:	74 32                	je     c0027c42 <__floatunsisf+0x3f>
c0027c10:	0f bd ca             	bsr    ecx,edx
c0027c13:	83 f1 1f             	xor    ecx,0x1f
c0027c16:	d3 e2                	shl    edx,cl
c0027c18:	89 d0                	mov    eax,edx
c0027c1a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027c1f:	89 c3                	mov    ebx,eax
c0027c21:	c1 eb 08             	shr    ebx,0x8
c0027c24:	80 e2 7f             	and    dl,0x7f
c0027c27:	0f 95 c2             	setne  dl
c0027c2a:	09 da                	or     edx,ebx
c0027c2c:	83 e2 01             	and    edx,0x1
c0027c2f:	c1 e8 07             	shr    eax,0x7
c0027c32:	21 c2                	and    edx,eax
c0027c34:	b8 9e 00 00 00       	mov    eax,0x9e
c0027c39:	29 c8                	sub    eax,ecx
c0027c3b:	c1 e0 17             	shl    eax,0x17
c0027c3e:	09 d8                	or     eax,ebx
c0027c40:	01 d0                	add    eax,edx
c0027c42:	5b                   	pop    ebx
c0027c43:	5d                   	pop    ebp
c0027c44:	c3                   	ret    

c0027c45 <__fixsfsi>:
c0027c45:	55                   	push   ebp
c0027c46:	89 e5                	mov    ebp,esp
c0027c48:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027c4b:	89 d1                	mov    ecx,edx
c0027c4d:	c1 e1 08             	shl    ecx,0x8
c0027c50:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027c56:	c1 fa 17             	sar    edx,0x17
c0027c59:	78 1c                	js     c0027c77 <__fixsfsi+0x32>
c0027c5b:	83 ea 7f             	sub    edx,0x7f
c0027c5e:	31 c0                	xor    eax,eax
c0027c60:	83 fa 1e             	cmp    edx,0x1e
c0027c63:	77 40                	ja     c0027ca5 <__fixsfsi+0x60>
c0027c65:	89 c8                	mov    eax,ecx
c0027c67:	0d 00 00 00 80       	or     eax,0x80000000
c0027c6c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027c71:	29 d1                	sub    ecx,edx
c0027c73:	d3 e8                	shr    eax,cl
c0027c75:	eb 2e                	jmp    c0027ca5 <__fixsfsi+0x60>
c0027c77:	31 c0                	xor    eax,eax
c0027c79:	81 c2 81 00 00 00    	add    edx,0x81
c0027c7f:	78 24                	js     c0027ca5 <__fixsfsi+0x60>
c0027c81:	83 fa 1e             	cmp    edx,0x1e
c0027c84:	7e 09                	jle    c0027c8f <__fixsfsi+0x4a>
c0027c86:	83 fa 1f             	cmp    edx,0x1f
c0027c89:	75 18                	jne    c0027ca3 <__fixsfsi+0x5e>
c0027c8b:	85 c9                	test   ecx,ecx
c0027c8d:	75 14                	jne    c0027ca3 <__fixsfsi+0x5e>
c0027c8f:	89 c8                	mov    eax,ecx
c0027c91:	0d 00 00 00 80       	or     eax,0x80000000
c0027c96:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027c9b:	29 d1                	sub    ecx,edx
c0027c9d:	d3 e8                	shr    eax,cl
c0027c9f:	f7 d8                	neg    eax
c0027ca1:	eb 02                	jmp    c0027ca5 <__fixsfsi+0x60>
c0027ca3:	31 c0                	xor    eax,eax
c0027ca5:	5d                   	pop    ebp
c0027ca6:	c3                   	ret    

c0027ca7 <__fixunssfsi>:
c0027ca7:	55                   	push   ebp
c0027ca8:	89 e5                	mov    ebp,esp
c0027caa:	53                   	push   ebx
c0027cab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027cae:	89 d3                	mov    ebx,edx
c0027cb0:	c1 fb 17             	sar    ebx,0x17
c0027cb3:	83 eb 7f             	sub    ebx,0x7f
c0027cb6:	31 c0                	xor    eax,eax
c0027cb8:	83 fb 1f             	cmp    ebx,0x1f
c0027cbb:	77 18                	ja     c0027cd5 <__fixunssfsi+0x2e>
c0027cbd:	89 d0                	mov    eax,edx
c0027cbf:	c1 e0 08             	shl    eax,0x8
c0027cc2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027cc7:	0d 00 00 00 80       	or     eax,0x80000000
c0027ccc:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027cd1:	29 d9                	sub    ecx,ebx
c0027cd3:	d3 e8                	shr    eax,cl
c0027cd5:	5b                   	pop    ebx
c0027cd6:	5d                   	pop    ebp
c0027cd7:	c3                   	ret    

c0027cd8 <__cmpsf2>:
c0027cd8:	55                   	push   ebp
c0027cd9:	89 e5                	mov    ebp,esp
c0027cdb:	57                   	push   edi
c0027cdc:	56                   	push   esi
c0027cdd:	53                   	push   ebx
c0027cde:	83 ec 24             	sub    esp,0x24
c0027ce1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027ce4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027ce7:	e8 4f 10 00 00       	call   c0028d3b <__truncdfsf2>
c0027cec:	5a                   	pop    edx
c0027ced:	59                   	pop    ecx
c0027cee:	89 c3                	mov    ebx,eax
c0027cf0:	c1 e8 17             	shr    eax,0x17
c0027cf3:	0f b6 f0             	movzx  esi,al
c0027cf6:	89 d8                	mov    eax,ebx
c0027cf8:	c1 e8 1f             	shr    eax,0x1f
c0027cfb:	31 c6                	xor    esi,eax
c0027cfd:	c1 e3 08             	shl    ebx,0x8
c0027d00:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027d03:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027d06:	e8 30 10 00 00       	call   c0028d3b <__truncdfsf2>
c0027d0b:	83 c4 10             	add    esp,0x10
c0027d0e:	89 c1                	mov    ecx,eax
c0027d10:	c1 e9 17             	shr    ecx,0x17
c0027d13:	0f b6 c9             	movzx  ecx,cl
c0027d16:	89 c7                	mov    edi,eax
c0027d18:	c1 ef 1f             	shr    edi,0x1f
c0027d1b:	89 ca                	mov    edx,ecx
c0027d1d:	31 fa                	xor    edx,edi
c0027d1f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027d22:	c1 e0 08             	shl    eax,0x8
c0027d25:	89 c2                	mov    edx,eax
c0027d27:	89 d8                	mov    eax,ebx
c0027d29:	09 d0                	or     eax,edx
c0027d2b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027d30:	09 f0                	or     eax,esi
c0027d32:	75 08                	jne    c0027d3c <__cmpsf2+0x64>
c0027d34:	31 c0                	xor    eax,eax
c0027d36:	39 f9                	cmp    ecx,edi
c0027d38:	75 0c                	jne    c0027d46 <__cmpsf2+0x6e>
c0027d3a:	eb 29                	jmp    c0027d65 <__cmpsf2+0x8d>
c0027d3c:	b8 01 00 00 00       	mov    eax,0x1
c0027d41:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027d44:	7f 1f                	jg     c0027d65 <__cmpsf2+0x8d>
c0027d46:	83 c8 ff             	or     eax,0xffffffff
c0027d49:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027d4c:	7c 17                	jl     c0027d65 <__cmpsf2+0x8d>
c0027d4e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027d54:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027d5a:	b8 01 00 00 00       	mov    eax,0x1
c0027d5f:	39 d3                	cmp    ebx,edx
c0027d61:	77 02                	ja     c0027d65 <__cmpsf2+0x8d>
c0027d63:	19 c0                	sbb    eax,eax
c0027d65:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027d68:	5b                   	pop    ebx
c0027d69:	5e                   	pop    esi
c0027d6a:	5f                   	pop    edi
c0027d6b:	5d                   	pop    ebp
c0027d6c:	c3                   	ret    

c0027d6d <__eqsf2>:
c0027d6d:	55                   	push   ebp
c0027d6e:	89 e5                	mov    ebp,esp
c0027d70:	83 ec 24             	sub    esp,0x24
c0027d73:	6a 01                	push   0x1
c0027d75:	83 ec 0c             	sub    esp,0xc
c0027d78:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d7b:	e8 df 10 00 00       	call   c0028e5f <__extendsfdf2>
c0027d80:	83 c4 10             	add    esp,0x10
c0027d83:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d86:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d89:	52                   	push   edx
c0027d8a:	50                   	push   eax
c0027d8b:	50                   	push   eax
c0027d8c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027d8f:	e8 cb 10 00 00       	call   c0028e5f <__extendsfdf2>
c0027d94:	59                   	pop    ecx
c0027d95:	59                   	pop    ecx
c0027d96:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d99:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d9c:	52                   	push   edx
c0027d9d:	50                   	push   eax
c0027d9e:	e8 35 ff ff ff       	call   c0027cd8 <__cmpsf2>
c0027da3:	83 c4 20             	add    esp,0x20
c0027da6:	c9                   	leave  
c0027da7:	c3                   	ret    

c0027da8 <__nesf2>:
c0027da8:	eb c3                	jmp    c0027d6d <__eqsf2>

c0027daa <__gtsf2>:
c0027daa:	55                   	push   ebp
c0027dab:	89 e5                	mov    ebp,esp
c0027dad:	83 ec 24             	sub    esp,0x24
c0027db0:	6a ff                	push   0xffffffff
c0027db2:	83 ec 0c             	sub    esp,0xc
c0027db5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027db8:	e8 a2 10 00 00       	call   c0028e5f <__extendsfdf2>
c0027dbd:	83 c4 10             	add    esp,0x10
c0027dc0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027dc3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027dc6:	52                   	push   edx
c0027dc7:	50                   	push   eax
c0027dc8:	50                   	push   eax
c0027dc9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027dcc:	e8 8e 10 00 00       	call   c0028e5f <__extendsfdf2>
c0027dd1:	59                   	pop    ecx
c0027dd2:	59                   	pop    ecx
c0027dd3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027dd6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027dd9:	52                   	push   edx
c0027dda:	50                   	push   eax
c0027ddb:	e8 f8 fe ff ff       	call   c0027cd8 <__cmpsf2>
c0027de0:	83 c4 20             	add    esp,0x20
c0027de3:	c9                   	leave  
c0027de4:	c3                   	ret    

c0027de5 <__gesf2>:
c0027de5:	eb c3                	jmp    c0027daa <__gtsf2>

c0027de7 <__ltsf2>:
c0027de7:	eb 84                	jmp    c0027d6d <__eqsf2>

c0027de9 <__lesf2>:
c0027de9:	eb 82                	jmp    c0027d6d <__eqsf2>

c0027deb <__adddf3>:
c0027deb:	55                   	push   ebp
c0027dec:	89 e5                	mov    ebp,esp
c0027dee:	57                   	push   edi
c0027def:	56                   	push   esi
c0027df0:	53                   	push   ebx
c0027df1:	83 ec 24             	sub    esp,0x24
c0027df4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027df7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027dfa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027dfd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027e00:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027e03:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027e06:	89 c8                	mov    eax,ecx
c0027e08:	89 ce                	mov    esi,ecx
c0027e0a:	c1 fe 14             	sar    esi,0x14
c0027e0d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027e10:	89 fb                	mov    ebx,edi
c0027e12:	89 fa                	mov    edx,edi
c0027e14:	c1 e2 0b             	shl    edx,0xb
c0027e17:	c1 e0 0b             	shl    eax,0xb
c0027e1a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027e1f:	c1 eb 15             	shr    ebx,0x15
c0027e22:	09 d8                	or     eax,ebx
c0027e24:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027e27:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027e2a:	c1 fe 14             	sar    esi,0x14
c0027e2d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027e30:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027e33:	89 f3                	mov    ebx,esi
c0027e35:	c1 e3 0b             	shl    ebx,0xb
c0027e38:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027e3b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027e3e:	c1 e3 0b             	shl    ebx,0xb
c0027e41:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027e47:	c1 ee 15             	shr    esi,0x15
c0027e4a:	09 f3                	or     ebx,esi
c0027e4c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027e4f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027e52:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027e55:	0f 88 5f 02 00 00    	js     c00280ba <__adddf3+0x2cf>
c0027e5b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027e5e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027e61:	85 db                	test   ebx,ebx
c0027e63:	0f 8e c7 00 00 00    	jle    c0027f30 <__adddf3+0x145>
c0027e69:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027e70:	75 1a                	jne    c0027e8c <__adddf3+0xa1>
c0027e72:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027e75:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027e78:	0f 84 b2 05 00 00    	je     c0028430 <__adddf3+0x645>
c0027e7e:	4b                   	dec    ebx
c0027e7f:	75 23                	jne    c0027ea4 <__adddf3+0xb9>
c0027e81:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027e84:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027e87:	e9 99 00 00 00       	jmp    c0027f25 <__adddf3+0x13a>
c0027e8c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027e8f:	f7 d6                	not    esi
c0027e91:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027e97:	0f 84 93 05 00 00    	je     c0028430 <__adddf3+0x645>
c0027e9d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027ea4:	83 fb 1f             	cmp    ebx,0x1f
c0027ea7:	7e 42                	jle    c0027eeb <__adddf3+0x100>
c0027ea9:	83 fb 3f             	cmp    ebx,0x3f
c0027eac:	0f 8f 7e 05 00 00    	jg     c0028430 <__adddf3+0x645>
c0027eb2:	83 e3 1f             	and    ebx,0x1f
c0027eb5:	89 d9                	mov    ecx,ebx
c0027eb7:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027eba:	d3 ef                	shr    edi,cl
c0027ebc:	31 db                	xor    ebx,ebx
c0027ebe:	85 c9                	test   ecx,ecx
c0027ec0:	74 15                	je     c0027ed7 <__adddf3+0xec>
c0027ec2:	be 20 00 00 00       	mov    esi,0x20
c0027ec7:	29 ce                	sub    esi,ecx
c0027ec9:	89 f1                	mov    ecx,esi
c0027ecb:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027ece:	d3 e6                	shl    esi,cl
c0027ed0:	31 db                	xor    ebx,ebx
c0027ed2:	85 f6                	test   esi,esi
c0027ed4:	0f 95 c3             	setne  bl
c0027ed7:	31 c9                	xor    ecx,ecx
c0027ed9:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027edd:	0f 95 c1             	setne  cl
c0027ee0:	09 cf                	or     edi,ecx
c0027ee2:	09 fb                	or     ebx,edi
c0027ee4:	01 da                	add    edx,ebx
c0027ee6:	83 d0 00             	adc    eax,0x0
c0027ee9:	eb 3a                	jmp    c0027f25 <__adddf3+0x13a>
c0027eeb:	bf 20 00 00 00       	mov    edi,0x20
c0027ef0:	29 df                	sub    edi,ebx
c0027ef2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027ef5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027ef8:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027efb:	d3 e6                	shl    esi,cl
c0027efd:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027f00:	88 d9                	mov    cl,bl
c0027f02:	d3 ef                	shr    edi,cl
c0027f04:	09 fe                	or     esi,edi
c0027f06:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027f09:	88 d9                	mov    cl,bl
c0027f0b:	d3 ef                	shr    edi,cl
c0027f0d:	89 fb                	mov    ebx,edi
c0027f0f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027f12:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027f15:	d3 e7                	shl    edi,cl
c0027f17:	85 ff                	test   edi,edi
c0027f19:	0f 95 c1             	setne  cl
c0027f1c:	0f b6 c9             	movzx  ecx,cl
c0027f1f:	09 ce                	or     esi,ecx
c0027f21:	01 f2                	add    edx,esi
c0027f23:	11 d8                	adc    eax,ebx
c0027f25:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f28:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027f2b:	e9 52 01 00 00       	jmp    c0028082 <__adddf3+0x297>
c0027f30:	0f 84 d5 00 00 00    	je     c002800b <__adddf3+0x220>
c0027f36:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027f39:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027f3c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027f3f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027f42:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027f49:	75 20                	jne    c0027f6b <__adddf3+0x180>
c0027f4b:	89 d6                	mov    esi,edx
c0027f4d:	09 c6                	or     esi,eax
c0027f4f:	0f 84 db 04 00 00    	je     c0028430 <__adddf3+0x645>
c0027f55:	4b                   	dec    ebx
c0027f56:	75 29                	jne    c0027f81 <__adddf3+0x196>
c0027f58:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f5b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027f5e:	01 d1                	add    ecx,edx
c0027f60:	11 c6                	adc    esi,eax
c0027f62:	89 f0                	mov    eax,esi
c0027f64:	89 ca                	mov    edx,ecx
c0027f66:	e9 17 01 00 00       	jmp    c0028082 <__adddf3+0x297>
c0027f6b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027f6e:	f7 d6                	not    esi
c0027f70:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027f76:	0f 84 b4 04 00 00    	je     c0028430 <__adddf3+0x645>
c0027f7c:	0d 00 00 00 80       	or     eax,0x80000000
c0027f81:	83 fb 1f             	cmp    ebx,0x1f
c0027f84:	7e 48                	jle    c0027fce <__adddf3+0x1e3>
c0027f86:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027f89:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027f8c:	83 fb 3f             	cmp    ebx,0x3f
c0027f8f:	0f 8f 9b 04 00 00    	jg     c0028430 <__adddf3+0x645>
c0027f95:	83 e3 1f             	and    ebx,0x1f
c0027f98:	89 d9                	mov    ecx,ebx
c0027f9a:	89 c7                	mov    edi,eax
c0027f9c:	d3 ef                	shr    edi,cl
c0027f9e:	31 db                	xor    ebx,ebx
c0027fa0:	85 c9                	test   ecx,ecx
c0027fa2:	74 12                	je     c0027fb6 <__adddf3+0x1cb>
c0027fa4:	be 20 00 00 00       	mov    esi,0x20
c0027fa9:	29 ce                	sub    esi,ecx
c0027fab:	89 f1                	mov    ecx,esi
c0027fad:	d3 e0                	shl    eax,cl
c0027faf:	31 db                	xor    ebx,ebx
c0027fb1:	85 c0                	test   eax,eax
c0027fb3:	0f 95 c3             	setne  bl
c0027fb6:	31 c0                	xor    eax,eax
c0027fb8:	85 d2                	test   edx,edx
c0027fba:	0f 95 c0             	setne  al
c0027fbd:	09 c7                	or     edi,eax
c0027fbf:	09 fb                	or     ebx,edi
c0027fc1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027fc4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027fc7:	01 da                	add    edx,ebx
c0027fc9:	83 d6 00             	adc    esi,0x0
c0027fcc:	eb 39                	jmp    c0028007 <__adddf3+0x21c>
c0027fce:	be 20 00 00 00       	mov    esi,0x20
c0027fd3:	29 de                	sub    esi,ebx
c0027fd5:	89 c7                	mov    edi,eax
c0027fd7:	89 f1                	mov    ecx,esi
c0027fd9:	d3 e7                	shl    edi,cl
c0027fdb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027fde:	89 d7                	mov    edi,edx
c0027fe0:	88 d9                	mov    cl,bl
c0027fe2:	d3 ef                	shr    edi,cl
c0027fe4:	89 f9                	mov    ecx,edi
c0027fe6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027fe9:	09 cf                	or     edi,ecx
c0027feb:	88 d9                	mov    cl,bl
c0027fed:	d3 e8                	shr    eax,cl
c0027fef:	89 f1                	mov    ecx,esi
c0027ff1:	d3 e2                	shl    edx,cl
c0027ff3:	85 d2                	test   edx,edx
c0027ff5:	0f 95 c2             	setne  dl
c0027ff8:	0f b6 d2             	movzx  edx,dl
c0027ffb:	09 d7                	or     edi,edx
c0027ffd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028000:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028003:	01 fa                	add    edx,edi
c0028005:	11 c6                	adc    esi,eax
c0028007:	89 f0                	mov    eax,esi
c0028009:	eb 77                	jmp    c0028082 <__adddf3+0x297>
c002800b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002800e:	46                   	inc    esi
c002800f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0028012:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028018:	75 41                	jne    c002805b <__adddf3+0x270>
c002801a:	89 d3                	mov    ebx,edx
c002801c:	09 c3                	or     ebx,eax
c002801e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0028025:	75 27                	jne    c002804e <__adddf3+0x263>
c0028027:	85 db                	test   ebx,ebx
c0028029:	0f 84 fb 03 00 00    	je     c002842a <__adddf3+0x63f>
c002802f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028032:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0028035:	0f 84 f5 03 00 00    	je     c0028430 <__adddf3+0x645>
c002803b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002803e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028041:	85 c0                	test   eax,eax
c0028043:	0f 89 91 03 00 00    	jns    c00283da <__adddf3+0x5ef>
c0028049:	e9 85 03 00 00       	jmp    c00283d3 <__adddf3+0x5e8>
c002804e:	85 db                	test   ebx,ebx
c0028050:	0f 85 da 03 00 00    	jne    c0028430 <__adddf3+0x645>
c0028056:	e9 cf 03 00 00       	jmp    c002842a <__adddf3+0x63f>
c002805b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002805e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028061:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028064:	f7 d1                	not    ecx
c0028066:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002806c:	0f 84 70 03 00 00    	je     c00283e2 <__adddf3+0x5f7>
c0028072:	d1 ea                	shr    edx,1
c0028074:	89 c1                	mov    ecx,eax
c0028076:	c1 e1 1f             	shl    ecx,0x1f
c0028079:	09 ca                	or     edx,ecx
c002807b:	d1 e8                	shr    eax,1
c002807d:	e9 6f 03 00 00       	jmp    c00283f1 <__adddf3+0x606>
c0028082:	85 c0                	test   eax,eax
c0028084:	0f 89 67 03 00 00    	jns    c00283f1 <__adddf3+0x606>
c002808a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002808d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028090:	f7 d1                	not    ecx
c0028092:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0028098:	0f 84 44 03 00 00    	je     c00283e2 <__adddf3+0x5f7>
c002809e:	89 d1                	mov    ecx,edx
c00280a0:	d1 e9                	shr    ecx,1
c00280a2:	83 e2 01             	and    edx,0x1
c00280a5:	09 ca                	or     edx,ecx
c00280a7:	89 c1                	mov    ecx,eax
c00280a9:	c1 e1 1f             	shl    ecx,0x1f
c00280ac:	09 ca                	or     edx,ecx
c00280ae:	d1 e8                	shr    eax,1
c00280b0:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00280b5:	e9 37 03 00 00       	jmp    c00283f1 <__adddf3+0x606>
c00280ba:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00280bd:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00280c3:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00280c6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00280c9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00280cf:	29 de                	sub    esi,ebx
c00280d1:	85 f6                	test   esi,esi
c00280d3:	0f 8e bd 00 00 00    	jle    c0028196 <__adddf3+0x3ab>
c00280d9:	85 db                	test   ebx,ebx
c00280db:	75 17                	jne    c00280f4 <__adddf3+0x309>
c00280dd:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00280e0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00280e3:	0f 84 47 03 00 00    	je     c0028430 <__adddf3+0x645>
c00280e9:	4e                   	dec    esi
c00280ea:	75 20                	jne    c002810c <__adddf3+0x321>
c00280ec:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00280ef:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00280f2:	eb 5b                	jmp    c002814f <__adddf3+0x364>
c00280f4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00280f7:	f7 d3                	not    ebx
c00280f9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00280ff:	0f 84 2b 03 00 00    	je     c0028430 <__adddf3+0x645>
c0028105:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002810c:	83 fe 1f             	cmp    esi,0x1f
c002810f:	7e 49                	jle    c002815a <__adddf3+0x36f>
c0028111:	83 fe 3f             	cmp    esi,0x3f
c0028114:	0f 8f 16 03 00 00    	jg     c0028430 <__adddf3+0x645>
c002811a:	83 e6 1f             	and    esi,0x1f
c002811d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028120:	89 f1                	mov    ecx,esi
c0028122:	d3 ef                	shr    edi,cl
c0028124:	31 db                	xor    ebx,ebx
c0028126:	85 f6                	test   esi,esi
c0028128:	74 13                	je     c002813d <__adddf3+0x352>
c002812a:	b9 20 00 00 00       	mov    ecx,0x20
c002812f:	29 f1                	sub    ecx,esi
c0028131:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028134:	d3 e6                	shl    esi,cl
c0028136:	31 db                	xor    ebx,ebx
c0028138:	85 f6                	test   esi,esi
c002813a:	0f 95 c3             	setne  bl
c002813d:	31 c9                	xor    ecx,ecx
c002813f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0028143:	0f 95 c1             	setne  cl
c0028146:	09 cf                	or     edi,ecx
c0028148:	09 fb                	or     ebx,edi
c002814a:	29 da                	sub    edx,ebx
c002814c:	83 d8 00             	sbb    eax,0x0
c002814f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028152:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028155:	e9 aa 01 00 00       	jmp    c0028304 <__adddf3+0x519>
c002815a:	bf 20 00 00 00       	mov    edi,0x20
c002815f:	29 f7                	sub    edi,esi
c0028161:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028164:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028167:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002816a:	d3 e3                	shl    ebx,cl
c002816c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002816f:	89 f1                	mov    ecx,esi
c0028171:	d3 ef                	shr    edi,cl
c0028173:	09 fb                	or     ebx,edi
c0028175:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028178:	89 f1                	mov    ecx,esi
c002817a:	d3 ef                	shr    edi,cl
c002817c:	89 fe                	mov    esi,edi
c002817e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028181:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0028184:	d3 e7                	shl    edi,cl
c0028186:	85 ff                	test   edi,edi
c0028188:	0f 95 c1             	setne  cl
c002818b:	0f b6 c9             	movzx  ecx,cl
c002818e:	09 cb                	or     ebx,ecx
c0028190:	29 da                	sub    edx,ebx
c0028192:	19 f0                	sbb    eax,esi
c0028194:	eb b9                	jmp    c002814f <__adddf3+0x364>
c0028196:	0f 84 cd 00 00 00    	je     c0028269 <__adddf3+0x47e>
c002819c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002819f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00281a2:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00281a5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00281a9:	75 1b                	jne    c00281c6 <__adddf3+0x3db>
c00281ab:	89 d6                	mov    esi,edx
c00281ad:	09 c6                	or     esi,eax
c00281af:	0f 84 7b 02 00 00    	je     c0028430 <__adddf3+0x645>
c00281b5:	4b                   	dec    ebx
c00281b6:	75 24                	jne    c00281dc <__adddf3+0x3f1>
c00281b8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00281bb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00281be:	29 d1                	sub    ecx,edx
c00281c0:	19 c6                	sbb    esi,eax
c00281c2:	89 ca                	mov    edx,ecx
c00281c4:	eb 61                	jmp    c0028227 <__adddf3+0x43c>
c00281c6:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00281c9:	f7 d6                	not    esi
c00281cb:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00281d1:	0f 84 59 02 00 00    	je     c0028430 <__adddf3+0x645>
c00281d7:	0d 00 00 00 80       	or     eax,0x80000000
c00281dc:	83 fb 1f             	cmp    ebx,0x1f
c00281df:	7e 4d                	jle    c002822e <__adddf3+0x443>
c00281e1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00281e4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00281e7:	83 fb 3f             	cmp    ebx,0x3f
c00281ea:	0f 8f 40 02 00 00    	jg     c0028430 <__adddf3+0x645>
c00281f0:	83 e3 1f             	and    ebx,0x1f
c00281f3:	89 d9                	mov    ecx,ebx
c00281f5:	89 c7                	mov    edi,eax
c00281f7:	d3 ef                	shr    edi,cl
c00281f9:	31 db                	xor    ebx,ebx
c00281fb:	85 c9                	test   ecx,ecx
c00281fd:	74 12                	je     c0028211 <__adddf3+0x426>
c00281ff:	be 20 00 00 00       	mov    esi,0x20
c0028204:	29 ce                	sub    esi,ecx
c0028206:	89 f1                	mov    ecx,esi
c0028208:	d3 e0                	shl    eax,cl
c002820a:	31 db                	xor    ebx,ebx
c002820c:	85 c0                	test   eax,eax
c002820e:	0f 95 c3             	setne  bl
c0028211:	31 c0                	xor    eax,eax
c0028213:	85 d2                	test   edx,edx
c0028215:	0f 95 c0             	setne  al
c0028218:	09 c7                	or     edi,eax
c002821a:	09 fb                	or     ebx,edi
c002821c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002821f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028222:	29 da                	sub    edx,ebx
c0028224:	83 de 00             	sbb    esi,0x0
c0028227:	89 f0                	mov    eax,esi
c0028229:	e9 d6 00 00 00       	jmp    c0028304 <__adddf3+0x519>
c002822e:	be 20 00 00 00       	mov    esi,0x20
c0028233:	29 de                	sub    esi,ebx
c0028235:	89 c7                	mov    edi,eax
c0028237:	89 f1                	mov    ecx,esi
c0028239:	d3 e7                	shl    edi,cl
c002823b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002823e:	89 d7                	mov    edi,edx
c0028240:	88 d9                	mov    cl,bl
c0028242:	d3 ef                	shr    edi,cl
c0028244:	89 f9                	mov    ecx,edi
c0028246:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028249:	09 cf                	or     edi,ecx
c002824b:	88 d9                	mov    cl,bl
c002824d:	d3 e8                	shr    eax,cl
c002824f:	89 f1                	mov    ecx,esi
c0028251:	d3 e2                	shl    edx,cl
c0028253:	85 d2                	test   edx,edx
c0028255:	0f 95 c2             	setne  dl
c0028258:	0f b6 d2             	movzx  edx,dl
c002825b:	09 d7                	or     edi,edx
c002825d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028260:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028263:	29 fa                	sub    edx,edi
c0028265:	19 c6                	sbb    esi,eax
c0028267:	eb be                	jmp    c0028227 <__adddf3+0x43c>
c0028269:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002826c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002826f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0028275:	75 6a                	jne    c00282e1 <__adddf3+0x4f6>
c0028277:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002827b:	75 58                	jne    c00282d5 <__adddf3+0x4ea>
c002827d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028280:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028283:	89 d6                	mov    esi,edx
c0028285:	09 c6                	or     esi,eax
c0028287:	75 17                	jne    c00282a0 <__adddf3+0x4b5>
c0028289:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002828c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002828f:	85 db                	test   ebx,ebx
c0028291:	0f 85 99 01 00 00    	jne    c0028430 <__adddf3+0x645>
c0028297:	31 ff                	xor    edi,edi
c0028299:	31 c9                	xor    ecx,ecx
c002829b:	e9 90 01 00 00       	jmp    c0028430 <__adddf3+0x645>
c00282a0:	85 db                	test   ebx,ebx
c00282a2:	0f 84 88 01 00 00    	je     c0028430 <__adddf3+0x645>
c00282a8:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00282ab:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00282ae:	85 c0                	test   eax,eax
c00282b0:	79 10                	jns    c00282c2 <__adddf3+0x4d7>
c00282b2:	31 c9                	xor    ecx,ecx
c00282b4:	f7 da                	neg    edx
c00282b6:	0f 95 c1             	setne  cl
c00282b9:	01 c8                	add    eax,ecx
c00282bb:	f7 d8                	neg    eax
c00282bd:	e9 2f 01 00 00       	jmp    c00283f1 <__adddf3+0x606>
c00282c2:	31 ff                	xor    edi,edi
c00282c4:	31 c9                	xor    ecx,ecx
c00282c6:	89 c3                	mov    ebx,eax
c00282c8:	09 d3                	or     ebx,edx
c00282ca:	0f 84 60 01 00 00    	je     c0028430 <__adddf3+0x645>
c00282d0:	e9 05 01 00 00       	jmp    c00283da <__adddf3+0x5ef>
c00282d5:	31 ff                	xor    edi,edi
c00282d7:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00282dc:	e9 4f 01 00 00       	jmp    c0028430 <__adddf3+0x645>
c00282e1:	89 c1                	mov    ecx,eax
c00282e3:	89 d0                	mov    eax,edx
c00282e5:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00282e8:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00282eb:	89 ca                	mov    edx,ecx
c00282ed:	85 c9                	test   ecx,ecx
c00282ef:	79 2c                	jns    c002831d <__adddf3+0x532>
c00282f1:	31 c9                	xor    ecx,ecx
c00282f3:	f7 d8                	neg    eax
c00282f5:	0f 95 c1             	setne  cl
c00282f8:	01 ca                	add    edx,ecx
c00282fa:	f7 da                	neg    edx
c00282fc:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00282ff:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0028302:	eb 19                	jmp    c002831d <__adddf3+0x532>
c0028304:	85 c0                	test   eax,eax
c0028306:	0f 89 e5 00 00 00    	jns    c00283f1 <__adddf3+0x606>
c002830c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028311:	89 c1                	mov    ecx,eax
c0028313:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028316:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0028319:	89 d0                	mov    eax,edx
c002831b:	89 ca                	mov    edx,ecx
c002831d:	85 d2                	test   edx,edx
c002831f:	74 59                	je     c002837a <__adddf3+0x58f>
c0028321:	0f bd da             	bsr    ebx,edx
c0028324:	83 f3 1f             	xor    ebx,0x1f
c0028327:	88 d9                	mov    cl,bl
c0028329:	d3 e2                	shl    edx,cl
c002832b:	bf 20 00 00 00       	mov    edi,0x20
c0028330:	89 f9                	mov    ecx,edi
c0028332:	29 d9                	sub    ecx,ebx
c0028334:	89 c6                	mov    esi,eax
c0028336:	d3 ee                	shr    esi,cl
c0028338:	09 d6                	or     esi,edx
c002833a:	88 d9                	mov    cl,bl
c002833c:	d3 e0                	shl    eax,cl
c002833e:	89 c2                	mov    edx,eax
c0028340:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028343:	25 ff 07 00 00       	and    eax,0x7ff
c0028348:	39 d8                	cmp    eax,ebx
c002834a:	7f 22                	jg     c002836e <__adddf3+0x583>
c002834c:	29 c3                	sub    ebx,eax
c002834e:	43                   	inc    ebx
c002834f:	88 d9                	mov    cl,bl
c0028351:	d3 ea                	shr    edx,cl
c0028353:	29 df                	sub    edi,ebx
c0028355:	89 f9                	mov    ecx,edi
c0028357:	89 f0                	mov    eax,esi
c0028359:	d3 e0                	shl    eax,cl
c002835b:	09 c2                	or     edx,eax
c002835d:	89 f0                	mov    eax,esi
c002835f:	88 d9                	mov    cl,bl
c0028361:	d3 e8                	shr    eax,cl
c0028363:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028366:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002836c:	eb 6f                	jmp    c00283dd <__adddf3+0x5f2>
c002836e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028371:	29 d8                	sub    eax,ebx
c0028373:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028376:	89 f0                	mov    eax,esi
c0028378:	eb 59                	jmp    c00283d3 <__adddf3+0x5e8>
c002837a:	85 c0                	test   eax,eax
c002837c:	74 6a                	je     c00283e8 <__adddf3+0x5fd>
c002837e:	0f bd c8             	bsr    ecx,eax
c0028381:	83 f1 1f             	xor    ecx,0x1f
c0028384:	d3 e0                	shl    eax,cl
c0028386:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028389:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002838f:	83 c1 20             	add    ecx,0x20
c0028392:	39 cb                	cmp    ebx,ecx
c0028394:	7f 35                	jg     c00283cb <__adddf3+0x5e0>
c0028396:	29 d9                	sub    ecx,ebx
c0028398:	8d 71 01             	lea    esi,[ecx+0x1]
c002839b:	83 fe 1f             	cmp    esi,0x1f
c002839e:	7e 09                	jle    c00283a9 <__adddf3+0x5be>
c00283a0:	83 e9 1f             	sub    ecx,0x1f
c00283a3:	d3 e8                	shr    eax,cl
c00283a5:	89 c3                	mov    ebx,eax
c00283a7:	eb 11                	jmp    c00283ba <__adddf3+0x5cf>
c00283a9:	b9 20 00 00 00       	mov    ecx,0x20
c00283ae:	29 f1                	sub    ecx,esi
c00283b0:	89 c3                	mov    ebx,eax
c00283b2:	d3 e3                	shl    ebx,cl
c00283b4:	89 f1                	mov    ecx,esi
c00283b6:	d3 e8                	shr    eax,cl
c00283b8:	89 c2                	mov    edx,eax
c00283ba:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00283bd:	25 00 f8 ff ff       	and    eax,0xfffff800
c00283c2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00283c5:	89 d0                	mov    eax,edx
c00283c7:	89 da                	mov    edx,ebx
c00283c9:	eb 26                	jmp    c00283f1 <__adddf3+0x606>
c00283cb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00283ce:	29 cf                	sub    edi,ecx
c00283d0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00283d3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00283d8:	eb 17                	jmp    c00283f1 <__adddf3+0x606>
c00283da:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00283dd:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00283e0:	eb 0f                	jmp    c00283f1 <__adddf3+0x606>
c00283e2:	31 d2                	xor    edx,edx
c00283e4:	31 c0                	xor    eax,eax
c00283e6:	eb 09                	jmp    c00283f1 <__adddf3+0x606>
c00283e8:	89 c2                	mov    edx,eax
c00283ea:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00283f1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00283f4:	c1 e1 14             	shl    ecx,0x14
c00283f7:	89 c3                	mov    ebx,eax
c00283f9:	c1 eb 0b             	shr    ebx,0xb
c00283fc:	09 d9                	or     ecx,ebx
c00283fe:	89 d3                	mov    ebx,edx
c0028400:	c1 eb 0b             	shr    ebx,0xb
c0028403:	c1 e0 15             	shl    eax,0x15
c0028406:	09 d8                	or     eax,ebx
c0028408:	89 c7                	mov    edi,eax
c002840a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0028410:	0f 95 c0             	setne  al
c0028413:	89 c6                	mov    esi,eax
c0028415:	09 f3                	or     ebx,esi
c0028417:	83 e3 01             	and    ebx,0x1
c002841a:	c1 ea 0a             	shr    edx,0xa
c002841d:	21 da                	and    edx,ebx
c002841f:	89 f8                	mov    eax,edi
c0028421:	01 d0                	add    eax,edx
c0028423:	83 d1 00             	adc    ecx,0x0
c0028426:	89 c7                	mov    edi,eax
c0028428:	eb 06                	jmp    c0028430 <__adddf3+0x645>
c002842a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002842d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028430:	89 f8                	mov    eax,edi
c0028432:	89 ca                	mov    edx,ecx
c0028434:	83 c4 24             	add    esp,0x24
c0028437:	5b                   	pop    ebx
c0028438:	5e                   	pop    esi
c0028439:	5f                   	pop    edi
c002843a:	5d                   	pop    ebp
c002843b:	c3                   	ret    

c002843c <__subdf3>:
c002843c:	55                   	push   ebp
c002843d:	89 e5                	mov    ebp,esp
c002843f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0028442:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028445:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002844b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002844e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0028451:	5d                   	pop    ebp
c0028452:	e9 94 f9 ff ff       	jmp    c0027deb <__adddf3>

c0028457 <__negdf2>:
c0028457:	55                   	push   ebp
c0028458:	89 e5                	mov    ebp,esp
c002845a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002845d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028460:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028466:	5d                   	pop    ebp
c0028467:	c3                   	ret    

c0028468 <__muldf3>:
c0028468:	55                   	push   ebp
c0028469:	89 e5                	mov    ebp,esp
c002846b:	57                   	push   edi
c002846c:	56                   	push   esi
c002846d:	53                   	push   ebx
c002846e:	83 ec 24             	sub    esp,0x24
c0028471:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028474:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0028477:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002847a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002847d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0028480:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0028483:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028486:	89 c8                	mov    eax,ecx
c0028488:	c1 f8 14             	sar    eax,0x14
c002848b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002848e:	89 f8                	mov    eax,edi
c0028490:	89 fb                	mov    ebx,edi
c0028492:	c1 e3 0b             	shl    ebx,0xb
c0028495:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0028498:	c1 e1 0b             	shl    ecx,0xb
c002849b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00284a1:	c1 e8 15             	shr    eax,0x15
c00284a4:	09 c1                	or     ecx,eax
c00284a6:	89 d6                	mov    esi,edx
c00284a8:	89 d0                	mov    eax,edx
c00284aa:	c1 f8 14             	sar    eax,0x14
c00284ad:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00284b0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00284b3:	89 c3                	mov    ebx,eax
c00284b5:	c1 e3 0b             	shl    ebx,0xb
c00284b8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00284bb:	c1 e6 0b             	shl    esi,0xb
c00284be:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00284c4:	c1 e8 15             	shr    eax,0x15
c00284c7:	09 c6                	or     esi,eax
c00284c9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00284cc:	25 ff 07 00 00       	and    eax,0x7ff
c00284d1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00284d4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00284d7:	25 ff 07 00 00       	and    eax,0x7ff
c00284dc:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00284df:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00284e2:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00284e5:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00284ec:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00284ef:	40                   	inc    eax
c00284f0:	a9 fe 07 00 00       	test   eax,0x7fe
c00284f5:	0f 85 8d 00 00 00    	jne    c0028588 <__muldf3+0x120>
c00284fb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00284fe:	09 c8                	or     eax,ecx
c0028500:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0028504:	74 44                	je     c002854a <__muldf3+0xe2>
c0028506:	85 c0                	test   eax,eax
c0028508:	0f 85 31 02 00 00    	jne    c002873f <__muldf3+0x2d7>
c002850e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028511:	40                   	inc    eax
c0028512:	a9 fe 07 00 00       	test   eax,0x7fe
c0028517:	75 13                	jne    c002852c <__muldf3+0xc4>
c0028519:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002851c:	09 f1                	or     ecx,esi
c002851e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028522:	74 22                	je     c0028546 <__muldf3+0xde>
c0028524:	85 c9                	test   ecx,ecx
c0028526:	0f 85 0d 02 00 00    	jne    c0028739 <__muldf3+0x2d1>
c002852c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0028530:	0f 89 09 02 00 00    	jns    c002873f <__muldf3+0x2d7>
c0028536:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028539:	05 00 00 00 80       	add    eax,0x80000000
c002853e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028541:	e9 f9 01 00 00       	jmp    c002873f <__muldf3+0x2d7>
c0028546:	85 c9                	test   ecx,ecx
c0028548:	eb 2e                	jmp    c0028578 <__muldf3+0x110>
c002854a:	85 c0                	test   eax,eax
c002854c:	74 20                	je     c002856e <__muldf3+0x106>
c002854e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0028551:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028554:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028557:	c1 ef 1f             	shr    edi,0x1f
c002855a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c002855d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0028560:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028563:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028566:	09 f9                	or     ecx,edi
c0028568:	78 1e                	js     c0028588 <__muldf3+0x120>
c002856a:	89 c3                	mov    ebx,eax
c002856c:	eb e0                	jmp    c002854e <__muldf3+0xe6>
c002856e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028571:	f7 d0                	not    eax
c0028573:	a9 ff 07 00 00       	test   eax,0x7ff
c0028578:	75 b2                	jne    c002852c <__muldf3+0xc4>
c002857a:	31 ff                	xor    edi,edi
c002857c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0028583:	e9 b7 01 00 00       	jmp    c002873f <__muldf3+0x2d7>
c0028588:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002858b:	40                   	inc    eax
c002858c:	a9 fe 07 00 00       	test   eax,0x7fe
c0028591:	75 57                	jne    c00285ea <__muldf3+0x182>
c0028593:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0028596:	09 f0                	or     eax,esi
c0028598:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002859c:	74 23                	je     c00285c1 <__muldf3+0x159>
c002859e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00285a2:	0f 89 91 01 00 00    	jns    c0028739 <__muldf3+0x2d1>
c00285a8:	85 c0                	test   eax,eax
c00285aa:	0f 85 89 01 00 00    	jne    c0028739 <__muldf3+0x2d1>
c00285b0:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00285b3:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00285b9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00285bc:	e9 7e 01 00 00       	jmp    c002873f <__muldf3+0x2d7>
c00285c1:	85 c0                	test   eax,eax
c00285c3:	75 0c                	jne    c00285d1 <__muldf3+0x169>
c00285c5:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00285c9:	0f 89 6a 01 00 00    	jns    c0028739 <__muldf3+0x2d1>
c00285cf:	eb df                	jmp    c00285b0 <__muldf3+0x148>
c00285d1:	01 f6                	add    esi,esi
c00285d3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00285d6:	c1 ea 1f             	shr    edx,0x1f
c00285d9:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00285dc:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00285df:	8d 43 ff             	lea    eax,[ebx-0x1]
c00285e2:	09 d6                	or     esi,edx
c00285e4:	78 04                	js     c00285ea <__muldf3+0x182>
c00285e6:	89 c3                	mov    ebx,eax
c00285e8:	eb e7                	jmp    c00285d1 <__muldf3+0x169>
c00285ea:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00285f0:	81 ce 00 00 00 80    	or     esi,0x80000000
c00285f6:	89 c8                	mov    eax,ecx
c00285f8:	f7 e6                	mul    esi
c00285fa:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00285fd:	89 c7                	mov    edi,eax
c00285ff:	89 c8                	mov    eax,ecx
c0028601:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028604:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0028607:	89 c1                	mov    ecx,eax
c0028609:	89 f0                	mov    eax,esi
c002860b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c002860e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0028611:	89 c6                	mov    esi,eax
c0028613:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028616:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028619:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002861c:	31 c0                	xor    eax,eax
c002861e:	01 f1                	add    ecx,esi
c0028620:	0f 92 c0             	setb   al
c0028623:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0028626:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0028629:	83 d6 00             	adc    esi,0x0
c002862c:	01 c7                	add    edi,eax
c002862e:	83 d6 00             	adc    esi,0x0
c0028631:	01 ca                	add    edx,ecx
c0028633:	0f 92 c1             	setb   cl
c0028636:	0f b6 c9             	movzx  ecx,cl
c0028639:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c002863c:	83 d6 00             	adc    esi,0x0
c002863f:	01 cf                	add    edi,ecx
c0028641:	83 d6 00             	adc    esi,0x0
c0028644:	31 c9                	xor    ecx,ecx
c0028646:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0028649:	0f 95 c1             	setne  cl
c002864c:	09 cf                	or     edi,ecx
c002864e:	85 f6                	test   esi,esi
c0028650:	78 0c                	js     c002865e <__muldf3+0x1f6>
c0028652:	01 f6                	add    esi,esi
c0028654:	89 f8                	mov    eax,edi
c0028656:	c1 e8 1f             	shr    eax,0x1f
c0028659:	09 c6                	or     esi,eax
c002865b:	01 ff                	add    edi,edi
c002865d:	4b                   	dec    ebx
c002865e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0028664:	0f 8f 85 00 00 00    	jg     c00286ef <__muldf3+0x287>
c002866a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0028670:	85 db                	test   ebx,ebx
c0028672:	0f 8f 84 00 00 00    	jg     c00286fc <__muldf3+0x294>
c0028678:	83 fb cc             	cmp    ebx,0xffffffcc
c002867b:	7c 79                	jl     c00286f6 <__muldf3+0x28e>
c002867d:	ba 01 00 00 00       	mov    edx,0x1
c0028682:	29 da                	sub    edx,ebx
c0028684:	81 ce 00 00 00 80    	or     esi,0x80000000
c002868a:	83 fa 1f             	cmp    edx,0x1f
c002868d:	7e 30                	jle    c00286bf <__muldf3+0x257>
c002868f:	83 fa 20             	cmp    edx,0x20
c0028692:	75 0b                	jne    c002869f <__muldf3+0x237>
c0028694:	31 c0                	xor    eax,eax
c0028696:	85 ff                	test   edi,edi
c0028698:	0f 95 c0             	setne  al
c002869b:	89 c7                	mov    edi,eax
c002869d:	eb 1a                	jmp    c00286b9 <__muldf3+0x251>
c002869f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c00286a2:	89 f0                	mov    eax,esi
c00286a4:	d3 e0                	shl    eax,cl
c00286a6:	09 f8                	or     eax,edi
c00286a8:	0f 95 c0             	setne  al
c00286ab:	0f b6 c0             	movzx  eax,al
c00286ae:	89 c7                	mov    edi,eax
c00286b0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00286b5:	29 d9                	sub    ecx,ebx
c00286b7:	d3 ee                	shr    esi,cl
c00286b9:	09 f7                	or     edi,esi
c00286bb:	31 db                	xor    ebx,ebx
c00286bd:	eb 3b                	jmp    c00286fa <__muldf3+0x292>
c00286bf:	83 c3 1f             	add    ebx,0x1f
c00286c2:	89 f0                	mov    eax,esi
c00286c4:	88 d9                	mov    cl,bl
c00286c6:	d3 e0                	shl    eax,cl
c00286c8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00286cb:	89 f8                	mov    eax,edi
c00286cd:	88 d1                	mov    cl,dl
c00286cf:	d3 e8                	shr    eax,cl
c00286d1:	89 c1                	mov    ecx,eax
c00286d3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00286d6:	09 c8                	or     eax,ecx
c00286d8:	88 d9                	mov    cl,bl
c00286da:	d3 e7                	shl    edi,cl
c00286dc:	31 db                	xor    ebx,ebx
c00286de:	85 ff                	test   edi,edi
c00286e0:	0f 95 c3             	setne  bl
c00286e3:	89 df                	mov    edi,ebx
c00286e5:	09 c7                	or     edi,eax
c00286e7:	88 d1                	mov    cl,dl
c00286e9:	d3 ee                	shr    esi,cl
c00286eb:	31 db                	xor    ebx,ebx
c00286ed:	eb 0d                	jmp    c00286fc <__muldf3+0x294>
c00286ef:	bb ff 07 00 00       	mov    ebx,0x7ff
c00286f4:	eb 02                	jmp    c00286f8 <__muldf3+0x290>
c00286f6:	31 db                	xor    ebx,ebx
c00286f8:	31 ff                	xor    edi,edi
c00286fa:	31 f6                	xor    esi,esi
c00286fc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00286ff:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028702:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028707:	09 c3                	or     ebx,eax
c0028709:	c1 e3 14             	shl    ebx,0x14
c002870c:	89 f0                	mov    eax,esi
c002870e:	c1 e8 0b             	shr    eax,0xb
c0028711:	09 c3                	or     ebx,eax
c0028713:	89 f8                	mov    eax,edi
c0028715:	c1 e8 0b             	shr    eax,0xb
c0028718:	c1 e6 15             	shl    esi,0x15
c002871b:	09 c6                	or     esi,eax
c002871d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0028723:	0f 95 c1             	setne  cl
c0028726:	09 c8                	or     eax,ecx
c0028728:	83 e0 01             	and    eax,0x1
c002872b:	c1 ef 0a             	shr    edi,0xa
c002872e:	21 c7                	and    edi,eax
c0028730:	01 f7                	add    edi,esi
c0028732:	83 d3 00             	adc    ebx,0x0
c0028735:	89 da                	mov    edx,ebx
c0028737:	eb 03                	jmp    c002873c <__muldf3+0x2d4>
c0028739:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002873c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002873f:	89 f8                	mov    eax,edi
c0028741:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028744:	83 c4 24             	add    esp,0x24
c0028747:	5b                   	pop    ebx
c0028748:	5e                   	pop    esi
c0028749:	5f                   	pop    edi
c002874a:	5d                   	pop    ebp
c002874b:	c3                   	ret    

c002874c <__divdf3>:
c002874c:	55                   	push   ebp
c002874d:	89 e5                	mov    ebp,esp
c002874f:	57                   	push   edi
c0028750:	56                   	push   esi
c0028751:	53                   	push   ebx
c0028752:	83 ec 2c             	sub    esp,0x2c
c0028755:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028758:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002875b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002875e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0028761:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028764:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028767:	89 ce                	mov    esi,ecx
c0028769:	89 c8                	mov    eax,ecx
c002876b:	c1 f8 14             	sar    eax,0x14
c002876e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028771:	89 f8                	mov    eax,edi
c0028773:	89 fb                	mov    ebx,edi
c0028775:	c1 e3 0b             	shl    ebx,0xb
c0028778:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002877b:	c1 e6 0b             	shl    esi,0xb
c002877e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028784:	c1 e8 15             	shr    eax,0x15
c0028787:	09 c6                	or     esi,eax
c0028789:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c002878c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002878f:	89 c2                	mov    edx,eax
c0028791:	c1 fa 14             	sar    edx,0x14
c0028794:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0028797:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002879a:	89 de                	mov    esi,ebx
c002879c:	c1 e6 0b             	shl    esi,0xb
c002879f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00287a2:	c1 e0 0b             	shl    eax,0xb
c00287a5:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00287aa:	c1 eb 15             	shr    ebx,0x15
c00287ad:	09 d8                	or     eax,ebx
c00287af:	89 c2                	mov    edx,eax
c00287b1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00287b4:	25 ff 07 00 00       	and    eax,0x7ff
c00287b9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00287bc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00287bf:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00287c5:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c00287c8:	29 d8                	sub    eax,ebx
c00287ca:	05 ff 03 00 00       	add    eax,0x3ff
c00287cf:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00287d2:	46                   	inc    esi
c00287d3:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00287d9:	0f 85 a5 00 00 00    	jne    c0028884 <__divdf3+0x138>
c00287df:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00287e2:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00287e5:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c00287e9:	74 2a                	je     c0028815 <__divdf3+0xc9>
c00287eb:	85 f6                	test   esi,esi
c00287ed:	0f 85 cc 02 00 00    	jne    c0028abf <__divdf3+0x373>
c00287f3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00287f6:	40                   	inc    eax
c00287f7:	a9 fe 07 00 00       	test   eax,0x7fe
c00287fc:	75 26                	jne    c0028824 <__divdf3+0xd8>
c00287fe:	85 db                	test   ebx,ebx
c0028800:	74 22                	je     c0028824 <__divdf3+0xd8>
c0028802:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028805:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028808:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002880b:	09 d0                	or     eax,edx
c002880d:	0f 85 ac 02 00 00    	jne    c0028abf <__divdf3+0x373>
c0028813:	eb 63                	jmp    c0028878 <__divdf3+0x12c>
c0028815:	85 f6                	test   esi,esi
c0028817:	75 22                	jne    c002883b <__divdf3+0xef>
c0028819:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002881c:	40                   	inc    eax
c002881d:	a9 fe 07 00 00       	test   eax,0x7fe
c0028822:	74 36                	je     c002885a <__divdf3+0x10e>
c0028824:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028828:	0f 89 91 02 00 00    	jns    c0028abf <__divdf3+0x373>
c002882e:	89 f8                	mov    eax,edi
c0028830:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028836:	e9 80 02 00 00       	jmp    c0028abb <__divdf3+0x36f>
c002883b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002883e:	01 f6                	add    esi,esi
c0028840:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028843:	c1 ef 1f             	shr    edi,0x1f
c0028846:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028849:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c002884c:	8d 48 ff             	lea    ecx,[eax-0x1]
c002884f:	09 f7                	or     edi,esi
c0028851:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028854:	78 2e                	js     c0028884 <__divdf3+0x138>
c0028856:	89 c8                	mov    eax,ecx
c0028858:	eb e1                	jmp    c002883b <__divdf3+0xef>
c002885a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002885d:	09 d0                	or     eax,edx
c002885f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028863:	74 0f                	je     c0028874 <__divdf3+0x128>
c0028865:	85 c0                	test   eax,eax
c0028867:	74 bb                	je     c0028824 <__divdf3+0xd8>
c0028869:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002886c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002886f:	e9 4b 02 00 00       	jmp    c0028abf <__divdf3+0x373>
c0028874:	85 c0                	test   eax,eax
c0028876:	75 ac                	jne    c0028824 <__divdf3+0xd8>
c0028878:	31 ff                	xor    edi,edi
c002887a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002887f:	e9 3b 02 00 00       	jmp    c0028abf <__divdf3+0x373>
c0028884:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028887:	8d 4f 01             	lea    ecx,[edi+0x1]
c002888a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028890:	75 6b                	jne    c00288fd <__divdf3+0x1b1>
c0028892:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028895:	09 d6                	or     esi,edx
c0028897:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002889b:	74 28                	je     c00288c5 <__divdf3+0x179>
c002889d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00288a0:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00288a3:	85 f6                	test   esi,esi
c00288a5:	0f 85 14 02 00 00    	jne    c0028abf <__divdf3+0x373>
c00288ab:	31 ff                	xor    edi,edi
c00288ad:	31 c9                	xor    ecx,ecx
c00288af:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00288b2:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00288b5:	0f 89 04 02 00 00    	jns    c0028abf <__divdf3+0x373>
c00288bb:	b9 00 00 00 80       	mov    ecx,0x80000000
c00288c0:	e9 fa 01 00 00       	jmp    c0028abf <__divdf3+0x373>
c00288c5:	85 f6                	test   esi,esi
c00288c7:	75 1b                	jne    c00288e4 <__divdf3+0x198>
c00288c9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00288cc:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00288cf:	25 00 00 00 80       	and    eax,0x80000000
c00288d4:	31 c9                	xor    ecx,ecx
c00288d6:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00288db:	89 cf                	mov    edi,ecx
c00288dd:	89 c1                	mov    ecx,eax
c00288df:	e9 db 01 00 00       	jmp    c0028abf <__divdf3+0x373>
c00288e4:	01 d2                	add    edx,edx
c00288e6:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00288e9:	c1 eb 1f             	shr    ebx,0x1f
c00288ec:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00288ef:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c00288f2:	8d 48 01             	lea    ecx,[eax+0x1]
c00288f5:	09 da                	or     edx,ebx
c00288f7:	78 04                	js     c00288fd <__divdf3+0x1b1>
c00288f9:	89 c8                	mov    eax,ecx
c00288fb:	eb e7                	jmp    c00288e4 <__divdf3+0x198>
c00288fd:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028900:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028906:	81 ca 00 00 00 80    	or     edx,0x80000000
c002890c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c002890f:	39 d6                	cmp    esi,edx
c0028911:	77 0d                	ja     c0028920 <__divdf3+0x1d4>
c0028913:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028916:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028919:	72 1b                	jb     c0028936 <__divdf3+0x1ea>
c002891b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c002891e:	75 16                	jne    c0028936 <__divdf3+0x1ea>
c0028920:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028923:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028926:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028929:	83 de 00             	sbb    esi,0x0
c002892c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c002892f:	ba 01 00 00 00       	mov    edx,0x1
c0028934:	eb 02                	jmp    c0028938 <__divdf3+0x1ec>
c0028936:	31 d2                	xor    edx,edx
c0028938:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c002893f:	31 ff                	xor    edi,edi
c0028941:	01 ff                	add    edi,edi
c0028943:	89 d1                	mov    ecx,edx
c0028945:	c1 e9 1f             	shr    ecx,0x1f
c0028948:	09 cf                	or     edi,ecx
c002894a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c002894d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028950:	89 da                	mov    edx,ebx
c0028952:	89 f3                	mov    ebx,esi
c0028954:	8d 34 36             	lea    esi,[esi+esi*1]
c0028957:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002895a:	c1 e9 1f             	shr    ecx,0x1f
c002895d:	09 ce                	or     esi,ecx
c002895f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028962:	01 c9                	add    ecx,ecx
c0028964:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0028967:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002896a:	85 db                	test   ebx,ebx
c002896c:	78 29                	js     c0028997 <__divdf3+0x24b>
c002896e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028971:	72 07                	jb     c002897a <__divdf3+0x22e>
c0028973:	75 3c                	jne    c00289b1 <__divdf3+0x265>
c0028975:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028978:	77 37                	ja     c00289b1 <__divdf3+0x265>
c002897a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002897d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028980:	31 d2                	xor    edx,edx
c0028982:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028985:	0f 97 c2             	seta   dl
c0028988:	29 d6                	sub    esi,edx
c002898a:	89 d9                	mov    ecx,ebx
c002898c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c002898f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028992:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028995:	eb 17                	jmp    c00289ae <__divdf3+0x262>
c0028997:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002899a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002899d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00289a0:	0f 97 c1             	seta   cl
c00289a3:	0f b6 c9             	movzx  ecx,cl
c00289a6:	29 ce                	sub    esi,ecx
c00289a8:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00289ab:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00289ae:	83 ca 01             	or     edx,0x1
c00289b1:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00289b4:	75 8b                	jne    c0028941 <__divdf3+0x1f5>
c00289b6:	c1 e7 09             	shl    edi,0x9
c00289b9:	89 d1                	mov    ecx,edx
c00289bb:	c1 e9 17             	shr    ecx,0x17
c00289be:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00289c1:	09 f3                	or     ebx,esi
c00289c3:	0f 95 c3             	setne  bl
c00289c6:	0f b6 db             	movzx  ebx,bl
c00289c9:	c1 e2 09             	shl    edx,0x9
c00289cc:	09 d3                	or     ebx,edx
c00289ce:	89 ca                	mov    edx,ecx
c00289d0:	09 fa                	or     edx,edi
c00289d2:	78 0c                	js     c00289e0 <__divdf3+0x294>
c00289d4:	01 d2                	add    edx,edx
c00289d6:	89 d9                	mov    ecx,ebx
c00289d8:	c1 e9 1f             	shr    ecx,0x1f
c00289db:	09 ca                	or     edx,ecx
c00289dd:	01 db                	add    ebx,ebx
c00289df:	48                   	dec    eax
c00289e0:	3d fe 07 00 00       	cmp    eax,0x7fe
c00289e5:	0f 8f 83 00 00 00    	jg     c0028a6e <__divdf3+0x322>
c00289eb:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00289f1:	85 c0                	test   eax,eax
c00289f3:	0f 8f 82 00 00 00    	jg     c0028a7b <__divdf3+0x32f>
c00289f9:	83 f8 cc             	cmp    eax,0xffffffcc
c00289fc:	7c 77                	jl     c0028a75 <__divdf3+0x329>
c00289fe:	be 01 00 00 00       	mov    esi,0x1
c0028a03:	29 c6                	sub    esi,eax
c0028a05:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028a0b:	83 fe 1f             	cmp    esi,0x1f
c0028a0e:	7e 2f                	jle    c0028a3f <__divdf3+0x2f3>
c0028a10:	83 fe 20             	cmp    esi,0x20
c0028a13:	75 0a                	jne    c0028a1f <__divdf3+0x2d3>
c0028a15:	85 db                	test   ebx,ebx
c0028a17:	0f 95 c3             	setne  bl
c0028a1a:	0f b6 db             	movzx  ebx,bl
c0028a1d:	eb 1a                	jmp    c0028a39 <__divdf3+0x2ed>
c0028a1f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028a22:	89 d7                	mov    edi,edx
c0028a24:	d3 e7                	shl    edi,cl
c0028a26:	89 f9                	mov    ecx,edi
c0028a28:	09 d9                	or     ecx,ebx
c0028a2a:	0f 95 c3             	setne  bl
c0028a2d:	0f b6 db             	movzx  ebx,bl
c0028a30:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028a35:	29 c1                	sub    ecx,eax
c0028a37:	d3 ea                	shr    edx,cl
c0028a39:	09 d3                	or     ebx,edx
c0028a3b:	31 c0                	xor    eax,eax
c0028a3d:	eb 3a                	jmp    c0028a79 <__divdf3+0x32d>
c0028a3f:	83 c0 1f             	add    eax,0x1f
c0028a42:	89 d7                	mov    edi,edx
c0028a44:	88 c1                	mov    cl,al
c0028a46:	d3 e7                	shl    edi,cl
c0028a48:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028a4b:	89 df                	mov    edi,ebx
c0028a4d:	89 f1                	mov    ecx,esi
c0028a4f:	d3 ef                	shr    edi,cl
c0028a51:	89 f9                	mov    ecx,edi
c0028a53:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028a56:	09 cf                	or     edi,ecx
c0028a58:	88 c1                	mov    cl,al
c0028a5a:	d3 e3                	shl    ebx,cl
c0028a5c:	85 db                	test   ebx,ebx
c0028a5e:	0f 95 c3             	setne  bl
c0028a61:	0f b6 db             	movzx  ebx,bl
c0028a64:	09 fb                	or     ebx,edi
c0028a66:	89 f1                	mov    ecx,esi
c0028a68:	d3 ea                	shr    edx,cl
c0028a6a:	31 c0                	xor    eax,eax
c0028a6c:	eb 0d                	jmp    c0028a7b <__divdf3+0x32f>
c0028a6e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028a73:	eb 02                	jmp    c0028a77 <__divdf3+0x32b>
c0028a75:	31 c0                	xor    eax,eax
c0028a77:	31 db                	xor    ebx,ebx
c0028a79:	31 d2                	xor    edx,edx
c0028a7b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028a7e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028a81:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028a87:	09 c8                	or     eax,ecx
c0028a89:	c1 e0 14             	shl    eax,0x14
c0028a8c:	89 d1                	mov    ecx,edx
c0028a8e:	c1 e9 0b             	shr    ecx,0xb
c0028a91:	09 c8                	or     eax,ecx
c0028a93:	89 c6                	mov    esi,eax
c0028a95:	89 d9                	mov    ecx,ebx
c0028a97:	c1 e9 0b             	shr    ecx,0xb
c0028a9a:	c1 e2 15             	shl    edx,0x15
c0028a9d:	09 ca                	or     edx,ecx
c0028a9f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028aa5:	0f 95 c0             	setne  al
c0028aa8:	09 c1                	or     ecx,eax
c0028aaa:	83 e1 01             	and    ecx,0x1
c0028aad:	c1 eb 0a             	shr    ebx,0xa
c0028ab0:	21 cb                	and    ebx,ecx
c0028ab2:	01 d3                	add    ebx,edx
c0028ab4:	89 d8                	mov    eax,ebx
c0028ab6:	83 d6 00             	adc    esi,0x0
c0028ab9:	89 f2                	mov    edx,esi
c0028abb:	89 c7                	mov    edi,eax
c0028abd:	89 d1                	mov    ecx,edx
c0028abf:	89 f8                	mov    eax,edi
c0028ac1:	89 ca                	mov    edx,ecx
c0028ac3:	83 c4 2c             	add    esp,0x2c
c0028ac6:	5b                   	pop    ebx
c0028ac7:	5e                   	pop    esi
c0028ac8:	5f                   	pop    edi
c0028ac9:	5d                   	pop    ebp
c0028aca:	c3                   	ret    

c0028acb <__floatsidf>:
c0028acb:	55                   	push   ebp
c0028acc:	89 e5                	mov    ebp,esp
c0028ace:	56                   	push   esi
c0028acf:	53                   	push   ebx
c0028ad0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028ad3:	85 db                	test   ebx,ebx
c0028ad5:	7e 15                	jle    c0028aec <__floatsidf+0x21>
c0028ad7:	0f bd cb             	bsr    ecx,ebx
c0028ada:	83 f1 1f             	xor    ecx,0x1f
c0028add:	d3 e3                	shl    ebx,cl
c0028adf:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028ae5:	b8 1e 04 00 00       	mov    eax,0x41e
c0028aea:	eb 21                	jmp    c0028b0d <__floatsidf+0x42>
c0028aec:	b8 00 00 00 00       	mov    eax,0x0
c0028af1:	ba 00 00 00 00       	mov    edx,0x0
c0028af6:	74 2a                	je     c0028b22 <__floatsidf+0x57>
c0028af8:	f7 db                	neg    ebx
c0028afa:	0f bd cb             	bsr    ecx,ebx
c0028afd:	83 f1 1f             	xor    ecx,0x1f
c0028b00:	d3 e3                	shl    ebx,cl
c0028b02:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028b08:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028b0d:	29 c8                	sub    eax,ecx
c0028b0f:	c1 e0 14             	shl    eax,0x14
c0028b12:	89 c1                	mov    ecx,eax
c0028b14:	89 de                	mov    esi,ebx
c0028b16:	c1 ee 0b             	shr    esi,0xb
c0028b19:	09 f1                	or     ecx,esi
c0028b1b:	89 ca                	mov    edx,ecx
c0028b1d:	c1 e3 15             	shl    ebx,0x15
c0028b20:	89 d8                	mov    eax,ebx
c0028b22:	5b                   	pop    ebx
c0028b23:	5e                   	pop    esi
c0028b24:	5d                   	pop    ebp
c0028b25:	c3                   	ret    

c0028b26 <__floatunsidf>:
c0028b26:	55                   	push   ebp
c0028b27:	89 e5                	mov    ebp,esp
c0028b29:	56                   	push   esi
c0028b2a:	53                   	push   ebx
c0028b2b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028b2e:	85 db                	test   ebx,ebx
c0028b30:	74 2a                	je     c0028b5c <__floatunsidf+0x36>
c0028b32:	0f bd cb             	bsr    ecx,ebx
c0028b35:	83 f1 1f             	xor    ecx,0x1f
c0028b38:	d3 e3                	shl    ebx,cl
c0028b3a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028b40:	b8 1e 04 00 00       	mov    eax,0x41e
c0028b45:	29 c8                	sub    eax,ecx
c0028b47:	c1 e0 14             	shl    eax,0x14
c0028b4a:	89 c1                	mov    ecx,eax
c0028b4c:	89 de                	mov    esi,ebx
c0028b4e:	c1 ee 0b             	shr    esi,0xb
c0028b51:	09 f1                	or     ecx,esi
c0028b53:	89 ca                	mov    edx,ecx
c0028b55:	c1 e3 15             	shl    ebx,0x15
c0028b58:	89 d8                	mov    eax,ebx
c0028b5a:	eb 04                	jmp    c0028b60 <__floatunsidf+0x3a>
c0028b5c:	31 c0                	xor    eax,eax
c0028b5e:	31 d2                	xor    edx,edx
c0028b60:	5b                   	pop    ebx
c0028b61:	5e                   	pop    esi
c0028b62:	5d                   	pop    ebp
c0028b63:	c3                   	ret    

c0028b64 <__fixdfsi>:
c0028b64:	55                   	push   ebp
c0028b65:	89 e5                	mov    ebp,esp
c0028b67:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028b6a:	89 d1                	mov    ecx,edx
c0028b6c:	c1 e1 0b             	shl    ecx,0xb
c0028b6f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028b75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028b78:	c1 e8 15             	shr    eax,0x15
c0028b7b:	09 c1                	or     ecx,eax
c0028b7d:	c1 fa 14             	sar    edx,0x14
c0028b80:	78 1f                	js     c0028ba1 <__fixdfsi+0x3d>
c0028b82:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028b88:	31 c0                	xor    eax,eax
c0028b8a:	83 fa 1e             	cmp    edx,0x1e
c0028b8d:	77 40                	ja     c0028bcf <__fixdfsi+0x6b>
c0028b8f:	89 c8                	mov    eax,ecx
c0028b91:	0d 00 00 00 80       	or     eax,0x80000000
c0028b96:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028b9b:	29 d1                	sub    ecx,edx
c0028b9d:	d3 e8                	shr    eax,cl
c0028b9f:	eb 2e                	jmp    c0028bcf <__fixdfsi+0x6b>
c0028ba1:	31 c0                	xor    eax,eax
c0028ba3:	81 c2 01 04 00 00    	add    edx,0x401
c0028ba9:	78 24                	js     c0028bcf <__fixdfsi+0x6b>
c0028bab:	83 fa 1e             	cmp    edx,0x1e
c0028bae:	7e 09                	jle    c0028bb9 <__fixdfsi+0x55>
c0028bb0:	83 fa 1f             	cmp    edx,0x1f
c0028bb3:	75 18                	jne    c0028bcd <__fixdfsi+0x69>
c0028bb5:	85 c9                	test   ecx,ecx
c0028bb7:	75 14                	jne    c0028bcd <__fixdfsi+0x69>
c0028bb9:	89 c8                	mov    eax,ecx
c0028bbb:	0d 00 00 00 80       	or     eax,0x80000000
c0028bc0:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028bc5:	29 d1                	sub    ecx,edx
c0028bc7:	d3 e8                	shr    eax,cl
c0028bc9:	f7 d8                	neg    eax
c0028bcb:	eb 02                	jmp    c0028bcf <__fixdfsi+0x6b>
c0028bcd:	31 c0                	xor    eax,eax
c0028bcf:	5d                   	pop    ebp
c0028bd0:	c3                   	ret    

c0028bd1 <__fixunsdfsi>:
c0028bd1:	55                   	push   ebp
c0028bd2:	89 e5                	mov    ebp,esp
c0028bd4:	53                   	push   ebx
c0028bd5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028bd8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028bdb:	89 d3                	mov    ebx,edx
c0028bdd:	c1 fb 14             	sar    ebx,0x14
c0028be0:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028be6:	31 c0                	xor    eax,eax
c0028be8:	83 fb 1f             	cmp    ebx,0x1f
c0028beb:	77 1d                	ja     c0028c0a <__fixunsdfsi+0x39>
c0028bed:	89 d0                	mov    eax,edx
c0028bef:	c1 e0 0b             	shl    eax,0xb
c0028bf2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028bf7:	c1 e9 15             	shr    ecx,0x15
c0028bfa:	09 c8                	or     eax,ecx
c0028bfc:	0d 00 00 00 80       	or     eax,0x80000000
c0028c01:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028c06:	29 d9                	sub    ecx,ebx
c0028c08:	d3 e8                	shr    eax,cl
c0028c0a:	5b                   	pop    ebx
c0028c0b:	5d                   	pop    ebp
c0028c0c:	c3                   	ret    

c0028c0d <__cmpdf2>:
c0028c0d:	55                   	push   ebp
c0028c0e:	89 e5                	mov    ebp,esp
c0028c10:	57                   	push   edi
c0028c11:	56                   	push   esi
c0028c12:	53                   	push   ebx
c0028c13:	83 ec 0c             	sub    esp,0xc
c0028c16:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028c19:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028c1c:	89 ca                	mov    edx,ecx
c0028c1e:	c1 ea 14             	shr    edx,0x14
c0028c21:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028c27:	89 cb                	mov    ebx,ecx
c0028c29:	c1 fb 1f             	sar    ebx,0x1f
c0028c2c:	31 da                	xor    edx,ebx
c0028c2e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028c31:	89 df                	mov    edi,ebx
c0028c33:	c1 e7 0b             	shl    edi,0xb
c0028c36:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028c39:	c1 e1 0b             	shl    ecx,0xb
c0028c3c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028c42:	c1 eb 15             	shr    ebx,0x15
c0028c45:	09 d9                	or     ecx,ebx
c0028c47:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028c4a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028c4d:	89 ce                	mov    esi,ecx
c0028c4f:	c1 ee 14             	shr    esi,0x14
c0028c52:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028c58:	89 cb                	mov    ebx,ecx
c0028c5a:	c1 fb 1f             	sar    ebx,0x1f
c0028c5d:	31 de                	xor    esi,ebx
c0028c5f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028c62:	89 df                	mov    edi,ebx
c0028c64:	c1 e7 0b             	shl    edi,0xb
c0028c67:	c1 e1 0b             	shl    ecx,0xb
c0028c6a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028c70:	c1 eb 15             	shr    ebx,0x15
c0028c73:	09 d9                	or     ecx,ebx
c0028c75:	89 d3                	mov    ebx,edx
c0028c77:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028c7d:	43                   	inc    ebx
c0028c7e:	83 fb 01             	cmp    ebx,0x1
c0028c81:	77 08                	ja     c0028c8b <__cmpdf2+0x7e>
c0028c83:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028c86:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028c89:	75 68                	jne    c0028cf3 <__cmpdf2+0xe6>
c0028c8b:	89 f3                	mov    ebx,esi
c0028c8d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028c93:	43                   	inc    ebx
c0028c94:	83 fb 01             	cmp    ebx,0x1
c0028c97:	77 06                	ja     c0028c9f <__cmpdf2+0x92>
c0028c99:	89 fb                	mov    ebx,edi
c0028c9b:	09 cb                	or     ebx,ecx
c0028c9d:	75 54                	jne    c0028cf3 <__cmpdf2+0xe6>
c0028c9f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028ca2:	09 f8                	or     eax,edi
c0028ca4:	09 c8                	or     eax,ecx
c0028ca6:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028ca9:	75 12                	jne    c0028cbd <__cmpdf2+0xb0>
c0028cab:	8d 42 01             	lea    eax,[edx+0x1]
c0028cae:	83 f8 01             	cmp    eax,0x1
c0028cb1:	77 0a                	ja     c0028cbd <__cmpdf2+0xb0>
c0028cb3:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028cb6:	31 c0                	xor    eax,eax
c0028cb8:	83 fb 01             	cmp    ebx,0x1
c0028cbb:	76 36                	jbe    c0028cf3 <__cmpdf2+0xe6>
c0028cbd:	b8 01 00 00 00       	mov    eax,0x1
c0028cc2:	39 f2                	cmp    edx,esi
c0028cc4:	7f 2d                	jg     c0028cf3 <__cmpdf2+0xe6>
c0028cc6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028ccb:	7c 26                	jl     c0028cf3 <__cmpdf2+0xe6>
c0028ccd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028cd0:	77 07                	ja     c0028cd9 <__cmpdf2+0xcc>
c0028cd2:	72 16                	jb     c0028cea <__cmpdf2+0xdd>
c0028cd4:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028cd7:	76 0a                	jbe    c0028ce3 <__cmpdf2+0xd6>
c0028cd9:	89 d0                	mov    eax,edx
c0028cdb:	c1 f8 1f             	sar    eax,0x1f
c0028cde:	83 c8 01             	or     eax,0x1
c0028ce1:	eb 10                	jmp    c0028cf3 <__cmpdf2+0xe6>
c0028ce3:	b8 00 00 00 00       	mov    eax,0x0
c0028ce8:	73 09                	jae    c0028cf3 <__cmpdf2+0xe6>
c0028cea:	89 d0                	mov    eax,edx
c0028cec:	c1 f8 1f             	sar    eax,0x1f
c0028cef:	83 e0 02             	and    eax,0x2
c0028cf2:	48                   	dec    eax
c0028cf3:	83 c4 0c             	add    esp,0xc
c0028cf6:	5b                   	pop    ebx
c0028cf7:	5e                   	pop    esi
c0028cf8:	5f                   	pop    edi
c0028cf9:	5d                   	pop    ebp
c0028cfa:	c3                   	ret    

c0028cfb <__eqdf2>:
c0028cfb:	55                   	push   ebp
c0028cfc:	89 e5                	mov    ebp,esp
c0028cfe:	50                   	push   eax
c0028cff:	6a 01                	push   0x1
c0028d01:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028d04:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028d07:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028d0a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028d0d:	e8 fb fe ff ff       	call   c0028c0d <__cmpdf2>
c0028d12:	83 c4 18             	add    esp,0x18
c0028d15:	c9                   	leave  
c0028d16:	c3                   	ret    

c0028d17 <__nedf2>:
c0028d17:	eb e2                	jmp    c0028cfb <__eqdf2>

c0028d19 <__gtdf2>:
c0028d19:	55                   	push   ebp
c0028d1a:	89 e5                	mov    ebp,esp
c0028d1c:	50                   	push   eax
c0028d1d:	6a ff                	push   0xffffffff
c0028d1f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028d22:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028d25:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028d28:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028d2b:	e8 dd fe ff ff       	call   c0028c0d <__cmpdf2>
c0028d30:	83 c4 18             	add    esp,0x18
c0028d33:	c9                   	leave  
c0028d34:	c3                   	ret    

c0028d35 <__gedf2>:
c0028d35:	eb e2                	jmp    c0028d19 <__gtdf2>

c0028d37 <__ltdf2>:
c0028d37:	eb c2                	jmp    c0028cfb <__eqdf2>

c0028d39 <__ledf2>:
c0028d39:	eb c0                	jmp    c0028cfb <__eqdf2>

c0028d3b <__truncdfsf2>:
c0028d3b:	55                   	push   ebp
c0028d3c:	89 e5                	mov    ebp,esp
c0028d3e:	57                   	push   edi
c0028d3f:	56                   	push   esi
c0028d40:	53                   	push   ebx
c0028d41:	83 ec 0c             	sub    esp,0xc
c0028d44:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028d47:	89 d1                	mov    ecx,edx
c0028d49:	c1 f9 14             	sar    ecx,0x14
c0028d4c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028d4f:	89 df                	mov    edi,ebx
c0028d51:	c1 e7 0b             	shl    edi,0xb
c0028d54:	89 d0                	mov    eax,edx
c0028d56:	c1 e0 0b             	shl    eax,0xb
c0028d59:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028d5e:	c1 eb 15             	shr    ebx,0x15
c0028d61:	09 d8                	or     eax,ebx
c0028d63:	89 cb                	mov    ebx,ecx
c0028d65:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028d6b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028d71:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028d77:	0f 86 9e 00 00 00    	jbe    c0028e1b <__truncdfsf2+0xe0>
c0028d7d:	85 db                	test   ebx,ebx
c0028d7f:	75 0a                	jne    c0028d8b <__truncdfsf2+0x50>
c0028d81:	c1 fa 17             	sar    edx,0x17
c0028d84:	30 d2                	xor    dl,dl
c0028d86:	e9 84 00 00 00       	jmp    c0028e0f <__truncdfsf2+0xd4>
c0028d8b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028d91:	83 fe 83             	cmp    esi,0xffffff83
c0028d94:	7d 4b                	jge    c0028de1 <__truncdfsf2+0xa6>
c0028d96:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028d9b:	29 f1                	sub    ecx,esi
c0028d9d:	83 f9 1f             	cmp    ecx,0x1f
c0028da0:	7f 6b                	jg     c0028e0d <__truncdfsf2+0xd2>
c0028da2:	0d 00 00 00 80       	or     eax,0x80000000
c0028da7:	89 c3                	mov    ebx,eax
c0028da9:	d3 eb                	shr    ebx,cl
c0028dab:	be 01 00 00 00       	mov    esi,0x1
c0028db0:	d3 e6                	shl    esi,cl
c0028db2:	4e                   	dec    esi
c0028db3:	21 f0                	and    eax,esi
c0028db5:	09 f8                	or     eax,edi
c0028db7:	0f 95 c0             	setne  al
c0028dba:	0f b6 c0             	movzx  eax,al
c0028dbd:	09 c3                	or     ebx,eax
c0028dbf:	89 d9                	mov    ecx,ebx
c0028dc1:	c1 e9 08             	shr    ecx,0x8
c0028dc4:	f6 c3 7f             	test   bl,0x7f
c0028dc7:	0f 95 c0             	setne  al
c0028dca:	09 c8                	or     eax,ecx
c0028dcc:	83 e0 01             	and    eax,0x1
c0028dcf:	c1 eb 07             	shr    ebx,0x7
c0028dd2:	21 c3                	and    ebx,eax
c0028dd4:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028dda:	09 d1                	or     ecx,edx
c0028ddc:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028ddf:	eb 76                	jmp    c0028e57 <__truncdfsf2+0x11c>
c0028de1:	83 c6 80             	add    esi,0xffffff80
c0028de4:	7e 1d                	jle    c0028e03 <__truncdfsf2+0xc8>
c0028de6:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028dec:	75 0b                	jne    c0028df9 <__truncdfsf2+0xbe>
c0028dee:	09 f8                	or     eax,edi
c0028df0:	74 09                	je     c0028dfb <__truncdfsf2+0xc0>
c0028df2:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028df7:	eb 02                	jmp    c0028dfb <__truncdfsf2+0xc0>
c0028df9:	31 c0                	xor    eax,eax
c0028dfb:	c1 fa 17             	sar    edx,0x17
c0028dfe:	80 ca ff             	or     dl,0xff
c0028e01:	eb 0e                	jmp    c0028e11 <__truncdfsf2+0xd6>
c0028e03:	c1 fa 1f             	sar    edx,0x1f
c0028e06:	c1 e2 08             	shl    edx,0x8
c0028e09:	09 ca                	or     edx,ecx
c0028e0b:	eb 04                	jmp    c0028e11 <__truncdfsf2+0xd6>
c0028e0d:	31 d2                	xor    edx,edx
c0028e0f:	31 c0                	xor    eax,eax
c0028e11:	c1 e2 17             	shl    edx,0x17
c0028e14:	c1 e8 08             	shr    eax,0x8
c0028e17:	09 d0                	or     eax,edx
c0028e19:	eb 3c                	jmp    c0028e57 <__truncdfsf2+0x11c>
c0028e1b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028e21:	89 ca                	mov    edx,ecx
c0028e23:	c1 fa 0b             	sar    edx,0xb
c0028e26:	c1 e2 08             	shl    edx,0x8
c0028e29:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028e2c:	31 db                	xor    ebx,ebx
c0028e2e:	85 ff                	test   edi,edi
c0028e30:	0f 95 c3             	setne  bl
c0028e33:	09 d8                	or     eax,ebx
c0028e35:	89 c3                	mov    ebx,eax
c0028e37:	c1 eb 08             	shr    ebx,0x8
c0028e3a:	a8 7f                	test   al,0x7f
c0028e3c:	0f 95 c2             	setne  dl
c0028e3f:	89 d6                	mov    esi,edx
c0028e41:	09 de                	or     esi,ebx
c0028e43:	83 e6 01             	and    esi,0x1
c0028e46:	c1 e8 07             	shr    eax,0x7
c0028e49:	21 f0                	and    eax,esi
c0028e4b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028e4e:	09 ca                	or     edx,ecx
c0028e50:	c1 e2 17             	shl    edx,0x17
c0028e53:	09 da                	or     edx,ebx
c0028e55:	01 d0                	add    eax,edx
c0028e57:	83 c4 0c             	add    esp,0xc
c0028e5a:	5b                   	pop    ebx
c0028e5b:	5e                   	pop    esi
c0028e5c:	5f                   	pop    edi
c0028e5d:	5d                   	pop    ebp
c0028e5e:	c3                   	ret    

c0028e5f <__extendsfdf2>:
c0028e5f:	55                   	push   ebp
c0028e60:	89 e5                	mov    ebp,esp
c0028e62:	57                   	push   edi
c0028e63:	56                   	push   esi
c0028e64:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028e67:	89 d1                	mov    ecx,edx
c0028e69:	c1 f9 17             	sar    ecx,0x17
c0028e6c:	c1 e2 08             	shl    edx,0x8
c0028e6f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028e75:	89 c8                	mov    eax,ecx
c0028e77:	80 e4 f8             	and    ah,0xf8
c0028e7a:	8d 71 01             	lea    esi,[ecx+0x1]
c0028e7d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028e83:	75 27                	jne    c0028eac <__extendsfdf2+0x4d>
c0028e85:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028e8b:	75 18                	jne    c0028ea5 <__extendsfdf2+0x46>
c0028e8d:	85 d2                	test   edx,edx
c0028e8f:	74 20                	je     c0028eb1 <__extendsfdf2+0x52>
c0028e91:	41                   	inc    ecx
c0028e92:	01 d2                	add    edx,edx
c0028e94:	79 fb                	jns    c0028e91 <__extendsfdf2+0x32>
c0028e96:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028e9c:	29 c8                	sub    eax,ecx
c0028e9e:	05 81 03 00 00       	add    eax,0x381
c0028ea3:	eb 0c                	jmp    c0028eb1 <__extendsfdf2+0x52>
c0028ea5:	05 00 07 00 00       	add    eax,0x700
c0028eaa:	eb 05                	jmp    c0028eb1 <__extendsfdf2+0x52>
c0028eac:	05 80 03 00 00       	add    eax,0x380
c0028eb1:	c1 e0 14             	shl    eax,0x14
c0028eb4:	89 c1                	mov    ecx,eax
c0028eb6:	89 d0                	mov    eax,edx
c0028eb8:	c1 e8 0b             	shr    eax,0xb
c0028ebb:	09 c1                	or     ecx,eax
c0028ebd:	c1 e2 15             	shl    edx,0x15
c0028ec0:	89 d0                	mov    eax,edx
c0028ec2:	89 ca                	mov    edx,ecx
c0028ec4:	5e                   	pop    esi
c0028ec5:	5f                   	pop    edi
c0028ec6:	5d                   	pop    ebp
c0028ec7:	c3                   	ret    
c0028ec8:	66 90                	xchg   ax,ax
c0028eca:	66 90                	xchg   ax,ax
c0028ecc:	66 90                	xchg   ax,ax
c0028ece:	66 90                	xchg   ax,ax

c0028ed0 <fabs>:
c0028ed0:	83 ec 0c             	sub    esp,0xc
c0028ed3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ed7:	89 04 24             	mov    DWORD PTR [esp],eax
c0028eda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028ede:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028ee3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028ee7:	dd 04 24             	fld    QWORD PTR [esp]
c0028eea:	83 c4 0c             	add    esp,0xc
c0028eed:	c3                   	ret    
c0028eee:	66 90                	xchg   ax,ax

c0028ef0 <lrint>:
c0028ef0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028ef4:	83 ec 04             	sub    esp,0x4
c0028ef7:	db 1c 24             	fistp  DWORD PTR [esp]
c0028efa:	58                   	pop    eax
c0028efb:	c3                   	ret    

c0028efc <lrintf>:
c0028efc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028f00:	83 ec 04             	sub    esp,0x4
c0028f03:	db 1c 24             	fistp  DWORD PTR [esp]
c0028f06:	58                   	pop    eax
c0028f07:	c3                   	ret    

Disassembly of section .init:

c0028f08 <_init>:
c0028f08:	55                   	push   ebp
c0028f09:	89 e5                	mov    ebp,esp
c0028f0b:	e8 08 72 fd ff       	call   c0000118 <frame_dummy>
c0028f10:	e8 5b e0 ff ff       	call   c0026f70 <__do_global_ctors_aux>
c0028f15:	5d                   	pop    ebp
c0028f16:	c3                   	ret    

Disassembly of section .fini:

c0028f17 <_fini>:
c0028f17:	55                   	push   ebp
c0028f18:	89 e5                	mov    ebp,esp
c0028f1a:	e8 89 71 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0028f1f:	5d                   	pop    ebp
c0028f20:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028f22 <Computer::~Computer()>:
c0028f22:	83 ec 0c             	sub    esp,0xc
c0028f25:	ba 48 ab 02 c0       	mov    edx,0xc002ab48
c0028f2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f2e:	89 10                	mov    DWORD PTR [eax],edx
c0028f30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f34:	83 ec 0c             	sub    esp,0xc
c0028f37:	50                   	push   eax
c0028f38:	e8 97 b2 fe ff       	call   c00141d4 <Device::~Device()>
c0028f3d:	83 c4 10             	add    esp,0x10
c0028f40:	90                   	nop
c0028f41:	83 c4 0c             	add    esp,0xc
c0028f44:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028f46 <Computer::~Computer()>:
c0028f46:	83 ec 0c             	sub    esp,0xc
c0028f49:	83 ec 0c             	sub    esp,0xc
c0028f4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f50:	e8 cd ff ff ff       	call   c0028f22 <Computer::~Computer()>
c0028f55:	83 c4 10             	add    esp,0x10
c0028f58:	83 ec 08             	sub    esp,0x8
c0028f5b:	68 ec 01 00 00       	push   0x1ec
c0028f60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f64:	e8 84 9e fe ff       	call   c0012ded <operator delete(void*, unsigned long)>
c0028f69:	83 c4 10             	add    esp,0x10
c0028f6c:	83 c4 0c             	add    esp,0xc
c0028f6f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028f70 <idleCommon()>:
c0028f70:	83 ec 0c             	sub    esp,0xc
c0028f73:	fa                   	cli    
c0028f74:	ff 05 28 24 03 c0    	inc    DWORD PTR ds:0xc0032428
c0028f7a:	e8 a7 55 ff ff       	call   c001e526 <schedule()>
c0028f7f:	a1 28 24 03 c0       	mov    eax,ds:0xc0032428
c0028f84:	48                   	dec    eax
c0028f85:	a3 28 24 03 c0       	mov    ds:0xc0032428,eax
c0028f8a:	75 01                	jne    c0028f8d <idleCommon()+0x1d>
c0028f8c:	fb                   	sti    
c0028f8d:	83 c4 0c             	add    esp,0xc
c0028f90:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028f92 <LinkedList<UnixFile>::~LinkedList()>:
c0028f92:	90                   	nop
c0028f93:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028f94 <LinkedList<UnixFile>::LinkedList()>:
c0028f94:	83 ec 0c             	sub    esp,0xc
c0028f97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f9b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028fa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028fac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fb0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028fb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fbb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028fc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028fcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fd0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028fd7:	83 ec 0c             	sub    esp,0xc
c0028fda:	68 06 ae 02 c0       	push   0xc002ae06
c0028fdf:	e8 e9 9e fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c0028fe4:	83 c4 10             	add    esp,0x10
c0028fe7:	90                   	nop
c0028fe8:	83 c4 0c             	add    esp,0xc
c0028feb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028fec <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028fec:	83 ec 0c             	sub    esp,0xc
c0028fef:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028ff4:	75 10                	jne    c0029006 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028ff6:	83 ec 0c             	sub    esp,0xc
c0028ff9:	68 20 ae 02 c0       	push   0xc002ae20
c0028ffe:	e8 8d 18 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c0029003:	83 c4 10             	add    esp,0x10
c0029006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002900a:	8b 00                	mov    eax,DWORD PTR [eax]
c002900c:	85 c0                	test   eax,eax
c002900e:	74 34                	je     c0029044 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0029010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029014:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029017:	85 c0                	test   eax,eax
c0029019:	74 29                	je     c0029044 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002901b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002901f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029022:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029026:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002902d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029031:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029038:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002903b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029042:	eb 65                	jmp    c00290a9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029048:	8b 00                	mov    eax,DWORD PTR [eax]
c002904a:	85 c0                	test   eax,eax
c002904c:	75 4b                	jne    c0029099 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002904e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029052:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029055:	85 c0                	test   eax,eax
c0029057:	75 40                	jne    c0029099 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0029059:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002905d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029061:	89 10                	mov    DWORD PTR [eax],edx
c0029063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029067:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002906b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002906e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029072:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029075:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002907c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029080:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029083:	85 c0                	test   eax,eax
c0029085:	74 22                	je     c00290a9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029087:	83 ec 0c             	sub    esp,0xc
c002908a:	68 42 ae 02 c0       	push   0xc002ae42
c002908f:	e8 fc 17 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c0029094:	83 c4 10             	add    esp,0x10
c0029097:	eb 10                	jmp    c00290a9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029099:	83 ec 0c             	sub    esp,0xc
c002909c:	68 4c ae 02 c0       	push   0xc002ae4c
c00290a1:	e8 ea 17 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c00290a6:	83 c4 10             	add    esp,0x10
c00290a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ad:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290b0:	8d 50 01             	lea    edx,[eax+0x1]
c00290b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00290ba:	90                   	nop
c00290bb:	83 c4 0c             	add    esp,0xc
c00290be:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00290c0 <LinkedList<UnixFile>::getFirstElement()>:
c00290c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00290c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00290c6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00290c8 <LinkedList<UnixFile>::removeFirst()>:
c00290c8:	83 ec 0c             	sub    esp,0xc
c00290cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00290d1:	85 c0                	test   eax,eax
c00290d3:	75 12                	jne    c00290e7 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00290d5:	83 ec 0c             	sub    esp,0xc
c00290d8:	68 58 ae 02 c0       	push   0xc002ae58
c00290dd:	e8 ae 17 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c00290e2:	83 c4 10             	add    esp,0x10
c00290e5:	eb 7e                	jmp    c0029165 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00290e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00290ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290f1:	85 c0                	test   eax,eax
c00290f3:	74 10                	je     c0029105 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00290f5:	83 ec 0c             	sub    esp,0xc
c00290f8:	68 a3 ae 02 c0       	push   0xc002aea3
c00290fd:	e8 8e 17 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c0029102:	83 c4 10             	add    esp,0x10
c0029105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029109:	8b 00                	mov    eax,DWORD PTR [eax]
c002910b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002910e:	85 c0                	test   eax,eax
c0029110:	75 33                	jne    c0029145 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0029112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029116:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002911c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029120:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002912b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002912e:	83 f8 01             	cmp    eax,0x1
c0029131:	74 21                	je     c0029154 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029133:	83 ec 0c             	sub    esp,0xc
c0029136:	68 7c ae 02 c0       	push   0xc002ae7c
c002913b:	e8 50 17 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c0029140:	83 c4 10             	add    esp,0x10
c0029143:	eb 0f                	jmp    c0029154 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029149:	8b 00                	mov    eax,DWORD PTR [eax]
c002914b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002914e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029152:	89 10                	mov    DWORD PTR [eax],edx
c0029154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029158:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002915b:	8d 50 ff             	lea    edx,[eax-0x1]
c002915e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029162:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029165:	83 c4 0c             	add    esp,0xc
c0029168:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002916a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002916a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002916e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029171:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0029172 <DriverlessDevice::~DriverlessDevice()>:
c0029172:	ba 24 b6 02 c0       	mov    edx,0xc002b624
c0029177:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002917b:	89 10                	mov    DWORD PTR [eax],edx
c002917d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029181:	50                   	push   eax
c0029182:	e8 4d b0 fe ff       	call   c00141d4 <Device::~Device()>
c0029187:	83 c4 04             	add    esp,0x4
c002918a:	90                   	nop
c002918b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002918c <DriverlessDevice::~DriverlessDevice()>:
c002918c:	83 ec 0c             	sub    esp,0xc
c002918f:	83 ec 0c             	sub    esp,0xc
c0029192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029196:	e8 d7 ff ff ff       	call   c0029172 <DriverlessDevice::~DriverlessDevice()>
c002919b:	83 c4 10             	add    esp,0x10
c002919e:	83 ec 08             	sub    esp,0x8
c00291a1:	68 58 01 00 00       	push   0x158
c00291a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291aa:	e8 3e 9c fe ff       	call   c0012ded <operator delete(void*, unsigned long)>
c00291af:	83 c4 10             	add    esp,0x10
c00291b2:	83 c4 0c             	add    esp,0xc
c00291b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00291b6 <LinkedList<Device>::addElement(Device*)>:
c00291b6:	83 ec 0c             	sub    esp,0xc
c00291b9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00291be:	75 10                	jne    c00291d0 <LinkedList<Device>::addElement(Device*)+0x1a>
c00291c0:	83 ec 0c             	sub    esp,0xc
c00291c3:	68 20 ae 02 c0       	push   0xc002ae20
c00291c8:	e8 c3 16 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c00291cd:	83 c4 10             	add    esp,0x10
c00291d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00291d6:	85 c0                	test   eax,eax
c00291d8:	74 3a                	je     c0029214 <LinkedList<Device>::addElement(Device*)+0x5e>
c00291da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00291e1:	85 c0                	test   eax,eax
c00291e3:	74 2f                	je     c0029214 <LinkedList<Device>::addElement(Device*)+0x5e>
c00291e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00291ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00291f0:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00291f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00291fe:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029205:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029208:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0029212:	eb 68                	jmp    c002927c <LinkedList<Device>::addElement(Device*)+0xc6>
c0029214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029218:	8b 00                	mov    eax,DWORD PTR [eax]
c002921a:	85 c0                	test   eax,eax
c002921c:	75 4e                	jne    c002926c <LinkedList<Device>::addElement(Device*)+0xb6>
c002921e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029222:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029225:	85 c0                	test   eax,eax
c0029227:	75 43                	jne    c002926c <LinkedList<Device>::addElement(Device*)+0xb6>
c0029229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002922d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029231:	89 10                	mov    DWORD PTR [eax],edx
c0029233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029237:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002923b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002923e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029242:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029245:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002924f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029253:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029256:	85 c0                	test   eax,eax
c0029258:	74 22                	je     c002927c <LinkedList<Device>::addElement(Device*)+0xc6>
c002925a:	83 ec 0c             	sub    esp,0xc
c002925d:	68 42 ae 02 c0       	push   0xc002ae42
c0029262:	e8 29 16 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c0029267:	83 c4 10             	add    esp,0x10
c002926a:	eb 10                	jmp    c002927c <LinkedList<Device>::addElement(Device*)+0xc6>
c002926c:	83 ec 0c             	sub    esp,0xc
c002926f:	68 4c ae 02 c0       	push   0xc002ae4c
c0029274:	e8 17 16 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c0029279:	83 c4 10             	add    esp,0x10
c002927c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029280:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029283:	8d 50 01             	lea    edx,[eax+0x1]
c0029286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002928a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002928d:	90                   	nop
c002928e:	83 c4 0c             	add    esp,0xc
c0029291:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0029292 <LinkedList<Device>::LinkedList()>:
c0029292:	83 ec 0c             	sub    esp,0xc
c0029295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029299:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002929f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00292aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292ae:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00292b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292b9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00292bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292c3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00292ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292ce:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00292d5:	83 ec 0c             	sub    esp,0xc
c00292d8:	68 06 ae 02 c0       	push   0xc002ae06
c00292dd:	e8 eb 9b fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c00292e2:	83 c4 10             	add    esp,0x10
c00292e5:	90                   	nop
c00292e6:	83 c4 0c             	add    esp,0xc
c00292e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00292ea <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00292ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00292ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00292f0:	85 c0                	test   eax,eax
c00292f2:	75 0e                	jne    c0029302 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00292f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00292f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00292fb:	85 c0                	test   eax,eax
c00292fd:	75 03                	jne    c0029302 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00292ff:	b0 01                	mov    al,0x1
c0029301:	c3                   	ret    
c0029302:	b0 00                	mov    al,0x0
c0029304:	90                   	nop
c0029305:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0029306 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0029306:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002930a:	8b 00                	mov    eax,DWORD PTR [eax]
c002930c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002930e <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002930e:	83 ec 0c             	sub    esp,0xc
c0029311:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029315:	8b 00                	mov    eax,DWORD PTR [eax]
c0029317:	85 c0                	test   eax,eax
c0029319:	75 15                	jne    c0029330 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002931b:	83 ec 0c             	sub    esp,0xc
c002931e:	68 58 ae 02 c0       	push   0xc002ae58
c0029323:	e8 68 15 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c0029328:	83 c4 10             	add    esp,0x10
c002932b:	e9 88 00 00 00       	jmp    c00293b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0029330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029334:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029337:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002933a:	85 c0                	test   eax,eax
c002933c:	0f 95 c0             	setne  al
c002933f:	84 c0                	test   al,al
c0029341:	74 10                	je     c0029353 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0029343:	83 ec 0c             	sub    esp,0xc
c0029346:	68 a3 ae 02 c0       	push   0xc002aea3
c002934b:	e8 40 15 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c0029350:	83 c4 10             	add    esp,0x10
c0029353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029357:	8b 00                	mov    eax,DWORD PTR [eax]
c0029359:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002935c:	85 c0                	test   eax,eax
c002935e:	0f 94 c0             	sete   al
c0029361:	84 c0                	test   al,al
c0029363:	74 33                	je     c0029398 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0029365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029369:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002936f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029373:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002937a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002937e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029381:	83 f8 01             	cmp    eax,0x1
c0029384:	74 21                	je     c00293a7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029386:	83 ec 0c             	sub    esp,0xc
c0029389:	68 7c ae 02 c0       	push   0xc002ae7c
c002938e:	e8 fd 14 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c0029393:	83 c4 10             	add    esp,0x10
c0029396:	eb 0f                	jmp    c00293a7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002939c:	8b 00                	mov    eax,DWORD PTR [eax]
c002939e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00293a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293a5:	89 10                	mov    DWORD PTR [eax],edx
c00293a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293ab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00293ae:	8d 50 ff             	lea    edx,[eax-0x1]
c00293b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293b5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00293b8:	83 c4 0c             	add    esp,0xc
c00293bb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00293bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00293bc:	83 ec 0c             	sub    esp,0xc
c00293bf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00293c4:	75 10                	jne    c00293d6 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c00293c6:	83 ec 0c             	sub    esp,0xc
c00293c9:	68 20 ae 02 c0       	push   0xc002ae20
c00293ce:	e8 bd 14 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c00293d3:	83 c4 10             	add    esp,0x10
c00293d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293da:	8b 00                	mov    eax,DWORD PTR [eax]
c00293dc:	85 c0                	test   eax,eax
c00293de:	74 34                	je     c0029414 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00293e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293e7:	85 c0                	test   eax,eax
c00293e9:	74 29                	je     c0029414 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00293eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293f6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00293f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029401:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029408:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002940b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029412:	eb 65                	jmp    c0029479 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029418:	8b 00                	mov    eax,DWORD PTR [eax]
c002941a:	85 c0                	test   eax,eax
c002941c:	75 4b                	jne    c0029469 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002941e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029422:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029425:	85 c0                	test   eax,eax
c0029427:	75 40                	jne    c0029469 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0029429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002942d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029431:	89 10                	mov    DWORD PTR [eax],edx
c0029433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029437:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002943b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002943e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029442:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029445:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002944c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029450:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029453:	85 c0                	test   eax,eax
c0029455:	74 22                	je     c0029479 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029457:	83 ec 0c             	sub    esp,0xc
c002945a:	68 42 ae 02 c0       	push   0xc002ae42
c002945f:	e8 2c 14 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c0029464:	83 c4 10             	add    esp,0x10
c0029467:	eb 10                	jmp    c0029479 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029469:	83 ec 0c             	sub    esp,0xc
c002946c:	68 4c ae 02 c0       	push   0xc002ae4c
c0029471:	e8 1a 14 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c0029476:	83 c4 10             	add    esp,0x10
c0029479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002947d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029480:	8d 50 01             	lea    edx,[eax+0x1]
c0029483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029487:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002948a:	90                   	nop
c002948b:	83 c4 0c             	add    esp,0xc
c002948e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0029490 <ACPI::~ACPI()>:
c0029490:	83 ec 0c             	sub    esp,0xc
c0029493:	ba 50 c0 02 c0       	mov    edx,0xc002c050
c0029498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002949c:	89 10                	mov    DWORD PTR [eax],edx
c002949e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294a2:	83 ec 0c             	sub    esp,0xc
c00294a5:	50                   	push   eax
c00294a6:	e8 29 ad fe ff       	call   c00141d4 <Device::~Device()>
c00294ab:	83 c4 10             	add    esp,0x10
c00294ae:	90                   	nop
c00294af:	83 c4 0c             	add    esp,0xc
c00294b2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00294b4 <ACPI::~ACPI()>:
c00294b4:	83 ec 0c             	sub    esp,0xc
c00294b7:	83 ec 0c             	sub    esp,0xc
c00294ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294be:	e8 cd ff ff ff       	call   c0029490 <ACPI::~ACPI()>
c00294c3:	83 c4 10             	add    esp,0x10
c00294c6:	83 ec 08             	sub    esp,0x8
c00294c9:	68 68 12 00 00       	push   0x1268
c00294ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294d2:	e8 16 99 fe ff       	call   c0012ded <operator delete(void*, unsigned long)>
c00294d7:	83 c4 10             	add    esp,0x10
c00294da:	83 c4 0c             	add    esp,0xc
c00294dd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00294de <LinkedList<Device>::~LinkedList()>:
c00294de:	90                   	nop
c00294df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00294e0 <LinkedList<Device>::isEmpty()>:
c00294e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00294e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00294e6:	85 c0                	test   eax,eax
c00294e8:	75 0e                	jne    c00294f8 <LinkedList<Device>::isEmpty()+0x18>
c00294ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00294ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00294f1:	85 c0                	test   eax,eax
c00294f3:	75 03                	jne    c00294f8 <LinkedList<Device>::isEmpty()+0x18>
c00294f5:	b0 01                	mov    al,0x1
c00294f7:	c3                   	ret    
c00294f8:	b0 00                	mov    al,0x0
c00294fa:	90                   	nop
c00294fb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00294fc <LinkedList<Device>::getFirstElement()>:
c00294fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029500:	8b 00                	mov    eax,DWORD PTR [eax]
c0029502:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0029504 <LinkedList<Device>::removeFirst()>:
c0029504:	83 ec 0c             	sub    esp,0xc
c0029507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002950b:	8b 00                	mov    eax,DWORD PTR [eax]
c002950d:	85 c0                	test   eax,eax
c002950f:	75 15                	jne    c0029526 <LinkedList<Device>::removeFirst()+0x22>
c0029511:	83 ec 0c             	sub    esp,0xc
c0029514:	68 58 ae 02 c0       	push   0xc002ae58
c0029519:	e8 72 13 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c002951e:	83 c4 10             	add    esp,0x10
c0029521:	e9 87 00 00 00       	jmp    c00295ad <LinkedList<Device>::removeFirst()+0xa9>
c0029526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002952a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002952d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029533:	85 c0                	test   eax,eax
c0029535:	74 10                	je     c0029547 <LinkedList<Device>::removeFirst()+0x43>
c0029537:	83 ec 0c             	sub    esp,0xc
c002953a:	68 a3 ae 02 c0       	push   0xc002aea3
c002953f:	e8 4c 13 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c0029544:	83 c4 10             	add    esp,0x10
c0029547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002954b:	8b 00                	mov    eax,DWORD PTR [eax]
c002954d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029553:	85 c0                	test   eax,eax
c0029555:	75 33                	jne    c002958a <LinkedList<Device>::removeFirst()+0x86>
c0029557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002955b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029561:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029565:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002956c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029570:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029573:	83 f8 01             	cmp    eax,0x1
c0029576:	74 24                	je     c002959c <LinkedList<Device>::removeFirst()+0x98>
c0029578:	83 ec 0c             	sub    esp,0xc
c002957b:	68 7c ae 02 c0       	push   0xc002ae7c
c0029580:	e8 0b 13 ff ff       	call   c001a890 <Krnl::panic(char const*)>
c0029585:	83 c4 10             	add    esp,0x10
c0029588:	eb 12                	jmp    c002959c <LinkedList<Device>::removeFirst()+0x98>
c002958a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002958e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029590:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0029596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002959a:	89 10                	mov    DWORD PTR [eax],edx
c002959c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00295a3:	8d 50 ff             	lea    edx,[eax-0x1]
c00295a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295aa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00295ad:	83 c4 0c             	add    esp,0xc
c00295b0:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00295b2 <CPU::~CPU()>:
c00295b2:	83 ec 0c             	sub    esp,0xc
c00295b5:	ba 40 c4 02 c0       	mov    edx,0xc002c440
c00295ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295be:	89 10                	mov    DWORD PTR [eax],edx
c00295c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295c4:	83 ec 0c             	sub    esp,0xc
c00295c7:	50                   	push   eax
c00295c8:	e8 07 ac fe ff       	call   c00141d4 <Device::~Device()>
c00295cd:	83 c4 10             	add    esp,0x10
c00295d0:	90                   	nop
c00295d1:	83 c4 0c             	add    esp,0xc
c00295d4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00295d6 <CPU::~CPU()>:
c00295d6:	83 ec 0c             	sub    esp,0xc
c00295d9:	83 ec 0c             	sub    esp,0xc
c00295dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295e0:	e8 cd ff ff ff       	call   c00295b2 <CPU::~CPU()>
c00295e5:	83 c4 10             	add    esp,0x10
c00295e8:	83 ec 08             	sub    esp,0x8
c00295eb:	68 98 11 00 00       	push   0x1198
c00295f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295f4:	e8 f4 97 fe ff       	call   c0012ded <operator delete(void*, unsigned long)>
c00295f9:	83 c4 10             	add    esp,0x10
c00295fc:	83 c4 0c             	add    esp,0xc
c00295ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029600 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029600:	90                   	nop
c0029601:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029602 <ThreadControlBlock::ThreadControlBlock()>:
c0029602:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029606:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002960d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029611:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0029618:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002961c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0029623:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029627:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002962e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029632:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0029639:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002963d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0029641:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029645:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0029649:	90                   	nop
c002964a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002964c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002964c:	83 ec 0c             	sub    esp,0xc
c002964f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029653:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002965d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029668:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002966f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029673:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002967d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029688:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002968f:	83 ec 0c             	sub    esp,0xc
c0029692:	68 06 ae 02 c0       	push   0xc002ae06
c0029697:	e8 31 98 fe ff       	call   c0012ecd <Dbg::kprintf(char const*, ...)>
c002969c:	83 c4 10             	add    esp,0x10
c002969f:	90                   	nop
c00296a0:	83 c4 0c             	add    esp,0xc
c00296a3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00296a4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00296a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00296a8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00296ab:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00296ac <Vm::_FPUState::_FPUState()>:
c00296ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00296b0:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00296b7:	90                   	nop
c00296b8:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00296ba <PCI::~PCI()>:
c00296ba:	83 ec 0c             	sub    esp,0xc
c00296bd:	ba 44 d5 02 c0       	mov    edx,0xc002d544
c00296c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296c6:	89 10                	mov    DWORD PTR [eax],edx
c00296c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296cc:	83 ec 0c             	sub    esp,0xc
c00296cf:	50                   	push   eax
c00296d0:	e8 cf a4 fe ff       	call   c0013ba4 <Bus::~Bus()>
c00296d5:	83 c4 10             	add    esp,0x10
c00296d8:	90                   	nop
c00296d9:	83 c4 0c             	add    esp,0xc
c00296dc:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00296de <PCI::~PCI()>:
c00296de:	83 ec 0c             	sub    esp,0xc
c00296e1:	83 ec 0c             	sub    esp,0xc
c00296e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296e8:	e8 cd ff ff ff       	call   c00296ba <PCI::~PCI()>
c00296ed:	83 c4 10             	add    esp,0x10
c00296f0:	83 ec 08             	sub    esp,0x8
c00296f3:	68 58 01 00 00       	push   0x158
c00296f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296fc:	e8 ec 96 fe ff       	call   c0012ded <operator delete(void*, unsigned long)>
c0029701:	83 c4 10             	add    esp,0x10
c0029704:	83 c4 0c             	add    esp,0xc
c0029707:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0029708 <IDE::~IDE()>:
c0029708:	83 ec 0c             	sub    esp,0xc
c002970b:	ba a8 d7 02 c0       	mov    edx,0xc002d7a8
c0029710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029714:	89 10                	mov    DWORD PTR [eax],edx
c0029716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002971a:	83 ec 0c             	sub    esp,0xc
c002971d:	50                   	push   eax
c002971e:	e8 9d af fe ff       	call   c00146c0 <HardDiskController::~HardDiskController()>
c0029723:	83 c4 10             	add    esp,0x10
c0029726:	90                   	nop
c0029727:	83 c4 0c             	add    esp,0xc
c002972a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002972c <IDE::~IDE()>:
c002972c:	83 ec 0c             	sub    esp,0xc
c002972f:	83 ec 0c             	sub    esp,0xc
c0029732:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029736:	e8 cd ff ff ff       	call   c0029708 <IDE::~IDE()>
c002973b:	83 c4 10             	add    esp,0x10
c002973e:	83 ec 08             	sub    esp,0x8
c0029741:	68 70 02 00 00       	push   0x270
c0029746:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002974a:	e8 9e 96 fe ff       	call   c0012ded <operator delete(void*, unsigned long)>
c002974f:	83 c4 10             	add    esp,0x10
c0029752:	83 c4 0c             	add    esp,0xc
c0029755:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0029756 <SATABus::~SATABus()>:
c0029756:	83 ec 0c             	sub    esp,0xc
c0029759:	ba 88 d8 02 c0       	mov    edx,0xc002d888
c002975e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029762:	89 10                	mov    DWORD PTR [eax],edx
c0029764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029768:	83 ec 0c             	sub    esp,0xc
c002976b:	50                   	push   eax
c002976c:	e8 4f af fe ff       	call   c00146c0 <HardDiskController::~HardDiskController()>
c0029771:	83 c4 10             	add    esp,0x10
c0029774:	90                   	nop
c0029775:	83 c4 0c             	add    esp,0xc
c0029778:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002977a <SATABus::~SATABus()>:
c002977a:	83 ec 0c             	sub    esp,0xc
c002977d:	83 ec 0c             	sub    esp,0xc
c0029780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029784:	e8 cd ff ff ff       	call   c0029756 <SATABus::~SATABus()>
c0029789:	83 c4 10             	add    esp,0x10
c002978c:	83 ec 08             	sub    esp,0x8
c002978f:	68 64 01 00 00       	push   0x164
c0029794:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029798:	e8 50 96 fe ff       	call   c0012ded <operator delete(void*, unsigned long)>
c002979d:	83 c4 10             	add    esp,0x10
c00297a0:	83 c4 0c             	add    esp,0xc
c00297a3:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00297a4 <ATA::~ATA()>:
c00297a4:	83 ec 0c             	sub    esp,0xc
c00297a7:	ba d4 d8 02 c0       	mov    edx,0xc002d8d4
c00297ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297b0:	89 10                	mov    DWORD PTR [eax],edx
c00297b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297b6:	83 ec 0c             	sub    esp,0xc
c00297b9:	50                   	push   eax
c00297ba:	e8 f3 af fe ff       	call   c00147b2 <PhysicalDisk::~PhysicalDisk()>
c00297bf:	83 c4 10             	add    esp,0x10
c00297c2:	90                   	nop
c00297c3:	83 c4 0c             	add    esp,0xc
c00297c6:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00297c8 <ATA::~ATA()>:
c00297c8:	83 ec 0c             	sub    esp,0xc
c00297cb:	83 ec 0c             	sub    esp,0xc
c00297ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297d2:	e8 cd ff ff ff       	call   c00297a4 <ATA::~ATA()>
c00297d7:	83 c4 10             	add    esp,0x10
c00297da:	83 ec 08             	sub    esp,0x8
c00297dd:	68 7c 01 00 00       	push   0x17c
c00297e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297e6:	e8 02 96 fe ff       	call   c0012ded <operator delete(void*, unsigned long)>
c00297eb:	83 c4 10             	add    esp,0x10
c00297ee:	83 c4 0c             	add    esp,0xc
c00297f1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00297f2 <ATAPI::~ATAPI()>:
c00297f2:	83 ec 0c             	sub    esp,0xc
c00297f5:	ba 0c d9 02 c0       	mov    edx,0xc002d90c
c00297fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297fe:	89 10                	mov    DWORD PTR [eax],edx
c0029800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029804:	83 ec 0c             	sub    esp,0xc
c0029807:	50                   	push   eax
c0029808:	e8 a5 af fe ff       	call   c00147b2 <PhysicalDisk::~PhysicalDisk()>
c002980d:	83 c4 10             	add    esp,0x10
c0029810:	90                   	nop
c0029811:	83 c4 0c             	add    esp,0xc
c0029814:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029816 <ATAPI::~ATAPI()>:
c0029816:	83 ec 0c             	sub    esp,0xc
c0029819:	83 ec 0c             	sub    esp,0xc
c002981c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029820:	e8 cd ff ff ff       	call   c00297f2 <ATAPI::~ATAPI()>
c0029825:	83 c4 10             	add    esp,0x10
c0029828:	83 ec 08             	sub    esp,0x8
c002982b:	68 80 01 00 00       	push   0x180
c0029830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029834:	e8 b4 95 fe ff       	call   c0012ded <operator delete(void*, unsigned long)>
c0029839:	83 c4 10             	add    esp,0x10
c002983c:	83 c4 0c             	add    esp,0xc
c002983f:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0029840 <SATA::~SATA()>:
c0029840:	83 ec 0c             	sub    esp,0xc
c0029843:	ba c0 d9 02 c0       	mov    edx,0xc002d9c0
c0029848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002984c:	89 10                	mov    DWORD PTR [eax],edx
c002984e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029852:	83 ec 0c             	sub    esp,0xc
c0029855:	50                   	push   eax
c0029856:	e8 57 af fe ff       	call   c00147b2 <PhysicalDisk::~PhysicalDisk()>
c002985b:	83 c4 10             	add    esp,0x10
c002985e:	90                   	nop
c002985f:	83 c4 0c             	add    esp,0xc
c0029862:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0029864 <SATA::~SATA()>:
c0029864:	83 ec 0c             	sub    esp,0xc
c0029867:	83 ec 0c             	sub    esp,0xc
c002986a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002986e:	e8 cd ff ff ff       	call   c0029840 <SATA::~SATA()>
c0029873:	83 c4 10             	add    esp,0x10
c0029876:	83 ec 08             	sub    esp,0x8
c0029879:	68 7c 01 00 00       	push   0x17c
c002987e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029882:	e8 66 95 fe ff       	call   c0012ded <operator delete(void*, unsigned long)>
c0029887:	83 c4 10             	add    esp,0x10
c002988a:	83 c4 0c             	add    esp,0xc
c002988d:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002988e <SATAPI::~SATAPI()>:
c002988e:	83 ec 0c             	sub    esp,0xc
c0029891:	ba 9c da 02 c0       	mov    edx,0xc002da9c
c0029896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002989a:	89 10                	mov    DWORD PTR [eax],edx
c002989c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298a0:	83 ec 0c             	sub    esp,0xc
c00298a3:	50                   	push   eax
c00298a4:	e8 09 af fe ff       	call   c00147b2 <PhysicalDisk::~PhysicalDisk()>
c00298a9:	83 c4 10             	add    esp,0x10
c00298ac:	90                   	nop
c00298ad:	83 c4 0c             	add    esp,0xc
c00298b0:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00298b2 <SATAPI::~SATAPI()>:
c00298b2:	83 ec 0c             	sub    esp,0xc
c00298b5:	83 ec 0c             	sub    esp,0xc
c00298b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298bc:	e8 cd ff ff ff       	call   c002988e <SATAPI::~SATAPI()>
c00298c1:	83 c4 10             	add    esp,0x10
c00298c4:	83 ec 08             	sub    esp,0x8
c00298c7:	68 80 01 00 00       	push   0x180
c00298cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298d0:	e8 18 95 fe ff       	call   c0012ded <operator delete(void*, unsigned long)>
c00298d5:	83 c4 10             	add    esp,0x10
c00298d8:	83 c4 0c             	add    esp,0xc
c00298db:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00298dc <AVX::~AVX()>:
c00298dc:	83 ec 0c             	sub    esp,0xc
c00298df:	ba dc da 02 c0       	mov    edx,0xc002dadc
c00298e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298e8:	89 10                	mov    DWORD PTR [eax],edx
c00298ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298ee:	83 ec 0c             	sub    esp,0xc
c00298f1:	50                   	push   eax
c00298f2:	e8 3f af fe ff       	call   c0014836 <FPU::~FPU()>
c00298f7:	83 c4 10             	add    esp,0x10
c00298fa:	90                   	nop
c00298fb:	83 c4 0c             	add    esp,0xc
c00298fe:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029900 <AVX::~AVX()>:
c0029900:	83 ec 0c             	sub    esp,0xc
c0029903:	83 ec 0c             	sub    esp,0xc
c0029906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002990a:	e8 cd ff ff ff       	call   c00298dc <AVX::~AVX()>
c002990f:	83 c4 10             	add    esp,0x10
c0029912:	83 ec 08             	sub    esp,0x8
c0029915:	68 58 01 00 00       	push   0x158
c002991a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002991e:	e8 ca 94 fe ff       	call   c0012ded <operator delete(void*, unsigned long)>
c0029923:	83 c4 10             	add    esp,0x10
c0029926:	83 c4 0c             	add    esp,0xc
c0029929:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002992a <MMX::~MMX()>:
c002992a:	83 ec 0c             	sub    esp,0xc
c002992d:	ba 1c db 02 c0       	mov    edx,0xc002db1c
c0029932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029936:	89 10                	mov    DWORD PTR [eax],edx
c0029938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002993c:	83 ec 0c             	sub    esp,0xc
c002993f:	50                   	push   eax
c0029940:	e8 f1 ae fe ff       	call   c0014836 <FPU::~FPU()>
c0029945:	83 c4 10             	add    esp,0x10
c0029948:	90                   	nop
c0029949:	83 c4 0c             	add    esp,0xc
c002994c:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c002994e <MMX::~MMX()>:
c002994e:	83 ec 0c             	sub    esp,0xc
c0029951:	83 ec 0c             	sub    esp,0xc
c0029954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029958:	e8 cd ff ff ff       	call   c002992a <MMX::~MMX()>
c002995d:	83 c4 10             	add    esp,0x10
c0029960:	83 ec 08             	sub    esp,0x8
c0029963:	68 58 01 00 00       	push   0x158
c0029968:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002996c:	e8 7c 94 fe ff       	call   c0012ded <operator delete(void*, unsigned long)>
c0029971:	83 c4 10             	add    esp,0x10
c0029974:	83 c4 0c             	add    esp,0xc
c0029977:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0029978 <SSE::~SSE()>:
c0029978:	83 ec 0c             	sub    esp,0xc
c002997b:	ba 5c db 02 c0       	mov    edx,0xc002db5c
c0029980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029984:	89 10                	mov    DWORD PTR [eax],edx
c0029986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002998a:	83 ec 0c             	sub    esp,0xc
c002998d:	50                   	push   eax
c002998e:	e8 a3 ae fe ff       	call   c0014836 <FPU::~FPU()>
c0029993:	83 c4 10             	add    esp,0x10
c0029996:	90                   	nop
c0029997:	83 c4 0c             	add    esp,0xc
c002999a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002999c <SSE::~SSE()>:
c002999c:	83 ec 0c             	sub    esp,0xc
c002999f:	83 ec 0c             	sub    esp,0xc
c00299a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299a6:	e8 cd ff ff ff       	call   c0029978 <SSE::~SSE()>
c00299ab:	83 c4 10             	add    esp,0x10
c00299ae:	83 ec 08             	sub    esp,0x8
c00299b1:	68 58 01 00 00       	push   0x158
c00299b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299ba:	e8 2e 94 fe ff       	call   c0012ded <operator delete(void*, unsigned long)>
c00299bf:	83 c4 10             	add    esp,0x10
c00299c2:	83 c4 0c             	add    esp,0xc
c00299c5:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00299c6 <x87::~x87()>:
c00299c6:	83 ec 0c             	sub    esp,0xc
c00299c9:	ba 9c db 02 c0       	mov    edx,0xc002db9c
c00299ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299d2:	89 10                	mov    DWORD PTR [eax],edx
c00299d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299d8:	83 ec 0c             	sub    esp,0xc
c00299db:	50                   	push   eax
c00299dc:	e8 55 ae fe ff       	call   c0014836 <FPU::~FPU()>
c00299e1:	83 c4 10             	add    esp,0x10
c00299e4:	90                   	nop
c00299e5:	83 c4 0c             	add    esp,0xc
c00299e8:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00299ea <x87::~x87()>:
c00299ea:	83 ec 0c             	sub    esp,0xc
c00299ed:	83 ec 0c             	sub    esp,0xc
c00299f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299f4:	e8 cd ff ff ff       	call   c00299c6 <x87::~x87()>
c00299f9:	83 c4 10             	add    esp,0x10
c00299fc:	83 ec 08             	sub    esp,0x8
c00299ff:	68 58 01 00 00       	push   0x158
c0029a04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a08:	e8 e0 93 fe ff       	call   c0012ded <operator delete(void*, unsigned long)>
c0029a0d:	83 c4 10             	add    esp,0x10
c0029a10:	83 c4 0c             	add    esp,0xc
c0029a13:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029a14 <IOAPIC::~IOAPIC()>:
c0029a14:	83 ec 0c             	sub    esp,0xc
c0029a17:	ba f4 dc 02 c0       	mov    edx,0xc002dcf4
c0029a1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a20:	89 10                	mov    DWORD PTR [eax],edx
c0029a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a26:	83 ec 0c             	sub    esp,0xc
c0029a29:	50                   	push   eax
c0029a2a:	e8 a5 a7 fe ff       	call   c00141d4 <Device::~Device()>
c0029a2f:	83 c4 10             	add    esp,0x10
c0029a32:	90                   	nop
c0029a33:	83 c4 0c             	add    esp,0xc
c0029a36:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029a38 <IOAPIC::~IOAPIC()>:
c0029a38:	83 ec 0c             	sub    esp,0xc
c0029a3b:	83 ec 0c             	sub    esp,0xc
c0029a3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a42:	e8 cd ff ff ff       	call   c0029a14 <IOAPIC::~IOAPIC()>
c0029a47:	83 c4 10             	add    esp,0x10
c0029a4a:	83 ec 08             	sub    esp,0x8
c0029a4d:	68 68 01 00 00       	push   0x168
c0029a52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a56:	e8 92 93 fe ff       	call   c0012ded <operator delete(void*, unsigned long)>
c0029a5b:	83 c4 10             	add    esp,0x10
c0029a5e:	83 c4 0c             	add    esp,0xc
c0029a61:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029a62 <APIC::~APIC()>:
c0029a62:	83 ec 0c             	sub    esp,0xc
c0029a65:	ba ac dc 02 c0       	mov    edx,0xc002dcac
c0029a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a6e:	89 10                	mov    DWORD PTR [eax],edx
c0029a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a74:	83 ec 0c             	sub    esp,0xc
c0029a77:	50                   	push   eax
c0029a78:	e8 83 b2 fe ff       	call   c0014d00 <InterruptController::~InterruptController()>
c0029a7d:	83 c4 10             	add    esp,0x10
c0029a80:	90                   	nop
c0029a81:	83 c4 0c             	add    esp,0xc
c0029a84:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029a86 <APIC::~APIC()>:
c0029a86:	83 ec 0c             	sub    esp,0xc
c0029a89:	83 ec 0c             	sub    esp,0xc
c0029a8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a90:	e8 cd ff ff ff       	call   c0029a62 <APIC::~APIC()>
c0029a95:	83 c4 10             	add    esp,0x10
c0029a98:	83 ec 08             	sub    esp,0x8
c0029a9b:	68 58 21 00 00       	push   0x2158
c0029aa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029aa4:	e8 44 93 fe ff       	call   c0012ded <operator delete(void*, unsigned long)>
c0029aa9:	83 c4 10             	add    esp,0x10
c0029aac:	83 c4 0c             	add    esp,0xc
c0029aaf:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029ab0 <PIC::~PIC()>:
c0029ab0:	83 ec 0c             	sub    esp,0xc
c0029ab3:	ba 44 dd 02 c0       	mov    edx,0xc002dd44
c0029ab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029abc:	89 10                	mov    DWORD PTR [eax],edx
c0029abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ac2:	83 ec 0c             	sub    esp,0xc
c0029ac5:	50                   	push   eax
c0029ac6:	e8 35 b2 fe ff       	call   c0014d00 <InterruptController::~InterruptController()>
c0029acb:	83 c4 10             	add    esp,0x10
c0029ace:	90                   	nop
c0029acf:	83 c4 0c             	add    esp,0xc
c0029ad2:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029ad4 <PIC::~PIC()>:
c0029ad4:	83 ec 0c             	sub    esp,0xc
c0029ad7:	83 ec 0c             	sub    esp,0xc
c0029ada:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ade:	e8 cd ff ff ff       	call   c0029ab0 <PIC::~PIC()>
c0029ae3:	83 c4 10             	add    esp,0x10
c0029ae6:	83 ec 08             	sub    esp,0x8
c0029ae9:	68 58 21 00 00       	push   0x2158
c0029aee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029af2:	e8 f6 92 fe ff       	call   c0012ded <operator delete(void*, unsigned long)>
c0029af7:	83 c4 10             	add    esp,0x10
c0029afa:	83 c4 0c             	add    esp,0xc
c0029afd:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029afe <APICTimer::~APICTimer()>:
c0029afe:	83 ec 0c             	sub    esp,0xc
c0029b01:	ba 98 dd 02 c0       	mov    edx,0xc002dd98
c0029b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b0a:	89 10                	mov    DWORD PTR [eax],edx
c0029b0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b10:	83 ec 0c             	sub    esp,0xc
c0029b13:	50                   	push   eax
c0029b14:	e8 9d d2 fe ff       	call   c0016db6 <Timer::~Timer()>
c0029b19:	83 c4 10             	add    esp,0x10
c0029b1c:	90                   	nop
c0029b1d:	83 c4 0c             	add    esp,0xc
c0029b20:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029b22 <APICTimer::~APICTimer()>:
c0029b22:	83 ec 0c             	sub    esp,0xc
c0029b25:	83 ec 0c             	sub    esp,0xc
c0029b28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b2c:	e8 cd ff ff ff       	call   c0029afe <APICTimer::~APICTimer()>
c0029b31:	83 c4 10             	add    esp,0x10
c0029b34:	83 ec 08             	sub    esp,0x8
c0029b37:	68 60 01 00 00       	push   0x160
c0029b3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b40:	e8 a8 92 fe ff       	call   c0012ded <operator delete(void*, unsigned long)>
c0029b45:	83 c4 10             	add    esp,0x10
c0029b48:	83 c4 0c             	add    esp,0xc
c0029b4b:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029b4c <PIT::~PIT()>:
c0029b4c:	83 ec 0c             	sub    esp,0xc
c0029b4f:	ba e8 dd 02 c0       	mov    edx,0xc002dde8
c0029b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b58:	89 10                	mov    DWORD PTR [eax],edx
c0029b5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b5e:	83 ec 0c             	sub    esp,0xc
c0029b61:	50                   	push   eax
c0029b62:	e8 4f d2 fe ff       	call   c0016db6 <Timer::~Timer()>
c0029b67:	83 c4 10             	add    esp,0x10
c0029b6a:	90                   	nop
c0029b6b:	83 c4 0c             	add    esp,0xc
c0029b6e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029b70 <PIT::~PIT()>:
c0029b70:	83 ec 0c             	sub    esp,0xc
c0029b73:	83 ec 0c             	sub    esp,0xc
c0029b76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b7a:	e8 cd ff ff ff       	call   c0029b4c <PIT::~PIT()>
c0029b7f:	83 c4 10             	add    esp,0x10
c0029b82:	83 ec 08             	sub    esp,0x8
c0029b85:	68 5c 01 00 00       	push   0x15c
c0029b8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b8e:	e8 5a 92 fe ff       	call   c0012ded <operator delete(void*, unsigned long)>
c0029b93:	83 c4 10             	add    esp,0x10
c0029b96:	83 c4 0c             	add    esp,0xc
c0029b99:	c3                   	ret    
