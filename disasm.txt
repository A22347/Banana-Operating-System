
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 a3 f7 00 00       	call   c000f7c3 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 f3 68 02 00       	call   c0026918 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 74 74 02 c0       	mov    ebx,0xc0027474
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 80 74 02 c0    	cmp    ebx,0xc0027480
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 b8 b7 02 c0       	mov    eax,0xc002b7b8
c0000049:	3d b8 b7 02 c0       	cmp    eax,0xc002b7b8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 b8 b7 02 c0       	push   0xc002b7b8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 b8 b7 02 c0       	mov    eax,0xc002b7b8
c0000075:	2d b8 b7 02 c0       	sub    eax,0xc002b7b8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 b8 b7 02 c0       	push   0xc002b7b8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d e8 bd 02 c0 00 	cmp    BYTE PTR ds:0xc002bde8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 88 74 02 c0       	mov    ebx,0xc0027488
c00000bb:	81 eb 84 74 02 c0    	sub    ebx,0xc0027484
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 84 74 02 c0       	mov    esi,0xc0027484
c00000ca:	a1 ec bd 02 c0       	mov    eax,ds:0xc002bdec
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ec bd 02 c0       	mov    ds:0xc002bdec,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ec bd 02 c0       	mov    eax,ds:0xc002bdec
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 b8 b7 02 c0       	push   0xc002b7b8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 e8 bd 02 c0 01 	mov    BYTE PTR ds:0xc002bde8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 f0 bd 02 c0       	push   0xc002bdf0
c000012c:	68 b8 b7 02 c0       	push   0xc002b7b8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 09                	jne    c0000195 <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c000018f:	81 c4 14 00 00 00    	add    esp,0x14

c0000195 <voodooXADD.usermode>:
c0000195:	89 35 30 02 00 c0    	mov    DWORD PTR ds:0xc0000230,esi
c000019b:	89 25 2c 02 00 c0    	mov    DWORD PTR ds:0xc000022c,esp
c00001a1:	60                   	pusha  
c00001a2:	b0 90                	mov    al,0x90
c00001a4:	b9 20 00 00 00       	mov    ecx,0x20
c00001a9:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001b0:	61                   	popa   
c00001b1:	60                   	pusha  
c00001b2:	89 d6                	mov    esi,edx
c00001b4:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001bb:	61                   	popa   
c00001bc:	60                   	pusha  
c00001bd:	89 d6                	mov    esi,edx
c00001bf:	bf 13 02 00 c0       	mov    edi,0xc0000213
c00001c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c6:	61                   	popa   
c00001c7:	b1 90                	mov    cl,0x90
c00001c9:	85 db                	test   ebx,ebx
c00001cb:	74 06                	je     c00001d3 <voodooXADD.skipChange>
c00001cd:	8a 8b 02 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdfe]

c00001d3 <voodooXADD.skipChange>:
c00001d3:	88 8b 03 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdfd],cl
c00001d9:	80 ab 04 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdfc],0x3a
c00001e0:	88 8b 13 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffded],cl
c00001e6:	80 ab 14 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdec],0xbe
c00001ed:	89 c4                	mov    esp,eax
c00001ef:	81 c4 10 00 00 00    	add    esp,0x10
c00001f5:	5f                   	pop    edi
c00001f6:	5e                   	pop    esi
c00001f7:	5d                   	pop    ebp
c00001f8:	5b                   	pop    ebx
c00001f9:	5b                   	pop    ebx
c00001fa:	5a                   	pop    edx
c00001fb:	59                   	pop    ecx
c00001fc:	58                   	pop    eax
c00001fd:	8b 25 30 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000230

c0000203 <voodooXADD.helper>:
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	90                   	nop
c000021e:	90                   	nop
c000021f:	90                   	nop
c0000220:	90                   	nop
c0000221:	90                   	nop
c0000222:	90                   	nop
c0000223:	8b 25 2c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022c
c0000229:	61                   	popa   
c000022a:	c9                   	leave  
c000022b:	c3                   	ret    

c000022c <voodooXADD.oldStack>:
c000022c:	00 00                	add    BYTE PTR [eax],al
	...

c0000230 <voodooXADD.newStack>:
c0000230:	00 00                	add    BYTE PTR [eax],al
	...

c0000234 <doTPAUSE>:
c0000234:	fb                   	sti    
c0000235:	31 c0                	xor    eax,eax
c0000237:	31 d2                	xor    edx,edx
c0000239:	66 0f ae f0          	tpause eax
c000023d:	c3                   	ret    

c000023e <hasLegacyFPU>:
c000023e:	0f 20 c2             	mov    edx,cr0
c0000241:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000247:	0f 22 c2             	mov    cr0,edx
c000024a:	db e3                	fninit 
c000024c:	dd 3d 61 02 00 c0    	fnstsw WORD PTR ds:0xc0000261
c0000252:	31 c0                	xor    eax,eax
c0000254:	66 81 3d 61 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000261,0x0
c000025d:	75 01                	jne    c0000260 <hasLegacyFPU.nofpu>

c000025f <hasLegacyFPU.hasfpu>:
c000025f:	40                   	inc    eax

c0000260 <hasLegacyFPU.nofpu>:
c0000260:	c3                   	ret    

c0000261 <testword>:
c0000261:	aa                   	stos   BYTE PTR es:[edi],al
c0000262:	55                   	push   ebp

c0000263 <is486>:
c0000263:	0f 09                	wbinvd 
c0000265:	31 c0                	xor    eax,eax
c0000267:	40                   	inc    eax
c0000268:	c3                   	ret    
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	90                   	nop
c0000291:	90                   	nop
c0000292:	90                   	nop
c0000293:	90                   	nop
c0000294:	90                   	nop
c0000295:	90                   	nop
c0000296:	31 c0                	xor    eax,eax
c0000298:	c3                   	ret    

c0000299 <detectCPUID>:
c0000299:	9c                   	pushf  
c000029a:	9c                   	pushf  
c000029b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002a2:	9d                   	popf   
c00002a3:	9c                   	pushf  
c00002a4:	58                   	pop    eax
c00002a5:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002a8:	9d                   	popf   
c00002a9:	25 00 00 20 00       	and    eax,0x200000
c00002ae:	c3                   	ret    

c00002af <goToVM86>:
c00002af:	55                   	push   ebp
c00002b0:	89 e5                	mov    ebp,esp
c00002b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00002b5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00002b8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002bb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002be:	25 ff ff 00 00       	and    eax,0xffff
c00002c3:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002c9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002cf:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002d5:	52                   	push   edx
c00002d6:	51                   	push   ecx
c00002d7:	68 02 02 02 00       	push   0x20202
c00002dc:	53                   	push   ebx
c00002dd:	50                   	push   eax
c00002de:	cf                   	iret   

c00002df <goToUsermode>:
c00002df:	55                   	push   ebp
c00002e0:	89 e5                	mov    ebp,esp
c00002e2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002e5:	66 b8 23 00          	mov    ax,0x23
c00002e9:	66 8e d8             	mov    ds,ax
c00002ec:	66 8e c0             	mov    es,ax
c00002ef:	66 8e e0             	mov    fs,ax
c00002f2:	66 8e e8             	mov    gs,ax
c00002f5:	89 e0                	mov    eax,esp
c00002f7:	68 23 00 00 00       	push   0x23
c00002fc:	50                   	push   eax
c00002fd:	68 02 02 00 00       	push   0x202
c0000302:	68 1b 00 00 00       	push   0x1b
c0000307:	53                   	push   ebx
c0000308:	cf                   	iret   

c0000309 <switchToThreadASMFirstTime>:
c0000309:	9c                   	pushf  
c000030a:	fa                   	cli    
c000030b:	50                   	push   eax
c000030c:	53                   	push   ebx
c000030d:	51                   	push   ecx
c000030e:	52                   	push   edx
c000030f:	56                   	push   esi
c0000310:	57                   	push   edi
c0000311:	55                   	push   ebp
c0000312:	e9 11 00 00 00       	jmp    c0000328 <commonThreadSwitch>

c0000317 <switchToThreadASM>:
c0000317:	9c                   	pushf  
c0000318:	50                   	push   eax
c0000319:	53                   	push   ebx
c000031a:	51                   	push   ecx
c000031b:	52                   	push   edx
c000031c:	56                   	push   esi
c000031d:	57                   	push   edi
c000031e:	55                   	push   ebp
c000031f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000325:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000328 <commonThreadSwitch>:
c0000328:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000032c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000332:	8b 06                	mov    eax,DWORD PTR [esi]
c0000334:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000337:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000033a:	0f 20 d9             	mov    ecx,cr3
c000033d:	39 c8                	cmp    eax,ecx
c000033f:	74 03                	je     c0000344 <commonThreadSwitch.doneVAS>
c0000341:	0f 22 d8             	mov    cr3,eax

c0000344 <commonThreadSwitch.doneVAS>:
c0000344:	85 d2                	test   edx,edx
c0000346:	75 11                	jne    c0000359 <commonThreadSwitch.firstTime>
c0000348:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000034b:	e8 70 be 01 00       	call   c001c1c0 <changeTSS>
c0000350:	5d                   	pop    ebp
c0000351:	5f                   	pop    edi
c0000352:	5e                   	pop    esi
c0000353:	5a                   	pop    edx
c0000354:	59                   	pop    ecx
c0000355:	5b                   	pop    ebx
c0000356:	58                   	pop    eax
c0000357:	9d                   	popf   
c0000358:	c3                   	ret    

c0000359 <commonThreadSwitch.firstTime>:
c0000359:	fa                   	cli    
c000035a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000035d:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000362:	60                   	pusha  
c0000363:	e8 17 21 01 00       	call   c001247f <mapVASFirstTime>
c0000368:	61                   	popa   
c0000369:	89 c4                	mov    esp,eax
c000036b:	56                   	push   esi
c000036c:	52                   	push   edx
c000036d:	e8 4e be 01 00       	call   c001c1c0 <changeTSS>
c0000372:	5a                   	pop    edx
c0000373:	5e                   	pop    esi
c0000374:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000037b:	5d                   	pop    ebp
c000037c:	5f                   	pop    edi
c000037d:	5e                   	pop    esi
c000037e:	59                   	pop    ecx
c000037f:	59                   	pop    ecx
c0000380:	5b                   	pop    ebx
c0000381:	58                   	pop    eax
c0000382:	81 c4 04 00 00 00    	add    esp,0x4
c0000388:	6a 02                	push   0x2
c000038a:	9d                   	popf   
c000038b:	52                   	push   edx
c000038c:	e8 9c c2 01 00       	call   c001c62d <taskStartupFunction>
c0000391:	5a                   	pop    edx
c0000392:	50                   	push   eax
c0000393:	ff d2                	call   edx
c0000395:	e8 4a c8 01 00       	call   c001cbe4 <taskReturned>
c000039a:	e9 fb ff ff ff       	jmp    c000039a <commonThreadSwitch.firstTime+0x41>

c000039f <asmQuickAcquireLock>:
c000039f:	55                   	push   ebp
c00003a0:	89 e5                	mov    ebp,esp
c00003a2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003a5 <asmQuickAcquireLock.retry>:
c00003a5:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003aa:	72 02                	jb     c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003ac:	fa                   	cli    
c00003ad:	c3                   	ret    

c00003ae <asmQuickAcquireLock.spin_with_pause>:
c00003ae:	f3 90                	pause  
c00003b0:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003b6:	75 f6                	jne    c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003b8:	e9 e8 ff ff ff       	jmp    c00003a5 <asmQuickAcquireLock.retry>

c00003bd <asmQuickReleaseLock>:
c00003bd:	55                   	push   ebp
c00003be:	89 e5                	mov    ebp,esp
c00003c0:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003c7:	5d                   	pop    ebp
c00003c8:	c3                   	ret    

c00003c9 <asmAcquireLock>:
c00003c9:	55                   	push   ebp
c00003ca:	89 e5                	mov    ebp,esp
c00003cc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003cf <asmAcquireLock.retry>:
c00003cf:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003d4:	72 05                	jb     c00003db <asmAcquireLock.spin_with_pause>
c00003d6:	9c                   	pushf  
c00003d7:	58                   	pop    eax
c00003d8:	fa                   	cli    
c00003d9:	5d                   	pop    ebp
c00003da:	c3                   	ret    

c00003db <asmAcquireLock.spin_with_pause>:
c00003db:	f3 90                	pause  
c00003dd:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003e3:	75 f6                	jne    c00003db <asmAcquireLock.spin_with_pause>
c00003e5:	e9 e5 ff ff ff       	jmp    c00003cf <asmAcquireLock.retry>

c00003ea <asmReleaseLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003f3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003f9:	52                   	push   edx
c00003fa:	9d                   	popf   
c00003fb:	5d                   	pop    ebp
c00003fc:	c3                   	ret    

c00003fd <loadGDT>:
c00003fd:	0f 01 15 30 c2 02 c0 	lgdtd  ds:0xc002c230
c0000404:	66 b8 10 00          	mov    ax,0x10
c0000408:	66 8e d8             	mov    ds,ax
c000040b:	66 8e c0             	mov    es,ax
c000040e:	66 8e e0             	mov    fs,ax
c0000411:	66 8e e8             	mov    gs,ax
c0000414:	66 8e d0             	mov    ss,ax
c0000417:	e9 00 00 00 00       	jmp    c000041c <flush2>

c000041c <flush2>:
c000041c:	c3                   	ret    

c000041d <isr0>:
c000041d:	fa                   	cli    
c000041e:	68 00 00 00 00       	push   0x0
c0000423:	68 00 00 00 00       	push   0x0
c0000428:	e9 44 01 00 00       	jmp    c0000571 <int_common_stub>

c000042d <isr1>:
c000042d:	fa                   	cli    
c000042e:	6a 00                	push   0x0
c0000430:	6a 01                	push   0x1
c0000432:	e9 3a 01 00 00       	jmp    c0000571 <int_common_stub>

c0000437 <isr2>:
c0000437:	fa                   	cli    
c0000438:	6a 00                	push   0x0
c000043a:	6a 02                	push   0x2
c000043c:	e9 30 01 00 00       	jmp    c0000571 <int_common_stub>

c0000441 <isr3>:
c0000441:	fa                   	cli    
c0000442:	6a 00                	push   0x0
c0000444:	6a 03                	push   0x3
c0000446:	e9 26 01 00 00       	jmp    c0000571 <int_common_stub>

c000044b <isr4>:
c000044b:	fa                   	cli    
c000044c:	6a 00                	push   0x0
c000044e:	6a 04                	push   0x4
c0000450:	e9 1c 01 00 00       	jmp    c0000571 <int_common_stub>

c0000455 <isr5>:
c0000455:	fa                   	cli    
c0000456:	6a 00                	push   0x0
c0000458:	6a 05                	push   0x5
c000045a:	e9 12 01 00 00       	jmp    c0000571 <int_common_stub>

c000045f <isr6>:
c000045f:	fa                   	cli    
c0000460:	6a 00                	push   0x0
c0000462:	6a 06                	push   0x6
c0000464:	e9 08 01 00 00       	jmp    c0000571 <int_common_stub>

c0000469 <isr7>:
c0000469:	fa                   	cli    
c000046a:	6a 00                	push   0x0
c000046c:	6a 07                	push   0x7
c000046e:	e9 fe 00 00 00       	jmp    c0000571 <int_common_stub>

c0000473 <isr8>:
c0000473:	fa                   	cli    
c0000474:	6a 08                	push   0x8
c0000476:	e9 f6 00 00 00       	jmp    c0000571 <int_common_stub>

c000047b <isr9>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 09                	push   0x9
c0000480:	e9 ec 00 00 00       	jmp    c0000571 <int_common_stub>

c0000485 <isr10>:
c0000485:	fa                   	cli    
c0000486:	6a 0a                	push   0xa
c0000488:	e9 e4 00 00 00       	jmp    c0000571 <int_common_stub>

c000048d <isr11>:
c000048d:	fa                   	cli    
c000048e:	6a 0b                	push   0xb
c0000490:	e9 dc 00 00 00       	jmp    c0000571 <int_common_stub>

c0000495 <isr12>:
c0000495:	fa                   	cli    
c0000496:	6a 0c                	push   0xc
c0000498:	e9 d4 00 00 00       	jmp    c0000571 <int_common_stub>

c000049d <isr13>:
c000049d:	fa                   	cli    
c000049e:	6a 0d                	push   0xd
c00004a0:	e9 cc 00 00 00       	jmp    c0000571 <int_common_stub>

c00004a5 <isr14>:
c00004a5:	fa                   	cli    
c00004a6:	6a 0e                	push   0xe
c00004a8:	e9 c4 00 00 00       	jmp    c0000571 <int_common_stub>

c00004ad <isr15>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 0f                	push   0xf
c00004b2:	e9 ba 00 00 00       	jmp    c0000571 <int_common_stub>

c00004b7 <isr16>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 10                	push   0x10
c00004bc:	e9 b0 00 00 00       	jmp    c0000571 <int_common_stub>

c00004c1 <isr17>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 11                	push   0x11
c00004c6:	e9 a6 00 00 00       	jmp    c0000571 <int_common_stub>

c00004cb <isr18>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 12                	push   0x12
c00004d0:	e9 9c 00 00 00       	jmp    c0000571 <int_common_stub>

c00004d5 <irq3>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 23                	push   0x23
c00004da:	e9 92 00 00 00       	jmp    c0000571 <int_common_stub>

c00004df <irq4>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 24                	push   0x24
c00004e4:	e9 88 00 00 00       	jmp    c0000571 <int_common_stub>

c00004e9 <irq5>:
c00004e9:	fa                   	cli    
c00004ea:	6a 00                	push   0x0
c00004ec:	6a 25                	push   0x25
c00004ee:	e9 7e 00 00 00       	jmp    c0000571 <int_common_stub>

c00004f3 <irq6>:
c00004f3:	fa                   	cli    
c00004f4:	6a 00                	push   0x0
c00004f6:	6a 26                	push   0x26
c00004f8:	e9 74 00 00 00       	jmp    c0000571 <int_common_stub>

c00004fd <irq7>:
c00004fd:	fa                   	cli    
c00004fe:	6a 00                	push   0x0
c0000500:	6a 27                	push   0x27
c0000502:	e9 6a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000507 <irq8>:
c0000507:	fa                   	cli    
c0000508:	6a 00                	push   0x0
c000050a:	6a 28                	push   0x28
c000050c:	e9 60 00 00 00       	jmp    c0000571 <int_common_stub>

c0000511 <irq9>:
c0000511:	fa                   	cli    
c0000512:	6a 00                	push   0x0
c0000514:	6a 29                	push   0x29
c0000516:	e9 56 00 00 00       	jmp    c0000571 <int_common_stub>

c000051b <irq10>:
c000051b:	fa                   	cli    
c000051c:	6a 00                	push   0x0
c000051e:	6a 2a                	push   0x2a
c0000520:	e9 4c 00 00 00       	jmp    c0000571 <int_common_stub>

c0000525 <irq11>:
c0000525:	fa                   	cli    
c0000526:	6a 00                	push   0x0
c0000528:	6a 2b                	push   0x2b
c000052a:	e9 42 00 00 00       	jmp    c0000571 <int_common_stub>

c000052f <irq12>:
c000052f:	fa                   	cli    
c0000530:	6a 00                	push   0x0
c0000532:	6a 2c                	push   0x2c
c0000534:	e9 38 00 00 00       	jmp    c0000571 <int_common_stub>

c0000539 <irq13>:
c0000539:	fa                   	cli    
c000053a:	6a 00                	push   0x0
c000053c:	6a 2d                	push   0x2d
c000053e:	e9 2e 00 00 00       	jmp    c0000571 <int_common_stub>

c0000543 <irq14>:
c0000543:	fa                   	cli    
c0000544:	6a 00                	push   0x0
c0000546:	6a 2e                	push   0x2e
c0000548:	e9 24 00 00 00       	jmp    c0000571 <int_common_stub>

c000054d <irq15>:
c000054d:	fa                   	cli    
c000054e:	6a 00                	push   0x0
c0000550:	6a 2f                	push   0x2f
c0000552:	e9 1a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000557 <irq1>:
c0000557:	fa                   	cli    
c0000558:	6a 00                	push   0x0
c000055a:	6a 21                	push   0x21
c000055c:	eb 13                	jmp    c0000571 <int_common_stub>

c000055e <irq2>:
c000055e:	fa                   	cli    
c000055f:	6a 00                	push   0x0
c0000561:	6a 22                	push   0x22
c0000563:	eb 0c                	jmp    c0000571 <int_common_stub>

c0000565 <isr96>:
c0000565:	6a 00                	push   0x0
c0000567:	6a 60                	push   0x60
c0000569:	fb                   	sti    
c000056a:	eb 05                	jmp    c0000571 <int_common_stub>

c000056c <irq0>:
c000056c:	fa                   	cli    
c000056d:	6a 00                	push   0x0
c000056f:	6a 20                	push   0x20

c0000571 <int_common_stub>:
c0000571:	60                   	pusha  
c0000572:	1e                   	push   ds
c0000573:	06                   	push   es
c0000574:	0f a0                	push   fs
c0000576:	0f a8                	push   gs
c0000578:	66 b8 10 00          	mov    ax,0x10
c000057c:	66 8e d8             	mov    ds,ax
c000057f:	66 8e c0             	mov    es,ax
c0000582:	66 8e e0             	mov    fs,ax
c0000585:	66 8e e8             	mov    gs,ax
c0000588:	54                   	push   esp
c0000589:	e8 a9 3d 01 00       	call   c0014337 <int_handler>
c000058e:	81 c4 04 00 00 00    	add    esp,0x4
c0000594:	0f a9                	pop    gs
c0000596:	0f a1                	pop    fs
c0000598:	07                   	pop    es
c0000599:	1f                   	pop    ds
c000059a:	61                   	popa   
c000059b:	81 c4 08 00 00 00    	add    esp,0x8
c00005a1:	cf                   	iret   

c00005a2 <irq16>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 30                	push   0x30
c00005a7:	e9 c5 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ac <irq17>:
c00005ac:	fa                   	cli    
c00005ad:	6a 00                	push   0x0
c00005af:	6a 31                	push   0x31
c00005b1:	e9 bb ff ff ff       	jmp    c0000571 <int_common_stub>

c00005b6 <irq18>:
c00005b6:	fa                   	cli    
c00005b7:	6a 00                	push   0x0
c00005b9:	6a 32                	push   0x32
c00005bb:	e9 b1 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005c0 <irq19>:
c00005c0:	fa                   	cli    
c00005c1:	6a 00                	push   0x0
c00005c3:	6a 33                	push   0x33
c00005c5:	e9 a7 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ca <irq20>:
c00005ca:	fa                   	cli    
c00005cb:	6a 00                	push   0x0
c00005cd:	6a 34                	push   0x34
c00005cf:	e9 9d ff ff ff       	jmp    c0000571 <int_common_stub>

c00005d4 <irq21>:
c00005d4:	fa                   	cli    
c00005d5:	6a 00                	push   0x0
c00005d7:	6a 35                	push   0x35
c00005d9:	e9 93 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005de <irq22>:
c00005de:	fa                   	cli    
c00005df:	6a 00                	push   0x0
c00005e1:	6a 36                	push   0x36
c00005e3:	e9 89 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005e8 <irq23>:
c00005e8:	fa                   	cli    
c00005e9:	6a 00                	push   0x0
c00005eb:	6a 37                	push   0x37
c00005ed:	e9 7f ff ff ff       	jmp    c0000571 <int_common_stub>

c00005f2 <memcmp>:
c00005f2:	56                   	push   esi
c00005f3:	53                   	push   ebx
c00005f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00005f8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000600:	01 d6                	add    esi,edx
c0000602:	39 f2                	cmp    edx,esi
c0000604:	74 0e                	je     c0000614 <memcmp+0x22>
c0000606:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000609:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000060c:	38 c8                	cmp    al,cl
c000060e:	75 08                	jne    c0000618 <memcmp+0x26>
c0000610:	42                   	inc    edx
c0000611:	43                   	inc    ebx
c0000612:	eb ee                	jmp    c0000602 <memcmp+0x10>
c0000614:	31 c0                	xor    eax,eax
c0000616:	eb 02                	jmp    c000061a <memcmp+0x28>
c0000618:	29 c8                	sub    eax,ecx
c000061a:	5b                   	pop    ebx
c000061b:	5e                   	pop    esi
c000061c:	c3                   	ret    

c000061d <memmove>:
c000061d:	56                   	push   esi
c000061e:	53                   	push   ebx
c000061f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000623:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000062b:	39 c8                	cmp    eax,ecx
c000062d:	73 12                	jae    c0000641 <memmove+0x24>
c000062f:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000632:	89 c3                	mov    ebx,eax
c0000634:	39 f1                	cmp    ecx,esi
c0000636:	74 1a                	je     c0000652 <memmove+0x35>
c0000638:	8a 11                	mov    dl,BYTE PTR [ecx]
c000063a:	43                   	inc    ebx
c000063b:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000063e:	41                   	inc    ecx
c000063f:	eb f3                	jmp    c0000634 <memmove+0x17>
c0000641:	76 0f                	jbe    c0000652 <memmove+0x35>
c0000643:	85 d2                	test   edx,edx
c0000645:	74 0b                	je     c0000652 <memmove+0x35>
c0000647:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000064b:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000064f:	4a                   	dec    edx
c0000650:	eb f1                	jmp    c0000643 <memmove+0x26>
c0000652:	5b                   	pop    ebx
c0000653:	5e                   	pop    esi
c0000654:	c3                   	ret    

c0000655 <memcpy>:
c0000655:	57                   	push   edi
c0000656:	56                   	push   esi
c0000657:	53                   	push   ebx
c0000658:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000065c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000660:	89 da                	mov    edx,ebx
c0000662:	89 d9                	mov    ecx,ebx
c0000664:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000668:	83 e2 fc             	and    edx,0xfffffffc
c000066b:	c1 e9 02             	shr    ecx,0x2
c000066e:	89 c7                	mov    edi,eax
c0000670:	fc                   	cld    
c0000671:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000673:	8d 0c 16             	lea    ecx,[esi+edx*1]
c0000676:	01 c2                	add    edx,eax
c0000678:	01 de                	add    esi,ebx
c000067a:	39 f1                	cmp    ecx,esi
c000067c:	74 09                	je     c0000687 <memcpy+0x32>
c000067e:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000680:	42                   	inc    edx
c0000681:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000684:	41                   	inc    ecx
c0000685:	eb f3                	jmp    c000067a <memcpy+0x25>
c0000687:	5b                   	pop    ebx
c0000688:	5e                   	pop    esi
c0000689:	5f                   	pop    edi
c000068a:	c3                   	ret    

c000068b <memset>:
c000068b:	53                   	push   ebx
c000068c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000690:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000694:	89 c2                	mov    edx,eax
c0000696:	01 c1                	add    ecx,eax
c0000698:	39 ca                	cmp    edx,ecx
c000069a:	74 0a                	je     c00006a6 <memset+0x1b>
c000069c:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006a0:	42                   	inc    edx
c00006a1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006a4:	eb f2                	jmp    c0000698 <memset+0xd>
c00006a6:	5b                   	pop    ebx
c00006a7:	c3                   	ret    

c00006a8 <strlen>:
c00006a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006ac:	31 c0                	xor    eax,eax
c00006ae:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b2:	74 03                	je     c00006b7 <strlen+0xf>
c00006b4:	40                   	inc    eax
c00006b5:	eb f7                	jmp    c00006ae <strlen+0x6>
c00006b7:	c3                   	ret    

c00006b8 <strpbrk>:
c00006b8:	53                   	push   ebx
c00006b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006bd:	8a 08                	mov    cl,BYTE PTR [eax]
c00006bf:	84 c9                	test   cl,cl
c00006c1:	74 14                	je     c00006d7 <strpbrk+0x1f>
c00006c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006c7:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006c9:	84 db                	test   bl,bl
c00006cb:	74 07                	je     c00006d4 <strpbrk+0x1c>
c00006cd:	38 cb                	cmp    bl,cl
c00006cf:	74 08                	je     c00006d9 <strpbrk+0x21>
c00006d1:	42                   	inc    edx
c00006d2:	eb f3                	jmp    c00006c7 <strpbrk+0xf>
c00006d4:	40                   	inc    eax
c00006d5:	eb e6                	jmp    c00006bd <strpbrk+0x5>
c00006d7:	31 c0                	xor    eax,eax
c00006d9:	5b                   	pop    ebx
c00006da:	c3                   	ret    

c00006db <strtok>:
c00006db:	56                   	push   esi
c00006dc:	53                   	push   ebx
c00006dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006e5:	85 db                	test   ebx,ebx
c00006e7:	75 0e                	jne    c00006f7 <strtok+0x1c>
c00006e9:	8b 1d 08 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002be08
c00006ef:	85 db                	test   ebx,ebx
c00006f1:	75 04                	jne    c00006f7 <strtok+0x1c>
c00006f3:	31 db                	xor    ebx,ebx
c00006f5:	eb 2e                	jmp    c0000725 <strtok+0x4a>
c00006f7:	56                   	push   esi
c00006f8:	53                   	push   ebx
c00006f9:	e8 ba ff ff ff       	call   c00006b8 <strpbrk>
c00006fe:	5a                   	pop    edx
c00006ff:	a3 08 be 02 c0       	mov    ds:0xc002be08,eax
c0000704:	59                   	pop    ecx
c0000705:	a1 08 be 02 c0       	mov    eax,ds:0xc002be08
c000070a:	39 d8                	cmp    eax,ebx
c000070c:	75 07                	jne    c0000715 <strtok+0x3a>
c000070e:	43                   	inc    ebx
c000070f:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000713:	eb e2                	jmp    c00006f7 <strtok+0x1c>
c0000715:	85 c0                	test   eax,eax
c0000717:	74 da                	je     c00006f3 <strtok+0x18>
c0000719:	8d 50 01             	lea    edx,[eax+0x1]
c000071c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000071f:	89 15 08 be 02 c0    	mov    DWORD PTR ds:0xc002be08,edx
c0000725:	89 d8                	mov    eax,ebx
c0000727:	5b                   	pop    ebx
c0000728:	5e                   	pop    esi
c0000729:	c3                   	ret    

c000072a <strcpy>:
c000072a:	53                   	push   ebx
c000072b:	31 d2                	xor    edx,edx
c000072d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000731:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000735:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000738:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000073b:	84 c9                	test   cl,cl
c000073d:	74 06                	je     c0000745 <strcpy+0x1b>
c000073f:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000742:	42                   	inc    edx
c0000743:	eb ec                	jmp    c0000731 <strcpy+0x7>
c0000745:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000748:	5b                   	pop    ebx
c0000749:	c3                   	ret    

c000074a <strncpy>:
c000074a:	56                   	push   esi
c000074b:	53                   	push   ebx
c000074c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000750:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000754:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000758:	89 c3                	mov    ebx,eax
c000075a:	85 c9                	test   ecx,ecx
c000075c:	74 1a                	je     c0000778 <strncpy+0x2e>
c000075e:	46                   	inc    esi
c000075f:	43                   	inc    ebx
c0000760:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000763:	49                   	dec    ecx
c0000764:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000767:	84 d2                	test   dl,dl
c0000769:	75 ef                	jne    c000075a <strncpy+0x10>
c000076b:	31 d2                	xor    edx,edx
c000076d:	39 d1                	cmp    ecx,edx
c000076f:	74 07                	je     c0000778 <strncpy+0x2e>
c0000771:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c0000775:	42                   	inc    edx
c0000776:	eb f5                	jmp    c000076d <strncpy+0x23>
c0000778:	5b                   	pop    ebx
c0000779:	5e                   	pop    esi
c000077a:	c3                   	ret    

c000077b <strcmp>:
c000077b:	31 c9                	xor    ecx,ecx
c000077d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000781:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000785:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000789:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000078d:	38 d0                	cmp    al,dl
c000078f:	75 08                	jne    c0000799 <strcmp+0x1e>
c0000791:	41                   	inc    ecx
c0000792:	84 c0                	test   al,al
c0000794:	75 e7                	jne    c000077d <strcmp+0x2>
c0000796:	31 c0                	xor    eax,eax
c0000798:	c3                   	ret    
c0000799:	29 d0                	sub    eax,edx
c000079b:	c3                   	ret    

c000079c <strchr>:
c000079c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007a0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007a2:	84 d2                	test   dl,dl
c00007a4:	74 09                	je     c00007af <strchr+0x13>
c00007a6:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007aa:	74 05                	je     c00007b1 <strchr+0x15>
c00007ac:	40                   	inc    eax
c00007ad:	eb f1                	jmp    c00007a0 <strchr+0x4>
c00007af:	31 c0                	xor    eax,eax
c00007b1:	c3                   	ret    

c00007b2 <strncmp>:
c00007b2:	56                   	push   esi
c00007b3:	53                   	push   ebx
c00007b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007b8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007c0:	01 d6                	add    esi,edx
c00007c2:	39 f2                	cmp    edx,esi
c00007c4:	74 12                	je     c00007d8 <strncmp+0x26>
c00007c6:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007c9:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007cc:	38 c8                	cmp    al,cl
c00007ce:	75 0c                	jne    c00007dc <strncmp+0x2a>
c00007d0:	42                   	inc    edx
c00007d1:	84 c0                	test   al,al
c00007d3:	74 03                	je     c00007d8 <strncmp+0x26>
c00007d5:	43                   	inc    ebx
c00007d6:	eb ea                	jmp    c00007c2 <strncmp+0x10>
c00007d8:	31 c0                	xor    eax,eax
c00007da:	eb 02                	jmp    c00007de <strncmp+0x2c>
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5b                   	pop    ebx
c00007df:	5e                   	pop    esi
c00007e0:	c3                   	ret    

c00007e1 <strcat>:
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007e6:	89 c1                	mov    ecx,eax
c00007e8:	8d 51 01             	lea    edx,[ecx+0x1]
c00007eb:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007ef:	74 04                	je     c00007f5 <strcat+0x14>
c00007f1:	89 d1                	mov    ecx,edx
c00007f3:	eb f3                	jmp    c00007e8 <strcat+0x7>
c00007f5:	31 d2                	xor    edx,edx
c00007f7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007fb:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c00007fe:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000801:	42                   	inc    edx
c0000802:	84 db                	test   bl,bl
c0000804:	75 f1                	jne    c00007f7 <strcat+0x16>
c0000806:	5b                   	pop    ebx
c0000807:	c3                   	ret    

c0000808 <strncat>:
c0000808:	56                   	push   esi
c0000809:	53                   	push   ebx
c000080a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000080e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000812:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000816:	89 c2                	mov    edx,eax
c0000818:	85 db                	test   ebx,ebx
c000081a:	74 23                	je     c000083f <strncat+0x37>
c000081c:	8d 72 01             	lea    esi,[edx+0x1]
c000081f:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000823:	74 04                	je     c0000829 <strncat+0x21>
c0000825:	89 f2                	mov    edx,esi
c0000827:	eb f3                	jmp    c000081c <strncat+0x14>
c0000829:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000082c:	41                   	inc    ecx
c000082d:	42                   	inc    edx
c000082e:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000831:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000834:	84 db                	test   bl,bl
c0000836:	74 07                	je     c000083f <strncat+0x37>
c0000838:	39 f1                	cmp    ecx,esi
c000083a:	75 f0                	jne    c000082c <strncat+0x24>
c000083c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000083f:	5b                   	pop    ebx
c0000840:	5e                   	pop    esi
c0000841:	c3                   	ret    

c0000842 <strstr>:
c0000842:	57                   	push   edi
c0000843:	56                   	push   esi
c0000844:	53                   	push   ebx
c0000845:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000849:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000084d:	57                   	push   edi
c000084e:	e8 55 fe ff ff       	call   c00006a8 <strlen>
c0000853:	59                   	pop    ecx
c0000854:	89 c6                	mov    esi,eax
c0000856:	85 c0                	test   eax,eax
c0000858:	74 1f                	je     c0000879 <strstr+0x37>
c000085a:	53                   	push   ebx
c000085b:	e8 48 fe ff ff       	call   c00006a8 <strlen>
c0000860:	5a                   	pop    edx
c0000861:	39 f0                	cmp    eax,esi
c0000863:	72 12                	jb     c0000877 <strstr+0x35>
c0000865:	56                   	push   esi
c0000866:	57                   	push   edi
c0000867:	53                   	push   ebx
c0000868:	e8 85 fd ff ff       	call   c00005f2 <memcmp>
c000086d:	83 c4 0c             	add    esp,0xc
c0000870:	85 c0                	test   eax,eax
c0000872:	74 05                	je     c0000879 <strstr+0x37>
c0000874:	43                   	inc    ebx
c0000875:	eb e3                	jmp    c000085a <strstr+0x18>
c0000877:	31 db                	xor    ebx,ebx
c0000879:	89 d8                	mov    eax,ebx
c000087b:	5b                   	pop    ebx
c000087c:	5e                   	pop    esi
c000087d:	5f                   	pop    edi
c000087e:	c3                   	ret    

c000087f <toupper>:
c000087f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000883:	0f b6 d0             	movzx  edx,al
c0000886:	f6 82 a0 74 02 c0 02 	test   BYTE PTR [edx-0x3ffd8b60],0x2
c000088d:	74 03                	je     c0000892 <toupper+0x13>
c000088f:	83 e8 20             	sub    eax,0x20
c0000892:	c3                   	ret    

c0000893 <tolower>:
c0000893:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000897:	0f b6 d0             	movzx  edx,al
c000089a:	f6 82 a0 74 02 c0 01 	test   BYTE PTR [edx-0x3ffd8b60],0x1
c00008a1:	74 03                	je     c00008a6 <tolower+0x13>
c00008a3:	83 c0 20             	add    eax,0x20
c00008a6:	c3                   	ret    

c00008a7 <simple_strtoul>:
c00008a7:	55                   	push   ebp
c00008a8:	57                   	push   edi
c00008a9:	56                   	push   esi
c00008aa:	53                   	push   ebx
c00008ab:	83 ec 08             	sub    esp,0x8
c00008ae:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008b2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008b6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008b9:	f6 82 a0 74 02 c0 08 	test   BYTE PTR [edx-0x3ffd8b60],0x8
c00008c0:	74 03                	je     c00008c5 <simple_strtoul+0x1e>
c00008c2:	41                   	inc    ecx
c00008c3:	eb f1                	jmp    c00008b6 <simple_strtoul+0xf>
c00008c5:	80 fa 09             	cmp    dl,0x9
c00008c8:	74 f8                	je     c00008c2 <simple_strtoul+0x1b>
c00008ca:	80 fa 2d             	cmp    dl,0x2d
c00008cd:	75 0b                	jne    c00008da <simple_strtoul+0x33>
c00008cf:	41                   	inc    ecx
c00008d0:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008d8:	eb 0e                	jmp    c00008e8 <simple_strtoul+0x41>
c00008da:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00008e2:	80 fa 2b             	cmp    dl,0x2b
c00008e5:	75 01                	jne    c00008e8 <simple_strtoul+0x41>
c00008e7:	41                   	inc    ecx
c00008e8:	85 f6                	test   esi,esi
c00008ea:	75 22                	jne    c000090e <simple_strtoul+0x67>
c00008ec:	be 0a 00 00 00       	mov    esi,0xa
c00008f1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008f4:	75 5a                	jne    c0000950 <simple_strtoul+0xa9>
c00008f6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008fa:	50                   	push   eax
c00008fb:	e8 93 ff ff ff       	call   c0000893 <tolower>
c0000900:	5a                   	pop    edx
c0000901:	83 f8 78             	cmp    eax,0x78
c0000904:	74 03                	je     c0000909 <simple_strtoul+0x62>
c0000906:	41                   	inc    ecx
c0000907:	eb 16                	jmp    c000091f <simple_strtoul+0x78>
c0000909:	83 c1 02             	add    ecx,0x2
c000090c:	eb 22                	jmp    c0000930 <simple_strtoul+0x89>
c000090e:	8d 46 fe             	lea    eax,[esi-0x2]
c0000911:	83 f8 22             	cmp    eax,0x22
c0000914:	0f 87 b7 00 00 00    	ja     c00009d1 <simple_strtoul+0x12a>
c000091a:	83 fe 08             	cmp    esi,0x8
c000091d:	75 0c                	jne    c000092b <simple_strtoul+0x84>
c000091f:	be 08 00 00 00       	mov    esi,0x8
c0000924:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000927:	75 27                	jne    c0000950 <simple_strtoul+0xa9>
c0000929:	eb 1f                	jmp    c000094a <simple_strtoul+0xa3>
c000092b:	83 fe 10             	cmp    esi,0x10
c000092e:	75 20                	jne    c0000950 <simple_strtoul+0xa9>
c0000930:	be 10 00 00 00       	mov    esi,0x10
c0000935:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000938:	75 16                	jne    c0000950 <simple_strtoul+0xa9>
c000093a:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000093e:	50                   	push   eax
c000093f:	e8 4f ff ff ff       	call   c0000893 <tolower>
c0000944:	5d                   	pop    ebp
c0000945:	83 f8 78             	cmp    eax,0x78
c0000948:	74 03                	je     c000094d <simple_strtoul+0xa6>
c000094a:	41                   	inc    ecx
c000094b:	eb 03                	jmp    c0000950 <simple_strtoul+0xa9>
c000094d:	83 c1 02             	add    ecx,0x2
c0000950:	31 ed                	xor    ebp,ebp
c0000952:	31 db                	xor    ebx,ebx
c0000954:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000095b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000095d:	84 d2                	test   dl,dl
c000095f:	74 27                	je     c0000988 <simple_strtoul+0xe1>
c0000961:	0f b6 fa             	movzx  edi,dl
c0000964:	f6 87 a0 74 02 c0 04 	test   BYTE PTR [edi-0x3ffd8b60],0x4
c000096b:	74 05                	je     c0000972 <simple_strtoul+0xcb>
c000096d:	83 ef 30             	sub    edi,0x30
c0000970:	eb 22                	jmp    c0000994 <simple_strtoul+0xed>
c0000972:	0f be d2             	movsx  edx,dl
c0000975:	52                   	push   edx
c0000976:	e8 04 ff ff ff       	call   c000087f <toupper>
c000097b:	5f                   	pop    edi
c000097c:	0f b6 d0             	movzx  edx,al
c000097f:	f6 82 a0 74 02 c0 01 	test   BYTE PTR [edx-0x3ffd8b60],0x1
c0000986:	75 09                	jne    c0000991 <simple_strtoul+0xea>
c0000988:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000098d:	75 2d                	jne    c00009bc <simple_strtoul+0x115>
c000098f:	eb 57                	jmp    c00009e8 <simple_strtoul+0x141>
c0000991:	8d 78 c9             	lea    edi,[eax-0x37]
c0000994:	39 f7                	cmp    edi,esi
c0000996:	73 f0                	jae    c0000988 <simple_strtoul+0xe1>
c0000998:	31 d2                	xor    edx,edx
c000099a:	89 f8                	mov    eax,edi
c000099c:	f7 d0                	not    eax
c000099e:	f7 f6                	div    esi
c00009a0:	39 d8                	cmp    eax,ebx
c00009a2:	72 0e                	jb     c00009b2 <simple_strtoul+0x10b>
c00009a4:	0f af de             	imul   ebx,esi
c00009a7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009ae:	01 fb                	add    ebx,edi
c00009b0:	eb 07                	jmp    c00009b9 <simple_strtoul+0x112>
c00009b2:	bd 01 00 00 00       	mov    ebp,0x1
c00009b7:	31 db                	xor    ebx,ebx
c00009b9:	41                   	inc    ecx
c00009ba:	eb 9f                	jmp    c000095b <simple_strtoul+0xb4>
c00009bc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009bf:	09 d8                	or     eax,ebx
c00009c1:	75 1f                	jne    c00009e2 <simple_strtoul+0x13b>
c00009c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009c7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00009cb:	31 db                	xor    ebx,ebx
c00009cd:	89 38                	mov    DWORD PTR [eax],edi
c00009cf:	eb 17                	jmp    c00009e8 <simple_strtoul+0x141>
c00009d1:	31 db                	xor    ebx,ebx
c00009d3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009d8:	74 14                	je     c00009ee <simple_strtoul+0x147>
c00009da:	31 ed                	xor    ebp,ebp
c00009dc:	85 c9                	test   ecx,ecx
c00009de:	75 e3                	jne    c00009c3 <simple_strtoul+0x11c>
c00009e0:	31 db                	xor    ebx,ebx
c00009e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e6:	89 08                	mov    DWORD PTR [eax],ecx
c00009e8:	4d                   	dec    ebp
c00009e9:	75 03                	jne    c00009ee <simple_strtoul+0x147>
c00009eb:	83 cb ff             	or     ebx,0xffffffff
c00009ee:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009f3:	75 02                	jne    c00009f7 <simple_strtoul+0x150>
c00009f5:	f7 db                	neg    ebx
c00009f7:	83 c4 08             	add    esp,0x8
c00009fa:	89 d8                	mov    eax,ebx
c00009fc:	5b                   	pop    ebx
c00009fd:	5e                   	pop    esi
c00009fe:	5f                   	pop    edi
c00009ff:	5d                   	pop    ebp
c0000a00:	c3                   	ret    

c0000a01 <largebin_index>:
c0000a01:	89 c2                	mov    edx,eax
c0000a03:	c1 ea 08             	shr    edx,0x8
c0000a06:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a0c:	77 10                	ja     c0000a1e <largebin_index+0x1d>
c0000a0e:	0f bd d2             	bsr    edx,edx
c0000a11:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a14:	d3 e8                	shr    eax,cl
c0000a16:	83 e0 03             	and    eax,0x3
c0000a19:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a1d:	c3                   	ret    
c0000a1e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a23:	c3                   	ret    

c0000a24 <malloc_init_state>:
c0000a24:	53                   	push   ebx
c0000a25:	8d 50 34             	lea    edx,[eax+0x34]
c0000a28:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a2e:	89 d1                	mov    ecx,edx
c0000a30:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a33:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a36:	83 c2 08             	add    edx,0x8
c0000a39:	39 da                	cmp    edx,ebx
c0000a3b:	75 f3                	jne    c0000a30 <malloc_init_state+0xc>
c0000a3d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a3f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a49:	83 e2 03             	and    edx,0x3
c0000a4c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a56:	83 ca 48             	or     edx,0x48
c0000a59:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a63:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a6d:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000a74:	89 10                	mov    DWORD PTR [eax],edx
c0000a76:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000a79:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a83:	5b                   	pop    ebx
c0000a84:	c3                   	ret    

c0000a85 <malloc_consolidate>:
c0000a85:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a87:	85 d2                	test   edx,edx
c0000a89:	0f 84 d8 00 00 00    	je     c0000b67 <malloc_consolidate+0xe2>
c0000a8f:	55                   	push   ebp
c0000a90:	83 e2 fd             	and    edx,0xfffffffd
c0000a93:	57                   	push   edi
c0000a94:	89 c5                	mov    ebp,eax
c0000a96:	56                   	push   esi
c0000a97:	8d 78 34             	lea    edi,[eax+0x34]
c0000a9a:	53                   	push   ebx
c0000a9b:	83 ec 10             	sub    esp,0x10
c0000a9e:	89 10                	mov    DWORD PTR [eax],edx
c0000aa0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000aa4:	c1 ea 03             	shr    edx,0x3
c0000aa7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000aab:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000aaf:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ab2:	85 d2                	test   edx,edx
c0000ab4:	0f 84 98 00 00 00    	je     c0000b52 <malloc_consolidate+0xcd>
c0000aba:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ac1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000ac4:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ac7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000acb:	89 f9                	mov    ecx,edi
c0000acd:	83 e1 fe             	and    ecx,0xfffffffe
c0000ad0:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ad3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000ad6:	83 e3 fc             	and    ebx,0xfffffffc
c0000ad9:	83 e7 01             	and    edi,0x1
c0000adc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000adf:	75 14                	jne    c0000af5 <malloc_consolidate+0x70>
c0000ae1:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000ae3:	29 fa                	sub    edx,edi
c0000ae5:	01 f9                	add    ecx,edi
c0000ae7:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000aea:	89 fb                	mov    ebx,edi
c0000aec:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000aef:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000af2:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000af5:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000af8:	74 40                	je     c0000b3a <malloc_consolidate+0xb5>
c0000afa:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000afd:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b00:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b04:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b07:	83 e7 01             	and    edi,0x1
c0000b0a:	75 0e                	jne    c0000b1a <malloc_consolidate+0x95>
c0000b0c:	01 d9                	add    ecx,ebx
c0000b0e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b11:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b14:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b17:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b1a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b1d:	89 ce                	mov    esi,ecx
c0000b1f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b22:	83 ce 01             	or     esi,0x1
c0000b25:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b28:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b2b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b2e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b32:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b35:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b38:	eb 0c                	jmp    c0000b46 <malloc_consolidate+0xc1>
c0000b3a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b3d:	83 c9 01             	or     ecx,0x1
c0000b40:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b43:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b46:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b4a:	85 d2                	test   edx,edx
c0000b4c:	0f 85 6f ff ff ff    	jne    c0000ac1 <malloc_consolidate+0x3c>
c0000b52:	83 c5 04             	add    ebp,0x4
c0000b55:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b59:	0f 85 50 ff ff ff    	jne    c0000aaf <malloc_consolidate+0x2a>
c0000b5f:	83 c4 10             	add    esp,0x10
c0000b62:	5b                   	pop    ebx
c0000b63:	5e                   	pop    esi
c0000b64:	5f                   	pop    edi
c0000b65:	5d                   	pop    ebp
c0000b66:	c3                   	ret    
c0000b67:	e9 b8 fe ff ff       	jmp    c0000a24 <malloc_init_state>

c0000b6c <dlfree>:
c0000b6c:	57                   	push   edi
c0000b6d:	56                   	push   esi
c0000b6e:	53                   	push   ebx
c0000b6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000b73:	85 db                	test   ebx,ebx
c0000b75:	0f 84 e2 00 00 00    	je     c0000c5d <dlfree+0xf1>
c0000b7b:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000b7e:	8b 0d 20 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be20
c0000b84:	89 f0                	mov    eax,esi
c0000b86:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b89:	83 e0 fc             	and    eax,0xfffffffc
c0000b8c:	39 c1                	cmp    ecx,eax
c0000b8e:	72 24                	jb     c0000bb4 <dlfree+0x48>
c0000b90:	83 c9 03             	or     ecx,0x3
c0000b93:	c1 e8 03             	shr    eax,0x3
c0000b96:	89 0d 20 be 02 c0    	mov    DWORD PTR ds:0xc002be20,ecx
c0000b9c:	83 e8 02             	sub    eax,0x2
c0000b9f:	8b 0c 85 24 be 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd41dc]
c0000ba6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000ba8:	89 14 85 24 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41dc],edx
c0000baf:	e9 a9 00 00 00       	jmp    c0000c5d <dlfree+0xf1>
c0000bb4:	83 e6 02             	and    esi,0x2
c0000bb7:	0f 85 a0 00 00 00    	jne    c0000c5d <dlfree+0xf1>
c0000bbd:	83 c9 01             	or     ecx,0x1
c0000bc0:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bc3:	89 0d 20 be 02 c0    	mov    DWORD PTR ds:0xc002be20,ecx
c0000bc9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bcc:	83 e1 fc             	and    ecx,0xfffffffc
c0000bcf:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000bd3:	75 13                	jne    c0000be8 <dlfree+0x7c>
c0000bd5:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000bd8:	29 da                	sub    edx,ebx
c0000bda:	01 d8                	add    eax,ebx
c0000bdc:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000bdf:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000be2:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000be5:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000be8:	39 35 4c be 02 c0    	cmp    DWORD PTR ds:0xc002be4c,esi
c0000bee:	74 40                	je     c0000c30 <dlfree+0xc4>
c0000bf0:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000bf4:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000bf7:	80 e3 01             	and    bl,0x1
c0000bfa:	75 0e                	jne    c0000c0a <dlfree+0x9e>
c0000bfc:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000bff:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c02:	01 c8                	add    eax,ecx
c0000c04:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c07:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c0a:	8b 0d 5c be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be5c
c0000c10:	c7 42 0c 54 be 02 c0 	mov    DWORD PTR [edx+0xc],0xc002be54
c0000c17:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c1a:	89 15 5c be 02 c0    	mov    DWORD PTR ds:0xc002be5c,edx
c0000c20:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c23:	89 c1                	mov    ecx,eax
c0000c25:	83 c9 01             	or     ecx,0x1
c0000c28:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c2b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c2e:	eb 10                	jmp    c0000c40 <dlfree+0xd4>
c0000c30:	01 c8                	add    eax,ecx
c0000c32:	89 c1                	mov    ecx,eax
c0000c34:	83 c9 01             	or     ecx,0x1
c0000c37:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c3a:	89 15 4c be 02 c0    	mov    DWORD PTR ds:0xc002be4c,edx
c0000c40:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c45:	76 16                	jbe    c0000c5d <dlfree+0xf1>
c0000c47:	f6 05 20 be 02 c0 02 	test   BYTE PTR ds:0xc002be20,0x2
c0000c4e:	74 0d                	je     c0000c5d <dlfree+0xf1>
c0000c50:	5b                   	pop    ebx
c0000c51:	b8 20 be 02 c0       	mov    eax,0xc002be20
c0000c56:	5e                   	pop    esi
c0000c57:	5f                   	pop    edi
c0000c58:	e9 28 fe ff ff       	jmp    c0000a85 <malloc_consolidate>
c0000c5d:	5b                   	pop    ebx
c0000c5e:	5e                   	pop    esi
c0000c5f:	5f                   	pop    edi
c0000c60:	c3                   	ret    

c0000c61 <sYSMALLOc>:
c0000c61:	55                   	push   ebp
c0000c62:	57                   	push   edi
c0000c63:	56                   	push   esi
c0000c64:	53                   	push   ebx
c0000c65:	89 d3                	mov    ebx,edx
c0000c67:	83 ec 2c             	sub    esp,0x2c
c0000c6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000c6e:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000c74:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000c77:	8d 42 ff             	lea    eax,[edx-0x1]
c0000c7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000c7e:	74 1f                	je     c0000c9f <sYSMALLOc+0x3e>
c0000c80:	89 d8                	mov    eax,ebx
c0000c82:	e8 fe fd ff ff       	call   c0000a85 <malloc_consolidate>
c0000c87:	83 ec 0c             	sub    esp,0xc
c0000c8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c8e:	83 e8 07             	sub    eax,0x7
c0000c91:	50                   	push   eax
c0000c92:	e8 30 02 00 00       	call   c0000ec7 <dlmalloc>
c0000c97:	83 c4 10             	add    esp,0x10
c0000c9a:	e9 20 02 00 00       	jmp    c0000ebf <sYSMALLOc+0x25e>
c0000c9f:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ca2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ca8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000cab:	83 e0 fc             	and    eax,0xfffffffc
c0000cae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000cb6:	83 c0 10             	add    eax,0x10
c0000cb9:	01 c1                	add    ecx,eax
c0000cbb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cc6:	74 04                	je     c0000ccc <sYSMALLOc+0x6b>
c0000cc8:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ccc:	f7 da                	neg    edx
c0000cce:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000cd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000cd6:	21 d1                	and    ecx,edx
c0000cd8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000cdc:	7f 07                	jg     c0000ce5 <sYSMALLOc+0x84>
c0000cde:	31 c0                	xor    eax,eax
c0000ce0:	e9 da 01 00 00       	jmp    c0000ebf <sYSMALLOc+0x25e>
c0000ce5:	83 ec 0c             	sub    esp,0xc
c0000ce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000cec:	e8 3a e6 00 00       	call   c000f32b <sbrk>
c0000cf1:	83 c4 10             	add    esp,0x10
c0000cf4:	89 c6                	mov    esi,eax
c0000cf6:	83 f8 ff             	cmp    eax,0xffffffff
c0000cf9:	74 e3                	je     c0000cde <sYSMALLOc+0x7d>
c0000cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000cff:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d03:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d06:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d0c:	39 f1                	cmp    ecx,esi
c0000d0e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d14:	75 13                	jne    c0000d29 <sYSMALLOc+0xc8>
c0000d16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d1a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d1e:	83 c8 01             	or     eax,0x1
c0000d21:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d24:	e9 3e 01 00 00       	jmp    c0000e67 <sYSMALLOc+0x206>
c0000d29:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d2f:	88 d0                	mov    al,dl
c0000d31:	83 e0 01             	and    eax,0x1
c0000d34:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d39:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d3d:	0f 95 c0             	setne  al
c0000d40:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d44:	39 f1                	cmp    ecx,esi
c0000d46:	76 12                	jbe    c0000d5a <sYSMALLOc+0xf9>
c0000d48:	84 c0                	test   al,al
c0000d4a:	74 0e                	je     c0000d5a <sYSMALLOc+0xf9>
c0000d4c:	83 e2 fe             	and    edx,0xfffffffe
c0000d4f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d55:	e9 83 00 00 00       	jmp    c0000ddd <sYSMALLOc+0x17c>
c0000d5a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d5f:	74 7c                	je     c0000ddd <sYSMALLOc+0x17c>
c0000d61:	84 c0                	test   al,al
c0000d63:	74 0c                	je     c0000d71 <sYSMALLOc+0x110>
c0000d65:	89 f0                	mov    eax,esi
c0000d67:	29 c8                	sub    eax,ecx
c0000d69:	01 e8                	add    eax,ebp
c0000d6b:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000d71:	89 f2                	mov    edx,esi
c0000d73:	83 e2 07             	and    edx,0x7
c0000d76:	74 0c                	je     c0000d84 <sYSMALLOc+0x123>
c0000d78:	b8 08 00 00 00       	mov    eax,0x8
c0000d7d:	29 d0                	sub    eax,edx
c0000d7f:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d82:	eb 04                	jmp    c0000d88 <sYSMALLOc+0x127>
c0000d84:	89 f5                	mov    ebp,esi
c0000d86:	31 c0                	xor    eax,eax
c0000d88:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d8c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d94:	01 c1                	add    ecx,eax
c0000d96:	83 ec 0c             	sub    esp,0xc
c0000d99:	01 f1                	add    ecx,esi
c0000d9b:	01 ca                	add    edx,ecx
c0000d9d:	29 c8                	sub    eax,ecx
c0000d9f:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000da3:	01 c2                	add    edx,eax
c0000da5:	52                   	push   edx
c0000da6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000daa:	e8 7c e5 00 00       	call   c000f32b <sbrk>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	83 f8 ff             	cmp    eax,0xffffffff
c0000db5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000db9:	75 0f                	jne    c0000dca <sYSMALLOc+0x169>
c0000dbb:	83 ec 0c             	sub    esp,0xc
c0000dbe:	6a 00                	push   0x0
c0000dc0:	e8 66 e5 00 00       	call   c000f32b <sbrk>
c0000dc5:	83 c4 10             	add    esp,0x10
c0000dc8:	eb 30                	jmp    c0000dfa <sYSMALLOc+0x199>
c0000dca:	39 c6                	cmp    esi,eax
c0000dcc:	76 33                	jbe    c0000e01 <sYSMALLOc+0x1a0>
c0000dce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000dd2:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000dd9:	01 f0                	add    eax,esi
c0000ddb:	eb 1d                	jmp    c0000dfa <sYSMALLOc+0x199>
c0000ddd:	83 ec 0c             	sub    esp,0xc
c0000de0:	89 f5                	mov    ebp,esi
c0000de2:	6a 00                	push   0x0
c0000de4:	e8 42 e5 00 00       	call   c000f32b <sbrk>
c0000de9:	89 c2                	mov    edx,eax
c0000deb:	29 f2                	sub    edx,esi
c0000ded:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000df1:	83 c4 10             	add    esp,0x10
c0000df4:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000dfa:	31 d2                	xor    edx,edx
c0000dfc:	83 f8 ff             	cmp    eax,0xffffffff
c0000dff:	74 66                	je     c0000e67 <sYSMALLOc+0x206>
c0000e01:	29 e8                	sub    eax,ebp
c0000e03:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e06:	01 d0                	add    eax,edx
c0000e08:	83 c8 01             	or     eax,0x1
c0000e0b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e0e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e14:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e19:	74 4c                	je     c0000e67 <sYSMALLOc+0x206>
c0000e1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e1f:	83 e8 0c             	sub    eax,0xc
c0000e22:	83 e0 f8             	and    eax,0xfffffff8
c0000e25:	89 c2                	mov    edx,eax
c0000e27:	83 ca 01             	or     edx,0x1
c0000e2a:	83 f8 0f             	cmp    eax,0xf
c0000e2d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e30:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e38:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e40:	76 25                	jbe    c0000e67 <sYSMALLOc+0x206>
c0000e42:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e48:	83 ec 0c             	sub    esp,0xc
c0000e4b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e55:	83 c7 08             	add    edi,0x8
c0000e58:	57                   	push   edi
c0000e59:	e8 0e fd ff ff       	call   c0000b6c <dlfree>
c0000e5e:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e64:	83 c4 10             	add    esp,0x10
c0000e67:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000e6d:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000e73:	73 06                	jae    c0000e7b <sYSMALLOc+0x21a>
c0000e75:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000e7b:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e81:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e87:	73 06                	jae    c0000e8f <sYSMALLOc+0x22e>
c0000e89:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e8f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e92:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e95:	83 e2 fc             	and    edx,0xfffffffc
c0000e98:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e9c:	0f 82 3c fe ff ff    	jb     c0000cde <sYSMALLOc+0x7d>
c0000ea2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ea6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ea9:	29 fa                	sub    edx,edi
c0000eab:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000eae:	83 ca 01             	or     edx,0x1
c0000eb1:	89 fb                	mov    ebx,edi
c0000eb3:	83 c0 08             	add    eax,0x8
c0000eb6:	83 cb 01             	or     ebx,0x1
c0000eb9:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000ebc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000ebf:	83 c4 2c             	add    esp,0x2c
c0000ec2:	5b                   	pop    ebx
c0000ec3:	5e                   	pop    esi
c0000ec4:	5f                   	pop    edi
c0000ec5:	5d                   	pop    ebp
c0000ec6:	c3                   	ret    

c0000ec7 <dlmalloc>:
c0000ec7:	55                   	push   ebp
c0000ec8:	57                   	push   edi
c0000ec9:	56                   	push   esi
c0000eca:	53                   	push   ebx
c0000ecb:	83 ec 1c             	sub    esp,0x1c
c0000ece:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000ed2:	83 f8 df             	cmp    eax,0xffffffdf
c0000ed5:	0f 87 70 03 00 00    	ja     c000124b <dlmalloc+0x384>
c0000edb:	83 c0 0b             	add    eax,0xb
c0000ede:	be 10 00 00 00       	mov    esi,0x10
c0000ee3:	83 f8 0f             	cmp    eax,0xf
c0000ee6:	76 05                	jbe    c0000eed <dlmalloc+0x26>
c0000ee8:	83 e0 f8             	and    eax,0xfffffff8
c0000eeb:	89 c6                	mov    esi,eax
c0000eed:	8b 3d 20 be 02 c0    	mov    edi,DWORD PTR ds:0xc002be20
c0000ef3:	f7 c7 01 00 00 00    	test   edi,0x1
c0000ef9:	75 17                	jne    c0000f12 <dlmalloc+0x4b>
c0000efb:	85 ff                	test   edi,edi
c0000efd:	0f 85 05 03 00 00    	jne    c0001208 <dlmalloc+0x341>
c0000f03:	b8 20 be 02 c0       	mov    eax,0xc002be20
c0000f08:	e8 78 fb ff ff       	call   c0000a85 <malloc_consolidate>
c0000f0d:	e9 f6 02 00 00       	jmp    c0001208 <dlmalloc+0x341>
c0000f12:	39 f7                	cmp    edi,esi
c0000f14:	72 1f                	jb     c0000f35 <dlmalloc+0x6e>
c0000f16:	89 f2                	mov    edx,esi
c0000f18:	c1 ea 03             	shr    edx,0x3
c0000f1b:	83 ea 02             	sub    edx,0x2
c0000f1e:	8b 04 95 24 be 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd41dc]
c0000f25:	85 c0                	test   eax,eax
c0000f27:	74 0c                	je     c0000f35 <dlmalloc+0x6e>
c0000f29:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f2c:	89 0c 95 24 be 02 c0 	mov    DWORD PTR [edx*4-0x3ffd41dc],ecx
c0000f33:	eb 30                	jmp    c0000f65 <dlmalloc+0x9e>
c0000f35:	89 f0                	mov    eax,esi
c0000f37:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f3d:	77 2e                	ja     c0000f6d <dlmalloc+0xa6>
c0000f3f:	c1 e8 03             	shr    eax,0x3
c0000f42:	8d 14 c5 54 be 02 c0 	lea    edx,[eax*8-0x3ffd41ac]
c0000f49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f4d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f50:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f53:	39 c3                	cmp    ebx,eax
c0000f55:	74 2e                	je     c0000f85 <dlmalloc+0xbe>
c0000f57:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f5a:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f62:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f65:	83 c0 08             	add    eax,0x8
c0000f68:	e9 e0 02 00 00       	jmp    c000124d <dlmalloc+0x386>
c0000f6d:	e8 8f fa ff ff       	call   c0000a01 <largebin_index>
c0000f72:	83 e7 02             	and    edi,0x2
c0000f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f79:	74 0a                	je     c0000f85 <dlmalloc+0xbe>
c0000f7b:	b8 20 be 02 c0       	mov    eax,0xc002be20
c0000f80:	e8 00 fb ff ff       	call   c0000a85 <malloc_consolidate>
c0000f85:	8d 46 10             	lea    eax,[esi+0x10]
c0000f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f8c:	8b 1d 60 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002be60
c0000f92:	81 fb 54 be 02 c0    	cmp    ebx,0xc002be54
c0000f98:	0f 84 13 01 00 00    	je     c00010b1 <dlmalloc+0x1ea>
c0000f9e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fa1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fa4:	83 e7 fc             	and    edi,0xfffffffc
c0000fa7:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fad:	77 4c                	ja     c0000ffb <dlmalloc+0x134>
c0000faf:	3d 54 be 02 c0       	cmp    eax,0xc002be54
c0000fb4:	75 45                	jne    c0000ffb <dlmalloc+0x134>
c0000fb6:	39 1d 50 be 02 c0    	cmp    DWORD PTR ds:0xc002be50,ebx
c0000fbc:	75 3d                	jne    c0000ffb <dlmalloc+0x134>
c0000fbe:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000fc2:	73 37                	jae    c0000ffb <dlmalloc+0x134>
c0000fc4:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000fc7:	89 fa                	mov    edx,edi
c0000fc9:	a3 5c be 02 c0       	mov    ds:0xc002be5c,eax
c0000fce:	a3 60 be 02 c0       	mov    ds:0xc002be60,eax
c0000fd3:	a3 50 be 02 c0       	mov    ds:0xc002be50,eax
c0000fd8:	29 f2                	sub    edx,esi
c0000fda:	c7 40 08 54 be 02 c0 	mov    DWORD PTR [eax+0x8],0xc002be54
c0000fe1:	c7 40 0c 54 be 02 c0 	mov    DWORD PTR [eax+0xc],0xc002be54
c0000fe8:	83 ce 01             	or     esi,0x1
c0000feb:	89 d1                	mov    ecx,edx
c0000fed:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000ff0:	83 c9 01             	or     ecx,0x1
c0000ff3:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000ff6:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000ff9:	eb 15                	jmp    c0001010 <dlmalloc+0x149>
c0000ffb:	a3 60 be 02 c0       	mov    ds:0xc002be60,eax
c0001000:	39 fe                	cmp    esi,edi
c0001002:	c7 40 08 54 be 02 c0 	mov    DWORD PTR [eax+0x8],0xc002be54
c0001009:	75 0d                	jne    c0001018 <dlmalloc+0x151>
c000100b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001010:	8d 43 08             	lea    eax,[ebx+0x8]
c0001013:	e9 35 02 00 00       	jmp    c000124d <dlmalloc+0x386>
c0001018:	89 f8                	mov    eax,edi
c000101a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001020:	77 19                	ja     c000103b <dlmalloc+0x174>
c0001022:	c1 e8 03             	shr    eax,0x3
c0001025:	8d 14 00             	lea    edx,[eax+eax*1]
c0001028:	83 c2 0d             	add    edx,0xd
c000102b:	8d 2c 95 18 be 02 c0 	lea    ebp,[edx*4-0x3ffd41e8]
c0001032:	8b 14 95 20 be 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd41e0]
c0001039:	eb 46                	jmp    c0001081 <dlmalloc+0x1ba>
c000103b:	e8 c1 f9 ff ff       	call   c0000a01 <largebin_index>
c0001040:	8d 14 00             	lea    edx,[eax+eax*1]
c0001043:	83 c2 0d             	add    edx,0xd
c0001046:	8d 0c 95 20 be 02 c0 	lea    ecx,[edx*4-0x3ffd41e0]
c000104d:	8b 14 95 20 be 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd41e0]
c0001054:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001057:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000105b:	89 d5                	mov    ebp,edx
c000105d:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001061:	74 1e                	je     c0001081 <dlmalloc+0x1ba>
c0001063:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001066:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001069:	77 12                	ja     c000107d <dlmalloc+0x1b6>
c000106b:	83 cf 01             	or     edi,0x1
c000106e:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001071:	76 05                	jbe    c0001078 <dlmalloc+0x1b1>
c0001073:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001076:	eb f6                	jmp    c000106e <dlmalloc+0x1a7>
c0001078:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000107b:	eb 04                	jmp    c0001081 <dlmalloc+0x1ba>
c000107d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001081:	89 c7                	mov    edi,eax
c0001083:	88 c1                	mov    cl,al
c0001085:	c1 ff 05             	sar    edi,0x5
c0001088:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000108c:	bf 01 00 00 00       	mov    edi,0x1
c0001091:	d3 e7                	shl    edi,cl
c0001093:	89 f8                	mov    eax,edi
c0001095:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001099:	09 04 bd 54 c1 02 c0 	or     DWORD PTR [edi*4-0x3ffd3eac],eax
c00010a0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010a3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010a6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010a9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010ac:	e9 db fe ff ff       	jmp    c0000f8c <dlmalloc+0xc5>
c00010b1:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010b7:	76 78                	jbe    c0001131 <dlmalloc+0x26a>
c00010b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010bd:	8d 04 c5 54 be 02 c0 	lea    eax,[eax*8-0x3ffd41ac]
c00010c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010c7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010ca:	39 ca                	cmp    edx,ecx
c00010cc:	74 63                	je     c0001131 <dlmalloc+0x26a>
c00010ce:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00010d1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00010d4:	83 e3 fc             	and    ebx,0xfffffffc
c00010d7:	39 de                	cmp    esi,ebx
c00010d9:	77 52                	ja     c000112d <dlmalloc+0x266>
c00010db:	89 df                	mov    edi,ebx
c00010dd:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00010e0:	29 f7                	sub    edi,esi
c00010e2:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00010e5:	01 d3                	add    ebx,edx
c00010e7:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00010ea:	83 ff 0f             	cmp    edi,0xf
c00010ed:	8d 42 08             	lea    eax,[edx+0x8]
c00010f0:	77 09                	ja     c00010fb <dlmalloc+0x234>
c00010f2:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00010f6:	e9 52 01 00 00       	jmp    c000124d <dlmalloc+0x386>
c00010fb:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00010fe:	83 ce 01             	or     esi,0x1
c0001101:	89 0d 5c be 02 c0    	mov    DWORD PTR ds:0xc002be5c,ecx
c0001107:	89 0d 60 be 02 c0    	mov    DWORD PTR ds:0xc002be60,ecx
c000110d:	c7 41 08 54 be 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002be54
c0001114:	c7 41 0c 54 be 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002be54
c000111b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000111e:	89 fa                	mov    edx,edi
c0001120:	83 ca 01             	or     edx,0x1
c0001123:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001126:	89 3b                	mov    DWORD PTR [ebx],edi
c0001128:	e9 20 01 00 00       	jmp    c000124d <dlmalloc+0x386>
c000112d:	89 c2                	mov    edx,eax
c000112f:	eb 99                	jmp    c00010ca <dlmalloc+0x203>
c0001131:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001135:	b8 01 00 00 00       	mov    eax,0x1
c000113a:	41                   	inc    ecx
c000113b:	89 cb                	mov    ebx,ecx
c000113d:	8d 14 cd 4c be 02 c0 	lea    edx,[ecx*8-0x3ffd41b4]
c0001144:	c1 eb 05             	shr    ebx,0x5
c0001147:	d3 e0                	shl    eax,cl
c0001149:	8b 3c 9d 54 c1 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd3eac]
c0001150:	39 f8                	cmp    eax,edi
c0001152:	77 04                	ja     c0001158 <dlmalloc+0x291>
c0001154:	85 c0                	test   eax,eax
c0001156:	75 26                	jne    c000117e <dlmalloc+0x2b7>
c0001158:	43                   	inc    ebx
c0001159:	83 fb 02             	cmp    ebx,0x2
c000115c:	0f 87 a6 00 00 00    	ja     c0001208 <dlmalloc+0x341>
c0001162:	8b 3c 9d 54 c1 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd3eac]
c0001169:	85 ff                	test   edi,edi
c000116b:	74 eb                	je     c0001158 <dlmalloc+0x291>
c000116d:	89 d8                	mov    eax,ebx
c000116f:	c1 e0 06             	shl    eax,0x6
c0001172:	8d 14 85 4c be 02 c0 	lea    edx,[eax*4-0x3ffd41b4]
c0001179:	b8 01 00 00 00       	mov    eax,0x1
c000117e:	85 f8                	test   eax,edi
c0001180:	75 07                	jne    c0001189 <dlmalloc+0x2c2>
c0001182:	83 c2 08             	add    edx,0x8
c0001185:	01 c0                	add    eax,eax
c0001187:	eb f5                	jmp    c000117e <dlmalloc+0x2b7>
c0001189:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000118c:	39 ca                	cmp    edx,ecx
c000118e:	75 14                	jne    c00011a4 <dlmalloc+0x2dd>
c0001190:	89 c1                	mov    ecx,eax
c0001192:	83 c2 08             	add    edx,0x8
c0001195:	f7 d1                	not    ecx
c0001197:	01 c0                	add    eax,eax
c0001199:	21 cf                	and    edi,ecx
c000119b:	89 3c 9d 54 c1 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd3eac],edi
c00011a2:	eb ac                	jmp    c0001150 <dlmalloc+0x289>
c00011a4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011a7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011aa:	83 e0 fc             	and    eax,0xfffffffc
c00011ad:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011b0:	89 c3                	mov    ebx,eax
c00011b2:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011b5:	29 f3                	sub    ebx,esi
c00011b7:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011ba:	83 fb 0f             	cmp    ebx,0xf
c00011bd:	8d 41 08             	lea    eax,[ecx+0x8]
c00011c0:	77 09                	ja     c00011cb <dlmalloc+0x304>
c00011c2:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011c6:	e9 82 00 00 00       	jmp    c000124d <dlmalloc+0x386>
c00011cb:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00011ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d4:	89 3d 5c be 02 c0    	mov    DWORD PTR ds:0xc002be5c,edi
c00011da:	89 3d 60 be 02 c0    	mov    DWORD PTR ds:0xc002be60,edi
c00011e0:	c7 47 08 54 be 02 c0 	mov    DWORD PTR [edi+0x8],0xc002be54
c00011e7:	c7 47 0c 54 be 02 c0 	mov    DWORD PTR [edi+0xc],0xc002be54
c00011ee:	77 06                	ja     c00011f6 <dlmalloc+0x32f>
c00011f0:	89 3d 50 be 02 c0    	mov    DWORD PTR ds:0xc002be50,edi
c00011f6:	83 ce 01             	or     esi,0x1
c00011f9:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00011fc:	89 d9                	mov    ecx,ebx
c00011fe:	83 c9 01             	or     ecx,0x1
c0001201:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001204:	89 1a                	mov    DWORD PTR [edx],ebx
c0001206:	eb 45                	jmp    c000124d <dlmalloc+0x386>
c0001208:	a1 4c be 02 c0       	mov    eax,ds:0xc002be4c
c000120d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001210:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001213:	83 e2 fc             	and    edx,0xfffffffc
c0001216:	39 d1                	cmp    ecx,edx
c0001218:	77 1e                	ja     c0001238 <dlmalloc+0x371>
c000121a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000121d:	89 f3                	mov    ebx,esi
c000121f:	89 0d 4c be 02 c0    	mov    DWORD PTR ds:0xc002be4c,ecx
c0001225:	83 cb 01             	or     ebx,0x1
c0001228:	29 f2                	sub    edx,esi
c000122a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000122d:	83 ca 01             	or     edx,0x1
c0001230:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001233:	e9 2d fd ff ff       	jmp    c0000f65 <dlmalloc+0x9e>
c0001238:	83 c4 1c             	add    esp,0x1c
c000123b:	89 f0                	mov    eax,esi
c000123d:	5b                   	pop    ebx
c000123e:	ba 20 be 02 c0       	mov    edx,0xc002be20
c0001243:	5e                   	pop    esi
c0001244:	5f                   	pop    edi
c0001245:	5d                   	pop    ebp
c0001246:	e9 16 fa ff ff       	jmp    c0000c61 <sYSMALLOc>
c000124b:	31 c0                	xor    eax,eax
c000124d:	83 c4 1c             	add    esp,0x1c
c0001250:	5b                   	pop    ebx
c0001251:	5e                   	pop    esi
c0001252:	5f                   	pop    edi
c0001253:	5d                   	pop    ebp
c0001254:	c3                   	ret    

c0001255 <iALLOc>:
c0001255:	55                   	push   ebp
c0001256:	89 c5                	mov    ebp,eax
c0001258:	57                   	push   edi
c0001259:	56                   	push   esi
c000125a:	53                   	push   ebx
c000125b:	83 ec 2c             	sub    esp,0x2c
c000125e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001262:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001266:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000126a:	83 3d 20 be 02 c0 00 	cmp    DWORD PTR ds:0xc002be20,0x0
c0001271:	75 12                	jne    c0001285 <iALLOc+0x30>
c0001273:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001277:	b8 20 be 02 c0       	mov    eax,0xc002be20
c000127c:	e8 04 f8 ff ff       	call   c0000a85 <malloc_consolidate>
c0001281:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001285:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000128a:	74 12                	je     c000129e <iALLOc+0x49>
c000128c:	85 ed                	test   ebp,ebp
c000128e:	0f 84 64 01 00 00    	je     c00013f8 <iALLOc+0x1a3>
c0001294:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000129c:	eb 33                	jmp    c00012d1 <iALLOc+0x7c>
c000129e:	85 ed                	test   ebp,ebp
c00012a0:	75 14                	jne    c00012b6 <iALLOc+0x61>
c00012a2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012aa:	83 c4 2c             	add    esp,0x2c
c00012ad:	5b                   	pop    ebx
c00012ae:	5e                   	pop    esi
c00012af:	5f                   	pop    edi
c00012b0:	5d                   	pop    ebp
c00012b1:	e9 11 fc ff ff       	jmp    c0000ec7 <dlmalloc>
c00012b6:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012bd:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012c5:	83 f8 0f             	cmp    eax,0xf
c00012c8:	76 07                	jbe    c00012d1 <iALLOc+0x7c>
c00012ca:	83 e0 f8             	and    eax,0xfffffff8
c00012cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00012d1:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00012d6:	75 09                	jne    c00012e1 <iALLOc+0x8c>
c00012d8:	89 d0                	mov    eax,edx
c00012da:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00012dd:	31 f6                	xor    esi,esi
c00012df:	eb 3b                	jmp    c000131c <iALLOc+0xc7>
c00012e1:	8b 02                	mov    eax,DWORD PTR [edx]
c00012e3:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00012eb:	83 c0 0b             	add    eax,0xb
c00012ee:	83 f8 0f             	cmp    eax,0xf
c00012f1:	76 07                	jbe    c00012fa <iALLOc+0xa5>
c00012f3:	83 e0 f8             	and    eax,0xfffffff8
c00012f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00012fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00012fe:	0f af f5             	imul   esi,ebp
c0001301:	eb 25                	jmp    c0001328 <iALLOc+0xd3>
c0001303:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001305:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001308:	bb 10 00 00 00       	mov    ebx,0x10
c000130d:	83 f9 0f             	cmp    ecx,0xf
c0001310:	76 05                	jbe    c0001317 <iALLOc+0xc2>
c0001312:	83 e1 f8             	and    ecx,0xfffffff8
c0001315:	89 cb                	mov    ebx,ecx
c0001317:	01 de                	add    esi,ebx
c0001319:	83 c0 04             	add    eax,0x4
c000131c:	39 c7                	cmp    edi,eax
c000131e:	75 e3                	jne    c0001303 <iALLOc+0xae>
c0001320:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000132c:	8b 1d 74 c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c174
c0001332:	83 ec 0c             	sub    esp,0xc
c0001335:	c7 05 74 c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c174,0x0
c000133f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001343:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001347:	50                   	push   eax
c0001348:	e8 7a fb ff ff       	call   c0000ec7 <dlmalloc>
c000134d:	83 c4 10             	add    esp,0x10
c0001350:	89 1d 74 c1 02 c0    	mov    DWORD PTR ds:0xc002c174,ebx
c0001356:	85 c0                	test   eax,eax
c0001358:	0f 84 92 00 00 00    	je     c00013f0 <iALLOc+0x19b>
c000135e:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001361:	8d 78 f8             	lea    edi,[eax-0x8]
c0001364:	83 e3 fc             	and    ebx,0xfffffffc
c0001367:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000136b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001370:	74 1e                	je     c0001390 <iALLOc+0x13b>
c0001372:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001376:	89 d9                	mov    ecx,ebx
c0001378:	52                   	push   edx
c0001379:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000137d:	83 e9 04             	sub    ecx,0x4
c0001380:	51                   	push   ecx
c0001381:	6a 00                	push   0x0
c0001383:	50                   	push   eax
c0001384:	e8 02 f3 ff ff       	call   c000068b <memset>
c0001389:	83 c4 10             	add    esp,0x10
c000138c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001390:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001395:	75 14                	jne    c00013ab <iALLOc+0x156>
c0001397:	8d 04 37             	lea    eax,[edi+esi*1]
c000139a:	29 f3                	sub    ebx,esi
c000139c:	8d 48 08             	lea    ecx,[eax+0x8]
c000139f:	83 cb 01             	or     ebx,0x1
c00013a2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013a6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013a9:	89 f3                	mov    ebx,esi
c00013ab:	31 c0                	xor    eax,eax
c00013ad:	4d                   	dec    ebp
c00013ae:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013b1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013b5:	39 c5                	cmp    ebp,eax
c00013b7:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013ba:	74 2c                	je     c00013e8 <iALLOc+0x193>
c00013bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013c0:	85 c9                	test   ecx,ecx
c00013c2:	75 15                	jne    c00013d9 <iALLOc+0x184>
c00013c4:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013c7:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013ca:	b9 10 00 00 00       	mov    ecx,0x10
c00013cf:	83 fe 0f             	cmp    esi,0xf
c00013d2:	76 05                	jbe    c00013d9 <iALLOc+0x184>
c00013d4:	83 e6 f8             	and    esi,0xfffffff8
c00013d7:	89 f1                	mov    ecx,esi
c00013d9:	89 ce                	mov    esi,ecx
c00013db:	29 cb                	sub    ebx,ecx
c00013dd:	83 ce 01             	or     esi,0x1
c00013e0:	40                   	inc    eax
c00013e1:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00013e4:	01 cf                	add    edi,ecx
c00013e6:	eb c6                	jmp    c00013ae <iALLOc+0x159>
c00013e8:	83 cb 01             	or     ebx,0x1
c00013eb:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00013ee:	eb 08                	jmp    c00013f8 <iALLOc+0x1a3>
c00013f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00013f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00013fc:	83 c4 2c             	add    esp,0x2c
c00013ff:	5b                   	pop    ebx
c0001400:	5e                   	pop    esi
c0001401:	5f                   	pop    edi
c0001402:	5d                   	pop    ebp
c0001403:	c3                   	ret    

c0001404 <dlrealloc>:
c0001404:	55                   	push   ebp
c0001405:	57                   	push   edi
c0001406:	56                   	push   esi
c0001407:	53                   	push   ebx
c0001408:	83 ec 1c             	sub    esp,0x1c
c000140b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000140f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001413:	85 db                	test   ebx,ebx
c0001415:	75 10                	jne    c0001427 <dlrealloc+0x23>
c0001417:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000141b:	83 c4 1c             	add    esp,0x1c
c000141e:	5b                   	pop    ebx
c000141f:	5e                   	pop    esi
c0001420:	5f                   	pop    edi
c0001421:	5d                   	pop    ebp
c0001422:	e9 a0 fa ff ff       	jmp    c0000ec7 <dlmalloc>
c0001427:	83 f8 df             	cmp    eax,0xffffffdf
c000142a:	76 07                	jbe    c0001433 <dlrealloc+0x2f>
c000142c:	31 db                	xor    ebx,ebx
c000142e:	e9 7c 01 00 00       	jmp    c00015af <dlrealloc+0x1ab>
c0001433:	83 c0 0b             	add    eax,0xb
c0001436:	bf 10 00 00 00       	mov    edi,0x10
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 05                	jbe    c0001445 <dlrealloc+0x41>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 c7                	mov    edi,eax
c0001445:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001448:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000144b:	89 c6                	mov    esi,eax
c000144d:	83 e6 fc             	and    esi,0xfffffffc
c0001450:	a8 02                	test   al,0x2
c0001452:	75 d8                	jne    c000142c <dlrealloc+0x28>
c0001454:	39 f7                	cmp    edi,esi
c0001456:	0f 86 15 01 00 00    	jbe    c0001571 <dlrealloc+0x16d>
c000145c:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001460:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001463:	39 15 4c be 02 c0    	cmp    DWORD PTR ds:0xc002be4c,edx
c0001469:	75 33                	jne    c000149e <dlrealloc+0x9a>
c000146b:	83 e1 fc             	and    ecx,0xfffffffc
c000146e:	01 f1                	add    ecx,esi
c0001470:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001474:	8d 4f 10             	lea    ecx,[edi+0x10]
c0001477:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000147b:	77 49                	ja     c00014c6 <dlrealloc+0xc2>
c000147d:	01 fd                	add    ebp,edi
c000147f:	83 e0 01             	and    eax,0x1
c0001482:	09 f8                	or     eax,edi
c0001484:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001487:	89 2d 4c be 02 c0    	mov    DWORD PTR ds:0xc002be4c,ebp
c000148d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001491:	29 f8                	sub    eax,edi
c0001493:	83 c8 01             	or     eax,0x1
c0001496:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001499:	e9 11 01 00 00       	jmp    c00015af <dlrealloc+0x1ab>
c000149e:	89 c8                	mov    eax,ecx
c00014a0:	83 e0 fe             	and    eax,0xfffffffe
c00014a3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014a8:	75 1c                	jne    c00014c6 <dlrealloc+0xc2>
c00014aa:	83 e1 fc             	and    ecx,0xfffffffc
c00014ad:	01 f1                	add    ecx,esi
c00014af:	39 cf                	cmp    edi,ecx
c00014b1:	77 13                	ja     c00014c6 <dlrealloc+0xc2>
c00014b3:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014b6:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014b9:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014bc:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014bf:	89 ce                	mov    esi,ecx
c00014c1:	e9 ab 00 00 00       	jmp    c0001571 <dlrealloc+0x16d>
c00014c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014ca:	8d 47 f9             	lea    eax,[edi-0x7]
c00014cd:	83 ec 0c             	sub    esp,0xc
c00014d0:	50                   	push   eax
c00014d1:	e8 f1 f9 ff ff       	call   c0000ec7 <dlmalloc>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	89 c1                	mov    ecx,eax
c00014db:	85 c0                	test   eax,eax
c00014dd:	0f 84 49 ff ff ff    	je     c000142c <dlrealloc+0x28>
c00014e3:	8d 40 f8             	lea    eax,[eax-0x8]
c00014e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00014ea:	39 c2                	cmp    edx,eax
c00014ec:	75 0a                	jne    c00014f8 <dlrealloc+0xf4>
c00014ee:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00014f1:	83 e0 fc             	and    eax,0xfffffffc
c00014f4:	01 c6                	add    esi,eax
c00014f6:	eb 79                	jmp    c0001571 <dlrealloc+0x16d>
c00014f8:	83 ee 04             	sub    esi,0x4
c00014fb:	83 fe 27             	cmp    esi,0x27
c00014fe:	76 16                	jbe    c0001516 <dlrealloc+0x112>
c0001500:	50                   	push   eax
c0001501:	56                   	push   esi
c0001502:	53                   	push   ebx
c0001503:	51                   	push   ecx
c0001504:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001508:	e8 48 f1 ff ff       	call   c0000655 <memcpy>
c000150d:	83 c4 10             	add    esp,0x10
c0001510:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001514:	eb 43                	jmp    c0001559 <dlrealloc+0x155>
c0001516:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001518:	83 fe 13             	cmp    esi,0x13
c000151b:	89 01                	mov    DWORD PTR [ecx],eax
c000151d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001520:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001523:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001526:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001529:	76 2e                	jbe    c0001559 <dlrealloc+0x155>
c000152b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000152e:	83 fe 1b             	cmp    esi,0x1b
c0001531:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001534:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001537:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000153a:	76 1d                	jbe    c0001559 <dlrealloc+0x155>
c000153c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000153f:	83 fe 23             	cmp    esi,0x23
c0001542:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001545:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001548:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000154b:	76 0c                	jbe    c0001559 <dlrealloc+0x155>
c000154d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001550:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001553:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001556:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001559:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000155d:	83 ec 0c             	sub    esp,0xc
c0001560:	53                   	push   ebx
c0001561:	e8 06 f6 ff ff       	call   c0000b6c <dlfree>
c0001566:	83 c4 10             	add    esp,0x10
c0001569:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000156d:	89 cb                	mov    ebx,ecx
c000156f:	eb 3e                	jmp    c00015af <dlrealloc+0x1ab>
c0001571:	89 f2                	mov    edx,esi
c0001573:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001576:	29 fa                	sub    edx,edi
c0001578:	83 e1 01             	and    ecx,0x1
c000157b:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c000157f:	83 fa 0f             	cmp    edx,0xf
c0001582:	77 0b                	ja     c000158f <dlrealloc+0x18b>
c0001584:	09 ce                	or     esi,ecx
c0001586:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001589:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000158d:	eb 20                	jmp    c00015af <dlrealloc+0x1ab>
c000158f:	01 fd                	add    ebp,edi
c0001591:	83 ec 0c             	sub    esp,0xc
c0001594:	09 cf                	or     edi,ecx
c0001596:	83 ca 01             	or     edx,0x1
c0001599:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c000159c:	83 c5 08             	add    ebp,0x8
c000159f:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015a2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015a6:	55                   	push   ebp
c00015a7:	e8 c0 f5 ff ff       	call   c0000b6c <dlfree>
c00015ac:	83 c4 10             	add    esp,0x10
c00015af:	83 c4 1c             	add    esp,0x1c
c00015b2:	89 d8                	mov    eax,ebx
c00015b4:	5b                   	pop    ebx
c00015b5:	5e                   	pop    esi
c00015b6:	5f                   	pop    edi
c00015b7:	5d                   	pop    ebp
c00015b8:	c3                   	ret    

c00015b9 <dlmemalign>:
c00015b9:	55                   	push   ebp
c00015ba:	57                   	push   edi
c00015bb:	56                   	push   esi
c00015bc:	53                   	push   ebx
c00015bd:	83 ec 0c             	sub    esp,0xc
c00015c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015c8:	83 fa 08             	cmp    edx,0x8
c00015cb:	77 10                	ja     c00015dd <dlmemalign+0x24>
c00015cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00015d1:	83 c4 0c             	add    esp,0xc
c00015d4:	5b                   	pop    ebx
c00015d5:	5e                   	pop    esi
c00015d6:	5f                   	pop    edi
c00015d7:	5d                   	pop    ebp
c00015d8:	e9 ea f8 ff ff       	jmp    c0000ec7 <dlmalloc>
c00015dd:	bf 10 00 00 00       	mov    edi,0x10
c00015e2:	83 fa 0f             	cmp    edx,0xf
c00015e5:	76 13                	jbe    c00015fa <dlmemalign+0x41>
c00015e7:	8d 4a ff             	lea    ecx,[edx-0x1]
c00015ea:	85 d1                	test   ecx,edx
c00015ec:	75 04                	jne    c00015f2 <dlmemalign+0x39>
c00015ee:	89 d7                	mov    edi,edx
c00015f0:	eb 08                	jmp    c00015fa <dlmemalign+0x41>
c00015f2:	39 d7                	cmp    edi,edx
c00015f4:	73 04                	jae    c00015fa <dlmemalign+0x41>
c00015f6:	01 ff                	add    edi,edi
c00015f8:	eb f8                	jmp    c00015f2 <dlmemalign+0x39>
c00015fa:	83 f8 df             	cmp    eax,0xffffffdf
c00015fd:	76 07                	jbe    c0001606 <dlmemalign+0x4d>
c00015ff:	31 c0                	xor    eax,eax
c0001601:	e9 ce 00 00 00       	jmp    c00016d4 <dlmemalign+0x11b>
c0001606:	83 c0 0b             	add    eax,0xb
c0001609:	bd 10 00 00 00       	mov    ebp,0x10
c000160e:	83 f8 0f             	cmp    eax,0xf
c0001611:	76 05                	jbe    c0001618 <dlmemalign+0x5f>
c0001613:	83 e0 f8             	and    eax,0xfffffff8
c0001616:	89 c5                	mov    ebp,eax
c0001618:	83 ec 0c             	sub    esp,0xc
c000161b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000161f:	50                   	push   eax
c0001620:	e8 a2 f8 ff ff       	call   c0000ec7 <dlmalloc>
c0001625:	83 c4 10             	add    esp,0x10
c0001628:	89 c1                	mov    ecx,eax
c000162a:	85 c0                	test   eax,eax
c000162c:	74 d1                	je     c00015ff <dlmemalign+0x46>
c000162e:	31 d2                	xor    edx,edx
c0001630:	8d 70 f8             	lea    esi,[eax-0x8]
c0001633:	f7 f7                	div    edi
c0001635:	85 d2                	test   edx,edx
c0001637:	74 62                	je     c000169b <dlmemalign+0xe2>
c0001639:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000163d:	89 f8                	mov    eax,edi
c000163f:	f7 d8                	neg    eax
c0001641:	21 c3                	and    ebx,eax
c0001643:	83 eb 08             	sub    ebx,0x8
c0001646:	89 d8                	mov    eax,ebx
c0001648:	29 f0                	sub    eax,esi
c000164a:	83 f8 0f             	cmp    eax,0xf
c000164d:	77 02                	ja     c0001651 <dlmemalign+0x98>
c000164f:	01 fb                	add    ebx,edi
c0001651:	89 d8                	mov    eax,ebx
c0001653:	29 f0                	sub    eax,esi
c0001655:	89 c6                	mov    esi,eax
c0001657:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000165a:	89 c2                	mov    edx,eax
c000165c:	83 e2 fc             	and    edx,0xfffffffc
c000165f:	29 f2                	sub    edx,esi
c0001661:	a8 02                	test   al,0x2
c0001663:	74 10                	je     c0001675 <dlmemalign+0xbc>
c0001665:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001668:	83 ca 02             	or     edx,0x2
c000166b:	8d 43 08             	lea    eax,[ebx+0x8]
c000166e:	89 33                	mov    DWORD PTR [ebx],esi
c0001670:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001673:	eb 5f                	jmp    c00016d4 <dlmemalign+0x11b>
c0001675:	83 ec 0c             	sub    esp,0xc
c0001678:	89 d0                	mov    eax,edx
c000167a:	83 c8 01             	or     eax,0x1
c000167d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001680:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001685:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001688:	83 e0 01             	and    eax,0x1
c000168b:	09 f0                	or     eax,esi
c000168d:	89 de                	mov    esi,ebx
c000168f:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001692:	51                   	push   ecx
c0001693:	e8 d4 f4 ff ff       	call   c0000b6c <dlfree>
c0001698:	83 c4 10             	add    esp,0x10
c000169b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000169e:	a8 02                	test   al,0x2
c00016a0:	75 2f                	jne    c00016d1 <dlmemalign+0x118>
c00016a2:	83 e0 fc             	and    eax,0xfffffffc
c00016a5:	8d 55 10             	lea    edx,[ebp+0x10]
c00016a8:	39 c2                	cmp    edx,eax
c00016aa:	73 25                	jae    c00016d1 <dlmemalign+0x118>
c00016ac:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016af:	83 ec 0c             	sub    esp,0xc
c00016b2:	29 e8                	sub    eax,ebp
c00016b4:	83 c2 08             	add    edx,0x8
c00016b7:	83 c8 01             	or     eax,0x1
c00016ba:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016bd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016c0:	83 e0 01             	and    eax,0x1
c00016c3:	09 c5                	or     ebp,eax
c00016c5:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016c8:	52                   	push   edx
c00016c9:	e8 9e f4 ff ff       	call   c0000b6c <dlfree>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	8d 46 08             	lea    eax,[esi+0x8]
c00016d4:	83 c4 0c             	add    esp,0xc
c00016d7:	5b                   	pop    ebx
c00016d8:	5e                   	pop    esi
c00016d9:	5f                   	pop    edi
c00016da:	5d                   	pop    ebp
c00016db:	c3                   	ret    

c00016dc <dlcalloc>:
c00016dc:	53                   	push   ebx
c00016dd:	83 ec 14             	sub    esp,0x14
c00016e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016e4:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00016e9:	50                   	push   eax
c00016ea:	e8 d8 f7 ff ff       	call   c0000ec7 <dlmalloc>
c00016ef:	83 c4 10             	add    esp,0x10
c00016f2:	89 c3                	mov    ebx,eax
c00016f4:	85 c0                	test   eax,eax
c00016f6:	74 77                	je     c000176f <dlcalloc+0x93>
c00016f8:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00016fb:	89 d0                	mov    eax,edx
c00016fd:	83 e0 fc             	and    eax,0xfffffffc
c0001700:	80 e2 02             	and    dl,0x2
c0001703:	75 5a                	jne    c000175f <dlcalloc+0x83>
c0001705:	83 e8 04             	sub    eax,0x4
c0001708:	83 f8 27             	cmp    eax,0x27
c000170b:	76 03                	jbe    c0001710 <dlcalloc+0x34>
c000170d:	51                   	push   ecx
c000170e:	eb 53                	jmp    c0001763 <dlcalloc+0x87>
c0001710:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001716:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000171d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001724:	83 f8 13             	cmp    eax,0x13
c0001727:	76 46                	jbe    c000176f <dlcalloc+0x93>
c0001729:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001730:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001737:	83 f8 1b             	cmp    eax,0x1b
c000173a:	76 33                	jbe    c000176f <dlcalloc+0x93>
c000173c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001743:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000174a:	83 f8 23             	cmp    eax,0x23
c000174d:	76 20                	jbe    c000176f <dlcalloc+0x93>
c000174f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001756:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000175d:	eb 10                	jmp    c000176f <dlcalloc+0x93>
c000175f:	83 e8 08             	sub    eax,0x8
c0001762:	52                   	push   edx
c0001763:	50                   	push   eax
c0001764:	6a 00                	push   0x0
c0001766:	53                   	push   ebx
c0001767:	e8 1f ef ff ff       	call   c000068b <memset>
c000176c:	83 c4 10             	add    esp,0x10
c000176f:	89 d8                	mov    eax,ebx
c0001771:	83 c4 08             	add    esp,0x8
c0001774:	5b                   	pop    ebx
c0001775:	c3                   	ret    

c0001776 <dlcfree>:
c0001776:	e9 f1 f3 ff ff       	jmp    c0000b6c <dlfree>

c000177b <dlindependent_calloc>:
c000177b:	83 ec 28             	sub    esp,0x28
c000177e:	b9 03 00 00 00       	mov    ecx,0x3
c0001783:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001787:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000178b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000178f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001793:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001797:	e8 b9 fa ff ff       	call   c0001255 <iALLOc>
c000179c:	83 c4 2c             	add    esp,0x2c
c000179f:	c3                   	ret    

c00017a0 <dlindependent_comalloc>:
c00017a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017a8:	31 c9                	xor    ecx,ecx
c00017aa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017b2:	e9 9e fa ff ff       	jmp    c0001255 <iALLOc>

c00017b7 <dlvalloc>:
c00017b7:	83 ec 0c             	sub    esp,0xc
c00017ba:	83 3d 20 be 02 c0 00 	cmp    DWORD PTR ds:0xc002be20,0x0
c00017c1:	75 0a                	jne    c00017cd <dlvalloc+0x16>
c00017c3:	b8 20 be 02 c0       	mov    eax,0xc002be20
c00017c8:	e8 b8 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c00017cd:	50                   	push   eax
c00017ce:	50                   	push   eax
c00017cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00017d3:	ff 35 7c c1 02 c0    	push   DWORD PTR ds:0xc002c17c
c00017d9:	e8 db fd ff ff       	call   c00015b9 <dlmemalign>
c00017de:	83 c4 1c             	add    esp,0x1c
c00017e1:	c3                   	ret    

c00017e2 <dlpvalloc>:
c00017e2:	83 ec 0c             	sub    esp,0xc
c00017e5:	83 3d 20 be 02 c0 00 	cmp    DWORD PTR ds:0xc002be20,0x0
c00017ec:	75 0a                	jne    c00017f8 <dlpvalloc+0x16>
c00017ee:	b8 20 be 02 c0       	mov    eax,0xc002be20
c00017f3:	e8 8d f2 ff ff       	call   c0000a85 <malloc_consolidate>
c00017f8:	a1 7c c1 02 c0       	mov    eax,ds:0xc002c17c
c00017fd:	89 c1                	mov    ecx,eax
c00017ff:	52                   	push   edx
c0001800:	f7 d9                	neg    ecx
c0001802:	52                   	push   edx
c0001803:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001807:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000180b:	21 ca                	and    edx,ecx
c000180d:	52                   	push   edx
c000180e:	50                   	push   eax
c000180f:	e8 a5 fd ff ff       	call   c00015b9 <dlmemalign>
c0001814:	83 c4 1c             	add    esp,0x1c
c0001817:	c3                   	ret    

c0001818 <dlmalloc_trim>:
c0001818:	b8 20 be 02 c0       	mov    eax,0xc002be20
c000181d:	e8 63 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c0001822:	31 c0                	xor    eax,eax
c0001824:	c3                   	ret    

c0001825 <dlmalloc_usable_size>:
c0001825:	53                   	push   ebx
c0001826:	31 c0                	xor    eax,eax
c0001828:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000182c:	85 c9                	test   ecx,ecx
c000182e:	74 24                	je     c0001854 <dlmalloc_usable_size+0x2f>
c0001830:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001833:	f6 c2 02             	test   dl,0x2
c0001836:	74 08                	je     c0001840 <dlmalloc_usable_size+0x1b>
c0001838:	83 e2 fc             	and    edx,0xfffffffc
c000183b:	8d 42 f8             	lea    eax,[edx-0x8]
c000183e:	eb 14                	jmp    c0001854 <dlmalloc_usable_size+0x2f>
c0001840:	89 d3                	mov    ebx,edx
c0001842:	31 c0                	xor    eax,eax
c0001844:	83 e3 fe             	and    ebx,0xfffffffe
c0001847:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000184c:	74 06                	je     c0001854 <dlmalloc_usable_size+0x2f>
c000184e:	83 e2 fc             	and    edx,0xfffffffc
c0001851:	8d 42 fc             	lea    eax,[edx-0x4]
c0001854:	5b                   	pop    ebx
c0001855:	c3                   	ret    

c0001856 <dlmallinfo>:
c0001856:	55                   	push   ebp
c0001857:	57                   	push   edi
c0001858:	56                   	push   esi
c0001859:	53                   	push   ebx
c000185a:	83 ec 08             	sub    esp,0x8
c000185d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001861:	83 3d 4c be 02 c0 00 	cmp    DWORD PTR ds:0xc002be4c,0x0
c0001868:	75 0a                	jne    c0001874 <dlmallinfo+0x1e>
c000186a:	b8 20 be 02 c0       	mov    eax,0xc002be20
c000186f:	e8 11 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c0001874:	a1 4c be 02 c0       	mov    eax,ds:0xc002be4c
c0001879:	31 ed                	xor    ebp,ebp
c000187b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000187e:	31 c9                	xor    ecx,ecx
c0001880:	83 e0 fc             	and    eax,0xfffffffc
c0001883:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001887:	31 c0                	xor    eax,eax
c0001889:	8b 14 85 24 be 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd41dc]
c0001890:	85 d2                	test   edx,edx
c0001892:	74 0e                	je     c00018a2 <dlmallinfo+0x4c>
c0001894:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001897:	45                   	inc    ebp
c0001898:	83 e6 fc             	and    esi,0xfffffffc
c000189b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000189e:	01 f1                	add    ecx,esi
c00018a0:	eb ee                	jmp    c0001890 <dlmallinfo+0x3a>
c00018a2:	40                   	inc    eax
c00018a3:	83 f8 0a             	cmp    eax,0xa
c00018a6:	75 e1                	jne    c0001889 <dlmallinfo+0x33>
c00018a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018ac:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018b3:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018b6:	b8 54 be 02 c0       	mov    eax,0xc002be54
c00018bb:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018be:	39 f0                	cmp    eax,esi
c00018c0:	74 10                	je     c00018d2 <dlmallinfo+0x7c>
c00018c2:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018c5:	ff 04 24             	inc    DWORD PTR [esp]
c00018c8:	83 e7 fc             	and    edi,0xfffffffc
c00018cb:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00018ce:	01 fa                	add    edx,edi
c00018d0:	eb ec                	jmp    c00018be <dlmallinfo+0x68>
c00018d2:	83 c0 08             	add    eax,0x8
c00018d5:	3d 4c c1 02 c0       	cmp    eax,0xc002c14c
c00018da:	75 df                	jne    c00018bb <dlmallinfo+0x65>
c00018dc:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00018df:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00018e2:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00018e5:	a1 88 c1 02 c0       	mov    eax,ds:0xc002c188
c00018ea:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00018ed:	89 03                	mov    DWORD PTR [ebx],eax
c00018ef:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00018f2:	8b 35 70 c1 02 c0    	mov    esi,DWORD PTR ds:0xc002c170
c00018f8:	29 d0                	sub    eax,edx
c00018fa:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00018fd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001900:	8b 35 84 c1 02 c0    	mov    esi,DWORD PTR ds:0xc002c184
c0001906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000190a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000190d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001910:	8b 35 94 c1 02 c0    	mov    esi,DWORD PTR ds:0xc002c194
c0001916:	89 d8                	mov    eax,ebx
c0001918:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000191b:	83 c4 08             	add    esp,0x8
c000191e:	5b                   	pop    ebx
c000191f:	5e                   	pop    esi
c0001920:	5f                   	pop    edi
c0001921:	5d                   	pop    ebp
c0001922:	c2 04 00             	ret    0x4

c0001925 <dlmalloc_stats>:
c0001925:	83 ec 30             	sub    esp,0x30
c0001928:	8d 44 24 08          	lea    eax,[esp+0x8]
c000192c:	50                   	push   eax
c000192d:	e8 24 ff ff ff       	call   c0001856 <dlmallinfo>
c0001932:	83 c4 30             	add    esp,0x30
c0001935:	c3                   	ret    

c0001936 <dlmallopt>:
c0001936:	56                   	push   esi
c0001937:	b8 20 be 02 c0       	mov    eax,0xc002be20
c000193c:	53                   	push   ebx
c000193d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001941:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001945:	e8 3b f1 ff ff       	call   c0000a85 <malloc_consolidate>
c000194a:	8d 46 04             	lea    eax,[esi+0x4]
c000194d:	83 f8 05             	cmp    eax,0x5
c0001950:	77 67                	ja     c00019b9 <dlmallopt+0x83>
c0001952:	ff 24 85 a4 75 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd8a5c]
c0001959:	83 fb 50             	cmp    ebx,0x50
c000195c:	77 5b                	ja     c00019b9 <dlmallopt+0x83>
c000195e:	ba 08 00 00 00       	mov    edx,0x8
c0001963:	85 db                	test   ebx,ebx
c0001965:	74 12                	je     c0001979 <dlmallopt+0x43>
c0001967:	83 c3 0b             	add    ebx,0xb
c000196a:	ba 10 00 00 00       	mov    edx,0x10
c000196f:	83 fb 0f             	cmp    ebx,0xf
c0001972:	76 05                	jbe    c0001979 <dlmallopt+0x43>
c0001974:	89 da                	mov    edx,ebx
c0001976:	83 e2 f8             	and    edx,0xfffffff8
c0001979:	a1 20 be 02 c0       	mov    eax,ds:0xc002be20
c000197e:	83 e0 03             	and    eax,0x3
c0001981:	09 d0                	or     eax,edx
c0001983:	a3 20 be 02 c0       	mov    ds:0xc002be20,eax
c0001988:	eb 31                	jmp    c00019bb <dlmallopt+0x85>
c000198a:	89 1d 64 c1 02 c0    	mov    DWORD PTR ds:0xc002c164,ebx
c0001990:	eb 06                	jmp    c0001998 <dlmallopt+0x62>
c0001992:	89 1d 68 c1 02 c0    	mov    DWORD PTR ds:0xc002c168,ebx
c0001998:	be 01 00 00 00       	mov    esi,0x1
c000199d:	eb 1c                	jmp    c00019bb <dlmallopt+0x85>
c000199f:	89 1d 6c c1 02 c0    	mov    DWORD PTR ds:0xc002c16c,ebx
c00019a5:	eb f1                	jmp    c0001998 <dlmallopt+0x62>
c00019a7:	31 f6                	xor    esi,esi
c00019a9:	85 db                	test   ebx,ebx
c00019ab:	75 0e                	jne    c00019bb <dlmallopt+0x85>
c00019ad:	c7 05 74 c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c174,0x0
c00019b7:	eb df                	jmp    c0001998 <dlmallopt+0x62>
c00019b9:	31 f6                	xor    esi,esi
c00019bb:	89 f0                	mov    eax,esi
c00019bd:	5b                   	pop    ebx
c00019be:	5e                   	pop    esi
c00019bf:	c3                   	ret    

c00019c0 <disk_status>:
c00019c0:	31 c0                	xor    eax,eax
c00019c2:	c3                   	ret    

c00019c3 <disk_initialize>:
c00019c3:	31 c0                	xor    eax,eax
c00019c5:	c3                   	ret    

c00019c6 <disk_read>:
c00019c6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019cb:	0f b6 04 85 c0 d8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd2740]
c00019d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d7:	e9 00 dc 01 00       	jmp    c001f5dc <fatWrapperReadDisk>

c00019dc <disk_write>:
c00019dc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019e1:	0f b6 04 85 c0 d8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd2740]
c00019e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019ed:	e9 31 dc 01 00       	jmp    c001f623 <fatWrapperWriteDisk>

c00019f2 <disk_ioctl>:
c00019f2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00019f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00019fb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a00:	0f b6 04 85 c0 d8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd2740]
c0001a08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a0c:	e9 59 dc 01 00       	jmp    c001f66a <fatWrapperIoctl>

c0001a11 <ld_word>:
c0001a11:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a18:	c1 e2 08             	shl    edx,0x8
c0001a1b:	09 d0                	or     eax,edx
c0001a1d:	c3                   	ret    

c0001a1e <ld_dword>:
c0001a1e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a22:	89 d1                	mov    ecx,edx
c0001a24:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a28:	c1 e1 08             	shl    ecx,0x8
c0001a2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a2e:	09 ca                	or     edx,ecx
c0001a30:	c1 e2 08             	shl    edx,0x8
c0001a33:	09 d0                	or     eax,edx
c0001a35:	c3                   	ret    

c0001a36 <ld_qword>:
c0001a36:	57                   	push   edi
c0001a37:	56                   	push   esi
c0001a38:	53                   	push   ebx
c0001a39:	31 db                	xor    ebx,ebx
c0001a3b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a3e:	89 df                	mov    edi,ebx
c0001a40:	89 ce                	mov    esi,ecx
c0001a42:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a46:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a4a:	c1 e6 08             	shl    esi,0x8
c0001a4d:	09 f2                	or     edx,esi
c0001a4f:	89 d6                	mov    esi,edx
c0001a51:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a55:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a59:	c1 e6 08             	shl    esi,0x8
c0001a5c:	09 f2                	or     edx,esi
c0001a5e:	89 d6                	mov    esi,edx
c0001a60:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a64:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a68:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a6b:	c1 e6 08             	shl    esi,0x8
c0001a6e:	89 fb                	mov    ebx,edi
c0001a70:	09 f2                	or     edx,esi
c0001a72:	89 d1                	mov    ecx,edx
c0001a74:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001a78:	c1 e1 08             	shl    ecx,0x8
c0001a7b:	89 da                	mov    edx,ebx
c0001a7d:	09 c8                	or     eax,ecx
c0001a7f:	5b                   	pop    ebx
c0001a80:	5e                   	pop    esi
c0001a81:	5f                   	pop    edi
c0001a82:	c3                   	ret    

c0001a83 <st_word>:
c0001a83:	66 89 10             	mov    WORD PTR [eax],dx
c0001a86:	c3                   	ret    

c0001a87 <st_dword>:
c0001a87:	89 10                	mov    DWORD PTR [eax],edx
c0001a89:	c3                   	ret    

c0001a8a <st_qword>:
c0001a8a:	89 10                	mov    DWORD PTR [eax],edx
c0001a8c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a8f:	c3                   	ret    

c0001a90 <mem_cpy>:
c0001a90:	85 c9                	test   ecx,ecx
c0001a92:	74 10                	je     c0001aa4 <mem_cpy+0x14>
c0001a94:	57                   	push   edi
c0001a95:	01 c1                	add    ecx,eax
c0001a97:	56                   	push   esi
c0001a98:	89 c7                	mov    edi,eax
c0001a9a:	89 d6                	mov    esi,edx
c0001a9c:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a9d:	39 f9                	cmp    ecx,edi
c0001a9f:	75 fb                	jne    c0001a9c <mem_cpy+0xc>
c0001aa1:	5e                   	pop    esi
c0001aa2:	5f                   	pop    edi
c0001aa3:	c3                   	ret    
c0001aa4:	c3                   	ret    

c0001aa5 <mem_set>:
c0001aa5:	01 c1                	add    ecx,eax
c0001aa7:	40                   	inc    eax
c0001aa8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001aab:	39 c8                	cmp    eax,ecx
c0001aad:	75 f8                	jne    c0001aa7 <mem_set+0x2>
c0001aaf:	c3                   	ret    

c0001ab0 <mem_cmp>:
c0001ab0:	57                   	push   edi
c0001ab1:	56                   	push   esi
c0001ab2:	89 c6                	mov    esi,eax
c0001ab4:	53                   	push   ebx
c0001ab5:	46                   	inc    esi
c0001ab6:	42                   	inc    edx
c0001ab7:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001abb:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001abf:	29 fb                	sub    ebx,edi
c0001ac1:	89 cf                	mov    edi,ecx
c0001ac3:	29 f7                	sub    edi,esi
c0001ac5:	01 c7                	add    edi,eax
c0001ac7:	74 04                	je     c0001acd <mem_cmp+0x1d>
c0001ac9:	85 db                	test   ebx,ebx
c0001acb:	74 e8                	je     c0001ab5 <mem_cmp+0x5>
c0001acd:	89 d8                	mov    eax,ebx
c0001acf:	5b                   	pop    ebx
c0001ad0:	5e                   	pop    esi
c0001ad1:	5f                   	pop    edi
c0001ad2:	c3                   	ret    

c0001ad3 <chk_chr>:
c0001ad3:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001ad6:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001ad9:	74 07                	je     c0001ae2 <chk_chr+0xf>
c0001adb:	39 d1                	cmp    ecx,edx
c0001add:	74 03                	je     c0001ae2 <chk_chr+0xf>
c0001adf:	40                   	inc    eax
c0001ae0:	eb f1                	jmp    c0001ad3 <chk_chr>
c0001ae2:	89 c8                	mov    eax,ecx
c0001ae4:	c3                   	ret    

c0001ae5 <dbc_1st>:
c0001ae5:	31 c0                	xor    eax,eax
c0001ae7:	c3                   	ret    

c0001ae8 <dbc_2nd>:
c0001ae8:	31 c0                	xor    eax,eax
c0001aea:	c3                   	ret    

c0001aeb <tchar2uni>:
c0001aeb:	57                   	push   edi
c0001aec:	89 c7                	mov    edi,eax
c0001aee:	56                   	push   esi
c0001aef:	53                   	push   ebx
c0001af0:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001af2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001af4:	8d 73 01             	lea    esi,[ebx+0x1]
c0001af7:	84 c9                	test   cl,cl
c0001af9:	78 0a                	js     c0001b05 <tchar2uni+0x1a>
c0001afb:	0f b6 d1             	movzx  edx,cl
c0001afe:	89 f3                	mov    ebx,esi
c0001b00:	e9 9f 00 00 00       	jmp    c0001ba4 <tchar2uni+0xb9>
c0001b05:	88 ca                	mov    dl,cl
c0001b07:	83 e2 e0             	and    edx,0xffffffe0
c0001b0a:	80 fa c0             	cmp    dl,0xc0
c0001b0d:	75 0c                	jne    c0001b1b <tchar2uni+0x30>
c0001b0f:	89 ca                	mov    edx,ecx
c0001b11:	b9 01 00 00 00       	mov    ecx,0x1
c0001b16:	83 e2 1f             	and    edx,0x1f
c0001b19:	eb 2e                	jmp    c0001b49 <tchar2uni+0x5e>
c0001b1b:	88 ca                	mov    dl,cl
c0001b1d:	83 e2 f0             	and    edx,0xfffffff0
c0001b20:	80 fa e0             	cmp    dl,0xe0
c0001b23:	75 0c                	jne    c0001b31 <tchar2uni+0x46>
c0001b25:	89 ca                	mov    edx,ecx
c0001b27:	b9 02 00 00 00       	mov    ecx,0x2
c0001b2c:	83 e2 0f             	and    edx,0xf
c0001b2f:	eb 18                	jmp    c0001b49 <tchar2uni+0x5e>
c0001b31:	88 ca                	mov    dl,cl
c0001b33:	83 e2 f8             	and    edx,0xfffffff8
c0001b36:	88 d0                	mov    al,dl
c0001b38:	83 ca ff             	or     edx,0xffffffff
c0001b3b:	3c f0                	cmp    al,0xf0
c0001b3d:	75 6c                	jne    c0001bab <tchar2uni+0xc0>
c0001b3f:	89 ca                	mov    edx,ecx
c0001b41:	b9 03 00 00 00       	mov    ecx,0x3
c0001b46:	83 e2 07             	and    edx,0x7
c0001b49:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b4d:	46                   	inc    esi
c0001b4e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b51:	88 c8                	mov    al,cl
c0001b53:	83 e0 c0             	and    eax,0xffffffc0
c0001b56:	3c 80                	cmp    al,0x80
c0001b58:	75 4e                	jne    c0001ba8 <tchar2uni+0xbd>
c0001b5a:	c1 e2 06             	shl    edx,0x6
c0001b5d:	83 e1 3f             	and    ecx,0x3f
c0001b60:	09 ca                	or     edx,ecx
c0001b62:	39 de                	cmp    esi,ebx
c0001b64:	75 e7                	jne    c0001b4d <tchar2uni+0x62>
c0001b66:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001b69:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001b6f:	77 37                	ja     c0001ba8 <tchar2uni+0xbd>
c0001b71:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001b77:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b7d:	76 29                	jbe    c0001ba8 <tchar2uni+0xbd>
c0001b7f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b85:	76 1d                	jbe    c0001ba4 <tchar2uni+0xb9>
c0001b87:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b8d:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b93:	c1 e1 06             	shl    ecx,0x6
c0001b96:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b9c:	09 ca                	or     edx,ecx
c0001b9e:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001ba4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001ba6:	eb 03                	jmp    c0001bab <tchar2uni+0xc0>
c0001ba8:	83 ca ff             	or     edx,0xffffffff
c0001bab:	5b                   	pop    ebx
c0001bac:	89 d0                	mov    eax,edx
c0001bae:	5e                   	pop    esi
c0001baf:	5f                   	pop    edi
c0001bb0:	c3                   	ret    

c0001bb1 <put_utf>:
c0001bb1:	53                   	push   ebx
c0001bb2:	83 f8 7f             	cmp    eax,0x7f
c0001bb5:	89 c3                	mov    ebx,eax
c0001bb7:	b0 00                	mov    al,0x0
c0001bb9:	77 11                	ja     c0001bcc <put_utf+0x1b>
c0001bbb:	85 c9                	test   ecx,ecx
c0001bbd:	0f 84 e5 00 00 00    	je     c0001ca8 <put_utf+0xf7>
c0001bc3:	88 1a                	mov    BYTE PTR [edx],bl
c0001bc5:	b0 01                	mov    al,0x1
c0001bc7:	e9 dc 00 00 00       	jmp    c0001ca8 <put_utf+0xf7>
c0001bcc:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001bd2:	77 23                	ja     c0001bf7 <put_utf+0x46>
c0001bd4:	83 f9 01             	cmp    ecx,0x1
c0001bd7:	0f 86 cb 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001bdd:	89 d8                	mov    eax,ebx
c0001bdf:	83 e3 3f             	and    ebx,0x3f
c0001be2:	c1 e8 06             	shr    eax,0x6
c0001be5:	83 cb 80             	or     ebx,0xffffff80
c0001be8:	83 c8 c0             	or     eax,0xffffffc0
c0001beb:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001bee:	88 02                	mov    BYTE PTR [edx],al
c0001bf0:	b0 02                	mov    al,0x2
c0001bf2:	e9 b1 00 00 00       	jmp    c0001ca8 <put_utf+0xf7>
c0001bf7:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001bfd:	77 40                	ja     c0001c3f <put_utf+0x8e>
c0001bff:	83 f9 02             	cmp    ecx,0x2
c0001c02:	0f 86 a0 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001c08:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c0e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c14:	0f 86 8e 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001c1a:	89 d8                	mov    eax,ebx
c0001c1c:	c1 e8 0c             	shr    eax,0xc
c0001c1f:	83 c8 e0             	or     eax,0xffffffe0
c0001c22:	88 02                	mov    BYTE PTR [edx],al
c0001c24:	89 d8                	mov    eax,ebx
c0001c26:	83 e3 3f             	and    ebx,0x3f
c0001c29:	c1 e8 06             	shr    eax,0x6
c0001c2c:	83 cb 80             	or     ebx,0xffffff80
c0001c2f:	83 e0 3f             	and    eax,0x3f
c0001c32:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c35:	83 c8 80             	or     eax,0xffffff80
c0001c38:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c3b:	b0 03                	mov    al,0x3
c0001c3d:	eb 69                	jmp    c0001ca8 <put_utf+0xf7>
c0001c3f:	83 f9 03             	cmp    ecx,0x3
c0001c42:	76 64                	jbe    c0001ca8 <put_utf+0xf7>
c0001c44:	89 d9                	mov    ecx,ebx
c0001c46:	0f b7 c3             	movzx  eax,bx
c0001c49:	66 31 c9             	xor    cx,cx
c0001c4c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c52:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c58:	c1 e9 06             	shr    ecx,0x6
c0001c5b:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c61:	77 43                	ja     c0001ca6 <put_utf+0xf5>
c0001c63:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c69:	77 3b                	ja     c0001ca6 <put_utf+0xf5>
c0001c6b:	09 cb                	or     ebx,ecx
c0001c6d:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001c73:	89 d8                	mov    eax,ebx
c0001c75:	c1 e8 12             	shr    eax,0x12
c0001c78:	83 c8 f0             	or     eax,0xfffffff0
c0001c7b:	88 02                	mov    BYTE PTR [edx],al
c0001c7d:	89 d8                	mov    eax,ebx
c0001c7f:	c1 e8 0c             	shr    eax,0xc
c0001c82:	83 e0 3f             	and    eax,0x3f
c0001c85:	83 c8 80             	or     eax,0xffffff80
c0001c88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c8b:	89 d8                	mov    eax,ebx
c0001c8d:	83 e3 3f             	and    ebx,0x3f
c0001c90:	c1 e8 06             	shr    eax,0x6
c0001c93:	83 cb 80             	or     ebx,0xffffff80
c0001c96:	83 e0 3f             	and    eax,0x3f
c0001c99:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c9c:	83 c8 80             	or     eax,0xffffff80
c0001c9f:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ca2:	b0 04                	mov    al,0x4
c0001ca4:	eb 02                	jmp    c0001ca8 <put_utf+0xf7>
c0001ca6:	31 c0                	xor    eax,eax
c0001ca8:	5b                   	pop    ebx
c0001ca9:	c3                   	ret    

c0001caa <clst2sect>:
c0001caa:	89 c1                	mov    ecx,eax
c0001cac:	83 ea 02             	sub    edx,0x2
c0001caf:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001cb2:	83 e8 02             	sub    eax,0x2
c0001cb5:	39 d0                	cmp    eax,edx
c0001cb7:	76 0d                	jbe    c0001cc6 <clst2sect+0x1c>
c0001cb9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cbd:	f7 e2                	mul    edx
c0001cbf:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cc2:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cc5:	c3                   	ret    
c0001cc6:	31 c0                	xor    eax,eax
c0001cc8:	31 d2                	xor    edx,edx
c0001cca:	c3                   	ret    

c0001ccb <clmt_clust>:
c0001ccb:	57                   	push   edi
c0001ccc:	89 cf                	mov    edi,ecx
c0001cce:	56                   	push   esi
c0001ccf:	89 d6                	mov    esi,edx
c0001cd1:	53                   	push   ebx
c0001cd2:	0f ac fe 09          	shrd   esi,edi,0x9
c0001cd6:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001cd9:	89 f2                	mov    edx,esi
c0001cdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0001cdd:	c1 ef 09             	shr    edi,0x9
c0001ce0:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001ce4:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001ce7:	89 f9                	mov    ecx,edi
c0001ce9:	31 ff                	xor    edi,edi
c0001ceb:	57                   	push   edi
c0001cec:	56                   	push   esi
c0001ced:	51                   	push   ecx
c0001cee:	52                   	push   edx
c0001cef:	e8 88 2f 02 00       	call   c0024c7c <__udivdi3>
c0001cf4:	83 c4 10             	add    esp,0x10
c0001cf7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001cf9:	85 d2                	test   edx,edx
c0001cfb:	74 10                	je     c0001d0d <clmt_clust+0x42>
c0001cfd:	39 d0                	cmp    eax,edx
c0001cff:	72 07                	jb     c0001d08 <clmt_clust+0x3d>
c0001d01:	29 d0                	sub    eax,edx
c0001d03:	83 c3 08             	add    ebx,0x8
c0001d06:	eb ef                	jmp    c0001cf7 <clmt_clust+0x2c>
c0001d08:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d0b:	89 c2                	mov    edx,eax
c0001d0d:	5b                   	pop    ebx
c0001d0e:	89 d0                	mov    eax,edx
c0001d10:	5e                   	pop    esi
c0001d11:	5f                   	pop    edi
c0001d12:	c3                   	ret    

c0001d13 <pick_lfn>:
c0001d13:	55                   	push   ebp
c0001d14:	57                   	push   edi
c0001d15:	56                   	push   esi
c0001d16:	89 d6                	mov    esi,edx
c0001d18:	53                   	push   ebx
c0001d19:	89 c3                	mov    ebx,eax
c0001d1b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d1e:	e8 ee fc ff ff       	call   c0001a11 <ld_word>
c0001d23:	66 85 c0             	test   ax,ax
c0001d26:	74 04                	je     c0001d2c <pick_lfn+0x19>
c0001d28:	31 c0                	xor    eax,eax
c0001d2a:	eb 5c                	jmp    c0001d88 <pick_lfn+0x75>
c0001d2c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d2f:	bd 01 00 00 00       	mov    ebp,0x1
c0001d34:	83 e1 bf             	and    ecx,0xffffffbf
c0001d37:	31 ff                	xor    edi,edi
c0001d39:	49                   	dec    ecx
c0001d3a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d3d:	0f b6 87 c0 76 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd8940]
c0001d44:	01 f0                	add    eax,esi
c0001d46:	e8 c6 fc ff ff       	call   c0001a11 <ld_word>
c0001d4b:	66 85 ed             	test   bp,bp
c0001d4e:	74 11                	je     c0001d61 <pick_lfn+0x4e>
c0001d50:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d56:	77 d0                	ja     c0001d28 <pick_lfn+0x15>
c0001d58:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d5c:	89 c5                	mov    ebp,eax
c0001d5e:	41                   	inc    ecx
c0001d5f:	eb 04                	jmp    c0001d65 <pick_lfn+0x52>
c0001d61:	66 40                	inc    ax
c0001d63:	75 c3                	jne    c0001d28 <pick_lfn+0x15>
c0001d65:	47                   	inc    edi
c0001d66:	83 ff 0d             	cmp    edi,0xd
c0001d69:	75 d2                	jne    c0001d3d <pick_lfn+0x2a>
c0001d6b:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001d6e:	74 13                	je     c0001d83 <pick_lfn+0x70>
c0001d70:	66 85 ed             	test   bp,bp
c0001d73:	74 0e                	je     c0001d83 <pick_lfn+0x70>
c0001d75:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d7b:	77 ab                	ja     c0001d28 <pick_lfn+0x15>
c0001d7d:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d83:	b8 01 00 00 00       	mov    eax,0x1
c0001d88:	5b                   	pop    ebx
c0001d89:	5e                   	pop    esi
c0001d8a:	5f                   	pop    edi
c0001d8b:	5d                   	pop    ebp
c0001d8c:	c3                   	ret    

c0001d8d <put_lfn>:
c0001d8d:	55                   	push   ebp
c0001d8e:	31 ed                	xor    ebp,ebp
c0001d90:	57                   	push   edi
c0001d91:	89 d7                	mov    edi,edx
c0001d93:	56                   	push   esi
c0001d94:	31 f6                	xor    esi,esi
c0001d96:	53                   	push   ebx
c0001d97:	83 ec 08             	sub    esp,0x8
c0001d9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d9d:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001da1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001da5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001dab:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001dae:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001db1:	31 d2                	xor    edx,edx
c0001db3:	e8 cb fc ff ff       	call   c0001a83 <st_word>
c0001db8:	0f b6 d9             	movzx  ebx,cl
c0001dbb:	4b                   	dec    ebx
c0001dbc:	6b db 0d             	imul   ebx,ebx,0xd
c0001dbf:	66 83 fe ff          	cmp    si,0xffff
c0001dc3:	74 08                	je     c0001dcd <put_lfn+0x40>
c0001dc5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001dc8:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001dcc:	43                   	inc    ebx
c0001dcd:	0f b6 85 c0 76 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd8940]
c0001dd4:	0f b7 d6             	movzx  edx,si
c0001dd7:	01 f8                	add    eax,edi
c0001dd9:	e8 a5 fc ff ff       	call   c0001a83 <st_word>
c0001dde:	66 85 f6             	test   si,si
c0001de1:	75 03                	jne    c0001de6 <put_lfn+0x59>
c0001de3:	83 ce ff             	or     esi,0xffffffff
c0001de6:	45                   	inc    ebp
c0001de7:	83 fd 0d             	cmp    ebp,0xd
c0001dea:	75 d3                	jne    c0001dbf <put_lfn+0x32>
c0001dec:	66 46                	inc    si
c0001dee:	74 0a                	je     c0001dfa <put_lfn+0x6d>
c0001df0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001df3:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001df8:	75 09                	jne    c0001e03 <put_lfn+0x76>
c0001dfa:	88 c8                	mov    al,cl
c0001dfc:	83 c8 40             	or     eax,0x40
c0001dff:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e03:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e07:	88 07                	mov    BYTE PTR [edi],al
c0001e09:	83 c4 08             	add    esp,0x8
c0001e0c:	5b                   	pop    ebx
c0001e0d:	5e                   	pop    esi
c0001e0e:	5f                   	pop    edi
c0001e0f:	5d                   	pop    ebp
c0001e10:	c3                   	ret    

c0001e11 <gen_numname>:
c0001e11:	57                   	push   edi
c0001e12:	89 cf                	mov    edi,ecx
c0001e14:	56                   	push   esi
c0001e15:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e1a:	53                   	push   ebx
c0001e1b:	89 c6                	mov    esi,eax
c0001e1d:	83 ec 10             	sub    esp,0x10
c0001e20:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e24:	e8 67 fc ff ff       	call   c0001a90 <mem_cpy>
c0001e29:	83 fb 05             	cmp    ebx,0x5
c0001e2c:	76 2d                	jbe    c0001e5b <gen_numname+0x4a>
c0001e2e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e31:	66 85 c0             	test   ax,ax
c0001e34:	74 25                	je     c0001e5b <gen_numname+0x4a>
c0001e36:	83 c7 02             	add    edi,0x2
c0001e39:	ba 10 00 00 00       	mov    edx,0x10
c0001e3e:	01 db                	add    ebx,ebx
c0001e40:	89 c1                	mov    ecx,eax
c0001e42:	66 d1 e8             	shr    ax,1
c0001e45:	83 e1 01             	and    ecx,0x1
c0001e48:	01 cb                	add    ebx,ecx
c0001e4a:	0f ba e3 10          	bt     ebx,0x10
c0001e4e:	73 06                	jae    c0001e56 <gen_numname+0x45>
c0001e50:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e56:	4a                   	dec    edx
c0001e57:	75 e5                	jne    c0001e3e <gen_numname+0x2d>
c0001e59:	eb d3                	jmp    c0001e2e <gen_numname+0x1d>
c0001e5b:	b8 07 00 00 00       	mov    eax,0x7
c0001e60:	88 d9                	mov    cl,bl
c0001e62:	83 e1 0f             	and    ecx,0xf
c0001e65:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e68:	80 fa 39             	cmp    dl,0x39
c0001e6b:	76 03                	jbe    c0001e70 <gen_numname+0x5f>
c0001e6d:	8d 51 37             	lea    edx,[ecx+0x37]
c0001e70:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001e73:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001e77:	89 da                	mov    edx,ebx
c0001e79:	c1 ea 04             	shr    edx,0x4
c0001e7c:	83 fb 0f             	cmp    ebx,0xf
c0001e7f:	76 06                	jbe    c0001e87 <gen_numname+0x76>
c0001e81:	89 c8                	mov    eax,ecx
c0001e83:	89 d3                	mov    ebx,edx
c0001e85:	eb d9                	jmp    c0001e60 <gen_numname+0x4f>
c0001e87:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e8c:	31 d2                	xor    edx,edx
c0001e8e:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e91:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e94:	39 ca                	cmp    edx,ecx
c0001e96:	73 18                	jae    c0001eb0 <gen_numname+0x9f>
c0001e98:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e9b:	3c 20                	cmp    al,0x20
c0001e9d:	74 11                	je     c0001eb0 <gen_numname+0x9f>
c0001e9f:	e8 41 fc ff ff       	call   c0001ae5 <dbc_1st>
c0001ea4:	85 c0                	test   eax,eax
c0001ea6:	74 05                	je     c0001ead <gen_numname+0x9c>
c0001ea8:	39 d3                	cmp    ebx,edx
c0001eaa:	74 04                	je     c0001eb0 <gen_numname+0x9f>
c0001eac:	42                   	inc    edx
c0001ead:	42                   	inc    edx
c0001eae:	eb e1                	jmp    c0001e91 <gen_numname+0x80>
c0001eb0:	b0 20                	mov    al,0x20
c0001eb2:	83 f9 07             	cmp    ecx,0x7
c0001eb5:	77 05                	ja     c0001ebc <gen_numname+0xab>
c0001eb7:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ebb:	41                   	inc    ecx
c0001ebc:	42                   	inc    edx
c0001ebd:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001ec1:	83 fa 07             	cmp    edx,0x7
c0001ec4:	76 ea                	jbe    c0001eb0 <gen_numname+0x9f>
c0001ec6:	83 c4 10             	add    esp,0x10
c0001ec9:	5b                   	pop    ebx
c0001eca:	5e                   	pop    esi
c0001ecb:	5f                   	pop    edi
c0001ecc:	c3                   	ret    

c0001ecd <sum_sfn>:
c0001ecd:	31 c9                	xor    ecx,ecx
c0001ecf:	31 d2                	xor    edx,edx
c0001ed1:	d0 ca                	ror    dl,1
c0001ed3:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001ed6:	41                   	inc    ecx
c0001ed7:	83 f9 0b             	cmp    ecx,0xb
c0001eda:	75 f5                	jne    c0001ed1 <sum_sfn+0x4>
c0001edc:	88 d0                	mov    al,dl
c0001ede:	c3                   	ret    

c0001edf <xdir_sum>:
c0001edf:	56                   	push   esi
c0001ee0:	31 c9                	xor    ecx,ecx
c0001ee2:	53                   	push   ebx
c0001ee3:	31 d2                	xor    edx,edx
c0001ee5:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001ee9:	43                   	inc    ebx
c0001eea:	c1 e3 05             	shl    ebx,0x5
c0001eed:	83 fa 02             	cmp    edx,0x2
c0001ef0:	74 0b                	je     c0001efd <xdir_sum+0x1e>
c0001ef2:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001ef6:	66 d1 c9             	ror    cx,1
c0001ef9:	01 f1                	add    ecx,esi
c0001efb:	eb 05                	jmp    c0001f02 <xdir_sum+0x23>
c0001efd:	ba 03 00 00 00       	mov    edx,0x3
c0001f02:	42                   	inc    edx
c0001f03:	39 d3                	cmp    ebx,edx
c0001f05:	77 e6                	ja     c0001eed <xdir_sum+0xe>
c0001f07:	89 c8                	mov    eax,ecx
c0001f09:	5b                   	pop    ebx
c0001f0a:	5e                   	pop    esi
c0001f0b:	c3                   	ret    

c0001f0c <xsum32>:
c0001f0c:	d1 ca                	ror    edx,1
c0001f0e:	0f b6 c0             	movzx  eax,al
c0001f11:	01 d0                	add    eax,edx
c0001f13:	c3                   	ret    

c0001f14 <get_xfileinfo>:
c0001f14:	55                   	push   ebp
c0001f15:	31 c9                	xor    ecx,ecx
c0001f17:	57                   	push   edi
c0001f18:	bd 40 00 00 00       	mov    ebp,0x40
c0001f1d:	56                   	push   esi
c0001f1e:	31 ff                	xor    edi,edi
c0001f20:	53                   	push   ebx
c0001f21:	89 c6                	mov    esi,eax
c0001f23:	83 ec 0c             	sub    esp,0xc
c0001f26:	89 d3                	mov    ebx,edx
c0001f28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f2f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f33:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f36:	76 6d                	jbe    c0001fa5 <get_xfileinfo+0x91>
c0001f38:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f3e:	76 0b                	jbe    c0001f4b <get_xfileinfo+0x37>
c0001f40:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f44:	bf 01 00 00 00       	mov    edi,0x1
c0001f49:	eb 63                	jmp    c0001fae <get_xfileinfo+0x9a>
c0001f4b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f51:	75 03                	jne    c0001f56 <get_xfileinfo+0x42>
c0001f53:	83 c5 02             	add    ebp,0x2
c0001f56:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f59:	83 c5 02             	add    ebp,0x2
c0001f5c:	e8 b0 fa ff ff       	call   c0001a11 <ld_word>
c0001f61:	ff 04 24             	inc    DWORD PTR [esp]
c0001f64:	66 85 c9             	test   cx,cx
c0001f67:	75 0d                	jne    c0001f76 <get_xfileinfo+0x62>
c0001f69:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001f6f:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001f74:	76 2b                	jbe    c0001fa1 <get_xfileinfo+0x8d>
c0001f76:	c1 e1 10             	shl    ecx,0x10
c0001f79:	ba ff 00 00 00       	mov    edx,0xff
c0001f7e:	0f b7 c0             	movzx  eax,ax
c0001f81:	29 fa                	sub    edx,edi
c0001f83:	09 c8                	or     eax,ecx
c0001f85:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f89:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f8d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f91:	e8 1b fc ff ff       	call   c0001bb1 <put_utf>
c0001f96:	84 c0                	test   al,al
c0001f98:	74 a6                	je     c0001f40 <get_xfileinfo+0x2c>
c0001f9a:	0f b6 c0             	movzx  eax,al
c0001f9d:	01 c7                	add    edi,eax
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	89 c1                	mov    ecx,eax
c0001fa3:	eb 8a                	jmp    c0001f2f <get_xfileinfo+0x1b>
c0001fa5:	85 ff                	test   edi,edi
c0001fa7:	74 97                	je     c0001f40 <get_xfileinfo+0x2c>
c0001fa9:	66 85 c9             	test   cx,cx
c0001fac:	75 92                	jne    c0001f40 <get_xfileinfo+0x2c>
c0001fae:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fb3:	31 c0                	xor    eax,eax
c0001fb5:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001fb9:	31 d2                	xor    edx,edx
c0001fbb:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fbe:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001fc1:	80 e1 10             	and    cl,0x10
c0001fc4:	75 08                	jne    c0001fce <get_xfileinfo+0xba>
c0001fc6:	8d 46 38             	lea    eax,[esi+0x38]
c0001fc9:	e8 68 fa ff ff       	call   c0001a36 <ld_qword>
c0001fce:	89 03                	mov    DWORD PTR [ebx],eax
c0001fd0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001fd3:	8d 46 0c             	lea    eax,[esi+0xc]
c0001fd6:	e8 36 fa ff ff       	call   c0001a11 <ld_word>
c0001fdb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001fdf:	8d 46 0e             	lea    eax,[esi+0xe]
c0001fe2:	e8 2a fa ff ff       	call   c0001a11 <ld_word>
c0001fe7:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001feb:	83 c4 0c             	add    esp,0xc
c0001fee:	5b                   	pop    ebx
c0001fef:	5e                   	pop    esi
c0001ff0:	5f                   	pop    edi
c0001ff1:	5d                   	pop    ebp
c0001ff2:	c3                   	ret    

c0001ff3 <get_ldnumber>:
c0001ff3:	8b 10                	mov    edx,DWORD PTR [eax]
c0001ff5:	85 d2                	test   edx,edx
c0001ff7:	74 14                	je     c000200d <get_ldnumber+0x1a>
c0001ff9:	56                   	push   esi
c0001ffa:	53                   	push   ebx
c0001ffb:	89 d3                	mov    ebx,edx
c0001ffd:	43                   	inc    ebx
c0001ffe:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002001:	80 f9 1f             	cmp    cl,0x1f
c0002004:	76 0d                	jbe    c0002013 <get_ldnumber+0x20>
c0002006:	80 f9 3a             	cmp    cl,0x3a
c0002009:	75 f2                	jne    c0001ffd <get_ldnumber+0xa>
c000200b:	eb 0a                	jmp    c0002017 <get_ldnumber+0x24>
c000200d:	83 c9 ff             	or     ecx,0xffffffff
c0002010:	89 c8                	mov    eax,ecx
c0002012:	c3                   	ret    
c0002013:	31 c9                	xor    ecx,ecx
c0002015:	eb 24                	jmp    c000203b <get_ldnumber+0x48>
c0002017:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000201a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000201d:	80 f9 09             	cmp    cl,0x9
c0002020:	77 16                	ja     c0002038 <get_ldnumber+0x45>
c0002022:	83 c2 02             	add    edx,0x2
c0002025:	83 c9 ff             	or     ecx,0xffffffff
c0002028:	39 d3                	cmp    ebx,edx
c000202a:	75 0f                	jne    c000203b <get_ldnumber+0x48>
c000202c:	89 f2                	mov    edx,esi
c000202e:	89 18                	mov    DWORD PTR [eax],ebx
c0002030:	0f be ca             	movsx  ecx,dl
c0002033:	83 e9 30             	sub    ecx,0x30
c0002036:	eb 03                	jmp    c000203b <get_ldnumber+0x48>
c0002038:	83 c9 ff             	or     ecx,0xffffffff
c000203b:	89 c8                	mov    eax,ecx
c000203d:	5b                   	pop    ebx
c000203e:	5e                   	pop    esi
c000203f:	c3                   	ret    

c0002040 <crc32>:
c0002040:	56                   	push   esi
c0002041:	89 d6                	mov    esi,edx
c0002043:	53                   	push   ebx
c0002044:	b2 01                	mov    dl,0x1
c0002046:	bb 08 00 00 00       	mov    ebx,0x8
c000204b:	89 f1                	mov    ecx,esi
c000204d:	84 d1                	test   cl,dl
c000204f:	0f 95 c1             	setne  cl
c0002052:	0f b6 c9             	movzx  ecx,cl
c0002055:	31 c1                	xor    ecx,eax
c0002057:	89 c8                	mov    eax,ecx
c0002059:	d1 e8                	shr    eax,1
c000205b:	80 e1 01             	and    cl,0x1
c000205e:	74 05                	je     c0002065 <crc32+0x25>
c0002060:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002065:	d1 e2                	shl    edx,1
c0002067:	4b                   	dec    ebx
c0002068:	75 e1                	jne    c000204b <crc32+0xb>
c000206a:	5b                   	pop    ebx
c000206b:	5e                   	pop    esi
c000206c:	c3                   	ret    

c000206d <test_gpt_header>:
c000206d:	55                   	push   ebp
c000206e:	b9 10 00 00 00       	mov    ecx,0x10
c0002073:	57                   	push   edi
c0002074:	ba c0 75 02 c0       	mov    edx,0xc00275c0
c0002079:	56                   	push   esi
c000207a:	31 ff                	xor    edi,edi
c000207c:	53                   	push   ebx
c000207d:	89 c3                	mov    ebx,eax
c000207f:	e8 2c fa ff ff       	call   c0001ab0 <mem_cmp>
c0002084:	85 c0                	test   eax,eax
c0002086:	75 55                	jne    c00020dd <test_gpt_header+0x70>
c0002088:	89 c7                	mov    edi,eax
c000208a:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000208f:	83 ce ff             	or     esi,0xffffffff
c0002092:	31 d2                	xor    edx,edx
c0002094:	83 fd 03             	cmp    ebp,0x3
c0002097:	76 05                	jbe    c000209e <test_gpt_header+0x31>
c0002099:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000209e:	89 f0                	mov    eax,esi
c00020a0:	45                   	inc    ebp
c00020a1:	e8 9a ff ff ff       	call   c0002040 <crc32>
c00020a6:	83 fd 4c             	cmp    ebp,0x4c
c00020a9:	89 c6                	mov    esi,eax
c00020ab:	75 e5                	jne    c0002092 <test_gpt_header+0x25>
c00020ad:	8d 43 10             	lea    eax,[ebx+0x10]
c00020b0:	f7 d6                	not    esi
c00020b2:	e8 67 f9 ff ff       	call   c0001a1e <ld_dword>
c00020b7:	39 c6                	cmp    esi,eax
c00020b9:	75 22                	jne    c00020dd <test_gpt_header+0x70>
c00020bb:	8d 43 54             	lea    eax,[ebx+0x54]
c00020be:	e8 5b f9 ff ff       	call   c0001a1e <ld_dword>
c00020c3:	83 c0 80             	add    eax,0xffffff80
c00020c6:	75 15                	jne    c00020dd <test_gpt_header+0x70>
c00020c8:	8d 43 50             	lea    eax,[ebx+0x50]
c00020cb:	e8 4e f9 ff ff       	call   c0001a1e <ld_dword>
c00020d0:	3d 80 00 00 00       	cmp    eax,0x80
c00020d5:	0f 96 c0             	setbe  al
c00020d8:	0f b6 c0             	movzx  eax,al
c00020db:	89 c7                	mov    edi,eax
c00020dd:	5b                   	pop    ebx
c00020de:	89 f8                	mov    eax,edi
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	5d                   	pop    ebp
c00020e3:	c3                   	ret    

c00020e4 <make_rand>:
c00020e4:	56                   	push   esi
c00020e5:	85 c0                	test   eax,eax
c00020e7:	53                   	push   ebx
c00020e8:	75 05                	jne    c00020ef <make_rand+0xb>
c00020ea:	b8 01 00 00 00       	mov    eax,0x1
c00020ef:	01 d1                	add    ecx,edx
c00020f1:	bb 08 00 00 00       	mov    ebx,0x8
c00020f6:	89 c6                	mov    esi,eax
c00020f8:	d1 e8                	shr    eax,1
c00020fa:	83 e6 01             	and    esi,0x1
c00020fd:	85 f6                	test   esi,esi
c00020ff:	74 05                	je     c0002106 <make_rand+0x22>
c0002101:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002106:	4b                   	dec    ebx
c0002107:	75 ed                	jne    c00020f6 <make_rand+0x12>
c0002109:	42                   	inc    edx
c000210a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000210d:	39 ca                	cmp    edx,ecx
c000210f:	75 e0                	jne    c00020f1 <make_rand+0xd>
c0002111:	5b                   	pop    ebx
c0002112:	5e                   	pop    esi
c0002113:	c3                   	ret    

c0002114 <validate>:
c0002114:	56                   	push   esi
c0002115:	53                   	push   ebx
c0002116:	89 d6                	mov    esi,edx
c0002118:	51                   	push   ecx
c0002119:	85 c0                	test   eax,eax
c000211b:	75 09                	jne    c0002126 <validate+0x12>
c000211d:	b8 09 00 00 00       	mov    eax,0x9
c0002122:	31 c9                	xor    ecx,ecx
c0002124:	eb 2f                	jmp    c0002155 <validate+0x41>
c0002126:	89 c3                	mov    ebx,eax
c0002128:	8b 00                	mov    eax,DWORD PTR [eax]
c000212a:	85 c0                	test   eax,eax
c000212c:	74 ef                	je     c000211d <validate+0x9>
c000212e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002131:	74 ea                	je     c000211d <validate+0x9>
c0002133:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002137:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000213b:	75 e0                	jne    c000211d <validate+0x9>
c000213d:	83 ec 0c             	sub    esp,0xc
c0002140:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002144:	50                   	push   eax
c0002145:	e8 76 f8 ff ff       	call   c00019c0 <disk_status>
c000214a:	83 c4 10             	add    esp,0x10
c000214d:	a8 01                	test   al,0x1
c000214f:	75 cc                	jne    c000211d <validate+0x9>
c0002151:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002153:	31 c0                	xor    eax,eax
c0002155:	89 0e                	mov    DWORD PTR [esi],ecx
c0002157:	5a                   	pop    edx
c0002158:	5b                   	pop    ebx
c0002159:	5e                   	pop    esi
c000215a:	c3                   	ret    

c000215b <sync_window>:
c000215b:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000215f:	0f 84 85 00 00 00    	je     c00021ea <sync_window+0x8f>
c0002165:	55                   	push   ebp
c0002166:	8d 68 54             	lea    ebp,[eax+0x54]
c0002169:	57                   	push   edi
c000216a:	56                   	push   esi
c000216b:	53                   	push   ebx
c000216c:	89 c3                	mov    ebx,eax
c000216e:	83 ec 28             	sub    esp,0x28
c0002171:	6a 01                	push   0x1
c0002173:	ff 70 50             	push   DWORD PTR [eax+0x50]
c0002176:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c0002179:	55                   	push   ebp
c000217a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000217e:	50                   	push   eax
c000217f:	e8 58 f8 ff ff       	call   c00019dc <disk_write>
c0002184:	83 c4 20             	add    esp,0x20
c0002187:	ba 01 00 00 00       	mov    edx,0x1
c000218c:	85 c0                	test   eax,eax
c000218e:	75 50                	jne    c00021e0 <sync_window+0x85>
c0002190:	31 ff                	xor    edi,edi
c0002192:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002195:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002199:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000219d:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021a0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021a3:	89 c6                	mov    esi,eax
c00021a5:	89 d7                	mov    edi,edx
c00021a7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021aa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021ae:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021b1:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021b5:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021b9:	73 23                	jae    c00021de <sync_window+0x83>
c00021bb:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021bf:	75 1d                	jne    c00021de <sync_window+0x83>
c00021c1:	83 ec 0c             	sub    esp,0xc
c00021c4:	6a 01                	push   0x1
c00021c6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021ca:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021ce:	52                   	push   edx
c00021cf:	50                   	push   eax
c00021d0:	55                   	push   ebp
c00021d1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021d5:	50                   	push   eax
c00021d6:	e8 01 f8 ff ff       	call   c00019dc <disk_write>
c00021db:	83 c4 20             	add    esp,0x20
c00021de:	31 d2                	xor    edx,edx
c00021e0:	83 c4 1c             	add    esp,0x1c
c00021e3:	89 d0                	mov    eax,edx
c00021e5:	5b                   	pop    ebx
c00021e6:	5e                   	pop    esi
c00021e7:	5f                   	pop    edi
c00021e8:	5d                   	pop    ebp
c00021e9:	c3                   	ret    
c00021ea:	31 d2                	xor    edx,edx
c00021ec:	89 d0                	mov    eax,edx
c00021ee:	c3                   	ret    

c00021ef <move_window>:
c00021ef:	56                   	push   esi
c00021f0:	53                   	push   ebx
c00021f1:	89 c3                	mov    ebx,eax
c00021f3:	83 ec 14             	sub    esp,0x14
c00021f6:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c00021f9:	75 07                	jne    c0002202 <move_window+0x13>
c00021fb:	31 f6                	xor    esi,esi
c00021fd:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002200:	74 59                	je     c000225b <move_window+0x6c>
c0002202:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002206:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000220a:	89 d8                	mov    eax,ebx
c000220c:	e8 4a ff ff ff       	call   c000215b <sync_window>
c0002211:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002215:	89 c6                	mov    esi,eax
c0002217:	85 c0                	test   eax,eax
c0002219:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000221d:	75 3c                	jne    c000225b <move_window+0x6c>
c000221f:	83 ec 0c             	sub    esp,0xc
c0002222:	8d 43 54             	lea    eax,[ebx+0x54]
c0002225:	6a 01                	push   0x1
c0002227:	51                   	push   ecx
c0002228:	52                   	push   edx
c0002229:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000222d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002231:	50                   	push   eax
c0002232:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002236:	50                   	push   eax
c0002237:	e8 8a f7 ff ff       	call   c00019c6 <disk_read>
c000223c:	83 c4 20             	add    esp,0x20
c000223f:	85 c0                	test   eax,eax
c0002241:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002245:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002249:	74 0a                	je     c0002255 <move_window+0x66>
c000224b:	83 ca ff             	or     edx,0xffffffff
c000224e:	be 01 00 00 00       	mov    esi,0x1
c0002253:	89 d1                	mov    ecx,edx
c0002255:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002258:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000225b:	89 f0                	mov    eax,esi
c000225d:	83 c4 14             	add    esp,0x14
c0002260:	5b                   	pop    ebx
c0002261:	5e                   	pop    esi
c0002262:	c3                   	ret    

c0002263 <check_fs>:
c0002263:	53                   	push   ebx
c0002264:	89 c3                	mov    ebx,eax
c0002266:	83 ec 08             	sub    esp,0x8
c0002269:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000226d:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c0002274:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c000227b:	e8 6f ff ff ff       	call   c00021ef <move_window>
c0002280:	ba 04 00 00 00       	mov    edx,0x4
c0002285:	85 c0                	test   eax,eax
c0002287:	0f 85 89 00 00 00    	jne    c0002316 <check_fs+0xb3>
c000228d:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002293:	e8 79 f7 ff ff       	call   c0001a11 <ld_word>
c0002298:	ba 03 00 00 00       	mov    edx,0x3
c000229d:	66 3d 55 aa          	cmp    ax,0xaa55
c00022a1:	75 73                	jne    c0002316 <check_fs+0xb3>
c00022a3:	ba e0 76 02 c0       	mov    edx,0xc00276e0
c00022a8:	8d 43 54             	lea    eax,[ebx+0x54]
c00022ab:	b9 0b 00 00 00       	mov    ecx,0xb
c00022b0:	e8 fb f7 ff ff       	call   c0001ab0 <mem_cmp>
c00022b5:	ba 01 00 00 00       	mov    edx,0x1
c00022ba:	85 c0                	test   eax,eax
c00022bc:	74 58                	je     c0002316 <check_fs+0xb3>
c00022be:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022c1:	8d 50 18             	lea    edx,[eax+0x18]
c00022c4:	80 fa 01             	cmp    dl,0x1
c00022c7:	76 09                	jbe    c00022d2 <check_fs+0x6f>
c00022c9:	ba 02 00 00 00       	mov    edx,0x2
c00022ce:	3c eb                	cmp    al,0xeb
c00022d0:	75 44                	jne    c0002316 <check_fs+0xb3>
c00022d2:	ba 84 a6 02 c0       	mov    edx,0xc002a684
c00022d7:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00022dd:	b9 03 00 00 00       	mov    ecx,0x3
c00022e2:	e8 c9 f7 ff ff       	call   c0001ab0 <mem_cmp>
c00022e7:	31 d2                	xor    edx,edx
c00022e9:	85 c0                	test   eax,eax
c00022eb:	74 29                	je     c0002316 <check_fs+0xb3>
c00022ed:	ba ec 76 02 c0       	mov    edx,0xc00276ec
c00022f2:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c00022f8:	b9 05 00 00 00       	mov    ecx,0x5
c00022fd:	e8 ae f7 ff ff       	call   c0001ab0 <mem_cmp>
c0002302:	31 d2                	xor    edx,edx
c0002304:	85 c0                	test   eax,eax
c0002306:	74 0e                	je     c0002316 <check_fs+0xb3>
c0002308:	31 d2                	xor    edx,edx
c000230a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002311:	0f 95 c2             	setne  dl
c0002314:	01 d2                	add    edx,edx
c0002316:	89 d0                	mov    eax,edx
c0002318:	83 c4 08             	add    esp,0x8
c000231b:	5b                   	pop    ebx
c000231c:	c3                   	ret    

c000231d <find_volume>:
c000231d:	55                   	push   ebp
c000231e:	31 c9                	xor    ecx,ecx
c0002320:	57                   	push   edi
c0002321:	56                   	push   esi
c0002322:	89 d6                	mov    esi,edx
c0002324:	53                   	push   ebx
c0002325:	31 d2                	xor    edx,edx
c0002327:	83 ec 3c             	sub    esp,0x3c
c000232a:	89 c3                	mov    ebx,eax
c000232c:	e8 32 ff ff ff       	call   c0002263 <check_fs>
c0002331:	83 f8 02             	cmp    eax,0x2
c0002334:	74 0e                	je     c0002344 <find_volume+0x27>
c0002336:	0f 87 5d 01 00 00    	ja     c0002499 <find_volume+0x17c>
c000233c:	85 f6                	test   esi,esi
c000233e:	0f 84 55 01 00 00    	je     c0002499 <find_volume+0x17c>
c0002344:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000234b:	0f 85 dd 00 00 00    	jne    c000242e <find_volume+0x111>
c0002351:	31 c9                	xor    ecx,ecx
c0002353:	ba 01 00 00 00       	mov    edx,0x1
c0002358:	89 d8                	mov    eax,ebx
c000235a:	e8 90 fe ff ff       	call   c00021ef <move_window>
c000235f:	85 c0                	test   eax,eax
c0002361:	74 0a                	je     c000236d <find_volume+0x50>
c0002363:	b8 04 00 00 00       	mov    eax,0x4
c0002368:	e9 2c 01 00 00       	jmp    c0002499 <find_volume+0x17c>
c000236d:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002370:	89 e8                	mov    eax,ebp
c0002372:	e8 f6 fc ff ff       	call   c000206d <test_gpt_header>
c0002377:	85 c0                	test   eax,eax
c0002379:	75 0a                	jne    c0002385 <find_volume+0x68>
c000237b:	b8 03 00 00 00       	mov    eax,0x3
c0002380:	e9 14 01 00 00       	jmp    c0002499 <find_volume+0x17c>
c0002385:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c000238b:	e8 8e f6 ff ff       	call   c0001a1e <ld_dword>
c0002390:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002394:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c000239a:	e8 97 f6 ff ff       	call   c0001a36 <ld_qword>
c000239f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023ab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023af:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023b7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023bb:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023bf:	74 ba                	je     c000237b <find_volume+0x5e>
c00023c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023c5:	31 c9                	xor    ecx,ecx
c00023c7:	c1 e7 07             	shl    edi,0x7
c00023ca:	89 d8                	mov    eax,ebx
c00023cc:	89 fa                	mov    edx,edi
c00023ce:	c1 ea 09             	shr    edx,0x9
c00023d1:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00023d5:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00023d9:	e8 11 fe ff ff       	call   c00021ef <move_window>
c00023de:	85 c0                	test   eax,eax
c00023e0:	75 81                	jne    c0002363 <find_volume+0x46>
c00023e2:	81 e7 80 01 00 00    	and    edi,0x180
c00023e8:	b9 10 00 00 00       	mov    ecx,0x10
c00023ed:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c00023f1:	ba d0 76 02 c0       	mov    edx,0xc00276d0
c00023f6:	e8 b5 f6 ff ff       	call   c0001ab0 <mem_cmp>
c00023fb:	85 c0                	test   eax,eax
c00023fd:	75 29                	jne    c0002428 <find_volume+0x10b>
c00023ff:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002403:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002407:	e8 2a f6 ff ff       	call   c0001a36 <ld_qword>
c000240c:	89 d1                	mov    ecx,edx
c000240e:	89 c2                	mov    edx,eax
c0002410:	89 d8                	mov    eax,ebx
c0002412:	e8 4c fe ff ff       	call   c0002263 <check_fs>
c0002417:	85 f6                	test   esi,esi
c0002419:	75 07                	jne    c0002422 <find_volume+0x105>
c000241b:	83 f8 01             	cmp    eax,0x1
c000241e:	77 08                	ja     c0002428 <find_volume+0x10b>
c0002420:	eb 77                	jmp    c0002499 <find_volume+0x17c>
c0002422:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002426:	74 71                	je     c0002499 <find_volume+0x17c>
c0002428:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000242c:	eb 89                	jmp    c00023b7 <find_volume+0x9a>
c000242e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002432:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002438:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000243e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002442:	89 cd                	mov    ebp,ecx
c0002444:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002448:	89 f8                	mov    eax,edi
c000244a:	83 c7 10             	add    edi,0x10
c000244d:	e8 cc f5 ff ff       	call   c0001a1e <ld_dword>
c0002452:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002456:	89 01                	mov    DWORD PTR [ecx],eax
c0002458:	83 c1 04             	add    ecx,0x4
c000245b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000245f:	75 e3                	jne    c0002444 <find_volume+0x127>
c0002461:	31 ff                	xor    edi,edi
c0002463:	85 f6                	test   esi,esi
c0002465:	74 03                	je     c000246a <find_volume+0x14d>
c0002467:	8d 7e ff             	lea    edi,[esi-0x1]
c000246a:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c000246e:	85 d2                	test   edx,edx
c0002470:	74 14                	je     c0002486 <find_volume+0x169>
c0002472:	31 c9                	xor    ecx,ecx
c0002474:	89 d8                	mov    eax,ebx
c0002476:	e8 e8 fd ff ff       	call   c0002263 <check_fs>
c000247b:	83 f8 01             	cmp    eax,0x1
c000247e:	76 19                	jbe    c0002499 <find_volume+0x17c>
c0002480:	85 f6                	test   esi,esi
c0002482:	74 0f                	je     c0002493 <find_volume+0x176>
c0002484:	eb 13                	jmp    c0002499 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 85 ed fe ff ff    	jne    c000237b <find_volume+0x5e>
c000248e:	b8 03 00 00 00       	mov    eax,0x3
c0002493:	47                   	inc    edi
c0002494:	83 ff 03             	cmp    edi,0x3
c0002497:	76 d1                	jbe    c000246a <find_volume+0x14d>
c0002499:	83 c4 3c             	add    esp,0x3c
c000249c:	5b                   	pop    ebx
c000249d:	5e                   	pop    esi
c000249e:	5f                   	pop    edi
c000249f:	5d                   	pop    ebp
c00024a0:	c3                   	ret    

c00024a1 <mount_volume>:
c00024a1:	55                   	push   ebp
c00024a2:	57                   	push   edi
c00024a3:	89 cf                	mov    edi,ecx
c00024a5:	56                   	push   esi
c00024a6:	53                   	push   ebx
c00024a7:	bb 0b 00 00 00       	mov    ebx,0xb
c00024ac:	83 ec 3c             	sub    esp,0x3c
c00024af:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024b9:	e8 35 fb ff ff       	call   c0001ff3 <get_ldnumber>
c00024be:	85 c0                	test   eax,eax
c00024c0:	0f 88 3a 05 00 00    	js     c0002a00 <mount_volume+0x55f>
c00024c6:	8b 2c 85 c0 c1 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd3e40]
c00024cd:	89 c6                	mov    esi,eax
c00024cf:	bb 0c 00 00 00       	mov    ebx,0xc
c00024d4:	85 ed                	test   ebp,ebp
c00024d6:	0f 84 24 05 00 00    	je     c0002a00 <mount_volume+0x55f>
c00024dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024e0:	83 e7 fe             	and    edi,0xfffffffe
c00024e3:	89 2a                	mov    DWORD PTR [edx],ebp
c00024e5:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00024e9:	74 32                	je     c000251d <mount_volume+0x7c>
c00024eb:	83 ec 0c             	sub    esp,0xc
c00024ee:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00024f2:	50                   	push   eax
c00024f3:	e8 c8 f4 ff ff       	call   c00019c0 <disk_status>
c00024f8:	83 c4 10             	add    esp,0x10
c00024fb:	a8 01                	test   al,0x1
c00024fd:	75 1e                	jne    c000251d <mount_volume+0x7c>
c00024ff:	31 db                	xor    ebx,ebx
c0002501:	89 f9                	mov    ecx,edi
c0002503:	84 c9                	test   cl,cl
c0002505:	0f 84 f5 04 00 00    	je     c0002a00 <mount_volume+0x55f>
c000250b:	a8 04                	test   al,0x4
c000250d:	0f 84 ed 04 00 00    	je     c0002a00 <mount_volume+0x55f>
c0002513:	bb 0a 00 00 00       	mov    ebx,0xa
c0002518:	e9 e3 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	89 f0                	mov    eax,esi
c0002522:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002526:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002529:	0f b6 f0             	movzx  esi,al
c000252c:	bb 03 00 00 00       	mov    ebx,0x3
c0002531:	56                   	push   esi
c0002532:	e8 8c f4 ff ff       	call   c00019c3 <disk_initialize>
c0002537:	83 c4 10             	add    esp,0x10
c000253a:	a8 01                	test   al,0x1
c000253c:	0f 85 be 04 00 00    	jne    c0002a00 <mount_volume+0x55f>
c0002542:	89 f9                	mov    ecx,edi
c0002544:	84 c9                	test   cl,cl
c0002546:	74 04                	je     c000254c <mount_volume+0xab>
c0002548:	a8 04                	test   al,0x4
c000254a:	75 c7                	jne    c0002513 <mount_volume+0x72>
c000254c:	31 d2                	xor    edx,edx
c000254e:	89 e8                	mov    eax,ebp
c0002550:	e8 c8 fd ff ff       	call   c000231d <find_volume>
c0002555:	83 f8 04             	cmp    eax,0x4
c0002558:	75 0a                	jne    c0002564 <mount_volume+0xc3>
c000255a:	bb 01 00 00 00       	mov    ebx,0x1
c000255f:	e9 9c 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c0002564:	83 f8 01             	cmp    eax,0x1
c0002567:	76 0a                	jbe    c0002573 <mount_volume+0xd2>
c0002569:	bb 0d 00 00 00       	mov    ebx,0xd
c000256e:	e9 8d 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c0002573:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002576:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c0002579:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000257d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002581:	75 17                	jne    c000259a <mount_volume+0xf9>
c0002583:	b8 0b 00 00 00       	mov    eax,0xb
c0002588:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000258d:	75 da                	jne    c0002569 <mount_volume+0xc8>
c000258f:	40                   	inc    eax
c0002590:	83 f8 40             	cmp    eax,0x40
c0002593:	75 f3                	jne    c0002588 <mount_volume+0xe7>
c0002595:	e9 5a 02 00 00       	jmp    c00027f4 <mount_volume+0x353>
c000259a:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000259d:	e8 6f f4 ff ff       	call   c0001a11 <ld_word>
c00025a2:	66 3d 00 02          	cmp    ax,0x200
c00025a6:	75 c1                	jne    c0002569 <mount_volume+0xc8>
c00025a8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025ab:	e8 61 f4 ff ff       	call   c0001a11 <ld_word>
c00025b0:	0f b7 c0             	movzx  eax,ax
c00025b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025b7:	85 c0                	test   eax,eax
c00025b9:	75 0c                	jne    c00025c7 <mount_volume+0x126>
c00025bb:	8d 45 78             	lea    eax,[ebp+0x78]
c00025be:	e8 5b f4 ff ff       	call   c0001a1e <ld_dword>
c00025c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025cb:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025ce:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025d1:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00025d5:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00025d8:	48                   	dec    eax
c00025d9:	3c 01                	cmp    al,0x1
c00025db:	77 8c                	ja     c0002569 <mount_volume+0xc8>
c00025dd:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00025e1:	89 c3                	mov    ebx,eax
c00025e3:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00025e7:	66 85 c0             	test   ax,ax
c00025ea:	0f 84 79 ff ff ff    	je     c0002569 <mount_volume+0xc8>
c00025f0:	8d 40 ff             	lea    eax,[eax-0x1]
c00025f3:	85 d8                	test   eax,ebx
c00025f5:	0f 85 6e ff ff ff    	jne    c0002569 <mount_volume+0xc8>
c00025fb:	8d 45 65             	lea    eax,[ebp+0x65]
c00025fe:	e8 0e f4 ff ff       	call   c0001a11 <ld_word>
c0002603:	89 c7                	mov    edi,eax
c0002605:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002609:	a8 0f                	test   al,0xf
c000260b:	0f 85 58 ff ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002611:	8d 45 67             	lea    eax,[ebp+0x67]
c0002614:	e8 f8 f3 ff ff       	call   c0001a11 <ld_word>
c0002619:	0f b7 f0             	movzx  esi,ax
c000261c:	85 f6                	test   esi,esi
c000261e:	75 0a                	jne    c000262a <mount_volume+0x189>
c0002620:	8d 45 74             	lea    eax,[ebp+0x74]
c0002623:	e8 f6 f3 ff ff       	call   c0001a1e <ld_dword>
c0002628:	89 c6                	mov    esi,eax
c000262a:	8d 45 62             	lea    eax,[ebp+0x62]
c000262d:	e8 df f3 ff ff       	call   c0001a11 <ld_word>
c0002632:	66 85 c0             	test   ax,ax
c0002635:	0f 84 2e ff ff ff    	je     c0002569 <mount_volume+0xc8>
c000263b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002640:	0f b7 c8             	movzx  ecx,ax
c0002643:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002648:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000264c:	89 fa                	mov    edx,edi
c000264e:	66 c1 ea 04          	shr    dx,0x4
c0002652:	0f b7 d2             	movzx  edx,dx
c0002655:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002659:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000265c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002660:	39 c6                	cmp    esi,eax
c0002662:	0f 82 01 ff ff ff    	jb     c0002569 <mount_volume+0xc8>
c0002668:	29 c6                	sub    esi,eax
c000266a:	31 d2                	xor    edx,edx
c000266c:	89 f0                	mov    eax,esi
c000266e:	f7 f3                	div    ebx
c0002670:	39 de                	cmp    esi,ebx
c0002672:	0f 82 f1 fe ff ff    	jb     c0002569 <mount_volume+0xc8>
c0002678:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000267d:	0f 87 e6 fe ff ff    	ja     c0002569 <mount_volume+0xc8>
c0002683:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002688:	0f 86 63 03 00 00    	jbe    c00029f1 <mount_volume+0x550>
c000268e:	bb 03 00 00 00       	mov    ebx,0x3
c0002693:	8d 70 02             	lea    esi,[eax+0x2]
c0002696:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000269a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000269e:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026a1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026a4:	31 d2                	xor    edx,edx
c00026a6:	89 c8                	mov    eax,ecx
c00026a8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026ab:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026af:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026b3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026b7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026bb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026be:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026c5:	31 d2                	xor    edx,edx
c00026c7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026cb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026cf:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026d2:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00026d5:	83 fb 03             	cmp    ebx,0x3
c00026d8:	75 2b                	jne    c0002705 <mount_volume+0x264>
c00026da:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00026dd:	e8 2f f3 ff ff       	call   c0001a11 <ld_word>
c00026e2:	66 09 c7             	or     di,ax
c00026e5:	0f 85 7e fe ff ff    	jne    c0002569 <mount_volume+0xc8>
c00026eb:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c00026f1:	c1 e6 02             	shl    esi,0x2
c00026f4:	e8 25 f3 ff ff       	call   c0001a1e <ld_dword>
c00026f9:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002700:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002703:	eb 30                	jmp    c0002735 <mount_volume+0x294>
c0002705:	66 85 ff             	test   di,di
c0002708:	0f 84 5b fe ff ff    	je     c0002569 <mount_volume+0xc8>
c000270e:	31 d2                	xor    edx,edx
c0002710:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002714:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002718:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000271c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000271f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002722:	83 fb 02             	cmp    ebx,0x2
c0002725:	75 04                	jne    c000272b <mount_volume+0x28a>
c0002727:	01 f6                	add    esi,esi
c0002729:	eb 0a                	jmp    c0002735 <mount_volume+0x294>
c000272b:	8d 04 76             	lea    eax,[esi+esi*2]
c000272e:	83 e6 01             	and    esi,0x1
c0002731:	d1 e8                	shr    eax,1
c0002733:	01 c6                	add    esi,eax
c0002735:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000273b:	c1 ee 09             	shr    esi,0x9
c000273e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002742:	0f 87 21 fe ff ff    	ja     c0002569 <mount_volume+0xc8>
c0002748:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000274f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002756:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000275a:	83 fb 03             	cmp    ebx,0x3
c000275d:	75 7a                	jne    c00027d9 <mount_volume+0x338>
c000275f:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002765:	e8 a7 f2 ff ff       	call   c0001a11 <ld_word>
c000276a:	66 48                	dec    ax
c000276c:	75 6b                	jne    c00027d9 <mount_volume+0x338>
c000276e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002772:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002776:	83 c2 01             	add    edx,0x1
c0002779:	89 e8                	mov    eax,ebp
c000277b:	83 d1 00             	adc    ecx,0x0
c000277e:	e8 6c fa ff ff       	call   c00021ef <move_window>
c0002783:	85 c0                	test   eax,eax
c0002785:	75 52                	jne    c00027d9 <mount_volume+0x338>
c0002787:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c000278b:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002791:	e8 7b f2 ff ff       	call   c0001a11 <ld_word>
c0002796:	66 3d 55 aa          	cmp    ax,0xaa55
c000279a:	75 3d                	jne    c00027d9 <mount_volume+0x338>
c000279c:	8d 45 54             	lea    eax,[ebp+0x54]
c000279f:	e8 7a f2 ff ff       	call   c0001a1e <ld_dword>
c00027a4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027a9:	75 2e                	jne    c00027d9 <mount_volume+0x338>
c00027ab:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027b1:	e8 68 f2 ff ff       	call   c0001a1e <ld_dword>
c00027b6:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027bb:	75 1c                	jne    c00027d9 <mount_volume+0x338>
c00027bd:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027c3:	e8 56 f2 ff ff       	call   c0001a1e <ld_dword>
c00027c8:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027cb:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027d1:	e8 48 f2 ff ff       	call   c0001a1e <ld_dword>
c00027d6:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00027d9:	66 a1 a0 c1 02 c0    	mov    ax,ds:0xc002c1a0
c00027df:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00027e2:	40                   	inc    eax
c00027e3:	31 db                	xor    ebx,ebx
c00027e5:	66 a3 a0 c1 02 c0    	mov    ds:0xc002c1a0,ax
c00027eb:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c00027ef:	e9 0c 02 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c00027f4:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c00027fa:	e8 12 f2 ff ff       	call   c0001a11 <ld_word>
c00027ff:	66 3d 00 01          	cmp    ax,0x100
c0002803:	0f 85 60 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002809:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002810:	0f 85 53 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002816:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000281c:	e8 15 f2 ff ff       	call   c0001a36 <ld_qword>
c0002821:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002825:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002829:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000282f:	e8 ea f1 ff ff       	call   c0001a1e <ld_dword>
c0002834:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002837:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000283d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002840:	fe c8                	dec    al
c0002842:	0f 85 21 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002848:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c000284f:	bb 01 00 00 00       	mov    ebx,0x1
c0002854:	d3 e3                	shl    ebx,cl
c0002856:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000285a:	66 85 db             	test   bx,bx
c000285d:	0f 84 06 fd ff ff    	je     c0002569 <mount_volume+0xc8>
c0002863:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002869:	e8 b0 f1 ff ff       	call   c0001a1e <ld_dword>
c000286e:	89 c6                	mov    esi,eax
c0002870:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002875:	0f 87 ee fc ff ff    	ja     c0002569 <mount_volume+0xc8>
c000287b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000287f:	8d 40 02             	lea    eax,[eax+0x2]
c0002882:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002885:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002888:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000288c:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000288f:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002895:	e8 84 f1 ff ff       	call   c0001a1e <ld_dword>
c000289a:	31 d2                	xor    edx,edx
c000289c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028a0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028ac:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028af:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028b2:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028b8:	e8 61 f1 ff ff       	call   c0001a1e <ld_dword>
c00028bd:	31 d2                	xor    edx,edx
c00028bf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028c3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028cb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028ce:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d1:	0f b7 c3             	movzx  eax,bx
c00028d4:	31 d2                	xor    edx,edx
c00028d6:	0f af f0             	imul   esi,eax
c00028d9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00028e3:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c00028e7:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00028eb:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c00028ef:	39 c1                	cmp    ecx,eax
c00028f1:	89 df                	mov    edi,ebx
c00028f3:	19 d7                	sbb    edi,edx
c00028f5:	0f 82 6e fc ff ff    	jb     c0002569 <mount_volume+0xc8>
c00028fb:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002901:	31 db                	xor    ebx,ebx
c0002903:	e8 16 f1 ff ff       	call   c0001a1e <ld_dword>
c0002908:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000290f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002912:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000291a:	85 db                	test   ebx,ebx
c000291c:	75 39                	jne    c0002957 <mount_volume+0x4b6>
c000291e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002922:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002926:	0f 86 3d fc ff ff    	jbe    c0002569 <mount_volume+0xc8>
c000292c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000292f:	31 ff                	xor    edi,edi
c0002931:	89 e8                	mov    eax,ebp
c0002933:	e8 72 f3 ff ff       	call   c0001caa <clst2sect>
c0002938:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000293c:	01 c6                	add    esi,eax
c000293e:	89 e8                	mov    eax,ebp
c0002940:	11 d7                	adc    edi,edx
c0002942:	89 f2                	mov    edx,esi
c0002944:	89 f9                	mov    ecx,edi
c0002946:	e8 a4 f8 ff ff       	call   c00021ef <move_window>
c000294b:	85 c0                	test   eax,eax
c000294d:	0f 85 07 fc ff ff    	jne    c000255a <mount_volume+0xb9>
c0002953:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002957:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000295c:	74 0b                	je     c0002969 <mount_volume+0x4c8>
c000295e:	83 c3 20             	add    ebx,0x20
c0002961:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002967:	eb b1                	jmp    c000291a <mount_volume+0x479>
c0002969:	8d 75 54             	lea    esi,[ebp+0x54]
c000296c:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002970:	e8 a9 f0 ff ff       	call   c0001a1e <ld_dword>
c0002975:	89 c3                	mov    ebx,eax
c0002977:	83 f8 01             	cmp    eax,0x1
c000297a:	0f 86 e9 fb ff ff    	jbe    c0002569 <mount_volume+0xc8>
c0002980:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002983:	0f 86 e0 fb ff ff    	jbe    c0002569 <mount_volume+0xc8>
c0002989:	8d 53 fe             	lea    edx,[ebx-0x2]
c000298c:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002990:	0f af c2             	imul   eax,edx
c0002993:	31 d2                	xor    edx,edx
c0002995:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002998:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c000299b:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000299e:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029a1:	31 c9                	xor    ecx,ecx
c00029a3:	89 da                	mov    edx,ebx
c00029a5:	89 e8                	mov    eax,ebp
c00029a7:	c1 ea 07             	shr    edx,0x7
c00029aa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029ad:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029b0:	e8 3a f8 ff ff       	call   c00021ef <move_window>
c00029b5:	85 c0                	test   eax,eax
c00029b7:	0f 85 9d fb ff ff    	jne    c000255a <mount_volume+0xb9>
c00029bd:	89 d8                	mov    eax,ebx
c00029bf:	83 e0 7f             	and    eax,0x7f
c00029c2:	8d 04 86             	lea    eax,[esi+eax*4]
c00029c5:	e8 54 f0 ff ff       	call   c0001a1e <ld_dword>
c00029ca:	83 f8 ff             	cmp    eax,0xffffffff
c00029cd:	74 0a                	je     c00029d9 <mount_volume+0x538>
c00029cf:	43                   	inc    ebx
c00029d0:	39 d8                	cmp    eax,ebx
c00029d2:	74 cd                	je     c00029a1 <mount_volume+0x500>
c00029d4:	e9 90 fb ff ff       	jmp    c0002569 <mount_volume+0xc8>
c00029d9:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029e0:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029e7:	bb 04 00 00 00       	mov    ebx,0x4
c00029ec:	e9 e8 fd ff ff       	jmp    c00027d9 <mount_volume+0x338>
c00029f1:	3d f6 0f 00 00       	cmp    eax,0xff6
c00029f6:	19 db                	sbb    ebx,ebx
c00029f8:	83 c3 02             	add    ebx,0x2
c00029fb:	e9 93 fc ff ff       	jmp    c0002693 <mount_volume+0x1f2>
c0002a00:	83 c4 3c             	add    esp,0x3c
c0002a03:	89 d8                	mov    eax,ebx
c0002a05:	5b                   	pop    ebx
c0002a06:	5e                   	pop    esi
c0002a07:	5f                   	pop    edi
c0002a08:	5d                   	pop    ebp
c0002a09:	c3                   	ret    

c0002a0a <find_bitmap>:
c0002a0a:	55                   	push   ebp
c0002a0b:	57                   	push   edi
c0002a0c:	89 c7                	mov    edi,eax
c0002a0e:	56                   	push   esi
c0002a0f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a12:	53                   	push   ebx
c0002a13:	83 ec 1c             	sub    esp,0x1c
c0002a16:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a19:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a1d:	83 e8 02             	sub    eax,0x2
c0002a20:	39 f0                	cmp    eax,esi
c0002a22:	77 02                	ja     c0002a26 <find_bitmap+0x1c>
c0002a24:	31 f6                	xor    esi,esi
c0002a26:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a2a:	89 f3                	mov    ebx,esi
c0002a2c:	31 ed                	xor    ebp,ebp
c0002a2e:	31 c9                	xor    ecx,ecx
c0002a30:	89 da                	mov    edx,ebx
c0002a32:	89 f8                	mov    eax,edi
c0002a34:	c1 ea 0c             	shr    edx,0xc
c0002a37:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a3a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a3d:	e8 ad f7 ff ff       	call   c00021ef <move_window>
c0002a42:	85 c0                	test   eax,eax
c0002a44:	75 68                	jne    c0002aae <find_bitmap+0xa4>
c0002a46:	89 da                	mov    edx,ebx
c0002a48:	89 d9                	mov    ecx,ebx
c0002a4a:	c1 ea 03             	shr    edx,0x3
c0002a4d:	83 e1 07             	and    ecx,0x7
c0002a50:	b8 01 00 00 00       	mov    eax,0x1
c0002a55:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a5b:	d3 e0                	shl    eax,cl
c0002a5d:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a60:	83 e9 02             	sub    ecx,0x2
c0002a63:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a67:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a6b:	43                   	inc    ebx
c0002a6c:	21 c1                	and    ecx,eax
c0002a6e:	d1 e0                	shl    eax,1
c0002a70:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002a74:	77 09                	ja     c0002a7f <find_bitmap+0x75>
c0002a76:	31 db                	xor    ebx,ebx
c0002a78:	ba 00 02 00 00       	mov    edx,0x200
c0002a7d:	31 c0                	xor    eax,eax
c0002a7f:	84 c9                	test   cl,cl
c0002a81:	75 10                	jne    c0002a93 <find_bitmap+0x89>
c0002a83:	45                   	inc    ebp
c0002a84:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a88:	75 0f                	jne    c0002a99 <find_bitmap+0x8f>
c0002a8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a8e:	83 c0 02             	add    eax,0x2
c0002a91:	eb 22                	jmp    c0002ab5 <find_bitmap+0xab>
c0002a93:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a97:	31 ed                	xor    ebp,ebp
c0002a99:	39 de                	cmp    esi,ebx
c0002a9b:	74 16                	je     c0002ab3 <find_bitmap+0xa9>
c0002a9d:	84 c0                	test   al,al
c0002a9f:	75 c6                	jne    c0002a67 <find_bitmap+0x5d>
c0002aa1:	42                   	inc    edx
c0002aa2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002aa8:	77 84                	ja     c0002a2e <find_bitmap+0x24>
c0002aaa:	b0 01                	mov    al,0x1
c0002aac:	eb b9                	jmp    c0002a67 <find_bitmap+0x5d>
c0002aae:	83 c8 ff             	or     eax,0xffffffff
c0002ab1:	eb 02                	jmp    c0002ab5 <find_bitmap+0xab>
c0002ab3:	31 c0                	xor    eax,eax
c0002ab5:	83 c4 1c             	add    esp,0x1c
c0002ab8:	5b                   	pop    ebx
c0002ab9:	5e                   	pop    esi
c0002aba:	5f                   	pop    edi
c0002abb:	5d                   	pop    ebp
c0002abc:	c3                   	ret    

c0002abd <change_bitmap>:
c0002abd:	55                   	push   ebp
c0002abe:	89 cd                	mov    ebp,ecx
c0002ac0:	57                   	push   edi
c0002ac1:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002ac4:	56                   	push   esi
c0002ac5:	89 c7                	mov    edi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	89 c8                	mov    eax,ecx
c0002aca:	83 ec 1c             	sub    esp,0x1c
c0002acd:	31 d2                	xor    edx,edx
c0002acf:	89 ce                	mov    esi,ecx
c0002ad1:	c1 e8 0c             	shr    eax,0xc
c0002ad4:	bb 01 00 00 00       	mov    ebx,0x1
c0002ad9:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002adc:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002adf:	c1 ee 03             	shr    esi,0x3
c0002ae2:	83 e1 07             	and    ecx,0x7
c0002ae5:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002aeb:	d3 e3                	shl    ebx,cl
c0002aed:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002af1:	89 c1                	mov    ecx,eax
c0002af3:	89 d3                	mov    ebx,edx
c0002af5:	83 c1 01             	add    ecx,0x1
c0002af8:	83 d3 00             	adc    ebx,0x0
c0002afb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aff:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b03:	89 d1                	mov    ecx,edx
c0002b05:	89 c2                	mov    edx,eax
c0002b07:	89 f8                	mov    eax,edi
c0002b09:	e8 e1 f6 ff ff       	call   c00021ef <move_window>
c0002b0e:	89 c1                	mov    ecx,eax
c0002b10:	85 c0                	test   eax,eax
c0002b12:	75 48                	jne    c0002b5c <change_bitmap+0x9f>
c0002b14:	31 d2                	xor    edx,edx
c0002b16:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b1a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b1e:	0f 95 c2             	setne  dl
c0002b21:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b25:	74 3c                	je     c0002b63 <change_bitmap+0xa6>
c0002b27:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b2b:	4d                   	dec    ebp
c0002b2c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b34:	74 32                	je     c0002b68 <change_bitmap+0xab>
c0002b36:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b3a:	75 d8                	jne    c0002b14 <change_bitmap+0x57>
c0002b3c:	8d 46 01             	lea    eax,[esi+0x1]
c0002b3f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b44:	89 c3                	mov    ebx,eax
c0002b46:	31 f6                	xor    esi,esi
c0002b48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b50:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b56:	74 99                	je     c0002af1 <change_bitmap+0x34>
c0002b58:	89 de                	mov    esi,ebx
c0002b5a:	eb b8                	jmp    c0002b14 <change_bitmap+0x57>
c0002b5c:	b9 01 00 00 00       	mov    ecx,0x1
c0002b61:	eb 05                	jmp    c0002b68 <change_bitmap+0xab>
c0002b63:	b9 02 00 00 00       	mov    ecx,0x2
c0002b68:	83 c4 1c             	add    esp,0x1c
c0002b6b:	89 c8                	mov    eax,ecx
c0002b6d:	5b                   	pop    ebx
c0002b6e:	5e                   	pop    esi
c0002b6f:	5f                   	pop    edi
c0002b70:	5d                   	pop    ebp
c0002b71:	c3                   	ret    

c0002b72 <put_fat>:
c0002b72:	83 fa 01             	cmp    edx,0x1
c0002b75:	0f 86 7b 01 00 00    	jbe    c0002cf6 <put_fat+0x184>
c0002b7b:	55                   	push   ebp
c0002b7c:	57                   	push   edi
c0002b7d:	89 cf                	mov    edi,ecx
c0002b7f:	56                   	push   esi
c0002b80:	b9 02 00 00 00       	mov    ecx,0x2
c0002b85:	53                   	push   ebx
c0002b86:	89 c6                	mov    esi,eax
c0002b88:	83 ec 1c             	sub    esp,0x1c
c0002b8b:	89 d3                	mov    ebx,edx
c0002b8d:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b90:	0f 86 68 01 00 00    	jbe    c0002cfe <put_fat+0x18c>
c0002b96:	8a 00                	mov    al,BYTE PTR [eax]
c0002b98:	3c 02                	cmp    al,0x2
c0002b9a:	0f 84 c7 00 00 00    	je     c0002c67 <put_fat+0xf5>
c0002ba0:	77 09                	ja     c0002bab <put_fat+0x39>
c0002ba2:	fe c8                	dec    al
c0002ba4:	74 17                	je     c0002bbd <put_fat+0x4b>
c0002ba6:	e9 53 01 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002bab:	b9 02 00 00 00       	mov    ecx,0x2
c0002bb0:	3c 04                	cmp    al,0x4
c0002bb2:	0f 86 e1 00 00 00    	jbe    c0002c99 <put_fat+0x127>
c0002bb8:	e9 41 01 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002bbd:	89 d5                	mov    ebp,edx
c0002bbf:	31 c9                	xor    ecx,ecx
c0002bc1:	d1 ed                	shr    ebp,1
c0002bc3:	89 f0                	mov    eax,esi
c0002bc5:	01 d5                	add    ebp,edx
c0002bc7:	89 ea                	mov    edx,ebp
c0002bc9:	c1 ea 09             	shr    edx,0x9
c0002bcc:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bcf:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bd2:	e8 18 f6 ff ff       	call   c00021ef <move_window>
c0002bd7:	89 c1                	mov    ecx,eax
c0002bd9:	85 c0                	test   eax,eax
c0002bdb:	0f 85 1d 01 00 00    	jne    c0002cfe <put_fat+0x18c>
c0002be1:	8d 46 54             	lea    eax,[esi+0x54]
c0002be4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002be8:	8d 45 01             	lea    eax,[ebp+0x1]
c0002beb:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bf1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bf5:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bf9:	89 f8                	mov    eax,edi
c0002bfb:	83 e3 01             	and    ebx,0x1
c0002bfe:	74 0d                	je     c0002c0d <put_fat+0x9b>
c0002c00:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c03:	89 fa                	mov    edx,edi
c0002c05:	83 e0 0f             	and    eax,0xf
c0002c08:	c1 e2 04             	shl    edx,0x4
c0002c0b:	09 d0                	or     eax,edx
c0002c0d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c10:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c14:	31 c9                	xor    ecx,ecx
c0002c16:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c1a:	c1 ea 09             	shr    edx,0x9
c0002c1d:	89 f0                	mov    eax,esi
c0002c1f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c22:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c25:	e8 c5 f5 ff ff       	call   c00021ef <move_window>
c0002c2a:	89 c1                	mov    ecx,eax
c0002c2c:	85 c0                	test   eax,eax
c0002c2e:	0f 85 ca 00 00 00    	jne    c0002cfe <put_fat+0x18c>
c0002c34:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c38:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c3e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c42:	85 db                	test   ebx,ebx
c0002c44:	74 07                	je     c0002c4d <put_fat+0xdb>
c0002c46:	c1 ef 04             	shr    edi,0x4
c0002c49:	89 fa                	mov    edx,edi
c0002c4b:	eb 0e                	jmp    c0002c5b <put_fat+0xe9>
c0002c4d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c50:	c1 ef 08             	shr    edi,0x8
c0002c53:	83 e2 f0             	and    edx,0xfffffff0
c0002c56:	83 e7 0f             	and    edi,0xf
c0002c59:	09 fa                	or     edx,edi
c0002c5b:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c5e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c62:	e9 97 00 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002c67:	31 c9                	xor    ecx,ecx
c0002c69:	c1 ea 08             	shr    edx,0x8
c0002c6c:	89 f0                	mov    eax,esi
c0002c6e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c71:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c74:	e8 76 f5 ff ff       	call   c00021ef <move_window>
c0002c79:	89 c1                	mov    ecx,eax
c0002c7b:	85 c0                	test   eax,eax
c0002c7d:	75 7f                	jne    c0002cfe <put_fat+0x18c>
c0002c7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c83:	01 db                	add    ebx,ebx
c0002c85:	0f b7 d7             	movzx  edx,di
c0002c88:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c8e:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c92:	e8 ec ed ff ff       	call   c0001a83 <st_word>
c0002c97:	eb 53                	jmp    c0002cec <put_fat+0x17a>
c0002c99:	31 c9                	xor    ecx,ecx
c0002c9b:	c1 ea 07             	shr    edx,0x7
c0002c9e:	89 f0                	mov    eax,esi
c0002ca0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ca3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ca6:	e8 44 f5 ff ff       	call   c00021ef <move_window>
c0002cab:	89 c1                	mov    ecx,eax
c0002cad:	85 c0                	test   eax,eax
c0002caf:	75 4d                	jne    c0002cfe <put_fat+0x18c>
c0002cb1:	c1 e3 02             	shl    ebx,0x2
c0002cb4:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cba:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cbd:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cc1:	74 1c                	je     c0002cdf <put_fat+0x16d>
c0002cc3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cc7:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ccd:	89 d8                	mov    eax,ebx
c0002ccf:	e8 4a ed ff ff       	call   c0001a1e <ld_dword>
c0002cd4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cd8:	25 00 00 00 f0       	and    eax,0xf0000000
c0002cdd:	09 c7                	or     edi,eax
c0002cdf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ce3:	89 fa                	mov    edx,edi
c0002ce5:	89 d8                	mov    eax,ebx
c0002ce7:	e8 9b ed ff ff       	call   c0001a87 <st_dword>
c0002cec:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002cf0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cf4:	eb 08                	jmp    c0002cfe <put_fat+0x18c>
c0002cf6:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfb:	89 c8                	mov    eax,ecx
c0002cfd:	c3                   	ret    
c0002cfe:	83 c4 1c             	add    esp,0x1c
c0002d01:	89 c8                	mov    eax,ecx
c0002d03:	5b                   	pop    ebx
c0002d04:	5e                   	pop    esi
c0002d05:	5f                   	pop    edi
c0002d06:	5d                   	pop    ebp
c0002d07:	c3                   	ret    

c0002d08 <fill_last_frag>:
c0002d08:	57                   	push   edi
c0002d09:	89 cf                	mov    edi,ecx
c0002d0b:	56                   	push   esi
c0002d0c:	89 d6                	mov    esi,edx
c0002d0e:	53                   	push   ebx
c0002d0f:	89 c3                	mov    ebx,eax
c0002d11:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d14:	85 c0                	test   eax,eax
c0002d16:	74 21                	je     c0002d39 <fill_last_frag+0x31>
c0002d18:	89 f9                	mov    ecx,edi
c0002d1a:	83 f8 01             	cmp    eax,0x1
c0002d1d:	76 05                	jbe    c0002d24 <fill_last_frag+0x1c>
c0002d1f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d22:	29 c1                	sub    ecx,eax
c0002d24:	8d 56 01             	lea    edx,[esi+0x1]
c0002d27:	29 c2                	sub    edx,eax
c0002d29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d2b:	e8 42 fe ff ff       	call   c0002b72 <put_fat>
c0002d30:	85 c0                	test   eax,eax
c0002d32:	75 05                	jne    c0002d39 <fill_last_frag+0x31>
c0002d34:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d37:	eb d8                	jmp    c0002d11 <fill_last_frag+0x9>
c0002d39:	5b                   	pop    ebx
c0002d3a:	5e                   	pop    esi
c0002d3b:	5f                   	pop    edi
c0002d3c:	c3                   	ret    

c0002d3d <fill_first_frag>:
c0002d3d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d41:	75 2d                	jne    c0002d70 <fill_first_frag+0x33>
c0002d43:	57                   	push   edi
c0002d44:	56                   	push   esi
c0002d45:	53                   	push   ebx
c0002d46:	89 c3                	mov    ebx,eax
c0002d48:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d4b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d4e:	01 d7                	add    edi,edx
c0002d50:	39 fa                	cmp    edx,edi
c0002d52:	74 14                	je     c0002d68 <fill_first_frag+0x2b>
c0002d54:	8d 72 01             	lea    esi,[edx+0x1]
c0002d57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d59:	89 f1                	mov    ecx,esi
c0002d5b:	e8 12 fe ff ff       	call   c0002b72 <put_fat>
c0002d60:	89 f2                	mov    edx,esi
c0002d62:	85 c0                	test   eax,eax
c0002d64:	74 ea                	je     c0002d50 <fill_first_frag+0x13>
c0002d66:	eb 0b                	jmp    c0002d73 <fill_first_frag+0x36>
c0002d68:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d6c:	31 c0                	xor    eax,eax
c0002d6e:	eb 03                	jmp    c0002d73 <fill_first_frag+0x36>
c0002d70:	31 c0                	xor    eax,eax
c0002d72:	c3                   	ret    
c0002d73:	5b                   	pop    ebx
c0002d74:	5e                   	pop    esi
c0002d75:	5f                   	pop    edi
c0002d76:	c3                   	ret    

c0002d77 <get_fat>:
c0002d77:	83 fa 01             	cmp    edx,0x1
c0002d7a:	0f 86 db 01 00 00    	jbe    c0002f5b <get_fat+0x1e4>
c0002d80:	55                   	push   ebp
c0002d81:	b9 01 00 00 00       	mov    ecx,0x1
c0002d86:	57                   	push   edi
c0002d87:	56                   	push   esi
c0002d88:	53                   	push   ebx
c0002d89:	83 ec 1c             	sub    esp,0x1c
c0002d8c:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d8e:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d91:	0f 86 cc 01 00 00    	jbe    c0002f63 <get_fat+0x1ec>
c0002d97:	89 c3                	mov    ebx,eax
c0002d99:	89 d6                	mov    esi,edx
c0002d9b:	8a 07                	mov    al,BYTE PTR [edi]
c0002d9d:	3c 02                	cmp    al,0x2
c0002d9f:	0f 84 99 00 00 00    	je     c0002e3e <get_fat+0xc7>
c0002da5:	77 09                	ja     c0002db0 <get_fat+0x39>
c0002da7:	fe c8                	dec    al
c0002da9:	74 1a                	je     c0002dc5 <get_fat+0x4e>
c0002dab:	e9 b3 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002db0:	3c 03                	cmp    al,0x3
c0002db2:	0f 84 b5 00 00 00    	je     c0002e6d <get_fat+0xf6>
c0002db8:	3c 04                	cmp    al,0x4
c0002dba:	0f 84 e3 00 00 00    	je     c0002ea3 <get_fat+0x12c>
c0002dc0:	e9 9e 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002dc5:	89 d3                	mov    ebx,edx
c0002dc7:	31 c9                	xor    ecx,ecx
c0002dc9:	d1 eb                	shr    ebx,1
c0002dcb:	89 f8                	mov    eax,edi
c0002dcd:	01 d3                	add    ebx,edx
c0002dcf:	89 da                	mov    edx,ebx
c0002dd1:	c1 ea 09             	shr    edx,0x9
c0002dd4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dd7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dda:	e8 10 f4 ff ff       	call   c00021ef <move_window>
c0002ddf:	85 c0                	test   eax,eax
c0002de1:	74 08                	je     c0002deb <get_fat+0x74>
c0002de3:	83 c9 ff             	or     ecx,0xffffffff
c0002de6:	e9 78 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002deb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002dee:	31 c9                	xor    ecx,ecx
c0002df0:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002df6:	89 ea                	mov    edx,ebp
c0002df8:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002dfc:	c1 ea 09             	shr    edx,0x9
c0002dff:	89 f8                	mov    eax,edi
c0002e01:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e04:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e07:	e8 e3 f3 ff ff       	call   c00021ef <move_window>
c0002e0c:	85 c0                	test   eax,eax
c0002e0e:	75 d3                	jne    c0002de3 <get_fat+0x6c>
c0002e10:	0f b6 c3             	movzx  eax,bl
c0002e13:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e19:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e1e:	c1 e3 08             	shl    ebx,0x8
c0002e21:	09 c3                	or     ebx,eax
c0002e23:	89 d9                	mov    ecx,ebx
c0002e25:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e2b:	83 e6 01             	and    esi,0x1
c0002e2e:	0f 84 2f 01 00 00    	je     c0002f63 <get_fat+0x1ec>
c0002e34:	89 d9                	mov    ecx,ebx
c0002e36:	c1 e9 04             	shr    ecx,0x4
c0002e39:	e9 25 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002e3e:	31 c9                	xor    ecx,ecx
c0002e40:	c1 ea 08             	shr    edx,0x8
c0002e43:	89 f8                	mov    eax,edi
c0002e45:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e48:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e4b:	e8 9f f3 ff ff       	call   c00021ef <move_window>
c0002e50:	85 c0                	test   eax,eax
c0002e52:	75 8f                	jne    c0002de3 <get_fat+0x6c>
c0002e54:	01 f6                	add    esi,esi
c0002e56:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e5c:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e60:	e8 ac eb ff ff       	call   c0001a11 <ld_word>
c0002e65:	0f b7 c8             	movzx  ecx,ax
c0002e68:	e9 f6 00 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002e6d:	31 c9                	xor    ecx,ecx
c0002e6f:	c1 ea 07             	shr    edx,0x7
c0002e72:	89 f8                	mov    eax,edi
c0002e74:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e77:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e7a:	e8 70 f3 ff ff       	call   c00021ef <move_window>
c0002e7f:	85 c0                	test   eax,eax
c0002e81:	0f 85 5c ff ff ff    	jne    c0002de3 <get_fat+0x6c>
c0002e87:	c1 e6 02             	shl    esi,0x2
c0002e8a:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e90:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e94:	e8 85 eb ff ff       	call   c0001a1e <ld_dword>
c0002e99:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e9e:	e9 b4 00 00 00       	jmp    c0002f57 <get_fat+0x1e0>
c0002ea3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ea6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ea9:	89 d1                	mov    ecx,edx
c0002eab:	09 c1                	or     ecx,eax
c0002ead:	74 06                	je     c0002eb5 <get_fat+0x13e>
c0002eaf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eb3:	75 0f                	jne    c0002ec4 <get_fat+0x14d>
c0002eb5:	b9 01 00 00 00       	mov    ecx,0x1
c0002eba:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ebe:	0f 85 9f 00 00 00    	jne    c0002f63 <get_fat+0x1ec>
c0002ec4:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002ec8:	89 f5                	mov    ebp,esi
c0002eca:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002ecf:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002ed2:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002ed5:	80 f9 02             	cmp    cl,0x2
c0002ed8:	75 35                	jne    c0002f0f <get_fat+0x198>
c0002eda:	83 c0 ff             	add    eax,0xffffffff
c0002edd:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002ee2:	83 d2 ff             	adc    edx,0xffffffff
c0002ee5:	31 db                	xor    ebx,ebx
c0002ee7:	0f ac d0 09          	shrd   eax,edx,0x9
c0002eeb:	53                   	push   ebx
c0002eec:	c1 ea 09             	shr    edx,0x9
c0002eef:	51                   	push   ecx
c0002ef0:	52                   	push   edx
c0002ef1:	50                   	push   eax
c0002ef2:	e8 85 1d 02 00       	call   c0024c7c <__udivdi3>
c0002ef7:	83 c4 10             	add    esp,0x10
c0002efa:	b9 01 00 00 00       	mov    ecx,0x1
c0002eff:	39 c5                	cmp    ebp,eax
c0002f01:	77 60                	ja     c0002f63 <get_fat+0x1ec>
c0002f03:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f08:	74 59                	je     c0002f63 <get_fat+0x1ec>
c0002f0a:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f0d:	eb 54                	jmp    c0002f63 <get_fat+0x1ec>
c0002f0f:	80 f9 03             	cmp    cl,0x3
c0002f12:	75 05                	jne    c0002f19 <get_fat+0x1a2>
c0002f14:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f17:	77 f1                	ja     c0002f0a <get_fat+0x193>
c0002f19:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f1e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f22:	75 3f                	jne    c0002f63 <get_fat+0x1ec>
c0002f24:	31 c9                	xor    ecx,ecx
c0002f26:	89 f2                	mov    edx,esi
c0002f28:	89 f8                	mov    eax,edi
c0002f2a:	c1 ea 07             	shr    edx,0x7
c0002f2d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f30:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f33:	e8 b7 f2 ff ff       	call   c00021ef <move_window>
c0002f38:	85 c0                	test   eax,eax
c0002f3a:	0f 85 a3 fe ff ff    	jne    c0002de3 <get_fat+0x6c>
c0002f40:	c1 e6 02             	shl    esi,0x2
c0002f43:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f49:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f4d:	e8 cc ea ff ff       	call   c0001a1e <ld_dword>
c0002f52:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f57:	89 c1                	mov    ecx,eax
c0002f59:	eb 08                	jmp    c0002f63 <get_fat+0x1ec>
c0002f5b:	b9 01 00 00 00       	mov    ecx,0x1
c0002f60:	89 c8                	mov    eax,ecx
c0002f62:	c3                   	ret    
c0002f63:	83 c4 1c             	add    esp,0x1c
c0002f66:	89 c8                	mov    eax,ecx
c0002f68:	5b                   	pop    ebx
c0002f69:	5e                   	pop    esi
c0002f6a:	5f                   	pop    edi
c0002f6b:	5d                   	pop    ebp
c0002f6c:	c3                   	ret    

c0002f6d <dir_sdi>:
c0002f6d:	55                   	push   ebp
c0002f6e:	57                   	push   edi
c0002f6f:	56                   	push   esi
c0002f70:	53                   	push   ebx
c0002f71:	89 c3                	mov    ebx,eax
c0002f73:	83 ec 1c             	sub    esp,0x1c
c0002f76:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f78:	31 c0                	xor    eax,eax
c0002f7a:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002f7d:	0f 94 c0             	sete   al
c0002f80:	48                   	dec    eax
c0002f81:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f86:	05 00 00 00 10       	add    eax,0x10000000
c0002f8b:	39 d0                	cmp    eax,edx
c0002f8d:	77 0a                	ja     c0002f99 <dir_sdi+0x2c>
c0002f8f:	b8 02 00 00 00       	mov    eax,0x2
c0002f94:	e9 c4 00 00 00       	jmp    c000305d <dir_sdi+0xf0>
c0002f99:	89 d6                	mov    esi,edx
c0002f9b:	f6 c2 1f             	test   dl,0x1f
c0002f9e:	75 ef                	jne    c0002f8f <dir_sdi+0x22>
c0002fa0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fa3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fa6:	85 c9                	test   ecx,ecx
c0002fa8:	75 2d                	jne    c0002fd7 <dir_sdi+0x6a>
c0002faa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fad:	77 1b                	ja     c0002fca <dir_sdi+0x5d>
c0002faf:	89 f2                	mov    edx,esi
c0002fb1:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fb5:	c1 ea 05             	shr    edx,0x5
c0002fb8:	39 c2                	cmp    edx,eax
c0002fba:	73 d3                	jae    c0002f8f <dir_sdi+0x22>
c0002fbc:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fbf:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fc2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fc5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fc8:	eb 4b                	jmp    c0003015 <dir_sdi+0xa8>
c0002fca:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fcd:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 da                	je     c0002faf <dir_sdi+0x42>
c0002fd5:	89 c1                	mov    ecx,eax
c0002fd7:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002fdb:	c1 e5 09             	shl    ebp,0x9
c0002fde:	89 ca                	mov    edx,ecx
c0002fe0:	39 ee                	cmp    esi,ebp
c0002fe2:	72 1c                	jb     c0003000 <dir_sdi+0x93>
c0002fe4:	89 d8                	mov    eax,ebx
c0002fe6:	e8 8c fd ff ff       	call   c0002d77 <get_fat>
c0002feb:	89 c1                	mov    ecx,eax
c0002fed:	83 f8 ff             	cmp    eax,0xffffffff
c0002ff0:	74 66                	je     c0003058 <dir_sdi+0xeb>
c0002ff2:	83 f8 01             	cmp    eax,0x1
c0002ff5:	76 98                	jbe    c0002f8f <dir_sdi+0x22>
c0002ff7:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002ffa:	76 93                	jbe    c0002f8f <dir_sdi+0x22>
c0002ffc:	29 ee                	sub    esi,ebp
c0002ffe:	eb de                	jmp    c0002fde <dir_sdi+0x71>
c0003000:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003004:	89 f8                	mov    eax,edi
c0003006:	e8 9f ec ff ff       	call   c0001caa <clst2sect>
c000300b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000300f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003012:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003015:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003018:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000301b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000301e:	89 d1                	mov    ecx,edx
c0003020:	09 c1                	or     ecx,eax
c0003022:	0f 84 67 ff ff ff    	je     c0002f8f <dir_sdi+0x22>
c0003028:	89 f1                	mov    ecx,esi
c000302a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003032:	c1 e9 09             	shr    ecx,0x9
c0003035:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003039:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000303d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003041:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003044:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000304a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000304d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003051:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003054:	31 c0                	xor    eax,eax
c0003056:	eb 05                	jmp    c000305d <dir_sdi+0xf0>
c0003058:	b8 01 00 00 00       	mov    eax,0x1
c000305d:	83 c4 1c             	add    esp,0x1c
c0003060:	5b                   	pop    ebx
c0003061:	5e                   	pop    esi
c0003062:	5f                   	pop    edi
c0003063:	5d                   	pop    ebp
c0003064:	c3                   	ret    

c0003065 <create_chain>:
c0003065:	55                   	push   ebp
c0003066:	89 c5                	mov    ebp,eax
c0003068:	57                   	push   edi
c0003069:	56                   	push   esi
c000306a:	53                   	push   ebx
c000306b:	83 ec 1c             	sub    esp,0x1c
c000306e:	85 d2                	test   edx,edx
c0003070:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003074:	8b 30                	mov    esi,DWORD PTR [eax]
c0003076:	75 0e                	jne    c0003086 <create_chain+0x21>
c0003078:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000307b:	85 ff                	test   edi,edi
c000307d:	74 39                	je     c00030b8 <create_chain+0x53>
c000307f:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003082:	77 39                	ja     c00030bd <create_chain+0x58>
c0003084:	eb 32                	jmp    c00030b8 <create_chain+0x53>
c0003086:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000308a:	e8 e8 fc ff ff       	call   c0002d77 <get_fat>
c000308f:	89 c3                	mov    ebx,eax
c0003091:	83 f8 01             	cmp    eax,0x1
c0003094:	77 0a                	ja     c00030a0 <create_chain+0x3b>
c0003096:	bb 01 00 00 00       	mov    ebx,0x1
c000309b:	e9 ba 01 00 00       	jmp    c000325a <create_chain+0x1f5>
c00030a0:	83 f8 ff             	cmp    eax,0xffffffff
c00030a3:	0f 84 62 01 00 00    	je     c000320b <create_chain+0x1a6>
c00030a9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030ac:	0f 87 a8 01 00 00    	ja     c000325a <create_chain+0x1f5>
c00030b2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030b6:	eb 05                	jmp    c00030bd <create_chain+0x58>
c00030b8:	bf 01 00 00 00       	mov    edi,0x1
c00030bd:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030c1:	75 07                	jne    c00030ca <create_chain+0x65>
c00030c3:	31 db                	xor    ebx,ebx
c00030c5:	e9 90 01 00 00       	jmp    c000325a <create_chain+0x1f5>
c00030ca:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030cd:	75 74                	jne    c0003143 <create_chain+0xde>
c00030cf:	b9 01 00 00 00       	mov    ecx,0x1
c00030d4:	89 fa                	mov    edx,edi
c00030d6:	89 f0                	mov    eax,esi
c00030d8:	e8 2d f9 ff ff       	call   c0002a0a <find_bitmap>
c00030dd:	89 c3                	mov    ebx,eax
c00030df:	8d 40 ff             	lea    eax,[eax-0x1]
c00030e2:	83 f8 fd             	cmp    eax,0xfffffffd
c00030e5:	0f 87 6f 01 00 00    	ja     c000325a <create_chain+0x1f5>
c00030eb:	83 ec 0c             	sub    esp,0xc
c00030ee:	b9 01 00 00 00       	mov    ecx,0x1
c00030f3:	6a 01                	push   0x1
c00030f5:	89 da                	mov    edx,ebx
c00030f7:	89 f0                	mov    eax,esi
c00030f9:	e8 bf f9 ff ff       	call   c0002abd <change_bitmap>
c00030fe:	83 c4 10             	add    esp,0x10
c0003101:	83 f8 02             	cmp    eax,0x2
c0003104:	74 90                	je     c0003096 <create_chain+0x31>
c0003106:	83 f8 01             	cmp    eax,0x1
c0003109:	0f 84 fc 00 00 00    	je     c000320b <create_chain+0x1a6>
c000310f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003114:	75 09                	jne    c000311f <create_chain+0xba>
c0003116:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000311a:	e9 0c 01 00 00       	jmp    c000322b <create_chain+0x1c6>
c000311f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003123:	0f 85 e7 00 00 00    	jne    c0003210 <create_chain+0x1ab>
c0003129:	8d 57 01             	lea    edx,[edi+0x1]
c000312c:	39 da                	cmp    edx,ebx
c000312e:	0f 84 f7 00 00 00    	je     c000322b <create_chain+0x1c6>
c0003134:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003137:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000313b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000313e:	e9 cd 00 00 00       	jmp    c0003210 <create_chain+0x1ab>
c0003143:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003147:	75 41                	jne    c000318a <create_chain+0x125>
c0003149:	8d 5f 01             	lea    ebx,[edi+0x1]
c000314c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000314f:	77 05                	ja     c0003156 <create_chain+0xf1>
c0003151:	bb 02 00 00 00       	mov    ebx,0x2
c0003156:	89 da                	mov    edx,ebx
c0003158:	89 e8                	mov    eax,ebp
c000315a:	e8 18 fc ff ff       	call   c0002d77 <get_fat>
c000315f:	83 f8 01             	cmp    eax,0x1
c0003162:	0f 84 2e ff ff ff    	je     c0003096 <create_chain+0x31>
c0003168:	83 f8 ff             	cmp    eax,0xffffffff
c000316b:	0f 84 9a 00 00 00    	je     c000320b <create_chain+0x1a6>
c0003171:	85 c0                	test   eax,eax
c0003173:	74 11                	je     c0003186 <create_chain+0x121>
c0003175:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003178:	83 f8 01             	cmp    eax,0x1
c000317b:	76 0d                	jbe    c000318a <create_chain+0x125>
c000317d:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003180:	76 08                	jbe    c000318a <create_chain+0x125>
c0003182:	89 c7                	mov    edi,eax
c0003184:	eb 04                	jmp    c000318a <create_chain+0x125>
c0003186:	85 db                	test   ebx,ebx
c0003188:	75 38                	jne    c00031c2 <create_chain+0x15d>
c000318a:	89 fb                	mov    ebx,edi
c000318c:	43                   	inc    ebx
c000318d:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003190:	77 0e                	ja     c00031a0 <create_chain+0x13b>
c0003192:	83 ff 01             	cmp    edi,0x1
c0003195:	0f 86 28 ff ff ff    	jbe    c00030c3 <create_chain+0x5e>
c000319b:	bb 02 00 00 00       	mov    ebx,0x2
c00031a0:	89 da                	mov    edx,ebx
c00031a2:	89 e8                	mov    eax,ebp
c00031a4:	e8 ce fb ff ff       	call   c0002d77 <get_fat>
c00031a9:	85 c0                	test   eax,eax
c00031ab:	74 15                	je     c00031c2 <create_chain+0x15d>
c00031ad:	83 f8 01             	cmp    eax,0x1
c00031b0:	0f 84 e0 fe ff ff    	je     c0003096 <create_chain+0x31>
c00031b6:	40                   	inc    eax
c00031b7:	74 52                	je     c000320b <create_chain+0x1a6>
c00031b9:	39 fb                	cmp    ebx,edi
c00031bb:	75 cf                	jne    c000318c <create_chain+0x127>
c00031bd:	e9 01 ff ff ff       	jmp    c00030c3 <create_chain+0x5e>
c00031c2:	83 c9 ff             	or     ecx,0xffffffff
c00031c5:	89 da                	mov    edx,ebx
c00031c7:	89 f0                	mov    eax,esi
c00031c9:	e8 a4 f9 ff ff       	call   c0002b72 <put_fat>
c00031ce:	85 c0                	test   eax,eax
c00031d0:	75 32                	jne    c0003204 <create_chain+0x19f>
c00031d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00031d7:	74 11                	je     c00031ea <create_chain+0x185>
c00031d9:	89 d9                	mov    ecx,ebx
c00031db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031df:	89 f0                	mov    eax,esi
c00031e1:	e8 8c f9 ff ff       	call   c0002b72 <put_fat>
c00031e6:	85 c0                	test   eax,eax
c00031e8:	75 1a                	jne    c0003204 <create_chain+0x19f>
c00031ea:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00031ed:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00031f0:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c00031f3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00031f6:	39 d0                	cmp    eax,edx
c00031f8:	77 04                	ja     c00031fe <create_chain+0x199>
c00031fa:	48                   	dec    eax
c00031fb:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00031fe:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003202:	eb 56                	jmp    c000325a <create_chain+0x1f5>
c0003204:	48                   	dec    eax
c0003205:	0f 85 8b fe ff ff    	jne    c0003096 <create_chain+0x31>
c000320b:	83 cb ff             	or     ebx,0xffffffff
c000320e:	eb 4a                	jmp    c000325a <create_chain+0x1f5>
c0003210:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003214:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003217:	41                   	inc    ecx
c0003218:	39 d9                	cmp    ecx,ebx
c000321a:	75 19                	jne    c0003235 <create_chain+0x1d0>
c000321c:	b9 02 00 00 00       	mov    ecx,0x2
c0003221:	85 d2                	test   edx,edx
c0003223:	74 03                	je     c0003228 <create_chain+0x1c3>
c0003225:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003228:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000322b:	85 c0                	test   eax,eax
c000322d:	0f 85 63 fe ff ff    	jne    c0003096 <create_chain+0x31>
c0003233:	eb b5                	jmp    c00031ea <create_chain+0x185>
c0003235:	85 d2                	test   edx,edx
c0003237:	75 07                	jne    c0003240 <create_chain+0x1db>
c0003239:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003240:	89 d9                	mov    ecx,ebx
c0003242:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003246:	89 e8                	mov    eax,ebp
c0003248:	e8 bb fa ff ff       	call   c0002d08 <fill_last_frag>
c000324d:	85 c0                	test   eax,eax
c000324f:	75 b3                	jne    c0003204 <create_chain+0x19f>
c0003251:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003258:	eb 90                	jmp    c00031ea <create_chain+0x185>
c000325a:	83 c4 1c             	add    esp,0x1c
c000325d:	89 d8                	mov    eax,ebx
c000325f:	5b                   	pop    ebx
c0003260:	5e                   	pop    esi
c0003261:	5f                   	pop    edi
c0003262:	5d                   	pop    ebp
c0003263:	c3                   	ret    

c0003264 <remove_chain>:
c0003264:	55                   	push   ebp
c0003265:	57                   	push   edi
c0003266:	56                   	push   esi
c0003267:	53                   	push   ebx
c0003268:	83 ec 1c             	sub    esp,0x1c
c000326b:	83 fa 01             	cmp    edx,0x1
c000326e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003272:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003274:	77 0a                	ja     c0003280 <remove_chain+0x1c>
c0003276:	b8 02 00 00 00       	mov    eax,0x2
c000327b:	e9 24 01 00 00       	jmp    c00033a4 <remove_chain+0x140>
c0003280:	89 d6                	mov    esi,edx
c0003282:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003285:	76 ef                	jbe    c0003276 <remove_chain+0x12>
c0003287:	89 c7                	mov    edi,eax
c0003289:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000328e:	75 06                	jne    c0003296 <remove_chain+0x32>
c0003290:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003294:	eb 54                	jmp    c00032ea <remove_chain+0x86>
c0003296:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003299:	75 06                	jne    c00032a1 <remove_chain+0x3d>
c000329b:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000329f:	74 ef                	je     c0003290 <remove_chain+0x2c>
c00032a1:	83 c9 ff             	or     ecx,0xffffffff
c00032a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032a8:	89 d8                	mov    eax,ebx
c00032aa:	e8 c3 f8 ff ff       	call   c0002b72 <put_fat>
c00032af:	85 c0                	test   eax,eax
c00032b1:	74 dd                	je     c0003290 <remove_chain+0x2c>
c00032b3:	e9 ec 00 00 00       	jmp    c00033a4 <remove_chain+0x140>
c00032b8:	83 f8 01             	cmp    eax,0x1
c00032bb:	74 b9                	je     c0003276 <remove_chain+0x12>
c00032bd:	83 f8 ff             	cmp    eax,0xffffffff
c00032c0:	74 6d                	je     c000332f <remove_chain+0xcb>
c00032c2:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c5:	75 6f                	jne    c0003336 <remove_chain+0xd2>
c00032c7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032ca:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032cd:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032d0:	39 d0                	cmp    eax,edx
c00032d2:	73 08                	jae    c00032dc <remove_chain+0x78>
c00032d4:	40                   	inc    eax
c00032d5:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032d9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00032dc:	8d 4e 01             	lea    ecx,[esi+0x1]
c00032df:	39 e9                	cmp    ecx,ebp
c00032e1:	75 64                	jne    c0003347 <remove_chain+0xe3>
c00032e3:	89 ee                	mov    esi,ebp
c00032e5:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00032e8:	76 0f                	jbe    c00032f9 <remove_chain+0x95>
c00032ea:	89 f2                	mov    edx,esi
c00032ec:	89 f8                	mov    eax,edi
c00032ee:	e8 84 fa ff ff       	call   c0002d77 <get_fat>
c00032f3:	89 c5                	mov    ebp,eax
c00032f5:	85 c0                	test   eax,eax
c00032f7:	75 bf                	jne    c00032b8 <remove_chain+0x54>
c00032f9:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032fc:	0f 85 a0 00 00 00    	jne    c00033a2 <remove_chain+0x13e>
c0003302:	eb 6c                	jmp    c0003370 <remove_chain+0x10c>
c0003304:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003307:	84 c0                	test   al,al
c0003309:	75 7d                	jne    c0003388 <remove_chain+0x124>
c000330b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000330e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003312:	0f 84 86 00 00 00    	je     c000339e <remove_chain+0x13a>
c0003318:	89 da                	mov    edx,ebx
c000331a:	89 f8                	mov    eax,edi
c000331c:	e8 56 fa ff ff       	call   c0002d77 <get_fat>
c0003321:	83 f8 01             	cmp    eax,0x1
c0003324:	0f 86 4c ff ff ff    	jbe    c0003276 <remove_chain+0x12>
c000332a:	83 f8 ff             	cmp    eax,0xffffffff
c000332d:	75 4e                	jne    c000337d <remove_chain+0x119>
c000332f:	b8 01 00 00 00       	mov    eax,0x1
c0003334:	eb 6e                	jmp    c00033a4 <remove_chain+0x140>
c0003336:	31 c9                	xor    ecx,ecx
c0003338:	89 f2                	mov    edx,esi
c000333a:	89 d8                	mov    eax,ebx
c000333c:	e8 31 f8 ff ff       	call   c0002b72 <put_fat>
c0003341:	85 c0                	test   eax,eax
c0003343:	74 82                	je     c00032c7 <remove_chain+0x63>
c0003345:	eb 5d                	jmp    c00033a4 <remove_chain+0x140>
c0003347:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000334a:	75 1b                	jne    c0003367 <remove_chain+0x103>
c000334c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003350:	89 d8                	mov    eax,ebx
c0003352:	83 ec 0c             	sub    esp,0xc
c0003355:	6a 00                	push   0x0
c0003357:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000335b:	e8 5d f7 ff ff       	call   c0002abd <change_bitmap>
c0003360:	83 c4 10             	add    esp,0x10
c0003363:	85 c0                	test   eax,eax
c0003365:	75 3d                	jne    c00033a4 <remove_chain+0x140>
c0003367:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000336b:	e9 73 ff ff ff       	jmp    c00032e3 <remove_chain+0x7f>
c0003370:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003375:	75 8d                	jne    c0003304 <remove_chain+0xa0>
c0003377:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c000337b:	eb 25                	jmp    c00033a2 <remove_chain+0x13e>
c000337d:	8d 53 01             	lea    edx,[ebx+0x1]
c0003380:	89 c3                	mov    ebx,eax
c0003382:	39 c2                	cmp    edx,eax
c0003384:	74 88                	je     c000330e <remove_chain+0xaa>
c0003386:	eb 1a                	jmp    c00033a2 <remove_chain+0x13e>
c0003388:	3c 03                	cmp    al,0x3
c000338a:	75 16                	jne    c00033a2 <remove_chain+0x13e>
c000338c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000338f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003393:	77 0d                	ja     c00033a2 <remove_chain+0x13e>
c0003395:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003398:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000339c:	72 04                	jb     c00033a2 <remove_chain+0x13e>
c000339e:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033a2:	31 c0                	xor    eax,eax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <dir_clear>:
c00033ac:	55                   	push   ebp
c00033ad:	57                   	push   edi
c00033ae:	56                   	push   esi
c00033af:	89 c6                	mov    esi,eax
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033b9:	e8 9d ed ff ff       	call   c000215b <sync_window>
c00033be:	85 c0                	test   eax,eax
c00033c0:	0f 85 de 00 00 00    	jne    c00034a4 <dir_clear+0xf8>
c00033c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033ca:	89 f0                	mov    eax,esi
c00033cc:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033cf:	e8 d6 e8 ff ff       	call   c0001caa <clst2sect>
c00033d4:	b9 00 02 00 00       	mov    ecx,0x200
c00033d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00033e1:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00033e4:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00033e7:	89 e8                	mov    eax,ebp
c00033e9:	31 d2                	xor    edx,edx
c00033eb:	e8 b5 e6 ff ff       	call   c0001aa5 <mem_set>
c00033f0:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c00033f4:	c1 e3 09             	shl    ebx,0x9
c00033f7:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c00033fd:	76 1f                	jbe    c000341e <dir_clear+0x72>
c00033ff:	bb 00 80 00 00       	mov    ebx,0x8000
c0003404:	eb 18                	jmp    c000341e <dir_clear+0x72>
c0003406:	83 ec 0c             	sub    esp,0xc
c0003409:	53                   	push   ebx
c000340a:	e8 35 4e 00 00       	call   c0008244 <ff_memalloc>
c000340f:	83 c4 10             	add    esp,0x10
c0003412:	89 c7                	mov    edi,eax
c0003414:	85 c0                	test   eax,eax
c0003416:	0f 85 8f 00 00 00    	jne    c00034ab <dir_clear+0xff>
c000341c:	d1 eb                	shr    ebx,1
c000341e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003424:	77 e0                	ja     c0003406 <dir_clear+0x5a>
c0003426:	31 db                	xor    ebx,ebx
c0003428:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000342c:	39 d8                	cmp    eax,ebx
c000342e:	76 66                	jbe    c0003496 <dir_clear+0xea>
c0003430:	83 ec 0c             	sub    esp,0xc
c0003433:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003437:	6a 01                	push   0x1
c0003439:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000343d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003441:	55                   	push   ebp
c0003442:	50                   	push   eax
c0003443:	e8 94 e5 ff ff       	call   c00019dc <disk_write>
c0003448:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000344d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003452:	83 c4 20             	add    esp,0x20
c0003455:	85 c0                	test   eax,eax
c0003457:	75 3d                	jne    c0003496 <dir_clear+0xea>
c0003459:	43                   	inc    ebx
c000345a:	eb cc                	jmp    c0003428 <dir_clear+0x7c>
c000345c:	83 ec 0c             	sub    esp,0xc
c000345f:	31 d2                	xor    edx,edx
c0003461:	55                   	push   ebp
c0003462:	89 d8                	mov    eax,ebx
c0003464:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003468:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000346c:	52                   	push   edx
c000346d:	50                   	push   eax
c000346e:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003472:	57                   	push   edi
c0003473:	50                   	push   eax
c0003474:	e8 63 e5 ff ff       	call   c00019dc <disk_write>
c0003479:	83 c4 20             	add    esp,0x20
c000347c:	85 c0                	test   eax,eax
c000347e:	75 0a                	jne    c000348a <dir_clear+0xde>
c0003480:	01 eb                	add    ebx,ebp
c0003482:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003486:	39 d8                	cmp    eax,ebx
c0003488:	77 d2                	ja     c000345c <dir_clear+0xb0>
c000348a:	83 ec 0c             	sub    esp,0xc
c000348d:	57                   	push   edi
c000348e:	e8 c7 4d 00 00       	call   c000825a <ff_memfree>
c0003493:	83 c4 10             	add    esp,0x10
c0003496:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000349a:	39 d8                	cmp    eax,ebx
c000349c:	0f 95 c0             	setne  al
c000349f:	0f b6 c0             	movzx  eax,al
c00034a2:	eb 19                	jmp    c00034bd <dir_clear+0x111>
c00034a4:	b8 01 00 00 00       	mov    eax,0x1
c00034a9:	eb 12                	jmp    c00034bd <dir_clear+0x111>
c00034ab:	89 d9                	mov    ecx,ebx
c00034ad:	31 d2                	xor    edx,edx
c00034af:	c1 eb 09             	shr    ebx,0x9
c00034b2:	e8 ee e5 ff ff       	call   c0001aa5 <mem_set>
c00034b7:	89 dd                	mov    ebp,ebx
c00034b9:	31 db                	xor    ebx,ebx
c00034bb:	eb c5                	jmp    c0003482 <dir_clear+0xd6>
c00034bd:	83 c4 1c             	add    esp,0x1c
c00034c0:	5b                   	pop    ebx
c00034c1:	5e                   	pop    esi
c00034c2:	5f                   	pop    edi
c00034c3:	5d                   	pop    ebp
c00034c4:	c3                   	ret    

c00034c5 <dir_next>:
c00034c5:	55                   	push   ebp
c00034c6:	57                   	push   edi
c00034c7:	56                   	push   esi
c00034c8:	53                   	push   ebx
c00034c9:	89 c3                	mov    ebx,eax
c00034cb:	83 ec 1c             	sub    esp,0x1c
c00034ce:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00034d4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00034d7:	8d 78 20             	lea    edi,[eax+0x20]
c00034da:	31 c0                	xor    eax,eax
c00034dc:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00034e0:	0f 94 c0             	sete   al
c00034e3:	48                   	dec    eax
c00034e4:	25 00 00 20 f0       	and    eax,0xf0200000
c00034e9:	05 00 00 00 10       	add    eax,0x10000000
c00034ee:	39 f8                	cmp    eax,edi
c00034f0:	77 0e                	ja     c0003500 <dir_next+0x3b>
c00034f2:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034f9:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003500:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003503:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003506:	b8 04 00 00 00       	mov    eax,0x4
c000350b:	89 ce                	mov    esi,ecx
c000350d:	09 d6                	or     esi,edx
c000350f:	0f 84 da 00 00 00    	je     c00035ef <dir_next+0x12a>
c0003515:	89 f8                	mov    eax,edi
c0003517:	25 ff 01 00 00       	and    eax,0x1ff
c000351c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003520:	0f 85 b9 00 00 00    	jne    c00035df <dir_next+0x11a>
c0003526:	83 c2 01             	add    edx,0x1
c0003529:	83 d1 00             	adc    ecx,0x0
c000352c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000352f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003532:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003535:	85 d2                	test   edx,edx
c0003537:	75 29                	jne    c0003562 <dir_next+0x9d>
c0003539:	89 fa                	mov    edx,edi
c000353b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000353f:	c1 ea 05             	shr    edx,0x5
c0003542:	39 c2                	cmp    edx,eax
c0003544:	0f 82 95 00 00 00    	jb     c00035df <dir_next+0x11a>
c000354a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003551:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003558:	b8 04 00 00 00       	mov    eax,0x4
c000355d:	e9 8d 00 00 00       	jmp    c00035ef <dir_next+0x12a>
c0003562:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003566:	89 f9                	mov    ecx,edi
c0003568:	48                   	dec    eax
c0003569:	c1 e9 09             	shr    ecx,0x9
c000356c:	85 c8                	test   eax,ecx
c000356e:	75 6f                	jne    c00035df <dir_next+0x11a>
c0003570:	89 d8                	mov    eax,ebx
c0003572:	e8 00 f8 ff ff       	call   c0002d77 <get_fat>
c0003577:	89 c6                	mov    esi,eax
c0003579:	83 f8 01             	cmp    eax,0x1
c000357c:	77 07                	ja     c0003585 <dir_next+0xc0>
c000357e:	b8 02 00 00 00       	mov    eax,0x2
c0003583:	eb 6a                	jmp    c00035ef <dir_next+0x12a>
c0003585:	83 f8 ff             	cmp    eax,0xffffffff
c0003588:	75 07                	jne    c0003591 <dir_next+0xcc>
c000358a:	b8 01 00 00 00       	mov    eax,0x1
c000358f:	eb 5e                	jmp    c00035ef <dir_next+0x12a>
c0003591:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003594:	77 37                	ja     c00035cd <dir_next+0x108>
c0003596:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000359b:	74 ad                	je     c000354a <dir_next+0x85>
c000359d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	e8 be fa ff ff       	call   c0003065 <create_chain>
c00035a7:	89 c6                	mov    esi,eax
c00035a9:	b8 07 00 00 00       	mov    eax,0x7
c00035ae:	85 f6                	test   esi,esi
c00035b0:	74 3d                	je     c00035ef <dir_next+0x12a>
c00035b2:	83 fe 01             	cmp    esi,0x1
c00035b5:	74 c7                	je     c000357e <dir_next+0xb9>
c00035b7:	83 fe ff             	cmp    esi,0xffffffff
c00035ba:	74 ce                	je     c000358a <dir_next+0xc5>
c00035bc:	89 f2                	mov    edx,esi
c00035be:	89 e8                	mov    eax,ebp
c00035c0:	e8 e7 fd ff ff       	call   c00033ac <dir_clear>
c00035c5:	85 c0                	test   eax,eax
c00035c7:	75 c1                	jne    c000358a <dir_next+0xc5>
c00035c9:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035cd:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035d0:	89 f2                	mov    edx,esi
c00035d2:	89 e8                	mov    eax,ebp
c00035d4:	e8 d1 e6 ff ff       	call   c0001caa <clst2sect>
c00035d9:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00035dc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00035df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035e3:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00035e6:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c00035ea:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00035ed:	31 c0                	xor    eax,eax
c00035ef:	83 c4 1c             	add    esp,0x1c
c00035f2:	5b                   	pop    ebx
c00035f3:	5e                   	pop    esi
c00035f4:	5f                   	pop    edi
c00035f5:	5d                   	pop    ebp
c00035f6:	c3                   	ret    

c00035f7 <load_xdir>:
c00035f7:	55                   	push   ebp
c00035f8:	57                   	push   edi
c00035f9:	56                   	push   esi
c00035fa:	89 c6                	mov    esi,eax
c00035fc:	53                   	push   ebx
c00035fd:	83 ec 1c             	sub    esp,0x1c
c0003600:	8b 00                	mov    eax,DWORD PTR [eax]
c0003602:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003605:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003608:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000360b:	e8 df eb ff ff       	call   c00021ef <move_window>
c0003610:	89 c3                	mov    ebx,eax
c0003612:	85 c0                	test   eax,eax
c0003614:	0f 85 0c 01 00 00    	jne    c0003726 <load_xdir+0x12f>
c000361a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000361d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003620:	0f 85 fb 00 00 00    	jne    c0003721 <load_xdir+0x12a>
c0003626:	89 f8                	mov    eax,edi
c0003628:	b9 20 00 00 00       	mov    ecx,0x20
c000362d:	e8 5e e4 ff ff       	call   c0001a90 <mem_cpy>
c0003632:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003636:	40                   	inc    eax
c0003637:	c1 e0 05             	shl    eax,0x5
c000363a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000363e:	83 e8 60             	sub    eax,0x60
c0003641:	3d 00 02 00 00       	cmp    eax,0x200
c0003646:	0f 87 d5 00 00 00    	ja     c0003721 <load_xdir+0x12a>
c000364c:	31 d2                	xor    edx,edx
c000364e:	89 f0                	mov    eax,esi
c0003650:	e8 70 fe ff ff       	call   c00034c5 <dir_next>
c0003655:	89 c3                	mov    ebx,eax
c0003657:	83 f8 04             	cmp    eax,0x4
c000365a:	0f 84 c1 00 00 00    	je     c0003721 <load_xdir+0x12a>
c0003660:	85 c0                	test   eax,eax
c0003662:	0f 85 be 00 00 00    	jne    c0003726 <load_xdir+0x12f>
c0003668:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000366b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000366e:	8b 06                	mov    eax,DWORD PTR [esi]
c0003670:	e8 7a eb ff ff       	call   c00021ef <move_window>
c0003675:	89 c3                	mov    ebx,eax
c0003677:	85 c0                	test   eax,eax
c0003679:	0f 85 a7 00 00 00    	jne    c0003726 <load_xdir+0x12f>
c000367f:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003682:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003685:	0f 85 96 00 00 00    	jne    c0003721 <load_xdir+0x12a>
c000368b:	8d 47 20             	lea    eax,[edi+0x20]
c000368e:	b9 20 00 00 00       	mov    ecx,0x20
c0003693:	e8 f8 e3 ff ff       	call   c0001a90 <mem_cpy>
c0003698:	31 d2                	xor    edx,edx
c000369a:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000369e:	b9 0f 00 00 00       	mov    ecx,0xf
c00036a3:	83 c0 2c             	add    eax,0x2c
c00036a6:	f7 f1                	div    ecx
c00036a8:	c1 e0 05             	shl    eax,0x5
c00036ab:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036af:	77 70                	ja     c0003721 <load_xdir+0x12a>
c00036b1:	bd 40 00 00 00       	mov    ebp,0x40
c00036b6:	31 d2                	xor    edx,edx
c00036b8:	89 f0                	mov    eax,esi
c00036ba:	e8 06 fe ff ff       	call   c00034c5 <dir_next>
c00036bf:	89 c3                	mov    ebx,eax
c00036c1:	83 f8 04             	cmp    eax,0x4
c00036c4:	74 5b                	je     c0003721 <load_xdir+0x12a>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 5c                	jne    c0003726 <load_xdir+0x12f>
c00036ca:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036cd:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036d0:	8b 06                	mov    eax,DWORD PTR [esi]
c00036d2:	e8 18 eb ff ff       	call   c00021ef <move_window>
c00036d7:	89 c3                	mov    ebx,eax
c00036d9:	85 c0                	test   eax,eax
c00036db:	75 49                	jne    c0003726 <load_xdir+0x12f>
c00036dd:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036e0:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00036e3:	75 3c                	jne    c0003721 <load_xdir+0x12a>
c00036e5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00036eb:	77 0d                	ja     c00036fa <load_xdir+0x103>
c00036ed:	8d 04 2f             	lea    eax,[edi+ebp*1]
c00036f0:	b9 20 00 00 00       	mov    ecx,0x20
c00036f5:	e8 96 e3 ff ff       	call   c0001a90 <mem_cpy>
c00036fa:	83 c5 20             	add    ebp,0x20
c00036fd:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003701:	77 b3                	ja     c00036b6 <load_xdir+0xbf>
c0003703:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003709:	77 1b                	ja     c0003726 <load_xdir+0x12f>
c000370b:	89 f8                	mov    eax,edi
c000370d:	e8 cd e7 ff ff       	call   c0001edf <xdir_sum>
c0003712:	89 c1                	mov    ecx,eax
c0003714:	8d 47 02             	lea    eax,[edi+0x2]
c0003717:	e8 f5 e2 ff ff       	call   c0001a11 <ld_word>
c000371c:	66 39 c1             	cmp    cx,ax
c000371f:	74 05                	je     c0003726 <load_xdir+0x12f>
c0003721:	bb 02 00 00 00       	mov    ebx,0x2
c0003726:	83 c4 1c             	add    esp,0x1c
c0003729:	89 d8                	mov    eax,ebx
c000372b:	5b                   	pop    ebx
c000372c:	5e                   	pop    esi
c000372d:	5f                   	pop    edi
c000372e:	5d                   	pop    ebp
c000372f:	c3                   	ret    

c0003730 <load_obj_xdir>:
c0003730:	53                   	push   ebx
c0003731:	89 c3                	mov    ebx,eax
c0003733:	83 ec 08             	sub    esp,0x8
c0003736:	8b 02                	mov    eax,DWORD PTR [edx]
c0003738:	89 03                	mov    DWORD PTR [ebx],eax
c000373a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000373d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003740:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003743:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003746:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003749:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003750:	30 c0                	xor    al,al
c0003752:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003759:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000375c:	89 d8                	mov    eax,ebx
c000375e:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003761:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003764:	e8 04 f8 ff ff       	call   c0002f6d <dir_sdi>
c0003769:	85 c0                	test   eax,eax
c000376b:	75 0b                	jne    c0003778 <load_obj_xdir+0x48>
c000376d:	89 d8                	mov    eax,ebx
c000376f:	83 c4 08             	add    esp,0x8
c0003772:	5b                   	pop    ebx
c0003773:	e9 7f fe ff ff       	jmp    c00035f7 <load_xdir>
c0003778:	83 c4 08             	add    esp,0x8
c000377b:	5b                   	pop    ebx
c000377c:	c3                   	ret    

c000377d <dir_read>:
c000377d:	55                   	push   ebp
c000377e:	bd 04 00 00 00       	mov    ebp,0x4
c0003783:	57                   	push   edi
c0003784:	56                   	push   esi
c0003785:	be ff ff ff ff       	mov    esi,0xffffffff
c000378a:	53                   	push   ebx
c000378b:	89 c3                	mov    ebx,eax
c000378d:	83 ec 1c             	sub    esp,0x1c
c0003790:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003794:	8b 38                	mov    edi,DWORD PTR [eax]
c0003796:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000379b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000379e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037a1:	89 c8                	mov    eax,ecx
c00037a3:	09 d0                	or     eax,edx
c00037a5:	0f 84 25 01 00 00    	je     c00038d0 <dir_read+0x153>
c00037ab:	89 f8                	mov    eax,edi
c00037ad:	e8 3d ea ff ff       	call   c00021ef <move_window>
c00037b2:	89 c5                	mov    ebp,eax
c00037b4:	85 c0                	test   eax,eax
c00037b6:	0f 85 23 01 00 00    	jne    c00038df <dir_read+0x162>
c00037bc:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037bf:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037c1:	84 c9                	test   cl,cl
c00037c3:	0f 84 11 01 00 00    	je     c00038da <dir_read+0x15d>
c00037c9:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037cc:	75 48                	jne    c0003816 <dir_read+0x99>
c00037ce:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037d3:	74 10                	je     c00037e5 <dir_read+0x68>
c00037d5:	80 f9 83             	cmp    cl,0x83
c00037d8:	0f 85 dd 00 00 00    	jne    c00038bb <dir_read+0x13e>
c00037de:	31 ed                	xor    ebp,ebp
c00037e0:	e9 08 01 00 00       	jmp    c00038ed <dir_read+0x170>
c00037e5:	80 f9 85             	cmp    cl,0x85
c00037e8:	0f 85 cd 00 00 00    	jne    c00038bb <dir_read+0x13e>
c00037ee:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037f1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037f4:	89 d8                	mov    eax,ebx
c00037f6:	e8 fc fd ff ff       	call   c00035f7 <load_xdir>
c00037fb:	89 c5                	mov    ebp,eax
c00037fd:	85 c0                	test   eax,eax
c00037ff:	0f 85 da 00 00 00    	jne    c00038df <dir_read+0x162>
c0003805:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003808:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000380b:	83 e0 3f             	and    eax,0x3f
c000380e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003811:	e9 d7 00 00 00       	jmp    c00038ed <dir_read+0x170>
c0003816:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003819:	83 e0 3f             	and    eax,0x3f
c000381c:	80 f9 2e             	cmp    cl,0x2e
c000381f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003823:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003826:	0f 84 8a 00 00 00    	je     c00038b6 <dir_read+0x139>
c000382c:	80 f9 e5             	cmp    cl,0xe5
c000382f:	0f 84 81 00 00 00    	je     c00038b6 <dir_read+0x139>
c0003835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003839:	83 e0 1f             	and    eax,0x1f
c000383c:	83 f8 08             	cmp    eax,0x8
c000383f:	0f 94 c0             	sete   al
c0003842:	0f b6 c0             	movzx  eax,al
c0003845:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003849:	75 6b                	jne    c00038b6 <dir_read+0x139>
c000384b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003850:	75 44                	jne    c0003896 <dir_read+0x119>
c0003852:	f6 c1 40             	test   cl,0x40
c0003855:	74 12                	je     c0003869 <dir_read+0xec>
c0003857:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000385a:	83 e1 bf             	and    ecx,0xffffffbf
c000385d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003861:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003864:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003867:	eb 06                	jmp    c000386f <dir_read+0xf2>
c0003869:	89 f0                	mov    eax,esi
c000386b:	38 c8                	cmp    al,cl
c000386d:	75 47                	jne    c00038b6 <dir_read+0x139>
c000386f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003873:	be ff ff ff ff       	mov    esi,0xffffffff
c0003878:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c000387b:	75 3e                	jne    c00038bb <dir_read+0x13e>
c000387d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003881:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003884:	e8 8a e4 ff ff       	call   c0001d13 <pick_lfn>
c0003889:	85 c0                	test   eax,eax
c000388b:	74 2e                	je     c00038bb <dir_read+0x13e>
c000388d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003891:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003894:	eb 25                	jmp    c00038bb <dir_read+0x13e>
c0003896:	89 f0                	mov    eax,esi
c0003898:	84 c0                	test   al,al
c000389a:	75 11                	jne    c00038ad <dir_read+0x130>
c000389c:	89 d0                	mov    eax,edx
c000389e:	e8 2a e6 ff ff       	call   c0001ecd <sum_sfn>
c00038a3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038a7:	0f 84 31 ff ff ff    	je     c00037de <dir_read+0x61>
c00038ad:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038b4:	eb 37                	jmp    c00038ed <dir_read+0x170>
c00038b6:	be ff ff ff ff       	mov    esi,0xffffffff
c00038bb:	31 d2                	xor    edx,edx
c00038bd:	89 d8                	mov    eax,ebx
c00038bf:	e8 01 fc ff ff       	call   c00034c5 <dir_next>
c00038c4:	89 c5                	mov    ebp,eax
c00038c6:	85 c0                	test   eax,eax
c00038c8:	0f 84 cd fe ff ff    	je     c000379b <dir_read+0x1e>
c00038ce:	eb 0f                	jmp    c00038df <dir_read+0x162>
c00038d0:	85 ed                	test   ebp,ebp
c00038d2:	0f 84 06 ff ff ff    	je     c00037de <dir_read+0x61>
c00038d8:	eb 05                	jmp    c00038df <dir_read+0x162>
c00038da:	bd 04 00 00 00       	mov    ebp,0x4
c00038df:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00038e6:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00038ed:	83 c4 1c             	add    esp,0x1c
c00038f0:	89 e8                	mov    eax,ebp
c00038f2:	5b                   	pop    ebx
c00038f3:	5e                   	pop    esi
c00038f4:	5f                   	pop    edi
c00038f5:	5d                   	pop    ebp
c00038f6:	c3                   	ret    

c00038f7 <dir_alloc>:
c00038f7:	55                   	push   ebp
c00038f8:	89 d5                	mov    ebp,edx
c00038fa:	57                   	push   edi
c00038fb:	31 d2                	xor    edx,edx
c00038fd:	56                   	push   esi
c00038fe:	53                   	push   ebx
c00038ff:	89 c3                	mov    ebx,eax
c0003901:	83 ec 0c             	sub    esp,0xc
c0003904:	8b 38                	mov    edi,DWORD PTR [eax]
c0003906:	e8 62 f6 ff ff       	call   c0002f6d <dir_sdi>
c000390b:	85 c0                	test   eax,eax
c000390d:	75 4e                	jne    c000395d <dir_alloc+0x66>
c000390f:	31 f6                	xor    esi,esi
c0003911:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003914:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003917:	89 f8                	mov    eax,edi
c0003919:	e8 d1 e8 ff ff       	call   c00021ef <move_window>
c000391e:	85 c0                	test   eax,eax
c0003920:	75 3b                	jne    c000395d <dir_alloc+0x66>
c0003922:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003925:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003928:	8a 12                	mov    dl,BYTE PTR [edx]
c000392a:	75 07                	jne    c0003933 <dir_alloc+0x3c>
c000392c:	f7 d2                	not    edx
c000392e:	c0 ea 07             	shr    dl,0x7
c0003931:	eb 0d                	jmp    c0003940 <dir_alloc+0x49>
c0003933:	84 d2                	test   dl,dl
c0003935:	0f 94 c1             	sete   cl
c0003938:	80 fa e5             	cmp    dl,0xe5
c000393b:	0f 94 c2             	sete   dl
c000393e:	09 ca                	or     edx,ecx
c0003940:	84 d2                	test   dl,dl
c0003942:	74 07                	je     c000394b <dir_alloc+0x54>
c0003944:	46                   	inc    esi
c0003945:	39 ee                	cmp    esi,ebp
c0003947:	75 04                	jne    c000394d <dir_alloc+0x56>
c0003949:	eb 1c                	jmp    c0003967 <dir_alloc+0x70>
c000394b:	31 f6                	xor    esi,esi
c000394d:	ba 01 00 00 00       	mov    edx,0x1
c0003952:	89 d8                	mov    eax,ebx
c0003954:	e8 6c fb ff ff       	call   c00034c5 <dir_next>
c0003959:	85 c0                	test   eax,eax
c000395b:	74 b4                	je     c0003911 <dir_alloc+0x1a>
c000395d:	83 f8 04             	cmp    eax,0x4
c0003960:	75 05                	jne    c0003967 <dir_alloc+0x70>
c0003962:	b8 07 00 00 00       	mov    eax,0x7
c0003967:	83 c4 0c             	add    esp,0xc
c000396a:	5b                   	pop    ebx
c000396b:	5e                   	pop    esi
c000396c:	5f                   	pop    edi
c000396d:	5d                   	pop    ebp
c000396e:	c3                   	ret    

c000396f <store_xdir>:
c000396f:	55                   	push   ebp
c0003970:	57                   	push   edi
c0003971:	89 c7                	mov    edi,eax
c0003973:	56                   	push   esi
c0003974:	53                   	push   ebx
c0003975:	83 ec 0c             	sub    esp,0xc
c0003978:	8b 00                	mov    eax,DWORD PTR [eax]
c000397a:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c000397d:	89 e8                	mov    eax,ebp
c000397f:	e8 5b e5 ff ff       	call   c0001edf <xdir_sum>
c0003984:	0f b7 d0             	movzx  edx,ax
c0003987:	8d 45 02             	lea    eax,[ebp+0x2]
c000398a:	e8 f4 e0 ff ff       	call   c0001a83 <st_word>
c000398f:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003993:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003996:	89 f8                	mov    eax,edi
c0003998:	e8 d0 f5 ff ff       	call   c0002f6d <dir_sdi>
c000399d:	89 c6                	mov    esi,eax
c000399f:	85 f6                	test   esi,esi
c00039a1:	75 3d                	jne    c00039e0 <store_xdir+0x71>
c00039a3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039a6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039a9:	8b 07                	mov    eax,DWORD PTR [edi]
c00039ab:	e8 3f e8 ff ff       	call   c00021ef <move_window>
c00039b0:	89 c6                	mov    esi,eax
c00039b2:	85 c0                	test   eax,eax
c00039b4:	75 2a                	jne    c00039e0 <store_xdir+0x71>
c00039b6:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039b9:	b9 20 00 00 00       	mov    ecx,0x20
c00039be:	89 ea                	mov    edx,ebp
c00039c0:	e8 cb e0 ff ff       	call   c0001a90 <mem_cpy>
c00039c5:	8b 07                	mov    eax,DWORD PTR [edi]
c00039c7:	85 db                	test   ebx,ebx
c00039c9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039cd:	74 11                	je     c00039e0 <store_xdir+0x71>
c00039cf:	31 d2                	xor    edx,edx
c00039d1:	89 f8                	mov    eax,edi
c00039d3:	83 c5 20             	add    ebp,0x20
c00039d6:	e8 ea fa ff ff       	call   c00034c5 <dir_next>
c00039db:	4b                   	dec    ebx
c00039dc:	89 c6                	mov    esi,eax
c00039de:	eb bf                	jmp    c000399f <store_xdir+0x30>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	83 fe 02             	cmp    esi,0x2
c00039e5:	76 05                	jbe    c00039ec <store_xdir+0x7d>
c00039e7:	b8 02 00 00 00       	mov    eax,0x2
c00039ec:	83 c4 0c             	add    esp,0xc
c00039ef:	5b                   	pop    ebx
c00039f0:	5e                   	pop    esi
c00039f1:	5f                   	pop    edi
c00039f2:	5d                   	pop    ebp
c00039f3:	c3                   	ret    

c00039f4 <dir_remove>:
c00039f4:	57                   	push   edi
c00039f5:	56                   	push   esi
c00039f6:	53                   	push   ebx
c00039f7:	89 c3                	mov    ebx,eax
c00039f9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00039fc:	8b 30                	mov    esi,DWORD PTR [eax]
c00039fe:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a01:	83 fa ff             	cmp    edx,0xffffffff
c0003a04:	74 09                	je     c0003a0f <dir_remove+0x1b>
c0003a06:	e8 62 f5 ff ff       	call   c0002f6d <dir_sdi>
c0003a0b:	85 c0                	test   eax,eax
c0003a0d:	75 41                	jne    c0003a50 <dir_remove+0x5c>
c0003a0f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a12:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a15:	89 f0                	mov    eax,esi
c0003a17:	e8 d3 e7 ff ff       	call   c00021ef <move_window>
c0003a1c:	85 c0                	test   eax,eax
c0003a1e:	75 26                	jne    c0003a46 <dir_remove+0x52>
c0003a20:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a23:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a26:	75 05                	jne    c0003a2d <dir_remove+0x39>
c0003a28:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a2b:	eb 03                	jmp    c0003a30 <dir_remove+0x3c>
c0003a2d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a30:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a34:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a37:	73 17                	jae    c0003a50 <dir_remove+0x5c>
c0003a39:	31 d2                	xor    edx,edx
c0003a3b:	89 d8                	mov    eax,ebx
c0003a3d:	e8 83 fa ff ff       	call   c00034c5 <dir_next>
c0003a42:	85 c0                	test   eax,eax
c0003a44:	74 c9                	je     c0003a0f <dir_remove+0x1b>
c0003a46:	83 f8 04             	cmp    eax,0x4
c0003a49:	75 05                	jne    c0003a50 <dir_remove+0x5c>
c0003a4b:	b8 02 00 00 00       	mov    eax,0x2
c0003a50:	5b                   	pop    ebx
c0003a51:	5e                   	pop    esi
c0003a52:	5f                   	pop    edi
c0003a53:	c3                   	ret    

c0003a54 <create_name>:
c0003a54:	55                   	push   ebp
c0003a55:	89 d5                	mov    ebp,edx
c0003a57:	57                   	push   edi
c0003a58:	89 c7                	mov    edi,eax
c0003a5a:	56                   	push   esi
c0003a5b:	31 f6                	xor    esi,esi
c0003a5d:	53                   	push   ebx
c0003a5e:	83 ec 3c             	sub    esp,0x3c
c0003a61:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a63:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a67:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a69:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003a70:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003a74:	e8 72 e0 ff ff       	call   c0001aeb <tchar2uni>
c0003a79:	89 c3                	mov    ebx,eax
c0003a7b:	83 f8 ff             	cmp    eax,0xffffffff
c0003a7e:	75 0a                	jne    c0003a8a <create_name+0x36>
c0003a80:	b8 06 00 00 00       	mov    eax,0x6
c0003a85:	e9 9e 02 00 00       	jmp    c0003d28 <create_name+0x2d4>
c0003a8a:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a8f:	76 0c                	jbe    c0003a9d <create_name+0x49>
c0003a91:	c1 e8 10             	shr    eax,0x10
c0003a94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a98:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a9c:	46                   	inc    esi
c0003a9d:	66 83 fb 1f          	cmp    bx,0x1f
c0003aa1:	76 4f                	jbe    c0003af2 <create_name+0x9e>
c0003aa3:	66 83 fb 5c          	cmp    bx,0x5c
c0003aa7:	74 35                	je     c0003ade <create_name+0x8a>
c0003aa9:	66 83 fb 2f          	cmp    bx,0x2f
c0003aad:	74 2f                	je     c0003ade <create_name+0x8a>
c0003aaf:	66 83 fb 7f          	cmp    bx,0x7f
c0003ab3:	77 11                	ja     c0003ac6 <create_name+0x72>
c0003ab5:	0f b7 d3             	movzx  edx,bx
c0003ab8:	b8 f2 76 02 c0       	mov    eax,0xc00276f2
c0003abd:	e8 11 e0 ff ff       	call   c0001ad3 <chk_chr>
c0003ac2:	85 c0                	test   eax,eax
c0003ac4:	75 ba                	jne    c0003a80 <create_name+0x2c>
c0003ac6:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003acc:	77 b2                	ja     c0003a80 <create_name+0x2c>
c0003ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad2:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003ad6:	46                   	inc    esi
c0003ad7:	eb 97                	jmp    c0003a70 <create_name+0x1c>
c0003ad9:	40                   	inc    eax
c0003ada:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ade:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003ae2:	8a 10                	mov    dl,BYTE PTR [eax]
c0003ae4:	80 fa 2f             	cmp    dl,0x2f
c0003ae7:	74 f0                	je     c0003ad9 <create_name+0x85>
c0003ae9:	80 fa 5c             	cmp    dl,0x5c
c0003aec:	74 eb                	je     c0003ad9 <create_name+0x85>
c0003aee:	31 db                	xor    ebx,ebx
c0003af0:	eb 02                	jmp    c0003af4 <create_name+0xa0>
c0003af2:	b3 04                	mov    bl,0x4
c0003af4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003af8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003afb:	85 f6                	test   esi,esi
c0003afd:	74 18                	je     c0003b17 <create_name+0xc3>
c0003aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b03:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b08:	66 83 f8 20          	cmp    ax,0x20
c0003b0c:	74 06                	je     c0003b14 <create_name+0xc0>
c0003b0e:	66 83 f8 2e          	cmp    ax,0x2e
c0003b12:	75 03                	jne    c0003b17 <create_name+0xc3>
c0003b14:	4e                   	dec    esi
c0003b15:	eb e4                	jmp    c0003afb <create_name+0xa7>
c0003b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b1b:	31 ed                	xor    ebp,ebp
c0003b1d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b23:	85 f6                	test   esi,esi
c0003b25:	0f 84 55 ff ff ff    	je     c0003a80 <create_name+0x2c>
c0003b2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b2f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b32:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b36:	66 83 f8 20          	cmp    ax,0x20
c0003b3a:	75 04                	jne    c0003b40 <create_name+0xec>
c0003b3c:	89 d5                	mov    ebp,edx
c0003b3e:	eb eb                	jmp    c0003b2b <create_name+0xd7>
c0003b40:	85 ed                	test   ebp,ebp
c0003b42:	75 06                	jne    c0003b4a <create_name+0xf6>
c0003b44:	66 83 f8 2e          	cmp    ax,0x2e
c0003b48:	75 08                	jne    c0003b52 <create_name+0xfe>
c0003b4a:	83 cb 03             	or     ebx,0x3
c0003b4d:	eb 03                	jmp    c0003b52 <create_name+0xfe>
c0003b4f:	4e                   	dec    esi
c0003b50:	74 0c                	je     c0003b5e <create_name+0x10a>
c0003b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b56:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b5c:	75 f1                	jne    c0003b4f <create_name+0xfb>
c0003b5e:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b63:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b66:	ba 20 00 00 00       	mov    edx,0x20
c0003b6b:	e8 35 df ff ff       	call   c0001aa5 <mem_set>
c0003b70:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003b78:	31 c9                	xor    ecx,ecx
c0003b7a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003b7f:	8d 45 01             	lea    eax,[ebp+0x1]
c0003b82:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b8a:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b8e:	66 85 ed             	test   bp,bp
c0003b91:	0f 84 30 01 00 00    	je     c0003cc7 <create_name+0x273>
c0003b97:	66 83 fd 20          	cmp    bp,0x20
c0003b9b:	74 10                	je     c0003bad <create_name+0x159>
c0003b9d:	66 83 fd 2e          	cmp    bp,0x2e
c0003ba1:	75 13                	jne    c0003bb6 <create_name+0x162>
c0003ba3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003ba7:	0f 84 6b 01 00 00    	je     c0003d18 <create_name+0x2c4>
c0003bad:	83 cb 03             	or     ebx,0x3
c0003bb0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003bb4:	eb c9                	jmp    c0003b7f <create_name+0x12b>
c0003bb6:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bba:	73 0b                	jae    c0003bc7 <create_name+0x173>
c0003bbc:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bc0:	75 47                	jne    c0003c09 <create_name+0x1b5>
c0003bc2:	e9 51 01 00 00       	jmp    c0003d18 <create_name+0x2c4>
c0003bc7:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003bcc:	75 10                	jne    c0003bde <create_name+0x18a>
c0003bce:	83 cb 03             	or     ebx,0x3
c0003bd1:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bd9:	e9 e9 00 00 00       	jmp    c0003cc7 <create_name+0x273>
c0003bde:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003be2:	74 0d                	je     c0003bf1 <create_name+0x19d>
c0003be4:	83 cb 03             	or     ebx,0x3
c0003be7:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003beb:	0f 87 d6 00 00 00    	ja     c0003cc7 <create_name+0x273>
c0003bf1:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003bf6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003bfa:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c02:	b9 08 00 00 00       	mov    ecx,0x8
c0003c07:	eb a7                	jmp    c0003bb0 <create_name+0x15c>
c0003c09:	66 83 fd 7f          	cmp    bp,0x7f
c0003c0d:	76 68                	jbe    c0003c77 <create_name+0x223>
c0003c0f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c13:	88 da                	mov    dl,bl
c0003c15:	83 ca 02             	or     edx,0x2
c0003c18:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c1c:	50                   	push   eax
c0003c1d:	50                   	push   eax
c0003c1e:	68 b5 01 00 00       	push   0x1b5
c0003c23:	55                   	push   ebp
c0003c24:	e8 48 46 00 00       	call   c0008271 <ff_uni2oem>
c0003c29:	83 c4 10             	add    esp,0x10
c0003c2c:	89 c5                	mov    ebp,eax
c0003c2e:	a8 80                	test   al,0x80
c0003c30:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c34:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c38:	74 0c                	je     c0003c46 <create_name+0x1f2>
c0003c3a:	83 e5 7f             	and    ebp,0x7f
c0003c3d:	0f b6 ad 40 76 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd89c0]
c0003c44:	eb 2a                	jmp    c0003c70 <create_name+0x21c>
c0003c46:	66 3d ff 00          	cmp    ax,0xff
c0003c4a:	76 24                	jbe    c0003c70 <create_name+0x21c>
c0003c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c50:	48                   	dec    eax
c0003c51:	39 c8                	cmp    eax,ecx
c0003c53:	77 0c                	ja     c0003c61 <create_name+0x20d>
c0003c55:	83 cb 03             	or     ebx,0x3
c0003c58:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c5c:	e9 4f ff ff ff       	jmp    c0003bb0 <create_name+0x15c>
c0003c61:	89 e8                	mov    eax,ebp
c0003c63:	88 d3                	mov    bl,dl
c0003c65:	66 c1 e8 08          	shr    ax,0x8
c0003c69:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c6d:	41                   	inc    ecx
c0003c6e:	eb 4b                	jmp    c0003cbb <create_name+0x267>
c0003c70:	88 d3                	mov    bl,dl
c0003c72:	66 85 ed             	test   bp,bp
c0003c75:	74 19                	je     c0003c90 <create_name+0x23c>
c0003c77:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003c7b:	0f b7 d5             	movzx  edx,bp
c0003c7e:	b8 fb 76 02 c0       	mov    eax,0xc00276fb
c0003c83:	e8 4b de ff ff       	call   c0001ad3 <chk_chr>
c0003c88:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c8c:	85 c0                	test   eax,eax
c0003c8e:	74 0a                	je     c0003c9a <create_name+0x246>
c0003c90:	83 cb 03             	or     ebx,0x3
c0003c93:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c98:	eb 21                	jmp    c0003cbb <create_name+0x267>
c0003c9a:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c9d:	66 83 f8 19          	cmp    ax,0x19
c0003ca1:	77 07                	ja     c0003caa <create_name+0x256>
c0003ca3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ca8:	eb 11                	jmp    c0003cbb <create_name+0x267>
c0003caa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003cad:	66 83 f8 19          	cmp    ax,0x19
c0003cb1:	77 08                	ja     c0003cbb <create_name+0x267>
c0003cb3:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003cb8:	83 ed 20             	sub    ebp,0x20
c0003cbb:	89 e8                	mov    eax,ebp
c0003cbd:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cc1:	41                   	inc    ecx
c0003cc2:	e9 e9 fe ff ff       	jmp    c0003bb0 <create_name+0x15c>
c0003cc7:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ccb:	75 04                	jne    c0003cd1 <create_name+0x27d>
c0003ccd:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cd1:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003cd6:	75 05                	jne    c0003cdd <create_name+0x289>
c0003cd8:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003cdd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ce1:	83 e0 0c             	and    eax,0xc
c0003ce4:	3c 0c                	cmp    al,0xc
c0003ce6:	74 0b                	je     c0003cf3 <create_name+0x29f>
c0003ce8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cec:	83 e0 03             	and    eax,0x3
c0003cef:	3c 03                	cmp    al,0x3
c0003cf1:	75 05                	jne    c0003cf8 <create_name+0x2a4>
c0003cf3:	83 cb 02             	or     ebx,0x2
c0003cf6:	eb 19                	jmp    c0003d11 <create_name+0x2bd>
c0003cf8:	f6 c3 02             	test   bl,0x2
c0003cfb:	75 14                	jne    c0003d11 <create_name+0x2bd>
c0003cfd:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d02:	74 03                	je     c0003d07 <create_name+0x2b3>
c0003d04:	83 cb 10             	or     ebx,0x10
c0003d07:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d0c:	74 03                	je     c0003d11 <create_name+0x2bd>
c0003d0e:	83 cb 08             	or     ebx,0x8
c0003d11:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d14:	31 c0                	xor    eax,eax
c0003d16:	eb 10                	jmp    c0003d28 <create_name+0x2d4>
c0003d18:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d1d:	0f 85 ce fe ff ff    	jne    c0003bf1 <create_name+0x19d>
c0003d23:	e9 a6 fe ff ff       	jmp    c0003bce <create_name+0x17a>
c0003d28:	83 c4 3c             	add    esp,0x3c
c0003d2b:	5b                   	pop    ebx
c0003d2c:	5e                   	pop    esi
c0003d2d:	5f                   	pop    edi
c0003d2e:	5d                   	pop    ebp
c0003d2f:	c3                   	ret    

c0003d30 <xname_sum>:
c0003d30:	56                   	push   esi
c0003d31:	53                   	push   ebx
c0003d32:	89 c6                	mov    esi,eax
c0003d34:	51                   	push   ecx
c0003d35:	31 db                	xor    ebx,ebx
c0003d37:	83 c6 02             	add    esi,0x2
c0003d3a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d3e:	66 85 c0             	test   ax,ax
c0003d41:	74 1f                	je     c0003d62 <xname_sum+0x32>
c0003d43:	83 ec 0c             	sub    esp,0xc
c0003d46:	66 d1 cb             	ror    bx,1
c0003d49:	50                   	push   eax
c0003d4a:	e8 1e 46 00 00       	call   c000836d <ff_wtoupper>
c0003d4f:	83 c4 10             	add    esp,0x10
c0003d52:	0f b6 d0             	movzx  edx,al
c0003d55:	66 c1 e8 08          	shr    ax,0x8
c0003d59:	01 d3                	add    ebx,edx
c0003d5b:	66 d1 cb             	ror    bx,1
c0003d5e:	01 c3                	add    ebx,eax
c0003d60:	eb d5                	jmp    c0003d37 <xname_sum+0x7>
c0003d62:	89 d8                	mov    eax,ebx
c0003d64:	5a                   	pop    edx
c0003d65:	5b                   	pop    ebx
c0003d66:	5e                   	pop    esi
c0003d67:	c3                   	ret    

c0003d68 <create_xdir>:
c0003d68:	55                   	push   ebp
c0003d69:	b9 40 00 00 00       	mov    ecx,0x40
c0003d6e:	57                   	push   edi
c0003d6f:	bd 01 00 00 00       	mov    ebp,0x1
c0003d74:	56                   	push   esi
c0003d75:	31 ff                	xor    edi,edi
c0003d77:	53                   	push   ebx
c0003d78:	be 40 00 00 00       	mov    esi,0x40
c0003d7d:	89 c3                	mov    ebx,eax
c0003d7f:	83 ec 1c             	sub    esp,0x1c
c0003d82:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d86:	31 d2                	xor    edx,edx
c0003d88:	e8 18 dd ff ff       	call   c0001aa5 <mem_set>
c0003d8d:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d90:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d94:	31 c9                	xor    ecx,ecx
c0003d96:	8d 46 01             	lea    eax,[esi+0x1]
c0003d99:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d9d:	83 c6 02             	add    esi,0x2
c0003da0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	74 12                	je     c0003dbb <create_xdir+0x53>
c0003da9:	0f b6 c1             	movzx  eax,cl
c0003dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003db0:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003db4:	66 83 fd 01          	cmp    bp,0x1
c0003db8:	80 d9 ff             	sbb    cl,0xff
c0003dbb:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003dbe:	0f b7 d5             	movzx  edx,bp
c0003dc1:	83 c6 02             	add    esi,0x2
c0003dc4:	e8 ba dc ff ff       	call   c0001a83 <st_word>
c0003dc9:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003dcf:	75 d3                	jne    c0003da4 <create_xdir+0x3c>
c0003dd1:	8d 47 01             	lea    eax,[edi+0x1]
c0003dd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dd8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ddc:	0f b6 c1             	movzx  eax,cl
c0003ddf:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003de4:	74 07                	je     c0003ded <create_xdir+0x85>
c0003de6:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003deb:	eb a9                	jmp    c0003d96 <create_xdir+0x2e>
c0003ded:	8d 47 02             	lea    eax,[edi+0x2]
c0003df0:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003df3:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003df6:	89 d0                	mov    eax,edx
c0003df8:	e8 33 ff ff ff       	call   c0003d30 <xname_sum>
c0003dfd:	83 c4 1c             	add    esp,0x1c
c0003e00:	0f b7 d0             	movzx  edx,ax
c0003e03:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e06:	5b                   	pop    ebx
c0003e07:	5e                   	pop    esi
c0003e08:	5f                   	pop    edi
c0003e09:	5d                   	pop    ebp
c0003e0a:	e9 74 dc ff ff       	jmp    c0001a83 <st_word>

c0003e0f <cmp_lfn>:
c0003e0f:	55                   	push   ebp
c0003e10:	57                   	push   edi
c0003e11:	89 d7                	mov    edi,edx
c0003e13:	56                   	push   esi
c0003e14:	53                   	push   ebx
c0003e15:	83 ec 1c             	sub    esp,0x1c
c0003e18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e1c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e1f:	e8 ed db ff ff       	call   c0001a11 <ld_word>
c0003e24:	66 85 c0             	test   ax,ax
c0003e27:	74 07                	je     c0003e30 <cmp_lfn+0x21>
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	e9 9a 00 00 00       	jmp    c0003eca <cmp_lfn+0xbb>
c0003e30:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e32:	bd 01 00 00 00       	mov    ebp,0x1
c0003e37:	83 e3 3f             	and    ebx,0x3f
c0003e3a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e42:	4b                   	dec    ebx
c0003e43:	6b db 0d             	imul   ebx,ebx,0xd
c0003e46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e4a:	0f b6 80 c0 76 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd8940]
c0003e51:	01 f8                	add    eax,edi
c0003e53:	e8 b9 db ff ff       	call   c0001a11 <ld_word>
c0003e58:	66 85 ed             	test   bp,bp
c0003e5b:	89 c6                	mov    esi,eax
c0003e5d:	74 3c                	je     c0003e9b <cmp_lfn+0x8c>
c0003e5f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e65:	77 c2                	ja     c0003e29 <cmp_lfn+0x1a>
c0003e67:	83 ec 0c             	sub    esp,0xc
c0003e6a:	0f b7 c0             	movzx  eax,ax
c0003e6d:	50                   	push   eax
c0003e6e:	e8 fa 44 00 00       	call   c000836d <ff_wtoupper>
c0003e73:	89 c5                	mov    ebp,eax
c0003e75:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e80:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e84:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e87:	e8 e1 44 00 00       	call   c000836d <ff_wtoupper>
c0003e8c:	83 c4 10             	add    esp,0x10
c0003e8f:	39 c5                	cmp    ebp,eax
c0003e91:	75 96                	jne    c0003e29 <cmp_lfn+0x1a>
c0003e93:	89 f5                	mov    ebp,esi
c0003e95:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e99:	eb 04                	jmp    c0003e9f <cmp_lfn+0x90>
c0003e9b:	66 46                	inc    si
c0003e9d:	75 8a                	jne    c0003e29 <cmp_lfn+0x1a>
c0003e9f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003ea3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ea8:	75 9c                	jne    c0003e46 <cmp_lfn+0x37>
c0003eaa:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ead:	74 16                	je     c0003ec5 <cmp_lfn+0xb6>
c0003eaf:	66 85 ed             	test   bp,bp
c0003eb2:	74 11                	je     c0003ec5 <cmp_lfn+0xb6>
c0003eb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eb8:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ebd:	0f 94 c0             	sete   al
c0003ec0:	0f b6 c0             	movzx  eax,al
c0003ec3:	eb 05                	jmp    c0003eca <cmp_lfn+0xbb>
c0003ec5:	b8 01 00 00 00       	mov    eax,0x1
c0003eca:	83 c4 1c             	add    esp,0x1c
c0003ecd:	5b                   	pop    ebx
c0003ece:	5e                   	pop    esi
c0003ecf:	5f                   	pop    edi
c0003ed0:	5d                   	pop    ebp
c0003ed1:	c3                   	ret    

c0003ed2 <dir_find>:
c0003ed2:	55                   	push   ebp
c0003ed3:	31 d2                	xor    edx,edx
c0003ed5:	57                   	push   edi
c0003ed6:	56                   	push   esi
c0003ed7:	53                   	push   ebx
c0003ed8:	89 c3                	mov    ebx,eax
c0003eda:	83 ec 1c             	sub    esp,0x1c
c0003edd:	8b 30                	mov    esi,DWORD PTR [eax]
c0003edf:	e8 89 f0 ff ff       	call   c0002f6d <dir_sdi>
c0003ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ee7:	85 c0                	test   eax,eax
c0003ee9:	0f 85 9e 01 00 00    	jne    c000408d <dir_find+0x1bb>
c0003eef:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003ef2:	0f 85 8d 00 00 00    	jne    c0003f85 <dir_find+0xb3>
c0003ef8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003efb:	e8 30 fe ff ff       	call   c0003d30 <xname_sum>
c0003f00:	89 c7                	mov    edi,eax
c0003f02:	31 d2                	xor    edx,edx
c0003f04:	89 d8                	mov    eax,ebx
c0003f06:	e8 72 f8 ff ff       	call   c000377d <dir_read>
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	0f 85 5e 01 00 00    	jne    c0004071 <dir_find+0x19f>
c0003f13:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f16:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f19:	e8 f3 da ff ff       	call   c0001a11 <ld_word>
c0003f1e:	66 39 f8             	cmp    ax,di
c0003f21:	75 df                	jne    c0003f02 <dir_find+0x30>
c0003f23:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f26:	31 ed                	xor    ebp,ebp
c0003f28:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f2c:	ba 40 00 00 00       	mov    edx,0x40
c0003f31:	89 e9                	mov    ecx,ebp
c0003f33:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f37:	0f 84 42 01 00 00    	je     c000407f <dir_find+0x1ad>
c0003f3d:	f6 c2 1f             	test   dl,0x1f
c0003f40:	75 03                	jne    c0003f45 <dir_find+0x73>
c0003f42:	83 c2 02             	add    edx,0x2
c0003f45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f49:	89 d0                	mov    eax,edx
c0003f4b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f4e:	e8 be da ff ff       	call   c0001a11 <ld_word>
c0003f53:	83 ec 0c             	sub    esp,0xc
c0003f56:	0f b7 c0             	movzx  eax,ax
c0003f59:	50                   	push   eax
c0003f5a:	e8 0e 44 00 00       	call   c000836d <ff_wtoupper>
c0003f5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f63:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f66:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003f6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f6d:	e8 fb 43 00 00       	call   c000836d <ff_wtoupper>
c0003f72:	83 c4 10             	add    esp,0x10
c0003f75:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f79:	75 87                	jne    c0003f02 <dir_find+0x30>
c0003f7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003f7f:	45                   	inc    ebp
c0003f80:	83 c2 02             	add    edx,0x2
c0003f83:	eb ac                	jmp    c0003f31 <dir_find+0x5f>
c0003f85:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f8c:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f91:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f96:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f99:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f9c:	89 f0                	mov    eax,esi
c0003f9e:	e8 4c e2 ff ff       	call   c00021ef <move_window>
c0003fa3:	85 c0                	test   eax,eax
c0003fa5:	0f 85 c6 00 00 00    	jne    c0004071 <dir_find+0x19f>
c0003fab:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fae:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fb1:	84 c9                	test   cl,cl
c0003fb3:	0f 84 bd 00 00 00    	je     c0004076 <dir_find+0x1a4>
c0003fb9:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fbc:	88 d0                	mov    al,dl
c0003fbe:	83 e0 3f             	and    eax,0x3f
c0003fc1:	80 f9 e5             	cmp    cl,0xe5
c0003fc4:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fc7:	0f 84 87 00 00 00    	je     c0004054 <dir_find+0x182>
c0003fcd:	80 e2 08             	and    dl,0x8
c0003fd0:	74 06                	je     c0003fd8 <dir_find+0x106>
c0003fd2:	3c 0f                	cmp    al,0xf
c0003fd4:	75 7e                	jne    c0004054 <dir_find+0x182>
c0003fd6:	eb 04                	jmp    c0003fdc <dir_find+0x10a>
c0003fd8:	3c 0f                	cmp    al,0xf
c0003fda:	75 4c                	jne    c0004028 <dir_find+0x156>
c0003fdc:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003fe0:	75 7e                	jne    c0004060 <dir_find+0x18e>
c0003fe2:	f6 c1 40             	test   cl,0x40
c0003fe5:	74 12                	je     c0003ff9 <dir_find+0x127>
c0003fe7:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003fea:	83 e1 bf             	and    ecx,0xffffffbf
c0003fed:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003ff1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ff4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ff7:	eb 06                	jmp    c0003fff <dir_find+0x12d>
c0003ff9:	89 f8                	mov    eax,edi
c0003ffb:	38 c8                	cmp    al,cl
c0003ffd:	75 5c                	jne    c000405b <dir_find+0x189>
c0003fff:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004003:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004008:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000400b:	75 53                	jne    c0004060 <dir_find+0x18e>
c000400d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004011:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004014:	89 ea                	mov    edx,ebp
c0004016:	e8 f4 fd ff ff       	call   c0003e0f <cmp_lfn>
c000401b:	85 c0                	test   eax,eax
c000401d:	74 41                	je     c0004060 <dir_find+0x18e>
c000401f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004023:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004026:	eb 38                	jmp    c0004060 <dir_find+0x18e>
c0004028:	89 f8                	mov    eax,edi
c000402a:	84 c0                	test   al,al
c000402c:	75 0d                	jne    c000403b <dir_find+0x169>
c000402e:	89 e8                	mov    eax,ebp
c0004030:	e8 98 de ff ff       	call   c0001ecd <sum_sfn>
c0004035:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004039:	74 52                	je     c000408d <dir_find+0x1bb>
c000403b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000403f:	75 13                	jne    c0004054 <dir_find+0x182>
c0004041:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004044:	b9 0b 00 00 00       	mov    ecx,0xb
c0004049:	89 e8                	mov    eax,ebp
c000404b:	e8 60 da ff ff       	call   c0001ab0 <mem_cmp>
c0004050:	85 c0                	test   eax,eax
c0004052:	74 39                	je     c000408d <dir_find+0x1bb>
c0004054:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000405b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004060:	31 d2                	xor    edx,edx
c0004062:	89 d8                	mov    eax,ebx
c0004064:	e8 5c f4 ff ff       	call   c00034c5 <dir_next>
c0004069:	85 c0                	test   eax,eax
c000406b:	0f 84 25 ff ff ff    	je     c0003f96 <dir_find+0xc4>
c0004071:	89 04 24             	mov    DWORD PTR [esp],eax
c0004074:	eb 17                	jmp    c000408d <dir_find+0x1bb>
c0004076:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000407d:	eb 0e                	jmp    c000408d <dir_find+0x1bb>
c000407f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004082:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004087:	0f 85 75 fe ff ff    	jne    c0003f02 <dir_find+0x30>
c000408d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004090:	83 c4 1c             	add    esp,0x1c
c0004093:	5b                   	pop    ebx
c0004094:	5e                   	pop    esi
c0004095:	5f                   	pop    edi
c0004096:	5d                   	pop    ebp
c0004097:	c3                   	ret    

c0004098 <dir_register>:
c0004098:	55                   	push   ebp
c0004099:	57                   	push   edi
c000409a:	56                   	push   esi
c000409b:	be 06 00 00 00       	mov    esi,0x6
c00040a0:	53                   	push   ebx
c00040a1:	83 ec 6c             	sub    esp,0x6c
c00040a4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040a8:	0f 85 62 02 00 00    	jne    c0004310 <dir_register+0x278>
c00040ae:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040b0:	31 ff                	xor    edi,edi
c00040b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040b5:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040ba:	74 03                	je     c00040bf <dir_register+0x27>
c00040bc:	47                   	inc    edi
c00040bd:	eb f6                	jmp    c00040b5 <dir_register+0x1d>
c00040bf:	89 c3                	mov    ebx,eax
c00040c1:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040c5:	0f 85 e1 00 00 00    	jne    c00041ac <dir_register+0x114>
c00040cb:	83 c7 0e             	add    edi,0xe
c00040ce:	b9 0f 00 00 00       	mov    ecx,0xf
c00040d3:	89 f8                	mov    eax,edi
c00040d5:	31 d2                	xor    edx,edx
c00040d7:	f7 f1                	div    ecx
c00040d9:	8d 50 02             	lea    edx,[eax+0x2]
c00040dc:	89 c7                	mov    edi,eax
c00040de:	89 d8                	mov    eax,ebx
c00040e0:	e8 12 f8 ff ff       	call   c00038f7 <dir_alloc>
c00040e5:	89 c6                	mov    esi,eax
c00040e7:	85 c0                	test   eax,eax
c00040e9:	0f 85 21 02 00 00    	jne    c0004310 <dir_register+0x278>
c00040ef:	81 c7 01 00 00 08    	add    edi,0x8000001
c00040f5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00040f8:	c1 e7 05             	shl    edi,0x5
c00040fb:	29 f8                	sub    eax,edi
c00040fd:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004100:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004103:	a8 04                	test   al,0x4
c0004105:	0f 84 91 00 00 00    	je     c000419c <dir_register+0x104>
c000410b:	83 e0 fb             	and    eax,0xfffffffb
c000410e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004111:	89 d8                	mov    eax,ebx
c0004113:	e8 25 ec ff ff       	call   c0002d3d <fill_first_frag>
c0004118:	85 c0                	test   eax,eax
c000411a:	0f 85 ee 01 00 00    	jne    c000430e <dir_register+0x276>
c0004120:	83 c9 ff             	or     ecx,0xffffffff
c0004123:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004126:	89 d8                	mov    eax,ebx
c0004128:	e8 db eb ff ff       	call   c0002d08 <fill_last_frag>
c000412d:	85 c0                	test   eax,eax
c000412f:	0f 85 d9 01 00 00    	jne    c000430e <dir_register+0x276>
c0004135:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004139:	74 61                	je     c000419c <dir_register+0x104>
c000413b:	89 da                	mov    edx,ebx
c000413d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004141:	e8 ea f5 ff ff       	call   c0003730 <load_obj_xdir>
c0004146:	85 c0                	test   eax,eax
c0004148:	0f 85 c0 01 00 00    	jne    c000430e <dir_register+0x276>
c000414e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004152:	31 c9                	xor    ecx,ecx
c0004154:	c1 e2 09             	shl    edx,0x9
c0004157:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000415a:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000415d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004160:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004163:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004166:	83 c0 38             	add    eax,0x38
c0004169:	e8 1c d9 ff ff       	call   c0001a8a <st_qword>
c000416e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004171:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004174:	83 c0 28             	add    eax,0x28
c0004177:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000417a:	e8 0b d9 ff ff       	call   c0001a8a <st_qword>
c000417f:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004182:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004185:	83 c8 01             	or     eax,0x1
c0004188:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c000418b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000418f:	e8 db f7 ff ff       	call   c000396f <store_xdir>
c0004194:	85 c0                	test   eax,eax
c0004196:	0f 85 72 01 00 00    	jne    c000430e <dir_register+0x276>
c000419c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000419f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041a2:	e8 c1 fb ff ff       	call   c0003d68 <create_xdir>
c00041a7:	e9 64 01 00 00       	jmp    c0004310 <dir_register+0x278>
c00041ac:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041af:	b9 0c 00 00 00       	mov    ecx,0xc
c00041b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041b8:	89 c2                	mov    edx,eax
c00041ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041be:	e8 cd d8 ff ff       	call   c0001a90 <mem_cpy>
c00041c3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041c8:	74 58                	je     c0004222 <dir_register+0x18a>
c00041ca:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041ce:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041d6:	83 ec 0c             	sub    esp,0xc
c00041d9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041e0:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041e8:	e8 24 dc ff ff       	call   c0001e11 <gen_numname>
c00041ed:	89 d8                	mov    eax,ebx
c00041ef:	e8 de fc ff ff       	call   c0003ed2 <dir_find>
c00041f4:	83 c4 10             	add    esp,0x10
c00041f7:	89 c6                	mov    esi,eax
c00041f9:	85 c0                	test   eax,eax
c00041fb:	75 15                	jne    c0004212 <dir_register+0x17a>
c00041fd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004201:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004206:	75 ce                	jne    c00041d6 <dir_register+0x13e>
c0004208:	be 07 00 00 00       	mov    esi,0x7
c000420d:	e9 fe 00 00 00       	jmp    c0004310 <dir_register+0x278>
c0004212:	83 f8 04             	cmp    eax,0x4
c0004215:	0f 85 f5 00 00 00    	jne    c0004310 <dir_register+0x278>
c000421b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000421f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004222:	b9 01 00 00 00       	mov    ecx,0x1
c0004227:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000422c:	74 0f                	je     c000423d <dir_register+0x1a5>
c000422e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004233:	8d 47 0c             	lea    eax,[edi+0xc]
c0004236:	31 d2                	xor    edx,edx
c0004238:	f7 f1                	div    ecx
c000423a:	8d 48 01             	lea    ecx,[eax+0x1]
c000423d:	89 ca                	mov    edx,ecx
c000423f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004243:	89 d8                	mov    eax,ebx
c0004245:	e8 ad f6 ff ff       	call   c00038f7 <dir_alloc>
c000424a:	89 c6                	mov    esi,eax
c000424c:	85 c0                	test   eax,eax
c000424e:	0f 85 bc 00 00 00    	jne    c0004310 <dir_register+0x278>
c0004254:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004258:	49                   	dec    ecx
c0004259:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000425d:	74 6a                	je     c00042c9 <dir_register+0x231>
c000425f:	89 c8                	mov    eax,ecx
c0004261:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004264:	c1 e0 05             	shl    eax,0x5
c0004267:	29 c2                	sub    edx,eax
c0004269:	89 d8                	mov    eax,ebx
c000426b:	e8 fd ec ff ff       	call   c0002f6d <dir_sdi>
c0004270:	89 c6                	mov    esi,eax
c0004272:	85 c0                	test   eax,eax
c0004274:	0f 85 96 00 00 00    	jne    c0004310 <dir_register+0x278>
c000427a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000427e:	e8 4a dc ff ff       	call   c0001ecd <sum_sfn>
c0004283:	0f b6 f8             	movzx  edi,al
c0004286:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004289:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000428c:	89 e8                	mov    eax,ebp
c000428e:	e8 5c df ff ff       	call   c00021ef <move_window>
c0004293:	89 c6                	mov    esi,eax
c0004295:	85 c0                	test   eax,eax
c0004297:	75 77                	jne    c0004310 <dir_register+0x278>
c0004299:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000429e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042a1:	83 ec 0c             	sub    esp,0xc
c00042a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042a7:	57                   	push   edi
c00042a8:	e8 e0 da ff ff       	call   c0001d8d <put_lfn>
c00042ad:	31 d2                	xor    edx,edx
c00042af:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042b3:	89 d8                	mov    eax,ebx
c00042b5:	e8 0b f2 ff ff       	call   c00034c5 <dir_next>
c00042ba:	83 c4 10             	add    esp,0x10
c00042bd:	89 c6                	mov    esi,eax
c00042bf:	85 c0                	test   eax,eax
c00042c1:	75 4d                	jne    c0004310 <dir_register+0x278>
c00042c3:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00042c7:	75 bd                	jne    c0004286 <dir_register+0x1ee>
c00042c9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042cc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042cf:	89 e8                	mov    eax,ebp
c00042d1:	e8 19 df ff ff       	call   c00021ef <move_window>
c00042d6:	89 c6                	mov    esi,eax
c00042d8:	85 c0                	test   eax,eax
c00042da:	75 34                	jne    c0004310 <dir_register+0x278>
c00042dc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042df:	b9 20 00 00 00       	mov    ecx,0x20
c00042e4:	31 d2                	xor    edx,edx
c00042e6:	e8 ba d7 ff ff       	call   c0001aa5 <mem_set>
c00042eb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00042f2:	b9 0b 00 00 00       	mov    ecx,0xb
c00042f7:	e8 94 d7 ff ff       	call   c0001a90 <mem_cpy>
c00042fc:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c00042ff:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004302:	83 e0 18             	and    eax,0x18
c0004305:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004308:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000430c:	eb 02                	jmp    c0004310 <dir_register+0x278>
c000430e:	89 c6                	mov    esi,eax
c0004310:	83 c4 6c             	add    esp,0x6c
c0004313:	89 f0                	mov    eax,esi
c0004315:	5b                   	pop    ebx
c0004316:	5e                   	pop    esi
c0004317:	5f                   	pop    edi
c0004318:	5d                   	pop    ebp
c0004319:	c3                   	ret    

c000431a <sync_fs>:
c000431a:	56                   	push   esi
c000431b:	53                   	push   ebx
c000431c:	53                   	push   ebx
c000431d:	89 c3                	mov    ebx,eax
c000431f:	e8 37 de ff ff       	call   c000215b <sync_window>
c0004324:	85 c0                	test   eax,eax
c0004326:	0f 85 b1 00 00 00    	jne    c00043dd <sync_fs+0xc3>
c000432c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000432f:	0f 85 8e 00 00 00    	jne    c00043c3 <sync_fs+0xa9>
c0004335:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004339:	0f 85 84 00 00 00    	jne    c00043c3 <sync_fs+0xa9>
c000433f:	b9 00 02 00 00       	mov    ecx,0x200
c0004344:	8d 73 54             	lea    esi,[ebx+0x54]
c0004347:	31 d2                	xor    edx,edx
c0004349:	89 f0                	mov    eax,esi
c000434b:	e8 55 d7 ff ff       	call   c0001aa5 <mem_set>
c0004350:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004356:	ba 55 aa 00 00       	mov    edx,0xaa55
c000435b:	e8 23 d7 ff ff       	call   c0001a83 <st_word>
c0004360:	ba 52 52 61 41       	mov    edx,0x41615252
c0004365:	89 f0                	mov    eax,esi
c0004367:	e8 1b d7 ff ff       	call   c0001a87 <st_dword>
c000436c:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004372:	ba 72 72 41 61       	mov    edx,0x61417272
c0004377:	e8 0b d7 ff ff       	call   c0001a87 <st_dword>
c000437c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000437f:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004385:	e8 fd d6 ff ff       	call   c0001a87 <st_dword>
c000438a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000438d:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004393:	e8 ef d6 ff ff       	call   c0001a87 <st_dword>
c0004398:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000439b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000439e:	83 c0 01             	add    eax,0x1
c00043a1:	83 d2 00             	adc    edx,0x0
c00043a4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043a7:	83 ec 0c             	sub    esp,0xc
c00043aa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043ad:	6a 01                	push   0x1
c00043af:	52                   	push   edx
c00043b0:	50                   	push   eax
c00043b1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043b5:	56                   	push   esi
c00043b6:	50                   	push   eax
c00043b7:	e8 20 d6 ff ff       	call   c00019dc <disk_write>
c00043bc:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043c0:	83 c4 20             	add    esp,0x20
c00043c3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043c7:	51                   	push   ecx
c00043c8:	6a 00                	push   0x0
c00043ca:	6a 00                	push   0x0
c00043cc:	50                   	push   eax
c00043cd:	e8 20 d6 ff ff       	call   c00019f2 <disk_ioctl>
c00043d2:	83 c4 10             	add    esp,0x10
c00043d5:	85 c0                	test   eax,eax
c00043d7:	0f 95 c0             	setne  al
c00043da:	0f b6 c0             	movzx  eax,al
c00043dd:	5a                   	pop    edx
c00043de:	5b                   	pop    ebx
c00043df:	5e                   	pop    esi
c00043e0:	c3                   	ret    

c00043e1 <create_partition>:
c00043e1:	55                   	push   ebp
c00043e2:	0f b6 c0             	movzx  eax,al
c00043e5:	57                   	push   edi
c00043e6:	56                   	push   esi
c00043e7:	53                   	push   ebx
c00043e8:	83 ec 60             	sub    esp,0x60
c00043eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043ef:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00043f3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00043f7:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00043fb:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c00043ff:	50                   	push   eax
c0004400:	6a 01                	push   0x1
c0004402:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004406:	e8 e7 d5 ff ff       	call   c00019f2 <disk_ioctl>
c000440b:	83 c4 10             	add    esp,0x10
c000440e:	85 c0                	test   eax,eax
c0004410:	74 0a                	je     c000441c <create_partition+0x3b>
c0004412:	b8 01 00 00 00       	mov    eax,0x1
c0004417:	e9 67 05 00 00       	jmp    c0004983 <create_partition+0x5a2>
c000441c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004420:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004424:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004428:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000442c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004431:	0f 86 ed 03 00 00    	jbe    c0004824 <create_partition+0x443>
c0004437:	83 c0 df             	add    eax,0xffffffdf
c000443a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004442:	83 d2 ff             	adc    edx,0xffffffff
c0004445:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004449:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000444d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004451:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004455:	83 c0 bd             	add    eax,0xffffffbd
c0004458:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000445f:	83 d2 ff             	adc    edx,0xffffffff
c0004462:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004466:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000446a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004472:	be 22 00 00 00       	mov    esi,0x22
c0004477:	31 ff                	xor    edi,edi
c0004479:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004481:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004489:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0004491:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004495:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000449b:	75 0e                	jne    c00044ab <create_partition+0xca>
c000449d:	b9 00 02 00 00       	mov    ecx,0x200
c00044a2:	31 d2                	xor    edx,edx
c00044a4:	89 d8                	mov    eax,ebx
c00044a6:	e8 fa d5 ff ff       	call   c0001aa5 <mem_set>
c00044ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044b7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044ba:	0f 84 23 01 00 00    	je     c00045e3 <create_partition+0x202>
c00044c0:	89 f0                	mov    eax,esi
c00044c2:	89 fa                	mov    edx,edi
c00044c4:	05 ff 07 00 00       	add    eax,0x7ff
c00044c9:	83 d2 00             	adc    edx,0x0
c00044cc:	89 c1                	mov    ecx,eax
c00044ce:	89 d7                	mov    edi,edx
c00044d0:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044d6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044da:	89 ce                	mov    esi,ecx
c00044dc:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044e0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044e4:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044e8:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00044eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00044f2:	b8 64 00 00 00       	mov    eax,0x64
c00044f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00044fa:	b8 00 00 00 00       	mov    eax,0x0
c00044ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004503:	72 41                	jb     c0004546 <create_partition+0x165>
c0004505:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004509:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000450d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004511:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004516:	01 c1                	add    ecx,eax
c0004518:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000451c:	f7 24 24             	mul    DWORD PTR [esp]
c000451f:	6a 00                	push   0x0
c0004521:	01 ca                	add    edx,ecx
c0004523:	6a 64                	push   0x64
c0004525:	52                   	push   edx
c0004526:	50                   	push   eax
c0004527:	e8 50 07 02 00       	call   c0024c7c <__udivdi3>
c000452c:	83 c4 10             	add    esp,0x10
c000452f:	05 ff 07 00 00       	add    eax,0x7ff
c0004534:	83 d2 00             	adc    edx,0x0
c0004537:	89 c1                	mov    ecx,eax
c0004539:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000453d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004543:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004546:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004549:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000454d:	01 f0                	add    eax,esi
c000454f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004553:	11 fa                	adc    edx,edi
c0004555:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004559:	19 d1                	sbb    ecx,edx
c000455b:	73 2e                	jae    c000458b <create_partition+0x1aa>
c000455d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004561:	89 f8                	mov    eax,edi
c0004563:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000456a:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c000456e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004576:	73 6b                	jae    c00045e3 <create_partition+0x202>
c0004578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000457c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004580:	29 f0                	sub    eax,esi
c0004582:	19 fa                	sbb    edx,edi
c0004584:	89 04 24             	mov    DWORD PTR [esp],eax
c0004587:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000458b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000458f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004592:	74 4f                	je     c00045e3 <create_partition+0x202>
c0004594:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004597:	b9 10 00 00 00       	mov    ecx,0x10
c000459c:	ba d0 76 02 c0       	mov    edx,0xc00276d0
c00045a1:	e8 ea d4 ff ff       	call   c0001a90 <mem_cpy>
c00045a6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045aa:	b9 10 00 00 00       	mov    ecx,0x10
c00045af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045b3:	e8 2c db ff ff       	call   c00020e4 <make_rand>
c00045b8:	89 f2                	mov    edx,esi
c00045ba:	89 f9                	mov    ecx,edi
c00045bc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045c0:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045c4:	e8 c1 d4 ff ff       	call   c0001a8a <st_qword>
c00045c9:	03 34 24             	add    esi,DWORD PTR [esp]
c00045cc:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045d0:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045d4:	89 f2                	mov    edx,esi
c00045d6:	89 f9                	mov    ecx,edi
c00045d8:	83 c2 ff             	add    edx,0xffffffff
c00045db:	83 d1 ff             	adc    ecx,0xffffffff
c00045de:	e8 a7 d4 ff ff       	call   c0001a8a <st_qword>
c00045e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045e7:	83 e8 80             	sub    eax,0xffffff80
c00045ea:	89 c5                	mov    ebp,eax
c00045ec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045f0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045f6:	75 6b                	jne    c0004663 <create_partition+0x282>
c00045f8:	45                   	inc    ebp
c00045f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045fd:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004602:	e8 39 da ff ff       	call   c0002040 <crc32>
c0004607:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000460d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004611:	75 e5                	jne    c00045f8 <create_partition+0x217>
c0004613:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004617:	31 d2                	xor    edx,edx
c0004619:	83 ec 0c             	sub    esp,0xc
c000461c:	c1 ed 09             	shr    ebp,0x9
c000461f:	6a 01                	push   0x1
c0004621:	8d 45 02             	lea    eax,[ebp+0x2]
c0004624:	52                   	push   edx
c0004625:	50                   	push   eax
c0004626:	53                   	push   ebx
c0004627:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000462b:	e8 ac d3 ff ff       	call   c00019dc <disk_write>
c0004630:	83 c4 20             	add    esp,0x20
c0004633:	85 c0                	test   eax,eax
c0004635:	0f 85 d7 fd ff ff    	jne    c0004412 <create_partition+0x31>
c000463b:	83 ec 0c             	sub    esp,0xc
c000463e:	31 d2                	xor    edx,edx
c0004640:	6a 01                	push   0x1
c0004642:	89 e8                	mov    eax,ebp
c0004644:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004648:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000464c:	52                   	push   edx
c000464d:	50                   	push   eax
c000464e:	53                   	push   ebx
c000464f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004653:	e8 84 d3 ff ff       	call   c00019dc <disk_write>
c0004658:	83 c4 20             	add    esp,0x20
c000465b:	85 c0                	test   eax,eax
c000465d:	0f 85 af fd ff ff    	jne    c0004412 <create_partition+0x31>
c0004663:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004667:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000466b:	3d 00 40 00 00       	cmp    eax,0x4000
c0004670:	74 0d                	je     c000467f <create_partition+0x29e>
c0004672:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004676:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000467a:	e9 12 fe ff ff       	jmp    c0004491 <create_partition+0xb0>
c000467f:	31 d2                	xor    edx,edx
c0004681:	b9 00 02 00 00       	mov    ecx,0x200
c0004686:	89 d8                	mov    eax,ebx
c0004688:	8d 6b 20             	lea    ebp,[ebx+0x20]
c000468b:	e8 15 d4 ff ff       	call   c0001aa5 <mem_set>
c0004690:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004693:	b9 10 00 00 00       	mov    ecx,0x10
c0004698:	ba c0 75 02 c0       	mov    edx,0xc00275c0
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 ec d3 ff ff       	call   c0001a90 <mem_cpy>
c00046a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046a8:	8d 43 58             	lea    eax,[ebx+0x58]
c00046ab:	f7 d2                	not    edx
c00046ad:	e8 d5 d3 ff ff       	call   c0001a87 <st_dword>
c00046b2:	8d 43 18             	lea    eax,[ebx+0x18]
c00046b5:	31 c9                	xor    ecx,ecx
c00046b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00046ba:	ba 01 00 00 00       	mov    edx,0x1
c00046bf:	e8 c6 d3 ff ff       	call   c0001a8a <st_qword>
c00046c4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046c8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046cc:	83 c2 ff             	add    edx,0xffffffff
c00046cf:	89 e8                	mov    eax,ebp
c00046d1:	83 d1 ff             	adc    ecx,0xffffffff
c00046d4:	e8 b1 d3 ff ff       	call   c0001a8a <st_qword>
c00046d9:	31 c9                	xor    ecx,ecx
c00046db:	8d 43 28             	lea    eax,[ebx+0x28]
c00046de:	ba 22 00 00 00       	mov    edx,0x22
c00046e3:	e8 a2 d3 ff ff       	call   c0001a8a <st_qword>
c00046e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00046ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00046f0:	83 c2 de             	add    edx,0xffffffde
c00046f3:	8d 43 30             	lea    eax,[ebx+0x30]
c00046f6:	83 d1 ff             	adc    ecx,0xffffffff
c00046f9:	31 f6                	xor    esi,esi
c00046fb:	e8 8a d3 ff ff       	call   c0001a8a <st_qword>
c0004700:	8d 43 54             	lea    eax,[ebx+0x54]
c0004703:	ba 80 00 00 00       	mov    edx,0x80
c0004708:	e8 7a d3 ff ff       	call   c0001a87 <st_dword>
c000470d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004710:	ba 80 00 00 00       	mov    edx,0x80
c0004715:	e8 6d d3 ff ff       	call   c0001a87 <st_dword>
c000471a:	ba 02 00 00 00       	mov    edx,0x2
c000471f:	89 f8                	mov    eax,edi
c0004721:	e8 61 d3 ff ff       	call   c0001a87 <st_dword>
c0004726:	8d 53 38             	lea    edx,[ebx+0x38]
c0004729:	b9 10 00 00 00       	mov    ecx,0x10
c000472e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004732:	e8 ad d9 ff ff       	call   c00020e4 <make_rand>
c0004737:	83 c8 ff             	or     eax,0xffffffff
c000473a:	46                   	inc    esi
c000473b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004740:	e8 fb d8 ff ff       	call   c0002040 <crc32>
c0004745:	83 fe 5c             	cmp    esi,0x5c
c0004748:	75 f0                	jne    c000473a <create_partition+0x359>
c000474a:	f7 d0                	not    eax
c000474c:	8d 73 10             	lea    esi,[ebx+0x10]
c000474f:	89 c2                	mov    edx,eax
c0004751:	89 f0                	mov    eax,esi
c0004753:	e8 2f d3 ff ff       	call   c0001a87 <st_dword>
c0004758:	83 ec 0c             	sub    esp,0xc
c000475b:	6a 01                	push   0x1
c000475d:	6a 00                	push   0x0
c000475f:	6a 01                	push   0x1
c0004761:	53                   	push   ebx
c0004762:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004766:	e8 71 d2 ff ff       	call   c00019dc <disk_write>
c000476b:	83 c4 20             	add    esp,0x20
c000476e:	85 c0                	test   eax,eax
c0004770:	0f 85 9c fc ff ff    	jne    c0004412 <create_partition+0x31>
c0004776:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000477a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000477e:	83 c2 ff             	add    edx,0xffffffff
c0004781:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004784:	83 d1 ff             	adc    ecx,0xffffffff
c0004787:	e8 fe d2 ff ff       	call   c0001a8a <st_qword>
c000478c:	ba 01 00 00 00       	mov    edx,0x1
c0004791:	31 c9                	xor    ecx,ecx
c0004793:	89 e8                	mov    eax,ebp
c0004795:	e8 f0 d2 ff ff       	call   c0001a8a <st_qword>
c000479a:	89 f8                	mov    eax,edi
c000479c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047a0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a4:	31 ff                	xor    edi,edi
c00047a6:	e8 df d2 ff ff       	call   c0001a8a <st_qword>
c00047ab:	89 f0                	mov    eax,esi
c00047ad:	31 d2                	xor    edx,edx
c00047af:	e8 d3 d2 ff ff       	call   c0001a87 <st_dword>
c00047b4:	83 c8 ff             	or     eax,0xffffffff
c00047b7:	47                   	inc    edi
c00047b8:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047bd:	e8 7e d8 ff ff       	call   c0002040 <crc32>
c00047c2:	83 ff 5c             	cmp    edi,0x5c
c00047c5:	75 f0                	jne    c00047b7 <create_partition+0x3d6>
c00047c7:	f7 d0                	not    eax
c00047c9:	89 c2                	mov    edx,eax
c00047cb:	89 f0                	mov    eax,esi
c00047cd:	e8 b5 d2 ff ff       	call   c0001a87 <st_dword>
c00047d2:	83 ec 0c             	sub    esp,0xc
c00047d5:	6a 01                	push   0x1
c00047d7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047db:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047df:	83 c0 ff             	add    eax,0xffffffff
c00047e2:	83 d2 ff             	adc    edx,0xffffffff
c00047e5:	52                   	push   edx
c00047e6:	50                   	push   eax
c00047e7:	53                   	push   ebx
c00047e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047ec:	e8 eb d1 ff ff       	call   c00019dc <disk_write>
c00047f1:	83 c4 20             	add    esp,0x20
c00047f4:	85 c0                	test   eax,eax
c00047f6:	0f 85 16 fc ff ff    	jne    c0004412 <create_partition+0x31>
c00047fc:	31 d2                	xor    edx,edx
c00047fe:	89 d8                	mov    eax,ebx
c0004800:	b9 00 02 00 00       	mov    ecx,0x200
c0004805:	e8 9b d2 ff ff       	call   c0001aa5 <mem_set>
c000480a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004810:	b9 10 00 00 00       	mov    ecx,0x10
c0004815:	ba d0 75 02 c0       	mov    edx,0xc00275d0
c000481a:	e8 71 d2 ff ff       	call   c0001a90 <mem_cpy>
c000481f:	e9 21 01 00 00       	jmp    c0004945 <create_partition+0x564>
c0004824:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004828:	b9 05 00 00 00       	mov    ecx,0x5
c000482d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004830:	bf 08 00 00 00       	mov    edi,0x8
c0004835:	89 f8                	mov    eax,edi
c0004837:	31 d2                	xor    edx,edx
c0004839:	0f b6 f0             	movzx  esi,al
c000483c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000483f:	f7 f6                	div    esi
c0004841:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004846:	76 0a                	jbe    c0004852 <create_partition+0x471>
c0004848:	d1 e7                	shl    edi,1
c000484a:	49                   	dec    ecx
c000484b:	75 e8                	jne    c0004835 <create_partition+0x454>
c000484d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004852:	b9 00 02 00 00       	mov    ecx,0x200
c0004857:	31 d2                	xor    edx,edx
c0004859:	89 d8                	mov    eax,ebx
c000485b:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004861:	e8 3f d2 ff ff       	call   c0001aa5 <mem_set>
c0004866:	b9 64 00 00 00       	mov    ecx,0x64
c000486b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000486e:	31 d2                	xor    edx,edx
c0004870:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004878:	f7 f1                	div    ecx
c000487a:	b9 3f 00 00 00       	mov    ecx,0x3f
c000487f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004883:	89 f8                	mov    eax,edi
c0004885:	0f b6 c0             	movzx  eax,al
c0004888:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000488c:	e9 80 00 00 00       	jmp    c0004911 <create_partition+0x530>
c0004891:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004894:	29 cf                	sub    edi,ecx
c0004896:	89 ca                	mov    edx,ecx
c0004898:	89 f0                	mov    eax,esi
c000489a:	bd 3f 00 00 00       	mov    ebp,0x3f
c000489f:	e8 e3 d1 ff ff       	call   c0001a87 <st_dword>
c00048a4:	8d 46 04             	lea    eax,[esi+0x4]
c00048a7:	89 fa                	mov    edx,edi
c00048a9:	83 c6 10             	add    esi,0x10
c00048ac:	e8 d6 d1 ff ff       	call   c0001a87 <st_dword>
c00048b1:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048b5:	31 d2                	xor    edx,edx
c00048b7:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048ba:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048be:	89 c8                	mov    eax,ecx
c00048c0:	01 f9                	add    ecx,edi
c00048c2:	f7 f5                	div    ebp
c00048c4:	89 d5                	mov    ebp,edx
c00048c6:	31 d2                	xor    edx,edx
c00048c8:	45                   	inc    ebp
c00048c9:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048cd:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c00048d0:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c00048d3:	89 c2                	mov    edx,eax
c00048d5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00048d8:	c1 ea 02             	shr    edx,0x2
c00048db:	83 e2 c0             	and    edx,0xffffffc0
c00048de:	09 ea                	or     edx,ebp
c00048e0:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048e5:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c00048e8:	31 d2                	xor    edx,edx
c00048ea:	f7 f5                	div    ebp
c00048ec:	89 d7                	mov    edi,edx
c00048ee:	31 d2                	xor    edx,edx
c00048f0:	47                   	inc    edi
c00048f1:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048f5:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c00048f8:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c00048fb:	89 c5                	mov    ebp,eax
c00048fd:	c1 ed 02             	shr    ebp,0x2
c0004900:	83 e5 c0             	and    ebp,0xffffffc0
c0004903:	09 ef                	or     edi,ebp
c0004905:	89 fa                	mov    edx,edi
c0004907:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c000490a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000490f:	74 34                	je     c0004945 <create_partition+0x564>
c0004911:	85 c9                	test   ecx,ecx
c0004913:	74 30                	je     c0004945 <create_partition+0x564>
c0004915:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004918:	76 2b                	jbe    c0004945 <create_partition+0x564>
c000491a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000491e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004922:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004925:	83 ff 64             	cmp    edi,0x64
c0004928:	76 4b                	jbe    c0004975 <create_partition+0x594>
c000492a:	89 f8                	mov    eax,edi
c000492c:	01 c8                	add    eax,ecx
c000492e:	0f 82 5d ff ff ff    	jb     c0004891 <create_partition+0x4b0>
c0004934:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004937:	0f 87 54 ff ff ff    	ja     c0004891 <create_partition+0x4b0>
c000493d:	85 ff                	test   edi,edi
c000493f:	0f 85 51 ff ff ff    	jne    c0004896 <create_partition+0x4b5>
c0004945:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000494b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004950:	e8 2e d1 ff ff       	call   c0001a83 <st_word>
c0004955:	83 ec 0c             	sub    esp,0xc
c0004958:	6a 01                	push   0x1
c000495a:	6a 00                	push   0x0
c000495c:	6a 00                	push   0x0
c000495e:	53                   	push   ebx
c000495f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004963:	e8 74 d0 ff ff       	call   c00019dc <disk_write>
c0004968:	83 c4 20             	add    esp,0x20
c000496b:	85 c0                	test   eax,eax
c000496d:	0f 95 c0             	setne  al
c0004970:	0f b6 c0             	movzx  eax,al
c0004973:	eb 0e                	jmp    c0004983 <create_partition+0x5a2>
c0004975:	74 07                	je     c000497e <create_partition+0x59d>
c0004977:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c000497c:	eb ac                	jmp    c000492a <create_partition+0x549>
c000497e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004981:	eb a7                	jmp    c000492a <create_partition+0x549>
c0004983:	83 c4 5c             	add    esp,0x5c
c0004986:	5b                   	pop    ebx
c0004987:	5e                   	pop    esi
c0004988:	5f                   	pop    edi
c0004989:	5d                   	pop    ebp
c000498a:	c3                   	ret    

c000498b <get_fileinfo>:
c000498b:	55                   	push   ebp
c000498c:	57                   	push   edi
c000498d:	56                   	push   esi
c000498e:	53                   	push   ebx
c000498f:	83 ec 1c             	sub    esp,0x1c
c0004992:	8b 30                	mov    esi,DWORD PTR [eax]
c0004994:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004998:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000499c:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000499f:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049a2:	0f 84 dc 01 00 00    	je     c0004b84 <get_fileinfo+0x1f9>
c00049a8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049ab:	75 0f                	jne    c00049bc <get_fileinfo+0x31>
c00049ad:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049b0:	83 c4 1c             	add    esp,0x1c
c00049b3:	5b                   	pop    ebx
c00049b4:	5e                   	pop    esi
c00049b5:	5f                   	pop    edi
c00049b6:	5d                   	pop    ebp
c00049b7:	e9 58 d5 ff ff       	jmp    c0001f14 <get_xfileinfo>
c00049bc:	89 d3                	mov    ebx,edx
c00049be:	89 c6                	mov    esi,eax
c00049c0:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049c4:	74 6a                	je     c0004a30 <get_fileinfo+0xa5>
c00049c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049ce:	31 ed                	xor    ebp,ebp
c00049d0:	31 ff                	xor    edi,edi
c00049d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049dd:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00049e1:	66 85 d2             	test   dx,dx
c00049e4:	74 3e                	je     c0004a24 <get_fileinfo+0x99>
c00049e6:	66 85 ed             	test   bp,bp
c00049e9:	75 0c                	jne    c00049f7 <get_fileinfo+0x6c>
c00049eb:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c00049f1:	66 3d ff 07          	cmp    ax,0x7ff
c00049f5:	76 22                	jbe    c0004a19 <get_fileinfo+0x8e>
c00049f7:	b9 ff 00 00 00       	mov    ecx,0xff
c00049fc:	89 e8                	mov    eax,ebp
c00049fe:	29 f9                	sub    ecx,edi
c0004a00:	c1 e0 10             	shl    eax,0x10
c0004a03:	09 d0                	or     eax,edx
c0004a05:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a09:	e8 a3 d1 ff ff       	call   c0001bb1 <put_utf>
c0004a0e:	84 c0                	test   al,al
c0004a10:	74 10                	je     c0004a22 <get_fileinfo+0x97>
c0004a12:	0f b6 c0             	movzx  eax,al
c0004a15:	31 d2                	xor    edx,edx
c0004a17:	01 c7                	add    edi,eax
c0004a19:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a1e:	89 d5                	mov    ebp,edx
c0004a20:	eb b0                	jmp    c00049d2 <get_fileinfo+0x47>
c0004a22:	31 ff                	xor    edi,edi
c0004a24:	66 85 ed             	test   bp,bp
c0004a27:	74 02                	je     c0004a2b <get_fileinfo+0xa0>
c0004a29:	31 ff                	xor    edi,edi
c0004a2b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a30:	31 ff                	xor    edi,edi
c0004a32:	31 c9                	xor    ecx,ecx
c0004a34:	83 f9 0a             	cmp    ecx,0xa
c0004a37:	0f 87 ad 00 00 00    	ja     c0004aea <get_fileinfo+0x15f>
c0004a3d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a40:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a43:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a47:	66 83 fa 20          	cmp    dx,0x20
c0004a4b:	0f 84 92 00 00 00    	je     c0004ae3 <get_fileinfo+0x158>
c0004a51:	66 83 fa 05          	cmp    dx,0x5
c0004a55:	75 05                	jne    c0004a5c <get_fileinfo+0xd1>
c0004a57:	ba e5 00 00 00       	mov    edx,0xe5
c0004a5c:	83 ff 0b             	cmp    edi,0xb
c0004a5f:	77 0b                	ja     c0004a6c <get_fileinfo+0xe1>
c0004a61:	83 fd 09             	cmp    ebp,0x9
c0004a64:	75 06                	jne    c0004a6c <get_fileinfo+0xe1>
c0004a66:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a6b:	47                   	inc    edi
c0004a6c:	0f b7 c2             	movzx  eax,dx
c0004a6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a73:	e8 6d d0 ff ff       	call   c0001ae5 <dbc_1st>
c0004a78:	85 c0                	test   eax,eax
c0004a7a:	74 2f                	je     c0004aab <get_fileinfo+0x120>
c0004a7c:	83 fd 08             	cmp    ebp,0x8
c0004a7f:	74 2a                	je     c0004aab <get_fileinfo+0x120>
c0004a81:	83 fd 0b             	cmp    ebp,0xb
c0004a84:	74 25                	je     c0004aab <get_fileinfo+0x120>
c0004a86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a89:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a8d:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a91:	e8 52 d0 ff ff       	call   c0001ae8 <dbc_2nd>
c0004a96:	85 c0                	test   eax,eax
c0004a98:	74 11                	je     c0004aab <get_fileinfo+0x120>
c0004a9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a9e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004aa3:	c1 e2 08             	shl    edx,0x8
c0004aa6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004aa9:	09 c2                	or     edx,eax
c0004aab:	0f b7 d2             	movzx  edx,dx
c0004aae:	50                   	push   eax
c0004aaf:	50                   	push   eax
c0004ab0:	68 b5 01 00 00       	push   0x1b5
c0004ab5:	52                   	push   edx
c0004ab6:	e8 46 38 00 00       	call   c0008301 <ff_oem2uni>
c0004abb:	83 c4 10             	add    esp,0x10
c0004abe:	66 85 c0             	test   ax,ax
c0004ac1:	75 04                	jne    c0004ac7 <get_fileinfo+0x13c>
c0004ac3:	31 ff                	xor    edi,edi
c0004ac5:	eb 23                	jmp    c0004aea <get_fileinfo+0x15f>
c0004ac7:	b9 0c 00 00 00       	mov    ecx,0xc
c0004acc:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ad0:	29 f9                	sub    ecx,edi
c0004ad2:	0f b7 c0             	movzx  eax,ax
c0004ad5:	e8 d7 d0 ff ff       	call   c0001bb1 <put_utf>
c0004ada:	84 c0                	test   al,al
c0004adc:	74 e5                	je     c0004ac3 <get_fileinfo+0x138>
c0004ade:	0f b6 c0             	movzx  eax,al
c0004ae1:	01 c7                	add    edi,eax
c0004ae3:	89 e9                	mov    ecx,ebp
c0004ae5:	e9 4a ff ff ff       	jmp    c0004a34 <get_fileinfo+0xa9>
c0004aea:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004aef:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004af3:	75 54                	jne    c0004b49 <get_fileinfo+0x1be>
c0004af5:	85 ff                	test   edi,edi
c0004af7:	75 0b                	jne    c0004b04 <get_fileinfo+0x179>
c0004af9:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004afd:	ba 01 00 00 00       	mov    edx,0x1
c0004b02:	eb 33                	jmp    c0004b37 <get_fileinfo+0x1ac>
c0004b04:	b1 08                	mov    cl,0x8
c0004b06:	31 d2                	xor    edx,edx
c0004b08:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b0e:	84 c0                	test   al,al
c0004b10:	74 25                	je     c0004b37 <get_fileinfo+0x1ac>
c0004b12:	66 83 f8 2e          	cmp    ax,0x2e
c0004b16:	74 16                	je     c0004b2e <get_fileinfo+0x1a3>
c0004b18:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b1b:	66 83 ff 19          	cmp    di,0x19
c0004b1f:	77 0f                	ja     c0004b30 <get_fileinfo+0x1a5>
c0004b21:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b24:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b27:	74 07                	je     c0004b30 <get_fileinfo+0x1a5>
c0004b29:	83 c0 20             	add    eax,0x20
c0004b2c:	eb 02                	jmp    c0004b30 <get_fileinfo+0x1a5>
c0004b2e:	b1 10                	mov    cl,0x10
c0004b30:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b34:	42                   	inc    edx
c0004b35:	eb d1                	jmp    c0004b08 <get_fileinfo+0x17d>
c0004b37:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b3c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b3f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b43:	75 04                	jne    c0004b49 <get_fileinfo+0x1be>
c0004b45:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b49:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b4c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b4f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b55:	83 c0 1c             	add    eax,0x1c
c0004b58:	e8 c1 ce ff ff       	call   c0001a1e <ld_dword>
c0004b5d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b64:	89 03                	mov    DWORD PTR [ebx],eax
c0004b66:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b69:	83 c0 16             	add    eax,0x16
c0004b6c:	e8 a0 ce ff ff       	call   c0001a11 <ld_word>
c0004b71:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b75:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b78:	83 c0 18             	add    eax,0x18
c0004b7b:	e8 91 ce ff ff       	call   c0001a11 <ld_word>
c0004b80:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b84:	83 c4 1c             	add    esp,0x1c
c0004b87:	5b                   	pop    ebx
c0004b88:	5e                   	pop    esi
c0004b89:	5f                   	pop    edi
c0004b8a:	5d                   	pop    ebp
c0004b8b:	c3                   	ret    

c0004b8c <ld_clust.isra.0>:
c0004b8c:	56                   	push   esi
c0004b8d:	89 c6                	mov    esi,eax
c0004b8f:	53                   	push   ebx
c0004b90:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b93:	89 d3                	mov    ebx,edx
c0004b95:	e8 77 ce ff ff       	call   c0001a11 <ld_word>
c0004b9a:	0f b7 c8             	movzx  ecx,ax
c0004b9d:	89 f0                	mov    eax,esi
c0004b9f:	3c 03                	cmp    al,0x3
c0004ba1:	75 0d                	jne    c0004bb0 <ld_clust.isra.0+0x24>
c0004ba3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004ba6:	e8 66 ce ff ff       	call   c0001a11 <ld_word>
c0004bab:	c1 e0 10             	shl    eax,0x10
c0004bae:	09 c1                	or     ecx,eax
c0004bb0:	89 c8                	mov    eax,ecx
c0004bb2:	5b                   	pop    ebx
c0004bb3:	5e                   	pop    esi
c0004bb4:	c3                   	ret    

c0004bb5 <st_clust.isra.1>:
c0004bb5:	56                   	push   esi
c0004bb6:	89 c6                	mov    esi,eax
c0004bb8:	53                   	push   ebx
c0004bb9:	89 d3                	mov    ebx,edx
c0004bbb:	0f b7 d1             	movzx  edx,cx
c0004bbe:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bc1:	e8 bd ce ff ff       	call   c0001a83 <st_word>
c0004bc6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bc9:	75 0f                	jne    c0004bda <st_clust.isra.1+0x25>
c0004bcb:	c1 e9 10             	shr    ecx,0x10
c0004bce:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bd1:	89 ca                	mov    edx,ecx
c0004bd3:	5b                   	pop    ebx
c0004bd4:	5e                   	pop    esi
c0004bd5:	e9 a9 ce ff ff       	jmp    c0001a83 <st_word>
c0004bda:	5b                   	pop    ebx
c0004bdb:	5e                   	pop    esi
c0004bdc:	c3                   	ret    

c0004bdd <init_alloc_info.isra.2>:
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	89 c6                	mov    esi,eax
c0004be1:	89 d3                	mov    ebx,edx
c0004be3:	51                   	push   ecx
c0004be4:	8b 00                	mov    eax,DWORD PTR [eax]
c0004be6:	83 c0 34             	add    eax,0x34
c0004be9:	e8 30 ce ff ff       	call   c0001a1e <ld_dword>
c0004bee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004bf1:	8b 06                	mov    eax,DWORD PTR [esi]
c0004bf3:	83 c0 38             	add    eax,0x38
c0004bf6:	e8 3b ce ff ff       	call   c0001a36 <ld_qword>
c0004bfb:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004bfe:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c01:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c03:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c06:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c0d:	83 e0 02             	and    eax,0x2
c0004c10:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c13:	5b                   	pop    ebx
c0004c14:	5b                   	pop    ebx
c0004c15:	5e                   	pop    esi
c0004c16:	c3                   	ret    

c0004c17 <follow_path>:
c0004c17:	56                   	push   esi
c0004c18:	53                   	push   ebx
c0004c19:	89 c3                	mov    ebx,eax
c0004c1b:	83 ec 14             	sub    esp,0x14
c0004c1e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c22:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c28:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c2a:	80 fa 5c             	cmp    dl,0x5c
c0004c2d:	75 07                	jne    c0004c36 <follow_path+0x1f>
c0004c2f:	40                   	inc    eax
c0004c30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c34:	eb ee                	jmp    c0004c24 <follow_path+0xd>
c0004c36:	80 fa 2f             	cmp    dl,0x2f
c0004c39:	74 f4                	je     c0004c2f <follow_path+0x18>
c0004c3b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c42:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c49:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c4c:	77 52                	ja     c0004ca0 <follow_path+0x89>
c0004c4e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c52:	31 d2                	xor    edx,edx
c0004c54:	89 d8                	mov    eax,ebx
c0004c56:	e8 12 e3 ff ff       	call   c0002f6d <dir_sdi>
c0004c5b:	eb 7c                	jmp    c0004cd9 <follow_path+0xc2>
c0004c5d:	89 d8                	mov    eax,ebx
c0004c5f:	e8 6e f2 ff ff       	call   c0003ed2 <dir_find>
c0004c64:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c67:	85 c0                	test   eax,eax
c0004c69:	75 46                	jne    c0004cb1 <follow_path+0x9a>
c0004c6b:	80 e2 04             	and    dl,0x4
c0004c6e:	75 69                	jne    c0004cd9 <follow_path+0xc2>
c0004c70:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c74:	74 5e                	je     c0004cd4 <follow_path+0xbd>
c0004c76:	8a 06                	mov    al,BYTE PTR [esi]
c0004c78:	3c 04                	cmp    al,0x4
c0004c7a:	75 41                	jne    c0004cbd <follow_path+0xa6>
c0004c7c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c7f:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c83:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c86:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c89:	30 c0                	xor    al,al
c0004c8b:	09 d0                	or     eax,edx
c0004c8d:	89 da                	mov    edx,ebx
c0004c8f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c92:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c95:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c98:	8d 46 10             	lea    eax,[esi+0x10]
c0004c9b:	e8 3d ff ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004ca0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ca4:	89 d8                	mov    eax,ebx
c0004ca6:	e8 a9 ed ff ff       	call   c0003a54 <create_name>
c0004cab:	85 c0                	test   eax,eax
c0004cad:	74 ae                	je     c0004c5d <follow_path+0x46>
c0004caf:	eb 28                	jmp    c0004cd9 <follow_path+0xc2>
c0004cb1:	83 f8 04             	cmp    eax,0x4
c0004cb4:	75 23                	jne    c0004cd9 <follow_path+0xc2>
c0004cb6:	80 e2 04             	and    dl,0x4
c0004cb9:	74 19                	je     c0004cd4 <follow_path+0xbd>
c0004cbb:	eb 1c                	jmp    c0004cd9 <follow_path+0xc2>
c0004cbd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cc0:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cc6:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cca:	e8 bd fe ff ff       	call   c0004b8c <ld_clust.isra.0>
c0004ccf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cd2:	eb cc                	jmp    c0004ca0 <follow_path+0x89>
c0004cd4:	b8 05 00 00 00       	mov    eax,0x5
c0004cd9:	83 c4 14             	add    esp,0x14
c0004cdc:	5b                   	pop    ebx
c0004cdd:	5e                   	pop    esi
c0004cde:	c3                   	ret    

c0004cdf <f_mount>:
c0004cdf:	53                   	push   ebx
c0004ce0:	83 ec 18             	sub    esp,0x18
c0004ce3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004ce7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004ceb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004cf3:	e8 fb d2 ff ff       	call   c0001ff3 <get_ldnumber>
c0004cf8:	89 c2                	mov    edx,eax
c0004cfa:	b8 0b 00 00 00       	mov    eax,0xb
c0004cff:	85 d2                	test   edx,edx
c0004d01:	78 39                	js     c0004d3c <f_mount+0x5d>
c0004d03:	8b 04 95 c0 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3e40]
c0004d0a:	85 c0                	test   eax,eax
c0004d0c:	74 03                	je     c0004d11 <f_mount+0x32>
c0004d0e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d15:	85 c0                	test   eax,eax
c0004d17:	74 03                	je     c0004d1c <f_mount+0x3d>
c0004d19:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d20:	89 04 95 c0 c1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3e40],eax
c0004d27:	31 c0                	xor    eax,eax
c0004d29:	84 db                	test   bl,bl
c0004d2b:	74 0f                	je     c0004d3c <f_mount+0x5d>
c0004d2d:	31 c9                	xor    ecx,ecx
c0004d2f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d33:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d37:	e8 65 d7 ff ff       	call   c00024a1 <mount_volume>
c0004d3c:	83 c4 18             	add    esp,0x18
c0004d3f:	5b                   	pop    ebx
c0004d40:	c3                   	ret    

c0004d41 <f_open>:
c0004d41:	55                   	push   ebp
c0004d42:	bd 09 00 00 00       	mov    ebp,0x9
c0004d47:	57                   	push   edi
c0004d48:	56                   	push   esi
c0004d49:	53                   	push   ebx
c0004d4a:	83 ec 7c             	sub    esp,0x7c
c0004d4d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d54:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d5b:	85 db                	test   ebx,ebx
c0004d5d:	0f 84 10 04 00 00    	je     c0005173 <f_open+0x432>
c0004d63:	89 fe                	mov    esi,edi
c0004d65:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d69:	83 e6 3f             	and    esi,0x3f
c0004d6c:	89 f0                	mov    eax,esi
c0004d6e:	0f b6 c8             	movzx  ecx,al
c0004d71:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d78:	e8 24 d7 ff ff       	call   c00024a1 <mount_volume>
c0004d7d:	89 c5                	mov    ebp,eax
c0004d7f:	85 c0                	test   eax,eax
c0004d81:	0f 85 e6 03 00 00    	jne    c000516d <f_open+0x42c>
c0004d87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d8b:	bd 11 00 00 00       	mov    ebp,0x11
c0004d90:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d94:	83 ec 0c             	sub    esp,0xc
c0004d97:	68 60 04 00 00       	push   0x460
c0004d9c:	e8 a3 34 00 00       	call   c0008244 <ff_memalloc>
c0004da1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004da5:	83 c4 10             	add    esp,0x10
c0004da8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004dad:	0f 84 c0 03 00 00    	je     c0005173 <f_open+0x432>
c0004db3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004db7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dbb:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004dc1:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004dc4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004dc7:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dce:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004dd2:	e8 40 fe ff ff       	call   c0004c17 <follow_path>
c0004dd7:	89 c5                	mov    ebp,eax
c0004dd9:	85 c0                	test   eax,eax
c0004ddb:	75 0c                	jne    c0004de9 <f_open+0xa8>
c0004ddd:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004de2:	79 05                	jns    c0004de9 <f_open+0xa8>
c0004de4:	bd 06 00 00 00       	mov    ebp,0x6
c0004de9:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004def:	0f 84 84 01 00 00    	je     c0004f79 <f_open+0x238>
c0004df5:	85 ed                	test   ebp,ebp
c0004df7:	74 20                	je     c0004e19 <f_open+0xd8>
c0004df9:	83 fd 04             	cmp    ebp,0x4
c0004dfc:	0f 85 58 03 00 00    	jne    c000515a <f_open+0x419>
c0004e02:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e06:	83 ce 08             	or     esi,0x8
c0004e09:	e8 8a f2 ff ff       	call   c0004098 <dir_register>
c0004e0e:	89 c5                	mov    ebp,eax
c0004e10:	85 c0                	test   eax,eax
c0004e12:	74 2f                	je     c0004e43 <f_open+0x102>
c0004e14:	e9 41 03 00 00       	jmp    c000515a <f_open+0x419>
c0004e19:	bd 07 00 00 00       	mov    ebp,0x7
c0004e1e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e23:	0f 85 31 03 00 00    	jne    c000515a <f_open+0x419>
c0004e29:	bd 08 00 00 00       	mov    ebp,0x8
c0004e2e:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e34:	0f 85 20 03 00 00    	jne    c000515a <f_open+0x419>
c0004e3a:	83 e7 08             	and    edi,0x8
c0004e3d:	0f 84 65 01 00 00    	je     c0004fa8 <f_open+0x267>
c0004e43:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e47:	8a 02                	mov    al,BYTE PTR [edx]
c0004e49:	3c 04                	cmp    al,0x4
c0004e4b:	0f 85 97 00 00 00    	jne    c0004ee8 <f_open+0x1a7>
c0004e51:	8d 42 10             	lea    eax,[edx+0x10]
c0004e54:	89 13                	mov    DWORD PTR [ebx],edx
c0004e56:	89 da                	mov    edx,ebx
c0004e58:	e8 80 fd ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004e5d:	31 d2                	xor    edx,edx
c0004e5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e63:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e68:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e6b:	83 c0 02             	add    eax,0x2
c0004e6e:	e8 32 cc ff ff       	call   c0001aa5 <mem_set>
c0004e73:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e78:	31 d2                	xor    edx,edx
c0004e7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e81:	83 c0 26             	add    eax,0x26
c0004e84:	e8 1c cc ff ff       	call   c0001aa5 <mem_set>
c0004e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e90:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e94:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e99:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e9c:	83 c0 08             	add    eax,0x8
c0004e9f:	e8 e3 cb ff ff       	call   c0001a87 <st_dword>
c0004ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eab:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004eaf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eb3:	e8 b7 ea ff ff       	call   c000396f <store_xdir>
c0004eb8:	89 c5                	mov    ebp,eax
c0004eba:	85 c0                	test   eax,eax
c0004ebc:	0f 85 98 02 00 00    	jne    c000515a <f_open+0x419>
c0004ec2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ec5:	85 d2                	test   edx,edx
c0004ec7:	0f 84 db 00 00 00    	je     c0004fa8 <f_open+0x267>
c0004ecd:	31 c9                	xor    ecx,ecx
c0004ecf:	89 d8                	mov    eax,ebx
c0004ed1:	e8 8e e3 ff ff       	call   c0003264 <remove_chain>
c0004ed6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004eda:	89 c5                	mov    ebp,eax
c0004edc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004edf:	48                   	dec    eax
c0004ee0:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004ee3:	e9 b8 00 00 00       	jmp    c0004fa0 <f_open+0x25f>
c0004ee8:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004eec:	89 ea                	mov    edx,ebp
c0004eee:	e8 99 fc ff ff       	call   c0004b8c <ld_clust.isra.0>
c0004ef3:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ef8:	89 c7                	mov    edi,eax
c0004efa:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004efd:	e8 85 cb ff ff       	call   c0001a87 <st_dword>
c0004f02:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f06:	31 c9                	xor    ecx,ecx
c0004f08:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f10:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f14:	e8 9c fc ff ff       	call   c0004bb5 <st_clust.isra.1>
c0004f19:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f1d:	31 d2                	xor    edx,edx
c0004f1f:	83 c0 1c             	add    eax,0x1c
c0004f22:	e8 60 cb ff ff       	call   c0001a87 <st_dword>
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 ff                	test   edi,edi
c0004f2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f31:	74 75                	je     c0004fa8 <f_open+0x267>
c0004f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f37:	31 c9                	xor    ecx,ecx
c0004f39:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f3c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f47:	89 fa                	mov    edx,edi
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 12 e3 ff ff       	call   c0003264 <remove_chain>
c0004f52:	89 c5                	mov    ebp,eax
c0004f54:	85 c0                	test   eax,eax
c0004f56:	0f 85 fe 01 00 00    	jne    c000515a <f_open+0x419>
c0004f5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f68:	4f                   	dec    edi
c0004f69:	e8 81 d2 ff ff       	call   c00021ef <move_window>
c0004f6e:	89 c5                	mov    ebp,eax
c0004f70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f74:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f77:	eb 27                	jmp    c0004fa0 <f_open+0x25f>
c0004f79:	85 ed                	test   ebp,ebp
c0004f7b:	0f 85 d9 01 00 00    	jne    c000515a <f_open+0x419>
c0004f81:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f85:	bd 04 00 00 00       	mov    ebp,0x4
c0004f8a:	a8 10                	test   al,0x10
c0004f8c:	0f 85 c8 01 00 00    	jne    c000515a <f_open+0x419>
c0004f92:	83 e7 02             	and    edi,0x2
c0004f95:	74 11                	je     c0004fa8 <f_open+0x267>
c0004f97:	bd 07 00 00 00       	mov    ebp,0x7
c0004f9c:	a8 01                	test   al,0x1
c0004f9e:	eb 02                	jmp    c0004fa2 <f_open+0x261>
c0004fa0:	85 ed                	test   ebp,ebp
c0004fa2:	0f 85 b2 01 00 00    	jne    c000515a <f_open+0x419>
c0004fa8:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fae:	74 03                	je     c0004fb3 <f_open+0x272>
c0004fb0:	83 ce 40             	or     esi,0x40
c0004fb3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fb7:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fba:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fbd:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fc0:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fc3:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fc7:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fca:	8a 02                	mov    al,BYTE PTR [edx]
c0004fcc:	3c 04                	cmp    al,0x4
c0004fce:	75 2a                	jne    c0004ffa <f_open+0x2b9>
c0004fd0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004fd4:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004fd9:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004fdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004fe0:	30 c0                	xor    al,al
c0004fe2:	09 c8                	or     eax,ecx
c0004fe4:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004fe7:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004feb:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004fee:	8d 42 10             	lea    eax,[edx+0x10]
c0004ff1:	89 da                	mov    edx,ebx
c0004ff3:	e8 e5 fb ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004ff8:	eb 1c                	jmp    c0005016 <f_open+0x2d5>
c0004ffa:	89 fa                	mov    edx,edi
c0004ffc:	e8 8b fb ff ff       	call   c0004b8c <ld_clust.isra.0>
c0005001:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005004:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005007:	e8 12 ca ff ff       	call   c0001a1e <ld_dword>
c000500c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005013:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000501a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005021:	89 03                	mov    DWORD PTR [ebx],eax
c0005023:	31 d2                	xor    edx,edx
c0005025:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005029:	b9 00 02 00 00       	mov    ecx,0x200
c000502e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005032:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005036:	89 f0                	mov    eax,esi
c0005038:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000503f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005042:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005049:	8d 43 50             	lea    eax,[ebx+0x50]
c000504c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005053:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000505a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000505e:	e8 42 ca ff ff       	call   c0001aa5 <mem_set>
c0005063:	83 e6 20             	and    esi,0x20
c0005066:	75 07                	jne    c000506f <f_open+0x32e>
c0005068:	31 ed                	xor    ebp,ebp
c000506a:	e9 eb 00 00 00       	jmp    c000515a <f_open+0x419>
c000506f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005072:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005075:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005079:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000507d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005081:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005085:	74 e1                	je     c0005068 <f_open+0x327>
c0005087:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000508b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000508f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005092:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005095:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005099:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000509c:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050a0:	31 ff                	xor    edi,edi
c00050a2:	c1 e5 09             	shl    ebp,0x9
c00050a5:	89 ee                	mov    esi,ebp
c00050a7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050ab:	89 f8                	mov    eax,edi
c00050ad:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050b1:	73 22                	jae    c00050d5 <f_open+0x394>
c00050b3:	89 d8                	mov    eax,ebx
c00050b5:	e8 bd dc ff ff       	call   c0002d77 <get_fat>
c00050ba:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050be:	89 c2                	mov    edx,eax
c00050c0:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050c4:	83 f8 01             	cmp    eax,0x1
c00050c7:	76 10                	jbe    c00050d9 <f_open+0x398>
c00050c9:	83 f8 ff             	cmp    eax,0xffffffff
c00050cc:	75 d9                	jne    c00050a7 <f_open+0x366>
c00050ce:	bd 01 00 00 00       	mov    ebp,0x1
c00050d3:	eb 09                	jmp    c00050de <f_open+0x39d>
c00050d5:	31 ed                	xor    ebp,ebp
c00050d7:	eb 05                	jmp    c00050de <f_open+0x39d>
c00050d9:	bd 02 00 00 00       	mov    ebp,0x2
c00050de:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00050e1:	85 ed                	test   ebp,ebp
c00050e3:	75 75                	jne    c000515a <f_open+0x419>
c00050e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050e9:	25 ff 01 00 00       	and    eax,0x1ff
c00050ee:	0f 84 74 ff ff ff    	je     c0005068 <f_open+0x327>
c00050f4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00050f8:	bd 02 00 00 00       	mov    ebp,0x2
c00050fd:	89 c8                	mov    eax,ecx
c00050ff:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005103:	e8 a2 cb ff ff       	call   c0001caa <clst2sect>
c0005108:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000510c:	89 d7                	mov    edi,edx
c000510e:	09 c7                	or     edi,eax
c0005110:	74 48                	je     c000515a <f_open+0x419>
c0005112:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005116:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000511a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005122:	0f ac fe 09          	shrd   esi,edi,0x9
c0005126:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000512a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000512e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005131:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005135:	83 ec 0c             	sub    esp,0xc
c0005138:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000513b:	6a 01                	push   0x1
c000513d:	52                   	push   edx
c000513e:	50                   	push   eax
c000513f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005143:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005147:	50                   	push   eax
c0005148:	e8 79 c8 ff ff       	call   c00019c6 <disk_read>
c000514d:	83 c4 20             	add    esp,0x20
c0005150:	85 c0                	test   eax,eax
c0005152:	0f 95 c0             	setne  al
c0005155:	0f b6 c0             	movzx  eax,al
c0005158:	89 c5                	mov    ebp,eax
c000515a:	83 ec 0c             	sub    esp,0xc
c000515d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005161:	e8 f4 30 00 00       	call   c000825a <ff_memfree>
c0005166:	83 c4 10             	add    esp,0x10
c0005169:	85 ed                	test   ebp,ebp
c000516b:	74 06                	je     c0005173 <f_open+0x432>
c000516d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005173:	83 c4 7c             	add    esp,0x7c
c0005176:	89 e8                	mov    eax,ebp
c0005178:	5b                   	pop    ebx
c0005179:	5e                   	pop    esi
c000517a:	5f                   	pop    edi
c000517b:	5d                   	pop    ebp
c000517c:	c3                   	ret    

c000517d <f_read>:
c000517d:	55                   	push   ebp
c000517e:	57                   	push   edi
c000517f:	56                   	push   esi
c0005180:	53                   	push   ebx
c0005181:	83 ec 2c             	sub    esp,0x2c
c0005184:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005188:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000518c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005192:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005196:	89 d8                	mov    eax,ebx
c0005198:	e8 77 cf ff ff       	call   c0002114 <validate>
c000519d:	89 c5                	mov    ebp,eax
c000519f:	85 c0                	test   eax,eax
c00051a1:	0f 85 4c 02 00 00    	jne    c00053f3 <f_read+0x276>
c00051a7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051ab:	85 ed                	test   ebp,ebp
c00051ad:	0f 85 40 02 00 00    	jne    c00053f3 <f_read+0x276>
c00051b3:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051b7:	0f 84 31 02 00 00    	je     c00053ee <f_read+0x271>
c00051bd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051c0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051c3:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051c6:	bf 00 00 00 00       	mov    edi,0x0
c00051cb:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051ce:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051d2:	89 d1                	mov    ecx,edx
c00051d4:	19 f9                	sbb    ecx,edi
c00051d6:	0f 83 cf 00 00 00    	jae    c00052ab <f_read+0x12e>
c00051dc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051e0:	e9 c6 00 00 00       	jmp    c00052ab <f_read+0x12e>
c00051e5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00051e8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00051eb:	89 d0                	mov    eax,edx
c00051ed:	25 ff 01 00 00       	and    eax,0x1ff
c00051f2:	0f 85 c9 01 00 00    	jne    c00053c1 <f_read+0x244>
c00051f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051fc:	89 d6                	mov    esi,edx
c00051fe:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005202:	89 cf                	mov    edi,ecx
c0005204:	48                   	dec    eax
c0005205:	0f ac fe 09          	shrd   esi,edi,0x9
c0005209:	21 f0                	and    eax,esi
c000520b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000520f:	0f 84 a6 00 00 00    	je     c00052bb <f_read+0x13e>
c0005215:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005219:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000521c:	89 c8                	mov    eax,ecx
c000521e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005221:	e8 84 ca ff ff       	call   c0001caa <clst2sect>
c0005226:	89 d7                	mov    edi,edx
c0005228:	09 c7                	or     edi,eax
c000522a:	0f 84 b4 00 00 00    	je     c00052e4 <f_read+0x167>
c0005230:	31 ff                	xor    edi,edi
c0005232:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005236:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005239:	01 c6                	add    esi,eax
c000523b:	11 d7                	adc    edi,edx
c000523d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005245:	0f 86 fd 00 00 00    	jbe    c0005348 <f_read+0x1cb>
c000524b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000524f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005253:	c1 e8 09             	shr    eax,0x9
c0005256:	89 04 24             	mov    DWORD PTR [esp],eax
c0005259:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000525d:	03 14 24             	add    edx,DWORD PTR [esp]
c0005260:	39 c2                	cmp    edx,eax
c0005262:	76 07                	jbe    c000526b <f_read+0xee>
c0005264:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005268:	89 04 24             	mov    DWORD PTR [esp],eax
c000526b:	83 ec 0c             	sub    esp,0xc
c000526e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005272:	57                   	push   edi
c0005273:	56                   	push   esi
c0005274:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005278:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000527c:	50                   	push   eax
c000527d:	e8 44 c7 ff ff       	call   c00019c6 <disk_read>
c0005282:	83 c4 20             	add    esp,0x20
c0005285:	85 c0                	test   eax,eax
c0005287:	75 6e                	jne    c00052f7 <f_read+0x17a>
c0005289:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000528d:	78 7e                	js     c000530d <f_read+0x190>
c000528f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005292:	c1 e6 09             	shl    esi,0x9
c0005295:	31 ff                	xor    edi,edi
c0005297:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000529b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000529f:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052a3:	01 30                	add    DWORD PTR [eax],esi
c00052a5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052a8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052ab:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052b0:	0f 85 2f ff ff ff    	jne    c00051e5 <f_read+0x68>
c00052b6:	e9 38 01 00 00       	jmp    c00053f3 <f_read+0x276>
c00052bb:	89 c8                	mov    eax,ecx
c00052bd:	09 d0                	or     eax,edx
c00052bf:	75 05                	jne    c00052c6 <f_read+0x149>
c00052c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052c4:	eb 19                	jmp    c00052df <f_read+0x162>
c00052c6:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052ca:	74 09                	je     c00052d5 <f_read+0x158>
c00052cc:	89 d8                	mov    eax,ebx
c00052ce:	e8 f8 c9 ff ff       	call   c0001ccb <clmt_clust>
c00052d3:	eb 0a                	jmp    c00052df <f_read+0x162>
c00052d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052d8:	89 d8                	mov    eax,ebx
c00052da:	e8 98 da ff ff       	call   c0002d77 <get_fat>
c00052df:	83 f8 01             	cmp    eax,0x1
c00052e2:	77 0e                	ja     c00052f2 <f_read+0x175>
c00052e4:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00052e8:	bd 02 00 00 00       	mov    ebp,0x2
c00052ed:	e9 01 01 00 00       	jmp    c00053f3 <f_read+0x276>
c00052f2:	83 f8 ff             	cmp    eax,0xffffffff
c00052f5:	75 0e                	jne    c0005305 <f_read+0x188>
c00052f7:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00052fb:	bd 01 00 00 00       	mov    ebp,0x1
c0005300:	e9 ee 00 00 00       	jmp    c00053f3 <f_read+0x276>
c0005305:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005308:	e9 08 ff ff ff       	jmp    c0005215 <f_read+0x98>
c000530d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005310:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005313:	29 f0                	sub    eax,esi
c0005315:	19 fa                	sbb    edx,edi
c0005317:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000531a:	89 d7                	mov    edi,edx
c000531c:	ba 00 00 00 00       	mov    edx,0x0
c0005321:	89 f9                	mov    ecx,edi
c0005323:	19 d1                	sbb    ecx,edx
c0005325:	0f 83 64 ff ff ff    	jae    c000528f <f_read+0x112>
c000532b:	89 c7                	mov    edi,eax
c000532d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005337:	b9 00 02 00 00       	mov    ecx,0x200
c000533c:	01 f8                	add    eax,edi
c000533e:	e8 4d c7 ff ff       	call   c0001a90 <mem_cpy>
c0005343:	e9 47 ff ff ff       	jmp    c000528f <f_read+0x112>
c0005348:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000534b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000534e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005351:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005355:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005359:	75 05                	jne    c0005360 <f_read+0x1e3>
c000535b:	39 34 24             	cmp    DWORD PTR [esp],esi
c000535e:	74 5b                	je     c00053bb <f_read+0x23e>
c0005360:	8d 43 50             	lea    eax,[ebx+0x50]
c0005363:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005367:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000536b:	79 2a                	jns    c0005397 <f_read+0x21a>
c000536d:	83 ec 0c             	sub    esp,0xc
c0005370:	6a 01                	push   0x1
c0005372:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005376:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000537a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000537e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005382:	50                   	push   eax
c0005383:	e8 54 c6 ff ff       	call   c00019dc <disk_write>
c0005388:	83 c4 20             	add    esp,0x20
c000538b:	85 c0                	test   eax,eax
c000538d:	0f 85 64 ff ff ff    	jne    c00052f7 <f_read+0x17a>
c0005393:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005397:	83 ec 0c             	sub    esp,0xc
c000539a:	6a 01                	push   0x1
c000539c:	57                   	push   edi
c000539d:	56                   	push   esi
c000539e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053a2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053aa:	50                   	push   eax
c00053ab:	e8 16 c6 ff ff       	call   c00019c6 <disk_read>
c00053b0:	83 c4 20             	add    esp,0x20
c00053b3:	85 c0                	test   eax,eax
c00053b5:	0f 85 3c ff ff ff    	jne    c00052f7 <f_read+0x17a>
c00053bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053c4:	ba 00 02 00 00       	mov    edx,0x200
c00053c9:	25 ff 01 00 00       	and    eax,0x1ff
c00053ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053d2:	29 c2                	sub    edx,eax
c00053d4:	39 d6                	cmp    esi,edx
c00053d6:	76 02                	jbe    c00053da <f_read+0x25d>
c00053d8:	89 d6                	mov    esi,edx
c00053da:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053de:	89 f1                	mov    ecx,esi
c00053e0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e4:	e8 a7 c6 ff ff       	call   c0001a90 <mem_cpy>
c00053e9:	e9 a7 fe ff ff       	jmp    c0005295 <f_read+0x118>
c00053ee:	bd 07 00 00 00       	mov    ebp,0x7
c00053f3:	83 c4 2c             	add    esp,0x2c
c00053f6:	89 e8                	mov    eax,ebp
c00053f8:	5b                   	pop    ebx
c00053f9:	5e                   	pop    esi
c00053fa:	5f                   	pop    edi
c00053fb:	5d                   	pop    ebp
c00053fc:	c3                   	ret    

c00053fd <f_write>:
c00053fd:	55                   	push   ebp
c00053fe:	57                   	push   edi
c00053ff:	56                   	push   esi
c0005400:	53                   	push   ebx
c0005401:	83 ec 2c             	sub    esp,0x2c
c0005404:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005408:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000540c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005412:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f7 cc ff ff       	call   c0002114 <validate>
c000541d:	89 c5                	mov    ebp,eax
c000541f:	85 c0                	test   eax,eax
c0005421:	0f 85 86 02 00 00    	jne    c00056ad <f_write+0x2b0>
c0005427:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000542b:	85 ed                	test   ebp,ebp
c000542d:	0f 85 7a 02 00 00    	jne    c00056ad <f_write+0x2b0>
c0005433:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005437:	0f 84 6b 02 00 00    	je     c00056a8 <f_write+0x2ab>
c000543d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005441:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005444:	0f 84 43 01 00 00    	je     c000558d <f_write+0x190>
c000544a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000544d:	89 c1                	mov    ecx,eax
c000544f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005453:	0f 83 34 01 00 00    	jae    c000558d <f_write+0x190>
c0005459:	f7 d0                	not    eax
c000545b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000545f:	e9 29 01 00 00       	jmp    c000558d <f_write+0x190>
c0005464:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005467:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000546a:	89 d0                	mov    eax,edx
c000546c:	25 ff 01 00 00       	and    eax,0x1ff
c0005471:	0f 85 00 02 00 00    	jne    c0005677 <f_write+0x27a>
c0005477:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000547b:	89 d6                	mov    esi,edx
c000547d:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005481:	89 cf                	mov    edi,ecx
c0005483:	48                   	dec    eax
c0005484:	0f ac fe 09          	shrd   esi,edi,0x9
c0005488:	21 f0                	and    eax,esi
c000548a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000548e:	0f 84 06 01 00 00    	je     c000559a <f_write+0x19d>
c0005494:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005498:	0f 88 6e 01 00 00    	js     c000560c <f_write+0x20f>
c000549e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054a2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054a5:	89 c8                	mov    eax,ecx
c00054a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054ab:	e8 fa c7 ff ff       	call   c0001caa <clst2sect>
c00054b0:	89 d1                	mov    ecx,edx
c00054b2:	09 c1                	or     ecx,eax
c00054b4:	0f 84 1c 01 00 00    	je     c00055d6 <f_write+0x1d9>
c00054ba:	31 ff                	xor    edi,edi
c00054bc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054c4:	01 c6                	add    esi,eax
c00054c6:	11 d7                	adc    edi,edx
c00054c8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054d0:	0f 86 63 01 00 00    	jbe    c0005639 <f_write+0x23c>
c00054d6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054de:	c1 e8 09             	shr    eax,0x9
c00054e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054e5:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054e9:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00054ed:	39 c2                	cmp    edx,eax
c00054ef:	76 08                	jbe    c00054f9 <f_write+0xfc>
c00054f1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054f9:	83 ec 0c             	sub    esp,0xc
c00054fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005500:	57                   	push   edi
c0005501:	56                   	push   esi
c0005502:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005506:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000550a:	50                   	push   eax
c000550b:	e8 cc c4 ff ff       	call   c00019dc <disk_write>
c0005510:	83 c4 20             	add    esp,0x20
c0005513:	85 c0                	test   eax,eax
c0005515:	0f 85 ce 00 00 00    	jne    c00055e9 <f_write+0x1ec>
c000551b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000551e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005521:	29 f0                	sub    eax,esi
c0005523:	19 fa                	sbb    edx,edi
c0005525:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005529:	89 d7                	mov    edi,edx
c000552b:	ba 00 00 00 00       	mov    edx,0x0
c0005530:	89 f9                	mov    ecx,edi
c0005532:	19 d1                	sbb    ecx,edx
c0005534:	73 1c                	jae    c0005552 <f_write+0x155>
c0005536:	89 c7                	mov    edi,eax
c0005538:	b9 00 02 00 00       	mov    ecx,0x200
c000553d:	c1 e7 09             	shl    edi,0x9
c0005540:	8d 43 50             	lea    eax,[ebx+0x50]
c0005543:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005547:	89 fa                	mov    edx,edi
c0005549:	e8 42 c5 ff ff       	call   c0001a90 <mem_cpy>
c000554e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005552:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005556:	c1 e6 09             	shl    esi,0x9
c0005559:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000555d:	31 ff                	xor    edi,edi
c000555f:	01 30                	add    DWORD PTR [eax],esi
c0005561:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005565:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005569:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000556c:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c000556f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005572:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005575:	89 c1                	mov    ecx,eax
c0005577:	39 f2                	cmp    edx,esi
c0005579:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000557c:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000557f:	19 f9                	sbb    ecx,edi
c0005581:	73 04                	jae    c0005587 <f_write+0x18a>
c0005583:	89 f2                	mov    edx,esi
c0005585:	89 f8                	mov    eax,edi
c0005587:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000558a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000558d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005592:	0f 85 cc fe ff ff    	jne    c0005464 <f_write+0x67>
c0005598:	eb 2e                	jmp    c00055c8 <f_write+0x1cb>
c000559a:	89 c8                	mov    eax,ecx
c000559c:	09 d0                	or     eax,edx
c000559e:	75 0b                	jne    c00055ab <f_write+0x1ae>
c00055a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055a3:	31 d2                	xor    edx,edx
c00055a5:	85 c0                	test   eax,eax
c00055a7:	75 28                	jne    c00055d1 <f_write+0x1d4>
c00055a9:	eb 12                	jmp    c00055bd <f_write+0x1c0>
c00055ab:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055af:	74 09                	je     c00055ba <f_write+0x1bd>
c00055b1:	89 d8                	mov    eax,ebx
c00055b3:	e8 13 c7 ff ff       	call   c0001ccb <clmt_clust>
c00055b8:	eb 0a                	jmp    c00055c4 <f_write+0x1c7>
c00055ba:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055bd:	89 d8                	mov    eax,ebx
c00055bf:	e8 a1 da ff ff       	call   c0003065 <create_chain>
c00055c4:	85 c0                	test   eax,eax
c00055c6:	75 09                	jne    c00055d1 <f_write+0x1d4>
c00055c8:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055cc:	e9 dc 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055d1:	83 f8 01             	cmp    eax,0x1
c00055d4:	75 0e                	jne    c00055e4 <f_write+0x1e7>
c00055d6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055da:	bd 02 00 00 00       	mov    ebp,0x2
c00055df:	e9 c9 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055e4:	83 f8 ff             	cmp    eax,0xffffffff
c00055e7:	75 0e                	jne    c00055f7 <f_write+0x1fa>
c00055e9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00055ed:	bd 01 00 00 00       	mov    ebp,0x1
c00055f2:	e9 b6 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055f7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00055fa:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00055fe:	0f 85 90 fe ff ff    	jne    c0005494 <f_write+0x97>
c0005604:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005607:	e9 88 fe ff ff       	jmp    c0005494 <f_write+0x97>
c000560c:	83 ec 0c             	sub    esp,0xc
c000560f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005612:	6a 01                	push   0x1
c0005614:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005617:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000561a:	50                   	push   eax
c000561b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000561f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005623:	50                   	push   eax
c0005624:	e8 b3 c3 ff ff       	call   c00019dc <disk_write>
c0005629:	83 c4 20             	add    esp,0x20
c000562c:	85 c0                	test   eax,eax
c000562e:	75 b9                	jne    c00055e9 <f_write+0x1ec>
c0005630:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005634:	e9 65 fe ff ff       	jmp    c000549e <f_write+0xa1>
c0005639:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000563c:	75 05                	jne    c0005643 <f_write+0x246>
c000563e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005641:	74 2e                	je     c0005671 <f_write+0x274>
c0005643:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005646:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005649:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000564c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000564f:	73 20                	jae    c0005671 <f_write+0x274>
c0005651:	83 ec 0c             	sub    esp,0xc
c0005654:	8d 43 50             	lea    eax,[ebx+0x50]
c0005657:	6a 01                	push   0x1
c0005659:	57                   	push   edi
c000565a:	56                   	push   esi
c000565b:	50                   	push   eax
c000565c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005660:	50                   	push   eax
c0005661:	e8 60 c3 ff ff       	call   c00019c6 <disk_read>
c0005666:	83 c4 20             	add    esp,0x20
c0005669:	85 c0                	test   eax,eax
c000566b:	0f 85 78 ff ff ff    	jne    c00055e9 <f_write+0x1ec>
c0005671:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005674:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005677:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000567a:	ba 00 02 00 00       	mov    edx,0x200
c000567f:	25 ff 01 00 00       	and    eax,0x1ff
c0005684:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005688:	29 c2                	sub    edx,eax
c000568a:	39 d6                	cmp    esi,edx
c000568c:	76 02                	jbe    c0005690 <f_write+0x293>
c000568e:	89 d6                	mov    esi,edx
c0005690:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005694:	89 f1                	mov    ecx,esi
c0005696:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000569a:	e8 f1 c3 ff ff       	call   c0001a90 <mem_cpy>
c000569f:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056a3:	e9 b1 fe ff ff       	jmp    c0005559 <f_write+0x15c>
c00056a8:	bd 07 00 00 00       	mov    ebp,0x7
c00056ad:	83 c4 2c             	add    esp,0x2c
c00056b0:	89 e8                	mov    eax,ebp
c00056b2:	5b                   	pop    ebx
c00056b3:	5e                   	pop    esi
c00056b4:	5f                   	pop    edi
c00056b5:	5d                   	pop    ebp
c00056b6:	c3                   	ret    

c00056b7 <f_sync>:
c00056b7:	56                   	push   esi
c00056b8:	53                   	push   ebx
c00056b9:	83 ec 64             	sub    esp,0x64
c00056bc:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056c0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056c4:	89 d8                	mov    eax,ebx
c00056c6:	e8 49 ca ff ff       	call   c0002114 <validate>
c00056cb:	85 c0                	test   eax,eax
c00056cd:	0f 85 ba 01 00 00    	jne    c000588d <f_sync+0x1d6>
c00056d3:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056d6:	f6 c2 40             	test   dl,0x40
c00056d9:	0f 84 ae 01 00 00    	je     c000588d <f_sync+0x1d6>
c00056df:	84 d2                	test   dl,dl
c00056e1:	79 33                	jns    c0005716 <f_sync+0x5f>
c00056e3:	83 ec 0c             	sub    esp,0xc
c00056e6:	8d 43 50             	lea    eax,[ebx+0x50]
c00056e9:	6a 01                	push   0x1
c00056eb:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00056ee:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00056f1:	50                   	push   eax
c00056f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00056fa:	50                   	push   eax
c00056fb:	e8 dc c2 ff ff       	call   c00019dc <disk_write>
c0005700:	83 c4 20             	add    esp,0x20
c0005703:	89 c2                	mov    edx,eax
c0005705:	b8 01 00 00 00       	mov    eax,0x1
c000570a:	85 d2                	test   edx,edx
c000570c:	0f 85 7b 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005712:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000571a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000571d:	0f 85 11 01 00 00    	jne    c0005834 <f_sync+0x17d>
c0005723:	89 d8                	mov    eax,ebx
c0005725:	e8 13 d6 ff ff       	call   c0002d3d <fill_first_frag>
c000572a:	85 c0                	test   eax,eax
c000572c:	0f 85 5b 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005732:	83 c9 ff             	or     ecx,0xffffffff
c0005735:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005738:	89 d8                	mov    eax,ebx
c000573a:	e8 c9 d5 ff ff       	call   c0002d08 <fill_last_frag>
c000573f:	85 c0                	test   eax,eax
c0005741:	0f 85 46 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005747:	83 ec 0c             	sub    esp,0xc
c000574a:	68 60 04 00 00       	push   0x460
c000574f:	e8 f0 2a 00 00       	call   c0008244 <ff_memalloc>
c0005754:	83 c4 10             	add    esp,0x10
c0005757:	89 c6                	mov    esi,eax
c0005759:	b8 11 00 00 00       	mov    eax,0x11
c000575e:	85 f6                	test   esi,esi
c0005760:	0f 84 27 01 00 00    	je     c000588d <f_sync+0x1d6>
c0005766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000576a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005770:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005773:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005776:	89 da                	mov    edx,ebx
c0005778:	8d 44 24 14          	lea    eax,[esp+0x14]
c000577c:	e8 af df ff ff       	call   c0003730 <load_obj_xdir>
c0005781:	85 c0                	test   eax,eax
c0005783:	0f 85 95 00 00 00    	jne    c000581e <f_sync+0x167>
c0005789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000578d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005790:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005794:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005797:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c000579a:	83 ca 01             	or     edx,0x1
c000579d:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057a0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057a6:	83 c0 34             	add    eax,0x34
c00057a9:	e8 d9 c2 ff ff       	call   c0001a87 <st_dword>
c00057ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057b2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057b5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057b8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057bb:	83 c0 38             	add    eax,0x38
c00057be:	e8 c7 c2 ff ff       	call   c0001a8a <st_qword>
c00057c3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ca:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057cd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d0:	83 c0 28             	add    eax,0x28
c00057d3:	e8 b2 c2 ff ff       	call   c0001a8a <st_qword>
c00057d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057dc:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e4:	83 c0 0c             	add    eax,0xc
c00057e7:	e8 9b c2 ff ff       	call   c0001a87 <st_dword>
c00057ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057f3:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c00057f7:	31 d2                	xor    edx,edx
c00057f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057fc:	83 c0 10             	add    eax,0x10
c00057ff:	e8 83 c2 ff ff       	call   c0001a87 <st_dword>
c0005804:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005808:	e8 62 e1 ff ff       	call   c000396f <store_xdir>
c000580d:	85 c0                	test   eax,eax
c000580f:	75 0d                	jne    c000581e <f_sync+0x167>
c0005811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005815:	e8 00 eb ff ff       	call   c000431a <sync_fs>
c000581a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000581e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	56                   	push   esi
c0005826:	e8 2f 2a 00 00       	call   c000825a <ff_memfree>
c000582b:	83 c4 10             	add    esp,0x10
c000582e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005832:	eb 59                	jmp    c000588d <f_sync+0x1d6>
c0005834:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005837:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000583a:	e8 b0 c9 ff ff       	call   c00021ef <move_window>
c000583f:	85 c0                	test   eax,eax
c0005841:	75 4a                	jne    c000588d <f_sync+0x1d6>
c0005843:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005846:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000584a:	89 f2                	mov    edx,esi
c000584c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000584f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005851:	e8 5f f3 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0005856:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005859:	8d 46 1c             	lea    eax,[esi+0x1c]
c000585c:	e8 26 c2 ff ff       	call   c0001a87 <st_dword>
c0005861:	8d 46 16             	lea    eax,[esi+0x16]
c0005864:	ba 00 00 21 50       	mov    edx,0x50210000
c0005869:	e8 19 c2 ff ff       	call   c0001a87 <st_dword>
c000586e:	8d 46 12             	lea    eax,[esi+0x12]
c0005871:	31 d2                	xor    edx,edx
c0005873:	e8 0b c2 ff ff       	call   c0001a83 <st_word>
c0005878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000587c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005884:	e8 91 ea ff ff       	call   c000431a <sync_fs>
c0005889:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000588d:	83 c4 64             	add    esp,0x64
c0005890:	5b                   	pop    ebx
c0005891:	5e                   	pop    esi
c0005892:	c3                   	ret    

c0005893 <f_close>:
c0005893:	53                   	push   ebx
c0005894:	83 ec 24             	sub    esp,0x24
c0005897:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000589b:	53                   	push   ebx
c000589c:	e8 16 fe ff ff       	call   c00056b7 <f_sync>
c00058a1:	83 c4 10             	add    esp,0x10
c00058a4:	85 c0                	test   eax,eax
c00058a6:	75 15                	jne    c00058bd <f_close+0x2a>
c00058a8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058ac:	89 d8                	mov    eax,ebx
c00058ae:	e8 61 c8 ff ff       	call   c0002114 <validate>
c00058b3:	85 c0                	test   eax,eax
c00058b5:	75 06                	jne    c00058bd <f_close+0x2a>
c00058b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058bd:	83 c4 18             	add    esp,0x18
c00058c0:	5b                   	pop    ebx
c00058c1:	c3                   	ret    

c00058c2 <f_lseek>:
c00058c2:	55                   	push   ebp
c00058c3:	57                   	push   edi
c00058c4:	56                   	push   esi
c00058c5:	53                   	push   ebx
c00058c6:	83 ec 3c             	sub    esp,0x3c
c00058c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058cd:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058d1:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00058d8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058dc:	89 d8                	mov    eax,ebx
c00058de:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00058e2:	e8 2d c8 ff ff       	call   c0002114 <validate>
c00058e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058eb:	85 c0                	test   eax,eax
c00058ed:	0f 85 7a 04 00 00    	jne    c0005d6d <f_lseek+0x4ab>
c00058f3:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c00058f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058fb:	85 c0                	test   eax,eax
c00058fd:	0f 85 6a 04 00 00    	jne    c0005d6d <f_lseek+0x4ab>
c0005903:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005907:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000590a:	74 0c                	je     c0005918 <f_lseek+0x56>
c000590c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000590f:	85 c0                	test   eax,eax
c0005911:	75 1f                	jne    c0005932 <f_lseek+0x70>
c0005913:	e9 b5 01 00 00       	jmp    c0005acd <f_lseek+0x20b>
c0005918:	83 c9 ff             	or     ecx,0xffffffff
c000591b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000591e:	89 d8                	mov    eax,ebx
c0005920:	e8 e3 d3 ff ff       	call   c0002d08 <fill_last_frag>
c0005925:	85 c0                	test   eax,eax
c0005927:	74 e3                	je     c000590c <f_lseek+0x4a>
c0005929:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000592d:	e9 3b 04 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c0005932:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005937:	0f 85 ac 00 00 00    	jne    c00059e9 <f_lseek+0x127>
c000593d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005941:	0f 85 a2 00 00 00    	jne    c00059e9 <f_lseek+0x127>
c0005947:	8d 78 04             	lea    edi,[eax+0x4]
c000594a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c000594d:	8b 00                	mov    eax,DWORD PTR [eax]
c000594f:	be 02 00 00 00       	mov    esi,0x2
c0005954:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005958:	85 ed                	test   ebp,ebp
c000595a:	74 73                	je     c00059cf <f_lseek+0x10d>
c000595c:	89 e9                	mov    ecx,ebp
c000595e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005965:	ff 04 24             	inc    DWORD PTR [esp]
c0005968:	89 ca                	mov    edx,ecx
c000596a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000596e:	89 d8                	mov    eax,ebx
c0005970:	e8 02 d4 ff ff       	call   c0002d77 <get_fat>
c0005975:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005979:	83 f8 01             	cmp    eax,0x1
c000597c:	77 11                	ja     c000598f <f_lseek+0xcd>
c000597e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005982:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c000598a:	e9 de 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c000598f:	83 f8 ff             	cmp    eax,0xffffffff
c0005992:	75 11                	jne    c00059a5 <f_lseek+0xe3>
c0005994:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005998:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059a0:	e9 c8 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c00059a5:	8d 51 01             	lea    edx,[ecx+0x1]
c00059a8:	89 c1                	mov    ecx,eax
c00059aa:	39 c2                	cmp    edx,eax
c00059ac:	74 b7                	je     c0005965 <f_lseek+0xa3>
c00059ae:	83 c6 02             	add    esi,0x2
c00059b1:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059b5:	72 0b                	jb     c00059c2 <f_lseek+0x100>
c00059b7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059ba:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059bd:	89 0f                	mov    DWORD PTR [edi],ecx
c00059bf:	83 c7 08             	add    edi,0x8
c00059c2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059c6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059c9:	76 04                	jbe    c00059cf <f_lseek+0x10d>
c00059cb:	89 c5                	mov    ebp,eax
c00059cd:	eb 8d                	jmp    c000595c <f_lseek+0x9a>
c00059cf:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059d2:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00059d6:	89 30                	mov    DWORD PTR [eax],esi
c00059d8:	0f 87 87 03 00 00    	ja     c0005d65 <f_lseek+0x4a3>
c00059de:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00059e4:	e9 84 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c00059e9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00059ec:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00059ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00059f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00059fb:	39 04 24             	cmp    DWORD PTR [esp],eax
c00059fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a02:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a06:	73 0f                	jae    c0005a17 <f_lseek+0x155>
c0005a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a0b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a1b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a1f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a22:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a29:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a2d:	0f 84 3a 03 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005a33:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a37:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a3b:	83 c6 ff             	add    esi,0xffffffff
c0005a3e:	89 d8                	mov    eax,ebx
c0005a40:	83 d7 ff             	adc    edi,0xffffffff
c0005a43:	89 f2                	mov    edx,esi
c0005a45:	89 f9                	mov    ecx,edi
c0005a47:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a4b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a4e:	e8 78 c2 ff ff       	call   c0001ccb <clmt_clust>
c0005a53:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a57:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a5a:	89 c2                	mov    edx,eax
c0005a5c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a60:	89 c8                	mov    eax,ecx
c0005a62:	e8 43 c2 ff ff       	call   c0001caa <clst2sect>
c0005a67:	89 d7                	mov    edi,edx
c0005a69:	09 c7                	or     edi,eax
c0005a6b:	0f 84 0d ff ff ff    	je     c000597e <f_lseek+0xbc>
c0005a71:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005a75:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005a7b:	0f 84 ec 02 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005a81:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a89:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a8c:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a90:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a94:	4d                   	dec    ebp
c0005a95:	31 ff                	xor    edi,edi
c0005a97:	21 ee                	and    esi,ebp
c0005a99:	01 c6                	add    esi,eax
c0005a9b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a9e:	11 d7                	adc    edi,edx
c0005aa0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005aa3:	39 fa                	cmp    edx,edi
c0005aa5:	75 08                	jne    c0005aaf <f_lseek+0x1ed>
c0005aa7:	39 f0                	cmp    eax,esi
c0005aa9:	0f 84 be 02 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005aaf:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ab2:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ab6:	0f 89 80 02 00 00    	jns    c0005d3c <f_lseek+0x47a>
c0005abc:	83 ec 0c             	sub    esp,0xc
c0005abf:	6a 01                	push   0x1
c0005ac1:	52                   	push   edx
c0005ac2:	50                   	push   eax
c0005ac3:	55                   	push   ebp
c0005ac4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005ac8:	e9 5a 02 00 00       	jmp    c0005d27 <f_lseek+0x465>
c0005acd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ad1:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ad4:	74 16                	je     c0005aec <f_lseek+0x22a>
c0005ad6:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005adb:	76 0f                	jbe    c0005aec <f_lseek+0x22a>
c0005add:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ae4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005aec:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aef:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005af2:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005af5:	89 c7                	mov    edi,eax
c0005af7:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005afb:	73 0d                	jae    c0005b0a <f_lseek+0x248>
c0005afd:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b01:	75 07                	jne    c0005b0a <f_lseek+0x248>
c0005b03:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b0a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b0d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b10:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b14:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b1b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b22:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b25:	75 09                	jne    c0005b30 <f_lseek+0x26e>
c0005b27:	31 f6                	xor    esi,esi
c0005b29:	31 ff                	xor    edi,edi
c0005b2b:	e9 af 01 00 00       	jmp    c0005cdf <f_lseek+0x41d>
c0005b30:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b34:	89 d7                	mov    edi,edx
c0005b36:	c1 e1 09             	shl    ecx,0x9
c0005b39:	09 c7                	or     edi,eax
c0005b3b:	89 cd                	mov    ebp,ecx
c0005b3d:	74 6d                	je     c0005bac <f_lseek+0x2ea>
c0005b3f:	83 c0 ff             	add    eax,0xffffffff
c0005b42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b46:	83 d2 ff             	adc    edx,0xffffffff
c0005b49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b50:	83 c0 ff             	add    eax,0xffffffff
c0005b53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b57:	83 d2 ff             	adc    edx,0xffffffff
c0005b5a:	31 ff                	xor    edi,edi
c0005b5c:	57                   	push   edi
c0005b5d:	51                   	push   ecx
c0005b5e:	52                   	push   edx
c0005b5f:	50                   	push   eax
c0005b60:	e8 17 f1 01 00       	call   c0024c7c <__udivdi3>
c0005b65:	83 c4 10             	add    esp,0x10
c0005b68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005b70:	57                   	push   edi
c0005b71:	55                   	push   ebp
c0005b72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b7a:	e8 fd f0 01 00       	call   c0024c7c <__udivdi3>
c0005b7f:	83 c4 10             	add    esp,0x10
c0005b82:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b86:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b8a:	19 d1                	sbb    ecx,edx
c0005b8c:	72 1e                	jb     c0005bac <f_lseek+0x2ea>
c0005b8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b92:	89 e9                	mov    ecx,ebp
c0005b94:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b97:	f7 d9                	neg    ecx
c0005b99:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b9c:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005ba0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ba3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005ba6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005baa:	eb 28                	jmp    c0005bd4 <f_lseek+0x312>
c0005bac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005baf:	85 c0                	test   eax,eax
c0005bb1:	75 1e                	jne    c0005bd1 <f_lseek+0x30f>
c0005bb3:	31 d2                	xor    edx,edx
c0005bb5:	89 d8                	mov    eax,ebx
c0005bb7:	e8 a9 d4 ff ff       	call   c0003065 <create_chain>
c0005bbc:	83 f8 01             	cmp    eax,0x1
c0005bbf:	0f 84 b9 fd ff ff    	je     c000597e <f_lseek+0xbc>
c0005bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0005bc8:	0f 84 c6 fd ff ff    	je     c0005994 <f_lseek+0xd2>
c0005bce:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bd1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bd4:	85 c0                	test   eax,eax
c0005bd6:	0f 84 4b ff ff ff    	je     c0005b27 <f_lseek+0x265>
c0005bdc:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005be0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005be8:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005beb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005bef:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005bf2:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005bf5:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005bf9:	0f 83 9d 00 00 00    	jae    c0005c9c <f_lseek+0x3da>
c0005bff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c03:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c07:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c0a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c0e:	01 f2                	add    edx,esi
c0005c10:	11 f9                	adc    ecx,edi
c0005c12:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c16:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c1a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c1d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c20:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c23:	f6 c1 02             	test   cl,0x2
c0005c26:	74 35                	je     c0005c5d <f_lseek+0x39b>
c0005c28:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c2c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c2f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c32:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c36:	73 16                	jae    c0005c4e <f_lseek+0x38c>
c0005c38:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c3c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c40:	88 ca                	mov    dl,cl
c0005c42:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c45:	83 ca 40             	or     edx,0x40
c0005c48:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c4b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c4e:	89 c2                	mov    edx,eax
c0005c50:	89 d8                	mov    eax,ebx
c0005c52:	e8 0e d4 ff ff       	call   c0003065 <create_chain>
c0005c57:	85 c0                	test   eax,eax
c0005c59:	75 0b                	jne    c0005c66 <f_lseek+0x3a4>
c0005c5b:	eb 30                	jmp    c0005c8d <f_lseek+0x3cb>
c0005c5d:	89 c2                	mov    edx,eax
c0005c5f:	89 d8                	mov    eax,ebx
c0005c61:	e8 11 d1 ff ff       	call   c0002d77 <get_fat>
c0005c66:	83 f8 ff             	cmp    eax,0xffffffff
c0005c69:	0f 84 25 fd ff ff    	je     c0005994 <f_lseek+0xd2>
c0005c6f:	83 f8 01             	cmp    eax,0x1
c0005c72:	0f 86 06 fd ff ff    	jbe    c000597e <f_lseek+0xbc>
c0005c78:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c7c:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c7f:	0f 86 f9 fc ff ff    	jbe    c000597e <f_lseek+0xbc>
c0005c85:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c88:	e9 5b ff ff ff       	jmp    c0005be8 <f_lseek+0x326>
c0005c8d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c94:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c9c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c9f:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ca3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ca6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ca9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005cac:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005cb2:	0f 84 6f fe ff ff    	je     c0005b27 <f_lseek+0x265>
c0005cb8:	89 c2                	mov    edx,eax
c0005cba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cbe:	e8 e7 bf ff ff       	call   c0001caa <clst2sect>
c0005cc3:	89 d7                	mov    edi,edx
c0005cc5:	09 c7                	or     edi,eax
c0005cc7:	0f 84 b1 fc ff ff    	je     c000597e <f_lseek+0xbc>
c0005ccd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cd4:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cd8:	c1 ef 09             	shr    edi,0x9
c0005cdb:	01 c6                	add    esi,eax
c0005cdd:	11 d7                	adc    edi,edx
c0005cdf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ce2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005ce5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005ce8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005ceb:	19 d1                	sbb    ecx,edx
c0005ced:	73 0a                	jae    c0005cf9 <f_lseek+0x437>
c0005cef:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005cf2:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005cf5:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005cf9:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cfe:	74 6d                	je     c0005d6d <f_lseek+0x4ab>
c0005d00:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d03:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d06:	39 fa                	cmp    edx,edi
c0005d08:	75 04                	jne    c0005d0e <f_lseek+0x44c>
c0005d0a:	39 f0                	cmp    eax,esi
c0005d0c:	74 5f                	je     c0005d6d <f_lseek+0x4ab>
c0005d0e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d11:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d15:	79 25                	jns    c0005d3c <f_lseek+0x47a>
c0005d17:	83 ec 0c             	sub    esp,0xc
c0005d1a:	6a 01                	push   0x1
c0005d1c:	52                   	push   edx
c0005d1d:	50                   	push   eax
c0005d1e:	55                   	push   ebp
c0005d1f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d23:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d27:	50                   	push   eax
c0005d28:	e8 af bc ff ff       	call   c00019dc <disk_write>
c0005d2d:	83 c4 20             	add    esp,0x20
c0005d30:	85 c0                	test   eax,eax
c0005d32:	0f 85 5c fc ff ff    	jne    c0005994 <f_lseek+0xd2>
c0005d38:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d3c:	83 ec 0c             	sub    esp,0xc
c0005d3f:	6a 01                	push   0x1
c0005d41:	57                   	push   edi
c0005d42:	56                   	push   esi
c0005d43:	55                   	push   ebp
c0005d44:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d48:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d4c:	50                   	push   eax
c0005d4d:	e8 74 bc ff ff       	call   c00019c6 <disk_read>
c0005d52:	83 c4 20             	add    esp,0x20
c0005d55:	85 c0                	test   eax,eax
c0005d57:	0f 85 37 fc ff ff    	jne    c0005994 <f_lseek+0xd2>
c0005d5d:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d60:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d63:	eb 08                	jmp    c0005d6d <f_lseek+0x4ab>
c0005d65:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005d6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d71:	83 c4 3c             	add    esp,0x3c
c0005d74:	5b                   	pop    ebx
c0005d75:	5e                   	pop    esi
c0005d76:	5f                   	pop    edi
c0005d77:	5d                   	pop    ebp
c0005d78:	c3                   	ret    

c0005d79 <f_opendir>:
c0005d79:	56                   	push   esi
c0005d7a:	b8 09 00 00 00       	mov    eax,0x9
c0005d7f:	53                   	push   ebx
c0005d80:	83 ec 24             	sub    esp,0x24
c0005d83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d87:	85 db                	test   ebx,ebx
c0005d89:	0f 84 e6 00 00 00    	je     c0005e75 <f_opendir+0xfc>
c0005d8f:	31 c9                	xor    ecx,ecx
c0005d91:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d95:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d99:	e8 03 c7 ff ff       	call   c00024a1 <mount_volume>
c0005d9e:	85 c0                	test   eax,eax
c0005da0:	0f 85 c9 00 00 00    	jne    c0005e6f <f_opendir+0xf6>
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	83 ec 0c             	sub    esp,0xc
c0005dad:	89 03                	mov    DWORD PTR [ebx],eax
c0005daf:	68 60 04 00 00       	push   0x460
c0005db4:	e8 8b 24 00 00       	call   c0008244 <ff_memalloc>
c0005db9:	83 c4 10             	add    esp,0x10
c0005dbc:	89 c6                	mov    esi,eax
c0005dbe:	b8 11 00 00 00       	mov    eax,0x11
c0005dc3:	85 f6                	test   esi,esi
c0005dc5:	0f 84 aa 00 00 00    	je     c0005e75 <f_opendir+0xfc>
c0005dcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005dd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005dd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ddb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ddf:	89 d8                	mov    eax,ebx
c0005de1:	e8 31 ee ff ff       	call   c0004c17 <follow_path>
c0005de6:	85 c0                	test   eax,eax
c0005de8:	75 61                	jne    c0005e4b <f_opendir+0xd2>
c0005dea:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005dee:	78 46                	js     c0005e36 <f_opendir+0xbd>
c0005df0:	b8 05 00 00 00       	mov    eax,0x5
c0005df5:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005df9:	74 50                	je     c0005e4b <f_opendir+0xd2>
c0005dfb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dff:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e01:	3c 04                	cmp    al,0x4
c0005e03:	75 26                	jne    c0005e2b <f_opendir+0xb2>
c0005e05:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e08:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e0b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e0e:	30 d2                	xor    dl,dl
c0005e10:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e14:	09 c2                	or     edx,eax
c0005e16:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e19:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e1c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e1f:	89 da                	mov    edx,ebx
c0005e21:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e24:	e8 b4 ed ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0005e29:	eb 0b                	jmp    c0005e36 <f_opendir+0xbd>
c0005e2b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e2e:	e8 59 ed ff ff       	call   c0004b8c <ld_clust.isra.0>
c0005e33:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3a:	31 d2                	xor    edx,edx
c0005e3c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e40:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e44:	89 d8                	mov    eax,ebx
c0005e46:	e8 22 d1 ff ff       	call   c0002f6d <dir_sdi>
c0005e4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	56                   	push   esi
c0005e53:	e8 02 24 00 00       	call   c000825a <ff_memfree>
c0005e58:	83 c4 10             	add    esp,0x10
c0005e5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e5f:	83 f8 04             	cmp    eax,0x4
c0005e62:	74 06                	je     c0005e6a <f_opendir+0xf1>
c0005e64:	85 c0                	test   eax,eax
c0005e66:	74 0d                	je     c0005e75 <f_opendir+0xfc>
c0005e68:	eb 05                	jmp    c0005e6f <f_opendir+0xf6>
c0005e6a:	b8 05 00 00 00       	mov    eax,0x5
c0005e6f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e75:	83 c4 24             	add    esp,0x24
c0005e78:	5b                   	pop    ebx
c0005e79:	5e                   	pop    esi
c0005e7a:	c3                   	ret    

c0005e7b <f_closedir>:
c0005e7b:	53                   	push   ebx
c0005e7c:	83 ec 18             	sub    esp,0x18
c0005e7f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e83:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e87:	89 d8                	mov    eax,ebx
c0005e89:	e8 86 c2 ff ff       	call   c0002114 <validate>
c0005e8e:	85 c0                	test   eax,eax
c0005e90:	75 06                	jne    c0005e98 <f_closedir+0x1d>
c0005e92:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e98:	83 c4 18             	add    esp,0x18
c0005e9b:	5b                   	pop    ebx
c0005e9c:	c3                   	ret    

c0005e9d <f_readdir>:
c0005e9d:	57                   	push   edi
c0005e9e:	56                   	push   esi
c0005e9f:	53                   	push   ebx
c0005ea0:	83 ec 20             	sub    esp,0x20
c0005ea3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ea7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005eab:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 5e c2 ff ff       	call   c0002114 <validate>
c0005eb6:	85 c0                	test   eax,eax
c0005eb8:	75 77                	jne    c0005f31 <f_readdir+0x94>
c0005eba:	85 ff                	test   edi,edi
c0005ebc:	75 0b                	jne    c0005ec9 <f_readdir+0x2c>
c0005ebe:	31 d2                	xor    edx,edx
c0005ec0:	89 d8                	mov    eax,ebx
c0005ec2:	e8 a6 d0 ff ff       	call   c0002f6d <dir_sdi>
c0005ec7:	eb 68                	jmp    c0005f31 <f_readdir+0x94>
c0005ec9:	83 ec 0c             	sub    esp,0xc
c0005ecc:	68 60 04 00 00       	push   0x460
c0005ed1:	e8 6e 23 00 00       	call   c0008244 <ff_memalloc>
c0005ed6:	83 c4 10             	add    esp,0x10
c0005ed9:	89 c6                	mov    esi,eax
c0005edb:	b8 11 00 00 00       	mov    eax,0x11
c0005ee0:	85 f6                	test   esi,esi
c0005ee2:	74 4d                	je     c0005f31 <f_readdir+0x94>
c0005ee4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ee8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005eee:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ef1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ef4:	31 d2                	xor    edx,edx
c0005ef6:	89 d8                	mov    eax,ebx
c0005ef8:	e8 80 d8 ff ff       	call   c000377d <dir_read>
c0005efd:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f02:	75 19                	jne    c0005f1d <f_readdir+0x80>
c0005f04:	89 fa                	mov    edx,edi
c0005f06:	89 d8                	mov    eax,ebx
c0005f08:	e8 7e ea ff ff       	call   c000498b <get_fileinfo>
c0005f0d:	31 d2                	xor    edx,edx
c0005f0f:	89 d8                	mov    eax,ebx
c0005f11:	e8 af d5 ff ff       	call   c00034c5 <dir_next>
c0005f16:	83 f8 04             	cmp    eax,0x4
c0005f19:	75 02                	jne    c0005f1d <f_readdir+0x80>
c0005f1b:	31 c0                	xor    eax,eax
c0005f1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f21:	83 ec 0c             	sub    esp,0xc
c0005f24:	56                   	push   esi
c0005f25:	e8 30 23 00 00       	call   c000825a <ff_memfree>
c0005f2a:	83 c4 10             	add    esp,0x10
c0005f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f31:	83 c4 20             	add    esp,0x20
c0005f34:	5b                   	pop    ebx
c0005f35:	5e                   	pop    esi
c0005f36:	5f                   	pop    edi
c0005f37:	c3                   	ret    

c0005f38 <f_stat>:
c0005f38:	57                   	push   edi
c0005f39:	31 c9                	xor    ecx,ecx
c0005f3b:	56                   	push   esi
c0005f3c:	53                   	push   ebx
c0005f3d:	83 ec 50             	sub    esp,0x50
c0005f40:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f44:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f48:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f4c:	e8 50 c5 ff ff       	call   c00024a1 <mount_volume>
c0005f51:	89 c3                	mov    ebx,eax
c0005f53:	85 c0                	test   eax,eax
c0005f55:	75 67                	jne    c0005fbe <f_stat+0x86>
c0005f57:	83 ec 0c             	sub    esp,0xc
c0005f5a:	bb 11 00 00 00       	mov    ebx,0x11
c0005f5f:	68 60 04 00 00       	push   0x460
c0005f64:	e8 db 22 00 00       	call   c0008244 <ff_memalloc>
c0005f69:	83 c4 10             	add    esp,0x10
c0005f6c:	89 c6                	mov    esi,eax
c0005f6e:	85 c0                	test   eax,eax
c0005f70:	74 4c                	je     c0005fbe <f_stat+0x86>
c0005f72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f76:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f7c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f7f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f82:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f86:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f8a:	e8 88 ec ff ff       	call   c0004c17 <follow_path>
c0005f8f:	89 c3                	mov    ebx,eax
c0005f91:	85 c0                	test   eax,eax
c0005f93:	75 1d                	jne    c0005fb2 <f_stat+0x7a>
c0005f95:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f9a:	78 11                	js     c0005fad <f_stat+0x75>
c0005f9c:	85 ff                	test   edi,edi
c0005f9e:	74 12                	je     c0005fb2 <f_stat+0x7a>
c0005fa0:	89 fa                	mov    edx,edi
c0005fa2:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fa6:	e8 e0 e9 ff ff       	call   c000498b <get_fileinfo>
c0005fab:	eb 05                	jmp    c0005fb2 <f_stat+0x7a>
c0005fad:	bb 06 00 00 00       	mov    ebx,0x6
c0005fb2:	83 ec 0c             	sub    esp,0xc
c0005fb5:	56                   	push   esi
c0005fb6:	e8 9f 22 00 00       	call   c000825a <ff_memfree>
c0005fbb:	83 c4 10             	add    esp,0x10
c0005fbe:	83 c4 50             	add    esp,0x50
c0005fc1:	89 d8                	mov    eax,ebx
c0005fc3:	5b                   	pop    ebx
c0005fc4:	5e                   	pop    esi
c0005fc5:	5f                   	pop    edi
c0005fc6:	c3                   	ret    

c0005fc7 <f_getfree>:
c0005fc7:	55                   	push   ebp
c0005fc8:	31 c9                	xor    ecx,ecx
c0005fca:	57                   	push   edi
c0005fcb:	56                   	push   esi
c0005fcc:	53                   	push   ebx
c0005fcd:	83 ec 5c             	sub    esp,0x5c
c0005fd0:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005fd4:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fd8:	e8 c4 c4 ff ff       	call   c00024a1 <mount_volume>
c0005fdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fe1:	85 c0                	test   eax,eax
c0005fe3:	0f 85 9d 01 00 00    	jne    c0006186 <f_getfree+0x1bf>
c0005fe9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fed:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005ff1:	89 02                	mov    DWORD PTR [edx],eax
c0005ff3:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005ff6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005ff9:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005ffc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006000:	39 f2                	cmp    edx,esi
c0006002:	77 0b                	ja     c000600f <f_getfree+0x48>
c0006004:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006008:	89 10                	mov    DWORD PTR [eax],edx
c000600a:	e9 77 01 00 00       	jmp    c0006186 <f_getfree+0x1bf>
c000600f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006011:	80 fa 01             	cmp    dl,0x1
c0006014:	75 3a                	jne    c0006050 <f_getfree+0x89>
c0006016:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000601a:	be 02 00 00 00       	mov    esi,0x2
c000601f:	31 db                	xor    ebx,ebx
c0006021:	89 f2                	mov    edx,esi
c0006023:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006027:	e8 4b cd ff ff       	call   c0002d77 <get_fat>
c000602c:	83 f8 ff             	cmp    eax,0xffffffff
c000602f:	0f 84 28 01 00 00    	je     c000615d <f_getfree+0x196>
c0006035:	83 f8 01             	cmp    eax,0x1
c0006038:	0f 84 29 01 00 00    	je     c0006167 <f_getfree+0x1a0>
c000603e:	83 d3 00             	adc    ebx,0x0
c0006041:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006045:	46                   	inc    esi
c0006046:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006049:	77 d6                	ja     c0006021 <f_getfree+0x5a>
c000604b:	e9 25 01 00 00       	jmp    c0006175 <f_getfree+0x1ae>
c0006050:	80 fa 04             	cmp    dl,0x4
c0006053:	0f 85 88 00 00 00    	jne    c00060e1 <f_getfree+0x11a>
c0006059:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000605c:	31 ed                	xor    ebp,ebp
c000605e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006061:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006065:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006069:	31 db                	xor    ebx,ebx
c000606b:	85 ed                	test   ebp,ebp
c000606d:	75 3f                	jne    c00060ae <f_getfree+0xe7>
c000606f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006073:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006077:	83 c0 01             	add    eax,0x1
c000607a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000607e:	83 d2 00             	adc    edx,0x0
c0006081:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006085:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006089:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006091:	e8 59 c1 ff ff       	call   c00021ef <move_window>
c0006096:	85 c0                	test   eax,eax
c0006098:	0f 85 d3 00 00 00    	jne    c0006171 <f_getfree+0x1aa>
c000609e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060aa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060b2:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060b5:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060b9:	89 cf                	mov    edi,ecx
c00060bb:	85 f6                	test   esi,esi
c00060bd:	74 12                	je     c00060d1 <f_getfree+0x10a>
c00060bf:	88 c1                	mov    cl,al
c00060c1:	83 e1 01             	and    ecx,0x1
c00060c4:	80 f9 01             	cmp    cl,0x1
c00060c7:	83 d3 00             	adc    ebx,0x0
c00060ca:	d0 e8                	shr    al,1
c00060cc:	4e                   	dec    esi
c00060cd:	39 fe                	cmp    esi,edi
c00060cf:	75 ea                	jne    c00060bb <f_getfree+0xf4>
c00060d1:	45                   	inc    ebp
c00060d2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00060d8:	85 f6                	test   esi,esi
c00060da:	75 8f                	jne    c000606b <f_getfree+0xa4>
c00060dc:	e9 94 00 00 00       	jmp    c0006175 <f_getfree+0x1ae>
c00060e1:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060e4:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060e7:	31 f6                	xor    esi,esi
c00060e9:	31 db                	xor    ebx,ebx
c00060eb:	85 f6                	test   esi,esi
c00060ed:	75 1b                	jne    c000610a <f_getfree+0x143>
c00060ef:	89 d7                	mov    edi,edx
c00060f1:	89 cd                	mov    ebp,ecx
c00060f3:	83 c7 01             	add    edi,0x1
c00060f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fa:	83 d5 00             	adc    ebp,0x0
c00060fd:	e8 ed c0 ff ff       	call   c00021ef <move_window>
c0006102:	85 c0                	test   eax,eax
c0006104:	75 6b                	jne    c0006171 <f_getfree+0x1aa>
c0006106:	89 fa                	mov    edx,edi
c0006108:	89 e9                	mov    ecx,ebp
c000610a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000610e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006112:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006116:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006119:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000611d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006121:	75 11                	jne    c0006134 <f_getfree+0x16d>
c0006123:	e8 e9 b8 ff ff       	call   c0001a11 <ld_word>
c0006128:	66 83 f8 01          	cmp    ax,0x1
c000612c:	83 d3 00             	adc    ebx,0x0
c000612f:	83 c6 02             	add    esi,0x2
c0006132:	eb 13                	jmp    c0006147 <f_getfree+0x180>
c0006134:	e8 e5 b8 ff ff       	call   c0001a1e <ld_dword>
c0006139:	25 ff ff ff 0f       	and    eax,0xfffffff
c000613e:	83 f8 01             	cmp    eax,0x1
c0006141:	83 d3 00             	adc    ebx,0x0
c0006144:	83 c6 04             	add    esi,0x4
c0006147:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000614d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006151:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006155:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006159:	75 90                	jne    c00060eb <f_getfree+0x124>
c000615b:	eb 18                	jmp    c0006175 <f_getfree+0x1ae>
c000615d:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006165:	eb 0e                	jmp    c0006175 <f_getfree+0x1ae>
c0006167:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000616f:	eb 04                	jmp    c0006175 <f_getfree+0x1ae>
c0006171:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006175:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006179:	89 18                	mov    DWORD PTR [eax],ebx
c000617b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000617f:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006182:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000618a:	83 c4 5c             	add    esp,0x5c
c000618d:	5b                   	pop    ebx
c000618e:	5e                   	pop    esi
c000618f:	5f                   	pop    edi
c0006190:	5d                   	pop    ebp
c0006191:	c3                   	ret    

c0006192 <f_truncate>:
c0006192:	56                   	push   esi
c0006193:	53                   	push   ebx
c0006194:	83 ec 14             	sub    esp,0x14
c0006197:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000619b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000619f:	89 d8                	mov    eax,ebx
c00061a1:	e8 6e bf ff ff       	call   c0002114 <validate>
c00061a6:	89 c6                	mov    esi,eax
c00061a8:	85 c0                	test   eax,eax
c00061aa:	0f 85 d2 00 00 00    	jne    c0006282 <f_truncate+0xf0>
c00061b0:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061b4:	85 f6                	test   esi,esi
c00061b6:	0f 85 c6 00 00 00    	jne    c0006282 <f_truncate+0xf0>
c00061bc:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061c0:	0f 84 b7 00 00 00    	je     c000627d <f_truncate+0xeb>
c00061c6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061c9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061cc:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061cf:	89 d1                	mov    ecx,edx
c00061d1:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061d4:	0f 83 a8 00 00 00    	jae    c0006282 <f_truncate+0xf0>
c00061da:	09 c2                	or     edx,eax
c00061dc:	75 15                	jne    c00061f3 <f_truncate+0x61>
c00061de:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061e1:	31 c9                	xor    ecx,ecx
c00061e3:	89 d8                	mov    eax,ebx
c00061e5:	e8 7a d0 ff ff       	call   c0003264 <remove_chain>
c00061ea:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061f1:	eb 35                	jmp    c0006228 <f_truncate+0x96>
c00061f3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061f6:	89 d8                	mov    eax,ebx
c00061f8:	e8 7a cb ff ff       	call   c0002d77 <get_fat>
c00061fd:	89 c2                	mov    edx,eax
c00061ff:	b8 01 00 00 00       	mov    eax,0x1
c0006204:	83 fa ff             	cmp    edx,0xffffffff
c0006207:	74 1f                	je     c0006228 <f_truncate+0x96>
c0006209:	b8 02 00 00 00       	mov    eax,0x2
c000620e:	83 fa 01             	cmp    edx,0x1
c0006211:	74 15                	je     c0006228 <f_truncate+0x96>
c0006213:	31 c0                	xor    eax,eax
c0006215:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006219:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000621c:	76 0a                	jbe    c0006228 <f_truncate+0x96>
c000621e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006221:	89 d8                	mov    eax,ebx
c0006223:	e8 3c d0 ff ff       	call   c0003264 <remove_chain>
c0006228:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000622b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000622e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006231:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006234:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006237:	83 ca 40             	or     edx,0x40
c000623a:	85 c0                	test   eax,eax
c000623c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000623f:	75 35                	jne    c0006276 <f_truncate+0xe4>
c0006241:	84 d2                	test   dl,dl
c0006243:	79 3d                	jns    c0006282 <f_truncate+0xf0>
c0006245:	83 ec 0c             	sub    esp,0xc
c0006248:	8d 43 50             	lea    eax,[ebx+0x50]
c000624b:	6a 01                	push   0x1
c000624d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006250:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006253:	50                   	push   eax
c0006254:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006258:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000625c:	50                   	push   eax
c000625d:	e8 7a b7 ff ff       	call   c00019dc <disk_write>
c0006262:	83 c4 20             	add    esp,0x20
c0006265:	85 c0                	test   eax,eax
c0006267:	75 08                	jne    c0006271 <f_truncate+0xdf>
c0006269:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000626d:	31 f6                	xor    esi,esi
c000626f:	eb 11                	jmp    c0006282 <f_truncate+0xf0>
c0006271:	b8 01 00 00 00       	mov    eax,0x1
c0006276:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006279:	89 c6                	mov    esi,eax
c000627b:	eb 05                	jmp    c0006282 <f_truncate+0xf0>
c000627d:	be 07 00 00 00       	mov    esi,0x7
c0006282:	89 f0                	mov    eax,esi
c0006284:	83 c4 14             	add    esp,0x14
c0006287:	5b                   	pop    ebx
c0006288:	5e                   	pop    esi
c0006289:	c3                   	ret    

c000628a <f_unlink>:
c000628a:	56                   	push   esi
c000628b:	b9 02 00 00 00       	mov    ecx,0x2
c0006290:	53                   	push   ebx
c0006291:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006297:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000629b:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062a2:	e8 fa c1 ff ff       	call   c00024a1 <mount_volume>
c00062a7:	85 c0                	test   eax,eax
c00062a9:	0f 85 55 01 00 00    	jne    c0006404 <f_unlink+0x17a>
c00062af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062b3:	83 ec 0c             	sub    esp,0xc
c00062b6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062ba:	68 60 04 00 00       	push   0x460
c00062bf:	e8 80 1f 00 00       	call   c0008244 <ff_memalloc>
c00062c4:	83 c4 10             	add    esp,0x10
c00062c7:	89 c3                	mov    ebx,eax
c00062c9:	b8 11 00 00 00       	mov    eax,0x11
c00062ce:	85 db                	test   ebx,ebx
c00062d0:	0f 84 2e 01 00 00    	je     c0006404 <f_unlink+0x17a>
c00062d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062da:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062e0:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062e6:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062ed:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062f1:	e8 21 e9 ff ff       	call   c0004c17 <follow_path>
c00062f6:	85 c0                	test   eax,eax
c00062f8:	0f 85 f2 00 00 00    	jne    c00063f0 <f_unlink+0x166>
c00062fe:	b8 06 00 00 00       	mov    eax,0x6
c0006303:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000630b:	0f 88 df 00 00 00    	js     c00063f0 <f_unlink+0x166>
c0006311:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006316:	74 0a                	je     c0006322 <f_unlink+0x98>
c0006318:	b8 07 00 00 00       	mov    eax,0x7
c000631d:	e9 ce 00 00 00       	jmp    c00063f0 <f_unlink+0x166>
c0006322:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006326:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000632a:	8a 02                	mov    al,BYTE PTR [edx]
c000632c:	3c 04                	cmp    al,0x4
c000632e:	75 12                	jne    c0006342 <f_unlink+0xb8>
c0006330:	8d 42 10             	lea    eax,[edx+0x10]
c0006333:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006337:	e8 a1 e8 ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c000633c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006340:	eb 0e                	jmp    c0006350 <f_unlink+0xc6>
c0006342:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006349:	e8 3e e8 ff ff       	call   c0004b8c <ld_clust.isra.0>
c000634e:	89 c6                	mov    esi,eax
c0006350:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006355:	75 12                	jne    c0006369 <f_unlink+0xdf>
c0006357:	8d 44 24 48          	lea    eax,[esp+0x48]
c000635b:	e8 94 d6 ff ff       	call   c00039f4 <dir_remove>
c0006360:	85 c0                	test   eax,eax
c0006362:	74 6c                	je     c00063d0 <f_unlink+0x146>
c0006364:	e9 87 00 00 00       	jmp    c00063f0 <f_unlink+0x166>
c0006369:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000636d:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006374:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c000637b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000637e:	75 21                	jne    c00063a1 <f_unlink+0x117>
c0006380:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006384:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006388:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000638f:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006396:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c000639a:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063a1:	31 d2                	xor    edx,edx
c00063a3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063aa:	e8 be cb ff ff       	call   c0002f6d <dir_sdi>
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 3d                	jne    c00063f0 <f_unlink+0x166>
c00063b3:	31 d2                	xor    edx,edx
c00063b5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063bc:	e8 bc d3 ff ff       	call   c000377d <dir_read>
c00063c1:	85 c0                	test   eax,eax
c00063c3:	0f 84 4f ff ff ff    	je     c0006318 <f_unlink+0x8e>
c00063c9:	83 f8 04             	cmp    eax,0x4
c00063cc:	75 22                	jne    c00063f0 <f_unlink+0x166>
c00063ce:	eb 87                	jmp    c0006357 <f_unlink+0xcd>
c00063d0:	85 f6                	test   esi,esi
c00063d2:	75 0b                	jne    c00063df <f_unlink+0x155>
c00063d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063d8:	e8 3d df ff ff       	call   c000431a <sync_fs>
c00063dd:	eb 11                	jmp    c00063f0 <f_unlink+0x166>
c00063df:	31 c9                	xor    ecx,ecx
c00063e1:	89 f2                	mov    edx,esi
c00063e3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00063e7:	e8 78 ce ff ff       	call   c0003264 <remove_chain>
c00063ec:	85 c0                	test   eax,eax
c00063ee:	74 e4                	je     c00063d4 <f_unlink+0x14a>
c00063f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063f4:	83 ec 0c             	sub    esp,0xc
c00063f7:	53                   	push   ebx
c00063f8:	e8 5d 1e 00 00       	call   c000825a <ff_memfree>
c00063fd:	83 c4 10             	add    esp,0x10
c0006400:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006404:	81 c4 e4 00 00 00    	add    esp,0xe4
c000640a:	5b                   	pop    ebx
c000640b:	5e                   	pop    esi
c000640c:	c3                   	ret    

c000640d <f_mkdir>:
c000640d:	57                   	push   edi
c000640e:	b9 02 00 00 00       	mov    ecx,0x2
c0006413:	56                   	push   esi
c0006414:	53                   	push   ebx
c0006415:	83 c4 80             	add    esp,0xffffff80
c0006418:	8d 54 24 08          	lea    edx,[esp+0x8]
c000641c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006423:	e8 79 c0 ff ff       	call   c00024a1 <mount_volume>
c0006428:	89 c3                	mov    ebx,eax
c000642a:	85 c0                	test   eax,eax
c000642c:	0f 85 fe 01 00 00    	jne    c0006630 <f_mkdir+0x223>
c0006432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006436:	bb 11 00 00 00       	mov    ebx,0x11
c000643b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	68 60 04 00 00       	push   0x460
c0006447:	e8 f8 1d 00 00       	call   c0008244 <ff_memalloc>
c000644c:	83 c4 10             	add    esp,0x10
c000644f:	89 c7                	mov    edi,eax
c0006451:	85 c0                	test   eax,eax
c0006453:	0f 84 d7 01 00 00    	je     c0006630 <f_mkdir+0x223>
c0006459:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000645d:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006463:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006466:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006469:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006470:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006474:	e8 9e e7 ff ff       	call   c0004c17 <follow_path>
c0006479:	89 c3                	mov    ebx,eax
c000647b:	85 c0                	test   eax,eax
c000647d:	74 3e                	je     c00064bd <f_mkdir+0xb0>
c000647f:	83 f8 04             	cmp    eax,0x4
c0006482:	75 3e                	jne    c00064c2 <f_mkdir+0xb5>
c0006484:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006488:	31 d2                	xor    edx,edx
c000648a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000648e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006492:	e8 ce cb ff ff       	call   c0003065 <create_chain>
c0006497:	89 c6                	mov    esi,eax
c0006499:	85 c0                	test   eax,eax
c000649b:	74 0c                	je     c00064a9 <f_mkdir+0x9c>
c000649d:	bb 02 00 00 00       	mov    ebx,0x2
c00064a2:	83 f8 01             	cmp    eax,0x1
c00064a5:	74 07                	je     c00064ae <f_mkdir+0xa1>
c00064a7:	eb 2a                	jmp    c00064d3 <f_mkdir+0xc6>
c00064a9:	bb 07 00 00 00       	mov    ebx,0x7
c00064ae:	31 c9                	xor    ecx,ecx
c00064b0:	89 f2                	mov    edx,esi
c00064b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064b6:	e8 a9 cd ff ff       	call   c0003264 <remove_chain>
c00064bb:	eb 05                	jmp    c00064c2 <f_mkdir+0xb5>
c00064bd:	bb 08 00 00 00       	mov    ebx,0x8
c00064c2:	83 ec 0c             	sub    esp,0xc
c00064c5:	57                   	push   edi
c00064c6:	e8 8f 1d 00 00       	call   c000825a <ff_memfree>
c00064cb:	83 c4 10             	add    esp,0x10
c00064ce:	e9 5d 01 00 00       	jmp    c0006630 <f_mkdir+0x223>
c00064d3:	bb 01 00 00 00       	mov    ebx,0x1
c00064d8:	83 f8 ff             	cmp    eax,0xffffffff
c00064db:	74 d1                	je     c00064ae <f_mkdir+0xa1>
c00064dd:	89 f2                	mov    edx,esi
c00064df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e3:	e8 c4 ce ff ff       	call   c00033ac <dir_clear>
c00064e8:	89 c3                	mov    ebx,eax
c00064ea:	85 c0                	test   eax,eax
c00064ec:	75 c0                	jne    c00064ae <f_mkdir+0xa1>
c00064ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f5:	74 69                	je     c0006560 <f_mkdir+0x153>
c00064f7:	b9 0b 00 00 00       	mov    ecx,0xb
c00064fc:	83 c0 54             	add    eax,0x54
c00064ff:	ba 20 00 00 00       	mov    edx,0x20
c0006504:	e8 9c b5 ff ff       	call   c0001aa5 <mem_set>
c0006509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006512:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006516:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000651a:	83 c0 6a             	add    eax,0x6a
c000651d:	e8 65 b5 ff ff       	call   c0001a87 <st_dword>
c0006522:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006526:	89 f1                	mov    ecx,esi
c0006528:	8d 50 54             	lea    edx,[eax+0x54]
c000652b:	e8 85 e6 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	b9 20 00 00 00       	mov    ecx,0x20
c0006539:	8d 50 54             	lea    edx,[eax+0x54]
c000653c:	83 c0 74             	add    eax,0x74
c000653f:	e8 4c b5 ff ff       	call   c0001a90 <mem_cpy>
c0006544:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006548:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000654c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006550:	8d 50 74             	lea    edx,[eax+0x74]
c0006553:	e8 5d e6 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006558:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000655c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006560:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006564:	e8 2f db ff ff       	call   c0004098 <dir_register>
c0006569:	89 c3                	mov    ebx,eax
c000656b:	85 c0                	test   eax,eax
c000656d:	0f 85 3b ff ff ff    	jne    c00064ae <f_mkdir+0xa1>
c0006573:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006577:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000657a:	75 74                	jne    c00065f0 <f_mkdir+0x1e3>
c000657c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000657f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006584:	83 c0 0c             	add    eax,0xc
c0006587:	e8 fb b4 ff ff       	call   c0001a87 <st_dword>
c000658c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006590:	89 f2                	mov    edx,esi
c0006592:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006595:	83 c0 34             	add    eax,0x34
c0006598:	e8 ea b4 ff ff       	call   c0001a87 <st_dword>
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065a5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065a8:	c1 e2 09             	shl    edx,0x9
c00065ab:	83 c0 38             	add    eax,0x38
c00065ae:	e8 d4 b4 ff ff       	call   c0001a87 <st_dword>
c00065b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065be:	c1 e2 09             	shl    edx,0x9
c00065c1:	83 c0 28             	add    eax,0x28
c00065c4:	e8 be b4 ff ff       	call   c0001a87 <st_dword>
c00065c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065d0:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065d7:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065db:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065df:	e8 8b d3 ff ff       	call   c000396f <store_xdir>
c00065e4:	89 c3                	mov    ebx,eax
c00065e6:	85 c0                	test   eax,eax
c00065e8:	0f 85 d4 fe ff ff    	jne    c00064c2 <f_mkdir+0xb5>
c00065ee:	eb 30                	jmp    c0006620 <f_mkdir+0x213>
c00065f0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065f4:	ba 00 00 21 50       	mov    edx,0x50210000
c00065f9:	83 c0 16             	add    eax,0x16
c00065fc:	e8 86 b4 ff ff       	call   c0001a87 <st_dword>
c0006601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006605:	89 f1                	mov    ecx,esi
c0006607:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000660b:	e8 a5 e5 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006610:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006614:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006618:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000661c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006624:	e8 f1 dc ff ff       	call   c000431a <sync_fs>
c0006629:	89 c3                	mov    ebx,eax
c000662b:	e9 92 fe ff ff       	jmp    c00064c2 <f_mkdir+0xb5>
c0006630:	83 ec 80             	sub    esp,0xffffff80
c0006633:	89 d8                	mov    eax,ebx
c0006635:	5b                   	pop    ebx
c0006636:	5e                   	pop    esi
c0006637:	5f                   	pop    edi
c0006638:	c3                   	ret    

c0006639 <f_rename>:
c0006639:	55                   	push   ebp
c000663a:	57                   	push   edi
c000663b:	56                   	push   esi
c000663c:	53                   	push   ebx
c000663d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006643:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000664a:	e8 a4 b9 ff ff       	call   c0001ff3 <get_ldnumber>
c000664f:	b9 02 00 00 00       	mov    ecx,0x2
c0006654:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006658:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c000665f:	e8 3d be ff ff       	call   c00024a1 <mount_volume>
c0006664:	85 c0                	test   eax,eax
c0006666:	0f 85 b5 02 00 00    	jne    c0006921 <f_rename+0x2e8>
c000666c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006670:	83 ec 0c             	sub    esp,0xc
c0006673:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006677:	68 60 04 00 00       	push   0x460
c000667c:	e8 c3 1b 00 00       	call   c0008244 <ff_memalloc>
c0006681:	83 c4 10             	add    esp,0x10
c0006684:	89 c3                	mov    ebx,eax
c0006686:	b8 11 00 00 00       	mov    eax,0x11
c000668b:	85 db                	test   ebx,ebx
c000668d:	0f 84 8e 02 00 00    	je     c0006921 <f_rename+0x2e8>
c0006693:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006697:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000669d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066a3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066aa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066ae:	e8 64 e5 ff ff       	call   c0004c17 <follow_path>
c00066b3:	85 c0                	test   eax,eax
c00066b5:	0f 85 52 02 00 00    	jne    c000690d <f_rename+0x2d4>
c00066bb:	b8 06 00 00 00       	mov    eax,0x6
c00066c0:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066c8:	0f 85 3f 02 00 00    	jne    c000690d <f_rename+0x2d4>
c00066ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066d5:	0f 85 05 01 00 00    	jne    c00067e0 <f_rename+0x1a7>
c00066db:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066de:	b9 40 00 00 00       	mov    ecx,0x40
c00066e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066e7:	e8 a4 b3 ff ff       	call   c0001a90 <mem_cpy>
c00066ec:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066f1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066f5:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066fc:	e8 8f b3 ff ff       	call   c0001a90 <mem_cpy>
c0006701:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006708:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000670f:	e8 03 e5 ff ff       	call   c0004c17 <follow_path>
c0006714:	85 c0                	test   eax,eax
c0006716:	75 29                	jne    c0006741 <f_rename+0x108>
c0006718:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000671c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006723:	74 0a                	je     c000672f <f_rename+0xf6>
c0006725:	b8 08 00 00 00       	mov    eax,0x8
c000672a:	e9 de 01 00 00       	jmp    c000690d <f_rename+0x2d4>
c000672f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006736:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000673d:	75 e6                	jne    c0006725 <f_rename+0xec>
c000673f:	eb 09                	jmp    c000674a <f_rename+0x111>
c0006741:	83 f8 04             	cmp    eax,0x4
c0006744:	0f 85 c3 01 00 00    	jne    c000690d <f_rename+0x2d4>
c000674a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006751:	e8 42 d9 ff ff       	call   c0004098 <dir_register>
c0006756:	85 c0                	test   eax,eax
c0006758:	0f 85 af 01 00 00    	jne    c000690d <f_rename+0x2d4>
c000675e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006762:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006765:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006768:	89 c5                	mov    ebp,eax
c000676a:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000676d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006771:	8d 46 24             	lea    eax,[esi+0x24]
c0006774:	e8 98 b2 ff ff       	call   c0001a11 <ld_word>
c0006779:	b9 40 00 00 00       	mov    ecx,0x40
c000677e:	89 c7                	mov    edi,eax
c0006780:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006784:	89 f0                	mov    eax,esi
c0006786:	e8 05 b3 ff ff       	call   c0001a90 <mem_cpy>
c000678b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000678f:	89 e9                	mov    ecx,ebp
c0006791:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006794:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006797:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c000679b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000679f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067a2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067a5:	0f b7 d7             	movzx  edx,di
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 24             	add    eax,0x24
c00067ae:	e8 d0 b2 ff ff       	call   c0001a83 <st_word>
c00067b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067b7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067ba:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067bd:	a8 10                	test   al,0x10
c00067bf:	75 06                	jne    c00067c7 <f_rename+0x18e>
c00067c1:	83 c8 20             	or     eax,0x20
c00067c4:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067c7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067ce:	e8 9c d1 ff ff       	call   c000396f <store_xdir>
c00067d3:	85 c0                	test   eax,eax
c00067d5:	0f 84 1c 01 00 00    	je     c00068f7 <f_rename+0x2be>
c00067db:	e9 2d 01 00 00       	jmp    c000690d <f_rename+0x2d4>
c00067e0:	b9 20 00 00 00       	mov    ecx,0x20
c00067e5:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067ec:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067f0:	e8 9b b2 ff ff       	call   c0001a90 <mem_cpy>
c00067f5:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067fa:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067fe:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006805:	e8 86 b2 ff ff       	call   c0001a90 <mem_cpy>
c000680a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006811:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006818:	e8 fa e3 ff ff       	call   c0004c17 <follow_path>
c000681d:	85 c0                	test   eax,eax
c000681f:	75 27                	jne    c0006848 <f_rename+0x20f>
c0006821:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006825:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000682c:	0f 85 f3 fe ff ff    	jne    c0006725 <f_rename+0xec>
c0006832:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006839:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006840:	0f 85 df fe ff ff    	jne    c0006725 <f_rename+0xec>
c0006846:	eb 09                	jmp    c0006851 <f_rename+0x218>
c0006848:	83 f8 04             	cmp    eax,0x4
c000684b:	0f 85 bc 00 00 00    	jne    c000690d <f_rename+0x2d4>
c0006851:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006858:	e8 3b d8 ff ff       	call   c0004098 <dir_register>
c000685d:	85 c0                	test   eax,eax
c000685f:	0f 85 a8 00 00 00    	jne    c000690d <f_rename+0x2d4>
c0006865:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000686c:	b9 13 00 00 00       	mov    ecx,0x13
c0006871:	8d 46 0d             	lea    eax,[esi+0xd]
c0006874:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006878:	e8 13 b2 ff ff       	call   c0001a90 <mem_cpy>
c000687d:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006881:	a8 10                	test   al,0x10
c0006883:	75 03                	jne    c0006888 <f_rename+0x24f>
c0006885:	83 c8 20             	or     eax,0x20
c0006888:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c000688b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000688f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006893:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006897:	74 5e                	je     c00068f7 <f_rename+0x2be>
c0006899:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068a0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068a4:	74 51                	je     c00068f7 <f_rename+0x2be>
c00068a6:	89 f2                	mov    edx,esi
c00068a8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068ac:	8a 07                	mov    al,BYTE PTR [edi]
c00068ae:	e8 d9 e2 ff ff       	call   c0004b8c <ld_clust.isra.0>
c00068b3:	89 c2                	mov    edx,eax
c00068b5:	89 f8                	mov    eax,edi
c00068b7:	e8 ee b3 ff ff       	call   c0001caa <clst2sect>
c00068bc:	89 c6                	mov    esi,eax
c00068be:	89 d1                	mov    ecx,edx
c00068c0:	b8 02 00 00 00       	mov    eax,0x2
c00068c5:	09 f2                	or     edx,esi
c00068c7:	74 44                	je     c000690d <f_rename+0x2d4>
c00068c9:	89 f2                	mov    edx,esi
c00068cb:	89 f8                	mov    eax,edi
c00068cd:	e8 1d b9 ff ff       	call   c00021ef <move_window>
c00068d2:	85 c0                	test   eax,eax
c00068d4:	75 37                	jne    c000690d <f_rename+0x2d4>
c00068d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068da:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068de:	75 17                	jne    c00068f7 <f_rename+0x2be>
c00068e0:	8d 50 74             	lea    edx,[eax+0x74]
c00068e3:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068ea:	e8 c6 e2 ff ff       	call   c0004bb5 <st_clust.isra.1>
c00068ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068f7:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fb:	e8 f4 d0 ff ff       	call   c00039f4 <dir_remove>
c0006900:	85 c0                	test   eax,eax
c0006902:	75 09                	jne    c000690d <f_rename+0x2d4>
c0006904:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006908:	e8 0d da ff ff       	call   c000431a <sync_fs>
c000690d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006911:	83 ec 0c             	sub    esp,0xc
c0006914:	53                   	push   ebx
c0006915:	e8 40 19 00 00       	call   c000825a <ff_memfree>
c000691a:	83 c4 10             	add    esp,0x10
c000691d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006921:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006927:	5b                   	pop    ebx
c0006928:	5e                   	pop    esi
c0006929:	5f                   	pop    edi
c000692a:	5d                   	pop    ebp
c000692b:	c3                   	ret    

c000692c <f_chmod>:
c000692c:	57                   	push   edi
c000692d:	b9 02 00 00 00       	mov    ecx,0x2
c0006932:	56                   	push   esi
c0006933:	53                   	push   ebx
c0006934:	83 ec 60             	sub    esp,0x60
c0006937:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000693b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000693f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006943:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006947:	e8 55 bb ff ff       	call   c00024a1 <mount_volume>
c000694c:	85 c0                	test   eax,eax
c000694e:	0f 85 af 00 00 00    	jne    c0006a03 <f_chmod+0xd7>
c0006954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006958:	83 ec 0c             	sub    esp,0xc
c000695b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000695f:	68 60 04 00 00       	push   0x460
c0006964:	e8 db 18 00 00       	call   c0008244 <ff_memalloc>
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	89 c6                	mov    esi,eax
c000696e:	b8 11 00 00 00       	mov    eax,0x11
c0006973:	85 f6                	test   esi,esi
c0006975:	0f 84 88 00 00 00    	je     c0006a03 <f_chmod+0xd7>
c000697b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000697f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006985:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006988:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000698b:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000698f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006993:	e8 7f e2 ff ff       	call   c0004c17 <follow_path>
c0006998:	85 c0                	test   eax,eax
c000699a:	75 53                	jne    c00069ef <f_chmod+0xc3>
c000699c:	b8 06 00 00 00       	mov    eax,0x6
c00069a1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069a6:	75 47                	jne    c00069ef <f_chmod+0xc3>
c00069a8:	89 f9                	mov    ecx,edi
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	83 e1 27             	and    ecx,0x27
c00069b1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069b4:	75 1d                	jne    c00069d3 <f_chmod+0xa7>
c00069b6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069b9:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069bc:	21 cb                	and    ebx,ecx
c00069be:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069c1:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069c4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069c8:	e8 a2 cf ff ff       	call   c000396f <store_xdir>
c00069cd:	85 c0                	test   eax,eax
c00069cf:	75 1e                	jne    c00069ef <f_chmod+0xc3>
c00069d1:	eb 13                	jmp    c00069e6 <f_chmod+0xba>
c00069d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069d7:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069da:	21 cb                	and    ebx,ecx
c00069dc:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069df:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069e2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ea:	e8 2b d9 ff ff       	call   c000431a <sync_fs>
c00069ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069f3:	83 ec 0c             	sub    esp,0xc
c00069f6:	56                   	push   esi
c00069f7:	e8 5e 18 00 00       	call   c000825a <ff_memfree>
c00069fc:	83 c4 10             	add    esp,0x10
c00069ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a03:	83 c4 60             	add    esp,0x60
c0006a06:	5b                   	pop    ebx
c0006a07:	5e                   	pop    esi
c0006a08:	5f                   	pop    edi
c0006a09:	c3                   	ret    

c0006a0a <f_utime>:
c0006a0a:	56                   	push   esi
c0006a0b:	b9 02 00 00 00       	mov    ecx,0x2
c0006a10:	53                   	push   ebx
c0006a11:	83 ec 64             	sub    esp,0x64
c0006a14:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a18:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a1c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a20:	e8 7c ba ff ff       	call   c00024a1 <mount_volume>
c0006a25:	85 c0                	test   eax,eax
c0006a27:	0f 85 b5 00 00 00    	jne    c0006ae2 <f_utime+0xd8>
c0006a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a31:	83 ec 0c             	sub    esp,0xc
c0006a34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a38:	68 60 04 00 00       	push   0x460
c0006a3d:	e8 02 18 00 00       	call   c0008244 <ff_memalloc>
c0006a42:	83 c4 10             	add    esp,0x10
c0006a45:	89 c3                	mov    ebx,eax
c0006a47:	b8 11 00 00 00       	mov    eax,0x11
c0006a4c:	85 db                	test   ebx,ebx
c0006a4e:	0f 84 8e 00 00 00    	je     c0006ae2 <f_utime+0xd8>
c0006a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a58:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a5e:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a61:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a64:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a68:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a6c:	e8 a6 e1 ff ff       	call   c0004c17 <follow_path>
c0006a71:	85 c0                	test   eax,eax
c0006a73:	75 59                	jne    c0006ace <f_utime+0xc4>
c0006a75:	b8 06 00 00 00       	mov    eax,0x6
c0006a7a:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a7f:	75 4d                	jne    c0006ace <f_utime+0xc4>
c0006a81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a85:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a89:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a8d:	c1 e2 10             	shl    edx,0x10
c0006a90:	09 ca                	or     edx,ecx
c0006a92:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a95:	75 1a                	jne    c0006ab1 <f_utime+0xa7>
c0006a97:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a9a:	83 c0 0c             	add    eax,0xc
c0006a9d:	e8 e5 af ff ff       	call   c0001a87 <st_dword>
c0006aa2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aa6:	e8 c4 ce ff ff       	call   c000396f <store_xdir>
c0006aab:	85 c0                	test   eax,eax
c0006aad:	75 1f                	jne    c0006ace <f_utime+0xc4>
c0006aaf:	eb 14                	jmp    c0006ac5 <f_utime+0xbb>
c0006ab1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ab5:	83 c0 16             	add    eax,0x16
c0006ab8:	e8 ca af ff ff       	call   c0001a87 <st_dword>
c0006abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	e8 4c d8 ff ff       	call   c000431a <sync_fs>
c0006ace:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ad2:	83 ec 0c             	sub    esp,0xc
c0006ad5:	53                   	push   ebx
c0006ad6:	e8 7f 17 00 00       	call   c000825a <ff_memfree>
c0006adb:	83 c4 10             	add    esp,0x10
c0006ade:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ae2:	83 c4 64             	add    esp,0x64
c0006ae5:	5b                   	pop    ebx
c0006ae6:	5e                   	pop    esi
c0006ae7:	c3                   	ret    

c0006ae8 <f_getlabel>:
c0006ae8:	55                   	push   ebp
c0006ae9:	31 c9                	xor    ecx,ecx
c0006aeb:	57                   	push   edi
c0006aec:	56                   	push   esi
c0006aed:	53                   	push   ebx
c0006aee:	83 ec 6c             	sub    esp,0x6c
c0006af1:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006af5:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006afc:	e8 a0 b9 ff ff       	call   c00024a1 <mount_volume>
c0006b01:	89 c6                	mov    esi,eax
c0006b03:	85 c0                	test   eax,eax
c0006b05:	0f 85 c1 01 00 00    	jne    c0006ccc <f_getlabel+0x1e4>
c0006b0b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b13:	0f 84 5f 01 00 00    	je     c0006c78 <f_getlabel+0x190>
c0006b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b1d:	31 d2                	xor    edx,edx
c0006b1f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b23:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b2b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b2f:	e8 39 c4 ff ff       	call   c0002f6d <dir_sdi>
c0006b34:	85 c0                	test   eax,eax
c0006b36:	0f 85 2d 01 00 00    	jne    c0006c69 <f_getlabel+0x181>
c0006b3c:	ba 01 00 00 00       	mov    edx,0x1
c0006b41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b45:	e8 33 cc ff ff       	call   c000377d <dir_read>
c0006b4a:	85 c0                	test   eax,eax
c0006b4c:	0f 85 17 01 00 00    	jne    c0006c69 <f_getlabel+0x181>
c0006b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b56:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b59:	74 09                	je     c0006b64 <f_getlabel+0x7c>
c0006b5b:	31 db                	xor    ebx,ebx
c0006b5d:	31 c9                	xor    ecx,ecx
c0006b5f:	e9 c8 00 00 00       	jmp    c0006c2c <f_getlabel+0x144>
c0006b64:	31 ed                	xor    ebp,ebp
c0006b66:	31 db                	xor    ebx,ebx
c0006b68:	31 ff                	xor    edi,edi
c0006b6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b72:	39 fa                	cmp    edx,edi
c0006b74:	76 4b                	jbe    c0006bc1 <f_getlabel+0xd9>
c0006b76:	47                   	inc    edi
c0006b77:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b7a:	01 d0                	add    eax,edx
c0006b7c:	e8 90 ae ff ff       	call   c0001a11 <ld_word>
c0006b81:	66 85 ed             	test   bp,bp
c0006b84:	75 0d                	jne    c0006b93 <f_getlabel+0xab>
c0006b86:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b8c:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b91:	76 28                	jbe    c0006bbb <f_getlabel+0xd3>
c0006b93:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b9a:	89 e9                	mov    ecx,ebp
c0006b9c:	01 da                	add    edx,ebx
c0006b9e:	c1 e1 10             	shl    ecx,0x10
c0006ba1:	0f b7 c0             	movzx  eax,ax
c0006ba4:	09 c8                	or     eax,ecx
c0006ba6:	b9 04 00 00 00       	mov    ecx,0x4
c0006bab:	e8 01 b0 ff ff       	call   c0001bb1 <put_utf>
c0006bb0:	84 c0                	test   al,al
c0006bb2:	74 0b                	je     c0006bbf <f_getlabel+0xd7>
c0006bb4:	0f b6 c0             	movzx  eax,al
c0006bb7:	01 c3                	add    ebx,eax
c0006bb9:	31 c0                	xor    eax,eax
c0006bbb:	89 c5                	mov    ebp,eax
c0006bbd:	eb ab                	jmp    c0006b6a <f_getlabel+0x82>
c0006bbf:	31 db                	xor    ebx,ebx
c0006bc1:	66 85 ed             	test   bp,bp
c0006bc4:	74 02                	je     c0006bc8 <f_getlabel+0xe0>
c0006bc6:	31 db                	xor    ebx,ebx
c0006bc8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bcf:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006bd3:	e9 a0 00 00 00       	jmp    c0006c78 <f_getlabel+0x190>
c0006bd8:	83 ff 0b             	cmp    edi,0xb
c0006bdb:	74 11                	je     c0006bee <f_getlabel+0x106>
c0006bdd:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006be2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006be6:	8d 79 02             	lea    edi,[ecx+0x2]
c0006be9:	c1 e0 08             	shl    eax,0x8
c0006bec:	09 c2                	or     edx,eax
c0006bee:	0f b7 d2             	movzx  edx,dx
c0006bf1:	50                   	push   eax
c0006bf2:	50                   	push   eax
c0006bf3:	68 b5 01 00 00       	push   0x1b5
c0006bf8:	52                   	push   edx
c0006bf9:	e8 03 17 00 00       	call   c0008301 <ff_oem2uni>
c0006bfe:	83 c4 10             	add    esp,0x10
c0006c01:	66 85 c0             	test   ax,ax
c0006c04:	74 46                	je     c0006c4c <f_getlabel+0x164>
c0006c06:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c0d:	0f b7 c0             	movzx  eax,ax
c0006c10:	01 da                	add    edx,ebx
c0006c12:	b9 04 00 00 00       	mov    ecx,0x4
c0006c17:	e8 95 af ff ff       	call   c0001bb1 <put_utf>
c0006c1c:	84 c0                	test   al,al
c0006c1e:	74 2c                	je     c0006c4c <f_getlabel+0x164>
c0006c20:	0f b6 c0             	movzx  eax,al
c0006c23:	01 c3                	add    ebx,eax
c0006c25:	83 ff 0b             	cmp    edi,0xb
c0006c28:	74 24                	je     c0006c4e <f_getlabel+0x166>
c0006c2a:	89 f9                	mov    ecx,edi
c0006c2c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c30:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c33:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c38:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c41:	e8 9f ae ff ff       	call   c0001ae5 <dbc_1st>
c0006c46:	85 c0                	test   eax,eax
c0006c48:	74 a4                	je     c0006bee <f_getlabel+0x106>
c0006c4a:	eb 8c                	jmp    c0006bd8 <f_getlabel+0xf0>
c0006c4c:	31 db                	xor    ebx,ebx
c0006c4e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c55:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c58:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c5f:	74 17                	je     c0006c78 <f_getlabel+0x190>
c0006c61:	4b                   	dec    ebx
c0006c62:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c65:	74 ee                	je     c0006c55 <f_getlabel+0x16d>
c0006c67:	eb 0f                	jmp    c0006c78 <f_getlabel+0x190>
c0006c69:	83 f8 04             	cmp    eax,0x4
c0006c6c:	75 5c                	jne    c0006cca <f_getlabel+0x1e2>
c0006c6e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c75:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c78:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c80:	74 4a                	je     c0006ccc <f_getlabel+0x1e4>
c0006c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c86:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c89:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c8c:	e8 5e b5 ff ff       	call   c00021ef <move_window>
c0006c91:	89 c6                	mov    esi,eax
c0006c93:	85 c0                	test   eax,eax
c0006c95:	75 35                	jne    c0006ccc <f_getlabel+0x1e4>
c0006c97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c9b:	b8 43 00 00 00       	mov    eax,0x43
c0006ca0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ca2:	80 f9 03             	cmp    cl,0x3
c0006ca5:	74 0f                	je     c0006cb6 <f_getlabel+0x1ce>
c0006ca7:	31 c0                	xor    eax,eax
c0006ca9:	80 f9 04             	cmp    cl,0x4
c0006cac:	0f 94 c0             	sete   al
c0006caf:	48                   	dec    eax
c0006cb0:	83 e0 c3             	and    eax,0xffffffc3
c0006cb3:	83 c0 64             	add    eax,0x64
c0006cb6:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cba:	e8 5f ad ff ff       	call   c0001a1e <ld_dword>
c0006cbf:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cc6:	89 07                	mov    DWORD PTR [edi],eax
c0006cc8:	eb 02                	jmp    c0006ccc <f_getlabel+0x1e4>
c0006cca:	89 c6                	mov    esi,eax
c0006ccc:	83 c4 6c             	add    esp,0x6c
c0006ccf:	89 f0                	mov    eax,esi
c0006cd1:	5b                   	pop    ebx
c0006cd2:	5e                   	pop    esi
c0006cd3:	5f                   	pop    edi
c0006cd4:	5d                   	pop    ebp
c0006cd5:	c3                   	ret    

c0006cd6 <f_setlabel>:
c0006cd6:	56                   	push   esi
c0006cd7:	b9 02 00 00 00       	mov    ecx,0x2
c0006cdc:	53                   	push   ebx
c0006cdd:	83 ec 74             	sub    esp,0x74
c0006ce0:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006ce4:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006ceb:	e8 b1 b7 ff ff       	call   c00024a1 <mount_volume>
c0006cf0:	89 c6                	mov    esi,eax
c0006cf2:	85 c0                	test   eax,eax
c0006cf4:	0f 85 41 02 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006cfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006cfe:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d01:	0f 85 8e 00 00 00    	jne    c0006d95 <f_setlabel+0xbf>
c0006d07:	b9 16 00 00 00       	mov    ecx,0x16
c0006d0c:	31 d2                	xor    edx,edx
c0006d0e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d12:	31 db                	xor    ebx,ebx
c0006d14:	e8 8c ad ff ff       	call   c0001aa5 <mem_set>
c0006d19:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d20:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d23:	0f 86 0a 01 00 00    	jbe    c0006e33 <f_setlabel+0x15d>
c0006d29:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d30:	e8 b6 ad ff ff       	call   c0001aeb <tchar2uni>
c0006d35:	89 c6                	mov    esi,eax
c0006d37:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d3c:	76 2a                	jbe    c0006d68 <f_setlabel+0x92>
c0006d3e:	83 f8 ff             	cmp    eax,0xffffffff
c0006d41:	74 05                	je     c0006d48 <f_setlabel+0x72>
c0006d43:	83 fb 09             	cmp    ebx,0x9
c0006d46:	76 0a                	jbe    c0006d52 <f_setlabel+0x7c>
c0006d48:	be 06 00 00 00       	mov    esi,0x6
c0006d4d:	e9 e9 01 00 00       	jmp    c0006f3b <f_setlabel+0x265>
c0006d52:	89 c2                	mov    edx,eax
c0006d54:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d58:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d5b:	c1 ea 10             	shr    edx,0x10
c0006d5e:	01 c8                	add    eax,ecx
c0006d60:	43                   	inc    ebx
c0006d61:	e8 1d ad ff ff       	call   c0001a83 <st_word>
c0006d66:	eb 04                	jmp    c0006d6c <f_setlabel+0x96>
c0006d68:	85 c0                	test   eax,eax
c0006d6a:	74 dc                	je     c0006d48 <f_setlabel+0x72>
c0006d6c:	89 f2                	mov    edx,esi
c0006d6e:	b8 17 76 02 c0       	mov    eax,0xc0027617
c0006d73:	e8 5b ad ff ff       	call   c0001ad3 <chk_chr>
c0006d78:	85 c0                	test   eax,eax
c0006d7a:	75 cc                	jne    c0006d48 <f_setlabel+0x72>
c0006d7c:	83 fb 0a             	cmp    ebx,0xa
c0006d7f:	77 c7                	ja     c0006d48 <f_setlabel+0x72>
c0006d81:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d84:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d88:	0f b7 d6             	movzx  edx,si
c0006d8b:	01 c8                	add    eax,ecx
c0006d8d:	43                   	inc    ebx
c0006d8e:	e8 f0 ac ff ff       	call   c0001a83 <st_word>
c0006d93:	eb 84                	jmp    c0006d19 <f_setlabel+0x43>
c0006d95:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d9a:	ba 20 00 00 00       	mov    edx,0x20
c0006d9f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006da3:	31 db                	xor    ebx,ebx
c0006da5:	e8 fb ac ff ff       	call   c0001aa5 <mem_set>
c0006daa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006db1:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006db4:	76 60                	jbe    c0006e16 <f_setlabel+0x140>
c0006db6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006dbd:	e8 29 ad ff ff       	call   c0001aeb <tchar2uni>
c0006dc2:	3d ff ff 00 00       	cmp    eax,0xffff
c0006dc7:	0f 87 7b ff ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006dcd:	83 ec 0c             	sub    esp,0xc
c0006dd0:	50                   	push   eax
c0006dd1:	e8 97 15 00 00       	call   c000836d <ff_wtoupper>
c0006dd6:	5a                   	pop    edx
c0006dd7:	59                   	pop    ecx
c0006dd8:	68 b5 01 00 00       	push   0x1b5
c0006ddd:	50                   	push   eax
c0006dde:	e8 8e 14 00 00       	call   c0008271 <ff_uni2oem>
c0006de3:	83 c4 10             	add    esp,0x10
c0006de6:	89 c6                	mov    esi,eax
c0006de8:	66 85 c0             	test   ax,ax
c0006deb:	0f 84 57 ff ff ff    	je     c0006d48 <f_setlabel+0x72>
c0006df1:	0f b7 d0             	movzx  edx,ax
c0006df4:	b8 10 76 02 c0       	mov    eax,0xc0027610
c0006df9:	e8 d5 ac ff ff       	call   c0001ad3 <chk_chr>
c0006dfe:	85 c0                	test   eax,eax
c0006e00:	0f 85 42 ff ff ff    	jne    c0006d48 <f_setlabel+0x72>
c0006e06:	66 81 fe ff 00       	cmp    si,0xff
c0006e0b:	0f 87 14 01 00 00    	ja     c0006f25 <f_setlabel+0x24f>
c0006e11:	e9 fa 00 00 00       	jmp    c0006f10 <f_setlabel+0x23a>
c0006e16:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e1b:	0f 84 27 ff ff ff    	je     c0006d48 <f_setlabel+0x72>
c0006e21:	85 db                	test   ebx,ebx
c0006e23:	74 0e                	je     c0006e33 <f_setlabel+0x15d>
c0006e25:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e28:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e2d:	75 04                	jne    c0006e33 <f_setlabel+0x15d>
c0006e2f:	89 c3                	mov    ebx,eax
c0006e31:	eb ee                	jmp    c0006e21 <f_setlabel+0x14b>
c0006e33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e37:	31 d2                	xor    edx,edx
c0006e39:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e3d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e45:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e49:	e8 1f c1 ff ff       	call   c0002f6d <dir_sdi>
c0006e4e:	89 c6                	mov    esi,eax
c0006e50:	85 c0                	test   eax,eax
c0006e52:	0f 85 e3 00 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006e58:	ba 01 00 00 00       	mov    edx,0x1
c0006e5d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e61:	e8 17 c9 ff ff       	call   c000377d <dir_read>
c0006e66:	85 c0                	test   eax,eax
c0006e68:	75 21                	jne    c0006e8b <f_setlabel+0x1b5>
c0006e6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e6e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e72:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e75:	74 5d                	je     c0006ed4 <f_setlabel+0x1fe>
c0006e77:	85 db                	test   ebx,ebx
c0006e79:	74 0b                	je     c0006e86 <f_setlabel+0x1b0>
c0006e7b:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e80:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e84:	eb 70                	jmp    c0006ef6 <f_setlabel+0x220>
c0006e86:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e89:	eb 70                	jmp    c0006efb <f_setlabel+0x225>
c0006e8b:	83 f8 04             	cmp    eax,0x4
c0006e8e:	75 7c                	jne    c0006f0c <f_setlabel+0x236>
c0006e90:	85 db                	test   ebx,ebx
c0006e92:	0f 84 a3 00 00 00    	je     c0006f3b <f_setlabel+0x265>
c0006e98:	ba 01 00 00 00       	mov    edx,0x1
c0006e9d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ea1:	e8 51 ca ff ff       	call   c00038f7 <dir_alloc>
c0006ea6:	89 c6                	mov    esi,eax
c0006ea8:	85 c0                	test   eax,eax
c0006eaa:	0f 85 8b 00 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006eb0:	31 d2                	xor    edx,edx
c0006eb2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eb6:	b9 20 00 00 00       	mov    ecx,0x20
c0006ebb:	e8 e5 ab ff ff       	call   c0001aa5 <mem_set>
c0006ec0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ec4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ec7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ecb:	75 18                	jne    c0006ee5 <f_setlabel+0x20f>
c0006ecd:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ed0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed4:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ed7:	b9 16 00 00 00       	mov    ecx,0x16
c0006edc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee0:	83 c0 02             	add    eax,0x2
c0006ee3:	eb 9b                	jmp    c0006e80 <f_setlabel+0x1aa>
c0006ee5:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006ee9:	b9 0b 00 00 00       	mov    ecx,0xb
c0006eee:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ef2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ef6:	e8 95 ab ff ff       	call   c0001a90 <mem_cpy>
c0006efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eff:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f07:	e8 0e d4 ff ff       	call   c000431a <sync_fs>
c0006f0c:	89 c6                	mov    esi,eax
c0006f0e:	eb 2b                	jmp    c0006f3b <f_setlabel+0x265>
c0006f10:	83 fb 0a             	cmp    ebx,0xa
c0006f13:	0f 87 2f fe ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006f19:	89 f0                	mov    eax,esi
c0006f1b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f1f:	43                   	inc    ebx
c0006f20:	e9 85 fe ff ff       	jmp    c0006daa <f_setlabel+0xd4>
c0006f25:	83 fb 09             	cmp    ebx,0x9
c0006f28:	0f 87 1a fe ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006f2e:	89 f0                	mov    eax,esi
c0006f30:	66 c1 e8 08          	shr    ax,0x8
c0006f34:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f38:	43                   	inc    ebx
c0006f39:	eb de                	jmp    c0006f19 <f_setlabel+0x243>
c0006f3b:	89 f0                	mov    eax,esi
c0006f3d:	83 c4 74             	add    esp,0x74
c0006f40:	5b                   	pop    ebx
c0006f41:	5e                   	pop    esi
c0006f42:	c3                   	ret    

c0006f43 <f_forward>:
c0006f43:	55                   	push   ebp
c0006f44:	57                   	push   edi
c0006f45:	56                   	push   esi
c0006f46:	53                   	push   ebx
c0006f47:	83 ec 2c             	sub    esp,0x2c
c0006f4a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f4e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f58:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f5c:	89 d8                	mov    eax,ebx
c0006f5e:	e8 b1 b1 ff ff       	call   c0002114 <validate>
c0006f63:	89 c5                	mov    ebp,eax
c0006f65:	85 c0                	test   eax,eax
c0006f67:	0f 85 aa 01 00 00    	jne    c0007117 <f_forward+0x1d4>
c0006f6d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f71:	85 ed                	test   ebp,ebp
c0006f73:	0f 85 9e 01 00 00    	jne    c0007117 <f_forward+0x1d4>
c0006f79:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f7d:	0f 84 8f 01 00 00    	je     c0007112 <f_forward+0x1cf>
c0006f83:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f86:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f89:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f8c:	bf 00 00 00 00       	mov    edi,0x0
c0006f91:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f94:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f98:	89 d1                	mov    ecx,edx
c0006f9a:	19 f9                	sbb    ecx,edi
c0006f9c:	0f 83 cf 00 00 00    	jae    c0007071 <f_forward+0x12e>
c0006fa2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fa6:	e9 c6 00 00 00       	jmp    c0007071 <f_forward+0x12e>
c0006fab:	50                   	push   eax
c0006fac:	50                   	push   eax
c0006fad:	6a 00                	push   0x0
c0006faf:	6a 00                	push   0x0
c0006fb1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fb5:	83 c4 10             	add    esp,0x10
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	0f 84 57 01 00 00    	je     c0007117 <f_forward+0x1d4>
c0006fc0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fc3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fc7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fca:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fce:	89 d7                	mov    edi,edx
c0006fd0:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fd3:	89 c6                	mov    esi,eax
c0006fd5:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fd9:	21 ce                	and    esi,ecx
c0006fdb:	89 c1                	mov    ecx,eax
c0006fdd:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fe3:	0f 84 98 00 00 00    	je     c0007081 <f_forward+0x13e>
c0006fe9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fed:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006ff0:	89 c8                	mov    eax,ecx
c0006ff2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006ff6:	e8 af ac ff ff       	call   c0001caa <clst2sect>
c0006ffb:	89 d7                	mov    edi,edx
c0006ffd:	09 c7                	or     edi,eax
c0006fff:	0f 84 9e 00 00 00    	je     c00070a3 <f_forward+0x160>
c0007005:	31 ff                	xor    edi,edi
c0007007:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000700a:	01 c6                	add    esi,eax
c000700c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007010:	11 d7                	adc    edi,edx
c0007012:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007015:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007018:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000701c:	39 fa                	cmp    edx,edi
c000701e:	0f 85 a2 00 00 00    	jne    c00070c6 <f_forward+0x183>
c0007024:	39 f0                	cmp    eax,esi
c0007026:	0f 85 9a 00 00 00    	jne    c00070c6 <f_forward+0x183>
c000702c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000702f:	ba 00 02 00 00       	mov    edx,0x200
c0007034:	25 ff 01 00 00       	and    eax,0x1ff
c0007039:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000703d:	29 c2                	sub    edx,eax
c000703f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007042:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007045:	39 d1                	cmp    ecx,edx
c0007047:	76 02                	jbe    c000704b <f_forward+0x108>
c0007049:	89 d1                	mov    ecx,edx
c000704b:	8d 73 50             	lea    esi,[ebx+0x50]
c000704e:	52                   	push   edx
c000704f:	01 c6                	add    esi,eax
c0007051:	52                   	push   edx
c0007052:	51                   	push   ecx
c0007053:	56                   	push   esi
c0007054:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007058:	83 c4 10             	add    esp,0x10
c000705b:	85 c0                	test   eax,eax
c000705d:	74 44                	je     c00070a3 <f_forward+0x160>
c000705f:	31 ff                	xor    edi,edi
c0007061:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007064:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007067:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000706b:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c000706f:	01 07                	add    DWORD PTR [edi],eax
c0007071:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007076:	0f 85 2f ff ff ff    	jne    c0006fab <f_forward+0x68>
c000707c:	e9 96 00 00 00       	jmp    c0007117 <f_forward+0x1d4>
c0007081:	85 f6                	test   esi,esi
c0007083:	0f 85 60 ff ff ff    	jne    c0006fe9 <f_forward+0xa6>
c0007089:	89 d7                	mov    edi,edx
c000708b:	09 c7                	or     edi,eax
c000708d:	75 05                	jne    c0007094 <f_forward+0x151>
c000708f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007092:	eb 0a                	jmp    c000709e <f_forward+0x15b>
c0007094:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007097:	89 d8                	mov    eax,ebx
c0007099:	e8 d9 bc ff ff       	call   c0002d77 <get_fat>
c000709e:	83 f8 01             	cmp    eax,0x1
c00070a1:	77 0b                	ja     c00070ae <f_forward+0x16b>
c00070a3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070a7:	bd 02 00 00 00       	mov    ebp,0x2
c00070ac:	eb 69                	jmp    c0007117 <f_forward+0x1d4>
c00070ae:	83 f8 ff             	cmp    eax,0xffffffff
c00070b1:	75 0b                	jne    c00070be <f_forward+0x17b>
c00070b3:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070b7:	bd 01 00 00 00       	mov    ebp,0x1
c00070bc:	eb 59                	jmp    c0007117 <f_forward+0x1d4>
c00070be:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070c1:	e9 23 ff ff ff       	jmp    c0006fe9 <f_forward+0xa6>
c00070c6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070ca:	79 20                	jns    c00070ec <f_forward+0x1a9>
c00070cc:	83 ec 0c             	sub    esp,0xc
c00070cf:	6a 01                	push   0x1
c00070d1:	52                   	push   edx
c00070d2:	50                   	push   eax
c00070d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070d7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070db:	50                   	push   eax
c00070dc:	e8 fb a8 ff ff       	call   c00019dc <disk_write>
c00070e1:	83 c4 20             	add    esp,0x20
c00070e4:	85 c0                	test   eax,eax
c00070e6:	75 cb                	jne    c00070b3 <f_forward+0x170>
c00070e8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070ec:	83 ec 0c             	sub    esp,0xc
c00070ef:	6a 01                	push   0x1
c00070f1:	57                   	push   edi
c00070f2:	56                   	push   esi
c00070f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070fb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070ff:	50                   	push   eax
c0007100:	e8 c1 a8 ff ff       	call   c00019c6 <disk_read>
c0007105:	83 c4 20             	add    esp,0x20
c0007108:	85 c0                	test   eax,eax
c000710a:	0f 84 1c ff ff ff    	je     c000702c <f_forward+0xe9>
c0007110:	eb a1                	jmp    c00070b3 <f_forward+0x170>
c0007112:	bd 07 00 00 00       	mov    ebp,0x7
c0007117:	83 c4 2c             	add    esp,0x2c
c000711a:	89 e8                	mov    eax,ebp
c000711c:	5b                   	pop    ebx
c000711d:	5e                   	pop    esi
c000711e:	5f                   	pop    edi
c000711f:	5d                   	pop    ebp
c0007120:	c3                   	ret    

c0007121 <f_mkfs>:
c0007121:	55                   	push   ebp
c0007122:	57                   	push   edi
c0007123:	56                   	push   esi
c0007124:	53                   	push   ebx
c0007125:	bb 0b 00 00 00       	mov    ebx,0xb
c000712a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007130:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007137:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000713e:	e8 b0 ae ff ff       	call   c0001ff3 <get_ldnumber>
c0007143:	85 c0                	test   eax,eax
c0007145:	0f 88 ec 10 00 00    	js     c0008237 <f_mkfs+0x1116>
c000714b:	8b 14 85 c0 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3e40]
c0007152:	85 d2                	test   edx,edx
c0007154:	74 03                	je     c0007159 <f_mkfs+0x38>
c0007156:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007159:	85 f6                	test   esi,esi
c000715b:	75 05                	jne    c0007162 <f_mkfs+0x41>
c000715d:	be 00 76 02 c0       	mov    esi,0xc0027600
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	0f b6 c0             	movzx  eax,al
c0007168:	bb 03 00 00 00       	mov    ebx,0x3
c000716d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007171:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007175:	e8 49 a8 ff ff       	call   c00019c3 <disk_initialize>
c000717a:	83 c4 10             	add    esp,0x10
c000717d:	a8 01                	test   al,0x1
c000717f:	0f 85 b2 10 00 00    	jne    c0008237 <f_mkfs+0x1116>
c0007185:	bb 0a 00 00 00       	mov    ebx,0xa
c000718a:	a8 04                	test   al,0x4
c000718c:	0f 85 a5 10 00 00    	jne    c0008237 <f_mkfs+0x1116>
c0007192:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007195:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007199:	85 c0                	test   eax,eax
c000719b:	75 20                	jne    c00071bd <f_mkfs+0x9c>
c000719d:	51                   	push   ecx
c000719e:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071a2:	50                   	push   eax
c00071a3:	6a 03                	push   0x3
c00071a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071a9:	e8 44 a8 ff ff       	call   c00019f2 <disk_ioctl>
c00071ae:	83 c4 10             	add    esp,0x10
c00071b1:	85 c0                	test   eax,eax
c00071b3:	74 08                	je     c00071bd <f_mkfs+0x9c>
c00071b5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071bd:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071c1:	8d 42 ff             	lea    eax,[edx-0x1]
c00071c4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071c9:	77 04                	ja     c00071cf <f_mkfs+0xae>
c00071cb:	85 c2                	test   edx,eax
c00071cd:	74 08                	je     c00071d7 <f_mkfs+0xb6>
c00071cf:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071d7:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071da:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00071de:	48                   	dec    eax
c00071df:	3c 01                	cmp    al,0x1
c00071e1:	76 05                	jbe    c00071e8 <f_mkfs+0xc7>
c00071e3:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00071e8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071ef:	48                   	dec    eax
c00071f0:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071f5:	77 07                	ja     c00071fe <f_mkfs+0xdd>
c00071f7:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071fc:	74 08                	je     c0007206 <f_mkfs+0xe5>
c00071fe:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007206:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007209:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000720f:	77 07                	ja     c0007218 <f_mkfs+0xf7>
c0007211:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007214:	85 d8                	test   eax,ebx
c0007216:	74 02                	je     c000721a <f_mkfs+0xf9>
c0007218:	31 db                	xor    ebx,ebx
c000721a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007225:	77 0a                	ja     c0007231 <f_mkfs+0x110>
c0007227:	bb 11 00 00 00       	mov    ebx,0x11
c000722c:	e9 06 10 00 00       	jmp    c0008237 <f_mkfs+0x1116>
c0007231:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007238:	8b 36                	mov    esi,DWORD PTR [esi]
c000723a:	85 ed                	test   ebp,ebp
c000723c:	75 1e                	jne    c000725c <f_mkfs+0x13b>
c000723e:	83 ec 0c             	sub    esp,0xc
c0007241:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007248:	25 00 fe ff ff       	and    eax,0xfffffe00
c000724d:	50                   	push   eax
c000724e:	e8 f1 0f 00 00       	call   c0008244 <ff_memalloc>
c0007253:	83 c4 10             	add    esp,0x10
c0007256:	89 c5                	mov    ebp,eax
c0007258:	85 c0                	test   eax,eax
c000725a:	74 cb                	je     c0007227 <f_mkfs+0x106>
c000725c:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007264:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000726c:	52                   	push   edx
c000726d:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007271:	50                   	push   eax
c0007272:	6a 01                	push   0x1
c0007274:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007278:	e8 75 a7 ff ff       	call   c00019f2 <disk_ioctl>
c000727d:	83 c4 10             	add    esp,0x10
c0007280:	85 c0                	test   eax,eax
c0007282:	0f 85 4a 0f 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007288:	89 f1                	mov    ecx,esi
c000728a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007292:	83 e1 0f             	and    ecx,0xf
c0007295:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000729d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072a1:	83 e6 08             	and    esi,0x8
c00072a4:	75 56                	jne    c00072fc <f_mkfs+0x1db>
c00072a6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072aa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072ae:	83 ff 00             	cmp    edi,0x0
c00072b1:	76 20                	jbe    c00072d3 <f_mkfs+0x1b2>
c00072b3:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072b8:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072c0:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072c6:	83 d7 ff             	adc    edi,0xffffffff
c00072c9:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072cd:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072d1:	eb 21                	jmp    c00072f4 <f_mkfs+0x1d3>
c00072d3:	ba 3f 00 00 00       	mov    edx,0x3f
c00072d8:	39 f2                	cmp    edx,esi
c00072da:	19 f8                	sbb    eax,edi
c00072dc:	73 1e                	jae    c00072fc <f_mkfs+0x1db>
c00072de:	83 c6 c1             	add    esi,0xffffffc1
c00072e1:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072e9:	83 d7 ff             	adc    edi,0xffffffff
c00072ec:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072f0:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072f4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072fc:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007300:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007304:	89 04 24             	mov    DWORD PTR [esp],eax
c0007307:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000730b:	31 c0                	xor    eax,eax
c000730d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007312:	89 c7                	mov    edi,eax
c0007314:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007317:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000731b:	0f 83 c5 0a 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c0007321:	89 df                	mov    edi,ebx
c0007323:	c1 ef 09             	shr    edi,0x9
c0007326:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000732a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007331:	c1 ef 09             	shr    edi,0x9
c0007334:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007339:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000733d:	74 29                	je     c0007368 <f_mkfs+0x247>
c000733f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007345:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000734a:	0f 97 c2             	seta   dl
c000734d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007350:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007354:	0f 92 c0             	setb   al
c0007357:	08 c2                	or     dl,al
c0007359:	75 5b                	jne    c00073b6 <f_mkfs+0x295>
c000735b:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000735f:	83 e0 07             	and    eax,0x7
c0007362:	3c 04                	cmp    al,0x4
c0007364:	74 50                	je     c00073b6 <f_mkfs+0x295>
c0007366:	eb 1b                	jmp    c0007383 <f_mkfs+0x262>
c0007368:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000736d:	0f 87 73 0a 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c0007373:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007379:	76 08                	jbe    c0007383 <f_mkfs+0x262>
c000737b:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007383:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007387:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000738b:	83 e0 01             	and    eax,0x1
c000738e:	80 e1 02             	and    cl,0x2
c0007391:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007395:	74 0d                	je     c00073a4 <f_mkfs+0x283>
c0007397:	84 c0                	test   al,al
c0007399:	0f 84 53 09 00 00    	je     c0007cf2 <f_mkfs+0xbd1>
c000739f:	e9 12 08 00 00       	jmp    c0007bb6 <f_mkfs+0xa95>
c00073a4:	bb 13 00 00 00       	mov    ebx,0x13
c00073a9:	84 c0                	test   al,al
c00073ab:	0f 85 05 08 00 00    	jne    c0007bb6 <f_mkfs+0xa95>
c00073b1:	e9 39 0e 00 00       	jmp    c00081ef <f_mkfs+0x10ce>
c00073b6:	31 c0                	xor    eax,eax
c00073b8:	ba ff 0f 00 00       	mov    edx,0xfff
c00073bd:	89 c7                	mov    edi,eax
c00073bf:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073c2:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073c6:	0f 83 1a 0a 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c00073cc:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073d2:	77 39                	ja     c000740d <f_mkfs+0x2ec>
c00073d4:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073d9:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073e1:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073e4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073e8:	73 08                	jae    c00073f2 <f_mkfs+0x2d1>
c00073ea:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073f2:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073fa:	b8 00 00 00 00       	mov    eax,0x0
c00073ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007403:	73 08                	jae    c000740d <f_mkfs+0x2ec>
c0007405:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000740d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007411:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007415:	83 c0 20             	add    eax,0x20
c0007418:	83 d2 00             	adc    edx,0x0
c000741b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000741f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007423:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007427:	31 d2                	xor    edx,edx
c0007429:	31 ff                	xor    edi,edi
c000742b:	52                   	push   edx
c000742c:	89 fb                	mov    ebx,edi
c000742e:	50                   	push   eax
c000742f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007433:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007437:	e8 40 d8 01 00       	call   c0024c7c <__udivdi3>
c000743c:	83 c4 10             	add    esp,0x10
c000743f:	c1 e0 02             	shl    eax,0x2
c0007442:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007446:	05 07 02 00 00       	add    eax,0x207
c000744b:	89 f1                	mov    ecx,esi
c000744d:	c1 e8 09             	shr    eax,0x9
c0007450:	83 c1 ff             	add    ecx,0xffffffff
c0007453:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007457:	83 d3 ff             	adc    ebx,0xffffffff
c000745a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000745e:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007462:	31 d2                	xor    edx,edx
c0007464:	01 c8                	add    eax,ecx
c0007466:	11 da                	adc    edx,ebx
c0007468:	89 c1                	mov    ecx,eax
c000746a:	f7 de                	neg    esi
c000746c:	89 d0                	mov    eax,edx
c000746e:	83 d7 00             	adc    edi,0x0
c0007471:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007475:	f7 df                	neg    edi
c0007477:	21 f1                	and    ecx,esi
c0007479:	21 f8                	and    eax,edi
c000747b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000747f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007483:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007487:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000748b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000748f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007492:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007496:	0f ac d0 01          	shrd   eax,edx,0x1
c000749a:	89 df                	mov    edi,ebx
c000749c:	d1 ea                	shr    edx,1
c000749e:	39 c1                	cmp    ecx,eax
c00074a0:	19 d7                	sbb    edi,edx
c00074a2:	0f 83 3e 09 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c00074a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074ac:	31 d2                	xor    edx,edx
c00074ae:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074b6:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074bd:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074c1:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074c5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074cd:	83 f8 0f             	cmp    eax,0xf
c00074d0:	0f 86 10 09 00 00    	jbe    c0007de6 <f_mkfs+0xcc5>
c00074d6:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074de:	0f 87 02 09 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c00074e4:	31 d2                	xor    edx,edx
c00074e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074ea:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074f2:	83 c0 07             	add    eax,0x7
c00074f5:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074fd:	c1 e8 03             	shr    eax,0x3
c0007500:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007507:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000750b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000750f:	c1 e0 09             	shl    eax,0x9
c0007512:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007516:	48                   	dec    eax
c0007517:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000751b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000751f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007523:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007527:	31 d2                	xor    edx,edx
c0007529:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000752d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007534:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007538:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000753d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007541:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007545:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007549:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000754d:	31 ff                	xor    edi,edi
c000754f:	31 f6                	xor    esi,esi
c0007551:	31 db                	xor    ebx,ebx
c0007553:	85 ff                	test   edi,edi
c0007555:	74 05                	je     c000755c <f_mkfs+0x43b>
c0007557:	4f                   	dec    edi
c0007558:	74 44                	je     c000759e <f_mkfs+0x47d>
c000755a:	eb 4f                	jmp    c00075ab <f_mkfs+0x48a>
c000755c:	83 ec 0c             	sub    esp,0xc
c000755f:	0f b7 c3             	movzx  eax,bx
c0007562:	50                   	push   eax
c0007563:	e8 05 0e 00 00       	call   c000836d <ff_wtoupper>
c0007568:	83 c4 10             	add    esp,0x10
c000756b:	89 c1                	mov    ecx,eax
c000756d:	8d 53 01             	lea    edx,[ebx+0x1]
c0007570:	66 39 c3             	cmp    bx,ax
c0007573:	75 3e                	jne    c00075b3 <f_mkfs+0x492>
c0007575:	be 01 00 00 00       	mov    esi,0x1
c000757a:	89 df                	mov    edi,ebx
c000757c:	66 01 f7             	add    di,si
c000757f:	75 07                	jne    c0007588 <f_mkfs+0x467>
c0007581:	83 fe 7f             	cmp    esi,0x7f
c0007584:	77 31                	ja     c00075b7 <f_mkfs+0x496>
c0007586:	eb 16                	jmp    c000759e <f_mkfs+0x47d>
c0007588:	83 ec 0c             	sub    esp,0xc
c000758b:	0f b7 ff             	movzx  edi,di
c000758e:	57                   	push   edi
c000758f:	e8 d9 0d 00 00       	call   c000836d <ff_wtoupper>
c0007594:	83 c4 10             	add    esp,0x10
c0007597:	39 c7                	cmp    edi,eax
c0007599:	75 e6                	jne    c0007581 <f_mkfs+0x460>
c000759b:	46                   	inc    esi
c000759c:	eb dc                	jmp    c000757a <f_mkfs+0x459>
c000759e:	31 c0                	xor    eax,eax
c00075a0:	89 d9                	mov    ecx,ebx
c00075a2:	4e                   	dec    esi
c00075a3:	0f 95 c0             	setne  al
c00075a6:	43                   	inc    ebx
c00075a7:	89 c7                	mov    edi,eax
c00075a9:	eb 14                	jmp    c00075bf <f_mkfs+0x49e>
c00075ab:	89 f1                	mov    ecx,esi
c00075ad:	01 f3                	add    ebx,esi
c00075af:	31 ff                	xor    edi,edi
c00075b1:	eb 0c                	jmp    c00075bf <f_mkfs+0x49e>
c00075b3:	89 d3                	mov    ebx,edx
c00075b5:	eb 08                	jmp    c00075bf <f_mkfs+0x49e>
c00075b7:	bf 02 00 00 00       	mov    edi,0x2
c00075bc:	83 c9 ff             	or     ecx,0xffffffff
c00075bf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075c6:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075ca:	0f b6 c1             	movzx  eax,cl
c00075cd:	e8 3a a9 ff ff       	call   c0001f0c <xsum32>
c00075d2:	66 c1 e9 08          	shr    cx,0x8
c00075d6:	89 c2                	mov    edx,eax
c00075d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075db:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075df:	0f b7 c1             	movzx  eax,cx
c00075e2:	e8 25 a9 ff ff       	call   c0001f0c <xsum32>
c00075e7:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075ec:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075f0:	66 85 db             	test   bx,bx
c00075f3:	74 1f                	je     c0007614 <f_mkfs+0x4f3>
c00075f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075f8:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075ff:	83 c0 02             	add    eax,0x2
c0007602:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007608:	39 c2                	cmp    edx,eax
c000760a:	74 08                	je     c0007614 <f_mkfs+0x4f3>
c000760c:	89 04 24             	mov    DWORD PTR [esp],eax
c000760f:	e9 3f ff ff ff       	jmp    c0007553 <f_mkfs+0x432>
c0007614:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007617:	83 ec 0c             	sub    esp,0xc
c000761a:	05 01 02 00 00       	add    eax,0x201
c000761f:	c1 e8 09             	shr    eax,0x9
c0007622:	50                   	push   eax
c0007623:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007627:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000762b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000762f:	55                   	push   ebp
c0007630:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007634:	e8 a3 a3 ff ff       	call   c00019dc <disk_write>
c0007639:	83 c4 20             	add    esp,0x20
c000763c:	85 c0                	test   eax,eax
c000763e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007641:	0f 85 8b 0b 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007647:	89 d0                	mov    eax,edx
c0007649:	31 d2                	xor    edx,edx
c000764b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000764f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007653:	66 85 db             	test   bx,bx
c0007656:	74 04                	je     c000765c <f_mkfs+0x53b>
c0007658:	31 c0                	xor    eax,eax
c000765a:	eb b0                	jmp    c000760c <f_mkfs+0x4eb>
c000765c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007660:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007664:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007668:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c000766e:	31 d2                	xor    edx,edx
c0007670:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000767b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000767f:	c1 eb 09             	shr    ebx,0x9
c0007682:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007689:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000768d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007691:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007695:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007699:	8d 70 01             	lea    esi,[eax+0x1]
c000769c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076a4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076ab:	31 d2                	xor    edx,edx
c00076ad:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00076b5:	89 c1                	mov    ecx,eax
c00076b7:	89 e8                	mov    eax,ebp
c00076b9:	e8 e7 a3 ff ff       	call   c0001aa5 <mem_set>
c00076be:	31 c0                	xor    eax,eax
c00076c0:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076c3:	76 10                	jbe    c00076d5 <f_mkfs+0x5b4>
c00076c5:	83 fe 07             	cmp    esi,0x7
c00076c8:	76 0b                	jbe    c00076d5 <f_mkfs+0x5b4>
c00076ca:	40                   	inc    eax
c00076cb:	83 ee 08             	sub    esi,0x8
c00076ce:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076d3:	eb eb                	jmp    c00076c0 <f_mkfs+0x59f>
c00076d5:	b2 01                	mov    dl,0x1
c00076d7:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076db:	85 f6                	test   esi,esi
c00076dd:	74 0c                	je     c00076eb <f_mkfs+0x5ca>
c00076df:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076e2:	76 07                	jbe    c00076eb <f_mkfs+0x5ca>
c00076e4:	08 11                	or     BYTE PTR [ecx],dl
c00076e6:	4e                   	dec    esi
c00076e7:	d1 e2                	shl    edx,1
c00076e9:	eb f0                	jmp    c00076db <f_mkfs+0x5ba>
c00076eb:	89 df                	mov    edi,ebx
c00076ed:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076f1:	76 04                	jbe    c00076f7 <f_mkfs+0x5d6>
c00076f3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076f7:	83 ec 0c             	sub    esp,0xc
c00076fa:	57                   	push   edi
c00076fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007703:	55                   	push   ebp
c0007704:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007708:	e8 cf a2 ff ff       	call   c00019dc <disk_write>
c000770d:	83 c4 20             	add    esp,0x20
c0007710:	85 c0                	test   eax,eax
c0007712:	0f 85 ba 0a 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007718:	31 d2                	xor    edx,edx
c000771a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000771e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007722:	29 fb                	sub    ebx,edi
c0007724:	0f 85 7a ff ff ff    	jne    c00076a4 <f_mkfs+0x583>
c000772a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000772e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007736:	31 f6                	xor    esi,esi
c0007738:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000773c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000773f:	31 d2                	xor    edx,edx
c0007741:	89 e8                	mov    eax,ebp
c0007743:	e8 5d a3 ff ff       	call   c0001aa5 <mem_set>
c0007748:	31 c9                	xor    ecx,ecx
c000774a:	85 db                	test   ebx,ebx
c000774c:	75 40                	jne    c000778e <f_mkfs+0x66d>
c000774e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007753:	89 e8                	mov    eax,ebp
c0007755:	bb 02 00 00 00       	mov    ebx,0x2
c000775a:	e8 28 a3 ff ff       	call   c0001a87 <st_dword>
c000775f:	8d 45 04             	lea    eax,[ebp+0x4]
c0007762:	83 ca ff             	or     edx,0xffffffff
c0007765:	e8 1d a3 ff ff       	call   c0001a87 <st_dword>
c000776a:	b9 08 00 00 00       	mov    ecx,0x8
c000776f:	eb 1d                	jmp    c000778e <f_mkfs+0x66d>
c0007771:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007774:	76 3b                	jbe    c00077b1 <f_mkfs+0x690>
c0007776:	43                   	inc    ebx
c0007777:	83 fe 01             	cmp    esi,0x1
c000777a:	89 da                	mov    edx,ebx
c000777c:	77 03                	ja     c0007781 <f_mkfs+0x660>
c000777e:	83 ca ff             	or     edx,0xffffffff
c0007781:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007785:	4e                   	dec    esi
c0007786:	e8 fc a2 ff ff       	call   c0001a87 <st_dword>
c000778b:	83 c1 04             	add    ecx,0x4
c000778e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007792:	85 f6                	test   esi,esi
c0007794:	75 db                	jne    c0007771 <f_mkfs+0x650>
c0007796:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000779b:	77 14                	ja     c00077b1 <f_mkfs+0x690>
c000779d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077a1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077a8:	85 f6                	test   esi,esi
c00077aa:	74 05                	je     c00077b1 <f_mkfs+0x690>
c00077ac:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077af:	77 dd                	ja     c000778e <f_mkfs+0x66d>
c00077b1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077b5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077b9:	39 cf                	cmp    edi,ecx
c00077bb:	76 02                	jbe    c00077bf <f_mkfs+0x69e>
c00077bd:	89 cf                	mov    edi,ecx
c00077bf:	83 ec 0c             	sub    esp,0xc
c00077c2:	57                   	push   edi
c00077c3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077c7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077cb:	55                   	push   ebp
c00077cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077d0:	e8 07 a2 ff ff       	call   c00019dc <disk_write>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	85 c0                	test   eax,eax
c00077da:	0f 85 f2 09 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c00077e0:	31 d2                	xor    edx,edx
c00077e2:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00077e6:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c00077ea:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c00077ee:	0f 85 48 ff ff ff    	jne    c000773c <f_mkfs+0x61b>
c00077f4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077f7:	31 d2                	xor    edx,edx
c00077f9:	89 e8                	mov    eax,ebp
c00077fb:	31 ff                	xor    edi,edi
c00077fd:	e8 a3 a2 ff ff       	call   c0001aa5 <mem_set>
c0007802:	8d 45 34             	lea    eax,[ebp+0x34]
c0007805:	ba 02 00 00 00       	mov    edx,0x2
c000780a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000780e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007812:	e8 70 a2 ff ff       	call   c0001a87 <st_dword>
c0007817:	8d 45 38             	lea    eax,[ebp+0x38]
c000781a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000781e:	e8 64 a2 ff ff       	call   c0001a87 <st_dword>
c0007823:	8d 45 44             	lea    eax,[ebp+0x44]
c0007826:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000782a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c000782e:	e8 54 a2 ff ff       	call   c0001a87 <st_dword>
c0007833:	8d 45 54             	lea    eax,[ebp+0x54]
c0007836:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000783a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000783e:	83 c2 02             	add    edx,0x2
c0007841:	e8 41 a2 ff ff       	call   c0001a87 <st_dword>
c0007846:	8d 45 58             	lea    eax,[ebp+0x58]
c0007849:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000784d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007851:	e8 31 a2 ff ff       	call   c0001a87 <st_dword>
c0007856:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000785a:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000785f:	89 c6                	mov    esi,eax
c0007861:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007865:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007869:	89 04 24             	mov    DWORD PTR [esp],eax
c000786c:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007870:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007873:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007877:	39 cb                	cmp    ebx,ecx
c0007879:	76 02                	jbe    c000787d <f_mkfs+0x75c>
c000787b:	89 cb                	mov    ebx,ecx
c000787d:	83 ec 0c             	sub    esp,0xc
c0007880:	53                   	push   ebx
c0007881:	57                   	push   edi
c0007882:	56                   	push   esi
c0007883:	55                   	push   ebp
c0007884:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007888:	e8 4f a1 ff ff       	call   c00019dc <disk_write>
c000788d:	83 c4 20             	add    esp,0x20
c0007890:	85 c0                	test   eax,eax
c0007892:	0f 85 3a 09 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007898:	31 d2                	xor    edx,edx
c000789a:	b9 00 02 00 00       	mov    ecx,0x200
c000789f:	89 e8                	mov    eax,ebp
c00078a1:	e8 ff a1 ff ff       	call   c0001aa5 <mem_set>
c00078a6:	31 d2                	xor    edx,edx
c00078a8:	01 de                	add    esi,ebx
c00078aa:	11 d7                	adc    edi,edx
c00078ac:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078af:	75 bf                	jne    c0007870 <f_mkfs+0x74f>
c00078b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078b5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078b9:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078c1:	b9 00 02 00 00       	mov    ecx,0x200
c00078c6:	31 d2                	xor    edx,edx
c00078c8:	89 e8                	mov    eax,ebp
c00078ca:	e8 d6 a1 ff ff       	call   c0001aa5 <mem_set>
c00078cf:	b9 0b 00 00 00       	mov    ecx,0xb
c00078d4:	ba e0 76 02 c0       	mov    edx,0xc00276e0
c00078d9:	89 e8                	mov    eax,ebp
c00078db:	e8 b0 a1 ff ff       	call   c0001a90 <mem_cpy>
c00078e0:	8d 45 40             	lea    eax,[ebp+0x40]
c00078e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078e7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078eb:	e8 9a a1 ff ff       	call   c0001a8a <st_qword>
c00078f0:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078f4:	8d 45 48             	lea    eax,[ebp+0x48]
c00078f7:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078fb:	e8 8a a1 ff ff       	call   c0001a8a <st_qword>
c0007900:	8d 45 50             	lea    eax,[ebp+0x50]
c0007903:	ba 20 00 00 00       	mov    edx,0x20
c0007908:	e8 7a a1 ff ff       	call   c0001a87 <st_dword>
c000790d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007911:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007915:	e8 6d a1 ff ff       	call   c0001a87 <st_dword>
c000791a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000791e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007922:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007926:	e8 5c a1 ff ff       	call   c0001a87 <st_dword>
c000792b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c000792e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007932:	e8 50 a1 ff ff       	call   c0001a87 <st_dword>
c0007937:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000793b:	8d 50 02             	lea    edx,[eax+0x2]
c000793e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007941:	e8 41 a1 ff ff       	call   c0001a87 <st_dword>
c0007946:	8d 45 64             	lea    eax,[ebp+0x64]
c0007949:	ba 00 00 21 50       	mov    edx,0x50210000
c000794e:	e8 34 a1 ff ff       	call   c0001a87 <st_dword>
c0007953:	8d 45 68             	lea    eax,[ebp+0x68]
c0007956:	ba 00 01 00 00       	mov    edx,0x100
c000795b:	e8 23 a1 ff ff       	call   c0001a83 <st_word>
c0007960:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007964:	b8 0a 00 00 00       	mov    eax,0xa
c0007969:	48                   	dec    eax
c000796a:	74 05                	je     c0007971 <f_mkfs+0x850>
c000796c:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c000796f:	eb f8                	jmp    c0007969 <f_mkfs+0x848>
c0007971:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007975:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007979:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000797d:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007981:	74 05                	je     c0007988 <f_mkfs+0x867>
c0007983:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007986:	eb f5                	jmp    c000797d <f_mkfs+0x85c>
c0007988:	8d 45 78             	lea    eax,[ebp+0x78]
c000798b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007990:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007996:	31 db                	xor    ebx,ebx
c0007998:	e8 e6 a0 ff ff       	call   c0001a83 <st_word>
c000799d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079a3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00079ab:	e8 d3 a0 ff ff       	call   c0001a83 <st_word>
c00079b0:	31 c9                	xor    ecx,ecx
c00079b2:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079b5:	83 f8 01             	cmp    eax,0x1
c00079b8:	76 13                	jbe    c00079cd <f_mkfs+0x8ac>
c00079ba:	83 f9 70             	cmp    ecx,0x70
c00079bd:	74 0e                	je     c00079cd <f_mkfs+0x8ac>
c00079bf:	89 da                	mov    edx,ebx
c00079c1:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079c6:	e8 41 a5 ff ff       	call   c0001f0c <xsum32>
c00079cb:	89 c3                	mov    ebx,eax
c00079cd:	41                   	inc    ecx
c00079ce:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079d4:	75 dc                	jne    c00079b2 <f_mkfs+0x891>
c00079d6:	89 f0                	mov    eax,esi
c00079d8:	89 fa                	mov    edx,edi
c00079da:	83 c0 01             	add    eax,0x1
c00079dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079e1:	83 d2 00             	adc    edx,0x0
c00079e4:	83 ec 0c             	sub    esp,0xc
c00079e7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00079eb:	6a 01                	push   0x1
c00079ed:	57                   	push   edi
c00079ee:	56                   	push   esi
c00079ef:	55                   	push   ebp
c00079f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079f4:	e8 e3 9f ff ff       	call   c00019dc <disk_write>
c00079f9:	83 c4 20             	add    esp,0x20
c00079fc:	85 c0                	test   eax,eax
c00079fe:	0f 85 ce 07 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007a04:	31 d2                	xor    edx,edx
c0007a06:	b9 00 02 00 00       	mov    ecx,0x200
c0007a0b:	89 e8                	mov    eax,ebp
c0007a0d:	e8 93 a0 ff ff       	call   c0001aa5 <mem_set>
c0007a12:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a17:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a1a:	e8 64 a0 ff ff       	call   c0001a83 <st_word>
c0007a1f:	89 f0                	mov    eax,esi
c0007a21:	89 fa                	mov    edx,edi
c0007a23:	83 c0 09             	add    eax,0x9
c0007a26:	83 d2 00             	adc    edx,0x0
c0007a29:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a2c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a30:	31 c9                	xor    ecx,ecx
c0007a32:	41                   	inc    ecx
c0007a33:	89 da                	mov    edx,ebx
c0007a35:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a3a:	e8 cd a4 ff ff       	call   c0001f0c <xsum32>
c0007a3f:	89 c3                	mov    ebx,eax
c0007a41:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a47:	75 e9                	jne    c0007a32 <f_mkfs+0x911>
c0007a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a4d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a51:	83 c0 01             	add    eax,0x1
c0007a54:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a58:	83 d2 00             	adc    edx,0x0
c0007a5b:	83 ec 0c             	sub    esp,0xc
c0007a5e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a62:	6a 01                	push   0x1
c0007a64:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a6c:	55                   	push   ebp
c0007a6d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a71:	e8 66 9f ff ff       	call   c00019dc <disk_write>
c0007a76:	83 c4 20             	add    esp,0x20
c0007a79:	85 c0                	test   eax,eax
c0007a7b:	0f 85 51 07 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007a81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a85:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a89:	75 09                	jne    c0007a94 <f_mkfs+0x973>
c0007a8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a8e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a92:	74 12                	je     c0007aa6 <f_mkfs+0x985>
c0007a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a98:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a9c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007aa0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007aa4:	eb 8a                	jmp    c0007a30 <f_mkfs+0x90f>
c0007aa6:	31 d2                	xor    edx,edx
c0007aa8:	b9 00 02 00 00       	mov    ecx,0x200
c0007aad:	89 e8                	mov    eax,ebp
c0007aaf:	e8 f1 9f ff ff       	call   c0001aa5 <mem_set>
c0007ab4:	83 c6 0b             	add    esi,0xb
c0007ab7:	83 d7 00             	adc    edi,0x0
c0007aba:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007abe:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007ac2:	31 c9                	xor    ecx,ecx
c0007ac4:	41                   	inc    ecx
c0007ac5:	89 da                	mov    edx,ebx
c0007ac7:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007acc:	e8 3b a4 ff ff       	call   c0001f0c <xsum32>
c0007ad1:	89 c3                	mov    ebx,eax
c0007ad3:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ad9:	75 e9                	jne    c0007ac4 <f_mkfs+0x9a3>
c0007adb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ade:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ae2:	83 c6 01             	add    esi,0x1
c0007ae5:	83 d7 00             	adc    edi,0x0
c0007ae8:	83 ec 0c             	sub    esp,0xc
c0007aeb:	6a 01                	push   0x1
c0007aed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af5:	55                   	push   ebp
c0007af6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007afa:	e8 dd 9e ff ff       	call   c00019dc <disk_write>
c0007aff:	83 c4 20             	add    esp,0x20
c0007b02:	85 c0                	test   eax,eax
c0007b04:	0f 85 c8 06 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007b0a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b0e:	75 06                	jne    c0007b16 <f_mkfs+0x9f5>
c0007b10:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b14:	74 09                	je     c0007b1f <f_mkfs+0x9fe>
c0007b16:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b19:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b1d:	eb a3                	jmp    c0007ac2 <f_mkfs+0x9a1>
c0007b1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b23:	89 da                	mov    edx,ebx
c0007b25:	01 e8                	add    eax,ebp
c0007b27:	e8 5b 9f ff ff       	call   c0001a87 <st_dword>
c0007b2c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b31:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b39:	75 e4                	jne    c0007b1f <f_mkfs+0x9fe>
c0007b3b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b3e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b42:	83 c6 02             	add    esi,0x2
c0007b45:	83 d7 00             	adc    edi,0x0
c0007b48:	83 ec 0c             	sub    esp,0xc
c0007b4b:	6a 01                	push   0x1
c0007b4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b51:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b55:	55                   	push   ebp
c0007b56:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b5a:	e8 7d 9e ff ff       	call   c00019dc <disk_write>
c0007b5f:	83 c4 20             	add    esp,0x20
c0007b62:	85 c0                	test   eax,eax
c0007b64:	0f 85 68 06 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007b6a:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b6f:	74 0d                	je     c0007b7e <f_mkfs+0xa5d>
c0007b71:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b79:	e9 43 fd ff ff       	jmp    c00078c1 <f_mkfs+0x7a0>
c0007b7e:	b1 07                	mov    cl,0x7
c0007b80:	e9 e3 05 00 00       	jmp    c0008168 <f_mkfs+0x1047>
c0007b85:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b8a:	0f 85 4f 02 00 00    	jne    c0007ddf <f_mkfs+0xcbe>
c0007b90:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b95:	0f 86 22 02 00 00    	jbe    c0007dbd <f_mkfs+0xc9c>
c0007b9b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ba0:	0f 85 81 06 00 00    	jne    c0008227 <f_mkfs+0x1106>
c0007ba6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ba9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bad:	83 f8 40             	cmp    eax,0x40
c0007bb0:	0f 87 51 06 00 00    	ja     c0008207 <f_mkfs+0x10e6>
c0007bb6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bba:	85 ff                	test   edi,edi
c0007bbc:	75 1c                	jne    c0007bda <f_mkfs+0xab9>
c0007bbe:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bc1:	ba e0 75 02 c0       	mov    edx,0xc00275e0
c0007bc6:	c1 e9 0c             	shr    ecx,0xc
c0007bc9:	bf 01 00 00 00       	mov    edi,0x1
c0007bce:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bd1:	66 85 c0             	test   ax,ax
c0007bd4:	0f 85 95 01 00 00    	jne    c0007d6f <f_mkfs+0xc4e>
c0007bda:	31 d2                	xor    edx,edx
c0007bdc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bdf:	f7 f7                	div    edi
c0007be1:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007be6:	0f 86 95 01 00 00    	jbe    c0007d81 <f_mkfs+0xc60>
c0007bec:	83 c0 02             	add    eax,0x2
c0007bef:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007bf4:	01 c0                	add    eax,eax
c0007bf6:	05 ff 01 00 00       	add    eax,0x1ff
c0007bfb:	be 01 00 00 00       	mov    esi,0x1
c0007c00:	c1 e8 09             	shr    eax,0x9
c0007c03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c0b:	c1 e0 05             	shl    eax,0x5
c0007c0e:	c1 e8 09             	shr    eax,0x9
c0007c11:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c15:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c20:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c24:	89 f0                	mov    eax,esi
c0007c26:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c2a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c2e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c32:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c3a:	31 d2                	xor    edx,edx
c0007c3c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c41:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c45:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c49:	31 db                	xor    ebx,ebx
c0007c4b:	01 c8                	add    eax,ecx
c0007c4d:	11 da                	adc    edx,ebx
c0007c4f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c53:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c57:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c5b:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c5f:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c63:	f7 da                	neg    edx
c0007c65:	21 d1                	and    ecx,edx
c0007c67:	29 d9                	sub    ecx,ebx
c0007c69:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c6e:	0f 85 20 01 00 00    	jne    c0007d94 <f_mkfs+0xc73>
c0007c74:	31 db                	xor    ebx,ebx
c0007c76:	01 ce                	add    esi,ecx
c0007c78:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c7c:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c80:	31 d2                	xor    edx,edx
c0007c82:	89 f8                	mov    eax,edi
c0007c84:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c88:	c1 e0 04             	shl    eax,0x4
c0007c8b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c8f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c93:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c97:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c9b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c9e:	19 d3                	sbb    ebx,edx
c0007ca0:	0f 82 40 01 00 00    	jb     c0007de6 <f_mkfs+0xcc5>
c0007ca6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ca9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cad:	89 c8                	mov    eax,ecx
c0007caf:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007cb4:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007cb8:	29 f0                	sub    eax,esi
c0007cba:	29 d0                	sub    eax,edx
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	f7 f7                	div    edi
c0007cc0:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cc5:	89 c3                	mov    ebx,eax
c0007cc7:	0f 85 b8 fe ff ff    	jne    c0007b85 <f_mkfs+0xa64>
c0007ccd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cd2:	0f 87 1d 01 00 00    	ja     c0007df5 <f_mkfs+0xcd4>
c0007cd8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cdd:	0f 85 03 01 00 00    	jne    c0007de6 <f_mkfs+0xcc5>
c0007ce3:	83 ff 01             	cmp    edi,0x1
c0007ce6:	0f 86 fa 00 00 00    	jbe    c0007de6 <f_mkfs+0xcc5>
c0007cec:	d1 ef                	shr    edi,1
c0007cee:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007cf2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007cf6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007cf9:	85 db                	test   ebx,ebx
c0007cfb:	75 2d                	jne    c0007d2a <f_mkfs+0xc09>
c0007cfd:	89 cb                	mov    ebx,ecx
c0007cff:	ba f0 75 02 c0       	mov    edx,0xc00275f0
c0007d04:	c1 eb 11             	shr    ebx,0x11
c0007d07:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d0f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d12:	66 85 c0             	test   ax,ax
c0007d15:	74 11                	je     c0007d28 <f_mkfs+0xc07>
c0007d17:	83 c2 02             	add    edx,0x2
c0007d1a:	39 d8                	cmp    eax,ebx
c0007d1c:	77 0a                	ja     c0007d28 <f_mkfs+0xc07>
c0007d1e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d22:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d26:	eb e7                	jmp    c0007d0f <f_mkfs+0xbee>
c0007d28:	31 db                	xor    ebx,ebx
c0007d2a:	31 d2                	xor    edx,edx
c0007d2c:	89 c8                	mov    eax,ecx
c0007d2e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d32:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d39:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d3e:	c1 ea 09             	shr    edx,0x9
c0007d41:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d46:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d4a:	0f 87 96 00 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c0007d50:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d54:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d5c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d60:	be 20 00 00 00       	mov    esi,0x20
c0007d65:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d6a:	e9 a6 fe ff ff       	jmp    c0007c15 <f_mkfs+0xaf4>
c0007d6f:	83 c2 02             	add    edx,0x2
c0007d72:	39 c8                	cmp    eax,ecx
c0007d74:	0f 87 60 fe ff ff    	ja     c0007bda <f_mkfs+0xab9>
c0007d7a:	01 ff                	add    edi,edi
c0007d7c:	e9 4d fe ff ff       	jmp    c0007bce <f_mkfs+0xaad>
c0007d81:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d84:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d89:	40                   	inc    eax
c0007d8a:	d1 e8                	shr    eax,1
c0007d8c:	83 c0 03             	add    eax,0x3
c0007d8f:	e9 62 fe ff ff       	jmp    c0007bf6 <f_mkfs+0xad5>
c0007d94:	31 d2                	xor    edx,edx
c0007d96:	89 c8                	mov    eax,ecx
c0007d98:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d9c:	85 d2                	test   edx,edx
c0007d9e:	74 0c                	je     c0007dac <f_mkfs+0xc8b>
c0007da0:	49                   	dec    ecx
c0007da1:	46                   	inc    esi
c0007da2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007da7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007dac:	89 c8                	mov    eax,ecx
c0007dae:	31 d2                	xor    edx,edx
c0007db0:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007db4:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007db8:	e9 c3 fe ff ff       	jmp    c0007c80 <f_mkfs+0xb5f>
c0007dbd:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dc2:	77 31                	ja     c0007df5 <f_mkfs+0xcd4>
c0007dc4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dc9:	75 1b                	jne    c0007de6 <f_mkfs+0xcc5>
c0007dcb:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dd2:	3d 80 00 00 00       	cmp    eax,0x80
c0007dd7:	0f 86 d9 fd ff ff    	jbe    c0007bb6 <f_mkfs+0xa95>
c0007ddd:	eb 07                	jmp    c0007de6 <f_mkfs+0xcc5>
c0007ddf:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007de4:	76 0a                	jbe    c0007df0 <f_mkfs+0xccf>
c0007de6:	bb 0e 00 00 00       	mov    ebx,0xe
c0007deb:	e9 ff 03 00 00       	jmp    c00081ef <f_mkfs+0x10ce>
c0007df0:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007df5:	31 d2                	xor    edx,edx
c0007df7:	b9 00 02 00 00       	mov    ecx,0x200
c0007dfc:	89 e8                	mov    eax,ebp
c0007dfe:	e8 a2 9c ff ff       	call   c0001aa5 <mem_set>
c0007e03:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e08:	ba 02 77 02 c0       	mov    edx,0xc0027702
c0007e0d:	89 e8                	mov    eax,ebp
c0007e0f:	e8 7c 9c ff ff       	call   c0001a90 <mem_cpy>
c0007e14:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e17:	ba 00 02 00 00       	mov    edx,0x200
c0007e1c:	e8 62 9c ff ff       	call   c0001a83 <st_word>
c0007e21:	89 f8                	mov    eax,edi
c0007e23:	0f b7 d6             	movzx  edx,si
c0007e26:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e29:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e2c:	e8 52 9c ff ff       	call   c0001a83 <st_word>
c0007e31:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e35:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e3a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e3d:	75 08                	jne    c0007e47 <f_mkfs+0xd26>
c0007e3f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e47:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e4e:	e8 30 9c ff ff       	call   c0001a83 <st_word>
c0007e53:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e58:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e5c:	39 d0                	cmp    eax,edx
c0007e5e:	b8 00 00 00 00       	mov    eax,0x0
c0007e63:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e67:	72 0a                	jb     c0007e73 <f_mkfs+0xd52>
c0007e69:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e6c:	e8 12 9c ff ff       	call   c0001a83 <st_word>
c0007e71:	eb 08                	jmp    c0007e7b <f_mkfs+0xd5a>
c0007e73:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e76:	e8 0c 9c ff ff       	call   c0001a87 <st_dword>
c0007e7b:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e7e:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e83:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e87:	e8 f7 9b ff ff       	call   c0001a83 <st_word>
c0007e8c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e8f:	ba ff 00 00 00       	mov    edx,0xff
c0007e94:	e8 ea 9b ff ff       	call   c0001a83 <st_word>
c0007e99:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007ea0:	e8 e2 9b ff ff       	call   c0001a87 <st_dword>
c0007ea5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eaa:	75 57                	jne    c0007f03 <f_mkfs+0xde2>
c0007eac:	8d 45 43             	lea    eax,[ebp+0x43]
c0007eaf:	ba 00 00 21 50       	mov    edx,0x50210000
c0007eb4:	e8 ce 9b ff ff       	call   c0001a87 <st_dword>
c0007eb9:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ebc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec0:	e8 c2 9b ff ff       	call   c0001a87 <st_dword>
c0007ec5:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007ec8:	ba 02 00 00 00       	mov    edx,0x2
c0007ecd:	e8 b5 9b ff ff       	call   c0001a87 <st_dword>
c0007ed2:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ed5:	ba 01 00 00 00       	mov    edx,0x1
c0007eda:	e8 a4 9b ff ff       	call   c0001a83 <st_word>
c0007edf:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ee2:	ba 06 00 00 00       	mov    edx,0x6
c0007ee7:	e8 97 9b ff ff       	call   c0001a83 <st_word>
c0007eec:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ef0:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007ef4:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ef7:	b9 13 00 00 00       	mov    ecx,0x13
c0007efc:	ba 0e 77 02 c0       	mov    edx,0xc002770e
c0007f01:	eb 2f                	jmp    c0007f32 <f_mkfs+0xe11>
c0007f03:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f06:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f0b:	e8 77 9b ff ff       	call   c0001a87 <st_dword>
c0007f10:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f15:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f18:	e8 66 9b ff ff       	call   c0001a83 <st_word>
c0007f1d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f21:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f25:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f28:	b9 13 00 00 00       	mov    ecx,0x13
c0007f2d:	ba 22 77 02 c0       	mov    edx,0xc0027722
c0007f32:	e8 59 9b ff ff       	call   c0001a90 <mem_cpy>
c0007f37:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f42:	89 f0                	mov    eax,esi
c0007f44:	e8 3a 9b ff ff       	call   c0001a83 <st_word>
c0007f49:	83 ec 0c             	sub    esp,0xc
c0007f4c:	6a 01                	push   0x1
c0007f4e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f52:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f56:	55                   	push   ebp
c0007f57:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f5b:	e8 7c 9a ff ff       	call   c00019dc <disk_write>
c0007f60:	83 c4 20             	add    esp,0x20
c0007f63:	85 c0                	test   eax,eax
c0007f65:	0f 85 67 02 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007f6b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f70:	0f 85 b7 00 00 00    	jne    c000802d <f_mkfs+0xf0c>
c0007f76:	83 ec 0c             	sub    esp,0xc
c0007f79:	6a 01                	push   0x1
c0007f7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f7f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f83:	83 c0 06             	add    eax,0x6
c0007f86:	83 d2 00             	adc    edx,0x0
c0007f89:	52                   	push   edx
c0007f8a:	50                   	push   eax
c0007f8b:	55                   	push   ebp
c0007f8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f90:	e8 47 9a ff ff       	call   c00019dc <disk_write>
c0007f95:	83 c4 20             	add    esp,0x20
c0007f98:	b9 00 02 00 00       	mov    ecx,0x200
c0007f9d:	31 d2                	xor    edx,edx
c0007f9f:	89 e8                	mov    eax,ebp
c0007fa1:	e8 ff 9a ff ff       	call   c0001aa5 <mem_set>
c0007fa6:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fab:	89 e8                	mov    eax,ebp
c0007fad:	e8 d5 9a ff ff       	call   c0001a87 <st_dword>
c0007fb2:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007fb8:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fbd:	e8 c5 9a ff ff       	call   c0001a87 <st_dword>
c0007fc2:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fc5:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fcb:	e8 b7 9a ff ff       	call   c0001a87 <st_dword>
c0007fd0:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fd6:	ba 02 00 00 00       	mov    edx,0x2
c0007fdb:	e8 a7 9a ff ff       	call   c0001a87 <st_dword>
c0007fe0:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fe5:	89 f0                	mov    eax,esi
c0007fe7:	e8 97 9a ff ff       	call   c0001a83 <st_word>
c0007fec:	83 ec 0c             	sub    esp,0xc
c0007fef:	6a 01                	push   0x1
c0007ff1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ff5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ff9:	83 c0 07             	add    eax,0x7
c0007ffc:	83 d2 00             	adc    edx,0x0
c0007fff:	52                   	push   edx
c0008000:	50                   	push   eax
c0008001:	55                   	push   ebp
c0008002:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008006:	e8 d1 99 ff ff       	call   c00019dc <disk_write>
c000800b:	83 c4 14             	add    esp,0x14
c000800e:	6a 01                	push   0x1
c0008010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008014:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008018:	83 c0 01             	add    eax,0x1
c000801b:	83 d2 00             	adc    edx,0x0
c000801e:	52                   	push   edx
c000801f:	50                   	push   eax
c0008020:	55                   	push   ebp
c0008021:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008025:	e8 b2 99 ff ff       	call   c00019dc <disk_write>
c000802a:	83 c4 20             	add    esp,0x20
c000802d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008034:	31 d2                	xor    edx,edx
c0008036:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000803c:	31 db                	xor    ebx,ebx
c000803e:	89 e8                	mov    eax,ebp
c0008040:	e8 60 9a ff ff       	call   c0001aa5 <mem_set>
c0008045:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000804a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008051:	0f 94 c3             	sete   bl
c0008054:	4b                   	dec    ebx
c0008055:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000805b:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008061:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008066:	75 21                	jne    c0008089 <f_mkfs+0xf68>
c0008068:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000806d:	89 e8                	mov    eax,ebp
c000806f:	e8 13 9a ff ff       	call   c0001a87 <st_dword>
c0008074:	8d 45 04             	lea    eax,[ebp+0x4]
c0008077:	83 ca ff             	or     edx,0xffffffff
c000807a:	e8 08 9a ff ff       	call   c0001a87 <st_dword>
c000807f:	8d 45 08             	lea    eax,[ebp+0x8]
c0008082:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008087:	eb 04                	jmp    c000808d <f_mkfs+0xf6c>
c0008089:	89 da                	mov    edx,ebx
c000808b:	89 e8                	mov    eax,ebp
c000808d:	e8 f5 99 ff ff       	call   c0001a87 <st_dword>
c0008092:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008096:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000809a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000809e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080a2:	39 ce                	cmp    esi,ecx
c00080a4:	76 02                	jbe    c00080a8 <f_mkfs+0xf87>
c00080a6:	89 ce                	mov    esi,ecx
c00080a8:	83 ec 0c             	sub    esp,0xc
c00080ab:	56                   	push   esi
c00080ac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b4:	55                   	push   ebp
c00080b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080b9:	e8 1e 99 ff ff       	call   c00019dc <disk_write>
c00080be:	83 c4 20             	add    esp,0x20
c00080c1:	85 c0                	test   eax,eax
c00080c3:	0f 85 09 01 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c00080c9:	31 d2                	xor    edx,edx
c00080cb:	b9 00 02 00 00       	mov    ecx,0x200
c00080d0:	89 e8                	mov    eax,ebp
c00080d2:	e8 ce 99 ff ff       	call   c0001aa5 <mem_set>
c00080d7:	31 d2                	xor    edx,edx
c00080d9:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080dd:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080e1:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080e5:	75 b3                	jne    c000809a <f_mkfs+0xf79>
c00080e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080ea:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080f1:	40                   	inc    eax
c00080f2:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c00080f6:	0f 87 65 ff ff ff    	ja     c0008061 <f_mkfs+0xf40>
c00080fc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008101:	74 04                	je     c0008107 <f_mkfs+0xfe6>
c0008103:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008107:	89 fb                	mov    ebx,edi
c0008109:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000810d:	76 04                	jbe    c0008113 <f_mkfs+0xff2>
c000810f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008113:	83 ec 0c             	sub    esp,0xc
c0008116:	53                   	push   ebx
c0008117:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811f:	55                   	push   ebp
c0008120:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008124:	e8 b3 98 ff ff       	call   c00019dc <disk_write>
c0008129:	83 c4 20             	add    esp,0x20
c000812c:	85 c0                	test   eax,eax
c000812e:	0f 85 9e 00 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0008134:	31 d2                	xor    edx,edx
c0008136:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000813a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000813e:	29 df                	sub    edi,ebx
c0008140:	75 c5                	jne    c0008107 <f_mkfs+0xfe6>
c0008142:	b1 0c                	mov    cl,0xc
c0008144:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008149:	74 1d                	je     c0008168 <f_mkfs+0x1047>
c000814b:	b8 ff ff 00 00       	mov    eax,0xffff
c0008150:	b1 06                	mov    cl,0x6
c0008152:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008156:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000815a:	72 0c                	jb     c0008168 <f_mkfs+0x1047>
c000815c:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008161:	0f 94 c1             	sete   cl
c0008164:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008168:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000816d:	75 4c                	jne    c00081bb <f_mkfs+0x109a>
c000816f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008173:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008177:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000817e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008185:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008190:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000819b:	0f b6 c9             	movzx  ecx,cl
c000819e:	83 ec 0c             	sub    esp,0xc
c00081a1:	55                   	push   ebp
c00081a2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081ad:	e8 2f c2 ff ff       	call   c00043e1 <create_partition>
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	89 c3                	mov    ebx,eax
c00081b7:	85 c0                	test   eax,eax
c00081b9:	75 34                	jne    c00081ef <f_mkfs+0x10ce>
c00081bb:	31 db                	xor    ebx,ebx
c00081bd:	50                   	push   eax
c00081be:	6a 00                	push   0x0
c00081c0:	6a 00                	push   0x0
c00081c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081c6:	e8 27 98 ff ff       	call   c00019f2 <disk_ioctl>
c00081cb:	83 c4 10             	add    esp,0x10
c00081ce:	85 c0                	test   eax,eax
c00081d0:	74 1d                	je     c00081ef <f_mkfs+0x10ce>
c00081d2:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081da:	75 0c                	jne    c00081e8 <f_mkfs+0x10c7>
c00081dc:	83 ec 0c             	sub    esp,0xc
c00081df:	55                   	push   ebp
c00081e0:	e8 75 00 00 00       	call   c000825a <ff_memfree>
c00081e5:	83 c4 10             	add    esp,0x10
c00081e8:	bb 01 00 00 00       	mov    ebx,0x1
c00081ed:	eb 48                	jmp    c0008237 <f_mkfs+0x1116>
c00081ef:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081f7:	75 3e                	jne    c0008237 <f_mkfs+0x1116>
c00081f9:	83 ec 0c             	sub    esp,0xc
c00081fc:	55                   	push   ebp
c00081fd:	e8 58 00 00 00       	call   c000825a <ff_memfree>
c0008202:	83 c4 10             	add    esp,0x10
c0008205:	eb 30                	jmp    c0008237 <f_mkfs+0x1116>
c0008207:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000820c:	0f 85 eb fa ff ff    	jne    c0007cfd <f_mkfs+0xbdc>
c0008212:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008216:	81 ff 80 00 00 00    	cmp    edi,0x80
c000821c:	0f 86 b8 f9 ff ff    	jbe    c0007bda <f_mkfs+0xab9>
c0008222:	e9 bf fb ff ff       	jmp    c0007de6 <f_mkfs+0xcc5>
c0008227:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000822c:	0f 85 c0 fa ff ff    	jne    c0007cf2 <f_mkfs+0xbd1>
c0008232:	e9 af fb ff ff       	jmp    c0007de6 <f_mkfs+0xcc5>
c0008237:	81 c4 9c 00 00 00    	add    esp,0x9c
c000823d:	89 d8                	mov    eax,ebx
c000823f:	5b                   	pop    ebx
c0008240:	5e                   	pop    esi
c0008241:	5f                   	pop    edi
c0008242:	5d                   	pop    ebp
c0008243:	c3                   	ret    

c0008244 <ff_memalloc>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 81 72 00 00       	call   c000f4d4 <malloc>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 c4 0c             	add    esp,0xc
c0008259:	c3                   	ret    

c000825a <ff_memfree>:
c000825a:	83 ec 0c             	sub    esp,0xc
c000825d:	83 ec 0c             	sub    esp,0xc
c0008260:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008264:	e8 7b 72 00 00       	call   c000f4e4 <free>
c0008269:	83 c4 10             	add    esp,0x10
c000826c:	90                   	nop
c000826d:	83 c4 0c             	add    esp,0xc
c0008270:	c3                   	ret    

c0008271 <ff_uni2oem>:
c0008271:	83 ec 14             	sub    esp,0x14
c0008274:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008278:	66 89 04 24          	mov    WORD PTR [esp],ax
c000827c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008283:	c7 44 24 0c 40 7a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0027a40
c000828b:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008290:	77 0b                	ja     c000829d <ff_uni2oem+0x2c>
c0008292:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008296:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000829b:	eb 5b                	jmp    c00082f8 <ff_uni2oem+0x87>
c000829d:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082a5:	77 51                	ja     c00082f8 <ff_uni2oem+0x87>
c00082a7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ad:	75 49                	jne    c00082f8 <ff_uni2oem+0x87>
c00082af:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082b6:	eb 0b                	jmp    c00082c3 <ff_uni2oem+0x52>
c00082b8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082bd:	40                   	inc    eax
c00082be:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082c3:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082c9:	77 1b                	ja     c00082e6 <ff_uni2oem+0x75>
c00082cb:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00082d0:	01 c0                	add    eax,eax
c00082d2:	89 c2                	mov    edx,eax
c00082d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082d8:	01 d0                	add    eax,edx
c00082da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082dd:	0f b7 c0             	movzx  eax,ax
c00082e0:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082e4:	75 d2                	jne    c00082b8 <ff_uni2oem+0x47>
c00082e6:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082eb:	83 e8 80             	sub    eax,0xffffff80
c00082ee:	25 ff 00 00 00       	and    eax,0xff
c00082f3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082f8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082fd:	83 c4 14             	add    esp,0x14
c0008300:	c3                   	ret    

c0008301 <ff_oem2uni>:
c0008301:	83 ec 18             	sub    esp,0x18
c0008304:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008308:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000830c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008311:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008315:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000831c:	c7 44 24 10 40 7a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0027a40
c0008324:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000832a:	77 0b                	ja     c0008337 <ff_oem2uni+0x36>
c000832c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008330:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008335:	eb 2d                	jmp    c0008364 <ff_oem2uni+0x63>
c0008337:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000833d:	75 25                	jne    c0008364 <ff_oem2uni+0x63>
c000833f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008346:	77 1c                	ja     c0008364 <ff_oem2uni+0x63>
c0008348:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000834d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008352:	01 c0                	add    eax,eax
c0008354:	89 c2                	mov    edx,eax
c0008356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000835a:	01 d0                	add    eax,edx
c000835c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000835f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008364:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008369:	83 c4 18             	add    esp,0x18
c000836c:	c3                   	ret    

c000836d <ff_wtoupper>:
c000836d:	83 ec 10             	sub    esp,0x10
c0008370:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008378:	0f 87 3e 01 00 00    	ja     c00084bc <ff_wtoupper+0x14f>
c000837e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008382:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008387:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000838e:	77 07                	ja     c0008397 <ff_wtoupper+0x2a>
c0008390:	b8 40 78 02 c0       	mov    eax,0xc0027840
c0008395:	eb 05                	jmp    c000839c <ff_wtoupper+0x2f>
c0008397:	b8 80 77 02 c0       	mov    eax,0xc0027780
c000839c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	8d 50 02             	lea    edx,[eax+0x2]
c00083a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083ab:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083ae:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083b3:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083b9:	0f 84 f4 00 00 00    	je     c00084b3 <ff_wtoupper+0x146>
c00083bf:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083c4:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083c9:	0f 82 e4 00 00 00    	jb     c00084b3 <ff_wtoupper+0x146>
c00083cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083d3:	8d 50 02             	lea    edx,[eax+0x2]
c00083d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083dd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083e2:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083e7:	66 c1 e8 08          	shr    ax,0x8
c00083eb:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083f0:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083f7:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00083fc:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008401:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008406:	01 ca                	add    edx,ecx
c0008408:	39 d0                	cmp    eax,edx
c000840a:	0f 8d 86 00 00 00    	jge    c0008496 <ff_wtoupper+0x129>
c0008410:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008415:	83 f8 08             	cmp    eax,0x8
c0008418:	0f 87 94 00 00 00    	ja     c00084b2 <ff_wtoupper+0x145>
c000841e:	8b 04 85 40 77 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd88c0]
c0008425:	ff e0                	jmp    eax
c0008427:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000842c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008431:	29 c2                	sub    edx,eax
c0008433:	89 d0                	mov    eax,edx
c0008435:	01 c0                	add    eax,eax
c0008437:	89 c2                	mov    edx,eax
c0008439:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000843d:	01 d0                	add    eax,edx
c000843f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008442:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008447:	eb 4b                	jmp    c0008494 <ff_wtoupper+0x127>
c0008449:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000844e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008452:	83 e0 01             	and    eax,0x1
c0008455:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000845a:	eb 38                	jmp    c0008494 <ff_wtoupper+0x127>
c000845c:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008462:	eb 30                	jmp    c0008494 <ff_wtoupper+0x127>
c0008464:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000846a:	eb 28                	jmp    c0008494 <ff_wtoupper+0x127>
c000846c:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008472:	eb 20                	jmp    c0008494 <ff_wtoupper+0x127>
c0008474:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000847a:	eb 18                	jmp    c0008494 <ff_wtoupper+0x127>
c000847c:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008482:	eb 10                	jmp    c0008494 <ff_wtoupper+0x127>
c0008484:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000848a:	eb 08                	jmp    c0008494 <ff_wtoupper+0x127>
c000848c:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008493:	90                   	nop
c0008494:	eb 1c                	jmp    c00084b2 <ff_wtoupper+0x145>
c0008496:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000849c:	0f 85 fe fe ff ff    	jne    c00083a0 <ff_wtoupper+0x33>
c00084a2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084a7:	01 c0                	add    eax,eax
c00084a9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084ad:	e9 ee fe ff ff       	jmp    c00083a0 <ff_wtoupper+0x33>
c00084b2:	90                   	nop
c00084b3:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084c0:	83 c4 10             	add    esp,0x10
c00084c3:	c3                   	ret    

c00084c4 <psrc_set_converter>:
c00084c4:	56                   	push   esi
c00084c5:	89 d6                	mov    esi,edx
c00084c7:	53                   	push   ebx
c00084c8:	89 c3                	mov    ebx,eax
c00084ca:	83 ec 0c             	sub    esp,0xc
c00084cd:	52                   	push   edx
c00084ce:	50                   	push   eax
c00084cf:	e8 6f 55 00 00       	call   c000da43 <sinc_set_converter>
c00084d4:	83 c4 10             	add    esp,0x10
c00084d7:	85 c0                	test   eax,eax
c00084d9:	74 25                	je     c0008500 <psrc_set_converter+0x3c>
c00084db:	50                   	push   eax
c00084dc:	50                   	push   eax
c00084dd:	56                   	push   esi
c00084de:	53                   	push   ebx
c00084df:	e8 17 5d 00 00       	call   c000e1fb <zoh_set_converter>
c00084e4:	83 c4 10             	add    esp,0x10
c00084e7:	85 c0                	test   eax,eax
c00084e9:	74 15                	je     c0008500 <psrc_set_converter+0x3c>
c00084eb:	51                   	push   ecx
c00084ec:	51                   	push   ecx
c00084ed:	56                   	push   esi
c00084ee:	53                   	push   ebx
c00084ef:	e8 0f 11 00 00       	call   c0009603 <linear_set_converter>
c00084f4:	83 c4 10             	add    esp,0x10
c00084f7:	ba 0a 00 00 00       	mov    edx,0xa
c00084fc:	85 c0                	test   eax,eax
c00084fe:	75 02                	jne    c0008502 <psrc_set_converter+0x3e>
c0008500:	31 d2                	xor    edx,edx
c0008502:	89 d0                	mov    eax,edx
c0008504:	5a                   	pop    edx
c0008505:	5b                   	pop    ebx
c0008506:	5e                   	pop    esi
c0008507:	c3                   	ret    

c0008508 <src_delete>:
c0008508:	53                   	push   ebx
c0008509:	83 ec 08             	sub    esp,0x8
c000850c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008510:	85 db                	test   ebx,ebx
c0008512:	74 29                	je     c000853d <src_delete+0x35>
c0008514:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008517:	85 c0                	test   eax,eax
c0008519:	74 0c                	je     c0008527 <src_delete+0x1f>
c000851b:	83 ec 0c             	sub    esp,0xc
c000851e:	50                   	push   eax
c000851f:	e8 c0 6f 00 00       	call   c000f4e4 <free>
c0008524:	83 c4 10             	add    esp,0x10
c0008527:	50                   	push   eax
c0008528:	6a 3c                	push   0x3c
c000852a:	6a 00                	push   0x0
c000852c:	53                   	push   ebx
c000852d:	e8 59 81 ff ff       	call   c000068b <memset>
c0008532:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008535:	e8 aa 6f 00 00       	call   c000f4e4 <free>
c000853a:	83 c4 10             	add    esp,0x10
c000853d:	31 c0                	xor    eax,eax
c000853f:	83 c4 08             	add    esp,0x8
c0008542:	5b                   	pop    ebx
c0008543:	c3                   	ret    

c0008544 <src_process>:
c0008544:	55                   	push   ebp
c0008545:	57                   	push   edi
c0008546:	56                   	push   esi
c0008547:	53                   	push   ebx
c0008548:	83 ec 1c             	sub    esp,0x1c
c000854b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000854f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008553:	85 ed                	test   ebp,ebp
c0008555:	0f 84 6f 01 00 00    	je     c00086ca <src_process+0x186>
c000855b:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c000855f:	0f 84 6c 01 00 00    	je     c00086d1 <src_process+0x18d>
c0008565:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0008569:	0f 84 62 01 00 00    	je     c00086d1 <src_process+0x18d>
c000856f:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c0008576:	0f 85 5c 01 00 00    	jne    c00086d8 <src_process+0x194>
c000857c:	85 db                	test   ebx,ebx
c000857e:	0f 84 5b 01 00 00    	je     c00086df <src_process+0x19b>
c0008584:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008586:	85 f6                	test   esi,esi
c0008588:	0f 84 58 01 00 00    	je     c00086e6 <src_process+0x1a2>
c000858e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008591:	85 ff                	test   edi,edi
c0008593:	0f 84 4d 01 00 00    	je     c00086e6 <src_process+0x1a2>
c0008599:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000859c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000859f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00085a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085a7:	68 00 00 70 3f       	push   0x3f700000
c00085ac:	6a 00                	push   0x0
c00085ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085b6:	e8 94 e1 01 00       	call   c002674f <__ltdf2>
c00085bb:	83 c4 10             	add    esp,0x10
c00085be:	85 c0                	test   eax,eax
c00085c0:	0f 88 27 01 00 00    	js     c00086ed <src_process+0x1a9>
c00085c6:	68 00 00 70 40       	push   0x40700000
c00085cb:	6a 00                	push   0x0
c00085cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085d5:	e8 57 e1 01 00       	call   c0026731 <__gtdf2>
c00085da:	83 c4 10             	add    esp,0x10
c00085dd:	85 c0                	test   eax,eax
c00085df:	0f 8f 08 01 00 00    	jg     c00086ed <src_process+0x1a9>
c00085e5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00085e9:	79 07                	jns    c00085f2 <src_process+0xae>
c00085eb:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00085f2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00085f5:	85 c0                	test   eax,eax
c00085f7:	79 50                	jns    c0008649 <src_process+0x105>
c00085f9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008600:	39 fe                	cmp    esi,edi
c0008602:	72 37                	jb     c000863b <src_process+0xf7>
c0008604:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000860b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008612:	68 00 00 70 3f       	push   0x3f700000
c0008617:	6a 00                	push   0x0
c0008619:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000861c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000861f:	e8 2b e1 01 00       	call   c002674f <__ltdf2>
c0008624:	83 c4 10             	add    esp,0x10
c0008627:	85 c0                	test   eax,eax
c0008629:	79 37                	jns    c0008662 <src_process+0x11e>
c000862b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000862f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008633:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008636:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008639:	eb 27                	jmp    c0008662 <src_process+0x11e>
c000863b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000863e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008642:	8d 04 86             	lea    eax,[esi+eax*4]
c0008645:	39 c7                	cmp    edi,eax
c0008647:	eb 0d                	jmp    c0008656 <src_process+0x112>
c0008649:	39 fe                	cmp    esi,edi
c000864b:	72 ee                	jb     c000863b <src_process+0xf7>
c000864d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008651:	8d 04 87             	lea    eax,[edi+eax*4]
c0008654:	39 c6                	cmp    esi,eax
c0008656:	73 ac                	jae    c0008604 <src_process+0xc0>
c0008658:	b8 10 00 00 00       	mov    eax,0x10
c000865d:	e9 90 00 00 00       	jmp    c00086f2 <src_process+0x1ae>
c0008662:	83 ec 10             	sub    esp,0x10
c0008665:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008668:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000866b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000866e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008671:	e8 de d7 01 00       	call   c0025e54 <__subdf3>
c0008676:	83 c4 18             	add    esp,0x18
c0008679:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000867d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008681:	52                   	push   edx
c0008682:	50                   	push   eax
c0008683:	e8 58 e2 01 00       	call   c00268e0 <fabs>
c0008688:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000868c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008690:	83 c4 10             	add    esp,0x10
c0008693:	68 af 03 d2 3c       	push   0x3cd203af
c0008698:	68 16 56 e7 9e       	push   0x9ee75616
c000869d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a5:	e8 a5 e0 01 00       	call   c002674f <__ltdf2>
c00086aa:	83 c4 10             	add    esp,0x10
c00086ad:	85 c0                	test   eax,eax
c00086af:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00086b3:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00086b7:	79 05                	jns    c00086be <src_process+0x17a>
c00086b9:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00086bc:	eb 03                	jmp    c00086c1 <src_process+0x17d>
c00086be:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00086c1:	83 c4 1c             	add    esp,0x1c
c00086c4:	5b                   	pop    ebx
c00086c5:	5e                   	pop    esi
c00086c6:	5f                   	pop    edi
c00086c7:	5d                   	pop    ebp
c00086c8:	ff e0                	jmp    eax
c00086ca:	b8 02 00 00 00       	mov    eax,0x2
c00086cf:	eb 21                	jmp    c00086f2 <src_process+0x1ae>
c00086d1:	b8 07 00 00 00       	mov    eax,0x7
c00086d6:	eb 1a                	jmp    c00086f2 <src_process+0x1ae>
c00086d8:	b8 12 00 00 00       	mov    eax,0x12
c00086dd:	eb 13                	jmp    c00086f2 <src_process+0x1ae>
c00086df:	b8 03 00 00 00       	mov    eax,0x3
c00086e4:	eb 0c                	jmp    c00086f2 <src_process+0x1ae>
c00086e6:	b8 04 00 00 00       	mov    eax,0x4
c00086eb:	eb 05                	jmp    c00086f2 <src_process+0x1ae>
c00086ed:	b8 06 00 00 00       	mov    eax,0x6
c00086f2:	83 c4 1c             	add    esp,0x1c
c00086f5:	5b                   	pop    ebx
c00086f6:	5e                   	pop    esi
c00086f7:	5f                   	pop    edi
c00086f8:	5d                   	pop    ebp
c00086f9:	c3                   	ret    

c00086fa <src_callback_read>:
c00086fa:	55                   	push   ebp
c00086fb:	57                   	push   edi
c00086fc:	56                   	push   esi
c00086fd:	53                   	push   ebx
c00086fe:	83 ec 3c             	sub    esp,0x3c
c0008701:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008705:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008709:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000870d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008711:	85 ed                	test   ebp,ebp
c0008713:	0f 8e 52 01 00 00    	jle    c000886b <src_callback_read+0x171>
c0008719:	85 db                	test   ebx,ebx
c000871b:	0f 84 4a 01 00 00    	je     c000886b <src_callback_read+0x171>
c0008721:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008728:	74 0c                	je     c0008736 <src_callback_read+0x3c>
c000872a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008731:	e9 35 01 00 00       	jmp    c000886b <src_callback_read+0x171>
c0008736:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000873a:	75 0c                	jne    c0008748 <src_callback_read+0x4e>
c000873c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008743:	e9 23 01 00 00       	jmp    c000886b <src_callback_read+0x171>
c0008748:	51                   	push   ecx
c0008749:	6a 24                	push   0x24
c000874b:	6a 00                	push   0x0
c000874d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008751:	50                   	push   eax
c0008752:	e8 34 7f ff ff       	call   c000068b <memset>
c0008757:	83 c4 10             	add    esp,0x10
c000875a:	68 00 00 70 3f       	push   0x3f700000
c000875f:	6a 00                	push   0x0
c0008761:	57                   	push   edi
c0008762:	56                   	push   esi
c0008763:	e8 e7 df 01 00       	call   c002674f <__ltdf2>
c0008768:	83 c4 10             	add    esp,0x10
c000876b:	85 c0                	test   eax,eax
c000876d:	78 3e                	js     c00087ad <src_callback_read+0xb3>
c000876f:	68 00 00 70 40       	push   0x40700000
c0008774:	6a 00                	push   0x0
c0008776:	57                   	push   edi
c0008777:	56                   	push   esi
c0008778:	e8 b4 df 01 00       	call   c0026731 <__gtdf2>
c000877d:	83 c4 10             	add    esp,0x10
c0008780:	85 c0                	test   eax,eax
c0008782:	7f 29                	jg     c00087ad <src_callback_read+0xb3>
c0008784:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008788:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000878c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008790:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008794:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008797:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000879b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000879f:	31 f6                	xor    esi,esi
c00087a1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087a8:	e9 97 00 00 00       	jmp    c0008844 <src_callback_read+0x14a>
c00087ad:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087b4:	e9 b2 00 00 00       	jmp    c000886b <src_callback_read+0x171>
c00087b9:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087c1:	52                   	push   edx
c00087c2:	52                   	push   edx
c00087c3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00087c7:	50                   	push   eax
c00087c8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087cb:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00087ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00087d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00087d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00087da:	83 c4 10             	add    esp,0x10
c00087dd:	85 c0                	test   eax,eax
c00087df:	75 08                	jne    c00087e9 <src_callback_read+0xef>
c00087e1:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00087e9:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087f0:	50                   	push   eax
c00087f1:	50                   	push   eax
c00087f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00087f6:	50                   	push   eax
c00087f7:	53                   	push   ebx
c00087f8:	e8 47 fd ff ff       	call   c0008544 <src_process>
c00087fd:	83 c4 10             	add    esp,0x10
c0008800:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008807:	85 c0                	test   eax,eax
c0008809:	75 49                	jne    c0008854 <src_callback_read+0x15a>
c000880b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000880f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008812:	89 f9                	mov    ecx,edi
c0008814:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008818:	0f af ca             	imul   ecx,edx
c000881b:	c1 e1 02             	shl    ecx,0x2
c000881e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008822:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008826:	0f af d1             	imul   edx,ecx
c0008829:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c000882d:	c1 e2 02             	shl    edx,0x2
c0008830:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008834:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008837:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000883c:	74 12                	je     c0008850 <src_callback_read+0x156>
c000883e:	39 d5                	cmp    ebp,edx
c0008840:	7e 14                	jle    c0008856 <src_callback_read+0x15c>
c0008842:	89 d6                	mov    esi,edx
c0008844:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008849:	75 9e                	jne    c00087e9 <src_callback_read+0xef>
c000884b:	e9 69 ff ff ff       	jmp    c00087b9 <src_callback_read+0xbf>
c0008850:	85 c9                	test   ecx,ecx
c0008852:	75 ea                	jne    c000883e <src_callback_read+0x144>
c0008854:	89 f2                	mov    edx,esi
c0008856:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000885a:	85 c0                	test   eax,eax
c000885c:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c000885f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008863:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008866:	74 05                	je     c000886d <src_callback_read+0x173>
c0008868:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000886b:	31 d2                	xor    edx,edx
c000886d:	83 c4 3c             	add    esp,0x3c
c0008870:	89 d0                	mov    eax,edx
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	5f                   	pop    edi
c0008875:	5d                   	pop    ebp
c0008876:	c3                   	ret    

c0008877 <src_set_ratio>:
c0008877:	57                   	push   edi
c0008878:	ba 02 00 00 00       	mov    edx,0x2
c000887d:	56                   	push   esi
c000887e:	53                   	push   ebx
c000887f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008883:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008887:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000888b:	85 db                	test   ebx,ebx
c000888d:	74 4c                	je     c00088db <src_set_ratio+0x64>
c000888f:	ba 07 00 00 00       	mov    edx,0x7
c0008894:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008898:	74 41                	je     c00088db <src_set_ratio+0x64>
c000889a:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000889e:	74 3b                	je     c00088db <src_set_ratio+0x64>
c00088a0:	68 00 00 70 3f       	push   0x3f700000
c00088a5:	6a 00                	push   0x0
c00088a7:	57                   	push   edi
c00088a8:	56                   	push   esi
c00088a9:	e8 a1 de 01 00       	call   c002674f <__ltdf2>
c00088ae:	83 c4 10             	add    esp,0x10
c00088b1:	ba 06 00 00 00       	mov    edx,0x6
c00088b6:	85 c0                	test   eax,eax
c00088b8:	78 21                	js     c00088db <src_set_ratio+0x64>
c00088ba:	68 00 00 70 40       	push   0x40700000
c00088bf:	6a 00                	push   0x0
c00088c1:	57                   	push   edi
c00088c2:	56                   	push   esi
c00088c3:	e8 69 de 01 00       	call   c0026731 <__gtdf2>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	ba 06 00 00 00       	mov    edx,0x6
c00088d0:	85 c0                	test   eax,eax
c00088d2:	7f 07                	jg     c00088db <src_set_ratio+0x64>
c00088d4:	89 33                	mov    DWORD PTR [ebx],esi
c00088d6:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00088d9:	31 d2                	xor    edx,edx
c00088db:	5b                   	pop    ebx
c00088dc:	89 d0                	mov    eax,edx
c00088de:	5e                   	pop    esi
c00088df:	5f                   	pop    edi
c00088e0:	c3                   	ret    

c00088e1 <src_get_channels>:
c00088e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088e5:	b8 02 00 00 00       	mov    eax,0x2
c00088ea:	85 d2                	test   edx,edx
c00088ec:	74 14                	je     c0008902 <src_get_channels+0x21>
c00088ee:	b8 07 00 00 00       	mov    eax,0x7
c00088f3:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00088f7:	74 09                	je     c0008902 <src_get_channels+0x21>
c00088f9:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088fd:	74 03                	je     c0008902 <src_get_channels+0x21>
c00088ff:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008902:	c3                   	ret    

c0008903 <src_reset>:
c0008903:	53                   	push   ebx
c0008904:	b8 02 00 00 00       	mov    eax,0x2
c0008909:	83 ec 08             	sub    esp,0x8
c000890c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008910:	85 db                	test   ebx,ebx
c0008912:	74 36                	je     c000894a <src_reset+0x47>
c0008914:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008917:	85 c0                	test   eax,eax
c0008919:	74 09                	je     c0008924 <src_reset+0x21>
c000891b:	83 ec 0c             	sub    esp,0xc
c000891e:	53                   	push   ebx
c000891f:	ff d0                	call   eax
c0008921:	83 c4 10             	add    esp,0x10
c0008924:	31 c0                	xor    eax,eax
c0008926:	31 d2                	xor    edx,edx
c0008928:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000892b:	89 03                	mov    DWORD PTR [ebx],eax
c000892d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008930:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008933:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000893a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008941:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008948:	31 c0                	xor    eax,eax
c000894a:	83 c4 08             	add    esp,0x8
c000894d:	5b                   	pop    ebx
c000894e:	c3                   	ret    

c000894f <src_new>:
c000894f:	57                   	push   edi
c0008950:	56                   	push   esi
c0008951:	53                   	push   ebx
c0008952:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008956:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000895a:	85 f6                	test   esi,esi
c000895c:	74 73                	je     c00089d1 <src_new+0x82>
c000895e:	85 ff                	test   edi,edi
c0008960:	7f 08                	jg     c000896a <src_new+0x1b>
c0008962:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008968:	eb 1e                	jmp    c0008988 <src_new+0x39>
c000896a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008970:	50                   	push   eax
c0008971:	50                   	push   eax
c0008972:	6a 3c                	push   0x3c
c0008974:	6a 01                	push   0x1
c0008976:	e8 89 6b 00 00       	call   c000f504 <calloc>
c000897b:	83 c4 10             	add    esp,0x10
c000897e:	89 c3                	mov    ebx,eax
c0008980:	85 c0                	test   eax,eax
c0008982:	75 10                	jne    c0008994 <src_new+0x45>
c0008984:	85 f6                	test   esi,esi
c0008986:	75 04                	jne    c000898c <src_new+0x3d>
c0008988:	31 db                	xor    ebx,ebx
c000898a:	eb 4b                	jmp    c00089d7 <src_new+0x88>
c000898c:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008992:	eb 43                	jmp    c00089d7 <src_new+0x88>
c0008994:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008997:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000899e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089a2:	e8 1d fb ff ff       	call   c00084c4 <psrc_set_converter>
c00089a7:	85 c0                	test   eax,eax
c00089a9:	74 18                	je     c00089c3 <src_new+0x74>
c00089ab:	85 f6                	test   esi,esi
c00089ad:	74 06                	je     c00089b5 <src_new+0x66>
c00089af:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089b5:	83 ec 0c             	sub    esp,0xc
c00089b8:	53                   	push   ebx
c00089b9:	31 db                	xor    ebx,ebx
c00089bb:	e8 24 6b 00 00       	call   c000f4e4 <free>
c00089c0:	83 c4 10             	add    esp,0x10
c00089c3:	83 ec 0c             	sub    esp,0xc
c00089c6:	53                   	push   ebx
c00089c7:	e8 37 ff ff ff       	call   c0008903 <src_reset>
c00089cc:	83 c4 10             	add    esp,0x10
c00089cf:	eb 06                	jmp    c00089d7 <src_new+0x88>
c00089d1:	85 ff                	test   edi,edi
c00089d3:	7f 9b                	jg     c0008970 <src_new+0x21>
c00089d5:	eb b1                	jmp    c0008988 <src_new+0x39>
c00089d7:	89 d8                	mov    eax,ebx
c00089d9:	5b                   	pop    ebx
c00089da:	5e                   	pop    esi
c00089db:	5f                   	pop    edi
c00089dc:	c3                   	ret    

c00089dd <src_callback_new>:
c00089dd:	56                   	push   esi
c00089de:	53                   	push   ebx
c00089df:	53                   	push   ebx
c00089e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00089e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089e8:	85 f6                	test   esi,esi
c00089ea:	75 0e                	jne    c00089fa <src_callback_new+0x1d>
c00089ec:	31 db                	xor    ebx,ebx
c00089ee:	85 c0                	test   eax,eax
c00089f0:	74 47                	je     c0008a39 <src_callback_new+0x5c>
c00089f2:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00089f8:	eb 3f                	jmp    c0008a39 <src_callback_new+0x5c>
c00089fa:	85 c0                	test   eax,eax
c00089fc:	74 06                	je     c0008a04 <src_callback_new+0x27>
c00089fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a04:	51                   	push   ecx
c0008a05:	50                   	push   eax
c0008a06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a0e:	e8 3c ff ff ff       	call   c000894f <src_new>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	89 c3                	mov    ebx,eax
c0008a18:	85 c0                	test   eax,eax
c0008a1a:	74 1d                	je     c0008a39 <src_callback_new+0x5c>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	50                   	push   eax
c0008a20:	e8 de fe ff ff       	call   c0008903 <src_reset>
c0008a25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a29:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a30:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a33:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a36:	83 c4 10             	add    esp,0x10
c0008a39:	89 d8                	mov    eax,ebx
c0008a3b:	5a                   	pop    edx
c0008a3c:	5b                   	pop    ebx
c0008a3d:	5e                   	pop    esi
c0008a3e:	c3                   	ret    

c0008a3f <src_get_name>:
c0008a3f:	53                   	push   ebx
c0008a40:	83 ec 14             	sub    esp,0x14
c0008a43:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a47:	53                   	push   ebx
c0008a48:	e8 d0 4f 00 00       	call   c000da1d <sinc_get_name>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	85 c0                	test   eax,eax
c0008a52:	75 1d                	jne    c0008a71 <src_get_name+0x32>
c0008a54:	83 ec 0c             	sub    esp,0xc
c0008a57:	53                   	push   ebx
c0008a58:	e8 80 57 00 00       	call   c000e1dd <zoh_get_name>
c0008a5d:	83 c4 10             	add    esp,0x10
c0008a60:	85 c0                	test   eax,eax
c0008a62:	75 0d                	jne    c0008a71 <src_get_name+0x32>
c0008a64:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a68:	83 c4 08             	add    esp,0x8
c0008a6b:	5b                   	pop    ebx
c0008a6c:	e9 74 0b 00 00       	jmp    c00095e5 <linear_get_name>
c0008a71:	83 c4 08             	add    esp,0x8
c0008a74:	5b                   	pop    ebx
c0008a75:	c3                   	ret    

c0008a76 <src_get_description>:
c0008a76:	53                   	push   ebx
c0008a77:	83 ec 14             	sub    esp,0x14
c0008a7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a7e:	53                   	push   ebx
c0008a7f:	e8 ac 4f 00 00       	call   c000da30 <sinc_get_description>
c0008a84:	83 c4 10             	add    esp,0x10
c0008a87:	85 c0                	test   eax,eax
c0008a89:	75 1d                	jne    c0008aa8 <src_get_description+0x32>
c0008a8b:	83 ec 0c             	sub    esp,0xc
c0008a8e:	53                   	push   ebx
c0008a8f:	e8 58 57 00 00       	call   c000e1ec <zoh_get_description>
c0008a94:	83 c4 10             	add    esp,0x10
c0008a97:	85 c0                	test   eax,eax
c0008a99:	75 0d                	jne    c0008aa8 <src_get_description+0x32>
c0008a9b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a9f:	83 c4 08             	add    esp,0x8
c0008aa2:	5b                   	pop    ebx
c0008aa3:	e9 4c 0b 00 00       	jmp    c00095f4 <linear_get_description>
c0008aa8:	83 c4 08             	add    esp,0x8
c0008aab:	5b                   	pop    ebx
c0008aac:	c3                   	ret    

c0008aad <src_get_version>:
c0008aad:	b8 40 7b 02 c0       	mov    eax,0xc0027b40
c0008ab2:	c3                   	ret    

c0008ab3 <src_is_valid_ratio>:
c0008ab3:	83 ec 1c             	sub    esp,0x1c
c0008ab6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008aba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008abe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ac2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ac6:	68 00 00 70 3f       	push   0x3f700000
c0008acb:	6a 00                	push   0x0
c0008acd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ad1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ad5:	e8 75 dc 01 00       	call   c002674f <__ltdf2>
c0008ada:	83 c4 10             	add    esp,0x10
c0008add:	31 d2                	xor    edx,edx
c0008adf:	85 c0                	test   eax,eax
c0008ae1:	78 1e                	js     c0008b01 <src_is_valid_ratio+0x4e>
c0008ae3:	68 00 00 70 40       	push   0x40700000
c0008ae8:	6a 00                	push   0x0
c0008aea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008aee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008af2:	e8 3a dc 01 00       	call   c0026731 <__gtdf2>
c0008af7:	31 d2                	xor    edx,edx
c0008af9:	83 c4 10             	add    esp,0x10
c0008afc:	85 c0                	test   eax,eax
c0008afe:	0f 9e c2             	setle  dl
c0008b01:	89 d0                	mov    eax,edx
c0008b03:	83 c4 1c             	add    esp,0x1c
c0008b06:	c3                   	ret    

c0008b07 <src_error>:
c0008b07:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b0b:	31 c0                	xor    eax,eax
c0008b0d:	85 d2                	test   edx,edx
c0008b0f:	74 03                	je     c0008b14 <src_error+0xd>
c0008b11:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b14:	c3                   	ret    

c0008b15 <src_strerror>:
c0008b15:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b19:	31 c0                	xor    eax,eax
c0008b1b:	83 fa 17             	cmp    edx,0x17
c0008b1e:	77 07                	ja     c0008b27 <src_strerror+0x12>
c0008b20:	8b 04 95 a0 7f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8060]
c0008b27:	c3                   	ret    

c0008b28 <src_simple>:
c0008b28:	56                   	push   esi
c0008b29:	53                   	push   ebx
c0008b2a:	83 ec 18             	sub    esp,0x18
c0008b2d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b31:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b35:	50                   	push   eax
c0008b36:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3e:	e8 0c fe ff ff       	call   c000894f <src_new>
c0008b43:	83 c4 10             	add    esp,0x10
c0008b46:	85 c0                	test   eax,eax
c0008b48:	75 06                	jne    c0008b50 <src_simple+0x28>
c0008b4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b4e:	eb 25                	jmp    c0008b75 <src_simple+0x4d>
c0008b50:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b57:	89 c3                	mov    ebx,eax
c0008b59:	50                   	push   eax
c0008b5a:	50                   	push   eax
c0008b5b:	56                   	push   esi
c0008b5c:	53                   	push   ebx
c0008b5d:	e8 e2 f9 ff ff       	call   c0008544 <src_process>
c0008b62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b69:	e8 9a f9 ff ff       	call   c0008508 <src_delete>
c0008b6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b72:	83 c4 10             	add    esp,0x10
c0008b75:	83 c4 14             	add    esp,0x14
c0008b78:	5b                   	pop    ebx
c0008b79:	5e                   	pop    esi
c0008b7a:	c3                   	ret    

c0008b7b <src_short_to_float_array>:
c0008b7b:	53                   	push   ebx
c0008b7c:	83 ec 18             	sub    esp,0x18
c0008b7f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b83:	85 db                	test   ebx,ebx
c0008b85:	74 54                	je     c0008bdb <src_short_to_float_array+0x60>
c0008b87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b8b:	4b                   	dec    ebx
c0008b8c:	83 ec 0c             	sub    esp,0xc
c0008b8f:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b93:	50                   	push   eax
c0008b94:	e8 4a d9 01 00       	call   c00264e3 <__floatsidf>
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ba0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ba4:	68 00 00 00 3f       	push   0x3f000000
c0008ba9:	6a 00                	push   0x0
c0008bab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008baf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb3:	e8 c8 d2 01 00       	call   c0025e80 <__muldf3>
c0008bb8:	59                   	pop    ecx
c0008bb9:	59                   	pop    ecx
c0008bba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bbe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bca:	e8 84 db 01 00       	call   c0026753 <__truncdfsf2>
c0008bcf:	83 c4 10             	add    esp,0x10
c0008bd2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bd6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008bd9:	eb a8                	jmp    c0008b83 <src_short_to_float_array+0x8>
c0008bdb:	83 c4 18             	add    esp,0x18
c0008bde:	5b                   	pop    ebx
c0008bdf:	c3                   	ret    

c0008be0 <src_float_to_short_array>:
c0008be0:	56                   	push   esi
c0008be1:	53                   	push   ebx
c0008be2:	83 ec 14             	sub    esp,0x14
c0008be5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008be9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bed:	85 db                	test   ebx,ebx
c0008bef:	0f 84 a4 00 00 00    	je     c0008c99 <src_float_to_short_array+0xb9>
c0008bf5:	83 ec 0c             	sub    esp,0xc
c0008bf8:	4b                   	dec    ebx
c0008bf9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008bfd:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c00:	e8 72 dc 01 00       	call   c0026877 <__extendsfdf2>
c0008c05:	83 c4 10             	add    esp,0x10
c0008c08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c10:	68 00 00 e0 41       	push   0x41e00000
c0008c15:	6a 00                	push   0x0
c0008c17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1f:	e8 5c d2 01 00       	call   c0025e80 <__muldf3>
c0008c24:	83 c4 10             	add    esp,0x10
c0008c27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c2b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c2f:	68 ff ff df 41       	push   0x41dfffff
c0008c34:	68 00 00 c0 ff       	push   0xffc00000
c0008c39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c41:	e8 07 db 01 00       	call   c002674d <__gedf2>
c0008c46:	83 c4 10             	add    esp,0x10
c0008c49:	85 c0                	test   eax,eax
c0008c4b:	78 08                	js     c0008c55 <src_float_to_short_array+0x75>
c0008c4d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c53:	eb 98                	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c55:	68 00 00 e0 c1       	push   0xc1e00000
c0008c5a:	6a 00                	push   0x0
c0008c5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c64:	e8 e8 da 01 00       	call   c0026751 <__ledf2>
c0008c69:	83 c4 10             	add    esp,0x10
c0008c6c:	85 c0                	test   eax,eax
c0008c6e:	7f 0b                	jg     c0008c7b <src_float_to_short_array+0x9b>
c0008c70:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c76:	e9 72 ff ff ff       	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c7b:	50                   	push   eax
c0008c7c:	50                   	push   eax
c0008c7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c85:	e8 76 dc 01 00       	call   c0026900 <lrint>
c0008c8a:	83 c4 10             	add    esp,0x10
c0008c8d:	c1 f8 10             	sar    eax,0x10
c0008c90:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c94:	e9 54 ff ff ff       	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c99:	83 c4 14             	add    esp,0x14
c0008c9c:	5b                   	pop    ebx
c0008c9d:	5e                   	pop    esi
c0008c9e:	c3                   	ret    

c0008c9f <src_int_to_float_array>:
c0008c9f:	53                   	push   ebx
c0008ca0:	83 ec 18             	sub    esp,0x18
c0008ca3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ca7:	85 db                	test   ebx,ebx
c0008ca9:	74 52                	je     c0008cfd <src_int_to_float_array+0x5e>
c0008cab:	83 ec 0c             	sub    esp,0xc
c0008cae:	4b                   	dec    ebx
c0008caf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cb3:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008cb6:	e8 28 d8 01 00       	call   c00264e3 <__floatsidf>
c0008cbb:	83 c4 10             	add    esp,0x10
c0008cbe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cc6:	68 00 00 00 3e       	push   0x3e000000
c0008ccb:	6a 00                	push   0x0
c0008ccd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd5:	e8 a6 d1 01 00       	call   c0025e80 <__muldf3>
c0008cda:	59                   	pop    ecx
c0008cdb:	59                   	pop    ecx
c0008cdc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ce0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008ce4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cec:	e8 62 da 01 00       	call   c0026753 <__truncdfsf2>
c0008cf1:	83 c4 10             	add    esp,0x10
c0008cf4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cf8:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008cfb:	eb aa                	jmp    c0008ca7 <src_int_to_float_array+0x8>
c0008cfd:	83 c4 18             	add    esp,0x18
c0008d00:	5b                   	pop    ebx
c0008d01:	c3                   	ret    

c0008d02 <src_float_to_int_array>:
c0008d02:	56                   	push   esi
c0008d03:	53                   	push   ebx
c0008d04:	83 ec 14             	sub    esp,0x14
c0008d07:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d0b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d0f:	85 db                	test   ebx,ebx
c0008d11:	0f 84 a2 00 00 00    	je     c0008db9 <src_float_to_int_array+0xb7>
c0008d17:	83 ec 0c             	sub    esp,0xc
c0008d1a:	4b                   	dec    ebx
c0008d1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d1f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d22:	e8 50 db 01 00       	call   c0026877 <__extendsfdf2>
c0008d27:	83 c4 10             	add    esp,0x10
c0008d2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d32:	68 00 00 e0 41       	push   0x41e00000
c0008d37:	6a 00                	push   0x0
c0008d39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d41:	e8 3a d1 01 00       	call   c0025e80 <__muldf3>
c0008d46:	83 c4 10             	add    esp,0x10
c0008d49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d51:	68 ff ff df 41       	push   0x41dfffff
c0008d56:	68 00 00 c0 ff       	push   0xffc00000
c0008d5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d63:	e8 e5 d9 01 00       	call   c002674d <__gedf2>
c0008d68:	83 c4 10             	add    esp,0x10
c0008d6b:	85 c0                	test   eax,eax
c0008d6d:	78 09                	js     c0008d78 <src_float_to_int_array+0x76>
c0008d6f:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d76:	eb 97                	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008d78:	68 00 00 e0 c1       	push   0xc1e00000
c0008d7d:	6a 00                	push   0x0
c0008d7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d87:	e8 c5 d9 01 00       	call   c0026751 <__ledf2>
c0008d8c:	83 c4 10             	add    esp,0x10
c0008d8f:	85 c0                	test   eax,eax
c0008d91:	7f 0c                	jg     c0008d9f <src_float_to_int_array+0x9d>
c0008d93:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d9a:	e9 70 ff ff ff       	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008d9f:	50                   	push   eax
c0008da0:	50                   	push   eax
c0008da1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da9:	e8 52 db 01 00       	call   c0026900 <lrint>
c0008dae:	83 c4 10             	add    esp,0x10
c0008db1:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008db4:	e9 56 ff ff ff       	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008db9:	83 c4 14             	add    esp,0x14
c0008dbc:	5b                   	pop    ebx
c0008dbd:	5e                   	pop    esi
c0008dbe:	c3                   	ret    

c0008dbf <linear_vari_process>:
c0008dbf:	55                   	push   ebp
c0008dc0:	31 d2                	xor    edx,edx
c0008dc2:	57                   	push   edi
c0008dc3:	56                   	push   esi
c0008dc4:	53                   	push   ebx
c0008dc5:	83 ec 3c             	sub    esp,0x3c
c0008dc8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008dcc:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008dd0:	0f 8e d3 07 00 00    	jle    c00095a9 <linear_vari_process+0x7ea>
c0008dd6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008dda:	ba 05 00 00 00       	mov    edx,0x5
c0008ddf:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008de2:	85 db                	test   ebx,ebx
c0008de4:	0f 84 bf 07 00 00    	je     c00095a9 <linear_vari_process+0x7ea>
c0008dea:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008ded:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008df1:	74 19                	je     c0008e0c <linear_vari_process+0x4d>
c0008df3:	31 d2                	xor    edx,edx
c0008df5:	39 c2                	cmp    edx,eax
c0008df7:	7d 0c                	jge    c0008e05 <linear_vari_process+0x46>
c0008df9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dfb:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008dfe:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008e02:	42                   	inc    edx
c0008e03:	eb f0                	jmp    c0008df5 <linear_vari_process+0x36>
c0008e05:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008e0c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008e0f:	0f af d0             	imul   edx,eax
c0008e12:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e15:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e19:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e20:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e23:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e2a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e2e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e31:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e3b:	68 00 00 70 3f       	push   0x3f700000
c0008e40:	6a 00                	push   0x0
c0008e42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e4a:	e8 00 d9 01 00       	call   c002674f <__ltdf2>
c0008e4f:	83 c4 10             	add    esp,0x10
c0008e52:	ba 16 00 00 00       	mov    edx,0x16
c0008e57:	85 c0                	test   eax,eax
c0008e59:	0f 88 4a 07 00 00    	js     c00095a9 <linear_vari_process+0x7ea>
c0008e5f:	68 00 00 70 40       	push   0x40700000
c0008e64:	6a 00                	push   0x0
c0008e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e6e:	e8 be d8 01 00       	call   c0026731 <__gtdf2>
c0008e73:	83 c4 10             	add    esp,0x10
c0008e76:	ba 16 00 00 00       	mov    edx,0x16
c0008e7b:	85 c0                	test   eax,eax
c0008e7d:	0f 8f 26 07 00 00    	jg     c00095a9 <linear_vari_process+0x7ea>
c0008e83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e87:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008e8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e95:	68 00 00 f0 3f       	push   0x3ff00000
c0008e9a:	6a 00                	push   0x0
c0008e9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea4:	e8 a6 d8 01 00       	call   c002674f <__ltdf2>
c0008ea9:	83 c4 10             	add    esp,0x10
c0008eac:	85 c0                	test   eax,eax
c0008eae:	0f 89 89 02 00 00    	jns    c000913d <linear_vari_process+0x37e>
c0008eb4:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008eb7:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008eba:	0f 8d 7d 02 00 00    	jge    c000913d <linear_vari_process+0x37e>
c0008ec0:	83 ec 0c             	sub    esp,0xc
c0008ec3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008ec6:	e8 18 d6 01 00       	call   c00264e3 <__floatsidf>
c0008ecb:	83 c4 10             	add    esp,0x10
c0008ece:	89 04 24             	mov    DWORD PTR [esp],eax
c0008ed1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008ed5:	68 00 00 f0 3f       	push   0x3ff00000
c0008eda:	6a 00                	push   0x0
c0008edc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee4:	e8 1a c9 01 00       	call   c0025803 <__adddf3>
c0008ee9:	83 c4 10             	add    esp,0x10
c0008eec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ef0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ef4:	52                   	push   edx
c0008ef5:	50                   	push   eax
c0008ef6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008efa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008efe:	e8 7d cf 01 00       	call   c0025e80 <__muldf3>
c0008f03:	5d                   	pop    ebp
c0008f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f08:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f0c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f0f:	e8 cf d5 01 00       	call   c00264e3 <__floatsidf>
c0008f14:	83 c4 10             	add    esp,0x10
c0008f17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f1b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f1f:	52                   	push   edx
c0008f20:	50                   	push   eax
c0008f21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f29:	e8 d5 c8 01 00       	call   c0025803 <__adddf3>
c0008f2e:	59                   	pop    ecx
c0008f2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f33:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f37:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008f3a:	e8 a4 d5 01 00       	call   c00264e3 <__floatsidf>
c0008f3f:	83 c4 10             	add    esp,0x10
c0008f42:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f46:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f4a:	52                   	push   edx
c0008f4b:	50                   	push   eax
c0008f4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f54:	e8 f4 d7 01 00       	call   c002674d <__gedf2>
c0008f59:	83 c4 10             	add    esp,0x10
c0008f5c:	85 c0                	test   eax,eax
c0008f5e:	0f 89 d9 01 00 00    	jns    c000913d <linear_vari_process+0x37e>
c0008f64:	85 ff                	test   edi,edi
c0008f66:	0f 8e f4 00 00 00    	jle    c0009060 <linear_vari_process+0x2a1>
c0008f6c:	83 ec 10             	sub    esp,0x10
c0008f6f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008f72:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008f75:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008f79:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008f7c:	ff 30                	push   DWORD PTR [eax]
c0008f7e:	e8 d1 ce 01 00       	call   c0025e54 <__subdf3>
c0008f83:	83 c4 18             	add    esp,0x18
c0008f86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f8e:	52                   	push   edx
c0008f8f:	50                   	push   eax
c0008f90:	e8 4b d9 01 00       	call   c00268e0 <fabs>
c0008f95:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f99:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f9d:	83 c4 10             	add    esp,0x10
c0008fa0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0008fa5:	68 23 42 92 0c       	push   0xc924223
c0008faa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fb2:	e8 7a d7 01 00       	call   c0026731 <__gtdf2>
c0008fb7:	83 c4 10             	add    esp,0x10
c0008fba:	85 c0                	test   eax,eax
c0008fbc:	0f 8e 9e 00 00 00    	jle    c0009060 <linear_vari_process+0x2a1>
c0008fc2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008fc6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008fc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fcb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008fcf:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fd2:	52                   	push   edx
c0008fd3:	50                   	push   eax
c0008fd4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fd7:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fda:	e8 75 ce 01 00       	call   c0025e54 <__subdf3>
c0008fdf:	59                   	pop    ecx
c0008fe0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fe4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0008fe8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008feb:	e8 f3 d4 01 00       	call   c00264e3 <__floatsidf>
c0008ff0:	83 c4 10             	add    esp,0x10
c0008ff3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ff7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ffb:	52                   	push   edx
c0008ffc:	50                   	push   eax
c0008ffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009005:	e8 76 ce 01 00       	call   c0025e80 <__muldf3>
c000900a:	5f                   	pop    edi
c000900b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000900f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009013:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009016:	e8 c8 d4 01 00       	call   c00264e3 <__floatsidf>
c000901b:	83 c4 10             	add    esp,0x10
c000901e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009022:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009026:	52                   	push   edx
c0009027:	50                   	push   eax
c0009028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000902c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009030:	e8 2f d1 01 00       	call   c0026164 <__divdf3>
c0009035:	83 c4 10             	add    esp,0x10
c0009038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000903c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009040:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009044:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000904c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009050:	e8 ae c7 01 00       	call   c0025803 <__adddf3>
c0009055:	83 c4 10             	add    esp,0x10
c0009058:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000905c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009060:	31 ff                	xor    edi,edi
c0009062:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009065:	0f 8e 9d 00 00 00    	jle    c0009108 <linear_vari_process+0x349>
c000906b:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c000906e:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009072:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009075:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009079:	89 04 24             	mov    DWORD PTR [esp],eax
c000907c:	8b 06                	mov    eax,DWORD PTR [esi]
c000907e:	52                   	push   edx
c000907f:	52                   	push   edx
c0009080:	55                   	push   ebp
c0009081:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c0009084:	47                   	inc    edi
c0009085:	e8 0e c1 01 00       	call   c0025198 <__subsf3>
c000908a:	89 04 24             	mov    DWORD PTR [esp],eax
c000908d:	e8 e5 d7 01 00       	call   c0026877 <__extendsfdf2>
c0009092:	83 c4 10             	add    esp,0x10
c0009095:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009099:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000909d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090a1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ad:	e8 ce cd 01 00       	call   c0025e80 <__muldf3>
c00090b2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00090b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00090b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090bd:	e8 b5 d7 01 00       	call   c0026877 <__extendsfdf2>
c00090c2:	83 c4 10             	add    esp,0x10
c00090c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090c9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090cd:	52                   	push   edx
c00090ce:	50                   	push   eax
c00090cf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090d7:	e8 27 c7 01 00       	call   c0025803 <__adddf3>
c00090dc:	59                   	pop    ecx
c00090dd:	5d                   	pop    ebp
c00090de:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090e2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ee:	e8 60 d6 01 00       	call   c0026753 <__truncdfsf2>
c00090f3:	83 c4 10             	add    esp,0x10
c00090f6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00090f9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00090fd:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009100:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009103:	e9 5a ff ff ff       	jmp    c0009062 <linear_vari_process+0x2a3>
c0009108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000910c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009110:	68 00 00 f0 3f       	push   0x3ff00000
c0009115:	6a 00                	push   0x0
c0009117:	e8 48 d0 01 00       	call   c0026164 <__divdf3>
c000911c:	83 c4 10             	add    esp,0x10
c000911f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009122:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009126:	52                   	push   edx
c0009127:	50                   	push   eax
c0009128:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	e8 ce c6 01 00       	call   c0025803 <__adddf3>
c0009135:	83 c4 10             	add    esp,0x10
c0009138:	e9 50 fd ff ff       	jmp    c0008e8d <linear_vari_process+0xce>
c000913d:	50                   	push   eax
c000913e:	50                   	push   eax
c000913f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009143:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009147:	e8 b4 d7 01 00       	call   c0026900 <lrint>
c000914c:	83 ec 0c             	sub    esp,0xc
c000914f:	50                   	push   eax
c0009150:	e8 8e d3 01 00       	call   c00264e3 <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000915c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009166:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000916a:	e8 e5 cc 01 00       	call   c0025e54 <__subdf3>
c000916f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009173:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009177:	83 c4 20             	add    esp,0x20
c000917a:	6a 00                	push   0x0
c000917c:	6a 00                	push   0x0
c000917e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009182:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009186:	e8 c4 d5 01 00       	call   c002674f <__ltdf2>
c000918b:	83 c4 10             	add    esp,0x10
c000918e:	85 c0                	test   eax,eax
c0009190:	79 1e                	jns    c00091b0 <linear_vari_process+0x3f1>
c0009192:	68 00 00 f0 3f       	push   0x3ff00000
c0009197:	6a 00                	push   0x0
c0009199:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000919d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a1:	e8 5d c6 01 00       	call   c0025803 <__adddf3>
c00091a6:	83 c4 10             	add    esp,0x10
c00091a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00091ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091b3:	83 ec 10             	sub    esp,0x10
c00091b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c6:	e8 89 cc 01 00       	call   c0025e54 <__subdf3>
c00091cb:	83 c4 18             	add    esp,0x18
c00091ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091d6:	52                   	push   edx
c00091d7:	50                   	push   eax
c00091d8:	e8 23 d7 01 00       	call   c0026900 <lrint>
c00091dd:	83 c4 10             	add    esp,0x10
c00091e0:	0f af f8             	imul   edi,eax
c00091e3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00091e6:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00091e9:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00091ec:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00091ef:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c00091f2:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00091f6:	0f 8d 13 03 00 00    	jge    c000950f <linear_vari_process+0x750>
c00091fc:	83 ec 0c             	sub    esp,0xc
c00091ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009202:	e8 dc d2 01 00       	call   c00264e3 <__floatsidf>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000920e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009212:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009216:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000921a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000921e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009222:	e8 59 cc 01 00       	call   c0025e80 <__muldf3>
c0009227:	89 3c 24             	mov    DWORD PTR [esp],edi
c000922a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000922e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009232:	e8 ac d2 01 00       	call   c00264e3 <__floatsidf>
c0009237:	83 c4 10             	add    esp,0x10
c000923a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000923e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009242:	52                   	push   edx
c0009243:	50                   	push   eax
c0009244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000924c:	e8 b2 c5 01 00       	call   c0025803 <__adddf3>
c0009251:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009254:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009258:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000925c:	e8 82 d2 01 00       	call   c00264e3 <__floatsidf>
c0009261:	83 c4 10             	add    esp,0x10
c0009264:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009268:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000926c:	52                   	push   edx
c000926d:	50                   	push   eax
c000926e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009272:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009276:	e8 d4 d4 01 00       	call   c002674f <__ltdf2>
c000927b:	83 c4 10             	add    esp,0x10
c000927e:	85 c0                	test   eax,eax
c0009280:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009284:	0f 89 85 02 00 00    	jns    c000950f <linear_vari_process+0x750>
c000928a:	85 c9                	test   ecx,ecx
c000928c:	0f 8e f5 00 00 00    	jle    c0009387 <linear_vari_process+0x5c8>
c0009292:	83 ec 10             	sub    esp,0x10
c0009295:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009298:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000929b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000929f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00092a2:	ff 30                	push   DWORD PTR [eax]
c00092a4:	e8 ab cb 01 00       	call   c0025e54 <__subdf3>
c00092a9:	83 c4 18             	add    esp,0x18
c00092ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b4:	52                   	push   edx
c00092b5:	50                   	push   eax
c00092b6:	e8 25 d6 01 00       	call   c00268e0 <fabs>
c00092bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092c3:	83 c4 10             	add    esp,0x10
c00092c6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00092cb:	68 23 42 92 0c       	push   0xc924223
c00092d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d8:	e8 54 d4 01 00       	call   c0026731 <__gtdf2>
c00092dd:	83 c4 10             	add    esp,0x10
c00092e0:	85 c0                	test   eax,eax
c00092e2:	0f 8e 9f 00 00 00    	jle    c0009387 <linear_vari_process+0x5c8>
c00092e8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00092ec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00092ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00092f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092f9:	52                   	push   edx
c00092fa:	50                   	push   eax
c00092fb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092fe:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009301:	e8 4e cb 01 00       	call   c0025e54 <__subdf3>
c0009306:	5f                   	pop    edi
c0009307:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000930b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000930f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009312:	e8 cc d1 01 00       	call   c00264e3 <__floatsidf>
c0009317:	83 c4 10             	add    esp,0x10
c000931a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000931e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009322:	52                   	push   edx
c0009323:	50                   	push   eax
c0009324:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000932c:	e8 4f cb 01 00       	call   c0025e80 <__muldf3>
c0009331:	5d                   	pop    ebp
c0009332:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009336:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000933a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000933d:	e8 a1 d1 01 00       	call   c00264e3 <__floatsidf>
c0009342:	83 c4 10             	add    esp,0x10
c0009345:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009349:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000934d:	52                   	push   edx
c000934e:	50                   	push   eax
c000934f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009353:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009357:	e8 08 ce 01 00       	call   c0026164 <__divdf3>
c000935c:	83 c4 10             	add    esp,0x10
c000935f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009363:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009367:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000936b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000936f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009373:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009377:	e8 87 c4 01 00       	call   c0025803 <__adddf3>
c000937c:	83 c4 10             	add    esp,0x10
c000937f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009383:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009387:	31 ff                	xor    edi,edi
c0009389:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000938c:	39 f8                	cmp    eax,edi
c000938e:	0f 8e ac 00 00 00    	jle    c0009440 <linear_vari_process+0x681>
c0009394:	8b 16                	mov    edx,DWORD PTR [esi]
c0009396:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0009399:	29 c1                	sub    ecx,eax
c000939b:	89 c8                	mov    eax,ecx
c000939d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00093a0:	01 f8                	add    eax,edi
c00093a2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00093a6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00093a9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00093ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093b0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093b3:	51                   	push   ecx
c00093b4:	01 f8                	add    eax,edi
c00093b6:	51                   	push   ecx
c00093b7:	47                   	inc    edi
c00093b8:	55                   	push   ebp
c00093b9:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093bc:	e8 d7 bd 01 00       	call   c0025198 <__subsf3>
c00093c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c4:	e8 ae d4 01 00       	call   c0026877 <__extendsfdf2>
c00093c9:	83 c4 10             	add    esp,0x10
c00093cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093d0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093d4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093d8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093e4:	e8 97 ca 01 00       	call   c0025e80 <__muldf3>
c00093e9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00093f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00093f4:	e8 7e d4 01 00       	call   c0026877 <__extendsfdf2>
c00093f9:	83 c4 10             	add    esp,0x10
c00093fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009400:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009404:	52                   	push   edx
c0009405:	50                   	push   eax
c0009406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000940a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000940e:	e8 f0 c3 01 00       	call   c0025803 <__adddf3>
c0009413:	5d                   	pop    ebp
c0009414:	59                   	pop    ecx
c0009415:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009419:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000941d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009421:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009425:	e8 29 d3 01 00       	call   c0026753 <__truncdfsf2>
c000942a:	83 c4 10             	add    esp,0x10
c000942d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009431:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009435:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009438:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000943b:	e9 49 ff ff ff       	jmp    c0009389 <linear_vari_process+0x5ca>
c0009440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009448:	68 00 00 f0 3f       	push   0x3ff00000
c000944d:	6a 00                	push   0x0
c000944f:	e8 10 cd 01 00       	call   c0026164 <__divdf3>
c0009454:	83 c4 10             	add    esp,0x10
c0009457:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000945f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009463:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009467:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946f:	e8 8f c3 01 00       	call   c0025803 <__adddf3>
c0009474:	59                   	pop    ecx
c0009475:	5f                   	pop    edi
c0009476:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000947a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000947e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009482:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009486:	e8 75 d4 01 00       	call   c0026900 <lrint>
c000948b:	83 ec 0c             	sub    esp,0xc
c000948e:	50                   	push   eax
c000948f:	e8 4f d0 01 00       	call   c00264e3 <__floatsidf>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000949b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000949f:	52                   	push   edx
c00094a0:	50                   	push   eax
c00094a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a9:	e8 a6 c9 01 00       	call   c0025e54 <__subdf3>
c00094ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00094b2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094b6:	83 c4 20             	add    esp,0x20
c00094b9:	6a 00                	push   0x0
c00094bb:	6a 00                	push   0x0
c00094bd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094c1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094c5:	e8 85 d2 01 00       	call   c002674f <__ltdf2>
c00094ca:	83 c4 10             	add    esp,0x10
c00094cd:	85 c0                	test   eax,eax
c00094cf:	79 1e                	jns    c00094ef <linear_vari_process+0x730>
c00094d1:	68 00 00 f0 3f       	push   0x3ff00000
c00094d6:	6a 00                	push   0x0
c00094d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094e0:	e8 1e c3 01 00       	call   c0025803 <__adddf3>
c00094e5:	83 c4 10             	add    esp,0x10
c00094e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00094eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00094ef:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00094f2:	83 ec 10             	sub    esp,0x10
c00094f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009501:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009505:	e8 4a c9 01 00       	call   c0025e54 <__subdf3>
c000950a:	e9 bc fc ff ff       	jmp    c00091cb <linear_vari_process+0x40c>
c000950f:	39 fd                	cmp    ebp,edi
c0009511:	7d 38                	jge    c000954b <linear_vari_process+0x78c>
c0009513:	83 ec 0c             	sub    esp,0xc
c0009516:	89 f8                	mov    eax,edi
c0009518:	29 e8                	sub    eax,ebp
c000951a:	99                   	cdq    
c000951b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000951e:	50                   	push   eax
c000951f:	e8 bf cf 01 00       	call   c00264e3 <__floatsidf>
c0009524:	83 c4 10             	add    esp,0x10
c0009527:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000952b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000952f:	52                   	push   edx
c0009530:	50                   	push   eax
c0009531:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009535:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009539:	e8 c5 c2 01 00       	call   c0025803 <__adddf3>
c000953e:	83 c4 10             	add    esp,0x10
c0009541:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009544:	89 04 24             	mov    DWORD PTR [esp],eax
c0009547:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000954b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000954f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009552:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009556:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009559:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000955c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000955f:	85 c0                	test   eax,eax
c0009561:	7f 29                	jg     c000958c <linear_vari_process+0x7cd>
c0009563:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000956b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000956f:	89 01                	mov    DWORD PTR [ecx],eax
c0009571:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009574:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009577:	99                   	cdq    
c0009578:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000957b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000957e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009581:	99                   	cdq    
c0009582:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009585:	31 d2                	xor    edx,edx
c0009587:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000958a:	eb 1d                	jmp    c00095a9 <linear_vari_process+0x7ea>
c000958c:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000958f:	31 d2                	xor    edx,edx
c0009591:	29 c8                	sub    eax,ecx
c0009593:	c1 e0 02             	shl    eax,0x2
c0009596:	39 d1                	cmp    ecx,edx
c0009598:	7e c9                	jle    c0009563 <linear_vari_process+0x7a4>
c000959a:	8b 3e                	mov    edi,DWORD PTR [esi]
c000959c:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000959f:	83 c0 04             	add    eax,0x4
c00095a2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095a6:	42                   	inc    edx
c00095a7:	eb ed                	jmp    c0009596 <linear_vari_process+0x7d7>
c00095a9:	83 c4 3c             	add    esp,0x3c
c00095ac:	89 d0                	mov    eax,edx
c00095ae:	5b                   	pop    ebx
c00095af:	5e                   	pop    esi
c00095b0:	5f                   	pop    edi
c00095b1:	5d                   	pop    ebp
c00095b2:	c3                   	ret    

c00095b3 <linear_reset>:
c00095b3:	83 ec 0c             	sub    esp,0xc
c00095b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095ba:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095bd:	85 c0                	test   eax,eax
c00095bf:	74 20                	je     c00095e1 <linear_reset+0x2e>
c00095c1:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095c4:	83 c0 1c             	add    eax,0x1c
c00095c7:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095ca:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00095d1:	c1 e2 02             	shl    edx,0x2
c00095d4:	51                   	push   ecx
c00095d5:	52                   	push   edx
c00095d6:	6a 00                	push   0x0
c00095d8:	50                   	push   eax
c00095d9:	e8 ad 70 ff ff       	call   c000068b <memset>
c00095de:	83 c4 10             	add    esp,0x10
c00095e1:	83 c4 0c             	add    esp,0xc
c00095e4:	c3                   	ret    

c00095e5 <linear_get_name>:
c00095e5:	31 c0                	xor    eax,eax
c00095e7:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095ec:	75 05                	jne    c00095f3 <linear_get_name+0xe>
c00095ee:	b8 00 80 02 c0       	mov    eax,0xc0028000
c00095f3:	c3                   	ret    

c00095f4 <linear_get_description>:
c00095f4:	31 c0                	xor    eax,eax
c00095f6:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095fb:	75 05                	jne    c0009602 <linear_get_description+0xe>
c00095fd:	b8 14 80 02 c0       	mov    eax,0xc0028014
c0009602:	c3                   	ret    

c0009603 <linear_set_converter>:
c0009603:	53                   	push   ebx
c0009604:	b8 0a 00 00 00       	mov    eax,0xa
c0009609:	83 ec 08             	sub    esp,0x8
c000960c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009610:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009615:	75 6e                	jne    c0009685 <linear_set_converter+0x82>
c0009617:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000961a:	85 c0                	test   eax,eax
c000961c:	74 13                	je     c0009631 <linear_set_converter+0x2e>
c000961e:	83 ec 0c             	sub    esp,0xc
c0009621:	50                   	push   eax
c0009622:	e8 bd 5e 00 00       	call   c000f4e4 <free>
c0009627:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000962e:	83 c4 10             	add    esp,0x10
c0009631:	50                   	push   eax
c0009632:	50                   	push   eax
c0009633:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009636:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000963d:	50                   	push   eax
c000963e:	6a 01                	push   0x1
c0009640:	e8 bf 5e 00 00       	call   c000f504 <calloc>
c0009645:	83 c4 10             	add    esp,0x10
c0009648:	89 c2                	mov    edx,eax
c000964a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000964d:	85 d2                	test   edx,edx
c000964f:	b8 01 00 00 00       	mov    eax,0x1
c0009654:	74 2f                	je     c0009685 <linear_set_converter+0x82>
c0009656:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009659:	83 ec 0c             	sub    esp,0xc
c000965c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000965f:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009665:	c7 43 24 bf 8d 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008dbf
c000966c:	c7 43 20 bf 8d 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008dbf
c0009673:	c7 43 28 b3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095b3
c000967a:	53                   	push   ebx
c000967b:	e8 33 ff ff ff       	call   c00095b3 <linear_reset>
c0009680:	83 c4 10             	add    esp,0x10
c0009683:	31 c0                	xor    eax,eax
c0009685:	83 c4 08             	add    esp,0x8
c0009688:	5b                   	pop    ebx
c0009689:	c3                   	ret    

c000968a <int_to_fp>:
c000968a:	c1 e0 0c             	shl    eax,0xc
c000968d:	c3                   	ret    

c000968e <fp_to_int>:
c000968e:	c1 f8 0c             	sar    eax,0xc
c0009691:	c3                   	ret    

c0009692 <fp_fraction_part>:
c0009692:	25 ff 0f 00 00       	and    eax,0xfff
c0009697:	c3                   	ret    

c0009698 <fp_to_double>:
c0009698:	83 ec 1c             	sub    esp,0x1c
c000969b:	e8 f2 ff ff ff       	call   c0009692 <fp_fraction_part>
c00096a0:	83 ec 0c             	sub    esp,0xc
c00096a3:	50                   	push   eax
c00096a4:	e8 3a ce 01 00       	call   c00264e3 <__floatsidf>
c00096a9:	83 c4 10             	add    esp,0x10
c00096ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096b4:	68 00 00 30 3f       	push   0x3f300000
c00096b9:	6a 00                	push   0x0
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c3:	e8 b8 c7 01 00       	call   c0025e80 <__muldf3>
c00096c8:	83 c4 2c             	add    esp,0x2c
c00096cb:	c3                   	ret    

c00096cc <calc_output_single>:
c00096cc:	55                   	push   ebp
c00096cd:	57                   	push   edi
c00096ce:	56                   	push   esi
c00096cf:	89 c6                	mov    esi,eax
c00096d1:	53                   	push   ebx
c00096d2:	89 d3                	mov    ebx,edx
c00096d4:	83 ec 4c             	sub    esp,0x4c
c00096d7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00096db:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00096de:	e8 a7 ff ff ff       	call   c000968a <int_to_fp>
c00096e3:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00096e6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00096ea:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00096ee:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00096f2:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c00096f5:	99                   	cdq    
c00096f6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00096fe:	f7 fb                	idiv   ebx
c0009700:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009708:	89 da                	mov    edx,ebx
c000970a:	0f af d0             	imul   edx,eax
c000970d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009711:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009715:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009719:	29 c2                	sub    edx,eax
c000971b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000971e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009722:	83 c5 04             	add    ebp,0x4
c0009725:	e8 6e ff ff ff       	call   c0009698 <fp_to_double>
c000972a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000972e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009736:	e8 53 ff ff ff       	call   c000968e <fp_to_int>
c000973b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000973e:	52                   	push   edx
c000973f:	52                   	push   edx
c0009740:	51                   	push   ecx
c0009741:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009745:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009749:	e8 4a ba 01 00       	call   c0025198 <__subsf3>
c000974e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009751:	e8 21 d1 01 00       	call   c0026877 <__extendsfdf2>
c0009756:	83 c4 10             	add    esp,0x10
c0009759:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000975d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009761:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009765:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009769:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000976d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009771:	e8 0a c7 01 00       	call   c0025e80 <__muldf3>
c0009776:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000977a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000977e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009781:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009785:	e8 ed d0 01 00       	call   c0026877 <__extendsfdf2>
c000978a:	83 c4 10             	add    esp,0x10
c000978d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009795:	52                   	push   edx
c0009796:	50                   	push   eax
c0009797:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000979b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000979f:	e8 5f c0 01 00       	call   c0025803 <__adddf3>
c00097a4:	59                   	pop    ecx
c00097a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00097a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00097ad:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097b3:	e8 bf d0 01 00       	call   c0026877 <__extendsfdf2>
c00097b8:	83 c4 10             	add    esp,0x10
c00097bb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097bf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097c3:	52                   	push   edx
c00097c4:	50                   	push   eax
c00097c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097cd:	e8 ae c6 01 00       	call   c0025e80 <__muldf3>
c00097d2:	83 c4 10             	add    esp,0x10
c00097d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00097d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00097dd:	52                   	push   edx
c00097de:	50                   	push   eax
c00097df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e7:	e8 17 c0 01 00       	call   c0025803 <__adddf3>
c00097ec:	83 c4 10             	add    esp,0x10
c00097ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097f7:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c00097fb:	0f 89 1d ff ff ff    	jns    c000971e <calc_output_single+0x52>
c0009801:	89 d9                	mov    ecx,ebx
c0009803:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009807:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000980b:	89 dd                	mov    ebp,ebx
c000980d:	29 c8                	sub    eax,ecx
c000980f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009817:	99                   	cdq    
c0009818:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009820:	f7 fb                	idiv   ebx
c0009822:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009826:	0f af e8             	imul   ebp,eax
c0009829:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c000982d:	01 cd                	add    ebp,ecx
c000982f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009832:	89 e8                	mov    eax,ebp
c0009834:	83 ee 04             	sub    esi,0x4
c0009837:	e8 5c fe ff ff       	call   c0009698 <fp_to_double>
c000983c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009840:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009844:	89 e8                	mov    eax,ebp
c0009846:	29 dd                	sub    ebp,ebx
c0009848:	e8 41 fe ff ff       	call   c000968e <fp_to_int>
c000984d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009850:	52                   	push   edx
c0009851:	52                   	push   edx
c0009852:	51                   	push   ecx
c0009853:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009857:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000985b:	e8 38 b9 01 00       	call   c0025198 <__subsf3>
c0009860:	89 04 24             	mov    DWORD PTR [esp],eax
c0009863:	e8 0f d0 01 00       	call   c0026877 <__extendsfdf2>
c0009868:	83 c4 10             	add    esp,0x10
c000986b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000986f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009877:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000987b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000987f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009883:	e8 f8 c5 01 00       	call   c0025e80 <__muldf3>
c0009888:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000988c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009890:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009893:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009897:	e8 db cf 01 00       	call   c0026877 <__extendsfdf2>
c000989c:	83 c4 10             	add    esp,0x10
c000989f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098a3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098a7:	52                   	push   edx
c00098a8:	50                   	push   eax
c00098a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098b1:	e8 4d bf 01 00       	call   c0025803 <__adddf3>
c00098b6:	59                   	pop    ecx
c00098b7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098bb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098bf:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098c5:	e8 ad cf 01 00       	call   c0026877 <__extendsfdf2>
c00098ca:	83 c4 10             	add    esp,0x10
c00098cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098d1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098d5:	52                   	push   edx
c00098d6:	50                   	push   eax
c00098d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098df:	e8 9c c5 01 00       	call   c0025e80 <__muldf3>
c00098e4:	83 c4 10             	add    esp,0x10
c00098e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098ef:	52                   	push   edx
c00098f0:	50                   	push   eax
c00098f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098f9:	e8 05 bf 01 00       	call   c0025803 <__adddf3>
c00098fe:	83 c4 10             	add    esp,0x10
c0009901:	85 ed                	test   ebp,ebp
c0009903:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009907:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000990b:	0f 8f 21 ff ff ff    	jg     c0009832 <calc_output_single+0x166>
c0009911:	52                   	push   edx
c0009912:	50                   	push   eax
c0009913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000991b:	e8 e3 be 01 00       	call   c0025803 <__adddf3>
c0009920:	83 c4 5c             	add    esp,0x5c
c0009923:	5b                   	pop    ebx
c0009924:	5e                   	pop    esi
c0009925:	5f                   	pop    edi
c0009926:	5d                   	pop    ebp
c0009927:	c3                   	ret    

c0009928 <calc_output_stereo>:
c0009928:	55                   	push   ebp
c0009929:	89 cd                	mov    ebp,ecx
c000992b:	57                   	push   edi
c000992c:	56                   	push   esi
c000992d:	53                   	push   ebx
c000992e:	89 c3                	mov    ebx,eax
c0009930:	83 ec 6c             	sub    esp,0x6c
c0009933:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009937:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000993e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009945:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009949:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000994d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009950:	e8 35 fd ff ff       	call   c000968a <int_to_fp>
c0009955:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000995d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009961:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009969:	29 c8                	sub    eax,ecx
c000996b:	99                   	cdq    
c000996c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009970:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009974:	0f af d0             	imul   edx,eax
c0009977:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000997a:	31 d2                	xor    edx,edx
c000997c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009980:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009984:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009987:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000998b:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c000998e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009992:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009996:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009999:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000999e:	29 c1                	sub    ecx,eax
c00099a0:	31 c0                	xor    eax,eax
c00099a2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c00099a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099ad:	83 c7 08             	add    edi,0x8
c00099b0:	e8 e3 fc ff ff       	call   c0009698 <fp_to_double>
c00099b5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099b9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099c1:	e8 c8 fc ff ff       	call   c000968e <fp_to_int>
c00099c6:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c00099c9:	52                   	push   edx
c00099ca:	52                   	push   edx
c00099cb:	51                   	push   ecx
c00099cc:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c00099d0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c00099d4:	e8 bf b7 01 00       	call   c0025198 <__subsf3>
c00099d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00099dc:	e8 96 ce 01 00       	call   c0026877 <__extendsfdf2>
c00099e1:	83 c4 10             	add    esp,0x10
c00099e4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00099e8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c00099ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099f0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099fc:	e8 7f c4 01 00       	call   c0025e80 <__muldf3>
c0009a01:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a05:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a0c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a10:	e8 62 ce 01 00       	call   c0026877 <__extendsfdf2>
c0009a15:	83 c4 10             	add    esp,0x10
c0009a18:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a1c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a20:	52                   	push   edx
c0009a21:	50                   	push   eax
c0009a22:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a26:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a2a:	e8 d4 bd 01 00       	call   c0025803 <__adddf3>
c0009a2f:	59                   	pop    ecx
c0009a30:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a34:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a38:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a3e:	e8 34 ce 01 00       	call   c0026877 <__extendsfdf2>
c0009a43:	83 c4 10             	add    esp,0x10
c0009a46:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a4a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a4e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a56:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a5a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a5e:	e8 1d c4 01 00       	call   c0025e80 <__muldf3>
c0009a63:	83 c4 10             	add    esp,0x10
c0009a66:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a6a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a6e:	52                   	push   edx
c0009a6f:	50                   	push   eax
c0009a70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a78:	e8 86 bd 01 00       	call   c0025803 <__adddf3>
c0009a7d:	59                   	pop    ecx
c0009a7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a82:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009a86:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009a8c:	e8 e6 cd 01 00       	call   c0026877 <__extendsfdf2>
c0009a91:	83 c4 10             	add    esp,0x10
c0009a94:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a98:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a9c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aa0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aa4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aa8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aac:	e8 cf c3 01 00       	call   c0025e80 <__muldf3>
c0009ab1:	83 c4 10             	add    esp,0x10
c0009ab4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009ab8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009abc:	52                   	push   edx
c0009abd:	50                   	push   eax
c0009abe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ac2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ac6:	e8 38 bd 01 00       	call   c0025803 <__adddf3>
c0009acb:	83 c4 10             	add    esp,0x10
c0009ace:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ad2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ad6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ada:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009ade:	0f 89 c5 fe ff ff    	jns    c00099a9 <calc_output_stereo+0x81>
c0009ae4:	29 e9                	sub    ecx,ebp
c0009ae6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009aea:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009aee:	29 c8                	sub    eax,ecx
c0009af0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009af8:	99                   	cdq    
c0009af9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009afd:	31 d2                	xor    edx,edx
c0009aff:	0f af f8             	imul   edi,eax
c0009b02:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b06:	40                   	inc    eax
c0009b07:	01 cf                	add    edi,ecx
c0009b09:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b0e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b12:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b1a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b1d:	31 c0                	xor    eax,eax
c0009b1f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b23:	89 f8                	mov    eax,edi
c0009b25:	83 eb 08             	sub    ebx,0x8
c0009b28:	e8 6b fb ff ff       	call   c0009698 <fp_to_double>
c0009b2d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b31:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b35:	89 f8                	mov    eax,edi
c0009b37:	e8 52 fb ff ff       	call   c000968e <fp_to_int>
c0009b3c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b3f:	52                   	push   edx
c0009b40:	52                   	push   edx
c0009b41:	55                   	push   ebp
c0009b42:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b46:	e8 4d b6 01 00       	call   c0025198 <__subsf3>
c0009b4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b4e:	e8 24 cd 01 00       	call   c0026877 <__extendsfdf2>
c0009b53:	83 c4 10             	add    esp,0x10
c0009b56:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b5a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b6a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b6e:	e8 0d c3 01 00       	call   c0025e80 <__muldf3>
c0009b73:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009b76:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b7a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b7e:	e8 f4 cc 01 00       	call   c0026877 <__extendsfdf2>
c0009b83:	83 c4 10             	add    esp,0x10
c0009b86:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b8a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b8e:	52                   	push   edx
c0009b8f:	50                   	push   eax
c0009b90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b98:	e8 66 bc 01 00       	call   c0025803 <__adddf3>
c0009b9d:	59                   	pop    ecx
c0009b9e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009ba2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009ba6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009bac:	e8 c6 cc 01 00       	call   c0026877 <__extendsfdf2>
c0009bb1:	83 c4 10             	add    esp,0x10
c0009bb4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bbc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bc0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bc4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bc8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bcc:	e8 af c2 01 00       	call   c0025e80 <__muldf3>
c0009bd1:	83 c4 10             	add    esp,0x10
c0009bd4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bd8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bdc:	52                   	push   edx
c0009bdd:	50                   	push   eax
c0009bde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009be2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009be6:	e8 18 bc 01 00       	call   c0025803 <__adddf3>
c0009beb:	5d                   	pop    ebp
c0009bec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009bf0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009bf4:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009bfa:	e8 78 cc 01 00       	call   c0026877 <__extendsfdf2>
c0009bff:	83 c4 10             	add    esp,0x10
c0009c02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c06:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c0a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c0e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c12:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c16:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c1a:	e8 61 c2 01 00       	call   c0025e80 <__muldf3>
c0009c1f:	83 c4 10             	add    esp,0x10
c0009c22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c26:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c2a:	52                   	push   edx
c0009c2b:	50                   	push   eax
c0009c2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c30:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c34:	e8 ca bb 01 00       	call   c0025803 <__adddf3>
c0009c39:	83 c4 10             	add    esp,0x10
c0009c3c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c44:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c48:	85 ff                	test   edi,edi
c0009c4a:	0f 8f d3 fe ff ff    	jg     c0009b23 <calc_output_stereo+0x1fb>
c0009c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c60:	e8 9e bb 01 00       	call   c0025803 <__adddf3>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c70:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c74:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c80:	e8 fb c1 01 00       	call   c0025e80 <__muldf3>
c0009c85:	59                   	pop    ecx
c0009c86:	5b                   	pop    ebx
c0009c87:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009c8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c97:	e8 b7 ca 01 00       	call   c0026753 <__truncdfsf2>
c0009c9c:	83 c4 10             	add    esp,0x10
c0009c9f:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ca6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb8:	e8 46 bb 01 00       	call   c0025803 <__adddf3>
c0009cbd:	83 c4 10             	add    esp,0x10
c0009cc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cc8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ccc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd8:	e8 a3 c1 01 00       	call   c0025e80 <__muldf3>
c0009cdd:	5e                   	pop    esi
c0009cde:	5f                   	pop    edi
c0009cdf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ce3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cef:	e8 5f ca 01 00       	call   c0026753 <__truncdfsf2>
c0009cf4:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009cfb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009cfe:	83 c4 7c             	add    esp,0x7c
c0009d01:	5b                   	pop    ebx
c0009d02:	5e                   	pop    esi
c0009d03:	5f                   	pop    edi
c0009d04:	5d                   	pop    ebp
c0009d05:	c3                   	ret    

c0009d06 <calc_output_quad>:
c0009d06:	55                   	push   ebp
c0009d07:	57                   	push   edi
c0009d08:	56                   	push   esi
c0009d09:	89 c6                	mov    esi,eax
c0009d0b:	53                   	push   ebx
c0009d0c:	83 ec 7c             	sub    esp,0x7c
c0009d0f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d13:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d17:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d1e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d25:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d2d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d30:	e8 55 f9 ff ff       	call   c000968a <int_to_fp>
c0009d35:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d38:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d3b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d3f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d43:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d47:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d4b:	99                   	cdq    
c0009d4c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d50:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d54:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d57:	31 d2                	xor    edx,edx
c0009d59:	0f af d8             	imul   ebx,eax
c0009d5c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d64:	0f af c7             	imul   eax,edi
c0009d67:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009d6b:	29 c1                	sub    ecx,eax
c0009d6d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009d75:	31 c0                	xor    eax,eax
c0009d77:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009d7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d7e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d8a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d8e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d92:	89 d8                	mov    eax,ebx
c0009d94:	83 c7 10             	add    edi,0x10
c0009d97:	e8 fc f8 ff ff       	call   c0009698 <fp_to_double>
c0009d9c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009da0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da4:	89 d8                	mov    eax,ebx
c0009da6:	e8 e3 f8 ff ff       	call   c000968e <fp_to_int>
c0009dab:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009daf:	52                   	push   edx
c0009db0:	52                   	push   edx
c0009db1:	51                   	push   ecx
c0009db2:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009db6:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009dba:	e8 d9 b3 01 00       	call   c0025198 <__subsf3>
c0009dbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0009dc2:	e8 b0 ca 01 00       	call   c0026877 <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009dce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009dd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dda:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009dde:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009de2:	e8 99 c0 01 00       	call   c0025e80 <__muldf3>
c0009de7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009deb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009def:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009df2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009df6:	e8 7c ca 01 00       	call   c0026877 <__extendsfdf2>
c0009dfb:	83 c4 10             	add    esp,0x10
c0009dfe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e02:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e06:	52                   	push   edx
c0009e07:	50                   	push   eax
c0009e08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e10:	e8 ee b9 01 00       	call   c0025803 <__adddf3>
c0009e15:	59                   	pop    ecx
c0009e16:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e1a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e1e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e24:	e8 4e ca 01 00       	call   c0026877 <__extendsfdf2>
c0009e29:	83 c4 10             	add    esp,0x10
c0009e2c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e30:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e3c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e40:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e44:	e8 37 c0 01 00       	call   c0025e80 <__muldf3>
c0009e49:	83 c4 10             	add    esp,0x10
c0009e4c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e50:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e54:	52                   	push   edx
c0009e55:	50                   	push   eax
c0009e56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e5e:	e8 a0 b9 01 00       	call   c0025803 <__adddf3>
c0009e63:	59                   	pop    ecx
c0009e64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009e68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009e6c:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009e72:	e8 00 ca 01 00       	call   c0026877 <__extendsfdf2>
c0009e77:	83 c4 10             	add    esp,0x10
c0009e7a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e7e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e8a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e8e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e92:	e8 e9 bf 01 00       	call   c0025e80 <__muldf3>
c0009e97:	83 c4 10             	add    esp,0x10
c0009e9a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e9e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ea2:	52                   	push   edx
c0009ea3:	50                   	push   eax
c0009ea4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ea8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009eac:	e8 52 b9 01 00       	call   c0025803 <__adddf3>
c0009eb1:	59                   	pop    ecx
c0009eb2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009eb6:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009eba:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009ec0:	e8 b2 c9 01 00       	call   c0026877 <__extendsfdf2>
c0009ec5:	83 c4 10             	add    esp,0x10
c0009ec8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ecc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009edc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ee0:	e8 9b bf 01 00       	call   c0025e80 <__muldf3>
c0009ee5:	83 c4 10             	add    esp,0x10
c0009ee8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eec:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ef0:	52                   	push   edx
c0009ef1:	50                   	push   eax
c0009ef2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ef6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009efa:	e8 04 b9 01 00       	call   c0025803 <__adddf3>
c0009eff:	59                   	pop    ecx
c0009f00:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f04:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f08:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f0e:	e8 64 c9 01 00       	call   c0026877 <__extendsfdf2>
c0009f13:	83 c4 10             	add    esp,0x10
c0009f16:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f1a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f26:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f2a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f2e:	e8 4d bf 01 00       	call   c0025e80 <__muldf3>
c0009f33:	83 c4 10             	add    esp,0x10
c0009f36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f3a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f3e:	52                   	push   edx
c0009f3f:	50                   	push   eax
c0009f40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f48:	e8 b6 b8 01 00       	call   c0025803 <__adddf3>
c0009f4d:	83 c4 10             	add    esp,0x10
c0009f50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f54:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f58:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f5c:	0f 89 30 fe ff ff    	jns    c0009d92 <calc_output_quad+0x8c>
c0009f62:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f66:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f6a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f6e:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009f72:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009f7a:	29 c8                	sub    eax,ecx
c0009f7c:	99                   	cdq    
c0009f7d:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f81:	31 d2                	xor    edx,edx
c0009f83:	0f af d8             	imul   ebx,eax
c0009f86:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009f8a:	40                   	inc    eax
c0009f8b:	01 cb                	add    ebx,ecx
c0009f8d:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009f92:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009f96:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009f9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009f9e:	8d 34 86             	lea    esi,[esi+eax*4]
c0009fa1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009fa9:	31 c0                	xor    eax,eax
c0009fab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009faf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fb7:	89 d8                	mov    eax,ebx
c0009fb9:	83 ee 10             	sub    esi,0x10
c0009fbc:	e8 d7 f6 ff ff       	call   c0009698 <fp_to_double>
c0009fc1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fc9:	89 d8                	mov    eax,ebx
c0009fcb:	e8 be f6 ff ff       	call   c000968e <fp_to_int>
c0009fd0:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c0009fd4:	52                   	push   edx
c0009fd5:	52                   	push   edx
c0009fd6:	57                   	push   edi
c0009fd7:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fdb:	e8 b8 b1 01 00       	call   c0025198 <__subsf3>
c0009fe0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fe3:	e8 8f c8 01 00       	call   c0026877 <__extendsfdf2>
c0009fe8:	83 c4 10             	add    esp,0x10
c0009feb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fef:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ffb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009fff:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a003:	e8 78 be 01 00       	call   c0025e80 <__muldf3>
c000a008:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a00b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a00f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a013:	e8 5f c8 01 00       	call   c0026877 <__extendsfdf2>
c000a018:	83 c4 10             	add    esp,0x10
c000a01b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a023:	52                   	push   edx
c000a024:	50                   	push   eax
c000a025:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a029:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a02d:	e8 d1 b7 01 00       	call   c0025803 <__adddf3>
c000a032:	59                   	pop    ecx
c000a033:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a037:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a03b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a041:	e8 31 c8 01 00       	call   c0026877 <__extendsfdf2>
c000a046:	83 c4 10             	add    esp,0x10
c000a049:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a04d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a051:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a055:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a059:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a061:	e8 1a be 01 00       	call   c0025e80 <__muldf3>
c000a066:	83 c4 10             	add    esp,0x10
c000a069:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a06d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a071:	52                   	push   edx
c000a072:	50                   	push   eax
c000a073:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a077:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a07b:	e8 83 b7 01 00       	call   c0025803 <__adddf3>
c000a080:	5f                   	pop    edi
c000a081:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a085:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a089:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a08f:	e8 e3 c7 01 00       	call   c0026877 <__extendsfdf2>
c000a094:	83 c4 10             	add    esp,0x10
c000a097:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a09b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a09f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ab:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0af:	e8 cc bd 01 00       	call   c0025e80 <__muldf3>
c000a0b4:	83 c4 10             	add    esp,0x10
c000a0b7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0bb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0bf:	52                   	push   edx
c000a0c0:	50                   	push   eax
c000a0c1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0c5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0c9:	e8 35 b7 01 00       	call   c0025803 <__adddf3>
c000a0ce:	59                   	pop    ecx
c000a0cf:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a0d3:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a0d7:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a0dd:	e8 95 c7 01 00       	call   c0026877 <__extendsfdf2>
c000a0e2:	83 c4 10             	add    esp,0x10
c000a0e5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0f5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0fd:	e8 7e bd 01 00       	call   c0025e80 <__muldf3>
c000a102:	83 c4 10             	add    esp,0x10
c000a105:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a109:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a10d:	52                   	push   edx
c000a10e:	50                   	push   eax
c000a10f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a113:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a117:	e8 e7 b6 01 00       	call   c0025803 <__adddf3>
c000a11c:	5f                   	pop    edi
c000a11d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a121:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a125:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a12b:	e8 47 c7 01 00       	call   c0026877 <__extendsfdf2>
c000a130:	83 c4 10             	add    esp,0x10
c000a133:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a137:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a13b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a143:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a147:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a14b:	e8 30 bd 01 00       	call   c0025e80 <__muldf3>
c000a150:	83 c4 10             	add    esp,0x10
c000a153:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a157:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a15b:	52                   	push   edx
c000a15c:	50                   	push   eax
c000a15d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a161:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a165:	e8 99 b6 01 00       	call   c0025803 <__adddf3>
c000a16a:	83 c4 10             	add    esp,0x10
c000a16d:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a171:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a175:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a179:	85 db                	test   ebx,ebx
c000a17b:	0f 8f 36 fe ff ff    	jg     c0009fb7 <calc_output_quad+0x2b1>
c000a181:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a185:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a189:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a18d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a191:	e8 6d b6 01 00       	call   c0025803 <__adddf3>
c000a196:	83 c4 10             	add    esp,0x10
c000a199:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a19d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1b1:	e8 ca bc 01 00       	call   c0025e80 <__muldf3>
c000a1b6:	59                   	pop    ecx
c000a1b7:	5b                   	pop    ebx
c000a1b8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c8:	e8 86 c5 01 00       	call   c0026753 <__truncdfsf2>
c000a1cd:	83 c4 10             	add    esp,0x10
c000a1d0:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a1d7:	89 06                	mov    DWORD PTR [esi],eax
c000a1d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1e1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1e5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1e9:	e8 15 b6 01 00       	call   c0025803 <__adddf3>
c000a1ee:	83 c4 10             	add    esp,0x10
c000a1f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a201:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a205:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a209:	e8 72 bc 01 00       	call   c0025e80 <__muldf3>
c000a20e:	5e                   	pop    esi
c000a20f:	5f                   	pop    edi
c000a210:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a214:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a21c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a220:	e8 2e c5 01 00       	call   c0026753 <__truncdfsf2>
c000a225:	83 c4 10             	add    esp,0x10
c000a228:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a22f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a232:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a236:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a23a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a23e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a242:	e8 bc b5 01 00       	call   c0025803 <__adddf3>
c000a247:	83 c4 10             	add    esp,0x10
c000a24a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a24e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a252:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a256:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a25a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a25e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a262:	e8 19 bc 01 00       	call   c0025e80 <__muldf3>
c000a267:	5d                   	pop    ebp
c000a268:	59                   	pop    ecx
c000a269:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a26d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a271:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a275:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a279:	e8 d5 c4 01 00       	call   c0026753 <__truncdfsf2>
c000a27e:	83 c4 10             	add    esp,0x10
c000a281:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a288:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a28b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a28f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a293:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a297:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a29b:	e8 63 b5 01 00       	call   c0025803 <__adddf3>
c000a2a0:	83 c4 10             	add    esp,0x10
c000a2a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2bb:	e8 c0 bb 01 00       	call   c0025e80 <__muldf3>
c000a2c0:	5b                   	pop    ebx
c000a2c1:	5e                   	pop    esi
c000a2c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2d2:	e8 7c c4 01 00       	call   c0026753 <__truncdfsf2>
c000a2d7:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a2de:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a2e1:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a2e7:	5b                   	pop    ebx
c000a2e8:	5e                   	pop    esi
c000a2e9:	5f                   	pop    edi
c000a2ea:	5d                   	pop    ebp
c000a2eb:	c3                   	ret    

c000a2ec <calc_output_hex>:
c000a2ec:	55                   	push   ebp
c000a2ed:	89 cd                	mov    ebp,ecx
c000a2ef:	57                   	push   edi
c000a2f0:	56                   	push   esi
c000a2f1:	53                   	push   ebx
c000a2f2:	89 c3                	mov    ebx,eax
c000a2f4:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a2fa:	89 14 24             	mov    DWORD PTR [esp],edx
c000a2fd:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a304:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a30b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a30f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a313:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a316:	e8 6f f3 ff ff       	call   c000968a <int_to_fp>
c000a31b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a31e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a322:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a325:	29 c8                	sub    eax,ecx
c000a327:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a32b:	99                   	cdq    
c000a32c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a334:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a337:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a33f:	0f af f8             	imul   edi,eax
c000a342:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a345:	01 cf                	add    edi,ecx
c000a347:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a34b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a34e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a352:	0f af c2             	imul   eax,edx
c000a355:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a359:	29 c1                	sub    ecx,eax
c000a35b:	31 d2                	xor    edx,edx
c000a35d:	31 c0                	xor    eax,eax
c000a35f:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a36a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a36e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a372:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a376:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a37a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a37e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a382:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a386:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38a:	89 f8                	mov    eax,edi
c000a38c:	e8 07 f3 ff ff       	call   c0009698 <fp_to_double>
c000a391:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a395:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a399:	89 f8                	mov    eax,edi
c000a39b:	e8 ee f2 ff ff       	call   c000968e <fp_to_int>
c000a3a0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3a4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a3a7:	52                   	push   edx
c000a3a8:	52                   	push   edx
c000a3a9:	51                   	push   ecx
c000a3aa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a3ae:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3b5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3b9:	e8 da ad 01 00       	call   c0025198 <__subsf3>
c000a3be:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3c1:	e8 b1 c4 01 00       	call   c0026877 <__extendsfdf2>
c000a3c6:	83 c4 10             	add    esp,0x10
c000a3c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3e1:	e8 9a ba 01 00       	call   c0025e80 <__muldf3>
c000a3e6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a3ee:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a3f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a3f5:	e8 7d c4 01 00       	call   c0026877 <__extendsfdf2>
c000a3fa:	83 c4 10             	add    esp,0x10
c000a3fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a401:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a405:	52                   	push   edx
c000a406:	50                   	push   eax
c000a407:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a40f:	e8 ef b3 01 00       	call   c0025803 <__adddf3>
c000a414:	59                   	pop    ecx
c000a415:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a419:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a41d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a423:	e8 4f c4 01 00       	call   c0026877 <__extendsfdf2>
c000a428:	83 c4 10             	add    esp,0x10
c000a42b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a42f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a433:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a437:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a43b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a43f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a443:	e8 38 ba 01 00       	call   c0025e80 <__muldf3>
c000a448:	83 c4 10             	add    esp,0x10
c000a44b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a44f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a453:	52                   	push   edx
c000a454:	50                   	push   eax
c000a455:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a459:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a45d:	e8 a1 b3 01 00       	call   c0025803 <__adddf3>
c000a462:	59                   	pop    ecx
c000a463:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a467:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a46b:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a471:	e8 01 c4 01 00       	call   c0026877 <__extendsfdf2>
c000a476:	83 c4 10             	add    esp,0x10
c000a479:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a47d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a481:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a485:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a489:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a48d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a491:	e8 ea b9 01 00       	call   c0025e80 <__muldf3>
c000a496:	83 c4 10             	add    esp,0x10
c000a499:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a49d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4a1:	52                   	push   edx
c000a4a2:	50                   	push   eax
c000a4a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ab:	e8 53 b3 01 00       	call   c0025803 <__adddf3>
c000a4b0:	59                   	pop    ecx
c000a4b1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4b5:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4b9:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4bf:	e8 b3 c3 01 00       	call   c0026877 <__extendsfdf2>
c000a4c4:	83 c4 10             	add    esp,0x10
c000a4c7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4cb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4db:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4df:	e8 9c b9 01 00       	call   c0025e80 <__muldf3>
c000a4e4:	83 c4 10             	add    esp,0x10
c000a4e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4ef:	52                   	push   edx
c000a4f0:	50                   	push   eax
c000a4f1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4f5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4f9:	e8 05 b3 01 00       	call   c0025803 <__adddf3>
c000a4fe:	59                   	pop    ecx
c000a4ff:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a503:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a507:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a50d:	e8 65 c3 01 00       	call   c0026877 <__extendsfdf2>
c000a512:	83 c4 10             	add    esp,0x10
c000a515:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a519:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a525:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a529:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a52d:	e8 4e b9 01 00       	call   c0025e80 <__muldf3>
c000a532:	83 c4 10             	add    esp,0x10
c000a535:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a539:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a53d:	52                   	push   edx
c000a53e:	50                   	push   eax
c000a53f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a543:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a547:	e8 b7 b2 01 00       	call   c0025803 <__adddf3>
c000a54c:	59                   	pop    ecx
c000a54d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a551:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a555:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a55b:	e8 17 c3 01 00       	call   c0026877 <__extendsfdf2>
c000a560:	83 c4 10             	add    esp,0x10
c000a563:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a567:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a573:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a577:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a57b:	e8 00 b9 01 00       	call   c0025e80 <__muldf3>
c000a580:	83 c4 10             	add    esp,0x10
c000a583:	83 c6 18             	add    esi,0x18
c000a586:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a58a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a58e:	52                   	push   edx
c000a58f:	50                   	push   eax
c000a590:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a594:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a598:	e8 66 b2 01 00       	call   c0025803 <__adddf3>
c000a59d:	59                   	pop    ecx
c000a59e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5a2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a5a6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a5ac:	e8 c6 c2 01 00       	call   c0026877 <__extendsfdf2>
c000a5b1:	83 c4 10             	add    esp,0x10
c000a5b4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5b8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5c4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5c8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5cc:	e8 af b8 01 00       	call   c0025e80 <__muldf3>
c000a5d1:	83 c4 10             	add    esp,0x10
c000a5d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5d8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5dc:	52                   	push   edx
c000a5dd:	50                   	push   eax
c000a5de:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5e2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5e6:	e8 18 b2 01 00       	call   c0025803 <__adddf3>
c000a5eb:	83 c4 10             	add    esp,0x10
c000a5ee:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a5f2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a5f6:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a5f9:	0f 89 8b fd ff ff    	jns    c000a38a <calc_output_hex+0x9e>
c000a5ff:	31 f6                	xor    esi,esi
c000a601:	31 ff                	xor    edi,edi
c000a603:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a607:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a60a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a60e:	29 e9                	sub    ecx,ebp
c000a610:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a614:	29 c8                	sub    eax,ecx
c000a616:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a619:	99                   	cdq    
c000a61a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a61e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a621:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a625:	0f af e8             	imul   ebp,eax
c000a628:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a62c:	40                   	inc    eax
c000a62d:	01 cd                	add    ebp,ecx
c000a62f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a634:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a638:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a63c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a640:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a643:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a647:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a64b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a64f:	89 e8                	mov    eax,ebp
c000a651:	e8 42 f0 ff ff       	call   c0009698 <fp_to_double>
c000a656:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a65a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a65e:	89 e8                	mov    eax,ebp
c000a660:	e8 29 f0 ff ff       	call   c000968e <fp_to_int>
c000a665:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a669:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a66c:	52                   	push   edx
c000a66d:	52                   	push   edx
c000a66e:	51                   	push   ecx
c000a66f:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a676:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a67d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a681:	e8 12 ab 01 00       	call   c0025198 <__subsf3>
c000a686:	89 04 24             	mov    DWORD PTR [esp],eax
c000a689:	e8 e9 c1 01 00       	call   c0026877 <__extendsfdf2>
c000a68e:	83 c4 10             	add    esp,0x10
c000a691:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a695:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a699:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6a5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6a9:	e8 d2 b7 01 00       	call   c0025e80 <__muldf3>
c000a6ae:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6b9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6bc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6c0:	e8 b2 c1 01 00       	call   c0026877 <__extendsfdf2>
c000a6c5:	83 c4 10             	add    esp,0x10
c000a6c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6d0:	52                   	push   edx
c000a6d1:	50                   	push   eax
c000a6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6da:	e8 24 b1 01 00       	call   c0025803 <__adddf3>
c000a6df:	59                   	pop    ecx
c000a6e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a6e4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a6e8:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a6ee:	e8 84 c1 01 00       	call   c0026877 <__extendsfdf2>
c000a6f3:	83 c4 10             	add    esp,0x10
c000a6f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a702:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a706:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70e:	e8 6d b7 01 00       	call   c0025e80 <__muldf3>
c000a713:	83 c4 10             	add    esp,0x10
c000a716:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a71a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a71e:	52                   	push   edx
c000a71f:	50                   	push   eax
c000a720:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a724:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a728:	e8 d6 b0 01 00       	call   c0025803 <__adddf3>
c000a72d:	59                   	pop    ecx
c000a72e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a732:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a736:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a73c:	e8 36 c1 01 00       	call   c0026877 <__extendsfdf2>
c000a741:	83 c4 10             	add    esp,0x10
c000a744:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a748:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a74c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a750:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a754:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a758:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a75c:	e8 1f b7 01 00       	call   c0025e80 <__muldf3>
c000a761:	83 c4 10             	add    esp,0x10
c000a764:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a768:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a76c:	52                   	push   edx
c000a76d:	50                   	push   eax
c000a76e:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a772:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a776:	e8 88 b0 01 00       	call   c0025803 <__adddf3>
c000a77b:	59                   	pop    ecx
c000a77c:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a780:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a784:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a78a:	e8 e8 c0 01 00       	call   c0026877 <__extendsfdf2>
c000a78f:	83 c4 10             	add    esp,0x10
c000a792:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a796:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a79a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a79e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7a2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7a6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7aa:	e8 d1 b6 01 00       	call   c0025e80 <__muldf3>
c000a7af:	83 c4 10             	add    esp,0x10
c000a7b2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7b6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7ba:	52                   	push   edx
c000a7bb:	50                   	push   eax
c000a7bc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c4:	e8 3a b0 01 00       	call   c0025803 <__adddf3>
c000a7c9:	59                   	pop    ecx
c000a7ca:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a7ce:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a7d2:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a7d8:	e8 9a c0 01 00       	call   c0026877 <__extendsfdf2>
c000a7dd:	83 c4 10             	add    esp,0x10
c000a7e0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7e4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7f0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f8:	e8 83 b6 01 00       	call   c0025e80 <__muldf3>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a804:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a808:	52                   	push   edx
c000a809:	50                   	push   eax
c000a80a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a80e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a812:	e8 ec af 01 00       	call   c0025803 <__adddf3>
c000a817:	59                   	pop    ecx
c000a818:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a81c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a820:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a826:	e8 4c c0 01 00       	call   c0026877 <__extendsfdf2>
c000a82b:	83 c4 10             	add    esp,0x10
c000a82e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a832:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a836:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a83a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a83e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a842:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a846:	e8 35 b6 01 00       	call   c0025e80 <__muldf3>
c000a84b:	83 c4 10             	add    esp,0x10
c000a84e:	83 eb 18             	sub    ebx,0x18
c000a851:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a855:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a859:	52                   	push   edx
c000a85a:	50                   	push   eax
c000a85b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a85f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a863:	e8 9b af 01 00       	call   c0025803 <__adddf3>
c000a868:	59                   	pop    ecx
c000a869:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a86d:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a871:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a877:	e8 fb bf 01 00       	call   c0026877 <__extendsfdf2>
c000a87c:	83 c4 10             	add    esp,0x10
c000a87f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a883:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a887:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a88b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a88f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a893:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a897:	e8 e4 b5 01 00       	call   c0025e80 <__muldf3>
c000a89c:	83 c4 10             	add    esp,0x10
c000a89f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8a7:	52                   	push   edx
c000a8a8:	50                   	push   eax
c000a8a9:	57                   	push   edi
c000a8aa:	56                   	push   esi
c000a8ab:	e8 53 af 01 00       	call   c0025803 <__adddf3>
c000a8b0:	83 c4 10             	add    esp,0x10
c000a8b3:	89 c6                	mov    esi,eax
c000a8b5:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8b8:	89 d7                	mov    edi,edx
c000a8ba:	85 ed                	test   ebp,ebp
c000a8bc:	0f 8f 8d fd ff ff    	jg     c000a64f <calc_output_hex+0x363>
c000a8c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8d2:	e8 2c af 01 00       	call   c0025803 <__adddf3>
c000a8d7:	83 c4 10             	add    esp,0x10
c000a8da:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8f1:	e8 8a b5 01 00       	call   c0025e80 <__muldf3>
c000a8f6:	59                   	pop    ecx
c000a8f7:	5b                   	pop    ebx
c000a8f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a8fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a900:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a904:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a908:	e8 46 be 01 00       	call   c0026753 <__truncdfsf2>
c000a90d:	83 c4 10             	add    esp,0x10
c000a910:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a917:	89 03                	mov    DWORD PTR [ebx],eax
c000a919:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a91d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a921:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a925:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a929:	e8 d5 ae 01 00       	call   c0025803 <__adddf3>
c000a92e:	83 c4 10             	add    esp,0x10
c000a931:	89 04 24             	mov    DWORD PTR [esp],eax
c000a934:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a938:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a93c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a940:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a944:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a948:	e8 33 b5 01 00       	call   c0025e80 <__muldf3>
c000a94d:	5d                   	pop    ebp
c000a94e:	59                   	pop    ecx
c000a94f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a953:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a957:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95f:	e8 ef bd 01 00       	call   c0026753 <__truncdfsf2>
c000a964:	83 c4 10             	add    esp,0x10
c000a967:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a96e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a971:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a975:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a979:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a97d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a981:	e8 7d ae 01 00       	call   c0025803 <__adddf3>
c000a986:	83 c4 10             	add    esp,0x10
c000a989:	89 04 24             	mov    DWORD PTR [esp],eax
c000a98c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a990:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a994:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a998:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a99c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a0:	e8 db b4 01 00       	call   c0025e80 <__muldf3>
c000a9a5:	5b                   	pop    ebx
c000a9a6:	5d                   	pop    ebp
c000a9a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b7:	e8 97 bd 01 00       	call   c0026753 <__truncdfsf2>
c000a9bc:	83 c4 10             	add    esp,0x10
c000a9bf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9c6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000a9c9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9cd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9d9:	e8 25 ae 01 00       	call   c0025803 <__adddf3>
c000a9de:	83 c4 10             	add    esp,0x10
c000a9e1:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9e4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f8:	e8 83 b4 01 00       	call   c0025e80 <__muldf3>
c000a9fd:	59                   	pop    ecx
c000a9fe:	5b                   	pop    ebx
c000a9ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0f:	e8 3f bd 01 00       	call   c0026753 <__truncdfsf2>
c000aa14:	83 c4 10             	add    esp,0x10
c000aa17:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa1e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa21:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa25:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa31:	e8 cd ad 01 00       	call   c0025803 <__adddf3>
c000aa36:	83 c4 10             	add    esp,0x10
c000aa39:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa50:	e8 2b b4 01 00       	call   c0025e80 <__muldf3>
c000aa55:	5d                   	pop    ebp
c000aa56:	59                   	pop    ecx
c000aa57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa67:	e8 e7 bc 01 00       	call   c0026753 <__truncdfsf2>
c000aa6c:	83 c4 10             	add    esp,0x10
c000aa6f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa76:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aa79:	57                   	push   edi
c000aa7a:	56                   	push   esi
c000aa7b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa7f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa83:	e8 7b ad 01 00       	call   c0025803 <__adddf3>
c000aa88:	83 c4 10             	add    esp,0x10
c000aa8b:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa8e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa92:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa96:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaa2:	e8 d9 b3 01 00       	call   c0025e80 <__muldf3>
c000aaa7:	5b                   	pop    ebx
c000aaa8:	5e                   	pop    esi
c000aaa9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aaad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aab1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab9:	e8 95 bc 01 00       	call   c0026753 <__truncdfsf2>
c000aabe:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aac5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aac8:	81 c4 9c 00 00 00    	add    esp,0x9c
c000aace:	5b                   	pop    ebx
c000aacf:	5e                   	pop    esi
c000aad0:	5f                   	pop    edi
c000aad1:	5d                   	pop    ebp
c000aad2:	c3                   	ret    

c000aad3 <sinc_reset>:
c000aad3:	56                   	push   esi
c000aad4:	53                   	push   ebx
c000aad5:	51                   	push   ecx
c000aad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aada:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000aadd:	85 db                	test   ebx,ebx
c000aadf:	74 59                	je     c000ab3a <sinc_reset+0x67>
c000aae1:	31 d2                	xor    edx,edx
c000aae3:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000aaea:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000aaed:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000aaf0:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000aaf7:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000aafe:	31 c0                	xor    eax,eax
c000ab00:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab06:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab09:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab0c:	52                   	push   edx
c000ab0d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab10:	c1 e0 02             	shl    eax,0x2
c000ab13:	50                   	push   eax
c000ab14:	6a 00                	push   0x0
c000ab16:	56                   	push   esi
c000ab17:	e8 6f 5b ff ff       	call   c000068b <memset>
c000ab1c:	83 c4 0c             	add    esp,0xc
c000ab1f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab22:	c1 e0 02             	shl    eax,0x2
c000ab25:	50                   	push   eax
c000ab26:	68 aa 00 00 00       	push   0xaa
c000ab2b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab2e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab31:	50                   	push   eax
c000ab32:	e8 54 5b ff ff       	call   c000068b <memset>
c000ab37:	83 c4 10             	add    esp,0x10
c000ab3a:	58                   	pop    eax
c000ab3b:	5b                   	pop    ebx
c000ab3c:	5e                   	pop    esi
c000ab3d:	c3                   	ret    

c000ab3e <calc_output_multi>:
c000ab3e:	55                   	push   ebp
c000ab3f:	57                   	push   edi
c000ab40:	56                   	push   esi
c000ab41:	89 c6                	mov    esi,eax
c000ab43:	53                   	push   ebx
c000ab44:	83 ec 4c             	sub    esp,0x4c
c000ab47:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab4b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab4f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab53:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab57:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab63:	8d 46 44             	lea    eax,[esi+0x44]
c000ab66:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab69:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ab6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ab73:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ab76:	e8 0f eb ff ff       	call   c000968a <int_to_fp>
c000ab7b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ab7e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ab82:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ab86:	99                   	cdq    
c000ab87:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ab8b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ab8f:	0f af d0             	imul   edx,eax
c000ab92:	0f af c3             	imul   eax,ebx
c000ab95:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ab99:	29 c1                	sub    ecx,eax
c000ab9b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ab9f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000aba3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000abaa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000abae:	57                   	push   edi
c000abaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000abb3:	6a 00                	push   0x0
c000abb5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb9:	e8 cd 5a ff ff       	call   c000068b <memset>
c000abbe:	83 c4 10             	add    esp,0x10
c000abc1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abc5:	89 df                	mov    edi,ebx
c000abc7:	e8 cc ea ff ff       	call   c0009698 <fp_to_double>
c000abcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000abd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000abd4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abd8:	e8 b1 ea ff ff       	call   c000968e <fp_to_int>
c000abdd:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000abe0:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000abe3:	51                   	push   ecx
c000abe4:	51                   	push   ecx
c000abe5:	55                   	push   ebp
c000abe6:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000abea:	e8 a9 a5 01 00       	call   c0025198 <__subsf3>
c000abef:	89 04 24             	mov    DWORD PTR [esp],eax
c000abf2:	e8 80 bc 01 00       	call   c0026877 <__extendsfdf2>
c000abf7:	83 c4 10             	add    esp,0x10
c000abfa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000abfe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac0a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac0e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac12:	e8 69 b2 01 00       	call   c0025e80 <__muldf3>
c000ac17:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac1a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac1e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac22:	e8 50 bc 01 00       	call   c0026877 <__extendsfdf2>
c000ac27:	83 c4 10             	add    esp,0x10
c000ac2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac32:	52                   	push   edx
c000ac33:	50                   	push   eax
c000ac34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac3c:	e8 c2 ab 01 00       	call   c0025803 <__adddf3>
c000ac41:	83 c4 10             	add    esp,0x10
c000ac44:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac48:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac4c:	89 f8                	mov    eax,edi
c000ac4e:	b9 08 00 00 00       	mov    ecx,0x8
c000ac53:	99                   	cdq    
c000ac54:	f7 f9                	idiv   ecx
c000ac56:	4a                   	dec    edx
c000ac57:	83 fa 06             	cmp    edx,0x6
c000ac5a:	77 07                	ja     c000ac63 <calc_output_multi+0x125>
c000ac5c:	ff 24 95 44 80 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7fbc]
c000ac63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac66:	4f                   	dec    edi
c000ac67:	83 ec 0c             	sub    esp,0xc
c000ac6a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ac6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac71:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ac78:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ac7c:	e8 f6 bb 01 00       	call   c0026877 <__extendsfdf2>
c000ac81:	83 c4 10             	add    esp,0x10
c000ac84:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac88:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac9c:	e8 df b1 01 00       	call   c0025e80 <__muldf3>
c000aca1:	83 c4 10             	add    esp,0x10
c000aca4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aca8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acac:	52                   	push   edx
c000acad:	50                   	push   eax
c000acae:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000acb1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000acb4:	e8 4a ab 01 00       	call   c0025803 <__adddf3>
c000acb9:	83 c4 10             	add    esp,0x10
c000acbc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acbf:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000acc2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acc5:	4f                   	dec    edi
c000acc6:	83 ec 0c             	sub    esp,0xc
c000acc9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000accc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acd0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acd7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000acdb:	e8 97 bb 01 00       	call   c0026877 <__extendsfdf2>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ace7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acf3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acf7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acfb:	e8 80 b1 01 00       	call   c0025e80 <__muldf3>
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad07:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad0b:	52                   	push   edx
c000ad0c:	50                   	push   eax
c000ad0d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad10:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad13:	e8 eb aa 01 00       	call   c0025803 <__adddf3>
c000ad18:	83 c4 10             	add    esp,0x10
c000ad1b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad1e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad21:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad24:	4f                   	dec    edi
c000ad25:	83 ec 0c             	sub    esp,0xc
c000ad28:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad2f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad36:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad3a:	e8 38 bb 01 00       	call   c0026877 <__extendsfdf2>
c000ad3f:	83 c4 10             	add    esp,0x10
c000ad42:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad46:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad52:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad56:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad5a:	e8 21 b1 01 00       	call   c0025e80 <__muldf3>
c000ad5f:	83 c4 10             	add    esp,0x10
c000ad62:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad66:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad6a:	52                   	push   edx
c000ad6b:	50                   	push   eax
c000ad6c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad6f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad72:	e8 8c aa 01 00       	call   c0025803 <__adddf3>
c000ad77:	83 c4 10             	add    esp,0x10
c000ad7a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad7d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad80:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad83:	4f                   	dec    edi
c000ad84:	83 ec 0c             	sub    esp,0xc
c000ad87:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad8e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad95:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad99:	e8 d9 ba 01 00       	call   c0026877 <__extendsfdf2>
c000ad9e:	83 c4 10             	add    esp,0x10
c000ada1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ada5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ada9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adb1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adb5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adb9:	e8 c2 b0 01 00       	call   c0025e80 <__muldf3>
c000adbe:	83 c4 10             	add    esp,0x10
c000adc1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adc5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adc9:	52                   	push   edx
c000adca:	50                   	push   eax
c000adcb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adce:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000add1:	e8 2d aa 01 00       	call   c0025803 <__adddf3>
c000add6:	83 c4 10             	add    esp,0x10
c000add9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000addc:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000addf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ade2:	4f                   	dec    edi
c000ade3:	83 ec 0c             	sub    esp,0xc
c000ade6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ade9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aded:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adf4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000adf8:	e8 7a ba 01 00       	call   c0026877 <__extendsfdf2>
c000adfd:	83 c4 10             	add    esp,0x10
c000ae00:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae04:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae10:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae18:	e8 63 b0 01 00       	call   c0025e80 <__muldf3>
c000ae1d:	83 c4 10             	add    esp,0x10
c000ae20:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae24:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae28:	52                   	push   edx
c000ae29:	50                   	push   eax
c000ae2a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae2d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae30:	e8 ce a9 01 00       	call   c0025803 <__adddf3>
c000ae35:	83 c4 10             	add    esp,0x10
c000ae38:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae3b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae3e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae41:	4f                   	dec    edi
c000ae42:	83 ec 0c             	sub    esp,0xc
c000ae45:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae4c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae53:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae57:	e8 1b ba 01 00       	call   c0026877 <__extendsfdf2>
c000ae5c:	83 c4 10             	add    esp,0x10
c000ae5f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae63:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae73:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae77:	e8 04 b0 01 00       	call   c0025e80 <__muldf3>
c000ae7c:	83 c4 10             	add    esp,0x10
c000ae7f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae83:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae87:	52                   	push   edx
c000ae88:	50                   	push   eax
c000ae89:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae8c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae8f:	e8 6f a9 01 00       	call   c0025803 <__adddf3>
c000ae94:	83 c4 10             	add    esp,0x10
c000ae97:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae9a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae9d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aea0:	4f                   	dec    edi
c000aea1:	83 ec 0c             	sub    esp,0xc
c000aea4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aea7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aeab:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeb2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aeb6:	e8 bc b9 01 00       	call   c0026877 <__extendsfdf2>
c000aebb:	83 c4 10             	add    esp,0x10
c000aebe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aec2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aece:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed6:	e8 a5 af 01 00       	call   c0025e80 <__muldf3>
c000aedb:	83 c4 10             	add    esp,0x10
c000aede:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aee2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aee6:	52                   	push   edx
c000aee7:	50                   	push   eax
c000aee8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aeeb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeee:	e8 10 a9 01 00       	call   c0025803 <__adddf3>
c000aef3:	83 c4 10             	add    esp,0x10
c000aef6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aef9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aefc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeff:	4f                   	dec    edi
c000af00:	83 ec 0c             	sub    esp,0xc
c000af03:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af0a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af11:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af15:	e8 5d b9 01 00       	call   c0026877 <__extendsfdf2>
c000af1a:	83 c4 10             	add    esp,0x10
c000af1d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af21:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af2d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af31:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af35:	e8 46 af 01 00       	call   c0025e80 <__muldf3>
c000af3a:	83 c4 10             	add    esp,0x10
c000af3d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af41:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af45:	52                   	push   edx
c000af46:	50                   	push   eax
c000af47:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af4a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af4d:	e8 b1 a8 01 00       	call   c0025803 <__adddf3>
c000af52:	83 c4 10             	add    esp,0x10
c000af55:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af58:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af5b:	85 ff                	test   edi,edi
c000af5d:	0f 8f e9 fc ff ff    	jg     c000ac4c <calc_output_multi+0x10e>
c000af63:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000af67:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000af6b:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000af6f:	0f 89 4c fc ff ff    	jns    c000abc1 <calc_output_multi+0x83>
c000af75:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000af79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000af7d:	29 c8                	sub    eax,ecx
c000af7f:	99                   	cdq    
c000af80:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000af84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000af88:	0f af d0             	imul   edx,eax
c000af8b:	40                   	inc    eax
c000af8c:	01 d1                	add    ecx,edx
c000af8e:	0f af c3             	imul   eax,ebx
c000af91:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000af95:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000af98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af9c:	55                   	push   ebp
c000af9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afa1:	6a 00                	push   0x0
c000afa3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afa7:	e8 df 56 ff ff       	call   c000068b <memset>
c000afac:	83 c4 10             	add    esp,0x10
c000afaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afb3:	e8 e0 e6 ff ff       	call   c0009698 <fp_to_double>
c000afb8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afbc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000afc0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afc4:	e8 c5 e6 ff ff       	call   c000968e <fp_to_int>
c000afc9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000afcc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000afcf:	57                   	push   edi
c000afd0:	57                   	push   edi
c000afd1:	89 df                	mov    edi,ebx
c000afd3:	55                   	push   ebp
c000afd4:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000afd8:	e8 bb a1 01 00       	call   c0025198 <__subsf3>
c000afdd:	89 04 24             	mov    DWORD PTR [esp],eax
c000afe0:	e8 92 b8 01 00       	call   c0026877 <__extendsfdf2>
c000afe5:	83 c4 10             	add    esp,0x10
c000afe8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000afec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000aff0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000affc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b000:	e8 7b ae 01 00       	call   c0025e80 <__muldf3>
c000b005:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b008:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b00c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b010:	e8 62 b8 01 00       	call   c0026877 <__extendsfdf2>
c000b015:	83 c4 10             	add    esp,0x10
c000b018:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b01c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b020:	52                   	push   edx
c000b021:	50                   	push   eax
c000b022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b02a:	e8 d4 a7 01 00       	call   c0025803 <__adddf3>
c000b02f:	83 c4 10             	add    esp,0x10
c000b032:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b036:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b03a:	89 f8                	mov    eax,edi
c000b03c:	b9 08 00 00 00       	mov    ecx,0x8
c000b041:	99                   	cdq    
c000b042:	f7 f9                	idiv   ecx
c000b044:	4a                   	dec    edx
c000b045:	83 fa 06             	cmp    edx,0x6
c000b048:	77 07                	ja     c000b051 <calc_output_multi+0x513>
c000b04a:	ff 24 95 60 80 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7fa0]
c000b051:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b055:	4f                   	dec    edi
c000b056:	83 ec 0c             	sub    esp,0xc
c000b059:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b060:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b067:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06b:	e8 07 b8 01 00       	call   c0026877 <__extendsfdf2>
c000b070:	83 c4 10             	add    esp,0x10
c000b073:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b077:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b07b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b07f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b083:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b087:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b08b:	e8 f0 ad 01 00       	call   c0025e80 <__muldf3>
c000b090:	83 c4 10             	add    esp,0x10
c000b093:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b097:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b09b:	52                   	push   edx
c000b09c:	50                   	push   eax
c000b09d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a3:	e8 5b a7 01 00       	call   c0025803 <__adddf3>
c000b0a8:	83 c4 10             	add    esp,0x10
c000b0ab:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ae:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0b5:	4f                   	dec    edi
c000b0b6:	83 ec 0c             	sub    esp,0xc
c000b0b9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cb:	e8 a7 b7 01 00       	call   c0026877 <__extendsfdf2>
c000b0d0:	83 c4 10             	add    esp,0x10
c000b0d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0eb:	e8 90 ad 01 00       	call   c0025e80 <__muldf3>
c000b0f0:	83 c4 10             	add    esp,0x10
c000b0f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0fb:	52                   	push   edx
c000b0fc:	50                   	push   eax
c000b0fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b100:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b103:	e8 fb a6 01 00       	call   c0025803 <__adddf3>
c000b108:	83 c4 10             	add    esp,0x10
c000b10b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b111:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 47 b7 01 00       	call   c0026877 <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b137:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b147:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b14b:	e8 30 ad 01 00       	call   c0025e80 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b157:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 9b a6 01 00       	call   c0025803 <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b175:	4f                   	dec    edi
c000b176:	83 ec 0c             	sub    esp,0xc
c000b179:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b17c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b180:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b187:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b18b:	e8 e7 b6 01 00       	call   c0026877 <__extendsfdf2>
c000b190:	83 c4 10             	add    esp,0x10
c000b193:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b197:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b19b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1ab:	e8 d0 ac 01 00       	call   c0025e80 <__muldf3>
c000b1b0:	83 c4 10             	add    esp,0x10
c000b1b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1bb:	52                   	push   edx
c000b1bc:	50                   	push   eax
c000b1bd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1c0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1c3:	e8 3b a6 01 00       	call   c0025803 <__adddf3>
c000b1c8:	83 c4 10             	add    esp,0x10
c000b1cb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1ce:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1d5:	4f                   	dec    edi
c000b1d6:	83 ec 0c             	sub    esp,0xc
c000b1d9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1e0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1e7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1eb:	e8 87 b6 01 00       	call   c0026877 <__extendsfdf2>
c000b1f0:	83 c4 10             	add    esp,0x10
c000b1f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b203:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b207:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b20b:	e8 70 ac 01 00       	call   c0025e80 <__muldf3>
c000b210:	83 c4 10             	add    esp,0x10
c000b213:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b217:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b21b:	52                   	push   edx
c000b21c:	50                   	push   eax
c000b21d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b220:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b223:	e8 db a5 01 00       	call   c0025803 <__adddf3>
c000b228:	83 c4 10             	add    esp,0x10
c000b22b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b22e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b231:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b235:	4f                   	dec    edi
c000b236:	83 ec 0c             	sub    esp,0xc
c000b239:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b23c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b240:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b247:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b24b:	e8 27 b6 01 00       	call   c0026877 <__extendsfdf2>
c000b250:	83 c4 10             	add    esp,0x10
c000b253:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b257:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b25b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b25f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b263:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b267:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b26b:	e8 10 ac 01 00       	call   c0025e80 <__muldf3>
c000b270:	83 c4 10             	add    esp,0x10
c000b273:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b277:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b27b:	52                   	push   edx
c000b27c:	50                   	push   eax
c000b27d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b280:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b283:	e8 7b a5 01 00       	call   c0025803 <__adddf3>
c000b288:	83 c4 10             	add    esp,0x10
c000b28b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b28e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b291:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b295:	4f                   	dec    edi
c000b296:	83 ec 0c             	sub    esp,0xc
c000b299:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b29c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2a0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2a7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2ab:	e8 c7 b5 01 00       	call   c0026877 <__extendsfdf2>
c000b2b0:	83 c4 10             	add    esp,0x10
c000b2b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2cb:	e8 b0 ab 01 00       	call   c0025e80 <__muldf3>
c000b2d0:	83 c4 10             	add    esp,0x10
c000b2d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2db:	52                   	push   edx
c000b2dc:	50                   	push   eax
c000b2dd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2e0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2e3:	e8 1b a5 01 00       	call   c0025803 <__adddf3>
c000b2e8:	83 c4 10             	add    esp,0x10
c000b2eb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2ee:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2f5:	4f                   	dec    edi
c000b2f6:	83 ec 0c             	sub    esp,0xc
c000b2f9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b300:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b307:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b30b:	e8 67 b5 01 00       	call   c0026877 <__extendsfdf2>
c000b310:	83 c4 10             	add    esp,0x10
c000b313:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b317:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b31b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b31f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b323:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b327:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b32b:	e8 50 ab 01 00       	call   c0025e80 <__muldf3>
c000b330:	83 c4 10             	add    esp,0x10
c000b333:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b337:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b33b:	52                   	push   edx
c000b33c:	50                   	push   eax
c000b33d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b340:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b343:	e8 bb a4 01 00       	call   c0025803 <__adddf3>
c000b348:	83 c4 10             	add    esp,0x10
c000b34b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b34e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b351:	85 ff                	test   edi,edi
c000b353:	0f 8f e1 fc ff ff    	jg     c000b03a <calc_output_multi+0x4fc>
c000b359:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b35d:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b361:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b365:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b36a:	0f 8f 3f fc ff ff    	jg     c000afaf <calc_output_multi+0x471>
c000b370:	be 08 00 00 00       	mov    esi,0x8
c000b375:	89 d8                	mov    eax,ebx
c000b377:	99                   	cdq    
c000b378:	f7 fe                	idiv   esi
c000b37a:	4a                   	dec    edx
c000b37b:	83 fa 06             	cmp    edx,0x6
c000b37e:	77 07                	ja     c000b387 <calc_output_multi+0x849>
c000b380:	ff 24 95 7c 80 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7f84]
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4b                   	dec    ebx
c000b38c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b390:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b393:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b397:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b39b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b39e:	e8 60 a4 01 00       	call   c0025803 <__adddf3>
c000b3a3:	83 c4 10             	add    esp,0x10
c000b3a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3be:	e8 bd aa 01 00       	call   c0025e80 <__muldf3>
c000b3c3:	5d                   	pop    ebp
c000b3c4:	59                   	pop    ecx
c000b3c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b3c9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b3cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d5:	e8 79 b3 01 00       	call   c0026753 <__truncdfsf2>
c000b3da:	83 c4 10             	add    esp,0x10
c000b3dd:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b3e1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b3e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3e8:	4b                   	dec    ebx
c000b3e9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3ed:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3f4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3f8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3fb:	e8 03 a4 01 00       	call   c0025803 <__adddf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b407:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b40f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b41b:	e8 60 aa 01 00       	call   c0025e80 <__muldf3>
c000b420:	59                   	pop    ecx
c000b421:	5f                   	pop    edi
c000b422:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b42a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b432:	e8 1c b3 01 00       	call   c0026753 <__truncdfsf2>
c000b437:	83 c4 10             	add    esp,0x10
c000b43a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b43e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b441:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b445:	4b                   	dec    ebx
c000b446:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b44a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b44d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b451:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b455:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b458:	e8 a6 a3 01 00       	call   c0025803 <__adddf3>
c000b45d:	83 c4 10             	add    esp,0x10
c000b460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b46c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b478:	e8 03 aa 01 00       	call   c0025e80 <__muldf3>
c000b47d:	5f                   	pop    edi
c000b47e:	5d                   	pop    ebp
c000b47f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b483:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48f:	e8 bf b2 01 00       	call   c0026753 <__truncdfsf2>
c000b494:	83 c4 10             	add    esp,0x10
c000b497:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b49b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b49e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a2:	4b                   	dec    ebx
c000b4a3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4a7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4ae:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4b2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4b5:	e8 49 a3 01 00       	call   c0025803 <__adddf3>
c000b4ba:	83 c4 10             	add    esp,0x10
c000b4bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	e8 a6 a9 01 00       	call   c0025e80 <__muldf3>
c000b4da:	5d                   	pop    ebp
c000b4db:	59                   	pop    ecx
c000b4dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4e0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4ec:	e8 62 b2 01 00       	call   c0026753 <__truncdfsf2>
c000b4f1:	83 c4 10             	add    esp,0x10
c000b4f4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4f8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ff:	4b                   	dec    ebx
c000b500:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b504:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b50b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b50f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b512:	e8 ec a2 01 00       	call   c0025803 <__adddf3>
c000b517:	83 c4 10             	add    esp,0x10
c000b51a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b51e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b52a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b532:	e8 49 a9 01 00       	call   c0025e80 <__muldf3>
c000b537:	59                   	pop    ecx
c000b538:	5f                   	pop    edi
c000b539:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b53d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b541:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b549:	e8 05 b2 01 00       	call   c0026753 <__truncdfsf2>
c000b54e:	83 c4 10             	add    esp,0x10
c000b551:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b555:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b55c:	4b                   	dec    ebx
c000b55d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b561:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b564:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b568:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b56c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b56f:	e8 8f a2 01 00       	call   c0025803 <__adddf3>
c000b574:	83 c4 10             	add    esp,0x10
c000b577:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b57b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b57f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b587:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58f:	e8 ec a8 01 00       	call   c0025e80 <__muldf3>
c000b594:	5f                   	pop    edi
c000b595:	5d                   	pop    ebp
c000b596:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b59a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a6:	e8 a8 b1 01 00       	call   c0026753 <__truncdfsf2>
c000b5ab:	83 c4 10             	add    esp,0x10
c000b5ae:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5b2:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5b9:	4b                   	dec    ebx
c000b5ba:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5be:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5c5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5c9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5cc:	e8 32 a2 01 00       	call   c0025803 <__adddf3>
c000b5d1:	83 c4 10             	add    esp,0x10
c000b5d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ec:	e8 8f a8 01 00       	call   c0025e80 <__muldf3>
c000b5f1:	5d                   	pop    ebp
c000b5f2:	59                   	pop    ecx
c000b5f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b603:	e8 4b b1 01 00       	call   c0026753 <__truncdfsf2>
c000b608:	83 c4 10             	add    esp,0x10
c000b60b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b60f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b616:	4b                   	dec    ebx
c000b617:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b61b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b61e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b622:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b626:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b629:	e8 d5 a1 01 00       	call   c0025803 <__adddf3>
c000b62e:	83 c4 10             	add    esp,0x10
c000b631:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b635:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b641:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b649:	e8 32 a8 01 00       	call   c0025e80 <__muldf3>
c000b64e:	59                   	pop    ecx
c000b64f:	5f                   	pop    edi
c000b650:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b654:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b658:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b65c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b660:	e8 ee b0 01 00       	call   c0026753 <__truncdfsf2>
c000b665:	83 c4 10             	add    esp,0x10
c000b668:	85 db                	test   ebx,ebx
c000b66a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b66e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b671:	0f 8f fe fc ff ff    	jg     c000b375 <calc_output_multi+0x837>
c000b677:	83 c4 4c             	add    esp,0x4c
c000b67a:	5b                   	pop    ebx
c000b67b:	5e                   	pop    esi
c000b67c:	5f                   	pop    edi
c000b67d:	5d                   	pop    ebp
c000b67e:	c3                   	ret    

c000b67f <double_to_fp>:
c000b67f:	83 ec 0c             	sub    esp,0xc
c000b682:	68 00 00 b0 40       	push   0x40b00000
c000b687:	6a 00                	push   0x0
c000b689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b68d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b691:	e8 ea a7 01 00       	call   c0025e80 <__muldf3>
c000b696:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b69a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b69e:	83 c4 1c             	add    esp,0x1c
c000b6a1:	e9 5a b2 01 00       	jmp    c0026900 <lrint>

c000b6a6 <prepare_data>:
c000b6a6:	55                   	push   ebp
c000b6a7:	57                   	push   edi
c000b6a8:	56                   	push   esi
c000b6a9:	53                   	push   ebx
c000b6aa:	83 ec 1c             	sub    esp,0x1c
c000b6ad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b6b1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b6b5:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b6b9:	0f 89 57 01 00 00    	jns    c000b816 <prepare_data+0x170>
c000b6bf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b6c2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6c5:	85 d2                	test   edx,edx
c000b6c7:	75 0d                	jne    c000b6d6 <prepare_data+0x30>
c000b6c9:	8d 14 36             	lea    edx,[esi+esi*1]
c000b6cc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b6cf:	29 d0                	sub    eax,edx
c000b6d1:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b6d4:	eb 44                	jmp    c000b71a <prepare_data+0x74>
c000b6d6:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b6d9:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b6dc:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b6df:	39 c1                	cmp    ecx,eax
c000b6e1:	7d 04                	jge    c000b6e7 <prepare_data+0x41>
c000b6e3:	29 d0                	sub    eax,edx
c000b6e5:	eb 2d                	jmp    c000b714 <prepare_data+0x6e>
c000b6e7:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b6ed:	29 d7                	sub    edi,edx
c000b6ef:	01 f7                	add    edi,esi
c000b6f1:	51                   	push   ecx
c000b6f2:	29 f2                	sub    edx,esi
c000b6f4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b6fb:	8d 14 90             	lea    edx,[eax+edx*4]
c000b6fe:	51                   	push   ecx
c000b6ff:	52                   	push   edx
c000b700:	50                   	push   eax
c000b701:	e8 17 4f ff ff       	call   c000061d <memmove>
c000b706:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b709:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b70c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b70f:	29 f0                	sub    eax,esi
c000b711:	83 c4 10             	add    esp,0x10
c000b714:	29 f0                	sub    eax,esi
c000b716:	79 02                	jns    c000b71a <prepare_data+0x74>
c000b718:	31 c0                	xor    eax,eax
c000b71a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b71d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b720:	29 ef                	sub    edi,ebp
c000b722:	39 c7                	cmp    edi,eax
c000b724:	7e 02                	jle    c000b728 <prepare_data+0x82>
c000b726:	89 c7                	mov    edi,eax
c000b728:	89 f8                	mov    eax,edi
c000b72a:	99                   	cdq    
c000b72b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b72e:	b8 15 00 00 00       	mov    eax,0x15
c000b733:	29 d7                	sub    edi,edx
c000b735:	0f 88 dd 00 00 00    	js     c000b818 <prepare_data+0x172>
c000b73b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b73e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b741:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b744:	0f 8f ce 00 00 00    	jg     c000b818 <prepare_data+0x172>
c000b74a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b750:	50                   	push   eax
c000b751:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b758:	50                   	push   eax
c000b759:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b75d:	8b 00                	mov    eax,DWORD PTR [eax]
c000b75f:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b762:	50                   	push   eax
c000b763:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b766:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b76a:	50                   	push   eax
c000b76b:	e8 e5 4e ff ff       	call   c0000655 <memcpy>
c000b770:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b773:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b776:	01 fd                	add    ebp,edi
c000b778:	01 f9                	add    ecx,edi
c000b77a:	83 c4 10             	add    esp,0x10
c000b77d:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b780:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b783:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b786:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b78a:	0f 85 86 00 00 00    	jne    c000b816 <prepare_data+0x170>
c000b790:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b793:	89 e8                	mov    eax,ebp
c000b795:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b798:	29 c8                	sub    eax,ecx
c000b79a:	39 f8                	cmp    eax,edi
c000b79c:	7d 78                	jge    c000b816 <prepare_data+0x170>
c000b79e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7a2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b7a6:	74 6e                	je     c000b816 <prepare_data+0x170>
c000b7a8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b7ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b7af:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b7b2:	29 ef                	sub    edi,ebp
c000b7b4:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b7b8:	7c 29                	jl     c000b7e3 <prepare_data+0x13d>
c000b7ba:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7bd:	29 f1                	sub    ecx,esi
c000b7bf:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b7c6:	55                   	push   ebp
c000b7c7:	50                   	push   eax
c000b7c8:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b7cb:	50                   	push   eax
c000b7cc:	52                   	push   edx
c000b7cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b7d1:	e8 47 4e ff ff       	call   c000061d <memmove>
c000b7d6:	83 c4 10             	add    esp,0x10
c000b7d9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7dc:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b7df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7e3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b7e6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b7e9:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b7ec:	83 c6 05             	add    esi,0x5
c000b7ef:	78 07                	js     c000b7f8 <prepare_data+0x152>
c000b7f1:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7f4:	39 cf                	cmp    edi,ecx
c000b7f6:	7e 04                	jle    c000b7fc <prepare_data+0x156>
c000b7f8:	89 ce                	mov    esi,ecx
c000b7fa:	29 c6                	sub    esi,eax
c000b7fc:	8d 04 82             	lea    eax,[edx+eax*4]
c000b7ff:	51                   	push   ecx
c000b800:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b807:	51                   	push   ecx
c000b808:	6a 00                	push   0x0
c000b80a:	50                   	push   eax
c000b80b:	e8 7b 4e ff ff       	call   c000068b <memset>
c000b810:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b813:	83 c4 10             	add    esp,0x10
c000b816:	31 c0                	xor    eax,eax
c000b818:	83 c4 1c             	add    esp,0x1c
c000b81b:	5b                   	pop    ebx
c000b81c:	5e                   	pop    esi
c000b81d:	5f                   	pop    edi
c000b81e:	5d                   	pop    ebp
c000b81f:	c3                   	ret    

c000b820 <sinc_multichan_vari_process>:
c000b820:	55                   	push   ebp
c000b821:	ba 05 00 00 00       	mov    edx,0x5
c000b826:	57                   	push   edi
c000b827:	56                   	push   esi
c000b828:	53                   	push   ebx
c000b829:	83 ec 4c             	sub    esp,0x4c
c000b82c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b830:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000b834:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b837:	85 db                	test   ebx,ebx
c000b839:	0f 84 9b 06 00 00    	je     c000beda <sinc_multichan_vari_process+0x6ba>
c000b83f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b842:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b845:	0f af c5             	imul   eax,ebp
c000b848:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000b84b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b84e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b855:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b85c:	0f af c5             	imul   eax,ebp
c000b85f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b862:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b865:	8b 06                	mov    eax,DWORD PTR [esi]
c000b867:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86f:	68 00 00 70 3f       	push   0x3f700000
c000b874:	6a 00                	push   0x0
c000b876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87e:	e8 cc ae 01 00       	call   c002674f <__ltdf2>
c000b883:	83 c4 10             	add    esp,0x10
c000b886:	ba 16 00 00 00       	mov    edx,0x16
c000b88b:	85 c0                	test   eax,eax
c000b88d:	0f 88 47 06 00 00    	js     c000beda <sinc_multichan_vari_process+0x6ba>
c000b893:	68 00 00 70 40       	push   0x40700000
c000b898:	6a 00                	push   0x0
c000b89a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b89e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a2:	e8 8a ae 01 00       	call   c0026731 <__gtdf2>
c000b8a7:	83 c4 10             	add    esp,0x10
c000b8aa:	ba 16 00 00 00       	mov    edx,0x16
c000b8af:	85 c0                	test   eax,eax
c000b8b1:	0f 8f 23 06 00 00    	jg     c000beda <sinc_multichan_vari_process+0x6ba>
c000b8b7:	83 ec 0c             	sub    esp,0xc
c000b8ba:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b8bd:	e8 21 ac 01 00       	call   c00264e3 <__floatsidf>
c000b8c2:	83 c4 10             	add    esp,0x10
c000b8c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8cd:	68 00 00 00 40       	push   0x40000000
c000b8d2:	6a 00                	push   0x0
c000b8d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8dc:	e8 22 9f 01 00       	call   c0025803 <__adddf3>
c000b8e1:	59                   	pop    ecx
c000b8e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8e6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b8ea:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b8ed:	e8 f1 ab 01 00       	call   c00264e3 <__floatsidf>
c000b8f2:	83 c4 10             	add    esp,0x10
c000b8f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b8f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b8fd:	52                   	push   edx
c000b8fe:	50                   	push   eax
c000b8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b907:	e8 58 a8 01 00       	call   c0026164 <__divdf3>
c000b90c:	83 c4 10             	add    esp,0x10
c000b90f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b913:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b917:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000b91a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000b91d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b921:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b925:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b929:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b92d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b931:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b935:	e8 f7 ad 01 00       	call   c0026731 <__gtdf2>
c000b93a:	83 c4 10             	add    esp,0x10
c000b93d:	85 c0                	test   eax,eax
c000b93f:	7e 2d                	jle    c000b96e <sinc_multichan_vari_process+0x14e>
c000b941:	68 00 00 f0 3f       	push   0x3ff00000
c000b946:	6a 00                	push   0x0
c000b948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b94c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b950:	e8 fa ad 01 00       	call   c002674f <__ltdf2>
c000b955:	83 c4 10             	add    esp,0x10
c000b958:	85 c0                	test   eax,eax
c000b95a:	79 4d                	jns    c000b9a9 <sinc_multichan_vari_process+0x189>
c000b95c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b960:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b964:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b968:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b96c:	eb 1b                	jmp    c000b989 <sinc_multichan_vari_process+0x169>
c000b96e:	68 00 00 f0 3f       	push   0x3ff00000
c000b973:	6a 00                	push   0x0
c000b975:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b979:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97d:	e8 cd ad 01 00       	call   c002674f <__ltdf2>
c000b982:	83 c4 10             	add    esp,0x10
c000b985:	85 c0                	test   eax,eax
c000b987:	79 20                	jns    c000b9a9 <sinc_multichan_vari_process+0x189>
c000b989:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b98d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b991:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b995:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b999:	e8 c6 a7 01 00       	call   c0026164 <__divdf3>
c000b99e:	83 c4 10             	add    esp,0x10
c000b9a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9a9:	50                   	push   eax
c000b9aa:	50                   	push   eax
c000b9ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9b3:	e8 48 af 01 00       	call   c0026900 <lrint>
c000b9b8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000b9bb:	40                   	inc    eax
c000b9bc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9c0:	0f af c5             	imul   eax,ebp
c000b9c3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b9c7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000b9ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b9ce:	58                   	pop    eax
c000b9cf:	5a                   	pop    edx
c000b9d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d8:	e8 23 af 01 00       	call   c0026900 <lrint>
c000b9dd:	83 ec 0c             	sub    esp,0xc
c000b9e0:	50                   	push   eax
c000b9e1:	e8 fd aa 01 00       	call   c00264e3 <__floatsidf>
c000b9e6:	83 c4 10             	add    esp,0x10
c000b9e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9f1:	52                   	push   edx
c000b9f2:	50                   	push   eax
c000b9f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9fb:	e8 54 a4 01 00       	call   c0025e54 <__subdf3>
c000ba00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba08:	83 c4 20             	add    esp,0x20
c000ba0b:	6a 00                	push   0x0
c000ba0d:	6a 00                	push   0x0
c000ba0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba17:	e8 33 ad 01 00       	call   c002674f <__ltdf2>
c000ba1c:	83 c4 10             	add    esp,0x10
c000ba1f:	85 c0                	test   eax,eax
c000ba21:	79 1f                	jns    c000ba42 <sinc_multichan_vari_process+0x222>
c000ba23:	68 00 00 f0 3f       	push   0x3ff00000
c000ba28:	6a 00                	push   0x0
c000ba2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba32:	e8 cc 9d 01 00       	call   c0025803 <__adddf3>
c000ba37:	83 c4 10             	add    esp,0x10
c000ba3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba42:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba45:	83 ec 10             	sub    esp,0x10
c000ba48:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba4c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba57:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba5b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba5f:	e8 f0 a3 01 00       	call   c0025e54 <__subdf3>
c000ba64:	83 c4 18             	add    esp,0x18
c000ba67:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ba6b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ba6f:	52                   	push   edx
c000ba70:	50                   	push   eax
c000ba71:	e8 8a ae 01 00       	call   c0026900 <lrint>
c000ba76:	0f af e8             	imul   ebp,eax
c000ba79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba7d:	01 e8                	add    eax,ebp
c000ba7f:	99                   	cdq    
c000ba80:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ba83:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ba86:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8e:	68 00 00 f0 3f       	push   0x3ff00000
c000ba93:	6a 00                	push   0x0
c000ba95:	e8 ca a6 01 00       	call   c0026164 <__divdf3>
c000ba9a:	83 c4 10             	add    esp,0x10
c000ba9d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000baa1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000baa5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000baaa:	68 23 42 92 0c       	push   0xc924223
c000baaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bab3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bab7:	e8 47 9d 01 00       	call   c0025803 <__adddf3>
c000babc:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bac0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bac4:	83 c4 20             	add    esp,0x20
c000bac7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bacf:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bad7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bada:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000badd:	7d 50                	jge    c000bb2f <sinc_multichan_vari_process+0x30f>
c000badf:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bae2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bae5:	01 c8                	add    eax,ecx
c000bae7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000baea:	99                   	cdq    
c000baeb:	f7 f9                	idiv   ecx
c000baed:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000baf1:	7d 0c                	jge    c000baff <sinc_multichan_vari_process+0x2df>
c000baf3:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000baf6:	85 ed                	test   ebp,ebp
c000baf8:	79 6b                	jns    c000bb65 <sinc_multichan_vari_process+0x345>
c000bafa:	e9 e6 00 00 00       	jmp    c000bbe5 <sinc_multichan_vari_process+0x3c5>
c000baff:	50                   	push   eax
c000bb00:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bb04:	57                   	push   edi
c000bb05:	53                   	push   ebx
c000bb06:	e8 9b fb ff ff       	call   c000b6a6 <prepare_data>
c000bb0b:	83 c4 10             	add    esp,0x10
c000bb0e:	89 c2                	mov    edx,eax
c000bb10:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb13:	85 c0                	test   eax,eax
c000bb15:	0f 85 bf 03 00 00    	jne    c000beda <sinc_multichan_vari_process+0x6ba>
c000bb1b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb1e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb21:	01 c8                	add    eax,ecx
c000bb23:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb26:	99                   	cdq    
c000bb27:	f7 f9                	idiv   ecx
c000bb29:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb2d:	7c c4                	jl     c000baf3 <sinc_multichan_vari_process+0x2d3>
c000bb2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb37:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb3a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb45:	89 06                	mov    DWORD PTR [esi],eax
c000bb47:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb4a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb4d:	99                   	cdq    
c000bb4e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb51:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bb54:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb57:	99                   	cdq    
c000bb58:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb5b:	31 d2                	xor    edx,edx
c000bb5d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bb60:	e9 75 03 00 00       	jmp    c000beda <sinc_multichan_vari_process+0x6ba>
c000bb65:	83 ec 0c             	sub    esp,0xc
c000bb68:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bb6b:	e8 73 a9 01 00       	call   c00264e3 <__floatsidf>
c000bb70:	83 c4 10             	add    esp,0x10
c000bb73:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb77:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb7b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb7f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb8b:	e8 73 9c 01 00       	call   c0025803 <__adddf3>
c000bb90:	83 c4 10             	add    esp,0x10
c000bb93:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb97:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb9f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bba3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bba7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbab:	e8 53 9c 01 00       	call   c0025803 <__adddf3>
c000bbb0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bbb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bbb7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bbbb:	e8 23 a9 01 00       	call   c00264e3 <__floatsidf>
c000bbc0:	83 c4 10             	add    esp,0x10
c000bbc3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbc7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbcb:	52                   	push   edx
c000bbcc:	50                   	push   eax
c000bbcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd5:	e8 73 ab 01 00       	call   c002674d <__gedf2>
c000bbda:	83 c4 10             	add    esp,0x10
c000bbdd:	85 c0                	test   eax,eax
c000bbdf:	0f 89 4a ff ff ff    	jns    c000bb2f <sinc_multichan_vari_process+0x30f>
c000bbe5:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bbe9:	0f 8e ed 00 00 00    	jle    c000bcdc <sinc_multichan_vari_process+0x4bc>
c000bbef:	83 ec 10             	sub    esp,0x10
c000bbf2:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bbf5:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bbf8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bbfb:	ff 36                	push   DWORD PTR [esi]
c000bbfd:	e8 52 a2 01 00       	call   c0025e54 <__subdf3>
c000bc02:	83 c4 18             	add    esp,0x18
c000bc05:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc0d:	52                   	push   edx
c000bc0e:	50                   	push   eax
c000bc0f:	e8 cc ac 01 00       	call   c00268e0 <fabs>
c000bc14:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc18:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc1c:	83 c4 10             	add    esp,0x10
c000bc1f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc24:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc31:	e8 fb aa 01 00       	call   c0026731 <__gtdf2>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	85 c0                	test   eax,eax
c000bc3b:	0f 8e 9b 00 00 00    	jle    c000bcdc <sinc_multichan_vari_process+0x4bc>
c000bc41:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc43:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc46:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc4a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc4e:	52                   	push   edx
c000bc4f:	50                   	push   eax
c000bc50:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc53:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc56:	e8 f9 a1 01 00       	call   c0025e54 <__subdf3>
c000bc5b:	59                   	pop    ecx
c000bc5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc60:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc64:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bc67:	e8 77 a8 01 00       	call   c00264e3 <__floatsidf>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc73:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc77:	52                   	push   edx
c000bc78:	50                   	push   eax
c000bc79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc81:	e8 fa a1 01 00       	call   c0025e80 <__muldf3>
c000bc86:	5d                   	pop    ebp
c000bc87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc8b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc8f:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bc92:	e8 4c a8 01 00       	call   c00264e3 <__floatsidf>
c000bc97:	83 c4 10             	add    esp,0x10
c000bc9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bca2:	52                   	push   edx
c000bca3:	50                   	push   eax
c000bca4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcac:	e8 b3 a4 01 00       	call   c0026164 <__divdf3>
c000bcb1:	83 c4 10             	add    esp,0x10
c000bcb4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcb8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bccc:	e8 32 9b 01 00       	call   c0025803 <__adddf3>
c000bcd1:	83 c4 10             	add    esp,0x10
c000bcd4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcd8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bcdc:	83 ec 0c             	sub    esp,0xc
c000bcdf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bce2:	e8 fc a7 01 00       	call   c00264e3 <__floatsidf>
c000bce7:	83 c4 10             	add    esp,0x10
c000bcea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd02:	e8 48 aa 01 00       	call   c002674f <__ltdf2>
c000bd07:	83 c4 10             	add    esp,0x10
c000bd0a:	85 c0                	test   eax,eax
c000bd0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd14:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bd18:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bd1c:	78 10                	js     c000bd2e <sinc_multichan_vari_process+0x50e>
c000bd1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd2a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd3e:	e8 3d a1 01 00       	call   c0025e80 <__muldf3>
c000bd43:	59                   	pop    ecx
c000bd44:	5d                   	pop    ebp
c000bd45:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd49:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd55:	e8 25 f9 ff ff       	call   c000b67f <double_to_fp>
c000bd5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd5e:	89 c5                	mov    ebp,eax
c000bd60:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6c:	e8 0f a1 01 00       	call   c0025e80 <__muldf3>
c000bd71:	83 c4 18             	add    esp,0x18
c000bd74:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bd78:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bd7c:	52                   	push   edx
c000bd7d:	50                   	push   eax
c000bd7e:	e8 fc f8 ff ff       	call   c000b67f <double_to_fp>
c000bd83:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bd86:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bd8a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bd8d:	8d 04 90             	lea    eax,[eax+edx*4]
c000bd90:	50                   	push   eax
c000bd91:	50                   	push   eax
c000bd92:	50                   	push   eax
c000bd93:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd96:	e8 48 a7 01 00       	call   c00264e3 <__floatsidf>
c000bd9b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bd9f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bda3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bda7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdaf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdb3:	e8 ac a3 01 00       	call   c0026164 <__divdf3>
c000bdb8:	83 c4 1c             	add    esp,0x1c
c000bdbb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bdbf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bdc3:	52                   	push   edx
c000bdc4:	89 ea                	mov    edx,ebp
c000bdc6:	50                   	push   eax
c000bdc7:	89 d8                	mov    eax,ebx
c000bdc9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bdcc:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bdd0:	e8 69 ed ff ff       	call   c000ab3e <calc_output_multi>
c000bdd5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bdd8:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bddb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bddf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bde3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bde7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bdeb:	e8 74 a3 01 00       	call   c0026164 <__divdf3>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bdf7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000bdfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be03:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be07:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be0b:	e8 f3 99 01 00       	call   c0025803 <__adddf3>
c000be10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be14:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be18:	83 c4 28             	add    esp,0x28
c000be1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be23:	e8 d8 aa 01 00       	call   c0026900 <lrint>
c000be28:	83 ec 0c             	sub    esp,0xc
c000be2b:	50                   	push   eax
c000be2c:	e8 b2 a6 01 00       	call   c00264e3 <__floatsidf>
c000be31:	83 c4 10             	add    esp,0x10
c000be34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be38:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be3c:	52                   	push   edx
c000be3d:	50                   	push   eax
c000be3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be42:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be46:	e8 09 a0 01 00       	call   c0025e54 <__subdf3>
c000be4b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be4f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be53:	83 c4 20             	add    esp,0x20
c000be56:	6a 00                	push   0x0
c000be58:	6a 00                	push   0x0
c000be5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be62:	e8 e8 a8 01 00       	call   c002674f <__ltdf2>
c000be67:	83 c4 10             	add    esp,0x10
c000be6a:	85 c0                	test   eax,eax
c000be6c:	79 20                	jns    c000be8e <sinc_multichan_vari_process+0x66e>
c000be6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7e:	e8 80 99 01 00       	call   c0025803 <__adddf3>
c000be83:	83 c4 10             	add    esp,0x10
c000be86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be8e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be91:	83 ec 10             	sub    esp,0x10
c000be94:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be98:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000be9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bea3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bea7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000beab:	e8 a4 9f 01 00       	call   c0025e54 <__subdf3>
c000beb0:	83 c4 18             	add    esp,0x18
c000beb3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bebb:	52                   	push   edx
c000bebc:	50                   	push   eax
c000bebd:	e8 3e aa 01 00       	call   c0026900 <lrint>
c000bec2:	0f af e8             	imul   ebp,eax
c000bec5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bec9:	83 c4 10             	add    esp,0x10
c000becc:	01 e8                	add    eax,ebp
c000bece:	99                   	cdq    
c000becf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bed2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bed5:	e9 fd fb ff ff       	jmp    c000bad7 <sinc_multichan_vari_process+0x2b7>
c000beda:	83 c4 4c             	add    esp,0x4c
c000bedd:	89 d0                	mov    eax,edx
c000bedf:	5b                   	pop    ebx
c000bee0:	5e                   	pop    esi
c000bee1:	5f                   	pop    edi
c000bee2:	5d                   	pop    ebp
c000bee3:	c3                   	ret    

c000bee4 <sinc_hex_vari_process>:
c000bee4:	55                   	push   ebp
c000bee5:	ba 05 00 00 00       	mov    edx,0x5
c000beea:	57                   	push   edi
c000beeb:	56                   	push   esi
c000beec:	53                   	push   ebx
c000beed:	83 ec 4c             	sub    esp,0x4c
c000bef0:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bef4:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bef8:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000befb:	85 db                	test   ebx,ebx
c000befd:	0f 84 9c 06 00 00    	je     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf03:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bf06:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bf09:	0f af c7             	imul   eax,edi
c000bf0c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bf0f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bf12:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf19:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf20:	0f af c7             	imul   eax,edi
c000bf23:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf26:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf29:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf2c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf34:	68 00 00 70 3f       	push   0x3f700000
c000bf39:	6a 00                	push   0x0
c000bf3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf43:	e8 07 a8 01 00       	call   c002674f <__ltdf2>
c000bf48:	83 c4 10             	add    esp,0x10
c000bf4b:	ba 16 00 00 00       	mov    edx,0x16
c000bf50:	85 c0                	test   eax,eax
c000bf52:	0f 88 47 06 00 00    	js     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf58:	68 00 00 70 40       	push   0x40700000
c000bf5d:	6a 00                	push   0x0
c000bf5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf67:	e8 c5 a7 01 00       	call   c0026731 <__gtdf2>
c000bf6c:	83 c4 10             	add    esp,0x10
c000bf6f:	ba 16 00 00 00       	mov    edx,0x16
c000bf74:	85 c0                	test   eax,eax
c000bf76:	0f 8f 23 06 00 00    	jg     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf7c:	83 ec 0c             	sub    esp,0xc
c000bf7f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf82:	e8 5c a5 01 00       	call   c00264e3 <__floatsidf>
c000bf87:	83 c4 10             	add    esp,0x10
c000bf8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf92:	68 00 00 00 40       	push   0x40000000
c000bf97:	6a 00                	push   0x0
c000bf99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfa1:	e8 5d 98 01 00       	call   c0025803 <__adddf3>
c000bfa6:	59                   	pop    ecx
c000bfa7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bfab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bfaf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfb2:	e8 2c a5 01 00       	call   c00264e3 <__floatsidf>
c000bfb7:	83 c4 10             	add    esp,0x10
c000bfba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfbe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfc2:	52                   	push   edx
c000bfc3:	50                   	push   eax
c000bfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfcc:	e8 93 a1 01 00       	call   c0026164 <__divdf3>
c000bfd1:	83 c4 10             	add    esp,0x10
c000bfd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfdc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bfdf:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bfe2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfe6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bfea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bffa:	e8 32 a7 01 00       	call   c0026731 <__gtdf2>
c000bfff:	83 c4 10             	add    esp,0x10
c000c002:	85 c0                	test   eax,eax
c000c004:	7e 2d                	jle    c000c033 <sinc_hex_vari_process+0x14f>
c000c006:	68 00 00 f0 3f       	push   0x3ff00000
c000c00b:	6a 00                	push   0x0
c000c00d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c011:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c015:	e8 35 a7 01 00       	call   c002674f <__ltdf2>
c000c01a:	83 c4 10             	add    esp,0x10
c000c01d:	85 c0                	test   eax,eax
c000c01f:	79 4d                	jns    c000c06e <sinc_hex_vari_process+0x18a>
c000c021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c025:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c029:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c02d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c031:	eb 1b                	jmp    c000c04e <sinc_hex_vari_process+0x16a>
c000c033:	68 00 00 f0 3f       	push   0x3ff00000
c000c038:	6a 00                	push   0x0
c000c03a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c03e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c042:	e8 08 a7 01 00       	call   c002674f <__ltdf2>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	85 c0                	test   eax,eax
c000c04c:	79 20                	jns    c000c06e <sinc_hex_vari_process+0x18a>
c000c04e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c052:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c056:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c05a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c05e:	e8 01 a1 01 00       	call   c0026164 <__divdf3>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c06a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c06e:	50                   	push   eax
c000c06f:	50                   	push   eax
c000c070:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c074:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c078:	e8 83 a8 01 00       	call   c0026900 <lrint>
c000c07d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c080:	40                   	inc    eax
c000c081:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c085:	0f af c7             	imul   eax,edi
c000c088:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c08c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c08f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c093:	58                   	pop    eax
c000c094:	5a                   	pop    edx
c000c095:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c099:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c09d:	e8 5e a8 01 00       	call   c0026900 <lrint>
c000c0a2:	83 ec 0c             	sub    esp,0xc
c000c0a5:	50                   	push   eax
c000c0a6:	e8 38 a4 01 00       	call   c00264e3 <__floatsidf>
c000c0ab:	83 c4 10             	add    esp,0x10
c000c0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0b6:	52                   	push   edx
c000c0b7:	50                   	push   eax
c000c0b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0c0:	e8 8f 9d 01 00       	call   c0025e54 <__subdf3>
c000c0c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	83 c4 20             	add    esp,0x20
c000c0d0:	6a 00                	push   0x0
c000c0d2:	6a 00                	push   0x0
c000c0d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0dc:	e8 6e a6 01 00       	call   c002674f <__ltdf2>
c000c0e1:	83 c4 10             	add    esp,0x10
c000c0e4:	85 c0                	test   eax,eax
c000c0e6:	79 1f                	jns    c000c107 <sinc_hex_vari_process+0x223>
c000c0e8:	68 00 00 f0 3f       	push   0x3ff00000
c000c0ed:	6a 00                	push   0x0
c000c0ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f7:	e8 07 97 01 00       	call   c0025803 <__adddf3>
c000c0fc:	83 c4 10             	add    esp,0x10
c000c0ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c103:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c107:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c10a:	83 ec 10             	sub    esp,0x10
c000c10d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c111:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c11c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c120:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c124:	e8 2b 9d 01 00       	call   c0025e54 <__subdf3>
c000c129:	83 c4 18             	add    esp,0x18
c000c12c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c130:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c134:	52                   	push   edx
c000c135:	50                   	push   eax
c000c136:	e8 c5 a7 01 00       	call   c0026900 <lrint>
c000c13b:	0f af f8             	imul   edi,eax
c000c13e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c142:	01 f8                	add    eax,edi
c000c144:	99                   	cdq    
c000c145:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c148:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c14b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c14f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c153:	68 00 00 f0 3f       	push   0x3ff00000
c000c158:	6a 00                	push   0x0
c000c15a:	e8 05 a0 01 00       	call   c0026164 <__divdf3>
c000c15f:	83 c4 10             	add    esp,0x10
c000c162:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c166:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c16a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c16f:	68 23 42 92 0c       	push   0xc924223
c000c174:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c178:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c17c:	e8 82 96 01 00       	call   c0025803 <__adddf3>
c000c181:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c185:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c189:	83 c4 20             	add    esp,0x20
c000c18c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c194:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c19c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c19f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c1a2:	7d 50                	jge    c000c1f4 <sinc_hex_vari_process+0x310>
c000c1a4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1a7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1aa:	01 c8                	add    eax,ecx
c000c1ac:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1af:	99                   	cdq    
c000c1b0:	f7 f9                	idiv   ecx
c000c1b2:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1b6:	7d 0c                	jge    c000c1c4 <sinc_hex_vari_process+0x2e0>
c000c1b8:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c1bb:	85 ff                	test   edi,edi
c000c1bd:	79 6c                	jns    c000c22b <sinc_hex_vari_process+0x347>
c000c1bf:	e9 e7 00 00 00       	jmp    c000c2ab <sinc_hex_vari_process+0x3c7>
c000c1c4:	50                   	push   eax
c000c1c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c1c9:	56                   	push   esi
c000c1ca:	53                   	push   ebx
c000c1cb:	e8 d6 f4 ff ff       	call   c000b6a6 <prepare_data>
c000c1d0:	83 c4 10             	add    esp,0x10
c000c1d3:	89 c2                	mov    edx,eax
c000c1d5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c1d8:	85 c0                	test   eax,eax
c000c1da:	0f 85 bf 03 00 00    	jne    c000c59f <sinc_hex_vari_process+0x6bb>
c000c1e0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1e3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1e6:	01 c8                	add    eax,ecx
c000c1e8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1eb:	99                   	cdq    
c000c1ec:	f7 f9                	idiv   ecx
c000c1ee:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1f2:	7c c4                	jl     c000c1b8 <sinc_hex_vari_process+0x2d4>
c000c1f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c1f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1fc:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c1ff:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c206:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c20a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c20d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c210:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c213:	99                   	cdq    
c000c214:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c217:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c21a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c21d:	99                   	cdq    
c000c21e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c221:	31 d2                	xor    edx,edx
c000c223:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c226:	e9 74 03 00 00       	jmp    c000c59f <sinc_hex_vari_process+0x6bb>
c000c22b:	83 ec 0c             	sub    esp,0xc
c000c22e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c231:	e8 ad a2 01 00       	call   c00264e3 <__floatsidf>
c000c236:	83 c4 10             	add    esp,0x10
c000c239:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c23d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c241:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c249:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c251:	e8 ad 95 01 00       	call   c0025803 <__adddf3>
c000c256:	83 c4 10             	add    esp,0x10
c000c259:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c25d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c261:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c265:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c269:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c271:	e8 8d 95 01 00       	call   c0025803 <__adddf3>
c000c276:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c279:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c27d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c281:	e8 5d a2 01 00       	call   c00264e3 <__floatsidf>
c000c286:	83 c4 10             	add    esp,0x10
c000c289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c291:	52                   	push   edx
c000c292:	50                   	push   eax
c000c293:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c297:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c29b:	e8 ad a4 01 00       	call   c002674d <__gedf2>
c000c2a0:	83 c4 10             	add    esp,0x10
c000c2a3:	85 c0                	test   eax,eax
c000c2a5:	0f 89 49 ff ff ff    	jns    c000c1f4 <sinc_hex_vari_process+0x310>
c000c2ab:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c2af:	0f 8e ef 00 00 00    	jle    c000c3a4 <sinc_hex_vari_process+0x4c0>
c000c2b5:	83 ec 10             	sub    esp,0x10
c000c2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2be:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c2c1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c2c4:	e8 8b 9b 01 00       	call   c0025e54 <__subdf3>
c000c2c9:	83 c4 18             	add    esp,0x18
c000c2cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d4:	52                   	push   edx
c000c2d5:	50                   	push   eax
c000c2d6:	e8 05 a6 01 00       	call   c00268e0 <fabs>
c000c2db:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2df:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2e3:	83 c4 10             	add    esp,0x10
c000c2e6:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c2eb:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f8:	e8 34 a4 01 00       	call   c0026731 <__gtdf2>
c000c2fd:	83 c4 10             	add    esp,0x10
c000c300:	85 c0                	test   eax,eax
c000c302:	0f 8e 9c 00 00 00    	jle    c000c3a4 <sinc_hex_vari_process+0x4c0>
c000c308:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c30b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c30e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c312:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c316:	52                   	push   edx
c000c317:	50                   	push   eax
c000c318:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c31b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c31e:	e8 31 9b 01 00       	call   c0025e54 <__subdf3>
c000c323:	59                   	pop    ecx
c000c324:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c328:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c32c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c32f:	e8 af a1 01 00       	call   c00264e3 <__floatsidf>
c000c334:	83 c4 10             	add    esp,0x10
c000c337:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c33b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c33f:	52                   	push   edx
c000c340:	50                   	push   eax
c000c341:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c345:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c349:	e8 32 9b 01 00       	call   c0025e80 <__muldf3>
c000c34e:	5f                   	pop    edi
c000c34f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c353:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c357:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c35a:	e8 84 a1 01 00       	call   c00264e3 <__floatsidf>
c000c35f:	83 c4 10             	add    esp,0x10
c000c362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c36a:	52                   	push   edx
c000c36b:	50                   	push   eax
c000c36c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c370:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c374:	e8 eb 9d 01 00       	call   c0026164 <__divdf3>
c000c379:	83 c4 10             	add    esp,0x10
c000c37c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c380:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c384:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c388:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c38c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c390:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c394:	e8 6a 94 01 00       	call   c0025803 <__adddf3>
c000c399:	83 c4 10             	add    esp,0x10
c000c39c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c3a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c3a4:	83 ec 0c             	sub    esp,0xc
c000c3a7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3aa:	e8 34 a1 01 00       	call   c00264e3 <__floatsidf>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ca:	e8 80 a3 01 00       	call   c002674f <__ltdf2>
c000c3cf:	83 c4 10             	add    esp,0x10
c000c3d2:	85 c0                	test   eax,eax
c000c3d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c3dc:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c3e0:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c3e4:	78 10                	js     c000c3f6 <sinc_hex_vari_process+0x512>
c000c3e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c3ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c406:	e8 75 9a 01 00       	call   c0025e80 <__muldf3>
c000c40b:	59                   	pop    ecx
c000c40c:	5f                   	pop    edi
c000c40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c411:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c415:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c419:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c41d:	e8 5d f2 ff ff       	call   c000b67f <double_to_fp>
c000c422:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c426:	89 c7                	mov    edi,eax
c000c428:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c42c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c430:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c434:	e8 47 9a 01 00       	call   c0025e80 <__muldf3>
c000c439:	83 c4 18             	add    esp,0x18
c000c43c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c440:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c444:	52                   	push   edx
c000c445:	50                   	push   eax
c000c446:	e8 34 f2 ff ff       	call   c000b67f <double_to_fp>
c000c44b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c44e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c452:	83 c4 0c             	add    esp,0xc
c000c455:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c458:	8d 04 90             	lea    eax,[eax+edx*4]
c000c45b:	50                   	push   eax
c000c45c:	50                   	push   eax
c000c45d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c460:	e8 7e a0 01 00       	call   c00264e3 <__floatsidf>
c000c465:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c469:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c46d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c471:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c475:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c479:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c47d:	e8 e2 9c 01 00       	call   c0026164 <__divdf3>
c000c482:	83 c4 18             	add    esp,0x18
c000c485:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c489:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c48d:	52                   	push   edx
c000c48e:	89 fa                	mov    edx,edi
c000c490:	50                   	push   eax
c000c491:	89 d8                	mov    eax,ebx
c000c493:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c497:	e8 50 de ff ff       	call   c000a2ec <calc_output_hex>
c000c49c:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c4a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b0:	e8 af 9c 01 00       	call   c0026164 <__divdf3>
c000c4b5:	83 c4 10             	add    esp,0x10
c000c4b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4d0:	e8 2e 93 01 00       	call   c0025803 <__adddf3>
c000c4d5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c4d9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c4dd:	83 c4 18             	add    esp,0x18
c000c4e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e8:	e8 13 a4 01 00       	call   c0026900 <lrint>
c000c4ed:	83 ec 0c             	sub    esp,0xc
c000c4f0:	50                   	push   eax
c000c4f1:	e8 ed 9f 01 00       	call   c00264e3 <__floatsidf>
c000c4f6:	83 c4 10             	add    esp,0x10
c000c4f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4fd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c501:	52                   	push   edx
c000c502:	50                   	push   eax
c000c503:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c507:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c50b:	e8 44 99 01 00       	call   c0025e54 <__subdf3>
c000c510:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c514:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c518:	83 c4 20             	add    esp,0x20
c000c51b:	6a 00                	push   0x0
c000c51d:	6a 00                	push   0x0
c000c51f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c523:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c527:	e8 23 a2 01 00       	call   c002674f <__ltdf2>
c000c52c:	83 c4 10             	add    esp,0x10
c000c52f:	85 c0                	test   eax,eax
c000c531:	79 20                	jns    c000c553 <sinc_hex_vari_process+0x66f>
c000c533:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c537:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c53b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c53f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c543:	e8 bb 92 01 00       	call   c0025803 <__adddf3>
c000c548:	83 c4 10             	add    esp,0x10
c000c54b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c54f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c553:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c556:	83 ec 10             	sub    esp,0x10
c000c559:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c55d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c568:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c56c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c570:	e8 df 98 01 00       	call   c0025e54 <__subdf3>
c000c575:	83 c4 18             	add    esp,0x18
c000c578:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c57c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	e8 79 a3 01 00       	call   c0026900 <lrint>
c000c587:	0f af f8             	imul   edi,eax
c000c58a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c58e:	83 c4 10             	add    esp,0x10
c000c591:	01 f8                	add    eax,edi
c000c593:	99                   	cdq    
c000c594:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c597:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c59a:	e9 fd fb ff ff       	jmp    c000c19c <sinc_hex_vari_process+0x2b8>
c000c59f:	83 c4 4c             	add    esp,0x4c
c000c5a2:	89 d0                	mov    eax,edx
c000c5a4:	5b                   	pop    ebx
c000c5a5:	5e                   	pop    esi
c000c5a6:	5f                   	pop    edi
c000c5a7:	5d                   	pop    ebp
c000c5a8:	c3                   	ret    

c000c5a9 <sinc_quad_vari_process>:
c000c5a9:	55                   	push   ebp
c000c5aa:	ba 05 00 00 00       	mov    edx,0x5
c000c5af:	57                   	push   edi
c000c5b0:	56                   	push   esi
c000c5b1:	53                   	push   ebx
c000c5b2:	83 ec 4c             	sub    esp,0x4c
c000c5b5:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c5b9:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c5bd:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c5c0:	85 db                	test   ebx,ebx
c000c5c2:	0f 84 9c 06 00 00    	je     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c5c8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c5cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c5ce:	0f af c7             	imul   eax,edi
c000c5d1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c5d4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c5d7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c5de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c5e5:	0f af c7             	imul   eax,edi
c000c5e8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c5eb:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c5ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f9:	68 00 00 70 3f       	push   0x3f700000
c000c5fe:	6a 00                	push   0x0
c000c600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c608:	e8 42 a1 01 00       	call   c002674f <__ltdf2>
c000c60d:	83 c4 10             	add    esp,0x10
c000c610:	ba 16 00 00 00       	mov    edx,0x16
c000c615:	85 c0                	test   eax,eax
c000c617:	0f 88 47 06 00 00    	js     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c61d:	68 00 00 70 40       	push   0x40700000
c000c622:	6a 00                	push   0x0
c000c624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c62c:	e8 00 a1 01 00       	call   c0026731 <__gtdf2>
c000c631:	83 c4 10             	add    esp,0x10
c000c634:	ba 16 00 00 00       	mov    edx,0x16
c000c639:	85 c0                	test   eax,eax
c000c63b:	0f 8f 23 06 00 00    	jg     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c641:	83 ec 0c             	sub    esp,0xc
c000c644:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c647:	e8 97 9e 01 00       	call   c00264e3 <__floatsidf>
c000c64c:	83 c4 10             	add    esp,0x10
c000c64f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c653:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c657:	68 00 00 00 40       	push   0x40000000
c000c65c:	6a 00                	push   0x0
c000c65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c662:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c666:	e8 98 91 01 00       	call   c0025803 <__adddf3>
c000c66b:	59                   	pop    ecx
c000c66c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c670:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c674:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c677:	e8 67 9e 01 00       	call   c00264e3 <__floatsidf>
c000c67c:	83 c4 10             	add    esp,0x10
c000c67f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c683:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c687:	52                   	push   edx
c000c688:	50                   	push   eax
c000c689:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c68d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c691:	e8 ce 9a 01 00       	call   c0026164 <__divdf3>
c000c696:	83 c4 10             	add    esp,0x10
c000c699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c69d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6a1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c6a4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c6a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6bf:	e8 6d a0 01 00       	call   c0026731 <__gtdf2>
c000c6c4:	83 c4 10             	add    esp,0x10
c000c6c7:	85 c0                	test   eax,eax
c000c6c9:	7e 2d                	jle    c000c6f8 <sinc_quad_vari_process+0x14f>
c000c6cb:	68 00 00 f0 3f       	push   0x3ff00000
c000c6d0:	6a 00                	push   0x0
c000c6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	e8 70 a0 01 00       	call   c002674f <__ltdf2>
c000c6df:	83 c4 10             	add    esp,0x10
c000c6e2:	85 c0                	test   eax,eax
c000c6e4:	79 4d                	jns    c000c733 <sinc_quad_vari_process+0x18a>
c000c6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6f6:	eb 1b                	jmp    c000c713 <sinc_quad_vari_process+0x16a>
c000c6f8:	68 00 00 f0 3f       	push   0x3ff00000
c000c6fd:	6a 00                	push   0x0
c000c6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c707:	e8 43 a0 01 00       	call   c002674f <__ltdf2>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	85 c0                	test   eax,eax
c000c711:	79 20                	jns    c000c733 <sinc_quad_vari_process+0x18a>
c000c713:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c717:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c71b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c71f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c723:	e8 3c 9a 01 00       	call   c0026164 <__divdf3>
c000c728:	83 c4 10             	add    esp,0x10
c000c72b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c72f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c733:	50                   	push   eax
c000c734:	50                   	push   eax
c000c735:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c739:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c73d:	e8 be a1 01 00       	call   c0026900 <lrint>
c000c742:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c745:	40                   	inc    eax
c000c746:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c74a:	0f af c7             	imul   eax,edi
c000c74d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c754:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c758:	58                   	pop    eax
c000c759:	5a                   	pop    edx
c000c75a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c75e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c762:	e8 99 a1 01 00       	call   c0026900 <lrint>
c000c767:	83 ec 0c             	sub    esp,0xc
c000c76a:	50                   	push   eax
c000c76b:	e8 73 9d 01 00       	call   c00264e3 <__floatsidf>
c000c770:	83 c4 10             	add    esp,0x10
c000c773:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c777:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c77b:	52                   	push   edx
c000c77c:	50                   	push   eax
c000c77d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c781:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c785:	e8 ca 96 01 00       	call   c0025e54 <__subdf3>
c000c78a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	83 c4 20             	add    esp,0x20
c000c795:	6a 00                	push   0x0
c000c797:	6a 00                	push   0x0
c000c799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7a1:	e8 a9 9f 01 00       	call   c002674f <__ltdf2>
c000c7a6:	83 c4 10             	add    esp,0x10
c000c7a9:	85 c0                	test   eax,eax
c000c7ab:	79 1f                	jns    c000c7cc <sinc_quad_vari_process+0x223>
c000c7ad:	68 00 00 f0 3f       	push   0x3ff00000
c000c7b2:	6a 00                	push   0x0
c000c7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7bc:	e8 42 90 01 00       	call   c0025803 <__adddf3>
c000c7c1:	83 c4 10             	add    esp,0x10
c000c7c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7cc:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7cf:	83 ec 10             	sub    esp,0x10
c000c7d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c7d6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e9:	e8 66 96 01 00       	call   c0025e54 <__subdf3>
c000c7ee:	83 c4 18             	add    esp,0x18
c000c7f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7f9:	52                   	push   edx
c000c7fa:	50                   	push   eax
c000c7fb:	e8 00 a1 01 00       	call   c0026900 <lrint>
c000c800:	0f af f8             	imul   edi,eax
c000c803:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c807:	01 f8                	add    eax,edi
c000c809:	99                   	cdq    
c000c80a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c80d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c810:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c814:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c818:	68 00 00 f0 3f       	push   0x3ff00000
c000c81d:	6a 00                	push   0x0
c000c81f:	e8 40 99 01 00       	call   c0026164 <__divdf3>
c000c824:	83 c4 10             	add    esp,0x10
c000c827:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c82b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c82f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c834:	68 23 42 92 0c       	push   0xc924223
c000c839:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c83d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c841:	e8 bd 8f 01 00       	call   c0025803 <__adddf3>
c000c846:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c84a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c84e:	83 c4 20             	add    esp,0x20
c000c851:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c859:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c861:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c864:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c867:	7d 50                	jge    c000c8b9 <sinc_quad_vari_process+0x310>
c000c869:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c86c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c86f:	01 c8                	add    eax,ecx
c000c871:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c874:	99                   	cdq    
c000c875:	f7 f9                	idiv   ecx
c000c877:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c87b:	7d 0c                	jge    c000c889 <sinc_quad_vari_process+0x2e0>
c000c87d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c880:	85 ff                	test   edi,edi
c000c882:	79 6c                	jns    c000c8f0 <sinc_quad_vari_process+0x347>
c000c884:	e9 e7 00 00 00       	jmp    c000c970 <sinc_quad_vari_process+0x3c7>
c000c889:	50                   	push   eax
c000c88a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c88e:	56                   	push   esi
c000c88f:	53                   	push   ebx
c000c890:	e8 11 ee ff ff       	call   c000b6a6 <prepare_data>
c000c895:	83 c4 10             	add    esp,0x10
c000c898:	89 c2                	mov    edx,eax
c000c89a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c89d:	85 c0                	test   eax,eax
c000c89f:	0f 85 bf 03 00 00    	jne    c000cc64 <sinc_quad_vari_process+0x6bb>
c000c8a5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8a8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8ab:	01 c8                	add    eax,ecx
c000c8ad:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8b0:	99                   	cdq    
c000c8b1:	f7 f9                	idiv   ecx
c000c8b3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8b7:	7c c4                	jl     c000c87d <sinc_quad_vari_process+0x2d4>
c000c8b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8c1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c8c4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c8cf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c8d2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c8d5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c8d8:	99                   	cdq    
c000c8d9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8dc:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c8df:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c8e2:	99                   	cdq    
c000c8e3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8e6:	31 d2                	xor    edx,edx
c000c8e8:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c8eb:	e9 74 03 00 00       	jmp    c000cc64 <sinc_quad_vari_process+0x6bb>
c000c8f0:	83 ec 0c             	sub    esp,0xc
c000c8f3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c8f6:	e8 e8 9b 01 00       	call   c00264e3 <__floatsidf>
c000c8fb:	83 c4 10             	add    esp,0x10
c000c8fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c902:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c906:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c912:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c916:	e8 e8 8e 01 00       	call   c0025803 <__adddf3>
c000c91b:	83 c4 10             	add    esp,0x10
c000c91e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c922:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c926:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c932:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c936:	e8 c8 8e 01 00       	call   c0025803 <__adddf3>
c000c93b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c93e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c942:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c946:	e8 98 9b 01 00       	call   c00264e3 <__floatsidf>
c000c94b:	83 c4 10             	add    esp,0x10
c000c94e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c952:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c956:	52                   	push   edx
c000c957:	50                   	push   eax
c000c958:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c95c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c960:	e8 e8 9d 01 00       	call   c002674d <__gedf2>
c000c965:	83 c4 10             	add    esp,0x10
c000c968:	85 c0                	test   eax,eax
c000c96a:	0f 89 49 ff ff ff    	jns    c000c8b9 <sinc_quad_vari_process+0x310>
c000c970:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c974:	0f 8e ef 00 00 00    	jle    c000ca69 <sinc_quad_vari_process+0x4c0>
c000c97a:	83 ec 10             	sub    esp,0x10
c000c97d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c980:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c983:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c986:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c989:	e8 c6 94 01 00       	call   c0025e54 <__subdf3>
c000c98e:	83 c4 18             	add    esp,0x18
c000c991:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c995:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c999:	52                   	push   edx
c000c99a:	50                   	push   eax
c000c99b:	e8 40 9f 01 00       	call   c00268e0 <fabs>
c000c9a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9a4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9a8:	83 c4 10             	add    esp,0x10
c000c9ab:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c9b0:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c9b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9bd:	e8 6f 9d 01 00       	call   c0026731 <__gtdf2>
c000c9c2:	83 c4 10             	add    esp,0x10
c000c9c5:	85 c0                	test   eax,eax
c000c9c7:	0f 8e 9c 00 00 00    	jle    c000ca69 <sinc_quad_vari_process+0x4c0>
c000c9cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9d0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c9d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c9d7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c9db:	52                   	push   edx
c000c9dc:	50                   	push   eax
c000c9dd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c9e0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c9e3:	e8 6c 94 01 00       	call   c0025e54 <__subdf3>
c000c9e8:	59                   	pop    ecx
c000c9e9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c9ed:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c9f1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c9f4:	e8 ea 9a 01 00       	call   c00264e3 <__floatsidf>
c000c9f9:	83 c4 10             	add    esp,0x10
c000c9fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca00:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca04:	52                   	push   edx
c000ca05:	50                   	push   eax
c000ca06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca0e:	e8 6d 94 01 00       	call   c0025e80 <__muldf3>
c000ca13:	5f                   	pop    edi
c000ca14:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca18:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca1c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ca1f:	e8 bf 9a 01 00       	call   c00264e3 <__floatsidf>
c000ca24:	83 c4 10             	add    esp,0x10
c000ca27:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca2b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca2f:	52                   	push   edx
c000ca30:	50                   	push   eax
c000ca31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca39:	e8 26 97 01 00       	call   c0026164 <__divdf3>
c000ca3e:	83 c4 10             	add    esp,0x10
c000ca41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca45:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca59:	e8 a5 8d 01 00       	call   c0025803 <__adddf3>
c000ca5e:	83 c4 10             	add    esp,0x10
c000ca61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca65:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca69:	83 ec 0c             	sub    esp,0xc
c000ca6c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ca6f:	e8 6f 9a 01 00       	call   c00264e3 <__floatsidf>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8f:	e8 bb 9c 01 00       	call   c002674f <__ltdf2>
c000ca94:	83 c4 10             	add    esp,0x10
c000ca97:	85 c0                	test   eax,eax
c000ca99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca9d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000caa1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000caa5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000caa9:	78 10                	js     c000cabb <sinc_quad_vari_process+0x512>
c000caab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000caaf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cab3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cab7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cabb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cabf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cac3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cac7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cacb:	e8 b0 93 01 00       	call   c0025e80 <__muldf3>
c000cad0:	59                   	pop    ecx
c000cad1:	5f                   	pop    edi
c000cad2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cad6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cada:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cade:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cae2:	e8 98 eb ff ff       	call   c000b67f <double_to_fp>
c000cae7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caeb:	89 c7                	mov    edi,eax
c000caed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caf1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf9:	e8 82 93 01 00       	call   c0025e80 <__muldf3>
c000cafe:	83 c4 18             	add    esp,0x18
c000cb01:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb05:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb09:	52                   	push   edx
c000cb0a:	50                   	push   eax
c000cb0b:	e8 6f eb ff ff       	call   c000b67f <double_to_fp>
c000cb10:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cb13:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb17:	83 c4 0c             	add    esp,0xc
c000cb1a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cb1d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cb20:	50                   	push   eax
c000cb21:	50                   	push   eax
c000cb22:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb25:	e8 b9 99 01 00       	call   c00264e3 <__floatsidf>
c000cb2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cb2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cb32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb36:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb3a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb42:	e8 1d 96 01 00       	call   c0026164 <__divdf3>
c000cb47:	83 c4 18             	add    esp,0x18
c000cb4a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb4e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb52:	52                   	push   edx
c000cb53:	89 fa                	mov    edx,edi
c000cb55:	50                   	push   eax
c000cb56:	89 d8                	mov    eax,ebx
c000cb58:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cb5c:	e8 a5 d1 ff ff       	call   c0009d06 <calc_output_quad>
c000cb61:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cb65:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb69:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb75:	e8 ea 95 01 00       	call   c0026164 <__divdf3>
c000cb7a:	83 c4 10             	add    esp,0x10
c000cb7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb81:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb8d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb95:	e8 69 8c 01 00       	call   c0025803 <__adddf3>
c000cb9a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cb9e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cba2:	83 c4 18             	add    esp,0x18
c000cba5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cba9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbad:	e8 4e 9d 01 00       	call   c0026900 <lrint>
c000cbb2:	83 ec 0c             	sub    esp,0xc
c000cbb5:	50                   	push   eax
c000cbb6:	e8 28 99 01 00       	call   c00264e3 <__floatsidf>
c000cbbb:	83 c4 10             	add    esp,0x10
c000cbbe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbc2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbc6:	52                   	push   edx
c000cbc7:	50                   	push   eax
c000cbc8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbcc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbd0:	e8 7f 92 01 00       	call   c0025e54 <__subdf3>
c000cbd5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbd9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbdd:	83 c4 20             	add    esp,0x20
c000cbe0:	6a 00                	push   0x0
c000cbe2:	6a 00                	push   0x0
c000cbe4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbe8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbec:	e8 5e 9b 01 00       	call   c002674f <__ltdf2>
c000cbf1:	83 c4 10             	add    esp,0x10
c000cbf4:	85 c0                	test   eax,eax
c000cbf6:	79 20                	jns    c000cc18 <sinc_quad_vari_process+0x66f>
c000cbf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc08:	e8 f6 8b 01 00       	call   c0025803 <__adddf3>
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc18:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc1b:	83 ec 10             	sub    esp,0x10
c000cc1e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc22:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc35:	e8 1a 92 01 00       	call   c0025e54 <__subdf3>
c000cc3a:	83 c4 18             	add    esp,0x18
c000cc3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc41:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	e8 b4 9c 01 00       	call   c0026900 <lrint>
c000cc4c:	0f af f8             	imul   edi,eax
c000cc4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc53:	83 c4 10             	add    esp,0x10
c000cc56:	01 f8                	add    eax,edi
c000cc58:	99                   	cdq    
c000cc59:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc5c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc5f:	e9 fd fb ff ff       	jmp    c000c861 <sinc_quad_vari_process+0x2b8>
c000cc64:	83 c4 4c             	add    esp,0x4c
c000cc67:	89 d0                	mov    eax,edx
c000cc69:	5b                   	pop    ebx
c000cc6a:	5e                   	pop    esi
c000cc6b:	5f                   	pop    edi
c000cc6c:	5d                   	pop    ebp
c000cc6d:	c3                   	ret    

c000cc6e <sinc_stereo_vari_process>:
c000cc6e:	55                   	push   ebp
c000cc6f:	ba 05 00 00 00       	mov    edx,0x5
c000cc74:	57                   	push   edi
c000cc75:	56                   	push   esi
c000cc76:	53                   	push   ebx
c000cc77:	83 ec 4c             	sub    esp,0x4c
c000cc7a:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cc7e:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000cc82:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cc85:	85 db                	test   ebx,ebx
c000cc87:	0f 84 9c 06 00 00    	je     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cc8d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cc90:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc93:	0f af c7             	imul   eax,edi
c000cc96:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cc99:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cc9c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cca3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ccaa:	0f af c7             	imul   eax,edi
c000ccad:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ccb0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ccb3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ccb6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccbe:	68 00 00 70 3f       	push   0x3f700000
c000ccc3:	6a 00                	push   0x0
c000ccc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cccd:	e8 7d 9a 01 00       	call   c002674f <__ltdf2>
c000ccd2:	83 c4 10             	add    esp,0x10
c000ccd5:	ba 16 00 00 00       	mov    edx,0x16
c000ccda:	85 c0                	test   eax,eax
c000ccdc:	0f 88 47 06 00 00    	js     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cce2:	68 00 00 70 40       	push   0x40700000
c000cce7:	6a 00                	push   0x0
c000cce9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cced:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccf1:	e8 3b 9a 01 00       	call   c0026731 <__gtdf2>
c000ccf6:	83 c4 10             	add    esp,0x10
c000ccf9:	ba 16 00 00 00       	mov    edx,0x16
c000ccfe:	85 c0                	test   eax,eax
c000cd00:	0f 8f 23 06 00 00    	jg     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cd06:	83 ec 0c             	sub    esp,0xc
c000cd09:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cd0c:	e8 d2 97 01 00       	call   c00264e3 <__floatsidf>
c000cd11:	83 c4 10             	add    esp,0x10
c000cd14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd1c:	68 00 00 00 40       	push   0x40000000
c000cd21:	6a 00                	push   0x0
c000cd23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd2b:	e8 d3 8a 01 00       	call   c0025803 <__adddf3>
c000cd30:	59                   	pop    ecx
c000cd31:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd35:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd39:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3c:	e8 a2 97 01 00       	call   c00264e3 <__floatsidf>
c000cd41:	83 c4 10             	add    esp,0x10
c000cd44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd48:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd4c:	52                   	push   edx
c000cd4d:	50                   	push   eax
c000cd4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd56:	e8 09 94 01 00       	call   c0026164 <__divdf3>
c000cd5b:	83 c4 10             	add    esp,0x10
c000cd5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd66:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cd69:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cd6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd84:	e8 a8 99 01 00       	call   c0026731 <__gtdf2>
c000cd89:	83 c4 10             	add    esp,0x10
c000cd8c:	85 c0                	test   eax,eax
c000cd8e:	7e 2d                	jle    c000cdbd <sinc_stereo_vari_process+0x14f>
c000cd90:	68 00 00 f0 3f       	push   0x3ff00000
c000cd95:	6a 00                	push   0x0
c000cd97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	e8 ab 99 01 00       	call   c002674f <__ltdf2>
c000cda4:	83 c4 10             	add    esp,0x10
c000cda7:	85 c0                	test   eax,eax
c000cda9:	79 4d                	jns    c000cdf8 <sinc_stereo_vari_process+0x18a>
c000cdab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cdb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cdb7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdbb:	eb 1b                	jmp    c000cdd8 <sinc_stereo_vari_process+0x16a>
c000cdbd:	68 00 00 f0 3f       	push   0x3ff00000
c000cdc2:	6a 00                	push   0x0
c000cdc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdcc:	e8 7e 99 01 00       	call   c002674f <__ltdf2>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	85 c0                	test   eax,eax
c000cdd6:	79 20                	jns    c000cdf8 <sinc_stereo_vari_process+0x18a>
c000cdd8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cddc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cde0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde8:	e8 77 93 01 00       	call   c0026164 <__divdf3>
c000cded:	83 c4 10             	add    esp,0x10
c000cdf0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdf4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdf8:	50                   	push   eax
c000cdf9:	50                   	push   eax
c000cdfa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdfe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce02:	e8 f9 9a 01 00       	call   c0026900 <lrint>
c000ce07:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ce0a:	40                   	inc    eax
c000ce0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce0f:	0f af c7             	imul   eax,edi
c000ce12:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ce16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce1d:	58                   	pop    eax
c000ce1e:	5a                   	pop    edx
c000ce1f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce27:	e8 d4 9a 01 00       	call   c0026900 <lrint>
c000ce2c:	83 ec 0c             	sub    esp,0xc
c000ce2f:	50                   	push   eax
c000ce30:	e8 ae 96 01 00       	call   c00264e3 <__floatsidf>
c000ce35:	83 c4 10             	add    esp,0x10
c000ce38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce3c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce40:	52                   	push   edx
c000ce41:	50                   	push   eax
c000ce42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce4a:	e8 05 90 01 00       	call   c0025e54 <__subdf3>
c000ce4f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	83 c4 20             	add    esp,0x20
c000ce5a:	6a 00                	push   0x0
c000ce5c:	6a 00                	push   0x0
c000ce5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce66:	e8 e4 98 01 00       	call   c002674f <__ltdf2>
c000ce6b:	83 c4 10             	add    esp,0x10
c000ce6e:	85 c0                	test   eax,eax
c000ce70:	79 1f                	jns    c000ce91 <sinc_stereo_vari_process+0x223>
c000ce72:	68 00 00 f0 3f       	push   0x3ff00000
c000ce77:	6a 00                	push   0x0
c000ce79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce81:	e8 7d 89 01 00       	call   c0025803 <__adddf3>
c000ce86:	83 c4 10             	add    esp,0x10
c000ce89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce8d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce91:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce94:	83 ec 10             	sub    esp,0x10
c000ce97:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ce9b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ceaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ceae:	e8 a1 8f 01 00       	call   c0025e54 <__subdf3>
c000ceb3:	83 c4 18             	add    esp,0x18
c000ceb6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ceba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cebe:	52                   	push   edx
c000cebf:	50                   	push   eax
c000cec0:	e8 3b 9a 01 00       	call   c0026900 <lrint>
c000cec5:	0f af f8             	imul   edi,eax
c000cec8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cecc:	01 f8                	add    eax,edi
c000cece:	99                   	cdq    
c000cecf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ced2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ced5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ced9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cedd:	68 00 00 f0 3f       	push   0x3ff00000
c000cee2:	6a 00                	push   0x0
c000cee4:	e8 7b 92 01 00       	call   c0026164 <__divdf3>
c000cee9:	83 c4 10             	add    esp,0x10
c000ceec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cef0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cef4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cef9:	68 23 42 92 0c       	push   0xc924223
c000cefe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf02:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf06:	e8 f8 88 01 00       	call   c0025803 <__adddf3>
c000cf0b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cf0f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cf13:	83 c4 20             	add    esp,0x20
c000cf16:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf1e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cf26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cf29:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cf2c:	7d 50                	jge    c000cf7e <sinc_stereo_vari_process+0x310>
c000cf2e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf31:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf34:	01 c8                	add    eax,ecx
c000cf36:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf39:	99                   	cdq    
c000cf3a:	f7 f9                	idiv   ecx
c000cf3c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf40:	7d 0c                	jge    c000cf4e <sinc_stereo_vari_process+0x2e0>
c000cf42:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cf45:	85 ff                	test   edi,edi
c000cf47:	79 6c                	jns    c000cfb5 <sinc_stereo_vari_process+0x347>
c000cf49:	e9 e7 00 00 00       	jmp    c000d035 <sinc_stereo_vari_process+0x3c7>
c000cf4e:	50                   	push   eax
c000cf4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf53:	56                   	push   esi
c000cf54:	53                   	push   ebx
c000cf55:	e8 4c e7 ff ff       	call   c000b6a6 <prepare_data>
c000cf5a:	83 c4 10             	add    esp,0x10
c000cf5d:	89 c2                	mov    edx,eax
c000cf5f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cf62:	85 c0                	test   eax,eax
c000cf64:	0f 85 bf 03 00 00    	jne    c000d329 <sinc_stereo_vari_process+0x6bb>
c000cf6a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf6d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf70:	01 c8                	add    eax,ecx
c000cf72:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf75:	99                   	cdq    
c000cf76:	f7 f9                	idiv   ecx
c000cf78:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf7c:	7c c4                	jl     c000cf42 <sinc_stereo_vari_process+0x2d4>
c000cf7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cf82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cf86:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cf89:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cf8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cf94:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cf97:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cf9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cf9d:	99                   	cdq    
c000cf9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfa1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cfa4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cfa7:	99                   	cdq    
c000cfa8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfab:	31 d2                	xor    edx,edx
c000cfad:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cfb0:	e9 74 03 00 00       	jmp    c000d329 <sinc_stereo_vari_process+0x6bb>
c000cfb5:	83 ec 0c             	sub    esp,0xc
c000cfb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cfbb:	e8 23 95 01 00       	call   c00264e3 <__floatsidf>
c000cfc0:	83 c4 10             	add    esp,0x10
c000cfc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfdb:	e8 23 88 01 00       	call   c0025803 <__adddf3>
c000cfe0:	83 c4 10             	add    esp,0x10
c000cfe3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfe7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cff3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cffb:	e8 03 88 01 00       	call   c0025803 <__adddf3>
c000d000:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d003:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d007:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d00b:	e8 d3 94 01 00       	call   c00264e3 <__floatsidf>
c000d010:	83 c4 10             	add    esp,0x10
c000d013:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d017:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d01b:	52                   	push   edx
c000d01c:	50                   	push   eax
c000d01d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d021:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d025:	e8 23 97 01 00       	call   c002674d <__gedf2>
c000d02a:	83 c4 10             	add    esp,0x10
c000d02d:	85 c0                	test   eax,eax
c000d02f:	0f 89 49 ff ff ff    	jns    c000cf7e <sinc_stereo_vari_process+0x310>
c000d035:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d039:	0f 8e ef 00 00 00    	jle    c000d12e <sinc_stereo_vari_process+0x4c0>
c000d03f:	83 ec 10             	sub    esp,0x10
c000d042:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d045:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d048:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d04b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d04e:	e8 01 8e 01 00       	call   c0025e54 <__subdf3>
c000d053:	83 c4 18             	add    esp,0x18
c000d056:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d05a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05e:	52                   	push   edx
c000d05f:	50                   	push   eax
c000d060:	e8 7b 98 01 00       	call   c00268e0 <fabs>
c000d065:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d069:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d06d:	83 c4 10             	add    esp,0x10
c000d070:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d075:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d07a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d07e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d082:	e8 aa 96 01 00       	call   c0026731 <__gtdf2>
c000d087:	83 c4 10             	add    esp,0x10
c000d08a:	85 c0                	test   eax,eax
c000d08c:	0f 8e 9c 00 00 00    	jle    c000d12e <sinc_stereo_vari_process+0x4c0>
c000d092:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d095:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d098:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d09c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d0a0:	52                   	push   edx
c000d0a1:	50                   	push   eax
c000d0a2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d0a5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d0a8:	e8 a7 8d 01 00       	call   c0025e54 <__subdf3>
c000d0ad:	59                   	pop    ecx
c000d0ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0b2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0b6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d0b9:	e8 25 94 01 00       	call   c00264e3 <__floatsidf>
c000d0be:	83 c4 10             	add    esp,0x10
c000d0c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0c9:	52                   	push   edx
c000d0ca:	50                   	push   eax
c000d0cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0d3:	e8 a8 8d 01 00       	call   c0025e80 <__muldf3>
c000d0d8:	5f                   	pop    edi
c000d0d9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0dd:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0e1:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d0e4:	e8 fa 93 01 00       	call   c00264e3 <__floatsidf>
c000d0e9:	83 c4 10             	add    esp,0x10
c000d0ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0f4:	52                   	push   edx
c000d0f5:	50                   	push   eax
c000d0f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0fe:	e8 61 90 01 00       	call   c0026164 <__divdf3>
c000d103:	83 c4 10             	add    esp,0x10
c000d106:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d112:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d116:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11e:	e8 e0 86 01 00       	call   c0025803 <__adddf3>
c000d123:	83 c4 10             	add    esp,0x10
c000d126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d12a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d12e:	83 ec 0c             	sub    esp,0xc
c000d131:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d134:	e8 aa 93 01 00       	call   c00264e3 <__floatsidf>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d14c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d154:	e8 f6 95 01 00       	call   c002674f <__ltdf2>
c000d159:	83 c4 10             	add    esp,0x10
c000d15c:	85 c0                	test   eax,eax
c000d15e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d162:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d166:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d16a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d16e:	78 10                	js     c000d180 <sinc_stereo_vari_process+0x512>
c000d170:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d174:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d178:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d17c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d180:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d184:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d188:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d18c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d190:	e8 eb 8c 01 00       	call   c0025e80 <__muldf3>
c000d195:	59                   	pop    ecx
c000d196:	5f                   	pop    edi
c000d197:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d19b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d19f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1a7:	e8 d3 e4 ff ff       	call   c000b67f <double_to_fp>
c000d1ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1b0:	89 c7                	mov    edi,eax
c000d1b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1be:	e8 bd 8c 01 00       	call   c0025e80 <__muldf3>
c000d1c3:	83 c4 18             	add    esp,0x18
c000d1c6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d1ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1ce:	52                   	push   edx
c000d1cf:	50                   	push   eax
c000d1d0:	e8 aa e4 ff ff       	call   c000b67f <double_to_fp>
c000d1d5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d1d8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d1dc:	83 c4 0c             	add    esp,0xc
c000d1df:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d1e2:	8d 04 90             	lea    eax,[eax+edx*4]
c000d1e5:	50                   	push   eax
c000d1e6:	50                   	push   eax
c000d1e7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d1ea:	e8 f4 92 01 00       	call   c00264e3 <__floatsidf>
c000d1ef:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d1f3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d1f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d203:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d207:	e8 58 8f 01 00       	call   c0026164 <__divdf3>
c000d20c:	83 c4 18             	add    esp,0x18
c000d20f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d213:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d217:	52                   	push   edx
c000d218:	89 fa                	mov    edx,edi
c000d21a:	50                   	push   eax
c000d21b:	89 d8                	mov    eax,ebx
c000d21d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d221:	e8 02 c7 ff ff       	call   c0009928 <calc_output_stereo>
c000d226:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d22a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d22e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d232:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d236:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23a:	e8 25 8f 01 00       	call   c0026164 <__divdf3>
c000d23f:	83 c4 10             	add    esp,0x10
c000d242:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d246:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d24a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d24e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d252:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d256:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d25a:	e8 a4 85 01 00       	call   c0025803 <__adddf3>
c000d25f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d263:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d267:	83 c4 18             	add    esp,0x18
c000d26a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d26e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d272:	e8 89 96 01 00       	call   c0026900 <lrint>
c000d277:	83 ec 0c             	sub    esp,0xc
c000d27a:	50                   	push   eax
c000d27b:	e8 63 92 01 00       	call   c00264e3 <__floatsidf>
c000d280:	83 c4 10             	add    esp,0x10
c000d283:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d28b:	52                   	push   edx
c000d28c:	50                   	push   eax
c000d28d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d291:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d295:	e8 ba 8b 01 00       	call   c0025e54 <__subdf3>
c000d29a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d29e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2a2:	83 c4 20             	add    esp,0x20
c000d2a5:	6a 00                	push   0x0
c000d2a7:	6a 00                	push   0x0
c000d2a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2b1:	e8 99 94 01 00       	call   c002674f <__ltdf2>
c000d2b6:	83 c4 10             	add    esp,0x10
c000d2b9:	85 c0                	test   eax,eax
c000d2bb:	79 20                	jns    c000d2dd <sinc_stereo_vari_process+0x66f>
c000d2bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2cd:	e8 31 85 01 00       	call   c0025803 <__adddf3>
c000d2d2:	83 c4 10             	add    esp,0x10
c000d2d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2dd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d2e0:	83 ec 10             	sub    esp,0x10
c000d2e3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d2e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2fa:	e8 55 8b 01 00       	call   c0025e54 <__subdf3>
c000d2ff:	83 c4 18             	add    esp,0x18
c000d302:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d306:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	e8 ef 95 01 00       	call   c0026900 <lrint>
c000d311:	0f af f8             	imul   edi,eax
c000d314:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d318:	83 c4 10             	add    esp,0x10
c000d31b:	01 f8                	add    eax,edi
c000d31d:	99                   	cdq    
c000d31e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d321:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d324:	e9 fd fb ff ff       	jmp    c000cf26 <sinc_stereo_vari_process+0x2b8>
c000d329:	83 c4 4c             	add    esp,0x4c
c000d32c:	89 d0                	mov    eax,edx
c000d32e:	5b                   	pop    ebx
c000d32f:	5e                   	pop    esi
c000d330:	5f                   	pop    edi
c000d331:	5d                   	pop    ebp
c000d332:	c3                   	ret    

c000d333 <sinc_mono_vari_process>:
c000d333:	55                   	push   ebp
c000d334:	ba 05 00 00 00       	mov    edx,0x5
c000d339:	57                   	push   edi
c000d33a:	56                   	push   esi
c000d33b:	53                   	push   ebx
c000d33c:	83 ec 4c             	sub    esp,0x4c
c000d33f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d343:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d347:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d34a:	85 db                	test   ebx,ebx
c000d34c:	0f 84 c1 06 00 00    	je     c000da13 <sinc_mono_vari_process+0x6e0>
c000d352:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d355:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d358:	0f af c7             	imul   eax,edi
c000d35b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d35e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d361:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d368:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d36f:	0f af c7             	imul   eax,edi
c000d372:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d375:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d379:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d37c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d37e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d382:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d386:	68 00 00 70 3f       	push   0x3f700000
c000d38b:	6a 00                	push   0x0
c000d38d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d391:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d395:	e8 b5 93 01 00       	call   c002674f <__ltdf2>
c000d39a:	83 c4 10             	add    esp,0x10
c000d39d:	ba 16 00 00 00       	mov    edx,0x16
c000d3a2:	85 c0                	test   eax,eax
c000d3a4:	0f 88 69 06 00 00    	js     c000da13 <sinc_mono_vari_process+0x6e0>
c000d3aa:	68 00 00 70 40       	push   0x40700000
c000d3af:	6a 00                	push   0x0
c000d3b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b9:	e8 73 93 01 00       	call   c0026731 <__gtdf2>
c000d3be:	83 c4 10             	add    esp,0x10
c000d3c1:	ba 16 00 00 00       	mov    edx,0x16
c000d3c6:	85 c0                	test   eax,eax
c000d3c8:	0f 8f 45 06 00 00    	jg     c000da13 <sinc_mono_vari_process+0x6e0>
c000d3ce:	83 ec 0c             	sub    esp,0xc
c000d3d1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d3d4:	e8 0a 91 01 00       	call   c00264e3 <__floatsidf>
c000d3d9:	83 c4 10             	add    esp,0x10
c000d3dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d3e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d3e4:	68 00 00 00 40       	push   0x40000000
c000d3e9:	6a 00                	push   0x0
c000d3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3f3:	e8 0b 84 01 00       	call   c0025803 <__adddf3>
c000d3f8:	59                   	pop    ecx
c000d3f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d3fd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d401:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d404:	e8 da 90 01 00       	call   c00264e3 <__floatsidf>
c000d409:	83 c4 10             	add    esp,0x10
c000d40c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d410:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d414:	52                   	push   edx
c000d415:	50                   	push   eax
c000d416:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41e:	e8 41 8d 01 00       	call   c0026164 <__divdf3>
c000d423:	83 c4 10             	add    esp,0x10
c000d426:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d42a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d42e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d431:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d434:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d438:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d43c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d448:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d44c:	e8 e0 92 01 00       	call   c0026731 <__gtdf2>
c000d451:	83 c4 10             	add    esp,0x10
c000d454:	85 c0                	test   eax,eax
c000d456:	7e 2d                	jle    c000d485 <sinc_mono_vari_process+0x152>
c000d458:	68 00 00 f0 3f       	push   0x3ff00000
c000d45d:	6a 00                	push   0x0
c000d45f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d463:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d467:	e8 e3 92 01 00       	call   c002674f <__ltdf2>
c000d46c:	83 c4 10             	add    esp,0x10
c000d46f:	85 c0                	test   eax,eax
c000d471:	79 4d                	jns    c000d4c0 <sinc_mono_vari_process+0x18d>
c000d473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d477:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d47b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d47f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d483:	eb 1b                	jmp    c000d4a0 <sinc_mono_vari_process+0x16d>
c000d485:	68 00 00 f0 3f       	push   0x3ff00000
c000d48a:	6a 00                	push   0x0
c000d48c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d490:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d494:	e8 b6 92 01 00       	call   c002674f <__ltdf2>
c000d499:	83 c4 10             	add    esp,0x10
c000d49c:	85 c0                	test   eax,eax
c000d49e:	79 20                	jns    c000d4c0 <sinc_mono_vari_process+0x18d>
c000d4a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4a8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4b0:	e8 af 8c 01 00       	call   c0026164 <__divdf3>
c000d4b5:	83 c4 10             	add    esp,0x10
c000d4b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4c0:	50                   	push   eax
c000d4c1:	50                   	push   eax
c000d4c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ca:	e8 31 94 01 00       	call   c0026900 <lrint>
c000d4cf:	40                   	inc    eax
c000d4d0:	0f af c7             	imul   eax,edi
c000d4d3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d4d7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d4db:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d4de:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d4e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4e9:	58                   	pop    eax
c000d4ea:	5a                   	pop    edx
c000d4eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4f3:	e8 08 94 01 00       	call   c0026900 <lrint>
c000d4f8:	83 ec 0c             	sub    esp,0xc
c000d4fb:	50                   	push   eax
c000d4fc:	e8 e2 8f 01 00       	call   c00264e3 <__floatsidf>
c000d501:	83 c4 10             	add    esp,0x10
c000d504:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d508:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d50c:	52                   	push   edx
c000d50d:	50                   	push   eax
c000d50e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d512:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d516:	e8 39 89 01 00       	call   c0025e54 <__subdf3>
c000d51b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d51f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d523:	83 c4 20             	add    esp,0x20
c000d526:	6a 00                	push   0x0
c000d528:	6a 00                	push   0x0
c000d52a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d532:	e8 18 92 01 00       	call   c002674f <__ltdf2>
c000d537:	83 c4 10             	add    esp,0x10
c000d53a:	85 c0                	test   eax,eax
c000d53c:	79 1f                	jns    c000d55d <sinc_mono_vari_process+0x22a>
c000d53e:	68 00 00 f0 3f       	push   0x3ff00000
c000d543:	6a 00                	push   0x0
c000d545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d549:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d54d:	e8 b1 82 01 00       	call   c0025803 <__adddf3>
c000d552:	83 c4 10             	add    esp,0x10
c000d555:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d559:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d55d:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d560:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d563:	83 ec 10             	sub    esp,0x10
c000d566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d572:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d576:	e8 d9 88 01 00       	call   c0025e54 <__subdf3>
c000d57b:	83 c4 18             	add    esp,0x18
c000d57e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d582:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d586:	52                   	push   edx
c000d587:	50                   	push   eax
c000d588:	e8 73 93 01 00       	call   c0026900 <lrint>
c000d58d:	0f af f8             	imul   edi,eax
c000d590:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d593:	31 ff                	xor    edi,edi
c000d595:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d59a:	99                   	cdq    
c000d59b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d59e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d5a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5a9:	55                   	push   ebp
c000d5aa:	57                   	push   edi
c000d5ab:	e8 b4 8b 01 00       	call   c0026164 <__divdf3>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5bb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d5c0:	68 23 42 92 0c       	push   0xc924223
c000d5c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5cd:	e8 31 82 01 00       	call   c0025803 <__adddf3>
c000d5d2:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d5d6:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d5da:	83 c4 20             	add    esp,0x20
c000d5dd:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d5e1:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d5e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d5e8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d5eb:	7d 54                	jge    c000d641 <sinc_mono_vari_process+0x30e>
c000d5ed:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d5f0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d5f3:	01 c8                	add    eax,ecx
c000d5f5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d5f8:	99                   	cdq    
c000d5f9:	f7 f9                	idiv   ecx
c000d5fb:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d5ff:	7d 0c                	jge    c000d60d <sinc_mono_vari_process+0x2da>
c000d601:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d604:	85 ff                	test   edi,edi
c000d606:	79 73                	jns    c000d67b <sinc_mono_vari_process+0x348>
c000d608:	e9 ee 00 00 00       	jmp    c000d6fb <sinc_mono_vari_process+0x3c8>
c000d60d:	50                   	push   eax
c000d60e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d612:	56                   	push   esi
c000d613:	53                   	push   ebx
c000d614:	e8 8d e0 ff ff       	call   c000b6a6 <prepare_data>
c000d619:	89 c2                	mov    edx,eax
c000d61b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d625:	85 d2                	test   edx,edx
c000d627:	0f 85 e6 03 00 00    	jne    c000da13 <sinc_mono_vari_process+0x6e0>
c000d62d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d630:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d633:	01 c8                	add    eax,ecx
c000d635:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d638:	99                   	cdq    
c000d639:	f7 f9                	idiv   ecx
c000d63b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d63f:	7c c0                	jl     c000d601 <sinc_mono_vari_process+0x2ce>
c000d641:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d645:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d649:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d64d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d650:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d657:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d65b:	89 01                	mov    DWORD PTR [ecx],eax
c000d65d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d660:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d663:	99                   	cdq    
c000d664:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d66a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d66d:	99                   	cdq    
c000d66e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d671:	31 d2                	xor    edx,edx
c000d673:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d676:	e9 98 03 00 00       	jmp    c000da13 <sinc_mono_vari_process+0x6e0>
c000d67b:	83 ec 0c             	sub    esp,0xc
c000d67e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d681:	e8 5d 8e 01 00       	call   c00264e3 <__floatsidf>
c000d686:	83 c4 10             	add    esp,0x10
c000d689:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d68d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d691:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d695:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d699:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d69d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6a1:	e8 5d 81 01 00       	call   c0025803 <__adddf3>
c000d6a6:	83 c4 10             	add    esp,0x10
c000d6a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6c1:	e8 3d 81 01 00       	call   c0025803 <__adddf3>
c000d6c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d6c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d6cd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d6d1:	e8 0d 8e 01 00       	call   c00264e3 <__floatsidf>
c000d6d6:	83 c4 10             	add    esp,0x10
c000d6d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6dd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6e1:	52                   	push   edx
c000d6e2:	50                   	push   eax
c000d6e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6eb:	e8 41 90 01 00       	call   c0026731 <__gtdf2>
c000d6f0:	83 c4 10             	add    esp,0x10
c000d6f3:	85 c0                	test   eax,eax
c000d6f5:	0f 8f 46 ff ff ff    	jg     c000d641 <sinc_mono_vari_process+0x30e>
c000d6fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d6ff:	0f 8e f5 00 00 00    	jle    c000d7fa <sinc_mono_vari_process+0x4c7>
c000d705:	83 ec 10             	sub    esp,0x10
c000d708:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d70b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d70e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d712:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d715:	ff 30                	push   DWORD PTR [eax]
c000d717:	e8 38 87 01 00       	call   c0025e54 <__subdf3>
c000d71c:	83 c4 18             	add    esp,0x18
c000d71f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d723:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d727:	52                   	push   edx
c000d728:	50                   	push   eax
c000d729:	e8 b2 91 01 00       	call   c00268e0 <fabs>
c000d72e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d732:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d736:	83 c4 10             	add    esp,0x10
c000d739:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d73e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d743:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d747:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d74b:	e8 e1 8f 01 00       	call   c0026731 <__gtdf2>
c000d750:	83 c4 10             	add    esp,0x10
c000d753:	85 c0                	test   eax,eax
c000d755:	0f 8e 9f 00 00 00    	jle    c000d7fa <sinc_mono_vari_process+0x4c7>
c000d75b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d75f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d762:	8b 00                	mov    eax,DWORD PTR [eax]
c000d764:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d768:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d76c:	52                   	push   edx
c000d76d:	50                   	push   eax
c000d76e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d771:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d774:	e8 db 86 01 00       	call   c0025e54 <__subdf3>
c000d779:	5f                   	pop    edi
c000d77a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d77e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d782:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d785:	e8 59 8d 01 00       	call   c00264e3 <__floatsidf>
c000d78a:	83 c4 10             	add    esp,0x10
c000d78d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d795:	52                   	push   edx
c000d796:	50                   	push   eax
c000d797:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d79b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d79f:	e8 dc 86 01 00       	call   c0025e80 <__muldf3>
c000d7a4:	5d                   	pop    ebp
c000d7a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7ad:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d7b0:	e8 2e 8d 01 00       	call   c00264e3 <__floatsidf>
c000d7b5:	83 c4 10             	add    esp,0x10
c000d7b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7c0:	52                   	push   edx
c000d7c1:	50                   	push   eax
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ca:	e8 95 89 01 00       	call   c0026164 <__divdf3>
c000d7cf:	83 c4 10             	add    esp,0x10
c000d7d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ea:	e8 14 80 01 00       	call   c0025803 <__adddf3>
c000d7ef:	83 c4 10             	add    esp,0x10
c000d7f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7fa:	83 ec 0c             	sub    esp,0xc
c000d7fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d800:	e8 de 8c 01 00       	call   c00264e3 <__floatsidf>
c000d805:	83 c4 10             	add    esp,0x10
c000d808:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d80c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d81c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d820:	e8 2a 8f 01 00       	call   c002674f <__ltdf2>
c000d825:	83 c4 10             	add    esp,0x10
c000d828:	85 c0                	test   eax,eax
c000d82a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d82e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d832:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000d836:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000d83a:	78 10                	js     c000d84c <sinc_mono_vari_process+0x519>
c000d83c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d840:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d844:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d848:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d84c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d850:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d854:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d858:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d85c:	e8 1f 86 01 00       	call   c0025e80 <__muldf3>
c000d861:	59                   	pop    ecx
c000d862:	5f                   	pop    edi
c000d863:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d867:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d86b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d86f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d873:	e8 07 de ff ff       	call   c000b67f <double_to_fp>
c000d878:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d87c:	89 c7                	mov    edi,eax
c000d87e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d882:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d886:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d88a:	e8 f1 85 01 00       	call   c0025e80 <__muldf3>
c000d88f:	83 c4 18             	add    esp,0x18
c000d892:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d896:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d89a:	52                   	push   edx
c000d89b:	50                   	push   eax
c000d89c:	e8 de dd ff ff       	call   c000b67f <double_to_fp>
c000d8a1:	83 ec 0c             	sub    esp,0xc
c000d8a4:	89 c5                	mov    ebp,eax
c000d8a6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d8a9:	e8 35 8c 01 00       	call   c00264e3 <__floatsidf>
c000d8ae:	83 c4 10             	add    esp,0x10
c000d8b1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8b5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8b9:	52                   	push   edx
c000d8ba:	50                   	push   eax
c000d8bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8c3:	e8 9c 88 01 00       	call   c0026164 <__divdf3>
c000d8c8:	83 c4 10             	add    esp,0x10
c000d8cb:	89 e9                	mov    ecx,ebp
c000d8cd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8d1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8d5:	89 d8                	mov    eax,ebx
c000d8d7:	89 fa                	mov    edx,edi
c000d8d9:	e8 ee bd ff ff       	call   c00096cc <calc_output_single>
c000d8de:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000d8e1:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d8e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8ec:	52                   	push   edx
c000d8ed:	50                   	push   eax
c000d8ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8f2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8f6:	e8 85 85 01 00       	call   c0025e80 <__muldf3>
c000d8fb:	59                   	pop    ecx
c000d8fc:	59                   	pop    ecx
c000d8fd:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d901:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d905:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d909:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d90d:	e8 41 8e 01 00       	call   c0026753 <__truncdfsf2>
c000d912:	83 c4 10             	add    esp,0x10
c000d915:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000d918:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d91b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d91f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d923:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d927:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d92b:	e8 34 88 01 00       	call   c0026164 <__divdf3>
c000d930:	83 c4 10             	add    esp,0x10
c000d933:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d937:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d93b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d93f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d943:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d947:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d94b:	e8 b3 7e 01 00       	call   c0025803 <__adddf3>
c000d950:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000d954:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d958:	83 c4 18             	add    esp,0x18
c000d95b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d963:	e8 98 8f 01 00       	call   c0026900 <lrint>
c000d968:	83 ec 0c             	sub    esp,0xc
c000d96b:	50                   	push   eax
c000d96c:	e8 72 8b 01 00       	call   c00264e3 <__floatsidf>
c000d971:	83 c4 10             	add    esp,0x10
c000d974:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d978:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d97c:	52                   	push   edx
c000d97d:	50                   	push   eax
c000d97e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d982:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d986:	e8 c9 84 01 00       	call   c0025e54 <__subdf3>
c000d98b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d98f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d993:	83 c4 20             	add    esp,0x20
c000d996:	6a 00                	push   0x0
c000d998:	6a 00                	push   0x0
c000d99a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d99e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9a2:	e8 a8 8d 01 00       	call   c002674f <__ltdf2>
c000d9a7:	83 c4 10             	add    esp,0x10
c000d9aa:	85 c0                	test   eax,eax
c000d9ac:	79 20                	jns    c000d9ce <sinc_mono_vari_process+0x69b>
c000d9ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9be:	e8 40 7e 01 00       	call   c0025803 <__adddf3>
c000d9c3:	83 c4 10             	add    esp,0x10
c000d9c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9ce:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9d1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d9d4:	83 ec 10             	sub    esp,0x10
c000d9d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9df:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9e3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9e7:	e8 68 84 01 00       	call   c0025e54 <__subdf3>
c000d9ec:	83 c4 18             	add    esp,0x18
c000d9ef:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9f7:	52                   	push   edx
c000d9f8:	50                   	push   eax
c000d9f9:	e8 02 8f 01 00       	call   c0026900 <lrint>
c000d9fe:	83 c4 10             	add    esp,0x10
c000da01:	0f af f8             	imul   edi,eax
c000da04:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000da07:	99                   	cdq    
c000da08:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000da0b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000da0e:	e9 d2 fb ff ff       	jmp    c000d5e5 <sinc_mono_vari_process+0x2b2>
c000da13:	83 c4 4c             	add    esp,0x4c
c000da16:	89 d0                	mov    eax,edx
c000da18:	5b                   	pop    ebx
c000da19:	5e                   	pop    esi
c000da1a:	5f                   	pop    edi
c000da1b:	5d                   	pop    ebp
c000da1c:	c3                   	ret    

c000da1d <sinc_get_name>:
c000da1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da21:	31 c0                	xor    eax,eax
c000da23:	83 fa 02             	cmp    edx,0x2
c000da26:	77 07                	ja     c000da2f <sinc_get_name+0x12>
c000da28:	8b 04 95 a4 80 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7f5c]
c000da2f:	c3                   	ret    

c000da30 <sinc_get_description>:
c000da30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da34:	31 c0                	xor    eax,eax
c000da36:	83 fa 02             	cmp    edx,0x2
c000da39:	77 07                	ja     c000da42 <sinc_get_description+0x12>
c000da3b:	8b 04 95 98 80 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7f68]
c000da42:	c3                   	ret    

c000da43 <sinc_set_converter>:
c000da43:	53                   	push   ebx
c000da44:	81 ec 58 08 00 00    	sub    esp,0x858
c000da4a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000da51:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000da54:	85 c0                	test   eax,eax
c000da56:	74 13                	je     c000da6b <sinc_set_converter+0x28>
c000da58:	83 ec 0c             	sub    esp,0xc
c000da5b:	50                   	push   eax
c000da5c:	e8 83 1a 00 00       	call   c000f4e4 <free>
c000da61:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000da68:	83 c4 10             	add    esp,0x10
c000da6b:	50                   	push   eax
c000da6c:	68 44 08 00 00       	push   0x844
c000da71:	6a 00                	push   0x0
c000da73:	8d 44 24 18          	lea    eax,[esp+0x18]
c000da77:	50                   	push   eax
c000da78:	e8 0e 2c ff ff       	call   c000068b <memset>
c000da7d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000da80:	83 c4 10             	add    esp,0x10
c000da83:	b8 0b 00 00 00       	mov    eax,0xb
c000da88:	81 fa 80 00 00 00    	cmp    edx,0x80
c000da8e:	7f 6e                	jg     c000dafe <sinc_set_converter+0xbb>
c000da90:	83 fa 01             	cmp    edx,0x1
c000da93:	75 10                	jne    c000daa5 <sinc_set_converter+0x62>
c000da95:	c7 43 24 33 d3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d333
c000da9c:	c7 43 20 33 d3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d333
c000daa3:	eb 4d                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000daa5:	83 fa 02             	cmp    edx,0x2
c000daa8:	75 10                	jne    c000daba <sinc_set_converter+0x77>
c000daaa:	c7 43 24 6e cc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cc6e
c000dab1:	c7 43 20 6e cc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cc6e
c000dab8:	eb 38                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000daba:	83 fa 04             	cmp    edx,0x4
c000dabd:	75 10                	jne    c000dacf <sinc_set_converter+0x8c>
c000dabf:	c7 43 24 a9 c5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c5a9
c000dac6:	c7 43 20 a9 c5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c5a9
c000dacd:	eb 23                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000dacf:	83 fa 06             	cmp    edx,0x6
c000dad2:	75 10                	jne    c000dae4 <sinc_set_converter+0xa1>
c000dad4:	c7 43 24 e4 be 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bee4
c000dadb:	c7 43 20 e4 be 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bee4
c000dae2:	eb 0e                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000dae4:	c7 43 24 20 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b820
c000daeb:	c7 43 20 20 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b820
c000daf2:	c7 43 28 d3 aa 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000aad3
c000daf9:	b8 0a 00 00 00       	mov    eax,0xa
c000dafe:	81 c4 58 08 00 00    	add    esp,0x858
c000db04:	5b                   	pop    ebx
c000db05:	c3                   	ret    

c000db06 <zoh_vari_process>:
c000db06:	55                   	push   ebp
c000db07:	31 d2                	xor    edx,edx
c000db09:	57                   	push   edi
c000db0a:	56                   	push   esi
c000db0b:	53                   	push   ebx
c000db0c:	83 ec 3c             	sub    esp,0x3c
c000db0f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000db13:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000db17:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000db1b:	0f 8e 80 06 00 00    	jle    c000e1a1 <zoh_vari_process+0x69b>
c000db21:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000db24:	ba 05 00 00 00       	mov    edx,0x5
c000db29:	85 db                	test   ebx,ebx
c000db2b:	0f 84 70 06 00 00    	je     c000e1a1 <zoh_vari_process+0x69b>
c000db31:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db34:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000db38:	74 19                	je     c000db53 <zoh_vari_process+0x4d>
c000db3a:	31 d2                	xor    edx,edx
c000db3c:	39 c2                	cmp    edx,eax
c000db3e:	7d 0c                	jge    c000db4c <zoh_vari_process+0x46>
c000db40:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000db42:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000db45:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000db49:	42                   	inc    edx
c000db4a:	eb f0                	jmp    c000db3c <zoh_vari_process+0x36>
c000db4c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000db53:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000db56:	0f af d0             	imul   edx,eax
c000db59:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000db5c:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000db60:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000db67:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000db6a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000db71:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000db74:	8b 07                	mov    eax,DWORD PTR [edi]
c000db76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db7e:	68 00 00 70 3f       	push   0x3f700000
c000db83:	6a 00                	push   0x0
c000db85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db8d:	e8 bd 8b 01 00       	call   c002674f <__ltdf2>
c000db92:	83 c4 10             	add    esp,0x10
c000db95:	ba 16 00 00 00       	mov    edx,0x16
c000db9a:	85 c0                	test   eax,eax
c000db9c:	0f 88 ff 05 00 00    	js     c000e1a1 <zoh_vari_process+0x69b>
c000dba2:	68 00 00 70 40       	push   0x40700000
c000dba7:	6a 00                	push   0x0
c000dba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb1:	e8 7b 8b 01 00       	call   c0026731 <__gtdf2>
c000dbb6:	83 c4 10             	add    esp,0x10
c000dbb9:	ba 16 00 00 00       	mov    edx,0x16
c000dbbe:	85 c0                	test   eax,eax
c000dbc0:	0f 8f db 05 00 00    	jg     c000e1a1 <zoh_vari_process+0x69b>
c000dbc6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dbc9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dbcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbd4:	68 00 00 f0 3f       	push   0x3ff00000
c000dbd9:	6a 00                	push   0x0
c000dbdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe3:	e8 67 8b 01 00       	call   c002674f <__ltdf2>
c000dbe8:	83 c4 10             	add    esp,0x10
c000dbeb:	85 c0                	test   eax,eax
c000dbed:	0f 89 da 01 00 00    	jns    c000ddcd <zoh_vari_process+0x2c7>
c000dbf3:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dbf6:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000dbf9:	0f 8d ce 01 00 00    	jge    c000ddcd <zoh_vari_process+0x2c7>
c000dbff:	83 ec 0c             	sub    esp,0xc
c000dc02:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc05:	e8 d9 88 01 00       	call   c00264e3 <__floatsidf>
c000dc0a:	83 c4 10             	add    esp,0x10
c000dc0d:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc10:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc24:	e8 57 82 01 00       	call   c0025e80 <__muldf3>
c000dc29:	59                   	pop    ecx
c000dc2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc2e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dc35:	e8 a9 88 01 00       	call   c00264e3 <__floatsidf>
c000dc3a:	83 c4 10             	add    esp,0x10
c000dc3d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc41:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc45:	52                   	push   edx
c000dc46:	50                   	push   eax
c000dc47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc4b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc4f:	e8 af 7b 01 00       	call   c0025803 <__adddf3>
c000dc54:	59                   	pop    ecx
c000dc55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc59:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc5d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dc60:	e8 7e 88 01 00       	call   c00264e3 <__floatsidf>
c000dc65:	83 c4 10             	add    esp,0x10
c000dc68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc70:	52                   	push   edx
c000dc71:	50                   	push   eax
c000dc72:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc76:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc7a:	e8 ce 8a 01 00       	call   c002674d <__gedf2>
c000dc7f:	83 c4 10             	add    esp,0x10
c000dc82:	85 c0                	test   eax,eax
c000dc84:	0f 89 43 01 00 00    	jns    c000ddcd <zoh_vari_process+0x2c7>
c000dc8a:	85 ed                	test   ebp,ebp
c000dc8c:	0f 8e ec 00 00 00    	jle    c000dd7e <zoh_vari_process+0x278>
c000dc92:	83 ec 10             	sub    esp,0x10
c000dc95:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc98:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc9b:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dc9e:	ff 37                	push   DWORD PTR [edi]
c000dca0:	e8 af 81 01 00       	call   c0025e54 <__subdf3>
c000dca5:	83 c4 18             	add    esp,0x18
c000dca8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dcb0:	52                   	push   edx
c000dcb1:	50                   	push   eax
c000dcb2:	e8 29 8c 01 00       	call   c00268e0 <fabs>
c000dcb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcbf:	83 c4 10             	add    esp,0x10
c000dcc2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dcc7:	68 23 42 92 0c       	push   0xc924223
c000dccc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcd0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcd4:	e8 58 8a 01 00       	call   c0026731 <__gtdf2>
c000dcd9:	83 c4 10             	add    esp,0x10
c000dcdc:	85 c0                	test   eax,eax
c000dcde:	0f 8e 9a 00 00 00    	jle    c000dd7e <zoh_vari_process+0x278>
c000dce4:	8b 07                	mov    eax,DWORD PTR [edi]
c000dce6:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dce9:	89 04 24             	mov    DWORD PTR [esp],eax
c000dcec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dcf0:	52                   	push   edx
c000dcf1:	50                   	push   eax
c000dcf2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dcf5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dcf8:	e8 57 81 01 00       	call   c0025e54 <__subdf3>
c000dcfd:	59                   	pop    ecx
c000dcfe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd02:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd06:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dd09:	e8 d5 87 01 00       	call   c00264e3 <__floatsidf>
c000dd0e:	83 c4 10             	add    esp,0x10
c000dd11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd15:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd19:	52                   	push   edx
c000dd1a:	50                   	push   eax
c000dd1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd23:	e8 58 81 01 00       	call   c0025e80 <__muldf3>
c000dd28:	5d                   	pop    ebp
c000dd29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd2d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd31:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dd34:	e8 aa 87 01 00       	call   c00264e3 <__floatsidf>
c000dd39:	83 c4 10             	add    esp,0x10
c000dd3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd40:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd44:	52                   	push   edx
c000dd45:	50                   	push   eax
c000dd46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd4e:	e8 11 84 01 00       	call   c0026164 <__divdf3>
c000dd53:	83 c4 10             	add    esp,0x10
c000dd56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd5e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd62:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6e:	e8 90 7a 01 00       	call   c0025803 <__adddf3>
c000dd73:	83 c4 10             	add    esp,0x10
c000dd76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd7e:	31 c0                	xor    eax,eax
c000dd80:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dd83:	7e 13                	jle    c000dd98 <zoh_vari_process+0x292>
c000dd85:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dd89:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dd8c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dd8f:	40                   	inc    eax
c000dd90:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dd93:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dd96:	eb e8                	jmp    c000dd80 <zoh_vari_process+0x27a>
c000dd98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dda0:	68 00 00 f0 3f       	push   0x3ff00000
c000dda5:	6a 00                	push   0x0
c000dda7:	e8 b8 83 01 00       	call   c0026164 <__divdf3>
c000ddac:	83 c4 10             	add    esp,0x10
c000ddaf:	89 04 24             	mov    DWORD PTR [esp],eax
c000ddb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ddb6:	52                   	push   edx
c000ddb7:	50                   	push   eax
c000ddb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddc0:	e8 3e 7a 01 00       	call   c0025803 <__adddf3>
c000ddc5:	83 c4 10             	add    esp,0x10
c000ddc8:	e9 ff fd ff ff       	jmp    c000dbcc <zoh_vari_process+0xc6>
c000ddcd:	55                   	push   ebp
c000ddce:	55                   	push   ebp
c000ddcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd7:	e8 24 8b 01 00       	call   c0026900 <lrint>
c000dddc:	83 ec 0c             	sub    esp,0xc
c000dddf:	50                   	push   eax
c000dde0:	e8 fe 86 01 00       	call   c00264e3 <__floatsidf>
c000dde5:	83 c4 10             	add    esp,0x10
c000dde8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddf0:	52                   	push   edx
c000ddf1:	50                   	push   eax
c000ddf2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddf6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddfa:	e8 55 80 01 00       	call   c0025e54 <__subdf3>
c000ddff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000de03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000de07:	83 c4 20             	add    esp,0x20
c000de0a:	6a 00                	push   0x0
c000de0c:	6a 00                	push   0x0
c000de0e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de12:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de16:	e8 34 89 01 00       	call   c002674f <__ltdf2>
c000de1b:	83 c4 10             	add    esp,0x10
c000de1e:	85 c0                	test   eax,eax
c000de20:	79 1e                	jns    c000de40 <zoh_vari_process+0x33a>
c000de22:	68 00 00 f0 3f       	push   0x3ff00000
c000de27:	6a 00                	push   0x0
c000de29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de31:	e8 cd 79 01 00       	call   c0025803 <__adddf3>
c000de36:	83 c4 10             	add    esp,0x10
c000de39:	89 04 24             	mov    DWORD PTR [esp],eax
c000de3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de40:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de43:	83 ec 10             	sub    esp,0x10
c000de46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de56:	e8 f9 7f 01 00       	call   c0025e54 <__subdf3>
c000de5b:	83 c4 18             	add    esp,0x18
c000de5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de66:	52                   	push   edx
c000de67:	50                   	push   eax
c000de68:	e8 93 8a 01 00       	call   c0026900 <lrint>
c000de6d:	83 c4 10             	add    esp,0x10
c000de70:	0f af e8             	imul   ebp,eax
c000de73:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000de76:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000de79:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000de7d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de80:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000de83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de87:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000de8a:	0f 8d 7a 02 00 00    	jge    c000e10a <zoh_vari_process+0x604>
c000de90:	83 ec 0c             	sub    esp,0xc
c000de93:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de96:	e8 48 86 01 00       	call   c00264e3 <__floatsidf>
c000de9b:	83 c4 10             	add    esp,0x10
c000de9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dea2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dea6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000deaa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000deae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deb2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deb6:	e8 c5 7f 01 00       	call   c0025e80 <__muldf3>
c000debb:	59                   	pop    ecx
c000debc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dec0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dec8:	e8 16 86 01 00       	call   c00264e3 <__floatsidf>
c000decd:	83 c4 10             	add    esp,0x10
c000ded0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ded4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ded8:	52                   	push   edx
c000ded9:	50                   	push   eax
c000deda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dede:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dee2:	e8 1c 79 01 00       	call   c0025803 <__adddf3>
c000dee7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000deea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000deee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000def2:	e8 ec 85 01 00       	call   c00264e3 <__floatsidf>
c000def7:	83 c4 10             	add    esp,0x10
c000defa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000defe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df02:	52                   	push   edx
c000df03:	50                   	push   eax
c000df04:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df0c:	e8 40 88 01 00       	call   c0026751 <__ledf2>
c000df11:	83 c4 10             	add    esp,0x10
c000df14:	85 c0                	test   eax,eax
c000df16:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000df1a:	0f 8f ea 01 00 00    	jg     c000e10a <zoh_vari_process+0x604>
c000df20:	85 c9                	test   ecx,ecx
c000df22:	0f 8e ed 00 00 00    	jle    c000e015 <zoh_vari_process+0x50f>
c000df28:	83 ec 10             	sub    esp,0x10
c000df2b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df2e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df31:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df34:	ff 37                	push   DWORD PTR [edi]
c000df36:	e8 19 7f 01 00       	call   c0025e54 <__subdf3>
c000df3b:	83 c4 18             	add    esp,0x18
c000df3e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df42:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df46:	52                   	push   edx
c000df47:	50                   	push   eax
c000df48:	e8 93 89 01 00       	call   c00268e0 <fabs>
c000df4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df51:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df55:	83 c4 10             	add    esp,0x10
c000df58:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df5d:	68 23 42 92 0c       	push   0xc924223
c000df62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df6a:	e8 c2 87 01 00       	call   c0026731 <__gtdf2>
c000df6f:	83 c4 10             	add    esp,0x10
c000df72:	85 c0                	test   eax,eax
c000df74:	0f 8e 9b 00 00 00    	jle    c000e015 <zoh_vari_process+0x50f>
c000df7a:	8b 07                	mov    eax,DWORD PTR [edi]
c000df7c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df87:	52                   	push   edx
c000df88:	50                   	push   eax
c000df89:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df8c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df8f:	e8 c0 7e 01 00       	call   c0025e54 <__subdf3>
c000df94:	5d                   	pop    ebp
c000df95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000df99:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000df9d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dfa0:	e8 3e 85 01 00       	call   c00264e3 <__floatsidf>
c000dfa5:	83 c4 10             	add    esp,0x10
c000dfa8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfb0:	52                   	push   edx
c000dfb1:	50                   	push   eax
c000dfb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfba:	e8 c1 7e 01 00       	call   c0025e80 <__muldf3>
c000dfbf:	59                   	pop    ecx
c000dfc0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfc4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfc8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dfcb:	e8 13 85 01 00       	call   c00264e3 <__floatsidf>
c000dfd0:	83 c4 10             	add    esp,0x10
c000dfd3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfd7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfdb:	52                   	push   edx
c000dfdc:	50                   	push   eax
c000dfdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe5:	e8 7a 81 01 00       	call   c0026164 <__divdf3>
c000dfea:	83 c4 10             	add    esp,0x10
c000dfed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dff1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dff5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e005:	e8 f9 77 01 00       	call   c0025803 <__adddf3>
c000e00a:	83 c4 10             	add    esp,0x10
c000e00d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e011:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e015:	31 d2                	xor    edx,edx
c000e017:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e01a:	39 d0                	cmp    eax,edx
c000e01c:	7e 1d                	jle    c000e03b <zoh_vari_process+0x535>
c000e01e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e021:	29 c1                	sub    ecx,eax
c000e023:	89 c8                	mov    eax,ecx
c000e025:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e027:	01 d0                	add    eax,edx
c000e029:	42                   	inc    edx
c000e02a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e02d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e030:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e033:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e036:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e039:	eb dc                	jmp    c000e017 <zoh_vari_process+0x511>
c000e03b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	68 00 00 f0 3f       	push   0x3ff00000
c000e048:	6a 00                	push   0x0
c000e04a:	e8 15 81 01 00       	call   c0026164 <__divdf3>
c000e04f:	83 c4 10             	add    esp,0x10
c000e052:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e056:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e05a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e05e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e06a:	e8 94 77 01 00       	call   c0025803 <__adddf3>
c000e06f:	5d                   	pop    ebp
c000e070:	59                   	pop    ecx
c000e071:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e075:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e079:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e07d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e081:	e8 7a 88 01 00       	call   c0026900 <lrint>
c000e086:	83 ec 0c             	sub    esp,0xc
c000e089:	50                   	push   eax
c000e08a:	e8 54 84 01 00       	call   c00264e3 <__floatsidf>
c000e08f:	83 c4 10             	add    esp,0x10
c000e092:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e096:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e09a:	52                   	push   edx
c000e09b:	50                   	push   eax
c000e09c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a4:	e8 ab 7d 01 00       	call   c0025e54 <__subdf3>
c000e0a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0b1:	83 c4 20             	add    esp,0x20
c000e0b4:	6a 00                	push   0x0
c000e0b6:	6a 00                	push   0x0
c000e0b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0bc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c0:	e8 8a 86 01 00       	call   c002674f <__ltdf2>
c000e0c5:	83 c4 10             	add    esp,0x10
c000e0c8:	85 c0                	test   eax,eax
c000e0ca:	79 1e                	jns    c000e0ea <zoh_vari_process+0x5e4>
c000e0cc:	68 00 00 f0 3f       	push   0x3ff00000
c000e0d1:	6a 00                	push   0x0
c000e0d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0db:	e8 23 77 01 00       	call   c0025803 <__adddf3>
c000e0e0:	83 c4 10             	add    esp,0x10
c000e0e3:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0e6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e0ea:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e0ed:	83 ec 10             	sub    esp,0x10
c000e0f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e100:	e8 4f 7d 01 00       	call   c0025e54 <__subdf3>
c000e105:	e9 51 fd ff ff       	jmp    c000de5b <zoh_vari_process+0x355>
c000e10a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e10e:	7d 3a                	jge    c000e14a <zoh_vari_process+0x644>
c000e110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e114:	83 ec 0c             	sub    esp,0xc
c000e117:	29 e8                	sub    eax,ebp
c000e119:	99                   	cdq    
c000e11a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e11d:	50                   	push   eax
c000e11e:	e8 c0 83 01 00       	call   c00264e3 <__floatsidf>
c000e123:	83 c4 10             	add    esp,0x10
c000e126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e12a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e12e:	52                   	push   edx
c000e12f:	50                   	push   eax
c000e130:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e134:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e138:	e8 c6 76 01 00       	call   c0025803 <__adddf3>
c000e13d:	83 c4 10             	add    esp,0x10
c000e140:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e143:	89 04 24             	mov    DWORD PTR [esp],eax
c000e146:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e14a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e14d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e151:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e154:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e157:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e15a:	85 c0                	test   eax,eax
c000e15c:	7f 25                	jg     c000e183 <zoh_vari_process+0x67d>
c000e15e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e162:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e166:	89 07                	mov    DWORD PTR [edi],eax
c000e168:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e16b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e16e:	99                   	cdq    
c000e16f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e172:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e175:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e178:	99                   	cdq    
c000e179:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e17c:	31 d2                	xor    edx,edx
c000e17e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e181:	eb 1e                	jmp    c000e1a1 <zoh_vari_process+0x69b>
c000e183:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e186:	31 d2                	xor    edx,edx
c000e188:	29 c8                	sub    eax,ecx
c000e18a:	c1 e0 02             	shl    eax,0x2
c000e18d:	39 d1                	cmp    ecx,edx
c000e18f:	7e cd                	jle    c000e15e <zoh_vari_process+0x658>
c000e191:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e193:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e197:	83 c0 04             	add    eax,0x4
c000e19a:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e19e:	42                   	inc    edx
c000e19f:	eb ec                	jmp    c000e18d <zoh_vari_process+0x687>
c000e1a1:	83 c4 3c             	add    esp,0x3c
c000e1a4:	89 d0                	mov    eax,edx
c000e1a6:	5b                   	pop    ebx
c000e1a7:	5e                   	pop    esi
c000e1a8:	5f                   	pop    edi
c000e1a9:	5d                   	pop    ebp
c000e1aa:	c3                   	ret    

c000e1ab <zoh_reset>:
c000e1ab:	83 ec 0c             	sub    esp,0xc
c000e1ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1b2:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e1b5:	85 c0                	test   eax,eax
c000e1b7:	74 20                	je     c000e1d9 <zoh_reset+0x2e>
c000e1b9:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e1bc:	83 c0 1c             	add    eax,0x1c
c000e1bf:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e1c2:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e1c9:	c1 e2 02             	shl    edx,0x2
c000e1cc:	51                   	push   ecx
c000e1cd:	52                   	push   edx
c000e1ce:	6a 00                	push   0x0
c000e1d0:	50                   	push   eax
c000e1d1:	e8 b5 24 ff ff       	call   c000068b <memset>
c000e1d6:	83 c4 10             	add    esp,0x10
c000e1d9:	83 c4 0c             	add    esp,0xc
c000e1dc:	c3                   	ret    

c000e1dd <zoh_get_name>:
c000e1dd:	31 c0                	xor    eax,eax
c000e1df:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1e4:	75 05                	jne    c000e1eb <zoh_get_name+0xe>
c000e1e6:	b8 be 81 02 c0       	mov    eax,0xc00281be
c000e1eb:	c3                   	ret    

c000e1ec <zoh_get_description>:
c000e1ec:	31 c0                	xor    eax,eax
c000e1ee:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1f3:	75 05                	jne    c000e1fa <zoh_get_description+0xe>
c000e1f5:	b8 cf 81 02 c0       	mov    eax,0xc00281cf
c000e1fa:	c3                   	ret    

c000e1fb <zoh_set_converter>:
c000e1fb:	53                   	push   ebx
c000e1fc:	b8 0a 00 00 00       	mov    eax,0xa
c000e201:	83 ec 08             	sub    esp,0x8
c000e204:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e208:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e20d:	75 6e                	jne    c000e27d <zoh_set_converter+0x82>
c000e20f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e212:	85 c0                	test   eax,eax
c000e214:	74 13                	je     c000e229 <zoh_set_converter+0x2e>
c000e216:	83 ec 0c             	sub    esp,0xc
c000e219:	50                   	push   eax
c000e21a:	e8 c5 12 00 00       	call   c000f4e4 <free>
c000e21f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e226:	83 c4 10             	add    esp,0x10
c000e229:	50                   	push   eax
c000e22a:	50                   	push   eax
c000e22b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e22e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e235:	50                   	push   eax
c000e236:	6a 01                	push   0x1
c000e238:	e8 c7 12 00 00       	call   c000f504 <calloc>
c000e23d:	83 c4 10             	add    esp,0x10
c000e240:	89 c2                	mov    edx,eax
c000e242:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e245:	85 d2                	test   edx,edx
c000e247:	b8 01 00 00 00       	mov    eax,0x1
c000e24c:	74 2f                	je     c000e27d <zoh_set_converter+0x82>
c000e24e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e251:	83 ec 0c             	sub    esp,0xc
c000e254:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e257:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e25d:	c7 43 24 06 db 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000db06
c000e264:	c7 43 20 06 db 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000db06
c000e26b:	c7 43 28 ab e1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e1ab
c000e272:	53                   	push   ebx
c000e273:	e8 33 ff ff ff       	call   c000e1ab <zoh_reset>
c000e278:	83 c4 10             	add    esp,0x10
c000e27b:	31 c0                	xor    eax,eax
c000e27d:	83 c4 08             	add    esp,0x8
c000e280:	5b                   	pop    ebx
c000e281:	c3                   	ret    

c000e282 <CPU::current()>:
c000e282:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c000e287:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e28d:	90                   	nop
c000e28e:	c3                   	ret    

c000e28f <operator new(unsigned long)>:
c000e28f:	83 ec 0c             	sub    esp,0xc
c000e292:	83 ec 0c             	sub    esp,0xc
c000e295:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e299:	e8 36 12 00 00       	call   c000f4d4 <malloc>
c000e29e:	83 c4 10             	add    esp,0x10
c000e2a1:	83 c4 0c             	add    esp,0xc
c000e2a4:	c3                   	ret    
c000e2a5:	90                   	nop

c000e2a6 <Computer::close(int, int, void*)>:
c000e2a6:	57                   	push   edi
c000e2a7:	56                   	push   esi
c000e2a8:	53                   	push   ebx
c000e2a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e2ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e2b1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e2b5:	83 ec 0c             	sub    esp,0xc
c000e2b8:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e2be:	e8 43 59 00 00       	call   c0013c06 <Device::closeAll()>
c000e2c3:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e2c9:	83 c4 10             	add    esp,0x10
c000e2cc:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2ce:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e2d2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e2da:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e2de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e2:	5b                   	pop    ebx
c000e2e3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e2e6:	5e                   	pop    esi
c000e2e7:	5f                   	pop    edi
c000e2e8:	ff e0                	jmp    eax

c000e2ea <Computer::Computer()>:
c000e2ea:	83 ec 0c             	sub    esp,0xc
c000e2ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f1:	83 ec 08             	sub    esp,0x8
c000e2f4:	68 06 82 02 c0       	push   0xc0028206
c000e2f9:	50                   	push   eax
c000e2fa:	e8 81 59 00 00       	call   c0013c80 <Device::Device(char const*)>
c000e2ff:	83 c4 10             	add    esp,0x10
c000e302:	ba d0 83 02 c0       	mov    edx,0xc00283d0
c000e307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e30b:	89 10                	mov    DWORD PTR [eax],edx
c000e30d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e311:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e31b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e333:	83 ca 04             	or     edx,0x4
c000e336:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e33c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e340:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e346:	0f b6 d0             	movzx  edx,al
c000e349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e34d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e358:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e35e:	0f b6 d0             	movzx  edx,al
c000e361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e365:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e36a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e374:	8d 50 01             	lea    edx,[eax+0x1]
c000e377:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e37b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e381:	0f b6 d0             	movzx  edx,al
c000e384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e388:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e38c:	83 e1 3f             	and    ecx,0x3f
c000e38f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e397:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e39d:	0f b6 d0             	movzx  edx,al
c000e3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e3ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3af:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3b5:	0f b6 d0             	movzx  edx,al
c000e3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3bc:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e3c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3cb:	8d 50 01             	lea    edx,[eax+0x1]
c000e3ce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e3d2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e3d8:	0f b6 d0             	movzx  edx,al
c000e3db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3df:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e3e3:	83 e1 3f             	and    ecx,0x3f
c000e3e6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3f4:	0f b6 d0             	movzx  edx,al
c000e3f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3fb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e406:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e40c:	0f b6 d0             	movzx  edx,al
c000e40f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e413:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e41c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e422:	8d 50 01             	lea    edx,[eax+0x1]
c000e425:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e429:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e42f:	0f b6 d0             	movzx  edx,al
c000e432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e436:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e43a:	83 e1 3f             	and    ecx,0x3f
c000e43d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e441:	90                   	nop
c000e442:	83 c4 0c             	add    esp,0xc
c000e445:	c3                   	ret    

c000e446 <Computer::setBootMessage(char const*)>:
c000e446:	c3                   	ret    
c000e447:	90                   	nop

c000e448 <Computer::start()>:
c000e448:	56                   	push   esi
c000e449:	53                   	push   ebx
c000e44a:	83 ec 10             	sub    esp,0x10
c000e44d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e451:	fb                   	sti    
c000e452:	68 3f 07 00 00       	push   0x73f
c000e457:	e8 78 10 00 00       	call   c000f4d4 <malloc>
c000e45c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e463:	89 c6                	mov    esi,eax
c000e465:	ff 35 54 d7 02 c0    	push   DWORD PTR ds:0xc002d754
c000e46b:	68 0f 82 02 c0       	push   0xc002820f
c000e470:	6a 01                	push   0x1
c000e472:	50                   	push   eax
c000e473:	e8 b6 df 00 00       	call   c001c42e <Process::Process(bool, char const*, Process*, char**)>
c000e478:	83 c4 20             	add    esp,0x20
c000e47b:	68 ff 00 00 00       	push   0xff
c000e480:	6a 00                	push   0x0
c000e482:	68 69 ee 00 c0       	push   0xc000ee69
c000e487:	56                   	push   esi
c000e488:	e8 9f e2 00 00       	call   c001c72c <Process::createThread(void (*)(void*), void*, int)>
c000e48d:	6a 7a                	push   0x7a
c000e48f:	6a 00                	push   0x0
c000e491:	68 8a cf 01 c0       	push   0xc001cf8a
c000e496:	ff 35 54 d7 02 c0    	push   DWORD PTR ds:0xc002d754
c000e49c:	e8 8b e2 00 00       	call   c001c72c <Process::createThread(void (*)(void*), void*, int)>
c000e4a1:	83 c4 20             	add    esp,0x20
c000e4a4:	a3 08 d7 02 c0       	mov    ds:0xc002d708,eax
c000e4a9:	e8 5d ee 00 00       	call   c001d30b <Vm::initialise8086()>
c000e4ae:	c6 05 2d c2 02 c0 01 	mov    BYTE PTR ds:0xc002c22d,0x1
c000e4b5:	e8 42 45 00 00       	call   c00129fc <initVFS()>
c000e4ba:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e4c0:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4c2:	6a 00                	push   0x0
c000e4c4:	6a 00                	push   0x0
c000e4c6:	6a 00                	push   0x0
c000e4c8:	50                   	push   eax
c000e4c9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e4cc:	e8 56 b0 00 00       	call   c0019527 <Krnl::loadSystemEnv()>
c000e4d1:	e8 00 c9 00 00       	call   c001add6 <setupSystemCalls()>
c000e4d6:	e8 33 50 00 00       	call   c001350e <loadClockSettings()>
c000e4db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e4de:	e8 f7 56 00 00       	call   c0013bda <Device::loadDriversForAll()>
c000e4e3:	58                   	pop    eax
c000e4e4:	8b 1d 28 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c228
c000e4ea:	5a                   	pop    edx
c000e4eb:	6a 01                	push   0x1
c000e4ed:	68 1c 82 02 c0       	push   0xc002821c
c000e4f2:	e8 8f da 00 00       	call   c001bf86 <Thr::loadDLL(char const*, bool)>
c000e4f7:	59                   	pop    ecx
c000e4f8:	5e                   	pop    esi
c000e4f9:	53                   	push   ebx
c000e4fa:	50                   	push   eax
c000e4fb:	e8 95 dc 00 00       	call   c001c195 <Thr::executeDLL(unsigned long, void*)>
c000e500:	c7 04 24 98 94 02 c0 	mov    DWORD PTR [esp],0xc0029498
c000e507:	e8 95 41 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000e50c:	83 c4 10             	add    esp,0x10
c000e50f:	83 ec 0c             	sub    esp,0xc
c000e512:	6a 02                	push   0x2
c000e514:	e8 77 e5 00 00       	call   c001ca90 <blockTask(TaskState)>
c000e519:	83 c4 10             	add    esp,0x10
c000e51c:	eb f1                	jmp    c000e50f <Computer::start()+0xc7>

c000e51e <firstTask()>:
c000e51e:	83 ec 18             	sub    esp,0x18
c000e521:	ff 35 28 c2 02 c0    	push   DWORD PTR ds:0xc002c228
c000e527:	e8 1c ff ff ff       	call   c000e448 <Computer::start()>

c000e52c <Computer::detectFeatures()>:
c000e52c:	55                   	push   ebp
c000e52d:	57                   	push   edi
c000e52e:	56                   	push   esi
c000e52f:	53                   	push   ebx
c000e530:	83 ec 1c             	sub    esp,0x1c
c000e533:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e537:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e541:	e8 53 1d ff ff       	call   c0000299 <detectCPUID>
c000e546:	85 c0                	test   eax,eax
c000e548:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e54e:	0f 95 c2             	setne  dl
c000e551:	83 e0 fd             	and    eax,0xfffffffd
c000e554:	d1 e2                	shl    edx,1
c000e556:	09 d0                	or     eax,edx
c000e558:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e55e:	a8 02                	test   al,0x2
c000e560:	75 46                	jne    c000e5a8 <Computer::detectFeatures()+0x7c>
c000e562:	f6 05 41 c2 02 c0 04 	test   BYTE PTR ds:0xc002c241,0x4
c000e569:	74 07                	je     c000e572 <Computer::detectFeatures()+0x46>
c000e56b:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e572:	e8 cf 63 01 00       	call   c0024946 <x87Detect>
c000e577:	83 e0 01             	and    eax,0x1
c000e57a:	c1 e0 04             	shl    eax,0x4
c000e57d:	88 c2                	mov    dl,al
c000e57f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e585:	83 e0 ef             	and    eax,0xffffffef
c000e588:	09 d0                	or     eax,edx
c000e58a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e590:	a8 10                	test   al,0x10
c000e592:	0f 85 2a 01 00 00    	jne    c000e6c2 <Computer::detectFeatures()+0x196>
c000e598:	84 c0                	test   al,al
c000e59a:	0f 88 45 01 00 00    	js     c000e6e5 <Computer::detectFeatures()+0x1b9>
c000e5a0:	83 c4 1c             	add    esp,0x1c
c000e5a3:	5b                   	pop    ebx
c000e5a4:	5e                   	pop    esi
c000e5a5:	5f                   	pop    edi
c000e5a6:	5d                   	pop    ebp
c000e5a7:	c3                   	ret    
c000e5a8:	83 ec 0c             	sub    esp,0xc
c000e5ab:	6a 20                	push   0x20
c000e5ad:	e8 92 9a 00 00       	call   c0018044 <CPU::cpuidCheckEDX(unsigned int)>
c000e5b2:	83 e0 01             	and    eax,0x1
c000e5b5:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e5bc:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e5c2:	83 e0 f7             	and    eax,0xfffffff7
c000e5c5:	09 d0                	or     eax,edx
c000e5c7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e5cd:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e5d4:	e8 6b 9a 00 00       	call   c0018044 <CPU::cpuidCheckEDX(unsigned int)>
c000e5d9:	83 e0 01             	and    eax,0x1
c000e5dc:	88 c2                	mov    dl,al
c000e5de:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e5e4:	83 e0 fe             	and    eax,0xfffffffe
c000e5e7:	09 d0                	or     eax,edx
c000e5e9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e5ef:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e5f6:	e8 49 9a 00 00       	call   c0018044 <CPU::cpuidCheckEDX(unsigned int)>
c000e5fb:	c1 e0 07             	shl    eax,0x7
c000e5fe:	88 c2                	mov    dl,al
c000e600:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e606:	83 e0 7f             	and    eax,0x7f
c000e609:	09 d0                	or     eax,edx
c000e60b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e611:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e618:	e8 27 9a 00 00       	call   c0018044 <CPU::cpuidCheckEDX(unsigned int)>
c000e61d:	83 c4 10             	add    esp,0x10
c000e620:	83 e0 01             	and    eax,0x1
c000e623:	c1 e0 05             	shl    eax,0x5
c000e626:	88 c2                	mov    dl,al
c000e628:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e62e:	83 e0 df             	and    eax,0xffffffdf
c000e631:	09 d0                	or     eax,edx
c000e633:	f7 05 40 c2 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002c240,0x401
c000e63d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e643:	0f 84 c2 00 00 00    	je     c000e70b <Computer::detectFeatures()+0x1df>
c000e649:	83 e0 fe             	and    eax,0xfffffffe
c000e64c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e652:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e658:	88 c2                	mov    dl,al
c000e65a:	83 e2 09             	and    edx,0x9
c000e65d:	fe ca                	dec    dl
c000e65f:	75 09                	jne    c000e66a <Computer::detectFeatures()+0x13e>
c000e661:	83 e0 fe             	and    eax,0xfffffffe
c000e664:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e66a:	83 ec 0c             	sub    esp,0xc
c000e66d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e671:	50                   	push   eax
c000e672:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e676:	55                   	push   ebp
c000e677:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e67b:	57                   	push   edi
c000e67c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e680:	56                   	push   esi
c000e681:	68 00 00 00 80       	push   0x80000000
c000e686:	e8 35 99 00 00       	call   c0017fc0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e68b:	83 c4 20             	add    esp,0x20
c000e68e:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e695:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e699:	0f 86 c3 fe ff ff    	jbe    c000e562 <Computer::detectFeatures()+0x36>
c000e69f:	83 ec 0c             	sub    esp,0xc
c000e6a2:	50                   	push   eax
c000e6a3:	55                   	push   ebp
c000e6a4:	57                   	push   edi
c000e6a5:	56                   	push   esi
c000e6a6:	68 01 00 00 80       	push   0x80000001
c000e6ab:	e8 10 99 00 00       	call   c0017fc0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e6b0:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e6ba:	83 c4 20             	add    esp,0x20
c000e6bd:	e9 a0 fe ff ff       	jmp    c000e562 <Computer::detectFeatures()+0x36>
c000e6c2:	e8 39 62 01 00       	call   c0024900 <absolutelyNoChanceInHell>
c000e6c7:	88 c2                	mov    dl,al
c000e6c9:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6cf:	c1 e2 07             	shl    edx,0x7
c000e6d2:	83 e0 7f             	and    eax,0x7f
c000e6d5:	09 d0                	or     eax,edx
c000e6d7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6dd:	84 c0                	test   al,al
c000e6df:	0f 89 bb fe ff ff    	jns    c000e5a0 <Computer::detectFeatures()+0x74>
c000e6e5:	e8 f6 61 01 00       	call   c00248e0 <avxDetect>
c000e6ea:	83 e0 01             	and    eax,0x1
c000e6ed:	c1 e0 05             	shl    eax,0x5
c000e6f0:	88 c2                	mov    dl,al
c000e6f2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e6f8:	83 e0 df             	and    eax,0xffffffdf
c000e6fb:	09 d0                	or     eax,edx
c000e6fd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e703:	83 c4 1c             	add    esp,0x1c
c000e706:	5b                   	pop    ebx
c000e707:	5e                   	pop    esi
c000e708:	5f                   	pop    edi
c000e709:	5d                   	pop    ebp
c000e70a:	c3                   	ret    
c000e70b:	83 ec 0c             	sub    esp,0xc
c000e70e:	68 00 02 00 00       	push   0x200
c000e713:	e8 2c 99 00 00       	call   c0018044 <CPU::cpuidCheckEDX(unsigned int)>
c000e718:	83 c4 10             	add    esp,0x10
c000e71b:	83 e0 01             	and    eax,0x1
c000e71e:	88 c2                	mov    dl,al
c000e720:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e726:	83 e0 fe             	and    eax,0xfffffffe
c000e729:	09 d0                	or     eax,edx
c000e72b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e731:	e9 1c ff ff ff       	jmp    c000e652 <Computer::detectFeatures()+0x126>

c000e736 <Computer::displayFeatures()>:
c000e736:	53                   	push   ebx
c000e737:	83 ec 14             	sub    esp,0x14
c000e73a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e73e:	68 3f 82 02 c0       	push   0xc002823f
c000e743:	e8 59 3f 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000e748:	83 c4 10             	add    esp,0x10
c000e74b:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e752:	0f 85 73 02 00 00    	jne    c000e9cb <Computer::displayFeatures()+0x295>
c000e758:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c000e75d:	83 ec 08             	sub    esp,0x8
c000e760:	50                   	push   eax
c000e761:	68 52 82 02 c0       	push   0xc0028252
c000e766:	e8 36 3f 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000e76b:	83 c4 10             	add    esp,0x10
c000e76e:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e775:	0f 85 8c 02 00 00    	jne    c000ea07 <Computer::displayFeatures()+0x2d1>
c000e77b:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c000e780:	83 ec 08             	sub    esp,0x8
c000e783:	50                   	push   eax
c000e784:	68 63 82 02 c0       	push   0xc0028263
c000e789:	e8 13 3f 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000e78e:	83 c4 10             	add    esp,0x10
c000e791:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e798:	0f 85 5f 02 00 00    	jne    c000e9fd <Computer::displayFeatures()+0x2c7>
c000e79e:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c000e7a3:	83 ec 08             	sub    esp,0x8
c000e7a6:	50                   	push   eax
c000e7a7:	68 74 82 02 c0       	push   0xc0028274
c000e7ac:	e8 f0 3e 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000e7b1:	83 c4 10             	add    esp,0x10
c000e7b4:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e7bb:	0f 85 32 02 00 00    	jne    c000e9f3 <Computer::displayFeatures()+0x2bd>
c000e7c1:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c000e7c6:	83 ec 08             	sub    esp,0x8
c000e7c9:	50                   	push   eax
c000e7ca:	68 85 82 02 c0       	push   0xc0028285
c000e7cf:	e8 cd 3e 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000e7d4:	83 c4 10             	add    esp,0x10
c000e7d7:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e7de:	0f 85 05 02 00 00    	jne    c000e9e9 <Computer::displayFeatures()+0x2b3>
c000e7e4:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c000e7e9:	83 ec 08             	sub    esp,0x8
c000e7ec:	50                   	push   eax
c000e7ed:	68 96 82 02 c0       	push   0xc0028296
c000e7f2:	e8 aa 3e 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000e7f7:	83 c4 10             	add    esp,0x10
c000e7fa:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e801:	0f 85 d8 01 00 00    	jne    c000e9df <Computer::displayFeatures()+0x2a9>
c000e807:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c000e80c:	83 ec 08             	sub    esp,0x8
c000e80f:	50                   	push   eax
c000e810:	68 a7 82 02 c0       	push   0xc00282a7
c000e815:	e8 87 3e 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000e81a:	83 c4 10             	add    esp,0x10
c000e81d:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e824:	0f 85 ab 01 00 00    	jne    c000e9d5 <Computer::displayFeatures()+0x29f>
c000e82a:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c000e82f:	83 ec 08             	sub    esp,0x8
c000e832:	50                   	push   eax
c000e833:	68 b8 82 02 c0       	push   0xc00282b8
c000e838:	e8 64 3e 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000e83d:	83 c4 10             	add    esp,0x10
c000e840:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e847:	0f 88 1b 02 00 00    	js     c000ea68 <Computer::displayFeatures()+0x332>
c000e84d:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c000e852:	83 ec 08             	sub    esp,0x8
c000e855:	50                   	push   eax
c000e856:	68 c9 82 02 c0       	push   0xc00282c9
c000e85b:	e8 41 3e 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000e860:	83 c4 10             	add    esp,0x10
c000e863:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e86a:	0f 85 a1 01 00 00    	jne    c000ea11 <Computer::displayFeatures()+0x2db>
c000e870:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c000e875:	83 ec 08             	sub    esp,0x8
c000e878:	50                   	push   eax
c000e879:	68 da 82 02 c0       	push   0xc00282da
c000e87e:	e8 1e 3e 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000e883:	83 c4 10             	add    esp,0x10
c000e886:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e88d:	0f 85 cb 01 00 00    	jne    c000ea5e <Computer::displayFeatures()+0x328>
c000e893:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c000e898:	83 ec 08             	sub    esp,0x8
c000e89b:	50                   	push   eax
c000e89c:	68 eb 82 02 c0       	push   0xc00282eb
c000e8a1:	e8 fb 3d 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000e8a6:	83 c4 10             	add    esp,0x10
c000e8a9:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e8b0:	0f 85 9e 01 00 00    	jne    c000ea54 <Computer::displayFeatures()+0x31e>
c000e8b6:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c000e8bb:	83 ec 08             	sub    esp,0x8
c000e8be:	50                   	push   eax
c000e8bf:	68 fc 82 02 c0       	push   0xc00282fc
c000e8c4:	e8 d8 3d 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000e8c9:	83 c4 10             	add    esp,0x10
c000e8cc:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e8d3:	0f 85 71 01 00 00    	jne    c000ea4a <Computer::displayFeatures()+0x314>
c000e8d9:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c000e8de:	83 ec 08             	sub    esp,0x8
c000e8e1:	50                   	push   eax
c000e8e2:	68 0d 83 02 c0       	push   0xc002830d
c000e8e7:	e8 b5 3d 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000e8ec:	83 c4 10             	add    esp,0x10
c000e8ef:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e8f6:	0f 85 44 01 00 00    	jne    c000ea40 <Computer::displayFeatures()+0x30a>
c000e8fc:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c000e901:	83 ec 08             	sub    esp,0x8
c000e904:	50                   	push   eax
c000e905:	68 1e 83 02 c0       	push   0xc002831e
c000e90a:	e8 92 3d 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000e90f:	83 c4 10             	add    esp,0x10
c000e912:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e919:	0f 85 17 01 00 00    	jne    c000ea36 <Computer::displayFeatures()+0x300>
c000e91f:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c000e924:	83 ec 08             	sub    esp,0x8
c000e927:	50                   	push   eax
c000e928:	68 2f 83 02 c0       	push   0xc002832f
c000e92d:	e8 6f 3d 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000e932:	83 c4 10             	add    esp,0x10
c000e935:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e93c:	0f 85 ea 00 00 00    	jne    c000ea2c <Computer::displayFeatures()+0x2f6>
c000e942:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c000e947:	83 ec 08             	sub    esp,0x8
c000e94a:	50                   	push   eax
c000e94b:	68 40 83 02 c0       	push   0xc0028340
c000e950:	e8 4c 3d 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000e955:	83 c4 10             	add    esp,0x10
c000e958:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e95f:	0f 88 0d 01 00 00    	js     c000ea72 <Computer::displayFeatures()+0x33c>
c000e965:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c000e96a:	83 ec 08             	sub    esp,0x8
c000e96d:	50                   	push   eax
c000e96e:	68 51 83 02 c0       	push   0xc0028351
c000e973:	e8 29 3d 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000e978:	83 c4 10             	add    esp,0x10
c000e97b:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e982:	0f 85 9a 00 00 00    	jne    c000ea22 <Computer::displayFeatures()+0x2ec>
c000e988:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c000e98d:	83 ec 08             	sub    esp,0x8
c000e990:	50                   	push   eax
c000e991:	68 62 83 02 c0       	push   0xc0028362
c000e996:	e8 06 3d 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000e99b:	83 c4 10             	add    esp,0x10
c000e99e:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e9a5:	75 74                	jne    c000ea1b <Computer::displayFeatures()+0x2e5>
c000e9a7:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c000e9ac:	83 ec 08             	sub    esp,0x8
c000e9af:	50                   	push   eax
c000e9b0:	68 73 83 02 c0       	push   0xc0028373
c000e9b5:	e8 e7 3c 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000e9ba:	c7 44 24 20 34 9b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0029b34
c000e9c2:	83 c4 18             	add    esp,0x18
c000e9c5:	5b                   	pop    ebx
c000e9c6:	e9 d6 3c 00 00       	jmp    c00126a1 <Dbg::kprintf(char const*, ...)>
c000e9cb:	b8 38 82 02 c0       	mov    eax,0xc0028238
c000e9d0:	e9 88 fd ff ff       	jmp    c000e75d <Computer::displayFeatures()+0x27>
c000e9d5:	b8 38 82 02 c0       	mov    eax,0xc0028238
c000e9da:	e9 50 fe ff ff       	jmp    c000e82f <Computer::displayFeatures()+0xf9>
c000e9df:	b8 38 82 02 c0       	mov    eax,0xc0028238
c000e9e4:	e9 23 fe ff ff       	jmp    c000e80c <Computer::displayFeatures()+0xd6>
c000e9e9:	b8 38 82 02 c0       	mov    eax,0xc0028238
c000e9ee:	e9 f6 fd ff ff       	jmp    c000e7e9 <Computer::displayFeatures()+0xb3>
c000e9f3:	b8 38 82 02 c0       	mov    eax,0xc0028238
c000e9f8:	e9 c9 fd ff ff       	jmp    c000e7c6 <Computer::displayFeatures()+0x90>
c000e9fd:	b8 38 82 02 c0       	mov    eax,0xc0028238
c000ea02:	e9 9c fd ff ff       	jmp    c000e7a3 <Computer::displayFeatures()+0x6d>
c000ea07:	b8 38 82 02 c0       	mov    eax,0xc0028238
c000ea0c:	e9 6f fd ff ff       	jmp    c000e780 <Computer::displayFeatures()+0x4a>
c000ea11:	b8 38 82 02 c0       	mov    eax,0xc0028238
c000ea16:	e9 5a fe ff ff       	jmp    c000e875 <Computer::displayFeatures()+0x13f>
c000ea1b:	b8 38 82 02 c0       	mov    eax,0xc0028238
c000ea20:	eb 8a                	jmp    c000e9ac <Computer::displayFeatures()+0x276>
c000ea22:	b8 38 82 02 c0       	mov    eax,0xc0028238
c000ea27:	e9 61 ff ff ff       	jmp    c000e98d <Computer::displayFeatures()+0x257>
c000ea2c:	b8 38 82 02 c0       	mov    eax,0xc0028238
c000ea31:	e9 11 ff ff ff       	jmp    c000e947 <Computer::displayFeatures()+0x211>
c000ea36:	b8 38 82 02 c0       	mov    eax,0xc0028238
c000ea3b:	e9 e4 fe ff ff       	jmp    c000e924 <Computer::displayFeatures()+0x1ee>
c000ea40:	b8 38 82 02 c0       	mov    eax,0xc0028238
c000ea45:	e9 b7 fe ff ff       	jmp    c000e901 <Computer::displayFeatures()+0x1cb>
c000ea4a:	b8 38 82 02 c0       	mov    eax,0xc0028238
c000ea4f:	e9 8a fe ff ff       	jmp    c000e8de <Computer::displayFeatures()+0x1a8>
c000ea54:	b8 38 82 02 c0       	mov    eax,0xc0028238
c000ea59:	e9 5d fe ff ff       	jmp    c000e8bb <Computer::displayFeatures()+0x185>
c000ea5e:	b8 38 82 02 c0       	mov    eax,0xc0028238
c000ea63:	e9 30 fe ff ff       	jmp    c000e898 <Computer::displayFeatures()+0x162>
c000ea68:	b8 38 82 02 c0       	mov    eax,0xc0028238
c000ea6d:	e9 e0 fd ff ff       	jmp    c000e852 <Computer::displayFeatures()+0x11c>
c000ea72:	b8 38 82 02 c0       	mov    eax,0xc0028238
c000ea77:	e9 ee fe ff ff       	jmp    c000e96a <Computer::displayFeatures()+0x234>

c000ea7c <Computer::rdmsr(unsigned int)>:
c000ea7c:	83 ec 0c             	sub    esp,0xc
c000ea7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea83:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ea8a:	74 0a                	je     c000ea96 <Computer::rdmsr(unsigned int)+0x1a>
c000ea8c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ea90:	0f 32                	rdmsr  
c000ea92:	83 c4 0c             	add    esp,0xc
c000ea95:	c3                   	ret    
c000ea96:	83 ec 0c             	sub    esp,0xc
c000ea99:	68 84 83 02 c0       	push   0xc0028384
c000ea9e:	e8 d9 aa 00 00       	call   c001957c <Krnl::panic(char const*)>
c000eaa3:	83 c4 10             	add    esp,0x10
c000eaa6:	eb e4                	jmp    c000ea8c <Computer::rdmsr(unsigned int)+0x10>

c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eaa8:	57                   	push   edi
c000eaa9:	56                   	push   esi
c000eaaa:	52                   	push   edx
c000eaab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaaf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eab3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eab7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eabe:	74 0e                	je     c000eace <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eac0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eac4:	89 f0                	mov    eax,esi
c000eac6:	89 fa                	mov    edx,edi
c000eac8:	0f 30                	wrmsr  
c000eaca:	58                   	pop    eax
c000eacb:	5e                   	pop    esi
c000eacc:	5f                   	pop    edi
c000eacd:	c3                   	ret    
c000eace:	83 ec 0c             	sub    esp,0xc
c000ead1:	68 8a 83 02 c0       	push   0xc002838a
c000ead6:	e8 a1 aa 00 00       	call   c001957c <Krnl::panic(char const*)>
c000eadb:	83 c4 10             	add    esp,0x10
c000eade:	eb e0                	jmp    c000eac0 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eae0 <Computer::nmiEnabled()>:
c000eae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eae4:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eaea:	c3                   	ret    
c000eaeb:	90                   	nop

c000eaec <Computer::readCMOS(unsigned char)>:
c000eaec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eaf0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eaf7:	19 c0                	sbb    eax,eax
c000eaf9:	83 e0 80             	and    eax,0xffffff80
c000eafc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eb00:	e6 70                	out    0x70,al
c000eb02:	e4 71                	in     al,0x71
c000eb04:	c3                   	ret    
c000eb05:	90                   	nop

c000eb06 <Computer::enableNMI(bool)>:
c000eb06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb0e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eb14:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eb1c:	eb ce                	jmp    c000eaec <Computer::readCMOS(unsigned char)>

c000eb1e <Computer::open(int, int, void*)>:
c000eb1e:	56                   	push   esi
c000eb1f:	53                   	push   ebx
c000eb20:	83 ec 10             	sub    esp,0x10
c000eb23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb27:	f6 05 40 c2 02 c0 04 	test   BYTE PTR ds:0xc002c240,0x4
c000eb2e:	68 68 22 00 00       	push   0x2268
c000eb33:	0f 94 05 60 b1 02 c0 	sete   BYTE PTR ds:0xc002b160
c000eb3a:	e8 95 09 00 00       	call   c000f4d4 <malloc>
c000eb3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb42:	89 c6                	mov    esi,eax
c000eb44:	e8 07 8b 00 00       	call   c0017650 <ACPI::ACPI()>
c000eb49:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eb4f:	58                   	pop    eax
c000eb50:	5a                   	pop    edx
c000eb51:	56                   	push   esi
c000eb52:	53                   	push   ebx
c000eb53:	e8 38 4f 00 00       	call   c0013a90 <Device::addChild(Device*)>
c000eb58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb5b:	e8 cc f9 ff ff       	call   c000e52c <Computer::detectFeatures()>
c000eb60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb63:	e8 ce fb ff ff       	call   c000e736 <Computer::displayFeatures()>
c000eb68:	59                   	pop    ecx
c000eb69:	5e                   	pop    esi
c000eb6a:	6a 01                	push   0x1
c000eb6c:	53                   	push   ebx
c000eb6d:	e8 94 ff ff ff       	call   c000eb06 <Computer::enableNMI(bool)>
c000eb72:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eb79:	e8 56 09 00 00       	call   c000f4d4 <malloc>
c000eb7e:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb81:	89 c6                	mov    esi,eax
c000eb83:	e8 74 95 00 00       	call   c00180fc <CPU::CPU()>
c000eb88:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eb8e:	58                   	pop    eax
c000eb8f:	5a                   	pop    edx
c000eb90:	56                   	push   esi
c000eb91:	53                   	push   ebx
c000eb92:	e8 f9 4e 00 00       	call   c0013a90 <Device::addChild(Device*)>
c000eb97:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eb9d:	8b 10                	mov    edx,DWORD PTR [eax]
c000eb9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eba3:	6a 00                	push   0x0
c000eba5:	6a 00                	push   0x0
c000eba7:	50                   	push   eax
c000eba8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebab:	83 c4 20             	add    esp,0x20
c000ebae:	e8 4f 54 00 00       	call   c0014002 <setupFPU()>
c000ebb3:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ebb9:	85 c0                	test   eax,eax
c000ebbb:	74 1f                	je     c000ebdc <Computer::open(int, int, void*)+0xbe>
c000ebbd:	83 ec 08             	sub    esp,0x8
c000ebc0:	50                   	push   eax
c000ebc1:	53                   	push   ebx
c000ebc2:	e8 c9 4e 00 00       	call   c0013a90 <Device::addChild(Device*)>
c000ebc7:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ebcd:	8b 10                	mov    edx,DWORD PTR [eax]
c000ebcf:	6a 00                	push   0x0
c000ebd1:	6a 00                	push   0x0
c000ebd3:	6a 00                	push   0x0
c000ebd5:	50                   	push   eax
c000ebd6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebd9:	83 c4 20             	add    esp,0x20
c000ebdc:	83 ec 0c             	sub    esp,0xc
c000ebdf:	68 1e e5 00 c0       	push   0xc000e51e
c000ebe4:	e8 43 dc 00 00       	call   c001c82c <setupMultitasking(void (*)())>
c000ebe9:	83 c4 14             	add    esp,0x14
c000ebec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ebf1:	5b                   	pop    ebx
c000ebf2:	5e                   	pop    esi
c000ebf3:	c3                   	ret    

c000ebf4 <Computer::disableNMI()>:
c000ebf4:	6a 00                	push   0x0
c000ebf6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ebfa:	e8 07 ff ff ff       	call   c000eb06 <Computer::enableNMI(bool)>
c000ebff:	58                   	pop    eax
c000ec00:	5a                   	pop    edx
c000ec01:	c3                   	ret    

c000ec02 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ec02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec06:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ec0d:	19 c0                	sbb    eax,eax
c000ec0f:	83 e0 80             	and    eax,0xffffff80
c000ec12:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ec16:	e6 70                	out    0x70,al
c000ec18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec1c:	e6 71                	out    0x71,al
c000ec1e:	c3                   	ret    
c000ec1f:	90                   	nop

c000ec20 <Computer::handleNMI()>:
c000ec20:	56                   	push   esi
c000ec21:	53                   	push   ebx
c000ec22:	83 ec 10             	sub    esp,0x10
c000ec25:	e4 92                	in     al,0x92
c000ec27:	89 c6                	mov    esi,eax
c000ec29:	e4 61                	in     al,0x61
c000ec2b:	68 90 83 02 c0       	push   0xc0028390
c000ec30:	88 c3                	mov    bl,al
c000ec32:	e8 6a 3a 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000ec37:	83 c4 10             	add    esp,0x10
c000ec3a:	83 e6 10             	and    esi,0x10
c000ec3d:	75 0d                	jne    c000ec4c <Computer::handleNMI()+0x2c>
c000ec3f:	f6 c3 40             	test   bl,0x40
c000ec42:	75 1d                	jne    c000ec61 <Computer::handleNMI()+0x41>
c000ec44:	84 db                	test   bl,bl
c000ec46:	78 2d                	js     c000ec75 <Computer::handleNMI()+0x55>
c000ec48:	58                   	pop    eax
c000ec49:	5b                   	pop    ebx
c000ec4a:	5e                   	pop    esi
c000ec4b:	c3                   	ret    
c000ec4c:	83 ec 0c             	sub    esp,0xc
c000ec4f:	68 a1 83 02 c0       	push   0xc00283a1
c000ec54:	e8 23 a9 00 00       	call   c001957c <Krnl::panic(char const*)>
c000ec59:	83 c4 10             	add    esp,0x10
c000ec5c:	f6 c3 40             	test   bl,0x40
c000ec5f:	74 e3                	je     c000ec44 <Computer::handleNMI()+0x24>
c000ec61:	83 ec 0c             	sub    esp,0xc
c000ec64:	68 ae 83 02 c0       	push   0xc00283ae
c000ec69:	e8 0e a9 00 00       	call   c001957c <Krnl::panic(char const*)>
c000ec6e:	83 c4 10             	add    esp,0x10
c000ec71:	84 db                	test   bl,bl
c000ec73:	79 d3                	jns    c000ec48 <Computer::handleNMI()+0x28>
c000ec75:	c7 44 24 10 b8 83 02 c0 	mov    DWORD PTR [esp+0x10],0xc00283b8
c000ec7d:	5a                   	pop    edx
c000ec7e:	5b                   	pop    ebx
c000ec7f:	5e                   	pop    esi
c000ec80:	e9 f7 a8 00 00       	jmp    c001957c <Krnl::panic(char const*)>
c000ec85:	90                   	nop

c000ec86 <Computer::setDiskActivityLight(int, bool)>:
c000ec86:	56                   	push   esi
c000ec87:	53                   	push   ebx
c000ec88:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ec8c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ec91:	77 1b                	ja     c000ecae <Computer::setDiskActivityLight(int, bool)+0x28>
c000ec93:	e4 92                	in     al,0x92
c000ec95:	bb 40 00 00 00       	mov    ebx,0x40
c000ec9a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ec9e:	89 da                	mov    edx,ebx
c000eca0:	d3 e2                	shl    edx,cl
c000eca2:	89 f1                	mov    ecx,esi
c000eca4:	f7 d2                	not    edx
c000eca6:	d3 e3                	shl    ebx,cl
c000eca8:	21 d0                	and    eax,edx
c000ecaa:	09 d8                	or     eax,ebx
c000ecac:	e6 92                	out    0x92,al
c000ecae:	5b                   	pop    ebx
c000ecaf:	5e                   	pop    esi
c000ecb0:	c3                   	ret    
c000ecb1:	90                   	nop

c000ecb2 <GDTEntry::setBase(unsigned int)>:
c000ecb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecb6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ecba:	89 c1                	mov    ecx,eax
c000ecbc:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ecc0:	c1 e9 10             	shr    ecx,0x10
c000ecc3:	c1 e8 18             	shr    eax,0x18
c000ecc6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ecc9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000eccc:	c3                   	ret    
c000eccd:	90                   	nop

c000ecce <GDTEntry::setLimit(unsigned int)>:
c000ecce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ecd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecd6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ecd9:	66 89 01             	mov    WORD PTR [ecx],ax
c000ecdc:	83 e2 f0             	and    edx,0xfffffff0
c000ecdf:	c1 e8 10             	shr    eax,0x10
c000ece2:	83 e0 0f             	and    eax,0xf
c000ece5:	09 d0                	or     eax,edx
c000ece7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ecea:	c3                   	ret    
c000eceb:	90                   	nop

c000ecec <GDT::GDT()>:
c000ecec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecf0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ecf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecfa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ed00:	90                   	nop
c000ed01:	c3                   	ret    

c000ed02 <GDT::addEntry(GDTEntry)>:
c000ed02:	53                   	push   ebx
c000ed03:	83 ec 0c             	sub    esp,0xc
c000ed06:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ed0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed0c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ed13:	52                   	push   edx
c000ed14:	50                   	push   eax
c000ed15:	68 f4 83 02 c0       	push   0xc00283f4
c000ed1a:	e8 82 39 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000ed1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed21:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ed25:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ed29:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000ed2d:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000ed31:	8d 50 01             	lea    edx,[eax+0x1]
c000ed34:	c1 e0 03             	shl    eax,0x3
c000ed37:	89 13                	mov    DWORD PTR [ebx],edx
c000ed39:	83 c4 18             	add    esp,0x18
c000ed3c:	5b                   	pop    ebx
c000ed3d:	c3                   	ret    

c000ed3e <GDT::getNumberOfEntries()>:
c000ed3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed42:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed44:	c3                   	ret    
c000ed45:	90                   	nop

c000ed46 <GDT::flush()>:
c000ed46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed4a:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed4c:	83 c0 04             	add    eax,0x4
c000ed4f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ed56:	a3 32 c2 02 c0       	mov    ds:0xc002c232,eax
c000ed5b:	66 89 15 30 c2 02 c0 	mov    WORD PTR ds:0xc002c230,dx
c000ed62:	e9 96 16 ff ff       	jmp    c00003fd <loadGDT>
c000ed67:	90                   	nop

c000ed68 <GDT::setup()>:
c000ed68:	55                   	push   ebp
c000ed69:	57                   	push   edi
c000ed6a:	56                   	push   esi
c000ed6b:	53                   	push   ebx
c000ed6c:	83 ec 3c             	sub    esp,0x3c
c000ed6f:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ed73:	6a 00                	push   0x0
c000ed75:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ed79:	53                   	push   ebx
c000ed7a:	e8 33 ff ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000ed7f:	6a 00                	push   0x0
c000ed81:	53                   	push   ebx
c000ed82:	e8 47 ff ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000ed87:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ed8f:	6a 00                	push   0x0
c000ed91:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ed95:	53                   	push   ebx
c000ed96:	e8 17 ff ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000ed9b:	68 ff ff ff 00       	push   0xffffff
c000eda0:	53                   	push   ebx
c000eda1:	e8 28 ff ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000eda6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000edaa:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edaf:	0d 00 9a c0 00       	or     eax,0xc09a00
c000edb4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000edb8:	83 c4 20             	add    esp,0x20
c000edbb:	6a 00                	push   0x0
c000edbd:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000edc1:	53                   	push   ebx
c000edc2:	e8 eb fe ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000edc7:	68 ff ff ff 00       	push   0xffffff
c000edcc:	53                   	push   ebx
c000edcd:	e8 fc fe ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000edd2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000edd6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edda:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000edde:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ede2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ede6:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edeb:	0d 00 92 c0 00       	or     eax,0xc09200
c000edf0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000edf4:	89 d8                	mov    eax,ebx
c000edf6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000edfa:	80 cc 60             	or     ah,0x60
c000edfd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ee01:	83 c4 0c             	add    esp,0xc
c000ee04:	89 f8                	mov    eax,edi
c000ee06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee0a:	80 cc 60             	or     ah,0x60
c000ee0d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee11:	89 c7                	mov    edi,eax
c000ee13:	55                   	push   ebp
c000ee14:	e8 e9 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee19:	83 c4 0c             	add    esp,0xc
c000ee1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee20:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee24:	55                   	push   ebp
c000ee25:	e8 d8 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee2a:	83 c4 0c             	add    esp,0xc
c000ee2d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee31:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee35:	55                   	push   ebp
c000ee36:	e8 c7 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee3b:	83 c4 0c             	add    esp,0xc
c000ee3e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee46:	53                   	push   ebx
c000ee47:	51                   	push   ecx
c000ee48:	55                   	push   ebp
c000ee49:	e8 b4 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee4e:	83 c4 0c             	add    esp,0xc
c000ee51:	57                   	push   edi
c000ee52:	56                   	push   esi
c000ee53:	55                   	push   ebp
c000ee54:	e8 a9 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee59:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ee5c:	e8 e5 fe ff ff       	call   c000ed46 <GDT::flush()>
c000ee61:	83 c4 4c             	add    esp,0x4c
c000ee64:	5b                   	pop    ebx
c000ee65:	5e                   	pop    esi
c000ee66:	5f                   	pop    edi
c000ee67:	5d                   	pop    ebp
c000ee68:	c3                   	ret    

c000ee69 <idleFunction(void*)>:
c000ee69:	53                   	push   ebx
c000ee6a:	83 ec 08             	sub    esp,0x8
c000ee6d:	e8 8a d7 00 00       	call   c001c5fc <unlockScheduler()>
c000ee72:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c000ee77:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ee7d:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ee84:	74 3c                	je     c000eec2 <idleFunction(void*)+0x59>
c000ee86:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee8d:	74 33                	je     c000eec2 <idleFunction(void*)+0x59>
c000ee8f:	31 db                	xor    ebx,ebx
c000ee91:	52                   	push   edx
c000ee92:	52                   	push   edx
c000ee93:	68 e1 00 00 00       	push   0xe1
c000ee98:	50                   	push   eax
c000ee99:	e8 de fb ff ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c000ee9e:	53                   	push   ebx
c000ee9f:	83 e0 02             	and    eax,0x2
c000eea2:	50                   	push   eax
c000eea3:	68 e1 00 00 00       	push   0xe1
c000eea8:	ff 35 28 c2 02 c0    	push   DWORD PTR ds:0xc002c228
c000eeae:	e8 f5 fb ff ff       	call   c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000eeb3:	83 c4 20             	add    esp,0x20
c000eeb6:	e8 79 13 ff ff       	call   c0000234 <doTPAUSE>
c000eebb:	e8 c0 7a 01 00       	call   c0026980 <idleCommon()>
c000eec0:	eb f4                	jmp    c000eeb6 <idleFunction(void*)+0x4d>
c000eec2:	fb                   	sti    
c000eec3:	f4                   	hlt    
c000eec4:	e8 b7 7a 01 00       	call   c0026980 <idleCommon()>
c000eec9:	eb f7                	jmp    c000eec2 <idleFunction(void*)+0x59>
c000eecb:	90                   	nop

c000eecc <IDTEntry::IDTEntry(bool)>:
c000eecc:	83 ec 04             	sub    esp,0x4
c000eecf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eed3:	88 04 24             	mov    BYTE PTR [esp],al
c000eed6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeda:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eee0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eee4:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eee8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeec:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeef:	83 e2 f0             	and    edx,0xfffffff0
c000eef2:	83 ca 0e             	or     edx,0xe
c000eef5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eef8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eefc:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeff:	83 e2 ef             	and    edx,0xffffffef
c000ef02:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef05:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ef09:	74 04                	je     c000ef0f <IDTEntry::IDTEntry(bool)+0x43>
c000ef0b:	b2 03                	mov    dl,0x3
c000ef0d:	eb 02                	jmp    c000ef11 <IDTEntry::IDTEntry(bool)+0x45>
c000ef0f:	b2 00                	mov    dl,0x0
c000ef11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef15:	83 e2 03             	and    edx,0x3
c000ef18:	88 d1                	mov    cl,dl
c000ef1a:	c1 e1 05             	shl    ecx,0x5
c000ef1d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef20:	83 e2 9f             	and    edx,0xffffff9f
c000ef23:	09 ca                	or     edx,ecx
c000ef25:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef2c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef2f:	83 ca 80             	or     edx,0xffffff80
c000ef32:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef35:	90                   	nop
c000ef36:	83 c4 04             	add    esp,0x4
c000ef39:	c3                   	ret    

c000ef3a <IDTEntry::setOffset(unsigned int)>:
c000ef3a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ef3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef42:	66 89 02             	mov    WORD PTR [edx],ax
c000ef45:	c1 e8 10             	shr    eax,0x10
c000ef48:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ef4c:	c3                   	ret    
c000ef4d:	90                   	nop

c000ef4e <IDT::IDT()>:
c000ef4e:	90                   	nop
c000ef4f:	c3                   	ret    

c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ef50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef54:	83 c0 30             	add    eax,0x30
c000ef57:	c3                   	ret    

c000ef58 <IDT::addEntry(IDTEntry, int)>:
c000ef58:	53                   	push   ebx
c000ef59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef5d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ef61:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef69:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ef6c:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ef70:	5b                   	pop    ebx
c000ef71:	c3                   	ret    

c000ef72 <IDT::addEntry(int, void (*)(), bool)>:
c000ef72:	53                   	push   ebx
c000ef73:	83 ec 10             	sub    esp,0x10
c000ef76:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ef7b:	50                   	push   eax
c000ef7c:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ef80:	53                   	push   ebx
c000ef81:	e8 46 ff ff ff       	call   c000eecc <IDTEntry::IDTEntry(bool)>
c000ef86:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef8a:	53                   	push   ebx
c000ef8b:	e8 aa ff ff ff       	call   c000ef3a <IDTEntry::setOffset(unsigned int)>
c000ef90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef94:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef98:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef9c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000efa0:	e8 b3 ff ff ff       	call   c000ef58 <IDT::addEntry(IDTEntry, int)>
c000efa5:	83 c4 30             	add    esp,0x30
c000efa8:	5b                   	pop    ebx
c000efa9:	c3                   	ret    

c000efaa <IDT::flush()>:
c000efaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efae:	66 c7 05 38 c2 02 c0 ff 07 	mov    WORD PTR ds:0xc002c238,0x7ff
c000efb7:	a3 3a c2 02 c0       	mov    ds:0xc002c23a,eax
c000efbc:	0f 01 1d 38 c2 02 c0 	lidtd  ds:0xc002c238
c000efc3:	c3                   	ret    

c000efc4 <IDT::setup()>:
c000efc4:	57                   	push   edi
c000efc5:	56                   	push   esi
c000efc6:	53                   	push   ebx
c000efc7:	83 ec 10             	sub    esp,0x10
c000efca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000efce:	6a 00                	push   0x0
c000efd0:	68 1d 04 00 c0       	push   0xc000041d
c000efd5:	6a 00                	push   0x0
c000efd7:	53                   	push   ebx
c000efd8:	e8 95 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000efdd:	6a 00                	push   0x0
c000efdf:	68 2d 04 00 c0       	push   0xc000042d
c000efe4:	6a 01                	push   0x1
c000efe6:	53                   	push   ebx
c000efe7:	e8 86 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000efec:	83 c4 20             	add    esp,0x20
c000efef:	6a 00                	push   0x0
c000eff1:	68 37 04 00 c0       	push   0xc0000437
c000eff6:	6a 02                	push   0x2
c000eff8:	53                   	push   ebx
c000eff9:	e8 74 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000effe:	6a 00                	push   0x0
c000f000:	68 41 04 00 c0       	push   0xc0000441
c000f005:	6a 03                	push   0x3
c000f007:	53                   	push   ebx
c000f008:	e8 65 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f00d:	83 c4 20             	add    esp,0x20
c000f010:	6a 00                	push   0x0
c000f012:	68 4b 04 00 c0       	push   0xc000044b
c000f017:	6a 04                	push   0x4
c000f019:	53                   	push   ebx
c000f01a:	e8 53 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f01f:	6a 00                	push   0x0
c000f021:	68 55 04 00 c0       	push   0xc0000455
c000f026:	6a 05                	push   0x5
c000f028:	53                   	push   ebx
c000f029:	e8 44 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f02e:	83 c4 20             	add    esp,0x20
c000f031:	6a 00                	push   0x0
c000f033:	68 5f 04 00 c0       	push   0xc000045f
c000f038:	6a 06                	push   0x6
c000f03a:	53                   	push   ebx
c000f03b:	e8 32 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f040:	6a 00                	push   0x0
c000f042:	68 69 04 00 c0       	push   0xc0000469
c000f047:	6a 07                	push   0x7
c000f049:	53                   	push   ebx
c000f04a:	e8 23 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f04f:	83 c4 20             	add    esp,0x20
c000f052:	6a 00                	push   0x0
c000f054:	68 73 04 00 c0       	push   0xc0000473
c000f059:	6a 08                	push   0x8
c000f05b:	53                   	push   ebx
c000f05c:	e8 11 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f061:	6a 00                	push   0x0
c000f063:	68 7b 04 00 c0       	push   0xc000047b
c000f068:	6a 09                	push   0x9
c000f06a:	53                   	push   ebx
c000f06b:	e8 02 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f070:	83 c4 20             	add    esp,0x20
c000f073:	6a 00                	push   0x0
c000f075:	68 85 04 00 c0       	push   0xc0000485
c000f07a:	6a 0a                	push   0xa
c000f07c:	53                   	push   ebx
c000f07d:	e8 f0 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f082:	6a 00                	push   0x0
c000f084:	68 8d 04 00 c0       	push   0xc000048d
c000f089:	6a 0b                	push   0xb
c000f08b:	53                   	push   ebx
c000f08c:	e8 e1 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f091:	83 c4 20             	add    esp,0x20
c000f094:	6a 00                	push   0x0
c000f096:	68 95 04 00 c0       	push   0xc0000495
c000f09b:	6a 0c                	push   0xc
c000f09d:	53                   	push   ebx
c000f09e:	e8 cf fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0a3:	6a 00                	push   0x0
c000f0a5:	68 9d 04 00 c0       	push   0xc000049d
c000f0aa:	6a 0d                	push   0xd
c000f0ac:	53                   	push   ebx
c000f0ad:	e8 c0 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0b2:	83 c4 20             	add    esp,0x20
c000f0b5:	6a 00                	push   0x0
c000f0b7:	68 a5 04 00 c0       	push   0xc00004a5
c000f0bc:	6a 0e                	push   0xe
c000f0be:	53                   	push   ebx
c000f0bf:	e8 ae fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0c4:	6a 00                	push   0x0
c000f0c6:	68 ad 04 00 c0       	push   0xc00004ad
c000f0cb:	6a 0f                	push   0xf
c000f0cd:	53                   	push   ebx
c000f0ce:	e8 9f fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0d3:	83 c4 20             	add    esp,0x20
c000f0d6:	6a 00                	push   0x0
c000f0d8:	68 b7 04 00 c0       	push   0xc00004b7
c000f0dd:	6a 10                	push   0x10
c000f0df:	53                   	push   ebx
c000f0e0:	e8 8d fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0e5:	6a 00                	push   0x0
c000f0e7:	68 c1 04 00 c0       	push   0xc00004c1
c000f0ec:	6a 11                	push   0x11
c000f0ee:	53                   	push   ebx
c000f0ef:	e8 7e fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0f4:	83 c4 20             	add    esp,0x20
c000f0f7:	6a 00                	push   0x0
c000f0f9:	68 cb 04 00 c0       	push   0xc00004cb
c000f0fe:	6a 12                	push   0x12
c000f100:	53                   	push   ebx
c000f101:	e8 6c fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f106:	6a 01                	push   0x1
c000f108:	68 65 05 00 c0       	push   0xc0000565
c000f10d:	6a 60                	push   0x60
c000f10f:	53                   	push   ebx
c000f110:	e8 5d fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f115:	83 c4 20             	add    esp,0x20
c000f118:	6a 00                	push   0x0
c000f11a:	68 6c 05 00 c0       	push   0xc000056c
c000f11f:	6a 20                	push   0x20
c000f121:	53                   	push   ebx
c000f122:	e8 4b fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f127:	6a 00                	push   0x0
c000f129:	68 57 05 00 c0       	push   0xc0000557
c000f12e:	6a 21                	push   0x21
c000f130:	53                   	push   ebx
c000f131:	e8 3c fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f136:	83 c4 20             	add    esp,0x20
c000f139:	6a 00                	push   0x0
c000f13b:	68 5e 05 00 c0       	push   0xc000055e
c000f140:	6a 22                	push   0x22
c000f142:	53                   	push   ebx
c000f143:	e8 2a fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f148:	6a 00                	push   0x0
c000f14a:	68 d5 04 00 c0       	push   0xc00004d5
c000f14f:	6a 23                	push   0x23
c000f151:	53                   	push   ebx
c000f152:	e8 1b fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f157:	83 c4 20             	add    esp,0x20
c000f15a:	6a 00                	push   0x0
c000f15c:	68 df 04 00 c0       	push   0xc00004df
c000f161:	6a 24                	push   0x24
c000f163:	53                   	push   ebx
c000f164:	e8 09 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f169:	6a 00                	push   0x0
c000f16b:	68 e9 04 00 c0       	push   0xc00004e9
c000f170:	6a 25                	push   0x25
c000f172:	53                   	push   ebx
c000f173:	e8 fa fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f178:	83 c4 20             	add    esp,0x20
c000f17b:	6a 00                	push   0x0
c000f17d:	68 f3 04 00 c0       	push   0xc00004f3
c000f182:	6a 26                	push   0x26
c000f184:	53                   	push   ebx
c000f185:	e8 e8 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f18a:	6a 00                	push   0x0
c000f18c:	68 fd 04 00 c0       	push   0xc00004fd
c000f191:	6a 27                	push   0x27
c000f193:	53                   	push   ebx
c000f194:	e8 d9 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f199:	83 c4 20             	add    esp,0x20
c000f19c:	6a 00                	push   0x0
c000f19e:	68 07 05 00 c0       	push   0xc0000507
c000f1a3:	6a 28                	push   0x28
c000f1a5:	53                   	push   ebx
c000f1a6:	e8 c7 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ab:	6a 00                	push   0x0
c000f1ad:	68 11 05 00 c0       	push   0xc0000511
c000f1b2:	6a 29                	push   0x29
c000f1b4:	53                   	push   ebx
c000f1b5:	e8 b8 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ba:	83 c4 20             	add    esp,0x20
c000f1bd:	6a 00                	push   0x0
c000f1bf:	68 1b 05 00 c0       	push   0xc000051b
c000f1c4:	6a 2a                	push   0x2a
c000f1c6:	53                   	push   ebx
c000f1c7:	e8 a6 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1cc:	6a 00                	push   0x0
c000f1ce:	68 25 05 00 c0       	push   0xc0000525
c000f1d3:	6a 2b                	push   0x2b
c000f1d5:	53                   	push   ebx
c000f1d6:	e8 97 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1db:	83 c4 20             	add    esp,0x20
c000f1de:	6a 00                	push   0x0
c000f1e0:	68 2f 05 00 c0       	push   0xc000052f
c000f1e5:	6a 2c                	push   0x2c
c000f1e7:	53                   	push   ebx
c000f1e8:	e8 85 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ed:	6a 00                	push   0x0
c000f1ef:	68 39 05 00 c0       	push   0xc0000539
c000f1f4:	6a 2d                	push   0x2d
c000f1f6:	53                   	push   ebx
c000f1f7:	e8 76 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1fc:	83 c4 20             	add    esp,0x20
c000f1ff:	6a 00                	push   0x0
c000f201:	68 43 05 00 c0       	push   0xc0000543
c000f206:	6a 2e                	push   0x2e
c000f208:	53                   	push   ebx
c000f209:	e8 64 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f20e:	6a 00                	push   0x0
c000f210:	68 4d 05 00 c0       	push   0xc000054d
c000f215:	6a 2f                	push   0x2f
c000f217:	53                   	push   ebx
c000f218:	e8 55 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f21d:	83 c4 20             	add    esp,0x20
c000f220:	6a 00                	push   0x0
c000f222:	68 a2 05 00 c0       	push   0xc00005a2
c000f227:	6a 30                	push   0x30
c000f229:	53                   	push   ebx
c000f22a:	e8 43 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f22f:	6a 00                	push   0x0
c000f231:	68 ac 05 00 c0       	push   0xc00005ac
c000f236:	6a 31                	push   0x31
c000f238:	53                   	push   ebx
c000f239:	e8 34 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f23e:	83 c4 20             	add    esp,0x20
c000f241:	6a 00                	push   0x0
c000f243:	68 b6 05 00 c0       	push   0xc00005b6
c000f248:	6a 32                	push   0x32
c000f24a:	53                   	push   ebx
c000f24b:	e8 22 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f250:	6a 00                	push   0x0
c000f252:	68 c0 05 00 c0       	push   0xc00005c0
c000f257:	6a 33                	push   0x33
c000f259:	53                   	push   ebx
c000f25a:	e8 13 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f25f:	83 c4 20             	add    esp,0x20
c000f262:	6a 00                	push   0x0
c000f264:	68 ca 05 00 c0       	push   0xc00005ca
c000f269:	6a 34                	push   0x34
c000f26b:	53                   	push   ebx
c000f26c:	e8 01 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f271:	6a 00                	push   0x0
c000f273:	68 d4 05 00 c0       	push   0xc00005d4
c000f278:	6a 35                	push   0x35
c000f27a:	53                   	push   ebx
c000f27b:	e8 f2 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f280:	83 c4 20             	add    esp,0x20
c000f283:	6a 00                	push   0x0
c000f285:	68 de 05 00 c0       	push   0xc00005de
c000f28a:	6a 36                	push   0x36
c000f28c:	53                   	push   ebx
c000f28d:	e8 e0 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f292:	6a 00                	push   0x0
c000f294:	68 e8 05 00 c0       	push   0xc00005e8
c000f299:	6a 37                	push   0x37
c000f29b:	53                   	push   ebx
c000f29c:	e8 d1 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f2a1:	83 c4 20             	add    esp,0x20
c000f2a4:	e8 98 25 00 00       	call   c0011841 <Virt::getAKernelVAS()>
c000f2a9:	52                   	push   edx
c000f2aa:	6a 03                	push   0x3
c000f2ac:	6a 02                	push   0x2
c000f2ae:	50                   	push   eax
c000f2af:	e8 c8 2b 00 00       	call   c0011e7c <VAS::allocatePages(int, int)>
c000f2b4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f2bb:	89 c6                	mov    esi,eax
c000f2bd:	e8 12 02 00 00       	call   c000f4d4 <malloc>
c000f2c2:	81 c6 00 20 00 00    	add    esi,0x2000
c000f2c8:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2cb:	89 c7                	mov    edi,eax
c000f2cd:	e8 10 1d 00 00       	call   c0010fe2 <TSS::TSS()>
c000f2d2:	83 c4 0c             	add    esp,0xc
c000f2d5:	68 73 04 00 c0       	push   0xc0000473
c000f2da:	56                   	push   esi
c000f2db:	57                   	push   edi
c000f2dc:	e8 41 1d 00 00       	call   c0011022 <TSS::setup(unsigned long, unsigned long)>
c000f2e1:	59                   	pop    ecx
c000f2e2:	89 c6                	mov    esi,eax
c000f2e4:	5f                   	pop    edi
c000f2e5:	6a 00                	push   0x0
c000f2e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f2eb:	50                   	push   eax
c000f2ec:	e8 db fb ff ff       	call   c000eecc <IDTEntry::IDTEntry(bool)>
c000f2f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f2f5:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f2fa:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f301:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f307:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f30b:	80 ce 05             	or     dh,0x5
c000f30e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f311:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f315:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f319:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f31c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f31f:	e8 86 fc ff ff       	call   c000efaa <IDT::flush()>
c000f324:	83 c4 20             	add    esp,0x20
c000f327:	5b                   	pop    ebx
c000f328:	5e                   	pop    esi
c000f329:	5f                   	pop    edi
c000f32a:	c3                   	ret    

c000f32b <sbrk>:
c000f32b:	55                   	push   ebp
c000f32c:	57                   	push   edi
c000f32d:	56                   	push   esi
c000f32e:	53                   	push   ebx
c000f32f:	83 ec 1c             	sub    esp,0x1c
c000f332:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f336:	85 c0                	test   eax,eax
c000f338:	74 3e                	je     c000f378 <sbrk+0x4d>
c000f33a:	78 43                	js     c000f37f <sbrk+0x54>
c000f33c:	8b 15 28 c2 02 c0    	mov    edx,DWORD PTR ds:0xc002c228
c000f342:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f348:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f34e:	83 e2 01             	and    edx,0x1
c000f351:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f355:	8b 0d 40 b1 02 c0    	mov    ecx,DWORD PTR ds:0xc002b140
c000f35b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f35f:	05 ff 0f 00 00       	add    eax,0xfff
c000f364:	89 c2                	mov    edx,eax
c000f366:	78 2f                	js     c000f397 <sbrk+0x6c>
c000f368:	c1 fa 0c             	sar    edx,0xc
c000f36b:	89 d7                	mov    edi,edx
c000f36d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f371:	be 00 00 00 00       	mov    esi,0x0
c000f376:	eb 36                	jmp    c000f3ae <sbrk+0x83>
c000f378:	a1 40 b1 02 c0       	mov    eax,ds:0xc002b140
c000f37d:	eb 74                	jmp    c000f3f3 <sbrk+0xc8>
c000f37f:	83 ec 08             	sub    esp,0x8
c000f382:	50                   	push   eax
c000f383:	68 10 84 02 c0       	push   0xc0028410
c000f388:	e8 14 33 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000f38d:	83 c4 10             	add    esp,0x10
c000f390:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f395:	eb 5c                	jmp    c000f3f3 <sbrk+0xc8>
c000f397:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f39d:	eb c9                	jmp    c000f368 <sbrk+0x3d>
c000f39f:	81 05 40 b1 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002b140,0x1000
c000f3a9:	46                   	inc    esi
c000f3aa:	39 f7                	cmp    edi,esi
c000f3ac:	74 34                	je     c000f3e2 <sbrk+0xb7>
c000f3ae:	e8 8e 24 00 00       	call   c0011841 <Virt::getAKernelVAS()>
c000f3b3:	89 c3                	mov    ebx,eax
c000f3b5:	8b 2d 40 b1 02 c0    	mov    ebp,DWORD PTR ds:0xc002b140
c000f3bb:	e8 be 06 00 00       	call   c000fa7e <Phys::allocatePage()>
c000f3c0:	68 01 04 00 00       	push   0x401
c000f3c5:	55                   	push   ebp
c000f3c6:	50                   	push   eax
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 af 29 00 00       	call   c0011d7c <VAS::mapPage(unsigned long, unsigned long, int)>
c000f3cd:	83 c4 10             	add    esp,0x10
c000f3d0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3d5:	74 c8                	je     c000f39f <sbrk+0x74>
c000f3d7:	8b 1d 40 b1 02 c0    	mov    ebx,DWORD PTR ds:0xc002b140
c000f3dd:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f3e0:	eb bd                	jmp    c000f39f <sbrk+0x74>
c000f3e2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3e7:	75 12                	jne    c000f3fb <sbrk+0xd0>
c000f3e9:	0f 20 d8             	mov    eax,cr3
c000f3ec:	0f 22 d8             	mov    cr3,eax
c000f3ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3f3:	83 c4 1c             	add    esp,0x1c
c000f3f6:	5b                   	pop    ebx
c000f3f7:	5e                   	pop    esi
c000f3f8:	5f                   	pop    edi
c000f3f9:	5d                   	pop    ebp
c000f3fa:	c3                   	ret    
c000f3fb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f3ff:	89 cb                	mov    ebx,ecx
c000f401:	c1 eb 0a             	shr    ebx,0xa
c000f404:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f40a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f410:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f414:	c1 e0 0c             	shl    eax,0xc
c000f417:	01 c8                	add    eax,ecx
c000f419:	c1 e8 0a             	shr    eax,0xa
c000f41c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f421:	2d 00 00 40 00       	sub    eax,0x400000
c000f426:	39 c3                	cmp    ebx,eax
c000f428:	77 c5                	ja     c000f3ef <sbrk+0xc4>
c000f42a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f42d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f433:	39 d8                	cmp    eax,ebx
c000f435:	73 f3                	jae    c000f42a <sbrk+0xff>
c000f437:	eb b6                	jmp    c000f3ef <sbrk+0xc4>

c000f439 <mmap>:
c000f439:	83 ec 18             	sub    esp,0x18
c000f43c:	68 40 84 02 c0       	push   0xc0028440
c000f441:	e8 36 a1 00 00       	call   c001957c <Krnl::panic(char const*)>
c000f446:	b8 00 00 00 00       	mov    eax,0x0
c000f44b:	83 c4 1c             	add    esp,0x1c
c000f44e:	c3                   	ret    

c000f44f <munmap>:
c000f44f:	83 ec 18             	sub    esp,0x18
c000f452:	68 45 84 02 c0       	push   0xc0028445
c000f457:	e8 20 a1 00 00       	call   c001957c <Krnl::panic(char const*)>
c000f45c:	b8 00 00 00 00       	mov    eax,0x0
c000f461:	83 c4 1c             	add    esp,0x1c
c000f464:	c3                   	ret    

c000f465 <liballoc_lock()>:
c000f465:	83 ec 0c             	sub    esp,0xc
c000f468:	e8 8d d1 00 00       	call   c001c5fa <lockScheduler()>
c000f46d:	b8 00 00 00 00       	mov    eax,0x0
c000f472:	83 c4 0c             	add    esp,0xc
c000f475:	c3                   	ret    

c000f476 <liballoc_unlock()>:
c000f476:	83 ec 0c             	sub    esp,0xc
c000f479:	e8 7e d1 00 00       	call   c001c5fc <unlockScheduler()>
c000f47e:	b8 00 00 00 00       	mov    eax,0x0
c000f483:	83 c4 0c             	add    esp,0xc
c000f486:	c3                   	ret    

c000f487 <liballoc_alloc(int)>:
c000f487:	83 ec 0c             	sub    esp,0xc
c000f48a:	e8 b2 23 00 00       	call   c0011841 <Virt::getAKernelVAS()>
c000f48f:	83 ec 04             	sub    esp,0x4
c000f492:	6a 01                	push   0x1
c000f494:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f498:	50                   	push   eax
c000f499:	e8 de 29 00 00       	call   c0011e7c <VAS::allocatePages(int, int)>
c000f49e:	83 c4 1c             	add    esp,0x1c
c000f4a1:	c3                   	ret    

c000f4a2 <liballoc_free(void*, int)>:
c000f4a2:	83 ec 0c             	sub    esp,0xc
c000f4a5:	e8 97 23 00 00       	call   c0011841 <Virt::getAKernelVAS()>
c000f4aa:	83 ec 08             	sub    esp,0x8
c000f4ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f4b1:	50                   	push   eax
c000f4b2:	e8 81 26 00 00       	call   c0011b38 <VAS::freeAllocatedPages(unsigned long)>
c000f4b7:	b8 00 00 00 00       	mov    eax,0x0
c000f4bc:	83 c4 1c             	add    esp,0x1c
c000f4bf:	c3                   	ret    

c000f4c0 <realloc>:
c000f4c0:	83 ec 14             	sub    esp,0x14
c000f4c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4cb:	e8 34 1f ff ff       	call   c0001404 <dlrealloc>
c000f4d0:	83 c4 1c             	add    esp,0x1c
c000f4d3:	c3                   	ret    

c000f4d4 <malloc>:
c000f4d4:	83 ec 18             	sub    esp,0x18
c000f4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4db:	e8 e7 19 ff ff       	call   c0000ec7 <dlmalloc>
c000f4e0:	83 c4 1c             	add    esp,0x1c
c000f4e3:	c3                   	ret    

c000f4e4 <free>:
c000f4e4:	83 ec 18             	sub    esp,0x18
c000f4e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4eb:	e8 7c 16 ff ff       	call   c0000b6c <dlfree>
c000f4f0:	83 c4 1c             	add    esp,0x1c
c000f4f3:	c3                   	ret    

c000f4f4 <rfree>:
c000f4f4:	83 ec 18             	sub    esp,0x18
c000f4f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4fb:	e8 6c 16 ff ff       	call   c0000b6c <dlfree>
c000f500:	83 c4 1c             	add    esp,0x1c
c000f503:	c3                   	ret    

c000f504 <calloc>:
c000f504:	56                   	push   esi
c000f505:	53                   	push   ebx
c000f506:	83 ec 10             	sub    esp,0x10
c000f509:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f50d:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f512:	53                   	push   ebx
c000f513:	e8 bc ff ff ff       	call   c000f4d4 <malloc>
c000f518:	89 c6                	mov    esi,eax
c000f51a:	83 c4 0c             	add    esp,0xc
c000f51d:	53                   	push   ebx
c000f51e:	6a 00                	push   0x0
c000f520:	50                   	push   eax
c000f521:	e8 65 11 ff ff       	call   c000068b <memset>
c000f526:	89 f0                	mov    eax,esi
c000f528:	83 c4 14             	add    esp,0x14
c000f52b:	5b                   	pop    ebx
c000f52c:	5e                   	pop    esi
c000f52d:	c3                   	ret    

c000f52e <hwTextMode_loadInData(VgaText*)>:
c000f52e:	57                   	push   edi
c000f52f:	56                   	push   esi
c000f530:	53                   	push   ebx
c000f531:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000f535:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000f53b:	85 c0                	test   eax,eax
c000f53d:	7e 30                	jle    c000f56f <hwTextMode_loadInData(VgaText*)+0x41>
c000f53f:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000f542:	31 f6                	xor    esi,esi
c000f544:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000f547:	31 c0                	xor    eax,eax
c000f549:	c1 e1 05             	shl    ecx,0x5
c000f54c:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000f552:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000f556:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000f55a:	40                   	inc    eax
c000f55b:	83 f8 50             	cmp    eax,0x50
c000f55e:	75 f2                	jne    c000f552 <hwTextMode_loadInData(VgaText*)+0x24>
c000f560:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000f566:	46                   	inc    esi
c000f567:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f56d:	7f d5                	jg     c000f544 <hwTextMode_loadInData(VgaText*)+0x16>
c000f56f:	5b                   	pop    ebx
c000f570:	5e                   	pop    esi
c000f571:	5f                   	pop    edi
c000f572:	c3                   	ret    

c000f573 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f573:	56                   	push   esi
c000f574:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000f579:	53                   	push   ebx
c000f57a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f57e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f582:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000f588:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000f58e:	c1 e0 04             	shl    eax,0x4
c000f591:	83 e6 0f             	and    esi,0xf
c000f594:	0f b6 c0             	movzx  eax,al
c000f597:	41                   	inc    ecx
c000f598:	09 f0                	or     eax,esi
c000f59a:	83 c2 02             	add    edx,0x2
c000f59d:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000f5a1:	c1 e0 08             	shl    eax,0x8
c000f5a4:	09 f0                	or     eax,esi
c000f5a6:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f5aa:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000f5b0:	75 d0                	jne    c000f582 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000f5b2:	5b                   	pop    ebx
c000f5b3:	5e                   	pop    esi
c000f5b4:	c3                   	ret    

c000f5b5 <hwTextMode_showCursor(VgaText*, bool)>:
c000f5b5:	56                   	push   esi
c000f5b6:	53                   	push   ebx
c000f5b7:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000f5bc:	74 38                	je     c000f5f6 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000f5be:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f5c3:	b0 0a                	mov    al,0xa
c000f5c5:	89 da                	mov    edx,ebx
c000f5c7:	ee                   	out    dx,al
c000f5c8:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f5cd:	89 ca                	mov    edx,ecx
c000f5cf:	ec                   	in     al,dx
c000f5d0:	b2 0f                	mov    dl,0xf
c000f5d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f5d6:	83 e0 c0             	and    eax,0xffffffc0
c000f5d9:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f5df:	09 d0                	or     eax,edx
c000f5e1:	89 ca                	mov    edx,ecx
c000f5e3:	ee                   	out    dx,al
c000f5e4:	b0 0b                	mov    al,0xb
c000f5e6:	89 da                	mov    edx,ebx
c000f5e8:	ee                   	out    dx,al
c000f5e9:	89 ca                	mov    edx,ecx
c000f5eb:	ec                   	in     al,dx
c000f5ec:	83 e0 e0             	and    eax,0xffffffe0
c000f5ef:	83 c8 0f             	or     eax,0xf
c000f5f2:	ee                   	out    dx,al
c000f5f3:	5b                   	pop    ebx
c000f5f4:	5e                   	pop    esi
c000f5f5:	c3                   	ret    
c000f5f6:	b0 0a                	mov    al,0xa
c000f5f8:	ba d4 03 00 00       	mov    edx,0x3d4
c000f5fd:	ee                   	out    dx,al
c000f5fe:	b0 20                	mov    al,0x20
c000f600:	ba d5 03 00 00       	mov    edx,0x3d5
c000f605:	ee                   	out    dx,al
c000f606:	5b                   	pop    ebx
c000f607:	5e                   	pop    esi
c000f608:	c3                   	ret    

c000f609 <hwTextMode_update(VgaText*)>:
c000f609:	c3                   	ret    

c000f60a <hwTextMode_updateCursor(VgaText*)>:
c000f60a:	56                   	push   esi
c000f60b:	b9 19 00 00 00       	mov    ecx,0x19
c000f610:	53                   	push   ebx
c000f611:	be d4 03 00 00       	mov    esi,0x3d4
c000f616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f61a:	89 f2                	mov    edx,esi
c000f61c:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f622:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f628:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f62b:	c1 e1 04             	shl    ecx,0x4
c000f62e:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f634:	b0 0f                	mov    al,0xf
c000f636:	ee                   	out    dx,al
c000f637:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f63c:	88 c8                	mov    al,cl
c000f63e:	89 da                	mov    edx,ebx
c000f640:	ee                   	out    dx,al
c000f641:	b0 0e                	mov    al,0xe
c000f643:	89 f2                	mov    edx,esi
c000f645:	ee                   	out    dx,al
c000f646:	89 c8                	mov    eax,ecx
c000f648:	89 da                	mov    edx,ebx
c000f64a:	66 c1 e8 08          	shr    ax,0x8
c000f64e:	ee                   	out    dx,al
c000f64f:	5b                   	pop    ebx
c000f650:	5e                   	pop    esi
c000f651:	c3                   	ret    

c000f652 <hwTextMode_disableBlink(VgaText*, bool)>:
c000f652:	ba da 03 00 00       	mov    edx,0x3da
c000f657:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000f65c:	75 18                	jne    c000f676 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000f65e:	ec                   	in     al,dx
c000f65f:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f664:	b0 30                	mov    al,0x30
c000f666:	89 ca                	mov    edx,ecx
c000f668:	ee                   	out    dx,al
c000f669:	ba c1 03 00 00       	mov    edx,0x3c1
c000f66e:	ec                   	in     al,dx
c000f66f:	83 c8 08             	or     eax,0x8
c000f672:	89 ca                	mov    edx,ecx
c000f674:	ee                   	out    dx,al
c000f675:	c3                   	ret    
c000f676:	ec                   	in     al,dx
c000f677:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f67c:	b0 30                	mov    al,0x30
c000f67e:	89 ca                	mov    edx,ecx
c000f680:	ee                   	out    dx,al
c000f681:	ba c1 03 00 00       	mov    edx,0x3c1
c000f686:	ec                   	in     al,dx
c000f687:	83 e0 f7             	and    eax,0xfffffff7
c000f68a:	89 ca                	mov    edx,ecx
c000f68c:	ee                   	out    dx,al
c000f68d:	c3                   	ret    

c000f68e <hwTextMode_scrollScreen(VgaText*)>:
c000f68e:	55                   	push   ebp
c000f68f:	bd 02 00 00 00       	mov    ebp,0x2
c000f694:	57                   	push   edi
c000f695:	56                   	push   esi
c000f696:	53                   	push   ebx
c000f697:	83 ec 1c             	sub    esp,0x1c
c000f69a:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000f6a2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f6a6:	31 c0                	xor    eax,eax
c000f6a8:	eb 0b                	jmp    c000f6b5 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000f6aa:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f6b0:	74 57                	je     c000f709 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f6b2:	43                   	inc    ebx
c000f6b3:	89 f0                	mov    eax,esi
c000f6b5:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f6bb:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f6c1:	88 13                	mov    BYTE PTR [ebx],dl
c000f6c3:	8d 70 01             	lea    esi,[eax+0x1]
c000f6c6:	83 fd 18             	cmp    ebp,0x18
c000f6c9:	75 df                	jne    c000f6aa <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000f6cb:	a8 01                	test   al,0x1
c000f6cd:	75 13                	jne    c000f6e2 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000f6cf:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f6d2:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f6d8:	75 d8                	jne    c000f6b2 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000f6da:	83 c4 1c             	add    esp,0x1c
c000f6dd:	5b                   	pop    ebx
c000f6de:	5e                   	pop    esi
c000f6df:	5f                   	pop    edi
c000f6e0:	5d                   	pop    ebp
c000f6e1:	c3                   	ret    
c000f6e2:	83 ec 08             	sub    esp,0x8
c000f6e5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f6e9:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000f6f0:	50                   	push   eax
c000f6f1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f6f5:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000f6fc:	50                   	push   eax
c000f6fd:	e8 c0 0b 00 00       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c000f702:	83 c4 10             	add    esp,0x10
c000f705:	88 07                	mov    BYTE PTR [edi],al
c000f707:	eb c9                	jmp    c000f6d2 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000f709:	45                   	inc    ebp
c000f70a:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f712:	eb 8e                	jmp    c000f6a2 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000f714 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f714:	56                   	push   esi
c000f715:	53                   	push   ebx
c000f716:	83 ec 0c             	sub    esp,0xc
c000f719:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f71d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000f721:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f726:	50                   	push   eax
c000f727:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f72c:	50                   	push   eax
c000f72d:	e8 90 0b 00 00       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c000f732:	5a                   	pop    edx
c000f733:	0f b6 c0             	movzx  eax,al
c000f736:	59                   	pop    ecx
c000f737:	50                   	push   eax
c000f738:	89 f0                	mov    eax,esi
c000f73a:	0f be f0             	movsx  esi,al
c000f73d:	56                   	push   esi
c000f73e:	e8 25 0c 00 00       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c000f743:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f747:	ba 19 00 00 00       	mov    edx,0x19
c000f74c:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f752:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000f755:	8d 14 92             	lea    edx,[edx+edx*4]
c000f758:	c1 e1 04             	shl    ecx,0x4
c000f75b:	c1 e2 04             	shl    edx,0x4
c000f75e:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000f762:	01 ca                	add    edx,ecx
c000f764:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f76c:	83 c4 14             	add    esp,0x14
c000f76f:	5b                   	pop    ebx
c000f770:	5e                   	pop    esi
c000f771:	c3                   	ret    

c000f772 <setupTextMode()>:
c000f772:	c7 05 d8 c2 02 c0 52 f6 00 c0 	mov    DWORD PTR ds:0xc002c2d8,0xc000f652
c000f77c:	c7 05 c4 c2 02 c0 2e f5 00 c0 	mov    DWORD PTR ds:0xc002c2c4,0xc000f52e
c000f786:	c7 05 c0 c2 02 c0 73 f5 00 c0 	mov    DWORD PTR ds:0xc002c2c0,0xc000f573
c000f790:	c7 05 cc c2 02 c0 8e f6 00 c0 	mov    DWORD PTR ds:0xc002c2cc,0xc000f68e
c000f79a:	c7 05 d4 c2 02 c0 b5 f5 00 c0 	mov    DWORD PTR ds:0xc002c2d4,0xc000f5b5
c000f7a4:	c7 05 c8 c2 02 c0 09 f6 00 c0 	mov    DWORD PTR ds:0xc002c2c8,0xc000f609
c000f7ae:	c7 05 d0 c2 02 c0 0a f6 00 c0 	mov    DWORD PTR ds:0xc002c2d0,0xc000f60a
c000f7b8:	c7 05 dc c2 02 c0 14 f7 00 c0 	mov    DWORD PTR ds:0xc002c2dc,0xc000f714
c000f7c2:	c3                   	ret    

c000f7c3 <kernel_main>:
c000f7c3:	57                   	push   edi
c000f7c4:	bf f9 03 00 00       	mov    edi,0x3f9
c000f7c9:	56                   	push   esi
c000f7ca:	31 f6                	xor    esi,esi
c000f7cc:	53                   	push   ebx
c000f7cd:	83 ec 10             	sub    esp,0x10
c000f7d0:	e8 47 09 00 00       	call   c001011c <installVgaTextImplementation()>
c000f7d5:	e8 98 ff ff ff       	call   c000f772 <setupTextMode()>
c000f7da:	89 f0                	mov    eax,esi
c000f7dc:	89 fa                	mov    edx,edi
c000f7de:	ee                   	out    dx,al
c000f7df:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f7e4:	b0 80                	mov    al,0x80
c000f7e6:	89 da                	mov    edx,ebx
c000f7e8:	ee                   	out    dx,al
c000f7e9:	b1 03                	mov    cl,0x3
c000f7eb:	ba f8 03 00 00       	mov    edx,0x3f8
c000f7f0:	88 c8                	mov    al,cl
c000f7f2:	ee                   	out    dx,al
c000f7f3:	89 f0                	mov    eax,esi
c000f7f5:	89 fa                	mov    edx,edi
c000f7f7:	ee                   	out    dx,al
c000f7f8:	88 c8                	mov    al,cl
c000f7fa:	89 da                	mov    edx,ebx
c000f7fc:	ee                   	out    dx,al
c000f7fd:	b0 c7                	mov    al,0xc7
c000f7ff:	ba fa 03 00 00       	mov    edx,0x3fa
c000f804:	ee                   	out    dx,al
c000f805:	b0 0b                	mov    al,0xb
c000f807:	ba fc 03 00 00       	mov    edx,0x3fc
c000f80c:	ee                   	out    dx,al
c000f80d:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f812:	83 ec 0c             	sub    esp,0xc
c000f815:	05 ff 0f 00 00       	add    eax,0xfff
c000f81a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f81f:	50                   	push   eax
c000f820:	e8 b3 03 00 00       	call   c000fbd8 <Phys::physicalMemorySetup(unsigned int)>
c000f825:	e8 98 1f 00 00       	call   c00117c2 <Virt::virtualMemorySetup()>
c000f82a:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f830:	83 c4 10             	add    esp,0x10
c000f833:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f839:	75 0e                	jne    c000f849 <kernel_main+0x86>
c000f83b:	89 d8                	mov    eax,ebx
c000f83d:	25 48 03 00 00       	and    eax,0x348
c000f842:	3d 00 03 00 00       	cmp    eax,0x300
c000f847:	74 10                	je     c000f859 <kernel_main+0x96>
c000f849:	83 ec 0c             	sub    esp,0xc
c000f84c:	68 35 9b 02 c0       	push   0xc0029b35
c000f851:	e8 26 9d 00 00       	call   c001957c <Krnl::panic(char const*)>
c000f856:	83 c4 10             	add    esp,0x10
c000f859:	83 ec 0c             	sub    esp,0xc
c000f85c:	89 1d 40 c2 02 c0    	mov    DWORD PTR ds:0xc002c240,ebx
c000f862:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f866:	53                   	push   ebx
c000f867:	e8 0a 21 00 00       	call   c0011976 <VAS::VAS()>
c000f86c:	89 1d 84 c3 02 c0    	mov    DWORD PTR ds:0xc002c384,ebx
c000f872:	e8 a9 07 ff ff       	call   c0000020 <callGlobalConstructors>
c000f877:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f87e:	e8 51 fc ff ff       	call   c000f4d4 <malloc>
c000f883:	89 04 24             	mov    DWORD PTR [esp],eax
c000f886:	89 c6                	mov    esi,eax
c000f888:	e8 5d ea ff ff       	call   c000e2ea <Computer::Computer()>
c000f88d:	6a 00                	push   0x0
c000f88f:	89 35 28 c2 02 c0    	mov    DWORD PTR ds:0xc002c228,esi
c000f895:	6a 00                	push   0x0
c000f897:	6a 00                	push   0x0
c000f899:	56                   	push   esi
c000f89a:	e8 7f f2 ff ff       	call   c000eb1e <Computer::open(int, int, void*)>
c000f89f:	83 c4 14             	add    esp,0x14
c000f8a2:	53                   	push   ebx
c000f8a3:	e8 68 23 00 00       	call   c0011c10 <VAS::~VAS()>
c000f8a8:	c7 04 24 4c 84 02 c0 	mov    DWORD PTR [esp],0xc002844c
c000f8af:	e8 c8 9c 00 00       	call   c001957c <Krnl::panic(char const*)>
c000f8b4:	83 c4 20             	add    esp,0x20
c000f8b7:	5b                   	pop    ebx
c000f8b8:	5e                   	pop    esi
c000f8b9:	5f                   	pop    edi
c000f8ba:	c3                   	ret    

c000f8bb <Phys::allocateDMA(unsigned long)>:
c000f8bb:	55                   	push   ebp
c000f8bc:	31 d2                	xor    edx,edx
c000f8be:	57                   	push   edi
c000f8bf:	31 ed                	xor    ebp,ebp
c000f8c1:	56                   	push   esi
c000f8c2:	31 c9                	xor    ecx,ecx
c000f8c4:	53                   	push   ebx
c000f8c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8c9:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f8cf:	31 c0                	xor    eax,eax
c000f8d1:	c1 ee 0c             	shr    esi,0xc
c000f8d4:	eb 17                	jmp    c000f8ed <Phys::allocateDMA(unsigned long)+0x32>
c000f8d6:	85 c9                	test   ecx,ecx
c000f8d8:	75 04                	jne    c000f8de <Phys::allocateDMA(unsigned long)+0x23>
c000f8da:	89 d5                	mov    ebp,edx
c000f8dc:	89 d0                	mov    eax,edx
c000f8de:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f8e1:	39 de                	cmp    esi,ebx
c000f8e3:	74 20                	je     c000f905 <Phys::allocateDMA(unsigned long)+0x4a>
c000f8e5:	42                   	inc    edx
c000f8e6:	89 d9                	mov    ecx,ebx
c000f8e8:	83 fa 2f             	cmp    edx,0x2f
c000f8eb:	7f 11                	jg     c000f8fe <Phys::allocateDMA(unsigned long)+0x43>
c000f8ed:	80 ba 80 c2 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd3d80],0x0
c000f8f4:	74 e0                	je     c000f8d6 <Phys::allocateDMA(unsigned long)+0x1b>
c000f8f6:	31 c9                	xor    ecx,ecx
c000f8f8:	42                   	inc    edx
c000f8f9:	83 fa 2f             	cmp    edx,0x2f
c000f8fc:	7e ef                	jle    c000f8ed <Phys::allocateDMA(unsigned long)+0x32>
c000f8fe:	5b                   	pop    ebx
c000f8ff:	31 c0                	xor    eax,eax
c000f901:	5e                   	pop    esi
c000f902:	5f                   	pop    edi
c000f903:	5d                   	pop    ebp
c000f904:	c3                   	ret    
c000f905:	8d 14 30             	lea    edx,[eax+esi*1]
c000f908:	89 d7                	mov    edi,edx
c000f90a:	4f                   	dec    edi
c000f90b:	79 03                	jns    c000f910 <Phys::allocateDMA(unsigned long)+0x55>
c000f90d:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f910:	c1 ff 04             	sar    edi,0x4
c000f913:	89 c2                	mov    edx,eax
c000f915:	c1 fa 04             	sar    edx,0x4
c000f918:	39 fa                	cmp    edx,edi
c000f91a:	75 2f                	jne    c000f94b <Phys::allocateDMA(unsigned long)+0x90>
c000f91c:	85 db                	test   ebx,ebx
c000f91e:	74 1a                	je     c000f93a <Phys::allocateDMA(unsigned long)+0x7f>
c000f920:	be 80 c2 02 c0       	mov    esi,0xc002c280
c000f925:	8d 90 80 c2 02 c0    	lea    edx,[eax-0x3ffd3d80]
c000f92b:	f7 d6                	not    esi
c000f92d:	29 c6                	sub    esi,eax
c000f92f:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f932:	42                   	inc    edx
c000f933:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f936:	39 d9                	cmp    ecx,ebx
c000f938:	7f f5                	jg     c000f92f <Phys::allocateDMA(unsigned long)+0x74>
c000f93a:	85 ff                	test   edi,edi
c000f93c:	74 13                	je     c000f951 <Phys::allocateDMA(unsigned long)+0x96>
c000f93e:	5b                   	pop    ebx
c000f93f:	05 50 20 0c 00       	add    eax,0xc2050
c000f944:	5e                   	pop    esi
c000f945:	c1 e0 0c             	shl    eax,0xc
c000f948:	5f                   	pop    edi
c000f949:	5d                   	pop    ebp
c000f94a:	c3                   	ret    
c000f94b:	89 ea                	mov    edx,ebp
c000f94d:	31 c9                	xor    ecx,ecx
c000f94f:	eb a7                	jmp    c000f8f8 <Phys::allocateDMA(unsigned long)+0x3d>
c000f951:	5b                   	pop    ebx
c000f952:	c1 e0 0c             	shl    eax,0xc
c000f955:	5e                   	pop    esi
c000f956:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f95b:	5f                   	pop    edi
c000f95c:	5d                   	pop    ebp
c000f95d:	c3                   	ret    

c000f95e <Phys::freeDMA(unsigned long, unsigned long)>:
c000f95e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f962:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f966:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f96c:	c1 e9 0c             	shr    ecx,0xc
c000f96f:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f974:	76 25                	jbe    c000f99b <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f976:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f97b:	c1 e8 0c             	shr    eax,0xc
c000f97e:	8d 50 10             	lea    edx,[eax+0x10]
c000f981:	85 c9                	test   ecx,ecx
c000f983:	74 15                	je     c000f99a <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f985:	8d 82 80 c2 02 c0    	lea    eax,[edx-0x3ffd3d80]
c000f98b:	8d 94 11 80 c2 02 c0 	lea    edx,[ecx+edx*1-0x3ffd3d80]
c000f992:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f995:	40                   	inc    eax
c000f996:	39 d0                	cmp    eax,edx
c000f998:	75 f8                	jne    c000f992 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f99a:	c3                   	ret    
c000f99b:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f9a1:	c1 ea 0c             	shr    edx,0xc
c000f9a4:	eb db                	jmp    c000f981 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f9a6 <Phys::setPageState(unsigned long, bool)>:
c000f9a6:	56                   	push   esi
c000f9a7:	ba 01 00 00 00       	mov    edx,0x1
c000f9ac:	53                   	push   ebx
c000f9ad:	8b 35 44 b1 02 c0    	mov    esi,DWORD PTR ds:0xc002b144
c000f9b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f9bb:	89 c8                	mov    eax,ecx
c000f9bd:	83 e1 07             	and    ecx,0x7
c000f9c0:	c1 e8 03             	shr    eax,0x3
c000f9c3:	d3 e3                	shl    ebx,cl
c000f9c5:	01 c6                	add    esi,eax
c000f9c7:	d3 e2                	shl    edx,cl
c000f9c9:	f7 d2                	not    edx
c000f9cb:	20 16                	and    BYTE PTR [esi],dl
c000f9cd:	03 05 44 b1 02 c0    	add    eax,DWORD PTR ds:0xc002b144
c000f9d3:	08 18                	or     BYTE PTR [eax],bl
c000f9d5:	5b                   	pop    ebx
c000f9d6:	5e                   	pop    esi
c000f9d7:	c3                   	ret    

c000f9d8 <Phys::getPageState(unsigned long)>:
c000f9d8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f9dc:	8b 15 44 b1 02 c0    	mov    edx,DWORD PTR ds:0xc002b144
c000f9e2:	89 c8                	mov    eax,ecx
c000f9e4:	83 e1 07             	and    ecx,0x7
c000f9e7:	c1 e8 03             	shr    eax,0x3
c000f9ea:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f9ee:	d3 f8                	sar    eax,cl
c000f9f0:	83 e0 01             	and    eax,0x1
c000f9f3:	c3                   	ret    

c000f9f4 <Phys::freePage(unsigned long)>:
c000f9f4:	53                   	push   ebx
c000f9f5:	83 ec 08             	sub    esp,0x8
c000f9f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9fc:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fa02:	76 57                	jbe    c000fa5b <Phys::freePage(unsigned long)+0x67>
c000fa04:	c1 eb 0c             	shr    ebx,0xc
c000fa07:	53                   	push   ebx
c000fa08:	e8 cb ff ff ff       	call   c000f9d8 <Phys::getPageState(unsigned long)>
c000fa0d:	5a                   	pop    edx
c000fa0e:	84 c0                	test   al,al
c000fa10:	74 5b                	je     c000fa6d <Phys::freePage(unsigned long)+0x79>
c000fa12:	a1 6c c2 02 c0       	mov    eax,ds:0xc002c26c
c000fa17:	48                   	dec    eax
c000fa18:	a3 6c c2 02 c0       	mov    ds:0xc002c26c,eax
c000fa1d:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa20:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa23:	c1 e0 02             	shl    eax,0x2
c000fa26:	99                   	cdq    
c000fa27:	f7 3d 70 c2 02 c0    	idiv   DWORD PTR ds:0xc002c270
c000fa2d:	39 05 68 c2 02 c0    	cmp    DWORD PTR ds:0xc002c268,eax
c000fa33:	75 13                	jne    c000fa48 <Phys::freePage(unsigned long)+0x54>
c000fa35:	83 ec 08             	sub    esp,0x8
c000fa38:	6a 00                	push   0x0
c000fa3a:	53                   	push   ebx
c000fa3b:	e8 66 ff ff ff       	call   c000f9a6 <Phys::setPageState(unsigned long, bool)>
c000fa40:	83 c4 10             	add    esp,0x10
c000fa43:	83 c4 08             	add    esp,0x8
c000fa46:	5b                   	pop    ebx
c000fa47:	c3                   	ret    
c000fa48:	83 ec 0c             	sub    esp,0xc
c000fa4b:	a3 68 c2 02 c0       	mov    ds:0xc002c268,eax
c000fa50:	50                   	push   eax
c000fa51:	e8 5a 0a 00 00       	call   c00104b0 <VgaText::updateRAMUsageDisplay(int)>
c000fa56:	83 c4 10             	add    esp,0x10
c000fa59:	eb da                	jmp    c000fa35 <Phys::freePage(unsigned long)+0x41>
c000fa5b:	68 00 10 00 00       	push   0x1000
c000fa60:	53                   	push   ebx
c000fa61:	e8 f8 fe ff ff       	call   c000f95e <Phys::freeDMA(unsigned long, unsigned long)>
c000fa66:	59                   	pop    ecx
c000fa67:	5b                   	pop    ebx
c000fa68:	83 c4 08             	add    esp,0x8
c000fa6b:	5b                   	pop    ebx
c000fa6c:	c3                   	ret    
c000fa6d:	c7 44 24 10 67 84 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028467
c000fa75:	83 c4 08             	add    esp,0x8
c000fa78:	5b                   	pop    ebx
c000fa79:	e9 fe 9a 00 00       	jmp    c001957c <Krnl::panic(char const*)>

c000fa7e <Phys::allocatePage()>:
c000fa7e:	56                   	push   esi
c000fa7f:	53                   	push   ebx
c000fa80:	51                   	push   ecx
c000fa81:	8b 35 60 c2 02 c0    	mov    esi,DWORD PTR ds:0xc002c260
c000fa87:	89 f3                	mov    ebx,esi
c000fa89:	eb 0a                	jmp    c000fa95 <Phys::allocatePage()+0x17>
c000fa8b:	89 1d 60 c2 02 c0    	mov    DWORD PTR ds:0xc002c260,ebx
c000fa91:	39 de                	cmp    esi,ebx
c000fa93:	74 24                	je     c000fab9 <Phys::allocatePage()+0x3b>
c000fa95:	53                   	push   ebx
c000fa96:	e8 3d ff ff ff       	call   c000f9d8 <Phys::getPageState(unsigned long)>
c000fa9b:	5a                   	pop    edx
c000fa9c:	84 c0                	test   al,al
c000fa9e:	74 5a                	je     c000fafa <Phys::allocatePage()+0x7c>
c000faa0:	43                   	inc    ebx
c000faa1:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000faa7:	75 e2                	jne    c000fa8b <Phys::allocatePage()+0xd>
c000faa9:	31 db                	xor    ebx,ebx
c000faab:	c7 05 60 c2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c260,0x0
c000fab5:	39 de                	cmp    esi,ebx
c000fab7:	75 dc                	jne    c000fa95 <Phys::allocatePage()+0x17>
c000fab9:	83 ec 0c             	sub    esp,0xc
c000fabc:	68 7d 84 02 c0       	push   0xc002847d
c000fac1:	e8 db 2b 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000fac6:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000facd:	e8 e9 fd ff ff       	call   c000f8bb <Phys::allocateDMA(unsigned long)>
c000fad2:	83 c4 10             	add    esp,0x10
c000fad5:	85 c0                	test   eax,eax
c000fad7:	75 56                	jne    c000fb2f <Phys::allocatePage()+0xb1>
c000fad9:	83 ec 0c             	sub    esp,0xc
c000fadc:	68 8e 84 02 c0       	push   0xc002848e
c000fae1:	e8 96 9a 00 00       	call   c001957c <Krnl::panic(char const*)>
c000fae6:	83 c4 10             	add    esp,0x10
c000fae9:	8b 1d 60 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c260
c000faef:	53                   	push   ebx
c000faf0:	e8 e3 fe ff ff       	call   c000f9d8 <Phys::getPageState(unsigned long)>
c000faf5:	5a                   	pop    edx
c000faf6:	84 c0                	test   al,al
c000faf8:	75 a6                	jne    c000faa0 <Phys::allocatePage()+0x22>
c000fafa:	6a 01                	push   0x1
c000fafc:	53                   	push   ebx
c000fafd:	e8 a4 fe ff ff       	call   c000f9a6 <Phys::setPageState(unsigned long, bool)>
c000fb02:	a1 6c c2 02 c0       	mov    eax,ds:0xc002c26c
c000fb07:	59                   	pop    ecx
c000fb08:	40                   	inc    eax
c000fb09:	5b                   	pop    ebx
c000fb0a:	a3 6c c2 02 c0       	mov    ds:0xc002c26c,eax
c000fb0f:	8d 04 80             	lea    eax,[eax+eax*4]
c000fb12:	8d 04 80             	lea    eax,[eax+eax*4]
c000fb15:	c1 e0 02             	shl    eax,0x2
c000fb18:	99                   	cdq    
c000fb19:	f7 3d 70 c2 02 c0    	idiv   DWORD PTR ds:0xc002c270
c000fb1f:	39 05 68 c2 02 c0    	cmp    DWORD PTR ds:0xc002c268,eax
c000fb25:	75 0c                	jne    c000fb33 <Phys::allocatePage()+0xb5>
c000fb27:	a1 60 c2 02 c0       	mov    eax,ds:0xc002c260
c000fb2c:	c1 e0 0c             	shl    eax,0xc
c000fb2f:	5a                   	pop    edx
c000fb30:	5b                   	pop    ebx
c000fb31:	5e                   	pop    esi
c000fb32:	c3                   	ret    
c000fb33:	83 ec 0c             	sub    esp,0xc
c000fb36:	a3 68 c2 02 c0       	mov    ds:0xc002c268,eax
c000fb3b:	50                   	push   eax
c000fb3c:	e8 6f 09 00 00       	call   c00104b0 <VgaText::updateRAMUsageDisplay(int)>
c000fb41:	83 c4 10             	add    esp,0x10
c000fb44:	eb e1                	jmp    c000fb27 <Phys::allocatePage()+0xa9>

c000fb46 <Phys::allocateContiguousPages(int)>:
c000fb46:	57                   	push   edi
c000fb47:	56                   	push   esi
c000fb48:	53                   	push   ebx
c000fb49:	31 db                	xor    ebx,ebx
c000fb4b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fb4f:	e8 a6 ca 00 00       	call   c001c5fa <lockScheduler()>
c000fb54:	85 db                	test   ebx,ebx
c000fb56:	75 11                	jne    c000fb69 <Phys::allocateContiguousPages(int)+0x23>
c000fb58:	e8 21 ff ff ff       	call   c000fa7e <Phys::allocatePage()>
c000fb5d:	83 ff 01             	cmp    edi,0x1
c000fb60:	89 c6                	mov    esi,eax
c000fb62:	74 21                	je     c000fb85 <Phys::allocateContiguousPages(int)+0x3f>
c000fb64:	bb 01 00 00 00       	mov    ebx,0x1
c000fb69:	e8 10 ff ff ff       	call   c000fa7e <Phys::allocatePage()>
c000fb6e:	89 da                	mov    edx,ebx
c000fb70:	c1 e2 0c             	shl    edx,0xc
c000fb73:	01 f2                	add    edx,esi
c000fb75:	39 c2                	cmp    edx,eax
c000fb77:	74 17                	je     c000fb90 <Phys::allocateContiguousPages(int)+0x4a>
c000fb79:	bb 01 00 00 00       	mov    ebx,0x1
c000fb7e:	89 c6                	mov    esi,eax
c000fb80:	83 ff 01             	cmp    edi,0x1
c000fb83:	75 e4                	jne    c000fb69 <Phys::allocateContiguousPages(int)+0x23>
c000fb85:	e8 72 ca 00 00       	call   c001c5fc <unlockScheduler()>
c000fb8a:	89 f0                	mov    eax,esi
c000fb8c:	5b                   	pop    ebx
c000fb8d:	5e                   	pop    esi
c000fb8e:	5f                   	pop    edi
c000fb8f:	c3                   	ret    
c000fb90:	43                   	inc    ebx
c000fb91:	39 fb                	cmp    ebx,edi
c000fb93:	75 bf                	jne    c000fb54 <Phys::allocateContiguousPages(int)+0xe>
c000fb95:	e8 62 ca 00 00       	call   c001c5fc <unlockScheduler()>
c000fb9a:	89 f0                	mov    eax,esi
c000fb9c:	5b                   	pop    ebx
c000fb9d:	5e                   	pop    esi
c000fb9e:	5f                   	pop    edi
c000fb9f:	c3                   	ret    

c000fba0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fba0:	56                   	push   esi
c000fba1:	53                   	push   ebx
c000fba2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fba6:	39 1d 64 c2 02 c0    	cmp    DWORD PTR ds:0xc002c264,ebx
c000fbac:	73 06                	jae    c000fbb4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fbae:	89 1d 64 c2 02 c0    	mov    DWORD PTR ds:0xc002c264,ebx
c000fbb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbb8:	c1 eb 0c             	shr    ebx,0xc
c000fbbb:	c1 e8 0c             	shr    eax,0xc
c000fbbe:	39 d8                	cmp    eax,ebx
c000fbc0:	73 13                	jae    c000fbd5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fbc2:	6a 00                	push   0x0
c000fbc4:	8d 70 01             	lea    esi,[eax+0x1]
c000fbc7:	50                   	push   eax
c000fbc8:	e8 d9 fd ff ff       	call   c000f9a6 <Phys::setPageState(unsigned long, bool)>
c000fbcd:	5a                   	pop    edx
c000fbce:	89 f0                	mov    eax,esi
c000fbd0:	59                   	pop    ecx
c000fbd1:	39 f3                	cmp    ebx,esi
c000fbd3:	75 ed                	jne    c000fbc2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fbd5:	5b                   	pop    ebx
c000fbd6:	5e                   	pop    esi
c000fbd7:	c3                   	ret    

c000fbd8 <Phys::physicalMemorySetup(unsigned int)>:
c000fbd8:	55                   	push   ebp
c000fbd9:	57                   	push   edi
c000fbda:	56                   	push   esi
c000fbdb:	53                   	push   ebx
c000fbdc:	31 db                	xor    ebx,ebx
c000fbde:	83 ec 40             	sub    esp,0x40
c000fbe1:	6a 30                	push   0x30
c000fbe3:	6a 00                	push   0x0
c000fbe5:	68 80 c2 02 c0       	push   0xc002c280
c000fbea:	e8 9c 0a ff ff       	call   c000068b <memset>
c000fbef:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fbf3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fbf8:	05 00 10 00 00       	add    eax,0x1000
c000fbfd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fc01:	83 c4 10             	add    esp,0x10
c000fc04:	83 ec 08             	sub    esp,0x8
c000fc07:	6a 01                	push   0x1
c000fc09:	53                   	push   ebx
c000fc0a:	43                   	inc    ebx
c000fc0b:	e8 96 fd ff ff       	call   c000f9a6 <Phys::setPageState(unsigned long, bool)>
c000fc10:	83 c4 10             	add    esp,0x10
c000fc13:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fc19:	75 e9                	jne    c000fc04 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fc1b:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fc22:	66 85 c0             	test   ax,ax
c000fc25:	0f 84 8e 01 00 00    	je     c000fdb9 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fc2b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fc2f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fc37:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc3b:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fc40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fc44:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fc4c:	eb 15                	jmp    c000fc63 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fc4e:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fc52:	83 c3 18             	add    ebx,0x18
c000fc55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc59:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fc5d:	0f 84 66 01 00 00    	je     c000fdc9 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fc63:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fc66:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fc69:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fc6c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fc70:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fc74:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fc76:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fc79:	01 f0                	add    eax,esi
c000fc7b:	55                   	push   ebp
c000fc7c:	11 fa                	adc    edx,edi
c000fc7e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc82:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fc86:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fc8a:	56                   	push   esi
c000fc8b:	68 c8 84 02 c0       	push   0xc00284c8
c000fc90:	e8 0c 2a 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000fc95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fc99:	83 c4 10             	add    esp,0x10
c000fc9c:	09 f8                	or     eax,edi
c000fc9e:	0f 85 25 01 00 00    	jne    c000fdc9 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fca4:	4d                   	dec    ebp
c000fca5:	75 a7                	jne    c000fc4e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fca7:	ba 00 00 08 00       	mov    edx,0x80000
c000fcac:	89 c1                	mov    ecx,eax
c000fcae:	39 f2                	cmp    edx,esi
c000fcb0:	19 f9                	sbb    ecx,edi
c000fcb2:	0f 82 a7 00 00 00    	jb     c000fd5f <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fcb8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fcbc:	89 c1                	mov    ecx,eax
c000fcbe:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fcc2:	0f 83 97 00 00 00    	jae    c000fd5f <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fcc8:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fccd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fcd1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fcd5:	39 fa                	cmp    edx,edi
c000fcd7:	19 e8                	sbb    eax,ebp
c000fcd9:	0f 82 14 01 00 00    	jb     c000fdf3 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fcdf:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fce3:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fce7:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fced:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fcf2:	83 d5 ff             	adc    ebp,0xffffffff
c000fcf5:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fcf9:	31 c0                	xor    eax,eax
c000fcfb:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fcff:	39 fa                	cmp    edx,edi
c000fd01:	89 c1                	mov    ecx,eax
c000fd03:	19 e9                	sbb    ecx,ebp
c000fd05:	0f 83 43 ff ff ff    	jae    c000fc4e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd0b:	be 00 00 08 00       	mov    esi,0x80000
c000fd10:	50                   	push   eax
c000fd11:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fd15:	57                   	push   edi
c000fd16:	56                   	push   esi
c000fd17:	68 ec 84 02 c0       	push   0xc00284ec
c000fd1c:	e8 80 29 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000fd21:	5a                   	pop    edx
c000fd22:	59                   	pop    ecx
c000fd23:	57                   	push   edi
c000fd24:	56                   	push   esi
c000fd25:	e8 76 fe ff ff       	call   c000fba0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fd2a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fd2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fd32:	83 c4 0c             	add    esp,0xc
c000fd35:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fd39:	03 05 70 c2 02 c0    	add    eax,DWORD PTR ds:0xc002c270
c000fd3f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fd46:	a3 70 c2 02 c0       	mov    ds:0xc002c270,eax
c000fd4b:	52                   	push   edx
c000fd4c:	50                   	push   eax
c000fd4d:	68 aa 84 02 c0       	push   0xc00284aa
c000fd52:	e8 4a 29 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000fd57:	83 c4 10             	add    esp,0x10
c000fd5a:	e9 ef fe ff ff       	jmp    c000fc4e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd5f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fd63:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fd67:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fd6b:	39 ea                	cmp    edx,ebp
c000fd6d:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fd71:	0f 82 d7 fe ff ff    	jb     c000fc4e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd77:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fd7c:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fd80:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fd84:	0f 83 c4 fe ff ff    	jae    c000fc4e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd8a:	39 ee                	cmp    esi,ebp
c000fd8c:	89 f8                	mov    eax,edi
c000fd8e:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fd92:	0f 83 78 ff ff ff    	jae    c000fd10 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fd98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fda0:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fda4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fda8:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fdac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fdb0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fdb4:	e9 57 ff ff ff       	jmp    c000fd10 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fdb9:	83 ec 0c             	sub    esp,0xc
c000fdbc:	68 9c 84 02 c0       	push   0xc002849c
c000fdc1:	e8 b6 97 00 00       	call   c001957c <Krnl::panic(char const*)>
c000fdc6:	83 c4 10             	add    esp,0x10
c000fdc9:	bb 40 01 00 00       	mov    ebx,0x140
c000fdce:	83 ec 08             	sub    esp,0x8
c000fdd1:	6a 00                	push   0x0
c000fdd3:	53                   	push   ebx
c000fdd4:	43                   	inc    ebx
c000fdd5:	e8 cc fb ff ff       	call   c000f9a6 <Phys::setPageState(unsigned long, bool)>
c000fdda:	ff 05 70 c2 02 c0    	inc    DWORD PTR ds:0xc002c270
c000fde0:	83 c4 10             	add    esp,0x10
c000fde3:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fde9:	75 e3                	jne    c000fdce <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000fdeb:	83 c4 3c             	add    esp,0x3c
c000fdee:	5b                   	pop    ebx
c000fdef:	5e                   	pop    esi
c000fdf0:	5f                   	pop    edi
c000fdf1:	5d                   	pop    ebp
c000fdf2:	c3                   	ret    
c000fdf3:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fdfb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fe03:	e9 d7 fe ff ff       	jmp    c000fcdf <Phys::physicalMemorySetup(unsigned int)+0x107>

c000fe08 <Pipe::isAtty()>:
c000fe08:	31 c0                	xor    eax,eax
c000fe0a:	c3                   	ret    
c000fe0b:	90                   	nop

c000fe0c <Pipe::~Pipe()>:
c000fe0c:	83 ec 0c             	sub    esp,0xc
c000fe0f:	ba 58 85 02 c0       	mov    edx,0xc0028558
c000fe14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe18:	89 10                	mov    DWORD PTR [eax],edx
c000fe1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe1e:	83 ec 0c             	sub    esp,0xc
c000fe21:	50                   	push   eax
c000fe22:	e8 29 16 00 00       	call   c0011450 <UnixFile::~UnixFile()>
c000fe27:	83 c4 10             	add    esp,0x10
c000fe2a:	90                   	nop
c000fe2b:	83 c4 0c             	add    esp,0xc
c000fe2e:	c3                   	ret    
c000fe2f:	90                   	nop

c000fe30 <Pipe::~Pipe()>:
c000fe30:	83 ec 0c             	sub    esp,0xc
c000fe33:	83 ec 0c             	sub    esp,0xc
c000fe36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe3a:	e8 cd ff ff ff       	call   c000fe0c <Pipe::~Pipe()>
c000fe3f:	83 c4 10             	add    esp,0x10
c000fe42:	83 ec 08             	sub    esp,0x8
c000fe45:	6a 20                	push   0x20
c000fe47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe4b:	e8 71 27 00 00       	call   c00125c1 <operator delete(void*, unsigned long)>
c000fe50:	83 c4 10             	add    esp,0x10
c000fe53:	83 c4 0c             	add    esp,0xc
c000fe56:	c3                   	ret    
c000fe57:	90                   	nop

c000fe58 <Pipe::read(unsigned long long, void*, int*)>:
c000fe58:	55                   	push   ebp
c000fe59:	57                   	push   edi
c000fe5a:	56                   	push   esi
c000fe5b:	53                   	push   ebx
c000fe5c:	83 ec 1c             	sub    esp,0x1c
c000fe5f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fe63:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fe67:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fe6b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fe6e:	89 c8                	mov    eax,ecx
c000fe70:	99                   	cdq    
c000fe71:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fe75:	74 19                	je     c000fe90 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fe77:	39 f9                	cmp    ecx,edi
c000fe79:	89 d1                	mov    ecx,edx
c000fe7b:	19 f1                	sbb    ecx,esi
c000fe7d:	73 11                	jae    c000fe90 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fe7f:	e8 76 c7 00 00       	call   c001c5fa <lockScheduler()>
c000fe84:	e8 ad ca 00 00       	call   c001c936 <schedule()>
c000fe89:	e8 6e c7 00 00       	call   c001c5fc <unlockScheduler()>
c000fe8e:	eb db                	jmp    c000fe6b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fe90:	39 f8                	cmp    eax,edi
c000fe92:	89 d1                	mov    ecx,edx
c000fe94:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000fe98:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000fe9c:	19 f1                	sbb    ecx,esi
c000fe9e:	73 08                	jae    c000fea8 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000fea0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fea4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fea8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000feab:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000feae:	29 c6                	sub    esi,eax
c000feb0:	89 f1                	mov    ecx,esi
c000feb2:	c1 f9 1f             	sar    ecx,0x1f
c000feb5:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000feb9:	89 ca                	mov    edx,ecx
c000febb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000febf:	19 d1                	sbb    ecx,edx
c000fec1:	73 04                	jae    c000fec7 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000fec3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000fec7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fecb:	89 fd                	mov    ebp,edi
c000fecd:	29 f5                	sub    ebp,esi
c000fecf:	85 f6                	test   esi,esi
c000fed1:	74 12                	je     c000fee5 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000fed3:	52                   	push   edx
c000fed4:	56                   	push   esi
c000fed5:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000fed8:	50                   	push   eax
c000fed9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000fedd:	e8 73 07 ff ff       	call   c0000655 <memcpy>
c000fee2:	83 c4 10             	add    esp,0x10
c000fee5:	85 ed                	test   ebp,ebp
c000fee7:	74 12                	je     c000fefb <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000fee9:	50                   	push   eax
c000feea:	55                   	push   ebp
c000feeb:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000feee:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000fef2:	56                   	push   esi
c000fef3:	e8 5d 07 ff ff       	call   c0000655 <memcpy>
c000fef8:	83 c4 10             	add    esp,0x10
c000fefb:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000fefe:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ff01:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000ff04:	99                   	cdq    
c000ff05:	89 f7                	mov    edi,esi
c000ff07:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ff0b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000ff0f:	c1 ff 1f             	sar    edi,0x1f
c000ff12:	57                   	push   edi
c000ff13:	56                   	push   esi
c000ff14:	52                   	push   edx
c000ff15:	50                   	push   eax
c000ff16:	e8 61 4e 01 00       	call   c0024d7c <__umoddi3>
c000ff1b:	83 c4 10             	add    esp,0x10
c000ff1e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ff21:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff26:	75 10                	jne    c000ff38 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000ff28:	83 ec 0c             	sub    esp,0xc
c000ff2b:	68 15 85 02 c0       	push   0xc0028515
c000ff30:	e8 47 96 00 00       	call   c001957c <Krnl::panic(char const*)>
c000ff35:	83 c4 10             	add    esp,0x10
c000ff38:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff40:	89 10                	mov    DWORD PTR [eax],edx
c000ff42:	83 c4 1c             	add    esp,0x1c
c000ff45:	31 c0                	xor    eax,eax
c000ff47:	5b                   	pop    ebx
c000ff48:	5e                   	pop    esi
c000ff49:	5f                   	pop    edi
c000ff4a:	5d                   	pop    ebp
c000ff4b:	c3                   	ret    

c000ff4c <Pipe::write(unsigned long long, void*, int*)>:
c000ff4c:	55                   	push   ebp
c000ff4d:	57                   	push   edi
c000ff4e:	56                   	push   esi
c000ff4f:	53                   	push   ebx
c000ff50:	83 ec 1c             	sub    esp,0x1c
c000ff53:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ff57:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ff5b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ff5f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff62:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000ff65:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000ff68:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ff6c:	89 de                	mov    esi,ebx
c000ff6e:	89 df                	mov    edi,ebx
c000ff70:	c1 ff 1f             	sar    edi,0x1f
c000ff73:	01 c6                	add    esi,eax
c000ff75:	89 c8                	mov    eax,ecx
c000ff77:	11 d7                	adc    edi,edx
c000ff79:	99                   	cdq    
c000ff7a:	39 f1                	cmp    ecx,esi
c000ff7c:	89 d0                	mov    eax,edx
c000ff7e:	19 f8                	sbb    eax,edi
c000ff80:	b8 01 00 00 00       	mov    eax,0x1
c000ff85:	0f 82 80 00 00 00    	jb     c001000b <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ff8b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ff8e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ff91:	01 d8                	add    eax,ebx
c000ff93:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000ff97:	99                   	cdq    
c000ff98:	f7 f9                	idiv   ecx
c000ff9a:	29 d1                	sub    ecx,edx
c000ff9c:	89 d7                	mov    edi,edx
c000ff9e:	89 c8                	mov    eax,ecx
c000ffa0:	99                   	cdq    
c000ffa1:	39 ce                	cmp    esi,ecx
c000ffa3:	19 d3                	sbb    ebx,edx
c000ffa5:	bb 00 00 00 00       	mov    ebx,0x0
c000ffaa:	72 04                	jb     c000ffb0 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000ffac:	89 f3                	mov    ebx,esi
c000ffae:	29 cb                	sub    ebx,ecx
c000ffb0:	89 f1                	mov    ecx,esi
c000ffb2:	29 d9                	sub    ecx,ebx
c000ffb4:	74 1a                	je     c000ffd0 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000ffb6:	52                   	push   edx
c000ffb7:	51                   	push   ecx
c000ffb8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ffbc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ffc0:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ffc3:	57                   	push   edi
c000ffc4:	e8 8c 06 ff ff       	call   c0000655 <memcpy>
c000ffc9:	83 c4 10             	add    esp,0x10
c000ffcc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ffd0:	85 db                	test   ebx,ebx
c000ffd2:	74 12                	je     c000ffe6 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000ffd4:	50                   	push   eax
c000ffd5:	53                   	push   ebx
c000ffd6:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000ffda:	51                   	push   ecx
c000ffdb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000ffde:	e8 72 06 ff ff       	call   c0000655 <memcpy>
c000ffe3:	83 c4 10             	add    esp,0x10
c000ffe6:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000ffe9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ffee:	75 10                	jne    c0010000 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000fff0:	83 ec 0c             	sub    esp,0xc
c000fff3:	68 31 85 02 c0       	push   0xc0028531
c000fff8:	e8 7f 95 00 00       	call   c001957c <Krnl::panic(char const*)>
c000fffd:	83 c4 10             	add    esp,0x10
c0010000:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010004:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0010007:	89 38                	mov    DWORD PTR [eax],edi
c0010009:	31 c0                	xor    eax,eax
c001000b:	83 c4 1c             	add    esp,0x1c
c001000e:	5b                   	pop    ebx
c001000f:	5e                   	pop    esi
c0010010:	5f                   	pop    edi
c0010011:	5d                   	pop    ebp
c0010012:	c3                   	ret    
c0010013:	90                   	nop

c0010014 <Pipe::Pipe(int)>:
c0010014:	83 ec 0c             	sub    esp,0xc
c0010017:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001001b:	83 ec 08             	sub    esp,0x8
c001001e:	6a 00                	push   0x0
c0010020:	50                   	push   eax
c0010021:	e8 48 12 00 00       	call   c001126e <UnixFile::UnixFile(int)>
c0010026:	83 c4 10             	add    esp,0x10
c0010029:	ba 58 85 02 c0       	mov    edx,0xc0028558
c001002e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010032:	89 10                	mov    DWORD PTR [eax],edx
c0010034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010038:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001003c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001003f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010043:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001004a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001004e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010055:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010059:	83 ec 0c             	sub    esp,0xc
c001005c:	50                   	push   eax
c001005d:	e8 72 f4 ff ff       	call   c000f4d4 <malloc>
c0010062:	83 c4 10             	add    esp,0x10
c0010065:	89 c2                	mov    edx,eax
c0010067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001006b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001006e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010072:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010076:	90                   	nop
c0010077:	83 c4 0c             	add    esp,0xc
c001007a:	c3                   	ret    
c001007b:	90                   	nop

c001007c <VgaText::isAtty()>:
c001007c:	b0 01                	mov    al,0x1
c001007e:	c3                   	ret    
c001007f:	90                   	nop

c0010080 <VgaText::~VgaText()>:
c0010080:	83 ec 0c             	sub    esp,0xc
c0010083:	ba 14 86 02 c0       	mov    edx,0xc0028614
c0010088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001008c:	89 10                	mov    DWORD PTR [eax],edx
c001008e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010092:	83 ec 0c             	sub    esp,0xc
c0010095:	50                   	push   eax
c0010096:	e8 b5 13 00 00       	call   c0011450 <UnixFile::~UnixFile()>
c001009b:	83 c4 10             	add    esp,0x10
c001009e:	90                   	nop
c001009f:	83 c4 0c             	add    esp,0xc
c00100a2:	c3                   	ret    
c00100a3:	90                   	nop

c00100a4 <VgaText::~VgaText()>:
c00100a4:	83 ec 0c             	sub    esp,0xc
c00100a7:	83 ec 0c             	sub    esp,0xc
c00100aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100ae:	e8 cd ff ff ff       	call   c0010080 <VgaText::~VgaText()>
c00100b3:	83 c4 10             	add    esp,0x10
c00100b6:	83 ec 08             	sub    esp,0x8
c00100b9:	68 60 12 00 00       	push   0x1260
c00100be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100c2:	e8 fa 24 00 00       	call   c00125c1 <operator delete(void*, unsigned long)>
c00100c7:	83 c4 10             	add    esp,0x10
c00100ca:	83 c4 0c             	add    esp,0xc
c00100cd:	c3                   	ret    

c00100ce <VgaText::read(unsigned long long, void*, int*)>:
c00100ce:	83 ec 10             	sub    esp,0x10
c00100d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00100d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100dd:	e8 f3 57 00 00       	call   c00158d5 <readKeyboard(VgaText*, char*, unsigned long)>
c00100e2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00100e6:	89 02                	mov    DWORD PTR [edx],eax
c00100e8:	31 c0                	xor    eax,eax
c00100ea:	83 c4 1c             	add    esp,0x1c
c00100ed:	c3                   	ret    

c00100ee <setTerminalScrollLock(bool)>:
c00100ee:	c3                   	ret    

c00100ef <addToTerminalCycle(VgaText*)>:
c00100ef:	8b 15 e0 c2 02 c0    	mov    edx,DWORD PTR ds:0xc002c2e0
c00100f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100f9:	85 d2                	test   edx,edx
c00100fb:	75 0c                	jne    c0010109 <addToTerminalCycle(VgaText*)+0x1a>
c00100fd:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010103:	a3 e0 c2 02 c0       	mov    ds:0xc002c2e0,eax
c0010108:	c3                   	ret    
c0010109:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c001010f:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010115:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c001011b:	c3                   	ret    

c001011c <installVgaTextImplementation()>:
c001011c:	83 ec 10             	sub    esp,0x10
c001011f:	6a 20                	push   0x20
c0010121:	6a 00                	push   0x0
c0010123:	68 c0 c2 02 c0       	push   0xc002c2c0
c0010128:	e8 5e 05 ff ff       	call   c000068b <memset>
c001012d:	83 c4 1c             	add    esp,0x1c
c0010130:	c3                   	ret    

c0010131 <scrollTerminalScrollLock(int)>:
c0010131:	c3                   	ret    

c0010132 <VgaText::load()>:
c0010132:	53                   	push   ebx
c0010133:	31 c0                	xor    eax,eax
c0010135:	83 ec 58             	sub    esp,0x58
c0010138:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001013c:	89 e2                	mov    edx,esp
c001013e:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010142:	40                   	inc    eax
c0010143:	83 f8 50             	cmp    eax,0x50
c0010146:	75 f6                	jne    c001013e <VgaText::load()+0xc>
c0010148:	31 c0                	xor    eax,eax
c001014a:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010151:	84 c9                	test   cl,cl
c0010153:	74 06                	je     c001015b <VgaText::load()+0x29>
c0010155:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010158:	40                   	inc    eax
c0010159:	eb ef                	jmp    c001014a <VgaText::load()+0x18>
c001015b:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010161:	85 c0                	test   eax,eax
c0010163:	74 09                	je     c001016e <VgaText::load()+0x3c>
c0010165:	51                   	push   ecx
c0010166:	51                   	push   ecx
c0010167:	52                   	push   edx
c0010168:	53                   	push   ebx
c0010169:	ff d0                	call   eax
c001016b:	83 c4 10             	add    esp,0x10
c001016e:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010174:	85 c0                	test   eax,eax
c0010176:	74 09                	je     c0010181 <VgaText::load()+0x4f>
c0010178:	83 ec 0c             	sub    esp,0xc
c001017b:	53                   	push   ebx
c001017c:	ff d0                	call   eax
c001017e:	83 c4 10             	add    esp,0x10
c0010181:	83 c4 58             	add    esp,0x58
c0010184:	5b                   	pop    ebx
c0010185:	c3                   	ret    

c0010186 <VgaText::updateCursor()>:
c0010186:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001018a:	39 05 e4 c2 02 c0    	cmp    DWORD PTR ds:0xc002c2e4,eax
c0010190:	75 0c                	jne    c001019e <VgaText::updateCursor()+0x18>
c0010192:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010198:	85 c0                	test   eax,eax
c001019a:	74 02                	je     c001019e <VgaText::updateCursor()+0x18>
c001019c:	ff e0                	jmp    eax
c001019e:	c3                   	ret    
c001019f:	90                   	nop

c00101a0 <VgaText::showCursor(bool)>:
c00101a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101a8:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c00101ae:	c3                   	ret    
c00101af:	90                   	nop

c00101b0 <VgaText::disableBlink(bool)>:
c00101b0:	56                   	push   esi
c00101b1:	53                   	push   ebx
c00101b2:	51                   	push   ecx
c00101b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00101b7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00101bb:	39 1d e4 c2 02 c0    	cmp    DWORD PTR ds:0xc002c2e4,ebx
c00101c1:	75 18                	jne    c00101db <VgaText::disableBlink(bool)+0x2b>
c00101c3:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00101c9:	85 c0                	test   eax,eax
c00101cb:	74 0e                	je     c00101db <VgaText::disableBlink(bool)+0x2b>
c00101cd:	89 f1                	mov    ecx,esi
c00101cf:	52                   	push   edx
c00101d0:	52                   	push   edx
c00101d1:	0f b6 d1             	movzx  edx,cl
c00101d4:	52                   	push   edx
c00101d5:	53                   	push   ebx
c00101d6:	ff d0                	call   eax
c00101d8:	83 c4 10             	add    esp,0x10
c00101db:	89 f0                	mov    eax,esi
c00101dd:	83 f0 01             	xor    eax,0x1
c00101e0:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00101e6:	58                   	pop    eax
c00101e7:	5b                   	pop    ebx
c00101e8:	5e                   	pop    esi
c00101e9:	c3                   	ret    

c00101ea <VgaText::doANSI_SGR(int)>:
c00101ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101f2:	85 d2                	test   edx,edx
c00101f4:	75 14                	jne    c001020a <VgaText::doANSI_SGR(int)+0x20>
c00101f6:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00101fc:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010202:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c0010208:	eb 65                	jmp    c001026f <VgaText::doANSI_SGR(int)+0x85>
c001020a:	83 fa 07             	cmp    edx,0x7
c001020d:	75 14                	jne    c0010223 <VgaText::doANSI_SGR(int)+0x39>
c001020f:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010215:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c001021b:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010221:	eb 4c                	jmp    c001026f <VgaText::doANSI_SGR(int)+0x85>
c0010223:	83 fa 1b             	cmp    edx,0x1b
c0010226:	74 ce                	je     c00101f6 <VgaText::doANSI_SGR(int)+0xc>
c0010228:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001022b:	83 f9 07             	cmp    ecx,0x7
c001022e:	77 09                	ja     c0010239 <VgaText::doANSI_SGR(int)+0x4f>
c0010230:	8b 14 8d 80 b1 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd4e80]
c0010237:	eb 20                	jmp    c0010259 <VgaText::doANSI_SGR(int)+0x6f>
c0010239:	8d 4a d8             	lea    ecx,[edx-0x28]
c001023c:	83 f9 07             	cmp    ecx,0x7
c001023f:	77 09                	ja     c001024a <VgaText::doANSI_SGR(int)+0x60>
c0010241:	8b 14 8d 80 b1 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd4e80]
c0010248:	eb 25                	jmp    c001026f <VgaText::doANSI_SGR(int)+0x85>
c001024a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001024d:	83 f9 07             	cmp    ecx,0x7
c0010250:	77 0e                	ja     c0010260 <VgaText::doANSI_SGR(int)+0x76>
c0010252:	8b 14 95 38 b0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4fc8]
c0010259:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001025f:	c3                   	ret    
c0010260:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010263:	83 f9 07             	cmp    ecx,0x7
c0010266:	77 0d                	ja     c0010275 <VgaText::doANSI_SGR(int)+0x8b>
c0010268:	8b 14 95 10 b0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4ff0]
c001026f:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010275:	c3                   	ret    

c0010276 <VgaText::setDefaultBgColour(VgaColour)>:
c0010276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001027a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001027e:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010284:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001028a:	c3                   	ret    
c001028b:	90                   	nop

c001028c <VgaText::setDefaultFgColour(VgaColour)>:
c001028c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010290:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010294:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c001029a:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00102a0:	c3                   	ret    
c00102a1:	90                   	nop

c00102a2 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00102a2:	53                   	push   ebx
c00102a3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00102a7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00102ab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00102af:	51                   	push   ecx
c00102b0:	e8 c1 ff ff ff       	call   c0010276 <VgaText::setDefaultBgColour(VgaColour)>
c00102b5:	58                   	pop    eax
c00102b6:	5a                   	pop    edx
c00102b7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00102bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00102bf:	5b                   	pop    ebx
c00102c0:	eb ca                	jmp    c001028c <VgaText::setDefaultFgColour(VgaColour)>

c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>:
c00102c2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00102c6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00102cb:	83 e0 0f             	and    eax,0xf
c00102ce:	c1 e2 04             	shl    edx,0x4
c00102d1:	09 d0                	or     eax,edx
c00102d3:	c3                   	ret    

c00102d4 <VgaText::scrollScreen()>:
c00102d4:	57                   	push   edi
c00102d5:	56                   	push   esi
c00102d6:	be 01 00 00 00       	mov    esi,0x1
c00102db:	53                   	push   ebx
c00102dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102e0:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00102e6:	31 ff                	xor    edi,edi
c00102e8:	01 d9                	add    ecx,ebx
c00102ea:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00102ed:	83 fe 17             	cmp    esi,0x17
c00102f0:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00102f6:	75 28                	jne    c0010320 <VgaText::scrollScreen()+0x4c>
c00102f8:	f7 c7 01 00 00 00    	test   edi,0x1
c00102fe:	74 1c                	je     c001031c <VgaText::scrollScreen()+0x48>
c0010300:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010307:	50                   	push   eax
c0010308:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c001030f:	50                   	push   eax
c0010310:	e8 ad ff ff ff       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010315:	5a                   	pop    edx
c0010316:	5a                   	pop    edx
c0010317:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c001031a:	eb 04                	jmp    c0010320 <VgaText::scrollScreen()+0x4c>
c001031c:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010320:	47                   	inc    edi
c0010321:	41                   	inc    ecx
c0010322:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010328:	75 c0                	jne    c00102ea <VgaText::scrollScreen()+0x16>
c001032a:	46                   	inc    esi
c001032b:	83 fe 18             	cmp    esi,0x18
c001032e:	75 b0                	jne    c00102e0 <VgaText::scrollScreen()+0xc>
c0010330:	39 1d e4 c2 02 c0    	cmp    DWORD PTR ds:0xc002c2e4,ebx
c0010336:	75 24                	jne    c001035c <VgaText::scrollScreen()+0x88>
c0010338:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001033f:	74 08                	je     c0010349 <VgaText::scrollScreen()+0x75>
c0010341:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010347:	eb 13                	jmp    c001035c <VgaText::scrollScreen()+0x88>
c0010349:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001034f:	85 c0                	test   eax,eax
c0010351:	74 09                	je     c001035c <VgaText::scrollScreen()+0x88>
c0010353:	83 ec 0c             	sub    esp,0xc
c0010356:	53                   	push   ebx
c0010357:	ff d0                	call   eax
c0010359:	83 c4 10             	add    esp,0x10
c001035c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010360:	5b                   	pop    ebx
c0010361:	5e                   	pop    esi
c0010362:	5f                   	pop    edi
c0010363:	e9 1e fe ff ff       	jmp    c0010186 <VgaText::updateCursor()>

c0010368 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010368:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001036d:	c1 e0 08             	shl    eax,0x8
c0010370:	89 c2                	mov    edx,eax
c0010372:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010377:	09 d0                	or     eax,edx
c0010379:	c3                   	ret    

c001037a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001037a:	53                   	push   ebx
c001037b:	83 ec 08             	sub    esp,0x8
c001037e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010382:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010387:	50                   	push   eax
c0010388:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001038d:	50                   	push   eax
c001038e:	e8 2f ff ff ff       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010393:	5a                   	pop    edx
c0010394:	0f b6 c0             	movzx  eax,al
c0010397:	5b                   	pop    ebx
c0010398:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001039d:	50                   	push   eax
c001039e:	53                   	push   ebx
c001039f:	e8 c4 ff ff ff       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c00103a4:	5a                   	pop    edx
c00103a5:	5a                   	pop    edx
c00103a6:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00103ac:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00103b0:	0f b7 d2             	movzx  edx,dx
c00103b3:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c00103b8:	39 0d e4 c2 02 c0    	cmp    DWORD PTR ds:0xc002c2e4,ecx
c00103be:	75 14                	jne    c00103d4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00103c0:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c00103c6:	85 c0                	test   eax,eax
c00103c8:	74 0a                	je     c00103d4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00103ca:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00103ce:	83 c4 08             	add    esp,0x8
c00103d1:	5b                   	pop    ebx
c00103d2:	ff e0                	jmp    eax
c00103d4:	83 c4 08             	add    esp,0x8
c00103d7:	5b                   	pop    ebx
c00103d8:	c3                   	ret    
c00103d9:	90                   	nop

c00103da <VgaText::getCursorX()>:
c00103da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103de:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00103e4:	c3                   	ret    
c00103e5:	90                   	nop

c00103e6 <VgaText::getCursorY()>:
c00103e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103ea:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00103f0:	c3                   	ret    
c00103f1:	90                   	nop

c00103f2 <VgaText::setCursor(int, int)>:
c00103f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103fa:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010400:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010404:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c001040a:	e9 77 fd ff ff       	jmp    c0010186 <VgaText::updateCursor()>
c001040f:	90                   	nop

c0010410 <VgaText::setCursorX(int)>:
c0010410:	83 ec 10             	sub    esp,0x10
c0010413:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010417:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c001041d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010421:	50                   	push   eax
c0010422:	e8 cb ff ff ff       	call   c00103f2 <VgaText::setCursor(int, int)>
c0010427:	83 c4 1c             	add    esp,0x1c
c001042a:	c3                   	ret    
c001042b:	90                   	nop

c001042c <VgaText::setCursorY(int)>:
c001042c:	83 ec 10             	sub    esp,0x10
c001042f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010433:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010437:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c001043d:	50                   	push   eax
c001043e:	e8 af ff ff ff       	call   c00103f2 <VgaText::setCursor(int, int)>
c0010443:	83 c4 1c             	add    esp,0x1c
c0010446:	c3                   	ret    
c0010447:	90                   	nop

c0010448 <VgaText::incrementCursor(bool)>:
c0010448:	56                   	push   esi
c0010449:	53                   	push   ebx
c001044a:	51                   	push   ecx
c001044b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001044f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010453:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010459:	40                   	inc    eax
c001045a:	83 f8 50             	cmp    eax,0x50
c001045d:	74 08                	je     c0010467 <VgaText::incrementCursor(bool)+0x1f>
c001045f:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010465:	eb 33                	jmp    c001049a <VgaText::incrementCursor(bool)+0x52>
c0010467:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001046d:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010477:	8d 50 01             	lea    edx,[eax+0x1]
c001047a:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010480:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010486:	75 12                	jne    c001049a <VgaText::incrementCursor(bool)+0x52>
c0010488:	83 ec 0c             	sub    esp,0xc
c001048b:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010491:	53                   	push   ebx
c0010492:	e8 3d fe ff ff       	call   c00102d4 <VgaText::scrollScreen()>
c0010497:	83 c4 10             	add    esp,0x10
c001049a:	89 f0                	mov    eax,esi
c001049c:	84 c0                	test   al,al
c001049e:	74 0c                	je     c00104ac <VgaText::incrementCursor(bool)+0x64>
c00104a0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00104a4:	5a                   	pop    edx
c00104a5:	5b                   	pop    ebx
c00104a6:	5e                   	pop    esi
c00104a7:	e9 da fc ff ff       	jmp    c0010186 <VgaText::updateCursor()>
c00104ac:	58                   	pop    eax
c00104ad:	5b                   	pop    ebx
c00104ae:	5e                   	pop    esi
c00104af:	c3                   	ret    

c00104b0 <VgaText::updateRAMUsageDisplay(int)>:
c00104b0:	53                   	push   ebx
c00104b1:	bb 0a 00 00 00       	mov    ebx,0xa
c00104b6:	6a 0f                	push   0xf
c00104b8:	6a 00                	push   0x0
c00104ba:	e8 03 fe ff ff       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c00104bf:	5a                   	pop    edx
c00104c0:	59                   	pop    ecx
c00104c1:	0f b6 c8             	movzx  ecx,al
c00104c4:	51                   	push   ecx
c00104c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104c9:	99                   	cdq    
c00104ca:	f7 fb                	idiv   ebx
c00104cc:	89 d3                	mov    ebx,edx
c00104ce:	83 c0 30             	add    eax,0x30
c00104d1:	83 c3 30             	add    ebx,0x30
c00104d4:	0f be c0             	movsx  eax,al
c00104d7:	0f b6 db             	movzx  ebx,bl
c00104da:	50                   	push   eax
c00104db:	e8 88 fe ff ff       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c00104e0:	5a                   	pop    edx
c00104e1:	5a                   	pop    edx
c00104e2:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c00104e8:	51                   	push   ecx
c00104e9:	53                   	push   ebx
c00104ea:	e8 79 fe ff ff       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c00104ef:	5b                   	pop    ebx
c00104f0:	5a                   	pop    edx
c00104f1:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c00104f7:	51                   	push   ecx
c00104f8:	6a 25                	push   0x25
c00104fa:	e8 69 fe ff ff       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c00104ff:	59                   	pop    ecx
c0010500:	5b                   	pop    ebx
c0010501:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c0010507:	5b                   	pop    ebx
c0010508:	c3                   	ret    
c0010509:	90                   	nop

c001050a <VgaText::updateDiskUsage()>:
c001050a:	55                   	push   ebp
c001050b:	bd 10 27 00 00       	mov    ebp,0x2710
c0010510:	57                   	push   edi
c0010511:	56                   	push   esi
c0010512:	53                   	push   ebx
c0010513:	6a 0f                	push   0xf
c0010515:	6a 00                	push   0x0
c0010517:	e8 a6 fd ff ff       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c001051c:	5a                   	pop    edx
c001051d:	0f b6 d8             	movzx  ebx,al
c0010520:	59                   	pop    ecx
c0010521:	a1 48 e5 02 c0       	mov    eax,ds:0xc002e548
c0010526:	53                   	push   ebx
c0010527:	b9 0a 00 00 00       	mov    ecx,0xa
c001052c:	99                   	cdq    
c001052d:	f7 fd                	idiv   ebp
c001052f:	99                   	cdq    
c0010530:	f7 f9                	idiv   ecx
c0010532:	8d 42 30             	lea    eax,[edx+0x30]
c0010535:	0f b6 c0             	movzx  eax,al
c0010538:	50                   	push   eax
c0010539:	e8 2a fe ff ff       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c001053e:	5e                   	pop    esi
c001053f:	5f                   	pop    edi
c0010540:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c0010546:	bf e8 03 00 00       	mov    edi,0x3e8
c001054b:	53                   	push   ebx
c001054c:	a1 48 e5 02 c0       	mov    eax,ds:0xc002e548
c0010551:	99                   	cdq    
c0010552:	f7 ff                	idiv   edi
c0010554:	99                   	cdq    
c0010555:	f7 f9                	idiv   ecx
c0010557:	8d 42 30             	lea    eax,[edx+0x30]
c001055a:	0f b6 c0             	movzx  eax,al
c001055d:	50                   	push   eax
c001055e:	e8 05 fe ff ff       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c0010563:	5a                   	pop    edx
c0010564:	5e                   	pop    esi
c0010565:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001056b:	be 64 00 00 00       	mov    esi,0x64
c0010570:	53                   	push   ebx
c0010571:	a1 48 e5 02 c0       	mov    eax,ds:0xc002e548
c0010576:	99                   	cdq    
c0010577:	f7 fe                	idiv   esi
c0010579:	99                   	cdq    
c001057a:	f7 f9                	idiv   ecx
c001057c:	8d 42 30             	lea    eax,[edx+0x30]
c001057f:	0f b6 c0             	movzx  eax,al
c0010582:	50                   	push   eax
c0010583:	e8 e0 fd ff ff       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c0010588:	5a                   	pop    edx
c0010589:	5a                   	pop    edx
c001058a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c0010590:	53                   	push   ebx
c0010591:	a1 48 e5 02 c0       	mov    eax,ds:0xc002e548
c0010596:	99                   	cdq    
c0010597:	f7 f9                	idiv   ecx
c0010599:	99                   	cdq    
c001059a:	f7 f9                	idiv   ecx
c001059c:	8d 42 30             	lea    eax,[edx+0x30]
c001059f:	0f b6 c0             	movzx  eax,al
c00105a2:	50                   	push   eax
c00105a3:	e8 c0 fd ff ff       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c00105a8:	5a                   	pop    edx
c00105a9:	5a                   	pop    edx
c00105aa:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c00105b0:	53                   	push   ebx
c00105b1:	a1 48 e5 02 c0       	mov    eax,ds:0xc002e548
c00105b6:	99                   	cdq    
c00105b7:	f7 f9                	idiv   ecx
c00105b9:	8d 42 30             	lea    eax,[edx+0x30]
c00105bc:	0f b6 c0             	movzx  eax,al
c00105bf:	50                   	push   eax
c00105c0:	e8 a3 fd ff ff       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c00105c5:	5a                   	pop    edx
c00105c6:	5a                   	pop    edx
c00105c7:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c00105cd:	53                   	push   ebx
c00105ce:	a1 44 e5 02 c0       	mov    eax,ds:0xc002e544
c00105d3:	99                   	cdq    
c00105d4:	f7 fd                	idiv   ebp
c00105d6:	99                   	cdq    
c00105d7:	f7 f9                	idiv   ecx
c00105d9:	8d 42 30             	lea    eax,[edx+0x30]
c00105dc:	0f b6 c0             	movzx  eax,al
c00105df:	50                   	push   eax
c00105e0:	e8 83 fd ff ff       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c00105e5:	5d                   	pop    ebp
c00105e6:	5a                   	pop    edx
c00105e7:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c00105ed:	53                   	push   ebx
c00105ee:	a1 44 e5 02 c0       	mov    eax,ds:0xc002e544
c00105f3:	99                   	cdq    
c00105f4:	f7 ff                	idiv   edi
c00105f6:	99                   	cdq    
c00105f7:	f7 f9                	idiv   ecx
c00105f9:	8d 42 30             	lea    eax,[edx+0x30]
c00105fc:	0f b6 c0             	movzx  eax,al
c00105ff:	50                   	push   eax
c0010600:	e8 63 fd ff ff       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c0010605:	5f                   	pop    edi
c0010606:	5d                   	pop    ebp
c0010607:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001060d:	53                   	push   ebx
c001060e:	a1 44 e5 02 c0       	mov    eax,ds:0xc002e544
c0010613:	99                   	cdq    
c0010614:	f7 fe                	idiv   esi
c0010616:	99                   	cdq    
c0010617:	f7 f9                	idiv   ecx
c0010619:	8d 42 30             	lea    eax,[edx+0x30]
c001061c:	0f b6 c0             	movzx  eax,al
c001061f:	50                   	push   eax
c0010620:	e8 43 fd ff ff       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c0010625:	5a                   	pop    edx
c0010626:	5e                   	pop    esi
c0010627:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001062d:	53                   	push   ebx
c001062e:	a1 44 e5 02 c0       	mov    eax,ds:0xc002e544
c0010633:	99                   	cdq    
c0010634:	f7 f9                	idiv   ecx
c0010636:	99                   	cdq    
c0010637:	f7 f9                	idiv   ecx
c0010639:	8d 42 30             	lea    eax,[edx+0x30]
c001063c:	0f b6 c0             	movzx  eax,al
c001063f:	50                   	push   eax
c0010640:	e8 23 fd ff ff       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c0010645:	5f                   	pop    edi
c0010646:	5d                   	pop    ebp
c0010647:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001064d:	53                   	push   ebx
c001064e:	a1 44 e5 02 c0       	mov    eax,ds:0xc002e544
c0010653:	99                   	cdq    
c0010654:	f7 f9                	idiv   ecx
c0010656:	83 c2 30             	add    edx,0x30
c0010659:	0f b6 d2             	movzx  edx,dl
c001065c:	52                   	push   edx
c001065d:	e8 06 fd ff ff       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c0010662:	5a                   	pop    edx
c0010663:	59                   	pop    ecx
c0010664:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001066a:	5b                   	pop    ebx
c001066b:	5e                   	pop    esi
c001066c:	5f                   	pop    edi
c001066d:	5d                   	pop    ebp
c001066e:	c3                   	ret    
c001066f:	90                   	nop

c0010670 <VgaText::updateTitle()>:
c0010670:	53                   	push   ebx
c0010671:	31 c0                	xor    eax,eax
c0010673:	83 ec 58             	sub    esp,0x58
c0010676:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c001067a:	89 e1                	mov    ecx,esp
c001067c:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010680:	40                   	inc    eax
c0010681:	83 f8 50             	cmp    eax,0x50
c0010684:	75 f6                	jne    c001067c <VgaText::updateTitle()+0xc>
c0010686:	31 c0                	xor    eax,eax
c0010688:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c001068f:	84 db                	test   bl,bl
c0010691:	74 06                	je     c0010699 <VgaText::updateTitle()+0x29>
c0010693:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010696:	40                   	inc    eax
c0010697:	eb ef                	jmp    c0010688 <VgaText::updateTitle()+0x18>
c0010699:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c001069f:	85 c0                	test   eax,eax
c00106a1:	74 09                	je     c00106ac <VgaText::updateTitle()+0x3c>
c00106a3:	53                   	push   ebx
c00106a4:	53                   	push   ebx
c00106a5:	51                   	push   ecx
c00106a6:	52                   	push   edx
c00106a7:	ff d0                	call   eax
c00106a9:	83 c4 10             	add    esp,0x10
c00106ac:	e8 59 fe ff ff       	call   c001050a <VgaText::updateDiskUsage()>
c00106b1:	83 c4 58             	add    esp,0x58
c00106b4:	5b                   	pop    ebx
c00106b5:	c3                   	ret    

c00106b6 <VgaText::setTitleTextColour(VgaColour)>:
c00106b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106be:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c00106c4:	eb aa                	jmp    c0010670 <VgaText::updateTitle()>

c00106c6 <VgaText::setTitleColour(VgaColour)>:
c00106c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106ce:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c00106d4:	eb 9a                	jmp    c0010670 <VgaText::updateTitle()>

c00106d6 <VgaText::setTitle(char*)>:
c00106d6:	53                   	push   ebx
c00106d7:	83 ec 10             	sub    esp,0x10
c00106da:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00106de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106e2:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c00106e8:	50                   	push   eax
c00106e9:	e8 3c 00 ff ff       	call   c000072a <strcpy>
c00106ee:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00106f2:	83 c4 18             	add    esp,0x18
c00106f5:	5b                   	pop    ebx
c00106f6:	e9 75 ff ff ff       	jmp    c0010670 <VgaText::updateTitle()>
c00106fb:	90                   	nop

c00106fc <VgaText::decrementCursor(bool)>:
c00106fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010700:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010704:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c001070a:	85 c0                	test   eax,eax
c001070c:	74 07                	je     c0010715 <VgaText::decrementCursor(bool)+0x19>
c001070e:	48                   	dec    eax
c001070f:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010715:	84 c9                	test   cl,cl
c0010717:	74 09                	je     c0010722 <VgaText::decrementCursor(bool)+0x26>
c0010719:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001071d:	e9 64 fa ff ff       	jmp    c0010186 <VgaText::updateCursor()>
c0010722:	c3                   	ret    
c0010723:	90                   	nop

c0010724 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010724:	53                   	push   ebx
c0010725:	83 ec 08             	sub    esp,0x8
c0010728:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001072c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010730:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010734:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010738:	3c 07                	cmp    al,0x7
c001073a:	75 2a                	jne    c0010766 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001073c:	a1 8c c3 02 c0       	mov    eax,ds:0xc002c38c
c0010741:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010749:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010751:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010759:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001075d:	83 c4 08             	add    esp,0x8
c0010760:	5b                   	pop    ebx
c0010761:	e9 3a 2d 00 00       	jmp    c00134a0 <Buzzer::beep(int, int, bool)>
c0010766:	3c 0d                	cmp    al,0xd
c0010768:	75 0c                	jne    c0010776 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c001076a:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010774:	eb 3b                	jmp    c00107b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010776:	3c 0a                	cmp    al,0xa
c0010778:	75 40                	jne    c00107ba <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c001077a:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010780:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001078a:	8d 50 01             	lea    edx,[eax+0x1]
c001078d:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010793:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010799:	75 12                	jne    c00107ad <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c001079b:	83 ec 0c             	sub    esp,0xc
c001079e:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00107a4:	53                   	push   ebx
c00107a5:	e8 2a fb ff ff       	call   c00102d4 <VgaText::scrollScreen()>
c00107aa:	83 c4 10             	add    esp,0x10
c00107ad:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00107b1:	83 c4 08             	add    esp,0x8
c00107b4:	5b                   	pop    ebx
c00107b5:	e9 cc f9 ff ff       	jmp    c0010186 <VgaText::updateCursor()>
c00107ba:	3c 08                	cmp    al,0x8
c00107bc:	75 31                	jne    c00107ef <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c00107be:	50                   	push   eax
c00107bf:	50                   	push   eax
c00107c0:	6a 01                	push   0x1
c00107c2:	53                   	push   ebx
c00107c3:	e8 34 ff ff ff       	call   c00106fc <VgaText::decrementCursor(bool)>
c00107c8:	5a                   	pop    edx
c00107c9:	59                   	pop    ecx
c00107ca:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00107d0:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00107d6:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00107dc:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00107e2:	6a 20                	push   0x20
c00107e4:	53                   	push   ebx
c00107e5:	e8 90 fb ff ff       	call   c001037a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00107ea:	83 c4 28             	add    esp,0x28
c00107ed:	5b                   	pop    ebx
c00107ee:	c3                   	ret    
c00107ef:	83 ec 08             	sub    esp,0x8
c00107f2:	0f be c0             	movsx  eax,al
c00107f5:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00107fb:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010801:	51                   	push   ecx
c0010802:	52                   	push   edx
c0010803:	50                   	push   eax
c0010804:	53                   	push   ebx
c0010805:	e8 70 fb ff ff       	call   c001037a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001080a:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001080e:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010816:	83 c4 28             	add    esp,0x28
c0010819:	5b                   	pop    ebx
c001081a:	e9 29 fc ff ff       	jmp    c0010448 <VgaText::incrementCursor(bool)>
c001081f:	90                   	nop

c0010820 <VgaText::isShowingCursor()>:
c0010820:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010824:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c001082a:	c3                   	ret    
c001082b:	90                   	nop

c001082c <VgaText::isBlinkDisabled()>:
c001082c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010830:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010836:	83 f0 01             	xor    eax,0x1
c0010839:	c3                   	ret    

c001083a <VgaText::setCursorHeight(int)>:
c001083a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001083e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010842:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010848:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c001084f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010853:	e9 48 f9 ff ff       	jmp    c00101a0 <VgaText::showCursor(bool)>

c0010858 <VgaText::getCursorHeight()>:
c0010858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001085c:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010862:	c3                   	ret    

c0010863 <setActiveTerminal(VgaText*)>:
c0010863:	53                   	push   ebx
c0010864:	83 ec 08             	sub    esp,0x8
c0010867:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001086b:	85 db                	test   ebx,ebx
c001086d:	75 11                	jne    c0010880 <setActiveTerminal(VgaText*)+0x1d>
c001086f:	c7 44 24 10 6c 85 02 c0 	mov    DWORD PTR [esp+0x10],0xc002856c
c0010877:	83 c4 08             	add    esp,0x8
c001087a:	5b                   	pop    ebx
c001087b:	e9 fc 8c 00 00       	jmp    c001957c <Krnl::panic(char const*)>
c0010880:	50                   	push   eax
c0010881:	50                   	push   eax
c0010882:	53                   	push   ebx
c0010883:	68 7a 85 02 c0       	push   0xc002857a
c0010888:	e8 14 1e 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001088d:	a1 e4 c2 02 c0       	mov    eax,ds:0xc002c2e4
c0010892:	83 c4 10             	add    esp,0x10
c0010895:	85 c0                	test   eax,eax
c0010897:	74 0c                	je     c00108a5 <setActiveTerminal(VgaText*)+0x42>
c0010899:	83 ec 0c             	sub    esp,0xc
c001089c:	50                   	push   eax
c001089d:	e8 e4 f8 ff ff       	call   c0010186 <VgaText::updateCursor()>
c00108a2:	83 c4 10             	add    esp,0x10
c00108a5:	89 1d e4 c2 02 c0    	mov    DWORD PTR ds:0xc002c2e4,ebx
c00108ab:	51                   	push   ecx
c00108ac:	51                   	push   ecx
c00108ad:	53                   	push   ebx
c00108ae:	68 92 85 02 c0       	push   0xc0028592
c00108b3:	e8 e9 1d 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00108b8:	83 c4 0c             	add    esp,0xc
c00108bb:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00108c1:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00108c7:	53                   	push   ebx
c00108c8:	e8 25 fb ff ff       	call   c00103f2 <VgaText::setCursor(int, int)>
c00108cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108d0:	e8 57 ff ff ff       	call   c001082c <VgaText::isBlinkDisabled()>
c00108d5:	5a                   	pop    edx
c00108d6:	0f b6 c0             	movzx  eax,al
c00108d9:	59                   	pop    ecx
c00108da:	50                   	push   eax
c00108db:	53                   	push   ebx
c00108dc:	e8 cf f8 ff ff       	call   c00101b0 <VgaText::disableBlink(bool)>
c00108e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108e4:	e8 6f ff ff ff       	call   c0010858 <VgaText::getCursorHeight()>
c00108e9:	5a                   	pop    edx
c00108ea:	59                   	pop    ecx
c00108eb:	50                   	push   eax
c00108ec:	53                   	push   ebx
c00108ed:	e8 48 ff ff ff       	call   c001083a <VgaText::setCursorHeight(int)>
c00108f2:	83 c4 10             	add    esp,0x10
c00108f5:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00108fc:	75 0a                	jne    c0010908 <setActiveTerminal(VgaText*)+0xa5>
c00108fe:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010908:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001090c:	83 c4 08             	add    esp,0x8
c001090f:	5b                   	pop    ebx
c0010910:	e9 1d f8 ff ff       	jmp    c0010132 <VgaText::load()>

c0010915 <doTerminalCycle()>:
c0010915:	83 ec 18             	sub    esp,0x18
c0010918:	a1 e0 c2 02 c0       	mov    eax,ds:0xc002c2e0
c001091d:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010923:	50                   	push   eax
c0010924:	a3 e0 c2 02 c0       	mov    ds:0xc002c2e0,eax
c0010929:	e8 35 ff ff ff       	call   c0010863 <setActiveTerminal(VgaText*)>
c001092e:	83 c4 1c             	add    esp,0x1c
c0010931:	c3                   	ret    

c0010932 <VgaText::doUpdate()>:
c0010932:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010936:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c001093c:	85 c0                	test   eax,eax
c001093e:	74 02                	je     c0010942 <VgaText::doUpdate()+0x10>
c0010940:	ff e0                	jmp    eax
c0010942:	c3                   	ret    
c0010943:	90                   	nop

c0010944 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010944:	55                   	push   ebp
c0010945:	57                   	push   edi
c0010946:	56                   	push   esi
c0010947:	53                   	push   ebx
c0010948:	83 ec 1c             	sub    esp,0x1c
c001094b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001094f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010954:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c001095b:	8d 7d 0c             	lea    edi,[ebp+0xc]
c001095e:	50                   	push   eax
c001095f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010964:	50                   	push   eax
c0010965:	e8 58 f9 ff ff       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c001096a:	59                   	pop    ecx
c001096b:	0f b6 c0             	movzx  eax,al
c001096e:	5b                   	pop    ebx
c001096f:	31 c9                	xor    ecx,ecx
c0010971:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010979:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001097d:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010983:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010987:	0f b7 db             	movzx  ebx,bx
c001098a:	01 db                	add    ebx,ebx
c001098c:	01 fb                	add    ebx,edi
c001098e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010991:	84 c0                	test   al,al
c0010993:	0f 84 38 01 00 00    	je     c0010ad1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010999:	3c 0d                	cmp    al,0xd
c001099b:	75 0f                	jne    c00109ac <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c001099d:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00109a7:	e9 1f 01 00 00       	jmp    c0010acb <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00109ac:	3c 0a                	cmp    al,0xa
c00109ae:	75 5b                	jne    c0010a0b <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c00109b0:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c00109b6:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00109c0:	8d 48 01             	lea    ecx,[eax+0x1]
c00109c3:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c00109c9:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c00109cf:	75 12                	jne    c00109e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c00109d1:	83 ec 0c             	sub    esp,0xc
c00109d4:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c00109da:	55                   	push   ebp
c00109db:	e8 f4 f8 ff ff       	call   c00102d4 <VgaText::scrollScreen()>
c00109e0:	83 c4 10             	add    esp,0x10
c00109e3:	83 ec 0c             	sub    esp,0xc
c00109e6:	55                   	push   ebp
c00109e7:	e8 9a f7 ff ff       	call   c0010186 <VgaText::updateCursor()>
c00109ec:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00109f4:	83 c4 10             	add    esp,0x10
c00109f7:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c00109fd:	31 c9                	xor    ecx,ecx
c00109ff:	0f b7 db             	movzx  ebx,bx
c0010a02:	01 db                	add    ebx,ebx
c0010a04:	01 fb                	add    ebx,edi
c0010a06:	e9 c0 00 00 00       	jmp    c0010acb <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010a0b:	3c 08                	cmp    al,0x8
c0010a0d:	75 4e                	jne    c0010a5d <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010a0f:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010a13:	53                   	push   ebx
c0010a14:	53                   	push   ebx
c0010a15:	6a 01                	push   0x1
c0010a17:	55                   	push   ebp
c0010a18:	e8 df fc ff ff       	call   c00106fc <VgaText::decrementCursor(bool)>
c0010a1d:	58                   	pop    eax
c0010a1e:	5a                   	pop    edx
c0010a1f:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010a25:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010a2b:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010a31:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010a37:	6a 20                	push   0x20
c0010a39:	55                   	push   ebp
c0010a3a:	e8 3b f9 ff ff       	call   c001037a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a3f:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010a47:	83 c4 20             	add    esp,0x20
c0010a4a:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010a50:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010a54:	0f b7 db             	movzx  ebx,bx
c0010a57:	01 db                	add    ebx,ebx
c0010a59:	01 fb                	add    ebx,edi
c0010a5b:	eb 6e                	jmp    c0010acb <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010a5d:	51                   	push   ecx
c0010a5e:	51                   	push   ecx
c0010a5f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010a63:	50                   	push   eax
c0010a64:	e8 ff f8 ff ff       	call   c0010368 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a69:	83 c4 10             	add    esp,0x10
c0010a6c:	66 89 03             	mov    WORD PTR [ebx],ax
c0010a6f:	39 2d e4 c2 02 c0    	cmp    DWORD PTR ds:0xc002c2e4,ebp
c0010a75:	75 2a                	jne    c0010aa1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010a77:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010a7d:	85 c0                	test   eax,eax
c0010a7f:	74 20                	je     c0010aa1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010a81:	52                   	push   edx
c0010a82:	52                   	push   edx
c0010a83:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010a89:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010a8f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010a93:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010a97:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010a9a:	51                   	push   ecx
c0010a9b:	55                   	push   ebp
c0010a9c:	ff d0                	call   eax
c0010a9e:	83 c4 20             	add    esp,0x20
c0010aa1:	83 c3 02             	add    ebx,0x2
c0010aa4:	50                   	push   eax
c0010aa5:	50                   	push   eax
c0010aa6:	6a 00                	push   0x0
c0010aa8:	55                   	push   ebp
c0010aa9:	e8 9a f9 ff ff       	call   c0010448 <VgaText::incrementCursor(bool)>
c0010aae:	83 c4 10             	add    esp,0x10
c0010ab1:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010ab8:	75 0f                	jne    c0010ac9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010aba:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ac2:	0f b7 db             	movzx  ebx,bx
c0010ac5:	01 db                	add    ebx,ebx
c0010ac7:	01 fb                	add    ebx,edi
c0010ac9:	b1 01                	mov    cl,0x1
c0010acb:	46                   	inc    esi
c0010acc:	e9 bd fe ff ff       	jmp    c001098e <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010ad1:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010ad5:	83 ec 0c             	sub    esp,0xc
c0010ad8:	55                   	push   ebp
c0010ad9:	e8 a8 f6 ff ff       	call   c0010186 <VgaText::updateCursor()>
c0010ade:	83 c4 10             	add    esp,0x10
c0010ae1:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010ae5:	84 c9                	test   cl,cl
c0010ae7:	74 0c                	je     c0010af5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010ae9:	83 ec 0c             	sub    esp,0xc
c0010aec:	55                   	push   ebp
c0010aed:	e8 40 fe ff ff       	call   c0010932 <VgaText::doUpdate()>
c0010af2:	83 c4 10             	add    esp,0x10
c0010af5:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010afc:	83 c4 1c             	add    esp,0x1c
c0010aff:	5b                   	pop    ebx
c0010b00:	5e                   	pop    esi
c0010b01:	5f                   	pop    edi
c0010b02:	5d                   	pop    ebp
c0010b03:	c3                   	ret    

c0010b04 <VgaText::clearScreen()>:
c0010b04:	57                   	push   edi
c0010b05:	56                   	push   esi
c0010b06:	31 f6                	xor    esi,esi
c0010b08:	53                   	push   ebx
c0010b09:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b0d:	52                   	push   edx
c0010b0e:	6a 00                	push   0x0
c0010b10:	6a 00                	push   0x0
c0010b12:	53                   	push   ebx
c0010b13:	e8 da f8 ff ff       	call   c00103f2 <VgaText::setCursor(int, int)>
c0010b18:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010b1f:	83 c4 10             	add    esp,0x10
c0010b22:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010b28:	7e 26                	jle    c0010b50 <VgaText::clearScreen()+0x4c>
c0010b2a:	31 ff                	xor    edi,edi
c0010b2c:	50                   	push   eax
c0010b2d:	50                   	push   eax
c0010b2e:	56                   	push   esi
c0010b2f:	57                   	push   edi
c0010b30:	47                   	inc    edi
c0010b31:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010b37:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010b3d:	6a 20                	push   0x20
c0010b3f:	53                   	push   ebx
c0010b40:	e8 35 f8 ff ff       	call   c001037a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010b45:	83 c4 20             	add    esp,0x20
c0010b48:	83 ff 50             	cmp    edi,0x50
c0010b4b:	75 df                	jne    c0010b2c <VgaText::clearScreen()+0x28>
c0010b4d:	46                   	inc    esi
c0010b4e:	eb d2                	jmp    c0010b22 <VgaText::clearScreen()+0x1e>
c0010b50:	83 ec 0c             	sub    esp,0xc
c0010b53:	53                   	push   ebx
c0010b54:	e8 d9 fd ff ff       	call   c0010932 <VgaText::doUpdate()>
c0010b59:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010b60:	83 c4 10             	add    esp,0x10
c0010b63:	5b                   	pop    ebx
c0010b64:	5e                   	pop    esi
c0010b65:	5f                   	pop    edi
c0010b66:	c3                   	ret    
c0010b67:	90                   	nop

c0010b68 <VgaText::putchar(char)>:
c0010b68:	56                   	push   esi
c0010b69:	53                   	push   ebx
c0010b6a:	83 ec 14             	sub    esp,0x14
c0010b6d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010b71:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010b75:	3c 5b                	cmp    al,0x5b
c0010b77:	75 21                	jne    c0010b9a <VgaText::putchar(char)+0x32>
c0010b79:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010b80:	74 28                	je     c0010baa <VgaText::putchar(char)+0x42>
c0010b82:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010b8b:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010b95:	e9 e2 00 00 00       	jmp    c0010c7c <VgaText::putchar(char)+0x114>
c0010b9a:	3c 1b                	cmp    al,0x1b
c0010b9c:	75 0c                	jne    c0010baa <VgaText::putchar(char)+0x42>
c0010b9e:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010ba5:	e9 d2 00 00 00       	jmp    c0010c7c <VgaText::putchar(char)+0x114>
c0010baa:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010bb0:	84 c9                	test   cl,cl
c0010bb2:	0f 84 ab 00 00 00    	je     c0010c63 <VgaText::putchar(char)+0xfb>
c0010bb8:	8d 50 c0             	lea    edx,[eax-0x40]
c0010bbb:	80 fa 3e             	cmp    dl,0x3e
c0010bbe:	0f 87 82 00 00 00    	ja     c0010c46 <VgaText::putchar(char)+0xde>
c0010bc4:	3c 6d                	cmp    al,0x6d
c0010bc6:	75 4d                	jne    c0010c15 <VgaText::putchar(char)+0xad>
c0010bc8:	31 f6                	xor    esi,esi
c0010bca:	31 d2                	xor    edx,edx
c0010bcc:	31 c0                	xor    eax,eax
c0010bce:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010bd4:	7e 30                	jle    c0010c06 <VgaText::putchar(char)+0x9e>
c0010bd6:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010bde:	80 fa 3b             	cmp    dl,0x3b
c0010be1:	75 17                	jne    c0010bfa <VgaText::putchar(char)+0x92>
c0010be3:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010be7:	50                   	push   eax
c0010be8:	53                   	push   ebx
c0010be9:	e8 fc f5 ff ff       	call   c00101ea <VgaText::doANSI_SGR(int)>
c0010bee:	59                   	pop    ecx
c0010bef:	31 d2                	xor    edx,edx
c0010bf1:	58                   	pop    eax
c0010bf2:	31 c0                	xor    eax,eax
c0010bf4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010bf8:	eb 09                	jmp    c0010c03 <VgaText::putchar(char)+0x9b>
c0010bfa:	6b c0 0a             	imul   eax,eax,0xa
c0010bfd:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010c01:	88 ca                	mov    dl,cl
c0010c03:	46                   	inc    esi
c0010c04:	eb c8                	jmp    c0010bce <VgaText::putchar(char)+0x66>
c0010c06:	84 d2                	test   dl,dl
c0010c08:	74 31                	je     c0010c3b <VgaText::putchar(char)+0xd3>
c0010c0a:	50                   	push   eax
c0010c0b:	53                   	push   ebx
c0010c0c:	e8 d9 f5 ff ff       	call   c00101ea <VgaText::doANSI_SGR(int)>
c0010c11:	58                   	pop    eax
c0010c12:	5a                   	pop    edx
c0010c13:	eb 26                	jmp    c0010c3b <VgaText::putchar(char)+0xd3>
c0010c15:	3c 4a                	cmp    al,0x4a
c0010c17:	75 22                	jne    c0010c3b <VgaText::putchar(char)+0xd3>
c0010c19:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010c20:	75 19                	jne    c0010c3b <VgaText::putchar(char)+0xd3>
c0010c22:	83 ec 0c             	sub    esp,0xc
c0010c25:	53                   	push   ebx
c0010c26:	e8 d9 fe ff ff       	call   c0010b04 <VgaText::clearScreen()>
c0010c2b:	83 c4 0c             	add    esp,0xc
c0010c2e:	6a 00                	push   0x0
c0010c30:	6a 00                	push   0x0
c0010c32:	53                   	push   ebx
c0010c33:	e8 ba f7 ff ff       	call   c00103f2 <VgaText::setCursor(int, int)>
c0010c38:	83 c4 10             	add    esp,0x10
c0010c3b:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010c44:	eb 36                	jmp    c0010c7c <VgaText::putchar(char)+0x114>
c0010c46:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010c4c:	83 fa 0e             	cmp    edx,0xe
c0010c4f:	7f 2b                	jg     c0010c7c <VgaText::putchar(char)+0x114>
c0010c51:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010c54:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010c5a:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010c61:	eb 19                	jmp    c0010c7c <VgaText::putchar(char)+0x114>
c0010c63:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c69:	0f be c0             	movsx  eax,al
c0010c6c:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c72:	50                   	push   eax
c0010c73:	53                   	push   ebx
c0010c74:	e8 ab fa ff ff       	call   c0010724 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010c79:	83 c4 10             	add    esp,0x10
c0010c7c:	83 c4 14             	add    esp,0x14
c0010c7f:	5b                   	pop    ebx
c0010c80:	5e                   	pop    esi
c0010c81:	c3                   	ret    

c0010c82 <VgaText::puts(char const*)>:
c0010c82:	53                   	push   ebx
c0010c83:	83 ec 08             	sub    esp,0x8
c0010c86:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c8a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010c8d:	84 c0                	test   al,al
c0010c8f:	74 12                	je     c0010ca3 <VgaText::puts(char const*)+0x21>
c0010c91:	43                   	inc    ebx
c0010c92:	51                   	push   ecx
c0010c93:	51                   	push   ecx
c0010c94:	50                   	push   eax
c0010c95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c99:	e8 ca fe ff ff       	call   c0010b68 <VgaText::putchar(char)>
c0010c9e:	83 c4 10             	add    esp,0x10
c0010ca1:	eb e7                	jmp    c0010c8a <VgaText::puts(char const*)+0x8>
c0010ca3:	83 c4 08             	add    esp,0x8
c0010ca6:	5b                   	pop    ebx
c0010ca7:	c3                   	ret    

c0010ca8 <VgaText::putx(unsigned int)>:
c0010ca8:	57                   	push   edi
c0010ca9:	b9 11 00 00 00       	mov    ecx,0x11
c0010cae:	56                   	push   esi
c0010caf:	be ae 85 02 c0       	mov    esi,0xc00285ae
c0010cb4:	53                   	push   ebx
c0010cb5:	83 ec 20             	sub    esp,0x20
c0010cb8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010cbc:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010cc0:	fc                   	cld    
c0010cc1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010cc3:	be 08 00 00 00       	mov    esi,0x8
c0010cc8:	50                   	push   eax
c0010cc9:	50                   	push   eax
c0010cca:	89 d8                	mov    eax,ebx
c0010ccc:	c1 e3 04             	shl    ebx,0x4
c0010ccf:	c1 e8 1c             	shr    eax,0x1c
c0010cd2:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010cd7:	50                   	push   eax
c0010cd8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010cdc:	e8 87 fe ff ff       	call   c0010b68 <VgaText::putchar(char)>
c0010ce1:	83 c4 10             	add    esp,0x10
c0010ce4:	4e                   	dec    esi
c0010ce5:	75 e1                	jne    c0010cc8 <VgaText::putx(unsigned int)+0x20>
c0010ce7:	83 c4 20             	add    esp,0x20
c0010cea:	5b                   	pop    ebx
c0010ceb:	5e                   	pop    esi
c0010cec:	5f                   	pop    edi
c0010ced:	c3                   	ret    

c0010cee <VgaText::VgaText(char const*)>:
c0010cee:	57                   	push   edi
c0010cef:	56                   	push   esi
c0010cf0:	53                   	push   ebx
c0010cf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cf5:	83 ec 08             	sub    esp,0x8
c0010cf8:	6a 00                	push   0x0
c0010cfa:	50                   	push   eax
c0010cfb:	e8 6e 05 00 00       	call   c001126e <UnixFile::UnixFile(int)>
c0010d00:	83 c4 10             	add    esp,0x10
c0010d03:	ba 14 86 02 c0       	mov    edx,0xc0028614
c0010d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d0c:	89 10                	mov    DWORD PTR [eax],edx
c0010d0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d12:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010d1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d20:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d2e:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010d35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d39:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010d40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d44:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d52:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d60:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d6b:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d76:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010d7c:	bb c0 c2 02 c0       	mov    ebx,0xc002c2c0
c0010d81:	b8 08 00 00 00       	mov    eax,0x8
c0010d86:	fc                   	cld    
c0010d87:	89 d7                	mov    edi,edx
c0010d89:	89 de                	mov    esi,ebx
c0010d8b:	89 c1                	mov    ecx,eax
c0010d8d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010d8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d93:	05 1e 10 00 00       	add    eax,0x101e
c0010d98:	83 ec 08             	sub    esp,0x8
c0010d9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d9f:	50                   	push   eax
c0010da0:	e8 85 f9 fe ff       	call   c000072a <strcpy>
c0010da5:	83 c4 10             	add    esp,0x10
c0010da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dac:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dba:	83 c0 0c             	add    eax,0xc
c0010dbd:	83 ec 04             	sub    esp,0x4
c0010dc0:	68 00 0f 00 00       	push   0xf00
c0010dc5:	6a 00                	push   0x0
c0010dc7:	50                   	push   eax
c0010dc8:	e8 be f8 fe ff       	call   c000068b <memset>
c0010dcd:	83 c4 10             	add    esp,0x10
c0010dd0:	83 ec 04             	sub    esp,0x4
c0010dd3:	6a 00                	push   0x0
c0010dd5:	6a 07                	push   0x7
c0010dd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ddb:	e8 c2 f4 ff ff       	call   c00102a2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010de0:	83 c4 10             	add    esp,0x10
c0010de3:	83 ec 08             	sub    esp,0x8
c0010de6:	6a 02                	push   0x2
c0010de8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dec:	e8 49 fa ff ff       	call   c001083a <VgaText::setCursorHeight(int)>
c0010df1:	83 c4 10             	add    esp,0x10
c0010df4:	83 ec 04             	sub    esp,0x4
c0010df7:	6a 00                	push   0x0
c0010df9:	6a 00                	push   0x0
c0010dfb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dff:	e8 ee f5 ff ff       	call   c00103f2 <VgaText::setCursor(int, int)>
c0010e04:	83 c4 10             	add    esp,0x10
c0010e07:	83 ec 08             	sub    esp,0x8
c0010e0a:	6a 01                	push   0x1
c0010e0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e10:	e8 8b f3 ff ff       	call   c00101a0 <VgaText::showCursor(bool)>
c0010e15:	83 c4 10             	add    esp,0x10
c0010e18:	83 ec 08             	sub    esp,0x8
c0010e1b:	6a 01                	push   0x1
c0010e1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e21:	e8 8a f3 ff ff       	call   c00101b0 <VgaText::disableBlink(bool)>
c0010e26:	83 c4 10             	add    esp,0x10
c0010e29:	83 ec 0c             	sub    esp,0xc
c0010e2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e30:	e8 cf fc ff ff       	call   c0010b04 <VgaText::clearScreen()>
c0010e35:	83 c4 10             	add    esp,0x10
c0010e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e3c:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010e43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e47:	05 9e 10 00 00       	add    eax,0x109e
c0010e4c:	83 ec 04             	sub    esp,0x4
c0010e4f:	68 96 00 00 00       	push   0x96
c0010e54:	6a 00                	push   0x0
c0010e56:	50                   	push   eax
c0010e57:	e8 2f f8 fe ff       	call   c000068b <memset>
c0010e5c:	83 c4 10             	add    esp,0x10
c0010e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e63:	05 34 11 00 00       	add    eax,0x1134
c0010e68:	83 ec 04             	sub    esp,0x4
c0010e6b:	68 2c 01 00 00       	push   0x12c
c0010e70:	6a 00                	push   0x0
c0010e72:	50                   	push   eax
c0010e73:	e8 13 f8 fe ff       	call   c000068b <memset>
c0010e78:	83 c4 10             	add    esp,0x10
c0010e7b:	90                   	nop
c0010e7c:	5b                   	pop    ebx
c0010e7d:	5e                   	pop    esi
c0010e7e:	5f                   	pop    edi
c0010e7f:	c3                   	ret    

c0010e80 <VgaText::receiveKey(unsigned char)>:
c0010e80:	55                   	push   ebp
c0010e81:	57                   	push   edi
c0010e82:	56                   	push   esi
c0010e83:	53                   	push   ebx
c0010e84:	83 ec 1c             	sub    esp,0x1c
c0010e87:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010e8b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e8f:	84 db                	test   bl,bl
c0010e91:	0f 84 c9 00 00 00    	je     c0010f60 <VgaText::receiveKey(unsigned char)+0xe0>
c0010e97:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010e9d:	80 fb 08             	cmp    bl,0x8
c0010ea0:	75 2c                	jne    c0010ece <VgaText::receiveKey(unsigned char)+0x4e>
c0010ea2:	83 ec 0c             	sub    esp,0xc
c0010ea5:	57                   	push   edi
c0010ea6:	e8 fd f7 fe ff       	call   c00006a8 <strlen>
c0010eab:	83 c4 10             	add    esp,0x10
c0010eae:	85 c0                	test   eax,eax
c0010eb0:	74 41                	je     c0010ef3 <VgaText::receiveKey(unsigned char)+0x73>
c0010eb2:	50                   	push   eax
c0010eb3:	50                   	push   eax
c0010eb4:	6a 08                	push   0x8
c0010eb6:	56                   	push   esi
c0010eb7:	e8 ac fc ff ff       	call   c0010b68 <VgaText::putchar(char)>
c0010ebc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010ebf:	e8 e4 f7 fe ff       	call   c00006a8 <strlen>
c0010ec4:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010ecc:	eb 22                	jmp    c0010ef0 <VgaText::receiveKey(unsigned char)+0x70>
c0010ece:	0f be c3             	movsx  eax,bl
c0010ed1:	52                   	push   edx
c0010ed2:	52                   	push   edx
c0010ed3:	50                   	push   eax
c0010ed4:	56                   	push   esi
c0010ed5:	e8 8e fc ff ff       	call   c0010b68 <VgaText::putchar(char)>
c0010eda:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010ede:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010ee3:	59                   	pop    ecx
c0010ee4:	5d                   	pop    ebp
c0010ee5:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010ee9:	50                   	push   eax
c0010eea:	57                   	push   edi
c0010eeb:	e8 f1 f8 fe ff       	call   c00007e1 <strcat>
c0010ef0:	83 c4 10             	add    esp,0x10
c0010ef3:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010efa:	75 05                	jne    c0010f01 <VgaText::receiveKey(unsigned char)+0x81>
c0010efc:	80 fb 0a             	cmp    bl,0xa
c0010eff:	75 53                	jne    c0010f54 <VgaText::receiveKey(unsigned char)+0xd4>
c0010f01:	83 ec 0c             	sub    esp,0xc
c0010f04:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010f0a:	53                   	push   ebx
c0010f0b:	e8 98 f7 fe ff       	call   c00006a8 <strlen>
c0010f10:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010f13:	89 c5                	mov    ebp,eax
c0010f15:	e8 8e f7 fe ff       	call   c00006a8 <strlen>
c0010f1a:	83 c4 10             	add    esp,0x10
c0010f1d:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010f21:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010f26:	76 10                	jbe    c0010f38 <VgaText::receiveKey(unsigned char)+0xb8>
c0010f28:	83 ec 0c             	sub    esp,0xc
c0010f2b:	68 bf 85 02 c0       	push   0xc00285bf
c0010f30:	e8 47 86 00 00       	call   c001957c <Krnl::panic(char const*)>
c0010f35:	83 c4 10             	add    esp,0x10
c0010f38:	50                   	push   eax
c0010f39:	50                   	push   eax
c0010f3a:	57                   	push   edi
c0010f3b:	53                   	push   ebx
c0010f3c:	e8 a0 f8 fe ff       	call   c00007e1 <strcat>
c0010f41:	83 c4 0c             	add    esp,0xc
c0010f44:	68 96 00 00 00       	push   0x96
c0010f49:	6a 00                	push   0x0
c0010f4b:	57                   	push   edi
c0010f4c:	e8 3a f7 fe ff       	call   c000068b <memset>
c0010f51:	83 c4 10             	add    esp,0x10
c0010f54:	83 ec 0c             	sub    esp,0xc
c0010f57:	56                   	push   esi
c0010f58:	e8 d5 f9 ff ff       	call   c0010932 <VgaText::doUpdate()>
c0010f5d:	83 c4 10             	add    esp,0x10
c0010f60:	83 c4 1c             	add    esp,0x1c
c0010f63:	5b                   	pop    ebx
c0010f64:	5e                   	pop    esi
c0010f65:	5f                   	pop    edi
c0010f66:	5d                   	pop    ebp
c0010f67:	c3                   	ret    

c0010f68 <VgaText::write(unsigned long long, void*, int*)>:
c0010f68:	55                   	push   ebp
c0010f69:	57                   	push   edi
c0010f6a:	56                   	push   esi
c0010f6b:	53                   	push   ebx
c0010f6c:	83 ec 0c             	sub    esp,0xc
c0010f6f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010f73:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010f77:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010f7b:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010f82:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010f85:	39 eb                	cmp    ebx,ebp
c0010f87:	74 13                	je     c0010f9c <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010f89:	43                   	inc    ebx
c0010f8a:	50                   	push   eax
c0010f8b:	50                   	push   eax
c0010f8c:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010f90:	50                   	push   eax
c0010f91:	56                   	push   esi
c0010f92:	e8 d1 fb ff ff       	call   c0010b68 <VgaText::putchar(char)>
c0010f97:	83 c4 10             	add    esp,0x10
c0010f9a:	eb e9                	jmp    c0010f85 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010f9c:	83 ec 0c             	sub    esp,0xc
c0010f9f:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010fa6:	56                   	push   esi
c0010fa7:	e8 86 f9 ff ff       	call   c0010932 <VgaText::doUpdate()>
c0010fac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010fb0:	89 38                	mov    DWORD PTR [eax],edi
c0010fb2:	83 c4 1c             	add    esp,0x1c
c0010fb5:	31 c0                	xor    eax,eax
c0010fb7:	5b                   	pop    ebx
c0010fb8:	5e                   	pop    esi
c0010fb9:	5f                   	pop    edi
c0010fba:	5d                   	pop    ebp
c0010fbb:	c3                   	ret    

c0010fbc <newTerminal(char*)>:
c0010fbc:	83 ec 28             	sub    esp,0x28
c0010fbf:	68 60 12 00 00       	push   0x1260
c0010fc4:	e8 0b e5 ff ff       	call   c000f4d4 <malloc>
c0010fc9:	5a                   	pop    edx
c0010fca:	59                   	pop    ecx
c0010fcb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010fcf:	50                   	push   eax
c0010fd0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010fd4:	e8 15 fd ff ff       	call   c0010cee <VgaText::VgaText(char const*)>
c0010fd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fdd:	83 c4 2c             	add    esp,0x2c
c0010fe0:	c3                   	ret    
c0010fe1:	90                   	nop

c0010fe2 <TSS::TSS()>:
c0010fe2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fe6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010fed:	90                   	nop
c0010fee:	c3                   	ret    
c0010fef:	90                   	nop

c0010ff0 <TSS::setESP(unsigned long)>:
c0010ff0:	55                   	push   ebp
c0010ff1:	89 e5                	mov    ebp,esp
c0010ff3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ff6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ff9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010ffc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fff:	90                   	nop
c0011000:	5d                   	pop    ebp
c0011001:	c3                   	ret    

c0011002 <TSS::flush()>:
c0011002:	55                   	push   ebp
c0011003:	89 e5                	mov    ebp,esp
c0011005:	83 ec 10             	sub    esp,0x10
c0011008:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001100b:	8b 00                	mov    eax,DWORD PTR [eax]
c001100d:	83 c8 03             	or     eax,0x3
c0011010:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011014:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011018:	66 89 d0             	mov    ax,dx
c001101b:	0f 00 d8             	ltr    ax
c001101e:	90                   	nop
c001101f:	c9                   	leave  
c0011020:	c3                   	ret    
c0011021:	90                   	nop

c0011022 <TSS::setup(unsigned long, unsigned long)>:
c0011022:	55                   	push   ebp
c0011023:	89 e5                	mov    ebp,esp
c0011025:	83 ec 18             	sub    esp,0x18
c0011028:	83 ec 0c             	sub    esp,0xc
c001102b:	6a 68                	push   0x68
c001102d:	e8 a2 e4 ff ff       	call   c000f4d4 <malloc>
c0011032:	83 c4 10             	add    esp,0x10
c0011035:	89 c2                	mov    edx,eax
c0011037:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001103a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001103d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011043:	83 ec 04             	sub    esp,0x4
c0011046:	6a 68                	push   0x68
c0011048:	6a 00                	push   0x0
c001104a:	50                   	push   eax
c001104b:	e8 3b f6 fe ff       	call   c000068b <memset>
c0011050:	83 c4 10             	add    esp,0x10
c0011053:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011056:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011059:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001105f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011062:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011065:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c001106b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001106e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011071:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011074:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011077:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001107a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001107d:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011083:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011086:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011089:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001108f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011092:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011095:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c001109b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001109e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110a1:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00110a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110ad:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00110b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110b9:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00110bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110c5:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00110c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00110cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110d1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00110d4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00110d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110dd:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00110e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110ea:	0f 20 da             	mov    edx,cr3
c00110ed:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00110f0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00110f3:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00110f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110fc:	83 ec 08             	sub    esp,0x8
c00110ff:	50                   	push   eax
c0011100:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011103:	50                   	push   eax
c0011104:	e8 a9 db ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c0011109:	83 c4 10             	add    esp,0x10
c001110c:	83 ec 08             	sub    esp,0x8
c001110f:	6a 68                	push   0x68
c0011111:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011114:	50                   	push   eax
c0011115:	e8 b4 db ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c001111a:	83 c4 10             	add    esp,0x10
c001111d:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011121:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011124:	83 e0 0f             	and    eax,0xf
c0011127:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001112a:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001112d:	83 c8 40             	or     eax,0x40
c0011130:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011133:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c0011138:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001113e:	05 78 01 00 00       	add    eax,0x178
c0011143:	83 ec 04             	sub    esp,0x4
c0011146:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011149:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001114c:	50                   	push   eax
c001114d:	e8 b0 db ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c0011152:	83 c4 10             	add    esp,0x10
c0011155:	89 c2                	mov    edx,eax
c0011157:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001115a:	89 10                	mov    DWORD PTR [eax],edx
c001115c:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c0011161:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011167:	05 78 01 00 00       	add    eax,0x178
c001116c:	83 ec 0c             	sub    esp,0xc
c001116f:	50                   	push   eax
c0011170:	e8 d1 db ff ff       	call   c000ed46 <GDT::flush()>
c0011175:	83 c4 10             	add    esp,0x10
c0011178:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001117b:	8b 00                	mov    eax,DWORD PTR [eax]
c001117d:	83 ec 08             	sub    esp,0x8
c0011180:	50                   	push   eax
c0011181:	68 28 86 02 c0       	push   0xc0028628
c0011186:	e8 16 15 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001118b:	83 c4 10             	add    esp,0x10
c001118e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011191:	8b 00                	mov    eax,DWORD PTR [eax]
c0011193:	c9                   	leave  
c0011194:	c3                   	ret    
c0011195:	90                   	nop

c0011196 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011196:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001119a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001119e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111a1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00111a6:	75 08                	jne    c00111b0 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00111a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00111ae:	eb 38                	jmp    c00111e8 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00111b0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00111b5:	75 17                	jne    c00111ce <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00111b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111bc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00111bf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00111c5:	8b 10                	mov    edx,DWORD PTR [eax]
c00111c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00111cb:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00111ce:	89 c1                	mov    ecx,eax
c00111d0:	83 e1 fd             	and    ecx,0xfffffffd
c00111d3:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00111d9:	74 cd                	je     c00111a8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00111db:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00111e0:	83 e0 ef             	and    eax,0xffffffef
c00111e3:	83 f8 08             	cmp    eax,0x8
c00111e6:	76 c0                	jbe    c00111a8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00111e8:	31 c0                	xor    eax,eax
c00111ea:	c3                   	ret    
c00111eb:	90                   	nop

c00111ec <ReservedFilename::isAtty()>:
c00111ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111f0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00111f3:	31 c0                	xor    eax,eax
c00111f5:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00111fb:	74 09                	je     c0011206 <ReservedFilename::isAtty()+0x1a>
c00111fd:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011203:	0f 94 c0             	sete   al
c0011206:	c3                   	ret    
c0011207:	90                   	nop

c0011208 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011208:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001120c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011210:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011213:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011217:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001121c:	75 08                	jne    c0011226 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001121e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011224:	eb 3d                	jmp    c0011263 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011226:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001122b:	75 17                	jne    c0011244 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001122d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011232:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011235:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001123b:	8b 10                	mov    edx,DWORD PTR [eax]
c001123d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011241:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011244:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011249:	75 04                	jne    c001124f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001124b:	89 0a                	mov    DWORD PTR [edx],ecx
c001124d:	eb 14                	jmp    c0011263 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001124f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011254:	74 c8                	je     c001121e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011256:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001125b:	83 e0 ef             	and    eax,0xffffffef
c001125e:	83 f8 08             	cmp    eax,0x8
c0011261:	76 bb                	jbe    c001121e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011263:	31 c0                	xor    eax,eax
c0011265:	c3                   	ret    

c0011266 <UnixFile::getFileDescriptor()>:
c0011266:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001126a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001126d:	c3                   	ret    

c001126e <UnixFile::UnixFile(int)>:
c001126e:	53                   	push   ebx
c001126f:	83 ec 28             	sub    esp,0x28
c0011272:	ba 14 87 02 c0       	mov    edx,0xc0028714
c0011277:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001127b:	89 10                	mov    DWORD PTR [eax],edx
c001127d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011285:	0f 8f 8c 01 00 00    	jg     c0011417 <UnixFile::UnixFile(int)+0x1a9>
c001128b:	a1 c0 b1 02 c0       	mov    eax,ds:0xc002b1c0
c0011290:	8d 50 01             	lea    edx,[eax+0x1]
c0011293:	89 15 c0 b1 02 c0    	mov    DWORD PTR ds:0xc002b1c0,edx
c0011299:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001129d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00112a0:	83 ec 08             	sub    esp,0x8
c00112a3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00112a7:	68 78 c3 02 c0       	push   0xc002c378
c00112ac:	e8 3f 57 01 00       	call   c00269f0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00112b1:	83 c4 10             	add    esp,0x10
c00112b4:	a0 74 c3 02 c0       	mov    al,ds:0xc002c374
c00112b9:	83 f0 01             	xor    eax,0x1
c00112bc:	84 c0                	test   al,al
c00112be:	0f 84 54 01 00 00    	je     c0011418 <UnixFile::UnixFile(int)+0x1aa>
c00112c4:	c6 05 74 c3 02 c0 01 	mov    BYTE PTR ds:0xc002c374,0x1
c00112cb:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00112d3:	83 ec 0c             	sub    esp,0xc
c00112d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00112da:	e8 f5 e1 ff ff       	call   c000f4d4 <malloc>
c00112df:	83 c4 10             	add    esp,0x10
c00112e2:	89 c3                	mov    ebx,eax
c00112e4:	83 ec 08             	sub    esp,0x8
c00112e7:	68 03 ff ff 0f       	push   0xfffff03
c00112ec:	53                   	push   ebx
c00112ed:	e8 2c 01 00 00       	call   c001141e <ReservedFilename::ReservedFilename(int)>
c00112f2:	83 c4 10             	add    esp,0x10
c00112f5:	89 1d 6c c3 02 c0    	mov    DWORD PTR ds:0xc002c36c,ebx
c00112fb:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011303:	83 ec 0c             	sub    esp,0xc
c0011306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001130a:	e8 c5 e1 ff ff       	call   c000f4d4 <malloc>
c001130f:	83 c4 10             	add    esp,0x10
c0011312:	89 c3                	mov    ebx,eax
c0011314:	83 ec 08             	sub    esp,0x8
c0011317:	68 01 ff ff 0f       	push   0xfffff01
c001131c:	53                   	push   ebx
c001131d:	e8 fc 00 00 00       	call   c001141e <ReservedFilename::ReservedFilename(int)>
c0011322:	83 c4 10             	add    esp,0x10
c0011325:	89 1d 70 c3 02 c0    	mov    DWORD PTR ds:0xc002c370,ebx
c001132b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011333:	83 ec 0c             	sub    esp,0xc
c0011336:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001133a:	e8 95 e1 ff ff       	call   c000f4d4 <malloc>
c001133f:	83 c4 10             	add    esp,0x10
c0011342:	89 c3                	mov    ebx,eax
c0011344:	83 ec 08             	sub    esp,0x8
c0011347:	68 00 ff ff 0f       	push   0xfffff00
c001134c:	53                   	push   ebx
c001134d:	e8 cc 00 00 00       	call   c001141e <ReservedFilename::ReservedFilename(int)>
c0011352:	83 c4 10             	add    esp,0x10
c0011355:	89 1d 64 c3 02 c0    	mov    DWORD PTR ds:0xc002c364,ebx
c001135b:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011363:	83 ec 0c             	sub    esp,0xc
c0011366:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001136a:	e8 65 e1 ff ff       	call   c000f4d4 <malloc>
c001136f:	83 c4 10             	add    esp,0x10
c0011372:	89 c3                	mov    ebx,eax
c0011374:	83 ec 08             	sub    esp,0x8
c0011377:	68 02 ff ff 0f       	push   0xfffff02
c001137c:	53                   	push   ebx
c001137d:	e8 9c 00 00 00       	call   c001141e <ReservedFilename::ReservedFilename(int)>
c0011382:	83 c4 10             	add    esp,0x10
c0011385:	89 1d 68 c3 02 c0    	mov    DWORD PTR ds:0xc002c368,ebx
c001138b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011393:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011398:	7f 7e                	jg     c0011418 <UnixFile::UnixFile(int)+0x1aa>
c001139a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00113a2:	83 ec 0c             	sub    esp,0xc
c00113a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00113a9:	e8 26 e1 ff ff       	call   c000f4d4 <malloc>
c00113ae:	83 c4 10             	add    esp,0x10
c00113b1:	89 c3                	mov    ebx,eax
c00113b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113b7:	05 10 ff ff 0f       	add    eax,0xfffff10
c00113bc:	83 ec 08             	sub    esp,0x8
c00113bf:	50                   	push   eax
c00113c0:	53                   	push   ebx
c00113c1:	e8 58 00 00 00       	call   c001141e <ReservedFilename::ReservedFilename(int)>
c00113c6:	83 c4 10             	add    esp,0x10
c00113c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113cd:	89 1c 85 40 c3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3cc0],ebx
c00113d4:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00113dc:	83 ec 0c             	sub    esp,0xc
c00113df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00113e3:	e8 ec e0 ff ff       	call   c000f4d4 <malloc>
c00113e8:	83 c4 10             	add    esp,0x10
c00113eb:	89 c3                	mov    ebx,eax
c00113ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113f1:	05 20 ff ff 0f       	add    eax,0xfffff20
c00113f6:	83 ec 08             	sub    esp,0x8
c00113f9:	50                   	push   eax
c00113fa:	53                   	push   ebx
c00113fb:	e8 1e 00 00 00       	call   c001141e <ReservedFilename::ReservedFilename(int)>
c0011400:	83 c4 10             	add    esp,0x10
c0011403:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011407:	89 1c 85 00 c3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3d00],ebx
c001140e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011412:	e9 7c ff ff ff       	jmp    c0011393 <UnixFile::UnixFile(int)+0x125>
c0011417:	90                   	nop
c0011418:	83 c4 28             	add    esp,0x28
c001141b:	5b                   	pop    ebx
c001141c:	c3                   	ret    
c001141d:	90                   	nop

c001141e <ReservedFilename::ReservedFilename(int)>:
c001141e:	83 ec 0c             	sub    esp,0xc
c0011421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011425:	83 ec 08             	sub    esp,0x8
c0011428:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001142c:	50                   	push   eax
c001142d:	e8 3c fe ff ff       	call   c001126e <UnixFile::UnixFile(int)>
c0011432:	83 c4 10             	add    esp,0x10
c0011435:	ba 30 87 02 c0       	mov    edx,0xc0028730
c001143a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001143e:	89 10                	mov    DWORD PTR [eax],edx
c0011440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011444:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011448:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001144b:	90                   	nop
c001144c:	83 c4 0c             	add    esp,0xc
c001144f:	c3                   	ret    

c0011450 <UnixFile::~UnixFile()>:
c0011450:	83 ec 1c             	sub    esp,0x1c
c0011453:	ba 14 87 02 c0       	mov    edx,0xc0028714
c0011458:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001145c:	89 10                	mov    DWORD PTR [eax],edx
c001145e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011462:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011465:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001146a:	7f 73                	jg     c00114df <UnixFile::~UnixFile()+0x8f>
c001146c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011474:	83 ec 0c             	sub    esp,0xc
c0011477:	68 78 c3 02 c0       	push   0xc002c378
c001147c:	e8 43 56 01 00       	call   c0026ac4 <LinkedList<UnixFile>::getFirstElement()>
c0011481:	83 c4 10             	add    esp,0x10
c0011484:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011488:	83 ec 0c             	sub    esp,0xc
c001148b:	68 78 c3 02 c0       	push   0xc002c378
c0011490:	e8 37 56 01 00       	call   c0026acc <LinkedList<UnixFile>::removeFirst()>
c0011495:	83 c4 10             	add    esp,0x10
c0011498:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001149c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00114a0:	74 40                	je     c00114e2 <UnixFile::~UnixFile()+0x92>
c00114a2:	83 ec 08             	sub    esp,0x8
c00114a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00114a9:	68 78 c3 02 c0       	push   0xc002c378
c00114ae:	e8 3d 55 01 00       	call   c00269f0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00114b3:	83 c4 10             	add    esp,0x10
c00114b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114ba:	8d 50 01             	lea    edx,[eax+0x1]
c00114bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00114c1:	3d 88 13 00 00       	cmp    eax,0x1388
c00114c6:	0f 94 c0             	sete   al
c00114c9:	84 c0                	test   al,al
c00114cb:	74 a7                	je     c0011474 <UnixFile::~UnixFile()+0x24>
c00114cd:	83 ec 0c             	sub    esp,0xc
c00114d0:	68 ec 86 02 c0       	push   0xc00286ec
c00114d5:	e8 a2 80 00 00       	call   c001957c <Krnl::panic(char const*)>
c00114da:	83 c4 10             	add    esp,0x10
c00114dd:	eb 95                	jmp    c0011474 <UnixFile::~UnixFile()+0x24>
c00114df:	90                   	nop
c00114e0:	eb 01                	jmp    c00114e3 <UnixFile::~UnixFile()+0x93>
c00114e2:	90                   	nop
c00114e3:	90                   	nop
c00114e4:	83 c4 1c             	add    esp,0x1c
c00114e7:	c3                   	ret    

c00114e8 <UnixFile::~UnixFile()>:
c00114e8:	83 ec 0c             	sub    esp,0xc
c00114eb:	83 ec 0c             	sub    esp,0xc
c00114ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114f2:	e8 59 ff ff ff       	call   c0011450 <UnixFile::~UnixFile()>
c00114f7:	83 c4 10             	add    esp,0x10
c00114fa:	83 ec 08             	sub    esp,0x8
c00114fd:	6a 0c                	push   0xc
c00114ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011503:	e8 b9 10 00 00       	call   c00125c1 <operator delete(void*, unsigned long)>
c0011508:	83 c4 10             	add    esp,0x10
c001150b:	83 c4 0c             	add    esp,0xc
c001150e:	c3                   	ret    
c001150f:	90                   	nop

c0011510 <ReservedFilename::~ReservedFilename()>:
c0011510:	83 ec 0c             	sub    esp,0xc
c0011513:	ba 30 87 02 c0       	mov    edx,0xc0028730
c0011518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001151c:	89 10                	mov    DWORD PTR [eax],edx
c001151e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011522:	83 ec 0c             	sub    esp,0xc
c0011525:	50                   	push   eax
c0011526:	e8 25 ff ff ff       	call   c0011450 <UnixFile::~UnixFile()>
c001152b:	83 c4 10             	add    esp,0x10
c001152e:	90                   	nop
c001152f:	83 c4 0c             	add    esp,0xc
c0011532:	c3                   	ret    
c0011533:	90                   	nop

c0011534 <ReservedFilename::~ReservedFilename()>:
c0011534:	83 ec 0c             	sub    esp,0xc
c0011537:	83 ec 0c             	sub    esp,0xc
c001153a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001153e:	e8 cd ff ff ff       	call   c0011510 <ReservedFilename::~ReservedFilename()>
c0011543:	83 c4 10             	add    esp,0x10
c0011546:	83 ec 08             	sub    esp,0x8
c0011549:	6a 0c                	push   0xc
c001154b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001154f:	e8 6d 10 00 00       	call   c00125c1 <operator delete(void*, unsigned long)>
c0011554:	83 c4 10             	add    esp,0x10
c0011557:	83 c4 0c             	add    esp,0xc
c001155a:	c3                   	ret    

c001155b <getFromFileDescriptor(int)>:
c001155b:	53                   	push   ebx
c001155c:	83 ec 08             	sub    esp,0x8
c001155f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011563:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011569:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001156f:	7f 2c                	jg     c001159d <getFromFileDescriptor(int)+0x42>
c0011571:	83 ec 0c             	sub    esp,0xc
c0011574:	68 78 c3 02 c0       	push   0xc002c378
c0011579:	e8 46 55 01 00       	call   c0026ac4 <LinkedList<UnixFile>::getFirstElement()>
c001157e:	83 c4 10             	add    esp,0x10
c0011581:	85 c0                	test   eax,eax
c0011583:	75 04                	jne    c0011589 <getFromFileDescriptor(int)+0x2e>
c0011585:	31 c0                	xor    eax,eax
c0011587:	eb 6e                	jmp    c00115f7 <getFromFileDescriptor(int)+0x9c>
c0011589:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001158c:	74 69                	je     c00115f7 <getFromFileDescriptor(int)+0x9c>
c001158e:	52                   	push   edx
c001158f:	52                   	push   edx
c0011590:	50                   	push   eax
c0011591:	68 78 c3 02 c0       	push   0xc002c378
c0011596:	e8 d3 55 01 00       	call   c0026b6e <LinkedList<UnixFile>::getNext(UnixFile*)>
c001159b:	eb e1                	jmp    c001157e <getFromFileDescriptor(int)+0x23>
c001159d:	a1 6c c3 02 c0       	mov    eax,ds:0xc002c36c
c00115a2:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00115a8:	74 4d                	je     c00115f7 <getFromFileDescriptor(int)+0x9c>
c00115aa:	a1 70 c3 02 c0       	mov    eax,ds:0xc002c370
c00115af:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00115b5:	74 40                	je     c00115f7 <getFromFileDescriptor(int)+0x9c>
c00115b7:	a1 68 c3 02 c0       	mov    eax,ds:0xc002c368
c00115bc:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00115c2:	74 33                	je     c00115f7 <getFromFileDescriptor(int)+0x9c>
c00115c4:	a1 64 c3 02 c0       	mov    eax,ds:0xc002c364
c00115c9:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00115cf:	74 26                	je     c00115f7 <getFromFileDescriptor(int)+0x9c>
c00115d1:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00115d7:	83 f8 08             	cmp    eax,0x8
c00115da:	77 09                	ja     c00115e5 <getFromFileDescriptor(int)+0x8a>
c00115dc:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c00115e3:	eb 12                	jmp    c00115f7 <getFromFileDescriptor(int)+0x9c>
c00115e5:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00115eb:	83 fb 08             	cmp    ebx,0x8
c00115ee:	77 95                	ja     c0011585 <getFromFileDescriptor(int)+0x2a>
c00115f0:	8b 04 9d 00 c3 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3d00]
c00115f7:	83 c4 08             	add    esp,0x8
c00115fa:	5b                   	pop    ebx
c00115fb:	c3                   	ret    

c00115fc <__static_initialization_and_destruction_0(int, int)>:
c00115fc:	83 ec 0c             	sub    esp,0xc
c00115ff:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011604:	75 34                	jne    c001163a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011606:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001160e:	75 2a                	jne    c001163a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011610:	83 ec 0c             	sub    esp,0xc
c0011613:	68 78 c3 02 c0       	push   0xc002c378
c0011618:	e8 7b 53 01 00       	call   c0026998 <LinkedList<UnixFile>::LinkedList()>
c001161d:	83 c4 10             	add    esp,0x10
c0011620:	83 ec 04             	sub    esp,0x4
c0011623:	68 3c b1 02 c0       	push   0xc002b13c
c0011628:	68 78 c3 02 c0       	push   0xc002c378
c001162d:	68 96 69 02 c0       	push   0xc0026996
c0011632:	e8 04 0f 00 00       	call   c001253b <__cxa_atexit>
c0011637:	83 c4 10             	add    esp,0x10
c001163a:	90                   	nop
c001163b:	83 c4 0c             	add    esp,0xc
c001163e:	c3                   	ret    

c001163f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001163f:	83 ec 0c             	sub    esp,0xc
c0011642:	83 ec 08             	sub    esp,0x8
c0011645:	68 ff ff 00 00       	push   0xffff
c001164a:	6a 01                	push   0x1
c001164c:	e8 ab ff ff ff       	call   c00115fc <__static_initialization_and_destruction_0(int, int)>
c0011651:	83 c4 10             	add    esp,0x10
c0011654:	83 c4 0c             	add    esp,0xc
c0011657:	c3                   	ret    

c0011658 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011658:	53                   	push   ebx
c0011659:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001165d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011661:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011667:	89 c8                	mov    eax,ecx
c0011669:	d1 e8                	shr    eax,1
c001166b:	03 05 c8 b1 02 c0    	add    eax,DWORD PTR ds:0xc002b1c8
c0011671:	83 e1 01             	and    ecx,0x1
c0011674:	8a 10                	mov    dl,BYTE PTR [eax]
c0011676:	75 09                	jne    c0011681 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011678:	83 e2 f0             	and    edx,0xfffffff0
c001167b:	09 da                	or     edx,ebx
c001167d:	88 10                	mov    BYTE PTR [eax],dl
c001167f:	5b                   	pop    ebx
c0011680:	c3                   	ret    
c0011681:	c1 e3 04             	shl    ebx,0x4
c0011684:	83 e2 0f             	and    edx,0xf
c0011687:	09 da                	or     edx,ebx
c0011689:	88 10                	mov    BYTE PTR [eax],dl
c001168b:	5b                   	pop    ebx
c001168c:	c3                   	ret    

c001168d <Virt::getPageState(unsigned long)>:
c001168d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011691:	8b 0d c8 b1 02 c0    	mov    ecx,DWORD PTR ds:0xc002b1c8
c0011697:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001169d:	89 d0                	mov    eax,edx
c001169f:	d1 e8                	shr    eax,1
c00116a1:	83 e2 01             	and    edx,0x1
c00116a4:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00116a7:	75 04                	jne    c00116ad <Virt::getPageState(unsigned long)+0x20>
c00116a9:	83 e0 0f             	and    eax,0xf
c00116ac:	c3                   	ret    
c00116ad:	c0 e8 04             	shr    al,0x4
c00116b0:	c3                   	ret    

c00116b1 <Virt::allocateKernelVirtualPages(int)>:
c00116b1:	55                   	push   ebp
c00116b2:	31 ed                	xor    ebp,ebp
c00116b4:	57                   	push   edi
c00116b5:	56                   	push   esi
c00116b6:	53                   	push   ebx
c00116b7:	31 db                	xor    ebx,ebx
c00116b9:	83 ec 1c             	sub    esp,0x1c
c00116bc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00116c0:	8b 3d c4 b1 02 c0    	mov    edi,DWORD PTR ds:0xc002b1c4
c00116c6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00116cb:	57                   	push   edi
c00116cc:	e8 bc ff ff ff       	call   c001168d <Virt::getPageState(unsigned long)>
c00116d1:	5a                   	pop    edx
c00116d2:	84 c0                	test   al,al
c00116d4:	75 3a                	jne    c0011710 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00116d6:	85 db                	test   ebx,ebx
c00116d8:	75 02                	jne    c00116dc <Virt::allocateKernelVirtualPages(int)+0x2b>
c00116da:	89 fd                	mov    ebp,edi
c00116dc:	43                   	inc    ebx
c00116dd:	39 f3                	cmp    ebx,esi
c00116df:	74 5a                	je     c001173b <Virt::allocateKernelVirtualPages(int)+0x8a>
c00116e1:	47                   	inc    edi
c00116e2:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00116e8:	76 31                	jbe    c001171b <Virt::allocateKernelVirtualPages(int)+0x6a>
c00116ea:	c7 05 c4 b1 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002b1c4,0xc8000
c00116f4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00116f9:	75 28                	jne    c0011723 <Virt::allocateKernelVirtualPages(int)+0x72>
c00116fb:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011700:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011705:	57                   	push   edi
c0011706:	e8 82 ff ff ff       	call   c001168d <Virt::getPageState(unsigned long)>
c001170b:	5a                   	pop    edx
c001170c:	84 c0                	test   al,al
c001170e:	74 c6                	je     c00116d6 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011710:	31 db                	xor    ebx,ebx
c0011712:	47                   	inc    edi
c0011713:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011719:	77 cf                	ja     c00116ea <Virt::allocateKernelVirtualPages(int)+0x39>
c001171b:	89 3d c4 b1 02 c0    	mov    DWORD PTR ds:0xc002b1c4,edi
c0011721:	eb a8                	jmp    c00116cb <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011723:	83 ec 0c             	sub    esp,0xc
c0011726:	68 44 87 02 c0       	push   0xc0028744
c001172b:	e8 4c 7e 00 00       	call   c001957c <Krnl::panic(char const*)>
c0011730:	8b 3d c4 b1 02 c0    	mov    edi,DWORD PTR ds:0xc002b1c4
c0011736:	83 c4 10             	add    esp,0x10
c0011739:	eb 90                	jmp    c00116cb <Virt::allocateKernelVirtualPages(int)+0x1a>
c001173b:	89 2d c4 b1 02 c0    	mov    DWORD PTR ds:0xc002b1c4,ebp
c0011741:	4b                   	dec    ebx
c0011742:	74 5f                	je     c00117a3 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011744:	85 f6                	test   esi,esi
c0011746:	74 3d                	je     c0011785 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011748:	89 e8                	mov    eax,ebp
c001174a:	31 db                	xor    ebx,ebx
c001174c:	8d 7e ff             	lea    edi,[esi-0x1]
c001174f:	eb 14                	jmp    c0011765 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011751:	6a 01                	push   0x1
c0011753:	43                   	inc    ebx
c0011754:	50                   	push   eax
c0011755:	e8 fe fe ff ff       	call   c0011658 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001175a:	58                   	pop    eax
c001175b:	39 f3                	cmp    ebx,esi
c001175d:	5a                   	pop    edx
c001175e:	74 25                	je     c0011785 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011760:	a1 c4 b1 02 c0       	mov    eax,ds:0xc002b1c4
c0011765:	8d 50 01             	lea    edx,[eax+0x1]
c0011768:	85 db                	test   ebx,ebx
c001176a:	89 15 c4 b1 02 c0    	mov    DWORD PTR ds:0xc002b1c4,edx
c0011770:	74 20                	je     c0011792 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011772:	39 df                	cmp    edi,ebx
c0011774:	75 db                	jne    c0011751 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011776:	6a 03                	push   0x3
c0011778:	43                   	inc    ebx
c0011779:	50                   	push   eax
c001177a:	e8 d9 fe ff ff       	call   c0011658 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001177f:	59                   	pop    ecx
c0011780:	39 f3                	cmp    ebx,esi
c0011782:	58                   	pop    eax
c0011783:	75 db                	jne    c0011760 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011785:	83 c4 1c             	add    esp,0x1c
c0011788:	89 e8                	mov    eax,ebp
c001178a:	5b                   	pop    ebx
c001178b:	c1 e0 0c             	shl    eax,0xc
c001178e:	5e                   	pop    esi
c001178f:	5f                   	pop    edi
c0011790:	5d                   	pop    ebp
c0011791:	c3                   	ret    
c0011792:	6a 02                	push   0x2
c0011794:	bb 01 00 00 00       	mov    ebx,0x1
c0011799:	50                   	push   eax
c001179a:	e8 b9 fe ff ff       	call   c0011658 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001179f:	58                   	pop    eax
c00117a0:	5a                   	pop    edx
c00117a1:	eb bd                	jmp    c0011760 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00117a3:	6a 04                	push   0x4
c00117a5:	8d 45 01             	lea    eax,[ebp+0x1]
c00117a8:	55                   	push   ebp
c00117a9:	a3 c4 b1 02 c0       	mov    ds:0xc002b1c4,eax
c00117ae:	e8 a5 fe ff ff       	call   c0011658 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117b3:	59                   	pop    ecx
c00117b4:	89 e8                	mov    eax,ebp
c00117b6:	5b                   	pop    ebx
c00117b7:	c1 e0 0c             	shl    eax,0xc
c00117ba:	83 c4 1c             	add    esp,0x1c
c00117bd:	5b                   	pop    ebx
c00117be:	5e                   	pop    esi
c00117bf:	5f                   	pop    edi
c00117c0:	5d                   	pop    ebp
c00117c1:	c3                   	ret    

c00117c2 <Virt::virtualMemorySetup()>:
c00117c2:	53                   	push   ebx
c00117c3:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00117c8:	83 ec 08             	sub    esp,0x8
c00117cb:	6a 0f                	push   0xf
c00117cd:	53                   	push   ebx
c00117ce:	43                   	inc    ebx
c00117cf:	e8 84 fe ff ff       	call   c0011658 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117d4:	59                   	pop    ecx
c00117d5:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00117db:	58                   	pop    eax
c00117dc:	75 ed                	jne    c00117cb <Virt::virtualMemorySetup()+0x9>
c00117de:	83 ec 08             	sub    esp,0x8
c00117e1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00117e6:	68 00 00 00 c8       	push   0xc8000000
c00117eb:	68 cb 88 02 c0       	push   0xc00288cb
c00117f0:	e8 ac 0e 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00117f5:	58                   	pop    eax
c00117f6:	5a                   	pop    edx
c00117f7:	68 00 f0 ff ef       	push   0xeffff000
c00117fc:	68 df 88 02 c0       	push   0xc00288df
c0011801:	e8 9b 0e 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0011806:	83 c4 10             	add    esp,0x10
c0011809:	83 ec 08             	sub    esp,0x8
c001180c:	6a 00                	push   0x0
c001180e:	53                   	push   ebx
c001180f:	43                   	inc    ebx
c0011810:	e8 43 fe ff ff       	call   c0011658 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011815:	83 c4 10             	add    esp,0x10
c0011818:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001181e:	75 e9                	jne    c0011809 <Virt::virtualMemorySetup()+0x47>
c0011820:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011825:	83 ec 08             	sub    esp,0x8
c0011828:	6a 0f                	push   0xf
c001182a:	53                   	push   ebx
c001182b:	43                   	inc    ebx
c001182c:	e8 27 fe ff ff       	call   c0011658 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011831:	83 c4 10             	add    esp,0x10
c0011834:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c001183a:	75 e9                	jne    c0011825 <Virt::virtualMemorySetup()+0x63>
c001183c:	83 c4 08             	add    esp,0x8
c001183f:	5b                   	pop    ebx
c0011840:	c3                   	ret    

c0011841 <Virt::getAKernelVAS()>:
c0011841:	a1 84 c3 02 c0       	mov    eax,ds:0xc002c384
c0011846:	c3                   	ret    

c0011847 <Virt::setupPageSwapping(int)>:
c0011847:	57                   	push   edi
c0011848:	56                   	push   esi
c0011849:	53                   	push   ebx
c001184a:	83 ec 1c             	sub    esp,0x1c
c001184d:	68 14 01 00 00       	push   0x114
c0011852:	e8 7d dc ff ff       	call   c000f4d4 <malloc>
c0011857:	83 c4 0c             	add    esp,0xc
c001185a:	89 c6                	mov    esi,eax
c001185c:	ff 35 54 d7 02 c0    	push   DWORD PTR ds:0xc002d754
c0011862:	68 f3 88 02 c0       	push   0xc00288f3
c0011867:	50                   	push   eax
c0011868:	e8 63 13 00 00       	call   c0012bd0 <File::File(char const*, Process*)>
c001186d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011870:	e8 37 15 00 00       	call   c0012dac <File::unlink()>
c0011875:	58                   	pop    eax
c0011876:	5a                   	pop    edx
c0011877:	6a 12                	push   0x12
c0011879:	56                   	push   esi
c001187a:	e8 b5 13 00 00       	call   c0012c34 <File::open(FileOpenMode)>
c001187f:	83 c4 10             	add    esp,0x10
c0011882:	85 c0                	test   eax,eax
c0011884:	0f 85 ca 00 00 00    	jne    c0011954 <Virt::setupPageSwapping(int)+0x10d>
c001188a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001188e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011896:	c1 e3 08             	shl    ebx,0x8
c0011899:	83 ec 0c             	sub    esp,0xc
c001189c:	68 00 00 01 00       	push   0x10000
c00118a1:	e8 2e dc ff ff       	call   c000f4d4 <malloc>
c00118a6:	83 c4 0c             	add    esp,0xc
c00118a9:	89 c7                	mov    edi,eax
c00118ab:	68 00 00 01 00       	push   0x10000
c00118b0:	6a 00                	push   0x0
c00118b2:	50                   	push   eax
c00118b3:	e8 d3 ed fe ff       	call   c000068b <memset>
c00118b8:	83 c4 10             	add    esp,0x10
c00118bb:	85 db                	test   ebx,ebx
c00118bd:	79 03                	jns    c00118c2 <Virt::setupPageSwapping(int)+0x7b>
c00118bf:	83 c3 0f             	add    ebx,0xf
c00118c2:	c1 fb 04             	sar    ebx,0x4
c00118c5:	4b                   	dec    ebx
c00118c6:	83 fb ff             	cmp    ebx,0xffffffff
c00118c9:	74 4b                	je     c0011916 <Virt::setupPageSwapping(int)+0xcf>
c00118cb:	83 ec 0c             	sub    esp,0xc
c00118ce:	8b 06                	mov    eax,DWORD PTR [esi]
c00118d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00118d4:	52                   	push   edx
c00118d5:	57                   	push   edi
c00118d6:	6a 00                	push   0x0
c00118d8:	68 00 00 01 00       	push   0x10000
c00118dd:	56                   	push   esi
c00118de:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00118e1:	83 c4 20             	add    esp,0x20
c00118e4:	85 c0                	test   eax,eax
c00118e6:	75 59                	jne    c0011941 <Virt::setupPageSwapping(int)+0xfa>
c00118e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118ec:	3d 00 00 01 00       	cmp    eax,0x10000
c00118f1:	74 d2                	je     c00118c5 <Virt::setupPageSwapping(int)+0x7e>
c00118f3:	83 ec 08             	sub    esp,0x8
c00118f6:	4b                   	dec    ebx
c00118f7:	50                   	push   eax
c00118f8:	68 46 89 02 c0       	push   0xc0028946
c00118fd:	e8 9f 0d 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0011902:	c7 04 24 4f 89 02 c0 	mov    DWORD PTR [esp],0xc002894f
c0011909:	e8 6e 7c 00 00       	call   c001957c <Krnl::panic(char const*)>
c001190e:	83 c4 10             	add    esp,0x10
c0011911:	83 fb ff             	cmp    ebx,0xffffffff
c0011914:	75 b5                	jne    c00118cb <Virt::setupPageSwapping(int)+0x84>
c0011916:	83 ec 0c             	sub    esp,0xc
c0011919:	56                   	push   esi
c001191a:	e8 73 13 00 00       	call   c0012c92 <File::close()>
c001191f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011922:	e8 cd db ff ff       	call   c000f4f4 <rfree>
c0011927:	83 c4 10             	add    esp,0x10
c001192a:	85 f6                	test   esi,esi
c001192c:	74 0c                	je     c001193a <Virt::setupPageSwapping(int)+0xf3>
c001192e:	83 ec 0c             	sub    esp,0xc
c0011931:	8b 06                	mov    eax,DWORD PTR [esi]
c0011933:	56                   	push   esi
c0011934:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011937:	83 c4 10             	add    esp,0x10
c001193a:	83 c4 10             	add    esp,0x10
c001193d:	5b                   	pop    ebx
c001193e:	5e                   	pop    esi
c001193f:	5f                   	pop    edi
c0011940:	c3                   	ret    
c0011941:	83 ec 08             	sub    esp,0x8
c0011944:	50                   	push   eax
c0011945:	68 2e 89 02 c0       	push   0xc002892e
c001194a:	e8 52 0d 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001194f:	83 c4 10             	add    esp,0x10
c0011952:	eb 94                	jmp    c00118e8 <Virt::setupPageSwapping(int)+0xa1>
c0011954:	83 ec 08             	sub    esp,0x8
c0011957:	50                   	push   eax
c0011958:	68 0a 89 02 c0       	push   0xc002890a
c001195d:	e8 3f 0d 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0011962:	c7 04 24 13 89 02 c0 	mov    DWORD PTR [esp],0xc0028913
c0011969:	e8 0e 7c 00 00       	call   c001957c <Krnl::panic(char const*)>
c001196e:	83 c4 10             	add    esp,0x10
c0011971:	e9 14 ff ff ff       	jmp    c001188a <Virt::setupPageSwapping(int)+0x43>

c0011976 <VAS::VAS()>:
c0011976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001197a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011981:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011985:	a3 84 c3 02 c0       	mov    ds:0xc002c384,eax
c001198a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001198e:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011992:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011996:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011999:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001199d:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c00119a4:	90                   	nop
c00119a5:	c3                   	ret    

c00119a6 <VAS::VAS(VAS*)>:
c00119a6:	83 ec 0c             	sub    esp,0xc
c00119a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00119b4:	83 ec 0c             	sub    esp,0xc
c00119b7:	68 64 87 02 c0       	push   0xc0028764
c00119bc:	e8 bb 7b 00 00       	call   c001957c <Krnl::panic(char const*)>
c00119c1:	83 c4 10             	add    esp,0x10
c00119c4:	90                   	nop
c00119c5:	83 c4 0c             	add    esp,0xc
c00119c8:	c3                   	ret    
c00119c9:	90                   	nop

c00119ca <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00119ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119ce:	89 c2                	mov    edx,eax
c00119d0:	c1 e8 0a             	shr    eax,0xa
c00119d3:	c1 ea 16             	shr    edx,0x16
c00119d6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00119db:	19 c9                	sbb    ecx,ecx
c00119dd:	c1 e2 0c             	shl    edx,0xc
c00119e0:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00119e6:	25 fc 0f 00 00       	and    eax,0xffc
c00119eb:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00119f2:	01 d0                	add    eax,edx
c00119f4:	c3                   	ret    
c00119f5:	90                   	nop

c00119f6 <VAS::getPageTableEntry(unsigned long)>:
c00119f6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00119fa:	89 ca                	mov    edx,ecx
c00119fc:	c1 e9 0a             	shr    ecx,0xa
c00119ff:	c1 ea 16             	shr    edx,0x16
c0011a02:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011a08:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011a0e:	c1 e0 0c             	shl    eax,0xc
c0011a11:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011a14:	c3                   	ret    

c0011a15 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011a15:	57                   	push   edi
c0011a16:	56                   	push   esi
c0011a17:	be 01 00 00 00       	mov    esi,0x1
c0011a1c:	53                   	push   ebx
c0011a1d:	83 ec 10             	sub    esp,0x10
c0011a20:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011a24:	c1 eb 0c             	shr    ebx,0xc
c0011a27:	eb 3f                	jmp    c0011a68 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011a29:	e8 13 fe ff ff       	call   c0011841 <Virt::getAKernelVAS()>
c0011a2e:	83 ec 08             	sub    esp,0x8
c0011a31:	57                   	push   edi
c0011a32:	50                   	push   eax
c0011a33:	e8 be ff ff ff       	call   c00119f6 <VAS::getPageTableEntry(unsigned long)>
c0011a38:	83 c4 10             	add    esp,0x10
c0011a3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a3d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a41:	f6 c4 04             	test   ah,0x4
c0011a44:	75 5f                	jne    c0011aa5 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011a46:	80 fa 04             	cmp    dl,0x4
c0011a49:	74 78                	je     c0011ac3 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011a4b:	80 fa 02             	cmp    dl,0x2
c0011a4e:	0f 84 88 00 00 00    	je     c0011adc <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011a54:	80 fa 03             	cmp    dl,0x3
c0011a57:	0f 84 ad 00 00 00    	je     c0011b0a <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011a5d:	fe ca                	dec    dl
c0011a5f:	0f 84 92 00 00 00    	je     c0011af7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011a65:	43                   	inc    ebx
c0011a66:	31 f6                	xor    esi,esi
c0011a68:	53                   	push   ebx
c0011a69:	e8 1f fc ff ff       	call   c001168d <Virt::getPageState(unsigned long)>
c0011a6e:	5f                   	pop    edi
c0011a6f:	89 df                	mov    edi,ebx
c0011a71:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011a75:	c1 e7 0c             	shl    edi,0xc
c0011a78:	84 c0                	test   al,al
c0011a7a:	75 ad                	jne    c0011a29 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011a7c:	83 ec 0c             	sub    esp,0xc
c0011a7f:	68 55 89 02 c0       	push   0xc0028955
c0011a84:	e8 f3 7a 00 00       	call   c001957c <Krnl::panic(char const*)>
c0011a89:	e8 b3 fd ff ff       	call   c0011841 <Virt::getAKernelVAS()>
c0011a8e:	5a                   	pop    edx
c0011a8f:	59                   	pop    ecx
c0011a90:	57                   	push   edi
c0011a91:	50                   	push   eax
c0011a92:	e8 5f ff ff ff       	call   c00119f6 <VAS::getPageTableEntry(unsigned long)>
c0011a97:	83 c4 10             	add    esp,0x10
c0011a9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a9c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011aa0:	f6 c4 04             	test   ah,0x4
c0011aa3:	74 c0                	je     c0011a65 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011aa5:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011aa9:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011aae:	83 ec 0c             	sub    esp,0xc
c0011ab1:	50                   	push   eax
c0011ab2:	e8 3d df ff ff       	call   c000f9f4 <Phys::freePage(unsigned long)>
c0011ab7:	83 c4 10             	add    esp,0x10
c0011aba:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011abe:	80 fa 04             	cmp    dl,0x4
c0011ac1:	75 88                	jne    c0011a4b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011ac3:	89 f0                	mov    eax,esi
c0011ac5:	84 c0                	test   al,al
c0011ac7:	75 47                	jne    c0011b10 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011ac9:	c7 44 24 20 88 87 02 c0 	mov    DWORD PTR [esp+0x20],0xc0028788
c0011ad1:	83 c4 10             	add    esp,0x10
c0011ad4:	5b                   	pop    ebx
c0011ad5:	5e                   	pop    esi
c0011ad6:	5f                   	pop    edi
c0011ad7:	e9 a0 7a 00 00       	jmp    c001957c <Krnl::panic(char const*)>
c0011adc:	89 f0                	mov    eax,esi
c0011ade:	84 c0                	test   al,al
c0011ae0:	75 15                	jne    c0011af7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011ae2:	83 ec 0c             	sub    esp,0xc
c0011ae5:	68 71 89 02 c0       	push   0xc0028971
c0011aea:	e8 8d 7a 00 00       	call   c001957c <Krnl::panic(char const*)>
c0011aef:	83 c4 10             	add    esp,0x10
c0011af2:	e9 6e ff ff ff       	jmp    c0011a65 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011af7:	83 ec 08             	sub    esp,0x8
c0011afa:	6a 00                	push   0x0
c0011afc:	53                   	push   ebx
c0011afd:	e8 56 fb ff ff       	call   c0011658 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b02:	83 c4 10             	add    esp,0x10
c0011b05:	e9 5b ff ff ff       	jmp    c0011a65 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011b0a:	89 f0                	mov    eax,esi
c0011b0c:	84 c0                	test   al,al
c0011b0e:	75 15                	jne    c0011b25 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011b10:	83 ec 08             	sub    esp,0x8
c0011b13:	6a 00                	push   0x0
c0011b15:	53                   	push   ebx
c0011b16:	e8 3d fb ff ff       	call   c0011658 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b1b:	83 c4 10             	add    esp,0x10
c0011b1e:	83 c4 10             	add    esp,0x10
c0011b21:	5b                   	pop    ebx
c0011b22:	5e                   	pop    esi
c0011b23:	5f                   	pop    edi
c0011b24:	c3                   	ret    
c0011b25:	c7 44 24 20 8d 89 02 c0 	mov    DWORD PTR [esp+0x20],0xc002898d
c0011b2d:	83 c4 10             	add    esp,0x10
c0011b30:	5b                   	pop    ebx
c0011b31:	5e                   	pop    esi
c0011b32:	5f                   	pop    edi
c0011b33:	e9 44 7a 00 00       	jmp    c001957c <Krnl::panic(char const*)>

c0011b38 <VAS::freeAllocatedPages(unsigned long)>:
c0011b38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011b40:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011b44:	74 09                	je     c0011b4f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011b46:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011b4a:	e9 c6 fe ff ff       	jmp    c0011a15 <Virt::freeKernelVirtualPages(unsigned long)>
c0011b4f:	c7 44 24 04 ac 87 02 c0 	mov    DWORD PTR [esp+0x4],0xc00287ac
c0011b57:	e9 45 0b 00 00       	jmp    c00126a1 <Dbg::kprintf(char const*, ...)>

c0011b5c <VAS::virtualToPhysical(unsigned long)>:
c0011b5c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011b60:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011b64:	e8 8d fe ff ff       	call   c00119f6 <VAS::getPageTableEntry(unsigned long)>
c0011b69:	5a                   	pop    edx
c0011b6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b6c:	59                   	pop    ecx
c0011b6d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011b72:	c3                   	ret    
c0011b73:	90                   	nop

c0011b74 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011b74:	55                   	push   ebp
c0011b75:	57                   	push   edi
c0011b76:	56                   	push   esi
c0011b77:	53                   	push   ebx
c0011b78:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011b7c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011b80:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011b84:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011b88:	85 db                	test   ebx,ebx
c0011b8a:	7e 22                	jle    c0011bae <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011b8c:	c1 e3 0c             	shl    ebx,0xc
c0011b8f:	01 f3                	add    ebx,esi
c0011b91:	56                   	push   esi
c0011b92:	81 c6 00 10 00 00    	add    esi,0x1000
c0011b98:	55                   	push   ebp
c0011b99:	e8 58 fe ff ff       	call   c00119f6 <VAS::getPageTableEntry(unsigned long)>
c0011b9e:	5a                   	pop    edx
c0011b9f:	59                   	pop    ecx
c0011ba0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011ba2:	21 f9                	and    ecx,edi
c0011ba4:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011ba8:	39 f3                	cmp    ebx,esi
c0011baa:	89 08                	mov    DWORD PTR [eax],ecx
c0011bac:	75 e3                	jne    c0011b91 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011bae:	5b                   	pop    ebx
c0011baf:	5e                   	pop    esi
c0011bb0:	5f                   	pop    edi
c0011bb1:	5d                   	pop    ebp
c0011bb2:	c3                   	ret    
c0011bb3:	90                   	nop

c0011bb4 <VAS::setToWriteCombining(unsigned long, int)>:
c0011bb4:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c0011bb9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011bbf:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011bc6:	75 01                	jne    c0011bc9 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011bc8:	c3                   	ret    
c0011bc9:	68 80 00 00 00       	push   0x80
c0011bce:	6a ff                	push   0xffffffff
c0011bd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011bd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011bd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011bdc:	e8 93 ff ff ff       	call   c0011b74 <VAS::reflagRange(unsigned long, int, int, int)>
c0011be1:	83 c4 14             	add    esp,0x14
c0011be4:	c3                   	ret    
c0011be5:	90                   	nop

c0011be6 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011be6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011beb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bef:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011bf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bf6:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011bf9:	19 c0                	sbb    eax,eax
c0011bfb:	83 ca 03             	or     edx,0x3
c0011bfe:	83 e0 fc             	and    eax,0xfffffffc
c0011c01:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011c08:	0f 20 d8             	mov    eax,cr3
c0011c0b:	0f 22 d8             	mov    cr3,eax
c0011c0e:	c3                   	ret    
c0011c0f:	90                   	nop

c0011c10 <VAS::~VAS()>:
c0011c10:	83 ec 2c             	sub    esp,0x2c
c0011c13:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011c1b:	e8 da a9 00 00       	call   c001c5fa <lockScheduler()>
c0011c20:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011c25:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c27:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c2a:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011c30:	83 ec 04             	sub    esp,0x4
c0011c33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011c37:	6a 01                	push   0x1
c0011c39:	50                   	push   eax
c0011c3a:	e8 a7 ff ff ff       	call   c0011be6 <VAS::mapOtherVASIn(bool, VAS*)>
c0011c3f:	83 c4 10             	add    esp,0x10
c0011c42:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011c4a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011c52:	0f 8f d7 00 00 00    	jg     c0011d2f <VAS::~VAS()+0x11f>
c0011c58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c5c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011c5f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011c63:	c1 e2 02             	shl    edx,0x2
c0011c66:	01 d0                	add    eax,edx
c0011c68:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c6a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c72:	83 e0 01             	and    eax,0x1
c0011c75:	0f 84 ab 00 00 00    	je     c0011d26 <VAS::~VAS()+0x116>
c0011c7b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011c83:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011c8b:	7f 75                	jg     c0011d02 <VAS::~VAS()+0xf2>
c0011c8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c91:	c1 e0 0a             	shl    eax,0xa
c0011c94:	89 c2                	mov    edx,eax
c0011c96:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c9a:	01 d0                	add    eax,edx
c0011c9c:	c1 e0 0c             	shl    eax,0xc
c0011c9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ca3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011ca8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011caa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011cad:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011cb3:	83 ec 04             	sub    esp,0x4
c0011cb6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011cba:	6a 01                	push   0x1
c0011cbc:	50                   	push   eax
c0011cbd:	e8 08 fd ff ff       	call   c00119ca <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011cc2:	83 c4 10             	add    esp,0x10
c0011cc5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011cc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011ccd:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ccf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011cd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cd7:	25 01 04 00 00       	and    eax,0x401
c0011cdc:	3d 01 04 00 00       	cmp    eax,0x401
c0011ce1:	75 19                	jne    c0011cfc <VAS::~VAS()+0xec>
c0011ce3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ce7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cec:	83 ec 0c             	sub    esp,0xc
c0011cef:	50                   	push   eax
c0011cf0:	e8 ff dc ff ff       	call   c000f9f4 <Phys::freePage(unsigned long)>
c0011cf5:	83 c4 10             	add    esp,0x10
c0011cf8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011cfc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011d00:	eb 81                	jmp    c0011c83 <VAS::~VAS()+0x73>
c0011d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d06:	25 00 04 00 00       	and    eax,0x400
c0011d0b:	74 19                	je     c0011d26 <VAS::~VAS()+0x116>
c0011d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d11:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d16:	83 ec 0c             	sub    esp,0xc
c0011d19:	50                   	push   eax
c0011d1a:	e8 d5 dc ff ff       	call   c000f9f4 <Phys::freePage(unsigned long)>
c0011d1f:	83 c4 10             	add    esp,0x10
c0011d22:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011d26:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011d2a:	e9 1b ff ff ff       	jmp    c0011c4a <VAS::~VAS()+0x3a>
c0011d2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d33:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011d36:	83 ec 0c             	sub    esp,0xc
c0011d39:	50                   	push   eax
c0011d3a:	e8 d6 fc ff ff       	call   c0011a15 <Virt::freeKernelVirtualPages(unsigned long)>
c0011d3f:	83 c4 10             	add    esp,0x10
c0011d42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d46:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011d49:	83 ec 0c             	sub    esp,0xc
c0011d4c:	50                   	push   eax
c0011d4d:	e8 a2 dc ff ff       	call   c000f9f4 <Phys::freePage(unsigned long)>
c0011d52:	83 c4 10             	add    esp,0x10
c0011d55:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011d59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d5d:	c1 e0 02             	shl    eax,0x2
c0011d60:	83 ec 08             	sub    esp,0x8
c0011d63:	50                   	push   eax
c0011d64:	68 d0 87 02 c0       	push   0xc00287d0
c0011d69:	e8 33 09 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0011d6e:	83 c4 10             	add    esp,0x10
c0011d71:	e8 86 a8 00 00       	call   c001c5fc <unlockScheduler()>
c0011d76:	90                   	nop
c0011d77:	83 c4 2c             	add    esp,0x2c
c0011d7a:	c3                   	ret    
c0011d7b:	90                   	nop

c0011d7c <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011d7c:	55                   	push   ebp
c0011d7d:	57                   	push   edi
c0011d7e:	56                   	push   esi
c0011d7f:	53                   	push   ebx
c0011d80:	83 ec 1c             	sub    esp,0x1c
c0011d83:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011d87:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011d8b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011d91:	77 08                	ja     c0011d9b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011d93:	0f 20 d8             	mov    eax,cr3
c0011d96:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011d99:	75 47                	jne    c0011de2 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011d9b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d9f:	09 d8                	or     eax,ebx
c0011da1:	a9 ff 0f 00 00       	test   eax,0xfff
c0011da6:	75 57                	jne    c0011dff <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011da8:	89 de                	mov    esi,ebx
c0011daa:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011dad:	c1 ee 16             	shr    esi,0x16
c0011db0:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011db7:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011dbb:	74 54                	je     c0011e11 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011dbd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011dc1:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011dc7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011dcb:	c1 e6 0c             	shl    esi,0xc
c0011dce:	c1 eb 0a             	shr    ebx,0xa
c0011dd1:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011dd7:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011dda:	83 c4 1c             	add    esp,0x1c
c0011ddd:	5b                   	pop    ebx
c0011dde:	5e                   	pop    esi
c0011ddf:	5f                   	pop    edi
c0011de0:	5d                   	pop    ebp
c0011de1:	c3                   	ret    
c0011de2:	83 ec 0c             	sub    esp,0xc
c0011de5:	68 f0 87 02 c0       	push   0xc00287f0
c0011dea:	e8 b2 08 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0011def:	83 c4 10             	add    esp,0x10
c0011df2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011df6:	09 d8                	or     eax,ebx
c0011df8:	a9 ff 0f 00 00       	test   eax,0xfff
c0011dfd:	74 a9                	je     c0011da8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011dff:	83 ec 0c             	sub    esp,0xc
c0011e02:	68 58 88 02 c0       	push   0xc0028858
c0011e07:	e8 70 77 00 00       	call   c001957c <Krnl::panic(char const*)>
c0011e0c:	83 c4 10             	add    esp,0x10
c0011e0f:	eb 97                	jmp    c0011da8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011e11:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011e15:	e8 64 dc ff ff       	call   c000fa7e <Phys::allocatePage()>
c0011e1a:	89 c5                	mov    ebp,eax
c0011e1c:	e8 20 fa ff ff       	call   c0011841 <Virt::getAKernelVAS()>
c0011e21:	83 ec 0c             	sub    esp,0xc
c0011e24:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011e28:	6a 01                	push   0x1
c0011e2a:	e8 82 f8 ff ff       	call   c00116b1 <Virt::allocateKernelVirtualPages(int)>
c0011e2f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011e36:	6a 01                	push   0x1
c0011e38:	50                   	push   eax
c0011e39:	55                   	push   ebp
c0011e3a:	81 cd 07 04 00 00    	or     ebp,0x407
c0011e40:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011e44:	51                   	push   ecx
c0011e45:	e8 26 02 00 00       	call   c0012070 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e4a:	83 c4 1c             	add    esp,0x1c
c0011e4d:	68 00 10 00 00       	push   0x1000
c0011e52:	6a 00                	push   0x0
c0011e54:	50                   	push   eax
c0011e55:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e59:	e8 2d e8 fe ff       	call   c000068b <memset>
c0011e5e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e62:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011e65:	e8 ab fb ff ff       	call   c0011a15 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e6a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e6e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011e71:	83 c4 10             	add    esp,0x10
c0011e74:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011e77:	e9 41 ff ff ff       	jmp    c0011dbd <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011e7c <VAS::allocatePages(int, int)>:
c0011e7c:	55                   	push   ebp
c0011e7d:	57                   	push   edi
c0011e7e:	56                   	push   esi
c0011e7f:	53                   	push   ebx
c0011e80:	83 ec 1c             	sub    esp,0x1c
c0011e83:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011e87:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c0011e8c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e92:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011e98:	83 e0 01             	and    eax,0x1
c0011e9b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011e9f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011ea3:	0f 85 cc 00 00 00    	jne    c0011f75 <VAS::allocatePages(int, int)+0xf9>
c0011ea9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011eac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011eb0:	85 c0                	test   eax,eax
c0011eb2:	0f 84 a1 00 00 00    	je     c0011f59 <VAS::allocatePages(int, int)+0xdd>
c0011eb8:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011ebc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ec0:	c1 e6 0c             	shl    esi,0xc
c0011ec3:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011ec7:	85 c0                	test   eax,eax
c0011ec9:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011ecc:	7e 33                	jle    c0011f01 <VAS::allocatePages(int, int)+0x85>
c0011ece:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011ed2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ed6:	81 cd 00 04 00 00    	or     ebp,0x400
c0011edc:	e8 9d db ff ff       	call   c000fa7e <Phys::allocatePage()>
c0011ee1:	55                   	push   ebp
c0011ee2:	53                   	push   ebx
c0011ee3:	50                   	push   eax
c0011ee4:	57                   	push   edi
c0011ee5:	e8 92 fe ff ff       	call   c0011d7c <VAS::mapPage(unsigned long, unsigned long, int)>
c0011eea:	83 c4 10             	add    esp,0x10
c0011eed:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ef2:	74 03                	je     c0011ef7 <VAS::allocatePages(int, int)+0x7b>
c0011ef4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ef7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011efd:	39 de                	cmp    esi,ebx
c0011eff:	75 db                	jne    c0011edc <VAS::allocatePages(int, int)+0x60>
c0011f01:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f06:	75 12                	jne    c0011f1a <VAS::allocatePages(int, int)+0x9e>
c0011f08:	0f 20 d8             	mov    eax,cr3
c0011f0b:	0f 22 d8             	mov    cr3,eax
c0011f0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f12:	83 c4 1c             	add    esp,0x1c
c0011f15:	5b                   	pop    ebx
c0011f16:	5e                   	pop    esi
c0011f17:	5f                   	pop    edi
c0011f18:	5d                   	pop    ebp
c0011f19:	c3                   	ret    
c0011f1a:	c1 ee 0a             	shr    esi,0xa
c0011f1d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011f21:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011f27:	c1 eb 0a             	shr    ebx,0xa
c0011f2a:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011f30:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011f36:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011f3c:	39 c3                	cmp    ebx,eax
c0011f3e:	77 ce                	ja     c0011f0e <VAS::allocatePages(int, int)+0x92>
c0011f40:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f43:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f49:	39 d8                	cmp    eax,ebx
c0011f4b:	73 f3                	jae    c0011f40 <VAS::allocatePages(int, int)+0xc4>
c0011f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f51:	83 c4 1c             	add    esp,0x1c
c0011f54:	5b                   	pop    ebx
c0011f55:	5e                   	pop    esi
c0011f56:	5f                   	pop    edi
c0011f57:	5d                   	pop    ebp
c0011f58:	c3                   	ret    
c0011f59:	83 ec 0c             	sub    esp,0xc
c0011f5c:	68 7c 88 02 c0       	push   0xc002887c
c0011f61:	e8 16 76 00 00       	call   c001957c <Krnl::panic(char const*)>
c0011f66:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011f69:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f6d:	83 c4 10             	add    esp,0x10
c0011f70:	e9 43 ff ff ff       	jmp    c0011eb8 <VAS::allocatePages(int, int)+0x3c>
c0011f75:	83 ec 0c             	sub    esp,0xc
c0011f78:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011f7c:	e8 30 f7 ff ff       	call   c00116b1 <Virt::allocateKernelVirtualPages(int)>
c0011f81:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f85:	83 c4 10             	add    esp,0x10
c0011f88:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011f8d:	0f 87 9b 00 00 00    	ja     c001202e <VAS::allocatePages(int, int)+0x1b2>
c0011f93:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011f97:	85 d2                	test   edx,edx
c0011f99:	7e 3c                	jle    c0011fd7 <VAS::allocatePages(int, int)+0x15b>
c0011f9b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011f9f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011fa3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011fa7:	c1 e5 0c             	shl    ebp,0xc
c0011faa:	81 ce 00 04 00 00    	or     esi,0x400
c0011fb0:	01 dd                	add    ebp,ebx
c0011fb2:	e8 c7 da ff ff       	call   c000fa7e <Phys::allocatePage()>
c0011fb7:	56                   	push   esi
c0011fb8:	53                   	push   ebx
c0011fb9:	50                   	push   eax
c0011fba:	57                   	push   edi
c0011fbb:	e8 bc fd ff ff       	call   c0011d7c <VAS::mapPage(unsigned long, unsigned long, int)>
c0011fc0:	83 c4 10             	add    esp,0x10
c0011fc3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011fc8:	74 03                	je     c0011fcd <VAS::allocatePages(int, int)+0x151>
c0011fca:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011fcd:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011fd3:	39 dd                	cmp    ebp,ebx
c0011fd5:	75 db                	jne    c0011fb2 <VAS::allocatePages(int, int)+0x136>
c0011fd7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011fdc:	0f 84 26 ff ff ff    	je     c0011f08 <VAS::allocatePages(int, int)+0x8c>
c0011fe2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011fe6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011fea:	89 d3                	mov    ebx,edx
c0011fec:	c1 e0 0c             	shl    eax,0xc
c0011fef:	c1 eb 0a             	shr    ebx,0xa
c0011ff2:	01 d0                	add    eax,edx
c0011ff4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011ffa:	c1 e8 0a             	shr    eax,0xa
c0011ffd:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012003:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012008:	2d 00 00 40 00       	sub    eax,0x400000
c001200d:	39 c3                	cmp    ebx,eax
c001200f:	0f 87 f9 fe ff ff    	ja     c0011f0e <VAS::allocatePages(int, int)+0x92>
c0012015:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012018:	81 c3 00 10 00 00    	add    ebx,0x1000
c001201e:	39 d8                	cmp    eax,ebx
c0012020:	73 f3                	jae    c0012015 <VAS::allocatePages(int, int)+0x199>
c0012022:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012026:	83 c4 1c             	add    esp,0x1c
c0012029:	5b                   	pop    ebx
c001202a:	5e                   	pop    esi
c001202b:	5f                   	pop    edi
c001202c:	5d                   	pop    ebp
c001202d:	c3                   	ret    
c001202e:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c0012033:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012039:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012040:	0f 84 4d ff ff ff    	je     c0011f93 <VAS::allocatePages(int, int)+0x117>
c0012046:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001204e:	e9 40 ff ff ff       	jmp    c0011f93 <VAS::allocatePages(int, int)+0x117>
c0012053:	90                   	nop

c0012054 <VAS::setCPUSpecific(unsigned long)>:
c0012054:	83 ec 0c             	sub    esp,0xc
c0012057:	6a 05                	push   0x5
c0012059:	68 00 00 40 c2       	push   0xc2400000
c001205e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012066:	e8 11 fd ff ff       	call   c0011d7c <VAS::mapPage(unsigned long, unsigned long, int)>
c001206b:	83 c4 1c             	add    esp,0x1c
c001206e:	c3                   	ret    
c001206f:	90                   	nop

c0012070 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012070:	55                   	push   ebp
c0012071:	57                   	push   edi
c0012072:	56                   	push   esi
c0012073:	53                   	push   ebx
c0012074:	83 ec 1c             	sub    esp,0x1c
c0012077:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c001207c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012080:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012086:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001208a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012090:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012094:	83 e0 01             	and    eax,0x1
c0012097:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001209b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001209f:	85 c0                	test   eax,eax
c00120a1:	7e 39                	jle    c00120dc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00120a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00120a7:	89 f3                	mov    ebx,esi
c00120a9:	c1 e0 0c             	shl    eax,0xc
c00120ac:	01 f0                	add    eax,esi
c00120ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00120b2:	55                   	push   ebp
c00120b3:	53                   	push   ebx
c00120b4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00120b8:	29 f0                	sub    eax,esi
c00120ba:	01 d8                	add    eax,ebx
c00120bc:	50                   	push   eax
c00120bd:	57                   	push   edi
c00120be:	e8 b9 fc ff ff       	call   c0011d7c <VAS::mapPage(unsigned long, unsigned long, int)>
c00120c3:	83 c4 10             	add    esp,0x10
c00120c6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120cb:	74 03                	je     c00120d0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00120cd:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120d0:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120d6:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00120da:	75 d6                	jne    c00120b2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00120dc:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120e1:	75 10                	jne    c00120f3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00120e3:	0f 20 d8             	mov    eax,cr3
c00120e6:	0f 22 d8             	mov    cr3,eax
c00120e9:	83 c4 1c             	add    esp,0x1c
c00120ec:	89 f0                	mov    eax,esi
c00120ee:	5b                   	pop    ebx
c00120ef:	5e                   	pop    esi
c00120f0:	5f                   	pop    edi
c00120f1:	5d                   	pop    ebp
c00120f2:	c3                   	ret    
c00120f3:	89 f3                	mov    ebx,esi
c00120f5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00120f9:	c1 eb 0a             	shr    ebx,0xa
c00120fc:	c1 e0 0c             	shl    eax,0xc
c00120ff:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012105:	01 f0                	add    eax,esi
c0012107:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001210d:	c1 e8 0a             	shr    eax,0xa
c0012110:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012115:	2d 00 00 40 00       	sub    eax,0x400000
c001211a:	39 c3                	cmp    ebx,eax
c001211c:	77 cb                	ja     c00120e9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001211e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012121:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012127:	39 d8                	cmp    eax,ebx
c0012129:	73 f3                	jae    c001211e <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c001212b:	83 c4 1c             	add    esp,0x1c
c001212e:	89 f0                	mov    eax,esi
c0012130:	5b                   	pop    ebx
c0012131:	5e                   	pop    esi
c0012132:	5f                   	pop    edi
c0012133:	5d                   	pop    ebp
c0012134:	c3                   	ret    
c0012135:	90                   	nop

c0012136 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012136:	55                   	push   ebp
c0012137:	57                   	push   edi
c0012138:	56                   	push   esi
c0012139:	53                   	push   ebx
c001213a:	83 ec 1c             	sub    esp,0x1c
c001213d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012141:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012145:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012149:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001214d:	a9 ff 0f 00 00       	test   eax,0xfff
c0012152:	75 4a                	jne    c001219e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012154:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012158:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001215b:	c1 eb 16             	shr    ebx,0x16
c001215e:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012165:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012169:	74 4d                	je     c00121b8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001216b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001216f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012173:	c1 e8 0a             	shr    eax,0xa
c0012176:	80 fa 01             	cmp    dl,0x1
c0012179:	19 d2                	sbb    edx,edx
c001217b:	c1 e3 0c             	shl    ebx,0xc
c001217e:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012182:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012188:	25 fc 0f 00 00       	and    eax,0xffc
c001218d:	01 d8                	add    eax,ebx
c001218f:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012196:	83 c4 1c             	add    esp,0x1c
c0012199:	5b                   	pop    ebx
c001219a:	5e                   	pop    esi
c001219b:	5f                   	pop    edi
c001219c:	5d                   	pop    ebp
c001219d:	c3                   	ret    
c001219e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00121a2:	83 ec 0c             	sub    esp,0xc
c00121a5:	68 a8 88 02 c0       	push   0xc00288a8
c00121aa:	e8 cd 73 00 00       	call   c001957c <Krnl::panic(char const*)>
c00121af:	83 c4 10             	add    esp,0x10
c00121b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00121b6:	eb 9c                	jmp    c0012154 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00121b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00121bc:	e8 bd d8 ff ff       	call   c000fa7e <Phys::allocatePage()>
c00121c1:	89 c5                	mov    ebp,eax
c00121c3:	e8 79 f6 ff ff       	call   c0011841 <Virt::getAKernelVAS()>
c00121c8:	83 ec 0c             	sub    esp,0xc
c00121cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00121cf:	6a 01                	push   0x1
c00121d1:	e8 db f4 ff ff       	call   c00116b1 <Virt::allocateKernelVirtualPages(int)>
c00121d6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00121dd:	6a 01                	push   0x1
c00121df:	50                   	push   eax
c00121e0:	55                   	push   ebp
c00121e1:	81 cd 07 04 00 00    	or     ebp,0x407
c00121e7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00121eb:	51                   	push   ecx
c00121ec:	e8 7f fe ff ff       	call   c0012070 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00121f1:	83 c4 1c             	add    esp,0x1c
c00121f4:	68 00 10 00 00       	push   0x1000
c00121f9:	6a 00                	push   0x0
c00121fb:	50                   	push   eax
c00121fc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012200:	e8 86 e4 fe ff       	call   c000068b <memset>
c0012205:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012209:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001220c:	e8 04 f8 ff ff       	call   c0011a15 <Virt::freeKernelVirtualPages(unsigned long)>
c0012211:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012214:	83 c4 10             	add    esp,0x10
c0012217:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001221a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001221e:	e9 48 ff ff ff       	jmp    c001216b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012223:	90                   	nop

c0012224 <VAS::VAS(bool)>:
c0012224:	53                   	push   ebx
c0012225:	83 ec 28             	sub    esp,0x28
c0012228:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001222c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012230:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012234:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001223b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001223f:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012243:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012246:	e8 33 d8 ff ff       	call   c000fa7e <Phys::allocatePage()>
c001224b:	89 c2                	mov    edx,eax
c001224d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012251:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012254:	e8 e8 f5 ff ff       	call   c0011841 <Virt::getAKernelVAS()>
c0012259:	89 c3                	mov    ebx,eax
c001225b:	83 ec 0c             	sub    esp,0xc
c001225e:	6a 01                	push   0x1
c0012260:	e8 4c f4 ff ff       	call   c00116b1 <Virt::allocateKernelVirtualPages(int)>
c0012265:	83 c4 10             	add    esp,0x10
c0012268:	89 c2                	mov    edx,eax
c001226a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001226e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012271:	83 ec 0c             	sub    esp,0xc
c0012274:	6a 03                	push   0x3
c0012276:	6a 01                	push   0x1
c0012278:	52                   	push   edx
c0012279:	50                   	push   eax
c001227a:	53                   	push   ebx
c001227b:	e8 f0 fd ff ff       	call   c0012070 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012280:	83 c4 20             	add    esp,0x20
c0012283:	89 c2                	mov    edx,eax
c0012285:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012289:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001228c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012294:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001229c:	7f 1c                	jg     c00122ba <VAS::VAS(bool)+0x96>
c001229e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122a2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00122a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00122a9:	c1 e2 02             	shl    edx,0x2
c00122ac:	01 d0                	add    eax,edx
c00122ae:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00122b4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122b8:	eb da                	jmp    c0012294 <VAS::VAS(bool)+0x70>
c00122ba:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00122c2:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00122ca:	7f 7a                	jg     c0012346 <VAS::VAS(bool)+0x122>
c00122cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122d0:	2d 00 02 00 00       	sub    eax,0x200
c00122d5:	c1 e0 0c             	shl    eax,0xc
c00122d8:	83 c8 03             	or     eax,0x3
c00122db:	89 c2                	mov    edx,eax
c00122dd:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c00122e2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122e8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00122ee:	83 e0 10             	and    eax,0x10
c00122f1:	84 c0                	test   al,al
c00122f3:	74 07                	je     c00122fc <VAS::VAS(bool)+0xd8>
c00122f5:	b8 00 01 00 00       	mov    eax,0x100
c00122fa:	eb 05                	jmp    c0012301 <VAS::VAS(bool)+0xdd>
c00122fc:	b8 00 00 00 00       	mov    eax,0x0
c0012301:	09 d0                	or     eax,edx
c0012303:	89 c1                	mov    ecx,eax
c0012305:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012309:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001230c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012310:	c1 e2 02             	shl    edx,0x2
c0012313:	01 d0                	add    eax,edx
c0012315:	89 ca                	mov    edx,ecx
c0012317:	89 10                	mov    DWORD PTR [eax],edx
c0012319:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001231d:	2d 40 03 00 00       	sub    eax,0x340
c0012322:	83 f8 7f             	cmp    eax,0x7f
c0012325:	77 16                	ja     c001233d <VAS::VAS(bool)+0x119>
c0012327:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001232b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001232e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012332:	c1 e2 02             	shl    edx,0x2
c0012335:	01 d0                	add    eax,edx
c0012337:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001233d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012341:	e9 7c ff ff ff       	jmp    c00122c2 <VAS::VAS(bool)+0x9e>
c0012346:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c001234b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012351:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012357:	83 e0 10             	and    eax,0x10
c001235a:	84 c0                	test   al,al
c001235c:	74 07                	je     c0012365 <VAS::VAS(bool)+0x141>
c001235e:	b8 03 41 00 00       	mov    eax,0x4103
c0012363:	eb 05                	jmp    c001236a <VAS::VAS(bool)+0x146>
c0012365:	b8 03 40 00 00       	mov    eax,0x4003
c001236a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001236e:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012371:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012377:	89 02                	mov    DWORD PTR [edx],eax
c0012379:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c001237e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012384:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001238a:	83 ec 08             	sub    esp,0x8
c001238d:	50                   	push   eax
c001238e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012392:	e8 bd fc ff ff       	call   c0012054 <VAS::setCPUSpecific(unsigned long)>
c0012397:	83 c4 10             	add    esp,0x10
c001239a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001239e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00123a1:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c00123a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123ac:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00123b2:	83 e0 10             	and    eax,0x10
c00123b5:	84 c0                	test   al,al
c00123b7:	74 07                	je     c00123c0 <VAS::VAS(bool)+0x19c>
c00123b9:	b8 00 01 00 00       	mov    eax,0x100
c00123be:	eb 05                	jmp    c00123c5 <VAS::VAS(bool)+0x1a1>
c00123c0:	b8 00 00 00 00       	mov    eax,0x0
c00123c5:	09 c2                	or     edx,eax
c00123c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123cb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00123ce:	05 fc 0f 00 00       	add    eax,0xffc
c00123d3:	83 ca 03             	or     edx,0x3
c00123d6:	89 10                	mov    DWORD PTR [eax],edx
c00123d8:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c00123dd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123e3:	83 ec 0c             	sub    esp,0xc
c00123e6:	50                   	push   eax
c00123e7:	e8 90 19 00 00       	call   c0013d7c <Device::getName()>
c00123ec:	83 c4 10             	add    esp,0x10
c00123ef:	83 ec 08             	sub    esp,0x8
c00123f2:	68 a7 89 02 c0       	push   0xc00289a7
c00123f7:	50                   	push   eax
c00123f8:	e8 7e e3 fe ff       	call   c000077b <strcmp>
c00123fd:	83 c4 10             	add    esp,0x10
c0012400:	85 c0                	test   eax,eax
c0012402:	0f 94 c0             	sete   al
c0012405:	84 c0                	test   al,al
c0012407:	74 70                	je     c0012479 <VAS::VAS(bool)+0x255>
c0012409:	e8 cf a1 00 00       	call   c001c5dd <disableIRQs()>
c001240e:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c0012413:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012419:	05 7c 09 00 00       	add    eax,0x97c
c001241e:	83 ec 0c             	sub    esp,0xc
c0012421:	50                   	push   eax
c0012422:	e8 29 cb ff ff       	call   c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012427:	83 c4 10             	add    esp,0x10
c001242a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001242f:	89 c3                	mov    ebx,eax
c0012431:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c0012436:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001243c:	05 7c 09 00 00       	add    eax,0x97c
c0012441:	83 ec 0c             	sub    esp,0xc
c0012444:	50                   	push   eax
c0012445:	e8 06 cb ff ff       	call   c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001244a:	83 c4 10             	add    esp,0x10
c001244d:	83 ec 08             	sub    esp,0x8
c0012450:	50                   	push   eax
c0012451:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012455:	e8 9c f5 ff ff       	call   c00119f6 <VAS::getPageTableEntry(unsigned long)>
c001245a:	83 c4 10             	add    esp,0x10
c001245d:	8b 00                	mov    eax,DWORD PTR [eax]
c001245f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012464:	6a 11                	push   0x11
c0012466:	53                   	push   ebx
c0012467:	50                   	push   eax
c0012468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001246c:	e8 0b f9 ff ff       	call   c0011d7c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012471:	83 c4 10             	add    esp,0x10
c0012474:	e8 72 a1 00 00       	call   c001c5eb <enableIRQs()>
c0012479:	90                   	nop
c001247a:	83 c4 28             	add    esp,0x28
c001247d:	5b                   	pop    ebx
c001247e:	c3                   	ret    

c001247f <mapVASFirstTime>:
c001247f:	55                   	push   ebp
c0012480:	57                   	push   edi
c0012481:	56                   	push   esi
c0012482:	53                   	push   ebx
c0012483:	83 ec 0c             	sub    esp,0xc
c0012486:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001248b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001248e:	4a                   	dec    edx
c001248f:	0f 84 8e 00 00 00    	je     c0012523 <mapVASFirstTime+0xa4>
c0012495:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012498:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001249b:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00124a0:	c1 e5 15             	shl    ebp,0x15
c00124a3:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c00124a8:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c00124ae:	29 eb                	sub    ebx,ebp
c00124b0:	29 ee                	sub    esi,ebp
c00124b2:	e8 c7 d5 ff ff       	call   c000fa7e <Phys::allocatePage()>
c00124b7:	83 ec 0c             	sub    esp,0xc
c00124ba:	68 03 04 00 00       	push   0x403
c00124bf:	6a 01                	push   0x1
c00124c1:	53                   	push   ebx
c00124c2:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00124c8:	50                   	push   eax
c00124c9:	57                   	push   edi
c00124ca:	e8 a1 fb ff ff       	call   c0012070 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124cf:	83 c4 20             	add    esp,0x20
c00124d2:	39 f3                	cmp    ebx,esi
c00124d4:	75 dc                	jne    c00124b2 <mapVASFirstTime+0x33>
c00124d6:	be 00 f0 ff 01       	mov    esi,0x1fff000
c00124db:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c00124e0:	29 ee                	sub    esi,ebp
c00124e2:	29 e8                	sub    eax,ebp
c00124e4:	89 c5                	mov    ebp,eax
c00124e6:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c00124ea:	19 db                	sbb    ebx,ebx
c00124ec:	e8 8d d5 ff ff       	call   c000fa7e <Phys::allocatePage()>
c00124f1:	83 e3 04             	and    ebx,0x4
c00124f4:	83 ec 0c             	sub    esp,0xc
c00124f7:	81 c3 03 04 00 00    	add    ebx,0x403
c00124fd:	53                   	push   ebx
c00124fe:	6a 01                	push   0x1
c0012500:	56                   	push   esi
c0012501:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012507:	50                   	push   eax
c0012508:	57                   	push   edi
c0012509:	e8 62 fb ff ff       	call   c0012070 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001250e:	83 c4 20             	add    esp,0x20
c0012511:	39 f5                	cmp    ebp,esi
c0012513:	75 d1                	jne    c00124e6 <mapVASFirstTime+0x67>
c0012515:	0f 20 d8             	mov    eax,cr3
c0012518:	0f 22 d8             	mov    cr3,eax
c001251b:	83 c4 0c             	add    esp,0xc
c001251e:	5b                   	pop    ebx
c001251f:	5e                   	pop    esi
c0012520:	5f                   	pop    edi
c0012521:	5d                   	pop    ebp
c0012522:	c3                   	ret    
c0012523:	83 ec 0c             	sub    esp,0xc
c0012526:	68 b5 89 02 c0       	push   0xc00289b5
c001252b:	e8 71 01 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0012530:	83 c4 10             	add    esp,0x10
c0012533:	83 c4 0c             	add    esp,0xc
c0012536:	5b                   	pop    ebx
c0012537:	5e                   	pop    esi
c0012538:	5f                   	pop    edi
c0012539:	5d                   	pop    ebp
c001253a:	c3                   	ret    

c001253b <__cxa_atexit>:
c001253b:	31 c0                	xor    eax,eax
c001253d:	c3                   	ret    

c001253e <__cxa_finalize>:
c001253e:	c3                   	ret    

c001253f <__stack_chk_fail>:
c001253f:	55                   	push   ebp
c0012540:	89 e5                	mov    ebp,esp
c0012542:	83 ec 14             	sub    esp,0x14
c0012545:	68 ce 89 02 c0       	push   0xc00289ce
c001254a:	e8 52 01 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001254f:	58                   	pop    eax
c0012550:	5a                   	pop    edx
c0012551:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012554:	68 1e 8a 02 c0       	push   0xc0028a1e
c0012559:	e8 43 01 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001255e:	59                   	pop    ecx
c001255f:	58                   	pop    eax
c0012560:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012563:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012566:	68 1e 8a 02 c0       	push   0xc0028a1e
c001256b:	e8 31 01 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0012570:	5a                   	pop    edx
c0012571:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012574:	59                   	pop    ecx
c0012575:	8b 00                	mov    eax,DWORD PTR [eax]
c0012577:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001257a:	68 1e 8a 02 c0       	push   0xc0028a1e
c001257f:	e8 1d 01 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0012584:	5a                   	pop    edx
c0012585:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012588:	59                   	pop    ecx
c0012589:	8b 00                	mov    eax,DWORD PTR [eax]
c001258b:	8b 00                	mov    eax,DWORD PTR [eax]
c001258d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012590:	68 1e 8a 02 c0       	push   0xc0028a1e
c0012595:	e8 07 01 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001259a:	c7 04 24 26 8a 02 c0 	mov    DWORD PTR [esp],0xc0028a26
c00125a1:	e8 d6 6f 00 00       	call   c001957c <Krnl::panic(char const*)>
c00125a6:	83 c4 10             	add    esp,0x10
c00125a9:	c9                   	leave  
c00125aa:	c3                   	ret    

c00125ab <__cxa_pure_virtual>:
c00125ab:	83 ec 18             	sub    esp,0x18
c00125ae:	68 3e 8a 02 c0       	push   0xc0028a3e
c00125b3:	e8 c4 6f 00 00       	call   c001957c <Krnl::panic(char const*)>
c00125b8:	83 c4 1c             	add    esp,0x1c
c00125bb:	c3                   	ret    

c00125bc <operator new[](unsigned long)>:
c00125bc:	e9 13 cf ff ff       	jmp    c000f4d4 <malloc>

c00125c1 <operator delete(void*, unsigned long)>:
c00125c1:	e9 2e cf ff ff       	jmp    c000f4f4 <rfree>

c00125c6 <operator delete[](void*)>:
c00125c6:	e9 29 cf ff ff       	jmp    c000f4f4 <rfree>

c00125cb <operator delete[](void*, unsigned long)>:
c00125cb:	e9 24 cf ff ff       	jmp    c000f4f4 <rfree>

c00125d0 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00125d0:	57                   	push   edi
c00125d1:	b9 3f 00 00 00       	mov    ecx,0x3f
c00125d6:	56                   	push   esi
c00125d7:	be 54 8a 02 c0       	mov    esi,0xc0028a54
c00125dc:	53                   	push   ebx
c00125dd:	83 ec 40             	sub    esp,0x40
c00125e0:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00125e4:	8d 7c 24 01          	lea    edi,[esp+0x1]
c00125e8:	fc                   	cld    
c00125e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00125eb:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c00125ef:	83 f9 3e             	cmp    ecx,0x3e
c00125f2:	7e 05                	jle    c00125f9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c00125f4:	b9 3e 00 00 00       	mov    ecx,0x3e
c00125f9:	89 df                	mov    edi,ebx
c00125fb:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00125ff:	eb 02                	jmp    c0012603 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012601:	89 c7                	mov    edi,eax
c0012603:	31 d2                	xor    edx,edx
c0012605:	46                   	inc    esi
c0012606:	89 f8                	mov    eax,edi
c0012608:	f7 f1                	div    ecx
c001260a:	39 cf                	cmp    edi,ecx
c001260c:	73 f3                	jae    c0012601 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c001260e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012611:	eb 02                	jmp    c0012615 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012613:	89 c3                	mov    ebx,eax
c0012615:	31 d2                	xor    edx,edx
c0012617:	4e                   	dec    esi
c0012618:	89 d8                	mov    eax,ebx
c001261a:	f7 f1                	div    ecx
c001261c:	39 cb                	cmp    ebx,ecx
c001261e:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012622:	88 16                	mov    BYTE PTR [esi],dl
c0012624:	73 ed                	jae    c0012613 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012626:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001262a:	83 c4 40             	add    esp,0x40
c001262d:	5b                   	pop    ebx
c001262e:	5e                   	pop    esi
c001262f:	5f                   	pop    edi
c0012630:	c3                   	ret    

c0012631 <Dbg::logc(char)>:
c0012631:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012635:	ba fd 03 00 00       	mov    edx,0x3fd
c001263a:	ec                   	in     al,dx
c001263b:	a8 20                	test   al,0x20
c001263d:	74 fb                	je     c001263a <Dbg::logc(char)+0x9>
c001263f:	ba f8 03 00 00       	mov    edx,0x3f8
c0012644:	88 c8                	mov    al,cl
c0012646:	ee                   	out    dx,al
c0012647:	c3                   	ret    

c0012648 <Dbg::logs(char*)>:
c0012648:	53                   	push   ebx
c0012649:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001264d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012650:	84 c0                	test   al,al
c0012652:	74 0f                	je     c0012663 <Dbg::logs(char*)+0x1b>
c0012654:	50                   	push   eax
c0012655:	43                   	inc    ebx
c0012656:	e8 d6 ff ff ff       	call   c0012631 <Dbg::logc(char)>
c001265b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001265e:	5a                   	pop    edx
c001265f:	84 c0                	test   al,al
c0012661:	75 f1                	jne    c0012654 <Dbg::logs(char*)+0xc>
c0012663:	5b                   	pop    ebx
c0012664:	c3                   	ret    

c0012665 <Dbg::logWriteInt(unsigned int)>:
c0012665:	83 ec 10             	sub    esp,0x10
c0012668:	6a 0a                	push   0xa
c001266a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001266e:	50                   	push   eax
c001266f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012673:	e8 58 ff ff ff       	call   c00125d0 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012678:	50                   	push   eax
c0012679:	e8 ca ff ff ff       	call   c0012648 <Dbg::logs(char*)>
c001267e:	83 c4 20             	add    esp,0x20
c0012681:	c3                   	ret    

c0012682 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012682:	83 ec 10             	sub    esp,0x10
c0012685:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012689:	8d 44 24 08          	lea    eax,[esp+0x8]
c001268d:	50                   	push   eax
c001268e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012692:	e8 39 ff ff ff       	call   c00125d0 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012697:	50                   	push   eax
c0012698:	e8 ab ff ff ff       	call   c0012648 <Dbg::logs(char*)>
c001269d:	83 c4 20             	add    esp,0x20
c00126a0:	c3                   	ret    

c00126a1 <Dbg::kprintf(char const*, ...)>:
c00126a1:	55                   	push   ebp
c00126a2:	57                   	push   edi
c00126a3:	56                   	push   esi
c00126a4:	53                   	push   ebx
c00126a5:	83 ec 0c             	sub    esp,0xc
c00126a8:	8d 44 24 24          	lea    eax,[esp+0x24]
c00126ac:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00126b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00126b4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00126b7:	84 c0                	test   al,al
c00126b9:	74 4a                	je     c0012705 <Dbg::kprintf(char const*, ...)+0x64>
c00126bb:	31 db                	xor    ebx,ebx
c00126bd:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00126c0:	3c 25                	cmp    al,0x25
c00126c2:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00126c5:	0f 85 e4 00 00 00    	jne    c00127af <Dbg::kprintf(char const*, ...)+0x10e>
c00126cb:	83 c3 02             	add    ebx,0x2
c00126ce:	8a 07                	mov    al,BYTE PTR [edi]
c00126d0:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00126d3:	83 e8 25             	sub    eax,0x25
c00126d6:	3c 53                	cmp    al,0x53
c00126d8:	0f 87 ba 00 00 00    	ja     c0012798 <Dbg::kprintf(char const*, ...)+0xf7>
c00126de:	0f b6 c0             	movzx  eax,al
c00126e1:	ff 24 85 94 8a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd756c]
c00126e8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00126ec:	89 c8                	mov    eax,ecx
c00126ee:	83 c1 04             	add    ecx,0x4
c00126f1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00126f5:	ff 30                	push   DWORD PTR [eax]
c00126f7:	e8 4c ff ff ff       	call   c0012648 <Dbg::logs(char*)>
c00126fc:	58                   	pop    eax
c00126fd:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012701:	84 c0                	test   al,al
c0012703:	75 b8                	jne    c00126bd <Dbg::kprintf(char const*, ...)+0x1c>
c0012705:	83 c4 0c             	add    esp,0xc
c0012708:	5b                   	pop    ebx
c0012709:	5e                   	pop    esi
c001270a:	5f                   	pop    edi
c001270b:	5d                   	pop    ebp
c001270c:	c3                   	ret    
c001270d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012711:	89 d0                	mov    eax,edx
c0012713:	83 c2 04             	add    edx,0x4
c0012716:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001271a:	ff 30                	push   DWORD PTR [eax]
c001271c:	e8 44 ff ff ff       	call   c0012665 <Dbg::logWriteInt(unsigned int)>
c0012721:	58                   	pop    eax
c0012722:	eb d9                	jmp    c00126fd <Dbg::kprintf(char const*, ...)+0x5c>
c0012724:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012728:	89 d0                	mov    eax,edx
c001272a:	83 c2 04             	add    edx,0x4
c001272d:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012730:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012734:	50                   	push   eax
c0012735:	e8 f7 fe ff ff       	call   c0012631 <Dbg::logc(char)>
c001273a:	58                   	pop    eax
c001273b:	eb c0                	jmp    c00126fd <Dbg::kprintf(char const*, ...)+0x5c>
c001273d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012741:	89 c8                	mov    eax,ecx
c0012743:	83 c1 04             	add    ecx,0x4
c0012746:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001274a:	ff 30                	push   DWORD PTR [eax]
c001274c:	e8 14 ff ff ff       	call   c0012665 <Dbg::logWriteInt(unsigned int)>
c0012751:	5f                   	pop    edi
c0012752:	eb a9                	jmp    c00126fd <Dbg::kprintf(char const*, ...)+0x5c>
c0012754:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012758:	89 c8                	mov    eax,ecx
c001275a:	83 c1 04             	add    ecx,0x4
c001275d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012761:	6a 10                	push   0x10
c0012763:	ff 30                	push   DWORD PTR [eax]
c0012765:	e8 18 ff ff ff       	call   c0012682 <Dbg::logWriteIntBase(unsigned int, int)>
c001276a:	59                   	pop    ecx
c001276b:	5f                   	pop    edi
c001276c:	eb 8f                	jmp    c00126fd <Dbg::kprintf(char const*, ...)+0x5c>
c001276e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012772:	89 d0                	mov    eax,edx
c0012774:	83 c2 08             	add    edx,0x8
c0012777:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001277b:	6a 10                	push   0x10
c001277d:	ff 30                	push   DWORD PTR [eax]
c001277f:	e8 fe fe ff ff       	call   c0012682 <Dbg::logWriteIntBase(unsigned int, int)>
c0012784:	58                   	pop    eax
c0012785:	5a                   	pop    edx
c0012786:	e9 72 ff ff ff       	jmp    c00126fd <Dbg::kprintf(char const*, ...)+0x5c>
c001278b:	6a 25                	push   0x25
c001278d:	e8 9f fe ff ff       	call   c0012631 <Dbg::logc(char)>
c0012792:	58                   	pop    eax
c0012793:	e9 65 ff ff ff       	jmp    c00126fd <Dbg::kprintf(char const*, ...)+0x5c>
c0012798:	6a 25                	push   0x25
c001279a:	e8 92 fe ff ff       	call   c0012631 <Dbg::logc(char)>
c001279f:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00127a2:	50                   	push   eax
c00127a3:	e8 89 fe ff ff       	call   c0012631 <Dbg::logc(char)>
c00127a8:	5a                   	pop    edx
c00127a9:	59                   	pop    ecx
c00127aa:	e9 4e ff ff ff       	jmp    c00126fd <Dbg::kprintf(char const*, ...)+0x5c>
c00127af:	50                   	push   eax
c00127b0:	89 eb                	mov    ebx,ebp
c00127b2:	e8 7a fe ff ff       	call   c0012631 <Dbg::logc(char)>
c00127b7:	89 fd                	mov    ebp,edi
c00127b9:	58                   	pop    eax
c00127ba:	e9 3e ff ff ff       	jmp    c00126fd <Dbg::kprintf(char const*, ...)+0x5c>
c00127bf:	90                   	nop

c00127c0 <File::read(unsigned long long, void*, int*)>:
c00127c0:	53                   	push   ebx
c00127c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127c5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00127c9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00127d0:	3c 19                	cmp    al,0x19
c00127d2:	77 35                	ja     c0012809 <File::read(unsigned long long, void*, int*)+0x49>
c00127d4:	8b 04 85 20 c8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd37e0]
c00127db:	85 c0                	test   eax,eax
c00127dd:	74 2a                	je     c0012809 <File::read(unsigned long long, void*, int*)+0x49>
c00127df:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00127e5:	85 c0                	test   eax,eax
c00127e7:	74 20                	je     c0012809 <File::read(unsigned long long, void*, int*)+0x49>
c00127e9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00127ed:	74 21                	je     c0012810 <File::read(unsigned long long, void*, int*)+0x50>
c00127ef:	8b 08                	mov    ecx,DWORD PTR [eax]
c00127f1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00127f5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00127fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00127ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012803:	5b                   	pop    ebx
c0012804:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012807:	ff e0                	jmp    eax
c0012809:	b8 0b 00 00 00       	mov    eax,0xb
c001280e:	eb 05                	jmp    c0012815 <File::read(unsigned long long, void*, int*)+0x55>
c0012810:	b8 05 00 00 00       	mov    eax,0x5
c0012815:	5b                   	pop    ebx
c0012816:	c3                   	ret    
c0012817:	90                   	nop

c0012818 <File::write(unsigned long long, void*, int*)>:
c0012818:	53                   	push   ebx
c0012819:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001281d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012821:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012828:	3c 19                	cmp    al,0x19
c001282a:	77 35                	ja     c0012861 <File::write(unsigned long long, void*, int*)+0x49>
c001282c:	8b 04 85 20 c8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd37e0]
c0012833:	85 c0                	test   eax,eax
c0012835:	74 2a                	je     c0012861 <File::write(unsigned long long, void*, int*)+0x49>
c0012837:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001283d:	85 c0                	test   eax,eax
c001283f:	74 20                	je     c0012861 <File::write(unsigned long long, void*, int*)+0x49>
c0012841:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012845:	74 21                	je     c0012868 <File::write(unsigned long long, void*, int*)+0x50>
c0012847:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012849:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001284d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012853:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012857:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001285b:	5b                   	pop    ebx
c001285c:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001285f:	ff e0                	jmp    eax
c0012861:	b8 0b 00 00 00       	mov    eax,0xb
c0012866:	eb 05                	jmp    c001286d <File::write(unsigned long long, void*, int*)+0x55>
c0012868:	b8 05 00 00 00       	mov    eax,0x5
c001286d:	5b                   	pop    ebx
c001286e:	c3                   	ret    
c001286f:	90                   	nop

c0012870 <Directory::read(unsigned long long, void*, int*)>:
c0012870:	53                   	push   ebx
c0012871:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012875:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012879:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012880:	3c 19                	cmp    al,0x19
c0012882:	77 35                	ja     c00128b9 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012884:	8b 04 85 20 c8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd37e0]
c001288b:	85 c0                	test   eax,eax
c001288d:	74 2a                	je     c00128b9 <Directory::read(unsigned long long, void*, int*)+0x49>
c001288f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012895:	85 c0                	test   eax,eax
c0012897:	74 20                	je     c00128b9 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012899:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001289d:	74 21                	je     c00128c0 <Directory::read(unsigned long long, void*, int*)+0x50>
c001289f:	8b 08                	mov    ecx,DWORD PTR [eax]
c00128a1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00128a5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00128ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00128af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00128b3:	5b                   	pop    ebx
c00128b4:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00128b7:	ff e0                	jmp    eax
c00128b9:	b8 0b 00 00 00       	mov    eax,0xb
c00128be:	eb 05                	jmp    c00128c5 <Directory::read(unsigned long long, void*, int*)+0x55>
c00128c0:	b8 05 00 00 00       	mov    eax,0x5
c00128c5:	5b                   	pop    ebx
c00128c6:	c3                   	ret    
c00128c7:	90                   	nop

c00128c8 <Directory::write(unsigned long long, void*, int*)>:
c00128c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128cc:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00128d3:	b8 0b 00 00 00       	mov    eax,0xb
c00128d8:	80 fa 19             	cmp    dl,0x19
c00128db:	77 18                	ja     c00128f5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00128dd:	8b 14 95 20 c8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd37e0]
c00128e4:	85 d2                	test   edx,edx
c00128e6:	74 0d                	je     c00128f5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00128e8:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00128ef:	19 c0                	sbb    eax,eax
c00128f1:	83 e0 0a             	and    eax,0xa
c00128f4:	40                   	inc    eax
c00128f5:	c3                   	ret    

c00128f6 <File::isAtty()>:
c00128f6:	31 c0                	xor    eax,eax
c00128f8:	c3                   	ret    
c00128f9:	90                   	nop

c00128fa <Directory::isAtty()>:
c00128fa:	31 c0                	xor    eax,eax
c00128fc:	c3                   	ret    
c00128fd:	90                   	nop

c00128fe <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00128fe:	b8 0a 00 00 00       	mov    eax,0xa
c0012903:	c3                   	ret    

c0012904 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012904:	b8 0a 00 00 00       	mov    eax,0xa
c0012909:	c3                   	ret    

c001290a <File::~File()>:
c001290a:	83 ec 0c             	sub    esp,0xc
c001290d:	ba 50 8c 02 c0       	mov    edx,0xc0028c50
c0012912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012916:	89 10                	mov    DWORD PTR [eax],edx
c0012918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001291c:	83 ec 0c             	sub    esp,0xc
c001291f:	50                   	push   eax
c0012920:	e8 2b eb ff ff       	call   c0011450 <UnixFile::~UnixFile()>
c0012925:	83 c4 10             	add    esp,0x10
c0012928:	90                   	nop
c0012929:	83 c4 0c             	add    esp,0xc
c001292c:	c3                   	ret    
c001292d:	90                   	nop

c001292e <File::~File()>:
c001292e:	83 ec 0c             	sub    esp,0xc
c0012931:	83 ec 0c             	sub    esp,0xc
c0012934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012938:	e8 cd ff ff ff       	call   c001290a <File::~File()>
c001293d:	83 c4 10             	add    esp,0x10
c0012940:	83 ec 08             	sub    esp,0x8
c0012943:	68 14 01 00 00       	push   0x114
c0012948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001294c:	e8 70 fc ff ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c0012951:	83 c4 10             	add    esp,0x10
c0012954:	83 c4 0c             	add    esp,0xc
c0012957:	c3                   	ret    

c0012958 <Directory::~Directory()>:
c0012958:	83 ec 0c             	sub    esp,0xc
c001295b:	ba 6c 8c 02 c0       	mov    edx,0xc0028c6c
c0012960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012964:	89 10                	mov    DWORD PTR [eax],edx
c0012966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001296a:	83 ec 0c             	sub    esp,0xc
c001296d:	50                   	push   eax
c001296e:	e8 dd ea ff ff       	call   c0011450 <UnixFile::~UnixFile()>
c0012973:	83 c4 10             	add    esp,0x10
c0012976:	90                   	nop
c0012977:	83 c4 0c             	add    esp,0xc
c001297a:	c3                   	ret    
c001297b:	90                   	nop

c001297c <Directory::~Directory()>:
c001297c:	83 ec 0c             	sub    esp,0xc
c001297f:	83 ec 0c             	sub    esp,0xc
c0012982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012986:	e8 cd ff ff ff       	call   c0012958 <Directory::~Directory()>
c001298b:	83 c4 10             	add    esp,0x10
c001298e:	83 ec 08             	sub    esp,0x8
c0012991:	68 14 01 00 00       	push   0x114
c0012996:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001299a:	e8 22 fc ff ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c001299f:	83 c4 10             	add    esp,0x10
c00129a2:	83 c4 0c             	add    esp,0xc
c00129a5:	c3                   	ret    

c00129a6 <Filesystem::Filesystem()>:
c00129a6:	ba ec 8b 02 c0       	mov    edx,0xc0028bec
c00129ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129af:	89 10                	mov    DWORD PTR [eax],edx
c00129b1:	8b 15 88 c3 02 c0    	mov    edx,DWORD PTR ds:0xc002c388
c00129b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129bb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00129be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129c2:	a3 88 c3 02 c0       	mov    ds:0xc002c388,eax
c00129c7:	90                   	nop
c00129c8:	c3                   	ret    
c00129c9:	90                   	nop

c00129ca <Filesystem::~Filesystem()>:
c00129ca:	ba ec 8b 02 c0       	mov    edx,0xc0028bec
c00129cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129d3:	89 10                	mov    DWORD PTR [eax],edx
c00129d5:	90                   	nop
c00129d6:	c3                   	ret    
c00129d7:	90                   	nop

c00129d8 <Filesystem::~Filesystem()>:
c00129d8:	83 ec 0c             	sub    esp,0xc
c00129db:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00129df:	e8 e6 ff ff ff       	call   c00129ca <Filesystem::~Filesystem()>
c00129e4:	83 c4 04             	add    esp,0x4
c00129e7:	83 ec 08             	sub    esp,0x8
c00129ea:	6a 08                	push   0x8
c00129ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129f0:	e8 cc fb ff ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c00129f5:	83 c4 10             	add    esp,0x10
c00129f8:	83 c4 0c             	add    esp,0xc
c00129fb:	c3                   	ret    

c00129fc <initVFS()>:
c00129fc:	83 ec 18             	sub    esp,0x18
c00129ff:	6a 08                	push   0x8
c0012a01:	e8 ce ca ff ff       	call   c000f4d4 <malloc>
c0012a06:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a09:	e8 60 cd 00 00       	call   c001f76e <FAT::FAT()>
c0012a0e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012a15:	e8 ba ca ff ff       	call   c000f4d4 <malloc>
c0012a1a:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a1d:	e8 c2 df 00 00       	call   c00209e4 <ISO9660::ISO9660()>
c0012a22:	83 c4 1c             	add    esp,0x1c
c0012a25:	c3                   	ret    

c0012a26 <standardiseFiles(char*, char const*, char const*)>:
c0012a26:	55                   	push   ebp
c0012a27:	57                   	push   edi
c0012a28:	56                   	push   esi
c0012a29:	53                   	push   ebx
c0012a2a:	81 ec 10 04 00 00    	sub    esp,0x410
c0012a30:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012a37:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012a3e:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012a45:	68 00 04 00 00       	push   0x400
c0012a4a:	6a 00                	push   0x0
c0012a4c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012a50:	56                   	push   esi
c0012a51:	e8 35 dc fe ff       	call   c000068b <memset>
c0012a56:	83 c4 10             	add    esp,0x10
c0012a59:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012a5d:	75 0b                	jne    c0012a6a <standardiseFiles(char*, char const*, char const*)+0x44>
c0012a5f:	50                   	push   eax
c0012a60:	50                   	push   eax
c0012a61:	57                   	push   edi
c0012a62:	56                   	push   esi
c0012a63:	e8 c2 dc fe ff       	call   c000072a <strcpy>
c0012a68:	eb 41                	jmp    c0012aab <standardiseFiles(char*, char const*, char const*)+0x85>
c0012a6a:	8a 07                	mov    al,BYTE PTR [edi]
c0012a6c:	3c 5c                	cmp    al,0x5c
c0012a6e:	74 04                	je     c0012a74 <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012a70:	3c 2f                	cmp    al,0x2f
c0012a72:	75 18                	jne    c0012a8c <standardiseFiles(char*, char const*, char const*)+0x66>
c0012a74:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012a77:	3c 60                	cmp    al,0x60
c0012a79:	7e 03                	jle    c0012a7e <standardiseFiles(char*, char const*, char const*)+0x58>
c0012a7b:	83 e8 20             	sub    eax,0x20
c0012a7e:	88 04 24             	mov    BYTE PTR [esp],al
c0012a81:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012a88:	50                   	push   eax
c0012a89:	50                   	push   eax
c0012a8a:	eb 18                	jmp    c0012aa4 <standardiseFiles(char*, char const*, char const*)+0x7e>
c0012a8c:	50                   	push   eax
c0012a8d:	50                   	push   eax
c0012a8e:	55                   	push   ebp
c0012a8f:	56                   	push   esi
c0012a90:	e8 95 dc fe ff       	call   c000072a <strcpy>
c0012a95:	5a                   	pop    edx
c0012a96:	59                   	pop    ecx
c0012a97:	68 59 a0 02 c0       	push   0xc002a059
c0012a9c:	56                   	push   esi
c0012a9d:	e8 3f dd fe ff       	call   c00007e1 <strcat>
c0012aa2:	5d                   	pop    ebp
c0012aa3:	58                   	pop    eax
c0012aa4:	57                   	push   edi
c0012aa5:	56                   	push   esi
c0012aa6:	e8 36 dd fe ff       	call   c00007e1 <strcat>
c0012aab:	83 c4 10             	add    esp,0x10
c0012aae:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012ab1:	3c 60                	cmp    al,0x60
c0012ab3:	7e 03                	jle    c0012ab8 <standardiseFiles(char*, char const*, char const*)+0x92>
c0012ab5:	83 e8 20             	sub    eax,0x20
c0012ab8:	88 04 24             	mov    BYTE PTR [esp],al
c0012abb:	88 03                	mov    BYTE PTR [ebx],al
c0012abd:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012ac4:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012aca:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012ace:	bf 03 00 00 00       	mov    edi,0x3
c0012ad3:	b8 03 00 00 00       	mov    eax,0x3
c0012ad8:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012adb:	84 d2                	test   dl,dl
c0012add:	0f 84 91 00 00 00    	je     c0012b74 <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012ae3:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012ae6:	80 fa 5c             	cmp    dl,0x5c
c0012ae9:	74 05                	je     c0012af0 <standardiseFiles(char*, char const*, char const*)+0xca>
c0012aeb:	80 fa 2f             	cmp    dl,0x2f
c0012aee:	75 12                	jne    c0012b02 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012af0:	89 c5                	mov    ebp,eax
c0012af2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012af7:	74 09                	je     c0012b02 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012af9:	40                   	inc    eax
c0012afa:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012afe:	89 cf                	mov    edi,ecx
c0012b00:	eb d6                	jmp    c0012ad8 <standardiseFiles(char*, char const*, char const*)+0xb2>
c0012b02:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012b07:	75 5b                	jne    c0012b64 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012b09:	80 fa 2e             	cmp    dl,0x2e
c0012b0c:	75 56                	jne    c0012b64 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012b0e:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012b12:	74 19                	je     c0012b2d <standardiseFiles(char*, char const*, char const*)+0x107>
c0012b14:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012b19:	74 53                	je     c0012b6e <standardiseFiles(char*, char const*, char const*)+0x148>
c0012b1b:	89 f9                	mov    ecx,edi
c0012b1d:	41                   	inc    ecx
c0012b1e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012b21:	80 fa 2f             	cmp    dl,0x2f
c0012b24:	74 f7                	je     c0012b1d <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b26:	80 fa 5c             	cmp    dl,0x5c
c0012b29:	74 f2                	je     c0012b1d <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b2b:	eb d1                	jmp    c0012afe <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b2d:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012b32:	74 3a                	je     c0012b6e <standardiseFiles(char*, char const*, char const*)+0x148>
c0012b34:	83 f8 03             	cmp    eax,0x3
c0012b37:	74 c5                	je     c0012afe <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b39:	41                   	inc    ecx
c0012b3a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012b3d:	80 fa 2f             	cmp    dl,0x2f
c0012b40:	74 f7                	je     c0012b39 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012b42:	80 fa 5c             	cmp    dl,0x5c
c0012b45:	74 f2                	je     c0012b39 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012b47:	48                   	dec    eax
c0012b48:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012b4c:	75 06                	jne    c0012b54 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012b4e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b52:	eb f3                	jmp    c0012b47 <standardiseFiles(char*, char const*, char const*)+0x121>
c0012b54:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012b58:	74 07                	je     c0012b61 <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012b5a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b5e:	48                   	dec    eax
c0012b5f:	eb f3                	jmp    c0012b54 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012b61:	40                   	inc    eax
c0012b62:	eb 9a                	jmp    c0012afe <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b64:	80 fa 2f             	cmp    dl,0x2f
c0012b67:	74 95                	je     c0012afe <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b69:	80 fa 5c             	cmp    dl,0x5c
c0012b6c:	74 90                	je     c0012afe <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b6e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012b71:	40                   	inc    eax
c0012b72:	eb 8a                	jmp    c0012afe <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b74:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b78:	83 ec 0c             	sub    esp,0xc
c0012b7b:	53                   	push   ebx
c0012b7c:	e8 27 db fe ff       	call   c00006a8 <strlen>
c0012b81:	83 c4 10             	add    esp,0x10
c0012b84:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012b89:	75 26                	jne    c0012bb1 <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012b8b:	83 ec 0c             	sub    esp,0xc
c0012b8e:	53                   	push   ebx
c0012b8f:	e8 14 db fe ff       	call   c00006a8 <strlen>
c0012b94:	83 c4 10             	add    esp,0x10
c0012b97:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012b9c:	74 26                	je     c0012bc4 <standardiseFiles(char*, char const*, char const*)+0x19e>
c0012b9e:	83 ec 0c             	sub    esp,0xc
c0012ba1:	53                   	push   ebx
c0012ba2:	e8 01 db fe ff       	call   c00006a8 <strlen>
c0012ba7:	83 c4 10             	add    esp,0x10
c0012baa:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012baf:	eb c7                	jmp    c0012b78 <standardiseFiles(char*, char const*, char const*)+0x152>
c0012bb1:	83 ec 0c             	sub    esp,0xc
c0012bb4:	53                   	push   ebx
c0012bb5:	e8 ee da fe ff       	call   c00006a8 <strlen>
c0012bba:	83 c4 10             	add    esp,0x10
c0012bbd:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012bc2:	74 c7                	je     c0012b8b <standardiseFiles(char*, char const*, char const*)+0x165>
c0012bc4:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012bca:	5b                   	pop    ebx
c0012bcb:	5e                   	pop    esi
c0012bcc:	5f                   	pop    edi
c0012bcd:	5d                   	pop    ebp
c0012bce:	c3                   	ret    
c0012bcf:	90                   	nop

c0012bd0 <File::File(char const*, Process*)>:
c0012bd0:	83 ec 0c             	sub    esp,0xc
c0012bd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bd7:	83 ec 08             	sub    esp,0x8
c0012bda:	6a 00                	push   0x0
c0012bdc:	50                   	push   eax
c0012bdd:	e8 8c e6 ff ff       	call   c001126e <UnixFile::UnixFile(int)>
c0012be2:	83 c4 10             	add    esp,0x10
c0012be5:	ba 50 8c 02 c0       	mov    edx,0xc0028c50
c0012bea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bee:	89 10                	mov    DWORD PTR [eax],edx
c0012bf0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012bf4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bfe:	83 c0 0d             	add    eax,0xd
c0012c01:	83 ec 04             	sub    esp,0x4
c0012c04:	52                   	push   edx
c0012c05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c09:	50                   	push   eax
c0012c0a:	e8 17 fe ff ff       	call   c0012a26 <standardiseFiles(char*, char const*, char const*)>
c0012c0f:	83 c4 10             	add    esp,0x10
c0012c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c16:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012c19:	8d 50 bf             	lea    edx,[eax-0x41]
c0012c1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c20:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012c26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c2a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012c2e:	90                   	nop
c0012c2f:	83 c4 0c             	add    esp,0xc
c0012c32:	c3                   	ret    
c0012c33:	90                   	nop

c0012c34 <File::open(FileOpenMode)>:
c0012c34:	53                   	push   ebx
c0012c35:	b8 0b 00 00 00       	mov    eax,0xb
c0012c3a:	83 ec 08             	sub    esp,0x8
c0012c3d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012c41:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012c48:	80 fa 19             	cmp    dl,0x19
c0012c4b:	77 40                	ja     c0012c8d <File::open(FileOpenMode)+0x59>
c0012c4d:	8b 14 95 20 c8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd37e0]
c0012c54:	85 d2                	test   edx,edx
c0012c56:	74 35                	je     c0012c8d <File::open(FileOpenMode)+0x59>
c0012c58:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012c5e:	85 d2                	test   edx,edx
c0012c60:	74 2b                	je     c0012c8d <File::open(FileOpenMode)+0x59>
c0012c62:	b8 06 00 00 00       	mov    eax,0x6
c0012c67:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012c6b:	75 20                	jne    c0012c8d <File::open(FileOpenMode)+0x59>
c0012c6d:	8b 02                	mov    eax,DWORD PTR [edx]
c0012c6f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012c75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c79:	51                   	push   ecx
c0012c7a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012c7d:	51                   	push   ecx
c0012c7e:	52                   	push   edx
c0012c7f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012c82:	83 c4 10             	add    esp,0x10
c0012c85:	85 c0                	test   eax,eax
c0012c87:	75 04                	jne    c0012c8d <File::open(FileOpenMode)+0x59>
c0012c89:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012c8d:	83 c4 08             	add    esp,0x8
c0012c90:	5b                   	pop    ebx
c0012c91:	c3                   	ret    

c0012c92 <File::close()>:
c0012c92:	53                   	push   ebx
c0012c93:	b8 0b 00 00 00       	mov    eax,0xb
c0012c98:	83 ec 08             	sub    esp,0x8
c0012c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012c9f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012ca6:	80 fa 19             	cmp    dl,0x19
c0012ca9:	77 41                	ja     c0012cec <File::close()+0x5a>
c0012cab:	8b 1c 95 20 c8 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd37e0]
c0012cb2:	85 db                	test   ebx,ebx
c0012cb4:	74 36                	je     c0012cec <File::close()+0x5a>
c0012cb6:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012cbd:	74 2d                	je     c0012cec <File::close()+0x5a>
c0012cbf:	b8 05 00 00 00       	mov    eax,0x5
c0012cc4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012cc8:	74 22                	je     c0012cec <File::close()+0x5a>
c0012cca:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012cce:	8b 04 95 20 c8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd37e0]
c0012cd5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012cdb:	53                   	push   ebx
c0012cdc:	53                   	push   ebx
c0012cdd:	8b 10                	mov    edx,DWORD PTR [eax]
c0012cdf:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012ce5:	50                   	push   eax
c0012ce6:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012ce9:	83 c4 10             	add    esp,0x10
c0012cec:	83 c4 08             	add    esp,0x8
c0012cef:	5b                   	pop    ebx
c0012cf0:	c3                   	ret    
c0012cf1:	90                   	nop

c0012cf2 <File::seek(unsigned long long)>:
c0012cf2:	56                   	push   esi
c0012cf3:	53                   	push   ebx
c0012cf4:	b8 0b 00 00 00       	mov    eax,0xb
c0012cf9:	51                   	push   ecx
c0012cfa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012cfe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012d02:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012d09:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012d0d:	80 fa 19             	cmp    dl,0x19
c0012d10:	77 31                	ja     c0012d43 <File::seek(unsigned long long)+0x51>
c0012d12:	8b 14 95 20 c8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd37e0]
c0012d19:	85 d2                	test   edx,edx
c0012d1b:	74 26                	je     c0012d43 <File::seek(unsigned long long)+0x51>
c0012d1d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d23:	85 d2                	test   edx,edx
c0012d25:	74 1c                	je     c0012d43 <File::seek(unsigned long long)+0x51>
c0012d27:	b8 05 00 00 00       	mov    eax,0x5
c0012d2c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012d30:	74 11                	je     c0012d43 <File::seek(unsigned long long)+0x51>
c0012d32:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d34:	53                   	push   ebx
c0012d35:	51                   	push   ecx
c0012d36:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012d3c:	52                   	push   edx
c0012d3d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012d40:	83 c4 10             	add    esp,0x10
c0012d43:	5a                   	pop    edx
c0012d44:	5b                   	pop    ebx
c0012d45:	5e                   	pop    esi
c0012d46:	c3                   	ret    
c0012d47:	90                   	nop

c0012d48 <File::tell(unsigned long long*)>:
c0012d48:	83 ec 0c             	sub    esp,0xc
c0012d4b:	b8 0b 00 00 00       	mov    eax,0xb
c0012d50:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d54:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d5b:	80 fa 19             	cmp    dl,0x19
c0012d5e:	77 34                	ja     c0012d94 <File::tell(unsigned long long*)+0x4c>
c0012d60:	8b 14 95 20 c8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd37e0]
c0012d67:	85 d2                	test   edx,edx
c0012d69:	74 29                	je     c0012d94 <File::tell(unsigned long long*)+0x4c>
c0012d6b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d71:	85 d2                	test   edx,edx
c0012d73:	74 1f                	je     c0012d94 <File::tell(unsigned long long*)+0x4c>
c0012d75:	b8 05 00 00 00       	mov    eax,0x5
c0012d7a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d7e:	74 14                	je     c0012d94 <File::tell(unsigned long long*)+0x4c>
c0012d80:	50                   	push   eax
c0012d81:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d83:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d87:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d8d:	52                   	push   edx
c0012d8e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012d91:	83 c4 10             	add    esp,0x10
c0012d94:	83 c4 0c             	add    esp,0xc
c0012d97:	c3                   	ret    

c0012d98 <File::rewind()>:
c0012d98:	83 ec 10             	sub    esp,0x10
c0012d9b:	6a 00                	push   0x0
c0012d9d:	6a 00                	push   0x0
c0012d9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012da3:	e8 4a ff ff ff       	call   c0012cf2 <File::seek(unsigned long long)>
c0012da8:	83 c4 1c             	add    esp,0x1c
c0012dab:	c3                   	ret    

c0012dac <File::unlink()>:
c0012dac:	83 ec 0c             	sub    esp,0xc
c0012daf:	b8 0b 00 00 00       	mov    eax,0xb
c0012db4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012db8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012dbf:	80 f9 19             	cmp    cl,0x19
c0012dc2:	77 2f                	ja     c0012df3 <File::unlink()+0x47>
c0012dc4:	8b 0c 8d 20 c8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd37e0]
c0012dcb:	85 c9                	test   ecx,ecx
c0012dcd:	74 24                	je     c0012df3 <File::unlink()+0x47>
c0012dcf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012dd5:	85 c9                	test   ecx,ecx
c0012dd7:	74 1a                	je     c0012df3 <File::unlink()+0x47>
c0012dd9:	b8 06 00 00 00       	mov    eax,0x6
c0012dde:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012de2:	75 0f                	jne    c0012df3 <File::unlink()+0x47>
c0012de4:	83 c2 0d             	add    edx,0xd
c0012de7:	50                   	push   eax
c0012de8:	50                   	push   eax
c0012de9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012deb:	52                   	push   edx
c0012dec:	51                   	push   ecx
c0012ded:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012df0:	83 c4 10             	add    esp,0x10
c0012df3:	83 c4 0c             	add    esp,0xc
c0012df6:	c3                   	ret    
c0012df7:	90                   	nop

c0012df8 <File::rename(char const*)>:
c0012df8:	83 ec 0c             	sub    esp,0xc
c0012dfb:	b8 0b 00 00 00       	mov    eax,0xb
c0012e00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e04:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e0b:	80 f9 19             	cmp    cl,0x19
c0012e0e:	77 32                	ja     c0012e42 <File::rename(char const*)+0x4a>
c0012e10:	8b 0c 8d 20 c8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd37e0]
c0012e17:	85 c9                	test   ecx,ecx
c0012e19:	74 27                	je     c0012e42 <File::rename(char const*)+0x4a>
c0012e1b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e21:	85 c9                	test   ecx,ecx
c0012e23:	74 1d                	je     c0012e42 <File::rename(char const*)+0x4a>
c0012e25:	b8 06 00 00 00       	mov    eax,0x6
c0012e2a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e2e:	75 12                	jne    c0012e42 <File::rename(char const*)+0x4a>
c0012e30:	83 c2 0d             	add    edx,0xd
c0012e33:	50                   	push   eax
c0012e34:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e36:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e3a:	52                   	push   edx
c0012e3b:	51                   	push   ecx
c0012e3c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012e3f:	83 c4 10             	add    esp,0x10
c0012e42:	83 c4 0c             	add    esp,0xc
c0012e45:	c3                   	ret    

c0012e46 <File::chfatattr(unsigned char, unsigned char)>:
c0012e46:	57                   	push   edi
c0012e47:	b8 0b 00 00 00       	mov    eax,0xb
c0012e4c:	56                   	push   esi
c0012e4d:	53                   	push   ebx
c0012e4e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e52:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012e56:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e5d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012e61:	80 f9 19             	cmp    cl,0x19
c0012e64:	77 37                	ja     c0012e9d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e66:	8b 0c 8d 20 c8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd37e0]
c0012e6d:	85 c9                	test   ecx,ecx
c0012e6f:	74 2c                	je     c0012e9d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e71:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e77:	85 c9                	test   ecx,ecx
c0012e79:	74 22                	je     c0012e9d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e7b:	b8 06 00 00 00       	mov    eax,0x6
c0012e80:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e84:	75 17                	jne    c0012e9d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e86:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012e88:	89 f0                	mov    eax,esi
c0012e8a:	83 c2 0d             	add    edx,0xd
c0012e8d:	0f b6 f0             	movzx  esi,al
c0012e90:	0f b6 db             	movzx  ebx,bl
c0012e93:	56                   	push   esi
c0012e94:	53                   	push   ebx
c0012e95:	52                   	push   edx
c0012e96:	51                   	push   ecx
c0012e97:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012e9a:	83 c4 10             	add    esp,0x10
c0012e9d:	5b                   	pop    ebx
c0012e9e:	5e                   	pop    esi
c0012e9f:	5f                   	pop    edi
c0012ea0:	c3                   	ret    
c0012ea1:	90                   	nop

c0012ea2 <File::exists()>:
c0012ea2:	83 ec 0c             	sub    esp,0xc
c0012ea5:	31 c0                	xor    eax,eax
c0012ea7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012eab:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012eb2:	80 f9 19             	cmp    cl,0x19
c0012eb5:	77 24                	ja     c0012edb <File::exists()+0x39>
c0012eb7:	8b 0c 8d 20 c8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd37e0]
c0012ebe:	85 c9                	test   ecx,ecx
c0012ec0:	74 19                	je     c0012edb <File::exists()+0x39>
c0012ec2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ec8:	85 c9                	test   ecx,ecx
c0012eca:	74 0f                	je     c0012edb <File::exists()+0x39>
c0012ecc:	83 c2 0d             	add    edx,0xd
c0012ecf:	50                   	push   eax
c0012ed0:	50                   	push   eax
c0012ed1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ed3:	52                   	push   edx
c0012ed4:	51                   	push   ecx
c0012ed5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012ed8:	83 c4 10             	add    esp,0x10
c0012edb:	83 c4 0c             	add    esp,0xc
c0012ede:	c3                   	ret    
c0012edf:	90                   	nop

c0012ee0 <File::stat(unsigned long long*, bool*)>:
c0012ee0:	56                   	push   esi
c0012ee1:	53                   	push   ebx
c0012ee2:	50                   	push   eax
c0012ee3:	b8 0b 00 00 00       	mov    eax,0xb
c0012ee8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012eec:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012ef0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ef7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012efb:	80 f9 19             	cmp    cl,0x19
c0012efe:	77 3d                	ja     c0012f3d <File::stat(unsigned long long*, bool*)+0x5d>
c0012f00:	8b 0c 8d 20 c8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd37e0]
c0012f07:	85 c9                	test   ecx,ecx
c0012f09:	74 32                	je     c0012f3d <File::stat(unsigned long long*, bool*)+0x5d>
c0012f0b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f11:	85 c9                	test   ecx,ecx
c0012f13:	74 28                	je     c0012f3d <File::stat(unsigned long long*, bool*)+0x5d>
c0012f15:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f17:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f1b:	74 13                	je     c0012f30 <File::stat(unsigned long long*, bool*)+0x50>
c0012f1d:	83 ec 04             	sub    esp,0x4
c0012f20:	56                   	push   esi
c0012f21:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012f27:	51                   	push   ecx
c0012f28:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012f2b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012f2e:	eb 0a                	jmp    c0012f3a <File::stat(unsigned long long*, bool*)+0x5a>
c0012f30:	53                   	push   ebx
c0012f31:	83 c2 0d             	add    edx,0xd
c0012f34:	56                   	push   esi
c0012f35:	52                   	push   edx
c0012f36:	51                   	push   ecx
c0012f37:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012f3a:	83 c4 10             	add    esp,0x10
c0012f3d:	5a                   	pop    edx
c0012f3e:	5b                   	pop    ebx
c0012f3f:	5e                   	pop    esi
c0012f40:	c3                   	ret    

c0012f41 <getcwd(Process*, char*, int)>:
c0012f41:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f45:	31 c0                	xor    eax,eax
c0012f47:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012f4a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012f4e:	7d 15                	jge    c0012f65 <getcwd(Process*, char*, int)+0x24>
c0012f50:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f54:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012f5b:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012f5e:	84 c9                	test   cl,cl
c0012f60:	74 06                	je     c0012f68 <getcwd(Process*, char*, int)+0x27>
c0012f62:	40                   	inc    eax
c0012f63:	eb e2                	jmp    c0012f47 <getcwd(Process*, char*, int)+0x6>
c0012f65:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012f68:	31 c0                	xor    eax,eax
c0012f6a:	c3                   	ret    

c0012f6b <setcwd(Process*, char*)>:
c0012f6b:	55                   	push   ebp
c0012f6c:	57                   	push   edi
c0012f6d:	56                   	push   esi
c0012f6e:	53                   	push   ebx
c0012f6f:	81 ec 20 02 00 00    	sub    esp,0x220
c0012f75:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012f7c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012f82:	57                   	push   edi
c0012f83:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012f8a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012f8e:	56                   	push   esi
c0012f8f:	e8 92 fa ff ff       	call   c0012a26 <standardiseFiles(char*, char const*, char const*)>
c0012f94:	89 34 24             	mov    DWORD PTR [esp],esi
c0012f97:	e8 0c d7 fe ff       	call   c00006a8 <strlen>
c0012f9c:	83 c4 10             	add    esp,0x10
c0012f9f:	83 f8 02             	cmp    eax,0x2
c0012fa2:	77 17                	ja     c0012fbb <setcwd(Process*, char*)+0x50>
c0012fa4:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012fa9:	83 e8 41             	sub    eax,0x41
c0012fac:	83 f8 19             	cmp    eax,0x19
c0012faf:	76 24                	jbe    c0012fd5 <setcwd(Process*, char*)+0x6a>
c0012fb1:	b8 03 00 00 00       	mov    eax,0x3
c0012fb6:	e9 e0 00 00 00       	jmp    c001309b <setcwd(Process*, char*)+0x130>
c0012fbb:	83 ec 0c             	sub    esp,0xc
c0012fbe:	56                   	push   esi
c0012fbf:	e8 e4 d6 fe ff       	call   c00006a8 <strlen>
c0012fc4:	83 c4 10             	add    esp,0x10
c0012fc7:	83 f8 03             	cmp    eax,0x3
c0012fca:	75 34                	jne    c0013000 <setcwd(Process*, char*)+0x95>
c0012fcc:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012fd1:	75 2d                	jne    c0013000 <setcwd(Process*, char*)+0x95>
c0012fd3:	eb cf                	jmp    c0012fa4 <setcwd(Process*, char*)+0x39>
c0012fd5:	8b 14 85 20 c8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd37e0]
c0012fdc:	b8 05 00 00 00       	mov    eax,0x5
c0012fe1:	85 d2                	test   edx,edx
c0012fe3:	0f 84 b2 00 00 00    	je     c001309b <setcwd(Process*, char*)+0x130>
c0012fe9:	b8 06 00 00 00       	mov    eax,0x6
c0012fee:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012ff5:	0f 85 92 00 00 00    	jne    c001308d <setcwd(Process*, char*)+0x122>
c0012ffb:	e9 9b 00 00 00       	jmp    c001309b <setcwd(Process*, char*)+0x130>
c0013000:	83 ec 0c             	sub    esp,0xc
c0013003:	68 14 01 00 00       	push   0x114
c0013008:	e8 c7 c4 ff ff       	call   c000f4d4 <malloc>
c001300d:	83 c4 0c             	add    esp,0xc
c0013010:	89 c3                	mov    ebx,eax
c0013012:	55                   	push   ebp
c0013013:	56                   	push   esi
c0013014:	50                   	push   eax
c0013015:	e8 b6 fb ff ff       	call   c0012bd0 <File::File(char const*, Process*)>
c001301a:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001301f:	83 c4 0c             	add    esp,0xc
c0013022:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013026:	50                   	push   eax
c0013027:	8d 44 24 10          	lea    eax,[esp+0x10]
c001302b:	50                   	push   eax
c001302c:	53                   	push   ebx
c001302d:	e8 ae fe ff ff       	call   c0012ee0 <File::stat(unsigned long long*, bool*)>
c0013032:	83 c4 10             	add    esp,0x10
c0013035:	83 f8 02             	cmp    eax,0x2
c0013038:	74 04                	je     c001303e <setcwd(Process*, char*)+0xd3>
c001303a:	85 c0                	test   eax,eax
c001303c:	74 1c                	je     c001305a <setcwd(Process*, char*)+0xef>
c001303e:	b8 01 00 00 00       	mov    eax,0x1
c0013043:	85 db                	test   ebx,ebx
c0013045:	74 54                	je     c001309b <setcwd(Process*, char*)+0x130>
c0013047:	83 ec 0c             	sub    esp,0xc
c001304a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001304c:	53                   	push   ebx
c001304d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013050:	83 c4 10             	add    esp,0x10
c0013053:	b8 01 00 00 00       	mov    eax,0x1
c0013058:	eb 41                	jmp    c001309b <setcwd(Process*, char*)+0x130>
c001305a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001305f:	75 1c                	jne    c001307d <setcwd(Process*, char*)+0x112>
c0013061:	b8 02 00 00 00       	mov    eax,0x2
c0013066:	85 db                	test   ebx,ebx
c0013068:	74 31                	je     c001309b <setcwd(Process*, char*)+0x130>
c001306a:	83 ec 0c             	sub    esp,0xc
c001306d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001306f:	53                   	push   ebx
c0013070:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013073:	83 c4 10             	add    esp,0x10
c0013076:	b8 02 00 00 00       	mov    eax,0x2
c001307b:	eb 1e                	jmp    c001309b <setcwd(Process*, char*)+0x130>
c001307d:	85 db                	test   ebx,ebx
c001307f:	74 0c                	je     c001308d <setcwd(Process*, char*)+0x122>
c0013081:	83 ec 0c             	sub    esp,0xc
c0013084:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013086:	53                   	push   ebx
c0013087:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001308a:	83 c4 10             	add    esp,0x10
c001308d:	50                   	push   eax
c001308e:	50                   	push   eax
c001308f:	56                   	push   esi
c0013090:	57                   	push   edi
c0013091:	e8 94 d6 fe ff       	call   c000072a <strcpy>
c0013096:	83 c4 10             	add    esp,0x10
c0013099:	31 c0                	xor    eax,eax
c001309b:	81 c4 1c 02 00 00    	add    esp,0x21c
c00130a1:	5b                   	pop    ebx
c00130a2:	5e                   	pop    esi
c00130a3:	5f                   	pop    edi
c00130a4:	5d                   	pop    ebp
c00130a5:	c3                   	ret    

c00130a6 <Directory::Directory(char const*, Process*)>:
c00130a6:	83 ec 0c             	sub    esp,0xc
c00130a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ad:	83 ec 08             	sub    esp,0x8
c00130b0:	6a 00                	push   0x0
c00130b2:	50                   	push   eax
c00130b3:	e8 b6 e1 ff ff       	call   c001126e <UnixFile::UnixFile(int)>
c00130b8:	83 c4 10             	add    esp,0x10
c00130bb:	ba 6c 8c 02 c0       	mov    edx,0xc0028c6c
c00130c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130c4:	89 10                	mov    DWORD PTR [eax],edx
c00130c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130ca:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00130d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130d4:	83 c0 0d             	add    eax,0xd
c00130d7:	83 ec 04             	sub    esp,0x4
c00130da:	52                   	push   edx
c00130db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130df:	50                   	push   eax
c00130e0:	e8 41 f9 ff ff       	call   c0012a26 <standardiseFiles(char*, char const*, char const*)>
c00130e5:	83 c4 10             	add    esp,0x10
c00130e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ec:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00130ef:	8d 50 bf             	lea    edx,[eax-0x41]
c00130f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130f6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00130fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013100:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013104:	90                   	nop
c0013105:	83 c4 0c             	add    esp,0xc
c0013108:	c3                   	ret    
c0013109:	90                   	nop

c001310a <Directory::open()>:
c001310a:	53                   	push   ebx
c001310b:	b8 0b 00 00 00       	mov    eax,0xb
c0013110:	83 ec 08             	sub    esp,0x8
c0013113:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013117:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001311e:	80 fa 19             	cmp    dl,0x19
c0013121:	77 3d                	ja     c0013160 <Directory::open()+0x56>
c0013123:	8b 14 95 20 c8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd37e0]
c001312a:	85 d2                	test   edx,edx
c001312c:	74 32                	je     c0013160 <Directory::open()+0x56>
c001312e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013134:	85 d2                	test   edx,edx
c0013136:	74 28                	je     c0013160 <Directory::open()+0x56>
c0013138:	b8 06 00 00 00       	mov    eax,0x6
c001313d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013141:	75 1d                	jne    c0013160 <Directory::open()+0x56>
c0013143:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013149:	50                   	push   eax
c001314a:	8b 02                	mov    eax,DWORD PTR [edx]
c001314c:	51                   	push   ecx
c001314d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013150:	51                   	push   ecx
c0013151:	52                   	push   edx
c0013152:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013155:	83 c4 10             	add    esp,0x10
c0013158:	85 c0                	test   eax,eax
c001315a:	75 04                	jne    c0013160 <Directory::open()+0x56>
c001315c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013160:	83 c4 08             	add    esp,0x8
c0013163:	5b                   	pop    ebx
c0013164:	c3                   	ret    
c0013165:	90                   	nop

c0013166 <Directory::close()>:
c0013166:	53                   	push   ebx
c0013167:	b8 0b 00 00 00       	mov    eax,0xb
c001316c:	83 ec 08             	sub    esp,0x8
c001316f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013173:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001317a:	80 fa 19             	cmp    dl,0x19
c001317d:	77 41                	ja     c00131c0 <Directory::close()+0x5a>
c001317f:	8b 1c 95 20 c8 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd37e0]
c0013186:	85 db                	test   ebx,ebx
c0013188:	74 36                	je     c00131c0 <Directory::close()+0x5a>
c001318a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013191:	74 2d                	je     c00131c0 <Directory::close()+0x5a>
c0013193:	b8 05 00 00 00       	mov    eax,0x5
c0013198:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001319c:	74 22                	je     c00131c0 <Directory::close()+0x5a>
c001319e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00131a2:	8b 04 95 20 c8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd37e0]
c00131a9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00131af:	53                   	push   ebx
c00131b0:	53                   	push   ebx
c00131b1:	8b 10                	mov    edx,DWORD PTR [eax]
c00131b3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00131b9:	50                   	push   eax
c00131ba:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00131bd:	83 c4 10             	add    esp,0x10
c00131c0:	83 c4 08             	add    esp,0x8
c00131c3:	5b                   	pop    ebx
c00131c4:	c3                   	ret    
c00131c5:	90                   	nop

c00131c6 <Directory::unlink()>:
c00131c6:	83 ec 0c             	sub    esp,0xc
c00131c9:	b8 0b 00 00 00       	mov    eax,0xb
c00131ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131d2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00131d9:	80 f9 19             	cmp    cl,0x19
c00131dc:	77 2f                	ja     c001320d <Directory::unlink()+0x47>
c00131de:	8b 0c 8d 20 c8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd37e0]
c00131e5:	85 c9                	test   ecx,ecx
c00131e7:	74 24                	je     c001320d <Directory::unlink()+0x47>
c00131e9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00131ef:	85 c9                	test   ecx,ecx
c00131f1:	74 1a                	je     c001320d <Directory::unlink()+0x47>
c00131f3:	b8 06 00 00 00       	mov    eax,0x6
c00131f8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131fc:	75 0f                	jne    c001320d <Directory::unlink()+0x47>
c00131fe:	83 c2 0d             	add    edx,0xd
c0013201:	50                   	push   eax
c0013202:	50                   	push   eax
c0013203:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013205:	52                   	push   edx
c0013206:	51                   	push   ecx
c0013207:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001320a:	83 c4 10             	add    esp,0x10
c001320d:	83 c4 0c             	add    esp,0xc
c0013210:	c3                   	ret    
c0013211:	90                   	nop

c0013212 <Directory::rename(char const*)>:
c0013212:	83 ec 0c             	sub    esp,0xc
c0013215:	b8 0b 00 00 00       	mov    eax,0xb
c001321a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001321e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013225:	80 f9 19             	cmp    cl,0x19
c0013228:	77 32                	ja     c001325c <Directory::rename(char const*)+0x4a>
c001322a:	8b 0c 8d 20 c8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd37e0]
c0013231:	85 c9                	test   ecx,ecx
c0013233:	74 27                	je     c001325c <Directory::rename(char const*)+0x4a>
c0013235:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001323b:	85 c9                	test   ecx,ecx
c001323d:	74 1d                	je     c001325c <Directory::rename(char const*)+0x4a>
c001323f:	b8 06 00 00 00       	mov    eax,0x6
c0013244:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013248:	75 12                	jne    c001325c <Directory::rename(char const*)+0x4a>
c001324a:	83 c2 0d             	add    edx,0xd
c001324d:	50                   	push   eax
c001324e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013250:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013254:	52                   	push   edx
c0013255:	51                   	push   ecx
c0013256:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013259:	83 c4 10             	add    esp,0x10
c001325c:	83 c4 0c             	add    esp,0xc
c001325f:	c3                   	ret    

c0013260 <Directory::exists()>:
c0013260:	83 ec 0c             	sub    esp,0xc
c0013263:	31 c0                	xor    eax,eax
c0013265:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013269:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013270:	80 f9 19             	cmp    cl,0x19
c0013273:	77 24                	ja     c0013299 <Directory::exists()+0x39>
c0013275:	8b 0c 8d 20 c8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd37e0]
c001327c:	85 c9                	test   ecx,ecx
c001327e:	74 19                	je     c0013299 <Directory::exists()+0x39>
c0013280:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013286:	85 c9                	test   ecx,ecx
c0013288:	74 0f                	je     c0013299 <Directory::exists()+0x39>
c001328a:	83 c2 0d             	add    edx,0xd
c001328d:	50                   	push   eax
c001328e:	50                   	push   eax
c001328f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013291:	52                   	push   edx
c0013292:	51                   	push   ecx
c0013293:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013296:	83 c4 10             	add    esp,0x10
c0013299:	83 c4 0c             	add    esp,0xc
c001329c:	c3                   	ret    
c001329d:	90                   	nop

c001329e <Directory::read(dirent*)>:
c001329e:	83 ec 1c             	sub    esp,0x1c
c00132a1:	b8 0b 00 00 00       	mov    eax,0xb
c00132a6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00132aa:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00132b1:	80 fa 19             	cmp    dl,0x19
c00132b4:	77 30                	ja     c00132e6 <Directory::read(dirent*)+0x48>
c00132b6:	8b 14 95 20 c8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd37e0]
c00132bd:	85 d2                	test   edx,edx
c00132bf:	74 25                	je     c00132e6 <Directory::read(dirent*)+0x48>
c00132c1:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00132c8:	74 1c                	je     c00132e6 <Directory::read(dirent*)+0x48>
c00132ca:	83 ec 0c             	sub    esp,0xc
c00132cd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132cf:	8d 54 24 18          	lea    edx,[esp+0x18]
c00132d3:	52                   	push   edx
c00132d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00132d8:	6a 00                	push   0x0
c00132da:	68 10 01 00 00       	push   0x110
c00132df:	51                   	push   ecx
c00132e0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00132e3:	83 c4 20             	add    esp,0x20
c00132e6:	83 c4 1c             	add    esp,0x1c
c00132e9:	c3                   	ret    

c00132ea <Directory::create()>:
c00132ea:	83 ec 0c             	sub    esp,0xc
c00132ed:	b8 0b 00 00 00       	mov    eax,0xb
c00132f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132f6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132fd:	80 f9 19             	cmp    cl,0x19
c0013300:	77 2f                	ja     c0013331 <Directory::create()+0x47>
c0013302:	8b 0c 8d 20 c8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd37e0]
c0013309:	85 c9                	test   ecx,ecx
c001330b:	74 24                	je     c0013331 <Directory::create()+0x47>
c001330d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013313:	85 c9                	test   ecx,ecx
c0013315:	74 1a                	je     c0013331 <Directory::create()+0x47>
c0013317:	b8 06 00 00 00       	mov    eax,0x6
c001331c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013320:	75 0f                	jne    c0013331 <Directory::create()+0x47>
c0013322:	83 c2 0d             	add    edx,0xd
c0013325:	50                   	push   eax
c0013326:	50                   	push   eax
c0013327:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013329:	52                   	push   edx
c001332a:	51                   	push   ecx
c001332b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001332e:	83 c4 10             	add    esp,0x10
c0013331:	83 c4 0c             	add    esp,0xc
c0013334:	c3                   	ret    
c0013335:	90                   	nop

c0013336 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013336:	b8 0a 00 00 00       	mov    eax,0xa
c001333b:	c3                   	ret    

c001333c <Bus::Bus(char const*)>:
c001333c:	83 ec 0c             	sub    esp,0xc
c001333f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013343:	83 ec 08             	sub    esp,0x8
c0013346:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001334a:	50                   	push   eax
c001334b:	e8 30 09 00 00       	call   c0013c80 <Device::Device(char const*)>
c0013350:	83 c4 10             	add    esp,0x10
c0013353:	ba 88 8c 02 c0       	mov    edx,0xc0028c88
c0013358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001335c:	89 10                	mov    DWORD PTR [eax],edx
c001335e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013362:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001336c:	90                   	nop
c001336d:	83 c4 0c             	add    esp,0xc
c0013370:	c3                   	ret    
c0013371:	90                   	nop

c0013372 <Bus::~Bus()>:
c0013372:	83 ec 0c             	sub    esp,0xc
c0013375:	ba 88 8c 02 c0       	mov    edx,0xc0028c88
c001337a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001337e:	89 10                	mov    DWORD PTR [eax],edx
c0013380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013384:	83 ec 0c             	sub    esp,0xc
c0013387:	50                   	push   eax
c0013388:	e8 d5 05 00 00       	call   c0013962 <Device::~Device()>
c001338d:	83 c4 10             	add    esp,0x10
c0013390:	90                   	nop
c0013391:	83 c4 0c             	add    esp,0xc
c0013394:	c3                   	ret    
c0013395:	90                   	nop

c0013396 <Bus::~Bus()>:
c0013396:	83 ec 0c             	sub    esp,0xc
c0013399:	83 ec 0c             	sub    esp,0xc
c001339c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133a0:	e8 cd ff ff ff       	call   c0013372 <Bus::~Bus()>
c00133a5:	83 c4 10             	add    esp,0x10
c00133a8:	83 ec 08             	sub    esp,0x8
c00133ab:	68 58 01 00 00       	push   0x158
c00133b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133b4:	e8 08 f2 ff ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c00133b9:	83 c4 10             	add    esp,0x10
c00133bc:	83 c4 0c             	add    esp,0xc
c00133bf:	c3                   	ret    

c00133c0 <Buzzer::Buzzer(char const*)>:
c00133c0:	83 ec 0c             	sub    esp,0xc
c00133c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133c7:	83 ec 08             	sub    esp,0x8
c00133ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133ce:	50                   	push   eax
c00133cf:	e8 ac 08 00 00       	call   c0013c80 <Device::Device(char const*)>
c00133d4:	83 c4 10             	add    esp,0x10
c00133d7:	ba b4 8c 02 c0       	mov    edx,0xc0028cb4
c00133dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133e0:	89 10                	mov    DWORD PTR [eax],edx
c00133e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133e6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00133f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f4:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c00133fe:	90                   	nop
c00133ff:	83 c4 0c             	add    esp,0xc
c0013402:	c3                   	ret    
c0013403:	90                   	nop

c0013404 <Buzzer::~Buzzer()>:
c0013404:	83 ec 0c             	sub    esp,0xc
c0013407:	ba b4 8c 02 c0       	mov    edx,0xc0028cb4
c001340c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013410:	89 10                	mov    DWORD PTR [eax],edx
c0013412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013416:	83 ec 0c             	sub    esp,0xc
c0013419:	50                   	push   eax
c001341a:	e8 43 05 00 00       	call   c0013962 <Device::~Device()>
c001341f:	83 c4 10             	add    esp,0x10
c0013422:	90                   	nop
c0013423:	83 c4 0c             	add    esp,0xc
c0013426:	c3                   	ret    
c0013427:	90                   	nop

c0013428 <Buzzer::~Buzzer()>:
c0013428:	83 ec 0c             	sub    esp,0xc
c001342b:	83 ec 0c             	sub    esp,0xc
c001342e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013432:	e8 cd ff ff ff       	call   c0013404 <Buzzer::~Buzzer()>
c0013437:	83 c4 10             	add    esp,0x10
c001343a:	83 ec 08             	sub    esp,0x8
c001343d:	68 5c 01 00 00       	push   0x15c
c0013442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013446:	e8 76 f1 ff ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c001344b:	83 c4 10             	add    esp,0x10
c001344e:	83 c4 0c             	add    esp,0xc
c0013451:	c3                   	ret    

c0013452 <Buzzer::stop()>:
c0013452:	83 ec 14             	sub    esp,0x14
c0013455:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013459:	8b 10                	mov    edx,DWORD PTR [eax]
c001345b:	6a 00                	push   0x0
c001345d:	50                   	push   eax
c001345e:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013461:	83 c4 1c             	add    esp,0x1c
c0013464:	c3                   	ret    

c0013465 <beepThread(void*)>:
c0013465:	53                   	push   ebx
c0013466:	83 ec 08             	sub    esp,0x8
c0013469:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001346d:	e8 8a 91 00 00       	call   c001c5fc <unlockScheduler()>
c0013472:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013477:	52                   	push   edx
c0013478:	52                   	push   edx
c0013479:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001347f:	52                   	push   edx
c0013480:	50                   	push   eax
c0013481:	e8 c4 96 00 00       	call   c001cb4a <nanoSleep(unsigned long long)>
c0013486:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013489:	e8 c4 ff ff ff       	call   c0013452 <Buzzer::stop()>
c001348e:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013496:	83 c4 18             	add    esp,0x18
c0013499:	5b                   	pop    ebx
c001349a:	e9 f1 95 00 00       	jmp    c001ca90 <blockTask(TaskState)>
c001349f:	90                   	nop

c00134a0 <Buzzer::beep(int, int, bool)>:
c00134a0:	57                   	push   edi
c00134a1:	56                   	push   esi
c00134a2:	53                   	push   ebx
c00134a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00134a7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00134ab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00134af:	52                   	push   edx
c00134b0:	52                   	push   edx
c00134b1:	8b 06                	mov    eax,DWORD PTR [esi]
c00134b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134b7:	56                   	push   esi
c00134b8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00134bb:	83 c4 10             	add    esp,0x10
c00134be:	89 f8                	mov    eax,edi
c00134c0:	84 c0                	test   al,al
c00134c2:	74 1f                	je     c00134e3 <Buzzer::beep(int, int, bool)+0x43>
c00134c4:	50                   	push   eax
c00134c5:	50                   	push   eax
c00134c6:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00134cc:	99                   	cdq    
c00134cd:	52                   	push   edx
c00134ce:	50                   	push   eax
c00134cf:	e8 76 96 00 00       	call   c001cb4a <nanoSleep(unsigned long long)>
c00134d4:	83 c4 10             	add    esp,0x10
c00134d7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00134db:	5b                   	pop    ebx
c00134dc:	5e                   	pop    esi
c00134dd:	5f                   	pop    edi
c00134de:	e9 6f ff ff ff       	jmp    c0013452 <Buzzer::stop()>
c00134e3:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00134e9:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c00134ee:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c00134f6:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00134fa:	c7 44 24 14 65 34 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013465
c0013502:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013506:	5b                   	pop    ebx
c0013507:	5e                   	pop    esi
c0013508:	5f                   	pop    edi
c0013509:	e9 1e 92 00 00       	jmp    c001c72c <Process::createThread(void (*)(void*), void*, int)>

c001350e <loadClockSettings()>:
c001350e:	c7 05 94 c3 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002c394,0xa
c0013518:	c6 05 91 c3 02 c0 00 	mov    BYTE PTR ds:0xc002c391,0x0
c001351f:	c6 05 90 c3 02 c0 01 	mov    BYTE PTR ds:0xc002c390,0x1
c0013526:	c3                   	ret    
c0013527:	90                   	nop

c0013528 <Clock::Clock(char const*)>:
c0013528:	83 ec 0c             	sub    esp,0xc
c001352b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001352f:	83 ec 08             	sub    esp,0x8
c0013532:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013536:	50                   	push   eax
c0013537:	e8 44 07 00 00       	call   c0013c80 <Device::Device(char const*)>
c001353c:	83 c4 10             	add    esp,0x10
c001353f:	ba e4 8c 02 c0       	mov    edx,0xc0028ce4
c0013544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013548:	89 10                	mov    DWORD PTR [eax],edx
c001354a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001354e:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013558:	90                   	nop
c0013559:	83 c4 0c             	add    esp,0xc
c001355c:	c3                   	ret    
c001355d:	90                   	nop

c001355e <Clock::~Clock()>:
c001355e:	83 ec 0c             	sub    esp,0xc
c0013561:	ba e4 8c 02 c0       	mov    edx,0xc0028ce4
c0013566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001356a:	89 10                	mov    DWORD PTR [eax],edx
c001356c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013570:	83 ec 0c             	sub    esp,0xc
c0013573:	50                   	push   eax
c0013574:	e8 e9 03 00 00       	call   c0013962 <Device::~Device()>
c0013579:	83 c4 10             	add    esp,0x10
c001357c:	90                   	nop
c001357d:	83 c4 0c             	add    esp,0xc
c0013580:	c3                   	ret    
c0013581:	90                   	nop

c0013582 <Clock::~Clock()>:
c0013582:	83 ec 0c             	sub    esp,0xc
c0013585:	83 ec 0c             	sub    esp,0xc
c0013588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001358c:	e8 cd ff ff ff       	call   c001355e <Clock::~Clock()>
c0013591:	83 c4 10             	add    esp,0x10
c0013594:	83 ec 08             	sub    esp,0x8
c0013597:	68 58 01 00 00       	push   0x158
c001359c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135a0:	e8 1c f0 ff ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c00135a5:	83 c4 10             	add    esp,0x10
c00135a8:	83 c4 0c             	add    esp,0xc
c00135ab:	c3                   	ret    

c00135ac <Clock::timeInSecondsLocal()>:
c00135ac:	53                   	push   ebx
c00135ad:	83 ec 14             	sub    esp,0x14
c00135b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135b4:	8b 10                	mov    edx,DWORD PTR [eax]
c00135b6:	50                   	push   eax
c00135b7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00135ba:	0f b6 0d 90 c3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002c390
c00135c1:	03 0d 94 c3 02 c0    	add    ecx,DWORD PTR ds:0xc002c394
c00135c7:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00135cd:	89 cb                	mov    ebx,ecx
c00135cf:	c1 fb 1f             	sar    ebx,0x1f
c00135d2:	01 c8                	add    eax,ecx
c00135d4:	11 da                	adc    edx,ebx
c00135d6:	83 c4 10             	add    esp,0x10
c00135d9:	31 c9                	xor    ecx,ecx
c00135db:	80 3d 91 c3 02 c0 00 	cmp    BYTE PTR ds:0xc002c391,0x0
c00135e2:	74 05                	je     c00135e9 <Clock::timeInSecondsLocal()+0x3d>
c00135e4:	b9 08 07 00 00       	mov    ecx,0x708
c00135e9:	31 db                	xor    ebx,ebx
c00135eb:	01 c8                	add    eax,ecx
c00135ed:	11 da                	adc    edx,ebx
c00135ef:	83 c4 08             	add    esp,0x8
c00135f2:	5b                   	pop    ebx
c00135f3:	c3                   	ret    

c00135f4 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00135f4:	57                   	push   edi
c00135f5:	56                   	push   esi
c00135f6:	53                   	push   ebx
c00135f7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00135fb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00135ff:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013601:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013605:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013608:	0f b6 05 90 c3 02 c0 	movzx  eax,BYTE PTR ds:0xc002c390
c001360f:	03 05 94 c3 02 c0    	add    eax,DWORD PTR ds:0xc002c394
c0013615:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001361b:	99                   	cdq    
c001361c:	29 c6                	sub    esi,eax
c001361e:	19 d7                	sbb    edi,edx
c0013620:	89 f0                	mov    eax,esi
c0013622:	89 fa                	mov    edx,edi
c0013624:	31 f6                	xor    esi,esi
c0013626:	80 3d 91 c3 02 c0 00 	cmp    BYTE PTR ds:0xc002c391,0x0
c001362d:	74 05                	je     c0013634 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001362f:	be 08 07 00 00       	mov    esi,0x708
c0013634:	31 ff                	xor    edi,edi
c0013636:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001363a:	29 f0                	sub    eax,esi
c001363c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013640:	19 fa                	sbb    edx,edi
c0013642:	89 d8                	mov    eax,ebx
c0013644:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013648:	5b                   	pop    ebx
c0013649:	5e                   	pop    esi
c001364a:	5f                   	pop    edi
c001364b:	ff e0                	jmp    eax

c001364d <datetimeToSeconds(datetime_t)>:
c001364d:	55                   	push   ebp
c001364e:	57                   	push   edi
c001364f:	56                   	push   esi
c0013650:	53                   	push   ebx
c0013651:	83 ec 14             	sub    esp,0x14
c0013654:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013658:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001365c:	89 d3                	mov    ebx,edx
c001365e:	0f b6 c6             	movzx  eax,dh
c0013661:	c1 eb 10             	shr    ebx,0x10
c0013664:	48                   	dec    eax
c0013665:	66 81 eb 6c 07       	sub    bx,0x76c
c001366a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001366e:	0f b6 f5             	movzx  esi,ch
c0013671:	89 cf                	mov    edi,ecx
c0013673:	6b f6 3c             	imul   esi,esi,0x3c
c0013676:	c1 ef 10             	shr    edi,0x10
c0013679:	0f b6 c9             	movzx  ecx,cl
c001367c:	89 f8                	mov    eax,edi
c001367e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013684:	0f b6 f8             	movzx  edi,al
c0013687:	0f b6 d2             	movzx  edx,dl
c001368a:	01 fe                	add    esi,edi
c001368c:	01 f1                	add    ecx,esi
c001368e:	0f b7 f3             	movzx  esi,bx
c0013691:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013695:	c1 f9 1f             	sar    ecx,0x1f
c0013698:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001369d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00136a1:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00136a6:	8b 0c 8d 20 8d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd72e0]
c00136ad:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c00136b1:	76 29                	jbe    c00136dc <datetimeToSeconds(datetime_t)+0x8f>
c00136b3:	f6 c3 03             	test   bl,0x3
c00136b6:	75 24                	jne    c00136dc <datetimeToSeconds(datetime_t)+0x8f>
c00136b8:	31 d2                	xor    edx,edx
c00136ba:	bf 64 00 00 00       	mov    edi,0x64
c00136bf:	89 d8                	mov    eax,ebx
c00136c1:	66 f7 f7             	div    di
c00136c4:	66 85 d2             	test   dx,dx
c00136c7:	75 12                	jne    c00136db <datetimeToSeconds(datetime_t)+0x8e>
c00136c9:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c00136cf:	bf 90 01 00 00       	mov    edi,0x190
c00136d4:	99                   	cdq    
c00136d5:	f7 ff                	idiv   edi
c00136d7:	85 d2                	test   edx,edx
c00136d9:	75 01                	jne    c00136dc <datetimeToSeconds(datetime_t)+0x8f>
c00136db:	41                   	inc    ecx
c00136dc:	66 83 fb 46          	cmp    bx,0x46
c00136e0:	76 45                	jbe    c0013727 <datetimeToSeconds(datetime_t)+0xda>
c00136e2:	bb 46 00 00 00       	mov    ebx,0x46
c00136e7:	bf 64 00 00 00       	mov    edi,0x64
c00136ec:	bd 90 01 00 00       	mov    ebp,0x190
c00136f1:	b8 6d 01 00 00       	mov    eax,0x16d
c00136f6:	f6 c3 03             	test   bl,0x3
c00136f9:	75 23                	jne    c001371e <datetimeToSeconds(datetime_t)+0xd1>
c00136fb:	89 d8                	mov    eax,ebx
c00136fd:	99                   	cdq    
c00136fe:	f7 ff                	idiv   edi
c0013700:	b8 6e 01 00 00       	mov    eax,0x16e
c0013705:	85 d2                	test   edx,edx
c0013707:	75 15                	jne    c001371e <datetimeToSeconds(datetime_t)+0xd1>
c0013709:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001370f:	99                   	cdq    
c0013710:	f7 fd                	idiv   ebp
c0013712:	83 fa 01             	cmp    edx,0x1
c0013715:	19 c0                	sbb    eax,eax
c0013717:	f7 d0                	not    eax
c0013719:	05 6e 01 00 00       	add    eax,0x16e
c001371e:	01 c1                	add    ecx,eax
c0013720:	43                   	inc    ebx
c0013721:	39 f3                	cmp    ebx,esi
c0013723:	7c cc                	jl     c00136f1 <datetimeToSeconds(datetime_t)+0xa4>
c0013725:	eb 35                	jmp    c001375c <datetimeToSeconds(datetime_t)+0x10f>
c0013727:	74 33                	je     c001375c <datetimeToSeconds(datetime_t)+0x10f>
c0013729:	b8 45 00 00 00       	mov    eax,0x45
c001372e:	89 c2                	mov    edx,eax
c0013730:	83 e2 03             	and    edx,0x3
c0013733:	39 f0                	cmp    eax,esi
c0013735:	7e 0f                	jle    c0013746 <datetimeToSeconds(datetime_t)+0xf9>
c0013737:	83 fa 01             	cmp    edx,0x1
c001373a:	19 d2                	sbb    edx,edx
c001373c:	48                   	dec    eax
c001373d:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013744:	eb e8                	jmp    c001372e <datetimeToSeconds(datetime_t)+0xe1>
c0013746:	b8 6d 01 00 00       	mov    eax,0x16d
c001374b:	85 d2                	test   edx,edx
c001374d:	75 0b                	jne    c001375a <datetimeToSeconds(datetime_t)+0x10d>
c001374f:	66 83 fb 01          	cmp    bx,0x1
c0013753:	19 c0                	sbb    eax,eax
c0013755:	05 6e 01 00 00       	add    eax,0x16e
c001375a:	29 c1                	sub    ecx,eax
c001375c:	b8 80 51 01 00       	mov    eax,0x15180
c0013761:	f7 e9                	imul   ecx
c0013763:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013767:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001376b:	83 c4 14             	add    esp,0x14
c001376e:	5b                   	pop    ebx
c001376f:	5e                   	pop    esi
c0013770:	5f                   	pop    edi
c0013771:	5d                   	pop    ebp
c0013772:	c3                   	ret    
c0013773:	90                   	nop

c0013774 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013774:	57                   	push   edi
c0013775:	56                   	push   esi
c0013776:	53                   	push   ebx
c0013777:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001377b:	8b 06                	mov    eax,DWORD PTR [esi]
c001377d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013780:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013784:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013788:	e8 c0 fe ff ff       	call   c001364d <datetimeToSeconds(datetime_t)>
c001378d:	59                   	pop    ecx
c001378e:	0f b6 0d 90 c3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002c390
c0013795:	5b                   	pop    ebx
c0013796:	03 0d 94 c3 02 c0    	add    ecx,DWORD PTR ds:0xc002c394
c001379c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00137a2:	89 cb                	mov    ebx,ecx
c00137a4:	c1 fb 1f             	sar    ebx,0x1f
c00137a7:	29 c8                	sub    eax,ecx
c00137a9:	19 da                	sbb    edx,ebx
c00137ab:	31 c9                	xor    ecx,ecx
c00137ad:	80 3d 91 c3 02 c0 00 	cmp    BYTE PTR ds:0xc002c391,0x0
c00137b4:	74 05                	je     c00137bb <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00137b6:	b9 08 07 00 00       	mov    ecx,0x708
c00137bb:	31 db                	xor    ebx,ebx
c00137bd:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00137c1:	29 c8                	sub    eax,ecx
c00137c3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00137c7:	19 da                	sbb    edx,ebx
c00137c9:	89 f8                	mov    eax,edi
c00137cb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00137cf:	5b                   	pop    ebx
c00137d0:	5e                   	pop    esi
c00137d1:	5f                   	pop    edi
c00137d2:	ff e0                	jmp    eax

c00137d4 <secondsToDatetime(unsigned long long)>:
c00137d4:	55                   	push   ebp
c00137d5:	57                   	push   edi
c00137d6:	56                   	push   esi
c00137d7:	53                   	push   ebx
c00137d8:	83 ec 1c             	sub    esp,0x1c
c00137db:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00137df:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00137e3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00137e7:	6a 00                	push   0x0
c00137e9:	68 80 51 01 00       	push   0x15180
c00137ee:	55                   	push   ebp
c00137ef:	57                   	push   edi
c00137f0:	e8 87 14 01 00       	call   c0024c7c <__udivdi3>
c00137f5:	83 c4 10             	add    esp,0x10
c00137f8:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00137fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013802:	6a 00                	push   0x0
c0013804:	68 80 51 01 00       	push   0x15180
c0013809:	55                   	push   ebp
c001380a:	57                   	push   edi
c001380b:	bf 10 0e 00 00       	mov    edi,0xe10
c0013810:	e8 67 15 01 00       	call   c0024d7c <__umoddi3>
c0013815:	83 c4 10             	add    esp,0x10
c0013818:	99                   	cdq    
c0013819:	f7 ff                	idiv   edi
c001381b:	bf 3c 00 00 00       	mov    edi,0x3c
c0013820:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013823:	89 d0                	mov    eax,edx
c0013825:	99                   	cdq    
c0013826:	f7 ff                	idiv   edi
c0013828:	85 db                	test   ebx,ebx
c001382a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001382d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013830:	79 11                	jns    c0013843 <secondsToDatetime(unsigned long long)+0x6f>
c0013832:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013836:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001383c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013841:	eb 07                	jmp    c001384a <secondsToDatetime(unsigned long long)+0x76>
c0013843:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013848:	89 d8                	mov    eax,ebx
c001384a:	bf b4 05 00 00       	mov    edi,0x5b4
c001384f:	99                   	cdq    
c0013850:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013855:	f7 f9                	idiv   ecx
c0013857:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001385c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013860:	31 d2                	xor    edx,edx
c0013862:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001386a:	01 c3                	add    ebx,eax
c001386c:	89 d8                	mov    eax,ebx
c001386e:	f7 f1                	div    ecx
c0013870:	31 d2                	xor    edx,edx
c0013872:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013875:	89 d8                	mov    eax,ebx
c0013877:	f7 f7                	div    edi
c0013879:	31 d2                	xor    edx,edx
c001387b:	29 c1                	sub    ecx,eax
c001387d:	89 d8                	mov    eax,ebx
c001387f:	f7 f5                	div    ebp
c0013881:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013886:	29 c1                	sub    ecx,eax
c0013888:	31 d2                	xor    edx,edx
c001388a:	89 c8                	mov    eax,ecx
c001388c:	f7 f5                	div    ebp
c001388e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013893:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013897:	31 d2                	xor    edx,edx
c0013899:	89 c8                	mov    eax,ecx
c001389b:	f7 f5                	div    ebp
c001389d:	31 d2                	xor    edx,edx
c001389f:	01 c3                	add    ebx,eax
c00138a1:	89 c8                	mov    eax,ecx
c00138a3:	f7 f7                	div    edi
c00138a5:	bf 99 00 00 00       	mov    edi,0x99
c00138aa:	29 c3                	sub    ebx,eax
c00138ac:	31 d2                	xor    edx,edx
c00138ae:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00138b6:	29 c3                	sub    ebx,eax
c00138b8:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00138bb:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00138be:	bb 05 00 00 00       	mov    ebx,0x5
c00138c3:	83 c1 02             	add    ecx,0x2
c00138c6:	89 c8                	mov    eax,ecx
c00138c8:	f7 f7                	div    edi
c00138ca:	31 d2                	xor    edx,edx
c00138cc:	89 c7                	mov    edi,eax
c00138ce:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00138d4:	83 c0 02             	add    eax,0x2
c00138d7:	f7 f3                	div    ebx
c00138d9:	89 eb                	mov    ebx,ebp
c00138db:	29 c3                	sub    ebx,eax
c00138dd:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00138e3:	88 1e                	mov    BYTE PTR [esi],bl
c00138e5:	19 c0                	sbb    eax,eax
c00138e7:	31 d2                	xor    edx,edx
c00138e9:	83 e0 0c             	and    eax,0xc
c00138ec:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00138f0:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00138f8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00138fc:	83 f9 01             	cmp    ecx,0x1
c00138ff:	0f 96 c2             	setbe  dl
c0013902:	41                   	inc    ecx
c0013903:	01 d0                	add    eax,edx
c0013905:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013908:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001390c:	83 c4 1c             	add    esp,0x1c
c001390f:	89 f0                	mov    eax,esi
c0013911:	5b                   	pop    ebx
c0013912:	5e                   	pop    esi
c0013913:	5f                   	pop    edi
c0013914:	5d                   	pop    ebp
c0013915:	c2 04 00             	ret    0x4

c0013918 <Clock::timeInDatetimeLocal()>:
c0013918:	53                   	push   ebx
c0013919:	83 ec 14             	sub    esp,0x14
c001391c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013920:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013924:	e8 83 fc ff ff       	call   c00135ac <Clock::timeInSecondsLocal()>
c0013929:	83 c4 0c             	add    esp,0xc
c001392c:	52                   	push   edx
c001392d:	50                   	push   eax
c001392e:	53                   	push   ebx
c001392f:	e8 a0 fe ff ff       	call   c00137d4 <secondsToDatetime(unsigned long long)>
c0013934:	89 d8                	mov    eax,ebx
c0013936:	83 c4 14             	add    esp,0x14
c0013939:	5b                   	pop    ebx
c001393a:	c2 04 00             	ret    0x4
c001393d:	90                   	nop

c001393e <Device::hibernate()>:
c001393e:	c3                   	ret    
c001393f:	90                   	nop

c0013940 <Device::wake()>:
c0013940:	c3                   	ret    
c0013941:	90                   	nop

c0013942 <Device::detect()>:
c0013942:	c3                   	ret    
c0013943:	90                   	nop

c0013944 <Device::disableLegacy()>:
c0013944:	c3                   	ret    
c0013945:	90                   	nop

c0013946 <Device::powerSaving(PowerSavingLevel)>:
c0013946:	c3                   	ret    
c0013947:	90                   	nop

c0013948 <DriverlessDevice::close(int, int, void*)>:
c0013948:	31 c0                	xor    eax,eax
c001394a:	c3                   	ret    
c001394b:	90                   	nop

c001394c <DriverlessDevice::detect()>:
c001394c:	c3                   	ret    
c001394d:	90                   	nop

c001394e <DriverlessDevice::open(int, int, void*)>:
c001394e:	83 ec 18             	sub    esp,0x18
c0013951:	68 50 8d 02 c0       	push   0xc0028d50
c0013956:	e8 21 5c 00 00       	call   c001957c <Krnl::panic(char const*)>
c001395b:	83 c8 ff             	or     eax,0xffffffff
c001395e:	83 c4 1c             	add    esp,0x1c
c0013961:	c3                   	ret    

c0013962 <Device::~Device()>:
c0013962:	ba 78 8d 02 c0       	mov    edx,0xc0028d78
c0013967:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001396b:	89 10                	mov    DWORD PTR [eax],edx
c001396d:	90                   	nop
c001396e:	c3                   	ret    
c001396f:	90                   	nop

c0013970 <Device::~Device()>:
c0013970:	83 ec 0c             	sub    esp,0xc
c0013973:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013977:	e8 e6 ff ff ff       	call   c0013962 <Device::~Device()>
c001397c:	83 c4 04             	add    esp,0x4
c001397f:	83 ec 08             	sub    esp,0x8
c0013982:	68 58 01 00 00       	push   0x158
c0013987:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001398b:	e8 31 ec ff ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c0013990:	83 c4 10             	add    esp,0x10
c0013993:	83 c4 0c             	add    esp,0xc
c0013996:	c3                   	ret    
c0013997:	90                   	nop

c0013998 <Device::findAndLoadDriver()>:
c0013998:	c3                   	ret    
c0013999:	90                   	nop

c001399a <Device::preOpenPCI(PCIDeviceInfo)>:
c001399a:	57                   	push   edi
c001399b:	b9 09 00 00 00       	mov    ecx,0x9
c00139a0:	56                   	push   esi
c00139a1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00139a5:	8d 74 24 10          	lea    esi,[esp+0x10]
c00139a9:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00139b3:	81 c7 18 01 00 00    	add    edi,0x118
c00139b9:	fc                   	cld    
c00139ba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00139bc:	5e                   	pop    esi
c00139bd:	5f                   	pop    edi
c00139be:	c3                   	ret    
c00139bf:	90                   	nop

c00139c0 <Device::preOpenACPI(void*, char*, char*)>:
c00139c0:	56                   	push   esi
c00139c1:	53                   	push   ebx
c00139c2:	83 ec 08             	sub    esp,0x8
c00139c5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00139c9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00139cd:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c00139d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00139db:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00139e1:	6a 1e                	push   0x1e
c00139e3:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00139e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00139ed:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00139f3:	50                   	push   eax
c00139f4:	e8 5c cc fe ff       	call   c0000655 <memcpy>
c00139f9:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00139fd:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013a01:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013a09:	83 c4 14             	add    esp,0x14
c0013a0c:	5b                   	pop    ebx
c0013a0d:	5e                   	pop    esi
c0013a0e:	e9 42 cc fe ff       	jmp    c0000655 <memcpy>
c0013a13:	90                   	nop

c0013a14 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a18:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013a1d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013a24:	75 0b                	jne    c0013a31 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013a26:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a28:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a2c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013a2f:	eb 1e                	jmp    c0013a4f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013a31:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c0013a36:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013a3c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013a42:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013a4c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013a4f:	ff e0                	jmp    eax
c0013a51:	90                   	nop

c0013a52 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013a52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a56:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013a5b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013a62:	75 0b                	jne    c0013a6f <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013a64:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a66:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a6a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013a6d:	eb 1e                	jmp    c0013a8d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013a6f:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c0013a74:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013a7a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013a80:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a82:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013a8a:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013a8d:	ff e0                	jmp    eax
c0013a8f:	90                   	nop

c0013a90 <Device::addChild(Device*)>:
c0013a90:	53                   	push   ebx
c0013a91:	83 ec 08             	sub    esp,0x8
c0013a94:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a98:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a9c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013aa2:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013aa8:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013aaa:	85 d2                	test   edx,edx
c0013aac:	74 04                	je     c0013ab2 <Device::addChild(Device*)+0x22>
c0013aae:	89 d3                	mov    ebx,edx
c0013ab0:	eb f6                	jmp    c0013aa8 <Device::addChild(Device*)+0x18>
c0013ab2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013ab5:	83 ec 0c             	sub    esp,0xc
c0013ab8:	6a 08                	push   0x8
c0013aba:	e8 15 ba ff ff       	call   c000f4d4 <malloc>
c0013abf:	89 03                	mov    DWORD PTR [ebx],eax
c0013ac1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013ac7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013ace:	83 c4 18             	add    esp,0x18
c0013ad1:	5b                   	pop    ebx
c0013ad2:	c3                   	ret    
c0013ad3:	90                   	nop

c0013ad4 <Device::removeAllChildren()>:
c0013ad4:	56                   	push   esi
c0013ad5:	53                   	push   ebx
c0013ad6:	52                   	push   edx
c0013ad7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013adb:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013ae1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ae4:	74 17                	je     c0013afd <Device::removeAllChildren()+0x29>
c0013ae6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013ae9:	85 c0                	test   eax,eax
c0013aeb:	74 0c                	je     c0013af9 <Device::removeAllChildren()+0x25>
c0013aed:	83 ec 0c             	sub    esp,0xc
c0013af0:	8b 10                	mov    edx,DWORD PTR [eax]
c0013af2:	50                   	push   eax
c0013af3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013af6:	83 c4 10             	add    esp,0x10
c0013af9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013afb:	eb e4                	jmp    c0013ae1 <Device::removeAllChildren()+0xd>
c0013afd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013b03:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b09:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013b0f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b16:	58                   	pop    eax
c0013b17:	5b                   	pop    ebx
c0013b18:	5e                   	pop    esi
c0013b19:	c3                   	ret    

c0013b1a <Device::hibernateAll()>:
c0013b1a:	53                   	push   ebx
c0013b1b:	83 ec 14             	sub    esp,0x14
c0013b1e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b24:	53                   	push   ebx
c0013b25:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013b28:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b2e:	83 c4 10             	add    esp,0x10
c0013b31:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b34:	74 0f                	je     c0013b45 <Device::hibernateAll()+0x2b>
c0013b36:	83 ec 0c             	sub    esp,0xc
c0013b39:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b3c:	e8 d9 ff ff ff       	call   c0013b1a <Device::hibernateAll()>
c0013b41:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b43:	eb e9                	jmp    c0013b2e <Device::hibernateAll()+0x14>
c0013b45:	83 c4 08             	add    esp,0x8
c0013b48:	5b                   	pop    ebx
c0013b49:	c3                   	ret    

c0013b4a <Device::wakeAll()>:
c0013b4a:	53                   	push   ebx
c0013b4b:	83 ec 14             	sub    esp,0x14
c0013b4e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b54:	53                   	push   ebx
c0013b55:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013b58:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b5e:	83 c4 10             	add    esp,0x10
c0013b61:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b64:	74 0f                	je     c0013b75 <Device::wakeAll()+0x2b>
c0013b66:	83 ec 0c             	sub    esp,0xc
c0013b69:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b6c:	e8 d9 ff ff ff       	call   c0013b4a <Device::wakeAll()>
c0013b71:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b73:	eb e9                	jmp    c0013b5e <Device::wakeAll()+0x14>
c0013b75:	83 c4 08             	add    esp,0x8
c0013b78:	5b                   	pop    ebx
c0013b79:	c3                   	ret    

c0013b7a <Device::detectAll()>:
c0013b7a:	53                   	push   ebx
c0013b7b:	83 ec 14             	sub    esp,0x14
c0013b7e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b82:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b84:	53                   	push   ebx
c0013b85:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013b88:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b8e:	83 c4 10             	add    esp,0x10
c0013b91:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b94:	74 0f                	je     c0013ba5 <Device::detectAll()+0x2b>
c0013b96:	83 ec 0c             	sub    esp,0xc
c0013b99:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b9c:	e8 d9 ff ff ff       	call   c0013b7a <Device::detectAll()>
c0013ba1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ba3:	eb e9                	jmp    c0013b8e <Device::detectAll()+0x14>
c0013ba5:	83 c4 08             	add    esp,0x8
c0013ba8:	5b                   	pop    ebx
c0013ba9:	c3                   	ret    

c0013baa <Device::disableLegacyAll()>:
c0013baa:	53                   	push   ebx
c0013bab:	83 ec 14             	sub    esp,0x14
c0013bae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bb2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bb4:	53                   	push   ebx
c0013bb5:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013bb8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bbe:	83 c4 10             	add    esp,0x10
c0013bc1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bc4:	74 0f                	je     c0013bd5 <Device::disableLegacyAll()+0x2b>
c0013bc6:	83 ec 0c             	sub    esp,0xc
c0013bc9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bcc:	e8 d9 ff ff ff       	call   c0013baa <Device::disableLegacyAll()>
c0013bd1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bd3:	eb e9                	jmp    c0013bbe <Device::disableLegacyAll()+0x14>
c0013bd5:	83 c4 08             	add    esp,0x8
c0013bd8:	5b                   	pop    ebx
c0013bd9:	c3                   	ret    

c0013bda <Device::loadDriversForAll()>:
c0013bda:	53                   	push   ebx
c0013bdb:	83 ec 08             	sub    esp,0x8
c0013bde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013be2:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013be8:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013bea:	85 db                	test   ebx,ebx
c0013bec:	74 12                	je     c0013c00 <Device::loadDriversForAll()+0x26>
c0013bee:	83 ec 0c             	sub    esp,0xc
c0013bf1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013bf4:	e8 e1 ff ff ff       	call   c0013bda <Device::loadDriversForAll()>
c0013bf9:	83 c4 10             	add    esp,0x10
c0013bfc:	89 d8                	mov    eax,ebx
c0013bfe:	eb e8                	jmp    c0013be8 <Device::loadDriversForAll()+0xe>
c0013c00:	83 c4 08             	add    esp,0x8
c0013c03:	5b                   	pop    ebx
c0013c04:	c3                   	ret    
c0013c05:	90                   	nop

c0013c06 <Device::closeAll()>:
c0013c06:	53                   	push   ebx
c0013c07:	83 ec 08             	sub    esp,0x8
c0013c0a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c10:	6a 00                	push   0x0
c0013c12:	6a 00                	push   0x0
c0013c14:	6a 00                	push   0x0
c0013c16:	53                   	push   ebx
c0013c17:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c1a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c20:	83 c4 10             	add    esp,0x10
c0013c23:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c26:	74 0f                	je     c0013c37 <Device::closeAll()+0x31>
c0013c28:	83 ec 0c             	sub    esp,0xc
c0013c2b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c2e:	e8 d3 ff ff ff       	call   c0013c06 <Device::closeAll()>
c0013c33:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c35:	eb e9                	jmp    c0013c20 <Device::closeAll()+0x1a>
c0013c37:	83 c4 08             	add    esp,0x8
c0013c3a:	5b                   	pop    ebx
c0013c3b:	c3                   	ret    

c0013c3c <Device::powerSavingAll(PowerSavingLevel)>:
c0013c3c:	56                   	push   esi
c0013c3d:	53                   	push   ebx
c0013c3e:	83 ec 0c             	sub    esp,0xc
c0013c41:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c45:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013c49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c4b:	56                   	push   esi
c0013c4c:	53                   	push   ebx
c0013c4d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013c50:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c56:	83 c4 10             	add    esp,0x10
c0013c59:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c5c:	74 0f                	je     c0013c6d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013c5e:	52                   	push   edx
c0013c5f:	52                   	push   edx
c0013c60:	56                   	push   esi
c0013c61:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c64:	e8 d3 ff ff ff       	call   c0013c3c <Device::powerSavingAll(PowerSavingLevel)>
c0013c69:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c6b:	eb e9                	jmp    c0013c56 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013c6d:	58                   	pop    eax
c0013c6e:	5b                   	pop    ebx
c0013c6f:	5e                   	pop    esi
c0013c70:	c3                   	ret    
c0013c71:	90                   	nop

c0013c72 <Device::setName(char const*)>:
c0013c72:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013c7a:	e9 ab ca fe ff       	jmp    c000072a <strcpy>
c0013c7f:	90                   	nop

c0013c80 <Device::Device(char const*)>:
c0013c80:	83 ec 1c             	sub    esp,0x1c
c0013c83:	ba 78 8d 02 c0       	mov    edx,0xc0028d78
c0013c88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c8c:	89 10                	mov    DWORD PTR [eax],edx
c0013c8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c92:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013c9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ca0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cae:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013cb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cbc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013cc6:	83 ec 08             	sub    esp,0x8
c0013cc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ccd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013cd1:	e8 9c ff ff ff       	call   c0013c72 <Device::setName(char const*)>
c0013cd6:	83 c4 10             	add    esp,0x10
c0013cd9:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013ce1:	83 ec 0c             	sub    esp,0xc
c0013ce4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ce8:	e8 e7 b7 ff ff       	call   c000f4d4 <malloc>
c0013ced:	83 c4 10             	add    esp,0x10
c0013cf0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013cf6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013cfd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013d01:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013d07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d0b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013d11:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d1b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013d21:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d2c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013d33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d37:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013d3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d42:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013d4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d50:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013d5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d5e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013d68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d6c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013d76:	90                   	nop
c0013d77:	83 c4 1c             	add    esp,0x1c
c0013d7a:	c3                   	ret    
c0013d7b:	90                   	nop

c0013d7c <Device::getName()>:
c0013d7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d80:	05 d0 00 00 00       	add    eax,0xd0
c0013d85:	c3                   	ret    

c0013d86 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013d86:	83 ec 0c             	sub    esp,0xc
c0013d89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d8d:	83 ec 08             	sub    esp,0x8
c0013d90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d94:	50                   	push   eax
c0013d95:	e8 e6 fe ff ff       	call   c0013c80 <Device::Device(char const*)>
c0013d9a:	83 c4 10             	add    esp,0x10
c0013d9d:	ba a4 8d 02 c0       	mov    edx,0xc0028da4
c0013da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013da6:	89 10                	mov    DWORD PTR [eax],edx
c0013da8:	90                   	nop
c0013da9:	83 c4 0c             	add    esp,0xc
c0013dac:	c3                   	ret    
c0013dad:	90                   	nop

c0013dae <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013dae:	57                   	push   edi
c0013daf:	56                   	push   esi
c0013db0:	53                   	push   ebx
c0013db1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013db5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013db9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013dbd:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013dc3:	75 0c                	jne    c0013dd1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013dc5:	52                   	push   edx
c0013dc6:	52                   	push   edx
c0013dc7:	53                   	push   ebx
c0013dc8:	56                   	push   esi
c0013dc9:	e8 ec 2d 01 00       	call   c0026bba <LinkedList<Device>::addElement(Device*)>
c0013dce:	83 c4 10             	add    esp,0x10
c0013dd1:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013dd7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dda:	74 12                	je     c0013dee <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013ddc:	50                   	push   eax
c0013ddd:	57                   	push   edi
c0013dde:	56                   	push   esi
c0013ddf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013de2:	e8 c7 ff ff ff       	call   c0013dae <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013de7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013de9:	83 c4 10             	add    esp,0x10
c0013dec:	eb e9                	jmp    c0013dd7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013dee:	5b                   	pop    ebx
c0013def:	5e                   	pop    esi
c0013df0:	5f                   	pop    edi
c0013df1:	c3                   	ret    

c0013df2 <getDevicesOfType(DeviceType)>:
c0013df2:	53                   	push   ebx
c0013df3:	83 ec 14             	sub    esp,0x14
c0013df6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dfa:	53                   	push   ebx
c0013dfb:	e8 96 2e 01 00       	call   c0026c96 <LinkedList<Device>::LinkedList()>
c0013e00:	83 c4 0c             	add    esp,0xc
c0013e03:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e07:	53                   	push   ebx
c0013e08:	ff 35 28 c2 02 c0    	push   DWORD PTR ds:0xc002c228
c0013e0e:	e8 9b ff ff ff       	call   c0013dae <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013e13:	89 d8                	mov    eax,ebx
c0013e15:	83 c4 18             	add    esp,0x18
c0013e18:	5b                   	pop    ebx
c0013e19:	c2 04 00             	ret    0x4

c0013e1c <HardDiskController::HardDiskController(char const*)>:
c0013e1c:	83 ec 0c             	sub    esp,0xc
c0013e1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e23:	83 ec 08             	sub    esp,0x8
c0013e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e2a:	50                   	push   eax
c0013e2b:	e8 50 fe ff ff       	call   c0013c80 <Device::Device(char const*)>
c0013e30:	83 c4 10             	add    esp,0x10
c0013e33:	ba d0 8d 02 c0       	mov    edx,0xc0028dd0
c0013e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e3c:	89 10                	mov    DWORD PTR [eax],edx
c0013e3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e42:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013e4c:	90                   	nop
c0013e4d:	83 c4 0c             	add    esp,0xc
c0013e50:	c3                   	ret    
c0013e51:	90                   	nop

c0013e52 <HardDiskController::~HardDiskController()>:
c0013e52:	83 ec 0c             	sub    esp,0xc
c0013e55:	ba d0 8d 02 c0       	mov    edx,0xc0028dd0
c0013e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e5e:	89 10                	mov    DWORD PTR [eax],edx
c0013e60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e64:	83 ec 0c             	sub    esp,0xc
c0013e67:	50                   	push   eax
c0013e68:	e8 f5 fa ff ff       	call   c0013962 <Device::~Device()>
c0013e6d:	83 c4 10             	add    esp,0x10
c0013e70:	90                   	nop
c0013e71:	83 c4 0c             	add    esp,0xc
c0013e74:	c3                   	ret    
c0013e75:	90                   	nop

c0013e76 <HardDiskController::~HardDiskController()>:
c0013e76:	83 ec 0c             	sub    esp,0xc
c0013e79:	83 ec 0c             	sub    esp,0xc
c0013e7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e80:	e8 cd ff ff ff       	call   c0013e52 <HardDiskController::~HardDiskController()>
c0013e85:	83 c4 10             	add    esp,0x10
c0013e88:	83 ec 08             	sub    esp,0x8
c0013e8b:	68 58 01 00 00       	push   0x158
c0013e90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e94:	e8 28 e7 ff ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c0013e99:	83 c4 10             	add    esp,0x10
c0013e9c:	83 c4 0c             	add    esp,0xc
c0013e9f:	c3                   	ret    

c0013ea0 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013ea0:	83 ec 0c             	sub    esp,0xc
c0013ea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ea7:	83 ec 08             	sub    esp,0x8
c0013eaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013eae:	50                   	push   eax
c0013eaf:	e8 cc fd ff ff       	call   c0013c80 <Device::Device(char const*)>
c0013eb4:	83 c4 10             	add    esp,0x10
c0013eb7:	ba fc 8d 02 c0       	mov    edx,0xc0028dfc
c0013ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ec0:	89 10                	mov    DWORD PTR [eax],edx
c0013ec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ec6:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013ecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ed1:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013ed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013edc:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013ee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eea:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013eee:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013ef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ef8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013f02:	90                   	nop
c0013f03:	83 c4 0c             	add    esp,0xc
c0013f06:	c3                   	ret    
c0013f07:	90                   	nop

c0013f08 <PhysicalDisk::startCache()>:
c0013f08:	56                   	push   esi
c0013f09:	53                   	push   ebx
c0013f0a:	83 ec 10             	sub    esp,0x10
c0013f0d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f11:	6a 30                	push   0x30
c0013f13:	e8 bc b5 ff ff       	call   c000f4d4 <malloc>
c0013f18:	89 c6                	mov    esi,eax
c0013f1a:	58                   	pop    eax
c0013f1b:	5a                   	pop    edx
c0013f1c:	53                   	push   ebx
c0013f1d:	56                   	push   esi
c0013f1e:	e8 dd 25 00 00       	call   c0016500 <VCache::VCache(PhysicalDisk*)>
c0013f23:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013f29:	83 c4 14             	add    esp,0x14
c0013f2c:	5b                   	pop    ebx
c0013f2d:	5e                   	pop    esi
c0013f2e:	c3                   	ret    
c0013f2f:	90                   	nop

c0013f30 <PhysicalDisk::~PhysicalDisk()>:
c0013f30:	83 ec 0c             	sub    esp,0xc
c0013f33:	ba fc 8d 02 c0       	mov    edx,0xc0028dfc
c0013f38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f3c:	89 10                	mov    DWORD PTR [eax],edx
c0013f3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f42:	83 ec 0c             	sub    esp,0xc
c0013f45:	50                   	push   eax
c0013f46:	e8 17 fa ff ff       	call   c0013962 <Device::~Device()>
c0013f4b:	83 c4 10             	add    esp,0x10
c0013f4e:	90                   	nop
c0013f4f:	83 c4 0c             	add    esp,0xc
c0013f52:	c3                   	ret    
c0013f53:	90                   	nop

c0013f54 <PhysicalDisk::~PhysicalDisk()>:
c0013f54:	83 ec 0c             	sub    esp,0xc
c0013f57:	83 ec 0c             	sub    esp,0xc
c0013f5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f5e:	e8 cd ff ff ff       	call   c0013f30 <PhysicalDisk::~PhysicalDisk()>
c0013f63:	83 c4 10             	add    esp,0x10
c0013f66:	83 ec 08             	sub    esp,0x8
c0013f69:	68 6c 01 00 00       	push   0x16c
c0013f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f72:	e8 4a e6 ff ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c0013f77:	83 c4 10             	add    esp,0x10
c0013f7a:	83 c4 0c             	add    esp,0xc
c0013f7d:	c3                   	ret    

c0013f7e <FPU::FPU(char const*)>:
c0013f7e:	83 ec 0c             	sub    esp,0xc
c0013f81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f85:	83 ec 08             	sub    esp,0x8
c0013f88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f8c:	50                   	push   eax
c0013f8d:	e8 ee fc ff ff       	call   c0013c80 <Device::Device(char const*)>
c0013f92:	83 c4 10             	add    esp,0x10
c0013f95:	ba 3c 8e 02 c0       	mov    edx,0xc0028e3c
c0013f9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f9e:	89 10                	mov    DWORD PTR [eax],edx
c0013fa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fa4:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013fae:	90                   	nop
c0013faf:	83 c4 0c             	add    esp,0xc
c0013fb2:	c3                   	ret    
c0013fb3:	90                   	nop

c0013fb4 <FPU::~FPU()>:
c0013fb4:	83 ec 0c             	sub    esp,0xc
c0013fb7:	ba 3c 8e 02 c0       	mov    edx,0xc0028e3c
c0013fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fc0:	89 10                	mov    DWORD PTR [eax],edx
c0013fc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fc6:	83 ec 0c             	sub    esp,0xc
c0013fc9:	50                   	push   eax
c0013fca:	e8 93 f9 ff ff       	call   c0013962 <Device::~Device()>
c0013fcf:	83 c4 10             	add    esp,0x10
c0013fd2:	90                   	nop
c0013fd3:	83 c4 0c             	add    esp,0xc
c0013fd6:	c3                   	ret    
c0013fd7:	90                   	nop

c0013fd8 <FPU::~FPU()>:
c0013fd8:	83 ec 0c             	sub    esp,0xc
c0013fdb:	83 ec 0c             	sub    esp,0xc
c0013fde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fe2:	e8 cd ff ff ff       	call   c0013fb4 <FPU::~FPU()>
c0013fe7:	83 c4 10             	add    esp,0x10
c0013fea:	83 ec 08             	sub    esp,0x8
c0013fed:	68 58 01 00 00       	push   0x158
c0013ff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ff6:	e8 c6 e5 ff ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c0013ffb:	83 c4 10             	add    esp,0x10
c0013ffe:	83 c4 0c             	add    esp,0xc
c0014001:	c3                   	ret    

c0014002 <setupFPU()>:
c0014002:	53                   	push   ebx
c0014003:	83 ec 08             	sub    esp,0x8
c0014006:	8b 15 28 c2 02 c0    	mov    edx,DWORD PTR ds:0xc002c228
c001400c:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014013:	74 19                	je     c001402e <setupFPU()+0x2c>
c0014015:	83 ec 0c             	sub    esp,0xc
c0014018:	68 58 01 00 00       	push   0x158
c001401d:	e8 b2 b4 ff ff       	call   c000f4d4 <malloc>
c0014022:	89 c3                	mov    ebx,eax
c0014024:	89 04 24             	mov    DWORD PTR [esp],eax
c0014027:	e8 e0 f7 00 00       	call   c002380c <AVX::AVX()>
c001402c:	eb 5b                	jmp    c0014089 <setupFPU()+0x87>
c001402e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014034:	84 c0                	test   al,al
c0014036:	79 19                	jns    c0014051 <setupFPU()+0x4f>
c0014038:	83 ec 0c             	sub    esp,0xc
c001403b:	68 58 01 00 00       	push   0x158
c0014040:	e8 8f b4 ff ff       	call   c000f4d4 <malloc>
c0014045:	89 c3                	mov    ebx,eax
c0014047:	89 04 24             	mov    DWORD PTR [esp],eax
c001404a:	e8 e3 f8 00 00       	call   c0023932 <SSE::SSE()>
c001404f:	eb 38                	jmp    c0014089 <setupFPU()+0x87>
c0014051:	a8 20                	test   al,0x20
c0014053:	74 19                	je     c001406e <setupFPU()+0x6c>
c0014055:	83 ec 0c             	sub    esp,0xc
c0014058:	68 58 01 00 00       	push   0x158
c001405d:	e8 72 b4 ff ff       	call   c000f4d4 <malloc>
c0014062:	89 c3                	mov    ebx,eax
c0014064:	89 04 24             	mov    DWORD PTR [esp],eax
c0014067:	e8 30 f8 00 00       	call   c002389c <MMX::MMX()>
c001406c:	eb 1b                	jmp    c0014089 <setupFPU()+0x87>
c001406e:	a8 10                	test   al,0x10
c0014070:	74 1c                	je     c001408e <setupFPU()+0x8c>
c0014072:	83 ec 0c             	sub    esp,0xc
c0014075:	68 58 01 00 00       	push   0x158
c001407a:	e8 55 b4 ff ff       	call   c000f4d4 <malloc>
c001407f:	89 c3                	mov    ebx,eax
c0014081:	89 04 24             	mov    DWORD PTR [esp],eax
c0014084:	e8 37 f9 00 00       	call   c00239c0 <x87::x87()>
c0014089:	83 c4 10             	add    esp,0x10
c001408c:	eb 24                	jmp    c00140b2 <setupFPU()+0xb0>
c001408e:	83 e0 ef             	and    eax,0xffffffef
c0014091:	83 ec 0c             	sub    esp,0xc
c0014094:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001409a:	68 28 8e 02 c0       	push   0xc0028e28
c001409f:	e8 fd e5 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00140a4:	0f 20 c0             	mov    eax,cr0
c00140a7:	83 c8 04             	or     eax,0x4
c00140aa:	0f 22 c0             	mov    cr0,eax
c00140ad:	31 db                	xor    ebx,ebx
c00140af:	83 c4 10             	add    esp,0x10
c00140b2:	89 d8                	mov    eax,ebx
c00140b4:	83 c4 08             	add    esp,0x8
c00140b7:	5b                   	pop    ebx
c00140b8:	c3                   	ret    
c00140b9:	90                   	nop

c00140ba <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00140ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00140be:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00140c2:	c1 e0 04             	shl    eax,0x4
c00140c5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00140c9:	8d 50 10             	lea    edx,[eax+0x10]
c00140cc:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00140d2:	74 08                	je     c00140dc <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00140d4:	83 c0 04             	add    eax,0x4
c00140d7:	39 d0                	cmp    eax,edx
c00140d9:	75 f1                	jne    c00140cc <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00140db:	c3                   	ret    
c00140dc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00140e6:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00140f0:	eb e2                	jmp    c00140d4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00140f2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00140f2:	57                   	push   edi
c00140f3:	31 c0                	xor    eax,eax
c00140f5:	56                   	push   esi
c00140f6:	53                   	push   ebx
c00140f7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00140fb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00140ff:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014103:	89 da                	mov    edx,ebx
c0014105:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014109:	c1 e2 04             	shl    edx,0x4
c001410c:	01 ca                	add    edx,ecx
c001410e:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014116:	74 16                	je     c001412e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014118:	40                   	inc    eax
c0014119:	83 f8 04             	cmp    eax,0x4
c001411c:	75 f0                	jne    c001410e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001411e:	c7 44 24 10 6c 8e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028e6c
c0014126:	5b                   	pop    ebx
c0014127:	5e                   	pop    esi
c0014128:	5f                   	pop    edi
c0014129:	e9 4e 54 00 00       	jmp    c001957c <Krnl::panic(char const*)>
c001412e:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014131:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014134:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c001413a:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014140:	5b                   	pop    ebx
c0014141:	5e                   	pop    esi
c0014142:	5f                   	pop    edi
c0014143:	c3                   	ret    

c0014144 <doubleFault(regs*, void*)>:
c0014144:	55                   	push   ebp
c0014145:	89 e5                	mov    ebp,esp
c0014147:	83 ec 08             	sub    esp,0x8
c001414a:	83 ec 0c             	sub    esp,0xc
c001414d:	68 a7 8e 02 c0       	push   0xc0028ea7
c0014152:	e8 25 54 00 00       	call   c001957c <Krnl::panic(char const*)>
c0014157:	83 c4 10             	add    esp,0x10
c001415a:	90                   	nop
c001415b:	c9                   	leave  
c001415c:	c3                   	ret    
c001415d:	90                   	nop

c001415e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001415e:	56                   	push   esi
c001415f:	53                   	push   ebx
c0014160:	50                   	push   eax
c0014161:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014165:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014169:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001416e:	75 35                	jne    c00141a5 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014170:	8d 43 20             	lea    eax,[ebx+0x20]
c0014173:	31 d2                	xor    edx,edx
c0014175:	89 c1                	mov    ecx,eax
c0014177:	c1 e1 04             	shl    ecx,0x4
c001417a:	01 f1                	add    ecx,esi
c001417c:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014184:	74 3e                	je     c00141c4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014186:	42                   	inc    edx
c0014187:	83 fa 04             	cmp    edx,0x4
c001418a:	75 f0                	jne    c001417c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c001418c:	83 ec 0c             	sub    esp,0xc
c001418f:	68 ec 8e 02 c0       	push   0xc0028eec
c0014194:	e8 e3 53 00 00       	call   c001957c <Krnl::panic(char const*)>
c0014199:	83 c4 10             	add    esp,0x10
c001419c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00141a1:	5a                   	pop    edx
c00141a2:	5b                   	pop    ebx
c00141a3:	5e                   	pop    esi
c00141a4:	c3                   	ret    
c00141a5:	83 ec 0c             	sub    esp,0xc
c00141a8:	56                   	push   esi
c00141a9:	e8 ce fb ff ff       	call   c0013d7c <Device::getName()>
c00141ae:	83 c4 10             	add    esp,0x10
c00141b1:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00141b4:	75 ba                	jne    c0014170 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00141b6:	83 fb 0f             	cmp    ebx,0xf
c00141b9:	7f 29                	jg     c00141e4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00141bb:	0f b6 9b 80 b4 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd4b80]
c00141c2:	eb ac                	jmp    c0014170 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00141c4:	8d 04 82             	lea    eax,[edx+eax*4]
c00141c7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00141cb:	8d 04 86             	lea    eax,[esi+eax*4]
c00141ce:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00141d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00141d8:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00141de:	89 d8                	mov    eax,ebx
c00141e0:	5a                   	pop    edx
c00141e1:	5b                   	pop    ebx
c00141e2:	5e                   	pop    esi
c00141e3:	c3                   	ret    
c00141e4:	83 ec 0c             	sub    esp,0xc
c00141e7:	68 b4 8e 02 c0       	push   0xc0028eb4
c00141ec:	e8 8b 53 00 00       	call   c001957c <Krnl::panic(char const*)>
c00141f1:	83 c4 10             	add    esp,0x10
c00141f4:	e9 77 ff ff ff       	jmp    c0014170 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00141f9:	90                   	nop

c00141fa <InterruptController::clearAllHandlers(int, bool)>:
c00141fa:	56                   	push   esi
c00141fb:	53                   	push   ebx
c00141fc:	52                   	push   edx
c00141fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014201:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014205:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001420a:	75 61                	jne    c001426d <InterruptController::clearAllHandlers(int, bool)+0x73>
c001420c:	8d 46 20             	lea    eax,[esi+0x20]
c001420f:	c1 e6 04             	shl    esi,0x4
c0014212:	c1 e0 04             	shl    eax,0x4
c0014215:	01 de                	add    esi,ebx
c0014217:	01 d8                	add    eax,ebx
c0014219:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014223:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c001422d:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014237:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014241:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c001424b:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014255:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c001425f:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014269:	58                   	pop    eax
c001426a:	5b                   	pop    ebx
c001426b:	5e                   	pop    esi
c001426c:	c3                   	ret    
c001426d:	83 ec 0c             	sub    esp,0xc
c0014270:	53                   	push   ebx
c0014271:	e8 06 fb ff ff       	call   c0013d7c <Device::getName()>
c0014276:	83 c4 10             	add    esp,0x10
c0014279:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001427c:	75 8e                	jne    c001420c <InterruptController::clearAllHandlers(int, bool)+0x12>
c001427e:	83 fe 0f             	cmp    esi,0xf
c0014281:	7f 09                	jg     c001428c <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014283:	0f b6 b6 80 b4 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd4b80]
c001428a:	eb 80                	jmp    c001420c <InterruptController::clearAllHandlers(int, bool)+0x12>
c001428c:	83 ec 0c             	sub    esp,0xc
c001428f:	68 28 8f 02 c0       	push   0xc0028f28
c0014294:	e8 e3 52 00 00       	call   c001957c <Krnl::panic(char const*)>
c0014299:	83 c4 10             	add    esp,0x10
c001429c:	e9 6b ff ff ff       	jmp    c001420c <InterruptController::clearAllHandlers(int, bool)+0x12>
c00142a1:	90                   	nop

c00142a2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c00142a2:	56                   	push   esi
c00142a3:	53                   	push   ebx
c00142a4:	52                   	push   edx
c00142a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00142a9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142ad:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00142b2:	75 3a                	jne    c00142ee <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c00142b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142b8:	8d 50 20             	lea    edx,[eax+0x20]
c00142bb:	c1 e2 04             	shl    edx,0x4
c00142be:	8d 04 16             	lea    eax,[esi+edx*1]
c00142c1:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c00142c5:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00142cb:	74 0b                	je     c00142d8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00142cd:	83 c0 04             	add    eax,0x4
c00142d0:	39 d0                	cmp    eax,edx
c00142d2:	75 f1                	jne    c00142c5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00142d4:	58                   	pop    eax
c00142d5:	5b                   	pop    ebx
c00142d6:	5e                   	pop    esi
c00142d7:	c3                   	ret    
c00142d8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00142e2:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00142ec:	eb df                	jmp    c00142cd <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00142ee:	83 ec 0c             	sub    esp,0xc
c00142f1:	56                   	push   esi
c00142f2:	e8 85 fa ff ff       	call   c0013d7c <Device::getName()>
c00142f7:	83 c4 10             	add    esp,0x10
c00142fa:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00142fd:	75 b5                	jne    c00142b4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00142ff:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014304:	7f 11                	jg     c0014317 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014306:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001430a:	0f b6 80 80 b4 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd4b80]
c0014311:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014315:	eb 9d                	jmp    c00142b4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014317:	83 ec 0c             	sub    esp,0xc
c001431a:	68 28 8f 02 c0       	push   0xc0028f28
c001431f:	e8 58 52 00 00       	call   c001957c <Krnl::panic(char const*)>
c0014324:	83 c4 10             	add    esp,0x10
c0014327:	eb 8b                	jmp    c00142b4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014329 <nmiHandler(regs*, void*)>:
c0014329:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c001432e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014332:	e9 e9 a8 ff ff       	jmp    c000ec20 <Computer::handleNMI()>

c0014337 <int_handler>:
c0014337:	55                   	push   ebp
c0014338:	57                   	push   edi
c0014339:	56                   	push   esi
c001433a:	53                   	push   ebx
c001433b:	83 ec 0c             	sub    esp,0xc
c001433e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014342:	80 3d 40 cd 02 c0 00 	cmp    BYTE PTR ds:0xc002cd40,0x0
c0014349:	74 0b                	je     c0014356 <int_handler+0x1f>
c001434b:	fa                   	cli    
c001434c:	f4                   	hlt    
c001434d:	80 3d 40 cd 02 c0 00 	cmp    BYTE PTR ds:0xc002cd40,0x0
c0014354:	75 f5                	jne    c001434b <int_handler+0x14>
c0014356:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c001435b:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c001435e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014364:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c001436a:	8d 43 e0             	lea    eax,[ebx-0x20]
c001436d:	83 f8 17             	cmp    eax,0x17
c0014370:	77 13                	ja     c0014385 <int_handler+0x4e>
c0014372:	83 ec 08             	sub    esp,0x8
c0014375:	8b 17                	mov    edx,DWORD PTR [edi]
c0014377:	8d 43 e0             	lea    eax,[ebx-0x20]
c001437a:	0f b6 c0             	movzx  eax,al
c001437d:	50                   	push   eax
c001437e:	57                   	push   edi
c001437f:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014382:	83 c4 10             	add    esp,0x10
c0014385:	83 c3 15             	add    ebx,0x15
c0014388:	c1 e3 04             	shl    ebx,0x4
c001438b:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c001438f:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014396:	31 db                	xor    ebx,ebx
c0014398:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001439c:	85 c0                	test   eax,eax
c001439e:	74 13                	je     c00143b3 <int_handler+0x7c>
c00143a0:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00143a3:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c00143a7:	74 1c                	je     c00143c5 <int_handler+0x8e>
c00143a9:	83 ec 08             	sub    esp,0x8
c00143ac:	52                   	push   edx
c00143ad:	56                   	push   esi
c00143ae:	ff d0                	call   eax
c00143b0:	83 c4 10             	add    esp,0x10
c00143b3:	43                   	inc    ebx
c00143b4:	83 fb 04             	cmp    ebx,0x4
c00143b7:	75 df                	jne    c0014398 <int_handler+0x61>
c00143b9:	83 c4 0c             	add    esp,0xc
c00143bc:	31 c0                	xor    eax,eax
c00143be:	5b                   	pop    ebx
c00143bf:	31 d2                	xor    edx,edx
c00143c1:	5e                   	pop    esi
c00143c2:	5f                   	pop    edi
c00143c3:	5d                   	pop    ebp
c00143c4:	c3                   	ret    
c00143c5:	83 ec 08             	sub    esp,0x8
c00143c8:	52                   	push   edx
c00143c9:	56                   	push   esi
c00143ca:	ff d0                	call   eax
c00143cc:	83 c4 10             	add    esp,0x10
c00143cf:	83 c4 0c             	add    esp,0xc
c00143d2:	5b                   	pop    ebx
c00143d3:	5e                   	pop    esi
c00143d4:	5f                   	pop    edi
c00143d5:	5d                   	pop    ebp
c00143d6:	c3                   	ret    
c00143d7:	90                   	nop

c00143d8 <InterruptController::InterruptController(char const*)>:
c00143d8:	83 ec 1c             	sub    esp,0x1c
c00143db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143df:	83 ec 08             	sub    esp,0x8
c00143e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00143e6:	50                   	push   eax
c00143e7:	e8 94 f8 ff ff       	call   c0013c80 <Device::Device(char const*)>
c00143ec:	83 c4 10             	add    esp,0x10
c00143ef:	ba 5c 91 02 c0       	mov    edx,0xc002915c
c00143f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143f8:	89 10                	mov    DWORD PTR [eax],edx
c00143fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143fe:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014408:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014410:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014418:	7f 5e                	jg     c0014478 <InterruptController::InterruptController(char const*)+0xa0>
c001441a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014422:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014427:	7f 49                	jg     c0014472 <InterruptController::InterruptController(char const*)+0x9a>
c0014429:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001442d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014431:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014438:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001443c:	01 ca                	add    edx,ecx
c001443e:	83 c2 54             	add    edx,0x54
c0014441:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014449:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001444d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014451:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014458:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001445c:	01 ca                	add    edx,ecx
c001445e:	81 c2 54 04 00 00    	add    edx,0x454
c0014464:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001446c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014470:	eb b0                	jmp    c0014422 <InterruptController::InterruptController(char const*)+0x4a>
c0014472:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014476:	eb 98                	jmp    c0014410 <InterruptController::InterruptController(char const*)+0x38>
c0014478:	90                   	nop
c0014479:	83 c4 1c             	add    esp,0x1c
c001447c:	c3                   	ret    
c001447d:	90                   	nop

c001447e <InterruptController::~InterruptController()>:
c001447e:	83 ec 0c             	sub    esp,0xc
c0014481:	ba 5c 91 02 c0       	mov    edx,0xc002915c
c0014486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001448a:	89 10                	mov    DWORD PTR [eax],edx
c001448c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014490:	83 ec 0c             	sub    esp,0xc
c0014493:	50                   	push   eax
c0014494:	e8 c9 f4 ff ff       	call   c0013962 <Device::~Device()>
c0014499:	83 c4 10             	add    esp,0x10
c001449c:	90                   	nop
c001449d:	83 c4 0c             	add    esp,0xc
c00144a0:	c3                   	ret    
c00144a1:	90                   	nop

c00144a2 <InterruptController::~InterruptController()>:
c00144a2:	83 ec 0c             	sub    esp,0xc
c00144a5:	83 ec 0c             	sub    esp,0xc
c00144a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144ac:	e8 cd ff ff ff       	call   c001447e <InterruptController::~InterruptController()>
c00144b1:	83 c4 10             	add    esp,0x10
c00144b4:	83 ec 08             	sub    esp,0x8
c00144b7:	68 58 21 00 00       	push   0x2158
c00144bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144c0:	e8 fc e0 ff ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c00144c5:	83 c4 10             	add    esp,0x10
c00144c8:	83 c4 0c             	add    esp,0xc
c00144cb:	c3                   	ret    

c00144cc <displayDebugInfo(regs*)>:
c00144cc:	55                   	push   ebp
c00144cd:	57                   	push   edi
c00144ce:	56                   	push   esi
c00144cf:	53                   	push   ebx
c00144d0:	83 ec 24             	sub    esp,0x24
c00144d3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00144d7:	0f 20 c2             	mov    edx,cr0
c00144da:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00144de:	0f 20 d7             	mov    edi,cr2
c00144e1:	0f 20 de             	mov    esi,cr3
c00144e4:	0f 20 e5             	mov    ebp,cr4
c00144e7:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00144ea:	68 62 8f 02 c0       	push   0xc0028f62
c00144ef:	e8 ad e1 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00144f4:	58                   	pop    eax
c00144f5:	5a                   	pop    edx
c00144f6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00144f9:	68 6d 8f 02 c0       	push   0xc0028f6d
c00144fe:	e8 9e e1 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0014503:	59                   	pop    ecx
c0014504:	58                   	pop    eax
c0014505:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014508:	68 78 8f 02 c0       	push   0xc0028f78
c001450d:	e8 8f e1 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0014512:	58                   	pop    eax
c0014513:	5a                   	pop    edx
c0014514:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014517:	68 83 8f 02 c0       	push   0xc0028f83
c001451c:	e8 80 e1 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0014521:	59                   	pop    ecx
c0014522:	58                   	pop    eax
c0014523:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014526:	68 8e 8f 02 c0       	push   0xc0028f8e
c001452b:	e8 71 e1 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0014530:	58                   	pop    eax
c0014531:	5a                   	pop    edx
c0014532:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014535:	68 99 8f 02 c0       	push   0xc0028f99
c001453a:	e8 62 e1 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001453f:	59                   	pop    ecx
c0014540:	58                   	pop    eax
c0014541:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014544:	68 a4 8f 02 c0       	push   0xc0028fa4
c0014549:	e8 53 e1 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001454e:	58                   	pop    eax
c001454f:	5a                   	pop    edx
c0014550:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014553:	68 af 8f 02 c0       	push   0xc0028faf
c0014558:	e8 44 e1 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001455d:	59                   	pop    ecx
c001455e:	58                   	pop    eax
c001455f:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014562:	68 ba 8f 02 c0       	push   0xc0028fba
c0014567:	e8 35 e1 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001456c:	58                   	pop    eax
c001456d:	5a                   	pop    edx
c001456e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014571:	68 c9 8f 02 c0       	push   0xc0028fc9
c0014576:	e8 26 e1 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001457b:	59                   	pop    ecx
c001457c:	58                   	pop    eax
c001457d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014580:	68 d4 8f 02 c0       	push   0xc0028fd4
c0014585:	e8 17 e1 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001458a:	58                   	pop    eax
c001458b:	5a                   	pop    edx
c001458c:	57                   	push   edi
c001458d:	68 df 8f 02 c0       	push   0xc0028fdf
c0014592:	e8 0a e1 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0014597:	59                   	pop    ecx
c0014598:	58                   	pop    eax
c0014599:	56                   	push   esi
c001459a:	68 ea 8f 02 c0       	push   0xc0028fea
c001459f:	e8 fd e0 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00145a4:	58                   	pop    eax
c00145a5:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c00145aa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145b0:	e8 ae c2 ff ff       	call   c0010863 <setActiveTerminal(VgaText*)>
c00145b5:	58                   	pop    eax
c00145b6:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00145b9:	5a                   	pop    edx
c00145ba:	c1 e0 05             	shl    eax,0x5
c00145bd:	05 e0 b1 02 c0       	add    eax,0xc002b1e0
c00145c2:	50                   	push   eax
c00145c3:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c00145c8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145ce:	e8 af c6 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c00145d3:	59                   	pop    ecx
c00145d4:	58                   	pop    eax
c00145d5:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c00145da:	68 f5 8f 02 c0       	push   0xc0028ff5
c00145df:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145e5:	e8 98 c6 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c00145ea:	58                   	pop    eax
c00145eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145f0:	5a                   	pop    edx
c00145f1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00145f4:	83 c0 0c             	add    eax,0xc
c00145f7:	50                   	push   eax
c00145f8:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c00145fd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014603:	e8 7a c6 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c0014608:	59                   	pop    ecx
c0014609:	58                   	pop    eax
c001460a:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c001460f:	68 fe 8f 02 c0       	push   0xc0028ffe
c0014614:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001461a:	e8 63 c6 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c001461f:	58                   	pop    eax
c0014620:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c0014625:	5a                   	pop    edx
c0014626:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014629:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001462f:	e8 74 c6 ff ff       	call   c0010ca8 <VgaText::putx(unsigned int)>
c0014634:	59                   	pop    ecx
c0014635:	58                   	pop    eax
c0014636:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c001463b:	68 06 90 02 c0       	push   0xc0029006
c0014640:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014646:	e8 37 c6 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c001464b:	58                   	pop    eax
c001464c:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c0014651:	5a                   	pop    edx
c0014652:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014655:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001465b:	e8 48 c6 ff ff       	call   c0010ca8 <VgaText::putx(unsigned int)>
c0014660:	59                   	pop    ecx
c0014661:	58                   	pop    eax
c0014662:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c0014667:	68 0e 90 02 c0       	push   0xc002900e
c001466c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014672:	e8 0b c6 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c0014677:	58                   	pop    eax
c0014678:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c001467d:	5a                   	pop    edx
c001467e:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014681:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014687:	e8 1c c6 ff ff       	call   c0010ca8 <VgaText::putx(unsigned int)>
c001468c:	59                   	pop    ecx
c001468d:	58                   	pop    eax
c001468e:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c0014693:	68 16 90 02 c0       	push   0xc0029016
c0014698:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001469e:	e8 df c5 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c00146a3:	58                   	pop    eax
c00146a4:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c00146a9:	5a                   	pop    edx
c00146aa:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00146ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146b3:	e8 f0 c5 ff ff       	call   c0010ca8 <VgaText::putx(unsigned int)>
c00146b8:	59                   	pop    ecx
c00146b9:	58                   	pop    eax
c00146ba:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c00146bf:	68 1e 90 02 c0       	push   0xc002901e
c00146c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146ca:	e8 b3 c5 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c00146cf:	58                   	pop    eax
c00146d0:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c00146d5:	5a                   	pop    edx
c00146d6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00146d9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146df:	e8 c4 c5 ff ff       	call   c0010ca8 <VgaText::putx(unsigned int)>
c00146e4:	59                   	pop    ecx
c00146e5:	58                   	pop    eax
c00146e6:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c00146eb:	68 26 90 02 c0       	push   0xc0029026
c00146f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146f6:	e8 87 c5 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c00146fb:	58                   	pop    eax
c00146fc:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c0014701:	5a                   	pop    edx
c0014702:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014705:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001470b:	e8 98 c5 ff ff       	call   c0010ca8 <VgaText::putx(unsigned int)>
c0014710:	59                   	pop    ecx
c0014711:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c0014716:	5b                   	pop    ebx
c0014717:	68 2e 90 02 c0       	push   0xc002902e
c001471c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014722:	e8 5b c5 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c0014727:	58                   	pop    eax
c0014728:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c001472d:	5a                   	pop    edx
c001472e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014732:	52                   	push   edx
c0014733:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014739:	e8 6a c5 ff ff       	call   c0010ca8 <VgaText::putx(unsigned int)>
c001473e:	59                   	pop    ecx
c001473f:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c0014744:	5b                   	pop    ebx
c0014745:	68 37 90 02 c0       	push   0xc0029037
c001474a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014750:	e8 2d c5 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c0014755:	58                   	pop    eax
c0014756:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c001475b:	5a                   	pop    edx
c001475c:	57                   	push   edi
c001475d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014763:	e8 40 c5 ff ff       	call   c0010ca8 <VgaText::putx(unsigned int)>
c0014768:	59                   	pop    ecx
c0014769:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c001476e:	5b                   	pop    ebx
c001476f:	68 3f 90 02 c0       	push   0xc002903f
c0014774:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001477a:	e8 03 c5 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c001477f:	5f                   	pop    edi
c0014780:	58                   	pop    eax
c0014781:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c0014786:	56                   	push   esi
c0014787:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001478d:	e8 16 c5 ff ff       	call   c0010ca8 <VgaText::putx(unsigned int)>
c0014792:	58                   	pop    eax
c0014793:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c0014798:	5a                   	pop    edx
c0014799:	68 47 90 02 c0       	push   0xc0029047
c001479e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147a4:	e8 d9 c4 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c00147a9:	59                   	pop    ecx
c00147aa:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c00147af:	5b                   	pop    ebx
c00147b0:	55                   	push   ebp
c00147b1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147b7:	e8 ec c4 ff ff       	call   c0010ca8 <VgaText::putx(unsigned int)>
c00147bc:	5e                   	pop    esi
c00147bd:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c00147c2:	5f                   	pop    edi
c00147c3:	68 4f 90 02 c0       	push   0xc002904f
c00147c8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147ce:	e8 af c4 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c00147d3:	0f 21 c0             	mov    eax,db0
c00147d6:	5d                   	pop    ebp
c00147d7:	5a                   	pop    edx
c00147d8:	50                   	push   eax
c00147d9:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c00147de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147e4:	e8 bf c4 ff ff       	call   c0010ca8 <VgaText::putx(unsigned int)>
c00147e9:	59                   	pop    ecx
c00147ea:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c00147ef:	5b                   	pop    ebx
c00147f0:	68 58 90 02 c0       	push   0xc0029058
c00147f5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147fb:	e8 82 c4 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c0014800:	0f 21 c8             	mov    eax,db1
c0014803:	5e                   	pop    esi
c0014804:	5f                   	pop    edi
c0014805:	50                   	push   eax
c0014806:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c001480b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014811:	e8 92 c4 ff ff       	call   c0010ca8 <VgaText::putx(unsigned int)>
c0014816:	5d                   	pop    ebp
c0014817:	58                   	pop    eax
c0014818:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c001481d:	68 60 90 02 c0       	push   0xc0029060
c0014822:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014828:	e8 55 c4 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c001482d:	0f 21 d0             	mov    eax,db2
c0014830:	5a                   	pop    edx
c0014831:	59                   	pop    ecx
c0014832:	50                   	push   eax
c0014833:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c0014838:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001483e:	e8 65 c4 ff ff       	call   c0010ca8 <VgaText::putx(unsigned int)>
c0014843:	5b                   	pop    ebx
c0014844:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c0014849:	5e                   	pop    esi
c001484a:	68 68 90 02 c0       	push   0xc0029068
c001484f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014855:	e8 28 c4 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c001485a:	0f 21 d8             	mov    eax,db3
c001485d:	5f                   	pop    edi
c001485e:	5d                   	pop    ebp
c001485f:	50                   	push   eax
c0014860:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c0014865:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001486b:	e8 38 c4 ff ff       	call   c0010ca8 <VgaText::putx(unsigned int)>
c0014870:	58                   	pop    eax
c0014871:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c0014876:	5a                   	pop    edx
c0014877:	68 70 90 02 c0       	push   0xc0029070
c001487c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014882:	e8 fb c3 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c0014887:	0f 21 f0             	mov    eax,db6
c001488a:	59                   	pop    ecx
c001488b:	5b                   	pop    ebx
c001488c:	50                   	push   eax
c001488d:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c0014892:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014898:	e8 0b c4 ff ff       	call   c0010ca8 <VgaText::putx(unsigned int)>
c001489d:	5e                   	pop    esi
c001489e:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c00148a3:	5f                   	pop    edi
c00148a4:	68 78 90 02 c0       	push   0xc0029078
c00148a9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148af:	e8 ce c3 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c00148b4:	0f 21 f8             	mov    eax,db7
c00148b7:	5d                   	pop    ebp
c00148b8:	5a                   	pop    edx
c00148b9:	50                   	push   eax
c00148ba:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c00148bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c5:	e8 de c3 ff ff       	call   c0010ca8 <VgaText::putx(unsigned int)>
c00148ca:	fa                   	cli    
c00148cb:	f4                   	hlt    
c00148cc:	83 c4 10             	add    esp,0x10
c00148cf:	eb fe                	jmp    c00148cf <displayDebugInfo(regs*)+0x403>

c00148d1 <x87EmulHandler(regs*, void*)>:
c00148d1:	53                   	push   ebx
c00148d2:	83 ec 14             	sub    esp,0x14
c00148d5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00148d9:	53                   	push   ebx
c00148da:	e8 af 99 00 00       	call   c001e28e <Vm::x87Handler(regs*)>
c00148df:	83 c4 10             	add    esp,0x10
c00148e2:	84 c0                	test   al,al
c00148e4:	74 05                	je     c00148eb <x87EmulHandler(regs*, void*)+0x1a>
c00148e6:	83 c4 08             	add    esp,0x8
c00148e9:	5b                   	pop    ebx
c00148ea:	c3                   	ret    
c00148eb:	83 ec 0c             	sub    esp,0xc
c00148ee:	68 80 90 02 c0       	push   0xc0029080
c00148f3:	e8 a9 dd ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00148f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148fb:	e8 cc fb ff ff       	call   c00144cc <displayDebugInfo(regs*)>

c0014900 <gpFault(regs*, void*)>:
c0014900:	53                   	push   ebx
c0014901:	83 ec 14             	sub    esp,0x14
c0014904:	c7 05 b0 c3 02 c0 0b d6 01 c0 	mov    DWORD PTR ds:0xc002c3b0,0xc001d60b
c001490e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014912:	53                   	push   ebx
c0014913:	e8 f3 8c 00 00       	call   c001d60b <Vm::faultHandler(regs*)>
c0014918:	83 c4 10             	add    esp,0x10
c001491b:	84 c0                	test   al,al
c001491d:	74 05                	je     c0014924 <gpFault(regs*, void*)+0x24>
c001491f:	83 c4 08             	add    esp,0x8
c0014922:	5b                   	pop    ebx
c0014923:	c3                   	ret    
c0014924:	83 ec 0c             	sub    esp,0xc
c0014927:	68 96 90 02 c0       	push   0xc0029096
c001492c:	e8 70 dd ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0014931:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014934:	e8 93 fb ff ff       	call   c00144cc <displayDebugInfo(regs*)>

c0014939 <pgFault(regs*, void*)>:
c0014939:	83 ec 18             	sub    esp,0x18
c001493c:	68 b1 90 02 c0       	push   0xc00290b1
c0014941:	e8 5b dd ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0014946:	58                   	pop    eax
c0014947:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001494b:	e8 7c fb ff ff       	call   c00144cc <displayDebugInfo(regs*)>

c0014950 <otherISRHandler(regs*, void*)>:
c0014950:	53                   	push   ebx
c0014951:	83 ec 0c             	sub    esp,0xc
c0014954:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014958:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001495b:	50                   	push   eax
c001495c:	50                   	push   eax
c001495d:	68 be 90 02 c0       	push   0xc00290be
c0014962:	e8 3a dd ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0014967:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001496a:	e8 5d fb ff ff       	call   c00144cc <displayDebugInfo(regs*)>

c001496f <opcodeFault(regs*, void*)>:
c001496f:	55                   	push   ebp
c0014970:	89 e5                	mov    ebp,esp
c0014972:	56                   	push   esi
c0014973:	53                   	push   ebx
c0014974:	83 ec 40             	sub    esp,0x40
c0014977:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c001497c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014982:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014988:	84 c0                	test   al,al
c001498a:	74 24                	je     c00149b0 <opcodeFault(regs*, void*)+0x41>
c001498c:	83 ec 0c             	sub    esp,0xc
c001498f:	68 dc 90 02 c0       	push   0xc00290dc
c0014994:	e8 08 dd ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0014999:	83 c4 10             	add    esp,0x10
c001499c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001499f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149a2:	8d 50 19             	lea    edx,[eax+0x19]
c00149a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149a8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149ab:	e9 77 05 00 00       	jmp    c0014f27 <opcodeFault(regs*, void*)+0x5b8>
c00149b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149b3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149b6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00149b9:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00149bd:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00149c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149c4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149c7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00149ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149cd:	8a 00                	mov    al,BYTE PTR [eax]
c00149cf:	3c f0                	cmp    al,0xf0
c00149d1:	75 17                	jne    c00149ea <opcodeFault(regs*, void*)+0x7b>
c00149d3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00149d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149d9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149dc:	8d 50 01             	lea    edx,[eax+0x1]
c00149df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149e2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149e5:	e9 da 00 00 00       	jmp    c0014ac4 <opcodeFault(regs*, void*)+0x155>
c00149ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149ed:	8a 00                	mov    al,BYTE PTR [eax]
c00149ef:	3c f2                	cmp    al,0xf2
c00149f1:	74 09                	je     c00149fc <opcodeFault(regs*, void*)+0x8d>
c00149f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149f6:	8a 00                	mov    al,BYTE PTR [eax]
c00149f8:	3c f3                	cmp    al,0xf3
c00149fa:	75 1b                	jne    c0014a17 <opcodeFault(regs*, void*)+0xa8>
c00149fc:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a00:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a06:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a09:	8d 50 01             	lea    edx,[eax+0x1]
c0014a0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a0f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a12:	e9 ad 00 00 00       	jmp    c0014ac4 <opcodeFault(regs*, void*)+0x155>
c0014a17:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a1a:	8a 00                	mov    al,BYTE PTR [eax]
c0014a1c:	3c 66                	cmp    al,0x66
c0014a1e:	75 1f                	jne    c0014a3f <opcodeFault(regs*, void*)+0xd0>
c0014a20:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a24:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014a28:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a2e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a31:	8d 50 01             	lea    edx,[eax+0x1]
c0014a34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a37:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a3a:	e9 85 00 00 00       	jmp    c0014ac4 <opcodeFault(regs*, void*)+0x155>
c0014a3f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a42:	8a 00                	mov    al,BYTE PTR [eax]
c0014a44:	3c 67                	cmp    al,0x67
c0014a46:	75 18                	jne    c0014a60 <opcodeFault(regs*, void*)+0xf1>
c0014a48:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a4c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a52:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a55:	8d 50 01             	lea    edx,[eax+0x1]
c0014a58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a5b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a5e:	eb 64                	jmp    c0014ac4 <opcodeFault(regs*, void*)+0x155>
c0014a60:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a63:	8a 00                	mov    al,BYTE PTR [eax]
c0014a65:	3c 2e                	cmp    al,0x2e
c0014a67:	74 09                	je     c0014a72 <opcodeFault(regs*, void*)+0x103>
c0014a69:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a6c:	8a 00                	mov    al,BYTE PTR [eax]
c0014a6e:	3c 3e                	cmp    al,0x3e
c0014a70:	75 18                	jne    c0014a8a <opcodeFault(regs*, void*)+0x11b>
c0014a72:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a76:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a7c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a7f:	8d 50 01             	lea    edx,[eax+0x1]
c0014a82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a85:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a88:	eb 3a                	jmp    c0014ac4 <opcodeFault(regs*, void*)+0x155>
c0014a8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a8d:	8a 00                	mov    al,BYTE PTR [eax]
c0014a8f:	3c 36                	cmp    al,0x36
c0014a91:	74 1b                	je     c0014aae <opcodeFault(regs*, void*)+0x13f>
c0014a93:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a96:	8a 00                	mov    al,BYTE PTR [eax]
c0014a98:	3c 26                	cmp    al,0x26
c0014a9a:	74 12                	je     c0014aae <opcodeFault(regs*, void*)+0x13f>
c0014a9c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a9f:	8a 00                	mov    al,BYTE PTR [eax]
c0014aa1:	3c 64                	cmp    al,0x64
c0014aa3:	74 09                	je     c0014aae <opcodeFault(regs*, void*)+0x13f>
c0014aa5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014aa8:	8a 00                	mov    al,BYTE PTR [eax]
c0014aaa:	3c 65                	cmp    al,0x65
c0014aac:	75 16                	jne    c0014ac4 <opcodeFault(regs*, void*)+0x155>
c0014aae:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ab2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ab5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ab8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014abb:	8d 50 01             	lea    edx,[eax+0x1]
c0014abe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ac1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ac4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ac7:	8a 00                	mov    al,BYTE PTR [eax]
c0014ac9:	3c 0f                	cmp    al,0xf
c0014acb:	0f 85 ad 00 00 00    	jne    c0014b7e <opcodeFault(regs*, void*)+0x20f>
c0014ad1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ad4:	40                   	inc    eax
c0014ad5:	8a 00                	mov    al,BYTE PTR [eax]
c0014ad7:	3c c2                	cmp    al,0xc2
c0014ad9:	74 0e                	je     c0014ae9 <opcodeFault(regs*, void*)+0x17a>
c0014adb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ade:	40                   	inc    eax
c0014adf:	8a 00                	mov    al,BYTE PTR [eax]
c0014ae1:	3c c3                	cmp    al,0xc3
c0014ae3:	0f 85 95 00 00 00    	jne    c0014b7e <opcodeFault(regs*, void*)+0x20f>
c0014ae9:	83 ec 0c             	sub    esp,0xc
c0014aec:	68 ff 90 02 c0       	push   0xc00290ff
c0014af1:	e8 ab db ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0014af6:	83 c4 10             	add    esp,0x10
c0014af9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014afc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014aff:	8d 50 01             	lea    edx,[eax+0x1]
c0014b02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b05:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b08:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b0b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b0e:	8a 00                	mov    al,BYTE PTR [eax]
c0014b10:	8d 50 fe             	lea    edx,[eax-0x2]
c0014b13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b16:	88 10                	mov    BYTE PTR [eax],dl
c0014b18:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014b1b:	50                   	push   eax
c0014b1c:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014b1f:	50                   	push   eax
c0014b20:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014b23:	50                   	push   eax
c0014b24:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014b27:	e8 c0 44 00 00       	call   c0018fec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014b2c:	83 c4 10             	add    esp,0x10
c0014b2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b32:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b35:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014b38:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014b3b:	01 d0                	add    eax,edx
c0014b3d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014b40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b43:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b46:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014b49:	48                   	dec    eax
c0014b4a:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014b4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b50:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014b53:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b59:	83 ec 04             	sub    esp,0x4
c0014b5c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014b5f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014b62:	50                   	push   eax
c0014b63:	e8 01 b6 fe ff       	call   c0000169 <voodooXADD>
c0014b68:	83 c4 10             	add    esp,0x10
c0014b6b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014b6e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014b71:	01 c2                	add    edx,eax
c0014b73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b76:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b79:	e9 a9 03 00 00       	jmp    c0014f27 <opcodeFault(regs*, void*)+0x5b8>
c0014b7e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b81:	8a 00                	mov    al,BYTE PTR [eax]
c0014b83:	3c 0f                	cmp    al,0xf
c0014b85:	0f 85 8b 01 00 00    	jne    c0014d16 <opcodeFault(regs*, void*)+0x3a7>
c0014b8b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b8e:	40                   	inc    eax
c0014b8f:	8a 00                	mov    al,BYTE PTR [eax]
c0014b91:	3c c7                	cmp    al,0xc7
c0014b93:	0f 86 7d 01 00 00    	jbe    c0014d16 <opcodeFault(regs*, void*)+0x3a7>
c0014b99:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b9c:	40                   	inc    eax
c0014b9d:	8a 00                	mov    al,BYTE PTR [eax]
c0014b9f:	3c cf                	cmp    al,0xcf
c0014ba1:	0f 87 6f 01 00 00    	ja     c0014d16 <opcodeFault(regs*, void*)+0x3a7>
c0014ba7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014baa:	40                   	inc    eax
c0014bab:	8a 00                	mov    al,BYTE PTR [eax]
c0014bad:	83 c0 38             	add    eax,0x38
c0014bb0:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014bb3:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014bb7:	75 0b                	jne    c0014bc4 <opcodeFault(regs*, void*)+0x255>
c0014bb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bbc:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014bbf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bc2:	eb 75                	jmp    c0014c39 <opcodeFault(regs*, void*)+0x2ca>
c0014bc4:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014bc8:	75 0b                	jne    c0014bd5 <opcodeFault(regs*, void*)+0x266>
c0014bca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bcd:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014bd0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bd3:	eb 64                	jmp    c0014c39 <opcodeFault(regs*, void*)+0x2ca>
c0014bd5:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014bd9:	75 0b                	jne    c0014be6 <opcodeFault(regs*, void*)+0x277>
c0014bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bde:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014be1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014be4:	eb 53                	jmp    c0014c39 <opcodeFault(regs*, void*)+0x2ca>
c0014be6:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014bea:	75 0b                	jne    c0014bf7 <opcodeFault(regs*, void*)+0x288>
c0014bec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014bf2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bf5:	eb 42                	jmp    c0014c39 <opcodeFault(regs*, void*)+0x2ca>
c0014bf7:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014bfb:	75 0b                	jne    c0014c08 <opcodeFault(regs*, void*)+0x299>
c0014bfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c00:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014c03:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c06:	eb 31                	jmp    c0014c39 <opcodeFault(regs*, void*)+0x2ca>
c0014c08:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014c0c:	75 0b                	jne    c0014c19 <opcodeFault(regs*, void*)+0x2aa>
c0014c0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c11:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014c14:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c17:	eb 20                	jmp    c0014c39 <opcodeFault(regs*, void*)+0x2ca>
c0014c19:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014c1d:	75 0b                	jne    c0014c2a <opcodeFault(regs*, void*)+0x2bb>
c0014c1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c22:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014c25:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c28:	eb 0f                	jmp    c0014c39 <opcodeFault(regs*, void*)+0x2ca>
c0014c2a:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014c2e:	75 09                	jne    c0014c39 <opcodeFault(regs*, void*)+0x2ca>
c0014c30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c33:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014c36:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c39:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014c3d:	74 10                	je     c0014c4f <opcodeFault(regs*, void*)+0x2e0>
c0014c3f:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014c46:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014c4d:	eb 2d                	jmp    c0014c7c <opcodeFault(regs*, void*)+0x30d>
c0014c4f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c52:	c1 e0 18             	shl    eax,0x18
c0014c55:	89 c2                	mov    edx,eax
c0014c57:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c5a:	c1 e0 08             	shl    eax,0x8
c0014c5d:	25 00 00 ff 00       	and    eax,0xff0000
c0014c62:	09 c2                	or     edx,eax
c0014c64:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c67:	c1 e8 08             	shr    eax,0x8
c0014c6a:	25 00 ff 00 00       	and    eax,0xff00
c0014c6f:	09 c2                	or     edx,eax
c0014c71:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c74:	c1 e8 18             	shr    eax,0x18
c0014c77:	09 d0                	or     eax,edx
c0014c79:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c7c:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014c80:	75 0b                	jne    c0014c8d <opcodeFault(regs*, void*)+0x31e>
c0014c82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c85:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c88:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014c8b:	eb 75                	jmp    c0014d02 <opcodeFault(regs*, void*)+0x393>
c0014c8d:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014c91:	75 0b                	jne    c0014c9e <opcodeFault(regs*, void*)+0x32f>
c0014c93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c96:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c99:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014c9c:	eb 64                	jmp    c0014d02 <opcodeFault(regs*, void*)+0x393>
c0014c9e:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014ca2:	75 0b                	jne    c0014caf <opcodeFault(regs*, void*)+0x340>
c0014ca4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014caa:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014cad:	eb 53                	jmp    c0014d02 <opcodeFault(regs*, void*)+0x393>
c0014caf:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014cb3:	75 0b                	jne    c0014cc0 <opcodeFault(regs*, void*)+0x351>
c0014cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cb8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cbb:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014cbe:	eb 42                	jmp    c0014d02 <opcodeFault(regs*, void*)+0x393>
c0014cc0:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014cc4:	75 0b                	jne    c0014cd1 <opcodeFault(regs*, void*)+0x362>
c0014cc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ccc:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014ccf:	eb 31                	jmp    c0014d02 <opcodeFault(regs*, void*)+0x393>
c0014cd1:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014cd5:	75 0b                	jne    c0014ce2 <opcodeFault(regs*, void*)+0x373>
c0014cd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cda:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cdd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014ce0:	eb 20                	jmp    c0014d02 <opcodeFault(regs*, void*)+0x393>
c0014ce2:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014ce6:	75 0b                	jne    c0014cf3 <opcodeFault(regs*, void*)+0x384>
c0014ce8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ceb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cee:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014cf1:	eb 0f                	jmp    c0014d02 <opcodeFault(regs*, void*)+0x393>
c0014cf3:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014cf7:	75 09                	jne    c0014d02 <opcodeFault(regs*, void*)+0x393>
c0014cf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cfc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cff:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014d02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d05:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d08:	8d 50 02             	lea    edx,[eax+0x2]
c0014d0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d0e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d11:	e9 11 02 00 00       	jmp    c0014f27 <opcodeFault(regs*, void*)+0x5b8>
c0014d16:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d19:	8a 00                	mov    al,BYTE PTR [eax]
c0014d1b:	3c 0f                	cmp    al,0xf
c0014d1d:	0f 85 76 01 00 00    	jne    c0014e99 <opcodeFault(regs*, void*)+0x52a>
c0014d23:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d26:	40                   	inc    eax
c0014d27:	8a 00                	mov    al,BYTE PTR [eax]
c0014d29:	3c c7                	cmp    al,0xc7
c0014d2b:	0f 85 68 01 00 00    	jne    c0014e99 <opcodeFault(regs*, void*)+0x52a>
c0014d31:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d37:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d3a:	8d 50 01             	lea    edx,[eax+0x1]
c0014d3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d40:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d43:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014d46:	50                   	push   eax
c0014d47:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014d4a:	50                   	push   eax
c0014d4b:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014d4e:	50                   	push   eax
c0014d4f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014d52:	e8 95 42 00 00       	call   c0018fec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014d57:	83 c4 10             	add    esp,0x10
c0014d5a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014d5d:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014d60:	83 f0 01             	xor    eax,0x1
c0014d63:	84 c0                	test   al,al
c0014d65:	0f 84 2e 01 00 00    	je     c0014e99 <opcodeFault(regs*, void*)+0x52a>
c0014d6b:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014d6e:	3c 01                	cmp    al,0x1
c0014d70:	0f 85 23 01 00 00    	jne    c0014e99 <opcodeFault(regs*, void*)+0x52a>
c0014d76:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014d79:	83 f0 01             	xor    eax,0x1
c0014d7c:	84 c0                	test   al,al
c0014d7e:	0f 84 15 01 00 00    	je     c0014e99 <opcodeFault(regs*, void*)+0x52a>
c0014d84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d87:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014d8a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014d8d:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014d94:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014d97:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014d9a:	89 c2                	mov    edx,eax
c0014d9c:	b8 00 00 00 00       	mov    eax,0x0
c0014da1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014da4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014da7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014daa:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014dad:	ba 00 00 00 00       	mov    edx,0x0
c0014db2:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014db5:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014db8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dbb:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014dbe:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014dc1:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014dc8:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014dcb:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014dce:	89 c2                	mov    edx,eax
c0014dd0:	b8 00 00 00 00       	mov    eax,0x0
c0014dd5:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014dd8:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014ddb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dde:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014de1:	ba 00 00 00 00       	mov    edx,0x0
c0014de6:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014de9:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014dec:	e8 09 78 00 00       	call   c001c5fa <lockScheduler()>
c0014df1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014df4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014df7:	8b 00                	mov    eax,DWORD PTR [eax]
c0014df9:	89 c1                	mov    ecx,eax
c0014dfb:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014dfe:	89 cb                	mov    ebx,ecx
c0014e00:	89 d0                	mov    eax,edx
c0014e02:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014e05:	89 c6                	mov    esi,eax
c0014e07:	89 f0                	mov    eax,esi
c0014e09:	09 d8                	or     eax,ebx
c0014e0b:	85 c0                	test   eax,eax
c0014e0d:	75 21                	jne    c0014e30 <opcodeFault(regs*, void*)+0x4c1>
c0014e0f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014e12:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014e15:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014e18:	89 01                	mov    DWORD PTR [ecx],eax
c0014e1a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014e1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e20:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e23:	83 c8 40             	or     eax,0x40
c0014e26:	89 c2                	mov    edx,eax
c0014e28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e2b:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014e2e:	eb 3e                	jmp    c0014e6e <opcodeFault(regs*, void*)+0x4ff>
c0014e30:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014e33:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014e36:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e38:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e3b:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014e3e:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014e41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e44:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014e47:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014e4a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014e4d:	89 d0                	mov    eax,edx
c0014e4f:	31 d2                	xor    edx,edx
c0014e51:	89 c3                	mov    ebx,eax
c0014e53:	89 d6                	mov    esi,edx
c0014e55:	89 da                	mov    edx,ebx
c0014e57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e5a:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014e5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e60:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e63:	83 e0 bf             	and    eax,0xffffffbf
c0014e66:	89 c2                	mov    edx,eax
c0014e68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e6b:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014e6e:	e8 89 77 00 00       	call   c001c5fc <unlockScheduler()>
c0014e73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e76:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e79:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014e7c:	01 c2                	add    edx,eax
c0014e7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e81:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e84:	83 ec 0c             	sub    esp,0xc
c0014e87:	68 0e 91 02 c0       	push   0xc002910e
c0014e8c:	e8 10 d8 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0014e91:	83 c4 10             	add    esp,0x10
c0014e94:	e9 8e 00 00 00       	jmp    c0014f27 <opcodeFault(regs*, void*)+0x5b8>
c0014e99:	83 ec 0c             	sub    esp,0xc
c0014e9c:	68 21 91 02 c0       	push   0xc0029121
c0014ea1:	e8 fb d7 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0014ea6:	83 c4 10             	add    esp,0x10
c0014ea9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eac:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014eaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eb2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014eb5:	c1 e0 04             	shl    eax,0x4
c0014eb8:	01 d0                	add    eax,edx
c0014eba:	83 c0 03             	add    eax,0x3
c0014ebd:	8a 00                	mov    al,BYTE PTR [eax]
c0014ebf:	0f b6 d8             	movzx  ebx,al
c0014ec2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec5:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014ec8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ecb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ece:	c1 e0 04             	shl    eax,0x4
c0014ed1:	01 d0                	add    eax,edx
c0014ed3:	83 c0 02             	add    eax,0x2
c0014ed6:	8a 00                	mov    al,BYTE PTR [eax]
c0014ed8:	0f b6 c8             	movzx  ecx,al
c0014edb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ede:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014ee1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ee7:	c1 e0 04             	shl    eax,0x4
c0014eea:	01 d0                	add    eax,edx
c0014eec:	40                   	inc    eax
c0014eed:	8a 00                	mov    al,BYTE PTR [eax]
c0014eef:	0f b6 d0             	movzx  edx,al
c0014ef2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef5:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014ef8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014efb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014efe:	c1 e0 04             	shl    eax,0x4
c0014f01:	01 f0                	add    eax,esi
c0014f03:	8a 00                	mov    al,BYTE PTR [eax]
c0014f05:	0f b6 c0             	movzx  eax,al
c0014f08:	83 ec 0c             	sub    esp,0xc
c0014f0b:	53                   	push   ebx
c0014f0c:	51                   	push   ecx
c0014f0d:	52                   	push   edx
c0014f0e:	50                   	push   eax
c0014f0f:	68 34 91 02 c0       	push   0xc0029134
c0014f14:	e8 88 d7 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0014f19:	83 c4 20             	add    esp,0x20
c0014f1c:	83 ec 0c             	sub    esp,0xc
c0014f1f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014f22:	e8 a5 f5 ff ff       	call   c00144cc <displayDebugInfo(regs*)>
c0014f27:	8d 65 f8             	lea    esp,[ebp-0x8]
c0014f2a:	5b                   	pop    ebx
c0014f2b:	5e                   	pop    esi
c0014f2c:	5d                   	pop    ebp
c0014f2d:	c3                   	ret    

c0014f2e <displayProgramFault(char const*)>:
c0014f2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f33:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f36:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014f3c:	85 c0                	test   eax,eax
c0014f3e:	74 15                	je     c0014f55 <displayProgramFault(char const*)+0x27>
c0014f40:	83 ec 0c             	sub    esp,0xc
c0014f43:	6a 04                	push   0x4
c0014f45:	6a 0f                	push   0xf
c0014f47:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f4b:	50                   	push   eax
c0014f4c:	e8 f3 b9 ff ff       	call   c0010944 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014f51:	83 c4 1c             	add    esp,0x1c
c0014f54:	c3                   	ret    
c0014f55:	c3                   	ret    

c0014f56 <setupInterruptController()>:
c0014f56:	55                   	push   ebp
c0014f57:	89 e5                	mov    ebp,esp
c0014f59:	53                   	push   ebx
c0014f5a:	83 ec 24             	sub    esp,0x24
c0014f5d:	b8 00 00 00 00       	mov    eax,0x0
c0014f62:	85 c0                	test   eax,eax
c0014f64:	0f 95 c0             	setne  al
c0014f67:	84 c0                	test   al,al
c0014f69:	74 5b                	je     c0014fc6 <setupInterruptController()+0x70>
c0014f6b:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0014f72:	83 ec 0c             	sub    esp,0xc
c0014f75:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0014f78:	e8 57 a5 ff ff       	call   c000f4d4 <malloc>
c0014f7d:	83 c4 10             	add    esp,0x10
c0014f80:	89 c3                	mov    ebx,eax
c0014f82:	83 ec 0c             	sub    esp,0xc
c0014f85:	53                   	push   ebx
c0014f86:	e8 73 ec 00 00       	call   c0023bfe <APIC::APIC()>
c0014f8b:	83 c4 10             	add    esp,0x10
c0014f8e:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0014f91:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0014f94:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014f97:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f99:	83 c0 08             	add    eax,0x8
c0014f9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f9e:	6a 00                	push   0x0
c0014fa0:	6a 00                	push   0x0
c0014fa2:	6a 00                	push   0x0
c0014fa4:	52                   	push   edx
c0014fa5:	ff d0                	call   eax
c0014fa7:	83 c4 10             	add    esp,0x10
c0014faa:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c0014faf:	83 ec 08             	sub    esp,0x8
c0014fb2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014fb5:	50                   	push   eax
c0014fb6:	e8 d5 ea ff ff       	call   c0013a90 <Device::addChild(Device*)>
c0014fbb:	83 c4 10             	add    esp,0x10
c0014fbe:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014fc1:	e9 52 03 00 00       	jmp    c0015318 <setupInterruptController()+0x3c2>
c0014fc6:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c0014fcb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014fd1:	83 e0 01             	and    eax,0x1
c0014fd4:	84 c0                	test   al,al
c0014fd6:	0f 95 c0             	setne  al
c0014fd9:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0014fdc:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0014fe3:	83 ec 0c             	sub    esp,0xc
c0014fe6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014fe9:	e8 e6 a4 ff ff       	call   c000f4d4 <malloc>
c0014fee:	83 c4 10             	add    esp,0x10
c0014ff1:	89 c3                	mov    ebx,eax
c0014ff3:	83 ec 0c             	sub    esp,0xc
c0014ff6:	53                   	push   ebx
c0014ff7:	e8 5a f1 00 00       	call   c0024156 <PIC::PIC()>
c0014ffc:	83 c4 10             	add    esp,0x10
c0014fff:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015002:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015005:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015008:	8b 00                	mov    eax,DWORD PTR [eax]
c001500a:	83 c0 08             	add    eax,0x8
c001500d:	8b 00                	mov    eax,DWORD PTR [eax]
c001500f:	6a 00                	push   0x0
c0015011:	6a 00                	push   0x0
c0015013:	6a 00                	push   0x0
c0015015:	52                   	push   edx
c0015016:	ff d0                	call   eax
c0015018:	83 c4 10             	add    esp,0x10
c001501b:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001501f:	74 73                	je     c0015094 <setupInterruptController()+0x13e>
c0015021:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015024:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015027:	8b 00                	mov    eax,DWORD PTR [eax]
c0015029:	83 c0 0c             	add    eax,0xc
c001502c:	8b 00                	mov    eax,DWORD PTR [eax]
c001502e:	6a 00                	push   0x0
c0015030:	6a 00                	push   0x0
c0015032:	6a 00                	push   0x0
c0015034:	52                   	push   edx
c0015035:	ff d0                	call   eax
c0015037:	83 c4 10             	add    esp,0x10
c001503a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001503e:	74 15                	je     c0015055 <setupInterruptController()+0xff>
c0015040:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015043:	8b 00                	mov    eax,DWORD PTR [eax]
c0015045:	83 c0 04             	add    eax,0x4
c0015048:	8b 00                	mov    eax,DWORD PTR [eax]
c001504a:	83 ec 0c             	sub    esp,0xc
c001504d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015050:	ff d0                	call   eax
c0015052:	83 c4 10             	add    esp,0x10
c0015055:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c001505c:	83 ec 0c             	sub    esp,0xc
c001505f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015062:	e8 6d a4 ff ff       	call   c000f4d4 <malloc>
c0015067:	83 c4 10             	add    esp,0x10
c001506a:	89 c3                	mov    ebx,eax
c001506c:	83 ec 0c             	sub    esp,0xc
c001506f:	53                   	push   ebx
c0015070:	e8 89 eb 00 00       	call   c0023bfe <APIC::APIC()>
c0015075:	83 c4 10             	add    esp,0x10
c0015078:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001507b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001507e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015081:	8b 00                	mov    eax,DWORD PTR [eax]
c0015083:	83 c0 08             	add    eax,0x8
c0015086:	8b 00                	mov    eax,DWORD PTR [eax]
c0015088:	6a 00                	push   0x0
c001508a:	6a 00                	push   0x0
c001508c:	6a 00                	push   0x0
c001508e:	52                   	push   edx
c001508f:	ff d0                	call   eax
c0015091:	83 c4 10             	add    esp,0x10
c0015094:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c0015099:	83 ec 08             	sub    esp,0x8
c001509c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001509f:	50                   	push   eax
c00150a0:	e8 eb e9 ff ff       	call   c0013a90 <Device::addChild(Device*)>
c00150a5:	83 c4 10             	add    esp,0x10
c00150a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00150ad:	83 c0 24             	add    eax,0x24
c00150b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00150b2:	6a 00                	push   0x0
c00150b4:	68 50 49 01 c0       	push   0xc0014950
c00150b9:	6a 00                	push   0x0
c00150bb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150be:	ff d0                	call   eax
c00150c0:	83 c4 10             	add    esp,0x10
c00150c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00150c8:	83 c0 24             	add    eax,0x24
c00150cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00150cd:	6a 00                	push   0x0
c00150cf:	68 50 49 01 c0       	push   0xc0014950
c00150d4:	6a 01                	push   0x1
c00150d6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150d9:	ff d0                	call   eax
c00150db:	83 c4 10             	add    esp,0x10
c00150de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00150e3:	83 c0 24             	add    eax,0x24
c00150e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00150e8:	6a 00                	push   0x0
c00150ea:	68 29 43 01 c0       	push   0xc0014329
c00150ef:	6a 02                	push   0x2
c00150f1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150f4:	ff d0                	call   eax
c00150f6:	83 c4 10             	add    esp,0x10
c00150f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00150fe:	83 c0 24             	add    eax,0x24
c0015101:	8b 00                	mov    eax,DWORD PTR [eax]
c0015103:	6a 00                	push   0x0
c0015105:	68 50 49 01 c0       	push   0xc0014950
c001510a:	6a 03                	push   0x3
c001510c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001510f:	ff d0                	call   eax
c0015111:	83 c4 10             	add    esp,0x10
c0015114:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015117:	8b 00                	mov    eax,DWORD PTR [eax]
c0015119:	83 c0 24             	add    eax,0x24
c001511c:	8b 00                	mov    eax,DWORD PTR [eax]
c001511e:	6a 00                	push   0x0
c0015120:	68 50 49 01 c0       	push   0xc0014950
c0015125:	6a 04                	push   0x4
c0015127:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001512a:	ff d0                	call   eax
c001512c:	83 c4 10             	add    esp,0x10
c001512f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015132:	8b 00                	mov    eax,DWORD PTR [eax]
c0015134:	83 c0 24             	add    eax,0x24
c0015137:	8b 00                	mov    eax,DWORD PTR [eax]
c0015139:	6a 00                	push   0x0
c001513b:	68 50 49 01 c0       	push   0xc0014950
c0015140:	6a 05                	push   0x5
c0015142:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015145:	ff d0                	call   eax
c0015147:	83 c4 10             	add    esp,0x10
c001514a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001514d:	8b 00                	mov    eax,DWORD PTR [eax]
c001514f:	83 c0 24             	add    eax,0x24
c0015152:	8b 00                	mov    eax,DWORD PTR [eax]
c0015154:	6a 00                	push   0x0
c0015156:	68 6f 49 01 c0       	push   0xc001496f
c001515b:	6a 06                	push   0x6
c001515d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015160:	ff d0                	call   eax
c0015162:	83 c4 10             	add    esp,0x10
c0015165:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015168:	8b 00                	mov    eax,DWORD PTR [eax]
c001516a:	83 c0 24             	add    eax,0x24
c001516d:	8b 00                	mov    eax,DWORD PTR [eax]
c001516f:	6a 00                	push   0x0
c0015171:	68 d1 48 01 c0       	push   0xc00148d1
c0015176:	6a 07                	push   0x7
c0015178:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001517b:	ff d0                	call   eax
c001517d:	83 c4 10             	add    esp,0x10
c0015180:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015183:	8b 00                	mov    eax,DWORD PTR [eax]
c0015185:	83 c0 24             	add    eax,0x24
c0015188:	8b 00                	mov    eax,DWORD PTR [eax]
c001518a:	6a 00                	push   0x0
c001518c:	68 44 41 01 c0       	push   0xc0014144
c0015191:	6a 08                	push   0x8
c0015193:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015196:	ff d0                	call   eax
c0015198:	83 c4 10             	add    esp,0x10
c001519b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001519e:	8b 00                	mov    eax,DWORD PTR [eax]
c00151a0:	83 c0 24             	add    eax,0x24
c00151a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00151a5:	6a 00                	push   0x0
c00151a7:	68 50 49 01 c0       	push   0xc0014950
c00151ac:	6a 09                	push   0x9
c00151ae:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151b1:	ff d0                	call   eax
c00151b3:	83 c4 10             	add    esp,0x10
c00151b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00151bb:	83 c0 24             	add    eax,0x24
c00151be:	8b 00                	mov    eax,DWORD PTR [eax]
c00151c0:	6a 00                	push   0x0
c00151c2:	68 50 49 01 c0       	push   0xc0014950
c00151c7:	6a 0a                	push   0xa
c00151c9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151cc:	ff d0                	call   eax
c00151ce:	83 c4 10             	add    esp,0x10
c00151d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00151d6:	83 c0 24             	add    eax,0x24
c00151d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00151db:	6a 00                	push   0x0
c00151dd:	68 50 49 01 c0       	push   0xc0014950
c00151e2:	6a 0b                	push   0xb
c00151e4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151e7:	ff d0                	call   eax
c00151e9:	83 c4 10             	add    esp,0x10
c00151ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f1:	83 c0 24             	add    eax,0x24
c00151f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f6:	6a 00                	push   0x0
c00151f8:	68 50 49 01 c0       	push   0xc0014950
c00151fd:	6a 0c                	push   0xc
c00151ff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015202:	ff d0                	call   eax
c0015204:	83 c4 10             	add    esp,0x10
c0015207:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001520a:	8b 00                	mov    eax,DWORD PTR [eax]
c001520c:	83 c0 24             	add    eax,0x24
c001520f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015211:	6a 00                	push   0x0
c0015213:	68 00 49 01 c0       	push   0xc0014900
c0015218:	6a 0d                	push   0xd
c001521a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001521d:	ff d0                	call   eax
c001521f:	83 c4 10             	add    esp,0x10
c0015222:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015225:	8b 00                	mov    eax,DWORD PTR [eax]
c0015227:	83 c0 24             	add    eax,0x24
c001522a:	8b 00                	mov    eax,DWORD PTR [eax]
c001522c:	6a 00                	push   0x0
c001522e:	68 39 49 01 c0       	push   0xc0014939
c0015233:	6a 0e                	push   0xe
c0015235:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015238:	ff d0                	call   eax
c001523a:	83 c4 10             	add    esp,0x10
c001523d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015240:	8b 00                	mov    eax,DWORD PTR [eax]
c0015242:	83 c0 24             	add    eax,0x24
c0015245:	8b 00                	mov    eax,DWORD PTR [eax]
c0015247:	6a 00                	push   0x0
c0015249:	68 50 49 01 c0       	push   0xc0014950
c001524e:	6a 0f                	push   0xf
c0015250:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015253:	ff d0                	call   eax
c0015255:	83 c4 10             	add    esp,0x10
c0015258:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001525b:	8b 00                	mov    eax,DWORD PTR [eax]
c001525d:	83 c0 24             	add    eax,0x24
c0015260:	8b 00                	mov    eax,DWORD PTR [eax]
c0015262:	6a 00                	push   0x0
c0015264:	68 50 49 01 c0       	push   0xc0014950
c0015269:	6a 10                	push   0x10
c001526b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001526e:	ff d0                	call   eax
c0015270:	83 c4 10             	add    esp,0x10
c0015273:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015276:	8b 00                	mov    eax,DWORD PTR [eax]
c0015278:	83 c0 24             	add    eax,0x24
c001527b:	8b 00                	mov    eax,DWORD PTR [eax]
c001527d:	6a 00                	push   0x0
c001527f:	68 50 49 01 c0       	push   0xc0014950
c0015284:	6a 11                	push   0x11
c0015286:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015289:	ff d0                	call   eax
c001528b:	83 c4 10             	add    esp,0x10
c001528e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015291:	8b 00                	mov    eax,DWORD PTR [eax]
c0015293:	83 c0 24             	add    eax,0x24
c0015296:	8b 00                	mov    eax,DWORD PTR [eax]
c0015298:	6a 00                	push   0x0
c001529a:	68 50 49 01 c0       	push   0xc0014950
c001529f:	6a 12                	push   0x12
c00152a1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152a4:	ff d0                	call   eax
c00152a6:	83 c4 10             	add    esp,0x10
c00152a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ae:	83 c0 24             	add    eax,0x24
c00152b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00152b3:	6a 00                	push   0x0
c00152b5:	68 50 49 01 c0       	push   0xc0014950
c00152ba:	6a 13                	push   0x13
c00152bc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152bf:	ff d0                	call   eax
c00152c1:	83 c4 10             	add    esp,0x10
c00152c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00152c9:	83 c0 24             	add    eax,0x24
c00152cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ce:	6a 00                	push   0x0
c00152d0:	68 50 49 01 c0       	push   0xc0014950
c00152d5:	6a 14                	push   0x14
c00152d7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152da:	ff d0                	call   eax
c00152dc:	83 c4 10             	add    esp,0x10
c00152df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e4:	83 c0 24             	add    eax,0x24
c00152e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e9:	6a 00                	push   0x0
c00152eb:	68 50 49 01 c0       	push   0xc0014950
c00152f0:	6a 1e                	push   0x1e
c00152f2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152f5:	ff d0                	call   eax
c00152f7:	83 c4 10             	add    esp,0x10
c00152fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ff:	83 c0 24             	add    eax,0x24
c0015302:	8b 00                	mov    eax,DWORD PTR [eax]
c0015304:	6a 00                	push   0x0
c0015306:	68 8f af 01 c0       	push   0xc001af8f
c001530b:	6a 60                	push   0x60
c001530d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015310:	ff d0                	call   eax
c0015312:	83 c4 10             	add    esp,0x10
c0015315:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015318:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001531b:	c9                   	leave  
c001531c:	c3                   	ret    
c001531d:	90                   	nop

c001531e <InterruptController::convertLegacyIRQNumber(int)>:
c001531e:	55                   	push   ebp
c001531f:	89 e5                	mov    ebp,esp
c0015321:	83 ec 08             	sub    esp,0x8
c0015324:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015327:	83 ec 0c             	sub    esp,0xc
c001532a:	50                   	push   eax
c001532b:	e8 4c ea ff ff       	call   c0013d7c <Device::getName()>
c0015330:	83 c4 10             	add    esp,0x10
c0015333:	8a 00                	mov    al,BYTE PTR [eax]
c0015335:	3c 41                	cmp    al,0x41
c0015337:	0f 94 c0             	sete   al
c001533a:	84 c0                	test   al,al
c001533c:	74 28                	je     c0015366 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001533e:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015342:	7f 12                	jg     c0015356 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015344:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015347:	05 80 b4 02 c0       	add    eax,0xc002b480
c001534c:	8a 00                	mov    al,BYTE PTR [eax]
c001534e:	0f b6 c0             	movzx  eax,al
c0015351:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015354:	eb 10                	jmp    c0015366 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015356:	83 ec 0c             	sub    esp,0xc
c0015359:	68 b4 8e 02 c0       	push   0xc0028eb4
c001535e:	e8 19 42 00 00       	call   c001957c <Krnl::panic(char const*)>
c0015363:	83 c4 10             	add    esp,0x10
c0015366:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015369:	c9                   	leave  
c001536a:	c3                   	ret    
c001536b:	90                   	nop

c001536c <startGUI(void*)>:
c001536c:	55                   	push   ebp
c001536d:	89 e5                	mov    ebp,esp
c001536f:	53                   	push   ebx
c0015370:	83 ec 04             	sub    esp,0x4
c0015373:	e8 84 72 00 00       	call   c001c5fc <unlockScheduler()>
c0015378:	8b 1d 28 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c228
c001537e:	83 ec 08             	sub    esp,0x8
c0015381:	6a 01                	push   0x1
c0015383:	68 9c 91 02 c0       	push   0xc002919c
c0015388:	e8 f9 6b 00 00       	call   c001bf86 <Thr::loadDLL(char const*, bool)>
c001538d:	83 c4 10             	add    esp,0x10
c0015390:	83 ec 08             	sub    esp,0x8
c0015393:	53                   	push   ebx
c0015394:	50                   	push   eax
c0015395:	e8 fb 6d 00 00       	call   c001c195 <Thr::executeDLL(unsigned long, void*)>
c001539a:	83 c4 10             	add    esp,0x10
c001539d:	8b 1d 28 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c228
c00153a3:	83 ec 08             	sub    esp,0x8
c00153a6:	6a 01                	push   0x1
c00153a8:	68 b6 91 02 c0       	push   0xc00291b6
c00153ad:	e8 d4 6b 00 00       	call   c001bf86 <Thr::loadDLL(char const*, bool)>
c00153b2:	83 c4 10             	add    esp,0x10
c00153b5:	83 ec 08             	sub    esp,0x8
c00153b8:	53                   	push   ebx
c00153b9:	50                   	push   eax
c00153ba:	e8 d6 6d 00 00       	call   c001c195 <Thr::executeDLL(unsigned long, void*)>
c00153bf:	83 c4 10             	add    esp,0x10
c00153c2:	90                   	nop
c00153c3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00153c6:	c9                   	leave  
c00153c7:	c3                   	ret    

c00153c8 <startGUIVESA(void*)>:
c00153c8:	55                   	push   ebp
c00153c9:	89 e5                	mov    ebp,esp
c00153cb:	53                   	push   ebx
c00153cc:	83 ec 04             	sub    esp,0x4
c00153cf:	e8 28 72 00 00       	call   c001c5fc <unlockScheduler()>
c00153d4:	8b 1d 28 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c228
c00153da:	83 ec 08             	sub    esp,0x8
c00153dd:	6a 01                	push   0x1
c00153df:	68 d0 91 02 c0       	push   0xc00291d0
c00153e4:	e8 9d 6b 00 00       	call   c001bf86 <Thr::loadDLL(char const*, bool)>
c00153e9:	83 c4 10             	add    esp,0x10
c00153ec:	83 ec 08             	sub    esp,0x8
c00153ef:	53                   	push   ebx
c00153f0:	50                   	push   eax
c00153f1:	e8 9f 6d 00 00       	call   c001c195 <Thr::executeDLL(unsigned long, void*)>
c00153f6:	83 c4 10             	add    esp,0x10
c00153f9:	8b 1d 28 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c228
c00153ff:	83 ec 08             	sub    esp,0x8
c0015402:	6a 01                	push   0x1
c0015404:	68 b6 91 02 c0       	push   0xc00291b6
c0015409:	e8 78 6b 00 00       	call   c001bf86 <Thr::loadDLL(char const*, bool)>
c001540e:	83 c4 10             	add    esp,0x10
c0015411:	83 ec 08             	sub    esp,0x8
c0015414:	53                   	push   ebx
c0015415:	50                   	push   eax
c0015416:	e8 7a 6d 00 00       	call   c001c195 <Thr::executeDLL(unsigned long, void*)>
c001541b:	83 c4 10             	add    esp,0x10
c001541e:	90                   	nop
c001541f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015422:	c9                   	leave  
c0015423:	c3                   	ret    

c0015424 <sendKeyToTerminal(unsigned char)>:
c0015424:	55                   	push   ebp
c0015425:	89 e5                	mov    ebp,esp
c0015427:	83 ec 28             	sub    esp,0x28
c001542a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015430:	a1 e4 c2 02 c0       	mov    eax,ds:0xc002c2e4
c0015435:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015439:	83 ec 08             	sub    esp,0x8
c001543c:	52                   	push   edx
c001543d:	50                   	push   eax
c001543e:	e8 3d ba ff ff       	call   c0010e80 <VgaText::receiveKey(unsigned char)>
c0015443:	83 c4 10             	add    esp,0x10
c0015446:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c001544a:	75 41                	jne    c001548d <sendKeyToTerminal(unsigned char)+0x69>
c001544c:	e8 d0 71 00 00       	call   c001c621 <lockStuff()>
c0015451:	a1 c0 c3 02 c0       	mov    eax,ds:0xc002c3c0
c0015456:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015459:	c7 05 c0 c3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c3c0,0x0
c0015463:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015467:	74 1f                	je     c0015488 <sendKeyToTerminal(unsigned char)+0x64>
c0015469:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001546c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001546f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015472:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015475:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015478:	83 ec 0c             	sub    esp,0xc
c001547b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001547e:	e8 8f 77 00 00       	call   c001cc12 <unblockTask(ThreadControlBlock*)>
c0015483:	83 c4 10             	add    esp,0x10
c0015486:	eb db                	jmp    c0015463 <sendKeyToTerminal(unsigned char)+0x3f>
c0015488:	e8 2e 75 00 00       	call   c001c9bb <unlockStuff()>
c001548d:	90                   	nop
c001548e:	c9                   	leave  
c001548f:	c3                   	ret    

c0015490 <sendKeyboardToken(KeyboardToken)>:
c0015490:	55                   	push   ebp
c0015491:	89 e5                	mov    ebp,esp
c0015493:	83 ec 18             	sub    esp,0x18
c0015496:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015499:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001549c:	0f b7 c0             	movzx  eax,ax
c001549f:	83 f2 01             	xor    edx,0x1
c00154a2:	88 90 e0 c3 02 c0    	mov    BYTE PTR [eax-0x3ffd3c20],dl
c00154a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ab:	66 3d 03 02          	cmp    ax,0x203
c00154af:	75 07                	jne    c00154b8 <sendKeyboardToken(KeyboardToken)+0x28>
c00154b1:	a0 e0 c4 02 c0       	mov    al,ds:0xc002c4e0
c00154b6:	84 c0                	test   al,al
c00154b8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00154bc:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00154bf:	a0 e8 c7 02 c0       	mov    al,ds:0xc002c7e8
c00154c4:	38 c2                	cmp    dl,al
c00154c6:	74 1c                	je     c00154e4 <sendKeyboardToken(KeyboardToken)+0x54>
c00154c8:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00154cb:	a2 e8 c7 02 c0       	mov    ds:0xc002c7e8,al
c00154d0:	a0 e8 c7 02 c0       	mov    al,ds:0xc002c7e8
c00154d5:	0f b6 c0             	movzx  eax,al
c00154d8:	83 ec 0c             	sub    esp,0xc
c00154db:	50                   	push   eax
c00154dc:	e8 0d ac ff ff       	call   c00100ee <setTerminalScrollLock(bool)>
c00154e1:	83 c4 10             	add    esp,0x10
c00154e4:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00154e7:	84 c0                	test   al,al
c00154e9:	0f 84 ae 00 00 00    	je     c001559d <sendKeyboardToken(KeyboardToken)+0x10d>
c00154ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f2:	66 3d 10 03          	cmp    ax,0x310
c00154f6:	75 06                	jne    c00154fe <sendKeyboardToken(KeyboardToken)+0x6e>
c00154f8:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00154fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015501:	66 3d 11 03          	cmp    ax,0x311
c0015505:	75 06                	jne    c001550d <sendKeyboardToken(KeyboardToken)+0x7d>
c0015507:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001550d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015510:	66 3d 12 03          	cmp    ax,0x312
c0015514:	75 06                	jne    c001551c <sendKeyboardToken(KeyboardToken)+0x8c>
c0015516:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001551c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001551f:	66 3d 13 03          	cmp    ax,0x313
c0015523:	75 06                	jne    c001552b <sendKeyboardToken(KeyboardToken)+0x9b>
c0015525:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001552b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001552e:	66 3d 14 03          	cmp    ax,0x314
c0015532:	75 06                	jne    c001553a <sendKeyboardToken(KeyboardToken)+0xaa>
c0015534:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001553a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001553d:	66 3d 15 03          	cmp    ax,0x315
c0015541:	75 06                	jne    c0015549 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015543:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015549:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001554c:	66 3d 16 03          	cmp    ax,0x316
c0015550:	75 06                	jne    c0015558 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015552:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015558:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001555b:	66 3d 17 03          	cmp    ax,0x317
c001555f:	75 06                	jne    c0015567 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015561:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015567:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001556a:	66 3d 18 03          	cmp    ax,0x318
c001556e:	75 06                	jne    c0015576 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015570:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015576:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015579:	66 3d 19 03          	cmp    ax,0x319
c001557d:	75 06                	jne    c0015585 <sendKeyboardToken(KeyboardToken)+0xf5>
c001557f:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015585:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015588:	66 3d 1a 03          	cmp    ax,0x31a
c001558c:	0f 85 c9 00 00 00    	jne    c001565b <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015592:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015598:	e9 be 00 00 00       	jmp    c001565b <sendKeyboardToken(KeyboardToken)+0x1cb>
c001559d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a0:	66 3d 10 03          	cmp    ax,0x310
c00155a4:	75 0a                	jne    c00155b0 <sendKeyboardToken(KeyboardToken)+0x120>
c00155a6:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00155ac:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b3:	66 3d 11 03          	cmp    ax,0x311
c00155b7:	75 0a                	jne    c00155c3 <sendKeyboardToken(KeyboardToken)+0x133>
c00155b9:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00155bf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c6:	66 3d 12 03          	cmp    ax,0x312
c00155ca:	75 0a                	jne    c00155d6 <sendKeyboardToken(KeyboardToken)+0x146>
c00155cc:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00155d2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d9:	66 3d 13 03          	cmp    ax,0x313
c00155dd:	75 0a                	jne    c00155e9 <sendKeyboardToken(KeyboardToken)+0x159>
c00155df:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00155e5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ec:	66 3d 14 03          	cmp    ax,0x314
c00155f0:	75 0a                	jne    c00155fc <sendKeyboardToken(KeyboardToken)+0x16c>
c00155f2:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00155f8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ff:	66 3d 15 03          	cmp    ax,0x315
c0015603:	75 0a                	jne    c001560f <sendKeyboardToken(KeyboardToken)+0x17f>
c0015605:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001560b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001560f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015612:	66 3d 16 03          	cmp    ax,0x316
c0015616:	75 0a                	jne    c0015622 <sendKeyboardToken(KeyboardToken)+0x192>
c0015618:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001561e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015622:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015625:	66 3d 17 03          	cmp    ax,0x317
c0015629:	75 0a                	jne    c0015635 <sendKeyboardToken(KeyboardToken)+0x1a5>
c001562b:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015631:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015635:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015638:	66 3d 18 03          	cmp    ax,0x318
c001563c:	75 0a                	jne    c0015648 <sendKeyboardToken(KeyboardToken)+0x1b8>
c001563e:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015644:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015648:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001564b:	66 3d 19 03          	cmp    ax,0x319
c001564f:	75 0a                	jne    c001565b <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015651:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015657:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001565b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001565e:	66 3d 00 02          	cmp    ax,0x200
c0015662:	75 2c                	jne    c0015690 <sendKeyboardToken(KeyboardToken)+0x200>
c0015664:	a0 e0 c7 02 c0       	mov    al,ds:0xc002c7e0
c0015669:	83 f0 01             	xor    eax,0x1
c001566c:	84 c0                	test   al,al
c001566e:	74 20                	je     c0015690 <sendKeyboardToken(KeyboardToken)+0x200>
c0015670:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c0015675:	6a 01                	push   0x1
c0015677:	6a 00                	push   0x0
c0015679:	68 6c 53 01 c0       	push   0xc001536c
c001567e:	50                   	push   eax
c001567f:	e8 a8 70 00 00       	call   c001c72c <Process::createThread(void (*)(void*), void*, int)>
c0015684:	83 c4 10             	add    esp,0x10
c0015687:	c6 05 e0 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c7e0,0x1
c001568e:	eb 33                	jmp    c00156c3 <sendKeyboardToken(KeyboardToken)+0x233>
c0015690:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015693:	66 3d 01 02          	cmp    ax,0x201
c0015697:	75 2a                	jne    c00156c3 <sendKeyboardToken(KeyboardToken)+0x233>
c0015699:	a0 e0 c7 02 c0       	mov    al,ds:0xc002c7e0
c001569e:	83 f0 01             	xor    eax,0x1
c00156a1:	84 c0                	test   al,al
c00156a3:	74 1e                	je     c00156c3 <sendKeyboardToken(KeyboardToken)+0x233>
c00156a5:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c00156aa:	6a 01                	push   0x1
c00156ac:	6a 00                	push   0x0
c00156ae:	68 c8 53 01 c0       	push   0xc00153c8
c00156b3:	50                   	push   eax
c00156b4:	e8 73 70 00 00       	call   c001c72c <Process::createThread(void (*)(void*), void*, int)>
c00156b9:	83 c4 10             	add    esp,0x10
c00156bc:	c6 05 e0 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c7e0,0x1
c00156c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c6:	66 3d 1d 03          	cmp    ax,0x31d
c00156ca:	75 06                	jne    c00156d2 <sendKeyboardToken(KeyboardToken)+0x242>
c00156cc:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00156d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d5:	66 3d 1c 03          	cmp    ax,0x31c
c00156d9:	75 06                	jne    c00156e1 <sendKeyboardToken(KeyboardToken)+0x251>
c00156db:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00156e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e4:	66 3d 1b 03          	cmp    ax,0x31b
c00156e8:	75 06                	jne    c00156f0 <sendKeyboardToken(KeyboardToken)+0x260>
c00156ea:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00156f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f3:	66 3d 1e 03          	cmp    ax,0x31e
c00156f7:	75 06                	jne    c00156ff <sendKeyboardToken(KeyboardToken)+0x26f>
c00156f9:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00156ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015702:	66 3d 1f 03          	cmp    ax,0x31f
c0015706:	75 06                	jne    c001570e <sendKeyboardToken(KeyboardToken)+0x27e>
c0015708:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001570e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015711:	66 3d 1a 03          	cmp    ax,0x31a
c0015715:	75 06                	jne    c001571d <sendKeyboardToken(KeyboardToken)+0x28d>
c0015717:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001571d:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015721:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015724:	83 f0 01             	xor    eax,0x1
c0015727:	84 c0                	test   al,al
c0015729:	74 77                	je     c00157a2 <sendKeyboardToken(KeyboardToken)+0x312>
c001572b:	a0 e1 c4 02 c0       	mov    al,ds:0xc002c4e1
c0015730:	84 c0                	test   al,al
c0015732:	74 41                	je     c0015775 <sendKeyboardToken(KeyboardToken)+0x2e5>
c0015734:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015738:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001573c:	74 2b                	je     c0015769 <sendKeyboardToken(KeyboardToken)+0x2d9>
c001573e:	8b 15 e4 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7e4
c0015744:	89 d0                	mov    eax,edx
c0015746:	c1 e0 02             	shl    eax,0x2
c0015749:	01 d0                	add    eax,edx
c001574b:	01 c0                	add    eax,eax
c001574d:	a3 e4 c7 02 c0       	mov    ds:0xc002c7e4,eax
c0015752:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015755:	0f b7 c0             	movzx  eax,ax
c0015758:	8d 50 d0             	lea    edx,[eax-0x30]
c001575b:	a1 e4 c7 02 c0       	mov    eax,ds:0xc002c7e4
c0015760:	01 d0                	add    eax,edx
c0015762:	a3 e4 c7 02 c0       	mov    ds:0xc002c7e4,eax
c0015767:	eb 6d                	jmp    c00157d6 <sendKeyboardToken(KeyboardToken)+0x346>
c0015769:	c7 05 e4 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c7e4,0x0
c0015773:	eb 61                	jmp    c00157d6 <sendKeyboardToken(KeyboardToken)+0x346>
c0015775:	a1 e4 c7 02 c0       	mov    eax,ds:0xc002c7e4
c001577a:	85 c0                	test   eax,eax
c001577c:	74 18                	je     c0015796 <sendKeyboardToken(KeyboardToken)+0x306>
c001577e:	a1 e4 c7 02 c0       	mov    eax,ds:0xc002c7e4
c0015783:	0f b6 c0             	movzx  eax,al
c0015786:	83 ec 0c             	sub    esp,0xc
c0015789:	50                   	push   eax
c001578a:	e8 95 fc ff ff       	call   c0015424 <sendKeyToTerminal(unsigned char)>
c001578f:	83 c4 10             	add    esp,0x10
c0015792:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015796:	c7 05 e4 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c7e4,0x0
c00157a0:	eb 34                	jmp    c00157d6 <sendKeyboardToken(KeyboardToken)+0x346>
c00157a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a5:	66 3d 01 01          	cmp    ax,0x101
c00157a9:	75 2b                	jne    c00157d6 <sendKeyboardToken(KeyboardToken)+0x346>
c00157ab:	a1 e4 c7 02 c0       	mov    eax,ds:0xc002c7e4
c00157b0:	85 c0                	test   eax,eax
c00157b2:	74 18                	je     c00157cc <sendKeyboardToken(KeyboardToken)+0x33c>
c00157b4:	a1 e4 c7 02 c0       	mov    eax,ds:0xc002c7e4
c00157b9:	0f b6 c0             	movzx  eax,al
c00157bc:	83 ec 0c             	sub    esp,0xc
c00157bf:	50                   	push   eax
c00157c0:	e8 5f fc ff ff       	call   c0015424 <sendKeyToTerminal(unsigned char)>
c00157c5:	83 c4 10             	add    esp,0x10
c00157c8:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00157cc:	c7 05 e4 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c7e4,0x0
c00157d6:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00157d9:	83 f0 01             	xor    eax,0x1
c00157dc:	84 c0                	test   al,al
c00157de:	74 4c                	je     c001582c <sendKeyboardToken(KeyboardToken)+0x39c>
c00157e0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00157e3:	83 f0 01             	xor    eax,0x1
c00157e6:	84 c0                	test   al,al
c00157e8:	74 42                	je     c001582c <sendKeyboardToken(KeyboardToken)+0x39c>
c00157ea:	a0 e0 c4 02 c0       	mov    al,ds:0xc002c4e0
c00157ef:	83 f0 01             	xor    eax,0x1
c00157f2:	84 c0                	test   al,al
c00157f4:	74 36                	je     c001582c <sendKeyboardToken(KeyboardToken)+0x39c>
c00157f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f9:	66 83 f8 1f          	cmp    ax,0x1f
c00157fd:	76 09                	jbe    c0015808 <sendKeyboardToken(KeyboardToken)+0x378>
c00157ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015802:	66 83 f8 7e          	cmp    ax,0x7e
c0015806:	76 12                	jbe    c001581a <sendKeyboardToken(KeyboardToken)+0x38a>
c0015808:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580b:	66 83 f8 0a          	cmp    ax,0xa
c001580f:	74 09                	je     c001581a <sendKeyboardToken(KeyboardToken)+0x38a>
c0015811:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015814:	66 83 f8 08          	cmp    ax,0x8
c0015818:	75 12                	jne    c001582c <sendKeyboardToken(KeyboardToken)+0x39c>
c001581a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581d:	0f b6 c0             	movzx  eax,al
c0015820:	83 ec 0c             	sub    esp,0xc
c0015823:	50                   	push   eax
c0015824:	e8 fb fb ff ff       	call   c0015424 <sendKeyToTerminal(unsigned char)>
c0015829:	83 c4 10             	add    esp,0x10
c001582c:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001582f:	83 f0 01             	xor    eax,0x1
c0015832:	84 c0                	test   al,al
c0015834:	74 4f                	je     c0015885 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015836:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015839:	83 f0 01             	xor    eax,0x1
c001583c:	84 c0                	test   al,al
c001583e:	74 45                	je     c0015885 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015840:	a0 e0 c4 02 c0       	mov    al,ds:0xc002c4e0
c0015845:	84 c0                	test   al,al
c0015847:	74 3c                	je     c0015885 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015849:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001584c:	66 83 f8 3f          	cmp    ax,0x3f
c0015850:	76 33                	jbe    c0015885 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015852:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015855:	66 83 f8 7f          	cmp    ax,0x7f
c0015859:	77 2a                	ja     c0015885 <sendKeyboardToken(KeyboardToken)+0x3f5>
c001585b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585e:	88 c2                	mov    dl,al
c0015860:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015863:	66 83 f8 5f          	cmp    ax,0x5f
c0015867:	76 04                	jbe    c001586d <sendKeyboardToken(KeyboardToken)+0x3dd>
c0015869:	b0 20                	mov    al,0x20
c001586b:	eb 02                	jmp    c001586f <sendKeyboardToken(KeyboardToken)+0x3df>
c001586d:	b0 00                	mov    al,0x0
c001586f:	29 c2                	sub    edx,eax
c0015871:	88 d0                	mov    al,dl
c0015873:	83 e8 40             	sub    eax,0x40
c0015876:	0f b6 c0             	movzx  eax,al
c0015879:	83 ec 0c             	sub    esp,0xc
c001587c:	50                   	push   eax
c001587d:	e8 a2 fb ff ff       	call   c0015424 <sendKeyToTerminal(unsigned char)>
c0015882:	83 c4 10             	add    esp,0x10
c0015885:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015888:	66 3d 00 03          	cmp    ax,0x300
c001588c:	75 0f                	jne    c001589d <sendKeyboardToken(KeyboardToken)+0x40d>
c001588e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015891:	83 f0 01             	xor    eax,0x1
c0015894:	84 c0                	test   al,al
c0015896:	74 05                	je     c001589d <sendKeyboardToken(KeyboardToken)+0x40d>
c0015898:	e8 78 b0 ff ff       	call   c0010915 <doTerminalCycle()>
c001589d:	90                   	nop
c001589e:	c9                   	leave  
c001589f:	c3                   	ret    

c00158a0 <clearInternalKeybuffer(VgaText*)>:
c00158a0:	55                   	push   ebp
c00158a1:	89 e5                	mov    ebp,esp
c00158a3:	83 ec 08             	sub    esp,0x8
c00158a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a9:	05 34 11 00 00       	add    eax,0x1134
c00158ae:	83 ec 0c             	sub    esp,0xc
c00158b1:	50                   	push   eax
c00158b2:	e8 f1 ad fe ff       	call   c00006a8 <strlen>
c00158b7:	83 c4 10             	add    esp,0x10
c00158ba:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00158bd:	81 c2 34 11 00 00    	add    edx,0x1134
c00158c3:	83 ec 04             	sub    esp,0x4
c00158c6:	50                   	push   eax
c00158c7:	6a 00                	push   0x0
c00158c9:	52                   	push   edx
c00158ca:	e8 bc ad fe ff       	call   c000068b <memset>
c00158cf:	83 c4 10             	add    esp,0x10
c00158d2:	90                   	nop
c00158d3:	c9                   	leave  
c00158d4:	c3                   	ret    

c00158d5 <readKeyboard(VgaText*, char*, unsigned long)>:
c00158d5:	55                   	push   ebp
c00158d6:	89 e5                	mov    ebp,esp
c00158d8:	83 ec 18             	sub    esp,0x18
c00158db:	fb                   	sti    
c00158dc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00158e3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00158e7:	0f 84 8a 00 00 00    	je     c0015977 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c00158ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f0:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00158f6:	84 c0                	test   al,al
c00158f8:	75 11                	jne    c001590b <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c00158fa:	e8 fb 6c 00 00       	call   c001c5fa <lockScheduler()>
c00158ff:	e8 32 70 00 00       	call   c001c936 <schedule()>
c0015904:	e8 f3 6c 00 00       	call   c001c5fc <unlockScheduler()>
c0015909:	eb e2                	jmp    c00158ed <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c001590b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001590e:	8d 50 01             	lea    edx,[eax+0x1]
c0015911:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015914:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015917:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c001591d:	88 10                	mov    BYTE PTR [eax],dl
c001591f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015922:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015928:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001592b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001592e:	05 34 11 00 00       	add    eax,0x1134
c0015933:	83 ec 0c             	sub    esp,0xc
c0015936:	50                   	push   eax
c0015937:	e8 6c ad fe ff       	call   c00006a8 <strlen>
c001593c:	83 c4 10             	add    esp,0x10
c001593f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015942:	81 c2 34 11 00 00    	add    edx,0x1134
c0015948:	8d 4a 01             	lea    ecx,[edx+0x1]
c001594b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001594e:	81 c2 34 11 00 00    	add    edx,0x1134
c0015954:	83 ec 04             	sub    esp,0x4
c0015957:	50                   	push   eax
c0015958:	51                   	push   ecx
c0015959:	52                   	push   edx
c001595a:	e8 be ac fe ff       	call   c000061d <memmove>
c001595f:	83 c4 10             	add    esp,0x10
c0015962:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015965:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015968:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001596c:	0f 85 71 ff ff ff    	jne    c00158e3 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015972:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015975:	eb 03                	jmp    c001597a <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015977:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001597a:	c9                   	leave  
c001597b:	c3                   	ret    

c001597c <Keyboard::Keyboard(char const*)>:
c001597c:	83 ec 0c             	sub    esp,0xc
c001597f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015983:	83 ec 08             	sub    esp,0x8
c0015986:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001598a:	50                   	push   eax
c001598b:	e8 f0 e2 ff ff       	call   c0013c80 <Device::Device(char const*)>
c0015990:	83 c4 10             	add    esp,0x10
c0015993:	ba f4 91 02 c0       	mov    edx,0xc00291f4
c0015998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001599c:	89 10                	mov    DWORD PTR [eax],edx
c001599e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159a2:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00159ac:	c6 05 c4 c3 02 c0 01 	mov    BYTE PTR ds:0xc002c3c4,0x1
c00159b3:	90                   	nop
c00159b4:	83 c4 0c             	add    esp,0xc
c00159b7:	c3                   	ret    

c00159b8 <Keyboard::~Keyboard()>:
c00159b8:	83 ec 0c             	sub    esp,0xc
c00159bb:	ba f4 91 02 c0       	mov    edx,0xc00291f4
c00159c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159c4:	89 10                	mov    DWORD PTR [eax],edx
c00159c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159ca:	83 ec 0c             	sub    esp,0xc
c00159cd:	50                   	push   eax
c00159ce:	e8 8f df ff ff       	call   c0013962 <Device::~Device()>
c00159d3:	83 c4 10             	add    esp,0x10
c00159d6:	90                   	nop
c00159d7:	83 c4 0c             	add    esp,0xc
c00159da:	c3                   	ret    
c00159db:	90                   	nop

c00159dc <Keyboard::~Keyboard()>:
c00159dc:	83 ec 0c             	sub    esp,0xc
c00159df:	83 ec 0c             	sub    esp,0xc
c00159e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159e6:	e8 cd ff ff ff       	call   c00159b8 <Keyboard::~Keyboard()>
c00159eb:	83 c4 10             	add    esp,0x10
c00159ee:	83 ec 08             	sub    esp,0x8
c00159f1:	68 5c 01 00 00       	push   0x15c
c00159f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159fa:	e8 c2 cb ff ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c00159ff:	83 c4 10             	add    esp,0x10
c0015a02:	83 c4 0c             	add    esp,0xc
c0015a05:	c3                   	ret    

c0015a06 <LogicalDisk::close(int, int, void*)>:
c0015a06:	83 c8 ff             	or     eax,0xffffffff
c0015a09:	c3                   	ret    

c0015a0a <LogicalDisk::~LogicalDisk()>:
c0015a0a:	83 ec 0c             	sub    esp,0xc
c0015a0d:	ba a4 92 02 c0       	mov    edx,0xc00292a4
c0015a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a16:	89 10                	mov    DWORD PTR [eax],edx
c0015a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a1c:	83 ec 0c             	sub    esp,0xc
c0015a1f:	50                   	push   eax
c0015a20:	e8 3d df ff ff       	call   c0013962 <Device::~Device()>
c0015a25:	83 c4 10             	add    esp,0x10
c0015a28:	90                   	nop
c0015a29:	83 c4 0c             	add    esp,0xc
c0015a2c:	c3                   	ret    
c0015a2d:	90                   	nop

c0015a2e <LogicalDisk::~LogicalDisk()>:
c0015a2e:	83 ec 0c             	sub    esp,0xc
c0015a31:	83 ec 0c             	sub    esp,0xc
c0015a34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a38:	e8 cd ff ff ff       	call   c0015a0a <LogicalDisk::~LogicalDisk()>
c0015a3d:	83 c4 10             	add    esp,0x10
c0015a40:	83 ec 08             	sub    esp,0x8
c0015a43:	68 74 01 00 00       	push   0x174
c0015a48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a4c:	e8 70 cb ff ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c0015a51:	83 c4 10             	add    esp,0x10
c0015a54:	83 c4 0c             	add    esp,0xc
c0015a57:	c3                   	ret    

c0015a58 <LogicalDisk::open(int, int, void*)>:
c0015a58:	83 ec 18             	sub    esp,0x18
c0015a5b:	68 20 92 02 c0       	push   0xc0029220
c0015a60:	e8 17 3b 00 00       	call   c001957c <Krnl::panic(char const*)>
c0015a65:	83 c8 ff             	or     eax,0xffffffff
c0015a68:	83 c4 1c             	add    esp,0x1c
c0015a6b:	c3                   	ret    

c0015a6c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015a6c:	53                   	push   ebx
c0015a6d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015a71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015a75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015a79:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015a7f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015a85:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015a8b:	77 10                	ja     c0015a9d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015a8d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015a93:	89 d3                	mov    ebx,edx
c0015a95:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015a9b:	72 05                	jb     c0015aa2 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015a9d:	83 c8 ff             	or     eax,0xffffffff
c0015aa0:	89 c2                	mov    edx,eax
c0015aa2:	5b                   	pop    ebx
c0015aa3:	c3                   	ret    

c0015aa4 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015aa4:	56                   	push   esi
c0015aa5:	83 c8 ff             	or     eax,0xffffffff
c0015aa8:	53                   	push   ebx
c0015aa9:	89 c2                	mov    edx,eax
c0015aab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015aaf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015ab3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015ab7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015abd:	77 27                	ja     c0015ae6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015abf:	89 d8                	mov    eax,ebx
c0015ac1:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015ac7:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015acd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ad2:	89 c2                	mov    edx,eax
c0015ad4:	73 10                	jae    c0015ae6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015ad6:	89 c8                	mov    eax,ecx
c0015ad8:	89 da                	mov    edx,ebx
c0015ada:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015ae0:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015ae6:	5b                   	pop    ebx
c0015ae7:	5e                   	pop    esi
c0015ae8:	c3                   	ret    
c0015ae9:	90                   	nop

c0015aea <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015aea:	83 ec 1c             	sub    esp,0x1c
c0015aed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015af1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015af5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015af9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015afd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015b01:	89 04 24             	mov    DWORD PTR [esp],eax
c0015b04:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015b08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015b0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b10:	83 ec 08             	sub    esp,0x8
c0015b13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b17:	50                   	push   eax
c0015b18:	e8 63 e1 ff ff       	call   c0013c80 <Device::Device(char const*)>
c0015b1d:	83 c4 10             	add    esp,0x10
c0015b20:	ba a4 92 02 c0       	mov    edx,0xc00292a4
c0015b25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b29:	89 10                	mov    DWORD PTR [eax],edx
c0015b2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b2f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015b36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b3a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015b41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b45:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015b4f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015b53:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015b57:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015b5b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015b61:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015b67:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015b6b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015b6e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015b72:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015b78:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015b7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b82:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015b86:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015b8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b90:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015b9a:	90                   	nop
c0015b9b:	83 c4 1c             	add    esp,0x1c
c0015b9e:	c3                   	ret    
c0015b9f:	90                   	nop

c0015ba0 <LogicalDisk::assignDriveLetter()>:
c0015ba0:	55                   	push   ebp
c0015ba1:	57                   	push   edi
c0015ba2:	56                   	push   esi
c0015ba3:	53                   	push   ebx
c0015ba4:	83 ec 14             	sub    esp,0x14
c0015ba7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015bab:	8b 3d 00 c8 02 c0    	mov    edi,DWORD PTR ds:0xc002c800
c0015bb1:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015bb7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015bbb:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015bc1:	8b 3d 04 c8 02 c0    	mov    edi,DWORD PTR ds:0xc002c804
c0015bc7:	3c 01                	cmp    al,0x1
c0015bc9:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015bcd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015bd1:	19 c0                	sbb    eax,eax
c0015bd3:	83 e0 02             	and    eax,0x2
c0015bd6:	83 c0 41             	add    eax,0x41
c0015bd9:	0f be e8             	movsx  ebp,al
c0015bdc:	3c 43                	cmp    al,0x43
c0015bde:	75 10                	jne    c0015bf0 <LogicalDisk::assignDriveLetter()+0x50>
c0015be0:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015be7:	75 5d                	jne    c0015c46 <LogicalDisk::assignDriveLetter()+0xa6>
c0015be9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015bee:	75 56                	jne    c0015c46 <LogicalDisk::assignDriveLetter()+0xa6>
c0015bf0:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015bf3:	ba 01 00 00 00       	mov    edx,0x1
c0015bf8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015bfc:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015c00:	d3 e2                	shl    edx,cl
c0015c02:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015c06:	89 d7                	mov    edi,edx
c0015c08:	89 d6                	mov    esi,edx
c0015c0a:	c1 ff 1f             	sar    edi,0x1f
c0015c0d:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015c11:	21 f9                	and    ecx,edi
c0015c13:	09 d1                	or     ecx,edx
c0015c15:	75 2f                	jne    c0015c46 <LogicalDisk::assignDriveLetter()+0xa6>
c0015c17:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015c1f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015c25:	09 f2                	or     edx,esi
c0015c27:	89 15 00 c8 02 c0    	mov    DWORD PTR ds:0xc002c800,edx
c0015c2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015c31:	09 fa                	or     edx,edi
c0015c33:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015c37:	89 15 04 c8 02 c0    	mov    DWORD PTR ds:0xc002c804,edx
c0015c3d:	89 1c bd 20 c8 02 c0 	mov    DWORD PTR [edi*4-0x3ffd37e0],ebx
c0015c44:	eb 08                	jmp    c0015c4e <LogicalDisk::assignDriveLetter()+0xae>
c0015c46:	45                   	inc    ebp
c0015c47:	40                   	inc    eax
c0015c48:	3c 5b                	cmp    al,0x5b
c0015c4a:	75 90                	jne    c0015bdc <LogicalDisk::assignDriveLetter()+0x3c>
c0015c4c:	31 c0                	xor    eax,eax
c0015c4e:	83 c4 14             	add    esp,0x14
c0015c51:	5b                   	pop    ebx
c0015c52:	5e                   	pop    esi
c0015c53:	5f                   	pop    edi
c0015c54:	5d                   	pop    ebp
c0015c55:	c3                   	ret    

c0015c56 <LogicalDisk::mount()>:
c0015c56:	56                   	push   esi
c0015c57:	53                   	push   ebx
c0015c58:	51                   	push   ecx
c0015c59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015c5d:	8b 1d 88 c3 02 c0    	mov    ebx,DWORD PTR ds:0xc002c388
c0015c63:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015c6d:	85 db                	test   ebx,ebx
c0015c6f:	74 50                	je     c0015cc1 <LogicalDisk::mount()+0x6b>
c0015c71:	e8 6f 69 00 00       	call   c001c5e5 <getIRQNestingLevel()>
c0015c76:	52                   	push   edx
c0015c77:	52                   	push   edx
c0015c78:	50                   	push   eax
c0015c79:	68 44 92 02 c0       	push   0xc0029244
c0015c7e:	e8 1e ca ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0015c83:	83 c4 0c             	add    esp,0xc
c0015c86:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015c8d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015c8f:	83 e8 41             	sub    eax,0x41
c0015c92:	50                   	push   eax
c0015c93:	56                   	push   esi
c0015c94:	53                   	push   ebx
c0015c95:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015c98:	83 c4 10             	add    esp,0x10
c0015c9b:	84 c0                	test   al,al
c0015c9d:	74 08                	je     c0015ca7 <LogicalDisk::mount()+0x51>
c0015c9f:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015ca5:	eb 1c                	jmp    c0015cc3 <LogicalDisk::mount()+0x6d>
c0015ca7:	e8 39 69 00 00       	call   c001c5e5 <getIRQNestingLevel()>
c0015cac:	51                   	push   ecx
c0015cad:	51                   	push   ecx
c0015cae:	50                   	push   eax
c0015caf:	68 5f 92 02 c0       	push   0xc002925f
c0015cb4:	e8 e8 c9 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0015cb9:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015cbc:	83 c4 10             	add    esp,0x10
c0015cbf:	eb ac                	jmp    c0015c6d <LogicalDisk::mount()+0x17>
c0015cc1:	31 c0                	xor    eax,eax
c0015cc3:	5a                   	pop    edx
c0015cc4:	5b                   	pop    ebx
c0015cc5:	5e                   	pop    esi
c0015cc6:	c3                   	ret    
c0015cc7:	90                   	nop

c0015cc8 <LogicalDisk::unmount()>:
c0015cc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ccc:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015cd6:	c3                   	ret    
c0015cd7:	90                   	nop

c0015cd8 <LogicalDisk::unassignDriveLetter()>:
c0015cd8:	57                   	push   edi
c0015cd9:	56                   	push   esi
c0015cda:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015cde:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015ce5:	84 c9                	test   cl,cl
c0015ce7:	75 0f                	jne    c0015cf8 <LogicalDisk::unassignDriveLetter()+0x20>
c0015ce9:	c7 44 24 0c 7a 92 02 c0 	mov    DWORD PTR [esp+0xc],0xc002927a
c0015cf1:	5e                   	pop    esi
c0015cf2:	5f                   	pop    edi
c0015cf3:	e9 84 38 00 00       	jmp    c001957c <Krnl::panic(char const*)>
c0015cf8:	83 e9 41             	sub    ecx,0x41
c0015cfb:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015d02:	b8 01 00 00 00       	mov    eax,0x1
c0015d07:	c7 04 8d 20 c8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd37e0],0x0
c0015d12:	d3 e0                	shl    eax,cl
c0015d14:	89 c7                	mov    edi,eax
c0015d16:	f7 d0                	not    eax
c0015d18:	c1 ff 1f             	sar    edi,0x1f
c0015d1b:	21 05 00 c8 02 c0    	and    DWORD PTR ds:0xc002c800,eax
c0015d21:	89 fe                	mov    esi,edi
c0015d23:	f7 d6                	not    esi
c0015d25:	21 35 04 c8 02 c0    	and    DWORD PTR ds:0xc002c804,esi
c0015d2b:	5e                   	pop    esi
c0015d2c:	5f                   	pop    edi
c0015d2d:	c3                   	ret    

c0015d2e <LogicalDisk::read(unsigned long long, int, void*)>:
c0015d2e:	57                   	push   edi
c0015d2f:	56                   	push   esi
c0015d30:	53                   	push   ebx
c0015d31:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015d35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d39:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015d3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015d41:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015d47:	77 41                	ja     c0015d8a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015d49:	99                   	cdq    
c0015d4a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015d50:	01 c8                	add    eax,ecx
c0015d52:	11 da                	adc    edx,ebx
c0015d54:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015d5a:	19 d7                	sbb    edi,edx
c0015d5c:	72 33                	jb     c0015d91 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015d5e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015d64:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015d6a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015d6e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015d72:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015d78:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015d82:	5b                   	pop    ebx
c0015d83:	5e                   	pop    esi
c0015d84:	5f                   	pop    edi
c0015d85:	e9 f8 09 00 00       	jmp    c0016782 <VCache::read(unsigned long long, int, void*)>
c0015d8a:	b8 05 00 00 00       	mov    eax,0x5
c0015d8f:	eb 05                	jmp    c0015d96 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015d91:	b8 07 00 00 00       	mov    eax,0x7
c0015d96:	5b                   	pop    ebx
c0015d97:	5e                   	pop    esi
c0015d98:	5f                   	pop    edi
c0015d99:	c3                   	ret    

c0015d9a <LogicalDisk::write(unsigned long long, int, void*)>:
c0015d9a:	57                   	push   edi
c0015d9b:	56                   	push   esi
c0015d9c:	53                   	push   ebx
c0015d9d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015da1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015da5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015da9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015dad:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015db3:	77 41                	ja     c0015df6 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015db5:	99                   	cdq    
c0015db6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015dbc:	01 c8                	add    eax,ecx
c0015dbe:	11 da                	adc    edx,ebx
c0015dc0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015dc6:	19 d7                	sbb    edi,edx
c0015dc8:	72 33                	jb     c0015dfd <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015dca:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015dd0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015dd6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015dda:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015dde:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015de4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015dea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015dee:	5b                   	pop    ebx
c0015def:	5e                   	pop    esi
c0015df0:	5f                   	pop    edi
c0015df1:	e9 a8 08 00 00       	jmp    c001669e <VCache::write(unsigned long long, int, void*)>
c0015df6:	b8 05 00 00 00       	mov    eax,0x5
c0015dfb:	eb 05                	jmp    c0015e02 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015dfd:	b8 07 00 00 00       	mov    eax,0x7
c0015e02:	5b                   	pop    ebx
c0015e03:	5e                   	pop    esi
c0015e04:	5f                   	pop    edi
c0015e05:	c3                   	ret    

c0015e06 <Mouse::Mouse(char const*)>:
c0015e06:	83 ec 0c             	sub    esp,0xc
c0015e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e0d:	83 ec 08             	sub    esp,0x8
c0015e10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e14:	50                   	push   eax
c0015e15:	e8 66 de ff ff       	call   c0013c80 <Device::Device(char const*)>
c0015e1a:	83 c4 10             	add    esp,0x10
c0015e1d:	ba d0 92 02 c0       	mov    edx,0xc00292d0
c0015e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e26:	89 10                	mov    DWORD PTR [eax],edx
c0015e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e2c:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015e36:	90                   	nop
c0015e37:	83 c4 0c             	add    esp,0xc
c0015e3a:	c3                   	ret    
c0015e3b:	90                   	nop

c0015e3c <Mouse::~Mouse()>:
c0015e3c:	83 ec 0c             	sub    esp,0xc
c0015e3f:	ba d0 92 02 c0       	mov    edx,0xc00292d0
c0015e44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e48:	89 10                	mov    DWORD PTR [eax],edx
c0015e4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e4e:	83 ec 0c             	sub    esp,0xc
c0015e51:	50                   	push   eax
c0015e52:	e8 0b db ff ff       	call   c0013962 <Device::~Device()>
c0015e57:	83 c4 10             	add    esp,0x10
c0015e5a:	90                   	nop
c0015e5b:	83 c4 0c             	add    esp,0xc
c0015e5e:	c3                   	ret    
c0015e5f:	90                   	nop

c0015e60 <Mouse::~Mouse()>:
c0015e60:	83 ec 0c             	sub    esp,0xc
c0015e63:	83 ec 0c             	sub    esp,0xc
c0015e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e6a:	e8 cd ff ff ff       	call   c0015e3c <Mouse::~Mouse()>
c0015e6f:	83 c4 10             	add    esp,0x10
c0015e72:	83 ec 08             	sub    esp,0x8
c0015e75:	68 58 01 00 00       	push   0x158
c0015e7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e7e:	e8 3e c7 ff ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c0015e83:	83 c4 10             	add    esp,0x10
c0015e86:	83 c4 0c             	add    esp,0xc
c0015e89:	c3                   	ret    

c0015e8a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015e8a:	55                   	push   ebp
c0015e8b:	57                   	push   edi
c0015e8c:	56                   	push   esi
c0015e8d:	53                   	push   ebx
c0015e8e:	81 ec 28 01 00 00    	sub    esp,0x128
c0015e94:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015e9b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015ea2:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0015ea9:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0015eb0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015eb4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015eb8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015ebf:	e8 b8 de ff ff       	call   c0013d7c <Device::getName()>
c0015ec4:	5a                   	pop    edx
c0015ec5:	59                   	pop    ecx
c0015ec6:	50                   	push   eax
c0015ec7:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015ecb:	55                   	push   ebp
c0015ecc:	e8 59 a8 fe ff       	call   c000072a <strcpy>
c0015ed1:	5b                   	pop    ebx
c0015ed2:	58                   	pop    eax
c0015ed3:	68 f4 92 02 c0       	push   0xc00292f4
c0015ed8:	55                   	push   ebp
c0015ed9:	e8 03 a9 fe ff       	call   c00007e1 <strcat>
c0015ede:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015ee5:	e8 ea 95 ff ff       	call   c000f4d4 <malloc>
c0015eea:	83 c4 0c             	add    esp,0xc
c0015eed:	89 c3                	mov    ebx,eax
c0015eef:	57                   	push   edi
c0015ef0:	56                   	push   esi
c0015ef1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015ef5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015ef9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015f00:	55                   	push   ebp
c0015f01:	50                   	push   eax
c0015f02:	e8 e3 fb ff ff       	call   c0015aea <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015f07:	83 c4 14             	add    esp,0x14
c0015f0a:	53                   	push   ebx
c0015f0b:	e8 90 fc ff ff       	call   c0015ba0 <LogicalDisk::assignDriveLetter()>
c0015f10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f13:	e8 3e fd ff ff       	call   c0015c56 <LogicalDisk::mount()>
c0015f18:	58                   	pop    eax
c0015f19:	5a                   	pop    edx
c0015f1a:	53                   	push   ebx
c0015f1b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015f22:	e8 69 db ff ff       	call   c0013a90 <Device::addChild(Device*)>
c0015f27:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015f2d:	5b                   	pop    ebx
c0015f2e:	5e                   	pop    esi
c0015f2f:	5f                   	pop    edi
c0015f30:	5d                   	pop    ebp
c0015f31:	c3                   	ret    

c0015f32 <createPartitionsForDisk(PhysicalDisk*)>:
c0015f32:	55                   	push   ebp
c0015f33:	57                   	push   edi
c0015f34:	56                   	push   esi
c0015f35:	53                   	push   ebx
c0015f36:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0015f3c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0015f43:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015f49:	3d 00 02 00 00       	cmp    eax,0x200
c0015f4e:	74 27                	je     c0015f77 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0015f50:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0015f56:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0015f5c:	83 ec 10             	sub    esp,0x10
c0015f5f:	0f a4 f7 0a          	shld   edi,esi,0xa
c0015f63:	99                   	cdq    
c0015f64:	c1 e6 0a             	shl    esi,0xa
c0015f67:	52                   	push   edx
c0015f68:	89 fd                	mov    ebp,edi
c0015f6a:	50                   	push   eax
c0015f6b:	55                   	push   ebp
c0015f6c:	56                   	push   esi
c0015f6d:	e8 0a ed 00 00       	call   c0024c7c <__udivdi3>
c0015f72:	e9 b1 00 00 00       	jmp    c0016028 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015f77:	83 ec 0c             	sub    esp,0xc
c0015f7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f7c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0015f80:	56                   	push   esi
c0015f81:	6a 01                	push   0x1
c0015f83:	6a 00                	push   0x0
c0015f85:	6a 00                	push   0x0
c0015f87:	53                   	push   ebx
c0015f88:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015f8b:	83 c4 20             	add    esp,0x20
c0015f8e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0015f96:	75 0a                	jne    c0015fa2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0015f98:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0015fa0:	74 2c                	je     c0015fce <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0015fa2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015fa8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015fae:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015fb4:	83 ec 10             	sub    esp,0x10
c0015fb7:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015fbb:	89 f7                	mov    edi,esi
c0015fbd:	c1 e0 0a             	shl    eax,0xa
c0015fc0:	c1 ff 1f             	sar    edi,0x1f
c0015fc3:	57                   	push   edi
c0015fc4:	56                   	push   esi
c0015fc5:	52                   	push   edx
c0015fc6:	50                   	push   eax
c0015fc7:	e8 b0 ec 00 00       	call   c0024c7c <__udivdi3>
c0015fcc:	eb 5a                	jmp    c0016028 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015fce:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0015fd5:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0015fdc:	83 e1 7f             	and    ecx,0x7f
c0015fdf:	83 e0 7f             	and    eax,0x7f
c0015fe2:	01 c1                	add    ecx,eax
c0015fe4:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0015feb:	83 e0 7f             	and    eax,0x7f
c0015fee:	01 c1                	add    ecx,eax
c0015ff0:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0015ff7:	83 e0 7f             	and    eax,0x7f
c0015ffa:	00 c1                	add    cl,al
c0015ffc:	74 41                	je     c001603f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0015ffe:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016004:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001600a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016010:	83 ec 10             	sub    esp,0x10
c0016013:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016017:	89 f7                	mov    edi,esi
c0016019:	c1 e0 0a             	shl    eax,0xa
c001601c:	c1 ff 1f             	sar    edi,0x1f
c001601f:	57                   	push   edi
c0016020:	56                   	push   esi
c0016021:	52                   	push   edx
c0016022:	50                   	push   eax
c0016023:	e8 54 ec 00 00       	call   c0024c7c <__udivdi3>
c0016028:	83 c4 14             	add    esp,0x14
c001602b:	52                   	push   edx
c001602c:	50                   	push   eax
c001602d:	6a 00                	push   0x0
c001602f:	6a 00                	push   0x0
c0016031:	53                   	push   ebx
c0016032:	e8 53 fe ff ff       	call   c0015e8a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016037:	83 c4 20             	add    esp,0x20
c001603a:	e9 79 01 00 00       	jmp    c00161b8 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001603f:	89 f0                	mov    eax,esi
c0016041:	31 f6                	xor    esi,esi
c0016043:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001604a:	75 02                	jne    c001604e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001604c:	89 f1                	mov    ecx,esi
c001604e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016055:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001605c:	c1 e2 08             	shl    edx,0x8
c001605f:	c1 e7 10             	shl    edi,0x10
c0016062:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001606a:	09 fa                	or     edx,edi
c001606c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016074:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001607b:	83 c0 10             	add    eax,0x10
c001607e:	09 fa                	or     edx,edi
c0016080:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016087:	c1 e7 18             	shl    edi,0x18
c001608a:	09 fa                	or     edx,edi
c001608c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016093:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016097:	c1 e7 10             	shl    edi,0x10
c001609a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00160a1:	c1 e2 08             	shl    edx,0x8
c00160a4:	09 fa                	or     edx,edi
c00160a6:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00160ad:	09 fa                	or     edx,edi
c00160af:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00160b6:	c1 e7 18             	shl    edi,0x18
c00160b9:	09 fa                	or     edx,edi
c00160bb:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00160bf:	46                   	inc    esi
c00160c0:	83 fe 04             	cmp    esi,0x4
c00160c3:	0f 85 7a ff ff ff    	jne    c0016043 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00160c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160cd:	83 f0 01             	xor    eax,0x1
c00160d0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00160d4:	75 57                	jne    c001612d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00160d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00160da:	83 f0 01             	xor    eax,0x1
c00160dd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00160e1:	75 4a                	jne    c001612d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00160e3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00160e7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00160ef:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00160f7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00160fd:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016103:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016109:	0f a4 c2 0a          	shld   edx,eax,0xa
c001610d:	89 f7                	mov    edi,esi
c001610f:	c1 e0 0a             	shl    eax,0xa
c0016112:	c1 ff 1f             	sar    edi,0x1f
c0016115:	57                   	push   edi
c0016116:	56                   	push   esi
c0016117:	52                   	push   edx
c0016118:	50                   	push   eax
c0016119:	e8 5e eb 00 00       	call   c0024c7c <__udivdi3>
c001611e:	83 c4 10             	add    esp,0x10
c0016121:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016125:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016129:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001612d:	84 c9                	test   cl,cl
c001612f:	74 53                	je     c0016184 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016131:	0f b6 c9             	movzx  ecx,cl
c0016134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016138:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001613c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016140:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016148:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001614c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016150:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016154:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016158:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001615c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016160:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016164:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016168:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001616c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016170:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016174:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016178:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001617c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016180:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016184:	31 ed                	xor    ebp,ebp
c0016186:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001618a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001618e:	89 f8                	mov    eax,edi
c0016190:	09 f0                	or     eax,esi
c0016192:	74 1e                	je     c00161b2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016194:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016198:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001619c:	89 d1                	mov    ecx,edx
c001619e:	09 c1                	or     ecx,eax
c00161a0:	74 10                	je     c00161b2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00161a2:	83 ec 0c             	sub    esp,0xc
c00161a5:	57                   	push   edi
c00161a6:	56                   	push   esi
c00161a7:	52                   	push   edx
c00161a8:	50                   	push   eax
c00161a9:	53                   	push   ebx
c00161aa:	e8 db fc ff ff       	call   c0015e8a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00161af:	83 c4 20             	add    esp,0x20
c00161b2:	45                   	inc    ebp
c00161b3:	83 fd 04             	cmp    ebp,0x4
c00161b6:	75 ce                	jne    c0016186 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00161b8:	81 c4 5c 02 00 00    	add    esp,0x25c
c00161be:	5b                   	pop    ebx
c00161bf:	5e                   	pop    esi
c00161c0:	5f                   	pop    edi
c00161c1:	5d                   	pop    ebp
c00161c2:	c3                   	ret    
c00161c3:	90                   	nop

c00161c4 <Serial::Serial(char const*)>:
c00161c4:	83 ec 0c             	sub    esp,0xc
c00161c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161cb:	83 ec 08             	sub    esp,0x8
c00161ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161d2:	50                   	push   eax
c00161d3:	e8 a8 da ff ff       	call   c0013c80 <Device::Device(char const*)>
c00161d8:	83 c4 10             	add    esp,0x10
c00161db:	ba 08 93 02 c0       	mov    edx,0xc0029308
c00161e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161e4:	89 10                	mov    DWORD PTR [eax],edx
c00161e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161ea:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00161f4:	90                   	nop
c00161f5:	83 c4 0c             	add    esp,0xc
c00161f8:	c3                   	ret    
c00161f9:	90                   	nop

c00161fa <Serial::~Serial()>:
c00161fa:	83 ec 0c             	sub    esp,0xc
c00161fd:	ba 08 93 02 c0       	mov    edx,0xc0029308
c0016202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016206:	89 10                	mov    DWORD PTR [eax],edx
c0016208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001620c:	83 ec 0c             	sub    esp,0xc
c001620f:	50                   	push   eax
c0016210:	e8 4d d7 ff ff       	call   c0013962 <Device::~Device()>
c0016215:	83 c4 10             	add    esp,0x10
c0016218:	90                   	nop
c0016219:	83 c4 0c             	add    esp,0xc
c001621c:	c3                   	ret    
c001621d:	90                   	nop

c001621e <Serial::~Serial()>:
c001621e:	83 ec 0c             	sub    esp,0xc
c0016221:	83 ec 0c             	sub    esp,0xc
c0016224:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016228:	e8 cd ff ff ff       	call   c00161fa <Serial::~Serial()>
c001622d:	83 c4 10             	add    esp,0x10
c0016230:	83 ec 08             	sub    esp,0x8
c0016233:	68 58 01 00 00       	push   0x158
c0016238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001623c:	e8 80 c3 ff ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c0016241:	83 c4 10             	add    esp,0x10
c0016244:	83 c4 0c             	add    esp,0xc
c0016247:	c3                   	ret    

c0016248 <Timer::Timer(char const*)>:
c0016248:	83 ec 0c             	sub    esp,0xc
c001624b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001624f:	83 ec 08             	sub    esp,0x8
c0016252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016256:	50                   	push   eax
c0016257:	e8 24 da ff ff       	call   c0013c80 <Device::Device(char const*)>
c001625c:	83 c4 10             	add    esp,0x10
c001625f:	ba 4c 93 02 c0       	mov    edx,0xc002934c
c0016264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016268:	89 10                	mov    DWORD PTR [eax],edx
c001626a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001626e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016278:	90                   	nop
c0016279:	83 c4 0c             	add    esp,0xc
c001627c:	c3                   	ret    
c001627d:	90                   	nop

c001627e <Timer::~Timer()>:
c001627e:	83 ec 0c             	sub    esp,0xc
c0016281:	ba 4c 93 02 c0       	mov    edx,0xc002934c
c0016286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001628a:	89 10                	mov    DWORD PTR [eax],edx
c001628c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016290:	83 ec 0c             	sub    esp,0xc
c0016293:	50                   	push   eax
c0016294:	e8 c9 d6 ff ff       	call   c0013962 <Device::~Device()>
c0016299:	83 c4 10             	add    esp,0x10
c001629c:	90                   	nop
c001629d:	83 c4 0c             	add    esp,0xc
c00162a0:	c3                   	ret    
c00162a1:	90                   	nop

c00162a2 <Timer::~Timer()>:
c00162a2:	83 ec 0c             	sub    esp,0xc
c00162a5:	83 ec 0c             	sub    esp,0xc
c00162a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162ac:	e8 cd ff ff ff       	call   c001627e <Timer::~Timer()>
c00162b1:	83 c4 10             	add    esp,0x10
c00162b4:	83 ec 08             	sub    esp,0x8
c00162b7:	68 5c 01 00 00       	push   0x15c
c00162bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162c0:	e8 fc c2 ff ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c00162c5:	83 c4 10             	add    esp,0x10
c00162c8:	83 c4 0c             	add    esp,0xc
c00162cb:	c3                   	ret    

c00162cc <Timer::read()>:
c00162cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162d0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00162d6:	c3                   	ret    

c00162d7 <timerHandler(unsigned long long)>:
c00162d7:	55                   	push   ebp
c00162d8:	57                   	push   edi
c00162d9:	56                   	push   esi
c00162da:	53                   	push   ebx
c00162db:	83 ec 0c             	sub    esp,0xc
c00162de:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00162e2:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00162e6:	01 35 90 c8 02 c0    	add    DWORD PTR ds:0xc002c890,esi
c00162ec:	11 3d 94 c8 02 c0    	adc    DWORD PTR ds:0xc002c894,edi
c00162f2:	80 3d 2d c2 02 c0 00 	cmp    BYTE PTR ds:0xc002c22d,0x0
c00162f9:	0f 84 07 01 00 00    	je     c0016406 <timerHandler(unsigned long long)+0x12f>
c00162ff:	e8 1d 63 00 00       	call   c001c621 <lockStuff()>
c0016304:	83 ec 0c             	sub    esp,0xc
c0016307:	68 3c d7 02 c0       	push   0xc002d73c
c001630c:	e8 dd 09 01 00       	call   c0026cee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016311:	c7 04 24 3c d7 02 c0 	mov    DWORD PTR [esp],0xc002d73c
c0016318:	89 c3                	mov    ebx,eax
c001631a:	e8 d7 09 01 00       	call   c0026cf6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001631f:	83 c4 10             	add    esp,0x10
c0016322:	84 c0                	test   al,al
c0016324:	74 60                	je     c0016386 <timerHandler(unsigned long long)+0xaf>
c0016326:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001632c:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c001632f:	85 c0                	test   eax,eax
c0016331:	0f 85 91 00 00 00    	jne    c00163c8 <timerHandler(unsigned long long)+0xf1>
c0016337:	e9 be 00 00 00       	jmp    c00163fa <timerHandler(unsigned long long)+0x123>
c001633c:	83 ec 0c             	sub    esp,0xc
c001633f:	55                   	push   ebp
c0016340:	e8 cd 68 00 00       	call   c001cc12 <unblockTask(ThreadControlBlock*)>
c0016345:	83 c4 10             	add    esp,0x10
c0016348:	39 eb                	cmp    ebx,ebp
c001634a:	75 12                	jne    c001635e <timerHandler(unsigned long long)+0x87>
c001634c:	83 ec 0c             	sub    esp,0xc
c001634f:	68 3c d7 02 c0       	push   0xc002d73c
c0016354:	e8 95 09 01 00       	call   c0026cee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016359:	89 c3                	mov    ebx,eax
c001635b:	83 c4 10             	add    esp,0x10
c001635e:	83 ec 0c             	sub    esp,0xc
c0016361:	68 3c d7 02 c0       	push   0xc002d73c
c0016366:	e8 8b 09 01 00       	call   c0026cf6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001636b:	83 c4 10             	add    esp,0x10
c001636e:	84 c0                	test   al,al
c0016370:	75 b4                	jne    c0016326 <timerHandler(unsigned long long)+0x4f>
c0016372:	83 ec 0c             	sub    esp,0xc
c0016375:	68 3c d7 02 c0       	push   0xc002d73c
c001637a:	e8 6f 09 01 00       	call   c0026cee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001637f:	83 c4 10             	add    esp,0x10
c0016382:	39 d8                	cmp    eax,ebx
c0016384:	74 a0                	je     c0016326 <timerHandler(unsigned long long)+0x4f>
c0016386:	83 ec 0c             	sub    esp,0xc
c0016389:	68 3c d7 02 c0       	push   0xc002d73c
c001638e:	e8 5b 09 01 00       	call   c0026cee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016393:	c7 04 24 3c d7 02 c0 	mov    DWORD PTR [esp],0xc002d73c
c001639a:	89 c5                	mov    ebp,eax
c001639c:	e8 71 09 01 00       	call   c0026d12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00163a1:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c00163a4:	83 c4 10             	add    esp,0x10
c00163a7:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c00163aa:	39 15 90 c8 02 c0    	cmp    DWORD PTR ds:0xc002c890,edx
c00163b0:	a1 94 c8 02 c0       	mov    eax,ds:0xc002c894
c00163b5:	19 c8                	sbb    eax,ecx
c00163b7:	73 83                	jae    c001633c <timerHandler(unsigned long long)+0x65>
c00163b9:	50                   	push   eax
c00163ba:	50                   	push   eax
c00163bb:	55                   	push   ebp
c00163bc:	68 3c d7 02 c0       	push   0xc002d73c
c00163c1:	e8 fa 09 01 00       	call   c0026dc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00163c6:	eb 93                	jmp    c001635b <timerHandler(unsigned long long)+0x84>
c00163c8:	80 3d 2c c2 02 c0 00 	cmp    BYTE PTR ds:0xc002c22c,0x0
c00163cf:	74 29                	je     c00163fa <timerHandler(unsigned long long)+0x123>
c00163d1:	39 c6                	cmp    esi,eax
c00163d3:	bb 00 00 00 00       	mov    ebx,0x0
c00163d8:	19 df                	sbb    edi,ebx
c00163da:	72 19                	jb     c00163f5 <timerHandler(unsigned long long)+0x11e>
c00163dc:	e8 19 62 00 00       	call   c001c5fa <lockScheduler()>
c00163e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163e6:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00163e9:	e8 48 65 00 00       	call   c001c936 <schedule()>
c00163ee:	e8 09 62 00 00       	call   c001c5fc <unlockScheduler()>
c00163f3:	eb 05                	jmp    c00163fa <timerHandler(unsigned long long)+0x123>
c00163f5:	29 f0                	sub    eax,esi
c00163f7:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c00163fa:	83 c4 0c             	add    esp,0xc
c00163fd:	5b                   	pop    ebx
c00163fe:	5e                   	pop    esi
c00163ff:	5f                   	pop    edi
c0016400:	5d                   	pop    ebp
c0016401:	e9 b5 65 00 00       	jmp    c001c9bb <unlockStuff()>
c0016406:	83 c4 0c             	add    esp,0xc
c0016409:	5b                   	pop    ebx
c001640a:	5e                   	pop    esi
c001640b:	5f                   	pop    edi
c001640c:	5d                   	pop    ebp
c001640d:	c3                   	ret    

c001640e <setupTimer(int)>:
c001640e:	57                   	push   edi
c001640f:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c0016414:	56                   	push   esi
c0016415:	53                   	push   ebx
c0016416:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001641a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016420:	83 ec 0c             	sub    esp,0xc
c0016423:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016429:	e8 4e d9 ff ff       	call   c0013d7c <Device::getName()>
c001642e:	83 c4 10             	add    esp,0x10
c0016431:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016434:	0f 85 8d 00 00 00    	jne    c00164c7 <setupTimer(int)+0xb9>
c001643a:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c001643f:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016446:	74 7f                	je     c00164c7 <setupTimer(int)+0xb9>
c0016448:	83 ec 0c             	sub    esp,0xc
c001644b:	68 5c 01 00 00       	push   0x15c
c0016450:	e8 7f 90 ff ff       	call   c000f4d4 <malloc>
c0016455:	89 04 24             	mov    DWORD PTR [esp],eax
c0016458:	89 c3                	mov    ebx,eax
c001645a:	e8 01 e4 00 00       	call   c0024860 <PIT::PIT()>
c001645f:	59                   	pop    ecx
c0016460:	5f                   	pop    edi
c0016461:	53                   	push   ebx
c0016462:	ff 35 28 c2 02 c0    	push   DWORD PTR ds:0xc002c228
c0016468:	e8 23 d6 ff ff       	call   c0013a90 <Device::addChild(Device*)>
c001646d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001646f:	6a 00                	push   0x0
c0016471:	6a 00                	push   0x0
c0016473:	56                   	push   esi
c0016474:	53                   	push   ebx
c0016475:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016478:	83 c4 14             	add    esp,0x14
c001647b:	68 60 01 00 00       	push   0x160
c0016480:	e8 4f 90 ff ff       	call   c000f4d4 <malloc>
c0016485:	89 04 24             	mov    DWORD PTR [esp],eax
c0016488:	89 c7                	mov    edi,eax
c001648a:	e8 81 e2 00 00       	call   c0024710 <APICTimer::APICTimer()>
c001648f:	6a 00                	push   0x0
c0016491:	6a 00                	push   0x0
c0016493:	56                   	push   esi
c0016494:	57                   	push   edi
c0016495:	e8 78 e1 00 00       	call   c0024612 <APICTimer::open(int, int, void*)>
c001649a:	83 c4 20             	add    esp,0x20
c001649d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001649f:	6a 00                	push   0x0
c00164a1:	6a 00                	push   0x0
c00164a3:	6a 00                	push   0x0
c00164a5:	53                   	push   ebx
c00164a6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00164a9:	58                   	pop    eax
c00164aa:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c00164af:	5a                   	pop    edx
c00164b0:	57                   	push   edi
c00164b1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00164b7:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00164bd:	e8 ce d5 ff ff       	call   c0013a90 <Device::addChild(Device*)>
c00164c2:	83 c4 10             	add    esp,0x10
c00164c5:	eb 33                	jmp    c00164fa <setupTimer(int)+0xec>
c00164c7:	83 ec 0c             	sub    esp,0xc
c00164ca:	68 5c 01 00 00       	push   0x15c
c00164cf:	e8 00 90 ff ff       	call   c000f4d4 <malloc>
c00164d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00164d7:	89 c3                	mov    ebx,eax
c00164d9:	e8 82 e3 00 00       	call   c0024860 <PIT::PIT()>
c00164de:	58                   	pop    eax
c00164df:	5a                   	pop    edx
c00164e0:	53                   	push   ebx
c00164e1:	ff 35 28 c2 02 c0    	push   DWORD PTR ds:0xc002c228
c00164e7:	e8 a4 d5 ff ff       	call   c0013a90 <Device::addChild(Device*)>
c00164ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00164ee:	6a 00                	push   0x0
c00164f0:	6a 00                	push   0x0
c00164f2:	56                   	push   esi
c00164f3:	53                   	push   ebx
c00164f4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00164f7:	83 c4 20             	add    esp,0x20
c00164fa:	89 d8                	mov    eax,ebx
c00164fc:	5b                   	pop    ebx
c00164fd:	5e                   	pop    esi
c00164fe:	5f                   	pop    edi
c00164ff:	c3                   	ret    

c0016500 <VCache::VCache(PhysicalDisk*)>:
c0016500:	53                   	push   ebx
c0016501:	83 ec 18             	sub    esp,0x18
c0016504:	ba 7c 93 02 c0       	mov    edx,0xc002937c
c0016509:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001650d:	89 10                	mov    DWORD PTR [eax],edx
c001650f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016513:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001651a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001651e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016525:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016529:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016530:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016537:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001653b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016542:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016549:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001654d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016554:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016558:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001655c:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016564:	83 ec 0c             	sub    esp,0xc
c0016567:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001656b:	e8 64 8f ff ff       	call   c000f4d4 <malloc>
c0016570:	83 c4 10             	add    esp,0x10
c0016573:	89 c3                	mov    ebx,eax
c0016575:	83 ec 0c             	sub    esp,0xc
c0016578:	53                   	push   ebx
c0016579:	e8 9c 61 00 00       	call   c001c71a <Mutex::Mutex()>
c001657e:	83 c4 10             	add    esp,0x10
c0016581:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016585:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016588:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001658c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016590:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016593:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016597:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001659e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00165a2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00165a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165ac:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00165af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00165b3:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00165b9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00165bf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165c3:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00165c6:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00165c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165cd:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00165d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00165d5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00165db:	c1 e0 06             	shl    eax,0x6
c00165de:	83 ec 0c             	sub    esp,0xc
c00165e1:	50                   	push   eax
c00165e2:	e8 ed 8e ff ff       	call   c000f4d4 <malloc>
c00165e7:	83 c4 10             	add    esp,0x10
c00165ea:	89 c2                	mov    edx,eax
c00165ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165f0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00165f3:	90                   	nop
c00165f4:	83 c4 18             	add    esp,0x18
c00165f7:	5b                   	pop    ebx
c00165f8:	c3                   	ret    
c00165f9:	90                   	nop

c00165fa <VCache::writeWriteBuffer()>:
c00165fa:	53                   	push   ebx
c00165fb:	83 ec 14             	sub    esp,0x14
c00165fe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016602:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016605:	8b 10                	mov    edx,DWORD PTR [eax]
c0016607:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001660a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001660d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016610:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016613:	50                   	push   eax
c0016614:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016617:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001661e:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016625:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016629:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016630:	83 c4 28             	add    esp,0x28
c0016633:	5b                   	pop    ebx
c0016634:	c3                   	ret    
c0016635:	90                   	nop

c0016636 <VCache::~VCache()>:
c0016636:	83 ec 0c             	sub    esp,0xc
c0016639:	ba 7c 93 02 c0       	mov    edx,0xc002937c
c001663e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016642:	89 10                	mov    DWORD PTR [eax],edx
c0016644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016648:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001664b:	84 c0                	test   al,al
c001664d:	74 0f                	je     c001665e <VCache::~VCache()+0x28>
c001664f:	83 ec 0c             	sub    esp,0xc
c0016652:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016656:	e8 9f ff ff ff       	call   c00165fa <VCache::writeWriteBuffer()>
c001665b:	83 c4 10             	add    esp,0x10
c001665e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016662:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016665:	83 ec 0c             	sub    esp,0xc
c0016668:	50                   	push   eax
c0016669:	e8 76 8e ff ff       	call   c000f4e4 <free>
c001666e:	83 c4 10             	add    esp,0x10
c0016671:	90                   	nop
c0016672:	83 c4 0c             	add    esp,0xc
c0016675:	c3                   	ret    

c0016676 <VCache::~VCache()>:
c0016676:	83 ec 0c             	sub    esp,0xc
c0016679:	83 ec 0c             	sub    esp,0xc
c001667c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016680:	e8 b1 ff ff ff       	call   c0016636 <VCache::~VCache()>
c0016685:	83 c4 10             	add    esp,0x10
c0016688:	83 ec 08             	sub    esp,0x8
c001668b:	6a 30                	push   0x30
c001668d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016691:	e8 2b bf ff ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c0016696:	83 c4 10             	add    esp,0x10
c0016699:	83 c4 0c             	add    esp,0xc
c001669c:	c3                   	ret    
c001669d:	90                   	nop

c001669e <VCache::write(unsigned long long, int, void*)>:
c001669e:	55                   	push   ebp
c001669f:	57                   	push   edi
c00166a0:	56                   	push   esi
c00166a1:	53                   	push   ebx
c00166a2:	83 ec 28             	sub    esp,0x28
c00166a5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00166a9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00166ad:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00166b1:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00166b5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00166b8:	e8 bf 64 00 00       	call   c001cb7c <Semaphore::acquire()>
c00166bd:	83 c4 10             	add    esp,0x10
c00166c0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00166c4:	74 66                	je     c001672c <VCache::write(unsigned long long, int, void*)+0x8e>
c00166c6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00166c9:	99                   	cdq    
c00166ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00166ce:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00166d1:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00166d4:	89 c1                	mov    ecx,eax
c00166d6:	89 d0                	mov    eax,edx
c00166d8:	31 f1                	xor    ecx,esi
c00166da:	31 f8                	xor    eax,edi
c00166dc:	89 ca                	mov    edx,ecx
c00166de:	09 c2                	or     edx,eax
c00166e0:	75 3e                	jne    c0016720 <VCache::write(unsigned long long, int, void*)+0x82>
c00166e2:	83 fd 01             	cmp    ebp,0x1
c00166e5:	75 39                	jne    c0016720 <VCache::write(unsigned long long, int, void*)+0x82>
c00166e7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00166ea:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00166f0:	51                   	push   ecx
c00166f1:	50                   	push   eax
c00166f2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166f6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00166fa:	0f af c8             	imul   ecx,eax
c00166fd:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0016700:	51                   	push   ecx
c0016701:	e8 4f 9f fe ff       	call   c0000655 <memcpy>
c0016706:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016709:	83 c4 10             	add    esp,0x10
c001670c:	40                   	inc    eax
c001670d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016710:	83 f8 40             	cmp    eax,0x40
c0016713:	75 57                	jne    c001676c <VCache::write(unsigned long long, int, void*)+0xce>
c0016715:	83 ec 0c             	sub    esp,0xc
c0016718:	53                   	push   ebx
c0016719:	e8 dc fe ff ff       	call   c00165fa <VCache::writeWriteBuffer()>
c001671e:	eb 34                	jmp    c0016754 <VCache::write(unsigned long long, int, void*)+0xb6>
c0016720:	83 ec 0c             	sub    esp,0xc
c0016723:	53                   	push   ebx
c0016724:	e8 d1 fe ff ff       	call   c00165fa <VCache::writeWriteBuffer()>
c0016729:	83 c4 10             	add    esp,0x10
c001672c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001672f:	83 fd 3f             	cmp    ebp,0x3f
c0016732:	7f 25                	jg     c0016759 <VCache::write(unsigned long long, int, void*)+0xbb>
c0016734:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016737:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001673a:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001673d:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016741:	52                   	push   edx
c0016742:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016748:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001674c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001674f:	e8 01 9f fe ff       	call   c0000655 <memcpy>
c0016754:	83 c4 10             	add    esp,0x10
c0016757:	eb 13                	jmp    c001676c <VCache::write(unsigned long long, int, void*)+0xce>
c0016759:	83 ec 0c             	sub    esp,0xc
c001675c:	8b 10                	mov    edx,DWORD PTR [eax]
c001675e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016762:	55                   	push   ebp
c0016763:	57                   	push   edi
c0016764:	56                   	push   esi
c0016765:	50                   	push   eax
c0016766:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016769:	83 c4 20             	add    esp,0x20
c001676c:	83 ec 0c             	sub    esp,0xc
c001676f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016772:	e8 b3 69 00 00       	call   c001d12a <Semaphore::release()>
c0016777:	83 c4 2c             	add    esp,0x2c
c001677a:	31 c0                	xor    eax,eax
c001677c:	5b                   	pop    ebx
c001677d:	5e                   	pop    esi
c001677e:	5f                   	pop    edi
c001677f:	5d                   	pop    ebp
c0016780:	c3                   	ret    
c0016781:	90                   	nop

c0016782 <VCache::read(unsigned long long, int, void*)>:
c0016782:	57                   	push   edi
c0016783:	56                   	push   esi
c0016784:	53                   	push   ebx
c0016785:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016789:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001678d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016791:	83 ec 0c             	sub    esp,0xc
c0016794:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016797:	e8 e0 63 00 00       	call   c001cb7c <Semaphore::acquire()>
c001679c:	83 c4 10             	add    esp,0x10
c001679f:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00167a3:	74 0c                	je     c00167b1 <VCache::read(unsigned long long, int, void*)+0x2f>
c00167a5:	83 ec 0c             	sub    esp,0xc
c00167a8:	53                   	push   ebx
c00167a9:	e8 4c fe ff ff       	call   c00165fa <VCache::writeWriteBuffer()>
c00167ae:	83 c4 10             	add    esp,0x10
c00167b1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00167b4:	83 ec 0c             	sub    esp,0xc
c00167b7:	8b 10                	mov    edx,DWORD PTR [eax]
c00167b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00167bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00167c1:	57                   	push   edi
c00167c2:	56                   	push   esi
c00167c3:	50                   	push   eax
c00167c4:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00167c7:	83 c4 14             	add    esp,0x14
c00167ca:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00167cd:	e8 58 69 00 00       	call   c001d12a <Semaphore::release()>
c00167d2:	83 c4 10             	add    esp,0x10
c00167d5:	31 c0                	xor    eax,eax
c00167d7:	5b                   	pop    ebx
c00167d8:	5e                   	pop    esi
c00167d9:	5f                   	pop    edi
c00167da:	c3                   	ret    
c00167db:	90                   	nop

c00167dc <Video::putrect(int, int, int, int, unsigned int)>:
c00167dc:	55                   	push   ebp
c00167dd:	57                   	push   edi
c00167de:	56                   	push   esi
c00167df:	53                   	push   ebx
c00167e0:	83 ec 1c             	sub    esp,0x1c
c00167e3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00167e7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00167eb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00167ef:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00167f3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00167f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167fb:	01 df                	add    edi,ebx
c00167fd:	39 fb                	cmp    ebx,edi
c00167ff:	7d 1f                	jge    c0016820 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016801:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016805:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016809:	7d 12                	jge    c001681d <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001680b:	8b 16                	mov    edx,DWORD PTR [esi]
c001680d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016811:	53                   	push   ebx
c0016812:	55                   	push   ebp
c0016813:	45                   	inc    ebp
c0016814:	56                   	push   esi
c0016815:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016818:	83 c4 10             	add    esp,0x10
c001681b:	eb e8                	jmp    c0016805 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001681d:	43                   	inc    ebx
c001681e:	eb dd                	jmp    c00167fd <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016820:	83 c4 1c             	add    esp,0x1c
c0016823:	5b                   	pop    ebx
c0016824:	5e                   	pop    esi
c0016825:	5f                   	pop    edi
c0016826:	5d                   	pop    ebp
c0016827:	c3                   	ret    

c0016828 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016828:	55                   	push   ebp
c0016829:	57                   	push   edi
c001682a:	31 ff                	xor    edi,edi
c001682c:	56                   	push   esi
c001682d:	53                   	push   ebx
c001682e:	83 ec 1c             	sub    esp,0x1c
c0016831:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016835:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016839:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016840:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016845:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016849:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001684d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016851:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016854:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016858:	01 f9                	add    ecx,edi
c001685a:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001685e:	7d 2f                	jge    c001688f <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016860:	31 f6                	xor    esi,esi
c0016862:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016866:	01 f2                	add    edx,esi
c0016868:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001686c:	7d 1a                	jge    c0016888 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001686e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016871:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016874:	46                   	inc    esi
c0016875:	51                   	push   ecx
c0016876:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001687a:	52                   	push   edx
c001687b:	55                   	push   ebp
c001687c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001687f:	83 c4 10             	add    esp,0x10
c0016882:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016886:	eb da                	jmp    c0016862 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016888:	47                   	inc    edi
c0016889:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001688d:	eb c5                	jmp    c0016854 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001688f:	83 c4 1c             	add    esp,0x1c
c0016892:	5b                   	pop    ebx
c0016893:	5e                   	pop    esi
c0016894:	5f                   	pop    edi
c0016895:	5d                   	pop    ebp
c0016896:	c3                   	ret    
c0016897:	90                   	nop

c0016898 <Video::blit(unsigned int*, int, int, int, int)>:
c0016898:	55                   	push   ebp
c0016899:	57                   	push   edi
c001689a:	56                   	push   esi
c001689b:	53                   	push   ebx
c001689c:	83 ec 1c             	sub    esp,0x1c
c001689f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00168a3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00168a7:	85 c0                	test   eax,eax
c00168a9:	79 02                	jns    c00168ad <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00168ab:	31 c0                	xor    eax,eax
c00168ad:	c1 e0 02             	shl    eax,0x2
c00168b0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00168b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00168b8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00168bc:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00168c0:	39 d8                	cmp    eax,ebx
c00168c2:	7e 49                	jle    c001690d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00168c4:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00168ca:	7c 41                	jl     c001690d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00168cc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00168d0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00168d4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00168d8:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00168dc:	39 f9                	cmp    ecx,edi
c00168de:	7e 22                	jle    c0016902 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00168e0:	83 c5 04             	add    ebp,0x4
c00168e3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00168e9:	7c 14                	jl     c00168ff <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00168eb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00168ed:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00168f0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00168f4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00168f8:	56                   	push   esi
c00168f9:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00168fc:	83 c4 10             	add    esp,0x10
c00168ff:	47                   	inc    edi
c0016900:	eb d2                	jmp    c00168d4 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016902:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016906:	43                   	inc    ebx
c0016907:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001690b:	eb ab                	jmp    c00168b8 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001690d:	83 c4 1c             	add    esp,0x1c
c0016910:	5b                   	pop    ebx
c0016911:	5e                   	pop    esi
c0016912:	5f                   	pop    edi
c0016913:	5d                   	pop    ebp
c0016914:	c3                   	ret    
c0016915:	90                   	nop

c0016916 <Video::clearScreen(unsigned int)>:
c0016916:	57                   	push   edi
c0016917:	56                   	push   esi
c0016918:	53                   	push   ebx
c0016919:	31 db                	xor    ebx,ebx
c001691b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001691f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016925:	7e 1f                	jle    c0016946 <Video::clearScreen(unsigned int)+0x30>
c0016927:	31 ff                	xor    edi,edi
c0016929:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001692f:	7e 12                	jle    c0016943 <Video::clearScreen(unsigned int)+0x2d>
c0016931:	8b 06                	mov    eax,DWORD PTR [esi]
c0016933:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016937:	53                   	push   ebx
c0016938:	57                   	push   edi
c0016939:	47                   	inc    edi
c001693a:	56                   	push   esi
c001693b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001693e:	83 c4 10             	add    esp,0x10
c0016941:	eb e6                	jmp    c0016929 <Video::clearScreen(unsigned int)+0x13>
c0016943:	43                   	inc    ebx
c0016944:	eb d9                	jmp    c001691f <Video::clearScreen(unsigned int)+0x9>
c0016946:	5b                   	pop    ebx
c0016947:	5e                   	pop    esi
c0016948:	5f                   	pop    edi
c0016949:	c3                   	ret    

c001694a <Video::putpixel(int, int, unsigned int)>:
c001694a:	c7 44 24 04 84 93 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029384
c0016952:	e9 25 2c 00 00       	jmp    c001957c <Krnl::panic(char const*)>
c0016957:	90                   	nop

c0016958 <Video::Video(char const*)>:
c0016958:	83 ec 0c             	sub    esp,0xc
c001695b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001695f:	83 ec 08             	sub    esp,0x8
c0016962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016966:	50                   	push   eax
c0016967:	e8 14 d3 ff ff       	call   c0013c80 <Device::Device(char const*)>
c001696c:	83 c4 10             	add    esp,0x10
c001696f:	ba 08 94 02 c0       	mov    edx,0xc0029408
c0016974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016978:	89 10                	mov    DWORD PTR [eax],edx
c001697a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001697e:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016988:	90                   	nop
c0016989:	83 c4 0c             	add    esp,0xc
c001698c:	c3                   	ret    
c001698d:	90                   	nop

c001698e <Video::~Video()>:
c001698e:	83 ec 0c             	sub    esp,0xc
c0016991:	ba 08 94 02 c0       	mov    edx,0xc0029408
c0016996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001699a:	89 10                	mov    DWORD PTR [eax],edx
c001699c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169a0:	83 ec 0c             	sub    esp,0xc
c00169a3:	50                   	push   eax
c00169a4:	e8 b9 cf ff ff       	call   c0013962 <Device::~Device()>
c00169a9:	83 c4 10             	add    esp,0x10
c00169ac:	90                   	nop
c00169ad:	83 c4 0c             	add    esp,0xc
c00169b0:	c3                   	ret    
c00169b1:	90                   	nop

c00169b2 <Video::~Video()>:
c00169b2:	83 ec 0c             	sub    esp,0xc
c00169b5:	83 ec 0c             	sub    esp,0xc
c00169b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169bc:	e8 cd ff ff ff       	call   c001698e <Video::~Video()>
c00169c1:	83 c4 10             	add    esp,0x10
c00169c4:	83 ec 08             	sub    esp,0x8
c00169c7:	68 64 01 00 00       	push   0x164
c00169cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169d0:	e8 ec bb ff ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c00169d5:	83 c4 10             	add    esp,0x10
c00169d8:	83 c4 0c             	add    esp,0xc
c00169db:	c3                   	ret    

c00169dc <Video::isMonochrome()>:
c00169dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00169e0:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00169e6:	c3                   	ret    
c00169e7:	90                   	nop

c00169e8 <Video::getWidth()>:
c00169e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00169ec:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00169f2:	c3                   	ret    
c00169f3:	90                   	nop

c00169f4 <Video::getHeight()>:
c00169f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00169f8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00169fe:	c3                   	ret    
c00169ff:	90                   	nop

c0016a00 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016a00:	55                   	push   ebp
c0016a01:	57                   	push   edi
c0016a02:	56                   	push   esi
c0016a03:	53                   	push   ebx
c0016a04:	83 ec 2c             	sub    esp,0x2c
c0016a07:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016a0b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016a0f:	83 f8 01             	cmp    eax,0x1
c0016a12:	19 c9                	sbb    ecx,ecx
c0016a14:	31 db                	xor    ebx,ebx
c0016a16:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016a1a:	89 cd                	mov    ebp,ecx
c0016a1c:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016a24:	f7 d5                	not    ebp
c0016a26:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016a2c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016a30:	01 d8                	add    eax,ebx
c0016a32:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a36:	56                   	push   esi
c0016a37:	e8 b8 ff ff ff       	call   c00169f4 <Video::getHeight()>
c0016a3c:	59                   	pop    ecx
c0016a3d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016a41:	7e 70                	jle    c0016ab3 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016a43:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016a47:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016a4b:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016a4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016a52:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016a56:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016a5d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016a61:	89 f8                	mov    eax,edi
c0016a63:	83 c0 20             	add    eax,0x20
c0016a66:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016a6a:	56                   	push   esi
c0016a6b:	e8 78 ff ff ff       	call   c00169e8 <Video::getWidth()>
c0016a70:	5a                   	pop    edx
c0016a71:	39 c7                	cmp    edi,eax
c0016a73:	7d 34                	jge    c0016aa9 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016a75:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016a7a:	74 05                	je     c0016a81 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016a7c:	8b 06                	mov    eax,DWORD PTR [esi]
c0016a7e:	55                   	push   ebp
c0016a7f:	eb 0d                	jmp    c0016a8e <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016a81:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016a86:	74 12                	je     c0016a9a <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016a88:	8b 06                	mov    eax,DWORD PTR [esi]
c0016a8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a8e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016a92:	57                   	push   edi
c0016a93:	56                   	push   esi
c0016a94:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016a97:	83 c4 10             	add    esp,0x10
c0016a9a:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016a9e:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016aa2:	47                   	inc    edi
c0016aa3:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016aa7:	75 c1                	jne    c0016a6a <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016aa9:	43                   	inc    ebx
c0016aaa:	83 fb 20             	cmp    ebx,0x20
c0016aad:	0f 85 79 ff ff ff    	jne    c0016a2c <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016ab3:	83 c4 2c             	add    esp,0x2c
c0016ab6:	5b                   	pop    ebx
c0016ab7:	5e                   	pop    esi
c0016ab8:	5f                   	pop    edi
c0016ab9:	5d                   	pop    ebp
c0016aba:	c3                   	ret    
c0016abb:	90                   	nop

c0016abc <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016abc:	55                   	push   ebp
c0016abd:	57                   	push   edi
c0016abe:	56                   	push   esi
c0016abf:	53                   	push   ebx
c0016ac0:	83 ec 28             	sub    esp,0x28
c0016ac3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016ac7:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016acb:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0016acf:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016ad3:	c1 e7 08             	shl    edi,0x8
c0016ad6:	01 c7                	add    edi,eax
c0016ad8:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016adc:	c1 e0 08             	shl    eax,0x8
c0016adf:	01 d0                	add    eax,edx
c0016ae1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ae5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ae9:	0f af c7             	imul   eax,edi
c0016aec:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016af3:	50                   	push   eax
c0016af4:	e8 db 89 ff ff       	call   c000f4d4 <malloc>
c0016af9:	83 c4 10             	add    esp,0x10
c0016afc:	89 c5                	mov    ebp,eax
c0016afe:	85 c0                	test   eax,eax
c0016b00:	75 15                	jne    c0016b17 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0016b02:	83 ec 0c             	sub    esp,0xc
c0016b05:	68 a5 93 02 c0       	push   0xc00293a5
c0016b0a:	e8 92 bb ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0016b0f:	83 c4 10             	add    esp,0x10
c0016b12:	e9 1c 01 00 00       	jmp    c0016c33 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016b17:	be 12 00 00 00       	mov    esi,0x12
c0016b1c:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016b20:	74 11                	je     c0016b33 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0016b22:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0016b26:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0016b2a:	c1 fe 03             	sar    esi,0x3
c0016b2d:	0f af f0             	imul   esi,eax
c0016b30:	83 c6 12             	add    esi,0x12
c0016b33:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016b37:	74 04                	je     c0016b3d <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0016b39:	85 ff                	test   edi,edi
c0016b3b:	75 12                	jne    c0016b4f <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0016b3d:	83 ec 0c             	sub    esp,0xc
c0016b40:	68 bc 93 02 c0       	push   0xc00293bc
c0016b45:	e8 57 bb ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0016b4a:	e9 ce 00 00 00       	jmp    c0016c1d <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0016b4f:	52                   	push   edx
c0016b50:	52                   	push   edx
c0016b51:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0016b55:	50                   	push   eax
c0016b56:	68 d1 93 02 c0       	push   0xc00293d1
c0016b5b:	e8 41 bb ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0016b60:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0016b64:	83 c4 10             	add    esp,0x10
c0016b67:	80 fa 02             	cmp    dl,0x2
c0016b6a:	0f 85 98 00 00 00    	jne    c0016c08 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0016b70:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016b75:	75 10                	jne    c0016b87 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016b77:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016b7b:	75 0a                	jne    c0016b87 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016b7d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016b80:	83 e8 18             	sub    eax,0x18
c0016b83:	a8 f7                	test   al,0xf7
c0016b85:	74 0a                	je     c0016b91 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0016b87:	83 ec 0c             	sub    esp,0xc
c0016b8a:	68 de 93 02 c0       	push   0xc00293de
c0016b8f:	eb 7f                	jmp    c0016c10 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0016b91:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016b99:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016ba1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016ba5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016bad:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016bb1:	75 0c                	jne    c0016bbf <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0016bb3:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0016bb8:	c1 e0 18             	shl    eax,0x18
c0016bbb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016bbf:	41                   	inc    ecx
c0016bc0:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0016bc5:	c1 e2 10             	shl    edx,0x10
c0016bc8:	89 d0                	mov    eax,edx
c0016bca:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0016bcf:	c1 e2 08             	shl    edx,0x8
c0016bd2:	09 c2                	or     edx,eax
c0016bd4:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0016bd8:	09 c2                	or     edx,eax
c0016bda:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0016bde:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0016be2:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016be6:	c1 f8 03             	sar    eax,0x3
c0016be9:	01 c6                	add    esi,eax
c0016beb:	89 c8                	mov    eax,ecx
c0016bed:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016bf1:	39 c7                	cmp    edi,eax
c0016bf3:	7f b0                	jg     c0016ba5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016bf5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016bf9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016bfd:	39 14 24             	cmp    DWORD PTR [esp],edx
c0016c00:	7e 22                	jle    c0016c24 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0016c02:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0016c06:	eb 99                	jmp    c0016ba1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0016c08:	50                   	push   eax
c0016c09:	50                   	push   eax
c0016c0a:	52                   	push   edx
c0016c0b:	68 ec 93 02 c0       	push   0xc00293ec
c0016c10:	e8 8c ba ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0016c15:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016c18:	e8 c7 88 ff ff       	call   c000f4e4 <free>
c0016c1d:	83 c4 10             	add    esp,0x10
c0016c20:	31 ed                	xor    ebp,ebp
c0016c22:	eb 0f                	jmp    c0016c33 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016c24:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016c28:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016c2b:	89 38                	mov    DWORD PTR [eax],edi
c0016c2d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016c31:	89 08                	mov    DWORD PTR [eax],ecx
c0016c33:	83 c4 1c             	add    esp,0x1c
c0016c36:	89 e8                	mov    eax,ebp
c0016c38:	5b                   	pop    ebx
c0016c39:	5e                   	pop    esi
c0016c3a:	5f                   	pop    edi
c0016c3b:	5d                   	pop    ebp
c0016c3c:	c3                   	ret    
c0016c3d:	90                   	nop

c0016c3e <Video::putTGA(int, int, unsigned char*, int)>:
c0016c3e:	55                   	push   ebp
c0016c3f:	57                   	push   edi
c0016c40:	56                   	push   esi
c0016c41:	53                   	push   ebx
c0016c42:	83 ec 28             	sub    esp,0x28
c0016c45:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016c49:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016c4d:	50                   	push   eax
c0016c4e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016c52:	50                   	push   eax
c0016c53:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016c57:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016c5b:	56                   	push   esi
c0016c5c:	e8 5b fe ff ff       	call   c0016abc <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016c61:	83 c4 20             	add    esp,0x20
c0016c64:	85 c0                	test   eax,eax
c0016c66:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016c6a:	74 35                	je     c0016ca1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016c6c:	89 c7                	mov    edi,eax
c0016c6e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016c72:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016c76:	39 d8                	cmp    eax,ebx
c0016c78:	7e 27                	jle    c0016ca1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016c7a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016c7e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016c82:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016c86:	39 e8                	cmp    eax,ebp
c0016c88:	7e 14                	jle    c0016c9e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016c8a:	8b 06                	mov    eax,DWORD PTR [esi]
c0016c8c:	83 c7 04             	add    edi,0x4
c0016c8f:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016c92:	53                   	push   ebx
c0016c93:	55                   	push   ebp
c0016c94:	45                   	inc    ebp
c0016c95:	56                   	push   esi
c0016c96:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016c99:	83 c4 10             	add    esp,0x10
c0016c9c:	eb e0                	jmp    c0016c7e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016c9e:	43                   	inc    ebx
c0016c9f:	eb cd                	jmp    c0016c6e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016ca1:	83 c4 1c             	add    esp,0x1c
c0016ca4:	5b                   	pop    ebx
c0016ca5:	5e                   	pop    esi
c0016ca6:	5f                   	pop    edi
c0016ca7:	5d                   	pop    ebp
c0016ca8:	c3                   	ret    
c0016ca9:	90                   	nop

c0016caa <ACPI::close(int, int, void*)>:
c0016caa:	83 ec 1c             	sub    esp,0x1c
c0016cad:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016cb5:	74 0a                	je     c0016cc1 <ACPI::close(int, int, void*)+0x17>
c0016cb7:	b8 00 00 00 00       	mov    eax,0x0
c0016cbc:	e9 9a 00 00 00       	jmp    c0016d5b <ACPI::close(int, int, void*)+0xb1>
c0016cc1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016cc6:	75 37                	jne    c0016cff <ACPI::close(int, int, void*)+0x55>
c0016cc8:	83 ec 0c             	sub    esp,0xc
c0016ccb:	68 48 94 02 c0       	push   0xc0029448
c0016cd0:	e8 cc b9 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0016cd5:	83 c4 10             	add    esp,0x10
c0016cd8:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c0016cdd:	85 c0                	test   eax,eax
c0016cdf:	74 07                	je     c0016ce8 <ACPI::close(int, int, void*)+0x3e>
c0016ce1:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c0016ce6:	ff d0                	call   eax
c0016ce8:	83 ec 0c             	sub    esp,0xc
c0016ceb:	68 1c 95 02 c0       	push   0xc002951c
c0016cf0:	e8 87 28 00 00       	call   c001957c <Krnl::panic(char const*)>
c0016cf5:	83 c4 10             	add    esp,0x10
c0016cf8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016cfd:	eb 5c                	jmp    c0016d5b <ACPI::close(int, int, void*)+0xb1>
c0016cff:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016d04:	75 50                	jne    c0016d56 <ACPI::close(int, int, void*)+0xac>
c0016d06:	a1 a4 c8 02 c0       	mov    eax,ds:0xc002c8a4
c0016d0b:	85 c0                	test   eax,eax
c0016d0d:	74 07                	je     c0016d16 <ACPI::close(int, int, void*)+0x6c>
c0016d0f:	a1 a4 c8 02 c0       	mov    eax,ds:0xc002c8a4
c0016d14:	ff d0                	call   eax
c0016d16:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016d1b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016d20:	83 e0 02             	and    eax,0x2
c0016d23:	74 1c                	je     c0016d41 <ACPI::close(int, int, void*)+0x97>
c0016d25:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0016d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d30:	89 c2                	mov    edx,eax
c0016d32:	ec                   	in     al,dx
c0016d33:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0016d37:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0016d3b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016d3f:	eb da                	jmp    c0016d1b <ACPI::close(int, int, void*)+0x71>
c0016d41:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0016d48:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0016d4d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0016d51:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016d55:	ee                   	out    dx,al
c0016d56:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016d5b:	83 c4 1c             	add    esp,0x1c
c0016d5e:	c3                   	ret    

c0016d5f <findRSDP()>:
c0016d5f:	83 ec 1c             	sub    esp,0x1c
c0016d62:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c0016d67:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016d6d:	83 e0 04             	and    eax,0x4
c0016d70:	84 c0                	test   al,al
c0016d72:	75 07                	jne    c0016d7b <findRSDP()+0x1c>
c0016d74:	b8 00 00 00 00       	mov    eax,0x0
c0016d79:	eb 6a                	jmp    c0016de5 <findRSDP()+0x86>
c0016d7b:	a1 70 c2 02 c0       	mov    eax,ds:0xc002c270
c0016d80:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016d85:	7f 1b                	jg     c0016da2 <findRSDP()+0x43>
c0016d87:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c0016d8c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016d92:	83 e2 fb             	and    edx,0xfffffffb
c0016d95:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016d9b:	b8 00 00 00 00       	mov    eax,0x0
c0016da0:	eb 43                	jmp    c0016de5 <findRSDP()+0x86>
c0016da2:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0016daa:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0016db2:	77 2c                	ja     c0016de0 <findRSDP()+0x81>
c0016db4:	83 ec 04             	sub    esp,0x4
c0016db7:	6a 08                	push   0x8
c0016db9:	68 55 94 02 c0       	push   0xc0029455
c0016dbe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016dc2:	e8 2b 98 fe ff       	call   c00005f2 <memcmp>
c0016dc7:	83 c4 10             	add    esp,0x10
c0016dca:	85 c0                	test   eax,eax
c0016dcc:	0f 94 c0             	sete   al
c0016dcf:	84 c0                	test   al,al
c0016dd1:	74 06                	je     c0016dd9 <findRSDP()+0x7a>
c0016dd3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016dd7:	eb 0c                	jmp    c0016de5 <findRSDP()+0x86>
c0016dd9:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0016dde:	eb ca                	jmp    c0016daa <findRSDP()+0x4b>
c0016de0:	b8 00 00 00 00       	mov    eax,0x0
c0016de5:	83 c4 1c             	add    esp,0x1c
c0016de8:	c3                   	ret    

c0016de9 <loadACPITables(unsigned char*)>:
c0016de9:	56                   	push   esi
c0016dea:	53                   	push   ebx
c0016deb:	83 ec 44             	sub    esp,0x44
c0016dee:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c0016df3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016df9:	83 e0 04             	and    eax,0x4
c0016dfc:	84 c0                	test   al,al
c0016dfe:	0f 84 05 02 00 00    	je     c0017009 <loadACPITables(unsigned char*)+0x220>
c0016e04:	a0 c0 ca 02 c0       	mov    al,ds:0xc002cac0
c0016e09:	84 c0                	test   al,al
c0016e0b:	74 75                	je     c0016e82 <loadACPITables(unsigned char*)+0x99>
c0016e0d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016e11:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016e15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e19:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016e1c:	83 e8 24             	sub    eax,0x24
c0016e1f:	c1 e8 03             	shr    eax,0x3
c0016e22:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016e26:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016e2e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016e32:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0016e36:	0f 8d b2 00 00 00    	jge    c0016eee <loadACPITables(unsigned char*)+0x105>
c0016e3c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016e40:	83 c0 24             	add    eax,0x24
c0016e43:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016e47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016e4b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016e4f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016e53:	c1 e0 03             	shl    eax,0x3
c0016e56:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0016e5a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016e5e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0016e61:	8b 00                	mov    eax,DWORD PTR [eax]
c0016e63:	89 c1                	mov    ecx,eax
c0016e65:	a1 ac c8 02 c0       	mov    eax,ds:0xc002c8ac
c0016e6a:	8d 50 01             	lea    edx,[eax+0x1]
c0016e6d:	89 15 ac c8 02 c0    	mov    DWORD PTR ds:0xc002c8ac,edx
c0016e73:	89 ca                	mov    edx,ecx
c0016e75:	89 14 c5 c4 c8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd373c],edx
c0016e7c:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0016e80:	eb ac                	jmp    c0016e2e <loadACPITables(unsigned char*)+0x45>
c0016e82:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016e86:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016e8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016e91:	83 e8 24             	sub    eax,0x24
c0016e94:	c1 e8 02             	shr    eax,0x2
c0016e97:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016e9b:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0016ea3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ea7:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0016eab:	7d 41                	jge    c0016eee <loadACPITables(unsigned char*)+0x105>
c0016ead:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016eb1:	83 c0 24             	add    eax,0x24
c0016eb4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016eb8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016ebc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016ec0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ec4:	c1 e0 02             	shl    eax,0x2
c0016ec7:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0016ecb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016ecf:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016ed1:	a1 ac c8 02 c0       	mov    eax,ds:0xc002c8ac
c0016ed6:	8d 50 01             	lea    edx,[eax+0x1]
c0016ed9:	89 15 ac c8 02 c0    	mov    DWORD PTR ds:0xc002c8ac,edx
c0016edf:	89 ca                	mov    edx,ecx
c0016ee1:	89 14 c5 c4 c8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd373c],edx
c0016ee8:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0016eec:	eb b5                	jmp    c0016ea3 <loadACPITables(unsigned char*)+0xba>
c0016eee:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0016ef6:	a1 ac c8 02 c0       	mov    eax,ds:0xc002c8ac
c0016efb:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0016eff:	0f 8d 05 01 00 00    	jge    c001700a <loadACPITables(unsigned char*)+0x221>
c0016f05:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f09:	8b 04 c5 c4 c8 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd373c]
c0016f10:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016f14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f20:	25 ff 0f 00 00       	and    eax,0xfff
c0016f25:	89 c6                	mov    esi,eax
c0016f27:	e8 15 a9 ff ff       	call   c0011841 <Virt::getAKernelVAS()>
c0016f2c:	89 c3                	mov    ebx,eax
c0016f2e:	83 ec 0c             	sub    esp,0xc
c0016f31:	6a 01                	push   0x1
c0016f33:	e8 79 a7 ff ff       	call   c00116b1 <Virt::allocateKernelVirtualPages(int)>
c0016f38:	83 c4 10             	add    esp,0x10
c0016f3b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f3f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016f45:	83 ec 0c             	sub    esp,0xc
c0016f48:	6a 01                	push   0x1
c0016f4a:	6a 01                	push   0x1
c0016f4c:	50                   	push   eax
c0016f4d:	52                   	push   edx
c0016f4e:	53                   	push   ebx
c0016f4f:	e8 1c b1 ff ff       	call   c0012070 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016f54:	83 c4 20             	add    esp,0x20
c0016f57:	09 f0                	or     eax,esi
c0016f59:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016f5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f61:	c1 e0 03             	shl    eax,0x3
c0016f64:	05 c0 c8 02 c0       	add    eax,0xc002c8c0
c0016f69:	83 ec 04             	sub    esp,0x4
c0016f6c:	6a 04                	push   0x4
c0016f6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f72:	50                   	push   eax
c0016f73:	e8 dd 96 fe ff       	call   c0000655 <memcpy>
c0016f78:	83 c4 10             	add    esp,0x10
c0016f7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f8a:	05 00 10 00 00       	add    eax,0x1000
c0016f8f:	c1 e8 0c             	shr    eax,0xc
c0016f92:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fa1:	25 ff 0f 00 00       	and    eax,0xfff
c0016fa6:	89 c6                	mov    esi,eax
c0016fa8:	e8 94 a8 ff ff       	call   c0011841 <Virt::getAKernelVAS()>
c0016fad:	89 c3                	mov    ebx,eax
c0016faf:	83 ec 0c             	sub    esp,0xc
c0016fb2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016fb6:	e8 f6 a6 ff ff       	call   c00116b1 <Virt::allocateKernelVirtualPages(int)>
c0016fbb:	83 c4 10             	add    esp,0x10
c0016fbe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016fc2:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016fc8:	83 ec 0c             	sub    esp,0xc
c0016fcb:	6a 01                	push   0x1
c0016fcd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016fd1:	50                   	push   eax
c0016fd2:	52                   	push   edx
c0016fd3:	53                   	push   ebx
c0016fd4:	e8 97 b0 ff ff       	call   c0012070 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016fd9:	83 c4 20             	add    esp,0x20
c0016fdc:	09 f0                	or     eax,esi
c0016fde:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016fe2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016fe5:	83 ec 0c             	sub    esp,0xc
c0016fe8:	50                   	push   eax
c0016fe9:	e8 27 aa ff ff       	call   c0011a15 <Virt::freeKernelVirtualPages(unsigned long)>
c0016fee:	83 c4 10             	add    esp,0x10
c0016ff1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ff5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016ff9:	89 14 c5 c4 c8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd373c],edx
c0017000:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017004:	e9 ed fe ff ff       	jmp    c0016ef6 <loadACPITables(unsigned char*)+0x10d>
c0017009:	90                   	nop
c001700a:	83 c4 44             	add    esp,0x44
c001700d:	5b                   	pop    ebx
c001700e:	5e                   	pop    esi
c001700f:	c3                   	ret    

c0017010 <findRSDT(unsigned char*)>:
c0017010:	56                   	push   esi
c0017011:	53                   	push   ebx
c0017012:	83 ec 44             	sub    esp,0x44
c0017015:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c001701a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017020:	83 e0 04             	and    eax,0x4
c0017023:	84 c0                	test   al,al
c0017025:	75 0a                	jne    c0017031 <findRSDT(unsigned char*)+0x21>
c0017027:	b8 00 00 00 00       	mov    eax,0x0
c001702c:	e9 f7 00 00 00       	jmp    c0017128 <findRSDT(unsigned char*)+0x118>
c0017031:	83 ec 04             	sub    esp,0x4
c0017034:	6a 24                	push   0x24
c0017036:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001703a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001703e:	50                   	push   eax
c001703f:	e8 11 96 fe ff       	call   c0000655 <memcpy>
c0017044:	83 c4 10             	add    esp,0x10
c0017047:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001704b:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001704f:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017057:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001705b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001705f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017063:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017067:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001706b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001706f:	25 ff 0f 00 00       	and    eax,0xfff
c0017074:	89 c6                	mov    esi,eax
c0017076:	e8 c6 a7 ff ff       	call   c0011841 <Virt::getAKernelVAS()>
c001707b:	89 c3                	mov    ebx,eax
c001707d:	83 ec 0c             	sub    esp,0xc
c0017080:	6a 02                	push   0x2
c0017082:	e8 2a a6 ff ff       	call   c00116b1 <Virt::allocateKernelVirtualPages(int)>
c0017087:	83 c4 10             	add    esp,0x10
c001708a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001708e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017094:	83 ec 0c             	sub    esp,0xc
c0017097:	6a 01                	push   0x1
c0017099:	6a 02                	push   0x2
c001709b:	50                   	push   eax
c001709c:	52                   	push   edx
c001709d:	53                   	push   ebx
c001709e:	e8 cd af ff ff       	call   c0012070 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00170a3:	83 c4 20             	add    esp,0x20
c00170a6:	09 f0                	or     eax,esi
c00170a8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00170ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00170b0:	25 ff 0f 00 00       	and    eax,0xfff
c00170b5:	89 c6                	mov    esi,eax
c00170b7:	e8 85 a7 ff ff       	call   c0011841 <Virt::getAKernelVAS()>
c00170bc:	89 c3                	mov    ebx,eax
c00170be:	83 ec 0c             	sub    esp,0xc
c00170c1:	6a 02                	push   0x2
c00170c3:	e8 e9 a5 ff ff       	call   c00116b1 <Virt::allocateKernelVirtualPages(int)>
c00170c8:	83 c4 10             	add    esp,0x10
c00170cb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00170cf:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00170d5:	83 ec 0c             	sub    esp,0xc
c00170d8:	6a 01                	push   0x1
c00170da:	6a 02                	push   0x2
c00170dc:	50                   	push   eax
c00170dd:	52                   	push   edx
c00170de:	53                   	push   ebx
c00170df:	e8 8c af ff ff       	call   c0012070 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00170e4:	83 c4 20             	add    esp,0x20
c00170e7:	09 f0                	or     eax,esi
c00170e9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00170ed:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00170f2:	75 11                	jne    c0017105 <findRSDT(unsigned char*)+0xf5>
c00170f4:	c6 05 c0 ca 02 c0 00 	mov    BYTE PTR ds:0xc002cac0,0x0
c00170fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00170ff:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017103:	eb 1f                	jmp    c0017124 <findRSDT(unsigned char*)+0x114>
c0017105:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c001710a:	75 11                	jne    c001711d <findRSDT(unsigned char*)+0x10d>
c001710c:	c6 05 c0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002cac0,0x1
c0017113:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017117:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001711b:	eb 07                	jmp    c0017124 <findRSDT(unsigned char*)+0x114>
c001711d:	b8 00 00 00 00       	mov    eax,0x0
c0017122:	eb 04                	jmp    c0017128 <findRSDT(unsigned char*)+0x118>
c0017124:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017128:	83 c4 44             	add    esp,0x44
c001712b:	5b                   	pop    ebx
c001712c:	5e                   	pop    esi
c001712d:	c3                   	ret    

c001712e <findDataTable(unsigned char*, char*)>:
c001712e:	83 ec 1c             	sub    esp,0x1c
c0017131:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c0017136:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001713c:	83 e0 04             	and    eax,0x4
c001713f:	84 c0                	test   al,al
c0017141:	75 07                	jne    c001714a <findDataTable(unsigned char*, char*)+0x1c>
c0017143:	b8 00 00 00 00       	mov    eax,0x0
c0017148:	eb 7c                	jmp    c00171c6 <findDataTable(unsigned char*, char*)+0x98>
c001714a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017152:	a1 ac c8 02 c0       	mov    eax,ds:0xc002c8ac
c0017157:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001715b:	7d 3a                	jge    c0017197 <findDataTable(unsigned char*, char*)+0x69>
c001715d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017161:	c1 e0 03             	shl    eax,0x3
c0017164:	05 c0 c8 02 c0       	add    eax,0xc002c8c0
c0017169:	83 ec 04             	sub    esp,0x4
c001716c:	6a 04                	push   0x4
c001716e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017172:	50                   	push   eax
c0017173:	e8 7a 94 fe ff       	call   c00005f2 <memcmp>
c0017178:	83 c4 10             	add    esp,0x10
c001717b:	85 c0                	test   eax,eax
c001717d:	0f 94 c0             	sete   al
c0017180:	84 c0                	test   al,al
c0017182:	74 0d                	je     c0017191 <findDataTable(unsigned char*, char*)+0x63>
c0017184:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017188:	8b 04 c5 c4 c8 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd373c]
c001718f:	eb 35                	jmp    c00171c6 <findDataTable(unsigned char*, char*)+0x98>
c0017191:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017195:	eb bb                	jmp    c0017152 <findDataTable(unsigned char*, char*)+0x24>
c0017197:	a0 c0 ca 02 c0       	mov    al,ds:0xc002cac0
c001719c:	84 c0                	test   al,al
c001719e:	74 07                	je     c00171a7 <findDataTable(unsigned char*, char*)+0x79>
c00171a0:	b8 58 00 00 00       	mov    eax,0x58
c00171a5:	eb 05                	jmp    c00171ac <findDataTable(unsigned char*, char*)+0x7e>
c00171a7:	b8 52 00 00 00       	mov    eax,0x52
c00171ac:	83 ec 04             	sub    esp,0x4
c00171af:	50                   	push   eax
c00171b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00171b4:	68 40 95 02 c0       	push   0xc0029540
c00171b9:	e8 e3 b4 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00171be:	83 c4 10             	add    esp,0x10
c00171c1:	b8 00 00 00 00       	mov    eax,0x0
c00171c6:	83 c4 1c             	add    esp,0x1c
c00171c9:	c3                   	ret    

c00171ca <scanMADT()>:
c00171ca:	53                   	push   ebx
c00171cb:	83 ec 38             	sub    esp,0x38
c00171ce:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c00171d3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00171d9:	83 e0 04             	and    eax,0x4
c00171dc:	84 c0                	test   al,al
c00171de:	0f 84 63 04 00 00    	je     c0017647 <scanMADT()+0x47d>
c00171e4:	e8 76 fb ff ff       	call   c0016d5f <findRSDP()>
c00171e9:	a3 cc ca 02 c0       	mov    ds:0xc002cacc,eax
c00171ee:	a1 cc ca 02 c0       	mov    eax,ds:0xc002cacc
c00171f3:	85 c0                	test   eax,eax
c00171f5:	75 19                	jne    c0017210 <scanMADT()+0x46>
c00171f7:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c00171fc:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017202:	83 e2 fb             	and    edx,0xfffffffb
c0017205:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001720b:	e9 3b 04 00 00       	jmp    c001764b <scanMADT()+0x481>
c0017210:	a1 cc ca 02 c0       	mov    eax,ds:0xc002cacc
c0017215:	83 ec 0c             	sub    esp,0xc
c0017218:	50                   	push   eax
c0017219:	e8 f2 fd ff ff       	call   c0017010 <findRSDT(unsigned char*)>
c001721e:	83 c4 10             	add    esp,0x10
c0017221:	a3 c8 ca 02 c0       	mov    ds:0xc002cac8,eax
c0017226:	a1 c8 ca 02 c0       	mov    eax,ds:0xc002cac8
c001722b:	85 c0                	test   eax,eax
c001722d:	75 19                	jne    c0017248 <scanMADT()+0x7e>
c001722f:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c0017234:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001723a:	83 e2 fb             	and    edx,0xfffffffb
c001723d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017243:	e9 03 04 00 00       	jmp    c001764b <scanMADT()+0x481>
c0017248:	a1 c8 ca 02 c0       	mov    eax,ds:0xc002cac8
c001724d:	83 ec 0c             	sub    esp,0xc
c0017250:	50                   	push   eax
c0017251:	e8 93 fb ff ff       	call   c0016de9 <loadACPITables(unsigned char*)>
c0017256:	83 c4 10             	add    esp,0x10
c0017259:	a1 c8 ca 02 c0       	mov    eax,ds:0xc002cac8
c001725e:	83 ec 08             	sub    esp,0x8
c0017261:	68 5e 94 02 c0       	push   0xc002945e
c0017266:	50                   	push   eax
c0017267:	e8 c2 fe ff ff       	call   c001712e <findDataTable(unsigned char*, char*)>
c001726c:	83 c4 10             	add    esp,0x10
c001726f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017273:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017278:	75 19                	jne    c0017293 <scanMADT()+0xc9>
c001727a:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c001727f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017285:	83 e2 fe             	and    edx,0xfffffffe
c0017288:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001728e:	e9 b8 03 00 00       	jmp    c001764b <scanMADT()+0x481>
c0017293:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001729b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001729f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00172a2:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00172a6:	0f 87 9f 03 00 00    	ja     c001764b <scanMADT()+0x481>
c00172ac:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00172b4:	0f 87 91 03 00 00    	ja     c001764b <scanMADT()+0x481>
c00172ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00172be:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00172c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00172c6:	8d 50 01             	lea    edx,[eax+0x1]
c00172c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00172cd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00172d1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00172d5:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00172d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00172dd:	8d 50 01             	lea    edx,[eax+0x1]
c00172e0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00172e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00172e8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00172ec:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00172f0:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c00172f5:	0f 86 4f 03 00 00    	jbe    c001764a <scanMADT()+0x480>
c00172fb:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017300:	75 57                	jne    c0017359 <scanMADT()+0x18f>
c0017302:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017306:	8d 50 01             	lea    edx,[eax+0x1]
c0017309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001730d:	8a 15 c0 cc 02 c0    	mov    dl,BYTE PTR ds:0xc002ccc0
c0017313:	0f b6 d2             	movzx  edx,dl
c0017316:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001731a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001731e:	88 82 00 cd 02 c0    	mov    BYTE PTR [edx-0x3ffd3300],al
c0017324:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017328:	8d 50 01             	lea    edx,[eax+0x1]
c001732b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001732f:	8a 15 c0 cc 02 c0    	mov    dl,BYTE PTR ds:0xc002ccc0
c0017335:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017338:	88 0d c0 cc 02 c0    	mov    BYTE PTR ds:0xc002ccc0,cl
c001733e:	0f b6 d2             	movzx  edx,dl
c0017341:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017345:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017349:	88 82 e0 cc 02 c0    	mov    BYTE PTR [edx-0x3ffd3320],al
c001734f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017354:	e9 da 02 00 00       	jmp    c0017633 <scanMADT()+0x469>
c0017359:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c001735e:	0f 85 14 01 00 00    	jne    c0017478 <scanMADT()+0x2ae>
c0017364:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017368:	8d 50 01             	lea    edx,[eax+0x1]
c001736b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001736f:	8a 15 80 cb 02 c0    	mov    dl,BYTE PTR ds:0xc002cb80
c0017375:	0f b6 d2             	movzx  edx,dl
c0017378:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001737c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017380:	88 82 a0 cb 02 c0    	mov    BYTE PTR [edx-0x3ffd3460],al
c0017386:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c001738a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001738e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017392:	01 d0                	add    eax,edx
c0017394:	83 c0 2c             	add    eax,0x2c
c0017397:	8a 00                	mov    al,BYTE PTR [eax]
c0017399:	0f b6 d0             	movzx  edx,al
c001739c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173a0:	8d 48 01             	lea    ecx,[eax+0x1]
c00173a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173a7:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00173ab:	0f b6 c0             	movzx  eax,al
c00173ae:	c1 e0 08             	shl    eax,0x8
c00173b1:	89 d1                	mov    ecx,edx
c00173b3:	09 c1                	or     ecx,eax
c00173b5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173b9:	8d 50 02             	lea    edx,[eax+0x2]
c00173bc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173c0:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00173c4:	0f b6 c0             	movzx  eax,al
c00173c7:	c1 e0 10             	shl    eax,0x10
c00173ca:	09 c1                	or     ecx,eax
c00173cc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173d0:	8d 50 03             	lea    edx,[eax+0x3]
c00173d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173d7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00173db:	0f b6 c0             	movzx  eax,al
c00173de:	c1 e0 18             	shl    eax,0x18
c00173e1:	09 c1                	or     ecx,eax
c00173e3:	89 ca                	mov    edx,ecx
c00173e5:	a0 80 cb 02 c0       	mov    al,ds:0xc002cb80
c00173ea:	0f b6 c0             	movzx  eax,al
c00173ed:	89 14 85 c0 cb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3440],edx
c00173f4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00173f9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00173fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017401:	01 d0                	add    eax,edx
c0017403:	83 c0 2c             	add    eax,0x2c
c0017406:	8a 00                	mov    al,BYTE PTR [eax]
c0017408:	0f b6 d0             	movzx  edx,al
c001740b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001740f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017412:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017416:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001741a:	0f b6 c0             	movzx  eax,al
c001741d:	c1 e0 08             	shl    eax,0x8
c0017420:	89 d1                	mov    ecx,edx
c0017422:	09 c1                	or     ecx,eax
c0017424:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017428:	8d 50 02             	lea    edx,[eax+0x2]
c001742b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001742f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017433:	0f b6 c0             	movzx  eax,al
c0017436:	c1 e0 10             	shl    eax,0x10
c0017439:	09 c1                	or     ecx,eax
c001743b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001743f:	8d 50 03             	lea    edx,[eax+0x3]
c0017442:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017446:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001744a:	0f b6 c0             	movzx  eax,al
c001744d:	c1 e0 18             	shl    eax,0x18
c0017450:	09 c1                	or     ecx,eax
c0017452:	89 ca                	mov    edx,ecx
c0017454:	a0 80 cb 02 c0       	mov    al,ds:0xc002cb80
c0017459:	0f b6 c0             	movzx  eax,al
c001745c:	89 14 85 40 cc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd33c0],edx
c0017463:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017468:	a0 80 cb 02 c0       	mov    al,ds:0xc002cb80
c001746d:	40                   	inc    eax
c001746e:	a2 80 cb 02 c0       	mov    ds:0xc002cb80,al
c0017473:	e9 bb 01 00 00       	jmp    c0017633 <scanMADT()+0x469>
c0017478:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c001747d:	0f 85 e9 00 00 00    	jne    c001756c <scanMADT()+0x3a2>
c0017483:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017487:	8d 50 01             	lea    edx,[eax+0x1]
c001748a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001748e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017492:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017496:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001749a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001749e:	8d 50 01             	lea    edx,[eax+0x1]
c00174a1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00174a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00174a9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00174ad:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00174b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00174b5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174b9:	01 d0                	add    eax,edx
c00174bb:	83 c0 2c             	add    eax,0x2c
c00174be:	8a 00                	mov    al,BYTE PTR [eax]
c00174c0:	0f b6 d0             	movzx  edx,al
c00174c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174c7:	8d 48 01             	lea    ecx,[eax+0x1]
c00174ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174ce:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00174d2:	0f b6 c0             	movzx  eax,al
c00174d5:	c1 e0 08             	shl    eax,0x8
c00174d8:	89 d1                	mov    ecx,edx
c00174da:	09 c1                	or     ecx,eax
c00174dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174e0:	8d 50 02             	lea    edx,[eax+0x2]
c00174e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174e7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00174eb:	0f b6 c0             	movzx  eax,al
c00174ee:	c1 e0 10             	shl    eax,0x10
c00174f1:	09 c1                	or     ecx,eax
c00174f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174f7:	8d 50 03             	lea    edx,[eax+0x3]
c00174fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174fe:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017502:	0f b6 c0             	movzx  eax,al
c0017505:	c1 e0 18             	shl    eax,0x18
c0017508:	09 c8                	or     eax,ecx
c001750a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001750e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017513:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017517:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001751b:	01 d0                	add    eax,edx
c001751d:	83 c0 2c             	add    eax,0x2c
c0017520:	8a 00                	mov    al,BYTE PTR [eax]
c0017522:	0f b6 c0             	movzx  eax,al
c0017525:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017529:	8d 4a 01             	lea    ecx,[edx+0x1]
c001752c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017530:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017534:	0f b6 d2             	movzx  edx,dl
c0017537:	c1 e2 08             	shl    edx,0x8
c001753a:	09 d0                	or     eax,edx
c001753c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017541:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017546:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001754b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001754f:	88 90 80 b4 02 c0    	mov    BYTE PTR [eax-0x3ffd4b80],dl
c0017555:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001755a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001755f:	66 89 84 12 60 cb 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd34a0],ax
c0017567:	e9 c7 00 00 00       	jmp    c0017633 <scanMADT()+0x469>
c001756c:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017571:	0f 85 b0 00 00 00    	jne    c0017627 <scanMADT()+0x45d>
c0017577:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001757b:	8d 50 01             	lea    edx,[eax+0x1]
c001757e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017582:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017586:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001758a:	0f b6 c0             	movzx  eax,al
c001758d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017591:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017595:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017599:	01 d0                	add    eax,edx
c001759b:	83 c0 2c             	add    eax,0x2c
c001759e:	8a 00                	mov    al,BYTE PTR [eax]
c00175a0:	0f b6 d0             	movzx  edx,al
c00175a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00175aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175ae:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00175b2:	0f b6 c0             	movzx  eax,al
c00175b5:	c1 e0 08             	shl    eax,0x8
c00175b8:	09 d0                	or     eax,edx
c00175ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00175be:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00175c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175c7:	8d 50 01             	lea    edx,[eax+0x1]
c00175ca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00175ce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175d2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00175d6:	0f b6 c0             	movzx  eax,al
c00175d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175e1:	c1 e0 08             	shl    eax,0x8
c00175e4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00175e8:	89 c1                	mov    ecx,eax
c00175ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175ee:	c1 e0 18             	shl    eax,0x18
c00175f1:	89 c3                	mov    ebx,eax
c00175f3:	a1 d0 ca 02 c0       	mov    eax,ds:0xc002cad0
c00175f8:	8d 50 01             	lea    edx,[eax+0x1]
c00175fb:	89 15 d0 ca 02 c0    	mov    DWORD PTR ds:0xc002cad0,edx
c0017601:	09 d9                	or     ecx,ebx
c0017603:	89 ca                	mov    edx,ecx
c0017605:	89 14 85 e0 ca 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3520],edx
c001760c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017610:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017614:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017618:	68 70 95 02 c0       	push   0xc0029570
c001761d:	e8 7f b0 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0017622:	83 c4 10             	add    esp,0x10
c0017625:	eb 0c                	jmp    c0017633 <scanMADT()+0x469>
c0017627:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c001762c:	75 05                	jne    c0017633 <scanMADT()+0x469>
c001762e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017633:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017638:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001763c:	01 d0                	add    eax,edx
c001763e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017642:	e9 54 fc ff ff       	jmp    c001729b <scanMADT()+0xd1>
c0017647:	90                   	nop
c0017648:	eb 01                	jmp    c001764b <scanMADT()+0x481>
c001764a:	90                   	nop
c001764b:	83 c4 38             	add    esp,0x38
c001764e:	5b                   	pop    ebx
c001764f:	c3                   	ret    

c0017650 <ACPI::ACPI()>:
c0017650:	83 ec 0c             	sub    esp,0xc
c0017653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017657:	83 ec 08             	sub    esp,0x8
c001765a:	68 63 94 02 c0       	push   0xc0029463
c001765f:	50                   	push   eax
c0017660:	e8 1b c6 ff ff       	call   c0013c80 <Device::Device(char const*)>
c0017665:	83 c4 10             	add    esp,0x10
c0017668:	ba 48 96 02 c0       	mov    edx,0xc0029648
c001766d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017671:	89 10                	mov    DWORD PTR [eax],edx
c0017673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017677:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001767e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017682:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c001768c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017690:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c001769a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001769e:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c00176a5:	e8 20 fb ff ff       	call   c00171ca <scanMADT()>
c00176aa:	90                   	nop
c00176ab:	83 c4 0c             	add    esp,0xc
c00176ae:	c3                   	ret    
c00176af:	90                   	nop

c00176b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00176b0:	83 ec 2c             	sub    esp,0x2c
c00176b3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00176b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00176bb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00176bf:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00176c3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00176c8:	88 d0                	mov    al,dl
c00176ca:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00176ce:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00176d3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00176db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176df:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00176e5:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00176e9:	0f 8d 97 00 00 00    	jge    c0017786 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00176ef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00176f7:	83 c2 2a             	add    edx,0x2a
c00176fa:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00176fe:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017703:	75 78                	jne    c001777d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017705:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017709:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001770d:	83 c2 2a             	add    edx,0x2a
c0017710:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017714:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017718:	75 63                	jne    c001777d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001771a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001771f:	74 3a                	je     c001775b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017721:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017725:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017729:	83 c2 2a             	add    edx,0x2a
c001772c:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017730:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017734:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017737:	39 c2                	cmp    edx,eax
c0017739:	74 10                	je     c001774b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001773b:	83 ec 0c             	sub    esp,0xc
c001773e:	68 ac 95 02 c0       	push   0xc00295ac
c0017743:	e8 34 1e 00 00       	call   c001957c <Krnl::panic(char const*)>
c0017748:	83 c4 10             	add    esp,0x10
c001774b:	83 ec 0c             	sub    esp,0xc
c001774e:	68 68 94 02 c0       	push   0xc0029468
c0017753:	e8 24 1e 00 00       	call   c001957c <Krnl::panic(char const*)>
c0017758:	83 c4 10             	add    esp,0x10
c001775b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001775f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017763:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017767:	83 c2 2a             	add    edx,0x2a
c001776a:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001776e:	8b 02                	mov    eax,DWORD PTR [edx]
c0017770:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017773:	89 01                	mov    DWORD PTR [ecx],eax
c0017775:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017778:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001777d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017781:	e9 55 ff ff ff       	jmp    c00176db <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017786:	90                   	nop
c0017787:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001778b:	83 c4 2c             	add    esp,0x2c
c001778e:	c2 04 00             	ret    0x4
c0017791:	90                   	nop

c0017792 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017792:	56                   	push   esi
c0017793:	53                   	push   ebx
c0017794:	83 ec 14             	sub    esp,0x14
c0017797:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001779b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001779f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00177a3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00177a8:	88 c8                	mov    al,cl
c00177aa:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00177ae:	88 d0                	mov    al,dl
c00177b0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00177b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177b8:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c00177be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177c2:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c00177c8:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c00177cd:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00177d2:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00177d7:	83 ec 04             	sub    esp,0x4
c00177da:	56                   	push   esi
c00177db:	53                   	push   ebx
c00177dc:	51                   	push   ecx
c00177dd:	52                   	push   edx
c00177de:	50                   	push   eax
c00177df:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00177e3:	68 dc 95 02 c0       	push   0xc00295dc
c00177e8:	e8 b4 ae ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00177ed:	83 c4 20             	add    esp,0x20
c00177f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177f4:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00177fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177fe:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017801:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017805:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017809:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001780d:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017813:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017817:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001781a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001781e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017823:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017827:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001782d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017831:	8d 48 01             	lea    ecx,[eax+0x1]
c0017834:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017838:	83 c2 2a             	add    edx,0x2a
c001783b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001783f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017843:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017849:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001784d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017850:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017854:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017858:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001785c:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017862:	8d 50 01             	lea    edx,[eax+0x1]
c0017865:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017869:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c001786f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017873:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017879:	3d 00 08 00 00       	cmp    eax,0x800
c001787e:	75 10                	jne    c0017890 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0017880:	83 ec 0c             	sub    esp,0xc
c0017883:	68 77 94 02 c0       	push   0xc0029477
c0017888:	e8 ef 1c 00 00       	call   c001957c <Krnl::panic(char const*)>
c001788d:	83 c4 10             	add    esp,0x10
c0017890:	90                   	nop
c0017891:	83 c4 14             	add    esp,0x14
c0017894:	5b                   	pop    ebx
c0017895:	5e                   	pop    esi
c0017896:	c3                   	ret    
c0017897:	90                   	nop

c0017898 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017898:	b8 00 00 00 00       	mov    eax,0x0
c001789d:	c3                   	ret    

c001789e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001789e:	83 ec 1c             	sub    esp,0x1c
c00178a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00178a5:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00178a8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00178ac:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c00178b1:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00178b6:	83 ec 08             	sub    esp,0x8
c00178b9:	52                   	push   edx
c00178ba:	50                   	push   eax
c00178bb:	e8 2c 72 ff ff       	call   c000eaec <Computer::readCMOS(unsigned char)>
c00178c0:	83 c4 10             	add    esp,0x10
c00178c3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00178c7:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c00178cc:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00178d1:	83 ec 04             	sub    esp,0x4
c00178d4:	6a 01                	push   0x1
c00178d6:	52                   	push   edx
c00178d7:	50                   	push   eax
c00178d8:	e8 25 73 ff ff       	call   c000ec02 <Computer::writeCMOS(unsigned char, unsigned char)>
c00178dd:	83 c4 10             	add    esp,0x10
c00178e0:	90                   	nop
c00178e1:	83 c4 1c             	add    esp,0x1c
c00178e4:	c3                   	ret    
c00178e5:	90                   	nop

c00178e6 <ACPI::open(int, int, void*)>:
c00178e6:	53                   	push   ebx
c00178e7:	83 ec 28             	sub    esp,0x28
c00178ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00178ee:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00178f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00178f9:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00178ff:	84 c0                	test   al,al
c0017901:	74 67                	je     c001796a <ACPI::open(int, int, void*)+0x84>
c0017903:	c7 44 24 10 58 01 00 00 	mov    DWORD PTR [esp+0x10],0x158
c001790b:	83 ec 0c             	sub    esp,0xc
c001790e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017912:	e8 bd 7b ff ff       	call   c000f4d4 <malloc>
c0017917:	83 c4 10             	add    esp,0x10
c001791a:	89 c3                	mov    ebx,eax
c001791c:	83 ec 0c             	sub    esp,0xc
c001791f:	53                   	push   ebx
c0017920:	e8 f7 97 00 00       	call   c002111c <PCI::PCI()>
c0017925:	83 c4 10             	add    esp,0x10
c0017928:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c001792c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017930:	83 ec 08             	sub    esp,0x8
c0017933:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017937:	50                   	push   eax
c0017938:	e8 53 c1 ff ff       	call   c0013a90 <Device::addChild(Device*)>
c001793d:	83 c4 10             	add    esp,0x10
c0017940:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017944:	8b 00                	mov    eax,DWORD PTR [eax]
c0017946:	83 c0 08             	add    eax,0x8
c0017949:	8b 00                	mov    eax,DWORD PTR [eax]
c001794b:	6a 00                	push   0x0
c001794d:	6a 00                	push   0x0
c001794f:	6a 00                	push   0x0
c0017951:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017955:	ff d0                	call   eax
c0017957:	83 c4 10             	add    esp,0x10
c001795a:	83 ec 0c             	sub    esp,0xc
c001795d:	68 94 94 02 c0       	push   0xc0029494
c0017962:	e8 3a ad ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0017967:	83 c4 10             	add    esp,0x10
c001796a:	83 ec 0c             	sub    esp,0xc
c001796d:	68 9f 94 02 c0       	push   0xc002949f
c0017972:	e8 4f 3b 00 00       	call   c001b4c6 <Thr::loadKernelSymbolTable(char const*)>
c0017977:	83 c4 10             	add    esp,0x10
c001797a:	8b 1d 28 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c228
c0017980:	83 ec 08             	sub    esp,0x8
c0017983:	6a 01                	push   0x1
c0017985:	68 bd 94 02 c0       	push   0xc00294bd
c001798a:	e8 f7 45 00 00       	call   c001bf86 <Thr::loadDLL(char const*, bool)>
c001798f:	83 c4 10             	add    esp,0x10
c0017992:	83 ec 08             	sub    esp,0x8
c0017995:	53                   	push   ebx
c0017996:	50                   	push   eax
c0017997:	e8 f9 47 00 00       	call   c001c195 <Thr::executeDLL(unsigned long, void*)>
c001799c:	83 c4 10             	add    esp,0x10
c001799f:	8b 1d 28 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c228
c00179a5:	83 ec 08             	sub    esp,0x8
c00179a8:	6a 01                	push   0x1
c00179aa:	68 da 94 02 c0       	push   0xc00294da
c00179af:	e8 d2 45 00 00       	call   c001bf86 <Thr::loadDLL(char const*, bool)>
c00179b4:	83 c4 10             	add    esp,0x10
c00179b7:	83 ec 08             	sub    esp,0x8
c00179ba:	53                   	push   ebx
c00179bb:	50                   	push   eax
c00179bc:	e8 d4 47 00 00       	call   c001c195 <Thr::executeDLL(unsigned long, void*)>
c00179c1:	83 c4 10             	add    esp,0x10
c00179c4:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c00179c9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179cf:	83 e0 04             	and    eax,0x4
c00179d2:	84 c0                	test   al,al
c00179d4:	0f 84 d6 00 00 00    	je     c0017ab0 <ACPI::open(int, int, void*)+0x1ca>
c00179da:	c7 44 24 0c 14 01 00 00 	mov    DWORD PTR [esp+0xc],0x114
c00179e2:	83 ec 0c             	sub    esp,0xc
c00179e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00179e9:	e8 e6 7a ff ff       	call   c000f4d4 <malloc>
c00179ee:	83 c4 10             	add    esp,0x10
c00179f1:	89 c3                	mov    ebx,eax
c00179f3:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c00179f8:	83 ec 04             	sub    esp,0x4
c00179fb:	50                   	push   eax
c00179fc:	68 f7 94 02 c0       	push   0xc00294f7
c0017a01:	53                   	push   ebx
c0017a02:	e8 c9 b1 ff ff       	call   c0012bd0 <File::File(char const*, Process*)>
c0017a07:	83 c4 10             	add    esp,0x10
c0017a0a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0017a0e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017a13:	74 17                	je     c0017a2c <ACPI::open(int, int, void*)+0x146>
c0017a15:	83 ec 0c             	sub    esp,0xc
c0017a18:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017a1c:	e8 81 b4 ff ff       	call   c0012ea2 <File::exists()>
c0017a21:	83 c4 10             	add    esp,0x10
c0017a24:	84 c0                	test   al,al
c0017a26:	74 04                	je     c0017a2c <ACPI::open(int, int, void*)+0x146>
c0017a28:	b0 01                	mov    al,0x1
c0017a2a:	eb 02                	jmp    c0017a2e <ACPI::open(int, int, void*)+0x148>
c0017a2c:	b0 00                	mov    al,0x0
c0017a2e:	84 c0                	test   al,al
c0017a30:	74 25                	je     c0017a57 <ACPI::open(int, int, void*)+0x171>
c0017a32:	8b 1d 28 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c228
c0017a38:	83 ec 08             	sub    esp,0x8
c0017a3b:	6a 01                	push   0x1
c0017a3d:	68 f7 94 02 c0       	push   0xc00294f7
c0017a42:	e8 3f 45 00 00       	call   c001bf86 <Thr::loadDLL(char const*, bool)>
c0017a47:	83 c4 10             	add    esp,0x10
c0017a4a:	83 ec 08             	sub    esp,0x8
c0017a4d:	53                   	push   ebx
c0017a4e:	50                   	push   eax
c0017a4f:	e8 41 47 00 00       	call   c001c195 <Thr::executeDLL(unsigned long, void*)>
c0017a54:	83 c4 10             	add    esp,0x10
c0017a57:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017a5c:	74 1e                	je     c0017a7c <ACPI::open(int, int, void*)+0x196>
c0017a5e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017a63:	74 17                	je     c0017a7c <ACPI::open(int, int, void*)+0x196>
c0017a65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a69:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a6b:	83 c0 08             	add    eax,0x8
c0017a6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a70:	83 ec 0c             	sub    esp,0xc
c0017a73:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017a77:	ff d0                	call   eax
c0017a79:	83 c4 10             	add    esp,0x10
c0017a7c:	a1 c8 ca 02 c0       	mov    eax,ds:0xc002cac8
c0017a81:	83 ec 08             	sub    esp,0x8
c0017a84:	68 14 95 02 c0       	push   0xc0029514
c0017a89:	50                   	push   eax
c0017a8a:	e8 9f f6 ff ff       	call   c001712e <findDataTable(unsigned char*, char*)>
c0017a8f:	83 c4 10             	add    esp,0x10
c0017a92:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a96:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017a9b:	74 13                	je     c0017ab0 <ACPI::open(int, int, void*)+0x1ca>
c0017a9d:	83 ec 08             	sub    esp,0x8
c0017aa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017aa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017aa8:	e8 f1 fd ff ff       	call   c001789e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0017aad:	83 c4 10             	add    esp,0x10
c0017ab0:	b8 00 00 00 00       	mov    eax,0x0
c0017ab5:	83 c4 28             	add    esp,0x28
c0017ab8:	5b                   	pop    ebx
c0017ab9:	c3                   	ret    

c0017aba <ACPI::sleep()>:
c0017aba:	83 ec 0c             	sub    esp,0xc
c0017abd:	a1 a0 c8 02 c0       	mov    eax,ds:0xc002c8a0
c0017ac2:	85 c0                	test   eax,eax
c0017ac4:	74 07                	je     c0017acd <ACPI::sleep()+0x13>
c0017ac6:	a1 a0 c8 02 c0       	mov    eax,ds:0xc002c8a0
c0017acb:	ff d0                	call   eax
c0017acd:	90                   	nop
c0017ace:	83 c4 0c             	add    esp,0xc
c0017ad1:	c3                   	ret    

c0017ad2 <CPU::close(int, int, void*)>:
c0017ad2:	31 c0                	xor    eax,eax
c0017ad4:	c3                   	ret    
c0017ad5:	90                   	nop

c0017ad6 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0017ad6:	55                   	push   ebp
c0017ad7:	57                   	push   edi
c0017ad8:	56                   	push   esi
c0017ad9:	53                   	push   ebx
c0017ada:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017ade:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ae2:	89 ce                	mov    esi,ecx
c0017ae4:	89 d5                	mov    ebp,edx
c0017ae6:	80 f9 04             	cmp    cl,0x4
c0017ae9:	75 28                	jne    c0017b13 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0017aeb:	8d 42 f9             	lea    eax,[edx-0x7]
c0017aee:	3c 03                	cmp    al,0x3
c0017af0:	0f 86 63 01 00 00    	jbe    c0017c59 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017af6:	80 fa 03             	cmp    dl,0x3
c0017af9:	0f 84 5a 01 00 00    	je     c0017c59 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017aff:	8d 7a f2             	lea    edi,[edx-0xe]
c0017b02:	b8 50 b6 02 c0       	mov    eax,0xc002b650
c0017b07:	89 fb                	mov    ebx,edi
c0017b09:	80 fb 01             	cmp    bl,0x1
c0017b0c:	77 4e                	ja     c0017b5c <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0017b0e:	e9 52 01 00 00       	jmp    c0017c65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b13:	80 f9 05             	cmp    cl,0x5
c0017b16:	75 4d                	jne    c0017b65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0017b18:	b8 60 b6 02 c0       	mov    eax,0xc002b660
c0017b1d:	80 fa 03             	cmp    dl,0x3
c0017b20:	0f 86 3f 01 00 00    	jbe    c0017c65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b26:	8d 7a fa             	lea    edi,[edx-0x6]
c0017b29:	b8 70 b6 02 c0       	mov    eax,0xc002b670
c0017b2e:	89 fb                	mov    ebx,edi
c0017b30:	80 fb 01             	cmp    bl,0x1
c0017b33:	0f 86 2c 01 00 00    	jbe    c0017c65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b39:	b8 80 b6 02 c0       	mov    eax,0xc002b680
c0017b3e:	80 fa 08             	cmp    dl,0x8
c0017b41:	0f 84 1e 01 00 00    	je     c0017c65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b47:	89 d7                	mov    edi,edx
c0017b49:	b8 90 b6 02 c0       	mov    eax,0xc002b690
c0017b4e:	83 e7 fb             	and    edi,0xfffffffb
c0017b51:	89 fb                	mov    ebx,edi
c0017b53:	80 fb 09             	cmp    bl,0x9
c0017b56:	0f 84 09 01 00 00    	je     c0017c65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b5c:	31 c0                	xor    eax,eax
c0017b5e:	89 eb                	mov    ebx,ebp
c0017b60:	0f b6 fb             	movzx  edi,bl
c0017b63:	eb 30                	jmp    c0017b95 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0017b65:	31 c0                	xor    eax,eax
c0017b67:	80 f9 06             	cmp    cl,0x6
c0017b6a:	75 f2                	jne    c0017b5e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017b6c:	80 fa 0a             	cmp    dl,0xa
c0017b6f:	77 ed                	ja     c0017b5e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017b71:	bf de 05 00 00       	mov    edi,0x5de
c0017b76:	0f a3 d7             	bt     edi,edx
c0017b79:	73 e3                	jae    c0017b5e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017b7b:	b8 a0 b6 02 c0       	mov    eax,0xc002b6a0
c0017b80:	e9 e0 00 00 00       	jmp    c0017c65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b85:	39 c7                	cmp    edi,eax
c0017b87:	0f 84 d3 00 00 00    	je     c0017c60 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017b8d:	40                   	inc    eax
c0017b8e:	3d d0 00 00 00       	cmp    eax,0xd0
c0017b93:	74 09                	je     c0017b9e <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0017b95:	89 f3                	mov    ebx,esi
c0017b97:	80 fb 0f             	cmp    bl,0xf
c0017b9a:	75 f1                	jne    c0017b8d <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0017b9c:	eb e7                	jmp    c0017b85 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0017b9e:	80 f9 10             	cmp    cl,0x10
c0017ba1:	75 14                	jne    c0017bb7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0017ba3:	8d 42 fc             	lea    eax,[edx-0x4]
c0017ba6:	83 e0 fb             	and    eax,0xfffffffb
c0017ba9:	3c 02                	cmp    al,0x2
c0017bab:	76 34                	jbe    c0017be1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0017bad:	b8 5e 99 02 c0       	mov    eax,0xc002995e
c0017bb2:	80 fa 02             	cmp    dl,0x2
c0017bb5:	eb 24                	jmp    c0017bdb <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0017bb7:	80 f9 11             	cmp    cl,0x11
c0017bba:	75 13                	jne    c0017bcf <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0017bbc:	b8 5e 99 02 c0       	mov    eax,0xc002995e
c0017bc1:	80 fa 03             	cmp    dl,0x3
c0017bc4:	0f 85 9b 00 00 00    	jne    c0017c65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bca:	e9 91 00 00 00       	jmp    c0017c60 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017bcf:	80 f9 12             	cmp    cl,0x12
c0017bd2:	75 14                	jne    c0017be8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0017bd4:	b8 5e 99 02 c0       	mov    eax,0xc002995e
c0017bd9:	fe ca                	dec    dl
c0017bdb:	0f 85 84 00 00 00    	jne    c0017c65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017be1:	b8 c0 b6 02 c0       	mov    eax,0xc002b6c0
c0017be6:	eb 7d                	jmp    c0017c65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017be8:	80 f9 14             	cmp    cl,0x14
c0017beb:	75 12                	jne    c0017bff <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0017bed:	4a                   	dec    edx
c0017bee:	b8 5e 99 02 c0       	mov    eax,0xc002995e
c0017bf3:	80 fa 01             	cmp    dl,0x1
c0017bf6:	77 6d                	ja     c0017c65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bf8:	b8 d0 b6 02 c0       	mov    eax,0xc002b6d0
c0017bfd:	eb 66                	jmp    c0017c65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bff:	80 f9 15             	cmp    cl,0x15
c0017c02:	75 31                	jne    c0017c35 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0017c04:	b8 e0 b6 02 c0       	mov    eax,0xc002b6e0
c0017c09:	80 fa 01             	cmp    dl,0x1
c0017c0c:	74 57                	je     c0017c65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c0e:	b8 5e 99 02 c0       	mov    eax,0xc002995e
c0017c13:	80 fa 13             	cmp    dl,0x13
c0017c16:	76 0c                	jbe    c0017c24 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0017c18:	80 fa 30             	cmp    dl,0x30
c0017c1b:	75 48                	jne    c0017c65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c1d:	b8 00 b7 02 c0       	mov    eax,0xc002b700
c0017c22:	eb 41                	jmp    c0017c65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c24:	b9 04 00 09 00       	mov    ecx,0x90004
c0017c29:	0f a3 d1             	bt     ecx,edx
c0017c2c:	73 37                	jae    c0017c65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c2e:	b8 f0 b6 02 c0       	mov    eax,0xc002b6f0
c0017c33:	eb 30                	jmp    c0017c65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c35:	b8 5e 99 02 c0       	mov    eax,0xc002995e
c0017c3a:	80 f9 16             	cmp    cl,0x16
c0017c3d:	75 26                	jne    c0017c65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c3f:	b8 10 b7 02 c0       	mov    eax,0xc002b710
c0017c44:	84 d2                	test   dl,dl
c0017c46:	74 1d                	je     c0017c65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c48:	b8 5e 99 02 c0       	mov    eax,0xc002995e
c0017c4d:	80 fa 30             	cmp    dl,0x30
c0017c50:	75 13                	jne    c0017c65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c52:	b8 20 b7 02 c0       	mov    eax,0xc002b720
c0017c57:	eb 0c                	jmp    c0017c65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c59:	b8 40 b6 02 c0       	mov    eax,0xc002b640
c0017c5e:	eb 05                	jmp    c0017c65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c60:	b8 b0 b6 02 c0       	mov    eax,0xc002b6b0
c0017c65:	5b                   	pop    ebx
c0017c66:	5e                   	pop    esi
c0017c67:	5f                   	pop    edi
c0017c68:	5d                   	pop    ebp
c0017c69:	c3                   	ret    

c0017c6a <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0017c6a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017c6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017c72:	80 f9 04             	cmp    cl,0x4
c0017c75:	75 6b                	jne    c0017ce2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0017c77:	b8 a0 b4 02 c0       	mov    eax,0xc002b4a0
c0017c7c:	80 fa 01             	cmp    dl,0x1
c0017c7f:	0f 86 92 02 00 00    	jbe    c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c85:	b8 b0 b4 02 c0       	mov    eax,0xc002b4b0
c0017c8a:	80 fa 02             	cmp    dl,0x2
c0017c8d:	0f 84 84 02 00 00    	je     c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c93:	b8 c0 b4 02 c0       	mov    eax,0xc002b4c0
c0017c98:	80 fa 03             	cmp    dl,0x3
c0017c9b:	0f 84 76 02 00 00    	je     c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ca1:	b8 d0 b4 02 c0       	mov    eax,0xc002b4d0
c0017ca6:	80 fa 04             	cmp    dl,0x4
c0017ca9:	0f 84 68 02 00 00    	je     c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017caf:	b8 e0 b4 02 c0       	mov    eax,0xc002b4e0
c0017cb4:	80 fa 05             	cmp    dl,0x5
c0017cb7:	0f 84 5a 02 00 00    	je     c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017cbd:	b8 c0 b4 02 c0       	mov    eax,0xc002b4c0
c0017cc2:	80 fa 07             	cmp    dl,0x7
c0017cc5:	0f 84 4c 02 00 00    	je     c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ccb:	83 ea 08             	sub    edx,0x8
c0017cce:	b8 5e 99 02 c0       	mov    eax,0xc002995e
c0017cd3:	80 fa 01             	cmp    dl,0x1
c0017cd6:	0f 87 3b 02 00 00    	ja     c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017cdc:	b8 f0 b4 02 c0       	mov    eax,0xc002b4f0
c0017ce1:	c3                   	ret    
c0017ce2:	80 f9 05             	cmp    cl,0x5
c0017ce5:	75 45                	jne    c0017d2c <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0017ce7:	8d 4a ff             	lea    ecx,[edx-0x1]
c0017cea:	b8 00 b5 02 c0       	mov    eax,0xc002b500
c0017cef:	80 f9 02             	cmp    cl,0x2
c0017cf2:	0f 86 1f 02 00 00    	jbe    c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017cf8:	80 fa 04             	cmp    dl,0x4
c0017cfb:	0f 84 f3 01 00 00    	je     c0017ef4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0017d01:	80 fa 07             	cmp    dl,0x7
c0017d04:	0f 84 0d 02 00 00    	je     c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d0a:	b8 10 b5 02 c0       	mov    eax,0xc002b510
c0017d0f:	80 fa 08             	cmp    dl,0x8
c0017d12:	0f 84 ff 01 00 00    	je     c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d18:	b8 5e 99 02 c0       	mov    eax,0xc002995e
c0017d1d:	80 fa 09             	cmp    dl,0x9
c0017d20:	0f 85 f1 01 00 00    	jne    c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d26:	b8 20 b5 02 c0       	mov    eax,0xc002b520
c0017d2b:	c3                   	ret    
c0017d2c:	80 f9 06             	cmp    cl,0x6
c0017d2f:	0f 85 85 01 00 00    	jne    c0017eba <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0017d35:	b8 30 b5 02 c0       	mov    eax,0xc002b530
c0017d3a:	80 fa 01             	cmp    dl,0x1
c0017d3d:	0f 84 d4 01 00 00    	je     c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d43:	8d 42 fb             	lea    eax,[edx-0x5]
c0017d46:	3c 01                	cmp    al,0x1
c0017d48:	0f 86 ac 01 00 00    	jbe    c0017efa <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017d4e:	80 fa 03             	cmp    dl,0x3
c0017d51:	0f 84 a3 01 00 00    	je     c0017efa <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017d57:	8d 4a f9             	lea    ecx,[edx-0x7]
c0017d5a:	b8 50 b5 02 c0       	mov    eax,0xc002b550
c0017d5f:	80 f9 01             	cmp    cl,0x1
c0017d62:	0f 86 af 01 00 00    	jbe    c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d68:	80 fa 09             	cmp    dl,0x9
c0017d6b:	0f 84 8f 01 00 00    	je     c0017f00 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0017d71:	8d 4a f6             	lea    ecx,[edx-0xa]
c0017d74:	80 f9 01             	cmp    cl,0x1
c0017d77:	0f 86 9a 01 00 00    	jbe    c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d7d:	b8 60 b5 02 c0       	mov    eax,0xc002b560
c0017d82:	80 fa 0d             	cmp    dl,0xd
c0017d85:	0f 84 8c 01 00 00    	je     c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d8b:	b8 70 b5 02 c0       	mov    eax,0xc002b570
c0017d90:	80 fa 0e             	cmp    dl,0xe
c0017d93:	0f 84 7e 01 00 00    	je     c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d99:	b8 80 b5 02 c0       	mov    eax,0xc002b580
c0017d9e:	80 fa 0f             	cmp    dl,0xf
c0017da1:	0f 84 70 01 00 00    	je     c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017da7:	b8 60 b5 02 c0       	mov    eax,0xc002b560
c0017dac:	80 fa 15             	cmp    dl,0x15
c0017daf:	0f 84 62 01 00 00    	je     c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017db5:	8d 4a ea             	lea    ecx,[edx-0x16]
c0017db8:	b8 80 b5 02 c0       	mov    eax,0xc002b580
c0017dbd:	80 f9 01             	cmp    cl,0x1
c0017dc0:	0f 86 51 01 00 00    	jbe    c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dc6:	80 fa 1a             	cmp    dl,0x1a
c0017dc9:	0f 84 37 01 00 00    	je     c0017f06 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0017dcf:	80 fa 1c             	cmp    dl,0x1c
c0017dd2:	0f 84 34 01 00 00    	je     c0017f0c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0017dd8:	80 fa 1d             	cmp    dl,0x1d
c0017ddb:	0f 84 36 01 00 00    	je     c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017de1:	b8 b0 b5 02 c0       	mov    eax,0xc002b5b0
c0017de6:	80 fa 25             	cmp    dl,0x25
c0017de9:	0f 84 28 01 00 00    	je     c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017def:	8d 4a da             	lea    ecx,[edx-0x26]
c0017df2:	b8 a0 b5 02 c0       	mov    eax,0xc002b5a0
c0017df7:	80 f9 01             	cmp    cl,0x1
c0017dfa:	0f 86 17 01 00 00    	jbe    c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e00:	b8 c0 b5 02 c0       	mov    eax,0xc002b5c0
c0017e05:	80 fa 2a             	cmp    dl,0x2a
c0017e08:	0f 84 09 01 00 00    	je     c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e0e:	b8 b0 b5 02 c0       	mov    eax,0xc002b5b0
c0017e13:	80 fa 2c             	cmp    dl,0x2c
c0017e16:	0f 84 fb 00 00 00    	je     c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e1c:	b8 c0 b5 02 c0       	mov    eax,0xc002b5c0
c0017e21:	80 fa 2d             	cmp    dl,0x2d
c0017e24:	0f 84 ed 00 00 00    	je     c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e2a:	b8 90 b5 02 c0       	mov    eax,0xc002b590
c0017e2f:	80 fa 2e             	cmp    dl,0x2e
c0017e32:	0f 84 df 00 00 00    	je     c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e38:	b8 b0 b5 02 c0       	mov    eax,0xc002b5b0
c0017e3d:	80 fa 2f             	cmp    dl,0x2f
c0017e40:	0f 84 d1 00 00 00    	je     c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e46:	8d 4a cb             	lea    ecx,[edx-0x35]
c0017e49:	b8 a0 b5 02 c0       	mov    eax,0xc002b5a0
c0017e4e:	80 f9 01             	cmp    cl,0x1
c0017e51:	0f 86 c0 00 00 00    	jbe    c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e57:	b8 d0 b5 02 c0       	mov    eax,0xc002b5d0
c0017e5c:	80 fa 37             	cmp    dl,0x37
c0017e5f:	0f 84 b2 00 00 00    	je     c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e65:	b8 e0 b5 02 c0       	mov    eax,0xc002b5e0
c0017e6a:	80 fa 3a             	cmp    dl,0x3a
c0017e6d:	0f 84 a4 00 00 00    	je     c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e73:	b8 f0 b5 02 c0       	mov    eax,0xc002b5f0
c0017e78:	80 fa 3c             	cmp    dl,0x3c
c0017e7b:	0f 84 96 00 00 00    	je     c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e81:	b8 00 b6 02 c0       	mov    eax,0xc002b600
c0017e86:	80 fa 3d             	cmp    dl,0x3d
c0017e89:	0f 84 88 00 00 00    	je     c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e8f:	b8 e0 b5 02 c0       	mov    eax,0xc002b5e0
c0017e94:	80 fa 3e             	cmp    dl,0x3e
c0017e97:	74 7e                	je     c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e99:	8d 42 bb             	lea    eax,[edx-0x45]
c0017e9c:	3c 01                	cmp    al,0x1
c0017e9e:	76 72                	jbe    c0017f12 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017ea0:	80 fa 3f             	cmp    dl,0x3f
c0017ea3:	74 6d                	je     c0017f12 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017ea5:	80 fa 4a             	cmp    dl,0x4a
c0017ea8:	74 0a                	je     c0017eb4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0017eaa:	b8 5e 99 02 c0       	mov    eax,0xc002995e
c0017eaf:	80 fa 4d             	cmp    dl,0x4d
c0017eb2:	75 63                	jne    c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017eb4:	b8 d0 b5 02 c0       	mov    eax,0xc002b5d0
c0017eb9:	c3                   	ret    
c0017eba:	b8 5e 99 02 c0       	mov    eax,0xc002995e
c0017ebf:	80 f9 0b             	cmp    cl,0xb
c0017ec2:	75 0a                	jne    c0017ece <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0017ec4:	fe ca                	dec    dl
c0017ec6:	75 4f                	jne    c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ec8:	b8 10 b6 02 c0       	mov    eax,0xc002b610
c0017ecd:	c3                   	ret    
c0017ece:	80 f9 0f             	cmp    cl,0xf
c0017ed1:	75 44                	jne    c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ed3:	b8 20 b6 02 c0       	mov    eax,0xc002b620
c0017ed8:	80 fa 02             	cmp    dl,0x2
c0017edb:	76 3a                	jbe    c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017edd:	8d 42 fd             	lea    eax,[edx-0x3]
c0017ee0:	3c 01                	cmp    al,0x1
c0017ee2:	76 0a                	jbe    c0017eee <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0017ee4:	b8 5e 99 02 c0       	mov    eax,0xc002995e
c0017ee9:	80 fa 06             	cmp    dl,0x6
c0017eec:	75 29                	jne    c0017f17 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017eee:	b8 30 b6 02 c0       	mov    eax,0xc002b630
c0017ef3:	c3                   	ret    
c0017ef4:	b8 10 b5 02 c0       	mov    eax,0xc002b510
c0017ef9:	c3                   	ret    
c0017efa:	b8 40 b5 02 c0       	mov    eax,0xc002b540
c0017eff:	c3                   	ret    
c0017f00:	b8 60 b5 02 c0       	mov    eax,0xc002b560
c0017f05:	c3                   	ret    
c0017f06:	b8 90 b5 02 c0       	mov    eax,0xc002b590
c0017f0b:	c3                   	ret    
c0017f0c:	b8 a0 b5 02 c0       	mov    eax,0xc002b5a0
c0017f11:	c3                   	ret    
c0017f12:	b8 f0 b5 02 c0       	mov    eax,0xc002b5f0
c0017f17:	c3                   	ret    

c0017f18 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0017f18:	60                   	pusha  
c0017f19:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017f1d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017f25:	9c                   	pushf  
c0017f26:	fa                   	cli    
c0017f27:	0f 09                	wbinvd 
c0017f29:	0f 30                	wrmsr  
c0017f2b:	9d                   	popf   
c0017f2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017f30:	89 02                	mov    DWORD PTR [edx],eax
c0017f32:	61                   	popa   
c0017f33:	c3                   	ret    

c0017f34 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0017f34:	60                   	pusha  
c0017f35:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017f39:	9c                   	pushf  
c0017f3a:	fa                   	cli    
c0017f3b:	0f 09                	wbinvd 
c0017f3d:	31 c0                	xor    eax,eax
c0017f3f:	31 d2                	xor    edx,edx
c0017f41:	0f 32                	rdmsr  
c0017f43:	9d                   	popf   
c0017f44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017f48:	89 02                	mov    DWORD PTR [edx],eax
c0017f4a:	61                   	popa   
c0017f4b:	c3                   	ret    

c0017f4c <CPU::AMD_K6_writeback(int, int, int)>:
c0017f4c:	56                   	push   esi
c0017f4d:	53                   	push   ebx
c0017f4e:	83 ec 10             	sub    esp,0x10
c0017f51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f55:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0017f5a:	75 5d                	jne    c0017fb9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017f5c:	83 f8 08             	cmp    eax,0x8
c0017f5f:	75 09                	jne    c0017f6a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0017f61:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0017f66:	7e 13                	jle    c0017f7b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0017f68:	eb 30                	jmp    c0017f9a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0017f6a:	83 f8 06             	cmp    eax,0x6
c0017f6d:	7c 4a                	jl     c0017fb9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017f6f:	83 f8 07             	cmp    eax,0x7
c0017f72:	7e 07                	jle    c0017f7b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0017f74:	83 f8 09             	cmp    eax,0x9
c0017f77:	74 21                	je     c0017f9a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0017f79:	eb 3e                	jmp    c0017fb9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017f7b:	89 e6                	mov    esi,esp
c0017f7d:	8b 1d 64 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c264
c0017f83:	56                   	push   esi
c0017f84:	c1 eb 15             	shr    ebx,0x15
c0017f87:	68 82 00 00 c0       	push   0xc0000082
c0017f8c:	83 e3 7e             	and    ebx,0x7e
c0017f8f:	e8 a0 ff ff ff       	call   c0017f34 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0017f94:	56                   	push   esi
c0017f95:	6a 00                	push   0x0
c0017f97:	53                   	push   ebx
c0017f98:	eb 12                	jmp    c0017fac <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0017f9a:	89 e3                	mov    ebx,esp
c0017f9c:	53                   	push   ebx
c0017f9d:	68 82 00 00 c0       	push   0xc0000082
c0017fa2:	e8 8d ff ff ff       	call   c0017f34 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0017fa7:	53                   	push   ebx
c0017fa8:	6a 00                	push   0x0
c0017faa:	6a 00                	push   0x0
c0017fac:	68 82 00 00 c0       	push   0xc0000082
c0017fb1:	e8 62 ff ff ff       	call   c0017f18 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0017fb6:	83 c4 18             	add    esp,0x18
c0017fb9:	83 c4 10             	add    esp,0x10
c0017fbc:	5b                   	pop    ebx
c0017fbd:	5e                   	pop    esi
c0017fbe:	c3                   	ret    
c0017fbf:	90                   	nop

c0017fc0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0017fc0:	55                   	push   ebp
c0017fc1:	57                   	push   edi
c0017fc2:	56                   	push   esi
c0017fc3:	53                   	push   ebx
c0017fc4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017fc8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017fcc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017fd0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0017fd4:	39 05 40 b7 02 c0    	cmp    DWORD PTR ds:0xc002b740,eax
c0017fda:	75 23                	jne    c0017fff <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0017fdc:	a1 2c cd 02 c0       	mov    eax,ds:0xc002cd2c
c0017fe1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017fe5:	89 06                	mov    DWORD PTR [esi],eax
c0017fe7:	a1 28 cd 02 c0       	mov    eax,ds:0xc002cd28
c0017fec:	89 07                	mov    DWORD PTR [edi],eax
c0017fee:	a1 24 cd 02 c0       	mov    eax,ds:0xc002cd24
c0017ff3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0017ff6:	a1 20 cd 02 c0       	mov    eax,ds:0xc002cd20
c0017ffb:	89 02                	mov    DWORD PTR [edx],eax
c0017ffd:	eb 3f                	jmp    c001803e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0017fff:	31 c9                	xor    ecx,ecx
c0018001:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018005:	0f a2                	cpuid  
c0018007:	89 06                	mov    DWORD PTR [esi],eax
c0018009:	89 1f                	mov    DWORD PTR [edi],ebx
c001800b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001800f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018012:	89 10                	mov    DWORD PTR [eax],edx
c0018014:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018018:	a3 40 b7 02 c0       	mov    ds:0xc002b740,eax
c001801d:	8b 06                	mov    eax,DWORD PTR [esi]
c001801f:	a3 2c cd 02 c0       	mov    ds:0xc002cd2c,eax
c0018024:	8b 07                	mov    eax,DWORD PTR [edi]
c0018026:	a3 28 cd 02 c0       	mov    ds:0xc002cd28,eax
c001802b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001802e:	a3 24 cd 02 c0       	mov    ds:0xc002cd24,eax
c0018033:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018037:	8b 00                	mov    eax,DWORD PTR [eax]
c0018039:	a3 20 cd 02 c0       	mov    ds:0xc002cd20,eax
c001803e:	5b                   	pop    ebx
c001803f:	5e                   	pop    esi
c0018040:	5f                   	pop    edi
c0018041:	5d                   	pop    ebp
c0018042:	c3                   	ret    
c0018043:	90                   	nop

c0018044 <CPU::cpuidCheckEDX(unsigned int)>:
c0018044:	83 ec 10             	sub    esp,0x10
c0018047:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001804b:	50                   	push   eax
c001804c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018050:	50                   	push   eax
c0018051:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018055:	50                   	push   eax
c0018056:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001805a:	50                   	push   eax
c001805b:	6a 01                	push   0x1
c001805d:	e8 5e ff ff ff       	call   c0017fc0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018062:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018066:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001806a:	0f 95 c0             	setne  al
c001806d:	83 c4 24             	add    esp,0x24
c0018070:	c3                   	ret    
c0018071:	90                   	nop

c0018072 <CPU::cpuidCheckECX(unsigned int)>:
c0018072:	83 ec 10             	sub    esp,0x10
c0018075:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018079:	50                   	push   eax
c001807a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001807e:	50                   	push   eax
c001807f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018083:	50                   	push   eax
c0018084:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018088:	50                   	push   eax
c0018089:	6a 01                	push   0x1
c001808b:	e8 30 ff ff ff       	call   c0017fc0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018090:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018094:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018098:	0f 95 c0             	setne  al
c001809b:	83 c4 24             	add    esp,0x24
c001809e:	c3                   	ret    
c001809f:	90                   	nop

c00180a0 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00180a0:	83 ec 10             	sub    esp,0x10
c00180a3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180a7:	50                   	push   eax
c00180a8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180ac:	50                   	push   eax
c00180ad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180b1:	50                   	push   eax
c00180b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180b6:	50                   	push   eax
c00180b7:	6a 07                	push   0x7
c00180b9:	e8 02 ff ff ff       	call   c0017fc0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00180be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180c2:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00180c6:	0f 95 c0             	setne  al
c00180c9:	83 c4 24             	add    esp,0x24
c00180cc:	c3                   	ret    
c00180cd:	90                   	nop

c00180ce <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00180ce:	83 ec 10             	sub    esp,0x10
c00180d1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180d5:	50                   	push   eax
c00180d6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180da:	50                   	push   eax
c00180db:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180df:	50                   	push   eax
c00180e0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180e4:	50                   	push   eax
c00180e5:	6a 07                	push   0x7
c00180e7:	e8 d4 fe ff ff       	call   c0017fc0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00180ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180f0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00180f4:	0f 95 c0             	setne  al
c00180f7:	83 c4 24             	add    esp,0x24
c00180fa:	c3                   	ret    
c00180fb:	90                   	nop

c00180fc <CPU::CPU()>:
c00180fc:	83 ec 0c             	sub    esp,0xc
c00180ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018103:	83 ec 08             	sub    esp,0x8
c0018106:	68 5e 99 02 c0       	push   0xc002995e
c001810b:	50                   	push   eax
c001810c:	e8 6f bb ff ff       	call   c0013c80 <Device::Device(char const*)>
c0018111:	83 c4 10             	add    esp,0x10
c0018114:	ba 38 9a 02 c0       	mov    edx,0xc0029a38
c0018119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001811d:	89 10                	mov    DWORD PTR [eax],edx
c001811f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018123:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001812d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018131:	05 78 01 00 00       	add    eax,0x178
c0018136:	83 ec 0c             	sub    esp,0xc
c0018139:	50                   	push   eax
c001813a:	e8 ad 6b ff ff       	call   c000ecec <GDT::GDT()>
c001813f:	83 c4 10             	add    esp,0x10
c0018142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018146:	05 7c 09 00 00       	add    eax,0x97c
c001814b:	83 ec 0c             	sub    esp,0xc
c001814e:	50                   	push   eax
c001814f:	e8 fa 6d ff ff       	call   c000ef4e <IDT::IDT()>
c0018154:	83 c4 10             	add    esp,0x10
c0018157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001815b:	05 7c 11 00 00       	add    eax,0x117c
c0018160:	83 ec 0c             	sub    esp,0xc
c0018163:	50                   	push   eax
c0018164:	e8 79 8e ff ff       	call   c0010fe2 <TSS::TSS()>
c0018169:	83 c4 10             	add    esp,0x10
c001816c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018170:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001817b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018185:	90                   	nop
c0018186:	83 c4 0c             	add    esp,0xc
c0018189:	c3                   	ret    

c001818a <CPU::displayFeatures()>:
c001818a:	53                   	push   ebx
c001818b:	83 ec 10             	sub    esp,0x10
c001818e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018192:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018198:	68 6c 96 02 c0       	push   0xc002966c
c001819d:	e8 ff a4 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00181a2:	59                   	pop    ecx
c00181a3:	58                   	pop    eax
c00181a4:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00181aa:	50                   	push   eax
c00181ab:	68 7d 96 02 c0       	push   0xc002967d
c00181b0:	e8 ec a4 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00181b5:	58                   	pop    eax
c00181b6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00181bc:	5a                   	pop    edx
c00181bd:	c1 e8 0e             	shr    eax,0xe
c00181c0:	0f b6 c0             	movzx  eax,al
c00181c3:	50                   	push   eax
c00181c4:	68 8e 96 02 c0       	push   0xc002968e
c00181c9:	e8 d3 a4 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00181ce:	59                   	pop    ecx
c00181cf:	58                   	pop    eax
c00181d0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00181d6:	66 c1 e8 06          	shr    ax,0x6
c00181da:	0f b6 c0             	movzx  eax,al
c00181dd:	50                   	push   eax
c00181de:	68 9f 96 02 c0       	push   0xc002969f
c00181e3:	e8 b9 a4 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00181e8:	c7 04 24 34 9b 02 c0 	mov    DWORD PTR [esp],0xc0029b34
c00181ef:	e8 ad a4 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00181f4:	83 c4 10             	add    esp,0x10
c00181f7:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c00181fc:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018203:	74 05                	je     c001820a <CPU::displayFeatures()+0x80>
c0018205:	b8 38 82 02 c0       	mov    eax,0xc0028238
c001820a:	52                   	push   edx
c001820b:	52                   	push   edx
c001820c:	50                   	push   eax
c001820d:	68 b0 96 02 c0       	push   0xc00296b0
c0018212:	e8 8a a4 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0018217:	83 c4 10             	add    esp,0x10
c001821a:	b8 38 82 02 c0       	mov    eax,0xc0028238
c001821f:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018226:	78 05                	js     c001822d <CPU::displayFeatures()+0xa3>
c0018228:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c001822d:	51                   	push   ecx
c001822e:	51                   	push   ecx
c001822f:	50                   	push   eax
c0018230:	68 c7 96 02 c0       	push   0xc00296c7
c0018235:	e8 67 a4 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001823a:	83 c4 10             	add    esp,0x10
c001823d:	b8 38 82 02 c0       	mov    eax,0xc0028238
c0018242:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018249:	75 05                	jne    c0018250 <CPU::displayFeatures()+0xc6>
c001824b:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c0018250:	52                   	push   edx
c0018251:	52                   	push   edx
c0018252:	50                   	push   eax
c0018253:	68 de 96 02 c0       	push   0xc00296de
c0018258:	e8 44 a4 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001825d:	83 c4 10             	add    esp,0x10
c0018260:	b8 38 82 02 c0       	mov    eax,0xc0028238
c0018265:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c001826c:	75 05                	jne    c0018273 <CPU::displayFeatures()+0xe9>
c001826e:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c0018273:	51                   	push   ecx
c0018274:	51                   	push   ecx
c0018275:	50                   	push   eax
c0018276:	68 f5 96 02 c0       	push   0xc00296f5
c001827b:	e8 21 a4 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0018280:	83 c4 10             	add    esp,0x10
c0018283:	b8 38 82 02 c0       	mov    eax,0xc0028238
c0018288:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001828f:	75 05                	jne    c0018296 <CPU::displayFeatures()+0x10c>
c0018291:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c0018296:	52                   	push   edx
c0018297:	52                   	push   edx
c0018298:	50                   	push   eax
c0018299:	68 0c 97 02 c0       	push   0xc002970c
c001829e:	e8 fe a3 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00182a3:	83 c4 10             	add    esp,0x10
c00182a6:	b8 38 82 02 c0       	mov    eax,0xc0028238
c00182ab:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00182b2:	75 05                	jne    c00182b9 <CPU::displayFeatures()+0x12f>
c00182b4:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c00182b9:	51                   	push   ecx
c00182ba:	51                   	push   ecx
c00182bb:	50                   	push   eax
c00182bc:	68 23 97 02 c0       	push   0xc0029723
c00182c1:	e8 db a3 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00182c6:	83 c4 10             	add    esp,0x10
c00182c9:	b8 38 82 02 c0       	mov    eax,0xc0028238
c00182ce:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00182d5:	75 05                	jne    c00182dc <CPU::displayFeatures()+0x152>
c00182d7:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c00182dc:	52                   	push   edx
c00182dd:	52                   	push   edx
c00182de:	50                   	push   eax
c00182df:	68 3a 97 02 c0       	push   0xc002973a
c00182e4:	e8 b8 a3 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00182e9:	83 c4 10             	add    esp,0x10
c00182ec:	b8 38 82 02 c0       	mov    eax,0xc0028238
c00182f1:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00182f8:	75 05                	jne    c00182ff <CPU::displayFeatures()+0x175>
c00182fa:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c00182ff:	51                   	push   ecx
c0018300:	51                   	push   ecx
c0018301:	50                   	push   eax
c0018302:	68 51 97 02 c0       	push   0xc0029751
c0018307:	e8 95 a3 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001830c:	83 c4 10             	add    esp,0x10
c001830f:	b8 38 82 02 c0       	mov    eax,0xc0028238
c0018314:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c001831b:	75 05                	jne    c0018322 <CPU::displayFeatures()+0x198>
c001831d:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c0018322:	52                   	push   edx
c0018323:	52                   	push   edx
c0018324:	50                   	push   eax
c0018325:	68 68 97 02 c0       	push   0xc0029768
c001832a:	e8 72 a3 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001832f:	83 c4 10             	add    esp,0x10
c0018332:	b8 38 82 02 c0       	mov    eax,0xc0028238
c0018337:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c001833e:	75 05                	jne    c0018345 <CPU::displayFeatures()+0x1bb>
c0018340:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c0018345:	51                   	push   ecx
c0018346:	51                   	push   ecx
c0018347:	50                   	push   eax
c0018348:	68 7f 97 02 c0       	push   0xc002977f
c001834d:	e8 4f a3 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0018352:	83 c4 10             	add    esp,0x10
c0018355:	b8 38 82 02 c0       	mov    eax,0xc0028238
c001835a:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018361:	75 05                	jne    c0018368 <CPU::displayFeatures()+0x1de>
c0018363:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c0018368:	52                   	push   edx
c0018369:	52                   	push   edx
c001836a:	50                   	push   eax
c001836b:	68 96 97 02 c0       	push   0xc0029796
c0018370:	e8 2c a3 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0018375:	83 c4 10             	add    esp,0x10
c0018378:	b8 38 82 02 c0       	mov    eax,0xc0028238
c001837d:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018384:	75 05                	jne    c001838b <CPU::displayFeatures()+0x201>
c0018386:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c001838b:	51                   	push   ecx
c001838c:	51                   	push   ecx
c001838d:	50                   	push   eax
c001838e:	68 ad 97 02 c0       	push   0xc00297ad
c0018393:	e8 09 a3 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0018398:	83 c4 10             	add    esp,0x10
c001839b:	b8 38 82 02 c0       	mov    eax,0xc0028238
c00183a0:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c00183a7:	75 05                	jne    c00183ae <CPU::displayFeatures()+0x224>
c00183a9:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c00183ae:	52                   	push   edx
c00183af:	52                   	push   edx
c00183b0:	50                   	push   eax
c00183b1:	68 c4 97 02 c0       	push   0xc00297c4
c00183b6:	e8 e6 a2 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00183bb:	83 c4 10             	add    esp,0x10
c00183be:	b8 38 82 02 c0       	mov    eax,0xc0028238
c00183c3:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00183ca:	78 05                	js     c00183d1 <CPU::displayFeatures()+0x247>
c00183cc:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c00183d1:	51                   	push   ecx
c00183d2:	51                   	push   ecx
c00183d3:	50                   	push   eax
c00183d4:	68 db 97 02 c0       	push   0xc00297db
c00183d9:	e8 c3 a2 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00183de:	83 c4 10             	add    esp,0x10
c00183e1:	b8 38 82 02 c0       	mov    eax,0xc0028238
c00183e6:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00183ed:	75 05                	jne    c00183f4 <CPU::displayFeatures()+0x26a>
c00183ef:	b8 3c 82 02 c0       	mov    eax,0xc002823c
c00183f4:	52                   	push   edx
c00183f5:	52                   	push   edx
c00183f6:	50                   	push   eax
c00183f7:	68 f2 97 02 c0       	push   0xc00297f2
c00183fc:	e8 a0 a2 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0018401:	83 c4 18             	add    esp,0x18
c0018404:	5b                   	pop    ebx
c0018405:	c3                   	ret    

c0018406 <CPU::detectFeatures()>:
c0018406:	55                   	push   ebp
c0018407:	57                   	push   edi
c0018408:	56                   	push   esi
c0018409:	53                   	push   ebx
c001840a:	83 ec 50             	sub    esp,0x50
c001840d:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018411:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001841b:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018422:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018428:	6a 0d                	push   0xd
c001842a:	6a 00                	push   0x0
c001842c:	57                   	push   edi
c001842d:	e8 59 82 fe ff       	call   c000068b <memset>
c0018432:	83 c4 10             	add    esp,0x10
c0018435:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c001843a:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018441:	0f 84 20 09 00 00    	je     c0018d67 <CPU::detectFeatures()+0x961>
c0018447:	83 ec 0c             	sub    esp,0xc
c001844a:	6a 10                	push   0x10
c001844c:	e8 f3 fb ff ff       	call   c0018044 <CPU::cpuidCheckEDX(unsigned int)>
c0018451:	83 e0 01             	and    eax,0x1
c0018454:	8d 14 00             	lea    edx,[eax+eax*1]
c0018457:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001845d:	83 e0 fd             	and    eax,0xfffffffd
c0018460:	09 d0                	or     eax,edx
c0018462:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018468:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001846f:	e8 d0 fb ff ff       	call   c0018044 <CPU::cpuidCheckEDX(unsigned int)>
c0018474:	83 e0 01             	and    eax,0x1
c0018477:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001847e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018484:	83 e0 fb             	and    eax,0xfffffffb
c0018487:	09 d0                	or     eax,edx
c0018489:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001848f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018496:	e8 a9 fb ff ff       	call   c0018044 <CPU::cpuidCheckEDX(unsigned int)>
c001849b:	83 e0 01             	and    eax,0x1
c001849e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00184a5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00184ab:	83 e0 f7             	and    eax,0xfffffff7
c00184ae:	09 d0                	or     eax,edx
c00184b0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00184b6:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00184bd:	e8 82 fb ff ff       	call   c0018044 <CPU::cpuidCheckEDX(unsigned int)>
c00184c2:	83 e0 01             	and    eax,0x1
c00184c5:	c1 e0 04             	shl    eax,0x4
c00184c8:	88 c2                	mov    dl,al
c00184ca:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00184d0:	83 e0 ef             	and    eax,0xffffffef
c00184d3:	09 d0                	or     eax,edx
c00184d5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00184db:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00184e2:	e8 5d fb ff ff       	call   c0018044 <CPU::cpuidCheckEDX(unsigned int)>
c00184e7:	83 e0 01             	and    eax,0x1
c00184ea:	c1 e0 05             	shl    eax,0x5
c00184ed:	88 c2                	mov    dl,al
c00184ef:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00184f5:	83 e0 df             	and    eax,0xffffffdf
c00184f8:	09 d0                	or     eax,edx
c00184fa:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018500:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018507:	e8 38 fb ff ff       	call   c0018044 <CPU::cpuidCheckEDX(unsigned int)>
c001850c:	83 e0 01             	and    eax,0x1
c001850f:	8d 14 00             	lea    edx,[eax+eax*1]
c0018512:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018518:	83 e0 fd             	and    eax,0xfffffffd
c001851b:	09 d0                	or     eax,edx
c001851d:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018523:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001852a:	e8 15 fb ff ff       	call   c0018044 <CPU::cpuidCheckEDX(unsigned int)>
c001852f:	83 e0 01             	and    eax,0x1
c0018532:	c1 e0 06             	shl    eax,0x6
c0018535:	88 c2                	mov    dl,al
c0018537:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001853d:	83 e0 bf             	and    eax,0xffffffbf
c0018540:	09 d0                	or     eax,edx
c0018542:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018548:	58                   	pop    eax
c0018549:	8d 74 24 28          	lea    esi,[esp+0x28]
c001854d:	56                   	push   esi
c001854e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018552:	55                   	push   ebp
c0018553:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018557:	50                   	push   eax
c0018558:	8d 54 24 28          	lea    edx,[esp+0x28]
c001855c:	52                   	push   edx
c001855d:	6a 00                	push   0x0
c001855f:	e8 5c fa ff ff       	call   c0017fc0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018564:	83 c4 1c             	add    esp,0x1c
c0018567:	6a 04                	push   0x4
c0018569:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001856d:	50                   	push   eax
c001856e:	57                   	push   edi
c001856f:	e8 e1 80 fe ff       	call   c0000655 <memcpy>
c0018574:	83 c4 0c             	add    esp,0xc
c0018577:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c001857d:	6a 04                	push   0x4
c001857f:	56                   	push   esi
c0018580:	50                   	push   eax
c0018581:	e8 cf 80 fe ff       	call   c0000655 <memcpy>
c0018586:	83 c4 0c             	add    esp,0xc
c0018589:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c001858f:	6a 04                	push   0x4
c0018591:	55                   	push   ebp
c0018592:	50                   	push   eax
c0018593:	e8 bd 80 fe ff       	call   c0000655 <memcpy>
c0018598:	58                   	pop    eax
c0018599:	5a                   	pop    edx
c001859a:	68 09 98 02 c0       	push   0xc0029809
c001859f:	57                   	push   edi
c00185a0:	e8 d6 81 fe ff       	call   c000077b <strcmp>
c00185a5:	83 c4 10             	add    esp,0x10
c00185a8:	85 c0                	test   eax,eax
c00185aa:	75 0f                	jne    c00185bb <CPU::detectFeatures()+0x1b5>
c00185ac:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00185b6:	e9 22 02 00 00       	jmp    c00187dd <CPU::detectFeatures()+0x3d7>
c00185bb:	50                   	push   eax
c00185bc:	50                   	push   eax
c00185bd:	68 16 98 02 c0       	push   0xc0029816
c00185c2:	57                   	push   edi
c00185c3:	e8 b3 81 fe ff       	call   c000077b <strcmp>
c00185c8:	83 c4 10             	add    esp,0x10
c00185cb:	85 c0                	test   eax,eax
c00185cd:	74 dd                	je     c00185ac <CPU::detectFeatures()+0x1a6>
c00185cf:	51                   	push   ecx
c00185d0:	51                   	push   ecx
c00185d1:	68 23 98 02 c0       	push   0xc0029823
c00185d6:	57                   	push   edi
c00185d7:	e8 9f 81 fe ff       	call   c000077b <strcmp>
c00185dc:	83 c4 10             	add    esp,0x10
c00185df:	85 c0                	test   eax,eax
c00185e1:	74 2a                	je     c001860d <CPU::detectFeatures()+0x207>
c00185e3:	52                   	push   edx
c00185e4:	52                   	push   edx
c00185e5:	68 30 98 02 c0       	push   0xc0029830
c00185ea:	57                   	push   edi
c00185eb:	e8 8b 81 fe ff       	call   c000077b <strcmp>
c00185f0:	83 c4 10             	add    esp,0x10
c00185f3:	85 c0                	test   eax,eax
c00185f5:	74 16                	je     c001860d <CPU::detectFeatures()+0x207>
c00185f7:	50                   	push   eax
c00185f8:	50                   	push   eax
c00185f9:	68 3d 98 02 c0       	push   0xc002983d
c00185fe:	57                   	push   edi
c00185ff:	e8 77 81 fe ff       	call   c000077b <strcmp>
c0018604:	83 c4 10             	add    esp,0x10
c0018607:	85 c0                	test   eax,eax
c0018609:	74 48                	je     c0018653 <CPU::detectFeatures()+0x24d>
c001860b:	eb 0f                	jmp    c001861c <CPU::detectFeatures()+0x216>
c001860d:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018617:	e9 c1 01 00 00       	jmp    c00187dd <CPU::detectFeatures()+0x3d7>
c001861c:	50                   	push   eax
c001861d:	50                   	push   eax
c001861e:	68 4a 98 02 c0       	push   0xc002984a
c0018623:	57                   	push   edi
c0018624:	e8 52 81 fe ff       	call   c000077b <strcmp>
c0018629:	83 c4 10             	add    esp,0x10
c001862c:	85 c0                	test   eax,eax
c001862e:	74 23                	je     c0018653 <CPU::detectFeatures()+0x24d>
c0018630:	50                   	push   eax
c0018631:	50                   	push   eax
c0018632:	68 57 98 02 c0       	push   0xc0029857
c0018637:	57                   	push   edi
c0018638:	e8 3e 81 fe ff       	call   c000077b <strcmp>
c001863d:	83 c4 10             	add    esp,0x10
c0018640:	85 c0                	test   eax,eax
c0018642:	75 1e                	jne    c0018662 <CPU::detectFeatures()+0x25c>
c0018644:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001864e:	e9 8a 01 00 00       	jmp    c00187dd <CPU::detectFeatures()+0x3d7>
c0018653:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001865d:	e9 7b 01 00 00       	jmp    c00187dd <CPU::detectFeatures()+0x3d7>
c0018662:	50                   	push   eax
c0018663:	50                   	push   eax
c0018664:	68 64 98 02 c0       	push   0xc0029864
c0018669:	57                   	push   edi
c001866a:	e8 0c 81 fe ff       	call   c000077b <strcmp>
c001866f:	83 c4 10             	add    esp,0x10
c0018672:	85 c0                	test   eax,eax
c0018674:	75 0f                	jne    c0018685 <CPU::detectFeatures()+0x27f>
c0018676:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018680:	e9 58 01 00 00       	jmp    c00187dd <CPU::detectFeatures()+0x3d7>
c0018685:	50                   	push   eax
c0018686:	50                   	push   eax
c0018687:	68 23 98 02 c0       	push   0xc0029823
c001868c:	57                   	push   edi
c001868d:	e8 e9 80 fe ff       	call   c000077b <strcmp>
c0018692:	83 c4 10             	add    esp,0x10
c0018695:	85 c0                	test   eax,eax
c0018697:	75 0f                	jne    c00186a8 <CPU::detectFeatures()+0x2a2>
c0018699:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00186a3:	e9 35 01 00 00       	jmp    c00187dd <CPU::detectFeatures()+0x3d7>
c00186a8:	50                   	push   eax
c00186a9:	50                   	push   eax
c00186aa:	68 71 98 02 c0       	push   0xc0029871
c00186af:	57                   	push   edi
c00186b0:	e8 c6 80 fe ff       	call   c000077b <strcmp>
c00186b5:	83 c4 10             	add    esp,0x10
c00186b8:	85 c0                	test   eax,eax
c00186ba:	75 0f                	jne    c00186cb <CPU::detectFeatures()+0x2c5>
c00186bc:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00186c6:	e9 12 01 00 00       	jmp    c00187dd <CPU::detectFeatures()+0x3d7>
c00186cb:	51                   	push   ecx
c00186cc:	51                   	push   ecx
c00186cd:	68 7e 98 02 c0       	push   0xc002987e
c00186d2:	57                   	push   edi
c00186d3:	e8 a3 80 fe ff       	call   c000077b <strcmp>
c00186d8:	83 c4 10             	add    esp,0x10
c00186db:	85 c0                	test   eax,eax
c00186dd:	75 0f                	jne    c00186ee <CPU::detectFeatures()+0x2e8>
c00186df:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00186e9:	e9 ef 00 00 00       	jmp    c00187dd <CPU::detectFeatures()+0x3d7>
c00186ee:	52                   	push   edx
c00186ef:	52                   	push   edx
c00186f0:	68 8b 98 02 c0       	push   0xc002988b
c00186f5:	57                   	push   edi
c00186f6:	e8 80 80 fe ff       	call   c000077b <strcmp>
c00186fb:	83 c4 10             	add    esp,0x10
c00186fe:	85 c0                	test   eax,eax
c0018700:	75 0f                	jne    c0018711 <CPU::detectFeatures()+0x30b>
c0018702:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001870c:	e9 cc 00 00 00       	jmp    c00187dd <CPU::detectFeatures()+0x3d7>
c0018711:	50                   	push   eax
c0018712:	50                   	push   eax
c0018713:	68 98 98 02 c0       	push   0xc0029898
c0018718:	57                   	push   edi
c0018719:	e8 5d 80 fe ff       	call   c000077b <strcmp>
c001871e:	83 c4 10             	add    esp,0x10
c0018721:	85 c0                	test   eax,eax
c0018723:	75 0f                	jne    c0018734 <CPU::detectFeatures()+0x32e>
c0018725:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001872f:	e9 a9 00 00 00       	jmp    c00187dd <CPU::detectFeatures()+0x3d7>
c0018734:	50                   	push   eax
c0018735:	50                   	push   eax
c0018736:	68 a5 98 02 c0       	push   0xc00298a5
c001873b:	57                   	push   edi
c001873c:	e8 3a 80 fe ff       	call   c000077b <strcmp>
c0018741:	83 c4 10             	add    esp,0x10
c0018744:	85 c0                	test   eax,eax
c0018746:	75 0f                	jne    c0018757 <CPU::detectFeatures()+0x351>
c0018748:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018752:	e9 86 00 00 00       	jmp    c00187dd <CPU::detectFeatures()+0x3d7>
c0018757:	50                   	push   eax
c0018758:	50                   	push   eax
c0018759:	68 b2 98 02 c0       	push   0xc00298b2
c001875e:	57                   	push   edi
c001875f:	e8 17 80 fe ff       	call   c000077b <strcmp>
c0018764:	83 c4 10             	add    esp,0x10
c0018767:	85 c0                	test   eax,eax
c0018769:	75 0c                	jne    c0018777 <CPU::detectFeatures()+0x371>
c001876b:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018775:	eb 66                	jmp    c00187dd <CPU::detectFeatures()+0x3d7>
c0018777:	50                   	push   eax
c0018778:	50                   	push   eax
c0018779:	68 bf 98 02 c0       	push   0xc00298bf
c001877e:	57                   	push   edi
c001877f:	e8 f7 7f fe ff       	call   c000077b <strcmp>
c0018784:	83 c4 10             	add    esp,0x10
c0018787:	85 c0                	test   eax,eax
c0018789:	75 0c                	jne    c0018797 <CPU::detectFeatures()+0x391>
c001878b:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018795:	eb 46                	jmp    c00187dd <CPU::detectFeatures()+0x3d7>
c0018797:	50                   	push   eax
c0018798:	50                   	push   eax
c0018799:	68 cc 98 02 c0       	push   0xc00298cc
c001879e:	57                   	push   edi
c001879f:	e8 d7 7f fe ff       	call   c000077b <strcmp>
c00187a4:	83 c4 10             	add    esp,0x10
c00187a7:	85 c0                	test   eax,eax
c00187a9:	74 e0                	je     c001878b <CPU::detectFeatures()+0x385>
c00187ab:	50                   	push   eax
c00187ac:	50                   	push   eax
c00187ad:	68 d9 98 02 c0       	push   0xc00298d9
c00187b2:	57                   	push   edi
c00187b3:	e8 c3 7f fe ff       	call   c000077b <strcmp>
c00187b8:	83 c4 10             	add    esp,0x10
c00187bb:	85 c0                	test   eax,eax
c00187bd:	74 cc                	je     c001878b <CPU::detectFeatures()+0x385>
c00187bf:	51                   	push   ecx
c00187c0:	51                   	push   ecx
c00187c1:	68 e6 98 02 c0       	push   0xc00298e6
c00187c6:	57                   	push   edi
c00187c7:	e8 af 7f fe ff       	call   c000077b <strcmp>
c00187cc:	83 c4 10             	add    esp,0x10
c00187cf:	85 c0                	test   eax,eax
c00187d1:	74 b8                	je     c001878b <CPU::detectFeatures()+0x385>
c00187d3:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00187dd:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00187e2:	0f 86 be 00 00 00    	jbe    c00188a6 <CPU::detectFeatures()+0x4a0>
c00187e8:	83 ec 0c             	sub    esp,0xc
c00187eb:	68 80 00 00 00       	push   0x80
c00187f0:	e8 ab f8 ff ff       	call   c00180a0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00187f5:	83 e0 01             	and    eax,0x1
c00187f8:	c1 e0 06             	shl    eax,0x6
c00187fb:	88 c2                	mov    dl,al
c00187fd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018803:	83 e0 bf             	and    eax,0xffffffbf
c0018806:	09 d0                	or     eax,edx
c0018808:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001880e:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018815:	e8 86 f8 ff ff       	call   c00180a0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001881a:	83 e0 01             	and    eax,0x1
c001881d:	c1 e0 04             	shl    eax,0x4
c0018820:	88 c2                	mov    dl,al
c0018822:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018828:	83 e0 ef             	and    eax,0xffffffef
c001882b:	09 d0                	or     eax,edx
c001882d:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018833:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001883a:	e8 61 f8 ff ff       	call   c00180a0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001883f:	c1 e0 07             	shl    eax,0x7
c0018842:	88 c2                	mov    dl,al
c0018844:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001884a:	83 e0 7f             	and    eax,0x7f
c001884d:	09 d0                	or     eax,edx
c001884f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018855:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001885c:	e8 6d f8 ff ff       	call   c00180ce <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018861:	83 e0 01             	and    eax,0x1
c0018864:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001886b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018871:	83 e0 f7             	and    eax,0xfffffff7
c0018874:	09 d0                	or     eax,edx
c0018876:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001887c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018883:	e8 46 f8 ff ff       	call   c00180ce <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018888:	83 c4 10             	add    esp,0x10
c001888b:	83 e0 01             	and    eax,0x1
c001888e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018895:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001889b:	83 e0 fb             	and    eax,0xfffffffb
c001889e:	09 d0                	or     eax,edx
c00188a0:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00188a6:	83 ec 0c             	sub    esp,0xc
c00188a9:	56                   	push   esi
c00188aa:	55                   	push   ebp
c00188ab:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00188af:	57                   	push   edi
c00188b0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00188b4:	50                   	push   eax
c00188b5:	6a 01                	push   0x1
c00188b7:	e8 04 f7 ff ff       	call   c0017fc0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188bc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00188c0:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00188c6:	88 ca                	mov    dl,cl
c00188c8:	83 e0 f0             	and    eax,0xfffffff0
c00188cb:	83 e2 0f             	and    edx,0xf
c00188ce:	09 d0                	or     eax,edx
c00188d0:	88 ca                	mov    dl,cl
c00188d2:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00188d8:	c0 ea 04             	shr    dl,0x4
c00188db:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00188df:	0f b6 c2             	movzx  eax,dl
c00188e2:	83 c4 20             	add    esp,0x20
c00188e5:	c1 e0 06             	shl    eax,0x6
c00188e8:	89 c5                	mov    ebp,eax
c00188ea:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00188f0:	66 25 3f c0          	and    ax,0xc03f
c00188f4:	09 e8                	or     eax,ebp
c00188f6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00188fd:	89 c8                	mov    eax,ecx
c00188ff:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0018905:	c1 e8 08             	shr    eax,0x8
c0018908:	83 e2 3f             	and    edx,0x3f
c001890b:	83 e0 0f             	and    eax,0xf
c001890e:	89 c5                	mov    ebp,eax
c0018910:	c1 e5 06             	shl    ebp,0x6
c0018913:	09 d5                	or     ebp,edx
c0018915:	89 ea                	mov    edx,ebp
c0018917:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001891d:	88 c2                	mov    dl,al
c001891f:	c0 ea 02             	shr    dl,0x2
c0018922:	89 d5                	mov    ebp,edx
c0018924:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001892a:	83 e2 c0             	and    edx,0xffffffc0
c001892d:	09 d5                	or     ebp,edx
c001892f:	89 ea                	mov    edx,ebp
c0018931:	89 cd                	mov    ebp,ecx
c0018933:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018939:	c1 ed 0c             	shr    ebp,0xc
c001893c:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0018942:	83 e5 03             	and    ebp,0x3
c0018945:	83 e2 cf             	and    edx,0xffffffcf
c0018948:	c1 e5 04             	shl    ebp,0x4
c001894b:	09 d5                	or     ebp,edx
c001894d:	3c 06                	cmp    al,0x6
c001894f:	89 ea                	mov    edx,ebp
c0018951:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018957:	74 04                	je     c001895d <CPU::detectFeatures()+0x557>
c0018959:	3c 0f                	cmp    al,0xf
c001895b:	75 5c                	jne    c00189b9 <CPU::detectFeatures()+0x5b3>
c001895d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018961:	89 cd                	mov    ebp,ecx
c0018963:	c1 ed 10             	shr    ebp,0x10
c0018966:	c1 e5 04             	shl    ebp,0x4
c0018969:	09 ea                	or     edx,ebp
c001896b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018971:	0f b6 d2             	movzx  edx,dl
c0018974:	66 81 e5 3f c0       	and    bp,0xc03f
c0018979:	c1 e2 06             	shl    edx,0x6
c001897c:	09 ea                	or     edx,ebp
c001897e:	3c 0f                	cmp    al,0xf
c0018980:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018987:	75 30                	jne    c00189b9 <CPU::detectFeatures()+0x5b3>
c0018989:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001898f:	c1 e9 14             	shr    ecx,0x14
c0018992:	83 e0 3f             	and    eax,0x3f
c0018995:	83 c1 0f             	add    ecx,0xf
c0018998:	88 ca                	mov    dl,cl
c001899a:	c0 e9 02             	shr    cl,0x2
c001899d:	c1 e2 06             	shl    edx,0x6
c00189a0:	09 d0                	or     eax,edx
c00189a2:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00189a8:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00189ae:	83 e0 c0             	and    eax,0xffffffc0
c00189b1:	09 c1                	or     ecx,eax
c00189b3:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00189b9:	83 ec 0c             	sub    esp,0xc
c00189bc:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00189c3:	56                   	push   esi
c00189c4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00189c8:	50                   	push   eax
c00189c9:	57                   	push   edi
c00189ca:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00189ce:	55                   	push   ebp
c00189cf:	68 00 00 00 80       	push   0x80000000
c00189d4:	e8 e7 f5 ff ff       	call   c0017fc0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00189d9:	83 c4 20             	add    esp,0x20
c00189dc:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00189e4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00189e8:	76 1e                	jbe    c0018a08 <CPU::detectFeatures()+0x602>
c00189ea:	83 ec 0c             	sub    esp,0xc
c00189ed:	56                   	push   esi
c00189ee:	50                   	push   eax
c00189ef:	57                   	push   edi
c00189f0:	55                   	push   ebp
c00189f1:	68 01 00 00 80       	push   0x80000001
c00189f6:	e8 c5 f5 ff ff       	call   c0017fc0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00189fb:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018a05:	83 c4 20             	add    esp,0x20
c0018a08:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018a0e:	83 f8 01             	cmp    eax,0x1
c0018a11:	75 6f                	jne    c0018a82 <CPU::detectFeatures()+0x67c>
c0018a13:	51                   	push   ecx
c0018a14:	51                   	push   ecx
c0018a15:	68 f2 98 02 c0       	push   0xc00298f2
c0018a1a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018a1e:	56                   	push   esi
c0018a1f:	e8 06 7d fe ff       	call   c000072a <strcpy>
c0018a24:	5f                   	pop    edi
c0018a25:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a2b:	5d                   	pop    ebp
c0018a2c:	66 c1 e8 06          	shr    ax,0x6
c0018a30:	0f b6 c0             	movzx  eax,al
c0018a33:	50                   	push   eax
c0018a34:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a3a:	c1 e8 0e             	shr    eax,0xe
c0018a3d:	0f b6 c0             	movzx  eax,al
c0018a40:	50                   	push   eax
c0018a41:	e8 24 f2 ff ff       	call   c0017c6a <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018a46:	5a                   	pop    edx
c0018a47:	59                   	pop    ecx
c0018a48:	50                   	push   eax
c0018a49:	56                   	push   esi
c0018a4a:	e8 92 7d fe ff       	call   c00007e1 <strcat>
c0018a4f:	5f                   	pop    edi
c0018a50:	5d                   	pop    ebp
c0018a51:	56                   	push   esi
c0018a52:	53                   	push   ebx
c0018a53:	e8 1a b2 ff ff       	call   c0013c72 <Device::setName(char const*)>
c0018a58:	58                   	pop    eax
c0018a59:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018a5f:	5a                   	pop    edx
c0018a60:	68 f9 98 02 c0       	push   0xc00298f9
c0018a65:	50                   	push   eax
c0018a66:	e8 10 7d fe ff       	call   c000077b <strcmp>
c0018a6b:	83 c4 10             	add    esp,0x10
c0018a6e:	85 c0                	test   eax,eax
c0018a70:	0f 85 71 03 00 00    	jne    c0018de7 <CPU::detectFeatures()+0x9e1>
c0018a76:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018a7d:	e9 65 03 00 00       	jmp    c0018de7 <CPU::detectFeatures()+0x9e1>
c0018a82:	83 f8 02             	cmp    eax,0x2
c0018a85:	0f 85 b5 00 00 00    	jne    c0018b40 <CPU::detectFeatures()+0x73a>
c0018a8b:	57                   	push   edi
c0018a8c:	57                   	push   edi
c0018a8d:	68 0b 99 02 c0       	push   0xc002990b
c0018a92:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018a96:	56                   	push   esi
c0018a97:	e8 8e 7c fe ff       	call   c000072a <strcpy>
c0018a9c:	5d                   	pop    ebp
c0018a9d:	58                   	pop    eax
c0018a9e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018aa4:	66 c1 e8 06          	shr    ax,0x6
c0018aa8:	0f b6 c0             	movzx  eax,al
c0018aab:	50                   	push   eax
c0018aac:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ab2:	c1 e8 0e             	shr    eax,0xe
c0018ab5:	0f b6 c0             	movzx  eax,al
c0018ab8:	50                   	push   eax
c0018ab9:	e8 18 f0 ff ff       	call   c0017ad6 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018abe:	5a                   	pop    edx
c0018abf:	59                   	pop    ecx
c0018ac0:	50                   	push   eax
c0018ac1:	56                   	push   esi
c0018ac2:	e8 1a 7d fe ff       	call   c00007e1 <strcat>
c0018ac7:	5f                   	pop    edi
c0018ac8:	5d                   	pop    ebp
c0018ac9:	56                   	push   esi
c0018aca:	53                   	push   ebx
c0018acb:	e8 a2 b1 ff ff       	call   c0013c72 <Device::setName(char const*)>
c0018ad0:	58                   	pop    eax
c0018ad1:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018ad7:	5a                   	pop    edx
c0018ad8:	68 10 99 02 c0       	push   0xc0029910
c0018add:	50                   	push   eax
c0018ade:	e8 98 7c fe ff       	call   c000077b <strcmp>
c0018ae3:	83 c4 10             	add    esp,0x10
c0018ae6:	85 c0                	test   eax,eax
c0018ae8:	75 20                	jne    c0018b0a <CPU::detectFeatures()+0x704>
c0018aea:	8b 15 28 c2 02 c0    	mov    edx,DWORD PTR ds:0xc002c228
c0018af0:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018af6:	a8 01                	test   al,0x1
c0018af8:	74 10                	je     c0018b0a <CPU::detectFeatures()+0x704>
c0018afa:	83 e0 fe             	and    eax,0xfffffffe
c0018afd:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018b03:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018b0a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b10:	c1 e8 0e             	shr    eax,0xe
c0018b13:	3c 05                	cmp    al,0x5
c0018b15:	0f 85 cc 02 00 00    	jne    c0018de7 <CPU::detectFeatures()+0x9e1>
c0018b1b:	56                   	push   esi
c0018b1c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018b22:	83 e0 0f             	and    eax,0xf
c0018b25:	50                   	push   eax
c0018b26:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b2c:	66 c1 e8 06          	shr    ax,0x6
c0018b30:	0f b6 c0             	movzx  eax,al
c0018b33:	50                   	push   eax
c0018b34:	6a 05                	push   0x5
c0018b36:	e8 11 f4 ff ff       	call   c0017f4c <CPU::AMD_K6_writeback(int, int, int)>
c0018b3b:	e9 1f 02 00 00       	jmp    c0018d5f <CPU::detectFeatures()+0x959>
c0018b40:	8d 50 fd             	lea    edx,[eax-0x3]
c0018b43:	83 fa 01             	cmp    edx,0x1
c0018b46:	76 09                	jbe    c0018b51 <CPU::detectFeatures()+0x74b>
c0018b48:	83 f8 06             	cmp    eax,0x6
c0018b4b:	0f 85 91 01 00 00    	jne    c0018ce2 <CPU::detectFeatures()+0x8dc>
c0018b51:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018b57:	c1 ea 0e             	shr    edx,0xe
c0018b5a:	80 fa 05             	cmp    dl,0x5
c0018b5d:	75 7b                	jne    c0018bda <CPU::detectFeatures()+0x7d4>
c0018b5f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018b65:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018b6a:	66 81 fa 00 01       	cmp    dx,0x100
c0018b6f:	75 0c                	jne    c0018b7d <CPU::detectFeatures()+0x777>
c0018b71:	51                   	push   ecx
c0018b72:	51                   	push   ecx
c0018b73:	68 17 99 02 c0       	push   0xc0029917
c0018b78:	e9 dc 01 00 00       	jmp    c0018d59 <CPU::detectFeatures()+0x953>
c0018b7d:	66 81 fa 00 02       	cmp    dx,0x200
c0018b82:	75 0c                	jne    c0018b90 <CPU::detectFeatures()+0x78a>
c0018b84:	52                   	push   edx
c0018b85:	52                   	push   edx
c0018b86:	68 2a 99 02 c0       	push   0xc002992a
c0018b8b:	e9 c9 01 00 00       	jmp    c0018d59 <CPU::detectFeatures()+0x953>
c0018b90:	66 81 fa 40 02       	cmp    dx,0x240
c0018b95:	75 0c                	jne    c0018ba3 <CPU::detectFeatures()+0x79d>
c0018b97:	50                   	push   eax
c0018b98:	50                   	push   eax
c0018b99:	68 3c 99 02 c0       	push   0xc002993c
c0018b9e:	e9 b6 01 00 00       	jmp    c0018d59 <CPU::detectFeatures()+0x953>
c0018ba3:	83 f8 06             	cmp    eax,0x6
c0018ba6:	75 0c                	jne    c0018bb4 <CPU::detectFeatures()+0x7ae>
c0018ba8:	50                   	push   eax
c0018ba9:	50                   	push   eax
c0018baa:	68 4e 99 02 c0       	push   0xc002994e
c0018baf:	e9 a5 01 00 00       	jmp    c0018d59 <CPU::detectFeatures()+0x953>
c0018bb4:	83 f8 04             	cmp    eax,0x4
c0018bb7:	75 0c                	jne    c0018bc5 <CPU::detectFeatures()+0x7bf>
c0018bb9:	50                   	push   eax
c0018bba:	50                   	push   eax
c0018bbb:	68 5a 99 02 c0       	push   0xc002995a
c0018bc0:	e9 94 01 00 00       	jmp    c0018d59 <CPU::detectFeatures()+0x953>
c0018bc5:	83 f8 03             	cmp    eax,0x3
c0018bc8:	0f 85 19 02 00 00    	jne    c0018de7 <CPU::detectFeatures()+0x9e1>
c0018bce:	50                   	push   eax
c0018bcf:	50                   	push   eax
c0018bd0:	68 62 99 02 c0       	push   0xc0029962
c0018bd5:	e9 7f 01 00 00       	jmp    c0018d59 <CPU::detectFeatures()+0x953>
c0018bda:	80 fa 06             	cmp    dl,0x6
c0018bdd:	0f 85 db 00 00 00    	jne    c0018cbe <CPU::detectFeatures()+0x8b8>
c0018be3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018be9:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018bee:	66 81 fa 80 01       	cmp    dx,0x180
c0018bf3:	75 0c                	jne    c0018c01 <CPU::detectFeatures()+0x7fb>
c0018bf5:	50                   	push   eax
c0018bf6:	50                   	push   eax
c0018bf7:	68 6d 99 02 c0       	push   0xc002996d
c0018bfc:	e9 58 01 00 00       	jmp    c0018d59 <CPU::detectFeatures()+0x953>
c0018c01:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018c07:	66 f7 c1 80 ff       	test   cx,0xff80
c0018c0c:	75 0c                	jne    c0018c1a <CPU::detectFeatures()+0x814>
c0018c0e:	50                   	push   eax
c0018c0f:	50                   	push   eax
c0018c10:	68 7d 99 02 c0       	push   0xc002997d
c0018c15:	e9 3f 01 00 00       	jmp    c0018d59 <CPU::detectFeatures()+0x953>
c0018c1a:	66 81 fa 40 02       	cmp    dx,0x240
c0018c1f:	75 0c                	jne    c0018c2d <CPU::detectFeatures()+0x827>
c0018c21:	55                   	push   ebp
c0018c22:	55                   	push   ebp
c0018c23:	68 84 99 02 c0       	push   0xc0029984
c0018c28:	e9 2c 01 00 00       	jmp    c0018d59 <CPU::detectFeatures()+0x953>
c0018c2d:	66 81 fa 80 02       	cmp    dx,0x280
c0018c32:	75 0c                	jne    c0018c40 <CPU::detectFeatures()+0x83a>
c0018c34:	57                   	push   edi
c0018c35:	57                   	push   edi
c0018c36:	68 8d 99 02 c0       	push   0xc002998d
c0018c3b:	e9 19 01 00 00       	jmp    c0018d59 <CPU::detectFeatures()+0x953>
c0018c40:	66 81 fa 40 03       	cmp    dx,0x340
c0018c45:	74 ed                	je     c0018c34 <CPU::detectFeatures()+0x82e>
c0018c47:	66 81 fa c0 03       	cmp    dx,0x3c0
c0018c4c:	75 0c                	jne    c0018c5a <CPU::detectFeatures()+0x854>
c0018c4e:	56                   	push   esi
c0018c4f:	56                   	push   esi
c0018c50:	68 94 99 02 c0       	push   0xc0029994
c0018c55:	e9 ff 00 00 00       	jmp    c0018d59 <CPU::detectFeatures()+0x953>
c0018c5a:	83 f8 06             	cmp    eax,0x6
c0018c5d:	0f 84 45 ff ff ff    	je     c0018ba8 <CPU::detectFeatures()+0x7a2>
c0018c63:	83 f8 04             	cmp    eax,0x4
c0018c66:	0f 84 4d ff ff ff    	je     c0018bb9 <CPU::detectFeatures()+0x7b3>
c0018c6c:	83 f8 03             	cmp    eax,0x3
c0018c6f:	0f 85 72 01 00 00    	jne    c0018de7 <CPU::detectFeatures()+0x9e1>
c0018c75:	51                   	push   ecx
c0018c76:	51                   	push   ecx
c0018c77:	68 9d 99 02 c0       	push   0xc002999d
c0018c7c:	53                   	push   ebx
c0018c7d:	e8 f0 af ff ff       	call   c0013c72 <Device::setName(char const*)>
c0018c82:	b1 c1                	mov    cl,0xc1
c0018c84:	88 c8                	mov    al,cl
c0018c86:	e6 22                	out    0x22,al
c0018c88:	e4 23                	in     al,0x23
c0018c8a:	88 c2                	mov    dl,al
c0018c8c:	88 c8                	mov    al,cl
c0018c8e:	e6 22                	out    0x22,al
c0018c90:	88 d0                	mov    al,dl
c0018c92:	83 c8 10             	or     eax,0x10
c0018c95:	e6 23                	out    0x23,al
c0018c97:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018c9e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018ca1:	89 d0                	mov    eax,edx
c0018ca3:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0018ca9:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0018cad:	40                   	inc    eax
c0018cae:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018cb4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018cb9:	e9 a1 00 00 00       	jmp    c0018d5f <CPU::detectFeatures()+0x959>
c0018cbe:	83 f8 06             	cmp    eax,0x6
c0018cc1:	0f 84 e1 fe ff ff    	je     c0018ba8 <CPU::detectFeatures()+0x7a2>
c0018cc7:	83 f8 04             	cmp    eax,0x4
c0018cca:	0f 84 e9 fe ff ff    	je     c0018bb9 <CPU::detectFeatures()+0x7b3>
c0018cd0:	83 f8 03             	cmp    eax,0x3
c0018cd3:	0f 85 0e 01 00 00    	jne    c0018de7 <CPU::detectFeatures()+0x9e1>
c0018cd9:	52                   	push   edx
c0018cda:	52                   	push   edx
c0018cdb:	68 a8 99 02 c0       	push   0xc00299a8
c0018ce0:	eb 77                	jmp    c0018d59 <CPU::detectFeatures()+0x953>
c0018ce2:	83 f8 07             	cmp    eax,0x7
c0018ce5:	75 09                	jne    c0018cf0 <CPU::detectFeatures()+0x8ea>
c0018ce7:	50                   	push   eax
c0018ce8:	50                   	push   eax
c0018ce9:	68 b2 99 02 c0       	push   0xc00299b2
c0018cee:	eb 69                	jmp    c0018d59 <CPU::detectFeatures()+0x953>
c0018cf0:	83 f8 0a             	cmp    eax,0xa
c0018cf3:	75 09                	jne    c0018cfe <CPU::detectFeatures()+0x8f8>
c0018cf5:	50                   	push   eax
c0018cf6:	50                   	push   eax
c0018cf7:	68 bd 99 02 c0       	push   0xc00299bd
c0018cfc:	eb 5b                	jmp    c0018d59 <CPU::detectFeatures()+0x953>
c0018cfe:	83 f8 0b             	cmp    eax,0xb
c0018d01:	75 09                	jne    c0018d0c <CPU::detectFeatures()+0x906>
c0018d03:	50                   	push   eax
c0018d04:	50                   	push   eax
c0018d05:	68 c5 99 02 c0       	push   0xc00299c5
c0018d0a:	eb 4d                	jmp    c0018d59 <CPU::detectFeatures()+0x953>
c0018d0c:	83 f8 08             	cmp    eax,0x8
c0018d0f:	75 09                	jne    c0018d1a <CPU::detectFeatures()+0x914>
c0018d11:	50                   	push   eax
c0018d12:	50                   	push   eax
c0018d13:	68 ce 99 02 c0       	push   0xc00299ce
c0018d18:	eb 3f                	jmp    c0018d59 <CPU::detectFeatures()+0x953>
c0018d1a:	83 f8 09             	cmp    eax,0x9
c0018d1d:	75 09                	jne    c0018d28 <CPU::detectFeatures()+0x922>
c0018d1f:	50                   	push   eax
c0018d20:	50                   	push   eax
c0018d21:	68 d6 99 02 c0       	push   0xc00299d6
c0018d26:	eb 31                	jmp    c0018d59 <CPU::detectFeatures()+0x953>
c0018d28:	83 f8 05             	cmp    eax,0x5
c0018d2b:	75 09                	jne    c0018d36 <CPU::detectFeatures()+0x930>
c0018d2d:	50                   	push   eax
c0018d2e:	50                   	push   eax
c0018d2f:	68 de 99 02 c0       	push   0xc00299de
c0018d34:	eb 23                	jmp    c0018d59 <CPU::detectFeatures()+0x953>
c0018d36:	83 f8 0c             	cmp    eax,0xc
c0018d39:	75 09                	jne    c0018d44 <CPU::detectFeatures()+0x93e>
c0018d3b:	55                   	push   ebp
c0018d3c:	55                   	push   ebp
c0018d3d:	68 ec 99 02 c0       	push   0xc00299ec
c0018d42:	eb 15                	jmp    c0018d59 <CPU::detectFeatures()+0x953>
c0018d44:	83 f8 0d             	cmp    eax,0xd
c0018d47:	75 09                	jne    c0018d52 <CPU::detectFeatures()+0x94c>
c0018d49:	57                   	push   edi
c0018d4a:	57                   	push   edi
c0018d4b:	68 f7 99 02 c0       	push   0xc00299f7
c0018d50:	eb 07                	jmp    c0018d59 <CPU::detectFeatures()+0x953>
c0018d52:	56                   	push   esi
c0018d53:	56                   	push   esi
c0018d54:	68 0b 9a 02 c0       	push   0xc0029a0b
c0018d59:	53                   	push   ebx
c0018d5a:	e8 13 af ff ff       	call   c0013c72 <Device::setName(char const*)>
c0018d5f:	83 c4 10             	add    esp,0x10
c0018d62:	e9 80 00 00 00       	jmp    c0018de7 <CPU::detectFeatures()+0x9e1>
c0018d67:	51                   	push   ecx
c0018d68:	51                   	push   ecx
c0018d69:	68 57 98 02 c0       	push   0xc0029857
c0018d6e:	57                   	push   edi
c0018d6f:	e8 b6 79 fe ff       	call   c000072a <strcpy>
c0018d74:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018d7e:	e8 e0 74 fe ff       	call   c0000263 <is486>
c0018d83:	83 c4 10             	add    esp,0x10
c0018d86:	85 c0                	test   eax,eax
c0018d88:	74 2b                	je     c0018db5 <CPU::detectFeatures()+0x9af>
c0018d8a:	52                   	push   edx
c0018d8b:	52                   	push   edx
c0018d8c:	68 17 9a 02 c0       	push   0xc0029a17
c0018d91:	53                   	push   ebx
c0018d92:	e8 db ae ff ff       	call   c0013c72 <Device::setName(char const*)>
c0018d97:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018d9e:	0f 20 c0             	mov    eax,cr0
c0018da1:	83 e0 14             	and    eax,0x14
c0018da4:	83 c4 10             	add    esp,0x10
c0018da7:	83 f8 04             	cmp    eax,0x4
c0018daa:	75 1f                	jne    c0018dcb <CPU::detectFeatures()+0x9c5>
c0018dac:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0018db3:	eb 32                	jmp    c0018de7 <CPU::detectFeatures()+0x9e1>
c0018db5:	50                   	push   eax
c0018db6:	50                   	push   eax
c0018db7:	68 22 9a 02 c0       	push   0xc0029a22
c0018dbc:	53                   	push   ebx
c0018dbd:	e8 b0 ae ff ff       	call   c0013c72 <Device::setName(char const*)>
c0018dc2:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0018dc9:	eb d3                	jmp    c0018d9e <CPU::detectFeatures()+0x998>
c0018dcb:	e8 6e 74 fe ff       	call   c000023e <hasLegacyFPU>
c0018dd0:	83 e0 01             	and    eax,0x1
c0018dd3:	8d 14 00             	lea    edx,[eax+eax*1]
c0018dd6:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018ddc:	83 e0 fd             	and    eax,0xfffffffd
c0018ddf:	09 d0                	or     eax,edx
c0018de1:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018de7:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0018dee:	83 c4 4c             	add    esp,0x4c
c0018df1:	5b                   	pop    ebx
c0018df2:	5e                   	pop    esi
c0018df3:	5f                   	pop    edi
c0018df4:	5d                   	pop    ebp
c0018df5:	c3                   	ret    

c0018df6 <CPU::setupSMEP()>:
c0018df6:	0f 20 e0             	mov    eax,cr4
c0018df9:	0d 00 00 10 00       	or     eax,0x100000
c0018dfe:	0f 22 e0             	mov    cr4,eax
c0018e01:	c3                   	ret    

c0018e02 <CPU::setupUMIP()>:
c0018e02:	0f 20 e0             	mov    eax,cr4
c0018e05:	80 cc 08             	or     ah,0x8
c0018e08:	0f 22 e0             	mov    cr4,eax
c0018e0b:	c3                   	ret    

c0018e0c <CPU::setupTSC()>:
c0018e0c:	0f 20 e0             	mov    eax,cr4
c0018e0f:	83 c8 04             	or     eax,0x4
c0018e12:	0f 22 e0             	mov    cr4,eax
c0018e15:	c3                   	ret    

c0018e16 <CPU::setupLargePages()>:
c0018e16:	0f 20 e0             	mov    eax,cr4
c0018e19:	83 c8 10             	or     eax,0x10
c0018e1c:	0f 22 e0             	mov    cr4,eax
c0018e1f:	c3                   	ret    

c0018e20 <CPU::setupPAT()>:
c0018e20:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c0018e25:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0018e2c:	74 2c                	je     c0018e5a <CPU::setupPAT()+0x3a>
c0018e2e:	53                   	push   ebx
c0018e2f:	83 ec 10             	sub    esp,0x10
c0018e32:	68 77 02 00 00       	push   0x277
c0018e37:	50                   	push   eax
c0018e38:	e8 3f 5c ff ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c0018e3d:	83 e2 f8             	and    edx,0xfffffff8
c0018e40:	83 ca 01             	or     edx,0x1
c0018e43:	52                   	push   edx
c0018e44:	50                   	push   eax
c0018e45:	68 77 02 00 00       	push   0x277
c0018e4a:	ff 35 28 c2 02 c0    	push   DWORD PTR ds:0xc002c228
c0018e50:	e8 53 5c ff ff       	call   c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>
c0018e55:	83 c4 28             	add    esp,0x28
c0018e58:	5b                   	pop    ebx
c0018e59:	c3                   	ret    
c0018e5a:	c3                   	ret    
c0018e5b:	90                   	nop

c0018e5c <CPU::setupMTRR()>:
c0018e5c:	c3                   	ret    
c0018e5d:	90                   	nop

c0018e5e <CPU::setupGlobalPages()>:
c0018e5e:	0f 20 e0             	mov    eax,cr4
c0018e61:	0c 80                	or     al,0x80
c0018e63:	0f 22 e0             	mov    cr4,eax
c0018e66:	c3                   	ret    
c0018e67:	90                   	nop

c0018e68 <CPU::allowUsermodeDataAccess()>:
c0018e68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e6c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018e73:	74 03                	je     c0018e78 <CPU::allowUsermodeDataAccess()+0x10>
c0018e75:	0f 01 cb             	stac   
c0018e78:	c3                   	ret    
c0018e79:	90                   	nop

c0018e7a <CPU::prohibitUsermodeDataAccess()>:
c0018e7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e7e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018e85:	74 03                	je     c0018e8a <CPU::prohibitUsermodeDataAccess()+0x10>
c0018e87:	0f 01 ca             	clac   
c0018e8a:	c3                   	ret    
c0018e8b:	90                   	nop

c0018e8c <CPU::setupSMAP()>:
c0018e8c:	0f 20 e0             	mov    eax,cr4
c0018e8f:	0d 00 00 20 00       	or     eax,0x200000
c0018e94:	0f 22 e0             	mov    cr4,eax
c0018e97:	eb e1                	jmp    c0018e7a <CPU::prohibitUsermodeDataAccess()>
c0018e99:	90                   	nop

c0018e9a <CPU::setupFeatures()>:
c0018e9a:	83 ec 0c             	sub    esp,0xc
c0018e9d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ea1:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0018ea8:	74 07                	je     c0018eb1 <CPU::setupFeatures()+0x17>
c0018eaa:	52                   	push   edx
c0018eab:	e8 46 ff ff ff       	call   c0018df6 <CPU::setupSMEP()>
c0018eb0:	58                   	pop    eax
c0018eb1:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0018eb8:	74 07                	je     c0018ec1 <CPU::setupFeatures()+0x27>
c0018eba:	52                   	push   edx
c0018ebb:	e8 cc ff ff ff       	call   c0018e8c <CPU::setupSMAP()>
c0018ec0:	58                   	pop    eax
c0018ec1:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0018ec8:	74 07                	je     c0018ed1 <CPU::setupFeatures()+0x37>
c0018eca:	52                   	push   edx
c0018ecb:	e8 32 ff ff ff       	call   c0018e02 <CPU::setupUMIP()>
c0018ed0:	58                   	pop    eax
c0018ed1:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0018ed8:	74 07                	je     c0018ee1 <CPU::setupFeatures()+0x47>
c0018eda:	52                   	push   edx
c0018edb:	e8 2c ff ff ff       	call   c0018e0c <CPU::setupTSC()>
c0018ee0:	58                   	pop    eax
c0018ee1:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0018ee8:	74 07                	je     c0018ef1 <CPU::setupFeatures()+0x57>
c0018eea:	52                   	push   edx
c0018eeb:	e8 26 ff ff ff       	call   c0018e16 <CPU::setupLargePages()>
c0018ef0:	59                   	pop    ecx
c0018ef1:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0018ef8:	74 07                	je     c0018f01 <CPU::setupFeatures()+0x67>
c0018efa:	52                   	push   edx
c0018efb:	e8 5e ff ff ff       	call   c0018e5e <CPU::setupGlobalPages()>
c0018f00:	58                   	pop    eax
c0018f01:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0018f08:	74 0c                	je     c0018f16 <CPU::setupFeatures()+0x7c>
c0018f0a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018f0e:	83 c4 0c             	add    esp,0xc
c0018f11:	e9 0a ff ff ff       	jmp    c0018e20 <CPU::setupPAT()>
c0018f16:	83 c4 0c             	add    esp,0xc
c0018f19:	c3                   	ret    

c0018f1a <CPU::open(int, int, void*)>:
c0018f1a:	57                   	push   edi
c0018f1b:	56                   	push   esi
c0018f1c:	53                   	push   ebx
c0018f1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018f21:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018f25:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0018f2b:	83 ec 0c             	sub    esp,0xc
c0018f2e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0018f34:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0018f3a:	50                   	push   eax
c0018f3b:	e8 28 5e ff ff       	call   c000ed68 <GDT::setup()>
c0018f40:	83 c4 0c             	add    esp,0xc
c0018f43:	6a 00                	push   0x0
c0018f45:	68 ef be ad de       	push   0xdeadbeef
c0018f4a:	57                   	push   edi
c0018f4b:	e8 d2 80 ff ff       	call   c0011022 <TSS::setup(unsigned long, unsigned long)>
c0018f50:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018f53:	e8 aa 80 ff ff       	call   c0011002 <TSS::flush()>
c0018f58:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0018f5e:	89 04 24             	mov    DWORD PTR [esp],eax
c0018f61:	e8 5e 60 ff ff       	call   c000efc4 <IDT::setup()>
c0018f66:	b8 00 04 00 00       	mov    eax,0x400
c0018f6b:	0f 23 f8             	mov    db7,eax
c0018f6e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0018f78:	e8 01 6b ff ff       	call   c000fa7e <Phys::allocatePage()>
c0018f7d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0018f83:	89 30                	mov    DWORD PTR [eax],esi
c0018f85:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0018f8b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0018f8e:	58                   	pop    eax
c0018f8f:	5a                   	pop    edx
c0018f90:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0018f96:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018f9a:	e8 b5 90 ff ff       	call   c0012054 <VAS::setCPUSpecific(unsigned long)>
c0018f9f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018fa2:	e8 5f f4 ff ff       	call   c0018406 <CPU::detectFeatures()>
c0018fa7:	e8 aa bf ff ff       	call   c0014f56 <setupInterruptController()>
c0018fac:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0018fb2:	a1 40 c2 02 c0       	mov    eax,ds:0xc002c240
c0018fb7:	83 e0 10             	and    eax,0x10
c0018fba:	83 f8 01             	cmp    eax,0x1
c0018fbd:	19 c0                	sbb    eax,eax
c0018fbf:	83 e0 46             	and    eax,0x46
c0018fc2:	83 c0 1e             	add    eax,0x1e
c0018fc5:	89 04 24             	mov    DWORD PTR [esp],eax
c0018fc8:	e8 41 d4 ff ff       	call   c001640e <setupTimer(int)>
c0018fcd:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0018fd3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018fd6:	e8 bf fe ff ff       	call   c0018e9a <CPU::setupFeatures()>
c0018fdb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018fde:	e8 a7 f1 ff ff       	call   c001818a <CPU::displayFeatures()>
c0018fe3:	83 c4 10             	add    esp,0x10
c0018fe6:	31 c0                	xor    eax,eax
c0018fe8:	5b                   	pop    ebx
c0018fe9:	5e                   	pop    esi
c0018fea:	5f                   	pop    edi
c0018feb:	c3                   	ret    

c0018fec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0018fec:	57                   	push   edi
c0018fed:	56                   	push   esi
c0018fee:	53                   	push   ebx
c0018fef:	51                   	push   ecx
c0018ff0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018ff4:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0018ff7:	0f 02 c0             	lar    eax,ax
c0018ffa:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0018ffd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019001:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019004:	88 ca                	mov    dl,cl
c0019006:	c0 ea 06             	shr    dl,0x6
c0019009:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001900d:	89 ca                	mov    edx,ecx
c001900f:	66 c1 ea 03          	shr    dx,0x3
c0019013:	83 e2 07             	and    edx,0x7
c0019016:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001901b:	88 17                	mov    BYTE PTR [edi],dl
c001901d:	0f 84 a6 01 00 00    	je     c00191c9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019023:	83 e1 07             	and    ecx,0x7
c0019026:	80 f9 04             	cmp    cl,0x4
c0019029:	0f 84 98 00 00 00    	je     c00190c7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001902f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019034:	0f 95 c0             	setne  al
c0019037:	80 f9 05             	cmp    cl,0x5
c001903a:	0f 95 c2             	setne  dl
c001903d:	08 c2                	or     dl,al
c001903f:	74 79                	je     c00190ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019041:	84 c9                	test   cl,cl
c0019043:	75 05                	jne    c001904a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019045:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019048:	eb 3c                	jmp    c0019086 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001904a:	80 f9 01             	cmp    cl,0x1
c001904d:	75 05                	jne    c0019054 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001904f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019052:	eb 32                	jmp    c0019086 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019054:	80 f9 02             	cmp    cl,0x2
c0019057:	75 05                	jne    c001905e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019059:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001905c:	eb 28                	jmp    c0019086 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001905e:	31 c0                	xor    eax,eax
c0019060:	80 f9 03             	cmp    cl,0x3
c0019063:	75 05                	jne    c001906a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019065:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019068:	eb 1c                	jmp    c0019086 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001906a:	80 f9 05             	cmp    cl,0x5
c001906d:	75 05                	jne    c0019074 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001906f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019072:	eb 12                	jmp    c0019086 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019074:	80 f9 06             	cmp    cl,0x6
c0019077:	75 05                	jne    c001907e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019079:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001907c:	eb 08                	jmp    c0019086 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001907e:	80 f9 07             	cmp    cl,0x7
c0019081:	75 03                	jne    c0019086 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019083:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019086:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001908b:	75 10                	jne    c001909d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001908d:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019091:	b9 03 00 00 00       	mov    ecx,0x3
c0019096:	01 d0                	add    eax,edx
c0019098:	e9 37 01 00 00       	jmp    c00191d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001909d:	b9 02 00 00 00       	mov    ecx,0x2
c00190a2:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00190a7:	0f 85 27 01 00 00    	jne    c00191d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00190ad:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00190b0:	b9 06 00 00 00       	mov    ecx,0x6
c00190b5:	e9 1a 01 00 00       	jmp    c00191d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00190ba:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00190bd:	b9 06 00 00 00       	mov    ecx,0x6
c00190c2:	e9 0f 01 00 00       	jmp    c00191d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00190c7:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00190ca:	88 ca                	mov    dl,cl
c00190cc:	c0 ea 06             	shr    dl,0x6
c00190cf:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00190d3:	89 ca                	mov    edx,ecx
c00190d5:	66 c1 ea 03          	shr    dx,0x3
c00190d9:	83 e2 07             	and    edx,0x7
c00190dc:	80 e1 07             	and    cl,0x7
c00190df:	75 05                	jne    c00190e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00190e1:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00190e4:	eb 4c                	jmp    c0019132 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00190e6:	80 f9 01             	cmp    cl,0x1
c00190e9:	75 05                	jne    c00190f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00190eb:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00190ee:	eb 42                	jmp    c0019132 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00190f0:	80 f9 02             	cmp    cl,0x2
c00190f3:	75 05                	jne    c00190fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00190f5:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00190f8:	eb 38                	jmp    c0019132 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00190fa:	80 f9 03             	cmp    cl,0x3
c00190fd:	75 05                	jne    c0019104 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00190ff:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019102:	eb 2e                	jmp    c0019132 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019104:	80 f9 04             	cmp    cl,0x4
c0019107:	75 12                	jne    c001911b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019109:	f6 c4 60             	test   ah,0x60
c001910c:	75 08                	jne    c0019116 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001910e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019111:	8d 78 14             	lea    edi,[eax+0x14]
c0019114:	eb 1c                	jmp    c0019132 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019116:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019119:	eb 17                	jmp    c0019132 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001911b:	80 f9 05             	cmp    cl,0x5
c001911e:	75 05                	jne    c0019125 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019120:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019123:	eb 0d                	jmp    c0019132 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019125:	80 f9 06             	cmp    cl,0x6
c0019128:	75 05                	jne    c001912f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001912a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001912d:	eb 03                	jmp    c0019132 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001912f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019132:	84 d2                	test   dl,dl
c0019134:	75 05                	jne    c001913b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019136:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019139:	eb 3c                	jmp    c0019177 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001913b:	80 fa 01             	cmp    dl,0x1
c001913e:	75 05                	jne    c0019145 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019140:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019143:	eb 32                	jmp    c0019177 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019145:	80 fa 02             	cmp    dl,0x2
c0019148:	75 05                	jne    c001914f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001914a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001914d:	eb 28                	jmp    c0019177 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001914f:	80 fa 03             	cmp    dl,0x3
c0019152:	75 05                	jne    c0019159 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019154:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019157:	eb 1e                	jmp    c0019177 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019159:	31 c0                	xor    eax,eax
c001915b:	80 fa 04             	cmp    dl,0x4
c001915e:	74 17                	je     c0019177 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019160:	80 fa 05             	cmp    dl,0x5
c0019163:	75 05                	jne    c001916a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019165:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019168:	eb 0d                	jmp    c0019177 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001916a:	80 fa 06             	cmp    dl,0x6
c001916d:	75 05                	jne    c0019174 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001916f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019172:	eb 03                	jmp    c0019177 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019174:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019177:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001917c:	0f 94 c2             	sete   dl
c001917f:	80 f9 05             	cmp    cl,0x5
c0019182:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019186:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001918b:	d3 e0                	shl    eax,cl
c001918d:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019191:	74 0a                	je     c001919d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019193:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019196:	b9 07 00 00 00       	mov    ecx,0x7
c001919b:	eb 37                	jmp    c00191d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001919d:	01 f8                	add    eax,edi
c001919f:	b9 03 00 00 00       	mov    ecx,0x3
c00191a4:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00191a9:	74 2b                	je     c00191d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00191ab:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00191b0:	75 0d                	jne    c00191bf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00191b2:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00191b6:	01 c8                	add    eax,ecx
c00191b8:	b9 04 00 00 00       	mov    ecx,0x4
c00191bd:	eb 17                	jmp    c00191d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00191bf:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00191c2:	b9 07 00 00 00       	mov    ecx,0x7
c00191c7:	eb 0d                	jmp    c00191d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00191c9:	b9 02 00 00 00       	mov    ecx,0x2
c00191ce:	b2 01                	mov    dl,0x1
c00191d0:	31 c0                	xor    eax,eax
c00191d2:	eb 02                	jmp    c00191d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00191d4:	31 d2                	xor    edx,edx
c00191d6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00191da:	89 0b                	mov    DWORD PTR [ebx],ecx
c00191dc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00191e0:	88 11                	mov    BYTE PTR [ecx],dl
c00191e2:	5a                   	pop    edx
c00191e3:	5b                   	pop    ebx
c00191e4:	5e                   	pop    esi
c00191e5:	5f                   	pop    edi
c00191e6:	c3                   	ret    
c00191e7:	90                   	nop

c00191e8 <EnvVarContainer::getEnv(char const*)>:
c00191e8:	31 c0                	xor    eax,eax
c00191ea:	c3                   	ret    
c00191eb:	90                   	nop

c00191ec <EnvVarContainer::setEnv(char const*, char const*)>:
c00191ec:	c3                   	ret    
c00191ed:	90                   	nop

c00191ee <EnvVarContainer::deleteEnv(char const*)>:
c00191ee:	c3                   	ret    
c00191ef:	90                   	nop

c00191f0 <EnvVarContainer::__loadUser()>:
c00191f0:	c3                   	ret    
c00191f1:	90                   	nop

c00191f2 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00191f2:	55                   	push   ebp
c00191f3:	57                   	push   edi
c00191f4:	56                   	push   esi
c00191f5:	53                   	push   ebx
c00191f6:	81 ec 38 01 00 00    	sub    esp,0x138
c00191fc:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0019203:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001920a:	68 14 01 00 00       	push   0x114
c001920f:	e8 c0 62 ff ff       	call   c000f4d4 <malloc>
c0019214:	83 c4 0c             	add    esp,0xc
c0019217:	89 c6                	mov    esi,eax
c0019219:	ff 77 08             	push   DWORD PTR [edi+0x8]
c001921c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019223:	50                   	push   eax
c0019224:	e8 a7 99 ff ff       	call   c0012bd0 <File::File(char const*, Process*)>
c0019229:	89 34 24             	mov    DWORD PTR [esp],esi
c001922c:	e8 71 9c ff ff       	call   c0012ea2 <File::exists()>
c0019231:	83 c4 10             	add    esp,0x10
c0019234:	84 c0                	test   al,al
c0019236:	75 31                	jne    c0019269 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019238:	50                   	push   eax
c0019239:	50                   	push   eax
c001923a:	6a 12                	push   0x12
c001923c:	56                   	push   esi
c001923d:	e8 f2 99 ff ff       	call   c0012c34 <File::open(FileOpenMode)>
c0019242:	8b 06                	mov    eax,DWORD PTR [esi]
c0019244:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0019247:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001924a:	e8 59 74 fe ff       	call   c00006a8 <strlen>
c001924f:	5a                   	pop    edx
c0019250:	31 d2                	xor    edx,edx
c0019252:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019256:	51                   	push   ecx
c0019257:	55                   	push   ebp
c0019258:	52                   	push   edx
c0019259:	50                   	push   eax
c001925a:	56                   	push   esi
c001925b:	ff d3                	call   ebx
c001925d:	83 c4 14             	add    esp,0x14
c0019260:	56                   	push   esi
c0019261:	e8 2c 9a ff ff       	call   c0012c92 <File::close()>
c0019266:	83 c4 10             	add    esp,0x10
c0019269:	31 ed                	xor    ebp,ebp
c001926b:	53                   	push   ebx
c001926c:	53                   	push   ebx
c001926d:	31 db                	xor    ebx,ebx
c001926f:	6a 01                	push   0x1
c0019271:	56                   	push   esi
c0019272:	e8 bd 99 ff ff       	call   c0012c34 <File::open(FileOpenMode)>
c0019277:	83 c4 10             	add    esp,0x10
c001927a:	83 ec 0c             	sub    esp,0xc
c001927d:	8b 06                	mov    eax,DWORD PTR [esi]
c001927f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019283:	51                   	push   ecx
c0019284:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019288:	52                   	push   edx
c0019289:	6a 00                	push   0x0
c001928b:	6a 01                	push   0x1
c001928d:	56                   	push   esi
c001928e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019291:	83 c4 20             	add    esp,0x20
c0019294:	85 db                	test   ebx,ebx
c0019296:	0f 84 d8 00 00 00    	je     c0019374 <EnvVarContainer::loadFrom(char const*, char const*)+0x182>
c001929c:	80 7c 24 13 0a       	cmp    BYTE PTR [esp+0x13],0xa
c00192a1:	74 13                	je     c00192b6 <EnvVarContainer::loadFrom(char const*, char const*)+0xc4>
c00192a3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00192a8:	74 0c                	je     c00192b6 <EnvVarContainer::loadFrom(char const*, char const*)+0xc4>
c00192aa:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c00192b0:	0f 8e be 00 00 00    	jle    c0019374 <EnvVarContainer::loadFrom(char const*, char const*)+0x182>
c00192b6:	83 ec 0c             	sub    esp,0xc
c00192b9:	8d 53 01             	lea    edx,[ebx+0x1]
c00192bc:	29 dd                	sub    ebp,ebx
c00192be:	52                   	push   edx
c00192bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00192c3:	e8 0c 62 ff ff       	call   c000f4d4 <malloc>
c00192c8:	8d 4d 04             	lea    ecx,[ebp+0x4]
c00192cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00192cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00192d2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00192d6:	e8 f9 61 ff ff       	call   c000f4d4 <malloc>
c00192db:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00192df:	83 c4 0c             	add    esp,0xc
c00192e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00192e6:	52                   	push   edx
c00192e7:	6a 00                	push   0x0
c00192e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00192ed:	e8 99 73 fe ff       	call   c000068b <memset>
c00192f2:	83 c4 0c             	add    esp,0xc
c00192f5:	53                   	push   ebx
c00192f6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00192fa:	55                   	push   ebp
c00192fb:	01 eb                	add    ebx,ebp
c00192fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019301:	e8 4f 73 fe ff       	call   c0000655 <memcpy>
c0019306:	83 c4 0c             	add    esp,0xc
c0019309:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001930d:	51                   	push   ecx
c001930e:	6a 00                	push   0x0
c0019310:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019314:	e8 72 73 fe ff       	call   c000068b <memset>
c0019319:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001931c:	e8 87 73 fe ff       	call   c00006a8 <strlen>
c0019321:	83 c4 0c             	add    esp,0xc
c0019324:	50                   	push   eax
c0019325:	53                   	push   ebx
c0019326:	31 db                	xor    ebx,ebx
c0019328:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001932c:	e8 24 73 fe ff       	call   c0000655 <memcpy>
c0019331:	8b 07                	mov    eax,DWORD PTR [edi]
c0019333:	40                   	inc    eax
c0019334:	89 07                	mov    DWORD PTR [edi],eax
c0019336:	c1 e0 03             	shl    eax,0x3
c0019339:	5a                   	pop    edx
c001933a:	59                   	pop    ecx
c001933b:	50                   	push   eax
c001933c:	ff 77 04             	push   DWORD PTR [edi+0x4]
c001933f:	e8 7c 61 ff ff       	call   c000f4c0 <realloc>
c0019344:	83 c4 0c             	add    esp,0xc
c0019347:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c001934a:	6a 08                	push   0x8
c001934c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0019350:	52                   	push   edx
c0019351:	8b 17                	mov    edx,DWORD PTR [edi]
c0019353:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019357:	50                   	push   eax
c0019358:	e8 f8 72 fe ff       	call   c0000655 <memcpy>
c001935d:	83 c4 0c             	add    esp,0xc
c0019360:	68 00 01 00 00       	push   0x100
c0019365:	6a 00                	push   0x0
c0019367:	55                   	push   ebp
c0019368:	31 ed                	xor    ebp,ebp
c001936a:	e8 1c 73 fe ff       	call   c000068b <memset>
c001936f:	83 c4 10             	add    esp,0x10
c0019372:	eb 11                	jmp    c0019385 <EnvVarContainer::loadFrom(char const*, char const*)+0x193>
c0019374:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0019378:	3c 3d                	cmp    al,0x3d
c001937a:	74 07                	je     c0019383 <EnvVarContainer::loadFrom(char const*, char const*)+0x191>
c001937c:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c0019380:	45                   	inc    ebp
c0019381:	eb 02                	jmp    c0019385 <EnvVarContainer::loadFrom(char const*, char const*)+0x193>
c0019383:	89 eb                	mov    ebx,ebp
c0019385:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001938a:	0f 85 ea fe ff ff    	jne    c001927a <EnvVarContainer::loadFrom(char const*, char const*)+0x88>
c0019390:	50                   	push   eax
c0019391:	50                   	push   eax
c0019392:	ff 37                	push   DWORD PTR [edi]
c0019394:	68 5c 9a 02 c0       	push   0xc0029a5c
c0019399:	e8 03 93 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001939e:	81 c4 3c 01 00 00    	add    esp,0x13c
c00193a4:	5b                   	pop    ebx
c00193a5:	5e                   	pop    esi
c00193a6:	5f                   	pop    edi
c00193a7:	5d                   	pop    ebp
c00193a8:	c3                   	ret    
c00193a9:	90                   	nop

c00193aa <EnvVarContainer::__loadSystem()>:
c00193aa:	83 ec 10             	sub    esp,0x10
c00193ad:	68 60 b7 02 c0       	push   0xc002b760
c00193b2:	68 87 9a 02 c0       	push   0xc0029a87
c00193b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00193bb:	e8 32 fe ff ff       	call   c00191f2 <EnvVarContainer::loadFrom(char const*, char const*)>
c00193c0:	83 c4 1c             	add    esp,0x1c
c00193c3:	c3                   	ret    

c00193c4 <EnvVarContainer::EnvVarContainer(Process*)>:
c00193c4:	83 ec 0c             	sub    esp,0xc
c00193c7:	83 ec 0c             	sub    esp,0xc
c00193ca:	68 a9 9a 02 c0       	push   0xc0029aa9
c00193cf:	e8 cd 92 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00193d4:	83 c4 10             	add    esp,0x10
c00193d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193db:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00193e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193e5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00193e9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00193ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00193f7:	83 ec 0c             	sub    esp,0xc
c00193fa:	68 b6 9a 02 c0       	push   0xc0029ab6
c00193ff:	e8 9d 92 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0019404:	83 c4 10             	add    esp,0x10
c0019407:	90                   	nop
c0019408:	83 c4 0c             	add    esp,0xc
c001940b:	c3                   	ret    

c001940c <EnvVarContainer::~EnvVarContainer()>:
c001940c:	83 ec 0c             	sub    esp,0xc
c001940f:	83 ec 0c             	sub    esp,0xc
c0019412:	68 c1 9a 02 c0       	push   0xc0029ac1
c0019417:	e8 85 92 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001941c:	83 c4 10             	add    esp,0x10
c001941f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019423:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019426:	85 c0                	test   eax,eax
c0019428:	74 1d                	je     c0019447 <EnvVarContainer::~EnvVarContainer()+0x3b>
c001942a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001942e:	8b 00                	mov    eax,DWORD PTR [eax]
c0019430:	85 c0                	test   eax,eax
c0019432:	74 13                	je     c0019447 <EnvVarContainer::~EnvVarContainer()+0x3b>
c0019434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019438:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001943b:	83 ec 0c             	sub    esp,0xc
c001943e:	50                   	push   eax
c001943f:	e8 a0 60 ff ff       	call   c000f4e4 <free>
c0019444:	83 c4 10             	add    esp,0x10
c0019447:	83 ec 0c             	sub    esp,0xc
c001944a:	68 d0 9a 02 c0       	push   0xc0029ad0
c001944f:	e8 4d 92 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0019454:	83 c4 10             	add    esp,0x10
c0019457:	90                   	nop
c0019458:	83 c4 0c             	add    esp,0xc
c001945b:	c3                   	ret    

c001945c <Krnl::getEnv(Process*, char const*)>:
c001945c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019460:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019464:	39 05 54 d7 02 c0    	cmp    DWORD PTR ds:0xc002d754,eax
c001946a:	74 16                	je     c0019482 <Krnl::getEnv(Process*, char const*)+0x26>
c001946c:	85 c0                	test   eax,eax
c001946e:	74 12                	je     c0019482 <Krnl::getEnv(Process*, char const*)+0x26>
c0019470:	52                   	push   edx
c0019471:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019477:	e8 6c fd ff ff       	call   c00191e8 <EnvVarContainer::getEnv(char const*)>
c001947c:	59                   	pop    ecx
c001947d:	85 c0                	test   eax,eax
c001947f:	59                   	pop    ecx
c0019480:	75 28                	jne    c00194aa <Krnl::getEnv(Process*, char const*)+0x4e>
c0019482:	a1 30 cd 02 c0       	mov    eax,ds:0xc002cd30
c0019487:	85 c0                	test   eax,eax
c0019489:	74 0d                	je     c0019498 <Krnl::getEnv(Process*, char const*)+0x3c>
c001948b:	52                   	push   edx
c001948c:	50                   	push   eax
c001948d:	e8 56 fd ff ff       	call   c00191e8 <EnvVarContainer::getEnv(char const*)>
c0019492:	59                   	pop    ecx
c0019493:	85 c0                	test   eax,eax
c0019495:	59                   	pop    ecx
c0019496:	75 12                	jne    c00194aa <Krnl::getEnv(Process*, char const*)+0x4e>
c0019498:	a1 34 cd 02 c0       	mov    eax,ds:0xc002cd34
c001949d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00194a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00194a5:	e9 3e fd ff ff       	jmp    c00191e8 <EnvVarContainer::getEnv(char const*)>
c00194aa:	c3                   	ret    

c00194ab <Krnl::setEnvSystem(char const*, char const*)>:
c00194ab:	c3                   	ret    

c00194ac <Krnl::setEnvUser(char const*, char const*)>:
c00194ac:	c3                   	ret    

c00194ad <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00194ad:	c3                   	ret    

c00194ae <Krnl::deleteEnvSystem(char const*)>:
c00194ae:	c3                   	ret    

c00194af <Krnl::deleteEnvUser(char const*)>:
c00194af:	c3                   	ret    

c00194b0 <Krnl::deleteEnvProcess(Process*, char const*)>:
c00194b0:	c3                   	ret    

c00194b1 <Krnl::newProcessEnv(Process*)>:
c00194b1:	83 ec 28             	sub    esp,0x28
c00194b4:	6a 0c                	push   0xc
c00194b6:	e8 19 60 ff ff       	call   c000f4d4 <malloc>
c00194bb:	5a                   	pop    edx
c00194bc:	59                   	pop    ecx
c00194bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00194c1:	50                   	push   eax
c00194c2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00194c6:	e8 f9 fe ff ff       	call   c00193c4 <EnvVarContainer::EnvVarContainer(Process*)>
c00194cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00194cf:	83 c4 2c             	add    esp,0x2c
c00194d2:	c3                   	ret    

c00194d3 <Krnl::copyProcessEnv(Process*, Process*)>:
c00194d3:	56                   	push   esi
c00194d4:	53                   	push   ebx
c00194d5:	83 ec 10             	sub    esp,0x10
c00194d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00194dc:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c00194e2:	6a 0c                	push   0xc
c00194e4:	e8 eb 5f ff ff       	call   c000f4d4 <malloc>
c00194e9:	89 c3                	mov    ebx,eax
c00194eb:	58                   	pop    eax
c00194ec:	5a                   	pop    edx
c00194ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00194f1:	53                   	push   ebx
c00194f2:	e8 cd fe ff ff       	call   c00193c4 <EnvVarContainer::EnvVarContainer(Process*)>
c00194f7:	8b 06                	mov    eax,DWORD PTR [esi]
c00194f9:	89 03                	mov    DWORD PTR [ebx],eax
c00194fb:	c1 e0 03             	shl    eax,0x3
c00194fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0019501:	e8 ce 5f ff ff       	call   c000f4d4 <malloc>
c0019506:	83 c4 0c             	add    esp,0xc
c0019509:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001950c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001950e:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c0019515:	52                   	push   edx
c0019516:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019519:	50                   	push   eax
c001951a:	e8 36 71 fe ff       	call   c0000655 <memcpy>
c001951f:	89 d8                	mov    eax,ebx
c0019521:	83 c4 14             	add    esp,0x14
c0019524:	5b                   	pop    ebx
c0019525:	5e                   	pop    esi
c0019526:	c3                   	ret    

c0019527 <Krnl::loadSystemEnv()>:
c0019527:	53                   	push   ebx
c0019528:	83 ec 14             	sub    esp,0x14
c001952b:	6a 0c                	push   0xc
c001952d:	e8 a2 5f ff ff       	call   c000f4d4 <malloc>
c0019532:	89 c3                	mov    ebx,eax
c0019534:	58                   	pop    eax
c0019535:	5a                   	pop    edx
c0019536:	ff 35 54 d7 02 c0    	push   DWORD PTR ds:0xc002d754
c001953c:	53                   	push   ebx
c001953d:	e8 82 fe ff ff       	call   c00193c4 <EnvVarContainer::EnvVarContainer(Process*)>
c0019542:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019545:	89 1d 34 cd 02 c0    	mov    DWORD PTR ds:0xc002cd34,ebx
c001954b:	e8 5a fe ff ff       	call   c00193aa <EnvVarContainer::__loadSystem()>
c0019550:	83 c4 18             	add    esp,0x18
c0019553:	5b                   	pop    ebx
c0019554:	c3                   	ret    

c0019555 <Krnl::loadUserEnv()>:
c0019555:	53                   	push   ebx
c0019556:	83 ec 14             	sub    esp,0x14
c0019559:	6a 0c                	push   0xc
c001955b:	e8 74 5f ff ff       	call   c000f4d4 <malloc>
c0019560:	89 c3                	mov    ebx,eax
c0019562:	58                   	pop    eax
c0019563:	5a                   	pop    edx
c0019564:	ff 35 54 d7 02 c0    	push   DWORD PTR ds:0xc002d754
c001956a:	53                   	push   ebx
c001956b:	e8 54 fe ff ff       	call   c00193c4 <EnvVarContainer::EnvVarContainer(Process*)>
c0019570:	89 1d 30 cd 02 c0    	mov    DWORD PTR ds:0xc002cd30,ebx
c0019576:	83 c4 18             	add    esp,0x18
c0019579:	5b                   	pop    ebx
c001957a:	c3                   	ret    

c001957b <Krnl::flushEnv()>:
c001957b:	c3                   	ret    

c001957c <Krnl::panic(char const*)>:
c001957c:	55                   	push   ebp
c001957d:	89 e5                	mov    ebp,esp
c001957f:	53                   	push   ebx
c0019580:	50                   	push   eax
c0019581:	a1 3c cd 02 c0       	mov    eax,ds:0xc002cd3c
c0019586:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019589:	85 c0                	test   eax,eax
c001958b:	74 02                	je     c001958f <Krnl::panic(char const*)+0x13>
c001958d:	ff d0                	call   eax
c001958f:	fa                   	cli    
c0019590:	c6 05 40 cd 02 c0 01 	mov    BYTE PTR ds:0xc002cd40,0x1
c0019597:	83 ec 08             	sub    esp,0x8
c001959a:	c6 05 60 b1 02 c0 00 	mov    BYTE PTR ds:0xc002b160,0x0
c00195a1:	53                   	push   ebx
c00195a2:	68 de 9a 02 c0       	push   0xc0029ade
c00195a7:	e8 f5 90 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00195ac:	58                   	pop    eax
c00195ad:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c00195b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00195b8:	e8 a6 72 ff ff       	call   c0010863 <setActiveTerminal(VgaText*)>
c00195bd:	83 c4 0c             	add    esp,0xc
c00195c0:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c00195c5:	6a 01                	push   0x1
c00195c7:	6a 0f                	push   0xf
c00195c9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00195cf:	e8 ce 6c ff ff       	call   c00102a2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00195d4:	5a                   	pop    edx
c00195d5:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c00195da:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00195e0:	e8 1f 75 ff ff       	call   c0010b04 <VgaText::clearScreen()>
c00195e5:	59                   	pop    ecx
c00195e6:	58                   	pop    eax
c00195e7:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c00195ec:	68 f7 9a 02 c0       	push   0xc0029af7
c00195f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00195f7:	e8 86 76 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c00195fc:	58                   	pop    eax
c00195fd:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c0019602:	5a                   	pop    edx
c0019603:	68 9c 9b 02 c0       	push   0xc0029b9c
c0019608:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001960e:	e8 6f 76 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c0019613:	59                   	pop    ecx
c0019614:	58                   	pop    eax
c0019615:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c001961a:	68 13 9b 02 c0       	push   0xc0029b13
c001961f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019625:	e8 58 76 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c001962a:	58                   	pop    eax
c001962b:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c0019630:	5a                   	pop    edx
c0019631:	53                   	push   ebx
c0019632:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019638:	e8 45 76 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c001963d:	59                   	pop    ecx
c001963e:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c0019643:	5b                   	pop    ebx
c0019644:	68 33 9b 02 c0       	push   0xc0029b33
c0019649:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001964f:	e8 2e 76 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c0019654:	58                   	pop    eax
c0019655:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c001965a:	5a                   	pop    edx
c001965b:	68 d8 9b 02 c0       	push   0xc0029bd8
c0019660:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019666:	e8 17 76 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c001966b:	59                   	pop    ecx
c001966c:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c0019671:	5b                   	pop    ebx
c0019672:	68 13 9b 02 c0       	push   0xc0029b13
c0019677:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001967d:	e8 00 76 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c0019682:	58                   	pop    eax
c0019683:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019688:	5a                   	pop    edx
c0019689:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001968c:	83 c0 0c             	add    eax,0xc
c001968f:	50                   	push   eax
c0019690:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c0019695:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001969b:	e8 e2 75 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c00196a0:	59                   	pop    ecx
c00196a1:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c00196a6:	5b                   	pop    ebx
c00196a7:	68 32 9b 02 c0       	push   0xc0029b32
c00196ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00196b2:	e8 cb 75 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c00196b7:	58                   	pop    eax
c00196b8:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c00196bd:	5a                   	pop    edx
c00196be:	68 04 9c 02 c0       	push   0xc0029c04
c00196c3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00196c9:	e8 b4 75 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c00196ce:	59                   	pop    ecx
c00196cf:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c00196d4:	5b                   	pop    ebx
c00196d5:	68 44 9c 02 c0       	push   0xc0029c44
c00196da:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00196e0:	e8 9d 75 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c00196e5:	58                   	pop    eax
c00196e6:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c00196eb:	5a                   	pop    edx
c00196ec:	68 1e 9b 02 c0       	push   0xc0029b1e
c00196f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00196f7:	e8 86 75 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c00196fc:	59                   	pop    ecx
c00196fd:	5b                   	pop    ebx
c00196fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019701:	68 36 9b 02 c0       	push   0xc0029b36
c0019706:	e8 96 8f ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001970b:	58                   	pop    eax
c001970c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001970f:	5a                   	pop    edx
c0019710:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019713:	68 3f 9b 02 c0       	push   0xc0029b3f
c0019718:	e8 84 8f ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001971d:	59                   	pop    ecx
c001971e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019721:	5b                   	pop    ebx
c0019722:	8b 00                	mov    eax,DWORD PTR [eax]
c0019724:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019727:	68 48 9b 02 c0       	push   0xc0029b48
c001972c:	e8 70 8f ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0019731:	58                   	pop    eax
c0019732:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c0019737:	5a                   	pop    edx
c0019738:	68 88 9c 02 c0       	push   0xc0029c88
c001973d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019743:	e8 3a 75 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c0019748:	59                   	pop    ecx
c0019749:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c001974e:	5b                   	pop    ebx
c001974f:	68 51 9b 02 c0       	push   0xc0029b51
c0019754:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001975a:	e8 23 75 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c001975f:	0f 20 c0             	mov    eax,cr0
c0019762:	5a                   	pop    edx
c0019763:	59                   	pop    ecx
c0019764:	50                   	push   eax
c0019765:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c001976a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019770:	e8 33 75 ff ff       	call   c0010ca8 <VgaText::putx(unsigned int)>
c0019775:	5b                   	pop    ebx
c0019776:	58                   	pop    eax
c0019777:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c001977c:	68 5b 9b 02 c0       	push   0xc0029b5b
c0019781:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019787:	e8 f6 74 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c001978c:	0f 20 d0             	mov    eax,cr2
c001978f:	5a                   	pop    edx
c0019790:	59                   	pop    ecx
c0019791:	50                   	push   eax
c0019792:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c0019797:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001979d:	e8 06 75 ff ff       	call   c0010ca8 <VgaText::putx(unsigned int)>
c00197a2:	5b                   	pop    ebx
c00197a3:	58                   	pop    eax
c00197a4:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c00197a9:	68 65 9b 02 c0       	push   0xc0029b65
c00197ae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00197b4:	e8 c9 74 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c00197b9:	0f 20 d8             	mov    eax,cr3
c00197bc:	5a                   	pop    edx
c00197bd:	59                   	pop    ecx
c00197be:	50                   	push   eax
c00197bf:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c00197c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00197ca:	e8 d9 74 ff ff       	call   c0010ca8 <VgaText::putx(unsigned int)>
c00197cf:	5b                   	pop    ebx
c00197d0:	58                   	pop    eax
c00197d1:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c00197d6:	68 78 9b 02 c0       	push   0xc0029b78
c00197db:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00197e1:	e8 9c 74 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c00197e6:	0f 20 e0             	mov    eax,cr4
c00197e9:	5a                   	pop    edx
c00197ea:	59                   	pop    ecx
c00197eb:	50                   	push   eax
c00197ec:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c00197f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00197f7:	e8 ac 74 ff ff       	call   c0010ca8 <VgaText::putx(unsigned int)>
c00197fc:	5b                   	pop    ebx
c00197fd:	58                   	pop    eax
c00197fe:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c0019803:	68 82 9b 02 c0       	push   0xc0029b82
c0019808:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001980e:	e8 6f 74 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c0019813:	5a                   	pop    edx
c0019814:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c0019819:	59                   	pop    ecx
c001981a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019820:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019823:	50                   	push   eax
c0019824:	e8 7f 74 ff ff       	call   c0010ca8 <VgaText::putx(unsigned int)>
c0019829:	5b                   	pop    ebx
c001982a:	58                   	pop    eax
c001982b:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c0019830:	68 99 9b 02 c0       	push   0xc0029b99
c0019835:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001983b:	e8 42 74 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c0019840:	5a                   	pop    edx
c0019841:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c0019846:	59                   	pop    ecx
c0019847:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001984d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019850:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019853:	50                   	push   eax
c0019854:	e8 4f 74 ff ff       	call   c0010ca8 <VgaText::putx(unsigned int)>
c0019859:	5b                   	pop    ebx
c001985a:	58                   	pop    eax
c001985b:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c0019860:	68 99 9b 02 c0       	push   0xc0029b99
c0019865:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001986b:	e8 12 74 ff ff       	call   c0010c82 <VgaText::puts(char const*)>
c0019870:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c0019875:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019878:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001987e:	8b 12                	mov    edx,DWORD PTR [edx]
c0019880:	59                   	pop    ecx
c0019881:	5b                   	pop    ebx
c0019882:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019885:	50                   	push   eax
c0019886:	e8 1d 74 ff ff       	call   c0010ca8 <VgaText::putx(unsigned int)>
c001988b:	83 c4 10             	add    esp,0x10
c001988e:	b2 fe                	mov    dl,0xfe
c0019890:	e4 60                	in     al,0x60
c0019892:	3c 1c                	cmp    al,0x1c
c0019894:	74 04                	je     c001989a <Krnl::panic(char const*)+0x31e>
c0019896:	3c 5a                	cmp    al,0x5a
c0019898:	75 f6                	jne    c0019890 <Krnl::panic(char const*)+0x314>
c001989a:	e4 64                	in     al,0x64
c001989c:	a8 02                	test   al,0x2
c001989e:	75 fa                	jne    c001989a <Krnl::panic(char const*)+0x31e>
c00198a0:	88 d0                	mov    al,dl
c00198a2:	e6 64                	out    0x64,al
c00198a4:	fa                   	cli    
c00198a5:	f4                   	hlt    
c00198a6:	eb e8                	jmp    c0019890 <Krnl::panic(char const*)+0x314>

c00198a8 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00198a8:	55                   	push   ebp
c00198a9:	57                   	push   edi
c00198aa:	56                   	push   esi
c00198ab:	53                   	push   ebx
c00198ac:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00198b2:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00198b9:	8a 1e                	mov    bl,BYTE PTR [esi]
c00198bb:	8d 6e 01             	lea    ebp,[esi+0x1]
c00198be:	80 fb 40             	cmp    bl,0x40
c00198c1:	75 1b                	jne    c00198de <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c00198c3:	8a 16                	mov    dl,BYTE PTR [esi]
c00198c5:	84 d2                	test   dl,dl
c00198c7:	0f 84 f1 00 00 00    	je     c00199be <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00198cd:	8d 46 01             	lea    eax,[esi+0x1]
c00198d0:	80 fa 3a             	cmp    dl,0x3a
c00198d3:	74 04                	je     c00198d9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00198d5:	89 c6                	mov    esi,eax
c00198d7:	eb ea                	jmp    c00198c3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00198d9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00198dc:	89 c6                	mov    esi,eax
c00198de:	50                   	push   eax
c00198df:	6a 40                	push   0x40
c00198e1:	6a 00                	push   0x0
c00198e3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00198e7:	50                   	push   eax
c00198e8:	e8 9e 6d fe ff       	call   c000068b <memset>
c00198ed:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00198f4:	31 c0                	xor    eax,eax
c00198f6:	83 c4 10             	add    esp,0x10
c00198f9:	8a 0f                	mov    cl,BYTE PTR [edi]
c00198fb:	84 c9                	test   cl,cl
c00198fd:	0f 84 bb 00 00 00    	je     c00199be <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019903:	3d c7 00 00 00       	cmp    eax,0xc7
c0019908:	0f 8f b0 00 00 00    	jg     c00199be <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001990e:	80 f9 0a             	cmp    cl,0xa
c0019911:	0f 85 98 00 00 00    	jne    c00199af <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0019917:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001991c:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0019920:	a8 df                	test   al,0xdf
c0019922:	0f 94 c1             	sete   cl
c0019925:	3c 23                	cmp    al,0x23
c0019927:	0f 94 c2             	sete   dl
c001992a:	08 d1                	or     cl,dl
c001992c:	75 4a                	jne    c0019978 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001992e:	8d 50 f7             	lea    edx,[eax-0x9]
c0019931:	80 fa 01             	cmp    dl,0x1
c0019934:	76 42                	jbe    c0019978 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019936:	3c 5b                	cmp    al,0x5b
c0019938:	75 42                	jne    c001997c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001993a:	80 fb 40             	cmp    bl,0x40
c001993d:	75 39                	jne    c0019978 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001993f:	83 ec 0c             	sub    esp,0xc
c0019942:	8d 54 24 65          	lea    edx,[esp+0x65]
c0019946:	52                   	push   edx
c0019947:	e8 5c 6d fe ff       	call   c00006a8 <strlen>
c001994c:	83 c4 10             	add    esp,0x10
c001994f:	83 f8 3f             	cmp    eax,0x3f
c0019952:	77 6a                	ja     c00199be <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019954:	50                   	push   eax
c0019955:	50                   	push   eax
c0019956:	8d 54 24 61          	lea    edx,[esp+0x61]
c001995a:	52                   	push   edx
c001995b:	8d 54 24 24          	lea    edx,[esp+0x24]
c001995f:	52                   	push   edx
c0019960:	e8 c5 6d fe ff       	call   c000072a <strcpy>
c0019965:	58                   	pop    eax
c0019966:	8d 54 24 24          	lea    edx,[esp+0x24]
c001996a:	52                   	push   edx
c001996b:	e8 38 6d fe ff       	call   c00006a8 <strlen>
c0019970:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0019975:	83 c4 10             	add    esp,0x10
c0019978:	31 d2                	xor    edx,edx
c001997a:	eb 3a                	jmp    c00199b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001997c:	80 fb 40             	cmp    bl,0x40
c001997f:	74 06                	je     c0019987 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0019981:	8d 44 24 58          	lea    eax,[esp+0x58]
c0019985:	eb 20                	jmp    c00199a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0019987:	50                   	push   eax
c0019988:	50                   	push   eax
c0019989:	55                   	push   ebp
c001998a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001998e:	50                   	push   eax
c001998f:	e8 e7 6d fe ff       	call   c000077b <strcmp>
c0019994:	83 c4 10             	add    esp,0x10
c0019997:	85 c0                	test   eax,eax
c0019999:	75 dd                	jne    c0019978 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001999b:	eb e4                	jmp    c0019981 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001999d:	8d 50 01             	lea    edx,[eax+0x1]
c00199a0:	80 f9 3d             	cmp    cl,0x3d
c00199a3:	74 1d                	je     c00199c2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c00199a5:	89 d0                	mov    eax,edx
c00199a7:	8a 08                	mov    cl,BYTE PTR [eax]
c00199a9:	84 c9                	test   cl,cl
c00199ab:	75 f0                	jne    c001999d <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c00199ad:	eb 0f                	jmp    c00199be <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00199af:	8d 50 01             	lea    edx,[eax+0x1]
c00199b2:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00199b6:	47                   	inc    edi
c00199b7:	89 d0                	mov    eax,edx
c00199b9:	e9 3b ff ff ff       	jmp    c00198f9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c00199be:	31 c0                	xor    eax,eax
c00199c0:	eb 33                	jmp    c00199f5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c00199c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00199c6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00199c9:	50                   	push   eax
c00199ca:	50                   	push   eax
c00199cb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00199cf:	50                   	push   eax
c00199d0:	56                   	push   esi
c00199d1:	e8 a5 6d fe ff       	call   c000077b <strcmp>
c00199d6:	83 c4 10             	add    esp,0x10
c00199d9:	85 c0                	test   eax,eax
c00199db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00199df:	75 97                	jne    c0019978 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00199e1:	51                   	push   ecx
c00199e2:	51                   	push   ecx
c00199e3:	52                   	push   edx
c00199e4:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00199eb:	e8 3a 6d fe ff       	call   c000072a <strcpy>
c00199f0:	83 c4 10             	add    esp,0x10
c00199f3:	b0 01                	mov    al,0x1
c00199f5:	81 c4 2c 01 00 00    	add    esp,0x12c
c00199fb:	5b                   	pop    ebx
c00199fc:	5e                   	pop    esi
c00199fd:	5f                   	pop    edi
c00199fe:	5d                   	pop    ebp
c00199ff:	c3                   	ret    

c0019a00 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0019a00:	57                   	push   edi
c0019a01:	56                   	push   esi
c0019a02:	53                   	push   ebx
c0019a03:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019a09:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0019a10:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0019a17:	53                   	push   ebx
c0019a18:	e8 8b 6c fe ff       	call   c00006a8 <strlen>
c0019a1d:	89 34 24             	mov    DWORD PTR [esp],esi
c0019a20:	89 c7                	mov    edi,eax
c0019a22:	e8 81 6c fe ff       	call   c00006a8 <strlen>
c0019a27:	83 c4 10             	add    esp,0x10
c0019a2a:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0019a2e:	3d ff 00 00 00       	cmp    eax,0xff
c0019a33:	0f 87 d3 00 00 00    	ja     c0019b0c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0019a39:	57                   	push   edi
c0019a3a:	57                   	push   edi
c0019a3b:	56                   	push   esi
c0019a3c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019a40:	56                   	push   esi
c0019a41:	e8 e4 6c fe ff       	call   c000072a <strcpy>
c0019a46:	58                   	pop    eax
c0019a47:	5a                   	pop    edx
c0019a48:	68 59 a0 02 c0       	push   0xc002a059
c0019a4d:	56                   	push   esi
c0019a4e:	e8 8e 6d fe ff       	call   c00007e1 <strcat>
c0019a53:	59                   	pop    ecx
c0019a54:	5f                   	pop    edi
c0019a55:	53                   	push   ebx
c0019a56:	56                   	push   esi
c0019a57:	e8 85 6d fe ff       	call   c00007e1 <strcat>
c0019a5c:	58                   	pop    eax
c0019a5d:	5a                   	pop    edx
c0019a5e:	68 ae 9c 02 c0       	push   0xc0029cae
c0019a63:	56                   	push   esi
c0019a64:	e8 78 6d fe ff       	call   c00007e1 <strcat>
c0019a69:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019a70:	e8 5f 5a ff ff       	call   c000f4d4 <malloc>
c0019a75:	83 c4 0c             	add    esp,0xc
c0019a78:	89 c3                	mov    ebx,eax
c0019a7a:	ff 35 54 d7 02 c0    	push   DWORD PTR ds:0xc002d754
c0019a80:	56                   	push   esi
c0019a81:	50                   	push   eax
c0019a82:	e8 49 91 ff ff       	call   c0012bd0 <File::File(char const*, Process*)>
c0019a87:	83 c4 10             	add    esp,0x10
c0019a8a:	85 db                	test   ebx,ebx
c0019a8c:	74 7e                	je     c0019b0c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0019a8e:	51                   	push   ecx
c0019a8f:	51                   	push   ecx
c0019a90:	6a 01                	push   0x1
c0019a92:	53                   	push   ebx
c0019a93:	e8 9c 91 ff ff       	call   c0012c34 <File::open(FileOpenMode)>
c0019a98:	83 c4 10             	add    esp,0x10
c0019a9b:	85 c0                	test   eax,eax
c0019a9d:	74 08                	je     c0019aa7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0019a9f:	83 ec 0c             	sub    esp,0xc
c0019aa2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019aa4:	53                   	push   ebx
c0019aa5:	eb 5f                	jmp    c0019b06 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0019aa7:	52                   	push   edx
c0019aa8:	8d 44 24 17          	lea    eax,[esp+0x17]
c0019aac:	50                   	push   eax
c0019aad:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019ab1:	50                   	push   eax
c0019ab2:	53                   	push   ebx
c0019ab3:	e8 28 94 ff ff       	call   c0012ee0 <File::stat(unsigned long long*, bool*)>
c0019ab8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019abc:	83 c4 10             	add    esp,0x10
c0019abf:	89 c1                	mov    ecx,eax
c0019ac1:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0019ac5:	74 31                	je     c0019af8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0019ac7:	83 ec 0c             	sub    esp,0xc
c0019aca:	50                   	push   eax
c0019acb:	e8 04 5a ff ff       	call   c000f4d4 <malloc>
c0019ad0:	89 c6                	mov    esi,eax
c0019ad2:	58                   	pop    eax
c0019ad3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ad5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0019ad9:	52                   	push   edx
c0019ada:	56                   	push   esi
c0019adb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019adf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019ae3:	53                   	push   ebx
c0019ae4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019ae7:	83 c4 20             	add    esp,0x20
c0019aea:	85 c0                	test   eax,eax
c0019aec:	75 0a                	jne    c0019af8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0019aee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019af2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0019af6:	74 18                	je     c0019b10 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0019af8:	83 ec 0c             	sub    esp,0xc
c0019afb:	53                   	push   ebx
c0019afc:	e8 91 91 ff ff       	call   c0012c92 <File::close()>
c0019b01:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b03:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b06:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019b09:	83 c4 10             	add    esp,0x10
c0019b0c:	31 c0                	xor    eax,eax
c0019b0e:	eb 3b                	jmp    c0019b4b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0019b10:	83 ec 0c             	sub    esp,0xc
c0019b13:	53                   	push   ebx
c0019b14:	e8 79 91 ff ff       	call   c0012c92 <File::close()>
c0019b19:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b1e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019b21:	83 c4 0c             	add    esp,0xc
c0019b24:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0019b2b:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0019b32:	56                   	push   esi
c0019b33:	e8 70 fd ff ff       	call   c00198a8 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0019b38:	89 34 24             	mov    DWORD PTR [esp],esi
c0019b3b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019b3f:	e8 a0 59 ff ff       	call   c000f4e4 <free>
c0019b44:	83 c4 10             	add    esp,0x10
c0019b47:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019b4b:	81 c4 20 01 00 00    	add    esp,0x120
c0019b51:	5b                   	pop    ebx
c0019b52:	5e                   	pop    esi
c0019b53:	5f                   	pop    edi
c0019b54:	c3                   	ret    

c0019b55 <Reg::getLine(char*, char*, char*)>:
c0019b55:	57                   	push   edi
c0019b56:	56                   	push   esi
c0019b57:	53                   	push   ebx
c0019b58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019b5c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019b60:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019b64:	57                   	push   edi
c0019b65:	56                   	push   esi
c0019b66:	53                   	push   ebx
c0019b67:	68 b3 9c 02 c0       	push   0xc0029cb3
c0019b6c:	e8 8f fe ff ff       	call   c0019a00 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0019b71:	83 c4 10             	add    esp,0x10
c0019b74:	84 c0                	test   al,al
c0019b76:	75 10                	jne    c0019b88 <Reg::getLine(char*, char*, char*)+0x33>
c0019b78:	57                   	push   edi
c0019b79:	56                   	push   esi
c0019b7a:	53                   	push   ebx
c0019b7b:	68 d8 9c 02 c0       	push   0xc0029cd8
c0019b80:	e8 7b fe ff ff       	call   c0019a00 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0019b85:	83 c4 10             	add    esp,0x10
c0019b88:	5b                   	pop    ebx
c0019b89:	5e                   	pop    esi
c0019b8a:	5f                   	pop    edi
c0019b8b:	c3                   	ret    

c0019b8c <Reg::readInt(char*, char*, int*)>:
c0019b8c:	55                   	push   ebp
c0019b8d:	57                   	push   edi
c0019b8e:	56                   	push   esi
c0019b8f:	53                   	push   ebx
c0019b90:	81 ec f0 00 00 00    	sub    esp,0xf0
c0019b96:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0019b9a:	57                   	push   edi
c0019b9b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0019ba2:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0019ba9:	e8 a7 ff ff ff       	call   c0019b55 <Reg::getLine(char*, char*, char*)>
c0019bae:	83 c4 10             	add    esp,0x10
c0019bb1:	84 c0                	test   al,al
c0019bb3:	0f 84 b3 00 00 00    	je     c0019c6c <Reg::readInt(char*, char*, int*)+0xe0>
c0019bb9:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0019bbd:	80 fa 2b             	cmp    dl,0x2b
c0019bc0:	74 0c                	je     c0019bce <Reg::readInt(char*, char*, int*)+0x42>
c0019bc2:	80 fa 2d             	cmp    dl,0x2d
c0019bc5:	75 0e                	jne    c0019bd5 <Reg::readInt(char*, char*, int*)+0x49>
c0019bc7:	ba 01 00 00 00       	mov    edx,0x1
c0019bcc:	eb 0b                	jmp    c0019bd9 <Reg::readInt(char*, char*, int*)+0x4d>
c0019bce:	ba 01 00 00 00       	mov    edx,0x1
c0019bd3:	eb 02                	jmp    c0019bd7 <Reg::readInt(char*, char*, int*)+0x4b>
c0019bd5:	31 d2                	xor    edx,edx
c0019bd7:	31 c0                	xor    eax,eax
c0019bd9:	be 0a 00 00 00       	mov    esi,0xa
c0019bde:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0019be3:	75 20                	jne    c0019c05 <Reg::readInt(char*, char*, int*)+0x79>
c0019be5:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0019be9:	80 f9 78             	cmp    cl,0x78
c0019bec:	75 0a                	jne    c0019bf8 <Reg::readInt(char*, char*, int*)+0x6c>
c0019bee:	83 c2 02             	add    edx,0x2
c0019bf1:	be 10 00 00 00       	mov    esi,0x10
c0019bf6:	eb 0d                	jmp    c0019c05 <Reg::readInt(char*, char*, int*)+0x79>
c0019bf8:	80 f9 62             	cmp    cl,0x62
c0019bfb:	75 08                	jne    c0019c05 <Reg::readInt(char*, char*, int*)+0x79>
c0019bfd:	83 c2 02             	add    edx,0x2
c0019c00:	be 02 00 00 00       	mov    esi,0x2
c0019c05:	01 d7                	add    edi,edx
c0019c07:	31 d2                	xor    edx,edx
c0019c09:	8a 1f                	mov    bl,BYTE PTR [edi]
c0019c0b:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0019c0f:	80 fb 0d             	cmp    bl,0xd
c0019c12:	0f 94 c3             	sete   bl
c0019c15:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0019c1a:	0f 94 c1             	sete   cl
c0019c1d:	08 cb                	or     bl,cl
c0019c1f:	75 3a                	jne    c0019c5b <Reg::readInt(char*, char*, int*)+0xcf>
c0019c21:	0f af d6             	imul   edx,esi
c0019c24:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0019c29:	83 fe 10             	cmp    esi,0x10
c0019c2c:	75 26                	jne    c0019c54 <Reg::readInt(char*, char*, int*)+0xc8>
c0019c2e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0019c32:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0019c35:	89 e9                	mov    ecx,ebp
c0019c37:	80 f9 05             	cmp    cl,0x5
c0019c3a:	77 06                	ja     c0019c42 <Reg::readInt(char*, char*, int*)+0xb6>
c0019c3c:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0019c40:	eb 16                	jmp    c0019c58 <Reg::readInt(char*, char*, int*)+0xcc>
c0019c42:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0019c46:	83 e9 61             	sub    ecx,0x61
c0019c49:	80 f9 05             	cmp    cl,0x5
c0019c4c:	77 06                	ja     c0019c54 <Reg::readInt(char*, char*, int*)+0xc8>
c0019c4e:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0019c52:	eb 04                	jmp    c0019c58 <Reg::readInt(char*, char*, int*)+0xcc>
c0019c54:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0019c58:	47                   	inc    edi
c0019c59:	eb ae                	jmp    c0019c09 <Reg::readInt(char*, char*, int*)+0x7d>
c0019c5b:	84 c0                	test   al,al
c0019c5d:	74 02                	je     c0019c61 <Reg::readInt(char*, char*, int*)+0xd5>
c0019c5f:	f7 da                	neg    edx
c0019c61:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0019c68:	89 10                	mov    DWORD PTR [eax],edx
c0019c6a:	88 d8                	mov    al,bl
c0019c6c:	81 c4 ec 00 00 00    	add    esp,0xec
c0019c72:	5b                   	pop    ebx
c0019c73:	5e                   	pop    esi
c0019c74:	5f                   	pop    edi
c0019c75:	5d                   	pop    ebp
c0019c76:	c3                   	ret    

c0019c77 <Reg::readString(char*, char*, char*, int)>:
c0019c77:	57                   	push   edi
c0019c78:	56                   	push   esi
c0019c79:	53                   	push   ebx
c0019c7a:	81 ec d4 00 00 00    	sub    esp,0xd4
c0019c80:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0019c87:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0019c8b:	57                   	push   edi
c0019c8c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0019c93:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0019c9a:	e8 b6 fe ff ff       	call   c0019b55 <Reg::getLine(char*, char*, char*)>
c0019c9f:	83 c4 10             	add    esp,0x10
c0019ca2:	89 c6                	mov    esi,eax
c0019ca4:	84 c0                	test   al,al
c0019ca6:	74 44                	je     c0019cec <Reg::readString(char*, char*, char*, int)+0x75>
c0019ca8:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0019caf:	31 c0                	xor    eax,eax
c0019cb1:	4a                   	dec    edx
c0019cb2:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0019cb5:	84 c9                	test   cl,cl
c0019cb7:	74 0f                	je     c0019cc8 <Reg::readString(char*, char*, char*, int)+0x51>
c0019cb9:	39 c2                	cmp    edx,eax
c0019cbb:	7e 0b                	jle    c0019cc8 <Reg::readString(char*, char*, char*, int)+0x51>
c0019cbd:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0019cc0:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0019cc5:	40                   	inc    eax
c0019cc6:	eb ea                	jmp    c0019cb2 <Reg::readString(char*, char*, char*, int)+0x3b>
c0019cc8:	83 ec 0c             	sub    esp,0xc
c0019ccb:	53                   	push   ebx
c0019ccc:	e8 d7 69 fe ff       	call   c00006a8 <strlen>
c0019cd1:	83 c4 10             	add    esp,0x10
c0019cd4:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0019cd9:	75 11                	jne    c0019cec <Reg::readString(char*, char*, char*, int)+0x75>
c0019cdb:	83 ec 0c             	sub    esp,0xc
c0019cde:	53                   	push   ebx
c0019cdf:	e8 c4 69 fe ff       	call   c00006a8 <strlen>
c0019ce4:	83 c4 10             	add    esp,0x10
c0019ce7:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0019cec:	81 c4 d0 00 00 00    	add    esp,0xd0
c0019cf2:	89 f0                	mov    eax,esi
c0019cf4:	5b                   	pop    ebx
c0019cf5:	5e                   	pop    esi
c0019cf6:	5f                   	pop    edi
c0019cf7:	c3                   	ret    

c0019cf8 <Reg::readBool(char*, char*, bool*)>:
c0019cf8:	83 ec 20             	sub    esp,0x20
c0019cfb:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019cff:	50                   	push   eax
c0019d00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019d04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019d08:	e8 7f fe ff ff       	call   c0019b8c <Reg::readInt(char*, char*, int*)>
c0019d0d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019d12:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019d16:	0f 95 02             	setne  BYTE PTR [edx]
c0019d19:	83 c4 2c             	add    esp,0x2c
c0019d1c:	c3                   	ret    

c0019d1d <Reg::readBoolWithDefault(char*, char*, bool)>:
c0019d1d:	53                   	push   ebx
c0019d1e:	83 ec 1c             	sub    esp,0x1c
c0019d21:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0019d25:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019d29:	50                   	push   eax
c0019d2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019d2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019d32:	e8 c1 ff ff ff       	call   c0019cf8 <Reg::readBool(char*, char*, bool*)>
c0019d37:	83 c4 10             	add    esp,0x10
c0019d3a:	84 c0                	test   al,al
c0019d3c:	74 04                	je     c0019d42 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0019d3e:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0019d42:	88 d8                	mov    al,bl
c0019d44:	83 c4 18             	add    esp,0x18
c0019d47:	5b                   	pop    ebx
c0019d48:	c3                   	ret    

c0019d49 <Reg::readIntWithDefault(char*, char*, int)>:
c0019d49:	53                   	push   ebx
c0019d4a:	83 ec 1c             	sub    esp,0x1c
c0019d4d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019d51:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d55:	50                   	push   eax
c0019d56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019d5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019d5e:	e8 29 fe ff ff       	call   c0019b8c <Reg::readInt(char*, char*, int*)>
c0019d63:	83 c4 10             	add    esp,0x10
c0019d66:	84 c0                	test   al,al
c0019d68:	74 04                	je     c0019d6e <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0019d6a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019d6e:	89 d8                	mov    eax,ebx
c0019d70:	83 c4 18             	add    esp,0x18
c0019d73:	5b                   	pop    ebx
c0019d74:	c3                   	ret    

c0019d75 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0019d75:	57                   	push   edi
c0019d76:	56                   	push   esi
c0019d77:	53                   	push   ebx
c0019d78:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019d7c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0019d80:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019d84:	56                   	push   esi
c0019d85:	53                   	push   ebx
c0019d86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d8e:	e8 e4 fe ff ff       	call   c0019c77 <Reg::readString(char*, char*, char*, int)>
c0019d93:	83 c4 10             	add    esp,0x10
c0019d96:	84 c0                	test   al,al
c0019d98:	75 1b                	jne    c0019db5 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c0019d9a:	50                   	push   eax
c0019d9b:	56                   	push   esi
c0019d9c:	4e                   	dec    esi
c0019d9d:	6a 00                	push   0x0
c0019d9f:	53                   	push   ebx
c0019da0:	e8 e6 68 fe ff       	call   c000068b <memset>
c0019da5:	83 c4 0c             	add    esp,0xc
c0019da8:	56                   	push   esi
c0019da9:	57                   	push   edi
c0019daa:	53                   	push   ebx
c0019dab:	89 fb                	mov    ebx,edi
c0019dad:	e8 a3 68 fe ff       	call   c0000655 <memcpy>
c0019db2:	83 c4 10             	add    esp,0x10
c0019db5:	89 d8                	mov    eax,ebx
c0019db7:	5b                   	pop    ebx
c0019db8:	5e                   	pop    esi
c0019db9:	5f                   	pop    edi
c0019dba:	c3                   	ret    

c0019dbb <Sys::exit(regs*)>:
c0019dbb:	83 ec 18             	sub    esp,0x18
c0019dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019dc2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019dc5:	e8 73 32 00 00       	call   c001d03d <terminateTask(int)>
c0019dca:	83 c8 ff             	or     eax,0xffffffff
c0019dcd:	83 c4 1c             	add    esp,0x1c
c0019dd0:	89 c2                	mov    edx,eax
c0019dd2:	c3                   	ret    

c0019dd3 <Sys::getCwd(regs*)>:
c0019dd3:	83 ec 10             	sub    esp,0x10
c0019dd6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019dda:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0019ddd:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019de0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019de5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019de8:	e8 54 91 ff ff       	call   c0012f41 <getcwd(Process*, char*, int)>
c0019ded:	83 c4 1c             	add    esp,0x1c
c0019df0:	99                   	cdq    
c0019df1:	c3                   	ret    

c0019df2 <Sys::getPID(regs*)>:
c0019df2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019df7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0019dfc:	99                   	cdq    
c0019dfd:	c3                   	ret    

c0019dfe <Sys::loadDLL(regs*)>:
c0019dfe:	56                   	push   esi
c0019dff:	53                   	push   ebx
c0019e00:	31 d2                	xor    edx,edx
c0019e02:	51                   	push   ecx
c0019e03:	b8 01 00 00 00       	mov    eax,0x1
c0019e08:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019e0c:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0019e10:	0f 84 8c 00 00 00    	je     c0019ea2 <Sys::loadDLL(regs*)+0xa4>
c0019e16:	83 ec 0c             	sub    esp,0xc
c0019e19:	68 14 01 00 00       	push   0x114
c0019e1e:	e8 b1 56 ff ff       	call   c000f4d4 <malloc>
c0019e23:	83 c4 0c             	add    esp,0xc
c0019e26:	89 c3                	mov    ebx,eax
c0019e28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e2d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019e30:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0019e33:	53                   	push   ebx
c0019e34:	e8 97 8d ff ff       	call   c0012bd0 <File::File(char const*, Process*)>
c0019e39:	83 c4 10             	add    esp,0x10
c0019e3c:	31 d2                	xor    edx,edx
c0019e3e:	b8 02 00 00 00       	mov    eax,0x2
c0019e43:	85 db                	test   ebx,ebx
c0019e45:	74 5b                	je     c0019ea2 <Sys::loadDLL(regs*)+0xa4>
c0019e47:	83 ec 0c             	sub    esp,0xc
c0019e4a:	53                   	push   ebx
c0019e4b:	e8 52 90 ff ff       	call   c0012ea2 <File::exists()>
c0019e50:	83 c4 10             	add    esp,0x10
c0019e53:	84 c0                	test   al,al
c0019e55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e57:	75 11                	jne    c0019e6a <Sys::loadDLL(regs*)+0x6c>
c0019e59:	83 ec 0c             	sub    esp,0xc
c0019e5c:	53                   	push   ebx
c0019e5d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019e60:	83 c4 10             	add    esp,0x10
c0019e63:	b8 03 00 00 00       	mov    eax,0x3
c0019e68:	eb 36                	jmp    c0019ea0 <Sys::loadDLL(regs*)+0xa2>
c0019e6a:	83 ec 0c             	sub    esp,0xc
c0019e6d:	53                   	push   ebx
c0019e6e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019e71:	58                   	pop    eax
c0019e72:	5a                   	pop    edx
c0019e73:	6a 00                	push   0x0
c0019e75:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0019e78:	e8 09 21 00 00       	call   c001bf86 <Thr::loadDLL(char const*, bool)>
c0019e7d:	83 c4 10             	add    esp,0x10
c0019e80:	89 c1                	mov    ecx,eax
c0019e82:	31 d2                	xor    edx,edx
c0019e84:	b8 04 00 00 00       	mov    eax,0x4
c0019e89:	85 c9                	test   ecx,ecx
c0019e8b:	74 15                	je     c0019ea2 <Sys::loadDLL(regs*)+0xa4>
c0019e8d:	53                   	push   ebx
c0019e8e:	53                   	push   ebx
c0019e8f:	ff 35 28 c2 02 c0    	push   DWORD PTR ds:0xc002c228
c0019e95:	51                   	push   ecx
c0019e96:	e8 fa 22 00 00       	call   c001c195 <Thr::executeDLL(unsigned long, void*)>
c0019e9b:	83 c4 10             	add    esp,0x10
c0019e9e:	31 c0                	xor    eax,eax
c0019ea0:	31 d2                	xor    edx,edx
c0019ea2:	59                   	pop    ecx
c0019ea3:	5b                   	pop    ebx
c0019ea4:	5e                   	pop    esi
c0019ea5:	c3                   	ret    

c0019ea6 <Sys::read(regs*)>:
c0019ea6:	57                   	push   edi
c0019ea7:	56                   	push   esi
c0019ea8:	53                   	push   ebx
c0019ea9:	83 ec 10             	sub    esp,0x10
c0019eac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019eb0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019eb3:	83 f8 02             	cmp    eax,0x2
c0019eb6:	77 10                	ja     c0019ec8 <Sys::read(regs*)+0x22>
c0019eb8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019ebd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019ec0:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0019ec6:	eb 0e                	jmp    c0019ed6 <Sys::read(regs*)+0x30>
c0019ec8:	83 ec 0c             	sub    esp,0xc
c0019ecb:	50                   	push   eax
c0019ecc:	e8 8a 76 ff ff       	call   c001155b <getFromFileDescriptor(int)>
c0019ed1:	83 c4 10             	add    esp,0x10
c0019ed4:	89 c1                	mov    ecx,eax
c0019ed6:	83 c8 ff             	or     eax,0xffffffff
c0019ed9:	85 c9                	test   ecx,ecx
c0019edb:	89 c2                	mov    edx,eax
c0019edd:	74 28                	je     c0019f07 <Sys::read(regs*)+0x61>
c0019edf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019ee7:	31 ff                	xor    edi,edi
c0019ee9:	83 ec 0c             	sub    esp,0xc
c0019eec:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019eee:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019ef2:	52                   	push   edx
c0019ef3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019ef6:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0019ef9:	57                   	push   edi
c0019efa:	56                   	push   esi
c0019efb:	51                   	push   ecx
c0019efc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019f03:	83 c4 20             	add    esp,0x20
c0019f06:	99                   	cdq    
c0019f07:	83 c4 10             	add    esp,0x10
c0019f0a:	5b                   	pop    ebx
c0019f0b:	5e                   	pop    esi
c0019f0c:	5f                   	pop    edi
c0019f0d:	c3                   	ret    

c0019f0e <Sys::sbrk(regs*)>:
c0019f0e:	56                   	push   esi
c0019f0f:	53                   	push   ebx
c0019f10:	50                   	push   eax
c0019f11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019f16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019f1a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019f1d:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0019f20:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c0019f26:	85 db                	test   ebx,ebx
c0019f28:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0019f2b:	74 02                	je     c0019f2f <Sys::sbrk(regs*)+0x21>
c0019f2d:	79 06                	jns    c0019f35 <Sys::sbrk(regs*)+0x27>
c0019f2f:	89 f0                	mov    eax,esi
c0019f31:	31 d2                	xor    edx,edx
c0019f33:	eb 2a                	jmp    c0019f5f <Sys::sbrk(regs*)+0x51>
c0019f35:	83 c8 ff             	or     eax,0xffffffff
c0019f38:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0019f3e:	89 c2                	mov    edx,eax
c0019f40:	77 1d                	ja     c0019f5f <Sys::sbrk(regs*)+0x51>
c0019f42:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0019f48:	50                   	push   eax
c0019f49:	c1 ea 0c             	shr    edx,0xc
c0019f4c:	68 07 04 00 00       	push   0x407
c0019f51:	52                   	push   edx
c0019f52:	51                   	push   ecx
c0019f53:	e8 24 7f ff ff       	call   c0011e7c <VAS::allocatePages(int, int)>
c0019f58:	89 f0                	mov    eax,esi
c0019f5a:	31 d2                	xor    edx,edx
c0019f5c:	83 c4 10             	add    esp,0x10
c0019f5f:	59                   	pop    ecx
c0019f60:	5b                   	pop    ebx
c0019f61:	5e                   	pop    esi
c0019f62:	c3                   	ret    

c0019f63 <Sys::setCwd(regs*)>:
c0019f63:	83 ec 14             	sub    esp,0x14
c0019f66:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019f6a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019f6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019f72:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019f75:	e8 f1 8f ff ff       	call   c0012f6b <setcwd(Process*, char*)>
c0019f7a:	83 c4 1c             	add    esp,0x1c
c0019f7d:	99                   	cdq    
c0019f7e:	c3                   	ret    

c0019f7f <Sys::write(regs*)>:
c0019f7f:	57                   	push   edi
c0019f80:	56                   	push   esi
c0019f81:	53                   	push   ebx
c0019f82:	83 ec 10             	sub    esp,0x10
c0019f85:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019f89:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019f8c:	83 f8 02             	cmp    eax,0x2
c0019f8f:	77 10                	ja     c0019fa1 <Sys::write(regs*)+0x22>
c0019f91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019f96:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019f99:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0019f9f:	eb 0e                	jmp    c0019faf <Sys::write(regs*)+0x30>
c0019fa1:	83 ec 0c             	sub    esp,0xc
c0019fa4:	50                   	push   eax
c0019fa5:	e8 b1 75 ff ff       	call   c001155b <getFromFileDescriptor(int)>
c0019faa:	83 c4 10             	add    esp,0x10
c0019fad:	89 c1                	mov    ecx,eax
c0019faf:	83 c8 ff             	or     eax,0xffffffff
c0019fb2:	85 c9                	test   ecx,ecx
c0019fb4:	89 c2                	mov    edx,eax
c0019fb6:	74 28                	je     c0019fe0 <Sys::write(regs*)+0x61>
c0019fb8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019fc0:	31 ff                	xor    edi,edi
c0019fc2:	83 ec 0c             	sub    esp,0xc
c0019fc5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019fc7:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019fcb:	52                   	push   edx
c0019fcc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019fcf:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0019fd2:	57                   	push   edi
c0019fd3:	56                   	push   esi
c0019fd4:	51                   	push   ecx
c0019fd5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019fd8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019fdc:	83 c4 20             	add    esp,0x20
c0019fdf:	99                   	cdq    
c0019fe0:	83 c4 10             	add    esp,0x10
c0019fe3:	5b                   	pop    ebx
c0019fe4:	5e                   	pop    esi
c0019fe5:	5f                   	pop    edi
c0019fe6:	c3                   	ret    

c0019fe7 <Sys::yield(regs*)>:
c0019fe7:	57                   	push   edi
c0019fe8:	56                   	push   esi
c0019fe9:	53                   	push   ebx
c0019fea:	e8 0b 26 00 00       	call   c001c5fa <lockScheduler()>
c0019fef:	e8 42 29 00 00       	call   c001c936 <schedule()>
c0019ff4:	e8 03 26 00 00       	call   c001c5fc <unlockScheduler()>
c0019ff9:	8b 35 90 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c890
c0019fff:	8b 3d 94 c8 02 c0    	mov    edi,DWORD PTR ds:0xc002c894
c001a005:	89 f0                	mov    eax,esi
c001a007:	89 fb                	mov    ebx,edi
c001a009:	89 f1                	mov    ecx,esi
c001a00b:	c1 e0 07             	shl    eax,0x7
c001a00e:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001a012:	25 80 30 0f 00       	and    eax,0xf3080
c001a017:	c1 eb 17             	shr    ebx,0x17
c001a01a:	31 c8                	xor    eax,ecx
c001a01c:	89 da                	mov    edx,ebx
c001a01e:	5b                   	pop    ebx
c001a01f:	5e                   	pop    esi
c001a020:	5f                   	pop    edi
c001a021:	c3                   	ret    

c001a022 <sysCallSeekDir(regs*)>:
c001a022:	31 c0                	xor    eax,eax
c001a024:	31 d2                	xor    edx,edx
c001a026:	c3                   	ret    

c001a027 <sysCallTellDir(regs*)>:
c001a027:	31 c0                	xor    eax,eax
c001a029:	31 d2                	xor    edx,edx
c001a02b:	c3                   	ret    

c001a02c <sysCallVerify(regs*)>:
c001a02c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a030:	31 d2                	xor    edx,edx
c001a032:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a035:	c3                   	ret    

c001a036 <sysCallGetArgc(regs*)>:
c001a036:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a03b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a03e:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001a044:	99                   	cdq    
c001a045:	c3                   	ret    

c001a046 <sysFormatDisk(regs*)>:
c001a046:	56                   	push   esi
c001a047:	53                   	push   ebx
c001a048:	53                   	push   ebx
c001a049:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a04d:	8b 1d 88 c3 02 c0    	mov    ebx,DWORD PTR ds:0xc002c388
c001a053:	eb 25                	jmp    c001a07a <sysFormatDisk(regs*)+0x34>
c001a055:	83 ec 0c             	sub    esp,0xc
c001a058:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a05b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a05d:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001a060:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001a063:	50                   	push   eax
c001a064:	ff 34 85 20 c8 02 c0 	push   DWORD PTR [eax*4-0x3ffd37e0]
c001a06b:	53                   	push   ebx
c001a06c:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001a06f:	83 c4 20             	add    esp,0x20
c001a072:	83 f8 08             	cmp    eax,0x8
c001a075:	75 12                	jne    c001a089 <sysFormatDisk(regs*)+0x43>
c001a077:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001a07a:	85 db                	test   ebx,ebx
c001a07c:	75 d7                	jne    c001a055 <sysFormatDisk(regs*)+0xf>
c001a07e:	59                   	pop    ecx
c001a07f:	b8 03 00 00 00       	mov    eax,0x3
c001a084:	31 d2                	xor    edx,edx
c001a086:	5b                   	pop    ebx
c001a087:	5e                   	pop    esi
c001a088:	c3                   	ret    
c001a089:	85 c0                	test   eax,eax
c001a08b:	74 1b                	je     c001a0a8 <sysFormatDisk(regs*)+0x62>
c001a08d:	83 f8 09             	cmp    eax,0x9
c001a090:	74 0b                	je     c001a09d <sysFormatDisk(regs*)+0x57>
c001a092:	59                   	pop    ecx
c001a093:	b8 02 00 00 00       	mov    eax,0x2
c001a098:	31 d2                	xor    edx,edx
c001a09a:	5b                   	pop    ebx
c001a09b:	5e                   	pop    esi
c001a09c:	c3                   	ret    
c001a09d:	59                   	pop    ecx
c001a09e:	b8 01 00 00 00       	mov    eax,0x1
c001a0a3:	31 d2                	xor    edx,edx
c001a0a5:	5b                   	pop    ebx
c001a0a6:	5e                   	pop    esi
c001a0a7:	c3                   	ret    
c001a0a8:	59                   	pop    ecx
c001a0a9:	31 c0                	xor    eax,eax
c001a0ab:	31 d2                	xor    edx,edx
c001a0ad:	5b                   	pop    ebx
c001a0ae:	5e                   	pop    esi
c001a0af:	c3                   	ret    

c001a0b0 <sysSetDiskVolumeLabel(regs*)>:
c001a0b0:	56                   	push   esi
c001a0b1:	53                   	push   ebx
c001a0b2:	53                   	push   ebx
c001a0b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a0b7:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001a0ba:	83 f8 19             	cmp    eax,0x19
c001a0bd:	77 29                	ja     c001a0e8 <sysSetDiskVolumeLabel(regs*)+0x38>
c001a0bf:	8b 0c 85 20 c8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd37e0]
c001a0c6:	85 c9                	test   ecx,ecx
c001a0c8:	74 1e                	je     c001a0e8 <sysSetDiskVolumeLabel(regs*)+0x38>
c001a0ca:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001a0cd:	85 d2                	test   edx,edx
c001a0cf:	74 17                	je     c001a0e8 <sysSetDiskVolumeLabel(regs*)+0x38>
c001a0d1:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001a0d7:	8b 33                	mov    esi,DWORD PTR [ebx]
c001a0d9:	52                   	push   edx
c001a0da:	50                   	push   eax
c001a0db:	51                   	push   ecx
c001a0dc:	53                   	push   ebx
c001a0dd:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001a0e0:	83 c4 10             	add    esp,0x10
c001a0e3:	99                   	cdq    
c001a0e4:	59                   	pop    ecx
c001a0e5:	5b                   	pop    ebx
c001a0e6:	5e                   	pop    esi
c001a0e7:	c3                   	ret    
c001a0e8:	59                   	pop    ecx
c001a0e9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001a0ee:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a0f3:	5b                   	pop    ebx
c001a0f4:	5e                   	pop    esi
c001a0f5:	c3                   	ret    

c001a0f6 <sysGetDiskVolumeLabel(regs*)>:
c001a0f6:	57                   	push   edi
c001a0f7:	56                   	push   esi
c001a0f8:	53                   	push   ebx
c001a0f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0fd:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001a100:	83 fa 19             	cmp    edx,0x19
c001a103:	77 34                	ja     c001a139 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a105:	8b 0c 95 20 c8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd37e0]
c001a10c:	85 c9                	test   ecx,ecx
c001a10e:	74 29                	je     c001a139 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a110:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001a113:	85 db                	test   ebx,ebx
c001a115:	74 22                	je     c001a139 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a117:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001a11a:	85 c0                	test   eax,eax
c001a11c:	74 1b                	je     c001a139 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a11e:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001a124:	83 ec 0c             	sub    esp,0xc
c001a127:	8b 3e                	mov    edi,DWORD PTR [esi]
c001a129:	50                   	push   eax
c001a12a:	53                   	push   ebx
c001a12b:	52                   	push   edx
c001a12c:	51                   	push   ecx
c001a12d:	56                   	push   esi
c001a12e:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001a131:	83 c4 20             	add    esp,0x20
c001a134:	99                   	cdq    
c001a135:	5b                   	pop    ebx
c001a136:	5e                   	pop    esi
c001a137:	5f                   	pop    edi
c001a138:	c3                   	ret    
c001a139:	5b                   	pop    ebx
c001a13a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001a13f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a144:	5e                   	pop    esi
c001a145:	5f                   	pop    edi
c001a146:	c3                   	ret    

c001a147 <sysShutdown(regs*)>:
c001a147:	83 ec 0c             	sub    esp,0xc
c001a14a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a14e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a151:	85 c0                	test   eax,eax
c001a153:	74 18                	je     c001a16d <sysShutdown(regs*)+0x26>
c001a155:	83 f8 01             	cmp    eax,0x1
c001a158:	74 38                	je     c001a192 <sysShutdown(regs*)+0x4b>
c001a15a:	83 f8 02             	cmp    eax,0x2
c001a15d:	74 24                	je     c001a183 <sysShutdown(regs*)+0x3c>
c001a15f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a164:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a169:	83 c4 0c             	add    esp,0xc
c001a16c:	c3                   	ret    
c001a16d:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c001a172:	8b 10                	mov    edx,DWORD PTR [eax]
c001a174:	6a 00                	push   0x0
c001a176:	6a 00                	push   0x0
c001a178:	6a 00                	push   0x0
c001a17a:	50                   	push   eax
c001a17b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a17e:	83 c4 10             	add    esp,0x10
c001a181:	eb dc                	jmp    c001a15f <sysShutdown(regs*)+0x18>
c001a183:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c001a188:	8b 10                	mov    edx,DWORD PTR [eax]
c001a18a:	6a 00                	push   0x0
c001a18c:	6a 00                	push   0x0
c001a18e:	6a 01                	push   0x1
c001a190:	eb e8                	jmp    c001a17a <sysShutdown(regs*)+0x33>
c001a192:	a1 a0 c8 02 c0       	mov    eax,ds:0xc002c8a0
c001a197:	85 c0                	test   eax,eax
c001a199:	74 02                	je     c001a19d <sysShutdown(regs*)+0x56>
c001a19b:	ff d0                	call   eax
c001a19d:	31 c0                	xor    eax,eax
c001a19f:	31 d2                	xor    edx,edx
c001a1a1:	83 c4 0c             	add    esp,0xc
c001a1a4:	c3                   	ret    

c001a1a5 <sysCallRealpath(regs*)>:
c001a1a5:	83 ec 0c             	sub    esp,0xc
c001a1a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1ac:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001a1af:	85 d2                	test   edx,edx
c001a1b1:	74 07                	je     c001a1ba <sysCallRealpath(regs*)+0x15>
c001a1b3:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a1b6:	85 c0                	test   eax,eax
c001a1b8:	75 0b                	jne    c001a1c5 <sysCallRealpath(regs*)+0x20>
c001a1ba:	b8 01 00 00 00       	mov    eax,0x1
c001a1bf:	31 d2                	xor    edx,edx
c001a1c1:	83 c4 0c             	add    esp,0xc
c001a1c4:	c3                   	ret    
c001a1c5:	51                   	push   ecx
c001a1c6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a1cc:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a1cf:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001a1d5:	51                   	push   ecx
c001a1d6:	52                   	push   edx
c001a1d7:	50                   	push   eax
c001a1d8:	e8 49 88 ff ff       	call   c0012a26 <standardiseFiles(char*, char const*, char const*)>
c001a1dd:	83 c4 10             	add    esp,0x10
c001a1e0:	31 c0                	xor    eax,eax
c001a1e2:	31 d2                	xor    edx,edx
c001a1e4:	83 c4 0c             	add    esp,0xc
c001a1e7:	c3                   	ret    

c001a1e8 <sysCallReadDir(regs*)>:
c001a1e8:	53                   	push   ebx
c001a1e9:	83 ec 18             	sub    esp,0x18
c001a1ec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a1f0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001a1f3:	83 f8 02             	cmp    eax,0x2
c001a1f6:	76 53                	jbe    c001a24b <sysCallReadDir(regs*)+0x63>
c001a1f8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a1fb:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001a201:	77 4f                	ja     c001a252 <sysCallReadDir(regs*)+0x6a>
c001a203:	83 ec 0c             	sub    esp,0xc
c001a206:	50                   	push   eax
c001a207:	e8 4f 73 ff ff       	call   c001155b <getFromFileDescriptor(int)>
c001a20c:	83 c4 10             	add    esp,0x10
c001a20f:	85 c0                	test   eax,eax
c001a211:	74 50                	je     c001a263 <sysCallReadDir(regs*)+0x7b>
c001a213:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a21b:	83 ec 0c             	sub    esp,0xc
c001a21e:	8b 10                	mov    edx,DWORD PTR [eax]
c001a220:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001a224:	51                   	push   ecx
c001a225:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a228:	6a 00                	push   0x0
c001a22a:	68 10 01 00 00       	push   0x110
c001a22f:	50                   	push   eax
c001a230:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a233:	83 c4 20             	add    esp,0x20
c001a236:	85 c0                	test   eax,eax
c001a238:	74 38                	je     c001a272 <sysCallReadDir(regs*)+0x8a>
c001a23a:	83 f8 07             	cmp    eax,0x7
c001a23d:	74 0c                	je     c001a24b <sysCallReadDir(regs*)+0x63>
c001a23f:	b8 02 00 00 00       	mov    eax,0x2
c001a244:	31 d2                	xor    edx,edx
c001a246:	83 c4 18             	add    esp,0x18
c001a249:	5b                   	pop    ebx
c001a24a:	c3                   	ret    
c001a24b:	b8 01 00 00 00       	mov    eax,0x1
c001a250:	eb f2                	jmp    c001a244 <sysCallReadDir(regs*)+0x5c>
c001a252:	83 ec 08             	sub    esp,0x8
c001a255:	52                   	push   edx
c001a256:	68 f4 9c 02 c0       	push   0xc0029cf4
c001a25b:	e8 41 84 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001a260:	83 c4 10             	add    esp,0x10
c001a263:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a268:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a26d:	83 c4 18             	add    esp,0x18
c001a270:	5b                   	pop    ebx
c001a271:	c3                   	ret    
c001a272:	31 c0                	xor    eax,eax
c001a274:	eb ce                	jmp    c001a244 <sysCallReadDir(regs*)+0x5c>

c001a276 <sysCallIsATTY(regs*)>:
c001a276:	83 ec 0c             	sub    esp,0xc
c001a279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a27d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a280:	83 f8 02             	cmp    eax,0x2
c001a283:	76 07                	jbe    c001a28c <sysCallIsATTY(regs*)+0x16>
c001a285:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001a28a:	75 26                	jne    c001a2b2 <sysCallIsATTY(regs*)+0x3c>
c001a28c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a291:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a294:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a29a:	85 c0                	test   eax,eax
c001a29c:	74 24                	je     c001a2c2 <sysCallIsATTY(regs*)+0x4c>
c001a29e:	83 ec 0c             	sub    esp,0xc
c001a2a1:	8b 10                	mov    edx,DWORD PTR [eax]
c001a2a3:	50                   	push   eax
c001a2a4:	ff 12                	call   DWORD PTR [edx]
c001a2a6:	31 d2                	xor    edx,edx
c001a2a8:	0f b6 c0             	movzx  eax,al
c001a2ab:	83 c4 10             	add    esp,0x10
c001a2ae:	83 c4 0c             	add    esp,0xc
c001a2b1:	c3                   	ret    
c001a2b2:	83 ec 0c             	sub    esp,0xc
c001a2b5:	50                   	push   eax
c001a2b6:	e8 a0 72 ff ff       	call   c001155b <getFromFileDescriptor(int)>
c001a2bb:	83 c4 10             	add    esp,0x10
c001a2be:	85 c0                	test   eax,eax
c001a2c0:	75 dc                	jne    c001a29e <sysCallIsATTY(regs*)+0x28>
c001a2c2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a2c7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a2cc:	83 c4 0c             	add    esp,0xc
c001a2cf:	c3                   	ret    

c001a2d0 <sysCallSeek(regs*)>:
c001a2d0:	53                   	push   ebx
c001a2d1:	83 ec 08             	sub    esp,0x8
c001a2d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a2d8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a2db:	83 f8 02             	cmp    eax,0x2
c001a2de:	76 4a                	jbe    c001a32a <sysCallSeek(regs*)+0x5a>
c001a2e0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a2e5:	77 32                	ja     c001a319 <sysCallSeek(regs*)+0x49>
c001a2e7:	83 ec 0c             	sub    esp,0xc
c001a2ea:	50                   	push   eax
c001a2eb:	e8 6b 72 ff ff       	call   c001155b <getFromFileDescriptor(int)>
c001a2f0:	83 c4 0c             	add    esp,0xc
c001a2f3:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001a2f6:	31 db                	xor    ebx,ebx
c001a2f8:	53                   	push   ebx
c001a2f9:	51                   	push   ecx
c001a2fa:	50                   	push   eax
c001a2fb:	e8 f2 89 ff ff       	call   c0012cf2 <File::seek(unsigned long long)>
c001a300:	83 c4 10             	add    esp,0x10
c001a303:	85 c0                	test   eax,eax
c001a305:	0f 95 c0             	setne  al
c001a308:	31 d2                	xor    edx,edx
c001a30a:	0f b6 c0             	movzx  eax,al
c001a30d:	f7 d8                	neg    eax
c001a30f:	83 d2 00             	adc    edx,0x0
c001a312:	83 c4 08             	add    esp,0x8
c001a315:	f7 da                	neg    edx
c001a317:	5b                   	pop    ebx
c001a318:	c3                   	ret    
c001a319:	83 ec 08             	sub    esp,0x8
c001a31c:	50                   	push   eax
c001a31d:	68 b0 9d 02 c0       	push   0xc0029db0
c001a322:	e8 7a 83 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001a327:	83 c4 10             	add    esp,0x10
c001a32a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a32f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a334:	83 c4 08             	add    esp,0x8
c001a337:	5b                   	pop    ebx
c001a338:	c3                   	ret    

c001a339 <sysCallTell(regs*)>:
c001a339:	53                   	push   ebx
c001a33a:	83 ec 08             	sub    esp,0x8
c001a33d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a341:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a344:	83 f8 02             	cmp    eax,0x2
c001a347:	76 5e                	jbe    c001a3a7 <sysCallTell(regs*)+0x6e>
c001a349:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a34e:	77 2d                	ja     c001a37d <sysCallTell(regs*)+0x44>
c001a350:	83 ec 0c             	sub    esp,0xc
c001a353:	50                   	push   eax
c001a354:	e8 02 72 ff ff       	call   c001155b <getFromFileDescriptor(int)>
c001a359:	5a                   	pop    edx
c001a35a:	59                   	pop    ecx
c001a35b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001a35e:	50                   	push   eax
c001a35f:	e8 e4 89 ff ff       	call   c0012d48 <File::tell(unsigned long long*)>
c001a364:	83 c4 10             	add    esp,0x10
c001a367:	85 c0                	test   eax,eax
c001a369:	0f 95 c0             	setne  al
c001a36c:	31 d2                	xor    edx,edx
c001a36e:	0f b6 c0             	movzx  eax,al
c001a371:	f7 d8                	neg    eax
c001a373:	83 d2 00             	adc    edx,0x0
c001a376:	83 c4 08             	add    esp,0x8
c001a379:	f7 da                	neg    edx
c001a37b:	5b                   	pop    ebx
c001a37c:	c3                   	ret    
c001a37d:	83 ec 08             	sub    esp,0x8
c001a380:	50                   	push   eax
c001a381:	68 ca 9d 02 c0       	push   0xc0029dca
c001a386:	e8 16 83 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001a38b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001a38e:	83 c4 10             	add    esp,0x10
c001a391:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a397:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a39e:	31 d2                	xor    edx,edx
c001a3a0:	31 c0                	xor    eax,eax
c001a3a2:	83 c4 08             	add    esp,0x8
c001a3a5:	5b                   	pop    ebx
c001a3a6:	c3                   	ret    
c001a3a7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a3ac:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a3b1:	83 c4 08             	add    esp,0x8
c001a3b4:	5b                   	pop    ebx
c001a3b5:	c3                   	ret    

c001a3b6 <sysCallSize(regs*)>:
c001a3b6:	53                   	push   ebx
c001a3b7:	83 ec 18             	sub    esp,0x18
c001a3ba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a3be:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a3c1:	83 f8 02             	cmp    eax,0x2
c001a3c4:	76 64                	jbe    c001a42a <sysCallSize(regs*)+0x74>
c001a3c6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a3cb:	77 33                	ja     c001a400 <sysCallSize(regs*)+0x4a>
c001a3cd:	83 ec 0c             	sub    esp,0xc
c001a3d0:	50                   	push   eax
c001a3d1:	e8 85 71 ff ff       	call   c001155b <getFromFileDescriptor(int)>
c001a3d6:	83 c4 0c             	add    esp,0xc
c001a3d9:	8d 54 24 13          	lea    edx,[esp+0x13]
c001a3dd:	52                   	push   edx
c001a3de:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001a3e1:	50                   	push   eax
c001a3e2:	e8 f9 8a ff ff       	call   c0012ee0 <File::stat(unsigned long long*, bool*)>
c001a3e7:	83 c4 10             	add    esp,0x10
c001a3ea:	85 c0                	test   eax,eax
c001a3ec:	0f 95 c0             	setne  al
c001a3ef:	31 d2                	xor    edx,edx
c001a3f1:	0f b6 c0             	movzx  eax,al
c001a3f4:	f7 d8                	neg    eax
c001a3f6:	83 d2 00             	adc    edx,0x0
c001a3f9:	83 c4 18             	add    esp,0x18
c001a3fc:	f7 da                	neg    edx
c001a3fe:	5b                   	pop    ebx
c001a3ff:	c3                   	ret    
c001a400:	83 ec 08             	sub    esp,0x8
c001a403:	50                   	push   eax
c001a404:	68 e4 9d 02 c0       	push   0xc0029de4
c001a409:	e8 93 82 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001a40e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001a411:	83 c4 10             	add    esp,0x10
c001a414:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a41a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a421:	31 d2                	xor    edx,edx
c001a423:	31 c0                	xor    eax,eax
c001a425:	83 c4 18             	add    esp,0x18
c001a428:	5b                   	pop    ebx
c001a429:	c3                   	ret    
c001a42a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a42f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a434:	83 c4 18             	add    esp,0x18
c001a437:	5b                   	pop    ebx
c001a438:	c3                   	ret    

c001a439 <sysCallSizeFromFilename(regs*)>:
c001a439:	57                   	push   edi
c001a43a:	56                   	push   esi
c001a43b:	53                   	push   ebx
c001a43c:	83 ec 20             	sub    esp,0x20
c001a43f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a443:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001a446:	83 fb 02             	cmp    ebx,0x2
c001a449:	0f 86 99 00 00 00    	jbe    c001a4e8 <sysCallSizeFromFilename(regs*)+0xaf>
c001a44f:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001a455:	77 65                	ja     c001a4bc <sysCallSizeFromFilename(regs*)+0x83>
c001a457:	83 ec 0c             	sub    esp,0xc
c001a45a:	68 14 01 00 00       	push   0x114
c001a45f:	e8 70 50 ff ff       	call   c000f4d4 <malloc>
c001a464:	83 c4 0c             	add    esp,0xc
c001a467:	89 c6                	mov    esi,eax
c001a469:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a46e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a471:	53                   	push   ebx
c001a472:	56                   	push   esi
c001a473:	e8 58 87 ff ff       	call   c0012bd0 <File::File(char const*, Process*)>
c001a478:	83 c4 0c             	add    esp,0xc
c001a47b:	8d 44 24 23          	lea    eax,[esp+0x23]
c001a47f:	50                   	push   eax
c001a480:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001a483:	56                   	push   esi
c001a484:	e8 57 8a ff ff       	call   c0012ee0 <File::stat(unsigned long long*, bool*)>
c001a489:	83 c4 10             	add    esp,0x10
c001a48c:	85 f6                	test   esi,esi
c001a48e:	74 14                	je     c001a4a4 <sysCallSizeFromFilename(regs*)+0x6b>
c001a490:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a494:	8b 16                	mov    edx,DWORD PTR [esi]
c001a496:	83 ec 0c             	sub    esp,0xc
c001a499:	56                   	push   esi
c001a49a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001a49d:	83 c4 10             	add    esp,0x10
c001a4a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a4a4:	85 c0                	test   eax,eax
c001a4a6:	0f 95 c0             	setne  al
c001a4a9:	31 d2                	xor    edx,edx
c001a4ab:	0f b6 c0             	movzx  eax,al
c001a4ae:	f7 d8                	neg    eax
c001a4b0:	83 d2 00             	adc    edx,0x0
c001a4b3:	83 c4 20             	add    esp,0x20
c001a4b6:	f7 da                	neg    edx
c001a4b8:	5b                   	pop    ebx
c001a4b9:	5e                   	pop    esi
c001a4ba:	5f                   	pop    edi
c001a4bb:	c3                   	ret    
c001a4bc:	83 ec 08             	sub    esp,0x8
c001a4bf:	53                   	push   ebx
c001a4c0:	68 e4 9d 02 c0       	push   0xc0029de4
c001a4c5:	e8 d7 81 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001a4ca:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001a4cd:	83 c4 10             	add    esp,0x10
c001a4d0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a4d6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a4dd:	31 d2                	xor    edx,edx
c001a4df:	83 c4 20             	add    esp,0x20
c001a4e2:	31 c0                	xor    eax,eax
c001a4e4:	5b                   	pop    ebx
c001a4e5:	5e                   	pop    esi
c001a4e6:	5f                   	pop    edi
c001a4e7:	c3                   	ret    
c001a4e8:	83 c4 20             	add    esp,0x20
c001a4eb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a4f0:	5b                   	pop    ebx
c001a4f1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a4f6:	5e                   	pop    esi
c001a4f7:	5f                   	pop    edi
c001a4f8:	c3                   	ret    

c001a4f9 <sysCallClose(regs*)>:
c001a4f9:	53                   	push   ebx
c001a4fa:	83 ec 08             	sub    esp,0x8
c001a4fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a501:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a504:	83 f8 02             	cmp    eax,0x2
c001a507:	76 50                	jbe    c001a559 <sysCallClose(regs*)+0x60>
c001a509:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001a50e:	74 58                	je     c001a568 <sysCallClose(regs*)+0x6f>
c001a510:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a515:	74 60                	je     c001a577 <sysCallClose(regs*)+0x7e>
c001a517:	77 2f                	ja     c001a548 <sysCallClose(regs*)+0x4f>
c001a519:	83 ec 0c             	sub    esp,0xc
c001a51c:	50                   	push   eax
c001a51d:	e8 39 70 ff ff       	call   c001155b <getFromFileDescriptor(int)>
c001a522:	89 c3                	mov    ebx,eax
c001a524:	89 04 24             	mov    DWORD PTR [esp],eax
c001a527:	e8 66 87 ff ff       	call   c0012c92 <File::close()>
c001a52c:	83 c4 10             	add    esp,0x10
c001a52f:	85 db                	test   ebx,ebx
c001a531:	74 0c                	je     c001a53f <sysCallClose(regs*)+0x46>
c001a533:	83 ec 0c             	sub    esp,0xc
c001a536:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a538:	53                   	push   ebx
c001a539:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a53c:	83 c4 10             	add    esp,0x10
c001a53f:	31 c0                	xor    eax,eax
c001a541:	31 d2                	xor    edx,edx
c001a543:	83 c4 08             	add    esp,0x8
c001a546:	5b                   	pop    ebx
c001a547:	c3                   	ret    
c001a548:	83 ec 08             	sub    esp,0x8
c001a54b:	50                   	push   eax
c001a54c:	68 18 9d 02 c0       	push   0xc0029d18
c001a551:	e8 4b 81 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001a556:	83 c4 10             	add    esp,0x10
c001a559:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a55e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a563:	83 c4 08             	add    esp,0x8
c001a566:	5b                   	pop    ebx
c001a567:	c3                   	ret    
c001a568:	83 ec 0c             	sub    esp,0xc
c001a56b:	68 ff 9d 02 c0       	push   0xc0029dff
c001a570:	e8 2c 81 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001a575:	eb c5                	jmp    c001a53c <sysCallClose(regs*)+0x43>
c001a577:	83 ec 0c             	sub    esp,0xc
c001a57a:	68 0d 9e 02 c0       	push   0xc0029e0d
c001a57f:	eb ef                	jmp    c001a570 <sysCallClose(regs*)+0x77>

c001a581 <sysCallOpenDir(regs*)>:
c001a581:	56                   	push   esi
c001a582:	53                   	push   ebx
c001a583:	53                   	push   ebx
c001a584:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a588:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001a58b:	85 f6                	test   esi,esi
c001a58d:	74 59                	je     c001a5e8 <sysCallOpenDir(regs*)+0x67>
c001a58f:	83 ec 0c             	sub    esp,0xc
c001a592:	68 14 01 00 00       	push   0x114
c001a597:	e8 38 4f ff ff       	call   c000f4d4 <malloc>
c001a59c:	83 c4 0c             	add    esp,0xc
c001a59f:	89 c6                	mov    esi,eax
c001a5a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5a6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a5a9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a5ac:	56                   	push   esi
c001a5ad:	e8 f4 8a ff ff       	call   c00130a6 <Directory::Directory(char const*, Process*)>
c001a5b2:	83 c4 10             	add    esp,0x10
c001a5b5:	85 f6                	test   esi,esi
c001a5b7:	74 2f                	je     c001a5e8 <sysCallOpenDir(regs*)+0x67>
c001a5b9:	83 ec 0c             	sub    esp,0xc
c001a5bc:	56                   	push   esi
c001a5bd:	e8 48 8b ff ff       	call   c001310a <Directory::open()>
c001a5c2:	83 c4 10             	add    esp,0x10
c001a5c5:	85 c0                	test   eax,eax
c001a5c7:	75 1f                	jne    c001a5e8 <sysCallOpenDir(regs*)+0x67>
c001a5c9:	83 ec 0c             	sub    esp,0xc
c001a5cc:	56                   	push   esi
c001a5cd:	e8 94 6c ff ff       	call   c0011266 <UnixFile::getFileDescriptor()>
c001a5d2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a5d5:	83 c4 10             	add    esp,0x10
c001a5d8:	89 02                	mov    DWORD PTR [edx],eax
c001a5da:	c1 f8 1f             	sar    eax,0x1f
c001a5dd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a5e0:	31 c0                	xor    eax,eax
c001a5e2:	59                   	pop    ecx
c001a5e3:	31 d2                	xor    edx,edx
c001a5e5:	5b                   	pop    ebx
c001a5e6:	5e                   	pop    esi
c001a5e7:	c3                   	ret    
c001a5e8:	59                   	pop    ecx
c001a5e9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a5ee:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a5f3:	5b                   	pop    ebx
c001a5f4:	5e                   	pop    esi
c001a5f5:	c3                   	ret    

c001a5f6 <sysCallCloseDir(regs*)>:
c001a5f6:	53                   	push   ebx
c001a5f7:	83 ec 08             	sub    esp,0x8
c001a5fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5fe:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a601:	83 f8 02             	cmp    eax,0x2
c001a604:	76 47                	jbe    c001a64d <sysCallCloseDir(regs*)+0x57>
c001a606:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a60b:	77 2f                	ja     c001a63c <sysCallCloseDir(regs*)+0x46>
c001a60d:	83 ec 0c             	sub    esp,0xc
c001a610:	50                   	push   eax
c001a611:	e8 45 6f ff ff       	call   c001155b <getFromFileDescriptor(int)>
c001a616:	89 c3                	mov    ebx,eax
c001a618:	89 04 24             	mov    DWORD PTR [esp],eax
c001a61b:	e8 46 8b ff ff       	call   c0013166 <Directory::close()>
c001a620:	83 c4 10             	add    esp,0x10
c001a623:	85 db                	test   ebx,ebx
c001a625:	74 0c                	je     c001a633 <sysCallCloseDir(regs*)+0x3d>
c001a627:	83 ec 0c             	sub    esp,0xc
c001a62a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a62c:	53                   	push   ebx
c001a62d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a630:	83 c4 10             	add    esp,0x10
c001a633:	31 c0                	xor    eax,eax
c001a635:	31 d2                	xor    edx,edx
c001a637:	83 c4 08             	add    esp,0x8
c001a63a:	5b                   	pop    ebx
c001a63b:	c3                   	ret    
c001a63c:	83 ec 08             	sub    esp,0x8
c001a63f:	50                   	push   eax
c001a640:	68 40 9d 02 c0       	push   0xc0029d40
c001a645:	e8 57 80 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001a64a:	83 c4 10             	add    esp,0x10
c001a64d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a652:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a657:	83 c4 08             	add    esp,0x8
c001a65a:	5b                   	pop    ebx
c001a65b:	c3                   	ret    

c001a65c <sysCallMakeDir(regs*)>:
c001a65c:	56                   	push   esi
c001a65d:	53                   	push   ebx
c001a65e:	83 ec 10             	sub    esp,0x10
c001a661:	68 14 01 00 00       	push   0x114
c001a666:	e8 69 4e ff ff       	call   c000f4d4 <malloc>
c001a66b:	83 c4 0c             	add    esp,0xc
c001a66e:	89 c3                	mov    ebx,eax
c001a670:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a675:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a678:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a67c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001a67f:	53                   	push   ebx
c001a680:	e8 21 8a ff ff       	call   c00130a6 <Directory::Directory(char const*, Process*)>
c001a685:	83 c4 10             	add    esp,0x10
c001a688:	85 db                	test   ebx,ebx
c001a68a:	74 32                	je     c001a6be <sysCallMakeDir(regs*)+0x62>
c001a68c:	83 ec 0c             	sub    esp,0xc
c001a68f:	53                   	push   ebx
c001a690:	e8 55 8c ff ff       	call   c00132ea <Directory::create()>
c001a695:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a698:	89 c6                	mov    esi,eax
c001a69a:	e8 c7 8a ff ff       	call   c0013166 <Directory::close()>
c001a69f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a6a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a6a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a6a7:	83 c4 10             	add    esp,0x10
c001a6aa:	31 c0                	xor    eax,eax
c001a6ac:	59                   	pop    ecx
c001a6ad:	85 f6                	test   esi,esi
c001a6af:	5b                   	pop    ebx
c001a6b0:	0f 95 c0             	setne  al
c001a6b3:	5e                   	pop    esi
c001a6b4:	31 d2                	xor    edx,edx
c001a6b6:	f7 d8                	neg    eax
c001a6b8:	83 d2 00             	adc    edx,0x0
c001a6bb:	f7 da                	neg    edx
c001a6bd:	c3                   	ret    
c001a6be:	59                   	pop    ecx
c001a6bf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a6c4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a6c9:	5b                   	pop    ebx
c001a6ca:	5e                   	pop    esi
c001a6cb:	c3                   	ret    

c001a6cc <sysCallWait(regs*)>:
c001a6cc:	83 ec 10             	sub    esp,0x10
c001a6cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a6d3:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001a6d6:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001a6d9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a6dc:	e8 d0 23 00 00       	call   c001cab1 <waitTask(int, int*, int)>
c001a6e1:	83 c4 1c             	add    esp,0x1c
c001a6e4:	99                   	cdq    
c001a6e5:	c3                   	ret    

c001a6e6 <sysCallNotImpl(regs*)>:
c001a6e6:	83 ec 18             	sub    esp,0x18
c001a6e9:	68 1b 9e 02 c0       	push   0xc0029e1b
c001a6ee:	e8 89 ee ff ff       	call   c001957c <Krnl::panic(char const*)>
c001a6f3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a6f8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a6fd:	83 c4 1c             	add    esp,0x1c
c001a700:	c3                   	ret    

c001a701 <sysPanic(regs*)>:
c001a701:	83 ec 18             	sub    esp,0x18
c001a704:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a708:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001a70b:	e8 6c ee ff ff       	call   c001957c <Krnl::panic(char const*)>
c001a710:	c7 04 24 35 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e35
c001a717:	e8 60 ee ff ff       	call   c001957c <Krnl::panic(char const*)>
c001a71c:	b8 01 00 00 00       	mov    eax,0x1
c001a721:	31 d2                	xor    edx,edx
c001a723:	83 c4 1c             	add    esp,0x1c
c001a726:	c3                   	ret    

c001a727 <sysCallRmdir(regs*)>:
c001a727:	56                   	push   esi
c001a728:	53                   	push   ebx
c001a729:	83 ec 20             	sub    esp,0x20
c001a72c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a730:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001a733:	68 14 01 00 00       	push   0x114
c001a738:	e8 97 4d ff ff       	call   c000f4d4 <malloc>
c001a73d:	83 c4 0c             	add    esp,0xc
c001a740:	89 c3                	mov    ebx,eax
c001a742:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a747:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a74a:	56                   	push   esi
c001a74b:	53                   	push   ebx
c001a74c:	e8 7f 84 ff ff       	call   c0012bd0 <File::File(char const*, Process*)>
c001a751:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a754:	e8 53 86 ff ff       	call   c0012dac <File::unlink()>
c001a759:	83 c4 10             	add    esp,0x10
c001a75c:	85 db                	test   ebx,ebx
c001a75e:	74 14                	je     c001a774 <sysCallRmdir(regs*)+0x4d>
c001a760:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a764:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a766:	83 ec 0c             	sub    esp,0xc
c001a769:	53                   	push   ebx
c001a76a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001a76d:	83 c4 10             	add    esp,0x10
c001a770:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a774:	85 c0                	test   eax,eax
c001a776:	0f 95 c0             	setne  al
c001a779:	31 d2                	xor    edx,edx
c001a77b:	0f b6 c0             	movzx  eax,al
c001a77e:	f7 d8                	neg    eax
c001a780:	83 d2 00             	adc    edx,0x0
c001a783:	83 c4 14             	add    esp,0x14
c001a786:	f7 da                	neg    edx
c001a788:	5b                   	pop    ebx
c001a789:	5e                   	pop    esi
c001a78a:	c3                   	ret    

c001a78b <sysCallUnlink(regs*)>:
c001a78b:	56                   	push   esi
c001a78c:	53                   	push   ebx
c001a78d:	83 ec 20             	sub    esp,0x20
c001a790:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a794:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001a797:	68 14 01 00 00       	push   0x114
c001a79c:	e8 33 4d ff ff       	call   c000f4d4 <malloc>
c001a7a1:	83 c4 0c             	add    esp,0xc
c001a7a4:	89 c3                	mov    ebx,eax
c001a7a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a7ab:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a7ae:	56                   	push   esi
c001a7af:	53                   	push   ebx
c001a7b0:	e8 1b 84 ff ff       	call   c0012bd0 <File::File(char const*, Process*)>
c001a7b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a7b8:	e8 ef 85 ff ff       	call   c0012dac <File::unlink()>
c001a7bd:	83 c4 10             	add    esp,0x10
c001a7c0:	85 db                	test   ebx,ebx
c001a7c2:	74 14                	je     c001a7d8 <sysCallUnlink(regs*)+0x4d>
c001a7c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a7c8:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a7ca:	83 ec 0c             	sub    esp,0xc
c001a7cd:	53                   	push   ebx
c001a7ce:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001a7d1:	83 c4 10             	add    esp,0x10
c001a7d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a7d8:	85 c0                	test   eax,eax
c001a7da:	0f 95 c0             	setne  al
c001a7dd:	31 d2                	xor    edx,edx
c001a7df:	0f b6 c0             	movzx  eax,al
c001a7e2:	f7 d8                	neg    eax
c001a7e4:	83 d2 00             	adc    edx,0x0
c001a7e7:	83 c4 14             	add    esp,0x14
c001a7ea:	f7 da                	neg    edx
c001a7ec:	5b                   	pop    ebx
c001a7ed:	5e                   	pop    esi
c001a7ee:	c3                   	ret    

c001a7ef <sysCallGetArgv(regs*)>:
c001a7ef:	83 ec 0c             	sub    esp,0xc
c001a7f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a7f6:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001a7f9:	85 c0                	test   eax,eax
c001a7fb:	78 2b                	js     c001a828 <sysCallGetArgv(regs*)+0x39>
c001a7fd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a803:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a806:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001a80c:	7d 1a                	jge    c001a828 <sysCallGetArgv(regs*)+0x39>
c001a80e:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001a815:	85 c0                	test   eax,eax
c001a817:	74 17                	je     c001a830 <sysCallGetArgv(regs*)+0x41>
c001a819:	83 ec 08             	sub    esp,0x8
c001a81c:	50                   	push   eax
c001a81d:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001a820:	e8 05 5f fe ff       	call   c000072a <strcpy>
c001a825:	83 c4 10             	add    esp,0x10
c001a828:	31 c0                	xor    eax,eax
c001a82a:	31 d2                	xor    edx,edx
c001a82c:	83 c4 0c             	add    esp,0xc
c001a82f:	c3                   	ret    
c001a830:	b8 01 00 00 00       	mov    eax,0x1
c001a835:	31 d2                	xor    edx,edx
c001a837:	83 c4 0c             	add    esp,0xc
c001a83a:	c3                   	ret    

c001a83b <sysCallTTYName(regs*)>:
c001a83b:	56                   	push   esi
c001a83c:	53                   	push   ebx
c001a83d:	53                   	push   ebx
c001a83e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a842:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a845:	85 c0                	test   eax,eax
c001a847:	74 5f                	je     c001a8a8 <sysCallTTYName(regs*)+0x6d>
c001a849:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a84c:	83 f8 02             	cmp    eax,0x2
c001a84f:	77 3e                	ja     c001a88f <sysCallTTYName(regs*)+0x54>
c001a851:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a856:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a859:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001a85f:	85 db                	test   ebx,ebx
c001a861:	74 45                	je     c001a8a8 <sysCallTTYName(regs*)+0x6d>
c001a863:	83 ec 0c             	sub    esp,0xc
c001a866:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a868:	53                   	push   ebx
c001a869:	ff 10                	call   DWORD PTR [eax]
c001a86b:	83 c4 10             	add    esp,0x10
c001a86e:	84 c0                	test   al,al
c001a870:	74 41                	je     c001a8b3 <sysCallTTYName(regs*)+0x78>
c001a872:	83 ec 08             	sub    esp,0x8
c001a875:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001a87b:	53                   	push   ebx
c001a87c:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001a87f:	e8 a6 5e fe ff       	call   c000072a <strcpy>
c001a884:	83 c4 10             	add    esp,0x10
c001a887:	31 c0                	xor    eax,eax
c001a889:	59                   	pop    ecx
c001a88a:	31 d2                	xor    edx,edx
c001a88c:	5b                   	pop    ebx
c001a88d:	5e                   	pop    esi
c001a88e:	c3                   	ret    
c001a88f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001a894:	74 bb                	je     c001a851 <sysCallTTYName(regs*)+0x16>
c001a896:	83 ec 0c             	sub    esp,0xc
c001a899:	50                   	push   eax
c001a89a:	e8 bc 6c ff ff       	call   c001155b <getFromFileDescriptor(int)>
c001a89f:	83 c4 10             	add    esp,0x10
c001a8a2:	89 c3                	mov    ebx,eax
c001a8a4:	85 db                	test   ebx,ebx
c001a8a6:	75 bb                	jne    c001a863 <sysCallTTYName(regs*)+0x28>
c001a8a8:	59                   	pop    ecx
c001a8a9:	b8 01 00 00 00       	mov    eax,0x1
c001a8ae:	31 d2                	xor    edx,edx
c001a8b0:	5b                   	pop    ebx
c001a8b1:	5e                   	pop    esi
c001a8b2:	c3                   	ret    
c001a8b3:	59                   	pop    ecx
c001a8b4:	b8 02 00 00 00       	mov    eax,0x2
c001a8b9:	31 d2                	xor    edx,edx
c001a8bb:	5b                   	pop    ebx
c001a8bc:	5e                   	pop    esi
c001a8bd:	c3                   	ret    

c001a8be <sysCallGetEnv(regs*)>:
c001a8be:	83 ec 0c             	sub    esp,0xc
c001a8c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8c5:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c001a8c8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001a8cb:	85 c9                	test   ecx,ecx
c001a8cd:	75 22                	jne    c001a8f1 <sysCallGetEnv(regs*)+0x33>
c001a8cf:	85 d2                	test   edx,edx
c001a8d1:	74 08                	je     c001a8db <sysCallGetEnv(regs*)+0x1d>
c001a8d3:	31 c0                	xor    eax,eax
c001a8d5:	31 d2                	xor    edx,edx
c001a8d7:	83 c4 0c             	add    esp,0xc
c001a8da:	c3                   	ret    
c001a8db:	83 ec 0c             	sub    esp,0xc
c001a8de:	68 64 9d 02 c0       	push   0xc0029d64
c001a8e3:	e8 c0 5d fe ff       	call   c00006a8 <strlen>
c001a8e8:	83 c4 10             	add    esp,0x10
c001a8eb:	31 d2                	xor    edx,edx
c001a8ed:	83 c4 0c             	add    esp,0xc
c001a8f0:	c3                   	ret    
c001a8f1:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a8f4:	85 d2                	test   edx,edx
c001a8f6:	74 05                	je     c001a8fd <sysCallGetEnv(regs*)+0x3f>
c001a8f8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a8fb:	eb d6                	jmp    c001a8d3 <sysCallGetEnv(regs*)+0x15>
c001a8fd:	83 ec 08             	sub    esp,0x8
c001a900:	68 64 9d 02 c0       	push   0xc0029d64
c001a905:	50                   	push   eax
c001a906:	e8 1f 5e fe ff       	call   c000072a <strcpy>
c001a90b:	83 c4 10             	add    esp,0x10
c001a90e:	eb c3                	jmp    c001a8d3 <sysCallGetEnv(regs*)+0x15>

c001a910 <sysCallUSleep(regs*)>:
c001a910:	83 ec 14             	sub    esp,0x14
c001a913:	b8 e8 03 00 00       	mov    eax,0x3e8
c001a918:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a91c:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001a923:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001a926:	01 ca                	add    edx,ecx
c001a928:	52                   	push   edx
c001a929:	50                   	push   eax
c001a92a:	e8 1b 22 00 00       	call   c001cb4a <nanoSleep(unsigned long long)>
c001a92f:	31 c0                	xor    eax,eax
c001a931:	31 d2                	xor    edx,edx
c001a933:	83 c4 1c             	add    esp,0x1c
c001a936:	c3                   	ret    

c001a937 <sysCallSpawn(regs*)>:
c001a937:	56                   	push   esi
c001a938:	53                   	push   ebx
c001a939:	53                   	push   ebx
c001a93a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a93e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001a941:	85 f6                	test   esi,esi
c001a943:	75 08                	jne    c001a94d <sysCallSpawn(regs*)+0x16>
c001a945:	59                   	pop    ecx
c001a946:	31 c0                	xor    eax,eax
c001a948:	31 d2                	xor    edx,edx
c001a94a:	5b                   	pop    ebx
c001a94b:	5e                   	pop    esi
c001a94c:	c3                   	ret    
c001a94d:	83 ec 0c             	sub    esp,0xc
c001a950:	68 3f 07 00 00       	push   0x73f
c001a955:	e8 7a 4b ff ff       	call   c000f4d4 <malloc>
c001a95a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001a95d:	89 c6                	mov    esi,eax
c001a95f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a964:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a967:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a96a:	56                   	push   esi
c001a96b:	e8 da 18 00 00       	call   c001c24a <Process::Process(char const*, Process*, char**)>
c001a970:	83 c4 20             	add    esp,0x20
c001a973:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001a97a:	75 c9                	jne    c001a945 <sysCallSpawn(regs*)+0xe>
c001a97c:	83 ec 0c             	sub    esp,0xc
c001a97f:	56                   	push   esi
c001a980:	e8 8b 1e 00 00       	call   c001c810 <Process::createUserThread()>
c001a985:	8b 06                	mov    eax,DWORD PTR [esi]
c001a987:	83 c4 10             	add    esp,0x10
c001a98a:	99                   	cdq    
c001a98b:	59                   	pop    ecx
c001a98c:	5b                   	pop    ebx
c001a98d:	5e                   	pop    esi
c001a98e:	c3                   	ret    

c001a98f <sysAppSettings(regs*)>:
c001a98f:	53                   	push   ebx
c001a990:	83 ec 08             	sub    esp,0x8
c001a993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a997:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001a99a:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001a9a0:	25 e0 1f 00 00       	and    eax,0x1fe0
c001a9a5:	66 3d c0 09          	cmp    ax,0x9c0
c001a9a9:	75 2f                	jne    c001a9da <sysAppSettings(regs*)+0x4b>
c001a9ab:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001a9b1:	83 e0 1f             	and    eax,0x1f
c001a9b4:	3c 01                	cmp    al,0x1
c001a9b6:	74 2e                	je     c001a9e6 <sysAppSettings(regs*)+0x57>
c001a9b8:	3c 07                	cmp    al,0x7
c001a9ba:	0f 84 bd 00 00 00    	je     c001aa7d <sysAppSettings(regs*)+0xee>
c001a9c0:	84 c0                	test   al,al
c001a9c2:	0f 84 dc 00 00 00    	je     c001aaa4 <sysAppSettings(regs*)+0x115>
c001a9c8:	3c 08                	cmp    al,0x8
c001a9ca:	74 6d                	je     c001aa39 <sysAppSettings(regs*)+0xaa>
c001a9cc:	0f b6 c0             	movzx  eax,al
c001a9cf:	83 c4 08             	add    esp,0x8
c001a9d2:	05 e8 03 00 00       	add    eax,0x3e8
c001a9d7:	5b                   	pop    ebx
c001a9d8:	99                   	cdq    
c001a9d9:	c3                   	ret    
c001a9da:	b8 01 00 00 00       	mov    eax,0x1
c001a9df:	31 d2                	xor    edx,edx
c001a9e1:	83 c4 08             	add    esp,0x8
c001a9e4:	5b                   	pop    ebx
c001a9e5:	c3                   	ret    
c001a9e6:	51                   	push   ecx
c001a9e7:	68 00 01 00 00       	push   0x100
c001a9ec:	6a 00                	push   0x0
c001a9ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a9f3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a9f6:	83 c0 0c             	add    eax,0xc
c001a9f9:	50                   	push   eax
c001a9fa:	e8 8c 5c fe ff       	call   c000068b <memset>
c001a9ff:	83 c4 0c             	add    esp,0xc
c001aa02:	68 ff 00 00 00       	push   0xff
c001aa07:	53                   	push   ebx
c001aa08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa0d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aa10:	83 c0 0c             	add    eax,0xc
c001aa13:	50                   	push   eax
c001aa14:	e8 3c 5c fe ff       	call   c0000655 <memcpy>
c001aa19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa1e:	5b                   	pop    ebx
c001aa1f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aa22:	5a                   	pop    edx
c001aa23:	8d 50 0c             	lea    edx,[eax+0xc]
c001aa26:	52                   	push   edx
c001aa27:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa2d:	e8 a4 5c ff ff       	call   c00106d6 <VgaText::setTitle(char*)>
c001aa32:	83 c4 10             	add    esp,0x10
c001aa35:	31 c0                	xor    eax,eax
c001aa37:	eb a6                	jmp    c001a9df <sysAppSettings(regs*)+0x50>
c001aa39:	83 ec 08             	sub    esp,0x8
c001aa3c:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001aa42:	83 e0 0f             	and    eax,0xf
c001aa45:	50                   	push   eax
c001aa46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa4b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aa4e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa54:	e8 6d 5c ff ff       	call   c00106c6 <VgaText::setTitleColour(VgaColour)>
c001aa59:	58                   	pop    eax
c001aa5a:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001aa60:	5a                   	pop    edx
c001aa61:	c1 e8 04             	shr    eax,0x4
c001aa64:	83 e0 0f             	and    eax,0xf
c001aa67:	50                   	push   eax
c001aa68:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa6d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aa70:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa76:	e8 3b 5c ff ff       	call   c00106b6 <VgaText::setTitleTextColour(VgaColour)>
c001aa7b:	eb b5                	jmp    c001aa32 <sysAppSettings(regs*)+0xa3>
c001aa7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa82:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aa85:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001aa8b:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001aa91:	c0 e8 06             	shr    al,0x6
c001aa94:	83 e0 01             	and    eax,0x1
c001aa97:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001aa9d:	31 c0                	xor    eax,eax
c001aa9f:	e9 3b ff ff ff       	jmp    c001a9df <sysAppSettings(regs*)+0x50>
c001aaa4:	b8 02 00 00 00       	mov    eax,0x2
c001aaa9:	e9 31 ff ff ff       	jmp    c001a9df <sysAppSettings(regs*)+0x50>

c001aaae <sysSetFatAttrib(regs*)>:
c001aaae:	57                   	push   edi
c001aaaf:	56                   	push   esi
c001aab0:	53                   	push   ebx
c001aab1:	83 ec 1c             	sub    esp,0x1c
c001aab4:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001aab8:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001aabb:	68 14 01 00 00       	push   0x114
c001aac0:	e8 0f 4a ff ff       	call   c000f4d4 <malloc>
c001aac5:	83 c4 0c             	add    esp,0xc
c001aac8:	89 c3                	mov    ebx,eax
c001aaca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aacf:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aad2:	57                   	push   edi
c001aad3:	53                   	push   ebx
c001aad4:	e8 f7 80 ff ff       	call   c0012bd0 <File::File(char const*, Process*)>
c001aad9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001aadc:	83 c4 0c             	add    esp,0xc
c001aadf:	0f b6 d4             	movzx  edx,ah
c001aae2:	0f b6 c0             	movzx  eax,al
c001aae5:	52                   	push   edx
c001aae6:	50                   	push   eax
c001aae7:	53                   	push   ebx
c001aae8:	e8 59 83 ff ff       	call   c0012e46 <File::chfatattr(unsigned char, unsigned char)>
c001aaed:	83 c4 10             	add    esp,0x10
c001aaf0:	85 db                	test   ebx,ebx
c001aaf2:	74 14                	je     c001ab08 <sysSetFatAttrib(regs*)+0x5a>
c001aaf4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aaf8:	8b 13                	mov    edx,DWORD PTR [ebx]
c001aafa:	83 ec 0c             	sub    esp,0xc
c001aafd:	53                   	push   ebx
c001aafe:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ab01:	83 c4 10             	add    esp,0x10
c001ab04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ab08:	85 c0                	test   eax,eax
c001ab0a:	0f 95 c0             	setne  al
c001ab0d:	31 d2                	xor    edx,edx
c001ab0f:	0f b6 c0             	movzx  eax,al
c001ab12:	f7 d8                	neg    eax
c001ab14:	83 d2 00             	adc    edx,0x0
c001ab17:	83 c4 10             	add    esp,0x10
c001ab1a:	f7 da                	neg    edx
c001ab1c:	5b                   	pop    ebx
c001ab1d:	5e                   	pop    esi
c001ab1e:	5f                   	pop    edi
c001ab1f:	c3                   	ret    

c001ab20 <sysPipe(regs*)>:
c001ab20:	57                   	push   edi
c001ab21:	56                   	push   esi
c001ab22:	53                   	push   ebx
c001ab23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab27:	83 ec 0c             	sub    esp,0xc
c001ab2a:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001ab2d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001ab30:	6a 20                	push   0x20
c001ab32:	e8 9d 49 ff ff       	call   c000f4d4 <malloc>
c001ab37:	89 c3                	mov    ebx,eax
c001ab39:	58                   	pop    eax
c001ab3a:	5a                   	pop    edx
c001ab3b:	68 00 50 00 00       	push   0x5000
c001ab40:	53                   	push   ebx
c001ab41:	e8 ce 54 ff ff       	call   c0010014 <Pipe::Pipe(int)>
c001ab46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab49:	e8 18 67 ff ff       	call   c0011266 <UnixFile::getFileDescriptor()>
c001ab4e:	89 07                	mov    DWORD PTR [edi],eax
c001ab50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab53:	e8 0e 67 ff ff       	call   c0011266 <UnixFile::getFileDescriptor()>
c001ab58:	83 c4 10             	add    esp,0x10
c001ab5b:	89 06                	mov    DWORD PTR [esi],eax
c001ab5d:	31 d2                	xor    edx,edx
c001ab5f:	5b                   	pop    ebx
c001ab60:	31 c0                	xor    eax,eax
c001ab62:	5e                   	pop    esi
c001ab63:	5f                   	pop    edi
c001ab64:	c3                   	ret    

c001ab65 <sysGetUnixTime(regs*)>:
c001ab65:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c001ab6a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ab70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab74:	e9 33 8a ff ff       	jmp    c00135ac <Clock::timeInSecondsLocal()>

c001ab79 <string_ends_with(char const*, char const*)>:
c001ab79:	57                   	push   edi
c001ab7a:	56                   	push   esi
c001ab7b:	53                   	push   ebx
c001ab7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab80:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ab84:	83 ec 0c             	sub    esp,0xc
c001ab87:	53                   	push   ebx
c001ab88:	e8 1b 5b fe ff       	call   c00006a8 <strlen>
c001ab8d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ab90:	89 c6                	mov    esi,eax
c001ab92:	e8 11 5b fe ff       	call   c00006a8 <strlen>
c001ab97:	83 c4 10             	add    esp,0x10
c001ab9a:	39 c6                	cmp    esi,eax
c001ab9c:	7d 06                	jge    c001aba4 <string_ends_with(char const*, char const*)+0x2b>
c001ab9e:	5b                   	pop    ebx
c001ab9f:	31 c0                	xor    eax,eax
c001aba1:	5e                   	pop    esi
c001aba2:	5f                   	pop    edi
c001aba3:	c3                   	ret    
c001aba4:	83 ec 08             	sub    esp,0x8
c001aba7:	29 c6                	sub    esi,eax
c001aba9:	57                   	push   edi
c001abaa:	01 f3                	add    ebx,esi
c001abac:	53                   	push   ebx
c001abad:	e8 c9 5b fe ff       	call   c000077b <strcmp>
c001abb2:	83 c4 10             	add    esp,0x10
c001abb5:	85 c0                	test   eax,eax
c001abb7:	5b                   	pop    ebx
c001abb8:	0f 94 c0             	sete   al
c001abbb:	5e                   	pop    esi
c001abbc:	0f b6 c0             	movzx  eax,al
c001abbf:	5f                   	pop    edi
c001abc0:	c3                   	ret    

c001abc1 <sysCallOpen(regs*)>:
c001abc1:	56                   	push   esi
c001abc2:	53                   	push   ebx
c001abc3:	81 ec 04 01 00 00    	sub    esp,0x104
c001abc9:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001abd0:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001abd3:	85 c9                	test   ecx,ecx
c001abd5:	0f 84 b3 00 00 00    	je     c001ac8e <sysCallOpen(regs*)+0xcd>
c001abdb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001abde:	85 c0                	test   eax,eax
c001abe0:	0f 84 a8 00 00 00    	je     c001ac8e <sysCallOpen(regs*)+0xcd>
c001abe6:	52                   	push   edx
c001abe7:	68 44 9e 02 c0       	push   0xc0029e44
c001abec:	50                   	push   eax
c001abed:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001abf1:	56                   	push   esi
c001abf2:	e8 2f 7e ff ff       	call   c0012a26 <standardiseFiles(char*, char const*, char const*)>
c001abf7:	89 34 24             	mov    DWORD PTR [esp],esi
c001abfa:	e8 a9 5a fe ff       	call   c00006a8 <strlen>
c001abff:	83 c4 10             	add    esp,0x10
c001ac02:	48                   	dec    eax
c001ac03:	74 1d                	je     c001ac22 <sysCallOpen(regs*)+0x61>
c001ac05:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001ac08:	eb 0f                	jmp    c001ac19 <sysCallOpen(regs*)+0x58>
c001ac0a:	80 fa 3a             	cmp    dl,0x3a
c001ac0d:	74 0f                	je     c001ac1e <sysCallOpen(regs*)+0x5d>
c001ac0f:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001ac13:	48                   	dec    eax
c001ac14:	74 0c                	je     c001ac22 <sysCallOpen(regs*)+0x61>
c001ac16:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001ac19:	80 fa 2e             	cmp    dl,0x2e
c001ac1c:	75 ec                	jne    c001ac0a <sysCallOpen(regs*)+0x49>
c001ac1e:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001ac22:	83 ec 08             	sub    esp,0x8
c001ac25:	68 48 9e 02 c0       	push   0xc0029e48
c001ac2a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ac2d:	e8 47 ff ff ff       	call   c001ab79 <string_ends_with(char const*, char const*)>
c001ac32:	83 c4 10             	add    esp,0x10
c001ac35:	85 c0                	test   eax,eax
c001ac37:	75 17                	jne    c001ac50 <sysCallOpen(regs*)+0x8f>
c001ac39:	83 ec 08             	sub    esp,0x8
c001ac3c:	68 69 9e 02 c0       	push   0xc0029e69
c001ac41:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ac44:	e8 30 ff ff ff       	call   c001ab79 <string_ends_with(char const*, char const*)>
c001ac49:	83 c4 10             	add    esp,0x10
c001ac4c:	85 c0                	test   eax,eax
c001ac4e:	74 51                	je     c001aca1 <sysCallOpen(regs*)+0xe0>
c001ac50:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ac53:	83 ec 08             	sub    esp,0x8
c001ac56:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001ac5c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ac63:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ac66:	ff 30                	push   DWORD PTR [eax]
c001ac68:	68 4d 9e 02 c0       	push   0xc0029e4d
c001ac6d:	e8 2f 7a ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001ac72:	c7 04 24 5c 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e5c
c001ac79:	e8 23 7a ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001ac7e:	83 c4 10             	add    esp,0x10
c001ac81:	81 c4 04 01 00 00    	add    esp,0x104
c001ac87:	31 c0                	xor    eax,eax
c001ac89:	31 d2                	xor    edx,edx
c001ac8b:	5b                   	pop    ebx
c001ac8c:	5e                   	pop    esi
c001ac8d:	c3                   	ret    
c001ac8e:	81 c4 04 01 00 00    	add    esp,0x104
c001ac94:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ac99:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ac9e:	5b                   	pop    ebx
c001ac9f:	5e                   	pop    esi
c001aca0:	c3                   	ret    
c001aca1:	83 ec 08             	sub    esp,0x8
c001aca4:	68 49 9e 02 c0       	push   0xc0029e49
c001aca9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001acac:	e8 ca 5a fe ff       	call   c000077b <strcmp>
c001acb1:	83 c4 10             	add    esp,0x10
c001acb4:	85 c0                	test   eax,eax
c001acb6:	74 98                	je     c001ac50 <sysCallOpen(regs*)+0x8f>
c001acb8:	83 ec 08             	sub    esp,0x8
c001acbb:	68 48 9e 02 c0       	push   0xc0029e48
c001acc0:	56                   	push   esi
c001acc1:	e8 b3 fe ff ff       	call   c001ab79 <string_ends_with(char const*, char const*)>
c001acc6:	83 c4 10             	add    esp,0x10
c001acc9:	85 c0                	test   eax,eax
c001accb:	75 83                	jne    c001ac50 <sysCallOpen(regs*)+0x8f>
c001accd:	83 ec 08             	sub    esp,0x8
c001acd0:	68 6e 9e 02 c0       	push   0xc0029e6e
c001acd5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001acd8:	e8 9c fe ff ff       	call   c001ab79 <string_ends_with(char const*, char const*)>
c001acdd:	83 c4 10             	add    esp,0x10
c001ace0:	85 c0                	test   eax,eax
c001ace2:	0f 85 d9 00 00 00    	jne    c001adc1 <sysCallOpen(regs*)+0x200>
c001ace8:	83 ec 08             	sub    esp,0x8
c001aceb:	68 73 9e 02 c0       	push   0xc0029e73
c001acf0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001acf3:	e8 81 fe ff ff       	call   c001ab79 <string_ends_with(char const*, char const*)>
c001acf8:	83 c4 10             	add    esp,0x10
c001acfb:	85 c0                	test   eax,eax
c001acfd:	0f 85 be 00 00 00    	jne    c001adc1 <sysCallOpen(regs*)+0x200>
c001ad03:	83 ec 08             	sub    esp,0x8
c001ad06:	68 6f 9e 02 c0       	push   0xc0029e6f
c001ad0b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ad0e:	e8 68 5a fe ff       	call   c000077b <strcmp>
c001ad13:	83 c4 10             	add    esp,0x10
c001ad16:	85 c0                	test   eax,eax
c001ad18:	0f 84 a3 00 00 00    	je     c001adc1 <sysCallOpen(regs*)+0x200>
c001ad1e:	83 ec 08             	sub    esp,0x8
c001ad21:	68 6e 9e 02 c0       	push   0xc0029e6e
c001ad26:	56                   	push   esi
c001ad27:	e8 4d fe ff ff       	call   c001ab79 <string_ends_with(char const*, char const*)>
c001ad2c:	83 c4 10             	add    esp,0x10
c001ad2f:	85 c0                	test   eax,eax
c001ad31:	0f 85 8a 00 00 00    	jne    c001adc1 <sysCallOpen(regs*)+0x200>
c001ad37:	83 ec 0c             	sub    esp,0xc
c001ad3a:	68 14 01 00 00       	push   0x114
c001ad3f:	e8 90 47 ff ff       	call   c000f4d4 <malloc>
c001ad44:	83 c4 0c             	add    esp,0xc
c001ad47:	89 c6                	mov    esi,eax
c001ad49:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad4e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ad51:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ad54:	56                   	push   esi
c001ad55:	e8 76 7e ff ff       	call   c0012bd0 <File::File(char const*, Process*)>
c001ad5a:	83 c4 10             	add    esp,0x10
c001ad5d:	85 f6                	test   esi,esi
c001ad5f:	0f 84 29 ff ff ff    	je     c001ac8e <sysCallOpen(regs*)+0xcd>
c001ad65:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001ad68:	0f b6 c2             	movzx  eax,dl
c001ad6b:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001ad6e:	89 d0                	mov    eax,edx
c001ad70:	83 e0 01             	and    eax,0x1
c001ad73:	f6 c2 02             	test   dl,0x2
c001ad76:	74 03                	je     c001ad7b <sysCallOpen(regs*)+0x1ba>
c001ad78:	83 c8 02             	or     eax,0x2
c001ad7b:	f6 c2 04             	test   dl,0x4
c001ad7e:	74 03                	je     c001ad83 <sysCallOpen(regs*)+0x1c2>
c001ad80:	83 c8 04             	or     eax,0x4
c001ad83:	f6 c2 08             	test   dl,0x8
c001ad86:	74 03                	je     c001ad8b <sysCallOpen(regs*)+0x1ca>
c001ad88:	83 c8 0a             	or     eax,0xa
c001ad8b:	83 e2 10             	and    edx,0x10
c001ad8e:	74 03                	je     c001ad93 <sysCallOpen(regs*)+0x1d2>
c001ad90:	83 c8 12             	or     eax,0x12
c001ad93:	83 ec 08             	sub    esp,0x8
c001ad96:	50                   	push   eax
c001ad97:	56                   	push   esi
c001ad98:	e8 97 7e ff ff       	call   c0012c34 <File::open(FileOpenMode)>
c001ad9d:	83 c4 10             	add    esp,0x10
c001ada0:	85 c0                	test   eax,eax
c001ada2:	0f 85 e6 fe ff ff    	jne    c001ac8e <sysCallOpen(regs*)+0xcd>
c001ada8:	83 ec 0c             	sub    esp,0xc
c001adab:	56                   	push   esi
c001adac:	e8 b5 64 ff ff       	call   c0011266 <UnixFile::getFileDescriptor()>
c001adb1:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001adb4:	89 02                	mov    DWORD PTR [edx],eax
c001adb6:	c1 f8 1f             	sar    eax,0x1f
c001adb9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001adbc:	e9 bd fe ff ff       	jmp    c001ac7e <sysCallOpen(regs*)+0xbd>
c001adc1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001adc4:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001adca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001add1:	e9 ab fe ff ff       	jmp    c001ac81 <sysCallOpen(regs*)+0xc0>

c001add6 <setupSystemCalls()>:
c001add6:	c7 05 60 cd 02 c0 e7 9f 01 c0 	mov    DWORD PTR ds:0xc002cd60,0xc0019fe7
c001ade0:	c7 05 64 cd 02 c0 bb 9d 01 c0 	mov    DWORD PTR ds:0xc002cd64,0xc0019dbb
c001adea:	c7 05 68 cd 02 c0 0e 9f 01 c0 	mov    DWORD PTR ds:0xc002cd68,0xc0019f0e
c001adf4:	c7 05 6c cd 02 c0 7f 9f 01 c0 	mov    DWORD PTR ds:0xc002cd6c,0xc0019f7f
c001adfe:	c7 05 70 cd 02 c0 a6 9e 01 c0 	mov    DWORD PTR ds:0xc002cd70,0xc0019ea6
c001ae08:	c7 05 74 cd 02 c0 f2 9d 01 c0 	mov    DWORD PTR ds:0xc002cd74,0xc0019df2
c001ae12:	c7 05 78 cd 02 c0 d3 9d 01 c0 	mov    DWORD PTR ds:0xc002cd78,0xc0019dd3
c001ae1c:	c7 05 7c cd 02 c0 63 9f 01 c0 	mov    DWORD PTR ds:0xc002cd7c,0xc0019f63
c001ae26:	c7 05 84 cd 02 c0 f9 a4 01 c0 	mov    DWORD PTR ds:0xc002cd84,0xc001a4f9
c001ae30:	c7 05 80 cd 02 c0 c1 ab 01 c0 	mov    DWORD PTR ds:0xc002cd80,0xc001abc1
c001ae3a:	c7 05 88 cd 02 c0 81 a5 01 c0 	mov    DWORD PTR ds:0xc002cd88,0xc001a581
c001ae44:	c7 05 8c cd 02 c0 e8 a1 01 c0 	mov    DWORD PTR ds:0xc002cd8c,0xc001a1e8
c001ae4e:	c7 05 90 cd 02 c0 22 a0 01 c0 	mov    DWORD PTR ds:0xc002cd90,0xc001a022
c001ae58:	c7 05 94 cd 02 c0 27 a0 01 c0 	mov    DWORD PTR ds:0xc002cd94,0xc001a027
c001ae62:	c7 05 98 cd 02 c0 5c a6 01 c0 	mov    DWORD PTR ds:0xc002cd98,0xc001a65c
c001ae6c:	c7 05 9c cd 02 c0 f6 a5 01 c0 	mov    DWORD PTR ds:0xc002cd9c,0xc001a5f6
c001ae76:	c7 05 a0 cd 02 c0 d0 a2 01 c0 	mov    DWORD PTR ds:0xc002cda0,0xc001a2d0
c001ae80:	c7 05 a4 cd 02 c0 39 a3 01 c0 	mov    DWORD PTR ds:0xc002cda4,0xc001a339
c001ae8a:	c7 05 a8 cd 02 c0 b6 a3 01 c0 	mov    DWORD PTR ds:0xc002cda8,0xc001a3b6
c001ae94:	c7 05 ac cd 02 c0 2c a0 01 c0 	mov    DWORD PTR ds:0xc002cdac,0xc001a02c
c001ae9e:	c7 05 b0 cd 02 c0 cc a6 01 c0 	mov    DWORD PTR ds:0xc002cdb0,0xc001a6cc
c001aea8:	c7 05 b4 cd 02 c0 e6 a6 01 c0 	mov    DWORD PTR ds:0xc002cdb4,0xc001a6e6
c001aeb2:	c7 05 b8 cd 02 c0 e6 a6 01 c0 	mov    DWORD PTR ds:0xc002cdb8,0xc001a6e6
c001aebc:	c7 05 bc cd 02 c0 27 a7 01 c0 	mov    DWORD PTR ds:0xc002cdbc,0xc001a727
c001aec6:	c7 05 c0 cd 02 c0 8b a7 01 c0 	mov    DWORD PTR ds:0xc002cdc0,0xc001a78b
c001aed0:	c7 05 c4 cd 02 c0 36 a0 01 c0 	mov    DWORD PTR ds:0xc002cdc4,0xc001a036
c001aeda:	c7 05 c8 cd 02 c0 ef a7 01 c0 	mov    DWORD PTR ds:0xc002cdc8,0xc001a7ef
c001aee4:	c7 05 cc cd 02 c0 a5 a1 01 c0 	mov    DWORD PTR ds:0xc002cdcc,0xc001a1a5
c001aeee:	c7 05 d0 cd 02 c0 3b a8 01 c0 	mov    DWORD PTR ds:0xc002cdd0,0xc001a83b
c001aef8:	c7 05 d4 cd 02 c0 76 a2 01 c0 	mov    DWORD PTR ds:0xc002cdd4,0xc001a276
c001af02:	c7 05 d8 cd 02 c0 10 a9 01 c0 	mov    DWORD PTR ds:0xc002cdd8,0xc001a910
c001af0c:	c7 05 dc cd 02 c0 39 a4 01 c0 	mov    DWORD PTR ds:0xc002cddc,0xc001a439
c001af16:	c7 05 e0 cd 02 c0 37 a9 01 c0 	mov    DWORD PTR ds:0xc002cde0,0xc001a937
c001af20:	c7 05 e4 cd 02 c0 be a8 01 c0 	mov    DWORD PTR ds:0xc002cde4,0xc001a8be
c001af2a:	c7 05 e8 cd 02 c0 8f a9 01 c0 	mov    DWORD PTR ds:0xc002cde8,0xc001a98f
c001af34:	c7 05 ec cd 02 c0 46 a0 01 c0 	mov    DWORD PTR ds:0xc002cdec,0xc001a046
c001af3e:	c7 05 f0 cd 02 c0 b0 a0 01 c0 	mov    DWORD PTR ds:0xc002cdf0,0xc001a0b0
c001af48:	c7 05 f4 cd 02 c0 f6 a0 01 c0 	mov    DWORD PTR ds:0xc002cdf4,0xc001a0f6
c001af52:	c7 05 f8 cd 02 c0 ae aa 01 c0 	mov    DWORD PTR ds:0xc002cdf8,0xc001aaae
c001af5c:	c7 05 fc cd 02 c0 01 a7 01 c0 	mov    DWORD PTR ds:0xc002cdfc,0xc001a701
c001af66:	c7 05 00 ce 02 c0 47 a1 01 c0 	mov    DWORD PTR ds:0xc002ce00,0xc001a147
c001af70:	c7 05 04 ce 02 c0 20 ab 01 c0 	mov    DWORD PTR ds:0xc002ce04,0xc001ab20
c001af7a:	c7 05 08 ce 02 c0 65 ab 01 c0 	mov    DWORD PTR ds:0xc002ce08,0xc001ab65
c001af84:	c7 05 0c ce 02 c0 fe 9d 01 c0 	mov    DWORD PTR ds:0xc002ce0c,0xc0019dfe
c001af8e:	c3                   	ret    

c001af8f <systemCall(regs*, void*)>:
c001af8f:	53                   	push   ebx
c001af90:	83 ec 08             	sub    esp,0x8
c001af93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af97:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001af9a:	83 f8 7f             	cmp    eax,0x7f
c001af9d:	77 16                	ja     c001afb5 <systemCall(regs*, void*)+0x26>
c001af9f:	8b 14 85 60 cd 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd32a0]
c001afa6:	85 d2                	test   edx,edx
c001afa8:	74 0b                	je     c001afb5 <systemCall(regs*, void*)+0x26>
c001afaa:	83 ec 0c             	sub    esp,0xc
c001afad:	53                   	push   ebx
c001afae:	ff d2                	call   edx
c001afb0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001afb3:	eb 0d                	jmp    c001afc2 <systemCall(regs*, void*)+0x33>
c001afb5:	52                   	push   edx
c001afb6:	52                   	push   edx
c001afb7:	50                   	push   eax
c001afb8:	68 78 9e 02 c0       	push   0xc0029e78
c001afbd:	e8 df 76 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001afc2:	83 c4 10             	add    esp,0x10
c001afc5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001afca:	31 d2                	xor    edx,edx
c001afcc:	83 c4 08             	add    esp,0x8
c001afcf:	5b                   	pop    ebx
c001afd0:	c3                   	ret    

c001afd1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001afd1:	55                   	push   ebp
c001afd2:	89 e5                	mov    ebp,esp
c001afd4:	57                   	push   edi
c001afd5:	56                   	push   esi
c001afd6:	53                   	push   ebx
c001afd7:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001afdd:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001afe0:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001afe3:	85 c0                	test   eax,eax
c001afe5:	0f 95 c1             	setne  cl
c001afe8:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001afec:	0f 94 c2             	sete   dl
c001afef:	84 d1                	test   cl,dl
c001aff1:	74 26                	je     c001b019 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001aff3:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001affa:	74 1d                	je     c001b019 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001affc:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001afff:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001b005:	89 d6                	mov    esi,edx
c001b007:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001b00d:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001b013:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001b016:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001b019:	83 ec 0c             	sub    esp,0xc
c001b01c:	05 ff 0f 00 00       	add    eax,0xfff
c001b021:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001b024:	6a 01                	push   0x1
c001b026:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001b02c:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001b032:	e8 7a 66 ff ff       	call   c00116b1 <Virt::allocateKernelVirtualPages(int)>
c001b037:	83 c4 10             	add    esp,0x10
c001b03a:	89 c6                	mov    esi,eax
c001b03c:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001b042:	0f 86 21 01 00 00    	jbe    c001b169 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001b048:	c1 eb 0c             	shr    ebx,0xc
c001b04b:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001b055:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001b05b:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b05e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b061:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001b067:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001b06a:	29 d8                	sub    eax,ebx
c001b06c:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001b072:	0f 83 f4 00 00 00    	jae    c001b16c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001b078:	83 ec 0c             	sub    esp,0xc
c001b07b:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001b081:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001b084:	3d 00 10 00 00       	cmp    eax,0x1000
c001b089:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001b08b:	52                   	push   edx
c001b08c:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001b092:	52                   	push   edx
c001b093:	76 05                	jbe    c001b09a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001b095:	b8 00 10 00 00       	mov    eax,0x1000
c001b09a:	31 d2                	xor    edx,edx
c001b09c:	52                   	push   edx
c001b09d:	50                   	push   eax
c001b09e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001b0a1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b0a4:	83 c4 20             	add    esp,0x20
c001b0a7:	85 c0                	test   eax,eax
c001b0a9:	74 1f                	je     c001b0ca <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001b0ab:	51                   	push   ecx
c001b0ac:	51                   	push   ecx
c001b0ad:	50                   	push   eax
c001b0ae:	68 8c 9e 02 c0       	push   0xc0029e8c
c001b0b3:	e8 e9 75 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001b0b8:	89 34 24             	mov    DWORD PTR [esp],esi
c001b0bb:	e8 55 69 ff ff       	call   c0011a15 <Virt::freeKernelVirtualPages(unsigned long)>
c001b0c0:	83 c4 10             	add    esp,0x10
c001b0c3:	31 c0                	xor    eax,eax
c001b0c5:	e9 7c 01 00 00       	jmp    c001b246 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001b0ca:	e8 2b 15 00 00       	call   c001c5fa <lockScheduler()>
c001b0cf:	e8 aa 49 ff ff       	call   c000fa7e <Phys::allocatePage()>
c001b0d4:	6a 07                	push   0x7
c001b0d6:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001b0dc:	56                   	push   esi
c001b0dd:	50                   	push   eax
c001b0de:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b0e4:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b0e7:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001b0ed:	e8 8a 6c ff ff       	call   c0011d7c <VAS::mapPage(unsigned long, unsigned long, int)>
c001b0f2:	83 c4 0c             	add    esp,0xc
c001b0f5:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b0fb:	6a 00                	push   0x0
c001b0fd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b103:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b106:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001b10c:	e8 d5 6a ff ff       	call   c0011be6 <VAS::mapOtherVASIn(bool, VAS*)>
c001b111:	58                   	pop    eax
c001b112:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001b118:	5a                   	pop    edx
c001b119:	68 07 04 00 00       	push   0x407
c001b11e:	53                   	push   ebx
c001b11f:	81 c3 00 10 00 00    	add    ebx,0x1000
c001b125:	50                   	push   eax
c001b126:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b12c:	6a 00                	push   0x0
c001b12e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b133:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b136:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b13c:	e8 f5 6f ff ff       	call   c0012136 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001b141:	83 c4 1c             	add    esp,0x1c
c001b144:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001b14a:	68 00 10 00 00       	push   0x1000
c001b14f:	50                   	push   eax
c001b150:	56                   	push   esi
c001b151:	e8 ff 54 fe ff       	call   c0000655 <memcpy>
c001b156:	e8 a1 14 00 00       	call   c001c5fc <unlockScheduler()>
c001b15b:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001b161:	83 c4 10             	add    esp,0x10
c001b164:	e9 f5 fe ff ff       	jmp    c001b05e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001b169:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b16c:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001b176:	0f 86 bc 00 00 00    	jbe    c001b238 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001b17c:	e8 79 14 00 00       	call   c001c5fa <lockScheduler()>
c001b181:	51                   	push   ecx
c001b182:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b188:	6a 00                	push   0x0
c001b18a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b18f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b192:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b198:	e8 49 6a ff ff       	call   c0011be6 <VAS::mapOtherVASIn(bool, VAS*)>
c001b19d:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001b1a3:	83 c4 10             	add    esp,0x10
c001b1a6:	c1 e8 0c             	shr    eax,0xc
c001b1a9:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001b1b3:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001b1b9:	e8 c0 48 ff ff       	call   c000fa7e <Phys::allocatePage()>
c001b1be:	6a 07                	push   0x7
c001b1c0:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001b1c6:	56                   	push   esi
c001b1c7:	50                   	push   eax
c001b1c8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b1ce:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b1d1:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001b1d7:	e8 a0 6b ff ff       	call   c0011d7c <VAS::mapPage(unsigned long, unsigned long, int)>
c001b1dc:	58                   	pop    eax
c001b1dd:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001b1e3:	5a                   	pop    edx
c001b1e4:	68 07 04 00 00       	push   0x407
c001b1e9:	53                   	push   ebx
c001b1ea:	81 c3 00 10 00 00    	add    ebx,0x1000
c001b1f0:	50                   	push   eax
c001b1f1:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b1f7:	6a 00                	push   0x0
c001b1f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1fe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b201:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b207:	e8 2a 6f ff ff       	call   c0012136 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001b20c:	83 c4 1c             	add    esp,0x1c
c001b20f:	68 00 10 00 00       	push   0x1000
c001b214:	6a 00                	push   0x0
c001b216:	56                   	push   esi
c001b217:	e8 6f 54 fe ff       	call   c000068b <memset>
c001b21c:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001b222:	83 c4 10             	add    esp,0x10
c001b225:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001b22b:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001b231:	77 86                	ja     c001b1b9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001b233:	e8 c4 13 00 00       	call   c001c5fc <unlockScheduler()>
c001b238:	83 ec 0c             	sub    esp,0xc
c001b23b:	56                   	push   esi
c001b23c:	e8 d4 67 ff ff       	call   c0011a15 <Virt::freeKernelVirtualPages(unsigned long)>
c001b241:	83 c4 10             	add    esp,0x10
c001b244:	b0 01                	mov    al,0x1
c001b246:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b249:	5b                   	pop    ebx
c001b24a:	5e                   	pop    esi
c001b24b:	5f                   	pop    edi
c001b24c:	5d                   	pop    ebp
c001b24d:	c3                   	ret    

c001b24e <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001b24e:	55                   	push   ebp
c001b24f:	57                   	push   edi
c001b250:	56                   	push   esi
c001b251:	53                   	push   ebx
c001b252:	83 ec 48             	sub    esp,0x48
c001b255:	68 14 01 00 00       	push   0x114
c001b25a:	e8 75 42 ff ff       	call   c000f4d4 <malloc>
c001b25f:	83 c4 0c             	add    esp,0xc
c001b262:	89 c6                	mov    esi,eax
c001b264:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001b268:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b26c:	50                   	push   eax
c001b26d:	e8 5e 79 ff ff       	call   c0012bd0 <File::File(char const*, Process*)>
c001b272:	58                   	pop    eax
c001b273:	5a                   	pop    edx
c001b274:	6a 01                	push   0x1
c001b276:	56                   	push   esi
c001b277:	e8 b8 79 ff ff       	call   c0012c34 <File::open(FileOpenMode)>
c001b27c:	83 c4 10             	add    esp,0x10
c001b27f:	85 c0                	test   eax,eax
c001b281:	0f 85 47 01 00 00    	jne    c001b3ce <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b287:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001b28f:	83 ec 0c             	sub    esp,0xc
c001b292:	6a 34                	push   0x34
c001b294:	e8 3b 42 ff ff       	call   c000f4d4 <malloc>
c001b299:	89 c3                	mov    ebx,eax
c001b29b:	58                   	pop    eax
c001b29c:	8b 06                	mov    eax,DWORD PTR [esi]
c001b29e:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001b2a2:	57                   	push   edi
c001b2a3:	53                   	push   ebx
c001b2a4:	6a 00                	push   0x0
c001b2a6:	6a 34                	push   0x34
c001b2a8:	56                   	push   esi
c001b2a9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b2ac:	83 c4 20             	add    esp,0x20
c001b2af:	85 c0                	test   eax,eax
c001b2b1:	0f 85 17 01 00 00    	jne    c001b3ce <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b2b7:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001b2bd:	0f 85 0b 01 00 00    	jne    c001b3ce <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b2c3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b2c6:	85 c0                	test   eax,eax
c001b2c8:	0f 84 00 01 00 00    	je     c001b3ce <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b2ce:	31 d2                	xor    edx,edx
c001b2d0:	55                   	push   ebp
c001b2d1:	52                   	push   edx
c001b2d2:	50                   	push   eax
c001b2d3:	56                   	push   esi
c001b2d4:	e8 19 7a ff ff       	call   c0012cf2 <File::seek(unsigned long long)>
c001b2d9:	83 c4 10             	add    esp,0x10
c001b2dc:	85 c0                	test   eax,eax
c001b2de:	0f 85 ea 00 00 00    	jne    c001b3ce <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b2e4:	83 ec 0c             	sub    esp,0xc
c001b2e7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001b2ea:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001b2ee:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b2f2:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001b2f6:	0f af c2             	imul   eax,edx
c001b2f9:	50                   	push   eax
c001b2fa:	e8 d5 41 ff ff       	call   c000f4d4 <malloc>
c001b2ff:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001b301:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b305:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b308:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b30c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001b310:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001b314:	0f af c2             	imul   eax,edx
c001b317:	99                   	cdq    
c001b318:	52                   	push   edx
c001b319:	50                   	push   eax
c001b31a:	56                   	push   esi
c001b31b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b31e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001b321:	83 c4 20             	add    esp,0x20
c001b324:	85 c0                	test   eax,eax
c001b326:	0f 84 a2 00 00 00    	je     c001b3ce <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b32c:	31 d2                	xor    edx,edx
c001b32e:	51                   	push   ecx
c001b32f:	52                   	push   edx
c001b330:	50                   	push   eax
c001b331:	56                   	push   esi
c001b332:	e8 bb 79 ff ff       	call   c0012cf2 <File::seek(unsigned long long)>
c001b337:	83 c4 10             	add    esp,0x10
c001b33a:	85 c0                	test   eax,eax
c001b33c:	0f 85 8c 00 00 00    	jne    c001b3ce <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b342:	83 ec 0c             	sub    esp,0xc
c001b345:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001b349:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001b34d:	31 ed                	xor    ebp,ebp
c001b34f:	0f af c2             	imul   eax,edx
c001b352:	50                   	push   eax
c001b353:	e8 7c 41 ff ff       	call   c000f4d4 <malloc>
c001b358:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001b35a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b35e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b361:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b365:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001b369:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001b36d:	0f af c2             	imul   eax,edx
c001b370:	99                   	cdq    
c001b371:	52                   	push   edx
c001b372:	50                   	push   eax
c001b373:	56                   	push   esi
c001b374:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b377:	83 c4 20             	add    esp,0x20
c001b37a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b382:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001b386:	0f 86 80 00 00 00    	jbe    c001b40c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001b38c:	0f b7 fd             	movzx  edi,bp
c001b38f:	c1 e7 05             	shl    edi,0x5
c001b392:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001b396:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001b399:	75 6b                	jne    c001b406 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001b39b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001b39e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b3a2:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001b3a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b3a9:	52                   	push   edx
c001b3aa:	31 d2                	xor    edx,edx
c001b3ac:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001b3af:	52                   	push   edx
c001b3b0:	50                   	push   eax
c001b3b1:	56                   	push   esi
c001b3b2:	e8 3b 79 ff ff       	call   c0012cf2 <File::seek(unsigned long long)>
c001b3b7:	83 c4 10             	add    esp,0x10
c001b3ba:	85 c0                	test   eax,eax
c001b3bc:	74 17                	je     c001b3d5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001b3be:	83 ec 0c             	sub    esp,0xc
c001b3c1:	68 b7 9e 02 c0       	push   0xc0029eb7
c001b3c6:	e8 d6 72 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001b3cb:	83 c4 10             	add    esp,0x10
c001b3ce:	31 c0                	xor    eax,eax
c001b3d0:	e9 87 00 00 00       	jmp    c001b45c <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001b3d5:	83 ec 0c             	sub    esp,0xc
c001b3d8:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001b3db:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001b3de:	50                   	push   eax
c001b3df:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b3e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3e7:	56                   	push   esi
c001b3e8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001b3ec:	e8 e0 fb ff ff       	call   c001afd1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001b3f1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b3f5:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001b3f9:	83 c4 20             	add    esp,0x20
c001b3fc:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001b400:	73 04                	jae    c001b406 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001b402:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b406:	45                   	inc    ebp
c001b407:	e9 76 ff ff ff       	jmp    c001b382 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001b40c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001b410:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b414:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b418:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001b41e:	83 ec 0c             	sub    esp,0xc
c001b421:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001b427:	25 00 f0 ff ff       	and    eax,0xfffff000
c001b42c:	05 00 10 00 00       	add    eax,0x1000
c001b431:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b434:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b438:	e8 a7 40 ff ff       	call   c000f4e4 <free>
c001b43d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b440:	e8 9f 40 ff ff       	call   c000f4e4 <free>
c001b445:	58                   	pop    eax
c001b446:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b44a:	e8 95 40 ff ff       	call   c000f4e4 <free>
c001b44f:	89 34 24             	mov    DWORD PTR [esp],esi
c001b452:	e8 3b 78 ff ff       	call   c0012c92 <File::close()>
c001b457:	83 c4 10             	add    esp,0x10
c001b45a:	b0 01                	mov    al,0x1
c001b45c:	83 c4 3c             	add    esp,0x3c
c001b45f:	5b                   	pop    ebx
c001b460:	5e                   	pop    esi
c001b461:	5f                   	pop    edi
c001b462:	5d                   	pop    ebp
c001b463:	c3                   	ret    

c001b464 <Thr::runtimeReferenceHelper()>:
c001b464:	83 ec 18             	sub    esp,0x18
c001b467:	68 bf 9e 02 c0       	push   0xc0029ebf
c001b46c:	e8 30 72 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001b471:	fa                   	cli    
c001b472:	83 c4 10             	add    esp,0x10
c001b475:	eb fe                	jmp    c001b475 <Thr::runtimeReferenceHelper()+0x11>

c001b477 <Thr::getAddressOfKernelSymbol(char const*)>:
c001b477:	57                   	push   edi
c001b478:	56                   	push   esi
c001b479:	53                   	push   ebx
c001b47a:	31 db                	xor    ebx,ebx
c001b47c:	39 1d 00 d7 02 c0    	cmp    DWORD PTR ds:0xc002d700,ebx
c001b482:	7e 3c                	jle    c001b4c0 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001b484:	8b 34 9d 80 d6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd2980]
c001b48b:	31 ff                	xor    edi,edi
c001b48d:	39 3c 9d 80 d5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd2a80],edi
c001b494:	7e 27                	jle    c001b4bd <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001b496:	50                   	push   eax
c001b497:	50                   	push   eax
c001b498:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b49c:	8b 06                	mov    eax,DWORD PTR [esi]
c001b49e:	03 04 9d 00 d6 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd2a00]
c001b4a5:	50                   	push   eax
c001b4a6:	e8 d0 52 fe ff       	call   c000077b <strcmp>
c001b4ab:	83 c4 10             	add    esp,0x10
c001b4ae:	85 c0                	test   eax,eax
c001b4b0:	75 05                	jne    c001b4b7 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001b4b2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001b4b5:	eb 0b                	jmp    c001b4c2 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001b4b7:	83 c6 10             	add    esi,0x10
c001b4ba:	47                   	inc    edi
c001b4bb:	eb d0                	jmp    c001b48d <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001b4bd:	43                   	inc    ebx
c001b4be:	eb bc                	jmp    c001b47c <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001b4c0:	31 c0                	xor    eax,eax
c001b4c2:	5b                   	pop    ebx
c001b4c3:	5e                   	pop    esi
c001b4c4:	5f                   	pop    edi
c001b4c5:	c3                   	ret    

c001b4c6 <Thr::loadKernelSymbolTable(char const*)>:
c001b4c6:	55                   	push   ebp
c001b4c7:	57                   	push   edi
c001b4c8:	56                   	push   esi
c001b4c9:	53                   	push   ebx
c001b4ca:	83 ec 68             	sub    esp,0x68
c001b4cd:	8b 35 54 d7 02 c0    	mov    esi,DWORD PTR ds:0xc002d754
c001b4d3:	68 14 01 00 00       	push   0x114
c001b4d8:	e8 f7 3f ff ff       	call   c000f4d4 <malloc>
c001b4dd:	83 c4 0c             	add    esp,0xc
c001b4e0:	89 c3                	mov    ebx,eax
c001b4e2:	56                   	push   esi
c001b4e3:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001b4e7:	50                   	push   eax
c001b4e8:	e8 e3 76 ff ff       	call   c0012bd0 <File::File(char const*, Process*)>
c001b4ed:	5e                   	pop    esi
c001b4ee:	5f                   	pop    edi
c001b4ef:	6a 01                	push   0x1
c001b4f1:	53                   	push   ebx
c001b4f2:	e8 3d 77 ff ff       	call   c0012c34 <File::open(FileOpenMode)>
c001b4f7:	83 c4 10             	add    esp,0x10
c001b4fa:	31 d2                	xor    edx,edx
c001b4fc:	85 c0                	test   eax,eax
c001b4fe:	0f 85 74 02 00 00    	jne    c001b778 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001b504:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001b50c:	83 ec 0c             	sub    esp,0xc
c001b50f:	6a 34                	push   0x34
c001b511:	e8 be 3f ff ff       	call   c000f4d4 <malloc>
c001b516:	59                   	pop    ecx
c001b517:	89 c7                	mov    edi,eax
c001b519:	8d 74 24 34          	lea    esi,[esp+0x34]
c001b51d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b51f:	56                   	push   esi
c001b520:	57                   	push   edi
c001b521:	6a 00                	push   0x0
c001b523:	6a 34                	push   0x34
c001b525:	53                   	push   ebx
c001b526:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b529:	83 c4 20             	add    esp,0x20
c001b52c:	85 c0                	test   eax,eax
c001b52e:	74 17                	je     c001b547 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001b530:	83 ec 0c             	sub    esp,0xc
c001b533:	68 e1 9e 02 c0       	push   0xc0029ee1
c001b538:	e8 3f e0 ff ff       	call   c001957c <Krnl::panic(char const*)>
c001b53d:	83 c4 10             	add    esp,0x10
c001b540:	31 d2                	xor    edx,edx
c001b542:	e9 31 02 00 00       	jmp    c001b778 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001b547:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001b54d:	75 e1                	jne    c001b530 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001b54f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001b552:	85 c0                	test   eax,eax
c001b554:	74 da                	je     c001b530 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001b556:	52                   	push   edx
c001b557:	31 d2                	xor    edx,edx
c001b559:	52                   	push   edx
c001b55a:	50                   	push   eax
c001b55b:	53                   	push   ebx
c001b55c:	e8 91 77 ff ff       	call   c0012cf2 <File::seek(unsigned long long)>
c001b561:	83 c4 10             	add    esp,0x10
c001b564:	85 c0                	test   eax,eax
c001b566:	75 c8                	jne    c001b530 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001b568:	83 ec 0c             	sub    esp,0xc
c001b56b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001b56f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b573:	31 ed                	xor    ebp,ebp
c001b575:	0f af c2             	imul   eax,edx
c001b578:	50                   	push   eax
c001b579:	e8 56 3f ff ff       	call   c000f4d4 <malloc>
c001b57e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001b580:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b584:	89 34 24             	mov    DWORD PTR [esp],esi
c001b587:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b58b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001b58f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b593:	0f af c2             	imul   eax,edx
c001b596:	99                   	cdq    
c001b597:	52                   	push   edx
c001b598:	50                   	push   eax
c001b599:	53                   	push   ebx
c001b59a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b59d:	83 c4 20             	add    esp,0x20
c001b5a0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001b5a8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b5b0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b5b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b5c0:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001b5c4:	0f 86 aa 00 00 00    	jbe    c001b674 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001b5ca:	0f b7 f5             	movzx  esi,bp
c001b5cd:	6b f6 28             	imul   esi,esi,0x28
c001b5d0:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001b5d4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b5d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b5db:	50                   	push   eax
c001b5dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b5e0:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001b5e4:	8b 16                	mov    edx,DWORD PTR [esi]
c001b5e6:	6b c0 28             	imul   eax,eax,0x28
c001b5e9:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001b5ed:	89 d0                	mov    eax,edx
c001b5ef:	31 d2                	xor    edx,edx
c001b5f1:	52                   	push   edx
c001b5f2:	50                   	push   eax
c001b5f3:	53                   	push   ebx
c001b5f4:	e8 f9 76 ff ff       	call   c0012cf2 <File::seek(unsigned long long)>
c001b5f9:	83 c4 0c             	add    esp,0xc
c001b5fc:	6a 20                	push   0x20
c001b5fe:	6a 00                	push   0x0
c001b600:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001b604:	52                   	push   edx
c001b605:	e8 81 50 fe ff       	call   c000068b <memset>
c001b60a:	58                   	pop    eax
c001b60b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b60d:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001b611:	51                   	push   ecx
c001b612:	8d 54 24 40          	lea    edx,[esp+0x40]
c001b616:	52                   	push   edx
c001b617:	6a 00                	push   0x0
c001b619:	6a 1f                	push   0x1f
c001b61b:	53                   	push   ebx
c001b61c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b61f:	83 c4 18             	add    esp,0x18
c001b622:	68 f8 9e 02 c0       	push   0xc0029ef8
c001b627:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001b62b:	52                   	push   edx
c001b62c:	e8 4a 51 fe ff       	call   c000077b <strcmp>
c001b631:	83 c4 10             	add    esp,0x10
c001b634:	85 c0                	test   eax,eax
c001b636:	75 0f                	jne    c001b647 <Thr::loadKernelSymbolTable(char const*)+0x181>
c001b638:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b63b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b63f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b643:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b647:	50                   	push   eax
c001b648:	50                   	push   eax
c001b649:	68 00 9f 02 c0       	push   0xc0029f00
c001b64e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b652:	50                   	push   eax
c001b653:	e8 23 51 fe ff       	call   c000077b <strcmp>
c001b658:	83 c4 10             	add    esp,0x10
c001b65b:	85 c0                	test   eax,eax
c001b65d:	75 0f                	jne    c001b66e <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001b65f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b662:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b666:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b66a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b66e:	45                   	inc    ebp
c001b66f:	e9 4c ff ff ff       	jmp    c001b5c0 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001b674:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b679:	75 10                	jne    c001b68b <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001b67b:	83 ec 0c             	sub    esp,0xc
c001b67e:	68 08 9f 02 c0       	push   0xc0029f08
c001b683:	e8 f4 de ff ff       	call   c001957c <Krnl::panic(char const*)>
c001b688:	83 c4 10             	add    esp,0x10
c001b68b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001b690:	75 10                	jne    c001b6a2 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001b692:	83 ec 0c             	sub    esp,0xc
c001b695:	68 08 9f 02 c0       	push   0xc0029f08
c001b69a:	e8 dd de ff ff       	call   c001957c <Krnl::panic(char const*)>
c001b69f:	83 c4 10             	add    esp,0x10
c001b6a2:	31 d2                	xor    edx,edx
c001b6a4:	50                   	push   eax
c001b6a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6a9:	52                   	push   edx
c001b6aa:	50                   	push   eax
c001b6ab:	53                   	push   ebx
c001b6ac:	e8 41 76 ff ff       	call   c0012cf2 <File::seek(unsigned long long)>
c001b6b1:	5a                   	pop    edx
c001b6b2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b6b6:	e8 19 3e ff ff       	call   c000f4d4 <malloc>
c001b6bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b6bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b6c3:	31 c9                	xor    ecx,ecx
c001b6c5:	5e                   	pop    esi
c001b6c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6c8:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001b6cc:	55                   	push   ebp
c001b6cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6d1:	51                   	push   ecx
c001b6d2:	52                   	push   edx
c001b6d3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001b6d7:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001b6db:	53                   	push   ebx
c001b6dc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b6df:	83 c4 14             	add    esp,0x14
c001b6e2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b6e6:	e8 e9 3d ff ff       	call   c000f4d4 <malloc>
c001b6eb:	89 c6                	mov    esi,eax
c001b6ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6ef:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b6f2:	56                   	push   esi
c001b6f3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b6f7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b6fb:	51                   	push   ecx
c001b6fc:	52                   	push   edx
c001b6fd:	53                   	push   ebx
c001b6fe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b701:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b705:	8b 15 00 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d700
c001b70b:	83 c4 1c             	add    esp,0x1c
c001b70e:	c1 e8 04             	shr    eax,0x4
c001b711:	89 04 95 80 d5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2a80],eax
c001b718:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b71c:	31 d2                	xor    edx,edx
c001b71e:	52                   	push   edx
c001b71f:	50                   	push   eax
c001b720:	53                   	push   ebx
c001b721:	e8 cc 75 ff ff       	call   c0012cf2 <File::seek(unsigned long long)>
c001b726:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001b728:	31 d2                	xor    edx,edx
c001b72a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b72d:	56                   	push   esi
c001b72e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b732:	52                   	push   edx
c001b733:	50                   	push   eax
c001b734:	53                   	push   ebx
c001b735:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b738:	83 c4 14             	add    esp,0x14
c001b73b:	53                   	push   ebx
c001b73c:	e8 51 75 ff ff       	call   c0012c92 <File::close()>
c001b741:	5d                   	pop    ebp
c001b742:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b746:	e8 99 3d ff ff       	call   c000f4e4 <free>
c001b74b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b74e:	e8 91 3d ff ff       	call   c000f4e4 <free>
c001b753:	a1 00 d7 02 c0       	mov    eax,ds:0xc002d700
c001b758:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b75c:	8d 50 01             	lea    edx,[eax+0x1]
c001b75f:	89 0c 85 80 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2980],ecx
c001b766:	89 15 00 d7 02 c0    	mov    DWORD PTR ds:0xc002d700,edx
c001b76c:	89 34 85 00 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2a00],esi
c001b773:	83 c4 10             	add    esp,0x10
c001b776:	b2 01                	mov    dl,0x1
c001b778:	83 c4 5c             	add    esp,0x5c
c001b77b:	88 d0                	mov    al,dl
c001b77d:	5b                   	pop    ebx
c001b77e:	5e                   	pop    esi
c001b77f:	5f                   	pop    edi
c001b780:	5d                   	pop    ebp
c001b781:	c3                   	ret    

c001b782 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001b782:	55                   	push   ebp
c001b783:	57                   	push   edi
c001b784:	56                   	push   esi
c001b785:	53                   	push   ebx
c001b786:	81 ec 68 03 00 00    	sub    esp,0x368
c001b78c:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001b793:	8b 1d 54 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d754
c001b799:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b79d:	68 14 01 00 00       	push   0x114
c001b7a2:	e8 2d 3d ff ff       	call   c000f4d4 <malloc>
c001b7a7:	83 c4 0c             	add    esp,0xc
c001b7aa:	89 c5                	mov    ebp,eax
c001b7ac:	53                   	push   ebx
c001b7ad:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001b7b4:	50                   	push   eax
c001b7b5:	e8 16 74 ff ff       	call   c0012bd0 <File::File(char const*, Process*)>
c001b7ba:	58                   	pop    eax
c001b7bb:	5a                   	pop    edx
c001b7bc:	6a 01                	push   0x1
c001b7be:	55                   	push   ebp
c001b7bf:	e8 70 74 ff ff       	call   c0012c34 <File::open(FileOpenMode)>
c001b7c4:	83 c4 10             	add    esp,0x10
c001b7c7:	85 c0                	test   eax,eax
c001b7c9:	0f 85 f2 06 00 00    	jne    c001bec1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b7cf:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b7d7:	83 ec 0c             	sub    esp,0xc
c001b7da:	6a 34                	push   0x34
c001b7dc:	e8 f3 3c ff ff       	call   c000f4d4 <malloc>
c001b7e1:	89 c7                	mov    edi,eax
c001b7e3:	58                   	pop    eax
c001b7e4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b7e7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001b7eb:	53                   	push   ebx
c001b7ec:	57                   	push   edi
c001b7ed:	6a 00                	push   0x0
c001b7ef:	6a 34                	push   0x34
c001b7f1:	55                   	push   ebp
c001b7f2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b7f5:	83 c4 20             	add    esp,0x20
c001b7f8:	85 c0                	test   eax,eax
c001b7fa:	0f 85 c1 06 00 00    	jne    c001bec1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b800:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001b806:	0f 85 b5 06 00 00    	jne    c001bec1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b80c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001b80f:	85 c0                	test   eax,eax
c001b811:	0f 84 aa 06 00 00    	je     c001bec1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b817:	31 d2                	xor    edx,edx
c001b819:	56                   	push   esi
c001b81a:	52                   	push   edx
c001b81b:	50                   	push   eax
c001b81c:	55                   	push   ebp
c001b81d:	e8 d0 74 ff ff       	call   c0012cf2 <File::seek(unsigned long long)>
c001b822:	83 c4 10             	add    esp,0x10
c001b825:	85 c0                	test   eax,eax
c001b827:	0f 85 94 06 00 00    	jne    c001bec1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b82d:	83 ec 0c             	sub    esp,0xc
c001b830:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001b833:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001b837:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001b83b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b83f:	0f af c2             	imul   eax,edx
c001b842:	50                   	push   eax
c001b843:	e8 8c 3c ff ff       	call   c000f4d4 <malloc>
c001b848:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b84b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b84f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b856:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001b85a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b85e:	0f af c2             	imul   eax,edx
c001b861:	99                   	cdq    
c001b862:	52                   	push   edx
c001b863:	50                   	push   eax
c001b864:	55                   	push   ebp
c001b865:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b868:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001b86b:	83 c4 20             	add    esp,0x20
c001b86e:	85 c0                	test   eax,eax
c001b870:	0f 84 4b 06 00 00    	je     c001bec1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b876:	31 d2                	xor    edx,edx
c001b878:	51                   	push   ecx
c001b879:	52                   	push   edx
c001b87a:	50                   	push   eax
c001b87b:	55                   	push   ebp
c001b87c:	e8 71 74 ff ff       	call   c0012cf2 <File::seek(unsigned long long)>
c001b881:	83 c4 10             	add    esp,0x10
c001b884:	85 c0                	test   eax,eax
c001b886:	0f 85 35 06 00 00    	jne    c001bec1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b88c:	83 ec 0c             	sub    esp,0xc
c001b88f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001b893:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001b897:	31 f6                	xor    esi,esi
c001b899:	0f af c2             	imul   eax,edx
c001b89c:	50                   	push   eax
c001b89d:	e8 32 3c ff ff       	call   c000f4d4 <malloc>
c001b8a2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b8a5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b8a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b8ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b8b0:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001b8b4:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001b8b8:	0f af c2             	imul   eax,edx
c001b8bb:	99                   	cdq    
c001b8bc:	52                   	push   edx
c001b8bd:	50                   	push   eax
c001b8be:	55                   	push   ebp
c001b8bf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b8c2:	83 c4 20             	add    esp,0x20
c001b8c5:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001b8c9:	0f 86 8a 00 00 00    	jbe    c001b959 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001b8cf:	0f b7 de             	movzx  ebx,si
c001b8d2:	c1 e3 05             	shl    ebx,0x5
c001b8d5:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001b8d9:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001b8dc:	75 75                	jne    c001b953 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001b8de:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b8e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b8e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b8e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b8ec:	52                   	push   edx
c001b8ed:	31 d2                	xor    edx,edx
c001b8ef:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001b8f2:	52                   	push   edx
c001b8f3:	50                   	push   eax
c001b8f4:	55                   	push   ebp
c001b8f5:	e8 f8 73 ff ff       	call   c0012cf2 <File::seek(unsigned long long)>
c001b8fa:	83 c4 10             	add    esp,0x10
c001b8fd:	85 c0                	test   eax,eax
c001b8ff:	0f 85 bc 05 00 00    	jne    c001bec1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b905:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001b90c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b90f:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001b913:	31 d2                	xor    edx,edx
c001b915:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001b919:	83 ec 0c             	sub    esp,0xc
c001b91c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b920:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001b927:	50                   	push   eax
c001b928:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b92c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b930:	52                   	push   edx
c001b931:	50                   	push   eax
c001b932:	55                   	push   ebp
c001b933:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b936:	83 c4 1c             	add    esp,0x1c
c001b939:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b93c:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001b93f:	50                   	push   eax
c001b940:	6a 00                	push   0x0
c001b942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b946:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001b94a:	50                   	push   eax
c001b94b:	e8 3b 4d fe ff       	call   c000068b <memset>
c001b950:	83 c4 10             	add    esp,0x10
c001b953:	46                   	inc    esi
c001b954:	e9 6c ff ff ff       	jmp    c001b8c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001b959:	31 db                	xor    ebx,ebx
c001b95b:	50                   	push   eax
c001b95c:	68 00 01 00 00       	push   0x100
c001b961:	6a 00                	push   0x0
c001b963:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001b967:	50                   	push   eax
c001b968:	e8 1e 4d fe ff       	call   c000068b <memset>
c001b96d:	83 c4 0c             	add    esp,0xc
c001b970:	68 00 01 00 00       	push   0x100
c001b975:	6a 00                	push   0x0
c001b977:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001b97e:	50                   	push   eax
c001b97f:	e8 07 4d fe ff       	call   c000068b <memset>
c001b984:	83 c4 10             	add    esp,0x10
c001b987:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b98f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001b997:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001b99f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b9a7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001b9af:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001b9b3:	0f 86 30 01 00 00    	jbe    c001bae9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001b9b9:	0f b7 f3             	movzx  esi,bx
c001b9bc:	6b f6 28             	imul   esi,esi,0x28
c001b9bf:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001b9c3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b9c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b9ca:	50                   	push   eax
c001b9cb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b9cf:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001b9d3:	8b 06                	mov    eax,DWORD PTR [esi]
c001b9d5:	6b d2 28             	imul   edx,edx,0x28
c001b9d8:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001b9dc:	31 d2                	xor    edx,edx
c001b9de:	52                   	push   edx
c001b9df:	50                   	push   eax
c001b9e0:	55                   	push   ebp
c001b9e1:	e8 0c 73 ff ff       	call   c0012cf2 <File::seek(unsigned long long)>
c001b9e6:	83 c4 0c             	add    esp,0xc
c001b9e9:	6a 20                	push   0x20
c001b9eb:	6a 00                	push   0x0
c001b9ed:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001b9f4:	51                   	push   ecx
c001b9f5:	e8 91 4c fe ff       	call   c000068b <memset>
c001b9fa:	58                   	pop    eax
c001b9fb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b9fe:	8d 54 24 58          	lea    edx,[esp+0x58]
c001ba02:	52                   	push   edx
c001ba03:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001ba0a:	51                   	push   ecx
c001ba0b:	6a 00                	push   0x0
c001ba0d:	6a 1f                	push   0x1f
c001ba0f:	55                   	push   ebp
c001ba10:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ba13:	83 c4 1c             	add    esp,0x1c
c001ba16:	6a 09                	push   0x9
c001ba18:	68 22 9f 02 c0       	push   0xc0029f22
c001ba1d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001ba24:	51                   	push   ecx
c001ba25:	e8 c8 4b fe ff       	call   c00005f2 <memcmp>
c001ba2a:	83 c4 10             	add    esp,0x10
c001ba2d:	85 c0                	test   eax,eax
c001ba2f:	75 21                	jne    c001ba52 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001ba31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba35:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ba39:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ba3d:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001ba41:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ba44:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001ba4b:	89 c8                	mov    eax,ecx
c001ba4d:	40                   	inc    eax
c001ba4e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ba52:	50                   	push   eax
c001ba53:	6a 09                	push   0x9
c001ba55:	68 2c 9f 02 c0       	push   0xc0029f2c
c001ba5a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ba61:	50                   	push   eax
c001ba62:	e8 8b 4b fe ff       	call   c00005f2 <memcmp>
c001ba67:	83 c4 10             	add    esp,0x10
c001ba6a:	85 c0                	test   eax,eax
c001ba6c:	75 21                	jne    c001ba8f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001ba6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba72:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ba76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ba7a:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001ba7e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ba81:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001ba88:	89 c8                	mov    eax,ecx
c001ba8a:	40                   	inc    eax
c001ba8b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ba8f:	50                   	push   eax
c001ba90:	50                   	push   eax
c001ba91:	68 f8 9e 02 c0       	push   0xc0029ef8
c001ba96:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ba9d:	50                   	push   eax
c001ba9e:	e8 d8 4c fe ff       	call   c000077b <strcmp>
c001baa3:	83 c4 10             	add    esp,0x10
c001baa6:	85 c0                	test   eax,eax
c001baa8:	75 0f                	jne    c001bab9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001baaa:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001baad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bab5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bab9:	50                   	push   eax
c001baba:	50                   	push   eax
c001babb:	68 00 9f 02 c0       	push   0xc0029f00
c001bac0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001bac7:	50                   	push   eax
c001bac8:	e8 ae 4c fe ff       	call   c000077b <strcmp>
c001bacd:	83 c4 10             	add    esp,0x10
c001bad0:	85 c0                	test   eax,eax
c001bad2:	75 0f                	jne    c001bae3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001bad4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bad7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001badb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001badf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bae3:	43                   	inc    ebx
c001bae4:	e9 c6 fe ff ff       	jmp    c001b9af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001bae9:	31 d2                	xor    edx,edx
c001baeb:	50                   	push   eax
c001baec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001baf0:	52                   	push   edx
c001baf1:	50                   	push   eax
c001baf2:	55                   	push   ebp
c001baf3:	e8 fa 71 ff ff       	call   c0012cf2 <File::seek(unsigned long long)>
c001baf8:	5a                   	pop    edx
c001baf9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bafd:	e8 d2 39 ff ff       	call   c000f4d4 <malloc>
c001bb02:	31 d2                	xor    edx,edx
c001bb04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001bb08:	59                   	pop    ecx
c001bb09:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001bb0c:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001bb10:	53                   	push   ebx
c001bb11:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bb15:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bb19:	52                   	push   edx
c001bb1a:	50                   	push   eax
c001bb1b:	55                   	push   ebp
c001bb1c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bb1f:	83 c4 14             	add    esp,0x14
c001bb22:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bb26:	e8 a9 39 ff ff       	call   c000f4d4 <malloc>
c001bb2b:	31 d2                	xor    edx,edx
c001bb2d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bb31:	83 c4 0c             	add    esp,0xc
c001bb34:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bb38:	52                   	push   edx
c001bb39:	50                   	push   eax
c001bb3a:	55                   	push   ebp
c001bb3b:	e8 b2 71 ff ff       	call   c0012cf2 <File::seek(unsigned long long)>
c001bb40:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001bb43:	31 d2                	xor    edx,edx
c001bb45:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bb48:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bb4c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bb50:	52                   	push   edx
c001bb51:	50                   	push   eax
c001bb52:	55                   	push   ebp
c001bb53:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bb56:	83 c4 20             	add    esp,0x20
c001bb59:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001bb61:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bb65:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001bb69:	0f 84 56 03 00 00    	je     c001bec5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x743>
c001bb6f:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001bb76:	31 d2                	xor    edx,edx
c001bb78:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bb7c:	c1 e8 03             	shr    eax,0x3
c001bb7f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001bb83:	50                   	push   eax
c001bb84:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bb88:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001bb8c:	52                   	push   edx
c001bb8d:	50                   	push   eax
c001bb8e:	55                   	push   ebp
c001bb8f:	e8 5e 71 ff ff       	call   c0012cf2 <File::seek(unsigned long long)>
c001bb94:	58                   	pop    eax
c001bb95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bb99:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001bba0:	e8 2f 39 ff ff       	call   c000f4d4 <malloc>
c001bba5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001bba8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bbac:	31 d2                	xor    edx,edx
c001bbae:	58                   	pop    eax
c001bbaf:	8d 44 24 58          	lea    eax,[esp+0x58]
c001bbb3:	50                   	push   eax
c001bbb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bbb8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bbbc:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001bbc3:	52                   	push   edx
c001bbc4:	50                   	push   eax
c001bbc5:	55                   	push   ebp
c001bbc6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bbc9:	83 c4 20             	add    esp,0x20
c001bbcc:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001bbd4:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001bbd8:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001bbdc:	0f 8d c7 02 00 00    	jge    c001bea9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x727>
c001bbe2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bbe6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bbea:	31 db                	xor    ebx,ebx
c001bbec:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001bbef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bbf3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bbf7:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001bbfb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bbff:	c1 e8 08             	shr    eax,0x8
c001bc02:	89 c6                	mov    esi,eax
c001bc04:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001bc08:	c1 e6 04             	shl    esi,0x4
c001bc0b:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001bc0f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001bc12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bc16:	85 c0                	test   eax,eax
c001bc18:	0f 85 17 01 00 00    	jne    c001bd35 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001bc1e:	83 ec 0c             	sub    esp,0xc
c001bc21:	b3 01                	mov    bl,0x1
c001bc23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc27:	03 06                	add    eax,DWORD PTR [esi]
c001bc29:	50                   	push   eax
c001bc2a:	e8 48 f8 ff ff       	call   c001b477 <Thr::getAddressOfKernelSymbol(char const*)>
c001bc2f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bc33:	83 c4 10             	add    esp,0x10
c001bc36:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001bc3b:	0f 85 f4 00 00 00    	jne    c001bd35 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001bc41:	50                   	push   eax
c001bc42:	50                   	push   eax
c001bc43:	68 36 9f 02 c0       	push   0xc0029f36
c001bc48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc4c:	03 06                	add    eax,DWORD PTR [esi]
c001bc4e:	50                   	push   eax
c001bc4f:	e8 27 4b fe ff       	call   c000077b <strcmp>
c001bc54:	83 c4 10             	add    esp,0x10
c001bc57:	85 c0                	test   eax,eax
c001bc59:	75 0a                	jne    c001bc65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c001bc5b:	b8 7c 4c 02 c0       	mov    eax,0xc0024c7c
c001bc60:	e9 ca 00 00 00       	jmp    c001bd2f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001bc65:	50                   	push   eax
c001bc66:	50                   	push   eax
c001bc67:	68 40 9f 02 c0       	push   0xc0029f40
c001bc6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc70:	03 06                	add    eax,DWORD PTR [esi]
c001bc72:	50                   	push   eax
c001bc73:	e8 03 4b fe ff       	call   c000077b <strcmp>
c001bc78:	83 c4 10             	add    esp,0x10
c001bc7b:	85 c0                	test   eax,eax
c001bc7d:	75 0a                	jne    c001bc89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c001bc7f:	b8 b0 49 02 c0       	mov    eax,0xc00249b0
c001bc84:	e9 a6 00 00 00       	jmp    c001bd2f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001bc89:	53                   	push   ebx
c001bc8a:	53                   	push   ebx
c001bc8b:	68 49 9f 02 c0       	push   0xc0029f49
c001bc90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc94:	03 06                	add    eax,DWORD PTR [esi]
c001bc96:	50                   	push   eax
c001bc97:	e8 df 4a fe ff       	call   c000077b <strcmp>
c001bc9c:	83 c4 10             	add    esp,0x10
c001bc9f:	85 c0                	test   eax,eax
c001bca1:	75 0a                	jne    c001bcad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c001bca3:	b8 7c 4d 02 c0       	mov    eax,0xc0024d7c
c001bca8:	e9 82 00 00 00       	jmp    c001bd2f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001bcad:	51                   	push   ecx
c001bcae:	51                   	push   ecx
c001bcaf:	68 53 9f 02 c0       	push   0xc0029f53
c001bcb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bcb8:	03 06                	add    eax,DWORD PTR [esi]
c001bcba:	50                   	push   eax
c001bcbb:	e8 bb 4a fe ff       	call   c000077b <strcmp>
c001bcc0:	83 c4 10             	add    esp,0x10
c001bcc3:	85 c0                	test   eax,eax
c001bcc5:	74 63                	je     c001bd2a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c001bcc7:	50                   	push   eax
c001bcc8:	50                   	push   eax
c001bcc9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bccd:	03 06                	add    eax,DWORD PTR [esi]
c001bccf:	50                   	push   eax
c001bcd0:	68 5c 9f 02 c0       	push   0xc0029f5c
c001bcd5:	e8 c7 69 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001bcda:	58                   	pop    eax
c001bcdb:	5a                   	pop    edx
c001bcdc:	68 76 9f 02 c0       	push   0xc0029f76
c001bce1:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001bce8:	53                   	push   ebx
c001bce9:	e8 3c 4a fe ff       	call   c000072a <strcpy>
c001bcee:	59                   	pop    ecx
c001bcef:	58                   	pop    eax
c001bcf0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bcf4:	03 06                	add    eax,DWORD PTR [esi]
c001bcf6:	50                   	push   eax
c001bcf7:	53                   	push   ebx
c001bcf8:	e8 e4 4a fe ff       	call   c00007e1 <strcat>
c001bcfd:	58                   	pop    eax
c001bcfe:	5a                   	pop    edx
c001bcff:	68 0c a0 02 c0       	push   0xc002a00c
c001bd04:	53                   	push   ebx
c001bd05:	e8 d7 4a fe ff       	call   c00007e1 <strcat>
c001bd0a:	83 c4 10             	add    esp,0x10
c001bd0d:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001bd12:	0f 84 4b 01 00 00    	je     c001be63 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001bd18:	83 ec 0c             	sub    esp,0xc
c001bd1b:	53                   	push   ebx
c001bd1c:	e8 5b d8 ff ff       	call   c001957c <Krnl::panic(char const*)>
c001bd21:	83 c4 10             	add    esp,0x10
c001bd24:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001bd28:	eb 0b                	jmp    c001bd35 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001bd2a:	b8 fc 4a 02 c0       	mov    eax,0xc0024afc
c001bd2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bd33:	b3 01                	mov    bl,0x1
c001bd35:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001bd3a:	0f 85 80 00 00 00    	jne    c001bdc0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c001bd40:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001bd47:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bd4b:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001bd4f:	01 ce                	add    esi,ecx
c001bd51:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001bd59:	8b 06                	mov    eax,DWORD PTR [esi]
c001bd5b:	0f 94 c2             	sete   dl
c001bd5e:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001bd66:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001bd6b:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001bd6f:	84 db                	test   bl,bl
c001bd71:	74 31                	je     c001bda4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c001bd73:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001bd77:	01 c3                	add    ebx,eax
c001bd79:	84 d2                	test   dl,dl
c001bd7b:	75 0a                	jne    c001bd87 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c001bd7d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bd81:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001bd85:	76 32                	jbe    c001bdb9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001bd87:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001bd8c:	0f 84 d1 00 00 00    	je     c001be63 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001bd92:	83 ec 0c             	sub    esp,0xc
c001bd95:	68 8d 9f 02 c0       	push   0xc0029f8d
c001bd9a:	e8 dd d7 ff ff       	call   c001957c <Krnl::panic(char const*)>
c001bd9f:	83 c4 10             	add    esp,0x10
c001bda2:	eb 15                	jmp    c001bdb9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001bda4:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001bda7:	84 d2                	test   dl,dl
c001bda9:	75 0e                	jne    c001bdb9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001bdab:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bdaf:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001bdb3:	77 04                	ja     c001bdb9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001bdb5:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001bdb9:	89 1e                	mov    DWORD PTR [esi],ebx
c001bdbb:	e9 e0 00 00 00       	jmp    c001bea0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001bdc0:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001bdc5:	75 6e                	jne    c001be35 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b3>
c001bdc7:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001bdce:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001bdd2:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001bdd6:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001bdde:	74 17                	je     c001bdf7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001bde0:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001bde8:	74 0d                	je     c001bdf7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001bdea:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bdee:	83 e8 04             	sub    eax,0x4
c001bdf1:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001bdf5:	76 17                	jbe    c001be0e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68c>
c001bdf7:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001bdfc:	74 65                	je     c001be63 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001bdfe:	83 ec 0c             	sub    esp,0xc
c001be01:	68 a9 9f 02 c0       	push   0xc0029fa9
c001be06:	e8 71 d7 ff ff       	call   c001957c <Krnl::panic(char const*)>
c001be0b:	83 c4 10             	add    esp,0x10
c001be0e:	8b 16                	mov    edx,DWORD PTR [esi]
c001be10:	84 db                	test   bl,bl
c001be12:	74 13                	je     c001be27 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c001be14:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be18:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001be1f:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001be23:	01 d0                	add    eax,edx
c001be25:	eb 06                	jmp    c001be2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001be27:	89 d0                	mov    eax,edx
c001be29:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001be2d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001be31:	89 06                	mov    DWORD PTR [esi],eax
c001be33:	eb 6b                	jmp    c001bea0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001be35:	50                   	push   eax
c001be36:	50                   	push   eax
c001be37:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001be3c:	50                   	push   eax
c001be3d:	68 c5 9f 02 c0       	push   0xc0029fc5
c001be42:	e8 5a 68 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001be47:	83 c4 10             	add    esp,0x10
c001be4a:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001be4f:	74 12                	je     c001be63 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001be51:	83 ec 0c             	sub    esp,0xc
c001be54:	68 d0 9f 02 c0       	push   0xc0029fd0
c001be59:	e8 1e d7 ff ff       	call   c001957c <Krnl::panic(char const*)>
c001be5e:	83 c4 10             	add    esp,0x10
c001be61:	eb 3d                	jmp    c001bea0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001be63:	83 ec 0c             	sub    esp,0xc
c001be66:	55                   	push   ebp
c001be67:	e8 26 6e ff ff       	call   c0012c92 <File::close()>
c001be6c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001be6f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001be72:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001be75:	59                   	pop    ecx
c001be76:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001be7a:	e8 65 36 ff ff       	call   c000f4e4 <free>
c001be7f:	5b                   	pop    ebx
c001be80:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001be84:	e8 5b 36 ff ff       	call   c000f4e4 <free>
c001be89:	89 3c 24             	mov    DWORD PTR [esp],edi
c001be8c:	e8 53 36 ff ff       	call   c000f4e4 <free>
c001be91:	5e                   	pop    esi
c001be92:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001be96:	e8 49 36 ff ff       	call   c000f4e4 <free>
c001be9b:	83 c4 10             	add    esp,0x10
c001be9e:	eb 21                	jmp    c001bec1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bea0:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001bea4:	e9 2b fd ff ff       	jmp    c001bbd4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001bea9:	83 ec 0c             	sub    esp,0xc
c001beac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001beb0:	e8 2f 36 ff ff       	call   c000f4e4 <free>
c001beb5:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001beb9:	83 c4 10             	add    esp,0x10
c001bebc:	e9 a0 fc ff ff       	jmp    c001bb61 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001bec1:	31 c0                	xor    eax,eax
c001bec3:	eb 33                	jmp    c001bef8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x776>
c001bec5:	83 ec 0c             	sub    esp,0xc
c001bec8:	55                   	push   ebp
c001bec9:	e8 c4 6d ff ff       	call   c0012c92 <File::close()>
c001bece:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bed1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bed4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bed7:	58                   	pop    eax
c001bed8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bedc:	e8 03 36 ff ff       	call   c000f4e4 <free>
c001bee1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bee4:	e8 fb 35 ff ff       	call   c000f4e4 <free>
c001bee9:	5a                   	pop    edx
c001beea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001beee:	e8 f1 35 ff ff       	call   c000f4e4 <free>
c001bef3:	83 c4 10             	add    esp,0x10
c001bef6:	b0 01                	mov    al,0x1
c001bef8:	81 c4 5c 03 00 00    	add    esp,0x35c
c001befe:	5b                   	pop    ebx
c001beff:	5e                   	pop    esi
c001bf00:	5f                   	pop    edi
c001bf01:	5d                   	pop    ebp
c001bf02:	c3                   	ret    

c001bf03 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001bf03:	56                   	push   esi
c001bf04:	31 d2                	xor    edx,edx
c001bf06:	53                   	push   ebx
c001bf07:	8b 1d 60 cf 02 c0    	mov    ebx,DWORD PTR ds:0xc002cf60
c001bf0d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bf11:	39 d3                	cmp    ebx,edx
c001bf13:	7e 1b                	jle    c001bf30 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001bf15:	8b 04 95 80 d1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2e80]
c001bf1c:	39 c8                	cmp    eax,ecx
c001bf1e:	77 0d                	ja     c001bf2d <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001bf20:	8b 34 95 80 cf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd3080]
c001bf27:	01 c6                	add    esi,eax
c001bf29:	39 ce                	cmp    esi,ecx
c001bf2b:	77 05                	ja     c001bf32 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001bf2d:	42                   	inc    edx
c001bf2e:	eb e1                	jmp    c001bf11 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001bf30:	31 c0                	xor    eax,eax
c001bf32:	5b                   	pop    ebx
c001bf33:	5e                   	pop    esi
c001bf34:	c3                   	ret    

c001bf35 <Thr::getDriverNameFromAddress(unsigned long)>:
c001bf35:	53                   	push   ebx
c001bf36:	31 c0                	xor    eax,eax
c001bf38:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bf3c:	8b 1d 60 cf 02 c0    	mov    ebx,DWORD PTR ds:0xc002cf60
c001bf42:	39 c3                	cmp    ebx,eax
c001bf44:	7e 22                	jle    c001bf68 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001bf46:	8b 14 85 80 d1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2e80]
c001bf4d:	39 ca                	cmp    edx,ecx
c001bf4f:	77 14                	ja     c001bf65 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001bf51:	03 14 85 80 cf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd3080]
c001bf58:	39 ca                	cmp    edx,ecx
c001bf5a:	76 09                	jbe    c001bf65 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001bf5c:	8b 04 85 80 d3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2c80]
c001bf63:	eb 05                	jmp    c001bf6a <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001bf65:	40                   	inc    eax
c001bf66:	eb da                	jmp    c001bf42 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001bf68:	31 c0                	xor    eax,eax
c001bf6a:	5b                   	pop    ebx
c001bf6b:	c3                   	ret    

c001bf6c <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001bf6c:	53                   	push   ebx
c001bf6d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001bf71:	53                   	push   ebx
c001bf72:	e8 8c ff ff ff       	call   c001bf03 <Thr::getDriverBaseFromAddress(unsigned long)>
c001bf77:	5a                   	pop    edx
c001bf78:	31 d2                	xor    edx,edx
c001bf7a:	85 c0                	test   eax,eax
c001bf7c:	74 04                	je     c001bf82 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001bf7e:	89 da                	mov    edx,ebx
c001bf80:	29 c2                	sub    edx,eax
c001bf82:	89 d0                	mov    eax,edx
c001bf84:	5b                   	pop    ebx
c001bf85:	c3                   	ret    

c001bf86 <Thr::loadDLL(char const*, bool)>:
c001bf86:	55                   	push   ebp
c001bf87:	57                   	push   edi
c001bf88:	56                   	push   esi
c001bf89:	53                   	push   ebx
c001bf8a:	81 ec 34 01 00 00    	sub    esp,0x134
c001bf90:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001bf97:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001bf9e:	56                   	push   esi
c001bf9f:	68 e8 9f 02 c0       	push   0xc0029fe8
c001bfa4:	e8 f8 66 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001bfa9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001bfb0:	e8 1f 35 ff ff       	call   c000f4d4 <malloc>
c001bfb5:	83 c4 0c             	add    esp,0xc
c001bfb8:	89 c3                	mov    ebx,eax
c001bfba:	ff 35 54 d7 02 c0    	push   DWORD PTR ds:0xc002d754
c001bfc0:	56                   	push   esi
c001bfc1:	50                   	push   eax
c001bfc2:	e8 09 6c ff ff       	call   c0012bd0 <File::File(char const*, Process*)>
c001bfc7:	83 c4 10             	add    esp,0x10
c001bfca:	85 db                	test   ebx,ebx
c001bfcc:	75 3c                	jne    c001c00a <Thr::loadDLL(char const*, bool)+0x84>
c001bfce:	89 e8                	mov    eax,ebp
c001bfd0:	84 c0                	test   al,al
c001bfd2:	0f 84 b0 01 00 00    	je     c001c188 <Thr::loadDLL(char const*, bool)+0x202>
c001bfd8:	50                   	push   eax
c001bfd9:	50                   	push   eax
c001bfda:	68 f9 9f 02 c0       	push   0xc0029ff9
c001bfdf:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001bfe3:	57                   	push   edi
c001bfe4:	e8 41 47 fe ff       	call   c000072a <strcpy>
c001bfe9:	58                   	pop    eax
c001bfea:	5a                   	pop    edx
c001bfeb:	56                   	push   esi
c001bfec:	57                   	push   edi
c001bfed:	e8 ef 47 fe ff       	call   c00007e1 <strcat>
c001bff2:	59                   	pop    ecx
c001bff3:	58                   	pop    eax
c001bff4:	68 0c a0 02 c0       	push   0xc002a00c
c001bff9:	57                   	push   edi
c001bffa:	e8 e2 47 fe ff       	call   c00007e1 <strcat>
c001bfff:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c002:	e8 75 d5 ff ff       	call   c001957c <Krnl::panic(char const*)>
c001c007:	83 c4 10             	add    esp,0x10
c001c00a:	50                   	push   eax
c001c00b:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001c00f:	50                   	push   eax
c001c010:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c014:	50                   	push   eax
c001c015:	53                   	push   ebx
c001c016:	e8 c5 6e ff ff       	call   c0012ee0 <File::stat(unsigned long long*, bool*)>
c001c01b:	83 c4 10             	add    esp,0x10
c001c01e:	85 db                	test   ebx,ebx
c001c020:	74 0c                	je     c001c02e <Thr::loadDLL(char const*, bool)+0xa8>
c001c022:	83 ec 0c             	sub    esp,0xc
c001c025:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c027:	53                   	push   ebx
c001c028:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c02b:	83 c4 10             	add    esp,0x10
c001c02e:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001c033:	75 0a                	jne    c001c03f <Thr::loadDLL(char const*, bool)+0xb9>
c001c035:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c039:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001c03d:	75 3c                	jne    c001c07b <Thr::loadDLL(char const*, bool)+0xf5>
c001c03f:	89 e8                	mov    eax,ebp
c001c041:	84 c0                	test   al,al
c001c043:	0f 84 3d 01 00 00    	je     c001c186 <Thr::loadDLL(char const*, bool)+0x200>
c001c049:	50                   	push   eax
c001c04a:	50                   	push   eax
c001c04b:	68 f9 9f 02 c0       	push   0xc0029ff9
c001c050:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001c054:	53                   	push   ebx
c001c055:	e8 d0 46 fe ff       	call   c000072a <strcpy>
c001c05a:	58                   	pop    eax
c001c05b:	5a                   	pop    edx
c001c05c:	56                   	push   esi
c001c05d:	53                   	push   ebx
c001c05e:	e8 7e 47 fe ff       	call   c00007e1 <strcat>
c001c063:	59                   	pop    ecx
c001c064:	5f                   	pop    edi
c001c065:	68 0c a0 02 c0       	push   0xc002a00c
c001c06a:	53                   	push   ebx
c001c06b:	e8 71 47 fe ff       	call   c00007e1 <strcat>
c001c070:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c073:	e8 04 d5 ff ff       	call   c001957c <Krnl::panic(char const*)>
c001c078:	83 c4 10             	add    esp,0x10
c001c07b:	e8 c1 57 ff ff       	call   c0011841 <Virt::getAKernelVAS()>
c001c080:	51                   	push   ecx
c001c081:	6a 03                	push   0x3
c001c083:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c087:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c08b:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001c091:	83 d3 00             	adc    ebx,0x0
c001c094:	89 ca                	mov    edx,ecx
c001c096:	89 d1                	mov    ecx,edx
c001c098:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001c09c:	51                   	push   ecx
c001c09d:	50                   	push   eax
c001c09e:	e8 d9 5d ff ff       	call   c0011e7c <VAS::allocatePages(int, int)>
c001c0a3:	89 34 24             	mov    DWORD PTR [esp],esi
c001c0a6:	89 c3                	mov    ebx,eax
c001c0a8:	e8 fb 45 fe ff       	call   c00006a8 <strlen>
c001c0ad:	8b 3d 60 cf 02 c0    	mov    edi,DWORD PTR ds:0xc002cf60
c001c0b3:	40                   	inc    eax
c001c0b4:	89 04 24             	mov    DWORD PTR [esp],eax
c001c0b7:	e8 18 34 ff ff       	call   c000f4d4 <malloc>
c001c0bc:	89 04 bd 80 d3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2c80],eax
c001c0c3:	5f                   	pop    edi
c001c0c4:	58                   	pop    eax
c001c0c5:	a1 60 cf 02 c0       	mov    eax,ds:0xc002cf60
c001c0ca:	56                   	push   esi
c001c0cb:	ff 34 85 80 d3 02 c0 	push   DWORD PTR [eax*4-0x3ffd2c80]
c001c0d2:	e8 53 46 fe ff       	call   c000072a <strcpy>
c001c0d7:	a1 60 cf 02 c0       	mov    eax,ds:0xc002cf60
c001c0dc:	8d 50 01             	lea    edx,[eax+0x1]
c001c0df:	89 1c 85 80 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2e80],ebx
c001c0e6:	89 15 60 cf 02 c0    	mov    DWORD PTR ds:0xc002cf60,edx
c001c0ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c0f0:	83 c4 0c             	add    esp,0xc
c001c0f3:	89 14 85 80 cf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3080],edx
c001c0fa:	6a 01                	push   0x1
c001c0fc:	53                   	push   ebx
c001c0fd:	56                   	push   esi
c001c0fe:	e8 7f f6 ff ff       	call   c001b782 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001c103:	83 c4 10             	add    esp,0x10
c001c106:	89 c7                	mov    edi,eax
c001c108:	fe c8                	dec    al
c001c10a:	74 16                	je     c001c122 <Thr::loadDLL(char const*, bool)+0x19c>
c001c10c:	89 e8                	mov    eax,ebp
c001c10e:	84 c0                	test   al,al
c001c110:	74 10                	je     c001c122 <Thr::loadDLL(char const*, bool)+0x19c>
c001c112:	83 ec 0c             	sub    esp,0xc
c001c115:	68 0e a0 02 c0       	push   0xc002a00e
c001c11a:	e8 5d d4 ff ff       	call   c001957c <Krnl::panic(char const*)>
c001c11f:	83 c4 10             	add    esp,0x10
c001c122:	31 f6                	xor    esi,esi
c001c124:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c128:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c12c:	05 ff 0f 00 00       	add    eax,0xfff
c001c131:	83 d2 00             	adc    edx,0x0
c001c134:	0f ac d0 0c          	shrd   eax,edx,0xc
c001c138:	c1 ea 0c             	shr    edx,0xc
c001c13b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c13f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c143:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001c147:	ba 00 00 00 00       	mov    edx,0x0
c001c14c:	89 d0                	mov    eax,edx
c001c14e:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001c152:	73 2c                	jae    c001c180 <Thr::loadDLL(char const*, bool)+0x1fa>
c001c154:	e8 e8 56 ff ff       	call   c0011841 <Virt::getAKernelVAS()>
c001c159:	89 f5                	mov    ebp,esi
c001c15b:	c1 e5 0c             	shl    ebp,0xc
c001c15e:	52                   	push   edx
c001c15f:	01 dd                	add    ebp,ebx
c001c161:	52                   	push   edx
c001c162:	55                   	push   ebp
c001c163:	50                   	push   eax
c001c164:	e8 8d 58 ff ff       	call   c00119f6 <VAS::getPageTableEntry(unsigned long)>
c001c169:	83 c4 10             	add    esp,0x10
c001c16c:	f6 00 60             	test   BYTE PTR [eax],0x60
c001c16f:	75 0c                	jne    c001c17d <Thr::loadDLL(char const*, bool)+0x1f7>
c001c171:	83 ec 0c             	sub    esp,0xc
c001c174:	55                   	push   ebp
c001c175:	e8 7a 38 ff ff       	call   c000f9f4 <Phys::freePage(unsigned long)>
c001c17a:	83 c4 10             	add    esp,0x10
c001c17d:	46                   	inc    esi
c001c17e:	eb a4                	jmp    c001c124 <Thr::loadDLL(char const*, bool)+0x19e>
c001c180:	89 f8                	mov    eax,edi
c001c182:	84 c0                	test   al,al
c001c184:	75 02                	jne    c001c188 <Thr::loadDLL(char const*, bool)+0x202>
c001c186:	31 db                	xor    ebx,ebx
c001c188:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c18e:	89 d8                	mov    eax,ebx
c001c190:	5b                   	pop    ebx
c001c191:	5e                   	pop    esi
c001c192:	5f                   	pop    edi
c001c193:	5d                   	pop    ebp
c001c194:	c3                   	ret    

c001c195 <Thr::executeDLL(unsigned long, void*)>:
c001c195:	56                   	push   esi
c001c196:	53                   	push   ebx
c001c197:	51                   	push   ecx
c001c198:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c19c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001c1a0:	85 db                	test   ebx,ebx
c001c1a2:	75 10                	jne    c001c1b4 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001c1a4:	83 ec 0c             	sub    esp,0xc
c001c1a7:	68 2d a0 02 c0       	push   0xc002a02d
c001c1ac:	e8 cb d3 ff ff       	call   c001957c <Krnl::panic(char const*)>
c001c1b1:	83 c4 10             	add    esp,0x10
c001c1b4:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001c1b8:	89 d8                	mov    eax,ebx
c001c1ba:	5a                   	pop    edx
c001c1bb:	5b                   	pop    ebx
c001c1bc:	5e                   	pop    esi
c001c1bd:	ff e0                	jmp    eax
c001c1bf:	90                   	nop

c001c1c0 <changeTSS>:
c001c1c0:	83 ec 14             	sub    esp,0x14
c001c1c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1c8:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001c1cb:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001c1d0:	c1 e2 15             	shl    edx,0x15
c001c1d3:	29 d0                	sub    eax,edx
c001c1d5:	50                   	push   eax
c001c1d6:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c001c1db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c1e1:	05 7c 11 00 00       	add    eax,0x117c
c001c1e6:	50                   	push   eax
c001c1e7:	e8 04 4e ff ff       	call   c0010ff0 <TSS::setESP(unsigned long)>
c001c1ec:	83 c4 1c             	add    esp,0x1c
c001c1ef:	c3                   	ret    

c001c1f0 <Process::addArgs(char**)>:
c001c1f0:	57                   	push   edi
c001c1f1:	56                   	push   esi
c001c1f2:	53                   	push   ebx
c001c1f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c1f7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c1fb:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001c205:	85 ff                	test   edi,edi
c001c207:	74 3d                	je     c001c246 <Process::addArgs(char**)+0x56>
c001c209:	8b 07                	mov    eax,DWORD PTR [edi]
c001c20b:	85 c0                	test   eax,eax
c001c20d:	74 37                	je     c001c246 <Process::addArgs(char**)+0x56>
c001c20f:	31 db                	xor    ebx,ebx
c001c211:	83 ec 0c             	sub    esp,0xc
c001c214:	50                   	push   eax
c001c215:	e8 8e 44 fe ff       	call   c00006a8 <strlen>
c001c21a:	40                   	inc    eax
c001c21b:	89 04 24             	mov    DWORD PTR [esp],eax
c001c21e:	e8 b1 32 ff ff       	call   c000f4d4 <malloc>
c001c223:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001c22a:	5a                   	pop    edx
c001c22b:	59                   	pop    ecx
c001c22c:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001c22f:	43                   	inc    ebx
c001c230:	50                   	push   eax
c001c231:	e8 f4 44 fe ff       	call   c000072a <strcpy>
c001c236:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001c23c:	83 c4 10             	add    esp,0x10
c001c23f:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c242:	85 c0                	test   eax,eax
c001c244:	75 cb                	jne    c001c211 <Process::addArgs(char**)+0x21>
c001c246:	5b                   	pop    ebx
c001c247:	5e                   	pop    esi
c001c248:	5f                   	pop    edi
c001c249:	c3                   	ret    

c001c24a <Process::Process(char const*, Process*, char**)>:
c001c24a:	56                   	push   esi
c001c24b:	53                   	push   ebx
c001c24c:	83 ec 14             	sub    esp,0x14
c001c24f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c253:	05 0c 02 00 00       	add    eax,0x20c
c001c258:	bb 07 00 00 00       	mov    ebx,0x7
c001c25d:	89 c6                	mov    esi,eax
c001c25f:	85 db                	test   ebx,ebx
c001c261:	78 12                	js     c001c275 <Process::Process(char const*, Process*, char**)+0x2b>
c001c263:	83 ec 0c             	sub    esp,0xc
c001c266:	56                   	push   esi
c001c267:	e8 c6 ac 00 00       	call   c0026f32 <ThreadControlBlock::ThreadControlBlock()>
c001c26c:	83 c4 10             	add    esp,0x10
c001c26f:	83 c6 63             	add    esi,0x63
c001c272:	4b                   	dec    ebx
c001c273:	eb ea                	jmp    c001c25f <Process::Process(char const*, Process*, char**)+0x15>
c001c275:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c279:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001c280:	83 ec 0c             	sub    esp,0xc
c001c283:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c287:	e8 25 d2 ff ff       	call   c00194b1 <Krnl::newProcessEnv(Process*)>
c001c28c:	83 c4 10             	add    esp,0x10
c001c28f:	89 c2                	mov    edx,eax
c001c291:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c295:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001c29b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c29f:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001c2a8:	a1 b0 b7 02 c0       	mov    eax,ds:0xc002b7b0
c001c2ad:	8d 50 01             	lea    edx,[eax+0x1]
c001c2b0:	89 15 b0 b7 02 c0    	mov    DWORD PTR ds:0xc002b7b0,edx
c001c2b6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c2ba:	89 02                	mov    DWORD PTR [edx],eax
c001c2bc:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001c2c4:	83 ec 0c             	sub    esp,0xc
c001c2c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c2cb:	e8 04 32 ff ff       	call   c000f4d4 <malloc>
c001c2d0:	83 c4 10             	add    esp,0x10
c001c2d3:	89 c3                	mov    ebx,eax
c001c2d5:	83 ec 08             	sub    esp,0x8
c001c2d8:	6a 00                	push   0x0
c001c2da:	53                   	push   ebx
c001c2db:	e8 44 5f ff ff       	call   c0012224 <VAS::VAS(bool)>
c001c2e0:	83 c4 10             	add    esp,0x10
c001c2e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c2e7:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001c2ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c2f1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001c2fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c2ff:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c303:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001c309:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c30d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c313:	85 c0                	test   eax,eax
c001c315:	74 42                	je     c001c359 <Process::Process(char const*, Process*, char**)+0x10f>
c001c317:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c31b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c321:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c327:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c32b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001c331:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c335:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c33b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001c341:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c345:	05 0c 01 00 00       	add    eax,0x10c
c001c34a:	83 ec 08             	sub    esp,0x8
c001c34d:	52                   	push   edx
c001c34e:	50                   	push   eax
c001c34f:	e8 d6 43 fe ff       	call   c000072a <strcpy>
c001c354:	83 c4 10             	add    esp,0x10
c001c357:	eb 63                	jmp    c001c3bc <Process::Process(char const*, Process*, char**)+0x172>
c001c359:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001c361:	83 ec 0c             	sub    esp,0xc
c001c364:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c368:	e8 67 31 ff ff       	call   c000f4d4 <malloc>
c001c36d:	83 c4 10             	add    esp,0x10
c001c370:	89 c3                	mov    ebx,eax
c001c372:	83 ec 08             	sub    esp,0x8
c001c375:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c379:	53                   	push   ebx
c001c37a:	e8 6f 49 ff ff       	call   c0010cee <VgaText::VgaText(char const*)>
c001c37f:	83 c4 10             	add    esp,0x10
c001c382:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c386:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001c38c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c390:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001c396:	83 ec 0c             	sub    esp,0xc
c001c399:	50                   	push   eax
c001c39a:	e8 50 3d ff ff       	call   c00100ef <addToTerminalCycle(VgaText*)>
c001c39f:	83 c4 10             	add    esp,0x10
c001c3a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3a6:	05 0c 01 00 00       	add    eax,0x10c
c001c3ab:	83 ec 08             	sub    esp,0x8
c001c3ae:	68 57 a0 02 c0       	push   0xc002a057
c001c3b3:	50                   	push   eax
c001c3b4:	e8 71 43 fe ff       	call   c000072a <strcpy>
c001c3b9:	83 c4 10             	add    esp,0x10
c001c3bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3c0:	83 c0 0c             	add    eax,0xc
c001c3c3:	83 ec 08             	sub    esp,0x8
c001c3c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c3ca:	50                   	push   eax
c001c3cb:	e8 5a 43 fe ff       	call   c000072a <strcpy>
c001c3d0:	83 c4 10             	add    esp,0x10
c001c3d3:	83 ec 08             	sub    esp,0x8
c001c3d6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c3da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c3de:	e8 0d fe ff ff       	call   c001c1f0 <Process::addArgs(char**)>
c001c3e3:	83 c4 10             	add    esp,0x10
c001c3e6:	83 ec 08             	sub    esp,0x8
c001c3e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c3ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c3f1:	e8 58 ee ff ff       	call   c001b24e <Thr::loadProgramIntoMemory(Process*, char const*)>
c001c3f6:	83 c4 10             	add    esp,0x10
c001c3f9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c3fd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c401:	83 f0 01             	xor    eax,0x1
c001c404:	88 c2                	mov    dl,al
c001c406:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c40a:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001c410:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001c415:	83 ec 08             	sub    esp,0x8
c001c418:	50                   	push   eax
c001c419:	68 54 a1 02 c0       	push   0xc002a154
c001c41e:	e8 7e 62 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001c423:	83 c4 10             	add    esp,0x10
c001c426:	90                   	nop
c001c427:	83 c4 14             	add    esp,0x14
c001c42a:	5b                   	pop    ebx
c001c42b:	5e                   	pop    esi
c001c42c:	c3                   	ret    
c001c42d:	90                   	nop

c001c42e <Process::Process(bool, char const*, Process*, char**)>:
c001c42e:	56                   	push   esi
c001c42f:	53                   	push   ebx
c001c430:	83 ec 24             	sub    esp,0x24
c001c433:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c437:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c43b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c43f:	05 0c 02 00 00       	add    eax,0x20c
c001c444:	bb 07 00 00 00       	mov    ebx,0x7
c001c449:	89 c6                	mov    esi,eax
c001c44b:	85 db                	test   ebx,ebx
c001c44d:	78 12                	js     c001c461 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001c44f:	83 ec 0c             	sub    esp,0xc
c001c452:	56                   	push   esi
c001c453:	e8 da aa 00 00       	call   c0026f32 <ThreadControlBlock::ThreadControlBlock()>
c001c458:	83 c4 10             	add    esp,0x10
c001c45b:	83 c6 63             	add    esi,0x63
c001c45e:	4b                   	dec    ebx
c001c45f:	eb ea                	jmp    c001c44b <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001c461:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c465:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001c46c:	83 ec 0c             	sub    esp,0xc
c001c46f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c473:	e8 39 d0 ff ff       	call   c00194b1 <Krnl::newProcessEnv(Process*)>
c001c478:	83 c4 10             	add    esp,0x10
c001c47b:	89 c2                	mov    edx,eax
c001c47d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c481:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001c487:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c48b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001c494:	a1 b0 b7 02 c0       	mov    eax,ds:0xc002b7b0
c001c499:	8d 50 01             	lea    edx,[eax+0x1]
c001c49c:	89 15 b0 b7 02 c0    	mov    DWORD PTR ds:0xc002b7b0,edx
c001c4a2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c4a6:	89 02                	mov    DWORD PTR [edx],eax
c001c4a8:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001c4b0:	83 ec 0c             	sub    esp,0xc
c001c4b3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c4b7:	e8 18 30 ff ff       	call   c000f4d4 <malloc>
c001c4bc:	83 c4 10             	add    esp,0x10
c001c4bf:	89 c3                	mov    ebx,eax
c001c4c1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c4c6:	83 ec 08             	sub    esp,0x8
c001c4c9:	50                   	push   eax
c001c4ca:	53                   	push   ebx
c001c4cb:	e8 54 5d ff ff       	call   c0012224 <VAS::VAS(bool)>
c001c4d0:	83 c4 10             	add    esp,0x10
c001c4d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c4d7:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001c4dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c4e1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001c4eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c4ef:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c4f3:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001c4f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c4fd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c503:	85 c0                	test   eax,eax
c001c505:	74 42                	je     c001c549 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001c507:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c50b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c511:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c517:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c51b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001c521:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c525:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c52b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001c531:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c535:	05 0c 01 00 00       	add    eax,0x10c
c001c53a:	83 ec 08             	sub    esp,0x8
c001c53d:	52                   	push   edx
c001c53e:	50                   	push   eax
c001c53f:	e8 e6 41 fe ff       	call   c000072a <strcpy>
c001c544:	83 c4 10             	add    esp,0x10
c001c547:	eb 63                	jmp    c001c5ac <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001c549:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001c551:	83 ec 0c             	sub    esp,0xc
c001c554:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c558:	e8 77 2f ff ff       	call   c000f4d4 <malloc>
c001c55d:	83 c4 10             	add    esp,0x10
c001c560:	89 c3                	mov    ebx,eax
c001c562:	83 ec 08             	sub    esp,0x8
c001c565:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c569:	53                   	push   ebx
c001c56a:	e8 7f 47 ff ff       	call   c0010cee <VgaText::VgaText(char const*)>
c001c56f:	83 c4 10             	add    esp,0x10
c001c572:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c576:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001c57c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c580:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001c586:	83 ec 0c             	sub    esp,0xc
c001c589:	50                   	push   eax
c001c58a:	e8 60 3b ff ff       	call   c00100ef <addToTerminalCycle(VgaText*)>
c001c58f:	83 c4 10             	add    esp,0x10
c001c592:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c596:	05 0c 01 00 00       	add    eax,0x10c
c001c59b:	83 ec 08             	sub    esp,0x8
c001c59e:	68 57 a0 02 c0       	push   0xc002a057
c001c5a3:	50                   	push   eax
c001c5a4:	e8 81 41 fe ff       	call   c000072a <strcpy>
c001c5a9:	83 c4 10             	add    esp,0x10
c001c5ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c5b0:	83 c0 0c             	add    eax,0xc
c001c5b3:	83 ec 08             	sub    esp,0x8
c001c5b6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c5ba:	50                   	push   eax
c001c5bb:	e8 6a 41 fe ff       	call   c000072a <strcpy>
c001c5c0:	83 c4 10             	add    esp,0x10
c001c5c3:	83 ec 08             	sub    esp,0x8
c001c5c6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c5ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c5ce:	e8 1d fc ff ff       	call   c001c1f0 <Process::addArgs(char**)>
c001c5d3:	83 c4 10             	add    esp,0x10
c001c5d6:	90                   	nop
c001c5d7:	83 c4 24             	add    esp,0x24
c001c5da:	5b                   	pop    ebx
c001c5db:	5e                   	pop    esi
c001c5dc:	c3                   	ret    

c001c5dd <disableIRQs()>:
c001c5dd:	fa                   	cli    
c001c5de:	ff 05 2c d7 02 c0    	inc    DWORD PTR ds:0xc002d72c
c001c5e4:	c3                   	ret    

c001c5e5 <getIRQNestingLevel()>:
c001c5e5:	a1 2c d7 02 c0       	mov    eax,ds:0xc002d72c
c001c5ea:	c3                   	ret    

c001c5eb <enableIRQs()>:
c001c5eb:	a1 2c d7 02 c0       	mov    eax,ds:0xc002d72c
c001c5f0:	48                   	dec    eax
c001c5f1:	a3 2c d7 02 c0       	mov    ds:0xc002d72c,eax
c001c5f6:	75 01                	jne    c001c5f9 <enableIRQs()+0xe>
c001c5f8:	fb                   	sti    
c001c5f9:	c3                   	ret    

c001c5fa <lockScheduler()>:
c001c5fa:	eb e1                	jmp    c001c5dd <disableIRQs()>

c001c5fc <unlockScheduler()>:
c001c5fc:	eb ed                	jmp    c001c5eb <enableIRQs()>

c001c5fe <userModeEntryPoint(void*)>:
c001c5fe:	83 ec 0c             	sub    esp,0xc
c001c601:	e8 f6 ff ff ff       	call   c001c5fc <unlockScheduler()>
c001c606:	fb                   	sti    
c001c607:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c60c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c60f:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001c615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c619:	83 c4 0c             	add    esp,0xc
c001c61c:	e9 be 3c fe ff       	jmp    c00002df <goToUsermode>

c001c621 <lockStuff()>:
c001c621:	e8 b7 ff ff ff       	call   c001c5dd <disableIRQs()>
c001c626:	ff 05 28 d7 02 c0    	inc    DWORD PTR ds:0xc002d728
c001c62c:	c3                   	ret    

c001c62d <taskStartupFunction>:
c001c62d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c632:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001c635:	c3                   	ret    

c001c636 <updateTimeUsed()>:
c001c636:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c001c63b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c641:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001c648:	74 50                	je     c001c69a <updateTimeUsed()+0x64>
c001c64a:	57                   	push   edi
c001c64b:	56                   	push   esi
c001c64c:	53                   	push   ebx
c001c64d:	0f 31                	rdtsc  
c001c64f:	89 c1                	mov    ecx,eax
c001c651:	a3 68 d7 02 c0       	mov    ds:0xc002d768,eax
c001c656:	2b 0d 58 d7 02 c0    	sub    ecx,DWORD PTR ds:0xc002d758
c001c65c:	89 d3                	mov    ebx,edx
c001c65e:	89 0d 60 d7 02 c0    	mov    DWORD PTR ds:0xc002d760,ecx
c001c664:	1b 1d 5c d7 02 c0    	sbb    ebx,DWORD PTR ds:0xc002d75c
c001c66a:	a3 58 d7 02 c0       	mov    ds:0xc002d758,eax
c001c66f:	89 1d 64 d7 02 c0    	mov    DWORD PTR ds:0xc002d764,ebx
c001c675:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c67a:	89 15 6c d7 02 c0    	mov    DWORD PTR ds:0xc002d76c,edx
c001c680:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001c683:	89 15 5c d7 02 c0    	mov    DWORD PTR ds:0xc002d75c,edx
c001c689:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001c68c:	01 f1                	add    ecx,esi
c001c68e:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001c691:	11 fb                	adc    ebx,edi
c001c693:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001c696:	5b                   	pop    ebx
c001c697:	5e                   	pop    esi
c001c698:	5f                   	pop    edi
c001c699:	c3                   	ret    
c001c69a:	c3                   	ret    

c001c69b <switchToThread(ThreadControlBlock*)>:
c001c69b:	53                   	push   ebx
c001c69c:	83 ec 08             	sub    esp,0x8
c001c69f:	a1 28 d7 02 c0       	mov    eax,ds:0xc002d728
c001c6a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c6a8:	85 c0                	test   eax,eax
c001c6aa:	75 30                	jne    c001c6dc <switchToThread(ThreadControlBlock*)+0x41>
c001c6ac:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001c6af:	3c ff                	cmp    al,0xff
c001c6b1:	74 25                	je     c001c6d8 <switchToThread(ThreadControlBlock*)+0x3d>
c001c6b3:	0f b6 d0             	movzx  edx,al
c001c6b6:	b8 84 03 00 00       	mov    eax,0x384
c001c6bb:	29 d0                	sub    eax,edx
c001c6bd:	c1 e0 10             	shl    eax,0x10
c001c6c0:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001c6c3:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001c6c6:	e8 6b ff ff ff       	call   c001c636 <updateTimeUsed()>
c001c6cb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001c6cf:	83 c4 08             	add    esp,0x8
c001c6d2:	5b                   	pop    ebx
c001c6d3:	e9 3f 3c fe ff       	jmp    c0000317 <switchToThreadASM>
c001c6d8:	31 c0                	xor    eax,eax
c001c6da:	eb e7                	jmp    c001c6c3 <switchToThread(ThreadControlBlock*)+0x28>
c001c6dc:	c7 05 24 d7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d724,0x1
c001c6e6:	83 c4 08             	add    esp,0x8
c001c6e9:	5b                   	pop    ebx
c001c6ea:	c3                   	ret    
c001c6eb:	90                   	nop

c001c6ec <Semaphore::Semaphore(int)>:
c001c6ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c6f4:	89 10                	mov    DWORD PTR [eax],edx
c001c6f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6fa:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c701:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c705:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c70c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c710:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c717:	90                   	nop
c001c718:	c3                   	ret    
c001c719:	90                   	nop

c001c71a <Mutex::Mutex()>:
c001c71a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c71e:	6a 01                	push   0x1
c001c720:	50                   	push   eax
c001c721:	e8 c6 ff ff ff       	call   c001c6ec <Semaphore::Semaphore(int)>
c001c726:	83 c4 08             	add    esp,0x8
c001c729:	90                   	nop
c001c72a:	c3                   	ret    
c001c72b:	90                   	nop

c001c72c <Process::createThread(void (*)(void*), void*, int)>:
c001c72c:	55                   	push   ebp
c001c72d:	31 c9                	xor    ecx,ecx
c001c72f:	57                   	push   edi
c001c730:	56                   	push   esi
c001c731:	53                   	push   ebx
c001c732:	83 ec 1c             	sub    esp,0x1c
c001c735:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c739:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001c740:	89 f2                	mov    edx,esi
c001c742:	0f b7 c2             	movzx  eax,dx
c001c745:	83 e2 01             	and    edx,0x1
c001c748:	74 14                	je     c001c75e <Process::createThread(void (*)(void*), void*, int)+0x32>
c001c74a:	d1 f8                	sar    eax,1
c001c74c:	41                   	inc    ecx
c001c74d:	89 c2                	mov    edx,eax
c001c74f:	83 f9 10             	cmp    ecx,0x10
c001c752:	75 ee                	jne    c001c742 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001c754:	83 c4 1c             	add    esp,0x1c
c001c757:	31 c0                	xor    eax,eax
c001c759:	5b                   	pop    ebx
c001c75a:	5e                   	pop    esi
c001c75b:	5f                   	pop    edi
c001c75c:	5d                   	pop    ebp
c001c75d:	c3                   	ret    
c001c75e:	83 ec 08             	sub    esp,0x8
c001c761:	b8 01 00 00 00       	mov    eax,0x1
c001c766:	d3 e0                	shl    eax,cl
c001c768:	09 c6                	or     esi,eax
c001c76a:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001c770:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001c777:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001c77a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001c77d:	01 ce                	add    esi,ecx
c001c77f:	89 f0                	mov    eax,esi
c001c781:	c1 e0 05             	shl    eax,0x5
c001c784:	01 c6                	add    esi,eax
c001c786:	8d 04 33             	lea    eax,[ebx+esi*1]
c001c789:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001c78f:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001c795:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001c799:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001c79f:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001c7a5:	89 ca                	mov    edx,ecx
c001c7a7:	f7 da                	neg    edx
c001c7a9:	c1 e2 15             	shl    edx,0x15
c001c7ac:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001c7b2:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001c7b8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001c7bc:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001c7c6:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001c7cc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c7d0:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001c7d6:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001c7e0:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001c7ea:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001c7f1:	50                   	push   eax
c001c7f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c7f6:	68 48 d7 02 c0       	push   0xc002d748
c001c7fb:	e8 c0 a5 00 00       	call   c0026dc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c800:	83 c4 10             	add    esp,0x10
c001c803:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c807:	83 c4 1c             	add    esp,0x1c
c001c80a:	5b                   	pop    ebx
c001c80b:	5e                   	pop    esi
c001c80c:	5f                   	pop    edi
c001c80d:	5d                   	pop    ebp
c001c80e:	c3                   	ret    
c001c80f:	90                   	nop

c001c810 <Process::createUserThread()>:
c001c810:	83 ec 0c             	sub    esp,0xc
c001c813:	68 80 00 00 00       	push   0x80
c001c818:	6a 00                	push   0x0
c001c81a:	68 fe c5 01 c0       	push   0xc001c5fe
c001c81f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c823:	e8 04 ff ff ff       	call   c001c72c <Process::createThread(void (*)(void*), void*, int)>
c001c828:	83 c4 1c             	add    esp,0x1c
c001c82b:	c3                   	ret    

c001c82c <setupMultitasking(void (*)())>:
c001c82c:	56                   	push   esi
c001c82d:	53                   	push   ebx
c001c82e:	53                   	push   ebx
c001c82f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c833:	eb 10                	jmp    c001c845 <setupMultitasking(void (*)())+0x19>
c001c835:	83 ec 0c             	sub    esp,0xc
c001c838:	68 48 d7 02 c0       	push   0xc002d748
c001c83d:	e8 d0 a4 00 00       	call   c0026d12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c842:	83 c4 10             	add    esp,0x10
c001c845:	83 ec 0c             	sub    esp,0xc
c001c848:	68 48 d7 02 c0       	push   0xc002d748
c001c84d:	e8 a4 a4 00 00       	call   c0026cf6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c852:	83 c4 10             	add    esp,0x10
c001c855:	84 c0                	test   al,al
c001c857:	74 dc                	je     c001c835 <setupMultitasking(void (*)())+0x9>
c001c859:	83 ec 0c             	sub    esp,0xc
c001c85c:	68 3f 07 00 00       	push   0x73f
c001c861:	e8 6e 2c ff ff       	call   c000f4d4 <malloc>
c001c866:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001c86d:	89 c3                	mov    ebx,eax
c001c86f:	6a 00                	push   0x0
c001c871:	68 5b a0 02 c0       	push   0xc002a05b
c001c876:	6a 01                	push   0x1
c001c878:	50                   	push   eax
c001c879:	e8 b0 fb ff ff       	call   c001c42e <Process::Process(bool, char const*, Process*, char**)>
c001c87e:	83 c4 18             	add    esp,0x18
c001c881:	89 1d 54 d7 02 c0    	mov    DWORD PTR ds:0xc002d754,ebx
c001c887:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001c88d:	68 7c a1 02 c0       	push   0xc002a17c
c001c892:	e8 0a 5e ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001c897:	58                   	pop    eax
c001c898:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001c89e:	e8 c0 3f ff ff       	call   c0010863 <setActiveTerminal(VgaText*)>
c001c8a3:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001c8ab:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001c8b1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c8b4:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001c8be:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001c8c4:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001c8ca:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001c8d4:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001c8de:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001c8e8:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001c8ee:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001c8f4:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001c8fe:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001c904:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001c90e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001c914:	5a                   	pop    edx
c001c915:	59                   	pop    ecx
c001c916:	68 57 a0 02 c0       	push   0xc002a057
c001c91b:	50                   	push   eax
c001c91c:	e8 09 3e fe ff       	call   c000072a <strcpy>
c001c921:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001c928:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001c92c:	83 c4 14             	add    esp,0x14
c001c92f:	5b                   	pop    ebx
c001c930:	5e                   	pop    esi
c001c931:	e9 d3 39 fe ff       	jmp    c0000309 <switchToThreadASMFirstTime>

c001c936 <schedule()>:
c001c936:	a1 28 d7 02 c0       	mov    eax,ds:0xc002d728
c001c93b:	85 c0                	test   eax,eax
c001c93d:	74 0b                	je     c001c94a <schedule()+0x14>
c001c93f:	c7 05 24 d7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d724,0x1
c001c949:	c3                   	ret    
c001c94a:	53                   	push   ebx
c001c94b:	83 ec 14             	sub    esp,0x14
c001c94e:	68 48 d7 02 c0       	push   0xc002d748
c001c953:	e8 9e a3 00 00       	call   c0026cf6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c958:	83 c4 10             	add    esp,0x10
c001c95b:	84 c0                	test   al,al
c001c95d:	75 38                	jne    c001c997 <schedule()+0x61>
c001c95f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c964:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c967:	4a                   	dec    edx
c001c968:	74 32                	je     c001c99c <schedule()+0x66>
c001c96a:	83 ec 0c             	sub    esp,0xc
c001c96d:	68 48 d7 02 c0       	push   0xc002d748
c001c972:	e8 77 a3 00 00       	call   c0026cee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c977:	c7 04 24 48 d7 02 c0 	mov    DWORD PTR [esp],0xc002d748
c001c97e:	89 c3                	mov    ebx,eax
c001c980:	e8 8d a3 00 00       	call   c0026d12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c985:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001c98c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c98f:	e8 07 fd ff ff       	call   c001c69b <switchToThread(ThreadControlBlock*)>
c001c994:	83 c4 10             	add    esp,0x10
c001c997:	83 c4 08             	add    esp,0x8
c001c99a:	5b                   	pop    ebx
c001c99b:	c3                   	ret    
c001c99c:	83 ec 08             	sub    esp,0x8
c001c99f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001c9a6:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001c9ac:	68 48 d7 02 c0       	push   0xc002d748
c001c9b1:	e8 0a a4 00 00       	call   c0026dc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c9b6:	83 c4 10             	add    esp,0x10
c001c9b9:	eb af                	jmp    c001c96a <schedule()+0x34>

c001c9bb <unlockStuff()>:
c001c9bb:	a1 28 d7 02 c0       	mov    eax,ds:0xc002d728
c001c9c0:	48                   	dec    eax
c001c9c1:	a3 28 d7 02 c0       	mov    ds:0xc002d728,eax
c001c9c6:	75 09                	jne    c001c9d1 <unlockStuff()+0x16>
c001c9c8:	a1 24 d7 02 c0       	mov    eax,ds:0xc002d724
c001c9cd:	85 c0                	test   eax,eax
c001c9cf:	75 05                	jne    c001c9d6 <unlockStuff()+0x1b>
c001c9d1:	e9 15 fc ff ff       	jmp    c001c5eb <enableIRQs()>
c001c9d6:	83 ec 0c             	sub    esp,0xc
c001c9d9:	c7 05 24 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d724,0x0
c001c9e3:	e8 4e ff ff ff       	call   c001c936 <schedule()>
c001c9e8:	83 c4 0c             	add    esp,0xc
c001c9eb:	e9 fb fb ff ff       	jmp    c001c5eb <enableIRQs()>

c001c9f0 <Semaphore::tryAcquire()>:
c001c9f0:	83 ec 0c             	sub    esp,0xc
c001c9f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9f7:	e8 25 fc ff ff       	call   c001c621 <lockStuff()>
c001c9fc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001c9ff:	3b 10                	cmp    edx,DWORD PTR [eax]
c001ca01:	7c 0b                	jl     c001ca0e <Semaphore::tryAcquire()+0x1e>
c001ca03:	e8 b3 ff ff ff       	call   c001c9bb <unlockStuff()>
c001ca08:	31 c0                	xor    eax,eax
c001ca0a:	83 c4 0c             	add    esp,0xc
c001ca0d:	c3                   	ret    
c001ca0e:	42                   	inc    edx
c001ca0f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ca12:	e8 a4 ff ff ff       	call   c001c9bb <unlockStuff()>
c001ca17:	b0 01                	mov    al,0x1
c001ca19:	83 c4 0c             	add    esp,0xc
c001ca1c:	c3                   	ret    
c001ca1d:	90                   	nop

c001ca1e <Semaphore::assertLocked(char const*)>:
c001ca1e:	83 ec 0c             	sub    esp,0xc
c001ca21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca25:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ca29:	e8 f3 fb ff ff       	call   c001c621 <lockStuff()>
c001ca2e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ca30:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001ca33:	7c 05                	jl     c001ca3a <Semaphore::assertLocked(char const*)+0x1c>
c001ca35:	83 c4 0c             	add    esp,0xc
c001ca38:	eb 81                	jmp    c001c9bb <unlockStuff()>
c001ca3a:	83 ec 0c             	sub    esp,0xc
c001ca3d:	52                   	push   edx
c001ca3e:	e8 39 cb ff ff       	call   c001957c <Krnl::panic(char const*)>
c001ca43:	83 c4 10             	add    esp,0x10
c001ca46:	83 c4 0c             	add    esp,0xc
c001ca49:	e9 6d ff ff ff       	jmp    c001c9bb <unlockStuff()>

c001ca4e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001ca4e:	83 ec 0c             	sub    esp,0xc
c001ca51:	e8 8f fb ff ff       	call   c001c5e5 <getIRQNestingLevel()>
c001ca56:	83 ec 08             	sub    esp,0x8
c001ca59:	50                   	push   eax
c001ca5a:	68 b0 a1 02 c0       	push   0xc002a1b0
c001ca5f:	e8 3d 5c ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001ca64:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ca68:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca6d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca70:	e8 c1 fe ff ff       	call   c001c936 <schedule()>
c001ca75:	e8 82 fb ff ff       	call   c001c5fc <unlockScheduler()>
c001ca7a:	e8 66 fb ff ff       	call   c001c5e5 <getIRQNestingLevel()>
c001ca7f:	5a                   	pop    edx
c001ca80:	59                   	pop    ecx
c001ca81:	50                   	push   eax
c001ca82:	68 e4 a1 02 c0       	push   0xc002a1e4
c001ca87:	e8 15 5c ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001ca8c:	83 c4 1c             	add    esp,0x1c
c001ca8f:	c3                   	ret    

c001ca90 <blockTask(TaskState)>:
c001ca90:	83 ec 0c             	sub    esp,0xc
c001ca93:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ca97:	e8 5e fb ff ff       	call   c001c5fa <lockScheduler()>
c001ca9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001caa1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001caa4:	e8 8d fe ff ff       	call   c001c936 <schedule()>
c001caa9:	83 c4 0c             	add    esp,0xc
c001caac:	e9 4b fb ff ff       	jmp    c001c5fc <unlockScheduler()>

c001cab1 <waitTask(int, int*, int)>:
c001cab1:	83 ec 18             	sub    esp,0x18
c001cab4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cab9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cabd:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001cac0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cac4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cac9:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001cacc:	6a 07                	push   0x7
c001cace:	e8 bd ff ff ff       	call   c001ca90 <blockTask(TaskState)>
c001cad3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cad8:	83 c4 10             	add    esp,0x10
c001cadb:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001cade:	85 d2                	test   edx,edx
c001cae0:	74 0a                	je     c001caec <waitTask(int, int*, int)+0x3b>
c001cae2:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001cae5:	89 02                	mov    DWORD PTR [edx],eax
c001cae7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001caec:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001caef:	83 c4 0c             	add    esp,0xc
c001caf2:	c3                   	ret    

c001caf3 <nanoSleepUntil(unsigned long long)>:
c001caf3:	83 ec 0c             	sub    esp,0xc
c001caf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cafa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cafe:	3b 05 90 c8 02 c0    	cmp    eax,DWORD PTR ds:0xc002c890
c001cb04:	89 d1                	mov    ecx,edx
c001cb06:	1b 0d 94 c8 02 c0    	sbb    ecx,DWORD PTR ds:0xc002c894
c001cb0c:	73 04                	jae    c001cb12 <nanoSleepUntil(unsigned long long)+0x1f>
c001cb0e:	83 c4 0c             	add    esp,0xc
c001cb11:	c3                   	ret    
c001cb12:	e8 0a fb ff ff       	call   c001c621 <lockStuff()>
c001cb17:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001cb1d:	83 ec 08             	sub    esp,0x8
c001cb20:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001cb23:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001cb26:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001cb2c:	68 3c d7 02 c0       	push   0xc002d73c
c001cb31:	e8 8a a2 00 00       	call   c0026dc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cb36:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001cb3d:	e8 4e ff ff ff       	call   c001ca90 <blockTask(TaskState)>
c001cb42:	83 c4 1c             	add    esp,0x1c
c001cb45:	e9 71 fe ff ff       	jmp    c001c9bb <unlockStuff()>

c001cb4a <nanoSleep(unsigned long long)>:
c001cb4a:	a1 90 c8 02 c0       	mov    eax,ds:0xc002c890
c001cb4f:	8b 15 94 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c894
c001cb55:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001cb59:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001cb5d:	eb 94                	jmp    c001caf3 <nanoSleepUntil(unsigned long long)>

c001cb5f <sleep(unsigned long long)>:
c001cb5f:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001cb67:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001cb6c:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001cb70:	01 ca                	add    edx,ecx
c001cb72:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb76:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001cb7a:	eb ce                	jmp    c001cb4a <nanoSleep(unsigned long long)>

c001cb7c <Semaphore::acquire()>:
c001cb7c:	83 ec 0c             	sub    esp,0xc
c001cb7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb83:	e8 99 fa ff ff       	call   c001c621 <lockStuff()>
c001cb88:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001cb8b:	3b 10                	cmp    edx,DWORD PTR [eax]
c001cb8d:	7d 0c                	jge    c001cb9b <Semaphore::acquire()+0x1f>
c001cb8f:	42                   	inc    edx
c001cb90:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001cb93:	83 c4 0c             	add    esp,0xc
c001cb96:	e9 20 fe ff ff       	jmp    c001c9bb <unlockStuff()>
c001cb9b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001cba1:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001cba8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001cbab:	85 d2                	test   edx,edx
c001cbad:	74 2a                	je     c001cbd9 <Semaphore::acquire()+0x5d>
c001cbaf:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001cbb2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001cbb8:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001cbbb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001cbc1:	83 ec 0c             	sub    esp,0xc
c001cbc4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cbc7:	6a 05                	push   0x5
c001cbc9:	e8 c2 fe ff ff       	call   c001ca90 <blockTask(TaskState)>
c001cbce:	83 c4 10             	add    esp,0x10
c001cbd1:	83 c4 0c             	add    esp,0xc
c001cbd4:	e9 e2 fd ff ff       	jmp    c001c9bb <unlockStuff()>
c001cbd9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001cbdf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cbe2:	eb d7                	jmp    c001cbbb <Semaphore::acquire()+0x3f>

c001cbe4 <taskReturned>:
c001cbe4:	83 ec 18             	sub    esp,0x18
c001cbe7:	68 18 a2 02 c0       	push   0xc002a218
c001cbec:	e8 8b c9 ff ff       	call   c001957c <Krnl::panic(char const*)>
c001cbf1:	83 c4 10             	add    esp,0x10
c001cbf4:	83 ec 0c             	sub    esp,0xc
c001cbf7:	6a 02                	push   0x2
c001cbf9:	e8 92 fe ff ff       	call   c001ca90 <blockTask(TaskState)>
c001cbfe:	e8 f7 f9 ff ff       	call   c001c5fa <lockScheduler()>
c001cc03:	e8 2e fd ff ff       	call   c001c936 <schedule()>
c001cc08:	e8 ef f9 ff ff       	call   c001c5fc <unlockScheduler()>
c001cc0d:	83 c4 10             	add    esp,0x10
c001cc10:	eb e2                	jmp    c001cbf4 <taskReturned+0x10>

c001cc12 <unblockTask(ThreadControlBlock*)>:
c001cc12:	53                   	push   ebx
c001cc13:	83 ec 08             	sub    esp,0x8
c001cc16:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cc1a:	e8 db f9 ff ff       	call   c001c5fa <lockScheduler()>
c001cc1f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cc22:	85 c0                	test   eax,eax
c001cc24:	74 5c                	je     c001cc82 <unblockTask(ThreadControlBlock*)+0x70>
c001cc26:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cc29:	48                   	dec    eax
c001cc2a:	74 31                	je     c001cc5d <unblockTask(ThreadControlBlock*)+0x4b>
c001cc2c:	83 ec 0c             	sub    esp,0xc
c001cc2f:	68 48 d7 02 c0       	push   0xc002d748
c001cc34:	e8 b5 a0 00 00       	call   c0026cee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cc39:	83 c4 10             	add    esp,0x10
c001cc3c:	85 c0                	test   eax,eax
c001cc3e:	75 17                	jne    c001cc57 <unblockTask(ThreadControlBlock*)+0x45>
c001cc40:	eb 65                	jmp    c001cca7 <unblockTask(ThreadControlBlock*)+0x95>
c001cc42:	83 ec 08             	sub    esp,0x8
c001cc45:	50                   	push   eax
c001cc46:	68 48 d7 02 c0       	push   0xc002d748
c001cc4b:	e8 78 a3 00 00       	call   c0026fc8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001cc50:	83 c4 10             	add    esp,0x10
c001cc53:	85 c0                	test   eax,eax
c001cc55:	74 50                	je     c001cca7 <unblockTask(ThreadControlBlock*)+0x95>
c001cc57:	39 c3                	cmp    ebx,eax
c001cc59:	75 e7                	jne    c001cc42 <unblockTask(ThreadControlBlock*)+0x30>
c001cc5b:	eb 1c                	jmp    c001cc79 <unblockTask(ThreadControlBlock*)+0x67>
c001cc5d:	83 ec 0c             	sub    esp,0xc
c001cc60:	68 08 a3 02 c0       	push   0xc002a308
c001cc65:	e8 37 5a ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001cc6a:	c7 04 24 94 a2 02 c0 	mov    DWORD PTR [esp],0xc002a294
c001cc71:	e8 2b 5a ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001cc76:	83 c4 10             	add    esp,0x10
c001cc79:	83 c4 08             	add    esp,0x8
c001cc7c:	5b                   	pop    ebx
c001cc7d:	e9 7a f9 ff ff       	jmp    c001c5fc <unlockScheduler()>
c001cc82:	83 ec 0c             	sub    esp,0xc
c001cc85:	68 4c a2 02 c0       	push   0xc002a24c
c001cc8a:	e8 12 5a ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001cc8f:	c7 04 24 94 a2 02 c0 	mov    DWORD PTR [esp],0xc002a294
c001cc96:	e8 06 5a ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001cc9b:	83 c4 10             	add    esp,0x10
c001cc9e:	83 c4 08             	add    esp,0x8
c001cca1:	5b                   	pop    ebx
c001cca2:	e9 55 f9 ff ff       	jmp    c001c5fc <unlockScheduler()>
c001cca7:	83 ec 08             	sub    esp,0x8
c001ccaa:	53                   	push   ebx
c001ccab:	68 48 d7 02 c0       	push   0xc002d748
c001ccb0:	e8 0b a1 00 00       	call   c0026dc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ccb5:	83 c4 10             	add    esp,0x10
c001ccb8:	83 c4 08             	add    esp,0x8
c001ccbb:	5b                   	pop    ebx
c001ccbc:	e9 3b f9 ff ff       	jmp    c001c5fc <unlockScheduler()>

c001ccc1 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001ccc1:	55                   	push   ebp
c001ccc2:	57                   	push   edi
c001ccc3:	56                   	push   esi
c001ccc4:	53                   	push   ebx
c001ccc5:	83 ec 1c             	sub    esp,0x1c
c001ccc8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cccc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001cccf:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001ccd5:	85 ff                	test   edi,edi
c001ccd7:	7e 20                	jle    c001ccf9 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001ccd9:	31 f6                	xor    esi,esi
c001ccdb:	83 ec 0c             	sub    esp,0xc
c001ccde:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001cce5:	46                   	inc    esi
c001cce6:	e8 f9 27 ff ff       	call   c000f4e4 <free>
c001cceb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ccee:	83 c4 10             	add    esp,0x10
c001ccf1:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001ccf7:	7f e2                	jg     c001ccdb <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001ccf9:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001cd03:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001cd08:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001cd0b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001cd0e:	d3 c0                	rol    eax,cl
c001cd10:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001cd17:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001cd1a:	89 f7                	mov    edi,esi
c001cd1c:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001cd24:	0f 85 74 01 00 00    	jne    c001ce9e <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001cd2a:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001cd30:	85 ed                	test   ebp,ebp
c001cd32:	74 1b                	je     c001cd4f <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001cd34:	83 ec 0c             	sub    esp,0xc
c001cd37:	55                   	push   ebp
c001cd38:	e8 cf c6 ff ff       	call   c001940c <EnvVarContainer::~EnvVarContainer()>
c001cd3d:	59                   	pop    ecx
c001cd3e:	5e                   	pop    esi
c001cd3f:	6a 0c                	push   0xc
c001cd41:	55                   	push   ebp
c001cd42:	e8 7a 58 ff ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c001cd47:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001cd4a:	83 c4 10             	add    esp,0x10
c001cd4d:	89 f7                	mov    edi,esi
c001cd4f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001cd55:	85 c0                	test   eax,eax
c001cd57:	0f 84 aa 00 00 00    	je     c001ce07 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001cd5d:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001cd60:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cd64:	31 c9                	xor    ecx,ecx
c001cd66:	eb 10                	jmp    c001cd78 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001cd68:	41                   	inc    ecx
c001cd69:	83 f9 10             	cmp    ecx,0x10
c001cd6c:	0f 84 95 00 00 00    	je     c001ce07 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001cd72:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001cd78:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001cd7f:	d3 fa                	sar    edx,cl
c001cd81:	83 e2 01             	and    edx,0x1
c001cd84:	74 e2                	je     c001cd68 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001cd86:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001cd89:	01 ca                	add    edx,ecx
c001cd8b:	89 d5                	mov    ebp,edx
c001cd8d:	c1 e5 05             	shl    ebp,0x5
c001cd90:	01 ea                	add    edx,ebp
c001cd92:	01 d0                	add    eax,edx
c001cd94:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001cd9a:	83 fd 07             	cmp    ebp,0x7
c001cd9d:	75 c9                	jne    c001cd68 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001cd9f:	05 40 02 00 00       	add    eax,0x240
c001cda4:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001cda7:	83 fd ff             	cmp    ebp,0xffffffff
c001cdaa:	0f 8c 08 01 00 00    	jl     c001ceb8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001cdb0:	0f 84 b9 01 00 00    	je     c001cf6f <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001cdb6:	85 ed                	test   ebp,ebp
c001cdb8:	0f 84 a0 01 00 00    	je     c001cf5e <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001cdbe:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001cdc0:	75 a6                	jne    c001cd68 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001cdc2:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001cdc8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cdcc:	01 d0                	add    eax,edx
c001cdce:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001cdd2:	83 ec 0c             	sub    esp,0xc
c001cdd5:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001cddb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001cdde:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cde4:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001cdeb:	50                   	push   eax
c001cdec:	e8 21 fe ff ff       	call   c001cc12 <unblockTask(ThreadControlBlock*)>
c001cdf1:	83 c4 10             	add    esp,0x10
c001cdf4:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001cdf7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cdfb:	89 f7                	mov    edi,esi
c001cdfd:	41                   	inc    ecx
c001cdfe:	83 f9 10             	cmp    ecx,0x10
c001ce01:	0f 85 6b ff ff ff    	jne    c001cd72 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001ce07:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001ce0d:	85 c0                	test   eax,eax
c001ce0f:	74 5d                	je     c001ce6e <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001ce11:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001ce17:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001ce1d:	74 4f                	je     c001ce6e <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001ce1f:	83 ec 0c             	sub    esp,0xc
c001ce22:	68 48 d7 02 c0       	push   0xc002d748
c001ce27:	e8 c2 9e 00 00       	call   c0026cee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ce2c:	c7 04 24 48 d7 02 c0 	mov    DWORD PTR [esp],0xc002d748
c001ce33:	89 c7                	mov    edi,eax
c001ce35:	e8 bc 9e 00 00       	call   c0026cf6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ce3a:	83 c4 10             	add    esp,0x10
c001ce3d:	84 c0                	test   al,al
c001ce3f:	0f 84 e4 00 00 00    	je     c001cf29 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001ce45:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ce48:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ce4e:	85 d2                	test   edx,edx
c001ce50:	74 0f                	je     c001ce61 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001ce52:	83 ec 0c             	sub    esp,0xc
c001ce55:	8b 02                	mov    eax,DWORD PTR [edx]
c001ce57:	52                   	push   edx
c001ce58:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ce5b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ce5e:	83 c4 10             	add    esp,0x10
c001ce61:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001ce6b:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001ce6e:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001ce74:	85 db                	test   ebx,ebx
c001ce76:	74 16                	je     c001ce8e <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001ce78:	83 ec 0c             	sub    esp,0xc
c001ce7b:	53                   	push   ebx
c001ce7c:	e8 8f 4d ff ff       	call   c0011c10 <VAS::~VAS()>
c001ce81:	58                   	pop    eax
c001ce82:	5a                   	pop    edx
c001ce83:	6a 10                	push   0x10
c001ce85:	53                   	push   ebx
c001ce86:	e8 36 57 ff ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c001ce8b:	83 c4 10             	add    esp,0x10
c001ce8e:	83 ec 0c             	sub    esp,0xc
c001ce91:	68 62 a0 02 c0       	push   0xc002a062
c001ce96:	e8 06 58 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001ce9b:	83 c4 10             	add    esp,0x10
c001ce9e:	83 ec 08             	sub    esp,0x8
c001cea1:	68 3f 07 00 00       	push   0x73f
c001cea6:	68 70 a0 02 c0       	push   0xc002a070
c001ceab:	e8 f1 57 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001ceb0:	83 c4 2c             	add    esp,0x2c
c001ceb3:	5b                   	pop    ebx
c001ceb4:	5e                   	pop    esi
c001ceb5:	5f                   	pop    edi
c001ceb6:	5d                   	pop    ebp
c001ceb7:	c3                   	ret    
c001ceb8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cebc:	83 ec 0c             	sub    esp,0xc
c001cebf:	68 4c a3 02 c0       	push   0xc002a34c
c001cec4:	e8 b3 c6 ff ff       	call   c001957c <Krnl::panic(char const*)>
c001cec9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001cecc:	83 c4 10             	add    esp,0x10
c001cecf:	89 f7                	mov    edi,esi
c001ced1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ced5:	e9 8e fe ff ff       	jmp    c001cd68 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ceda:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001cee0:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001cee6:	75 1c                	jne    c001cf04 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001cee8:	83 ec 0c             	sub    esp,0xc
c001ceeb:	68 b4 a3 02 c0       	push   0xc002a3b4
c001cef0:	e8 ac 57 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001cef5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001cefc:	e8 8f fb ff ff       	call   c001ca90 <blockTask(TaskState)>
c001cf01:	83 c4 10             	add    esp,0x10
c001cf04:	83 ec 08             	sub    esp,0x8
c001cf07:	56                   	push   esi
c001cf08:	68 48 d7 02 c0       	push   0xc002d748
c001cf0d:	e8 ae 9e 00 00       	call   c0026dc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cf12:	c7 04 24 48 d7 02 c0 	mov    DWORD PTR [esp],0xc002d748
c001cf19:	e8 d0 9d 00 00       	call   c0026cee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cf1e:	83 c4 10             	add    esp,0x10
c001cf21:	39 f8                	cmp    eax,edi
c001cf23:	0f 84 1c ff ff ff    	je     c001ce45 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001cf29:	83 ec 0c             	sub    esp,0xc
c001cf2c:	68 48 d7 02 c0       	push   0xc002d748
c001cf31:	e8 b8 9d 00 00       	call   c0026cee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cf36:	c7 04 24 48 d7 02 c0 	mov    DWORD PTR [esp],0xc002d748
c001cf3d:	89 c6                	mov    esi,eax
c001cf3f:	e8 ce 9d 00 00       	call   c0026d12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001cf44:	83 c4 10             	add    esp,0x10
c001cf47:	39 f3                	cmp    ebx,esi
c001cf49:	74 b9                	je     c001cf04 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001cf4b:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001cf4e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001cf51:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001cf57:	75 ab                	jne    c001cf04 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001cf59:	e9 7c ff ff ff       	jmp    c001ceda <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001cf5e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cf62:	83 ec 0c             	sub    esp,0xc
c001cf65:	68 80 a3 02 c0       	push   0xc002a380
c001cf6a:	e9 55 ff ff ff       	jmp    c001cec4 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001cf6f:	8b 36                	mov    esi,DWORD PTR [esi]
c001cf71:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cf75:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001cf78:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001cf7b:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001cf81:	01 d7                	add    edi,edx
c001cf83:	89 f8                	mov    eax,edi
c001cf85:	e9 44 fe ff ff       	jmp    c001cdce <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001cf8a <cleanerTaskFunction(void*)>:
c001cf8a:	53                   	push   ebx
c001cf8b:	83 ec 08             	sub    esp,0x8
c001cf8e:	e8 69 f6 ff ff       	call   c001c5fc <unlockScheduler()>
c001cf93:	e8 62 f6 ff ff       	call   c001c5fa <lockScheduler()>
c001cf98:	80 3d 0c d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d70c,0x0
c001cf9f:	0f 85 8e 00 00 00    	jne    c001d033 <cleanerTaskFunction(void*)+0xa9>
c001cfa5:	83 ec 0c             	sub    esp,0xc
c001cfa8:	6a 02                	push   0x2
c001cfaa:	e8 9f fa ff ff       	call   c001ca4e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001cfaf:	83 c4 10             	add    esp,0x10
c001cfb2:	c6 05 0c d7 02 c0 00 	mov    BYTE PTR ds:0xc002d70c,0x0
c001cfb9:	e8 63 f6 ff ff       	call   c001c621 <lockStuff()>
c001cfbe:	e8 37 f6 ff ff       	call   c001c5fa <lockScheduler()>
c001cfc3:	83 ec 0c             	sub    esp,0xc
c001cfc6:	68 30 d7 02 c0       	push   0xc002d730
c001cfcb:	e8 26 9d 00 00       	call   c0026cf6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cfd0:	83 c4 10             	add    esp,0x10
c001cfd3:	84 c0                	test   al,al
c001cfd5:	75 40                	jne    c001d017 <cleanerTaskFunction(void*)+0x8d>
c001cfd7:	83 ec 0c             	sub    esp,0xc
c001cfda:	68 30 d7 02 c0       	push   0xc002d730
c001cfdf:	e8 0a 9d 00 00       	call   c0026cee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cfe4:	c7 04 24 30 d7 02 c0 	mov    DWORD PTR [esp],0xc002d730
c001cfeb:	89 c3                	mov    ebx,eax
c001cfed:	e8 20 9d 00 00       	call   c0026d12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001cff2:	c7 04 24 86 a0 02 c0 	mov    DWORD PTR [esp],0xc002a086
c001cff9:	e8 a3 56 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001cffe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d001:	e8 bb fc ff ff       	call   c001ccc1 <cleanupTerminatedTask(ThreadControlBlock*)>
c001d006:	c7 04 24 9f a0 02 c0 	mov    DWORD PTR [esp],0xc002a09f
c001d00d:	e8 8f 56 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001d012:	83 c4 10             	add    esp,0x10
c001d015:	eb ac                	jmp    c001cfc3 <cleanerTaskFunction(void*)+0x39>
c001d017:	e8 e0 f5 ff ff       	call   c001c5fc <unlockScheduler()>
c001d01c:	e8 9a f9 ff ff       	call   c001c9bb <unlockStuff()>
c001d021:	e8 d4 f5 ff ff       	call   c001c5fa <lockScheduler()>
c001d026:	80 3d 0c d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d70c,0x0
c001d02d:	0f 84 72 ff ff ff    	je     c001cfa5 <cleanerTaskFunction(void*)+0x1b>
c001d033:	e8 c4 f5 ff ff       	call   c001c5fc <unlockScheduler()>
c001d038:	e9 75 ff ff ff       	jmp    c001cfb2 <cleanerTaskFunction(void*)+0x28>

c001d03d <terminateTask(int)>:
c001d03d:	83 ec 14             	sub    esp,0x14
c001d040:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d045:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d048:	83 c0 0c             	add    eax,0xc
c001d04b:	50                   	push   eax
c001d04c:	68 dc a3 02 c0       	push   0xc002a3dc
c001d051:	e8 4b 56 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001d056:	e8 c6 f5 ff ff       	call   c001c621 <lockStuff()>
c001d05b:	e8 9a f5 ff ff       	call   c001c5fa <lockScheduler()>
c001d060:	c7 04 24 b2 a0 02 c0 	mov    DWORD PTR [esp],0xc002a0b2
c001d067:	e8 35 56 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001d06c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d070:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d075:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001d078:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d07d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001d080:	5a                   	pop    edx
c001d081:	59                   	pop    ecx
c001d082:	50                   	push   eax
c001d083:	68 30 d7 02 c0       	push   0xc002d730
c001d088:	e8 33 9d 00 00       	call   c0026dc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d08d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d092:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001d099:	c7 04 24 cc a0 02 c0 	mov    DWORD PTR [esp],0xc002a0cc
c001d0a0:	e8 fc 55 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001d0a5:	83 c4 10             	add    esp,0x10
c001d0a8:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c001d0ad:	85 c0                	test   eax,eax
c001d0af:	74 5a                	je     c001d10b <terminateTask(int)+0xce>
c001d0b1:	83 ec 0c             	sub    esp,0xc
c001d0b4:	68 e6 a0 02 c0       	push   0xc002a0e6
c001d0b9:	e8 e3 55 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001d0be:	58                   	pop    eax
c001d0bf:	c6 05 0c d7 02 c0 01 	mov    BYTE PTR ds:0xc002d70c,0x1
c001d0c6:	ff 35 08 d7 02 c0    	push   DWORD PTR ds:0xc002d708
c001d0cc:	e8 41 fb ff ff       	call   c001cc12 <unblockTask(ThreadControlBlock*)>
c001d0d1:	c7 04 24 00 a1 02 c0 	mov    DWORD PTR [esp],0xc002a100
c001d0d8:	e8 c4 55 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001d0dd:	83 c4 10             	add    esp,0x10
c001d0e0:	e8 17 f5 ff ff       	call   c001c5fc <unlockScheduler()>
c001d0e5:	e8 d1 f8 ff ff       	call   c001c9bb <unlockStuff()>
c001d0ea:	83 ec 0c             	sub    esp,0xc
c001d0ed:	68 38 a1 02 c0       	push   0xc002a138
c001d0f2:	e8 aa 55 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001d0f7:	83 c4 10             	add    esp,0x10
c001d0fa:	e8 fb f4 ff ff       	call   c001c5fa <lockScheduler()>
c001d0ff:	e8 32 f8 ff ff       	call   c001c936 <schedule()>
c001d104:	e8 f3 f4 ff ff       	call   c001c5fc <unlockScheduler()>
c001d109:	eb ef                	jmp    c001d0fa <terminateTask(int)+0xbd>
c001d10b:	83 ec 0c             	sub    esp,0xc
c001d10e:	68 1a a1 02 c0       	push   0xc002a11a
c001d113:	e8 89 55 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001d118:	83 c4 10             	add    esp,0x10
c001d11b:	eb c3                	jmp    c001d0e0 <terminateTask(int)+0xa3>

c001d11d <Thr::terminateFromIRQ(int)>:
c001d11d:	83 ec 18             	sub    esp,0x18
c001d120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d124:	e8 14 ff ff ff       	call   c001d03d <terminateTask(int)>
c001d129:	90                   	nop

c001d12a <Semaphore::release()>:
c001d12a:	83 ec 0c             	sub    esp,0xc
c001d12d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d131:	e8 eb f4 ff ff       	call   c001c621 <lockStuff()>
c001d136:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d139:	85 d2                	test   edx,edx
c001d13b:	74 1a                	je     c001d157 <Semaphore::release()+0x2d>
c001d13d:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001d140:	83 ec 0c             	sub    esp,0xc
c001d143:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001d146:	52                   	push   edx
c001d147:	e8 c6 fa ff ff       	call   c001cc12 <unblockTask(ThreadControlBlock*)>
c001d14c:	83 c4 10             	add    esp,0x10
c001d14f:	83 c4 0c             	add    esp,0xc
c001d152:	e9 64 f8 ff ff       	jmp    c001c9bb <unlockStuff()>
c001d157:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001d15a:	83 c4 0c             	add    esp,0xc
c001d15d:	e9 59 f8 ff ff       	jmp    c001c9bb <unlockStuff()>

c001d162 <__static_initialization_and_destruction_0(int, int)>:
c001d162:	83 ec 0c             	sub    esp,0xc
c001d165:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001d16a:	0f 85 88 00 00 00    	jne    c001d1f8 <__static_initialization_and_destruction_0(int, int)+0x96>
c001d170:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001d178:	75 7e                	jne    c001d1f8 <__static_initialization_and_destruction_0(int, int)+0x96>
c001d17a:	83 ec 0c             	sub    esp,0xc
c001d17d:	68 48 d7 02 c0       	push   0xc002d748
c001d182:	e8 e9 9d 00 00       	call   c0026f70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d187:	83 c4 10             	add    esp,0x10
c001d18a:	83 ec 04             	sub    esp,0x4
c001d18d:	68 3c b1 02 c0       	push   0xc002b13c
c001d192:	68 48 d7 02 c0       	push   0xc002d748
c001d197:	68 30 6f 02 c0       	push   0xc0026f30
c001d19c:	e8 9a 53 ff ff       	call   c001253b <__cxa_atexit>
c001d1a1:	83 c4 10             	add    esp,0x10
c001d1a4:	83 ec 0c             	sub    esp,0xc
c001d1a7:	68 3c d7 02 c0       	push   0xc002d73c
c001d1ac:	e8 bf 9d 00 00       	call   c0026f70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d1b1:	83 c4 10             	add    esp,0x10
c001d1b4:	83 ec 04             	sub    esp,0x4
c001d1b7:	68 3c b1 02 c0       	push   0xc002b13c
c001d1bc:	68 3c d7 02 c0       	push   0xc002d73c
c001d1c1:	68 30 6f 02 c0       	push   0xc0026f30
c001d1c6:	e8 70 53 ff ff       	call   c001253b <__cxa_atexit>
c001d1cb:	83 c4 10             	add    esp,0x10
c001d1ce:	83 ec 0c             	sub    esp,0xc
c001d1d1:	68 30 d7 02 c0       	push   0xc002d730
c001d1d6:	e8 95 9d 00 00       	call   c0026f70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d1db:	83 c4 10             	add    esp,0x10
c001d1de:	83 ec 04             	sub    esp,0x4
c001d1e1:	68 3c b1 02 c0       	push   0xc002b13c
c001d1e6:	68 30 d7 02 c0       	push   0xc002d730
c001d1eb:	68 30 6f 02 c0       	push   0xc0026f30
c001d1f0:	e8 46 53 ff ff       	call   c001253b <__cxa_atexit>
c001d1f5:	83 c4 10             	add    esp,0x10
c001d1f8:	90                   	nop
c001d1f9:	83 c4 0c             	add    esp,0xc
c001d1fc:	c3                   	ret    

c001d1fd <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001d1fd:	83 ec 0c             	sub    esp,0xc
c001d200:	83 ec 08             	sub    esp,0x8
c001d203:	68 ff ff 00 00       	push   0xffff
c001d208:	6a 01                	push   0x1
c001d20a:	e8 53 ff ff ff       	call   c001d162 <__static_initialization_and_destruction_0(int, int)>
c001d20f:	83 c4 10             	add    esp,0x10
c001d212:	83 c4 0c             	add    esp,0xc
c001d215:	c3                   	ret    

c001d216 <Vm::inbv(unsigned short)>:
c001d216:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d21a:	66 81 fa fe fe       	cmp    dx,0xfefe
c001d21f:	75 06                	jne    c001d227 <Vm::inbv(unsigned short)+0x11>
c001d221:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001d226:	c3                   	ret    
c001d227:	ec                   	in     al,dx
c001d228:	c3                   	ret    

c001d229 <Vm::outbv(unsigned short, unsigned char)>:
c001d229:	53                   	push   ebx
c001d22a:	83 ec 08             	sub    esp,0x8
c001d22d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d231:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d235:	66 81 fa fe fe       	cmp    dx,0xfefe
c001d23a:	75 38                	jne    c001d274 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001d23c:	0f b6 c3             	movzx  eax,bl
c001d23f:	51                   	push   ecx
c001d240:	51                   	push   ecx
c001d241:	50                   	push   eax
c001d242:	68 fb a3 02 c0       	push   0xc002a3fb
c001d247:	e8 55 54 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001d24c:	8b 15 8c d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d78c
c001d252:	83 c4 10             	add    esp,0x10
c001d255:	8d 42 01             	lea    eax,[edx+0x1]
c001d258:	88 9a a0 d7 02 c0    	mov    BYTE PTR [edx-0x3ffd2860],bl
c001d25e:	a3 8c d7 02 c0       	mov    ds:0xc002d78c,eax
c001d263:	83 f8 20             	cmp    eax,0x20
c001d266:	75 0f                	jne    c001d277 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001d268:	c7 05 8c d7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002d78c,0x1f
c001d272:	eb 03                	jmp    c001d277 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001d274:	88 d8                	mov    al,bl
c001d276:	ee                   	out    dx,al
c001d277:	83 c4 08             	add    esp,0x8
c001d27a:	5b                   	pop    ebx
c001d27b:	c3                   	ret    

c001d27c <Vm::realToLinear(unsigned short, unsigned short)>:
c001d27c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d281:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d286:	c1 e0 04             	shl    eax,0x4
c001d289:	01 d0                	add    eax,edx
c001d28b:	c3                   	ret    

c001d28c <Vm::getSegment(unsigned int)>:
c001d28c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d290:	c1 e8 10             	shr    eax,0x10
c001d293:	c3                   	ret    

c001d294 <Vm::getOffset(unsigned int)>:
c001d294:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d298:	c3                   	ret    

c001d299 <Vm::mainloop2()>:
c001d299:	83 ec 0c             	sub    esp,0xc
c001d29c:	e8 59 f3 ff ff       	call   c001c5fa <lockScheduler()>
c001d2a1:	83 ec 0c             	sub    esp,0xc
c001d2a4:	c6 05 85 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d785,0x1
c001d2ab:	6a 02                	push   0x2
c001d2ad:	e8 9c f7 ff ff       	call   c001ca4e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001d2b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d2b7:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001d2bb:	52                   	push   edx
c001d2bc:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001d2c0:	52                   	push   edx
c001d2c1:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001d2c5:	52                   	push   edx
c001d2c6:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001d2ca:	50                   	push   eax
c001d2cb:	e8 df 2f fe ff       	call   c00002af <goToVM86>
c001d2d0:	83 c4 2c             	add    esp,0x2c
c001d2d3:	c3                   	ret    

c001d2d4 <Vm::mainVm8086Loop(void*)>:
c001d2d4:	83 ec 0c             	sub    esp,0xc
c001d2d7:	e8 20 f3 ff ff       	call   c001c5fc <unlockScheduler()>
c001d2dc:	83 c4 0c             	add    esp,0xc
c001d2df:	eb b8                	jmp    c001d299 <Vm::mainloop2()>

c001d2e1 <Vm::mainloop3(unsigned long)>:
c001d2e1:	53                   	push   ebx
c001d2e2:	83 ec 08             	sub    esp,0x8
c001d2e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d2e9:	e8 0c f3 ff ff       	call   c001c5fa <lockScheduler()>
c001d2ee:	83 ec 0c             	sub    esp,0xc
c001d2f1:	89 1d 80 d7 02 c0    	mov    DWORD PTR ds:0xc002d780,ebx
c001d2f7:	6a 02                	push   0x2
c001d2f9:	c6 05 84 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d784,0x1
c001d300:	e8 49 f7 ff ff       	call   c001ca4e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001d305:	83 c4 18             	add    esp,0x18
c001d308:	5b                   	pop    ebx
c001d309:	eb 8e                	jmp    c001d299 <Vm::mainloop2()>

c001d30b <Vm::initialise8086()>:
c001d30b:	83 ec 0c             	sub    esp,0xc
c001d30e:	68 80 00 00 00       	push   0x80
c001d313:	6a 00                	push   0x0
c001d315:	68 d4 d2 01 c0       	push   0xc001d2d4
c001d31a:	ff 35 54 d7 02 c0    	push   DWORD PTR ds:0xc002d754
c001d320:	e8 07 f4 ff ff       	call   c001c72c <Process::createThread(void (*)(void*), void*, int)>
c001d325:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001d32c:	a3 88 d7 02 c0       	mov    ds:0xc002d788,eax
c001d331:	68 00 01 00 00       	push   0x100
c001d336:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c001d33b:	6a 00                	push   0x0
c001d33d:	6a 00                	push   0x0
c001d33f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001d345:	e8 26 4d ff ff       	call   c0012070 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001d34a:	83 c4 2c             	add    esp,0x2c
c001d34d:	c3                   	ret    

c001d34e <Vm::finish8086()>:
c001d34e:	53                   	push   ebx
c001d34f:	83 ec 08             	sub    esp,0x8
c001d352:	e8 a3 f2 ff ff       	call   c001c5fa <lockScheduler()>
c001d357:	80 3d 84 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d784,0x0
c001d35e:	75 0c                	jne    c001d36c <Vm::finish8086()+0x1e>
c001d360:	e8 d1 f5 ff ff       	call   c001c936 <schedule()>
c001d365:	e8 92 f2 ff ff       	call   c001c5fc <unlockScheduler()>
c001d36a:	eb e6                	jmp    c001d352 <Vm::finish8086()+0x4>
c001d36c:	83 ec 0c             	sub    esp,0xc
c001d36f:	8b 1d 80 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d780
c001d375:	ff 35 88 d7 02 c0    	push   DWORD PTR ds:0xc002d788
c001d37b:	c6 05 84 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d784,0x0
c001d382:	e8 8b f8 ff ff       	call   c001cc12 <unblockTask(ThreadControlBlock*)>
c001d387:	e8 70 f2 ff ff       	call   c001c5fc <unlockScheduler()>
c001d38c:	89 d8                	mov    eax,ebx
c001d38e:	83 c4 18             	add    esp,0x18
c001d391:	5b                   	pop    ebx
c001d392:	c3                   	ret    

c001d393 <Vm::getOutput8086(unsigned char*)>:
c001d393:	83 ec 10             	sub    esp,0x10
c001d396:	ff 35 8c d7 02 c0    	push   DWORD PTR ds:0xc002d78c
c001d39c:	68 a0 d7 02 c0       	push   0xc002d7a0
c001d3a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3a5:	e8 ab 32 fe ff       	call   c0000655 <memcpy>
c001d3aa:	a1 8c d7 02 c0       	mov    eax,ds:0xc002d78c
c001d3af:	c7 05 8c d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d78c,0x0
c001d3b9:	83 c4 1c             	add    esp,0x1c
c001d3bc:	c3                   	ret    

c001d3bd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001d3bd:	55                   	push   ebp
c001d3be:	57                   	push   edi
c001d3bf:	56                   	push   esi
c001d3c0:	53                   	push   ebx
c001d3c1:	83 ec 2c             	sub    esp,0x2c
c001d3c4:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d3c8:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001d3cc:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001d3d0:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001d3d4:	e8 21 f2 ff ff       	call   c001c5fa <lockScheduler()>
c001d3d9:	a0 85 d7 02 c0       	mov    al,ds:0xc002d785
c001d3de:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d3e2:	84 c0                	test   al,al
c001d3e4:	75 0c                	jne    c001d3f2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001d3e6:	e8 4b f5 ff ff       	call   c001c936 <schedule()>
c001d3eb:	e8 0c f2 ff ff       	call   c001c5fc <unlockScheduler()>
c001d3f0:	eb e2                	jmp    c001d3d4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001d3f2:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c001d3f7:	c7 05 8c d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d78c,0x0
c001d401:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001d405:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001d409:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001d40d:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001d411:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001d415:	50                   	push   eax
c001d416:	6a 20                	push   0x20
c001d418:	6a 00                	push   0x0
c001d41a:	68 a0 d7 02 c0       	push   0xc002d7a0
c001d41f:	e8 67 32 fe ff       	call   c000068b <memset>
c001d424:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d42b:	e8 a4 20 ff ff       	call   c000f4d4 <malloc>
c001d430:	83 c4 0c             	add    esp,0xc
c001d433:	89 c7                	mov    edi,eax
c001d435:	ff 35 54 d7 02 c0    	push   DWORD PTR ds:0xc002d754
c001d43b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d43f:	50                   	push   eax
c001d440:	e8 8b 57 ff ff       	call   c0012bd0 <File::File(char const*, Process*)>
c001d445:	83 c4 10             	add    esp,0x10
c001d448:	85 ff                	test   edi,edi
c001d44a:	75 0a                	jne    c001d456 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001d44c:	83 ec 0c             	sub    esp,0xc
c001d44f:	68 17 a4 02 c0       	push   0xc002a417
c001d454:	eb 27                	jmp    c001d47d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001d456:	50                   	push   eax
c001d457:	8d 44 24 17          	lea    eax,[esp+0x17]
c001d45b:	50                   	push   eax
c001d45c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d460:	50                   	push   eax
c001d461:	57                   	push   edi
c001d462:	e8 79 5a ff ff       	call   c0012ee0 <File::stat(unsigned long long*, bool*)>
c001d467:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001d46c:	83 c4 10             	add    esp,0x10
c001d46f:	89 e8                	mov    eax,ebp
c001d471:	84 c0                	test   al,al
c001d473:	74 19                	je     c001d48e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001d475:	83 ec 0c             	sub    esp,0xc
c001d478:	68 2b a4 02 c0       	push   0xc002a42b
c001d47d:	e8 fa c0 ff ff       	call   c001957c <Krnl::panic(char const*)>
c001d482:	31 ed                	xor    ebp,ebp
c001d484:	e8 73 f1 ff ff       	call   c001c5fc <unlockScheduler()>
c001d489:	83 c4 10             	add    esp,0x10
c001d48c:	eb 75                	jmp    c001d503 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001d48e:	50                   	push   eax
c001d48f:	50                   	push   eax
c001d490:	6a 01                	push   0x1
c001d492:	57                   	push   edi
c001d493:	e8 9c 57 ff ff       	call   c0012c34 <File::open(FileOpenMode)>
c001d498:	83 c4 10             	add    esp,0x10
c001d49b:	85 c0                	test   eax,eax
c001d49d:	74 17                	je     c001d4b6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001d49f:	83 ec 0c             	sub    esp,0xc
c001d4a2:	68 44 a4 02 c0       	push   0xc002a444
c001d4a7:	e8 d0 c0 ff ff       	call   c001957c <Krnl::panic(char const*)>
c001d4ac:	e8 4b f1 ff ff       	call   c001c5fc <unlockScheduler()>
c001d4b1:	83 c4 10             	add    esp,0x10
c001d4b4:	eb 4d                	jmp    c001d503 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001d4b6:	0f b7 f6             	movzx  esi,si
c001d4b9:	50                   	push   eax
c001d4ba:	0f b7 db             	movzx  ebx,bx
c001d4bd:	50                   	push   eax
c001d4be:	56                   	push   esi
c001d4bf:	53                   	push   ebx
c001d4c0:	e8 b7 fd ff ff       	call   c001d27c <Vm::realToLinear(unsigned short, unsigned short)>
c001d4c5:	5a                   	pop    edx
c001d4c6:	8b 17                	mov    edx,DWORD PTR [edi]
c001d4c8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001d4cc:	51                   	push   ecx
c001d4cd:	50                   	push   eax
c001d4ce:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d4d2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d4d6:	57                   	push   edi
c001d4d7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d4da:	83 c4 14             	add    esp,0x14
c001d4dd:	57                   	push   edi
c001d4de:	e8 af 57 ff ff       	call   c0012c92 <File::close()>
c001d4e3:	c6 05 85 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d785,0x0
c001d4ea:	e8 0d f1 ff ff       	call   c001c5fc <unlockScheduler()>
c001d4ef:	59                   	pop    ecx
c001d4f0:	ff 35 88 d7 02 c0    	push   DWORD PTR ds:0xc002d788
c001d4f6:	e8 17 f7 ff ff       	call   c001cc12 <unblockTask(ThreadControlBlock*)>
c001d4fb:	83 c4 10             	add    esp,0x10
c001d4fe:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001d503:	83 c4 2c             	add    esp,0x2c
c001d506:	89 e8                	mov    eax,ebp
c001d508:	5b                   	pop    ebx
c001d509:	5e                   	pop    esi
c001d50a:	5f                   	pop    edi
c001d50b:	5d                   	pop    ebp
c001d50c:	c3                   	ret    

c001d50d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001d50d:	57                   	push   edi
c001d50e:	56                   	push   esi
c001d50f:	53                   	push   ebx
c001d510:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d514:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d518:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d51c:	83 e8 06             	sub    eax,0x6
c001d51f:	0f b7 c0             	movzx  eax,ax
c001d522:	50                   	push   eax
c001d523:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001d528:	50                   	push   eax
c001d529:	e8 4e fd ff ff       	call   c001d27c <Vm::realToLinear(unsigned short, unsigned short)>
c001d52e:	5a                   	pop    edx
c001d52f:	5e                   	pop    esi
c001d530:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001d533:	8d 56 fa             	lea    edx,[esi-0x6]
c001d536:	81 e2 ff ff 00 00    	and    edx,0xffff
c001d53c:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001d53f:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001d542:	83 c2 02             	add    edx,0x2
c001d545:	66 89 10             	mov    WORD PTR [eax],dx
c001d548:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001d54b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001d54f:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001d552:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001d556:	89 d6                	mov    esi,edx
c001d558:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001d55e:	66 81 e6 ff fd       	and    si,0xfdff
c001d563:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001d567:	74 07                	je     c001d570 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001d569:	89 d6                	mov    esi,edx
c001d56b:	66 81 ce 00 02       	or     si,0x200
c001d570:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001d574:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d579:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001d57d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001d585:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001d588:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001d590:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d593:	5b                   	pop    ebx
c001d594:	5e                   	pop    esi
c001d595:	5f                   	pop    edi
c001d596:	c3                   	ret    

c001d597 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001d597:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d59c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d5a1:	c1 e0 04             	shl    eax,0x4
c001d5a4:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001d5a7:	c3                   	ret    

c001d5a8 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001d5a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d5ad:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d5b2:	c1 e0 04             	shl    eax,0x4
c001d5b5:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001d5b9:	c3                   	ret    

c001d5ba <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001d5ba:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d5bf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d5c4:	c1 e0 04             	shl    eax,0x4
c001d5c7:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001d5ca:	c3                   	ret    

c001d5cb <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001d5cb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d5d0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d5d5:	c1 e0 04             	shl    eax,0x4
c001d5d8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d5dc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001d5df:	c3                   	ret    

c001d5e0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001d5e0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d5e5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d5ea:	c1 e0 04             	shl    eax,0x4
c001d5ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d5f1:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001d5f5:	c3                   	ret    

c001d5f6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001d5f6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d5fb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d600:	c1 e0 04             	shl    eax,0x4
c001d603:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d607:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001d60a:	c3                   	ret    

c001d60b <Vm::faultHandler(regs*)>:
c001d60b:	55                   	push   ebp
c001d60c:	57                   	push   edi
c001d60d:	56                   	push   esi
c001d60e:	53                   	push   ebx
c001d60f:	83 ec 1c             	sub    esp,0x1c
c001d612:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d616:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001d619:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001d61c:	0f b7 c1             	movzx  eax,cx
c001d61f:	50                   	push   eax
c001d620:	0f b7 c3             	movzx  eax,bx
c001d623:	c1 e3 04             	shl    ebx,0x4
c001d626:	50                   	push   eax
c001d627:	e8 50 fc ff ff       	call   c001d27c <Vm::realToLinear(unsigned short, unsigned short)>
c001d62c:	5a                   	pop    edx
c001d62d:	89 c5                	mov    ebp,eax
c001d62f:	5e                   	pop    esi
c001d630:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001d634:	50                   	push   eax
c001d635:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001d639:	50                   	push   eax
c001d63a:	e8 3d fc ff ff       	call   c001d27c <Vm::realToLinear(unsigned short, unsigned short)>
c001d63f:	01 cb                	add    ebx,ecx
c001d641:	89 c6                	mov    esi,eax
c001d643:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001d647:	50                   	push   eax
c001d648:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d64c:	50                   	push   eax
c001d64d:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001d651:	50                   	push   eax
c001d652:	55                   	push   ebp
c001d653:	53                   	push   ebx
c001d654:	b3 06                	mov    bl,0x6
c001d656:	68 5d a4 02 c0       	push   0xc002a45d
c001d65b:	e8 41 50 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001d660:	83 c4 20             	add    esp,0x20
c001d663:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001d668:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001d66d:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001d671:	3c 9d                	cmp    al,0x9d
c001d673:	0f 84 d7 02 00 00    	je     c001d950 <Vm::faultHandler(regs*)+0x345>
c001d679:	0f 87 a3 00 00 00    	ja     c001d722 <Vm::faultHandler(regs*)+0x117>
c001d67f:	3c 66                	cmp    al,0x66
c001d681:	0f 84 15 02 00 00    	je     c001d89c <Vm::faultHandler(regs*)+0x291>
c001d687:	77 5f                	ja     c001d6e8 <Vm::faultHandler(regs*)+0xdd>
c001d689:	3c 36                	cmp    al,0x36
c001d68b:	0f 84 f1 01 00 00    	je     c001d882 <Vm::faultHandler(regs*)+0x277>
c001d691:	77 28                	ja     c001d6bb <Vm::faultHandler(regs*)+0xb0>
c001d693:	3c 26                	cmp    al,0x26
c001d695:	0f 84 99 01 00 00    	je     c001d834 <Vm::faultHandler(regs*)+0x229>
c001d69b:	3c 2e                	cmp    al,0x2e
c001d69d:	0f 85 3b 07 00 00    	jne    c001ddde <Vm::faultHandler(regs*)+0x7d3>
c001d6a3:	83 ec 0c             	sub    esp,0xc
c001d6a6:	31 db                	xor    ebx,ebx
c001d6a8:	68 72 a4 02 c0       	push   0xc002a472
c001d6ad:	e8 ef 4f ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001d6b2:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001d6b5:	83 c4 10             	add    esp,0x10
c001d6b8:	45                   	inc    ebp
c001d6b9:	eb b2                	jmp    c001d66d <Vm::faultHandler(regs*)+0x62>
c001d6bb:	3c 64                	cmp    al,0x64
c001d6bd:	0f 84 8b 01 00 00    	je     c001d84e <Vm::faultHandler(regs*)+0x243>
c001d6c3:	0f 87 9f 01 00 00    	ja     c001d868 <Vm::faultHandler(regs*)+0x25d>
c001d6c9:	3c 3e                	cmp    al,0x3e
c001d6cb:	0f 85 0d 07 00 00    	jne    c001ddde <Vm::faultHandler(regs*)+0x7d3>
c001d6d1:	83 ec 0c             	sub    esp,0xc
c001d6d4:	b3 01                	mov    bl,0x1
c001d6d6:	68 76 a4 02 c0       	push   0xc002a476
c001d6db:	e8 c1 4f ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001d6e0:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001d6e3:	83 c4 10             	add    esp,0x10
c001d6e6:	eb d0                	jmp    c001d6b8 <Vm::faultHandler(regs*)+0xad>
c001d6e8:	3c 6d                	cmp    al,0x6d
c001d6ea:	0f 84 af 03 00 00    	je     c001da9f <Vm::faultHandler(regs*)+0x494>
c001d6f0:	77 15                	ja     c001d707 <Vm::faultHandler(regs*)+0xfc>
c001d6f2:	3c 67                	cmp    al,0x67
c001d6f4:	0f 84 bf 01 00 00    	je     c001d8b9 <Vm::faultHandler(regs*)+0x2ae>
c001d6fa:	3c 6c                	cmp    al,0x6c
c001d6fc:	0f 84 3f 03 00 00    	je     c001da41 <Vm::faultHandler(regs*)+0x436>
c001d702:	e9 d7 06 00 00       	jmp    c001ddde <Vm::faultHandler(regs*)+0x7d3>
c001d707:	3c 6f                	cmp    al,0x6f
c001d709:	0f 84 a4 04 00 00    	je     c001dbb3 <Vm::faultHandler(regs*)+0x5a8>
c001d70f:	0f 82 11 04 00 00    	jb     c001db26 <Vm::faultHandler(regs*)+0x51b>
c001d715:	3c 9c                	cmp    al,0x9c
c001d717:	0f 84 ba 01 00 00    	je     c001d8d7 <Vm::faultHandler(regs*)+0x2cc>
c001d71d:	e9 bc 06 00 00       	jmp    c001ddde <Vm::faultHandler(regs*)+0x7d3>
c001d722:	3c ec                	cmp    al,0xec
c001d724:	0f 84 24 06 00 00    	je     c001dd4e <Vm::faultHandler(regs*)+0x743>
c001d72a:	0f 87 93 00 00 00    	ja     c001d7c3 <Vm::faultHandler(regs*)+0x1b8>
c001d730:	3c e4                	cmp    al,0xe4
c001d732:	0f 84 5c 05 00 00    	je     c001dc94 <Vm::faultHandler(regs*)+0x689>
c001d738:	77 6a                	ja     c001d7a4 <Vm::faultHandler(regs*)+0x199>
c001d73a:	3c cd                	cmp    al,0xcd
c001d73c:	0f 84 7e 02 00 00    	je     c001d9c0 <Vm::faultHandler(regs*)+0x3b5>
c001d742:	3c cf                	cmp    al,0xcf
c001d744:	0f 85 94 06 00 00    	jne    c001ddde <Vm::faultHandler(regs*)+0x7d3>
c001d74a:	83 ec 0c             	sub    esp,0xc
c001d74d:	68 ba a4 02 c0       	push   0xc002a4ba
c001d752:	e8 4a 4f ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001d757:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001d75a:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001d75d:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001d761:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001d764:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001d768:	0d 00 02 02 00       	or     eax,0x20200
c001d76d:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001d770:	56                   	push   esi
c001d771:	53                   	push   ebx
c001d772:	52                   	push   edx
c001d773:	68 c0 a4 02 c0       	push   0xc002a4c0
c001d778:	e8 24 4f ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001d77d:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001d781:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d787:	66 c1 e8 09          	shr    ax,0x9
c001d78b:	83 e0 01             	and    eax,0x1
c001d78e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001d791:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001d794:	83 c0 06             	add    eax,0x6
c001d797:	25 ff ff 00 00       	and    eax,0xffff
c001d79c:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001d79f:	e9 95 02 00 00       	jmp    c001da39 <Vm::faultHandler(regs*)+0x42e>
c001d7a4:	3c e6                	cmp    al,0xe6
c001d7a6:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001d7aa:	0f 84 4e 05 00 00    	je     c001dcfe <Vm::faultHandler(regs*)+0x6f3>
c001d7b0:	0f 82 0a 05 00 00    	jb     c001dcc0 <Vm::faultHandler(regs*)+0x6b5>
c001d7b6:	3c e7                	cmp    al,0xe7
c001d7b8:	0f 84 69 05 00 00    	je     c001dd27 <Vm::faultHandler(regs*)+0x71c>
c001d7be:	e9 1b 06 00 00       	jmp    c001ddde <Vm::faultHandler(regs*)+0x7d3>
c001d7c3:	3c ef                	cmp    al,0xef
c001d7c5:	0f 84 e6 05 00 00    	je     c001ddb1 <Vm::faultHandler(regs*)+0x7a6>
c001d7cb:	77 37                	ja     c001d804 <Vm::faultHandler(regs*)+0x1f9>
c001d7cd:	3c ed                	cmp    al,0xed
c001d7cf:	0f 84 a3 05 00 00    	je     c001dd78 <Vm::faultHandler(regs*)+0x76d>
c001d7d5:	3c ee                	cmp    al,0xee
c001d7d7:	0f 85 01 06 00 00    	jne    c001ddde <Vm::faultHandler(regs*)+0x7d3>
c001d7dd:	52                   	push   edx
c001d7de:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001d7e1:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001d7e4:	68 5b a5 02 c0       	push   0xc002a55b
c001d7e9:	e8 b3 4e ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001d7ee:	59                   	pop    ecx
c001d7ef:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001d7f3:	5b                   	pop    ebx
c001d7f4:	50                   	push   eax
c001d7f5:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001d7f9:	50                   	push   eax
c001d7fa:	e8 2a fa ff ff       	call   c001d229 <Vm::outbv(unsigned short, unsigned char)>
c001d7ff:	e9 a5 05 00 00       	jmp    c001dda9 <Vm::faultHandler(regs*)+0x79e>
c001d804:	3c fa                	cmp    al,0xfa
c001d806:	0f 84 f7 01 00 00    	je     c001da03 <Vm::faultHandler(regs*)+0x3f8>
c001d80c:	3c fb                	cmp    al,0xfb
c001d80e:	0f 84 0a 02 00 00    	je     c001da1e <Vm::faultHandler(regs*)+0x413>
c001d814:	3c f3                	cmp    al,0xf3
c001d816:	0f 85 c2 05 00 00    	jne    c001ddde <Vm::faultHandler(regs*)+0x7d3>
c001d81c:	83 ec 0c             	sub    esp,0xc
c001d81f:	68 93 a4 02 c0       	push   0xc002a493
c001d824:	e8 78 4e ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001d829:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001d82c:	83 c4 10             	add    esp,0x10
c001d82f:	e9 84 fe ff ff       	jmp    c001d6b8 <Vm::faultHandler(regs*)+0xad>
c001d834:	83 ec 0c             	sub    esp,0xc
c001d837:	b3 02                	mov    bl,0x2
c001d839:	68 6e a4 02 c0       	push   0xc002a46e
c001d83e:	e8 5e 4e ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001d843:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001d846:	83 c4 10             	add    esp,0x10
c001d849:	e9 6a fe ff ff       	jmp    c001d6b8 <Vm::faultHandler(regs*)+0xad>
c001d84e:	83 ec 0c             	sub    esp,0xc
c001d851:	b3 03                	mov    bl,0x3
c001d853:	68 7a a4 02 c0       	push   0xc002a47a
c001d858:	e8 44 4e ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001d85d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001d860:	83 c4 10             	add    esp,0x10
c001d863:	e9 50 fe ff ff       	jmp    c001d6b8 <Vm::faultHandler(regs*)+0xad>
c001d868:	83 ec 0c             	sub    esp,0xc
c001d86b:	b3 04                	mov    bl,0x4
c001d86d:	68 7e a4 02 c0       	push   0xc002a47e
c001d872:	e8 2a 4e ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001d877:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001d87a:	83 c4 10             	add    esp,0x10
c001d87d:	e9 36 fe ff ff       	jmp    c001d6b8 <Vm::faultHandler(regs*)+0xad>
c001d882:	83 ec 0c             	sub    esp,0xc
c001d885:	b3 05                	mov    bl,0x5
c001d887:	68 82 a4 02 c0       	push   0xc002a482
c001d88c:	e8 10 4e ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001d891:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001d894:	83 c4 10             	add    esp,0x10
c001d897:	e9 1c fe ff ff       	jmp    c001d6b8 <Vm::faultHandler(regs*)+0xad>
c001d89c:	83 ec 0c             	sub    esp,0xc
c001d89f:	68 86 a4 02 c0       	push   0xc002a486
c001d8a4:	e8 f8 4d ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001d8a9:	83 c4 10             	add    esp,0x10
c001d8ac:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001d8af:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001d8b4:	e9 ff fd ff ff       	jmp    c001d6b8 <Vm::faultHandler(regs*)+0xad>
c001d8b9:	50                   	push   eax
c001d8ba:	50                   	push   eax
c001d8bb:	6a 01                	push   0x1
c001d8bd:	68 8b a4 02 c0       	push   0xc002a48b
c001d8c2:	e8 da 4d ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001d8c7:	83 c4 10             	add    esp,0x10
c001d8ca:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001d8cd:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001d8d2:	e9 e1 fd ff ff       	jmp    c001d6b8 <Vm::faultHandler(regs*)+0xad>
c001d8d7:	83 ec 0c             	sub    esp,0xc
c001d8da:	68 99 a4 02 c0       	push   0xc002a499
c001d8df:	e8 bd 4d ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001d8e4:	83 c4 10             	add    esp,0x10
c001d8e7:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001d8ea:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001d8ef:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001d8f2:	74 2f                	je     c001d923 <Vm::faultHandler(regs*)+0x318>
c001d8f4:	83 ea 04             	sub    edx,0x4
c001d8f7:	25 ff 0d 00 00       	and    eax,0xdff
c001d8fc:	81 e2 ff ff 00 00    	and    edx,0xffff
c001d902:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001d905:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001d908:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d90e:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001d912:	0f 84 bf 04 00 00    	je     c001ddd7 <Vm::faultHandler(regs*)+0x7cc>
c001d918:	80 cc 02             	or     ah,0x2
c001d91b:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001d91e:	e9 b4 04 00 00       	jmp    c001ddd7 <Vm::faultHandler(regs*)+0x7cc>
c001d923:	83 ea 02             	sub    edx,0x2
c001d926:	81 e2 ff ff 00 00    	and    edx,0xffff
c001d92c:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001d92f:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001d933:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d939:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001d93d:	74 05                	je     c001d944 <Vm::faultHandler(regs*)+0x339>
c001d93f:	80 cc 02             	or     ah,0x2
c001d942:	eb 03                	jmp    c001d947 <Vm::faultHandler(regs*)+0x33c>
c001d944:	80 e4 fd             	and    ah,0xfd
c001d947:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001d94b:	e9 87 04 00 00       	jmp    c001ddd7 <Vm::faultHandler(regs*)+0x7cc>
c001d950:	83 ec 0c             	sub    esp,0xc
c001d953:	68 a0 a4 02 c0       	push   0xc002a4a0
c001d958:	e8 44 4d ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001d95d:	83 c4 10             	add    esp,0x10
c001d960:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001d965:	74 28                	je     c001d98f <Vm::faultHandler(regs*)+0x384>
c001d967:	8b 06                	mov    eax,DWORD PTR [esi]
c001d969:	25 ff 0d 00 00       	and    eax,0xdff
c001d96e:	0d 00 02 02 00       	or     eax,0x20200
c001d973:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001d976:	8b 06                	mov    eax,DWORD PTR [esi]
c001d978:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d97e:	c1 e8 09             	shr    eax,0x9
c001d981:	83 e0 01             	and    eax,0x1
c001d984:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001d987:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001d98a:	83 c0 04             	add    eax,0x4
c001d98d:	eb 24                	jmp    c001d9b3 <Vm::faultHandler(regs*)+0x3a8>
c001d98f:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001d992:	0d 00 02 02 00       	or     eax,0x20200
c001d997:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001d99a:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d99d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d9a3:	66 c1 e8 09          	shr    ax,0x9
c001d9a7:	83 e0 01             	and    eax,0x1
c001d9aa:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001d9ad:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001d9b0:	83 c0 02             	add    eax,0x2
c001d9b3:	25 ff ff 00 00       	and    eax,0xffff
c001d9b8:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001d9bb:	e9 17 04 00 00       	jmp    c001ddd7 <Vm::faultHandler(regs*)+0x7cc>
c001d9c0:	53                   	push   ebx
c001d9c1:	53                   	push   ebx
c001d9c2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d9c6:	50                   	push   eax
c001d9c7:	68 a6 a4 02 c0       	push   0xc002a4a6
c001d9cc:	e8 d0 4c ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001d9d1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d9d5:	83 c4 10             	add    esp,0x10
c001d9d8:	3c ee                	cmp    al,0xee
c001d9da:	75 10                	jne    c001d9ec <Vm::faultHandler(regs*)+0x3e1>
c001d9dc:	83 ec 0c             	sub    esp,0xc
c001d9df:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001d9e2:	e8 fa f8 ff ff       	call   c001d2e1 <Vm::mainloop3(unsigned long)>
c001d9e7:	e9 c0 03 00 00       	jmp    c001ddac <Vm::faultHandler(regs*)+0x7a1>
c001d9ec:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001d9f0:	83 ec 0c             	sub    esp,0xc
c001d9f3:	53                   	push   ebx
c001d9f4:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001d9f8:	53                   	push   ebx
c001d9f9:	55                   	push   ebp
c001d9fa:	50                   	push   eax
c001d9fb:	57                   	push   edi
c001d9fc:	e8 0c fb ff ff       	call   c001d50d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001da01:	eb 36                	jmp    c001da39 <Vm::faultHandler(regs*)+0x42e>
c001da03:	83 ec 0c             	sub    esp,0xc
c001da06:	68 b0 a4 02 c0       	push   0xc002a4b0
c001da0b:	e8 91 4c ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001da10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da15:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001da19:	e9 8b 03 00 00       	jmp    c001dda9 <Vm::faultHandler(regs*)+0x79e>
c001da1e:	83 ec 0c             	sub    esp,0xc
c001da21:	68 b5 a4 02 c0       	push   0xc002a4b5
c001da26:	e8 76 4c ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001da2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da30:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001da34:	e9 70 03 00 00       	jmp    c001dda9 <Vm::faultHandler(regs*)+0x79e>
c001da39:	83 c4 20             	add    esp,0x20
c001da3c:	e9 99 03 00 00       	jmp    c001ddda <Vm::faultHandler(regs*)+0x7cf>
c001da41:	83 ec 0c             	sub    esp,0xc
c001da44:	68 f3 a4 02 c0       	push   0xc002a4f3
c001da49:	e8 53 4c ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001da4e:	83 c4 10             	add    esp,0x10
c001da51:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001da54:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001da59:	74 0d                	je     c001da68 <Vm::faultHandler(regs*)+0x45d>
c001da5b:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001da62:	0f 87 9e 01 00 00    	ja     c001dc06 <Vm::faultHandler(regs*)+0x5fb>
c001da68:	83 ec 0c             	sub    esp,0xc
c001da6b:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001da6f:	0f b7 db             	movzx  ebx,bx
c001da72:	50                   	push   eax
c001da73:	e8 9e f7 ff ff       	call   c001d216 <Vm::inbv(unsigned short)>
c001da78:	83 c4 0c             	add    esp,0xc
c001da7b:	0f b6 c0             	movzx  eax,al
c001da7e:	50                   	push   eax
c001da7f:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001da83:	50                   	push   eax
c001da84:	53                   	push   ebx
c001da85:	e8 41 fb ff ff       	call   c001d5cb <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001da8a:	83 c4 10             	add    esp,0x10
c001da8d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001da90:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001da94:	74 03                	je     c001da99 <Vm::faultHandler(regs*)+0x48e>
c001da96:	48                   	dec    eax
c001da97:	eb 01                	jmp    c001da9a <Vm::faultHandler(regs*)+0x48f>
c001da99:	40                   	inc    eax
c001da9a:	0f b7 c0             	movzx  eax,ax
c001da9d:	eb 7f                	jmp    c001db1e <Vm::faultHandler(regs*)+0x513>
c001da9f:	83 ec 0c             	sub    esp,0xc
c001daa2:	68 25 a5 02 c0       	push   0xc002a525
c001daa7:	e8 f5 4b ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001daac:	83 c4 10             	add    esp,0x10
c001daaf:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001dab2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001dab7:	74 0d                	je     c001dac6 <Vm::faultHandler(regs*)+0x4bb>
c001dab9:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001dac0:	0f 87 40 01 00 00    	ja     c001dc06 <Vm::faultHandler(regs*)+0x5fb>
c001dac6:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001dac9:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001dacd:	0f b7 db             	movzx  ebx,bx
c001dad0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001dad5:	74 20                	je     c001daf7 <Vm::faultHandler(regs*)+0x4ec>
c001dad7:	ed                   	in     eax,dx
c001dad8:	51                   	push   ecx
c001dad9:	50                   	push   eax
c001dada:	56                   	push   esi
c001dadb:	53                   	push   ebx
c001dadc:	e8 15 fb ff ff       	call   c001d5f6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001dae1:	83 c4 10             	add    esp,0x10
c001dae4:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001dae7:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001daeb:	74 05                	je     c001daf2 <Vm::faultHandler(regs*)+0x4e7>
c001daed:	83 e8 04             	sub    eax,0x4
c001daf0:	eb 27                	jmp    c001db19 <Vm::faultHandler(regs*)+0x50e>
c001daf2:	83 c0 04             	add    eax,0x4
c001daf5:	eb 22                	jmp    c001db19 <Vm::faultHandler(regs*)+0x50e>
c001daf7:	66 ed                	in     ax,dx
c001daf9:	0f b7 c0             	movzx  eax,ax
c001dafc:	52                   	push   edx
c001dafd:	50                   	push   eax
c001dafe:	56                   	push   esi
c001daff:	53                   	push   ebx
c001db00:	e8 db fa ff ff       	call   c001d5e0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001db05:	83 c4 10             	add    esp,0x10
c001db08:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001db0b:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001db0f:	74 05                	je     c001db16 <Vm::faultHandler(regs*)+0x50b>
c001db11:	83 e8 02             	sub    eax,0x2
c001db14:	eb 03                	jmp    c001db19 <Vm::faultHandler(regs*)+0x50e>
c001db16:	83 c0 02             	add    eax,0x2
c001db19:	25 ff ff 00 00       	and    eax,0xffff
c001db1e:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001db21:	e9 b1 02 00 00       	jmp    c001ddd7 <Vm::faultHandler(regs*)+0x7cc>
c001db26:	83 ec 0c             	sub    esp,0xc
c001db29:	4b                   	dec    ebx
c001db2a:	68 2b a5 02 c0       	push   0xc002a52b
c001db2f:	e8 6d 4b ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001db34:	83 c4 10             	add    esp,0x10
c001db37:	80 fb 05             	cmp    bl,0x5
c001db3a:	77 0a                	ja     c001db46 <Vm::faultHandler(regs*)+0x53b>
c001db3c:	0f b6 db             	movzx  ebx,bl
c001db3f:	ff 24 9d 9c a5 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd5a64]
c001db46:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001db4a:	eb 1b                	jmp    c001db67 <Vm::faultHandler(regs*)+0x55c>
c001db4c:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001db50:	eb 15                	jmp    c001db67 <Vm::faultHandler(regs*)+0x55c>
c001db52:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001db56:	eb 0f                	jmp    c001db67 <Vm::faultHandler(regs*)+0x55c>
c001db58:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001db5c:	eb 09                	jmp    c001db67 <Vm::faultHandler(regs*)+0x55c>
c001db5e:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001db61:	eb 04                	jmp    c001db67 <Vm::faultHandler(regs*)+0x55c>
c001db63:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001db67:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001db6c:	74 0d                	je     c001db7b <Vm::faultHandler(regs*)+0x570>
c001db6e:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001db75:	0f 87 8b 00 00 00    	ja     c001dc06 <Vm::faultHandler(regs*)+0x5fb>
c001db7b:	53                   	push   ebx
c001db7c:	53                   	push   ebx
c001db7d:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001db81:	52                   	push   edx
c001db82:	50                   	push   eax
c001db83:	e8 0f fa ff ff       	call   c001d597 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001db88:	5e                   	pop    esi
c001db89:	0f b6 c0             	movzx  eax,al
c001db8c:	5d                   	pop    ebp
c001db8d:	50                   	push   eax
c001db8e:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001db92:	50                   	push   eax
c001db93:	e8 91 f6 ff ff       	call   c001d229 <Vm::outbv(unsigned short, unsigned char)>
c001db98:	83 c4 10             	add    esp,0x10
c001db9b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001db9e:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001dba2:	74 03                	je     c001dba7 <Vm::faultHandler(regs*)+0x59c>
c001dba4:	48                   	dec    eax
c001dba5:	eb 01                	jmp    c001dba8 <Vm::faultHandler(regs*)+0x59d>
c001dba7:	40                   	inc    eax
c001dba8:	0f b7 c0             	movzx  eax,ax
c001dbab:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001dbae:	e9 24 02 00 00       	jmp    c001ddd7 <Vm::faultHandler(regs*)+0x7cc>
c001dbb3:	83 ec 0c             	sub    esp,0xc
c001dbb6:	4b                   	dec    ebx
c001dbb7:	68 2b a5 02 c0       	push   0xc002a52b
c001dbbc:	e8 e0 4a ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001dbc1:	83 c4 10             	add    esp,0x10
c001dbc4:	80 fb 05             	cmp    bl,0x5
c001dbc7:	77 0a                	ja     c001dbd3 <Vm::faultHandler(regs*)+0x5c8>
c001dbc9:	0f b6 db             	movzx  ebx,bl
c001dbcc:	ff 24 9d b4 a5 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd5a4c]
c001dbd3:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001dbd7:	eb 1b                	jmp    c001dbf4 <Vm::faultHandler(regs*)+0x5e9>
c001dbd9:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001dbdd:	eb 15                	jmp    c001dbf4 <Vm::faultHandler(regs*)+0x5e9>
c001dbdf:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001dbe3:	eb 0f                	jmp    c001dbf4 <Vm::faultHandler(regs*)+0x5e9>
c001dbe5:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001dbe9:	eb 09                	jmp    c001dbf4 <Vm::faultHandler(regs*)+0x5e9>
c001dbeb:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001dbee:	eb 04                	jmp    c001dbf4 <Vm::faultHandler(regs*)+0x5e9>
c001dbf0:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001dbf4:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001dbf7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001dbfc:	74 39                	je     c001dc37 <Vm::faultHandler(regs*)+0x62c>
c001dbfe:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001dc04:	76 31                	jbe    c001dc37 <Vm::faultHandler(regs*)+0x62c>
c001dc06:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001dc0a:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001dc0e:	51                   	push   ecx
c001dc0f:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001dc13:	51                   	push   ecx
c001dc14:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001dc18:	51                   	push   ecx
c001dc19:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001dc1d:	51                   	push   ecx
c001dc1e:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001dc22:	52                   	push   edx
c001dc23:	50                   	push   eax
c001dc24:	50                   	push   eax
c001dc25:	68 f8 a4 02 c0       	push   0xc002a4f8
c001dc2a:	e8 72 4a ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001dc2f:	83 c4 20             	add    esp,0x20
c001dc32:	e9 fb 01 00 00       	jmp    c001de32 <Vm::faultHandler(regs*)+0x827>
c001dc37:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001dc3a:	0f b7 d3             	movzx  edx,bx
c001dc3d:	81 e6 00 04 00 00    	and    esi,0x400
c001dc43:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001dc46:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001dc4b:	74 1d                	je     c001dc6a <Vm::faultHandler(regs*)+0x65f>
c001dc4d:	51                   	push   ecx
c001dc4e:	51                   	push   ecx
c001dc4f:	52                   	push   edx
c001dc50:	50                   	push   eax
c001dc51:	e8 64 f9 ff ff       	call   c001d5ba <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001dc56:	83 c4 10             	add    esp,0x10
c001dc59:	89 ea                	mov    edx,ebp
c001dc5b:	ef                   	out    dx,eax
c001dc5c:	85 f6                	test   esi,esi
c001dc5e:	74 05                	je     c001dc65 <Vm::faultHandler(regs*)+0x65a>
c001dc60:	83 eb 04             	sub    ebx,0x4
c001dc63:	eb 21                	jmp    c001dc86 <Vm::faultHandler(regs*)+0x67b>
c001dc65:	83 c3 04             	add    ebx,0x4
c001dc68:	eb 1c                	jmp    c001dc86 <Vm::faultHandler(regs*)+0x67b>
c001dc6a:	51                   	push   ecx
c001dc6b:	51                   	push   ecx
c001dc6c:	52                   	push   edx
c001dc6d:	50                   	push   eax
c001dc6e:	e8 35 f9 ff ff       	call   c001d5a8 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001dc73:	83 c4 10             	add    esp,0x10
c001dc76:	89 ea                	mov    edx,ebp
c001dc78:	66 ef                	out    dx,ax
c001dc7a:	85 f6                	test   esi,esi
c001dc7c:	74 05                	je     c001dc83 <Vm::faultHandler(regs*)+0x678>
c001dc7e:	83 eb 02             	sub    ebx,0x2
c001dc81:	eb 03                	jmp    c001dc86 <Vm::faultHandler(regs*)+0x67b>
c001dc83:	83 c3 02             	add    ebx,0x2
c001dc86:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001dc8c:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001dc8f:	e9 43 01 00 00       	jmp    c001ddd7 <Vm::faultHandler(regs*)+0x7cc>
c001dc94:	53                   	push   ebx
c001dc95:	53                   	push   ebx
c001dc96:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dc9a:	50                   	push   eax
c001dc9b:	68 31 a5 02 c0       	push   0xc002a531
c001dca0:	e8 fc 49 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001dca5:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001dcac:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dcb0:	89 04 24             	mov    DWORD PTR [esp],eax
c001dcb3:	e8 5e f5 ff ff       	call   c001d216 <Vm::inbv(unsigned short)>
c001dcb8:	0f b6 c0             	movzx  eax,al
c001dcbb:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001dcbe:	eb 5e                	jmp    c001dd1e <Vm::faultHandler(regs*)+0x713>
c001dcc0:	51                   	push   ecx
c001dcc1:	51                   	push   ecx
c001dcc2:	53                   	push   ebx
c001dcc3:	68 37 a5 02 c0       	push   0xc002a537
c001dcc8:	e8 d4 49 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001dccd:	83 c4 10             	add    esp,0x10
c001dcd0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001dcd5:	74 07                	je     c001dcde <Vm::faultHandler(regs*)+0x6d3>
c001dcd7:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001dcdb:	ed                   	in     eax,dx
c001dcdc:	eb 14                	jmp    c001dcf2 <Vm::faultHandler(regs*)+0x6e7>
c001dcde:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001dce1:	66 31 db             	xor    bx,bx
c001dce4:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001dce7:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001dceb:	66 ed                	in     ax,dx
c001dced:	0f b7 c0             	movzx  eax,ax
c001dcf0:	09 d8                	or     eax,ebx
c001dcf2:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001dcf5:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001dcf9:	e9 dc 00 00 00       	jmp    c001ddda <Vm::faultHandler(regs*)+0x7cf>
c001dcfe:	50                   	push   eax
c001dcff:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001dd02:	53                   	push   ebx
c001dd03:	68 3d a5 02 c0       	push   0xc002a53d
c001dd08:	e8 94 49 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001dd0d:	58                   	pop    eax
c001dd0e:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001dd12:	5a                   	pop    edx
c001dd13:	50                   	push   eax
c001dd14:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dd18:	50                   	push   eax
c001dd19:	e8 0b f5 ff ff       	call   c001d229 <Vm::outbv(unsigned short, unsigned char)>
c001dd1e:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001dd22:	e9 85 00 00 00       	jmp    c001ddac <Vm::faultHandler(regs*)+0x7a1>
c001dd27:	50                   	push   eax
c001dd28:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001dd2b:	53                   	push   ebx
c001dd2c:	68 46 a5 02 c0       	push   0xc002a546
c001dd31:	e8 6b 49 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001dd36:	83 c4 10             	add    esp,0x10
c001dd39:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001dd3d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001dd42:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001dd45:	74 03                	je     c001dd4a <Vm::faultHandler(regs*)+0x73f>
c001dd47:	ef                   	out    dx,eax
c001dd48:	eb ab                	jmp    c001dcf5 <Vm::faultHandler(regs*)+0x6ea>
c001dd4a:	66 ef                	out    dx,ax
c001dd4c:	eb a7                	jmp    c001dcf5 <Vm::faultHandler(regs*)+0x6ea>
c001dd4e:	55                   	push   ebp
c001dd4f:	55                   	push   ebp
c001dd50:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001dd53:	68 4f a5 02 c0       	push   0xc002a54f
c001dd58:	e8 44 49 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001dd5d:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001dd64:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001dd68:	89 04 24             	mov    DWORD PTR [esp],eax
c001dd6b:	e8 a6 f4 ff ff       	call   c001d216 <Vm::inbv(unsigned short)>
c001dd70:	0f b6 c0             	movzx  eax,al
c001dd73:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001dd76:	eb 31                	jmp    c001dda9 <Vm::faultHandler(regs*)+0x79e>
c001dd78:	56                   	push   esi
c001dd79:	56                   	push   esi
c001dd7a:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001dd7d:	68 55 a5 02 c0       	push   0xc002a555
c001dd82:	e8 1a 49 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001dd87:	83 c4 10             	add    esp,0x10
c001dd8a:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001dd8d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001dd92:	74 03                	je     c001dd97 <Vm::faultHandler(regs*)+0x78c>
c001dd94:	ed                   	in     eax,dx
c001dd95:	eb 0d                	jmp    c001dda4 <Vm::faultHandler(regs*)+0x799>
c001dd97:	66 ed                	in     ax,dx
c001dd99:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001dd9c:	0f b7 c0             	movzx  eax,ax
c001dd9f:	66 31 d2             	xor    dx,dx
c001dda2:	09 d0                	or     eax,edx
c001dda4:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001dda7:	eb 2e                	jmp    c001ddd7 <Vm::faultHandler(regs*)+0x7cc>
c001dda9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ddac:	83 c4 10             	add    esp,0x10
c001ddaf:	eb 29                	jmp    c001ddda <Vm::faultHandler(regs*)+0x7cf>
c001ddb1:	50                   	push   eax
c001ddb2:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ddb5:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ddb8:	68 64 a5 02 c0       	push   0xc002a564
c001ddbd:	e8 df 48 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001ddc2:	83 c4 10             	add    esp,0x10
c001ddc5:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001ddc8:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ddcd:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001ddd0:	74 03                	je     c001ddd5 <Vm::faultHandler(regs*)+0x7ca>
c001ddd2:	ef                   	out    dx,eax
c001ddd3:	eb 02                	jmp    c001ddd7 <Vm::faultHandler(regs*)+0x7cc>
c001ddd5:	66 ef                	out    dx,ax
c001ddd7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ddda:	b0 01                	mov    al,0x1
c001dddc:	eb 56                	jmp    c001de34 <Vm::faultHandler(regs*)+0x829>
c001ddde:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001dde2:	51                   	push   ecx
c001dde3:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001dde7:	51                   	push   ecx
c001dde8:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001ddec:	51                   	push   ecx
c001dded:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001ddf1:	51                   	push   ecx
c001ddf2:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ddf6:	52                   	push   edx
c001ddf7:	50                   	push   eax
c001ddf8:	50                   	push   eax
c001ddf9:	68 6d a5 02 c0       	push   0xc002a56d
c001ddfe:	e8 9e 48 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001de03:	83 c4 20             	add    esp,0x20
c001de06:	83 ec 0c             	sub    esp,0xc
c001de09:	6a 60                	push   0x60
c001de0b:	e8 06 f4 ff ff       	call   c001d216 <Vm::inbv(unsigned short)>
c001de10:	83 c4 10             	add    esp,0x10
c001de13:	3c 1c                	cmp    al,0x1c
c001de15:	74 04                	je     c001de1b <Vm::faultHandler(regs*)+0x810>
c001de17:	3c 5a                	cmp    al,0x5a
c001de19:	75 eb                	jne    c001de06 <Vm::faultHandler(regs*)+0x7fb>
c001de1b:	3c 1c                	cmp    al,0x1c
c001de1d:	74 04                	je     c001de23 <Vm::faultHandler(regs*)+0x818>
c001de1f:	3c 5a                	cmp    al,0x5a
c001de21:	75 0f                	jne    c001de32 <Vm::faultHandler(regs*)+0x827>
c001de23:	83 ec 0c             	sub    esp,0xc
c001de26:	6a 60                	push   0x60
c001de28:	e8 e9 f3 ff ff       	call   c001d216 <Vm::inbv(unsigned short)>
c001de2d:	83 c4 10             	add    esp,0x10
c001de30:	eb e9                	jmp    c001de1b <Vm::faultHandler(regs*)+0x810>
c001de32:	31 c0                	xor    eax,eax
c001de34:	83 c4 1c             	add    esp,0x1c
c001de37:	5b                   	pop    ebx
c001de38:	5e                   	pop    esi
c001de39:	5f                   	pop    edi
c001de3a:	5d                   	pop    ebp
c001de3b:	c3                   	ret    

c001de3c <Vm::fpuInternalTo32(unsigned long long)>:
c001de3c:	57                   	push   edi
c001de3d:	56                   	push   esi
c001de3e:	53                   	push   ebx
c001de3f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001de43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de47:	89 d6                	mov    esi,edx
c001de49:	89 d7                	mov    edi,edx
c001de4b:	89 c1                	mov    ecx,eax
c001de4d:	c1 ef 14             	shr    edi,0x14
c001de50:	89 d3                	mov    ebx,edx
c001de52:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001de58:	31 d2                	xor    edx,edx
c001de5a:	89 f8                	mov    eax,edi
c001de5c:	81 e6 00 00 00 80    	and    esi,0x80000000
c001de62:	bf ff 00 00 00       	mov    edi,0xff
c001de67:	05 80 fc ff ff       	add    eax,0xfffffc80
c001de6c:	83 d2 ff             	adc    edx,0xffffffff
c001de6f:	39 c7                	cmp    edi,eax
c001de71:	bf 00 00 00 00       	mov    edi,0x0
c001de76:	19 d7                	sbb    edi,edx
c001de78:	72 15                	jb     c001de8f <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001de7a:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001de7e:	c1 e0 17             	shl    eax,0x17
c001de81:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001de87:	09 f1                	or     ecx,esi
c001de89:	09 c1                	or     ecx,eax
c001de8b:	89 cf                	mov    edi,ecx
c001de8d:	eb 02                	jmp    c001de91 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001de8f:	31 ff                	xor    edi,edi
c001de91:	89 f8                	mov    eax,edi
c001de93:	5b                   	pop    ebx
c001de94:	5e                   	pop    esi
c001de95:	5f                   	pop    edi
c001de96:	c3                   	ret    

c001de97 <Vm::fpuInternalTo64(unsigned long long)>:
c001de97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de9b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001de9f:	c3                   	ret    

c001dea0 <Vm::fpu32ToInternal(unsigned int)>:
c001dea0:	57                   	push   edi
c001dea1:	31 ff                	xor    edi,edi
c001dea3:	56                   	push   esi
c001dea4:	53                   	push   ebx
c001dea5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dea9:	89 cb                	mov    ebx,ecx
c001deab:	89 ce                	mov    esi,ecx
c001dead:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001deb3:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001deb9:	c1 e9 17             	shr    ecx,0x17
c001debc:	89 f0                	mov    eax,esi
c001debe:	0f b6 d1             	movzx  edx,cl
c001dec1:	81 c2 80 03 00 00    	add    edx,0x380
c001dec7:	89 d1                	mov    ecx,edx
c001dec9:	89 fa                	mov    edx,edi
c001decb:	c1 e1 14             	shl    ecx,0x14
c001dece:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001ded2:	c1 e0 1d             	shl    eax,0x1d
c001ded5:	89 d7                	mov    edi,edx
c001ded7:	89 c6                	mov    esi,eax
c001ded9:	89 ca                	mov    edx,ecx
c001dedb:	89 f0                	mov    eax,esi
c001dedd:	09 fa                	or     edx,edi
c001dedf:	09 da                	or     edx,ebx
c001dee1:	5b                   	pop    ebx
c001dee2:	5e                   	pop    esi
c001dee3:	5f                   	pop    edi
c001dee4:	c3                   	ret    

c001dee5 <Vm::fpu64ToInternal(unsigned long long)>:
c001dee5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dee9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001deed:	c3                   	ret    

c001deee <Vm::fpuFloatToLong(unsigned long long)>:
c001deee:	57                   	push   edi
c001deef:	31 c0                	xor    eax,eax
c001def1:	56                   	push   esi
c001def2:	31 d2                	xor    edx,edx
c001def4:	53                   	push   ebx
c001def5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001def9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001defd:	89 d9                	mov    ecx,ebx
c001deff:	c1 e9 14             	shr    ecx,0x14
c001df02:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001df08:	89 cf                	mov    edi,ecx
c001df0a:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001df10:	78 33                	js     c001df45 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001df12:	89 d9                	mov    ecx,ebx
c001df14:	89 f0                	mov    eax,esi
c001df16:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001df1c:	81 c9 00 00 10 00    	or     ecx,0x100000
c001df22:	89 ca                	mov    edx,ecx
c001df24:	b9 34 00 00 00       	mov    ecx,0x34
c001df29:	29 f9                	sub    ecx,edi
c001df2b:	0f ad d0             	shrd   eax,edx,cl
c001df2e:	d3 fa                	sar    edx,cl
c001df30:	f6 c1 20             	test   cl,0x20
c001df33:	74 05                	je     c001df3a <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001df35:	89 d0                	mov    eax,edx
c001df37:	c1 fa 1f             	sar    edx,0x1f
c001df3a:	85 db                	test   ebx,ebx
c001df3c:	79 07                	jns    c001df45 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001df3e:	f7 d8                	neg    eax
c001df40:	83 d2 00             	adc    edx,0x0
c001df43:	f7 da                	neg    edx
c001df45:	5b                   	pop    ebx
c001df46:	5e                   	pop    esi
c001df47:	5f                   	pop    edi
c001df48:	c3                   	ret    

c001df49 <Vm::fpuULongToFloat(unsigned long long)>:
c001df49:	57                   	push   edi
c001df4a:	31 c9                	xor    ecx,ecx
c001df4c:	56                   	push   esi
c001df4d:	53                   	push   ebx
c001df4e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001df52:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001df56:	0f ba e7 14          	bt     edi,0x14
c001df5a:	72 07                	jb     c001df63 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001df5c:	01 f6                	add    esi,esi
c001df5e:	11 ff                	adc    edi,edi
c001df60:	41                   	inc    ecx
c001df61:	eb f3                	jmp    c001df56 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001df63:	89 fa                	mov    edx,edi
c001df65:	89 f0                	mov    eax,esi
c001df67:	bb 33 04 00 00       	mov    ebx,0x433
c001df6c:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001df72:	29 cb                	sub    ebx,ecx
c001df74:	89 d9                	mov    ecx,ebx
c001df76:	5b                   	pop    ebx
c001df77:	c1 e1 14             	shl    ecx,0x14
c001df7a:	5e                   	pop    esi
c001df7b:	09 ca                	or     edx,ecx
c001df7d:	5f                   	pop    edi
c001df7e:	c3                   	ret    

c001df7f <Vm::fpuLongToFloat(long long)>:
c001df7f:	56                   	push   esi
c001df80:	31 c0                	xor    eax,eax
c001df82:	53                   	push   ebx
c001df83:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001df87:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001df8b:	39 c8                	cmp    eax,ecx
c001df8d:	19 d8                	sbb    eax,ebx
c001df8f:	7d 04                	jge    c001df95 <Vm::fpuLongToFloat(long long)+0x16>
c001df91:	31 f6                	xor    esi,esi
c001df93:	eb 0c                	jmp    c001dfa1 <Vm::fpuLongToFloat(long long)+0x22>
c001df95:	f7 d9                	neg    ecx
c001df97:	be 01 00 00 00       	mov    esi,0x1
c001df9c:	83 d3 00             	adc    ebx,0x0
c001df9f:	f7 db                	neg    ebx
c001dfa1:	31 c0                	xor    eax,eax
c001dfa3:	0f ba e3 14          	bt     ebx,0x14
c001dfa7:	72 07                	jb     c001dfb0 <Vm::fpuLongToFloat(long long)+0x31>
c001dfa9:	01 c9                	add    ecx,ecx
c001dfab:	11 db                	adc    ebx,ebx
c001dfad:	40                   	inc    eax
c001dfae:	eb f3                	jmp    c001dfa3 <Vm::fpuLongToFloat(long long)+0x24>
c001dfb0:	ba 33 04 00 00       	mov    edx,0x433
c001dfb5:	29 c2                	sub    edx,eax
c001dfb7:	89 c8                	mov    eax,ecx
c001dfb9:	c1 e2 14             	shl    edx,0x14
c001dfbc:	89 d9                	mov    ecx,ebx
c001dfbe:	89 f3                	mov    ebx,esi
c001dfc0:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001dfc6:	09 ca                	or     edx,ecx
c001dfc8:	84 db                	test   bl,bl
c001dfca:	74 06                	je     c001dfd2 <Vm::fpuLongToFloat(long long)+0x53>
c001dfcc:	81 ca 00 00 00 80    	or     edx,0x80000000
c001dfd2:	5b                   	pop    ebx
c001dfd3:	5e                   	pop    esi
c001dfd4:	c3                   	ret    

c001dfd5 <Vm::fpuGet0()>:
c001dfd5:	31 c0                	xor    eax,eax
c001dfd7:	31 d2                	xor    edx,edx
c001dfd9:	c3                   	ret    

c001dfda <Vm::fpuGet1()>:
c001dfda:	b8 01 00 00 00       	mov    eax,0x1
c001dfdf:	31 d2                	xor    edx,edx
c001dfe1:	c3                   	ret    

c001dfe2 <Vm::fpuGetPi()>:
c001dfe2:	b8 03 00 00 00       	mov    eax,0x3
c001dfe7:	31 d2                	xor    edx,edx
c001dfe9:	c3                   	ret    

c001dfea <Vm::fpuGetLog2E()>:
c001dfea:	83 ec 18             	sub    esp,0x18
c001dfed:	68 cc a5 02 c0       	push   0xc002a5cc
c001dff2:	e8 85 b5 ff ff       	call   c001957c <Krnl::panic(char const*)>
c001dff7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001dffc:	31 d2                	xor    edx,edx
c001dffe:	83 c4 1c             	add    esp,0x1c
c001e001:	c3                   	ret    

c001e002 <Vm::fpuGetLogE2()>:
c001e002:	83 ec 18             	sub    esp,0x18
c001e005:	68 d8 a5 02 c0       	push   0xc002a5d8
c001e00a:	e8 6d b5 ff ff       	call   c001957c <Krnl::panic(char const*)>
c001e00f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e014:	31 d2                	xor    edx,edx
c001e016:	83 c4 1c             	add    esp,0x1c
c001e019:	c3                   	ret    

c001e01a <Vm::fpuGetLog210()>:
c001e01a:	83 ec 18             	sub    esp,0x18
c001e01d:	68 e4 a5 02 c0       	push   0xc002a5e4
c001e022:	e8 55 b5 ff ff       	call   c001957c <Krnl::panic(char const*)>
c001e027:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e02c:	31 d2                	xor    edx,edx
c001e02e:	83 c4 1c             	add    esp,0x1c
c001e031:	c3                   	ret    

c001e032 <Vm::fpuGetLog102()>:
c001e032:	83 ec 18             	sub    esp,0x18
c001e035:	68 f1 a5 02 c0       	push   0xc002a5f1
c001e03a:	e8 3d b5 ff ff       	call   c001957c <Krnl::panic(char const*)>
c001e03f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e044:	31 d2                	xor    edx,edx
c001e046:	83 c4 1c             	add    esp,0x1c
c001e049:	c3                   	ret    

c001e04a <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001e04a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e04e:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001e052:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e056:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001e05a:	0f 92 c0             	setb   al
c001e05d:	c3                   	ret    

c001e05e <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001e05e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e066:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001e06a:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001e06e:	09 c2                	or     edx,eax
c001e070:	0f 94 c0             	sete   al
c001e073:	c3                   	ret    

c001e074 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001e074:	57                   	push   edi
c001e075:	56                   	push   esi
c001e076:	53                   	push   ebx
c001e077:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e07b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e07f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001e083:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e087:	57                   	push   edi
c001e088:	56                   	push   esi
c001e089:	53                   	push   ebx
c001e08a:	51                   	push   ecx
c001e08b:	e8 ce ff ff ff       	call   c001e05e <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001e090:	83 c4 10             	add    esp,0x10
c001e093:	88 c2                	mov    dl,al
c001e095:	31 c0                	xor    eax,eax
c001e097:	84 d2                	test   dl,dl
c001e099:	75 0c                	jne    c001e0a7 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001e09b:	57                   	push   edi
c001e09c:	56                   	push   esi
c001e09d:	53                   	push   ebx
c001e09e:	51                   	push   ecx
c001e09f:	e8 a6 ff ff ff       	call   c001e04a <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001e0a4:	83 c4 10             	add    esp,0x10
c001e0a7:	83 e0 01             	and    eax,0x1
c001e0aa:	5b                   	pop    ebx
c001e0ab:	88 c1                	mov    cl,al
c001e0ad:	83 e2 01             	and    edx,0x1
c001e0b0:	a0 c1 d7 02 c0       	mov    al,ds:0xc002d7c1
c001e0b5:	c1 e2 06             	shl    edx,0x6
c001e0b8:	83 e0 ba             	and    eax,0xffffffba
c001e0bb:	5e                   	pop    esi
c001e0bc:	09 c8                	or     eax,ecx
c001e0be:	5f                   	pop    edi
c001e0bf:	09 d0                	or     eax,edx
c001e0c1:	a2 c1 d7 02 c0       	mov    ds:0xc002d7c1,al
c001e0c6:	c3                   	ret    

c001e0c7 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001e0c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e0cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e0cf:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001e0d3:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001e0d7:	c3                   	ret    

c001e0d8 <Vm::fpuAbs(unsigned long long)>:
c001e0d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e0dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e0e0:	c3                   	ret    

c001e0e1 <Vm::fpuChs(unsigned long long)>:
c001e0e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e0e5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e0e9:	f7 d8                	neg    eax
c001e0eb:	83 d2 00             	adc    edx,0x0
c001e0ee:	f7 da                	neg    edx
c001e0f0:	c3                   	ret    

c001e0f1 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001e0f1:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001e0f5:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001e0fa:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001e0fe:	eb c7                	jmp    c001e0c7 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001e100 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001e100:	53                   	push   ebx
c001e101:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e105:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e109:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e10d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e111:	0f af ca             	imul   ecx,edx
c001e114:	0f af d8             	imul   ebx,eax
c001e117:	f7 e2                	mul    edx
c001e119:	01 d9                	add    ecx,ebx
c001e11b:	5b                   	pop    ebx
c001e11c:	01 ca                	add    edx,ecx
c001e11e:	c3                   	ret    

c001e11f <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001e11f:	83 ec 0c             	sub    esp,0xc
c001e122:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e12a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e12e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e132:	e8 45 6b 00 00       	call   c0024c7c <__udivdi3>
c001e137:	83 c4 1c             	add    esp,0x1c
c001e13a:	c3                   	ret    

c001e13b <Vm::fpuSquare(unsigned long long)>:
c001e13b:	50                   	push   eax
c001e13c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e140:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e144:	52                   	push   edx
c001e145:	50                   	push   eax
c001e146:	52                   	push   edx
c001e147:	50                   	push   eax
c001e148:	e8 b3 ff ff ff       	call   c001e100 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001e14d:	83 c4 14             	add    esp,0x14
c001e150:	c3                   	ret    

c001e151 <Vm::fpuGetReg(int)>:
c001e151:	83 ec 0c             	sub    esp,0xc
c001e154:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001e159:	76 10                	jbe    c001e16b <Vm::fpuGetReg(int)+0x1a>
c001e15b:	83 ec 0c             	sub    esp,0xc
c001e15e:	68 fe a5 02 c0       	push   0xc002a5fe
c001e163:	e8 14 b4 ff ff       	call   c001957c <Krnl::panic(char const*)>
c001e168:	83 c4 10             	add    esp,0x10
c001e16b:	a0 c1 d7 02 c0       	mov    al,ds:0xc002d7c1
c001e170:	b9 08 00 00 00       	mov    ecx,0x8
c001e175:	c0 e8 03             	shr    al,0x3
c001e178:	83 e0 07             	and    eax,0x7
c001e17b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e17f:	99                   	cdq    
c001e180:	f7 f9                	idiv   ecx
c001e182:	8b 04 d5 c4 d7 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd283c]
c001e189:	8b 14 d5 c8 d7 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd2838]
c001e190:	83 c4 0c             	add    esp,0xc
c001e193:	c3                   	ret    

c001e194 <Vm::fpuSetReg(int, unsigned long long)>:
c001e194:	57                   	push   edi
c001e195:	56                   	push   esi
c001e196:	52                   	push   edx
c001e197:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001e19b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e19f:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001e1a4:	76 10                	jbe    c001e1b6 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001e1a6:	83 ec 0c             	sub    esp,0xc
c001e1a9:	68 11 a6 02 c0       	push   0xc002a611
c001e1ae:	e8 c9 b3 ff ff       	call   c001957c <Krnl::panic(char const*)>
c001e1b3:	83 c4 10             	add    esp,0x10
c001e1b6:	a0 c1 d7 02 c0       	mov    al,ds:0xc002d7c1
c001e1bb:	b9 08 00 00 00       	mov    ecx,0x8
c001e1c0:	c0 e8 03             	shr    al,0x3
c001e1c3:	83 e0 07             	and    eax,0x7
c001e1c6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e1ca:	99                   	cdq    
c001e1cb:	f7 f9                	idiv   ecx
c001e1cd:	89 34 d5 c4 d7 02 c0 	mov    DWORD PTR [edx*8-0x3ffd283c],esi
c001e1d4:	89 3c d5 c8 d7 02 c0 	mov    DWORD PTR [edx*8-0x3ffd2838],edi
c001e1db:	58                   	pop    eax
c001e1dc:	5e                   	pop    esi
c001e1dd:	5f                   	pop    edi
c001e1de:	c3                   	ret    

c001e1df <Vm::fpuPush(unsigned long long)>:
c001e1df:	a0 c1 d7 02 c0       	mov    al,ds:0xc002d7c1
c001e1e4:	c0 e8 03             	shr    al,0x3
c001e1e7:	83 e0 07             	and    eax,0x7
c001e1ea:	83 c0 07             	add    eax,0x7
c001e1ed:	88 c2                	mov    dl,al
c001e1ef:	83 e0 07             	and    eax,0x7
c001e1f2:	83 e2 07             	and    edx,0x7
c001e1f5:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001e1fc:	8a 15 c1 d7 02 c0    	mov    dl,BYTE PTR ds:0xc002d7c1
c001e202:	83 e2 c7             	and    edx,0xffffffc7
c001e205:	09 ca                	or     edx,ecx
c001e207:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e20b:	88 15 c1 d7 02 c0    	mov    BYTE PTR ds:0xc002d7c1,dl
c001e211:	89 0c c5 c8 d7 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2838],ecx
c001e218:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e21c:	89 14 c5 c4 d7 02 c0 	mov    DWORD PTR [eax*8-0x3ffd283c],edx
c001e223:	a1 04 d8 02 c0       	mov    eax,ds:0xc002d804
c001e228:	83 f8 08             	cmp    eax,0x8
c001e22b:	75 08                	jne    c001e235 <Vm::fpuPush(unsigned long long)+0x56>
c001e22d:	80 0d c0 d7 02 c0 40 	or     BYTE PTR ds:0xc002d7c0,0x40
c001e234:	c3                   	ret    
c001e235:	40                   	inc    eax
c001e236:	a3 04 d8 02 c0       	mov    ds:0xc002d804,eax
c001e23b:	c3                   	ret    

c001e23c <Vm::fpuPop()>:
c001e23c:	8a 0d c1 d7 02 c0    	mov    cl,BYTE PTR ds:0xc002d7c1
c001e242:	53                   	push   ebx
c001e243:	c0 e9 03             	shr    cl,0x3
c001e246:	8a 1d c1 d7 02 c0    	mov    bl,BYTE PTR ds:0xc002d7c1
c001e24c:	83 e1 07             	and    ecx,0x7
c001e24f:	83 e3 c7             	and    ebx,0xffffffc7
c001e252:	8b 04 cd c4 d7 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd283c]
c001e259:	8b 14 cd c8 d7 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd2838]
c001e260:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001e267:	83 e1 38             	and    ecx,0x38
c001e26a:	09 d9                	or     ecx,ebx
c001e26c:	88 0d c1 d7 02 c0    	mov    BYTE PTR ds:0xc002d7c1,cl
c001e272:	8b 0d 04 d8 02 c0    	mov    ecx,DWORD PTR ds:0xc002d804
c001e278:	85 c9                	test   ecx,ecx
c001e27a:	74 09                	je     c001e285 <Vm::fpuPop()+0x49>
c001e27c:	49                   	dec    ecx
c001e27d:	89 0d 04 d8 02 c0    	mov    DWORD PTR ds:0xc002d804,ecx
c001e283:	eb 07                	jmp    c001e28c <Vm::fpuPop()+0x50>
c001e285:	80 0d c0 d7 02 c0 40 	or     BYTE PTR ds:0xc002d7c0,0x40
c001e28c:	5b                   	pop    ebx
c001e28d:	c3                   	ret    

c001e28e <Vm::x87Handler(regs*)>:
c001e28e:	55                   	push   ebp
c001e28f:	57                   	push   edi
c001e290:	56                   	push   esi
c001e291:	53                   	push   ebx
c001e292:	83 ec 1c             	sub    esp,0x1c
c001e295:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e299:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001e29e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001e2a1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001e2a9:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001e2ad:	50                   	push   eax
c001e2ae:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001e2b2:	50                   	push   eax
c001e2b3:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e2b7:	50                   	push   eax
c001e2b8:	53                   	push   ebx
c001e2b9:	e8 2e ad ff ff       	call   c0018fec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001e2be:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001e2c1:	83 c4 10             	add    esp,0x10
c001e2c4:	89 c6                	mov    esi,eax
c001e2c6:	80 fa d9             	cmp    dl,0xd9
c001e2c9:	0f 85 52 01 00 00    	jne    c001e421 <Vm::x87Handler(regs*)+0x193>
c001e2cf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e2d3:	8d 50 20             	lea    edx,[eax+0x20]
c001e2d6:	80 fa 0e             	cmp    dl,0xe
c001e2d9:	0f 87 86 00 00 00    	ja     c001e365 <Vm::x87Handler(regs*)+0xd7>
c001e2df:	0f b6 d2             	movzx  edx,dl
c001e2e2:	ff 24 95 24 a6 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd59dc]
c001e2e9:	e8 e7 fc ff ff       	call   c001dfd5 <Vm::fpuGet0()>
c001e2ee:	eb 05                	jmp    c001e2f5 <Vm::x87Handler(regs*)+0x67>
c001e2f0:	e8 e5 fc ff ff       	call   c001dfda <Vm::fpuGet1()>
c001e2f5:	57                   	push   edi
c001e2f6:	57                   	push   edi
c001e2f7:	52                   	push   edx
c001e2f8:	50                   	push   eax
c001e2f9:	e8 e1 fe ff ff       	call   c001e1df <Vm::fpuPush(unsigned long long)>
c001e2fe:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001e302:	83 c4 10             	add    esp,0x10
c001e305:	b0 01                	mov    al,0x1
c001e307:	e9 e3 09 00 00       	jmp    c001ecef <Vm::x87Handler(regs*)+0xa61>
c001e30c:	83 ec 0c             	sub    esp,0xc
c001e30f:	6a 00                	push   0x0
c001e311:	e8 3b fe ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e316:	59                   	pop    ecx
c001e317:	5e                   	pop    esi
c001e318:	52                   	push   edx
c001e319:	50                   	push   eax
c001e31a:	e8 c2 fd ff ff       	call   c001e0e1 <Vm::fpuChs(unsigned long long)>
c001e31f:	eb 13                	jmp    c001e334 <Vm::x87Handler(regs*)+0xa6>
c001e321:	83 ec 0c             	sub    esp,0xc
c001e324:	6a 00                	push   0x0
c001e326:	e8 26 fe ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e32b:	5f                   	pop    edi
c001e32c:	5d                   	pop    ebp
c001e32d:	52                   	push   edx
c001e32e:	50                   	push   eax
c001e32f:	e8 a4 fd ff ff       	call   c001e0d8 <Vm::fpuAbs(unsigned long long)>
c001e334:	83 c4 0c             	add    esp,0xc
c001e337:	52                   	push   edx
c001e338:	50                   	push   eax
c001e339:	6a 00                	push   0x0
c001e33b:	e8 54 fe ff ff       	call   c001e194 <Vm::fpuSetReg(int, unsigned long long)>
c001e340:	eb bc                	jmp    c001e2fe <Vm::x87Handler(regs*)+0x70>
c001e342:	e8 d3 fc ff ff       	call   c001e01a <Vm::fpuGetLog210()>
c001e347:	eb ac                	jmp    c001e2f5 <Vm::x87Handler(regs*)+0x67>
c001e349:	e8 9c fc ff ff       	call   c001dfea <Vm::fpuGetLog2E()>
c001e34e:	eb a5                	jmp    c001e2f5 <Vm::x87Handler(regs*)+0x67>
c001e350:	e8 8d fc ff ff       	call   c001dfe2 <Vm::fpuGetPi()>
c001e355:	eb 9e                	jmp    c001e2f5 <Vm::x87Handler(regs*)+0x67>
c001e357:	e8 d6 fc ff ff       	call   c001e032 <Vm::fpuGetLog102()>
c001e35c:	eb 97                	jmp    c001e2f5 <Vm::x87Handler(regs*)+0x67>
c001e35e:	e8 9f fc ff ff       	call   c001e002 <Vm::fpuGetLogE2()>
c001e363:	eb 90                	jmp    c001e2f5 <Vm::x87Handler(regs*)+0x67>
c001e365:	8d 50 40             	lea    edx,[eax+0x40]
c001e368:	80 fa 07             	cmp    dl,0x7
c001e36b:	77 15                	ja     c001e382 <Vm::x87Handler(regs*)+0xf4>
c001e36d:	83 ec 0c             	sub    esp,0xc
c001e370:	2d c0 00 00 00       	sub    eax,0xc0
c001e375:	50                   	push   eax
c001e376:	e8 d6 fd ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e37b:	59                   	pop    ecx
c001e37c:	5e                   	pop    esi
c001e37d:	e9 75 ff ff ff       	jmp    c001e2f7 <Vm::x87Handler(regs*)+0x69>
c001e382:	8d 50 38             	lea    edx,[eax+0x38]
c001e385:	80 fa 07             	cmp    dl,0x7
c001e388:	77 3c                	ja     c001e3c6 <Vm::x87Handler(regs*)+0x138>
c001e38a:	83 ec 0c             	sub    esp,0xc
c001e38d:	2d c8 00 00 00       	sub    eax,0xc8
c001e392:	50                   	push   eax
c001e393:	e8 b9 fd ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e398:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e39f:	89 c6                	mov    esi,eax
c001e3a1:	89 d7                	mov    edi,edx
c001e3a3:	e8 a9 fd ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e3a8:	83 c4 0c             	add    esp,0xc
c001e3ab:	52                   	push   edx
c001e3ac:	50                   	push   eax
c001e3ad:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e3b1:	2d c8 00 00 00       	sub    eax,0xc8
c001e3b6:	50                   	push   eax
c001e3b7:	e8 d8 fd ff ff       	call   c001e194 <Vm::fpuSetReg(int, unsigned long long)>
c001e3bc:	83 c4 0c             	add    esp,0xc
c001e3bf:	57                   	push   edi
c001e3c0:	56                   	push   esi
c001e3c1:	e9 73 ff ff ff       	jmp    c001e339 <Vm::x87Handler(regs*)+0xab>
c001e3c6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001e3ca:	84 d2                	test   dl,dl
c001e3cc:	75 0f                	jne    c001e3dd <Vm::x87Handler(regs*)+0x14f>
c001e3ce:	83 ec 0c             	sub    esp,0xc
c001e3d1:	ff 36                	push   DWORD PTR [esi]
c001e3d3:	e8 c8 fa ff ff       	call   c001dea0 <Vm::fpu32ToInternal(unsigned int)>
c001e3d8:	e9 bf 00 00 00       	jmp    c001e49c <Vm::x87Handler(regs*)+0x20e>
c001e3dd:	80 fa 03             	cmp    dl,0x3
c001e3e0:	75 13                	jne    c001e3f5 <Vm::x87Handler(regs*)+0x167>
c001e3e2:	e8 55 fe ff ff       	call   c001e23c <Vm::fpuPop()>
c001e3e7:	55                   	push   ebp
c001e3e8:	55                   	push   ebp
c001e3e9:	52                   	push   edx
c001e3ea:	50                   	push   eax
c001e3eb:	e8 4c fa ff ff       	call   c001de3c <Vm::fpuInternalTo32(unsigned long long)>
c001e3f0:	e9 88 00 00 00       	jmp    c001e47d <Vm::x87Handler(regs*)+0x1ef>
c001e3f5:	80 fa 05             	cmp    dl,0x5
c001e3f8:	75 0e                	jne    c001e408 <Vm::x87Handler(regs*)+0x17a>
c001e3fa:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e3fd:	66 a3 c2 d7 02 c0    	mov    ds:0xc002d7c2,ax
c001e403:	e9 df 00 00 00       	jmp    c001e4e7 <Vm::x87Handler(regs*)+0x259>
c001e408:	31 c0                	xor    eax,eax
c001e40a:	80 fa 07             	cmp    dl,0x7
c001e40d:	0f 85 dc 08 00 00    	jne    c001ecef <Vm::x87Handler(regs*)+0xa61>
c001e413:	66 a1 c2 d7 02 c0    	mov    ax,ds:0xc002d7c2
c001e419:	66 89 06             	mov    WORD PTR [esi],ax
c001e41c:	e9 c6 00 00 00       	jmp    c001e4e7 <Vm::x87Handler(regs*)+0x259>
c001e421:	80 fa d8             	cmp    dl,0xd8
c001e424:	0f 84 c9 00 00 00    	je     c001e4f3 <Vm::x87Handler(regs*)+0x265>
c001e42a:	80 fa dc             	cmp    dl,0xdc
c001e42d:	0f 84 0d 02 00 00    	je     c001e640 <Vm::x87Handler(regs*)+0x3b2>
c001e433:	80 fa de             	cmp    dl,0xde
c001e436:	0f 84 cd 02 00 00    	je     c001e709 <Vm::x87Handler(regs*)+0x47b>
c001e43c:	80 fa dd             	cmp    dl,0xdd
c001e43f:	0f 84 5f 04 00 00    	je     c001e8a4 <Vm::x87Handler(regs*)+0x616>
c001e445:	80 fa da             	cmp    dl,0xda
c001e448:	0f 84 24 05 00 00    	je     c001e972 <Vm::x87Handler(regs*)+0x6e4>
c001e44e:	80 fa df             	cmp    dl,0xdf
c001e451:	0f 84 68 05 00 00    	je     c001e9bf <Vm::x87Handler(regs*)+0x731>
c001e457:	31 c0                	xor    eax,eax
c001e459:	80 fa db             	cmp    dl,0xdb
c001e45c:	0f 85 8d 08 00 00    	jne    c001ecef <Vm::x87Handler(regs*)+0xa61>
c001e462:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001e466:	80 fa 03             	cmp    dl,0x3
c001e469:	0f 85 70 06 00 00    	jne    c001eadf <Vm::x87Handler(regs*)+0x851>
c001e46f:	e8 c8 fd ff ff       	call   c001e23c <Vm::fpuPop()>
c001e474:	55                   	push   ebp
c001e475:	55                   	push   ebp
c001e476:	52                   	push   edx
c001e477:	50                   	push   eax
c001e478:	e8 71 fa ff ff       	call   c001deee <Vm::fpuFloatToLong(unsigned long long)>
c001e47d:	83 c4 10             	add    esp,0x10
c001e480:	89 06                	mov    DWORD PTR [esi],eax
c001e482:	eb 63                	jmp    c001e4e7 <Vm::x87Handler(regs*)+0x259>
c001e484:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001e488:	84 d2                	test   dl,dl
c001e48a:	0f 85 e6 05 00 00    	jne    c001ea76 <Vm::x87Handler(regs*)+0x7e8>
c001e490:	57                   	push   edi
c001e491:	57                   	push   edi
c001e492:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e495:	ff 36                	push   DWORD PTR [esi]
c001e497:	e8 49 fa ff ff       	call   c001dee5 <Vm::fpu64ToInternal(unsigned long long)>
c001e49c:	5e                   	pop    esi
c001e49d:	5f                   	pop    edi
c001e49e:	52                   	push   edx
c001e49f:	50                   	push   eax
c001e4a0:	e8 3a fd ff ff       	call   c001e1df <Vm::fpuPush(unsigned long long)>
c001e4a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e4a9:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001e4ac:	e9 51 fe ff ff       	jmp    c001e302 <Vm::x87Handler(regs*)+0x74>
c001e4b1:	80 fa 03             	cmp    dl,0x3
c001e4b4:	0f 85 d7 06 00 00    	jne    c001eb91 <Vm::x87Handler(regs*)+0x903>
c001e4ba:	57                   	push   edi
c001e4bb:	57                   	push   edi
c001e4bc:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e4bf:	ff 36                	push   DWORD PTR [esi]
c001e4c1:	e8 1f fa ff ff       	call   c001dee5 <Vm::fpu64ToInternal(unsigned long long)>
c001e4c6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e4cd:	89 c6                	mov    esi,eax
c001e4cf:	89 d7                	mov    edi,edx
c001e4d1:	e8 7b fc ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e4d6:	57                   	push   edi
c001e4d7:	56                   	push   esi
c001e4d8:	52                   	push   edx
c001e4d9:	50                   	push   eax
c001e4da:	e8 95 fb ff ff       	call   c001e074 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001e4df:	83 c4 20             	add    esp,0x20
c001e4e2:	e8 55 fd ff ff       	call   c001e23c <Vm::fpuPop()>
c001e4e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e4eb:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001e4ee:	e9 12 fe ff ff       	jmp    c001e305 <Vm::x87Handler(regs*)+0x77>
c001e4f3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e4f7:	8d 50 40             	lea    edx,[eax+0x40]
c001e4fa:	80 fa 07             	cmp    dl,0x7
c001e4fd:	77 29                	ja     c001e528 <Vm::x87Handler(regs*)+0x29a>
c001e4ff:	83 ec 0c             	sub    esp,0xc
c001e502:	2d c0 00 00 00       	sub    eax,0xc0
c001e507:	50                   	push   eax
c001e508:	e8 44 fc ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e50d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e514:	89 c6                	mov    esi,eax
c001e516:	89 d7                	mov    edi,edx
c001e518:	e8 34 fc ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e51d:	57                   	push   edi
c001e51e:	56                   	push   esi
c001e51f:	52                   	push   edx
c001e520:	50                   	push   eax
c001e521:	e8 a1 fb ff ff       	call   c001e0c7 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001e526:	eb 2f                	jmp    c001e557 <Vm::x87Handler(regs*)+0x2c9>
c001e528:	8d 50 38             	lea    edx,[eax+0x38]
c001e52b:	80 fa 07             	cmp    dl,0x7
c001e52e:	77 2f                	ja     c001e55f <Vm::x87Handler(regs*)+0x2d1>
c001e530:	83 ec 0c             	sub    esp,0xc
c001e533:	2d c8 00 00 00       	sub    eax,0xc8
c001e538:	50                   	push   eax
c001e539:	e8 13 fc ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e53e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e545:	89 c6                	mov    esi,eax
c001e547:	89 d7                	mov    edi,edx
c001e549:	e8 03 fc ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e54e:	57                   	push   edi
c001e54f:	56                   	push   esi
c001e550:	52                   	push   edx
c001e551:	50                   	push   eax
c001e552:	e8 a9 fb ff ff       	call   c001e100 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001e557:	83 c4 1c             	add    esp,0x1c
c001e55a:	e9 d8 fd ff ff       	jmp    c001e337 <Vm::x87Handler(regs*)+0xa9>
c001e55f:	8d 50 30             	lea    edx,[eax+0x30]
c001e562:	80 fa 07             	cmp    dl,0x7
c001e565:	77 0d                	ja     c001e574 <Vm::x87Handler(regs*)+0x2e6>
c001e567:	83 ec 0c             	sub    esp,0xc
c001e56a:	2d d0 00 00 00       	sub    eax,0xd0
c001e56f:	e9 99 03 00 00       	jmp    c001e90d <Vm::x87Handler(regs*)+0x67f>
c001e574:	8d 50 28             	lea    edx,[eax+0x28]
c001e577:	80 fa 07             	cmp    dl,0x7
c001e57a:	77 0d                	ja     c001e589 <Vm::x87Handler(regs*)+0x2fb>
c001e57c:	83 ec 0c             	sub    esp,0xc
c001e57f:	2d d8 00 00 00       	sub    eax,0xd8
c001e584:	e9 c0 03 00 00       	jmp    c001e949 <Vm::x87Handler(regs*)+0x6bb>
c001e589:	8d 50 20             	lea    edx,[eax+0x20]
c001e58c:	80 fa 07             	cmp    dl,0x7
c001e58f:	77 1b                	ja     c001e5ac <Vm::x87Handler(regs*)+0x31e>
c001e591:	83 ec 0c             	sub    esp,0xc
c001e594:	2d e0 00 00 00       	sub    eax,0xe0
c001e599:	50                   	push   eax
c001e59a:	e8 b2 fb ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e59f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e5a6:	89 c6                	mov    esi,eax
c001e5a8:	89 d7                	mov    edi,edx
c001e5aa:	eb 22                	jmp    c001e5ce <Vm::x87Handler(regs*)+0x340>
c001e5ac:	8d 50 18             	lea    edx,[eax+0x18]
c001e5af:	80 fa 07             	cmp    dl,0x7
c001e5b2:	77 2d                	ja     c001e5e1 <Vm::x87Handler(regs*)+0x353>
c001e5b4:	83 ec 0c             	sub    esp,0xc
c001e5b7:	6a 00                	push   0x0
c001e5b9:	e8 93 fb ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e5be:	89 c6                	mov    esi,eax
c001e5c0:	89 d7                	mov    edi,edx
c001e5c2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e5c6:	2d e8 00 00 00       	sub    eax,0xe8
c001e5cb:	89 04 24             	mov    DWORD PTR [esp],eax
c001e5ce:	e8 7e fb ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e5d3:	57                   	push   edi
c001e5d4:	56                   	push   esi
c001e5d5:	52                   	push   edx
c001e5d6:	50                   	push   eax
c001e5d7:	e8 15 fb ff ff       	call   c001e0f1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001e5dc:	e9 76 ff ff ff       	jmp    c001e557 <Vm::x87Handler(regs*)+0x2c9>
c001e5e1:	8d 50 10             	lea    edx,[eax+0x10]
c001e5e4:	80 fa 07             	cmp    dl,0x7
c001e5e7:	77 1b                	ja     c001e604 <Vm::x87Handler(regs*)+0x376>
c001e5e9:	83 ec 0c             	sub    esp,0xc
c001e5ec:	2d f0 00 00 00       	sub    eax,0xf0
c001e5f1:	50                   	push   eax
c001e5f2:	e8 5a fb ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e5f7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e5fe:	89 c6                	mov    esi,eax
c001e600:	89 d7                	mov    edi,edx
c001e602:	eb 22                	jmp    c001e626 <Vm::x87Handler(regs*)+0x398>
c001e604:	3c f7                	cmp    al,0xf7
c001e606:	0f 86 d1 03 00 00    	jbe    c001e9dd <Vm::x87Handler(regs*)+0x74f>
c001e60c:	83 ec 0c             	sub    esp,0xc
c001e60f:	6a 00                	push   0x0
c001e611:	e8 3b fb ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e616:	89 c6                	mov    esi,eax
c001e618:	89 d7                	mov    edi,edx
c001e61a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e61e:	2d f8 00 00 00       	sub    eax,0xf8
c001e623:	89 04 24             	mov    DWORD PTR [esp],eax
c001e626:	e8 26 fb ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e62b:	57                   	push   edi
c001e62c:	56                   	push   esi
c001e62d:	52                   	push   edx
c001e62e:	50                   	push   eax
c001e62f:	e8 eb fa ff ff       	call   c001e11f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001e634:	83 c4 1c             	add    esp,0x1c
c001e637:	52                   	push   edx
c001e638:	50                   	push   eax
c001e639:	6a 00                	push   0x0
c001e63b:	e9 51 02 00 00       	jmp    c001e891 <Vm::x87Handler(regs*)+0x603>
c001e640:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e644:	8d 50 40             	lea    edx,[eax+0x40]
c001e647:	80 fa 07             	cmp    dl,0x7
c001e64a:	77 37                	ja     c001e683 <Vm::x87Handler(regs*)+0x3f5>
c001e64c:	83 ec 0c             	sub    esp,0xc
c001e64f:	2d c0 00 00 00       	sub    eax,0xc0
c001e654:	50                   	push   eax
c001e655:	e8 f7 fa ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e65a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e661:	89 c6                	mov    esi,eax
c001e663:	89 d7                	mov    edi,edx
c001e665:	e8 e7 fa ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e66a:	57                   	push   edi
c001e66b:	56                   	push   esi
c001e66c:	52                   	push   edx
c001e66d:	50                   	push   eax
c001e66e:	e8 54 fa ff ff       	call   c001e0c7 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001e673:	83 c4 1c             	add    esp,0x1c
c001e676:	52                   	push   edx
c001e677:	50                   	push   eax
c001e678:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e67c:	2d c0 00 00 00       	sub    eax,0xc0
c001e681:	eb 3d                	jmp    c001e6c0 <Vm::x87Handler(regs*)+0x432>
c001e683:	8d 50 38             	lea    edx,[eax+0x38]
c001e686:	80 fa 07             	cmp    dl,0x7
c001e689:	77 3b                	ja     c001e6c6 <Vm::x87Handler(regs*)+0x438>
c001e68b:	83 ec 0c             	sub    esp,0xc
c001e68e:	2d c8 00 00 00       	sub    eax,0xc8
c001e693:	50                   	push   eax
c001e694:	e8 b8 fa ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e699:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e6a0:	89 c6                	mov    esi,eax
c001e6a2:	89 d7                	mov    edi,edx
c001e6a4:	e8 a8 fa ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e6a9:	57                   	push   edi
c001e6aa:	56                   	push   esi
c001e6ab:	52                   	push   edx
c001e6ac:	50                   	push   eax
c001e6ad:	e8 4e fa ff ff       	call   c001e100 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001e6b2:	83 c4 1c             	add    esp,0x1c
c001e6b5:	52                   	push   edx
c001e6b6:	50                   	push   eax
c001e6b7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e6bb:	2d c8 00 00 00       	sub    eax,0xc8
c001e6c0:	50                   	push   eax
c001e6c1:	e9 75 fc ff ff       	jmp    c001e33b <Vm::x87Handler(regs*)+0xad>
c001e6c6:	83 c0 18             	add    eax,0x18
c001e6c9:	3c 07                	cmp    al,0x7
c001e6cb:	0f 87 3b 04 00 00    	ja     c001eb0c <Vm::x87Handler(regs*)+0x87e>
c001e6d1:	83 ec 0c             	sub    esp,0xc
c001e6d4:	6a 00                	push   0x0
c001e6d6:	e8 76 fa ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e6db:	89 c6                	mov    esi,eax
c001e6dd:	89 d7                	mov    edi,edx
c001e6df:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e6e3:	2d e8 00 00 00       	sub    eax,0xe8
c001e6e8:	89 04 24             	mov    DWORD PTR [esp],eax
c001e6eb:	e8 61 fa ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e6f0:	57                   	push   edi
c001e6f1:	56                   	push   esi
c001e6f2:	52                   	push   edx
c001e6f3:	50                   	push   eax
c001e6f4:	e8 f8 f9 ff ff       	call   c001e0f1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001e6f9:	83 c4 1c             	add    esp,0x1c
c001e6fc:	52                   	push   edx
c001e6fd:	50                   	push   eax
c001e6fe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e702:	2d e8 00 00 00       	sub    eax,0xe8
c001e707:	eb b7                	jmp    c001e6c0 <Vm::x87Handler(regs*)+0x432>
c001e709:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e70d:	8d 50 40             	lea    edx,[eax+0x40]
c001e710:	80 fa 07             	cmp    dl,0x7
c001e713:	77 3a                	ja     c001e74f <Vm::x87Handler(regs*)+0x4c1>
c001e715:	83 ec 0c             	sub    esp,0xc
c001e718:	2d c0 00 00 00       	sub    eax,0xc0
c001e71d:	50                   	push   eax
c001e71e:	e8 2e fa ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e723:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e72a:	89 c6                	mov    esi,eax
c001e72c:	89 d7                	mov    edi,edx
c001e72e:	e8 1e fa ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e733:	57                   	push   edi
c001e734:	56                   	push   esi
c001e735:	52                   	push   edx
c001e736:	50                   	push   eax
c001e737:	e8 8b f9 ff ff       	call   c001e0c7 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001e73c:	83 c4 1c             	add    esp,0x1c
c001e73f:	52                   	push   edx
c001e740:	50                   	push   eax
c001e741:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e745:	2d c0 00 00 00       	sub    eax,0xc0
c001e74a:	e9 9e 01 00 00       	jmp    c001e8ed <Vm::x87Handler(regs*)+0x65f>
c001e74f:	8d 50 20             	lea    edx,[eax+0x20]
c001e752:	80 fa 07             	cmp    dl,0x7
c001e755:	77 3a                	ja     c001e791 <Vm::x87Handler(regs*)+0x503>
c001e757:	83 ec 0c             	sub    esp,0xc
c001e75a:	2d e0 00 00 00       	sub    eax,0xe0
c001e75f:	50                   	push   eax
c001e760:	e8 ec f9 ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e765:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e76c:	89 c6                	mov    esi,eax
c001e76e:	89 d7                	mov    edi,edx
c001e770:	e8 dc f9 ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e775:	57                   	push   edi
c001e776:	56                   	push   esi
c001e777:	52                   	push   edx
c001e778:	50                   	push   eax
c001e779:	e8 73 f9 ff ff       	call   c001e0f1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001e77e:	83 c4 1c             	add    esp,0x1c
c001e781:	52                   	push   edx
c001e782:	50                   	push   eax
c001e783:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e787:	2d e0 00 00 00       	sub    eax,0xe0
c001e78c:	e9 5c 01 00 00       	jmp    c001e8ed <Vm::x87Handler(regs*)+0x65f>
c001e791:	8d 50 18             	lea    edx,[eax+0x18]
c001e794:	80 fa 07             	cmp    dl,0x7
c001e797:	77 3b                	ja     c001e7d4 <Vm::x87Handler(regs*)+0x546>
c001e799:	83 ec 0c             	sub    esp,0xc
c001e79c:	6a 00                	push   0x0
c001e79e:	e8 ae f9 ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e7a3:	89 c6                	mov    esi,eax
c001e7a5:	89 d7                	mov    edi,edx
c001e7a7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e7ab:	2d e8 00 00 00       	sub    eax,0xe8
c001e7b0:	89 04 24             	mov    DWORD PTR [esp],eax
c001e7b3:	e8 99 f9 ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e7b8:	57                   	push   edi
c001e7b9:	56                   	push   esi
c001e7ba:	52                   	push   edx
c001e7bb:	50                   	push   eax
c001e7bc:	e8 30 f9 ff ff       	call   c001e0f1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001e7c1:	83 c4 1c             	add    esp,0x1c
c001e7c4:	52                   	push   edx
c001e7c5:	50                   	push   eax
c001e7c6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e7ca:	2d e8 00 00 00       	sub    eax,0xe8
c001e7cf:	e9 19 01 00 00       	jmp    c001e8ed <Vm::x87Handler(regs*)+0x65f>
c001e7d4:	8d 50 38             	lea    edx,[eax+0x38]
c001e7d7:	80 fa 07             	cmp    dl,0x7
c001e7da:	77 37                	ja     c001e813 <Vm::x87Handler(regs*)+0x585>
c001e7dc:	83 ec 0c             	sub    esp,0xc
c001e7df:	2d c8 00 00 00       	sub    eax,0xc8
c001e7e4:	50                   	push   eax
c001e7e5:	e8 67 f9 ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e7ea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e7f1:	89 c6                	mov    esi,eax
c001e7f3:	89 d7                	mov    edi,edx
c001e7f5:	e8 57 f9 ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e7fa:	57                   	push   edi
c001e7fb:	56                   	push   esi
c001e7fc:	52                   	push   edx
c001e7fd:	50                   	push   eax
c001e7fe:	e8 fd f8 ff ff       	call   c001e100 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001e803:	83 c4 1c             	add    esp,0x1c
c001e806:	52                   	push   edx
c001e807:	50                   	push   eax
c001e808:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e80c:	2d c8 00 00 00       	sub    eax,0xc8
c001e811:	eb 7d                	jmp    c001e890 <Vm::x87Handler(regs*)+0x602>
c001e813:	3c f7                	cmp    al,0xf7
c001e815:	76 38                	jbe    c001e84f <Vm::x87Handler(regs*)+0x5c1>
c001e817:	83 ec 0c             	sub    esp,0xc
c001e81a:	6a 00                	push   0x0
c001e81c:	e8 30 f9 ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e821:	89 c6                	mov    esi,eax
c001e823:	89 d7                	mov    edi,edx
c001e825:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e829:	2d f8 00 00 00       	sub    eax,0xf8
c001e82e:	89 04 24             	mov    DWORD PTR [esp],eax
c001e831:	e8 1b f9 ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e836:	57                   	push   edi
c001e837:	56                   	push   esi
c001e838:	52                   	push   edx
c001e839:	50                   	push   eax
c001e83a:	e8 e0 f8 ff ff       	call   c001e11f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001e83f:	83 c4 1c             	add    esp,0x1c
c001e842:	52                   	push   edx
c001e843:	50                   	push   eax
c001e844:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e848:	2d f8 00 00 00       	sub    eax,0xf8
c001e84d:	eb 41                	jmp    c001e890 <Vm::x87Handler(regs*)+0x602>
c001e84f:	8d 50 10             	lea    edx,[eax+0x10]
c001e852:	80 fa 07             	cmp    dl,0x7
c001e855:	0f 87 5a 01 00 00    	ja     c001e9b5 <Vm::x87Handler(regs*)+0x727>
c001e85b:	83 ec 0c             	sub    esp,0xc
c001e85e:	2d f0 00 00 00       	sub    eax,0xf0
c001e863:	50                   	push   eax
c001e864:	e8 e8 f8 ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e869:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e870:	89 c6                	mov    esi,eax
c001e872:	89 d7                	mov    edi,edx
c001e874:	e8 d8 f8 ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e879:	57                   	push   edi
c001e87a:	56                   	push   esi
c001e87b:	52                   	push   edx
c001e87c:	50                   	push   eax
c001e87d:	e8 9d f8 ff ff       	call   c001e11f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001e882:	83 c4 1c             	add    esp,0x1c
c001e885:	52                   	push   edx
c001e886:	50                   	push   eax
c001e887:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e88b:	2d f0 00 00 00       	sub    eax,0xf0
c001e890:	50                   	push   eax
c001e891:	e8 fe f8 ff ff       	call   c001e194 <Vm::fpuSetReg(int, unsigned long long)>
c001e896:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001e89a:	e8 9d f9 ff ff       	call   c001e23c <Vm::fpuPop()>
c001e89f:	e9 5e fa ff ff       	jmp    c001e302 <Vm::x87Handler(regs*)+0x74>
c001e8a4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e8a8:	8d 50 30             	lea    edx,[eax+0x30]
c001e8ab:	80 fa 07             	cmp    dl,0x7
c001e8ae:	77 1d                	ja     c001e8cd <Vm::x87Handler(regs*)+0x63f>
c001e8b0:	83 ec 0c             	sub    esp,0xc
c001e8b3:	6a 00                	push   0x0
c001e8b5:	e8 97 f8 ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e8ba:	83 c4 0c             	add    esp,0xc
c001e8bd:	52                   	push   edx
c001e8be:	50                   	push   eax
c001e8bf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e8c3:	2d d0 00 00 00       	sub    eax,0xd0
c001e8c8:	e9 f3 fd ff ff       	jmp    c001e6c0 <Vm::x87Handler(regs*)+0x432>
c001e8cd:	8d 50 28             	lea    edx,[eax+0x28]
c001e8d0:	80 fa 07             	cmp    dl,0x7
c001e8d3:	77 28                	ja     c001e8fd <Vm::x87Handler(regs*)+0x66f>
c001e8d5:	83 ec 0c             	sub    esp,0xc
c001e8d8:	6a 00                	push   0x0
c001e8da:	e8 72 f8 ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e8df:	83 c4 0c             	add    esp,0xc
c001e8e2:	52                   	push   edx
c001e8e3:	50                   	push   eax
c001e8e4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e8e8:	2d d8 00 00 00       	sub    eax,0xd8
c001e8ed:	50                   	push   eax
c001e8ee:	e8 a1 f8 ff ff       	call   c001e194 <Vm::fpuSetReg(int, unsigned long long)>
c001e8f3:	e8 44 f9 ff ff       	call   c001e23c <Vm::fpuPop()>
c001e8f8:	e9 01 fa ff ff       	jmp    c001e2fe <Vm::x87Handler(regs*)+0x70>
c001e8fd:	8d 50 20             	lea    edx,[eax+0x20]
c001e900:	80 fa 07             	cmp    dl,0x7
c001e903:	77 30                	ja     c001e935 <Vm::x87Handler(regs*)+0x6a7>
c001e905:	83 ec 0c             	sub    esp,0xc
c001e908:	2d e0 00 00 00       	sub    eax,0xe0
c001e90d:	50                   	push   eax
c001e90e:	e8 3e f8 ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e913:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e91a:	89 c6                	mov    esi,eax
c001e91c:	89 d7                	mov    edi,edx
c001e91e:	e8 2e f8 ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e923:	57                   	push   edi
c001e924:	56                   	push   esi
c001e925:	52                   	push   edx
c001e926:	50                   	push   eax
c001e927:	e8 48 f7 ff ff       	call   c001e074 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001e92c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001e930:	e9 54 02 00 00       	jmp    c001eb89 <Vm::x87Handler(regs*)+0x8fb>
c001e935:	8d 50 18             	lea    edx,[eax+0x18]
c001e938:	80 fa 07             	cmp    dl,0x7
c001e93b:	0f 87 43 fb ff ff    	ja     c001e484 <Vm::x87Handler(regs*)+0x1f6>
c001e941:	83 ec 0c             	sub    esp,0xc
c001e944:	2d e8 00 00 00       	sub    eax,0xe8
c001e949:	50                   	push   eax
c001e94a:	e8 02 f8 ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e94f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e956:	89 c6                	mov    esi,eax
c001e958:	89 d7                	mov    edi,edx
c001e95a:	e8 f2 f7 ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e95f:	57                   	push   edi
c001e960:	56                   	push   esi
c001e961:	52                   	push   edx
c001e962:	50                   	push   eax
c001e963:	e8 0c f7 ff ff       	call   c001e074 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001e968:	83 c4 20             	add    esp,0x20
c001e96b:	e8 cc f8 ff ff       	call   c001e23c <Vm::fpuPop()>
c001e970:	eb 62                	jmp    c001e9d4 <Vm::x87Handler(regs*)+0x746>
c001e972:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001e976:	0f 85 0f 01 00 00    	jne    c001ea8b <Vm::x87Handler(regs*)+0x7fd>
c001e97c:	83 ec 0c             	sub    esp,0xc
c001e97f:	6a 01                	push   0x1
c001e981:	e8 cb f7 ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e986:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e98d:	89 c6                	mov    esi,eax
c001e98f:	89 d7                	mov    edi,edx
c001e991:	e8 bb f7 ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001e996:	57                   	push   edi
c001e997:	56                   	push   esi
c001e998:	52                   	push   edx
c001e999:	50                   	push   eax
c001e99a:	e8 d5 f6 ff ff       	call   c001e074 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001e99f:	83 c4 20             	add    esp,0x20
c001e9a2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001e9a6:	e8 91 f8 ff ff       	call   c001e23c <Vm::fpuPop()>
c001e9ab:	e8 8c f8 ff ff       	call   c001e23c <Vm::fpuPop()>
c001e9b0:	e9 50 f9 ff ff       	jmp    c001e305 <Vm::x87Handler(regs*)+0x77>
c001e9b5:	3c d9                	cmp    al,0xd9
c001e9b7:	0f 85 b5 02 00 00    	jne    c001ec72 <Vm::x87Handler(regs*)+0x9e4>
c001e9bd:	eb bd                	jmp    c001e97c <Vm::x87Handler(regs*)+0x6ee>
c001e9bf:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001e9c3:	0f 85 ea 02 00 00    	jne    c001ecb3 <Vm::x87Handler(regs*)+0xa25>
c001e9c9:	0f b7 05 c0 d7 02 c0 	movzx  eax,WORD PTR ds:0xc002d7c0
c001e9d0:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001e9d4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001e9d8:	e9 28 f9 ff ff       	jmp    c001e305 <Vm::x87Handler(regs*)+0x77>
c001e9dd:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001e9e1:	84 d2                	test   dl,dl
c001e9e3:	75 0f                	jne    c001e9f4 <Vm::x87Handler(regs*)+0x766>
c001e9e5:	83 ec 0c             	sub    esp,0xc
c001e9e8:	ff 36                	push   DWORD PTR [esi]
c001e9ea:	e8 b1 f4 ff ff       	call   c001dea0 <Vm::fpu32ToInternal(unsigned int)>
c001e9ef:	e9 2c 01 00 00       	jmp    c001eb20 <Vm::x87Handler(regs*)+0x892>
c001e9f4:	80 fa 01             	cmp    dl,0x1
c001e9f7:	75 0f                	jne    c001ea08 <Vm::x87Handler(regs*)+0x77a>
c001e9f9:	83 ec 0c             	sub    esp,0xc
c001e9fc:	ff 36                	push   DWORD PTR [esi]
c001e9fe:	e8 9d f4 ff ff       	call   c001dea0 <Vm::fpu32ToInternal(unsigned int)>
c001ea03:	e9 81 02 00 00       	jmp    c001ec89 <Vm::x87Handler(regs*)+0x9fb>
c001ea08:	80 fa 04             	cmp    dl,0x4
c001ea0b:	75 0f                	jne    c001ea1c <Vm::x87Handler(regs*)+0x78e>
c001ea0d:	83 ec 0c             	sub    esp,0xc
c001ea10:	ff 36                	push   DWORD PTR [esi]
c001ea12:	e8 89 f4 ff ff       	call   c001dea0 <Vm::fpu32ToInternal(unsigned int)>
c001ea17:	e9 86 01 00 00       	jmp    c001eba2 <Vm::x87Handler(regs*)+0x914>
c001ea1c:	80 fa 05             	cmp    dl,0x5
c001ea1f:	75 1b                	jne    c001ea3c <Vm::x87Handler(regs*)+0x7ae>
c001ea21:	83 ec 0c             	sub    esp,0xc
c001ea24:	6a 00                	push   0x0
c001ea26:	e8 26 f7 ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001ea2b:	89 c7                	mov    edi,eax
c001ea2d:	89 d5                	mov    ebp,edx
c001ea2f:	58                   	pop    eax
c001ea30:	ff 36                	push   DWORD PTR [esi]
c001ea32:	e8 69 f4 ff ff       	call   c001dea0 <Vm::fpu32ToInternal(unsigned int)>
c001ea37:	e9 a3 01 00 00       	jmp    c001ebdf <Vm::x87Handler(regs*)+0x951>
c001ea3c:	80 fa 06             	cmp    dl,0x6
c001ea3f:	75 0f                	jne    c001ea50 <Vm::x87Handler(regs*)+0x7c2>
c001ea41:	83 ec 0c             	sub    esp,0xc
c001ea44:	ff 36                	push   DWORD PTR [esi]
c001ea46:	e8 55 f4 ff ff       	call   c001dea0 <Vm::fpu32ToInternal(unsigned int)>
c001ea4b:	e9 ae 01 00 00       	jmp    c001ebfe <Vm::x87Handler(regs*)+0x970>
c001ea50:	31 c0                	xor    eax,eax
c001ea52:	80 fa 07             	cmp    dl,0x7
c001ea55:	0f 85 94 02 00 00    	jne    c001ecef <Vm::x87Handler(regs*)+0xa61>
c001ea5b:	83 ec 0c             	sub    esp,0xc
c001ea5e:	6a 00                	push   0x0
c001ea60:	e8 ec f6 ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001ea65:	89 c7                	mov    edi,eax
c001ea67:	89 d5                	mov    ebp,edx
c001ea69:	58                   	pop    eax
c001ea6a:	ff 36                	push   DWORD PTR [esi]
c001ea6c:	e8 2f f4 ff ff       	call   c001dea0 <Vm::fpu32ToInternal(unsigned int)>
c001ea71:	e9 cb 01 00 00       	jmp    c001ec41 <Vm::x87Handler(regs*)+0x9b3>
c001ea76:	80 fa 03             	cmp    dl,0x3
c001ea79:	0f 85 d3 01 00 00    	jne    c001ec52 <Vm::x87Handler(regs*)+0x9c4>
c001ea7f:	e8 b8 f7 ff ff       	call   c001e23c <Vm::fpuPop()>
c001ea84:	51                   	push   ecx
c001ea85:	51                   	push   ecx
c001ea86:	e9 de 01 00 00       	jmp    c001ec69 <Vm::x87Handler(regs*)+0x9db>
c001ea8b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ea8f:	80 fa 01             	cmp    dl,0x1
c001ea92:	75 09                	jne    c001ea9d <Vm::x87Handler(regs*)+0x80f>
c001ea94:	57                   	push   edi
c001ea95:	57                   	push   edi
c001ea96:	8b 06                	mov    eax,DWORD PTR [esi]
c001ea98:	e9 e3 01 00 00       	jmp    c001ec80 <Vm::x87Handler(regs*)+0x9f2>
c001ea9d:	80 fa 04             	cmp    dl,0x4
c001eaa0:	75 12                	jne    c001eab4 <Vm::x87Handler(regs*)+0x826>
c001eaa2:	31 d2                	xor    edx,edx
c001eaa4:	51                   	push   ecx
c001eaa5:	51                   	push   ecx
c001eaa6:	8b 06                	mov    eax,DWORD PTR [esi]
c001eaa8:	52                   	push   edx
c001eaa9:	50                   	push   eax
c001eaaa:	e8 d0 f4 ff ff       	call   c001df7f <Vm::fpuLongToFloat(long long)>
c001eaaf:	e9 ee 00 00 00       	jmp    c001eba2 <Vm::x87Handler(regs*)+0x914>
c001eab4:	31 c0                	xor    eax,eax
c001eab6:	80 fa 07             	cmp    dl,0x7
c001eab9:	0f 85 30 02 00 00    	jne    c001ecef <Vm::x87Handler(regs*)+0xa61>
c001eabf:	83 ec 0c             	sub    esp,0xc
c001eac2:	6a 00                	push   0x0
c001eac4:	e8 88 f6 ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001eac9:	89 c7                	mov    edi,eax
c001eacb:	89 d5                	mov    ebp,edx
c001eacd:	58                   	pop    eax
c001eace:	8b 06                	mov    eax,DWORD PTR [esi]
c001ead0:	5a                   	pop    edx
c001ead1:	31 d2                	xor    edx,edx
c001ead3:	52                   	push   edx
c001ead4:	50                   	push   eax
c001ead5:	e8 a5 f4 ff ff       	call   c001df7f <Vm::fpuLongToFloat(long long)>
c001eada:	e9 62 01 00 00       	jmp    c001ec41 <Vm::x87Handler(regs*)+0x9b3>
c001eadf:	84 d2                	test   dl,dl
c001eae1:	75 0d                	jne    c001eaf0 <Vm::x87Handler(regs*)+0x862>
c001eae3:	31 d2                	xor    edx,edx
c001eae5:	55                   	push   ebp
c001eae6:	55                   	push   ebp
c001eae7:	8b 06                	mov    eax,DWORD PTR [esi]
c001eae9:	52                   	push   edx
c001eaea:	50                   	push   eax
c001eaeb:	e9 d3 01 00 00       	jmp    c001ecc3 <Vm::x87Handler(regs*)+0xa35>
c001eaf0:	31 c0                	xor    eax,eax
c001eaf2:	80 fa 02             	cmp    dl,0x2
c001eaf5:	0f 85 f4 01 00 00    	jne    c001ecef <Vm::x87Handler(regs*)+0xa61>
c001eafb:	83 ec 0c             	sub    esp,0xc
c001eafe:	6a 00                	push   0x0
c001eb00:	e8 4c f6 ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001eb05:	59                   	pop    ecx
c001eb06:	5f                   	pop    edi
c001eb07:	e9 6a f9 ff ff       	jmp    c001e476 <Vm::x87Handler(regs*)+0x1e8>
c001eb0c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001eb10:	84 d2                	test   dl,dl
c001eb12:	75 2a                	jne    c001eb3e <Vm::x87Handler(regs*)+0x8b0>
c001eb14:	50                   	push   eax
c001eb15:	50                   	push   eax
c001eb16:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001eb19:	ff 36                	push   DWORD PTR [esi]
c001eb1b:	e8 c5 f3 ff ff       	call   c001dee5 <Vm::fpu64ToInternal(unsigned long long)>
c001eb20:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eb27:	89 c6                	mov    esi,eax
c001eb29:	89 d7                	mov    edi,edx
c001eb2b:	e8 21 f6 ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001eb30:	57                   	push   edi
c001eb31:	56                   	push   esi
c001eb32:	52                   	push   edx
c001eb33:	50                   	push   eax
c001eb34:	e8 8e f5 ff ff       	call   c001e0c7 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001eb39:	e9 64 01 00 00       	jmp    c001eca2 <Vm::x87Handler(regs*)+0xa14>
c001eb3e:	80 fa 01             	cmp    dl,0x1
c001eb41:	75 11                	jne    c001eb54 <Vm::x87Handler(regs*)+0x8c6>
c001eb43:	50                   	push   eax
c001eb44:	50                   	push   eax
c001eb45:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001eb48:	ff 36                	push   DWORD PTR [esi]
c001eb4a:	e8 96 f3 ff ff       	call   c001dee5 <Vm::fpu64ToInternal(unsigned long long)>
c001eb4f:	e9 35 01 00 00       	jmp    c001ec89 <Vm::x87Handler(regs*)+0x9fb>
c001eb54:	80 fa 02             	cmp    dl,0x2
c001eb57:	0f 85 54 f9 ff ff    	jne    c001e4b1 <Vm::x87Handler(regs*)+0x223>
c001eb5d:	55                   	push   ebp
c001eb5e:	55                   	push   ebp
c001eb5f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001eb62:	ff 36                	push   DWORD PTR [esi]
c001eb64:	e8 7c f3 ff ff       	call   c001dee5 <Vm::fpu64ToInternal(unsigned long long)>
c001eb69:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eb70:	89 c6                	mov    esi,eax
c001eb72:	89 d7                	mov    edi,edx
c001eb74:	e8 d8 f5 ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001eb79:	57                   	push   edi
c001eb7a:	56                   	push   esi
c001eb7b:	52                   	push   edx
c001eb7c:	50                   	push   eax
c001eb7d:	e8 f2 f4 ff ff       	call   c001e074 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001eb82:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001eb86:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001eb89:	83 c4 20             	add    esp,0x20
c001eb8c:	e9 74 f7 ff ff       	jmp    c001e305 <Vm::x87Handler(regs*)+0x77>
c001eb91:	80 fa 04             	cmp    dl,0x4
c001eb94:	75 2a                	jne    c001ebc0 <Vm::x87Handler(regs*)+0x932>
c001eb96:	51                   	push   ecx
c001eb97:	51                   	push   ecx
c001eb98:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001eb9b:	ff 36                	push   DWORD PTR [esi]
c001eb9d:	e8 43 f3 ff ff       	call   c001dee5 <Vm::fpu64ToInternal(unsigned long long)>
c001eba2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eba9:	89 c6                	mov    esi,eax
c001ebab:	89 d7                	mov    edi,edx
c001ebad:	e8 9f f5 ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001ebb2:	57                   	push   edi
c001ebb3:	56                   	push   esi
c001ebb4:	52                   	push   edx
c001ebb5:	50                   	push   eax
c001ebb6:	e8 36 f5 ff ff       	call   c001e0f1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ebbb:	e9 e2 00 00 00       	jmp    c001eca2 <Vm::x87Handler(regs*)+0xa14>
c001ebc0:	80 fa 05             	cmp    dl,0x5
c001ebc3:	75 28                	jne    c001ebed <Vm::x87Handler(regs*)+0x95f>
c001ebc5:	83 ec 0c             	sub    esp,0xc
c001ebc8:	6a 00                	push   0x0
c001ebca:	e8 82 f5 ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001ebcf:	89 c7                	mov    edi,eax
c001ebd1:	89 d5                	mov    ebp,edx
c001ebd3:	58                   	pop    eax
c001ebd4:	5a                   	pop    edx
c001ebd5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ebd8:	ff 36                	push   DWORD PTR [esi]
c001ebda:	e8 06 f3 ff ff       	call   c001dee5 <Vm::fpu64ToInternal(unsigned long long)>
c001ebdf:	83 c4 10             	add    esp,0x10
c001ebe2:	55                   	push   ebp
c001ebe3:	57                   	push   edi
c001ebe4:	52                   	push   edx
c001ebe5:	50                   	push   eax
c001ebe6:	e8 06 f5 ff ff       	call   c001e0f1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ebeb:	eb 60                	jmp    c001ec4d <Vm::x87Handler(regs*)+0x9bf>
c001ebed:	80 fa 06             	cmp    dl,0x6
c001ebf0:	75 2a                	jne    c001ec1c <Vm::x87Handler(regs*)+0x98e>
c001ebf2:	51                   	push   ecx
c001ebf3:	51                   	push   ecx
c001ebf4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ebf7:	ff 36                	push   DWORD PTR [esi]
c001ebf9:	e8 e7 f2 ff ff       	call   c001dee5 <Vm::fpu64ToInternal(unsigned long long)>
c001ebfe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ec05:	89 c6                	mov    esi,eax
c001ec07:	89 d7                	mov    edi,edx
c001ec09:	e8 43 f5 ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001ec0e:	57                   	push   edi
c001ec0f:	56                   	push   esi
c001ec10:	52                   	push   edx
c001ec11:	50                   	push   eax
c001ec12:	e8 08 f5 ff ff       	call   c001e11f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ec17:	e9 86 00 00 00       	jmp    c001eca2 <Vm::x87Handler(regs*)+0xa14>
c001ec1c:	31 c0                	xor    eax,eax
c001ec1e:	80 fa 07             	cmp    dl,0x7
c001ec21:	0f 85 c8 00 00 00    	jne    c001ecef <Vm::x87Handler(regs*)+0xa61>
c001ec27:	83 ec 0c             	sub    esp,0xc
c001ec2a:	6a 00                	push   0x0
c001ec2c:	e8 20 f5 ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001ec31:	89 c7                	mov    edi,eax
c001ec33:	89 d5                	mov    ebp,edx
c001ec35:	58                   	pop    eax
c001ec36:	5a                   	pop    edx
c001ec37:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ec3a:	ff 36                	push   DWORD PTR [esi]
c001ec3c:	e8 a4 f2 ff ff       	call   c001dee5 <Vm::fpu64ToInternal(unsigned long long)>
c001ec41:	83 c4 10             	add    esp,0x10
c001ec44:	55                   	push   ebp
c001ec45:	57                   	push   edi
c001ec46:	52                   	push   edx
c001ec47:	50                   	push   eax
c001ec48:	e8 d2 f4 ff ff       	call   c001e11f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ec4d:	83 c4 0c             	add    esp,0xc
c001ec50:	eb 53                	jmp    c001eca5 <Vm::x87Handler(regs*)+0xa17>
c001ec52:	31 c0                	xor    eax,eax
c001ec54:	80 fa 02             	cmp    dl,0x2
c001ec57:	0f 85 92 00 00 00    	jne    c001ecef <Vm::x87Handler(regs*)+0xa61>
c001ec5d:	83 ec 0c             	sub    esp,0xc
c001ec60:	6a 00                	push   0x0
c001ec62:	e8 ea f4 ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001ec67:	59                   	pop    ecx
c001ec68:	5f                   	pop    edi
c001ec69:	52                   	push   edx
c001ec6a:	50                   	push   eax
c001ec6b:	e8 27 f2 ff ff       	call   c001de97 <Vm::fpuInternalTo64(unsigned long long)>
c001ec70:	eb 70                	jmp    c001ece2 <Vm::x87Handler(regs*)+0xa54>
c001ec72:	31 c0                	xor    eax,eax
c001ec74:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001ec79:	75 74                	jne    c001ecef <Vm::x87Handler(regs*)+0xa61>
c001ec7b:	50                   	push   eax
c001ec7c:	50                   	push   eax
c001ec7d:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001ec80:	31 d2                	xor    edx,edx
c001ec82:	52                   	push   edx
c001ec83:	50                   	push   eax
c001ec84:	e8 f6 f2 ff ff       	call   c001df7f <Vm::fpuLongToFloat(long long)>
c001ec89:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ec90:	89 c6                	mov    esi,eax
c001ec92:	89 d7                	mov    edi,edx
c001ec94:	e8 b8 f4 ff ff       	call   c001e151 <Vm::fpuGetReg(int)>
c001ec99:	57                   	push   edi
c001ec9a:	56                   	push   esi
c001ec9b:	52                   	push   edx
c001ec9c:	50                   	push   eax
c001ec9d:	e8 5e f4 ff ff       	call   c001e100 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001eca2:	83 c4 1c             	add    esp,0x1c
c001eca5:	52                   	push   edx
c001eca6:	50                   	push   eax
c001eca7:	6a 00                	push   0x0
c001eca9:	e8 e6 f4 ff ff       	call   c001e194 <Vm::fpuSetReg(int, unsigned long long)>
c001ecae:	e9 f2 f7 ff ff       	jmp    c001e4a5 <Vm::x87Handler(regs*)+0x217>
c001ecb3:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ecb7:	80 fa 05             	cmp    dl,0x5
c001ecba:	75 11                	jne    c001eccd <Vm::x87Handler(regs*)+0xa3f>
c001ecbc:	55                   	push   ebp
c001ecbd:	55                   	push   ebp
c001ecbe:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ecc1:	ff 36                	push   DWORD PTR [esi]
c001ecc3:	e8 81 f2 ff ff       	call   c001df49 <Vm::fpuULongToFloat(unsigned long long)>
c001ecc8:	e9 cf f7 ff ff       	jmp    c001e49c <Vm::x87Handler(regs*)+0x20e>
c001eccd:	31 c0                	xor    eax,eax
c001eccf:	80 fa 07             	cmp    dl,0x7
c001ecd2:	75 1b                	jne    c001ecef <Vm::x87Handler(regs*)+0xa61>
c001ecd4:	e8 63 f5 ff ff       	call   c001e23c <Vm::fpuPop()>
c001ecd9:	51                   	push   ecx
c001ecda:	51                   	push   ecx
c001ecdb:	52                   	push   edx
c001ecdc:	50                   	push   eax
c001ecdd:	e8 0c f2 ff ff       	call   c001deee <Vm::fpuFloatToLong(unsigned long long)>
c001ece2:	83 c4 10             	add    esp,0x10
c001ece5:	89 06                	mov    DWORD PTR [esi],eax
c001ece7:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001ecea:	e9 f8 f7 ff ff       	jmp    c001e4e7 <Vm::x87Handler(regs*)+0x259>
c001ecef:	83 c4 1c             	add    esp,0x1c
c001ecf2:	5b                   	pop    ebx
c001ecf3:	5e                   	pop    esi
c001ecf4:	5f                   	pop    edi
c001ecf5:	5d                   	pop    ebp
c001ecf6:	c3                   	ret    

c001ecf7 <__static_initialization_and_destruction_0(int, int)>:
c001ecf7:	83 ec 0c             	sub    esp,0xc
c001ecfa:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ecff:	75 1a                	jne    c001ed1b <__static_initialization_and_destruction_0(int, int)+0x24>
c001ed01:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ed09:	75 10                	jne    c001ed1b <__static_initialization_and_destruction_0(int, int)+0x24>
c001ed0b:	83 ec 0c             	sub    esp,0xc
c001ed0e:	68 c0 d7 02 c0       	push   0xc002d7c0
c001ed13:	e8 b8 82 00 00       	call   c0026fd0 <Vm::_FPUState::_FPUState()>
c001ed18:	83 c4 10             	add    esp,0x10
c001ed1b:	90                   	nop
c001ed1c:	83 c4 0c             	add    esp,0xc
c001ed1f:	c3                   	ret    

c001ed20 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001ed20:	83 ec 0c             	sub    esp,0xc
c001ed23:	83 ec 08             	sub    esp,0x8
c001ed26:	68 ff ff 00 00       	push   0xffff
c001ed2b:	6a 01                	push   0x1
c001ed2d:	e8 c5 ff ff ff       	call   c001ecf7 <__static_initialization_and_destruction_0(int, int)>
c001ed32:	83 c4 10             	add    esp,0x10
c001ed35:	83 c4 0c             	add    esp,0xc
c001ed38:	c3                   	ret    
c001ed39:	90                   	nop

c001ed3a <FAT::getName()>:
c001ed3a:	b8 60 a6 02 c0       	mov    eax,0xc002a660
c001ed3f:	c3                   	ret    

c001ed40 <FAT::tell(void*, unsigned long long*)>:
c001ed40:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ed45:	75 06                	jne    c001ed4d <FAT::tell(void*, unsigned long long*)+0xd>
c001ed47:	b8 04 00 00 00       	mov    eax,0x4
c001ed4c:	c3                   	ret    
c001ed4d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ed52:	75 06                	jne    c001ed5a <FAT::tell(void*, unsigned long long*)+0x1a>
c001ed54:	b8 04 00 00 00       	mov    eax,0x4
c001ed59:	c3                   	ret    
c001ed5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed5e:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001ed61:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001ed64:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed68:	89 01                	mov    DWORD PTR [ecx],eax
c001ed6a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ed6d:	b8 00 00 00 00       	mov    eax,0x0
c001ed72:	c3                   	ret    
c001ed73:	90                   	nop

c001ed74 <FAT::stat(void*, unsigned long long*)>:
c001ed74:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ed79:	75 06                	jne    c001ed81 <FAT::stat(void*, unsigned long long*)+0xd>
c001ed7b:	b8 04 00 00 00       	mov    eax,0x4
c001ed80:	c3                   	ret    
c001ed81:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ed86:	75 06                	jne    c001ed8e <FAT::stat(void*, unsigned long long*)+0x1a>
c001ed88:	b8 04 00 00 00       	mov    eax,0x4
c001ed8d:	c3                   	ret    
c001ed8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed92:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001ed95:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ed98:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed9c:	89 01                	mov    DWORD PTR [ecx],eax
c001ed9e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001eda1:	b8 00 00 00 00       	mov    eax,0x0
c001eda6:	c3                   	ret    
c001eda7:	90                   	nop

c001eda8 <FAT::~FAT()>:
c001eda8:	83 ec 0c             	sub    esp,0xc
c001edab:	ba e4 a6 02 c0       	mov    edx,0xc002a6e4
c001edb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb4:	89 10                	mov    DWORD PTR [eax],edx
c001edb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edba:	83 ec 0c             	sub    esp,0xc
c001edbd:	50                   	push   eax
c001edbe:	e8 07 3c ff ff       	call   c00129ca <Filesystem::~Filesystem()>
c001edc3:	83 c4 10             	add    esp,0x10
c001edc6:	90                   	nop
c001edc7:	83 c4 0c             	add    esp,0xc
c001edca:	c3                   	ret    
c001edcb:	90                   	nop

c001edcc <FAT::~FAT()>:
c001edcc:	83 ec 0c             	sub    esp,0xc
c001edcf:	83 ec 0c             	sub    esp,0xc
c001edd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edd6:	e8 cd ff ff ff       	call   c001eda8 <FAT::~FAT()>
c001eddb:	83 c4 10             	add    esp,0x10
c001edde:	83 ec 08             	sub    esp,0x8
c001ede1:	6a 08                	push   0x8
c001ede3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ede7:	e8 d5 37 ff ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c001edec:	83 c4 10             	add    esp,0x10
c001edef:	83 c4 0c             	add    esp,0xc
c001edf2:	c3                   	ret    
c001edf3:	90                   	nop

c001edf4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001edf4:	83 ec 1c             	sub    esp,0x1c
c001edf7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001edfe:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001ee03:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ee07:	8b 04 85 40 d8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd27c0]
c001ee0e:	83 f8 ff             	cmp    eax,0xffffffff
c001ee11:	75 34                	jne    c001ee47 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001ee13:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ee17:	88 c2                	mov    dl,al
c001ee19:	a1 20 d8 02 c0       	mov    eax,ds:0xc002d820
c001ee1e:	01 d0                	add    eax,edx
c001ee20:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ee24:	8b 15 20 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d820
c001ee2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ee2e:	89 14 85 40 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27c0],edx
c001ee35:	a1 20 d8 02 c0       	mov    eax,ds:0xc002d820
c001ee3a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ee3e:	89 14 85 c0 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2740],edx
c001ee45:	eb 17                	jmp    c001ee5e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001ee47:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ee4b:	88 c2                	mov    dl,al
c001ee4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ee51:	8b 04 85 40 d8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd27c0]
c001ee58:	01 d0                	add    eax,edx
c001ee5a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ee5e:	83 ec 04             	sub    esp,0x4
c001ee61:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ee65:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ee69:	8d 44 24 15          	lea    eax,[esp+0x15]
c001ee6d:	50                   	push   eax
c001ee6e:	e8 75 7c fe ff       	call   c0006ae8 <f_getlabel>
c001ee73:	83 c4 10             	add    esp,0x10
c001ee76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee7a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ee7f:	75 07                	jne    c001ee88 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001ee81:	b8 00 00 00 00       	mov    eax,0x0
c001ee86:	eb 05                	jmp    c001ee8d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001ee88:	b8 01 00 00 00       	mov    eax,0x1
c001ee8d:	83 c4 1c             	add    esp,0x1c
c001ee90:	c3                   	ret    
c001ee91:	90                   	nop

c001ee92 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001ee92:	57                   	push   edi
c001ee93:	83 ec 58             	sub    esp,0x58
c001ee96:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001ee9e:	8d 54 24 10          	lea    edx,[esp+0x10]
c001eea2:	b9 0f 00 00 00       	mov    ecx,0xf
c001eea7:	b8 00 00 00 00       	mov    eax,0x0
c001eeac:	fc                   	cld    
c001eead:	89 d7                	mov    edi,edx
c001eeaf:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001eeb1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001eeb5:	8b 04 85 40 d8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd27c0]
c001eebc:	83 f8 ff             	cmp    eax,0xffffffff
c001eebf:	75 34                	jne    c001eef5 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001eec1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001eec5:	88 c2                	mov    dl,al
c001eec7:	a1 20 d8 02 c0       	mov    eax,ds:0xc002d820
c001eecc:	01 d0                	add    eax,edx
c001eece:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001eed2:	8b 15 20 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d820
c001eed8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001eedc:	89 14 85 40 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27c0],edx
c001eee3:	a1 20 d8 02 c0       	mov    eax,ds:0xc002d820
c001eee8:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001eeec:	89 14 85 c0 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2740],edx
c001eef3:	eb 17                	jmp    c001ef0c <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001eef5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001eef9:	88 c2                	mov    dl,al
c001eefb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001eeff:	8b 04 85 40 d8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd27c0]
c001ef06:	01 d0                	add    eax,edx
c001ef08:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ef0c:	83 ec 08             	sub    esp,0x8
c001ef0f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001ef13:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ef17:	50                   	push   eax
c001ef18:	e8 c4 18 fe ff       	call   c00007e1 <strcat>
c001ef1d:	83 c4 10             	add    esp,0x10
c001ef20:	83 ec 0c             	sub    esp,0xc
c001ef23:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ef27:	50                   	push   eax
c001ef28:	e8 a9 7d fe ff       	call   c0006cd6 <f_setlabel>
c001ef2d:	83 c4 10             	add    esp,0x10
c001ef30:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ef34:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001ef39:	75 07                	jne    c001ef42 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001ef3b:	b8 00 00 00 00       	mov    eax,0x0
c001ef40:	eb 05                	jmp    c001ef47 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001ef42:	b8 01 00 00 00       	mov    eax,0x1
c001ef47:	83 c4 58             	add    esp,0x58
c001ef4a:	5f                   	pop    edi
c001ef4b:	c3                   	ret    

c001ef4c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001ef4c:	83 ec 2c             	sub    esp,0x2c
c001ef4f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001ef57:	83 ec 08             	sub    esp,0x8
c001ef5a:	68 84 a6 02 c0       	push   0xc002a684
c001ef5f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ef63:	e8 13 18 fe ff       	call   c000077b <strcmp>
c001ef68:	83 c4 10             	add    esp,0x10
c001ef6b:	85 c0                	test   eax,eax
c001ef6d:	0f 94 c0             	sete   al
c001ef70:	84 c0                	test   al,al
c001ef72:	74 0d                	je     c001ef81 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001ef74:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ef7c:	e9 a6 00 00 00       	jmp    c001f027 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ef81:	83 ec 08             	sub    esp,0x8
c001ef84:	68 76 a6 02 c0       	push   0xc002a676
c001ef89:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ef8d:	e8 e9 17 fe ff       	call   c000077b <strcmp>
c001ef92:	83 c4 10             	add    esp,0x10
c001ef95:	85 c0                	test   eax,eax
c001ef97:	0f 94 c0             	sete   al
c001ef9a:	84 c0                	test   al,al
c001ef9c:	74 0a                	je     c001efa8 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001ef9e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001efa6:	eb 7f                	jmp    c001f027 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001efa8:	83 ec 08             	sub    esp,0x8
c001efab:	68 7c a6 02 c0       	push   0xc002a67c
c001efb0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001efb4:	e8 c2 17 fe ff       	call   c000077b <strcmp>
c001efb9:	83 c4 10             	add    esp,0x10
c001efbc:	85 c0                	test   eax,eax
c001efbe:	0f 94 c0             	sete   al
c001efc1:	84 c0                	test   al,al
c001efc3:	74 0a                	je     c001efcf <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001efc5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001efcd:	eb 58                	jmp    c001f027 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001efcf:	83 ec 08             	sub    esp,0x8
c001efd2:	68 ec 76 02 c0       	push   0xc00276ec
c001efd7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001efdb:	e8 9b 17 fe ff       	call   c000077b <strcmp>
c001efe0:	83 c4 10             	add    esp,0x10
c001efe3:	85 c0                	test   eax,eax
c001efe5:	0f 94 c0             	sete   al
c001efe8:	84 c0                	test   al,al
c001efea:	74 0a                	je     c001eff6 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001efec:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001eff4:	eb 31                	jmp    c001f027 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001eff6:	83 ec 08             	sub    esp,0x8
c001eff9:	68 82 a6 02 c0       	push   0xc002a682
c001effe:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f002:	e8 74 17 fe ff       	call   c000077b <strcmp>
c001f007:	83 c4 10             	add    esp,0x10
c001f00a:	85 c0                	test   eax,eax
c001f00c:	0f 94 c0             	sete   al
c001f00f:	84 c0                	test   al,al
c001f011:	74 0a                	je     c001f01d <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001f013:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001f01b:	eb 0a                	jmp    c001f027 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f01d:	b8 08 00 00 00       	mov    eax,0x8
c001f022:	e9 04 01 00 00       	jmp    c001f12b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f027:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001f02e:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001f033:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f037:	8b 04 85 40 d8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd27c0]
c001f03e:	83 f8 ff             	cmp    eax,0xffffffff
c001f041:	75 34                	jne    c001f077 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001f043:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001f047:	88 c2                	mov    dl,al
c001f049:	a1 20 d8 02 c0       	mov    eax,ds:0xc002d820
c001f04e:	01 d0                	add    eax,edx
c001f050:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001f054:	8b 15 20 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d820
c001f05a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f05e:	89 14 85 40 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27c0],edx
c001f065:	a1 20 d8 02 c0       	mov    eax,ds:0xc002d820
c001f06a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001f06e:	89 14 85 c0 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2740],edx
c001f075:	eb 17                	jmp    c001f08e <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001f077:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001f07b:	88 c2                	mov    dl,al
c001f07d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f081:	8b 04 85 40 d8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd27c0]
c001f088:	01 d0                	add    eax,edx
c001f08a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001f08e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f092:	88 04 24             	mov    BYTE PTR [esp],al
c001f095:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001f099:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f09d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001f0a5:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001f0aa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f0b2:	83 ec 0c             	sub    esp,0xc
c001f0b5:	68 00 20 00 00       	push   0x2000
c001f0ba:	e8 15 04 ff ff       	call   c000f4d4 <malloc>
c001f0bf:	83 c4 10             	add    esp,0x10
c001f0c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f0c6:	68 00 20 00 00       	push   0x2000
c001f0cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0cf:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f0d3:	50                   	push   eax
c001f0d4:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001f0d8:	50                   	push   eax
c001f0d9:	e8 43 80 fe ff       	call   c0007121 <f_mkfs>
c001f0de:	83 c4 10             	add    esp,0x10
c001f0e1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f0e5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f0ea:	75 07                	jne    c001f0f3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001f0ec:	b8 00 00 00 00       	mov    eax,0x0
c001f0f1:	eb 38                	jmp    c001f12b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f0f3:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001f0f8:	75 17                	jne    c001f111 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001f0fa:	83 ec 0c             	sub    esp,0xc
c001f0fd:	68 b4 a6 02 c0       	push   0xc002a6b4
c001f102:	e8 9a 35 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001f107:	83 c4 10             	add    esp,0x10
c001f10a:	b8 09 00 00 00       	mov    eax,0x9
c001f10f:	eb 1a                	jmp    c001f12b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f111:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f115:	83 ec 08             	sub    esp,0x8
c001f118:	50                   	push   eax
c001f119:	68 88 a6 02 c0       	push   0xc002a688
c001f11e:	e8 7e 35 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001f123:	83 c4 10             	add    esp,0x10
c001f126:	b8 01 00 00 00       	mov    eax,0x1
c001f12b:	83 c4 2c             	add    esp,0x2c
c001f12e:	c3                   	ret    
c001f12f:	90                   	nop

c001f130 <FAT::tryMount(LogicalDisk*, int)>:
c001f130:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001f136:	a1 20 d8 02 c0       	mov    eax,ds:0xc002d820
c001f13b:	83 f8 14             	cmp    eax,0x14
c001f13e:	75 17                	jne    c001f157 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001f140:	83 ec 0c             	sub    esp,0xc
c001f143:	68 9a a6 02 c0       	push   0xc002a69a
c001f148:	e8 2f a4 ff ff       	call   c001957c <Krnl::panic(char const*)>
c001f14d:	83 c4 10             	add    esp,0x10
c001f150:	b0 00                	mov    al,0x0
c001f152:	e9 d7 01 00 00       	jmp    c001f32e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f157:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001f15e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001f164:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f16a:	3d 00 02 00 00       	cmp    eax,0x200
c001f16f:	74 07                	je     c001f178 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001f171:	b0 00                	mov    al,0x0
c001f173:	e9 b6 01 00 00       	jmp    c001f32e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f178:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001f180:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001f187:	8b 04 85 40 d8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd27c0]
c001f18e:	83 f8 ff             	cmp    eax,0xffffffff
c001f191:	74 07                	je     c001f19a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001f193:	b0 01                	mov    al,0x1
c001f195:	e9 94 01 00 00       	jmp    c001f32e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f19a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001f1a4:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001f1ac:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001f1b3:	88 c2                	mov    dl,al
c001f1b5:	a1 20 d8 02 c0       	mov    eax,ds:0xc002d820
c001f1ba:	01 d0                	add    eax,edx
c001f1bc:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001f1c3:	8b 15 20 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d820
c001f1c9:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001f1d0:	89 14 85 40 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27c0],edx
c001f1d7:	a1 20 d8 02 c0       	mov    eax,ds:0xc002d820
c001f1dc:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001f1e3:	89 14 85 c0 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2740],edx
c001f1ea:	83 ec 0c             	sub    esp,0xc
c001f1ed:	68 54 02 00 00       	push   0x254
c001f1f2:	e8 dd 02 ff ff       	call   c000f4d4 <malloc>
c001f1f7:	83 c4 10             	add    esp,0x10
c001f1fa:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001f201:	83 ec 04             	sub    esp,0x4
c001f204:	6a 00                	push   0x0
c001f206:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001f20d:	50                   	push   eax
c001f20e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001f215:	e8 c5 5a fe ff       	call   c0004cdf <f_mount>
c001f21a:	83 c4 10             	add    esp,0x10
c001f21d:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001f224:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001f22c:	74 19                	je     c001f247 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001f22e:	83 ec 0c             	sub    esp,0xc
c001f231:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001f238:	e8 b7 02 ff ff       	call   c000f4f4 <rfree>
c001f23d:	83 c4 10             	add    esp,0x10
c001f240:	b0 00                	mov    al,0x0
c001f242:	e9 e7 00 00 00       	jmp    c001f32e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f247:	83 ec 04             	sub    esp,0x4
c001f24a:	68 00 01 00 00       	push   0x100
c001f24f:	6a 00                	push   0x0
c001f251:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001f258:	50                   	push   eax
c001f259:	e8 2d 14 fe ff       	call   c000068b <memset>
c001f25e:	83 c4 10             	add    esp,0x10
c001f261:	83 ec 08             	sub    esp,0x8
c001f264:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001f26b:	50                   	push   eax
c001f26c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001f273:	50                   	push   eax
c001f274:	e8 68 15 fe ff       	call   c00007e1 <strcat>
c001f279:	83 c4 10             	add    esp,0x10
c001f27c:	83 ec 08             	sub    esp,0x8
c001f27f:	68 a8 a6 02 c0       	push   0xc002a6a8
c001f284:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001f28b:	50                   	push   eax
c001f28c:	e8 50 15 fe ff       	call   c00007e1 <strcat>
c001f291:	83 c4 10             	add    esp,0x10
c001f294:	83 ec 04             	sub    esp,0x4
c001f297:	6a 01                	push   0x1
c001f299:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001f2a0:	50                   	push   eax
c001f2a1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f2a5:	50                   	push   eax
c001f2a6:	e8 96 5a fe ff       	call   c0004d41 <f_open>
c001f2ab:	83 c4 10             	add    esp,0x10
c001f2ae:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001f2b5:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001f2bc:	85 c0                	test   eax,eax
c001f2be:	74 0a                	je     c001f2ca <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001f2c0:	78 2d                	js     c001f2ef <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001f2c2:	83 e8 04             	sub    eax,0x4
c001f2c5:	83 f8 01             	cmp    eax,0x1
c001f2c8:	77 25                	ja     c001f2ef <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001f2ca:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001f2d2:	83 ec 0c             	sub    esp,0xc
c001f2d5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f2d9:	50                   	push   eax
c001f2da:	e8 b4 65 fe ff       	call   c0005893 <f_close>
c001f2df:	83 c4 10             	add    esp,0x10
c001f2e2:	90                   	nop
c001f2e3:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001f2eb:	74 3a                	je     c001f327 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001f2ed:	eb 2d                	jmp    c001f31c <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001f2ef:	83 ec 0c             	sub    esp,0xc
c001f2f2:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001f2f9:	e8 f6 01 ff ff       	call   c000f4f4 <rfree>
c001f2fe:	83 c4 10             	add    esp,0x10
c001f301:	83 ec 04             	sub    esp,0x4
c001f304:	6a 00                	push   0x0
c001f306:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001f30d:	50                   	push   eax
c001f30e:	6a 00                	push   0x0
c001f310:	e8 ca 59 fe ff       	call   c0004cdf <f_mount>
c001f315:	83 c4 10             	add    esp,0x10
c001f318:	b0 00                	mov    al,0x0
c001f31a:	eb 12                	jmp    c001f32e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f31c:	a1 20 d8 02 c0       	mov    eax,ds:0xc002d820
c001f321:	40                   	inc    eax
c001f322:	a3 20 d8 02 c0       	mov    ds:0xc002d820,eax
c001f327:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001f32e:	81 c4 6c 03 00 00    	add    esp,0x36c
c001f334:	c3                   	ret    
c001f335:	90                   	nop

c001f336 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001f336:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001f33c:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001f344:	74 0a                	je     c001f350 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001f346:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001f34e:	75 0a                	jne    c001f35a <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001f350:	b8 04 00 00 00       	mov    eax,0x4
c001f355:	e9 db 00 00 00       	jmp    c001f435 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001f35a:	83 ec 08             	sub    esp,0x8
c001f35d:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001f364:	50                   	push   eax
c001f365:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001f36c:	e8 2c 6b fe ff       	call   c0005e9d <f_readdir>
c001f371:	83 c4 10             	add    esp,0x10
c001f374:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001f37b:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001f381:	83 ec 0c             	sub    esp,0xc
c001f384:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001f38b:	83 c0 1a             	add    eax,0x1a
c001f38e:	50                   	push   eax
c001f38f:	e8 14 13 fe ff       	call   c00006a8 <strlen>
c001f394:	83 c4 10             	add    esp,0x10
c001f397:	ba 00 00 00 00       	mov    edx,0x0
c001f39c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f3a0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f3a4:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001f3ab:	0f b6 c0             	movzx  eax,al
c001f3ae:	83 e0 10             	and    eax,0x10
c001f3b1:	74 07                	je     c001f3ba <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001f3b3:	b8 02 00 00 00       	mov    eax,0x2
c001f3b8:	eb 05                	jmp    c001f3bf <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001f3ba:	b8 01 00 00 00       	mov    eax,0x1
c001f3bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f3c3:	83 ec 08             	sub    esp,0x8
c001f3c6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001f3cd:	83 c0 1a             	add    eax,0x1a
c001f3d0:	50                   	push   eax
c001f3d1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f3d5:	83 c0 10             	add    eax,0x10
c001f3d8:	50                   	push   eax
c001f3d9:	e8 4c 13 fe ff       	call   c000072a <strcpy>
c001f3de:	83 c4 10             	add    esp,0x10
c001f3e1:	83 ec 04             	sub    esp,0x4
c001f3e4:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001f3eb:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f3ef:	50                   	push   eax
c001f3f0:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001f3f7:	e8 59 12 fe ff       	call   c0000655 <memcpy>
c001f3fc:	83 c4 10             	add    esp,0x10
c001f3ff:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001f406:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001f40c:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001f413:	84 c0                	test   al,al
c001f415:	75 07                	jne    c001f41e <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001f417:	b8 07 00 00 00       	mov    eax,0x7
c001f41c:	eb 17                	jmp    c001f435 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001f41e:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001f425:	85 c0                	test   eax,eax
c001f427:	75 07                	jne    c001f430 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001f429:	b8 00 00 00 00       	mov    eax,0x0
c001f42e:	eb 05                	jmp    c001f435 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001f430:	b8 01 00 00 00       	mov    eax,0x1
c001f435:	81 c4 3c 02 00 00    	add    esp,0x23c
c001f43b:	c3                   	ret    

c001f43c <FAT::read(void*, unsigned long, void*, int*)>:
c001f43c:	83 ec 1c             	sub    esp,0x1c
c001f43f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001f444:	74 07                	je     c001f44d <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001f446:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001f44b:	75 07                	jne    c001f454 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001f44d:	b8 04 00 00 00       	mov    eax,0x4
c001f452:	eb 3d                	jmp    c001f491 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001f454:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f458:	50                   	push   eax
c001f459:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f45d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f461:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f465:	e8 13 5d fe ff       	call   c000517d <f_read>
c001f46a:	83 c4 10             	add    esp,0x10
c001f46d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f471:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f475:	89 c2                	mov    edx,eax
c001f477:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f47b:	89 10                	mov    DWORD PTR [eax],edx
c001f47d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f481:	85 c0                	test   eax,eax
c001f483:	75 07                	jne    c001f48c <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001f485:	b8 00 00 00 00       	mov    eax,0x0
c001f48a:	eb 05                	jmp    c001f491 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001f48c:	b8 01 00 00 00       	mov    eax,0x1
c001f491:	83 c4 1c             	add    esp,0x1c
c001f494:	c3                   	ret    
c001f495:	90                   	nop

c001f496 <FAT::write(void*, unsigned long, void*, int*)>:
c001f496:	83 ec 1c             	sub    esp,0x1c
c001f499:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001f49e:	74 07                	je     c001f4a7 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001f4a0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001f4a5:	75 07                	jne    c001f4ae <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001f4a7:	b8 04 00 00 00       	mov    eax,0x4
c001f4ac:	eb 3d                	jmp    c001f4eb <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001f4ae:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f4b2:	50                   	push   eax
c001f4b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f4bb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f4bf:	e8 39 5f fe ff       	call   c00053fd <f_write>
c001f4c4:	83 c4 10             	add    esp,0x10
c001f4c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f4cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f4cf:	89 c2                	mov    edx,eax
c001f4d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f4d5:	89 10                	mov    DWORD PTR [eax],edx
c001f4d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f4db:	85 c0                	test   eax,eax
c001f4dd:	75 07                	jne    c001f4e6 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001f4df:	b8 00 00 00 00       	mov    eax,0x0
c001f4e4:	eb 05                	jmp    c001f4eb <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001f4e6:	b8 01 00 00 00       	mov    eax,0x1
c001f4eb:	83 c4 1c             	add    esp,0x1c
c001f4ee:	c3                   	ret    
c001f4ef:	90                   	nop

c001f4f0 <FAT::close(void*)>:
c001f4f0:	83 ec 1c             	sub    esp,0x1c
c001f4f3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001f4f8:	75 07                	jne    c001f501 <FAT::close(void*)+0x11>
c001f4fa:	b8 04 00 00 00       	mov    eax,0x4
c001f4ff:	eb 36                	jmp    c001f537 <FAT::close(void*)+0x47>
c001f501:	83 ec 0c             	sub    esp,0xc
c001f504:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f508:	e8 86 63 fe ff       	call   c0005893 <f_close>
c001f50d:	83 c4 10             	add    esp,0x10
c001f510:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f514:	83 ec 0c             	sub    esp,0xc
c001f517:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f51b:	e8 c4 ff fe ff       	call   c000f4e4 <free>
c001f520:	83 c4 10             	add    esp,0x10
c001f523:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f527:	85 c0                	test   eax,eax
c001f529:	75 07                	jne    c001f532 <FAT::close(void*)+0x42>
c001f52b:	b8 00 00 00 00       	mov    eax,0x0
c001f530:	eb 05                	jmp    c001f537 <FAT::close(void*)+0x47>
c001f532:	b8 01 00 00 00       	mov    eax,0x1
c001f537:	83 c4 1c             	add    esp,0x1c
c001f53a:	c3                   	ret    
c001f53b:	90                   	nop

c001f53c <FAT::closeDir(void*)>:
c001f53c:	83 ec 1c             	sub    esp,0x1c
c001f53f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001f544:	75 07                	jne    c001f54d <FAT::closeDir(void*)+0x11>
c001f546:	b8 04 00 00 00       	mov    eax,0x4
c001f54b:	eb 36                	jmp    c001f583 <FAT::closeDir(void*)+0x47>
c001f54d:	83 ec 0c             	sub    esp,0xc
c001f550:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f554:	e8 22 69 fe ff       	call   c0005e7b <f_closedir>
c001f559:	83 c4 10             	add    esp,0x10
c001f55c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f560:	83 ec 0c             	sub    esp,0xc
c001f563:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f567:	e8 78 ff fe ff       	call   c000f4e4 <free>
c001f56c:	83 c4 10             	add    esp,0x10
c001f56f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f573:	85 c0                	test   eax,eax
c001f575:	75 07                	jne    c001f57e <FAT::closeDir(void*)+0x42>
c001f577:	b8 00 00 00 00       	mov    eax,0x0
c001f57c:	eb 05                	jmp    c001f583 <FAT::closeDir(void*)+0x47>
c001f57e:	b8 01 00 00 00       	mov    eax,0x1
c001f583:	83 c4 1c             	add    esp,0x1c
c001f586:	c3                   	ret    
c001f587:	90                   	nop

c001f588 <FAT::seek(void*, unsigned long long)>:
c001f588:	83 ec 2c             	sub    esp,0x2c
c001f58b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f58f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f593:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f597:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f59b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001f5a0:	75 07                	jne    c001f5a9 <FAT::seek(void*, unsigned long long)+0x21>
c001f5a2:	b8 04 00 00 00       	mov    eax,0x4
c001f5a7:	eb 2f                	jmp    c001f5d8 <FAT::seek(void*, unsigned long long)+0x50>
c001f5a9:	83 ec 04             	sub    esp,0x4
c001f5ac:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001f5b0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001f5b4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001f5b8:	e8 05 63 fe ff       	call   c00058c2 <f_lseek>
c001f5bd:	83 c4 10             	add    esp,0x10
c001f5c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f5c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f5c8:	85 c0                	test   eax,eax
c001f5ca:	75 07                	jne    c001f5d3 <FAT::seek(void*, unsigned long long)+0x4b>
c001f5cc:	b8 00 00 00 00       	mov    eax,0x0
c001f5d1:	eb 05                	jmp    c001f5d8 <FAT::seek(void*, unsigned long long)+0x50>
c001f5d3:	b8 01 00 00 00       	mov    eax,0x1
c001f5d8:	83 c4 2c             	add    esp,0x2c
c001f5db:	c3                   	ret    

c001f5dc <fatWrapperReadDisk>:
c001f5dc:	83 ec 1c             	sub    esp,0x1c
c001f5df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f5e3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f5e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f5eb:	89 04 24             	mov    DWORD PTR [esp],eax
c001f5ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001f5f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f5f6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f5fb:	8b 04 85 20 c8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd37e0]
c001f602:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001f606:	83 ec 0c             	sub    esp,0xc
c001f609:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f60d:	52                   	push   edx
c001f60e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f612:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f616:	50                   	push   eax
c001f617:	e8 12 67 ff ff       	call   c0015d2e <LogicalDisk::read(unsigned long long, int, void*)>
c001f61c:	83 c4 20             	add    esp,0x20
c001f61f:	83 c4 1c             	add    esp,0x1c
c001f622:	c3                   	ret    

c001f623 <fatWrapperWriteDisk>:
c001f623:	83 ec 1c             	sub    esp,0x1c
c001f626:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f62a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f62e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f632:	89 04 24             	mov    DWORD PTR [esp],eax
c001f635:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001f639:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f63d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f642:	8b 04 85 20 c8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd37e0]
c001f649:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001f64d:	83 ec 0c             	sub    esp,0xc
c001f650:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f654:	52                   	push   edx
c001f655:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f659:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f65d:	50                   	push   eax
c001f65e:	e8 37 67 ff ff       	call   c0015d9a <LogicalDisk::write(unsigned long long, int, void*)>
c001f663:	83 c4 20             	add    esp,0x20
c001f666:	83 c4 1c             	add    esp,0x1c
c001f669:	c3                   	ret    

c001f66a <fatWrapperIoctl>:
c001f66a:	53                   	push   ebx
c001f66b:	83 ec 28             	sub    esp,0x28
c001f66e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001f672:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001f676:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001f67a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001f67e:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001f683:	75 31                	jne    c001f6b6 <fatWrapperIoctl+0x4c>
c001f685:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f689:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f68d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f692:	8b 04 85 20 c8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd37e0]
c001f699:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001f69f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f6a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f6a9:	66 89 02             	mov    WORD PTR [edx],ax
c001f6ac:	b8 00 00 00 00       	mov    eax,0x0
c001f6b1:	e9 b2 00 00 00       	jmp    c001f768 <fatWrapperIoctl+0xfe>
c001f6b6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001f6bb:	75 6a                	jne    c001f727 <fatWrapperIoctl+0xbd>
c001f6bd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f6c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f6c5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f6ca:	8b 04 85 20 c8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd37e0]
c001f6d1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001f6d7:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001f6dd:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001f6e3:	89 c8                	mov    eax,ecx
c001f6e5:	89 da                	mov    edx,ebx
c001f6e7:	0f a4 c2 0a          	shld   edx,eax,0xa
c001f6eb:	c1 e0 0a             	shl    eax,0xa
c001f6ee:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001f6f3:	8b 0c 8d 20 c8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd37e0]
c001f6fa:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001f700:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001f706:	89 cb                	mov    ebx,ecx
c001f708:	c1 fb 1f             	sar    ebx,0x1f
c001f70b:	53                   	push   ebx
c001f70c:	51                   	push   ecx
c001f70d:	52                   	push   edx
c001f70e:	50                   	push   eax
c001f70f:	e8 68 55 00 00       	call   c0024c7c <__udivdi3>
c001f714:	83 c4 10             	add    esp,0x10
c001f717:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001f71b:	89 01                	mov    DWORD PTR [ecx],eax
c001f71d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f720:	b8 00 00 00 00       	mov    eax,0x0
c001f725:	eb 41                	jmp    c001f768 <fatWrapperIoctl+0xfe>
c001f727:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001f72c:	75 07                	jne    c001f735 <fatWrapperIoctl+0xcb>
c001f72e:	b8 00 00 00 00       	mov    eax,0x0
c001f733:	eb 33                	jmp    c001f768 <fatWrapperIoctl+0xfe>
c001f735:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001f73a:	75 19                	jne    c001f755 <fatWrapperIoctl+0xeb>
c001f73c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f740:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f744:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f748:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001f74e:	b8 00 00 00 00       	mov    eax,0x0
c001f753:	eb 13                	jmp    c001f768 <fatWrapperIoctl+0xfe>
c001f755:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001f75a:	75 07                	jne    c001f763 <fatWrapperIoctl+0xf9>
c001f75c:	b8 00 00 00 00       	mov    eax,0x0
c001f761:	eb 05                	jmp    c001f768 <fatWrapperIoctl+0xfe>
c001f763:	b8 04 00 00 00       	mov    eax,0x4
c001f768:	83 c4 28             	add    esp,0x28
c001f76b:	5b                   	pop    ebx
c001f76c:	c3                   	ret    
c001f76d:	90                   	nop

c001f76e <FAT::FAT()>:
c001f76e:	83 ec 1c             	sub    esp,0x1c
c001f771:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f775:	83 ec 0c             	sub    esp,0xc
c001f778:	50                   	push   eax
c001f779:	e8 28 32 ff ff       	call   c00129a6 <Filesystem::Filesystem()>
c001f77e:	83 c4 10             	add    esp,0x10
c001f781:	ba e4 a6 02 c0       	mov    edx,0xc002a6e4
c001f786:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f78a:	89 10                	mov    DWORD PTR [eax],edx
c001f78c:	c7 05 20 d8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d820,0x0
c001f796:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001f79e:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001f7a3:	7f 15                	jg     c001f7ba <FAT::FAT()+0x4c>
c001f7a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7a9:	c7 04 85 40 d8 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd27c0],0xffffffff
c001f7b4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001f7b8:	eb e4                	jmp    c001f79e <FAT::FAT()+0x30>
c001f7ba:	90                   	nop
c001f7bb:	83 c4 1c             	add    esp,0x1c
c001f7be:	c3                   	ret    
c001f7bf:	90                   	nop

c001f7c0 <FAT::fixFilepath(char*)>:
c001f7c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7c4:	8a 00                	mov    al,BYTE PTR [eax]
c001f7c6:	3c 40                	cmp    al,0x40
c001f7c8:	7e 2c                	jle    c001f7f6 <FAT::fixFilepath(char*)+0x36>
c001f7ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7ce:	8a 00                	mov    al,BYTE PTR [eax]
c001f7d0:	83 e8 41             	sub    eax,0x41
c001f7d3:	88 c2                	mov    dl,al
c001f7d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7d9:	88 10                	mov    BYTE PTR [eax],dl
c001f7db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7df:	8a 00                	mov    al,BYTE PTR [eax]
c001f7e1:	0f be c0             	movsx  eax,al
c001f7e4:	8b 04 85 40 d8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd27c0]
c001f7eb:	83 c0 30             	add    eax,0x30
c001f7ee:	88 c2                	mov    dl,al
c001f7f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7f4:	88 10                	mov    BYTE PTR [eax],dl
c001f7f6:	90                   	nop
c001f7f7:	c3                   	ret    

c001f7f8 <FAT::open(char const*, void**, FileOpenMode)>:
c001f7f8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f7fe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f806:	74 0a                	je     c001f812 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001f808:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001f810:	75 0a                	jne    c001f81c <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001f812:	b8 04 00 00 00       	mov    eax,0x4
c001f817:	e9 fd 00 00 00       	jmp    c001f919 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001f81c:	83 ec 08             	sub    esp,0x8
c001f81f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f826:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f82a:	50                   	push   eax
c001f82b:	e8 fa 0e fe ff       	call   c000072a <strcpy>
c001f830:	83 c4 10             	add    esp,0x10
c001f833:	83 ec 08             	sub    esp,0x8
c001f836:	8d 44 24 10          	lea    eax,[esp+0x10]
c001f83a:	50                   	push   eax
c001f83b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f842:	e8 79 ff ff ff       	call   c001f7c0 <FAT::fixFilepath(char*)>
c001f847:	83 c4 10             	add    esp,0x10
c001f84a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001f852:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f859:	83 e0 01             	and    eax,0x1
c001f85c:	74 08                	je     c001f866 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001f85e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001f866:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f86d:	83 e0 04             	and    eax,0x4
c001f870:	74 10                	je     c001f882 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001f872:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001f87a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001f882:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f889:	83 e0 02             	and    eax,0x2
c001f88c:	74 08                	je     c001f896 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001f88e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001f896:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f89d:	83 e0 08             	and    eax,0x8
c001f8a0:	74 08                	je     c001f8aa <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001f8a2:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001f8aa:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f8b1:	83 e0 10             	and    eax,0x10
c001f8b4:	74 08                	je     c001f8be <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001f8b6:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001f8be:	83 ec 0c             	sub    esp,0xc
c001f8c1:	68 50 02 00 00       	push   0x250
c001f8c6:	e8 09 fc fe ff       	call   c000f4d4 <malloc>
c001f8cb:	83 c4 10             	add    esp,0x10
c001f8ce:	89 c2                	mov    edx,eax
c001f8d0:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f8d7:	89 10                	mov    DWORD PTR [eax],edx
c001f8d9:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001f8e1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f8e8:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8ea:	83 ec 04             	sub    esp,0x4
c001f8ed:	52                   	push   edx
c001f8ee:	8d 54 24 10          	lea    edx,[esp+0x10]
c001f8f2:	52                   	push   edx
c001f8f3:	50                   	push   eax
c001f8f4:	e8 48 54 fe ff       	call   c0004d41 <f_open>
c001f8f9:	83 c4 10             	add    esp,0x10
c001f8fc:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001f903:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001f90b:	74 07                	je     c001f914 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001f90d:	b8 01 00 00 00       	mov    eax,0x1
c001f912:	eb 05                	jmp    c001f919 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001f914:	b8 00 00 00 00       	mov    eax,0x0
c001f919:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f91f:	c3                   	ret    

c001f920 <FAT::openDir(char const*, void**)>:
c001f920:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f926:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f92e:	74 0a                	je     c001f93a <FAT::openDir(char const*, void**)+0x1a>
c001f930:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001f938:	75 07                	jne    c001f941 <FAT::openDir(char const*, void**)+0x21>
c001f93a:	b8 04 00 00 00       	mov    eax,0x4
c001f93f:	eb 7d                	jmp    c001f9be <FAT::openDir(char const*, void**)+0x9e>
c001f941:	83 ec 08             	sub    esp,0x8
c001f944:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f94b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f94f:	50                   	push   eax
c001f950:	e8 d5 0d fe ff       	call   c000072a <strcpy>
c001f955:	83 c4 10             	add    esp,0x10
c001f958:	83 ec 08             	sub    esp,0x8
c001f95b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f95f:	50                   	push   eax
c001f960:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f967:	e8 54 fe ff ff       	call   c001f7c0 <FAT::fixFilepath(char*)>
c001f96c:	83 c4 10             	add    esp,0x10
c001f96f:	83 ec 0c             	sub    esp,0xc
c001f972:	6a 4c                	push   0x4c
c001f974:	e8 5b fb fe ff       	call   c000f4d4 <malloc>
c001f979:	83 c4 10             	add    esp,0x10
c001f97c:	89 c2                	mov    edx,eax
c001f97e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f985:	89 10                	mov    DWORD PTR [eax],edx
c001f987:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f98e:	8b 00                	mov    eax,DWORD PTR [eax]
c001f990:	83 ec 08             	sub    esp,0x8
c001f993:	8d 54 24 14          	lea    edx,[esp+0x14]
c001f997:	52                   	push   edx
c001f998:	50                   	push   eax
c001f999:	e8 db 63 fe ff       	call   c0005d79 <f_opendir>
c001f99e:	83 c4 10             	add    esp,0x10
c001f9a1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001f9a8:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001f9b0:	74 07                	je     c001f9b9 <FAT::openDir(char const*, void**)+0x99>
c001f9b2:	b8 01 00 00 00       	mov    eax,0x1
c001f9b7:	eb 05                	jmp    c001f9be <FAT::openDir(char const*, void**)+0x9e>
c001f9b9:	b8 00 00 00 00       	mov    eax,0x0
c001f9be:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f9c4:	c3                   	ret    
c001f9c5:	90                   	nop

c001f9c6 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001f9c6:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001f9cc:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001f9d4:	75 0a                	jne    c001f9e0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001f9d6:	b8 04 00 00 00       	mov    eax,0x4
c001f9db:	e9 c9 00 00 00       	jmp    c001faa9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001f9e0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001f9e8:	75 0a                	jne    c001f9f4 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001f9ea:	b8 04 00 00 00       	mov    eax,0x4
c001f9ef:	e9 b5 00 00 00       	jmp    c001faa9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001f9f4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001f9fc:	75 0a                	jne    c001fa08 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001f9fe:	b8 04 00 00 00       	mov    eax,0x4
c001fa03:	e9 a1 00 00 00       	jmp    c001faa9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001fa08:	83 ec 08             	sub    esp,0x8
c001fa0b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001fa12:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001fa19:	50                   	push   eax
c001fa1a:	e8 0b 0d fe ff       	call   c000072a <strcpy>
c001fa1f:	83 c4 10             	add    esp,0x10
c001fa22:	83 ec 08             	sub    esp,0x8
c001fa25:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001fa2c:	50                   	push   eax
c001fa2d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001fa34:	e8 87 fd ff ff       	call   c001f7c0 <FAT::fixFilepath(char*)>
c001fa39:	83 c4 10             	add    esp,0x10
c001fa3c:	83 ec 08             	sub    esp,0x8
c001fa3f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fa43:	50                   	push   eax
c001fa44:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001fa4b:	50                   	push   eax
c001fa4c:	e8 e7 64 fe ff       	call   c0005f38 <f_stat>
c001fa51:	83 c4 10             	add    esp,0x10
c001fa54:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001fa5b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001fa62:	85 c0                	test   eax,eax
c001fa64:	74 07                	je     c001fa6d <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001fa66:	83 f8 04             	cmp    eax,0x4
c001fa69:	74 32                	je     c001fa9d <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c001fa6b:	eb 37                	jmp    c001faa4 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c001fa6d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fa71:	0f b6 c0             	movzx  eax,al
c001fa74:	83 e0 10             	and    eax,0x10
c001fa77:	0f 95 c2             	setne  dl
c001fa7a:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001fa81:	88 10                	mov    BYTE PTR [eax],dl
c001fa83:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001fa86:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fa8a:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001fa91:	89 01                	mov    DWORD PTR [ecx],eax
c001fa93:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fa96:	b8 00 00 00 00       	mov    eax,0x0
c001fa9b:	eb 0c                	jmp    c001faa9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001fa9d:	b8 02 00 00 00       	mov    eax,0x2
c001faa2:	eb 05                	jmp    c001faa9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001faa4:	b8 01 00 00 00       	mov    eax,0x1
c001faa9:	81 c4 2c 02 00 00    	add    esp,0x22c
c001faaf:	c3                   	ret    

c001fab0 <FAT::unlink(char const*)>:
c001fab0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001fab6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001fabe:	75 07                	jne    c001fac7 <FAT::unlink(char const*)+0x17>
c001fac0:	b8 04 00 00 00       	mov    eax,0x4
c001fac5:	eb 5c                	jmp    c001fb23 <FAT::unlink(char const*)+0x73>
c001fac7:	83 ec 08             	sub    esp,0x8
c001faca:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001fad1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fad5:	50                   	push   eax
c001fad6:	e8 4f 0c fe ff       	call   c000072a <strcpy>
c001fadb:	83 c4 10             	add    esp,0x10
c001fade:	83 ec 08             	sub    esp,0x8
c001fae1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fae5:	50                   	push   eax
c001fae6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001faed:	e8 ce fc ff ff       	call   c001f7c0 <FAT::fixFilepath(char*)>
c001faf2:	83 c4 10             	add    esp,0x10
c001faf5:	83 ec 0c             	sub    esp,0xc
c001faf8:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fafc:	50                   	push   eax
c001fafd:	e8 88 67 fe ff       	call   c000628a <f_unlink>
c001fb02:	83 c4 10             	add    esp,0x10
c001fb05:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001fb0c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001fb13:	85 c0                	test   eax,eax
c001fb15:	75 07                	jne    c001fb1e <FAT::unlink(char const*)+0x6e>
c001fb17:	b8 00 00 00 00       	mov    eax,0x0
c001fb1c:	eb 05                	jmp    c001fb23 <FAT::unlink(char const*)+0x73>
c001fb1e:	b8 01 00 00 00       	mov    eax,0x1
c001fb23:	81 c4 1c 01 00 00    	add    esp,0x11c
c001fb29:	c3                   	ret    

c001fb2a <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001fb2a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001fb30:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001fb37:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001fb3e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001fb42:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001fb46:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001fb4e:	75 0a                	jne    c001fb5a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001fb50:	b8 04 00 00 00       	mov    eax,0x4
c001fb55:	e9 1c 01 00 00       	jmp    c001fc76 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001fb5a:	83 ec 08             	sub    esp,0x8
c001fb5d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001fb64:	8d 44 24 24          	lea    eax,[esp+0x24]
c001fb68:	50                   	push   eax
c001fb69:	e8 bc 0b fe ff       	call   c000072a <strcpy>
c001fb6e:	83 c4 10             	add    esp,0x10
c001fb71:	83 ec 08             	sub    esp,0x8
c001fb74:	8d 44 24 20          	lea    eax,[esp+0x20]
c001fb78:	50                   	push   eax
c001fb79:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001fb80:	e8 3b fc ff ff       	call   c001f7c0 <FAT::fixFilepath(char*)>
c001fb85:	83 c4 10             	add    esp,0x10
c001fb88:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001fb90:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001fb98:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001fb9d:	83 e0 01             	and    eax,0x1
c001fba0:	74 08                	je     c001fbaa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001fba2:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001fbaa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001fbaf:	83 e0 02             	and    eax,0x2
c001fbb2:	74 08                	je     c001fbbc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001fbb4:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001fbbc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001fbc1:	83 e0 04             	and    eax,0x4
c001fbc4:	74 08                	je     c001fbce <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001fbc6:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001fbce:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001fbd3:	83 e0 08             	and    eax,0x8
c001fbd6:	74 08                	je     c001fbe0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001fbd8:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001fbe0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fbe5:	83 e0 01             	and    eax,0x1
c001fbe8:	74 08                	je     c001fbf2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001fbea:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001fbf2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fbf7:	83 e0 02             	and    eax,0x2
c001fbfa:	74 08                	je     c001fc04 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001fbfc:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001fc04:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fc09:	83 e0 04             	and    eax,0x4
c001fc0c:	74 08                	je     c001fc16 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001fc0e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001fc16:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fc1b:	83 e0 08             	and    eax,0x8
c001fc1e:	74 08                	je     c001fc28 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001fc20:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001fc28:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001fc2f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001fc36:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001fc3e:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001fc46:	83 ec 04             	sub    esp,0x4
c001fc49:	52                   	push   edx
c001fc4a:	50                   	push   eax
c001fc4b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001fc4f:	50                   	push   eax
c001fc50:	e8 d7 6c fe ff       	call   c000692c <f_chmod>
c001fc55:	83 c4 10             	add    esp,0x10
c001fc58:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001fc5f:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001fc66:	85 c0                	test   eax,eax
c001fc68:	75 07                	jne    c001fc71 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001fc6a:	b8 00 00 00 00       	mov    eax,0x0
c001fc6f:	eb 05                	jmp    c001fc76 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001fc71:	b8 01 00 00 00       	mov    eax,0x1
c001fc76:	81 c4 2c 01 00 00    	add    esp,0x12c
c001fc7c:	c3                   	ret    
c001fc7d:	90                   	nop

c001fc7e <FAT::rename(char const*, char const*)>:
c001fc7e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001fc84:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001fc8c:	74 0a                	je     c001fc98 <FAT::rename(char const*, char const*)+0x1a>
c001fc8e:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001fc96:	75 0a                	jne    c001fca2 <FAT::rename(char const*, char const*)+0x24>
c001fc98:	b8 04 00 00 00       	mov    eax,0x4
c001fc9d:	e9 98 00 00 00       	jmp    c001fd3a <FAT::rename(char const*, char const*)+0xbc>
c001fca2:	83 ec 08             	sub    esp,0x8
c001fca5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001fcac:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001fcb3:	50                   	push   eax
c001fcb4:	e8 71 0a fe ff       	call   c000072a <strcpy>
c001fcb9:	83 c4 10             	add    esp,0x10
c001fcbc:	83 ec 08             	sub    esp,0x8
c001fcbf:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001fcc6:	50                   	push   eax
c001fcc7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001fcce:	e8 ed fa ff ff       	call   c001f7c0 <FAT::fixFilepath(char*)>
c001fcd3:	83 c4 10             	add    esp,0x10
c001fcd6:	83 ec 08             	sub    esp,0x8
c001fcd9:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001fce0:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fce4:	50                   	push   eax
c001fce5:	e8 40 0a fe ff       	call   c000072a <strcpy>
c001fcea:	83 c4 10             	add    esp,0x10
c001fced:	83 ec 08             	sub    esp,0x8
c001fcf0:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fcf4:	50                   	push   eax
c001fcf5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001fcfc:	e8 bf fa ff ff       	call   c001f7c0 <FAT::fixFilepath(char*)>
c001fd01:	83 c4 10             	add    esp,0x10
c001fd04:	83 ec 08             	sub    esp,0x8
c001fd07:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fd0b:	50                   	push   eax
c001fd0c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001fd13:	50                   	push   eax
c001fd14:	e8 20 69 fe ff       	call   c0006639 <f_rename>
c001fd19:	83 c4 10             	add    esp,0x10
c001fd1c:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001fd23:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001fd2a:	85 c0                	test   eax,eax
c001fd2c:	75 07                	jne    c001fd35 <FAT::rename(char const*, char const*)+0xb7>
c001fd2e:	b8 00 00 00 00       	mov    eax,0x0
c001fd33:	eb 05                	jmp    c001fd3a <FAT::rename(char const*, char const*)+0xbc>
c001fd35:	b8 01 00 00 00       	mov    eax,0x1
c001fd3a:	81 c4 1c 02 00 00    	add    esp,0x21c
c001fd40:	c3                   	ret    
c001fd41:	90                   	nop

c001fd42 <FAT::mkdir(char const*)>:
c001fd42:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001fd48:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001fd50:	75 07                	jne    c001fd59 <FAT::mkdir(char const*)+0x17>
c001fd52:	b8 04 00 00 00       	mov    eax,0x4
c001fd57:	eb 5c                	jmp    c001fdb5 <FAT::mkdir(char const*)+0x73>
c001fd59:	83 ec 08             	sub    esp,0x8
c001fd5c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001fd63:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fd67:	50                   	push   eax
c001fd68:	e8 bd 09 fe ff       	call   c000072a <strcpy>
c001fd6d:	83 c4 10             	add    esp,0x10
c001fd70:	83 ec 08             	sub    esp,0x8
c001fd73:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fd77:	50                   	push   eax
c001fd78:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001fd7f:	e8 3c fa ff ff       	call   c001f7c0 <FAT::fixFilepath(char*)>
c001fd84:	83 c4 10             	add    esp,0x10
c001fd87:	83 ec 0c             	sub    esp,0xc
c001fd8a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fd8e:	50                   	push   eax
c001fd8f:	e8 79 66 fe ff       	call   c000640d <f_mkdir>
c001fd94:	83 c4 10             	add    esp,0x10
c001fd97:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001fd9e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001fda5:	85 c0                	test   eax,eax
c001fda7:	75 07                	jne    c001fdb0 <FAT::mkdir(char const*)+0x6e>
c001fda9:	b8 00 00 00 00       	mov    eax,0x0
c001fdae:	eb 05                	jmp    c001fdb5 <FAT::mkdir(char const*)+0x73>
c001fdb0:	b8 01 00 00 00       	mov    eax,0x1
c001fdb5:	81 c4 1c 01 00 00    	add    esp,0x11c
c001fdbb:	c3                   	ret    

c001fdbc <FAT::exists(char const*)>:
c001fdbc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001fdc2:	83 ec 08             	sub    esp,0x8
c001fdc5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001fdcc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fdd0:	50                   	push   eax
c001fdd1:	e8 54 09 fe ff       	call   c000072a <strcpy>
c001fdd6:	83 c4 10             	add    esp,0x10
c001fdd9:	83 ec 08             	sub    esp,0x8
c001fddc:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fde0:	50                   	push   eax
c001fde1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001fde8:	e8 d3 f9 ff ff       	call   c001f7c0 <FAT::fixFilepath(char*)>
c001fded:	83 c4 10             	add    esp,0x10
c001fdf0:	83 ec 08             	sub    esp,0x8
c001fdf3:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001fdfa:	50                   	push   eax
c001fdfb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fdff:	50                   	push   eax
c001fe00:	e8 33 61 fe ff       	call   c0005f38 <f_stat>
c001fe05:	83 c4 10             	add    esp,0x10
c001fe08:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001fe0f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001fe16:	85 c0                	test   eax,eax
c001fe18:	75 04                	jne    c001fe1e <FAT::exists(char const*)+0x62>
c001fe1a:	b0 01                	mov    al,0x1
c001fe1c:	eb 02                	jmp    c001fe20 <FAT::exists(char const*)+0x64>
c001fe1e:	b0 00                	mov    al,0x0
c001fe20:	81 c4 2c 02 00 00    	add    esp,0x22c
c001fe26:	c3                   	ret    
c001fe27:	90                   	nop

c001fe28 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001fe28:	b8 08 00 00 00       	mov    eax,0x8
c001fe2d:	c3                   	ret    

c001fe2e <ISO9660::seek(void*, unsigned long long)>:
c001fe2e:	53                   	push   ebx
c001fe2f:	b8 04 00 00 00       	mov    eax,0x4
c001fe34:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fe38:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fe3c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001fe40:	85 d2                	test   edx,edx
c001fe42:	74 17                	je     c001fe5b <ISO9660::seek(void*, unsigned long long)+0x2d>
c001fe44:	89 c8                	mov    eax,ecx
c001fe46:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001fe49:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001fe4c:	b8 01 00 00 00       	mov    eax,0x1
c001fe51:	73 08                	jae    c001fe5b <ISO9660::seek(void*, unsigned long long)+0x2d>
c001fe53:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001fe56:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001fe59:	31 c0                	xor    eax,eax
c001fe5b:	5b                   	pop    ebx
c001fe5c:	c3                   	ret    
c001fe5d:	90                   	nop

c001fe5e <ISO9660::tell(void*, unsigned long long*)>:
c001fe5e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fe62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe66:	85 d2                	test   edx,edx
c001fe68:	74 12                	je     c001fe7c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001fe6a:	85 c0                	test   eax,eax
c001fe6c:	74 0e                	je     c001fe7c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001fe6e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001fe71:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001fe74:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001fe77:	89 10                	mov    DWORD PTR [eax],edx
c001fe79:	31 c0                	xor    eax,eax
c001fe7b:	c3                   	ret    
c001fe7c:	b8 04 00 00 00       	mov    eax,0x4
c001fe81:	c3                   	ret    

c001fe82 <ISO9660::getName()>:
c001fe82:	b8 40 a7 02 c0       	mov    eax,0xc002a740
c001fe87:	c3                   	ret    

c001fe88 <ISO9660::stat(void*, unsigned long long*)>:
c001fe88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fe8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe90:	85 d2                	test   edx,edx
c001fe92:	74 12                	je     c001fea6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001fe94:	85 c0                	test   eax,eax
c001fe96:	74 0e                	je     c001fea6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001fe98:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001fe9b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001fe9e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001fea1:	89 10                	mov    DWORD PTR [eax],edx
c001fea3:	31 c0                	xor    eax,eax
c001fea5:	c3                   	ret    
c001fea6:	b8 04 00 00 00       	mov    eax,0x4
c001feab:	c3                   	ret    

c001feac <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001feac:	b8 01 00 00 00       	mov    eax,0x1
c001feb1:	c3                   	ret    

c001feb2 <ISO9660::unlink(char const*)>:
c001feb2:	b8 01 00 00 00       	mov    eax,0x1
c001feb7:	c3                   	ret    

c001feb8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001feb8:	b8 01 00 00 00       	mov    eax,0x1
c001febd:	c3                   	ret    

c001febe <ISO9660::rename(char const*, char const*)>:
c001febe:	b8 01 00 00 00       	mov    eax,0x1
c001fec3:	c3                   	ret    

c001fec4 <ISO9660::mkdir(char const*)>:
c001fec4:	b8 01 00 00 00       	mov    eax,0x1
c001fec9:	c3                   	ret    

c001feca <ISO9660::close(void*)>:
c001feca:	83 ec 0c             	sub    esp,0xc
c001fecd:	b8 04 00 00 00       	mov    eax,0x4
c001fed2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fed6:	85 d2                	test   edx,edx
c001fed8:	74 0e                	je     c001fee8 <ISO9660::close(void*)+0x1e>
c001feda:	83 ec 0c             	sub    esp,0xc
c001fedd:	52                   	push   edx
c001fede:	e8 01 f6 fe ff       	call   c000f4e4 <free>
c001fee3:	83 c4 10             	add    esp,0x10
c001fee6:	31 c0                	xor    eax,eax
c001fee8:	83 c4 0c             	add    esp,0xc
c001feeb:	c3                   	ret    

c001feec <ISO9660::closeDir(void*)>:
c001feec:	83 ec 0c             	sub    esp,0xc
c001feef:	b8 04 00 00 00       	mov    eax,0x4
c001fef4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fef8:	85 d2                	test   edx,edx
c001fefa:	74 0e                	je     c001ff0a <ISO9660::closeDir(void*)+0x1e>
c001fefc:	83 ec 0c             	sub    esp,0xc
c001feff:	52                   	push   edx
c001ff00:	e8 df f5 fe ff       	call   c000f4e4 <free>
c001ff05:	83 c4 10             	add    esp,0x10
c001ff08:	31 c0                	xor    eax,eax
c001ff0a:	83 c4 0c             	add    esp,0xc
c001ff0d:	c3                   	ret    

c001ff0e <ISO9660::~ISO9660()>:
c001ff0e:	83 ec 0c             	sub    esp,0xc
c001ff11:	ba 94 a7 02 c0       	mov    edx,0xc002a794
c001ff16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff1a:	89 10                	mov    DWORD PTR [eax],edx
c001ff1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff20:	83 ec 0c             	sub    esp,0xc
c001ff23:	50                   	push   eax
c001ff24:	e8 a1 2a ff ff       	call   c00129ca <Filesystem::~Filesystem()>
c001ff29:	83 c4 10             	add    esp,0x10
c001ff2c:	90                   	nop
c001ff2d:	83 c4 0c             	add    esp,0xc
c001ff30:	c3                   	ret    
c001ff31:	90                   	nop

c001ff32 <ISO9660::~ISO9660()>:
c001ff32:	83 ec 0c             	sub    esp,0xc
c001ff35:	83 ec 0c             	sub    esp,0xc
c001ff38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff3c:	e8 cd ff ff ff       	call   c001ff0e <ISO9660::~ISO9660()>
c001ff41:	83 c4 10             	add    esp,0x10
c001ff44:	83 ec 08             	sub    esp,0x8
c001ff47:	6a 08                	push   0x8
c001ff49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff4d:	e8 6f 26 ff ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c001ff52:	83 c4 10             	add    esp,0x10
c001ff55:	83 c4 0c             	add    esp,0xc
c001ff58:	c3                   	ret    

c001ff59 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001ff59:	55                   	push   ebp
c001ff5a:	31 c9                	xor    ecx,ecx
c001ff5c:	57                   	push   edi
c001ff5d:	56                   	push   esi
c001ff5e:	53                   	push   ebx
c001ff5f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001ff63:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ff67:	89 eb                	mov    ebx,ebp
c001ff69:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001ff6d:	39 ce                	cmp    esi,ecx
c001ff6f:	7e 17                	jle    c001ff88 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001ff71:	31 d2                	xor    edx,edx
c001ff73:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001ff77:	7d 13                	jge    c001ff8c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001ff79:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ff7d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001ff80:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001ff83:	75 0d                	jne    c001ff92 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001ff85:	42                   	inc    edx
c001ff86:	eb eb                	jmp    c001ff73 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001ff88:	31 c0                	xor    eax,eax
c001ff8a:	eb 0a                	jmp    c001ff96 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ff8c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001ff90:	eb 04                	jmp    c001ff96 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ff92:	41                   	inc    ecx
c001ff93:	43                   	inc    ebx
c001ff94:	eb d7                	jmp    c001ff6d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001ff96:	5b                   	pop    ebx
c001ff97:	5e                   	pop    esi
c001ff98:	5f                   	pop    edi
c001ff99:	5d                   	pop    ebp
c001ff9a:	c3                   	ret    

c001ff9b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001ff9b:	56                   	push   esi
c001ff9c:	53                   	push   ebx
c001ff9d:	52                   	push   edx
c001ff9e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ffa2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ffa6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ffaa:	39 0d 20 d9 02 c0    	cmp    DWORD PTR ds:0xc002d920,ecx
c001ffb0:	75 08                	jne    c001ffba <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001ffb2:	38 05 b4 b7 02 c0    	cmp    BYTE PTR ds:0xc002b7b4,al
c001ffb8:	74 2b                	je     c001ffe5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001ffba:	83 ec 0c             	sub    esp,0xc
c001ffbd:	a2 b4 b7 02 c0       	mov    ds:0xc002b7b4,al
c001ffc2:	68 40 d9 02 c0       	push   0xc002d940
c001ffc7:	0f be c0             	movsx  eax,al
c001ffca:	6a 01                	push   0x1
c001ffcc:	89 0d 20 d9 02 c0    	mov    DWORD PTR ds:0xc002d920,ecx
c001ffd2:	31 db                	xor    ebx,ebx
c001ffd4:	53                   	push   ebx
c001ffd5:	51                   	push   ecx
c001ffd6:	ff 34 85 1c c7 02 c0 	push   DWORD PTR [eax*4-0x3ffd38e4]
c001ffdd:	e8 4c 5d ff ff       	call   c0015d2e <LogicalDisk::read(unsigned long long, int, void*)>
c001ffe2:	83 c4 20             	add    esp,0x20
c001ffe5:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001ffed:	c7 44 24 14 40 d9 02 c0 	mov    DWORD PTR [esp+0x14],0xc002d940
c001fff5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001fff9:	58                   	pop    eax
c001fffa:	5b                   	pop    ebx
c001fffb:	5e                   	pop    esi
c001fffc:	e9 54 06 fe ff       	jmp    c0000655 <memcpy>
c0020001:	90                   	nop

c0020002 <ISO9660::tryMount(LogicalDisk*, int)>:
c0020002:	81 ec 10 08 00 00    	sub    esp,0x810
c0020008:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c002000f:	83 c0 41             	add    eax,0x41
c0020012:	0f be c0             	movsx  eax,al
c0020015:	50                   	push   eax
c0020016:	8d 44 24 08          	lea    eax,[esp+0x8]
c002001a:	50                   	push   eax
c002001b:	6a 10                	push   0x10
c002001d:	e8 79 ff ff ff       	call   c001ff9b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020022:	83 c4 10             	add    esp,0x10
c0020025:	31 c0                	xor    eax,eax
c0020027:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c002002c:	75 1d                	jne    c002004b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002002e:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0020033:	75 16                	jne    c002004b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020035:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002003a:	75 0f                	jne    c002004b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002003c:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0020041:	75 08                	jne    c002004b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020043:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0020048:	0f 94 c0             	sete   al
c002004b:	81 c4 0c 08 00 00    	add    esp,0x80c
c0020051:	c3                   	ret    

c0020052 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0020052:	55                   	push   ebp
c0020053:	57                   	push   edi
c0020054:	56                   	push   esi
c0020055:	53                   	push   ebx
c0020056:	81 ec 34 08 00 00    	sub    esp,0x834
c002005c:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c0020063:	55                   	push   ebp
c0020064:	68 5b a7 02 c0       	push   0xc002a75b
c0020069:	e8 33 26 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c002006e:	83 c4 10             	add    esp,0x10
c0020071:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c0020079:	0f 84 06 02 00 00    	je     c0020285 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c002007f:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0020087:	0f 84 f8 01 00 00    	je     c0020285 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c002008d:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c0020094:	b8 01 00 00 00       	mov    eax,0x1
c0020099:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c002009d:	0f 85 e7 01 00 00    	jne    c002028a <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c00200a3:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c00200a6:	31 d2                	xor    edx,edx
c00200a8:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c00200ab:	89 e9                	mov    ecx,ebp
c00200ad:	89 d3                	mov    ebx,edx
c00200af:	01 f1                	add    ecx,esi
c00200b1:	11 fb                	adc    ebx,edi
c00200b3:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00200b7:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00200bb:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c00200c2:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00200c5:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c00200c8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00200cc:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00200d0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00200d4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00200d8:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c00200dc:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00200e0:	72 19                	jb     c00200fb <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c00200e2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00200e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00200ee:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00200f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00200f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00200f9:	eb 13                	jmp    c002010e <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c00200fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00200ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020103:	29 f0                	sub    eax,esi
c0020105:	19 fa                	sbb    edx,edi
c0020107:	89 04 24             	mov    DWORD PTR [esp],eax
c002010a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002010e:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c0020115:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0020118:	8b 00                	mov    eax,DWORD PTR [eax]
c002011a:	53                   	push   ebx
c002011b:	0f a4 c2 0b          	shld   edx,eax,0xb
c002011f:	c1 e0 0b             	shl    eax,0xb
c0020122:	01 c6                	add    esi,eax
c0020124:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002012b:	11 d7                	adc    edi,edx
c002012d:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0020131:	89 fa                	mov    edx,edi
c0020133:	50                   	push   eax
c0020134:	8d 44 24 28          	lea    eax,[esp+0x28]
c0020138:	50                   	push   eax
c0020139:	89 f0                	mov    eax,esi
c002013b:	0f ac d0 0b          	shrd   eax,edx,0xb
c002013f:	50                   	push   eax
c0020140:	e8 56 fe ff ff       	call   c001ff9b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020145:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c002014c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020150:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020153:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0020157:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002015d:	83 c4 10             	add    esp,0x10
c0020160:	b8 00 08 00 00       	mov    eax,0x800
c0020165:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0020169:	29 d0                	sub    eax,edx
c002016b:	39 c1                	cmp    ecx,eax
c002016d:	83 db 00             	sbb    ebx,0x0
c0020170:	7d 19                	jge    c002018b <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c0020172:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0020177:	75 16                	jne    c002018f <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c0020179:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020180:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020186:	e9 f6 00 00 00       	jmp    c0020281 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c002018b:	89 c5                	mov    ebp,eax
c002018d:	eb 03                	jmp    c0020192 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c002018f:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0020192:	51                   	push   ecx
c0020193:	55                   	push   ebp
c0020194:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c0020198:	50                   	push   eax
c0020199:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c00201a0:	e8 b0 04 fe ff       	call   c0000655 <memcpy>
c00201a5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00201a9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00201ad:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c00201b4:	01 e8                	add    eax,ebp
c00201b6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00201ba:	89 e8                	mov    eax,ebp
c00201bc:	99                   	cdq    
c00201bd:	01 ee                	add    esi,ebp
c00201bf:	11 d7                	adc    edi,edx
c00201c1:	29 e9                	sub    ecx,ebp
c00201c3:	19 d3                	sbb    ebx,edx
c00201c5:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00201c9:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00201cd:	83 c4 10             	add    esp,0x10
c00201d0:	b8 ff 07 00 00       	mov    eax,0x7ff
c00201d5:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00201d8:	b8 00 00 00 00       	mov    eax,0x0
c00201dd:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00201e1:	7d 3f                	jge    c0020222 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c00201e3:	52                   	push   edx
c00201e4:	89 fa                	mov    edx,edi
c00201e6:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00201ed:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c00201f1:	50                   	push   eax
c00201f2:	89 f0                	mov    eax,esi
c00201f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00201f8:	0f ac d0 0b          	shrd   eax,edx,0xb
c00201fc:	50                   	push   eax
c00201fd:	e8 99 fd ff ff       	call   c001ff9b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020202:	81 c6 00 08 00 00    	add    esi,0x800
c0020208:	83 d7 00             	adc    edi,0x0
c002020b:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0020213:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c002021b:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0020220:	eb ab                	jmp    c00201cd <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c0020222:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020226:	0b 04 24             	or     eax,DWORD PTR [esp]
c0020229:	74 34                	je     c002025f <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c002022b:	89 fa                	mov    edx,edi
c002022d:	50                   	push   eax
c002022e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0020235:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0020239:	50                   	push   eax
c002023a:	89 f0                	mov    eax,esi
c002023c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0020240:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020244:	55                   	push   ebp
c0020245:	50                   	push   eax
c0020246:	e8 50 fd ff ff       	call   c001ff9b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002024b:	83 c4 0c             	add    esp,0xc
c002024e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0020252:	55                   	push   ebp
c0020253:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020257:	e8 f9 03 fe ff       	call   c0000655 <memcpy>
c002025c:	83 c4 10             	add    esp,0x10
c002025f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020266:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002026a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002026e:	89 38                	mov    DWORD PTR [eax],edi
c0020270:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c0020277:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002027b:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c002027e:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0020281:	31 c0                	xor    eax,eax
c0020283:	eb 05                	jmp    c002028a <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c0020285:	b8 04 00 00 00       	mov    eax,0x4
c002028a:	81 c4 2c 08 00 00    	add    esp,0x82c
c0020290:	5b                   	pop    ebx
c0020291:	5e                   	pop    esi
c0020292:	5f                   	pop    edi
c0020293:	5d                   	pop    ebp
c0020294:	c3                   	ret    
c0020295:	90                   	nop

c0020296 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0020296:	55                   	push   ebp
c0020297:	57                   	push   edi
c0020298:	56                   	push   esi
c0020299:	53                   	push   ebx
c002029a:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00202a0:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c00202a7:	85 f6                	test   esi,esi
c00202a9:	0f 84 64 02 00 00    	je     c0020513 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00202af:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00202b7:	0f 84 56 02 00 00    	je     c0020513 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00202bd:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00202c0:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c00202c3:	75 0a                	jne    c00202cf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c00202c5:	b8 07 00 00 00       	mov    eax,0x7
c00202ca:	e9 49 02 00 00       	jmp    c0020518 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c00202cf:	50                   	push   eax
c00202d0:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c00202d4:	50                   	push   eax
c00202d5:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00202dc:	53                   	push   ebx
c00202dd:	8b 06                	mov    eax,DWORD PTR [esi]
c00202df:	c1 e0 0b             	shl    eax,0xb
c00202e2:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00202e5:	c1 e8 0b             	shr    eax,0xb
c00202e8:	50                   	push   eax
c00202e9:	e8 ad fc ff ff       	call   c001ff9b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00202ee:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00202f1:	83 c4 10             	add    esp,0x10
c00202f4:	89 c1                	mov    ecx,eax
c00202f6:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c00202f9:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00202ff:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0020302:	84 db                	test   bl,bl
c0020304:	0f 85 90 00 00 00    	jne    c002039a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c002030a:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0020310:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020316:	29 c7                	sub    edi,eax
c0020318:	89 fb                	mov    ebx,edi
c002031a:	c1 fb 1f             	sar    ebx,0x1f
c002031d:	01 f8                	add    eax,edi
c002031f:	11 da                	adc    edx,ebx
c0020321:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020325:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020329:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c002032c:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c002032f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020332:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020335:	89 04 24             	mov    DWORD PTR [esp],eax
c0020338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002033c:	89 d8                	mov    eax,ebx
c002033e:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020341:	ba 00 00 00 00       	mov    edx,0x0
c0020346:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c002034a:	b8 00 00 00 00       	mov    eax,0x0
c002034f:	73 0b                	jae    c002035c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0020351:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020354:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020358:	29 f8                	sub    eax,edi
c002035a:	19 da                	sbb    edx,ebx
c002035c:	89 d3                	mov    ebx,edx
c002035e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020361:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020364:	09 c3                	or     ebx,eax
c0020366:	0f 84 59 ff ff ff    	je     c00202c5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c002036c:	55                   	push   ebp
c002036d:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020371:	50                   	push   eax
c0020372:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020379:	53                   	push   ebx
c002037a:	8b 06                	mov    eax,DWORD PTR [esi]
c002037c:	c1 e0 0b             	shl    eax,0xb
c002037f:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0020383:	c1 e8 0b             	shr    eax,0xb
c0020386:	50                   	push   eax
c0020387:	e8 0f fc ff ff       	call   c001ff9b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002038c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002038f:	83 c4 10             	add    esp,0x10
c0020392:	25 ff 07 00 00       	and    eax,0x7ff
c0020397:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c002039a:	57                   	push   edi
c002039b:	6a 28                	push   0x28
c002039d:	6a 00                	push   0x0
c002039f:	8d 44 24 24          	lea    eax,[esp+0x24]
c00203a3:	50                   	push   eax
c00203a4:	e8 e2 02 fe ff       	call   c000068b <memset>
c00203a9:	31 d2                	xor    edx,edx
c00203ab:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00203ae:	81 e7 ff 07 00 00    	and    edi,0x7ff
c00203b4:	89 f8                	mov    eax,edi
c00203b6:	83 c0 21             	add    eax,0x21
c00203b9:	83 d2 00             	adc    edx,0x0
c00203bc:	89 c7                	mov    edi,eax
c00203be:	89 d5                	mov    ebp,edx
c00203c0:	83 c4 10             	add    esp,0x10
c00203c3:	31 c9                	xor    ecx,ecx
c00203c5:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c00203cc:	83 f9 28             	cmp    ecx,0x28
c00203cf:	88 04 24             	mov    BYTE PTR [esp],al
c00203d2:	0f 94 c2             	sete   dl
c00203d5:	88 d0                	mov    al,dl
c00203d7:	ba ff 07 00 00       	mov    edx,0x7ff
c00203dc:	39 fa                	cmp    edx,edi
c00203de:	ba 00 00 00 00       	mov    edx,0x0
c00203e3:	19 ea                	sbb    edx,ebp
c00203e5:	0f 92 c2             	setb   dl
c00203e8:	09 c2                	or     edx,eax
c00203ea:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00203ee:	0f 94 c0             	sete   al
c00203f1:	08 d0                	or     al,dl
c00203f3:	75 16                	jne    c002040b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c00203f5:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c00203f9:	74 10                	je     c002040b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c00203fb:	8a 04 24             	mov    al,BYTE PTR [esp]
c00203fe:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0020402:	41                   	inc    ecx
c0020403:	83 c7 01             	add    edi,0x1
c0020406:	83 d5 00             	adc    ebp,0x0
c0020409:	eb ba                	jmp    c00203c5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c002040b:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0020412:	83 ec 0c             	sub    esp,0xc
c0020415:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0020419:	57                   	push   edi
c002041a:	e8 89 02 fe ff       	call   c00006a8 <strlen>
c002041f:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0020427:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c002042b:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0020432:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020435:	5a                   	pop    edx
c0020436:	25 ff 07 00 00       	and    eax,0x7ff
c002043b:	01 c8                	add    eax,ecx
c002043d:	59                   	pop    ecx
c002043e:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0020444:	83 e0 02             	and    eax,0x2
c0020447:	3c 01                	cmp    al,0x1
c0020449:	19 c0                	sbb    eax,eax
c002044b:	83 c0 02             	add    eax,0x2
c002044e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020452:	57                   	push   edi
c0020453:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0020457:	50                   	push   eax
c0020458:	e8 cd 02 fe ff       	call   c000072a <strcpy>
c002045d:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0020461:	83 c4 10             	add    esp,0x10
c0020464:	84 c0                	test   al,al
c0020466:	75 21                	jne    c0020489 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0020468:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0020470:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020478:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020480:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0020487:	eb 28                	jmp    c00204b1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020489:	fe c8                	dec    al
c002048b:	75 24                	jne    c00204b1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c002048d:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0020495:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002049d:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00204a5:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c00204ac:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c00204b1:	0f b6 fb             	movzx  edi,bl
c00204b4:	31 db                	xor    ebx,ebx
c00204b6:	50                   	push   eax
c00204b7:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c00204be:	8d 44 24 48          	lea    eax,[esp+0x48]
c00204c2:	50                   	push   eax
c00204c3:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c00204ca:	e8 86 01 fe ff       	call   c0000655 <memcpy>
c00204cf:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c00204d6:	89 f9                	mov    ecx,edi
c00204d8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00204de:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c00204e1:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00204e4:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c00204e7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00204ea:	83 c4 10             	add    esp,0x10
c00204ed:	39 c7                	cmp    edi,eax
c00204ef:	89 df                	mov    edi,ebx
c00204f1:	19 d7                	sbb    edi,edx
c00204f3:	72 10                	jb     c0020505 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00204f5:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c00204fc:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0020503:	eb 0a                	jmp    c002050f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0020505:	29 c8                	sub    eax,ecx
c0020507:	19 da                	sbb    edx,ebx
c0020509:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c002050c:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c002050f:	31 c0                	xor    eax,eax
c0020511:	eb 05                	jmp    c0020518 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0020513:	b8 04 00 00 00       	mov    eax,0x4
c0020518:	81 c4 5c 09 00 00    	add    esp,0x95c
c002051e:	5b                   	pop    ebx
c002051f:	5e                   	pop    esi
c0020520:	5f                   	pop    edi
c0020521:	5d                   	pop    ebp
c0020522:	c3                   	ret    

c0020523 <readRoot(unsigned int*, unsigned int*, char)>:
c0020523:	81 ec 40 08 00 00    	sub    esp,0x840
c0020529:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0020531:	50                   	push   eax
c0020532:	8d 44 24 38          	lea    eax,[esp+0x38]
c0020536:	50                   	push   eax
c0020537:	6a 10                	push   0x10
c0020539:	e8 5d fa ff ff       	call   c001ff9b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002053e:	83 c4 0c             	add    esp,0xc
c0020541:	6a 22                	push   0x22
c0020543:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c002054a:	50                   	push   eax
c002054b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002054f:	50                   	push   eax
c0020550:	e8 00 01 fe ff       	call   c0000655 <memcpy>
c0020555:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002055c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0020560:	89 10                	mov    DWORD PTR [eax],edx
c0020562:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0020569:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002056d:	89 10                	mov    DWORD PTR [eax],edx
c002056f:	b0 01                	mov    al,0x1
c0020571:	81 c4 4c 08 00 00    	add    esp,0x84c
c0020577:	c3                   	ret    

c0020578 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0020578:	55                   	push   ebp
c0020579:	57                   	push   edi
c002057a:	56                   	push   esi
c002057b:	53                   	push   ebx
c002057c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020582:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0020589:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0020590:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020594:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0020598:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002059c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00205a0:	75 03                	jne    c00205a5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00205a2:	83 c3 02             	add    ebx,0x2
c00205a5:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c00205a8:	75 03                	jne    c00205ad <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c00205aa:	43                   	inc    ebx
c00205ab:	eb f8                	jmp    c00205a5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00205ad:	51                   	push   ecx
c00205ae:	68 00 01 00 00       	push   0x100
c00205b3:	6a 00                	push   0x0
c00205b5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00205b9:	50                   	push   eax
c00205ba:	e8 cc 00 fe ff       	call   c000068b <memset>
c00205bf:	83 c4 10             	add    esp,0x10
c00205c2:	31 d2                	xor    edx,edx
c00205c4:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00205c7:	84 c0                	test   al,al
c00205c9:	74 21                	je     c00205ec <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c00205cb:	3c 2f                	cmp    al,0x2f
c00205cd:	75 0b                	jne    c00205da <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c00205cf:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c00205d3:	bd 01 00 00 00       	mov    ebp,0x1
c00205d8:	eb 14                	jmp    c00205ee <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c00205da:	8d 48 9f             	lea    ecx,[eax-0x61]
c00205dd:	80 f9 19             	cmp    cl,0x19
c00205e0:	77 03                	ja     c00205e5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c00205e2:	83 e8 20             	sub    eax,0x20
c00205e5:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c00205e9:	42                   	inc    edx
c00205ea:	eb d8                	jmp    c00205c4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c00205ec:	31 ed                	xor    ebp,ebp
c00205ee:	83 ec 0c             	sub    esp,0xc
c00205f1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00205f8:	e8 d7 ee fe ff       	call   c000f4d4 <malloc>
c00205fd:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0020604:	89 c6                	mov    esi,eax
c0020606:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c002060c:	c1 ef 0b             	shr    edi,0xb
c002060f:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0020616:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c002061a:	83 c4 10             	add    esp,0x10
c002061d:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0020622:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020626:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c002062d:	74 28                	je     c0020657 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c002062f:	52                   	push   edx
c0020630:	57                   	push   edi
c0020631:	50                   	push   eax
c0020632:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020636:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c002063d:	e8 59 f9 ff ff       	call   c001ff9b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020642:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020646:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c002064d:	05 00 08 00 00       	add    eax,0x800
c0020652:	83 c4 10             	add    esp,0x10
c0020655:	eb cb                	jmp    c0020622 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0020657:	83 ec 0c             	sub    esp,0xc
c002065a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c002065e:	57                   	push   edi
c002065f:	e8 44 00 fe ff       	call   c00006a8 <strlen>
c0020664:	50                   	push   eax
c0020665:	57                   	push   edi
c0020666:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c002066d:	56                   	push   esi
c002066e:	e8 e6 f8 ff ff       	call   c001ff59 <__memmem(unsigned char*, int, unsigned char*, int)>
c0020673:	83 c4 20             	add    esp,0x20
c0020676:	85 c0                	test   eax,eax
c0020678:	75 13                	jne    c002068d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c002067a:	83 ec 0c             	sub    esp,0xc
c002067d:	56                   	push   esi
c002067e:	e8 61 ee fe ff       	call   c000f4e4 <free>
c0020683:	83 c4 10             	add    esp,0x10
c0020686:	31 c0                	xor    eax,eax
c0020688:	e9 b3 00 00 00       	jmp    c0020740 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002068d:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0020691:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0020695:	c1 e7 08             	shl    edi,0x8
c0020698:	c1 e2 10             	shl    edx,0x10
c002069b:	09 d7                	or     edi,edx
c002069d:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c00206a1:	09 d7                	or     edi,edx
c00206a3:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c00206a7:	c1 e2 18             	shl    edx,0x18
c00206aa:	09 d7                	or     edi,edx
c00206ac:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00206b0:	89 d1                	mov    ecx,edx
c00206b2:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c00206b6:	c1 e1 08             	shl    ecx,0x8
c00206b9:	c1 e2 10             	shl    edx,0x10
c00206bc:	09 ca                	or     edx,ecx
c00206be:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c00206c2:	09 ca                	or     edx,ecx
c00206c4:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c00206c8:	c1 e1 18             	shl    ecx,0x18
c00206cb:	09 ca                	or     edx,ecx
c00206cd:	89 e9                	mov    ecx,ebp
c00206cf:	84 c9                	test   cl,cl
c00206d1:	74 3c                	je     c002070f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c00206d3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00206d7:	83 ec 0c             	sub    esp,0xc
c00206da:	56                   	push   esi
c00206db:	e8 04 ee fe ff       	call   c000f4e4 <free>
c00206e0:	83 c4 0c             	add    esp,0xc
c00206e3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00206ea:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00206ef:	50                   	push   eax
c00206f0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00206f7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00206fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020702:	52                   	push   edx
c0020703:	57                   	push   edi
c0020704:	53                   	push   ebx
c0020705:	e8 6e fe ff ff       	call   c0020578 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002070a:	83 c4 20             	add    esp,0x20
c002070d:	eb 31                	jmp    c0020740 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002070f:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0020712:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0020719:	d0 e8                	shr    al,1
c002071b:	89 3b                	mov    DWORD PTR [ebx],edi
c002071d:	83 e0 01             	and    eax,0x1
c0020720:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0020727:	83 ec 0c             	sub    esp,0xc
c002072a:	89 13                	mov    DWORD PTR [ebx],edx
c002072c:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0020733:	89 03                	mov    DWORD PTR [ebx],eax
c0020735:	56                   	push   esi
c0020736:	e8 a9 ed fe ff       	call   c000f4e4 <free>
c002073b:	83 c4 10             	add    esp,0x10
c002073e:	b0 01                	mov    al,0x1
c0020740:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020746:	5b                   	pop    ebx
c0020747:	5e                   	pop    esi
c0020748:	5f                   	pop    edi
c0020749:	5d                   	pop    ebp
c002074a:	c3                   	ret    

c002074b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c002074b:	55                   	push   ebp
c002074c:	57                   	push   edi
c002074d:	56                   	push   esi
c002074e:	53                   	push   ebx
c002074f:	83 ec 20             	sub    esp,0x20
c0020752:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020756:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c002075a:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002075e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020766:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002076e:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0020773:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0020779:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c002077f:	57                   	push   edi
c0020780:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020784:	50                   	push   eax
c0020785:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020789:	50                   	push   eax
c002078a:	e8 94 fd ff ff       	call   c0020523 <readRoot(unsigned int*, unsigned int*, char)>
c002078f:	5a                   	pop    edx
c0020790:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020794:	e8 0f ff fd ff       	call   c00006a8 <strlen>
c0020799:	83 c4 10             	add    esp,0x10
c002079c:	83 f8 03             	cmp    eax,0x3
c002079f:	77 17                	ja     c00207b8 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c00207a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00207a5:	89 03                	mov    DWORD PTR [ebx],eax
c00207a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00207ab:	89 06                	mov    DWORD PTR [esi],eax
c00207ad:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00207b4:	b0 01                	mov    al,0x1
c00207b6:	eb 19                	jmp    c00207d1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c00207b8:	50                   	push   eax
c00207b9:	55                   	push   ebp
c00207ba:	57                   	push   edi
c00207bb:	56                   	push   esi
c00207bc:	53                   	push   ebx
c00207bd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00207c1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00207c5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00207c9:	e8 aa fd ff ff       	call   c0020578 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00207ce:	83 c4 20             	add    esp,0x20
c00207d1:	83 c4 1c             	add    esp,0x1c
c00207d4:	5b                   	pop    ebx
c00207d5:	5e                   	pop    esi
c00207d6:	5f                   	pop    edi
c00207d7:	5d                   	pop    ebp
c00207d8:	c3                   	ret    
c00207d9:	90                   	nop

c00207da <ISO9660::open(char const*, void**, FileOpenMode)>:
c00207da:	57                   	push   edi
c00207db:	56                   	push   esi
c00207dc:	53                   	push   ebx
c00207dd:	83 ec 10             	sub    esp,0x10
c00207e0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00207e4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00207e8:	85 ff                	test   edi,edi
c00207ea:	74 7b                	je     c0020867 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c00207ec:	85 f6                	test   esi,esi
c00207ee:	74 77                	je     c0020867 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c00207f0:	83 ec 0c             	sub    esp,0xc
c00207f3:	6a 1c                	push   0x1c
c00207f5:	e8 da ec fe ff       	call   c000f4d4 <malloc>
c00207fa:	89 07                	mov    DWORD PTR [edi],eax
c00207fc:	89 c3                	mov    ebx,eax
c00207fe:	58                   	pop    eax
c00207ff:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020803:	50                   	push   eax
c0020804:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0020807:	50                   	push   eax
c0020808:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002080c:	50                   	push   eax
c002080d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020811:	50                   	push   eax
c0020812:	56                   	push   esi
c0020813:	e8 33 ff ff ff       	call   c002074b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020818:	83 c4 20             	add    esp,0x20
c002081b:	84 c0                	test   al,al
c002081d:	74 07                	je     c0020826 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c002081f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020824:	74 0b                	je     c0020831 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0020826:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002082a:	b8 01 00 00 00       	mov    eax,0x1
c002082f:	eb 3b                	jmp    c002086c <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c0020831:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020835:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0020839:	89 03                	mov    DWORD PTR [ebx],eax
c002083b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0020842:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020846:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002084d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0020857:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002085e:	8a 06                	mov    al,BYTE PTR [esi]
c0020860:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0020863:	31 c0                	xor    eax,eax
c0020865:	eb 05                	jmp    c002086c <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c0020867:	b8 04 00 00 00       	mov    eax,0x4
c002086c:	83 c4 10             	add    esp,0x10
c002086f:	5b                   	pop    ebx
c0020870:	5e                   	pop    esi
c0020871:	5f                   	pop    edi
c0020872:	c3                   	ret    
c0020873:	90                   	nop

c0020874 <ISO9660::exists(char const*)>:
c0020874:	83 ec 28             	sub    esp,0x28
c0020877:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002087b:	8d 54 24 18          	lea    edx,[esp+0x18]
c002087f:	52                   	push   edx
c0020880:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0020883:	52                   	push   edx
c0020884:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020888:	52                   	push   edx
c0020889:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002088d:	52                   	push   edx
c002088e:	50                   	push   eax
c002088f:	e8 b7 fe ff ff       	call   c002074b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020894:	83 c4 3c             	add    esp,0x3c
c0020897:	c3                   	ret    

c0020898 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0020898:	56                   	push   esi
c0020899:	53                   	push   ebx
c002089a:	83 ec 14             	sub    esp,0x14
c002089d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00208a1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00208a5:	85 db                	test   ebx,ebx
c00208a7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00208ab:	0f 94 c2             	sete   dl
c00208ae:	85 f6                	test   esi,esi
c00208b0:	0f 94 c0             	sete   al
c00208b3:	08 c2                	or     dl,al
c00208b5:	75 68                	jne    c002091f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00208b7:	85 c9                	test   ecx,ecx
c00208b9:	74 64                	je     c002091f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00208bb:	83 ec 0c             	sub    esp,0xc
c00208be:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00208c1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00208c5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00208cb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00208d2:	50                   	push   eax
c00208d3:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00208d6:	50                   	push   eax
c00208d7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00208db:	50                   	push   eax
c00208dc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00208e0:	50                   	push   eax
c00208e1:	51                   	push   ecx
c00208e2:	e8 64 fe ff ff       	call   c002074b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00208e7:	83 c4 20             	add    esp,0x20
c00208ea:	ba 01 00 00 00       	mov    edx,0x1
c00208ef:	84 c0                	test   al,al
c00208f1:	74 31                	je     c0020924 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00208f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00208f7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00208fe:	89 03                	mov    DWORD PTR [ebx],eax
c0020900:	ba 00 00 00 00       	mov    edx,0x0
c0020905:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020909:	85 c0                	test   eax,eax
c002090b:	0f 95 06             	setne  BYTE PTR [esi]
c002090e:	74 14                	je     c0020924 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0020910:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020916:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002091d:	eb 05                	jmp    c0020924 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002091f:	ba 04 00 00 00       	mov    edx,0x4
c0020924:	83 c4 14             	add    esp,0x14
c0020927:	89 d0                	mov    eax,edx
c0020929:	5b                   	pop    ebx
c002092a:	5e                   	pop    esi
c002092b:	c3                   	ret    

c002092c <ISO9660::openDir(char const*, void**)>:
c002092c:	57                   	push   edi
c002092d:	56                   	push   esi
c002092e:	53                   	push   ebx
c002092f:	83 ec 10             	sub    esp,0x10
c0020932:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020936:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002093a:	85 ff                	test   edi,edi
c002093c:	0f 84 95 00 00 00    	je     c00209d7 <ISO9660::openDir(char const*, void**)+0xab>
c0020942:	85 f6                	test   esi,esi
c0020944:	0f 84 8d 00 00 00    	je     c00209d7 <ISO9660::openDir(char const*, void**)+0xab>
c002094a:	83 ec 0c             	sub    esp,0xc
c002094d:	6a 1c                	push   0x1c
c002094f:	e8 80 eb fe ff       	call   c000f4d4 <malloc>
c0020954:	89 07                	mov    DWORD PTR [edi],eax
c0020956:	89 c3                	mov    ebx,eax
c0020958:	59                   	pop    ecx
c0020959:	8d 44 24 18          	lea    eax,[esp+0x18]
c002095d:	50                   	push   eax
c002095e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0020961:	50                   	push   eax
c0020962:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020966:	50                   	push   eax
c0020967:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002096b:	50                   	push   eax
c002096c:	56                   	push   esi
c002096d:	e8 d9 fd ff ff       	call   c002074b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020972:	83 c4 20             	add    esp,0x20
c0020975:	84 c0                	test   al,al
c0020977:	74 07                	je     c0020980 <ISO9660::openDir(char const*, void**)+0x54>
c0020979:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002097e:	75 21                	jne    c00209a1 <ISO9660::openDir(char const*, void**)+0x75>
c0020980:	0f b6 c0             	movzx  eax,al
c0020983:	52                   	push   edx
c0020984:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020988:	50                   	push   eax
c0020989:	68 6e a7 02 c0       	push   0xc002a76e
c002098e:	e8 0e 1d ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0020993:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0020997:	83 c4 10             	add    esp,0x10
c002099a:	b8 01 00 00 00       	mov    eax,0x1
c002099f:	eb 3b                	jmp    c00209dc <ISO9660::openDir(char const*, void**)+0xb0>
c00209a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00209a5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00209a9:	89 03                	mov    DWORD PTR [ebx],eax
c00209ab:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00209b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209b6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00209bd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00209c4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00209c7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00209ce:	8a 06                	mov    al,BYTE PTR [esi]
c00209d0:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00209d3:	31 c0                	xor    eax,eax
c00209d5:	eb 05                	jmp    c00209dc <ISO9660::openDir(char const*, void**)+0xb0>
c00209d7:	b8 04 00 00 00       	mov    eax,0x4
c00209dc:	83 c4 10             	add    esp,0x10
c00209df:	5b                   	pop    ebx
c00209e0:	5e                   	pop    esi
c00209e1:	5f                   	pop    edi
c00209e2:	c3                   	ret    
c00209e3:	90                   	nop

c00209e4 <ISO9660::ISO9660()>:
c00209e4:	83 ec 0c             	sub    esp,0xc
c00209e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209eb:	83 ec 0c             	sub    esp,0xc
c00209ee:	50                   	push   eax
c00209ef:	e8 b2 1f ff ff       	call   c00129a6 <Filesystem::Filesystem()>
c00209f4:	83 c4 10             	add    esp,0x10
c00209f7:	ba 94 a7 02 c0       	mov    edx,0xc002a794
c00209fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a00:	89 10                	mov    DWORD PTR [eax],edx
c0020a02:	90                   	nop
c0020a03:	83 c4 0c             	add    esp,0xc
c0020a06:	c3                   	ret    
c0020a07:	90                   	nop

c0020a08 <SoundChannel::~SoundChannel()>:
c0020a08:	83 ec 0c             	sub    esp,0xc
c0020a0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0020a12:	83 ec 0c             	sub    esp,0xc
c0020a15:	50                   	push   eax
c0020a16:	e8 c9 ea fe ff       	call   c000f4e4 <free>
c0020a1b:	83 c4 10             	add    esp,0x10
c0020a1e:	90                   	nop
c0020a1f:	83 c4 0c             	add    esp,0xc
c0020a22:	c3                   	ret    
c0020a23:	90                   	nop

c0020a24 <SoundChannel::setSpeed(float)>:
c0020a24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020a2c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0020a2f:	c3                   	ret    

c0020a30 <SoundChannel::getSpeed()>:
c0020a30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a34:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0020a37:	c3                   	ret    

c0020a38 <SoundChannel::setVolume(int)>:
c0020a38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a3c:	83 f8 64             	cmp    eax,0x64
c0020a3f:	7e 05                	jle    c0020a46 <SoundChannel::setVolume(int)+0xe>
c0020a41:	b8 64 00 00 00       	mov    eax,0x64
c0020a46:	85 c0                	test   eax,eax
c0020a48:	79 02                	jns    c0020a4c <SoundChannel::setVolume(int)+0x14>
c0020a4a:	31 c0                	xor    eax,eax
c0020a4c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020a50:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0020a53:	c3                   	ret    

c0020a54 <SoundChannel::getVolume()>:
c0020a54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a58:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0020a5b:	c3                   	ret    

c0020a5c <SoundChannel::pause()>:
c0020a5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a60:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0020a64:	c3                   	ret    
c0020a65:	90                   	nop

c0020a66 <SoundChannel::SoundChannel(int, int, int, int)>:
c0020a66:	83 ec 1c             	sub    esp,0x1c
c0020a69:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020a6d:	e8 ea ff ff ff       	call   c0020a5c <SoundChannel::pause()>
c0020a72:	83 c4 04             	add    esp,0x4
c0020a75:	6a 50                	push   0x50
c0020a77:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0020a7b:	e8 b8 ff ff ff       	call   c0020a38 <SoundChannel::setVolume(int)>
c0020a80:	83 c4 08             	add    esp,0x8
c0020a83:	a1 0c a8 02 c0       	mov    eax,ds:0xc002a80c
c0020a88:	50                   	push   eax
c0020a89:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0020a8d:	e8 92 ff ff ff       	call   c0020a24 <SoundChannel::setSpeed(float)>
c0020a92:	83 c4 08             	add    esp,0x8
c0020a95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020a99:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020a9d:	89 10                	mov    DWORD PTR [eax],edx
c0020a9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020aa3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020aa7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020aaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020aae:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020ab2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020ab5:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0020aba:	75 23                	jne    c0020adf <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0020abc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ac0:	8b 10                	mov    edx,DWORD PTR [eax]
c0020ac2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ac6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020ac9:	0f af c2             	imul   eax,edx
c0020acc:	85 c0                	test   eax,eax
c0020ace:	79 03                	jns    c0020ad3 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0020ad0:	83 c0 03             	add    eax,0x3
c0020ad3:	c1 f8 02             	sar    eax,0x2
c0020ad6:	05 a0 0f 00 00       	add    eax,0xfa0
c0020adb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0020adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ae3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020ae7:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0020aea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020aee:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0020af5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020af9:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0020b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020b04:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0020b07:	c1 e0 02             	shl    eax,0x2
c0020b0a:	83 ec 0c             	sub    esp,0xc
c0020b0d:	50                   	push   eax
c0020b0e:	e8 c1 e9 fe ff       	call   c000f4d4 <malloc>
c0020b13:	83 c4 10             	add    esp,0x10
c0020b16:	89 c2                	mov    edx,eax
c0020b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020b1c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0020b1f:	83 ec 04             	sub    esp,0x4
c0020b22:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b26:	50                   	push   eax
c0020b27:	6a 01                	push   0x1
c0020b29:	6a 04                	push   0x4
c0020b2b:	e8 1f 7e fe ff       	call   c000894f <src_new>
c0020b30:	83 c4 10             	add    esp,0x10
c0020b33:	89 c2                	mov    edx,eax
c0020b35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020b39:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020b3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020b40:	85 c0                	test   eax,eax
c0020b42:	74 10                	je     c0020b54 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0020b44:	83 ec 0c             	sub    esp,0xc
c0020b47:	68 f0 a7 02 c0       	push   0xc002a7f0
c0020b4c:	e8 2b 8a ff ff       	call   c001957c <Krnl::panic(char const*)>
c0020b51:	83 c4 10             	add    esp,0x10
c0020b54:	a0 40 e5 02 c0       	mov    al,ds:0xc002e540
c0020b59:	83 f0 01             	xor    eax,0x1
c0020b5c:	84 c0                	test   al,al
c0020b5e:	74 57                	je     c0020bb7 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0020b60:	a1 10 a8 02 c0       	mov    eax,ds:0xc002a810
c0020b65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020b69:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020b71:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0020b79:	7f 35                	jg     c0020bb0 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0020b7b:	83 ec 0c             	sub    esp,0xc
c0020b7e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020b82:	e8 20 4a 00 00       	call   c00255a7 <__floatsisf>
c0020b87:	83 c4 10             	add    esp,0x10
c0020b8a:	8b 15 10 a8 02 c0    	mov    edx,DWORD PTR ds:0xc002a810
c0020b90:	83 ec 08             	sub    esp,0x8
c0020b93:	52                   	push   edx
c0020b94:	50                   	push   eax
c0020b95:	e8 1f 46 00 00       	call   c00251b9 <__mulsf3>
c0020b9a:	83 c4 10             	add    esp,0x10
c0020b9d:	89 c2                	mov    edx,eax
c0020b9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ba3:	89 14 85 40 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1ec0],edx
c0020baa:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020bae:	eb c1                	jmp    c0020b71 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0020bb0:	c6 05 40 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e540,0x1
c0020bb7:	90                   	nop
c0020bb8:	83 c4 1c             	add    esp,0x1c
c0020bbb:	c3                   	ret    

c0020bbc <SoundChannel::play()>:
c0020bbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020bc0:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0020bc4:	c3                   	ret    
c0020bc5:	90                   	nop

c0020bc6 <SoundChannel::paused()>:
c0020bc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020bca:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0020bcd:	c3                   	ret    

c0020bce <SoundChannel::getSampleRate()>:
c0020bce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020bd2:	8b 00                	mov    eax,DWORD PTR [eax]
c0020bd4:	c3                   	ret    
c0020bd5:	90                   	nop

c0020bd6 <SoundChannel::getBits()>:
c0020bd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020bda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020bdd:	c3                   	ret    

c0020bde <SoundChannel::getBufferUsed()>:
c0020bde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020be2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0020be5:	c3                   	ret    

c0020be6 <SoundChannel::getBufferSize()>:
c0020be6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020bea:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0020bed:	c3                   	ret    

c0020bee <SoundChannel::unbuffer(float*, int, int)>:
c0020bee:	56                   	push   esi
c0020bef:	53                   	push   ebx
c0020bf0:	83 ec 40             	sub    esp,0x40
c0020bf3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0020bf7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0020bfa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020bfe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0020c01:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020c05:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020c09:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020c0d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0020c11:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020c15:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0020c19:	e8 89 49 00 00       	call   c00255a7 <__floatsisf>
c0020c1e:	5a                   	pop    edx
c0020c1f:	89 c6                	mov    esi,eax
c0020c21:	ff 33                	push   DWORD PTR [ebx]
c0020c23:	e8 7f 49 00 00       	call   c00255a7 <__floatsisf>
c0020c28:	59                   	pop    ecx
c0020c29:	5a                   	pop    edx
c0020c2a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0020c2d:	50                   	push   eax
c0020c2e:	e8 86 45 00 00       	call   c00251b9 <__mulsf3>
c0020c33:	59                   	pop    ecx
c0020c34:	5a                   	pop    edx
c0020c35:	50                   	push   eax
c0020c36:	56                   	push   esi
c0020c37:	e8 40 47 00 00       	call   c002537c <__divsf3>
c0020c3c:	89 04 24             	mov    DWORD PTR [esp],eax
c0020c3f:	e8 33 5c 00 00       	call   c0026877 <__extendsfdf2>
c0020c44:	59                   	pop    ecx
c0020c45:	5e                   	pop    esi
c0020c46:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0020c4a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0020c4e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0020c56:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020c5a:	50                   	push   eax
c0020c5b:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0020c5e:	e8 e1 78 fe ff       	call   c0008544 <src_process>
c0020c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020c67:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0020c6a:	83 c4 0c             	add    esp,0xc
c0020c6d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0020c70:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0020c73:	29 d0                	sub    eax,edx
c0020c75:	c1 e0 02             	shl    eax,0x2
c0020c78:	50                   	push   eax
c0020c79:	8d 04 91             	lea    eax,[ecx+edx*4]
c0020c7c:	50                   	push   eax
c0020c7d:	51                   	push   ecx
c0020c7e:	e8 9a f9 fd ff       	call   c000061d <memmove>
c0020c83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c87:	83 c4 44             	add    esp,0x44
c0020c8a:	5b                   	pop    ebx
c0020c8b:	5e                   	pop    esi
c0020c8c:	c3                   	ret    
c0020c8d:	90                   	nop

c0020c8e <SoundChannel::buffer8(unsigned char*, int)>:
c0020c8e:	55                   	push   ebp
c0020c8f:	57                   	push   edi
c0020c90:	56                   	push   esi
c0020c91:	53                   	push   ebx
c0020c92:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020c96:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0020c9a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0020c9d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020ca1:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0020ca4:	74 7a                	je     c0020d20 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0020ca6:	85 ff                	test   edi,edi
c0020ca8:	7e 76                	jle    c0020d20 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0020caa:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0020cae:	8d 70 01             	lea    esi,[eax+0x1]
c0020cb1:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0020cb4:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0020cb7:	8b 1c 9d 40 e1 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1ec0]
c0020cbe:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0020cc1:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0020cc4:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0020cc7:	74 5e                	je     c0020d27 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0020cc9:	83 ff 01             	cmp    edi,0x1
c0020ccc:	74 4b                	je     c0020d19 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0020cce:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0020cd2:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0020cd5:	8d 70 01             	lea    esi,[eax+0x1]
c0020cd8:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0020cdb:	8b 1c 9d 40 e1 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1ec0]
c0020ce2:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0020ce5:	b8 02 00 00 00       	mov    eax,0x2
c0020cea:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0020ced:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0020cf0:	75 23                	jne    c0020d15 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0020cf2:	eb 27                	jmp    c0020d1b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0020cf4:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0020cf9:	8d 71 01             	lea    esi,[ecx+0x1]
c0020cfc:	40                   	inc    eax
c0020cfd:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0020d00:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0020d03:	8b 1c 9d 40 e1 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1ec0]
c0020d0a:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0020d0d:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0020d10:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0020d13:	74 06                	je     c0020d1b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0020d15:	39 c7                	cmp    edi,eax
c0020d17:	75 db                	jne    c0020cf4 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0020d19:	89 f8                	mov    eax,edi
c0020d1b:	5b                   	pop    ebx
c0020d1c:	5e                   	pop    esi
c0020d1d:	5f                   	pop    edi
c0020d1e:	5d                   	pop    ebp
c0020d1f:	c3                   	ret    
c0020d20:	5b                   	pop    ebx
c0020d21:	31 c0                	xor    eax,eax
c0020d23:	5e                   	pop    esi
c0020d24:	5f                   	pop    edi
c0020d25:	5d                   	pop    ebp
c0020d26:	c3                   	ret    
c0020d27:	b8 01 00 00 00       	mov    eax,0x1
c0020d2c:	eb ed                	jmp    c0020d1b <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0020d2e <SoundDevice::SoundDevice(char const*)>:
c0020d2e:	83 ec 1c             	sub    esp,0x1c
c0020d31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d35:	83 ec 08             	sub    esp,0x8
c0020d38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020d3c:	50                   	push   eax
c0020d3d:	e8 3e 2f ff ff       	call   c0013c80 <Device::Device(char const*)>
c0020d42:	83 c4 10             	add    esp,0x10
c0020d45:	ba 1c a8 02 c0       	mov    edx,0xc002a81c
c0020d4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d4e:	89 10                	mov    DWORD PTR [eax],edx
c0020d50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d54:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0020d5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d62:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0020d6c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020d74:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0020d79:	7f 19                	jg     c0020d94 <SoundDevice::SoundDevice(char const*)+0x66>
c0020d7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020d83:	83 c2 54             	add    edx,0x54
c0020d86:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0020d8e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020d92:	eb e0                	jmp    c0020d74 <SoundDevice::SoundDevice(char const*)+0x46>
c0020d94:	90                   	nop
c0020d95:	83 c4 1c             	add    esp,0x1c
c0020d98:	c3                   	ret    
c0020d99:	90                   	nop

c0020d9a <SoundDevice::~SoundDevice()>:
c0020d9a:	53                   	push   ebx
c0020d9b:	83 ec 18             	sub    esp,0x18
c0020d9e:	ba 1c a8 02 c0       	mov    edx,0xc002a81c
c0020da3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020da7:	89 10                	mov    DWORD PTR [eax],edx
c0020da9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020db1:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0020db6:	7f 46                	jg     c0020dfe <SoundDevice::~SoundDevice()+0x64>
c0020db8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020dbc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020dc0:	83 c2 54             	add    edx,0x54
c0020dc3:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0020dc7:	85 c0                	test   eax,eax
c0020dc9:	74 2d                	je     c0020df8 <SoundDevice::~SoundDevice()+0x5e>
c0020dcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020dcf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020dd3:	83 c2 54             	add    edx,0x54
c0020dd6:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0020dda:	85 db                	test   ebx,ebx
c0020ddc:	74 1a                	je     c0020df8 <SoundDevice::~SoundDevice()+0x5e>
c0020dde:	83 ec 0c             	sub    esp,0xc
c0020de1:	53                   	push   ebx
c0020de2:	e8 21 fc ff ff       	call   c0020a08 <SoundChannel::~SoundChannel()>
c0020de7:	83 c4 10             	add    esp,0x10
c0020dea:	83 ec 08             	sub    esp,0x8
c0020ded:	6a 2c                	push   0x2c
c0020def:	53                   	push   ebx
c0020df0:	e8 cc 17 ff ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c0020df5:	83 c4 10             	add    esp,0x10
c0020df8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020dfc:	eb b3                	jmp    c0020db1 <SoundDevice::~SoundDevice()+0x17>
c0020dfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e02:	83 ec 0c             	sub    esp,0xc
c0020e05:	50                   	push   eax
c0020e06:	e8 57 2b ff ff       	call   c0013962 <Device::~Device()>
c0020e0b:	83 c4 10             	add    esp,0x10
c0020e0e:	90                   	nop
c0020e0f:	83 c4 18             	add    esp,0x18
c0020e12:	5b                   	pop    ebx
c0020e13:	c3                   	ret    

c0020e14 <SoundDevice::~SoundDevice()>:
c0020e14:	83 ec 0c             	sub    esp,0xc
c0020e17:	83 ec 0c             	sub    esp,0xc
c0020e1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e1e:	e8 77 ff ff ff       	call   c0020d9a <SoundDevice::~SoundDevice()>
c0020e23:	83 c4 10             	add    esp,0x10
c0020e26:	83 ec 08             	sub    esp,0x8
c0020e29:	68 e4 01 00 00       	push   0x1e4
c0020e2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e32:	e8 8a 17 ff ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c0020e37:	83 c4 10             	add    esp,0x10
c0020e3a:	83 c4 0c             	add    esp,0xc
c0020e3d:	c3                   	ret    

c0020e3e <SoundDevice::getFreeChannelNum()>:
c0020e3e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020e42:	31 c0                	xor    eax,eax
c0020e44:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0020e4c:	74 09                	je     c0020e57 <SoundDevice::getFreeChannelNum()+0x19>
c0020e4e:	40                   	inc    eax
c0020e4f:	83 f8 20             	cmp    eax,0x20
c0020e52:	75 f0                	jne    c0020e44 <SoundDevice::getFreeChannelNum()+0x6>
c0020e54:	83 c8 ff             	or     eax,0xffffffff
c0020e57:	c3                   	ret    

c0020e58 <SoundDevice::addChannel(SoundChannel*)>:
c0020e58:	56                   	push   esi
c0020e59:	53                   	push   ebx
c0020e5a:	51                   	push   ecx
c0020e5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020e5f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0020e63:	53                   	push   ebx
c0020e64:	e8 d5 ff ff ff       	call   c0020e3e <SoundDevice::getFreeChannelNum()>
c0020e69:	5a                   	pop    edx
c0020e6a:	83 f8 ff             	cmp    eax,0xffffffff
c0020e6d:	74 51                	je     c0020ec0 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0020e6f:	85 f6                	test   esi,esi
c0020e71:	74 4d                	je     c0020ec0 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0020e73:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0020e7a:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0020e81:	75 30                	jne    c0020eb3 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0020e83:	83 ec 0c             	sub    esp,0xc
c0020e86:	56                   	push   esi
c0020e87:	e8 42 fd ff ff       	call   c0020bce <SoundChannel::getSampleRate()>
c0020e8c:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0020e92:	89 34 24             	mov    DWORD PTR [esp],esi
c0020e95:	e8 3c fd ff ff       	call   c0020bd6 <SoundChannel::getBits()>
c0020e9a:	83 c4 0c             	add    esp,0xc
c0020e9d:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0020ea3:	8b 13                	mov    edx,DWORD PTR [ebx]
c0020ea5:	50                   	push   eax
c0020ea6:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0020eac:	53                   	push   ebx
c0020ead:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0020eb0:	83 c4 10             	add    esp,0x10
c0020eb3:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0020eb9:	b8 01 00 00 00       	mov    eax,0x1
c0020ebe:	eb 03                	jmp    c0020ec3 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0020ec0:	83 c8 ff             	or     eax,0xffffffff
c0020ec3:	5a                   	pop    edx
c0020ec4:	5b                   	pop    ebx
c0020ec5:	5e                   	pop    esi
c0020ec6:	c3                   	ret    
c0020ec7:	90                   	nop

c0020ec8 <SoundDevice::removeChannel(int)>:
c0020ec8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020ecc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020ed0:	83 fa 1f             	cmp    edx,0x1f
c0020ed3:	77 23                	ja     c0020ef8 <SoundDevice::removeChannel(int)+0x30>
c0020ed5:	8d 14 90             	lea    edx,[eax+edx*4]
c0020ed8:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0020edf:	74 17                	je     c0020ef8 <SoundDevice::removeChannel(int)+0x30>
c0020ee1:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0020eeb:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0020ef1:	75 05                	jne    c0020ef8 <SoundDevice::removeChannel(int)+0x30>
c0020ef3:	8b 00                	mov    eax,DWORD PTR [eax]
c0020ef5:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0020ef8:	c3                   	ret    
c0020ef9:	90                   	nop

c0020efa <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0020efa:	57                   	push   edi
c0020efb:	56                   	push   esi
c0020efc:	53                   	push   ebx
c0020efd:	31 db                	xor    ebx,ebx
c0020eff:	83 ec 10             	sub    esp,0x10
c0020f02:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0020f06:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0020f0a:	0f 8d cb 00 00 00    	jge    c0020fdb <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0020f10:	83 ec 0c             	sub    esp,0xc
c0020f13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020f17:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0020f1a:	e8 58 59 00 00       	call   c0026877 <__extendsfdf2>
c0020f1f:	83 c4 10             	add    esp,0x10
c0020f22:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020f26:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020f2a:	68 00 00 f0 3f       	push   0x3ff00000
c0020f2f:	6a 00                	push   0x0
c0020f31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020f35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020f39:	e8 c5 48 00 00       	call   c0025803 <__adddf3>
c0020f3e:	83 c4 10             	add    esp,0x10
c0020f41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020f45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020f49:	68 00 00 e0 3f       	push   0x3fe00000
c0020f4e:	6a 00                	push   0x0
c0020f50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020f54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020f58:	e8 23 4f 00 00       	call   c0025e80 <__muldf3>
c0020f5d:	83 c4 10             	add    esp,0x10
c0020f60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020f64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020f68:	68 00 00 60 40       	push   0x40600000
c0020f6d:	6a 00                	push   0x0
c0020f6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020f73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020f77:	e8 04 4f 00 00       	call   c0025e80 <__muldf3>
c0020f7c:	59                   	pop    ecx
c0020f7d:	5f                   	pop    edi
c0020f7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020f82:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0020f86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020f8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020f8e:	e8 c0 57 00 00       	call   c0026753 <__truncdfsf2>
c0020f93:	5a                   	pop    edx
c0020f94:	89 c7                	mov    edi,eax
c0020f96:	59                   	pop    ecx
c0020f97:	68 00 00 fe 42       	push   0x42fe0000
c0020f9c:	50                   	push   eax
c0020f9d:	e8 5b 48 00 00       	call   c00257fd <__gesf2>
c0020fa2:	83 c4 10             	add    esp,0x10
c0020fa5:	85 c0                	test   eax,eax
c0020fa7:	78 06                	js     c0020faf <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0020fa9:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0020fad:	eb 26                	jmp    c0020fd5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0020faf:	50                   	push   eax
c0020fb0:	50                   	push   eax
c0020fb1:	6a 00                	push   0x0
c0020fb3:	57                   	push   edi
c0020fb4:	e8 48 48 00 00       	call   c0025801 <__lesf2>
c0020fb9:	83 c4 10             	add    esp,0x10
c0020fbc:	85 c0                	test   eax,eax
c0020fbe:	7f 06                	jg     c0020fc6 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0020fc0:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0020fc4:	eb 0f                	jmp    c0020fd5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0020fc6:	83 ec 0c             	sub    esp,0xc
c0020fc9:	57                   	push   edi
c0020fca:	e8 3d 59 00 00       	call   c002690c <lrintf>
c0020fcf:	83 c4 10             	add    esp,0x10
c0020fd2:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0020fd5:	43                   	inc    ebx
c0020fd6:	e9 2b ff ff ff       	jmp    c0020f06 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0020fdb:	83 c4 10             	add    esp,0x10
c0020fde:	5b                   	pop    ebx
c0020fdf:	5e                   	pop    esi
c0020fe0:	5f                   	pop    edi
c0020fe1:	c3                   	ret    

c0020fe2 <SoundDevice::getAudio(int, float*, float*)>:
c0020fe2:	55                   	push   ebp
c0020fe3:	57                   	push   edi
c0020fe4:	56                   	push   esi
c0020fe5:	53                   	push   ebx
c0020fe6:	31 db                	xor    ebx,ebx
c0020fe8:	83 ec 20             	sub    esp,0x20
c0020feb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020fef:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020ff3:	c1 e0 02             	shl    eax,0x2
c0020ff6:	50                   	push   eax
c0020ff7:	6a 00                	push   0x0
c0020ff9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020ffd:	e8 89 f6 fd ff       	call   c000068b <memset>
c0021002:	83 c4 10             	add    esp,0x10
c0021005:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0021009:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0021010:	85 c0                	test   eax,eax
c0021012:	0f 84 d7 00 00 00    	je     c00210ef <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021018:	83 ec 0c             	sub    esp,0xc
c002101b:	50                   	push   eax
c002101c:	e8 a5 fb ff ff       	call   c0020bc6 <SoundChannel::paused()>
c0021021:	83 c4 10             	add    esp,0x10
c0021024:	84 c0                	test   al,al
c0021026:	0f 85 c3 00 00 00    	jne    c00210ef <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002102c:	83 ec 0c             	sub    esp,0xc
c002102f:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021036:	e8 19 fa ff ff       	call   c0020a54 <SoundChannel::getVolume()>
c002103b:	83 c4 10             	add    esp,0x10
c002103e:	85 c0                	test   eax,eax
c0021040:	0f 84 a9 00 00 00    	je     c00210ef <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021046:	83 ec 0c             	sub    esp,0xc
c0021049:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021050:	e8 ff f9 ff ff       	call   c0020a54 <SoundChannel::getVolume()>
c0021055:	83 ec 0c             	sub    esp,0xc
c0021058:	50                   	push   eax
c0021059:	e8 49 45 00 00       	call   c00255a7 <__floatsisf>
c002105e:	59                   	pop    ecx
c002105f:	5d                   	pop    ebp
c0021060:	31 ed                	xor    ebp,ebp
c0021062:	68 00 00 c8 42       	push   0x42c80000
c0021067:	50                   	push   eax
c0021068:	e8 0f 43 00 00       	call   c002537c <__divsf3>
c002106d:	83 c4 10             	add    esp,0x10
c0021070:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021074:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0021078:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c002107e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0021082:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021089:	e8 60 fb ff ff       	call   c0020bee <SoundChannel::unbuffer(float*, int, int)>
c002108e:	83 c4 20             	add    esp,0x20
c0021091:	89 c1                	mov    ecx,eax
c0021093:	39 cd                	cmp    ebp,ecx
c0021095:	7d 52                	jge    c00210e9 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0021097:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002109b:	50                   	push   eax
c002109c:	50                   	push   eax
c002109d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00210a1:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00210a4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00210a8:	e8 0c 41 00 00       	call   c00251b9 <__mulsf3>
c00210ad:	5a                   	pop    edx
c00210ae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00210b2:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00210b8:	e8 ea 44 00 00       	call   c00255a7 <__floatsisf>
c00210bd:	59                   	pop    ecx
c00210be:	5a                   	pop    edx
c00210bf:	50                   	push   eax
c00210c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00210c4:	e8 b3 42 00 00       	call   c002537c <__divsf3>
c00210c9:	59                   	pop    ecx
c00210ca:	5a                   	pop    edx
c00210cb:	50                   	push   eax
c00210cc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00210d0:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00210d3:	e8 be 3d 00 00       	call   c0024e96 <__addsf3>
c00210d8:	83 c4 10             	add    esp,0x10
c00210db:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00210df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00210e3:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00210e6:	45                   	inc    ebp
c00210e7:	eb aa                	jmp    c0021093 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00210e9:	39 cf                	cmp    edi,ecx
c00210eb:	7e 02                	jle    c00210ef <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00210ed:	89 cf                	mov    edi,ecx
c00210ef:	43                   	inc    ebx
c00210f0:	83 fb 20             	cmp    ebx,0x20
c00210f3:	0f 85 10 ff ff ff    	jne    c0021009 <SoundDevice::getAudio(int, float*, float*)+0x27>
c00210f9:	83 c4 1c             	add    esp,0x1c
c00210fc:	89 f8                	mov    eax,edi
c00210fe:	5b                   	pop    ebx
c00210ff:	5e                   	pop    esi
c0021100:	5f                   	pop    edi
c0021101:	5d                   	pop    ebp
c0021102:	c3                   	ret    
c0021103:	90                   	nop

c0021104 <PCI::open(int, int, void*)>:
c0021104:	83 ec 18             	sub    esp,0x18
c0021107:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002110b:	8b 10                	mov    edx,DWORD PTR [eax]
c002110d:	50                   	push   eax
c002110e:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0021111:	31 c0                	xor    eax,eax
c0021113:	83 c4 1c             	add    esp,0x1c
c0021116:	c3                   	ret    
c0021117:	90                   	nop

c0021118 <PCI::close(int, int, void*)>:
c0021118:	31 c0                	xor    eax,eax
c002111a:	c3                   	ret    
c002111b:	90                   	nop

c002111c <PCI::PCI()>:
c002111c:	83 ec 0c             	sub    esp,0xc
c002111f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021123:	83 ec 08             	sub    esp,0x8
c0021126:	68 4c a8 02 c0       	push   0xc002a84c
c002112b:	50                   	push   eax
c002112c:	e8 0b 22 ff ff       	call   c001333c <Bus::Bus(char const*)>
c0021131:	83 c4 10             	add    esp,0x10
c0021134:	ba b8 a8 02 c0       	mov    edx,0xc002a8b8
c0021139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002113d:	89 10                	mov    DWORD PTR [eax],edx
c002113f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021143:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021149:	0f b6 d0             	movzx  edx,al
c002114c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021150:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0021157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002115b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021161:	0f b6 d0             	movzx  edx,al
c0021164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021168:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002116d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021171:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021177:	8d 50 01             	lea    edx,[eax+0x1]
c002117a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002117e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021184:	0f b6 d0             	movzx  edx,al
c0021187:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002118b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002118f:	83 c9 c0             	or     ecx,0xffffffc0
c0021192:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021196:	90                   	nop
c0021197:	83 c4 0c             	add    esp,0xc
c002119a:	c3                   	ret    
c002119b:	90                   	nop

c002119c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002119c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00211a0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00211a5:	89 ca                	mov    edx,ecx
c00211a7:	c1 e0 10             	shl    eax,0x10
c00211aa:	81 e2 fc 00 00 00    	and    edx,0xfc
c00211b0:	09 d0                	or     eax,edx
c00211b2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00211b7:	c1 e2 08             	shl    edx,0x8
c00211ba:	09 d0                	or     eax,edx
c00211bc:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c00211c1:	c1 e2 0b             	shl    edx,0xb
c00211c4:	09 d0                	or     eax,edx
c00211c6:	ba f8 0c 00 00       	mov    edx,0xcf8
c00211cb:	0d 00 00 00 80       	or     eax,0x80000000
c00211d0:	ef                   	out    dx,eax
c00211d1:	ba fc 0c 00 00       	mov    edx,0xcfc
c00211d6:	ed                   	in     eax,dx
c00211d7:	83 e1 02             	and    ecx,0x2
c00211da:	0f b6 c9             	movzx  ecx,cl
c00211dd:	c1 e1 03             	shl    ecx,0x3
c00211e0:	d3 e8                	shr    eax,cl
c00211e2:	c3                   	ret    
c00211e3:	90                   	nop

c00211e4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00211e4:	6a 00                	push   0x0
c00211e6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00211eb:	50                   	push   eax
c00211ec:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00211f1:	50                   	push   eax
c00211f2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00211f7:	50                   	push   eax
c00211f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00211fc:	e8 9b ff ff ff       	call   c002119c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021201:	83 c4 14             	add    esp,0x14
c0021204:	c3                   	ret    
c0021205:	90                   	nop

c0021206 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0021206:	6a 0e                	push   0xe
c0021208:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002120d:	50                   	push   eax
c002120e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021213:	50                   	push   eax
c0021214:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021219:	50                   	push   eax
c002121a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002121e:	e8 79 ff ff ff       	call   c002119c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021223:	83 c4 14             	add    esp,0x14
c0021226:	0f b6 c0             	movzx  eax,al
c0021229:	c3                   	ret    

c002122a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002122a:	55                   	push   ebp
c002122b:	57                   	push   edi
c002122c:	56                   	push   esi
c002122d:	53                   	push   ebx
c002122e:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0021233:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0021238:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c002123d:	6a 0a                	push   0xa
c002123f:	56                   	push   esi
c0021240:	55                   	push   ebp
c0021241:	57                   	push   edi
c0021242:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021246:	e8 51 ff ff ff       	call   c002119c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002124b:	6a 0a                	push   0xa
c002124d:	89 c3                	mov    ebx,eax
c002124f:	56                   	push   esi
c0021250:	0f b6 db             	movzx  ebx,bl
c0021253:	55                   	push   ebp
c0021254:	57                   	push   edi
c0021255:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021259:	e8 3e ff ff ff       	call   c002119c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002125e:	83 c4 28             	add    esp,0x28
c0021261:	25 00 ff 00 00       	and    eax,0xff00
c0021266:	09 d8                	or     eax,ebx
c0021268:	5b                   	pop    ebx
c0021269:	5e                   	pop    esi
c002126a:	5f                   	pop    edi
c002126b:	5d                   	pop    ebp
c002126c:	c3                   	ret    
c002126d:	90                   	nop

c002126e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002126e:	6a 08                	push   0x8
c0021270:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021275:	50                   	push   eax
c0021276:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002127b:	50                   	push   eax
c002127c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021281:	50                   	push   eax
c0021282:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021286:	e8 11 ff ff ff       	call   c002119c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002128b:	83 c4 14             	add    esp,0x14
c002128e:	0f b6 c4             	movzx  eax,ah
c0021291:	c3                   	ret    

c0021292 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0021292:	6a 08                	push   0x8
c0021294:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021299:	50                   	push   eax
c002129a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002129f:	50                   	push   eax
c00212a0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00212a5:	50                   	push   eax
c00212a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00212aa:	e8 ed fe ff ff       	call   c002119c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00212af:	83 c4 14             	add    esp,0x14
c00212b2:	c3                   	ret    
c00212b3:	90                   	nop

c00212b4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00212b4:	6a 3c                	push   0x3c
c00212b6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00212bb:	50                   	push   eax
c00212bc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00212c1:	50                   	push   eax
c00212c2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00212c7:	50                   	push   eax
c00212c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00212cc:	e8 cb fe ff ff       	call   c002119c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00212d1:	83 c4 14             	add    esp,0x14
c00212d4:	c3                   	ret    
c00212d5:	90                   	nop

c00212d6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00212d6:	6a 18                	push   0x18
c00212d8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00212dd:	50                   	push   eax
c00212de:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00212e3:	50                   	push   eax
c00212e4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00212e9:	50                   	push   eax
c00212ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00212ee:	e8 a9 fe ff ff       	call   c002119c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00212f3:	83 c4 14             	add    esp,0x14
c00212f6:	0f b6 c4             	movzx  eax,ah
c00212f9:	c3                   	ret    

c00212fa <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00212fa:	55                   	push   ebp
c00212fb:	57                   	push   edi
c00212fc:	56                   	push   esi
c00212fd:	53                   	push   ebx
c00212fe:	50                   	push   eax
c00212ff:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0021303:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0021308:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002130d:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0021312:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0021319:	8d 43 12             	lea    eax,[ebx+0x12]
c002131c:	83 c3 10             	add    ebx,0x10
c002131f:	0f b6 c0             	movzx  eax,al
c0021322:	0f b6 db             	movzx  ebx,bl
c0021325:	50                   	push   eax
c0021326:	51                   	push   ecx
c0021327:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002132b:	57                   	push   edi
c002132c:	55                   	push   ebp
c002132d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021331:	e8 66 fe ff ff       	call   c002119c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021336:	53                   	push   ebx
c0021337:	89 c6                	mov    esi,eax
c0021339:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002133d:	c1 e6 10             	shl    esi,0x10
c0021340:	51                   	push   ecx
c0021341:	57                   	push   edi
c0021342:	55                   	push   ebp
c0021343:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021347:	e8 50 fe ff ff       	call   c002119c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002134c:	83 c4 2c             	add    esp,0x2c
c002134f:	0f b7 c0             	movzx  eax,ax
c0021352:	5b                   	pop    ebx
c0021353:	09 f0                	or     eax,esi
c0021355:	5e                   	pop    esi
c0021356:	5f                   	pop    edi
c0021357:	5d                   	pop    ebp
c0021358:	c3                   	ret    
c0021359:	90                   	nop

c002135a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002135a:	53                   	push   ebx
c002135b:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021360:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0021365:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021369:	c1 e1 10             	shl    ecx,0x10
c002136c:	25 fc 00 00 00       	and    eax,0xfc
c0021371:	09 c1                	or     ecx,eax
c0021373:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021378:	c1 e0 08             	shl    eax,0x8
c002137b:	09 c1                	or     ecx,eax
c002137d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0021382:	c1 e0 0b             	shl    eax,0xb
c0021385:	09 c1                	or     ecx,eax
c0021387:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002138d:	89 c8                	mov    eax,ecx
c002138f:	ef                   	out    dx,eax
c0021390:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021395:	ed                   	in     eax,dx
c0021396:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c002139b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00213a0:	74 0a                	je     c00213ac <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c00213a2:	0f b7 d8             	movzx  ebx,ax
c00213a5:	89 d0                	mov    eax,edx
c00213a7:	c1 e0 10             	shl    eax,0x10
c00213aa:	eb 05                	jmp    c00213b1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c00213ac:	66 31 c0             	xor    ax,ax
c00213af:	89 d3                	mov    ebx,edx
c00213b1:	09 c3                	or     ebx,eax
c00213b3:	ba f8 0c 00 00       	mov    edx,0xcf8
c00213b8:	89 c8                	mov    eax,ecx
c00213ba:	ef                   	out    dx,eax
c00213bb:	ba fc 0c 00 00       	mov    edx,0xcfc
c00213c0:	89 d8                	mov    eax,ebx
c00213c2:	ef                   	out    dx,eax
c00213c3:	5b                   	pop    ebx
c00213c4:	c3                   	ret    
c00213c5:	90                   	nop

c00213c6 <PCI::checkBus(unsigned char)>:
c00213c6:	56                   	push   esi
c00213c7:	53                   	push   ebx
c00213c8:	31 db                	xor    ebx,ebx
c00213ca:	51                   	push   ecx
c00213cb:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00213d0:	52                   	push   edx
c00213d1:	53                   	push   ebx
c00213d2:	43                   	inc    ebx
c00213d3:	56                   	push   esi
c00213d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00213d8:	e8 2b 03 00 00       	call   c0021708 <PCI::checkDevice(unsigned char, unsigned char)>
c00213dd:	83 c4 10             	add    esp,0x10
c00213e0:	83 fb 20             	cmp    ebx,0x20
c00213e3:	75 eb                	jne    c00213d0 <PCI::checkBus(unsigned char)+0xa>
c00213e5:	58                   	pop    eax
c00213e6:	5b                   	pop    ebx
c00213e7:	5e                   	pop    esi
c00213e8:	c3                   	ret    
c00213e9:	90                   	nop

c00213ea <PCI::foundDevice(PCIDeviceInfo)>:
c00213ea:	55                   	push   ebp
c00213eb:	57                   	push   edi
c00213ec:	56                   	push   esi
c00213ed:	53                   	push   ebx
c00213ee:	83 ec 1c             	sub    esp,0x1c
c00213f1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00213f5:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00213fb:	0f 84 52 01 00 00    	je     c0021553 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021401:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0021405:	66 81 f9 06 04       	cmp    cx,0x406
c002140a:	75 2c                	jne    c0021438 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c002140c:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0021411:	50                   	push   eax
c0021412:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0021417:	50                   	push   eax
c0021418:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c002141d:	50                   	push   eax
c002141e:	56                   	push   esi
c002141f:	e8 b2 fe ff ff       	call   c00212d6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0021424:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0021428:	0f b6 c0             	movzx  eax,al
c002142b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c002142f:	83 c4 2c             	add    esp,0x2c
c0021432:	5b                   	pop    ebx
c0021433:	5e                   	pop    esi
c0021434:	5f                   	pop    edi
c0021435:	5d                   	pop    ebp
c0021436:	eb 8e                	jmp    c00213c6 <PCI::checkBus(unsigned char)>
c0021438:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002143c:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0021442:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021446:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c002144a:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c002144e:	88 d3                	mov    bl,dl
c0021450:	85 c0                	test   eax,eax
c0021452:	74 33                	je     c0021487 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0021454:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0021457:	85 d2                	test   edx,edx
c0021459:	74 28                	je     c0021483 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002145b:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0021461:	31 ef                	xor    edi,ebp
c0021463:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0021469:	75 18                	jne    c0021483 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002146b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002146f:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0021475:	75 0c                	jne    c0021483 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021477:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c002147d:	0f 84 d0 00 00 00    	je     c0021553 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021483:	8b 00                	mov    eax,DWORD PTR [eax]
c0021485:	eb c9                	jmp    c0021450 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0021487:	66 81 f9 01 06       	cmp    cx,0x601
c002148c:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0021490:	75 19                	jne    c00214ab <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0021492:	83 ec 0c             	sub    esp,0xc
c0021495:	68 64 01 00 00       	push   0x164
c002149a:	e8 35 e0 fe ff       	call   c000f4d4 <malloc>
c002149f:	89 c5                	mov    ebp,eax
c00214a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00214a4:	e8 95 0f 00 00       	call   c002243e <SATABus::SATABus()>
c00214a9:	eb 1e                	jmp    c00214c9 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00214ab:	66 81 f9 01 01       	cmp    cx,0x101
c00214b0:	75 60                	jne    c0021512 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c00214b2:	83 ec 0c             	sub    esp,0xc
c00214b5:	68 70 02 00 00       	push   0x270
c00214ba:	e8 15 e0 fe ff       	call   c000f4d4 <malloc>
c00214bf:	89 c5                	mov    ebp,eax
c00214c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00214c4:	e8 03 03 00 00       	call   c00217cc <IDE::IDE()>
c00214c9:	58                   	pop    eax
c00214ca:	5a                   	pop    edx
c00214cb:	55                   	push   ebp
c00214cc:	56                   	push   esi
c00214cd:	e8 be 25 ff ff       	call   c0013a90 <Device::addChild(Device*)>
c00214d2:	83 ec 1c             	sub    esp,0x1c
c00214d5:	b9 09 00 00 00       	mov    ecx,0x9
c00214da:	fc                   	cld    
c00214db:	89 e7                	mov    edi,esp
c00214dd:	89 de                	mov    esi,ebx
c00214df:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00214e1:	55                   	push   ebp
c00214e2:	e8 b3 24 ff ff       	call   c001399a <Device::preOpenPCI(PCIDeviceInfo)>
c00214e7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00214ea:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00214ee:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00214f6:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00214fe:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0021506:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021509:	83 c4 4c             	add    esp,0x4c
c002150c:	5b                   	pop    ebx
c002150d:	5e                   	pop    esi
c002150e:	5f                   	pop    edi
c002150f:	5d                   	pop    ebp
c0021510:	ff e0                	jmp    eax
c0021512:	83 ec 0c             	sub    esp,0xc
c0021515:	68 58 01 00 00       	push   0x158
c002151a:	e8 b5 df fe ff       	call   c000f4d4 <malloc>
c002151f:	89 c5                	mov    ebp,eax
c0021521:	58                   	pop    eax
c0021522:	5a                   	pop    edx
c0021523:	68 54 a8 02 c0       	push   0xc002a854
c0021528:	55                   	push   ebp
c0021529:	e8 58 28 ff ff       	call   c0013d86 <DriverlessDevice::DriverlessDevice(char const*)>
c002152e:	59                   	pop    ecx
c002152f:	5f                   	pop    edi
c0021530:	55                   	push   ebp
c0021531:	56                   	push   esi
c0021532:	e8 59 25 ff ff       	call   c0013a90 <Device::addChild(Device*)>
c0021537:	b9 09 00 00 00       	mov    ecx,0x9
c002153c:	fc                   	cld    
c002153d:	89 df                	mov    edi,ebx
c002153f:	89 de                	mov    esi,ebx
c0021541:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021543:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0021547:	83 c4 2c             	add    esp,0x2c
c002154a:	5b                   	pop    ebx
c002154b:	5e                   	pop    esi
c002154c:	5f                   	pop    edi
c002154d:	5d                   	pop    ebp
c002154e:	e9 47 24 ff ff       	jmp    c001399a <Device::preOpenPCI(PCIDeviceInfo)>
c0021553:	83 c4 1c             	add    esp,0x1c
c0021556:	5b                   	pop    ebx
c0021557:	5e                   	pop    esi
c0021558:	5f                   	pop    edi
c0021559:	5d                   	pop    ebp
c002155a:	c3                   	ret    
c002155b:	90                   	nop

c002155c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002155c:	55                   	push   ebp
c002155d:	57                   	push   edi
c002155e:	56                   	push   esi
c002155f:	53                   	push   ebx
c0021560:	83 ec 5c             	sub    esp,0x5c
c0021563:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0021567:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002156b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c002156f:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0021574:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021578:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c002157c:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0021581:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021585:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c002158a:	6a 0c                	push   0xc
c002158c:	55                   	push   ebp
c002158d:	53                   	push   ebx
c002158e:	57                   	push   edi
c002158f:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0021596:	e8 01 fc ff ff       	call   c002119c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002159b:	55                   	push   ebp
c002159c:	53                   	push   ebx
c002159d:	57                   	push   edi
c002159e:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00215a5:	e8 80 fc ff ff       	call   c002122a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c00215aa:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c00215af:	83 c4 24             	add    esp,0x24
c00215b2:	55                   	push   ebp
c00215b3:	53                   	push   ebx
c00215b4:	57                   	push   edi
c00215b5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00215b9:	e8 f6 fc ff ff       	call   c00212b4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00215be:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00215c2:	6a 3c                	push   0x3c
c00215c4:	55                   	push   ebp
c00215c5:	53                   	push   ebx
c00215c6:	57                   	push   edi
c00215c7:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00215ce:	e8 c9 fb ff ff       	call   c002119c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00215d3:	0f b6 c4             	movzx  eax,ah
c00215d6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00215da:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c00215de:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c00215e2:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c00215e7:	83 c4 24             	add    esp,0x24
c00215ea:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00215f0:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c00215f7:	74 6c                	je     c0021665 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00215f9:	31 f6                	xor    esi,esi
c00215fb:	8b 15 28 c2 02 c0    	mov    edx,DWORD PTR ds:0xc002c228
c0021601:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0021607:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c002160d:	7e 56                	jle    c0021665 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c002160f:	8d 14 f2             	lea    edx,[edx+esi*8]
c0021612:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0021619:	39 cb                	cmp    ebx,ecx
c002161b:	75 45                	jne    c0021662 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c002161d:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0021624:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0021628:	75 38                	jne    c0021662 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c002162a:	83 ec 0c             	sub    esp,0xc
c002162d:	68 6e a8 02 c0       	push   0xc002a86e
c0021632:	e8 6a 10 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0021637:	8b 15 28 c2 02 c0    	mov    edx,DWORD PTR ds:0xc002c228
c002163d:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0021643:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c002164b:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c002164f:	52                   	push   edx
c0021650:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021654:	53                   	push   ebx
c0021655:	68 93 a8 02 c0       	push   0xc002a893
c002165a:	e8 42 10 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c002165f:	83 c4 20             	add    esp,0x20
c0021662:	46                   	inc    esi
c0021663:	eb 96                	jmp    c00215fb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0021665:	31 d2                	xor    edx,edx
c0021667:	83 ec 0c             	sub    esp,0xc
c002166a:	55                   	push   ebp
c002166b:	53                   	push   ebx
c002166c:	57                   	push   edi
c002166d:	52                   	push   edx
c002166e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0021672:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021679:	e8 7c fc ff ff       	call   c00212fa <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002167e:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0021682:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021686:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002168a:	42                   	inc    edx
c002168b:	83 c4 20             	add    esp,0x20
c002168e:	83 fa 06             	cmp    edx,0x6
c0021691:	75 d4                	jne    c0021667 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0021693:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021697:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c002169b:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c002169f:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c00216a3:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00216a7:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00216ab:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00216b0:	86 e0                	xchg   al,ah
c00216b2:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c00216b7:	55                   	push   ebp
c00216b8:	53                   	push   ebx
c00216b9:	57                   	push   edi
c00216ba:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00216be:	e8 ab fb ff ff       	call   c002126e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c00216c3:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00216c7:	55                   	push   ebp
c00216c8:	53                   	push   ebx
c00216c9:	57                   	push   edi
c00216ca:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00216d1:	e8 0e fb ff ff       	call   c00211e4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00216d6:	83 ec 0c             	sub    esp,0xc
c00216d9:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c00216de:	b9 09 00 00 00       	mov    ecx,0x9
c00216e3:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c00216e7:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c00216eb:	fc                   	cld    
c00216ec:	89 e7                	mov    edi,esp
c00216ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00216f0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00216f7:	e8 ee fc ff ff       	call   c00213ea <PCI::foundDevice(PCIDeviceInfo)>
c00216fc:	81 c4 8c 00 00 00    	add    esp,0x8c
c0021702:	5b                   	pop    ebx
c0021703:	5e                   	pop    esi
c0021704:	5f                   	pop    edi
c0021705:	5d                   	pop    ebp
c0021706:	c3                   	ret    
c0021707:	90                   	nop

c0021708 <PCI::checkDevice(unsigned char, unsigned char)>:
c0021708:	55                   	push   ebp
c0021709:	57                   	push   edi
c002170a:	56                   	push   esi
c002170b:	53                   	push   ebx
c002170c:	83 ec 0c             	sub    esp,0xc
c002170f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0021713:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0021718:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002171d:	6a 00                	push   0x0
c002171f:	56                   	push   esi
c0021720:	57                   	push   edi
c0021721:	55                   	push   ebp
c0021722:	e8 bd fa ff ff       	call   c00211e4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021727:	6a 00                	push   0x0
c0021729:	56                   	push   esi
c002172a:	57                   	push   edi
c002172b:	55                   	push   ebp
c002172c:	e8 2b fe ff ff       	call   c002155c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0021731:	83 c4 20             	add    esp,0x20
c0021734:	6a 00                	push   0x0
c0021736:	56                   	push   esi
c0021737:	57                   	push   edi
c0021738:	55                   	push   ebp
c0021739:	e8 c8 fa ff ff       	call   c0021206 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002173e:	83 c4 10             	add    esp,0x10
c0021741:	84 c0                	test   al,al
c0021743:	79 27                	jns    c002176c <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0021745:	bb 01 00 00 00       	mov    ebx,0x1
c002174a:	53                   	push   ebx
c002174b:	56                   	push   esi
c002174c:	57                   	push   edi
c002174d:	55                   	push   ebp
c002174e:	e8 91 fa ff ff       	call   c00211e4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021753:	83 c4 10             	add    esp,0x10
c0021756:	66 40                	inc    ax
c0021758:	74 0c                	je     c0021766 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c002175a:	53                   	push   ebx
c002175b:	56                   	push   esi
c002175c:	57                   	push   edi
c002175d:	55                   	push   ebp
c002175e:	e8 f9 fd ff ff       	call   c002155c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0021763:	83 c4 10             	add    esp,0x10
c0021766:	43                   	inc    ebx
c0021767:	83 fb 08             	cmp    ebx,0x8
c002176a:	75 de                	jne    c002174a <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002176c:	83 c4 0c             	add    esp,0xc
c002176f:	5b                   	pop    ebx
c0021770:	5e                   	pop    esi
c0021771:	5f                   	pop    edi
c0021772:	5d                   	pop    ebp
c0021773:	c3                   	ret    

c0021774 <PCI::detect()>:
c0021774:	56                   	push   esi
c0021775:	53                   	push   ebx
c0021776:	53                   	push   ebx
c0021777:	31 db                	xor    ebx,ebx
c0021779:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002177d:	6a 00                	push   0x0
c002177f:	6a 00                	push   0x0
c0021781:	6a 00                	push   0x0
c0021783:	56                   	push   esi
c0021784:	e8 7d fa ff ff       	call   c0021206 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0021789:	83 c4 10             	add    esp,0x10
c002178c:	a8 80                	test   al,0x80
c002178e:	75 21                	jne    c00217b1 <PCI::detect()+0x3d>
c0021790:	51                   	push   ecx
c0021791:	51                   	push   ecx
c0021792:	6a 00                	push   0x0
c0021794:	56                   	push   esi
c0021795:	e8 2c fc ff ff       	call   c00213c6 <PCI::checkBus(unsigned char)>
c002179a:	83 c4 10             	add    esp,0x10
c002179d:	eb 24                	jmp    c00217c3 <PCI::detect()+0x4f>
c002179f:	52                   	push   edx
c00217a0:	52                   	push   edx
c00217a1:	53                   	push   ebx
c00217a2:	43                   	inc    ebx
c00217a3:	56                   	push   esi
c00217a4:	e8 1d fc ff ff       	call   c00213c6 <PCI::checkBus(unsigned char)>
c00217a9:	83 c4 10             	add    esp,0x10
c00217ac:	83 fb 08             	cmp    ebx,0x8
c00217af:	74 12                	je     c00217c3 <PCI::detect()+0x4f>
c00217b1:	53                   	push   ebx
c00217b2:	6a 00                	push   0x0
c00217b4:	6a 00                	push   0x0
c00217b6:	56                   	push   esi
c00217b7:	e8 28 fa ff ff       	call   c00211e4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00217bc:	83 c4 10             	add    esp,0x10
c00217bf:	66 40                	inc    ax
c00217c1:	74 dc                	je     c002179f <PCI::detect()+0x2b>
c00217c3:	58                   	pop    eax
c00217c4:	5b                   	pop    ebx
c00217c5:	5e                   	pop    esi
c00217c6:	c3                   	ret    
c00217c7:	90                   	nop

c00217c8 <IDE::close(int, int, void*)>:
c00217c8:	83 c8 ff             	or     eax,0xffffffff
c00217cb:	c3                   	ret    

c00217cc <IDE::IDE()>:
c00217cc:	83 ec 0c             	sub    esp,0xc
c00217cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217d3:	83 ec 08             	sub    esp,0x8
c00217d6:	68 dc a8 02 c0       	push   0xc002a8dc
c00217db:	50                   	push   eax
c00217dc:	e8 3b 26 ff ff       	call   c0013e1c <HardDiskController::HardDiskController(char const*)>
c00217e1:	83 c4 10             	add    esp,0x10
c00217e4:	ba 1c ab 02 c0       	mov    edx,0xc002ab1c
c00217e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217ed:	89 10                	mov    DWORD PTR [eax],edx
c00217ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217f3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00217fa:	90                   	nop
c00217fb:	83 c4 0c             	add    esp,0xc
c00217fe:	c3                   	ret    
c00217ff:	90                   	nop

c0021800 <IDE::prepareInterrupt(unsigned char)>:
c0021800:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021805:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021809:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0021811:	c3                   	ret    

c0021812 <selectDrive(unsigned char, unsigned char)>:
c0021812:	c3                   	ret    
c0021813:	90                   	nop

c0021814 <IDE::getBase(unsigned char)>:
c0021814:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0021819:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002181d:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0021825:	c3                   	ret    

c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0021826:	55                   	push   ebp
c0021827:	57                   	push   edi
c0021828:	56                   	push   esi
c0021829:	53                   	push   ebx
c002182a:	83 ec 1c             	sub    esp,0x1c
c002182d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021831:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0021835:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0021838:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002183c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021840:	80 f9 03             	cmp    cl,0x3
c0021843:	77 51                	ja     c0021896 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0021845:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021849:	0f b6 f2             	movzx  esi,dl
c002184c:	0f b6 db             	movzx  ebx,bl
c002184f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0021852:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0021856:	83 ca 80             	or     edx,0xffffff80
c0021859:	0f b6 d2             	movzx  edx,dl
c002185c:	52                   	push   edx
c002185d:	6a 0c                	push   0xc
c002185f:	56                   	push   esi
c0021860:	57                   	push   edi
c0021861:	e8 c0 ff ff ff       	call   c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021866:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002186b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002186f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0021873:	ee                   	out    dx,al
c0021874:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0021879:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002187d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0021881:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0021885:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002188d:	83 c4 2c             	add    esp,0x2c
c0021890:	5b                   	pop    ebx
c0021891:	5e                   	pop    esi
c0021892:	5f                   	pop    edi
c0021893:	5d                   	pop    ebp
c0021894:	eb 90                	jmp    c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021896:	80 fb 07             	cmp    bl,0x7
c0021899:	77 12                	ja     c00218ad <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c002189b:	0f b6 d2             	movzx  edx,dl
c002189e:	0f b6 db             	movzx  ebx,bl
c00218a1:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00218a9:	89 da                	mov    edx,ebx
c00218ab:	eb 2f                	jmp    c00218dc <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00218ad:	80 fb 0d             	cmp    bl,0xd
c00218b0:	77 13                	ja     c00218c5 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00218b2:	0f b6 d2             	movzx  edx,dl
c00218b5:	0f b6 db             	movzx  ebx,bl
c00218b8:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00218bf:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00218c3:	eb 17                	jmp    c00218dc <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00218c5:	80 fb 15             	cmp    bl,0x15
c00218c8:	77 13                	ja     c00218dd <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00218ca:	0f b6 d2             	movzx  edx,dl
c00218cd:	0f b6 db             	movzx  ebx,bl
c00218d0:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00218d8:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00218dc:	ee                   	out    dx,al
c00218dd:	83 c4 1c             	add    esp,0x1c
c00218e0:	5b                   	pop    ebx
c00218e1:	5e                   	pop    esi
c00218e2:	5f                   	pop    edi
c00218e3:	5d                   	pop    ebp
c00218e4:	c3                   	ret    
c00218e5:	90                   	nop

c00218e6 <IDE::read(unsigned char, unsigned char)>:
c00218e6:	55                   	push   ebp
c00218e7:	57                   	push   edi
c00218e8:	56                   	push   esi
c00218e9:	53                   	push   ebx
c00218ea:	83 ec 1c             	sub    esp,0x1c
c00218ed:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00218f1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00218f5:	8d 43 f8             	lea    eax,[ebx-0x8]
c00218f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00218fc:	3c 03                	cmp    al,0x3
c00218fe:	77 43                	ja     c0021943 <IDE::read(unsigned char, unsigned char)+0x5d>
c0021900:	0f b6 f2             	movzx  esi,dl
c0021903:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0021906:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c002190a:	83 c8 80             	or     eax,0xffffff80
c002190d:	0f b6 c0             	movzx  eax,al
c0021910:	50                   	push   eax
c0021911:	6a 0c                	push   0xc
c0021913:	56                   	push   esi
c0021914:	57                   	push   edi
c0021915:	e8 0c ff ff ff       	call   c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002191a:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002191f:	0f b6 c3             	movzx  eax,bl
c0021922:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0021926:	ec                   	in     al,dx
c0021927:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002192b:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0021930:	52                   	push   edx
c0021931:	6a 0c                	push   0xc
c0021933:	56                   	push   esi
c0021934:	57                   	push   edi
c0021935:	e8 ec fe ff ff       	call   c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002193a:	83 c4 20             	add    esp,0x20
c002193d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0021941:	eb 49                	jmp    c002198c <IDE::read(unsigned char, unsigned char)+0xa6>
c0021943:	80 fb 07             	cmp    bl,0x7
c0021946:	77 12                	ja     c002195a <IDE::read(unsigned char, unsigned char)+0x74>
c0021948:	0f b6 d2             	movzx  edx,dl
c002194b:	0f b6 c3             	movzx  eax,bl
c002194e:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0021956:	89 c2                	mov    edx,eax
c0021958:	eb 31                	jmp    c002198b <IDE::read(unsigned char, unsigned char)+0xa5>
c002195a:	80 fb 0d             	cmp    bl,0xd
c002195d:	77 13                	ja     c0021972 <IDE::read(unsigned char, unsigned char)+0x8c>
c002195f:	0f b6 d2             	movzx  edx,dl
c0021962:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0021969:	0f b6 d3             	movzx  edx,bl
c002196c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0021970:	eb 19                	jmp    c002198b <IDE::read(unsigned char, unsigned char)+0xa5>
c0021972:	31 c0                	xor    eax,eax
c0021974:	80 fb 15             	cmp    bl,0x15
c0021977:	77 13                	ja     c002198c <IDE::read(unsigned char, unsigned char)+0xa6>
c0021979:	0f b6 d2             	movzx  edx,dl
c002197c:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0021984:	0f b6 d3             	movzx  edx,bl
c0021987:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002198b:	ec                   	in     al,dx
c002198c:	83 c4 1c             	add    esp,0x1c
c002198f:	5b                   	pop    ebx
c0021990:	5e                   	pop    esi
c0021991:	5f                   	pop    edi
c0021992:	5d                   	pop    ebp
c0021993:	c3                   	ret    

c0021994 <IDE::waitInterrupt(unsigned char)>:
c0021994:	55                   	push   ebp
c0021995:	57                   	push   edi
c0021996:	56                   	push   esi
c0021997:	53                   	push   ebx
c0021998:	31 db                	xor    ebx,ebx
c002199a:	83 ec 0c             	sub    esp,0xc
c002199d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00219a1:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00219a6:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00219ae:	89 e8                	mov    eax,ebp
c00219b0:	84 c0                	test   al,al
c00219b2:	75 34                	jne    c00219e8 <IDE::waitInterrupt(unsigned char)+0x54>
c00219b4:	52                   	push   edx
c00219b5:	6a 0c                	push   0xc
c00219b7:	56                   	push   esi
c00219b8:	57                   	push   edi
c00219b9:	e8 28 ff ff ff       	call   c00218e6 <IDE::read(unsigned char, unsigned char)>
c00219be:	83 c4 10             	add    esp,0x10
c00219c1:	a8 01                	test   al,0x1
c00219c3:	75 2b                	jne    c00219f0 <IDE::waitInterrupt(unsigned char)+0x5c>
c00219c5:	f6 c3 04             	test   bl,0x4
c00219c8:	75 16                	jne    c00219e0 <IDE::waitInterrupt(unsigned char)+0x4c>
c00219ca:	83 fb 32             	cmp    ebx,0x32
c00219cd:	7e 11                	jle    c00219e0 <IDE::waitInterrupt(unsigned char)+0x4c>
c00219cf:	50                   	push   eax
c00219d0:	50                   	push   eax
c00219d1:	6a 00                	push   0x0
c00219d3:	68 80 96 98 00       	push   0x989680
c00219d8:	e8 6d b1 ff ff       	call   c001cb4a <nanoSleep(unsigned long long)>
c00219dd:	83 c4 10             	add    esp,0x10
c00219e0:	83 fb 3c             	cmp    ebx,0x3c
c00219e3:	74 0b                	je     c00219f0 <IDE::waitInterrupt(unsigned char)+0x5c>
c00219e5:	43                   	inc    ebx
c00219e6:	eb be                	jmp    c00219a6 <IDE::waitInterrupt(unsigned char)+0x12>
c00219e8:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00219f0:	83 c4 0c             	add    esp,0xc
c00219f3:	89 e8                	mov    eax,ebp
c00219f5:	5b                   	pop    ebx
c00219f6:	5e                   	pop    esi
c00219f7:	5f                   	pop    edi
c00219f8:	5d                   	pop    ebp
c00219f9:	c3                   	ret    

c00219fa <ideChannel0IRQHandler(regs*, void*)>:
c00219fa:	83 ec 10             	sub    esp,0x10
c00219fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021a01:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0021a08:	6a 07                	push   0x7
c0021a0a:	6a 00                	push   0x0
c0021a0c:	50                   	push   eax
c0021a0d:	e8 d4 fe ff ff       	call   c00218e6 <IDE::read(unsigned char, unsigned char)>
c0021a12:	83 c4 1c             	add    esp,0x1c
c0021a15:	c3                   	ret    

c0021a16 <ideChannel1IRQHandler(regs*, void*)>:
c0021a16:	83 ec 10             	sub    esp,0x10
c0021a19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021a1d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0021a24:	6a 07                	push   0x7
c0021a26:	6a 01                	push   0x1
c0021a28:	50                   	push   eax
c0021a29:	e8 b8 fe ff ff       	call   c00218e6 <IDE::read(unsigned char, unsigned char)>
c0021a2e:	83 c4 1c             	add    esp,0x1c
c0021a31:	c3                   	ret    

c0021a32 <IDE::enableIRQs(unsigned char, bool)>:
c0021a32:	57                   	push   edi
c0021a33:	56                   	push   esi
c0021a34:	be 04 00 00 00       	mov    esi,0x4
c0021a39:	53                   	push   ebx
c0021a3a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0021a3f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021a43:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0021a48:	0f 94 c0             	sete   al
c0021a4b:	d1 e0                	shl    eax,1
c0021a4d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0021a54:	0f b6 c0             	movzx  eax,al
c0021a57:	50                   	push   eax
c0021a58:	6a 0c                	push   0xc
c0021a5a:	57                   	push   edi
c0021a5b:	53                   	push   ebx
c0021a5c:	e8 c5 fd ff ff       	call   c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021a61:	83 c4 10             	add    esp,0x10
c0021a64:	50                   	push   eax
c0021a65:	6a 0c                	push   0xc
c0021a67:	57                   	push   edi
c0021a68:	53                   	push   ebx
c0021a69:	e8 78 fe ff ff       	call   c00218e6 <IDE::read(unsigned char, unsigned char)>
c0021a6e:	83 c4 10             	add    esp,0x10
c0021a71:	4e                   	dec    esi
c0021a72:	75 f0                	jne    c0021a64 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0021a74:	5b                   	pop    ebx
c0021a75:	5e                   	pop    esi
c0021a76:	5f                   	pop    edi
c0021a77:	c3                   	ret    

c0021a78 <IDE::open(int, int, void*)>:
c0021a78:	55                   	push   ebp
c0021a79:	57                   	push   edi
c0021a7a:	56                   	push   esi
c0021a7b:	53                   	push   ebx
c0021a7c:	83 ec 1c             	sub    esp,0x1c
c0021a7f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021a83:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0021a8c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0021a95:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0021a9c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0021aa3:	0f 85 b0 02 00 00    	jne    c0021d59 <IDE::open(int, int, void*)+0x2e1>
c0021aa9:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0021aaf:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0021ab3:	83 e0 7f             	and    eax,0x7f
c0021ab6:	3c 05                	cmp    al,0x5
c0021ab8:	74 04                	je     c0021abe <IDE::open(int, int, void*)+0x46>
c0021aba:	3c 0f                	cmp    al,0xf
c0021abc:	75 32                	jne    c0021af0 <IDE::open(int, int, void*)+0x78>
c0021abe:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0021ac4:	83 e0 fc             	and    eax,0xfffffffc
c0021ac7:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0021ace:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0021ad4:	83 e0 fc             	and    eax,0xfffffffc
c0021ad7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0021ade:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0021ae4:	83 e0 fc             	and    eax,0xfffffffc
c0021ae7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0021aee:	eb 14                	jmp    c0021b04 <IDE::open(int, int, void*)+0x8c>
c0021af0:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0021afa:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0021b04:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0021b0b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0021b12:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021b16:	89 c6                	mov    esi,eax
c0021b18:	bf f8 0c 00 00       	mov    edi,0xcf8
c0021b1d:	c1 e6 10             	shl    esi,0x10
c0021b20:	89 e8                	mov    eax,ebp
c0021b22:	89 fa                	mov    edx,edi
c0021b24:	c1 e0 0b             	shl    eax,0xb
c0021b27:	09 f0                	or     eax,esi
c0021b29:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0021b30:	c1 e6 08             	shl    esi,0x8
c0021b33:	09 c6                	or     esi,eax
c0021b35:	89 f0                	mov    eax,esi
c0021b37:	0d 08 00 00 80       	or     eax,0x80000008
c0021b3c:	ef                   	out    dx,eax
c0021b3d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0021b42:	89 ca                	mov    edx,ecx
c0021b44:	ed                   	in     eax,dx
c0021b45:	c1 e8 10             	shr    eax,0x10
c0021b48:	3d ff ff 00 00       	cmp    eax,0xffff
c0021b4d:	0f 84 f5 00 00 00    	je     c0021c48 <IDE::open(int, int, void*)+0x1d0>
c0021b53:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0021b59:	89 fa                	mov    edx,edi
c0021b5b:	89 f0                	mov    eax,esi
c0021b5d:	ef                   	out    dx,eax
c0021b5e:	b0 fe                	mov    al,0xfe
c0021b60:	89 ca                	mov    edx,ecx
c0021b62:	ee                   	out    dx,al
c0021b63:	89 f0                	mov    eax,esi
c0021b65:	89 fa                	mov    edx,edi
c0021b67:	ef                   	out    dx,eax
c0021b68:	89 ca                	mov    edx,ecx
c0021b6a:	ed                   	in     eax,dx
c0021b6b:	3c fe                	cmp    al,0xfe
c0021b6d:	0f 85 a9 00 00 00    	jne    c0021c1c <IDE::open(int, int, void*)+0x1a4>
c0021b73:	8b 15 28 c2 02 c0    	mov    edx,DWORD PTR ds:0xc002c228
c0021b79:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0021b80:	74 33                	je     c0021bb5 <IDE::open(int, int, void*)+0x13d>
c0021b82:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0021b88:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0021b8c:	40                   	inc    eax
c0021b8d:	83 ec 0c             	sub    esp,0xc
c0021b90:	0f b6 c0             	movzx  eax,al
c0021b93:	50                   	push   eax
c0021b94:	55                   	push   ebp
c0021b95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021b99:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0021b9f:	51                   	push   ecx
c0021ba0:	e8 0b 5b ff ff       	call   c00176b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0021ba5:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0021baa:	83 c4 1c             	add    esp,0x1c
c0021bad:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0021bb3:	eb 0a                	jmp    c0021bbf <IDE::open(int, int, void*)+0x147>
c0021bb5:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0021bbf:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0021bc6:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0021bcd:	c1 e1 10             	shl    ecx,0x10
c0021bd0:	c1 e0 08             	shl    eax,0x8
c0021bd3:	bf f8 0c 00 00       	mov    edi,0xcf8
c0021bd8:	09 c1                	or     ecx,eax
c0021bda:	89 fa                	mov    edx,edi
c0021bdc:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0021be3:	c1 e0 0b             	shl    eax,0xb
c0021be6:	09 c1                	or     ecx,eax
c0021be8:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0021bee:	89 c8                	mov    eax,ecx
c0021bf0:	ef                   	out    dx,eax
c0021bf1:	be fc 0c 00 00       	mov    esi,0xcfc
c0021bf6:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0021bfc:	89 f2                	mov    edx,esi
c0021bfe:	ee                   	out    dx,al
c0021bff:	89 c8                	mov    eax,ecx
c0021c01:	89 fa                	mov    edx,edi
c0021c03:	ef                   	out    dx,eax
c0021c04:	89 f2                	mov    edx,esi
c0021c06:	ed                   	in     eax,dx
c0021c07:	0f b6 c0             	movzx  eax,al
c0021c0a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0021c10:	74 46                	je     c0021c58 <IDE::open(int, int, void*)+0x1e0>
c0021c12:	83 ec 0c             	sub    esp,0xc
c0021c15:	68 f4 a8 02 c0       	push   0xc002a8f4
c0021c1a:	eb 34                	jmp    c0021c50 <IDE::open(int, int, void*)+0x1d8>
c0021c1c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0021c25:	75 17                	jne    c0021c3e <IDE::open(int, int, void*)+0x1c6>
c0021c27:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0021c2c:	74 07                	je     c0021c35 <IDE::open(int, int, void*)+0x1bd>
c0021c2e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0021c33:	75 09                	jne    c0021c3e <IDE::open(int, int, void*)+0x1c6>
c0021c35:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0021c3c:	eb 1a                	jmp    c0021c58 <IDE::open(int, int, void*)+0x1e0>
c0021c3e:	83 ec 0c             	sub    esp,0xc
c0021c41:	68 fc a8 02 c0       	push   0xc002a8fc
c0021c46:	eb 08                	jmp    c0021c50 <IDE::open(int, int, void*)+0x1d8>
c0021c48:	83 ec 0c             	sub    esp,0xc
c0021c4b:	68 2d a9 02 c0       	push   0xc002a92d
c0021c50:	e8 27 79 ff ff       	call   c001957c <Krnl::panic(char const*)>
c0021c55:	83 c4 10             	add    esp,0x10
c0021c58:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0021c5f:	79 1a                	jns    c0021c7b <IDE::open(int, int, void*)+0x203>
c0021c61:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0021c67:	83 e0 fc             	and    eax,0xfffffffc
c0021c6a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0021c71:	83 c0 08             	add    eax,0x8
c0021c74:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0021c7b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0021c81:	89 c2                	mov    edx,eax
c0021c83:	83 e2 0f             	and    edx,0xf
c0021c86:	66 83 fa 08          	cmp    dx,0x8
c0021c8a:	75 0a                	jne    c0021c96 <IDE::open(int, int, void*)+0x21e>
c0021c8c:	83 e8 02             	sub    eax,0x2
c0021c8f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0021c96:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0021c9c:	89 c2                	mov    edx,eax
c0021c9e:	83 e2 0f             	and    edx,0xf
c0021ca1:	66 83 fa 08          	cmp    dx,0x8
c0021ca5:	75 0a                	jne    c0021cb1 <IDE::open(int, int, void*)+0x239>
c0021ca7:	83 e8 02             	sub    eax,0x2
c0021caa:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0021cb1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0021cb8:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0021cbf:	89 d0                	mov    eax,edx
c0021cc1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0021cc4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0021cc8:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0021ccc:	8d 4a 01             	lea    ecx,[edx+0x1]
c0021ccf:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0021cd4:	0f b6 c9             	movzx  ecx,cl
c0021cd7:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0021cde:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0021ce1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0021ce5:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0021ce9:	8d 50 02             	lea    edx,[eax+0x2]
c0021cec:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0021cf1:	0f b6 d2             	movzx  edx,dl
c0021cf4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0021cfa:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0021cfd:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0021d01:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0021d05:	8d 48 03             	lea    ecx,[eax+0x3]
c0021d08:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0021d0d:	0f b6 c9             	movzx  ecx,cl
c0021d10:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0021d16:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0021d19:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0021d1d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0021d21:	8d 50 04             	lea    edx,[eax+0x4]
c0021d24:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0021d2a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0021d2f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0021d36:	66 85 f6             	test   si,si
c0021d39:	74 3e                	je     c0021d79 <IDE::open(int, int, void*)+0x301>
c0021d3b:	0f b6 d2             	movzx  edx,dl
c0021d3e:	83 c0 05             	add    eax,0x5
c0021d41:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0021d44:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0021d48:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0021d4c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0021d52:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0021d57:	eb 20                	jmp    c0021d79 <IDE::open(int, int, void*)+0x301>
c0021d59:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0021d63:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0021d6d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0021d74:	e9 02 ff ff ff       	jmp    c0021c7b <IDE::open(int, int, void*)+0x203>
c0021d79:	52                   	push   edx
c0021d7a:	52                   	push   edx
c0021d7b:	6a 00                	push   0x0
c0021d7d:	53                   	push   ebx
c0021d7e:	e8 7d fa ff ff       	call   c0021800 <IDE::prepareInterrupt(unsigned char)>
c0021d83:	59                   	pop    ecx
c0021d84:	5e                   	pop    esi
c0021d85:	6a 01                	push   0x1
c0021d87:	53                   	push   ebx
c0021d88:	e8 73 fa ff ff       	call   c0021800 <IDE::prepareInterrupt(unsigned char)>
c0021d8d:	83 c4 0c             	add    esp,0xc
c0021d90:	6a 00                	push   0x0
c0021d92:	6a 00                	push   0x0
c0021d94:	53                   	push   ebx
c0021d95:	e8 98 fc ff ff       	call   c0021a32 <IDE::enableIRQs(unsigned char, bool)>
c0021d9a:	83 c4 0c             	add    esp,0xc
c0021d9d:	6a 00                	push   0x0
c0021d9f:	6a 01                	push   0x1
c0021da1:	53                   	push   ebx
c0021da2:	e8 8b fc ff ff       	call   c0021a32 <IDE::enableIRQs(unsigned char, bool)>
c0021da7:	83 c4 10             	add    esp,0x10
c0021daa:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0021db1:	74 40                	je     c0021df3 <IDE::open(int, int, void*)+0x37b>
c0021db3:	83 ec 0c             	sub    esp,0xc
c0021db6:	68 57 a9 02 c0       	push   0xc002a957
c0021dbb:	e8 e1 08 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0021dc0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021dc3:	6a 01                	push   0x1
c0021dc5:	68 fa 19 02 c0       	push   0xc00219fa
c0021dca:	6a 0e                	push   0xe
c0021dcc:	53                   	push   ebx
c0021dcd:	e8 42 1c ff ff       	call   c0013a14 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021dd2:	83 c4 14             	add    esp,0x14
c0021dd5:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0021ddb:	53                   	push   ebx
c0021ddc:	6a 01                	push   0x1
c0021dde:	68 16 1a 02 c0       	push   0xc0021a16
c0021de3:	6a 0f                	push   0xf
c0021de5:	53                   	push   ebx
c0021de6:	e8 29 1c ff ff       	call   c0013a14 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021deb:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0021df1:	eb 4a                	jmp    c0021e3d <IDE::open(int, int, void*)+0x3c5>
c0021df3:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0021dfd:	50                   	push   eax
c0021dfe:	6a 0f                	push   0xf
c0021e00:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0021e06:	68 73 a9 02 c0       	push   0xc002a973
c0021e0b:	e8 91 08 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0021e10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021e13:	6a 00                	push   0x0
c0021e15:	68 fa 19 02 c0       	push   0xc00219fa
c0021e1a:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0021e20:	53                   	push   ebx
c0021e21:	e8 ee 1b ff ff       	call   c0013a14 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021e26:	83 c4 14             	add    esp,0x14
c0021e29:	53                   	push   ebx
c0021e2a:	6a 00                	push   0x0
c0021e2c:	68 16 1a 02 c0       	push   0xc0021a16
c0021e31:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0021e37:	53                   	push   ebx
c0021e38:	e8 d7 1b ff ff       	call   c0013a14 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021e3d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021e3f:	83 c4 20             	add    esp,0x20
c0021e42:	83 ec 0c             	sub    esp,0xc
c0021e45:	53                   	push   ebx
c0021e46:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0021e49:	83 c4 0c             	add    esp,0xc
c0021e4c:	6a 07                	push   0x7
c0021e4e:	6a 00                	push   0x0
c0021e50:	53                   	push   ebx
c0021e51:	e8 90 fa ff ff       	call   c00218e6 <IDE::read(unsigned char, unsigned char)>
c0021e56:	83 c4 0c             	add    esp,0xc
c0021e59:	6a 07                	push   0x7
c0021e5b:	6a 01                	push   0x1
c0021e5d:	53                   	push   ebx
c0021e5e:	e8 83 fa ff ff       	call   c00218e6 <IDE::read(unsigned char, unsigned char)>
c0021e63:	83 c4 0c             	add    esp,0xc
c0021e66:	6a 01                	push   0x1
c0021e68:	6a 00                	push   0x0
c0021e6a:	53                   	push   ebx
c0021e6b:	e8 c2 fb ff ff       	call   c0021a32 <IDE::enableIRQs(unsigned char, bool)>
c0021e70:	83 c4 0c             	add    esp,0xc
c0021e73:	6a 01                	push   0x1
c0021e75:	6a 01                	push   0x1
c0021e77:	53                   	push   ebx
c0021e78:	e8 b5 fb ff ff       	call   c0021a32 <IDE::enableIRQs(unsigned char, bool)>
c0021e7d:	83 c4 2c             	add    esp,0x2c
c0021e80:	31 c0                	xor    eax,eax
c0021e82:	5b                   	pop    ebx
c0021e83:	5e                   	pop    esi
c0021e84:	5f                   	pop    edi
c0021e85:	5d                   	pop    ebp
c0021e86:	c3                   	ret    
c0021e87:	90                   	nop

c0021e88 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0021e88:	55                   	push   ebp
c0021e89:	57                   	push   edi
c0021e8a:	56                   	push   esi
c0021e8b:	53                   	push   ebx
c0021e8c:	83 ec 1c             	sub    esp,0x1c
c0021e8f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021e93:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021e97:	8d 50 f8             	lea    edx,[eax-0x8]
c0021e9a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021e9e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0021ea2:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0021ea6:	80 fa 03             	cmp    dl,0x3
c0021ea9:	77 5d                	ja     c0021f08 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0021eab:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0021eaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021eb3:	0f b6 db             	movzx  ebx,bl
c0021eb6:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0021eb9:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0021ebd:	83 ca 80             	or     edx,0xffffff80
c0021ec0:	0f b6 d2             	movzx  edx,dl
c0021ec3:	52                   	push   edx
c0021ec4:	6a 0c                	push   0xc
c0021ec6:	53                   	push   ebx
c0021ec7:	56                   	push   esi
c0021ec8:	e8 59 f9 ff ff       	call   c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021ecd:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0021ed2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021ed6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021eda:	0f b6 c0             	movzx  eax,al
c0021edd:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0021ee1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0021ee3:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0021ee8:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0021eec:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0021ef0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0021ef4:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0021efc:	83 c4 2c             	add    esp,0x2c
c0021eff:	5b                   	pop    ebx
c0021f00:	5e                   	pop    esi
c0021f01:	5f                   	pop    edi
c0021f02:	5d                   	pop    ebp
c0021f03:	e9 1e f9 ff ff       	jmp    c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021f08:	3c 07                	cmp    al,0x7
c0021f0a:	77 10                	ja     c0021f1c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0021f0c:	0f b6 db             	movzx  ebx,bl
c0021f0f:	0f b6 d0             	movzx  edx,al
c0021f12:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0021f1a:	eb 2d                	jmp    c0021f49 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0021f1c:	3c 0d                	cmp    al,0xd
c0021f1e:	77 13                	ja     c0021f33 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0021f20:	0f b6 db             	movzx  ebx,bl
c0021f23:	0f b6 c0             	movzx  eax,al
c0021f26:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0021f2d:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0021f31:	eb 16                	jmp    c0021f49 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0021f33:	3c 15                	cmp    al,0x15
c0021f35:	77 14                	ja     c0021f4b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0021f37:	0f b6 db             	movzx  ebx,bl
c0021f3a:	0f b6 c0             	movzx  eax,al
c0021f3d:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0021f45:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0021f49:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0021f4b:	83 c4 1c             	add    esp,0x1c
c0021f4e:	5b                   	pop    ebx
c0021f4f:	5e                   	pop    esi
c0021f50:	5f                   	pop    edi
c0021f51:	5d                   	pop    ebp
c0021f52:	c3                   	ret    
c0021f53:	90                   	nop

c0021f54 <IDE::detect()>:
c0021f54:	55                   	push   ebp
c0021f55:	57                   	push   edi
c0021f56:	56                   	push   esi
c0021f57:	53                   	push   ebx
c0021f58:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021f5e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0021f65:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0021f6c:	0f 85 be 02 00 00    	jne    c0022230 <IDE::detect()+0x2dc>
c0021f72:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0021f79:	31 f6                	xor    esi,esi
c0021f7b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0021f83:	31 ed                	xor    ebp,ebp
c0021f85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f89:	c1 e0 06             	shl    eax,0x6
c0021f8c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0021f94:	89 e8                	mov    eax,ebp
c0021f96:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021f9a:	c1 e0 04             	shl    eax,0x4
c0021f9d:	83 c8 a0             	or     eax,0xffffffa0
c0021fa0:	0f b6 c0             	movzx  eax,al
c0021fa3:	50                   	push   eax
c0021fa4:	6a 06                	push   0x6
c0021fa6:	56                   	push   esi
c0021fa7:	53                   	push   ebx
c0021fa8:	e8 79 f8 ff ff       	call   c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021fad:	83 c4 0c             	add    esp,0xc
c0021fb0:	6a 0c                	push   0xc
c0021fb2:	56                   	push   esi
c0021fb3:	53                   	push   ebx
c0021fb4:	e8 2d f9 ff ff       	call   c00218e6 <IDE::read(unsigned char, unsigned char)>
c0021fb9:	83 c4 0c             	add    esp,0xc
c0021fbc:	6a 0c                	push   0xc
c0021fbe:	56                   	push   esi
c0021fbf:	53                   	push   ebx
c0021fc0:	e8 21 f9 ff ff       	call   c00218e6 <IDE::read(unsigned char, unsigned char)>
c0021fc5:	83 c4 0c             	add    esp,0xc
c0021fc8:	6a 0c                	push   0xc
c0021fca:	56                   	push   esi
c0021fcb:	53                   	push   ebx
c0021fcc:	e8 15 f9 ff ff       	call   c00218e6 <IDE::read(unsigned char, unsigned char)>
c0021fd1:	83 c4 0c             	add    esp,0xc
c0021fd4:	6a 0c                	push   0xc
c0021fd6:	56                   	push   esi
c0021fd7:	53                   	push   ebx
c0021fd8:	e8 09 f9 ff ff       	call   c00218e6 <IDE::read(unsigned char, unsigned char)>
c0021fdd:	68 ec 00 00 00       	push   0xec
c0021fe2:	6a 07                	push   0x7
c0021fe4:	56                   	push   esi
c0021fe5:	53                   	push   ebx
c0021fe6:	e8 3b f8 ff ff       	call   c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021feb:	83 c4 1c             	add    esp,0x1c
c0021fee:	6a 0c                	push   0xc
c0021ff0:	56                   	push   esi
c0021ff1:	53                   	push   ebx
c0021ff2:	e8 ef f8 ff ff       	call   c00218e6 <IDE::read(unsigned char, unsigned char)>
c0021ff7:	83 c4 0c             	add    esp,0xc
c0021ffa:	6a 0c                	push   0xc
c0021ffc:	56                   	push   esi
c0021ffd:	53                   	push   ebx
c0021ffe:	e8 e3 f8 ff ff       	call   c00218e6 <IDE::read(unsigned char, unsigned char)>
c0022003:	83 c4 0c             	add    esp,0xc
c0022006:	6a 0c                	push   0xc
c0022008:	56                   	push   esi
c0022009:	53                   	push   ebx
c002200a:	e8 d7 f8 ff ff       	call   c00218e6 <IDE::read(unsigned char, unsigned char)>
c002200f:	83 c4 0c             	add    esp,0xc
c0022012:	6a 0c                	push   0xc
c0022014:	56                   	push   esi
c0022015:	53                   	push   ebx
c0022016:	e8 cb f8 ff ff       	call   c00218e6 <IDE::read(unsigned char, unsigned char)>
c002201b:	83 c4 0c             	add    esp,0xc
c002201e:	6a 0c                	push   0xc
c0022020:	56                   	push   esi
c0022021:	53                   	push   ebx
c0022022:	e8 bf f8 ff ff       	call   c00218e6 <IDE::read(unsigned char, unsigned char)>
c0022027:	83 c4 10             	add    esp,0x10
c002202a:	84 c0                	test   al,al
c002202c:	0f 84 8b 01 00 00    	je     c00221bd <IDE::detect()+0x269>
c0022032:	31 ff                	xor    edi,edi
c0022034:	50                   	push   eax
c0022035:	6a 0c                	push   0xc
c0022037:	56                   	push   esi
c0022038:	53                   	push   ebx
c0022039:	e8 a8 f8 ff ff       	call   c00218e6 <IDE::read(unsigned char, unsigned char)>
c002203e:	83 c4 10             	add    esp,0x10
c0022041:	a8 01                	test   al,0x1
c0022043:	0f 85 8e 01 00 00    	jne    c00221d7 <IDE::detect()+0x283>
c0022049:	84 c0                	test   al,al
c002204b:	78 04                	js     c0022051 <IDE::detect()+0xfd>
c002204d:	a8 08                	test   al,0x8
c002204f:	75 27                	jne    c0022078 <IDE::detect()+0x124>
c0022051:	47                   	inc    edi
c0022052:	81 ff 17 01 00 00    	cmp    edi,0x117
c0022058:	7e da                	jle    c0022034 <IDE::detect()+0xe0>
c002205a:	50                   	push   eax
c002205b:	50                   	push   eax
c002205c:	6a 00                	push   0x0
c002205e:	68 40 4b 4c 00       	push   0x4c4b40
c0022063:	e8 e2 aa ff ff       	call   c001cb4a <nanoSleep(unsigned long long)>
c0022068:	83 c4 10             	add    esp,0x10
c002206b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0022071:	75 c1                	jne    c0022034 <IDE::detect()+0xe0>
c0022073:	e9 5f 01 00 00       	jmp    c00221d7 <IDE::detect()+0x283>
c0022078:	31 c9                	xor    ecx,ecx
c002207a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002207e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0022082:	83 ec 0c             	sub    esp,0xc
c0022085:	68 80 00 00 00       	push   0x80
c002208a:	57                   	push   edi
c002208b:	6a 00                	push   0x0
c002208d:	56                   	push   esi
c002208e:	53                   	push   ebx
c002208f:	e8 f4 fd ff ff       	call   c0021e88 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0022094:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0022099:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002209d:	89 d1                	mov    ecx,edx
c002209f:	c1 e0 06             	shl    eax,0x6
c00220a2:	01 d8                	add    eax,ebx
c00220a4:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00220ab:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00220b2:	89 f2                	mov    edx,esi
c00220b4:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00220ba:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00220be:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00220c4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00220c8:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00220cf:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00220d7:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00220de:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00220e6:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00220ec:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00220f3:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00220f9:	8d 54 24 58          	lea    edx,[esp+0x58]
c00220fd:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022101:	83 c4 20             	add    esp,0x20
c0022104:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0022107:	83 c0 02             	add    eax,0x2
c002210a:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0022110:	83 c7 02             	add    edi,0x2
c0022113:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0022116:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002211c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0022120:	75 e2                	jne    c0022104 <IDE::detect()+0x1b0>
c0022122:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022126:	c1 e0 06             	shl    eax,0x6
c0022129:	01 d8                	add    eax,ebx
c002212b:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0022131:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0022138:	66 c1 ea 09          	shr    dx,0x9
c002213c:	83 e2 01             	and    edx,0x1
c002213f:	84 c9                	test   cl,cl
c0022141:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0022147:	75 2f                	jne    c0022178 <IDE::detect()+0x224>
c0022149:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c002214f:	85 c0                	test   eax,eax
c0022151:	74 66                	je     c00221b9 <IDE::detect()+0x265>
c0022153:	50                   	push   eax
c0022154:	55                   	push   ebp
c0022155:	56                   	push   esi
c0022156:	68 8f a9 02 c0       	push   0xc002a98f
c002215b:	e8 41 05 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0022160:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0022167:	e8 68 d3 fe ff       	call   c000f4d4 <malloc>
c002216c:	89 c7                	mov    edi,eax
c002216e:	89 04 24             	mov    DWORD PTR [esp],eax
c0022171:	e8 62 06 00 00       	call   c00227d8 <ATA::ATA()>
c0022176:	eb 28                	jmp    c00221a0 <IDE::detect()+0x24c>
c0022178:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c002217e:	55                   	push   ebp
c002217f:	56                   	push   esi
c0022180:	68 be a9 02 c0       	push   0xc002a9be
c0022185:	e8 17 05 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c002218a:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0022191:	e8 3e d3 fe ff       	call   c000f4d4 <malloc>
c0022196:	89 c7                	mov    edi,eax
c0022198:	89 04 24             	mov    DWORD PTR [esp],eax
c002219b:	e8 68 0c 00 00       	call   c0022e08 <ATAPI::ATAPI()>
c00221a0:	5a                   	pop    edx
c00221a1:	59                   	pop    ecx
c00221a2:	57                   	push   edi
c00221a3:	53                   	push   ebx
c00221a4:	e8 e7 18 ff ff       	call   c0013a90 <Device::addChild(Device*)>
c00221a9:	8b 07                	mov    eax,DWORD PTR [edi]
c00221ab:	53                   	push   ebx
c00221ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00221b0:	6a 00                	push   0x0
c00221b2:	57                   	push   edi
c00221b3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00221b6:	83 c4 20             	add    esp,0x20
c00221b9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00221bd:	4d                   	dec    ebp
c00221be:	74 0a                	je     c00221ca <IDE::detect()+0x276>
c00221c0:	bd 01 00 00 00       	mov    ebp,0x1
c00221c5:	e9 bb fd ff ff       	jmp    c0021f85 <IDE::detect()+0x31>
c00221ca:	4e                   	dec    esi
c00221cb:	74 63                	je     c0022230 <IDE::detect()+0x2dc>
c00221cd:	be 01 00 00 00       	mov    esi,0x1
c00221d2:	e9 ac fd ff ff       	jmp    c0021f83 <IDE::detect()+0x2f>
c00221d7:	50                   	push   eax
c00221d8:	6a 04                	push   0x4
c00221da:	56                   	push   esi
c00221db:	53                   	push   ebx
c00221dc:	e8 05 f7 ff ff       	call   c00218e6 <IDE::read(unsigned char, unsigned char)>
c00221e1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00221e5:	83 c4 0c             	add    esp,0xc
c00221e8:	6a 05                	push   0x5
c00221ea:	56                   	push   esi
c00221eb:	53                   	push   ebx
c00221ec:	e8 f5 f6 ff ff       	call   c00218e6 <IDE::read(unsigned char, unsigned char)>
c00221f1:	83 c4 10             	add    esp,0x10
c00221f4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00221f8:	80 fa 14             	cmp    dl,0x14
c00221fb:	75 04                	jne    c0022201 <IDE::detect()+0x2ad>
c00221fd:	3c eb                	cmp    al,0xeb
c00221ff:	eb 07                	jmp    c0022208 <IDE::detect()+0x2b4>
c0022201:	3c 96                	cmp    al,0x96
c0022203:	75 b8                	jne    c00221bd <IDE::detect()+0x269>
c0022205:	80 fa 69             	cmp    dl,0x69
c0022208:	75 b3                	jne    c00221bd <IDE::detect()+0x269>
c002220a:	68 a1 00 00 00       	push   0xa1
c002220f:	6a 07                	push   0x7
c0022211:	56                   	push   esi
c0022212:	53                   	push   ebx
c0022213:	e8 0e f6 ff ff       	call   c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022218:	5f                   	pop    edi
c0022219:	58                   	pop    eax
c002221a:	6a 00                	push   0x0
c002221c:	68 40 42 0f 00       	push   0xf4240
c0022221:	e8 24 a9 ff ff       	call   c001cb4a <nanoSleep(unsigned long long)>
c0022226:	83 c4 10             	add    esp,0x10
c0022229:	b1 01                	mov    cl,0x1
c002222b:	e9 4a fe ff ff       	jmp    c002207a <IDE::detect()+0x126>
c0022230:	81 c4 1c 02 00 00    	add    esp,0x21c
c0022236:	5b                   	pop    ebx
c0022237:	5e                   	pop    esi
c0022238:	5f                   	pop    edi
c0022239:	5d                   	pop    ebp
c002223a:	c3                   	ret    
c002223b:	90                   	nop

c002223c <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002223c:	55                   	push   ebp
c002223d:	57                   	push   edi
c002223e:	56                   	push   esi
c002223f:	53                   	push   ebx
c0022240:	83 ec 1c             	sub    esp,0x1c
c0022243:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022247:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002224b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002224f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0022253:	88 c3                	mov    bl,al
c0022255:	84 c0                	test   al,al
c0022257:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002225b:	0f 84 67 01 00 00    	je     c00223c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0022261:	83 ec 0c             	sub    esp,0xc
c0022264:	68 ef a9 02 c0       	push   0xc002a9ef
c0022269:	e8 33 04 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c002226e:	83 c4 10             	add    esp,0x10
c0022271:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022275:	3c 01                	cmp    al,0x1
c0022277:	75 17                	jne    c0022290 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0022279:	83 ec 0c             	sub    esp,0xc
c002227c:	b3 13                	mov    bl,0x13
c002227e:	68 fb a9 02 c0       	push   0xc002a9fb
c0022283:	e8 19 04 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0022288:	83 c4 10             	add    esp,0x10
c002228b:	e9 25 01 00 00       	jmp    c00223b5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022290:	3c 02                	cmp    al,0x2
c0022292:	0f 85 ef 00 00 00    	jne    c0022387 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0022298:	d1 e6                	shl    esi,1
c002229a:	09 ee                	or     esi,ebp
c002229c:	52                   	push   edx
c002229d:	89 f0                	mov    eax,esi
c002229f:	6a 01                	push   0x1
c00222a1:	0f b6 f0             	movzx  esi,al
c00222a4:	c1 e6 06             	shl    esi,0x6
c00222a7:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00222af:	50                   	push   eax
c00222b0:	57                   	push   edi
c00222b1:	e8 30 f6 ff ff       	call   c00218e6 <IDE::read(unsigned char, unsigned char)>
c00222b6:	83 c4 10             	add    esp,0x10
c00222b9:	89 c6                	mov    esi,eax
c00222bb:	a8 01                	test   al,0x1
c00222bd:	74 12                	je     c00222d1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c00222bf:	83 ec 0c             	sub    esp,0xc
c00222c2:	b3 07                	mov    bl,0x7
c00222c4:	68 10 aa 02 c0       	push   0xc002aa10
c00222c9:	e8 d3 03 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00222ce:	83 c4 10             	add    esp,0x10
c00222d1:	f7 c6 02 00 00 00    	test   esi,0x2
c00222d7:	74 12                	je     c00222eb <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c00222d9:	83 ec 0c             	sub    esp,0xc
c00222dc:	b3 03                	mov    bl,0x3
c00222de:	68 2e aa 02 c0       	push   0xc002aa2e
c00222e3:	e8 b9 03 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00222e8:	83 c4 10             	add    esp,0x10
c00222eb:	f7 c6 04 00 00 00    	test   esi,0x4
c00222f1:	74 12                	je     c0022305 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c00222f3:	83 ec 0c             	sub    esp,0xc
c00222f6:	b3 14                	mov    bl,0x14
c00222f8:	68 4e aa 02 c0       	push   0xc002aa4e
c00222fd:	e8 9f 03 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0022302:	83 c4 10             	add    esp,0x10
c0022305:	f7 c6 08 00 00 00    	test   esi,0x8
c002230b:	74 12                	je     c002231f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c002230d:	83 ec 0c             	sub    esp,0xc
c0022310:	b3 03                	mov    bl,0x3
c0022312:	68 2e aa 02 c0       	push   0xc002aa2e
c0022317:	e8 85 03 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c002231c:	83 c4 10             	add    esp,0x10
c002231f:	f7 c6 10 00 00 00    	test   esi,0x10
c0022325:	74 12                	je     c0022339 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0022327:	83 ec 0c             	sub    esp,0xc
c002232a:	b3 15                	mov    bl,0x15
c002232c:	68 66 aa 02 c0       	push   0xc002aa66
c0022331:	e8 6b 03 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0022336:	83 c4 10             	add    esp,0x10
c0022339:	f7 c6 20 00 00 00    	test   esi,0x20
c002233f:	74 12                	je     c0022353 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0022341:	83 ec 0c             	sub    esp,0xc
c0022344:	b3 03                	mov    bl,0x3
c0022346:	68 2e aa 02 c0       	push   0xc002aa2e
c002234b:	e8 51 03 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0022350:	83 c4 10             	add    esp,0x10
c0022353:	f7 c6 40 00 00 00    	test   esi,0x40
c0022359:	74 12                	je     c002236d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c002235b:	83 ec 0c             	sub    esp,0xc
c002235e:	b3 16                	mov    bl,0x16
c0022360:	68 80 aa 02 c0       	push   0xc002aa80
c0022365:	e8 37 03 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c002236a:	83 c4 10             	add    esp,0x10
c002236d:	89 f0                	mov    eax,esi
c002236f:	84 c0                	test   al,al
c0022371:	79 42                	jns    c00223b5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022373:	83 ec 0c             	sub    esp,0xc
c0022376:	b3 0d                	mov    bl,0xd
c0022378:	68 a1 aa 02 c0       	push   0xc002aaa1
c002237d:	e8 1f 03 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0022382:	83 c4 10             	add    esp,0x10
c0022385:	eb 2e                	jmp    c00223b5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022387:	3c 03                	cmp    al,0x3
c0022389:	75 14                	jne    c002239f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c002238b:	83 ec 0c             	sub    esp,0xc
c002238e:	b3 17                	mov    bl,0x17
c0022390:	68 b5 aa 02 c0       	push   0xc002aab5
c0022395:	e8 07 03 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c002239a:	83 c4 10             	add    esp,0x10
c002239d:	eb 16                	jmp    c00223b5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002239f:	3c 04                	cmp    al,0x4
c00223a1:	75 12                	jne    c00223b5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00223a3:	83 ec 0c             	sub    esp,0xc
c00223a6:	b3 08                	mov    bl,0x8
c00223a8:	68 cb aa 02 c0       	push   0xc002aacb
c00223ad:	e8 ef 02 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00223b2:	83 c4 10             	add    esp,0x10
c00223b5:	50                   	push   eax
c00223b6:	50                   	push   eax
c00223b7:	0f b6 c3             	movzx  eax,bl
c00223ba:	50                   	push   eax
c00223bb:	68 e3 aa 02 c0       	push   0xc002aae3
c00223c0:	e8 dc 02 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00223c5:	83 c4 10             	add    esp,0x10
c00223c8:	83 c4 1c             	add    esp,0x1c
c00223cb:	88 d8                	mov    al,bl
c00223cd:	5b                   	pop    ebx
c00223ce:	5e                   	pop    esi
c00223cf:	5f                   	pop    edi
c00223d0:	5d                   	pop    ebp
c00223d1:	c3                   	ret    

c00223d2 <IDE::polling(unsigned char, unsigned int)>:
c00223d2:	57                   	push   edi
c00223d3:	56                   	push   esi
c00223d4:	53                   	push   ebx
c00223d5:	bb 04 00 00 00       	mov    ebx,0x4
c00223da:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00223de:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00223e3:	52                   	push   edx
c00223e4:	6a 0c                	push   0xc
c00223e6:	56                   	push   esi
c00223e7:	57                   	push   edi
c00223e8:	e8 f9 f4 ff ff       	call   c00218e6 <IDE::read(unsigned char, unsigned char)>
c00223ed:	83 c4 10             	add    esp,0x10
c00223f0:	4b                   	dec    ebx
c00223f1:	75 f0                	jne    c00223e3 <IDE::polling(unsigned char, unsigned int)+0x11>
c00223f3:	bb a0 86 01 00       	mov    ebx,0x186a0
c00223f8:	50                   	push   eax
c00223f9:	6a 0c                	push   0xc
c00223fb:	56                   	push   esi
c00223fc:	57                   	push   edi
c00223fd:	e8 e4 f4 ff ff       	call   c00218e6 <IDE::read(unsigned char, unsigned char)>
c0022402:	83 c4 10             	add    esp,0x10
c0022405:	a8 01                	test   al,0x1
c0022407:	74 12                	je     c002241b <IDE::polling(unsigned char, unsigned int)+0x49>
c0022409:	83 ec 0c             	sub    esp,0xc
c002240c:	68 fd aa 02 c0       	push   0xc002aafd
c0022411:	e8 8b 02 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0022416:	83 c4 10             	add    esp,0x10
c0022419:	eb 17                	jmp    c0022432 <IDE::polling(unsigned char, unsigned int)+0x60>
c002241b:	a8 20                	test   al,0x20
c002241d:	75 0f                	jne    c002242e <IDE::polling(unsigned char, unsigned int)+0x5c>
c002241f:	4b                   	dec    ebx
c0022420:	74 10                	je     c0022432 <IDE::polling(unsigned char, unsigned int)+0x60>
c0022422:	84 c0                	test   al,al
c0022424:	78 d2                	js     c00223f8 <IDE::polling(unsigned char, unsigned int)+0x26>
c0022426:	a8 08                	test   al,0x8
c0022428:	74 ce                	je     c00223f8 <IDE::polling(unsigned char, unsigned int)+0x26>
c002242a:	31 c0                	xor    eax,eax
c002242c:	eb 06                	jmp    c0022434 <IDE::polling(unsigned char, unsigned int)+0x62>
c002242e:	b0 01                	mov    al,0x1
c0022430:	eb 02                	jmp    c0022434 <IDE::polling(unsigned char, unsigned int)+0x62>
c0022432:	b0 02                	mov    al,0x2
c0022434:	5b                   	pop    ebx
c0022435:	5e                   	pop    esi
c0022436:	5f                   	pop    edi
c0022437:	c3                   	ret    

c0022438 <SATABus::close(int, int, void*)>:
c0022438:	31 c0                	xor    eax,eax
c002243a:	c3                   	ret    
c002243b:	90                   	nop

c002243c <SATABus::detect()>:
c002243c:	c3                   	ret    
c002243d:	90                   	nop

c002243e <SATABus::SATABus()>:
c002243e:	83 ec 0c             	sub    esp,0xc
c0022441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022445:	83 ec 08             	sub    esp,0x8
c0022448:	68 40 ab 02 c0       	push   0xc002ab40
c002244d:	50                   	push   eax
c002244e:	e8 c9 19 ff ff       	call   c0013e1c <HardDiskController::HardDiskController(char const*)>
c0022453:	83 c4 10             	add    esp,0x10
c0022456:	ba fc ab 02 c0       	mov    edx,0xc002abfc
c002245b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002245f:	89 10                	mov    DWORD PTR [eax],edx
c0022461:	83 ec 0c             	sub    esp,0xc
c0022464:	6a 50                	push   0x50
c0022466:	e8 db d6 fe ff       	call   c000fb46 <Phys::allocateContiguousPages(int)>
c002246b:	83 c4 10             	add    esp,0x10
c002246e:	89 c2                	mov    edx,eax
c0022470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022474:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002247a:	83 ec 0c             	sub    esp,0xc
c002247d:	6a 50                	push   0x50
c002247f:	e8 2d f2 fe ff       	call   c00116b1 <Virt::allocateKernelVirtualPages(int)>
c0022484:	83 c4 10             	add    esp,0x10
c0022487:	89 c2                	mov    edx,eax
c0022489:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002248d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022493:	e8 a9 f3 fe ff       	call   c0011841 <Virt::getAKernelVAS()>
c0022498:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002249c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c00224a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00224a6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00224ac:	83 ec 0c             	sub    esp,0xc
c00224af:	6a 03                	push   0x3
c00224b1:	6a 50                	push   0x50
c00224b3:	51                   	push   ecx
c00224b4:	52                   	push   edx
c00224b5:	50                   	push   eax
c00224b6:	e8 b5 fb fe ff       	call   c0012070 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00224bb:	83 c4 20             	add    esp,0x20
c00224be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224c2:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c00224c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224cc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00224d2:	83 ec 04             	sub    esp,0x4
c00224d5:	52                   	push   edx
c00224d6:	50                   	push   eax
c00224d7:	68 64 ab 02 c0       	push   0xc002ab64
c00224dc:	e8 c0 01 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00224e1:	83 c4 10             	add    esp,0x10
c00224e4:	90                   	nop
c00224e5:	83 c4 0c             	add    esp,0xc
c00224e8:	c3                   	ret    
c00224e9:	90                   	nop

c00224ea <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c00224ea:	83 ec 0c             	sub    esp,0xc
c00224ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00224f1:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00224f4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00224f7:	09 c2                	or     edx,eax
c00224f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224fd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022503:	8b 08                	mov    ecx,DWORD PTR [eax]
c0022505:	31 c0                	xor    eax,eax
c0022507:	c1 e9 08             	shr    ecx,0x8
c002250a:	83 e1 0f             	and    ecx,0xf
c002250d:	39 c8                	cmp    eax,ecx
c002250f:	74 0a                	je     c002251b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0022511:	f6 c2 01             	test   dl,0x1
c0022514:	74 18                	je     c002252e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0022516:	d1 ea                	shr    edx,1
c0022518:	40                   	inc    eax
c0022519:	eb f2                	jmp    c002250d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c002251b:	83 ec 0c             	sub    esp,0xc
c002251e:	68 88 ab 02 c0       	push   0xc002ab88
c0022523:	e8 54 70 ff ff       	call   c001957c <Krnl::panic(char const*)>
c0022528:	83 c4 10             	add    esp,0x10
c002252b:	83 c8 ff             	or     eax,0xffffffff
c002252e:	83 c4 0c             	add    esp,0xc
c0022531:	c3                   	ret    

c0022532 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0022532:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022536:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0022539:	89 c2                	mov    edx,eax
c002253b:	c1 ea 08             	shr    edx,0x8
c002253e:	83 e2 0f             	and    edx,0xf
c0022541:	fe ca                	dec    dl
c0022543:	75 31                	jne    c0022576 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022545:	83 e0 0f             	and    eax,0xf
c0022548:	3c 03                	cmp    al,0x3
c002254a:	75 2a                	jne    c0022576 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002254c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002254f:	b8 02 00 00 00       	mov    eax,0x2
c0022554:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002255a:	74 1c                	je     c0022578 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002255c:	b8 04 00 00 00       	mov    eax,0x4
c0022561:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0022567:	74 0f                	je     c0022578 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022569:	31 c0                	xor    eax,eax
c002256b:	83 fa 03             	cmp    edx,0x3
c002256e:	0f 94 c0             	sete   al
c0022571:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0022575:	c3                   	ret    
c0022576:	31 c0                	xor    eax,eax
c0022578:	c3                   	ret    
c0022579:	90                   	nop

c002257a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002257a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002257e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022581:	0f ba e2 0f          	bt     edx,0xf
c0022585:	72 f7                	jb     c002257e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0022587:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002258a:	83 ca 10             	or     edx,0x10
c002258d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022590:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022593:	83 ca 01             	or     edx,0x1
c0022596:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022599:	c3                   	ret    

c002259a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002259a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002259e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00225a1:	83 e2 fe             	and    edx,0xfffffffe
c00225a4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00225a7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00225aa:	83 e2 ef             	and    edx,0xffffffef
c00225ad:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00225b0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00225b3:	0f ba e2 0e          	bt     edx,0xe
c00225b7:	72 f7                	jb     c00225b0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00225b9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00225bc:	0f ba e2 0f          	bt     edx,0xf
c00225c0:	72 ee                	jb     c00225b0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00225c2:	c3                   	ret    
c00225c3:	90                   	nop

c00225c4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c00225c4:	55                   	push   ebp
c00225c5:	57                   	push   edi
c00225c6:	56                   	push   esi
c00225c7:	53                   	push   ebx
c00225c8:	83 ec 1c             	sub    esp,0x1c
c00225cb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00225cf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00225d3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00225d7:	53                   	push   ebx
c00225d8:	89 fd                	mov    ebp,edi
c00225da:	56                   	push   esi
c00225db:	c1 e5 0a             	shl    ebp,0xa
c00225de:	e8 b7 ff ff ff       	call   c002259a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00225e3:	83 ec 0c             	sub    esp,0xc
c00225e6:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00225ec:	01 e8                	add    eax,ebp
c00225ee:	89 03                	mov    DWORD PTR [ebx],eax
c00225f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00225f2:	68 00 04 00 00       	push   0x400
c00225f7:	6a 00                	push   0x0
c00225f9:	50                   	push   eax
c00225fa:	e8 8c e0 fd ff       	call   c000068b <memset>
c00225ff:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0022605:	89 fa                	mov    edx,edi
c0022607:	01 e8                	add    eax,ebp
c0022609:	c1 e7 0d             	shl    edi,0xd
c002260c:	89 03                	mov    DWORD PTR [ebx],eax
c002260e:	c1 e2 08             	shl    edx,0x8
c0022611:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022618:	81 c2 00 80 00 00    	add    edx,0x8000
c002261e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0022622:	89 d0                	mov    eax,edx
c0022624:	83 c4 1c             	add    esp,0x1c
c0022627:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002262d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022630:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0022633:	68 00 01 00 00       	push   0x100
c0022638:	6a 00                	push   0x0
c002263a:	50                   	push   eax
c002263b:	e8 4b e0 fd ff       	call   c000068b <memset>
c0022640:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022644:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c002264a:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0022650:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022654:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0022657:	83 c4 10             	add    esp,0x10
c002265a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022661:	31 ff                	xor    edi,edi
c0022663:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0022669:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c002266f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022673:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0022679:	83 c5 20             	add    ebp,0x20
c002267c:	01 f8                	add    eax,edi
c002267e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022681:	52                   	push   edx
c0022682:	68 00 01 00 00       	push   0x100
c0022687:	6a 00                	push   0x0
c0022689:	50                   	push   eax
c002268a:	e8 fc df fd ff       	call   c000068b <memset>
c002268f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022693:	83 c4 10             	add    esp,0x10
c0022696:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c002269c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00226a3:	01 f8                	add    eax,edi
c00226a5:	81 c7 00 01 00 00    	add    edi,0x100
c00226ab:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00226ae:	81 ff 00 20 00 00    	cmp    edi,0x2000
c00226b4:	75 b3                	jne    c0022669 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c00226b6:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00226ba:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00226be:	83 c4 1c             	add    esp,0x1c
c00226c1:	5b                   	pop    ebx
c00226c2:	5e                   	pop    esi
c00226c3:	5f                   	pop    edi
c00226c4:	5d                   	pop    ebp
c00226c5:	e9 b0 fe ff ff       	jmp    c002257a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c00226ca <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c00226ca:	55                   	push   ebp
c00226cb:	57                   	push   edi
c00226cc:	56                   	push   esi
c00226cd:	53                   	push   ebx
c00226ce:	31 db                	xor    ebx,ebx
c00226d0:	83 ec 0c             	sub    esp,0xc
c00226d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00226d7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00226db:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c00226de:	f7 c7 01 00 00 00    	test   edi,0x1
c00226e4:	0f 84 94 00 00 00    	je     c002277e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c00226ea:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00226ee:	89 d8                	mov    eax,ebx
c00226f0:	c1 e0 07             	shl    eax,0x7
c00226f3:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c00226fa:	55                   	push   ebp
c00226fb:	56                   	push   esi
c00226fc:	e8 31 fe ff ff       	call   c0022532 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0022701:	59                   	pop    ecx
c0022702:	83 f8 01             	cmp    eax,0x1
c0022705:	5a                   	pop    edx
c0022706:	75 47                	jne    c002274f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x85>
c0022708:	51                   	push   ecx
c0022709:	51                   	push   ecx
c002270a:	53                   	push   ebx
c002270b:	68 ad ab 02 c0       	push   0xc002abad
c0022710:	e8 8c ff fe ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0022715:	83 c4 0c             	add    esp,0xc
c0022718:	53                   	push   ebx
c0022719:	55                   	push   ebp
c002271a:	56                   	push   esi
c002271b:	e8 a4 fe ff ff       	call   c00225c4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0022720:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0022727:	e8 a8 cd fe ff       	call   c000f4d4 <malloc>
c002272c:	89 04 24             	mov    DWORD PTR [esp],eax
c002272f:	89 c5                	mov    ebp,eax
c0022731:	e8 de 0c 00 00       	call   c0023414 <SATA::SATA()>
c0022736:	58                   	pop    eax
c0022737:	5a                   	pop    edx
c0022738:	55                   	push   ebp
c0022739:	56                   	push   esi
c002273a:	e8 51 13 ff ff       	call   c0013a90 <Device::addChild(Device*)>
c002273f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022742:	56                   	push   esi
c0022743:	6a 00                	push   0x0
c0022745:	53                   	push   ebx
c0022746:	55                   	push   ebp
c0022747:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002274a:	83 c4 20             	add    esp,0x20
c002274d:	eb 2f                	jmp    c002277e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c002274f:	83 f8 04             	cmp    eax,0x4
c0022752:	75 1a                	jne    c002276e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa4>
c0022754:	52                   	push   edx
c0022755:	52                   	push   edx
c0022756:	53                   	push   ebx
c0022757:	68 c4 ab 02 c0       	push   0xc002abc4
c002275c:	e8 40 ff fe ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0022761:	83 c4 0c             	add    esp,0xc
c0022764:	53                   	push   ebx
c0022765:	55                   	push   ebp
c0022766:	56                   	push   esi
c0022767:	e8 58 fe ff ff       	call   c00225c4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002276c:	eb 0d                	jmp    c002277b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb1>
c002276e:	50                   	push   eax
c002276f:	50                   	push   eax
c0022770:	53                   	push   ebx
c0022771:	68 dd ab 02 c0       	push   0xc002abdd
c0022776:	e8 26 ff fe ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c002277b:	83 c4 10             	add    esp,0x10
c002277e:	d1 ef                	shr    edi,1
c0022780:	43                   	inc    ebx
c0022781:	83 fb 20             	cmp    ebx,0x20
c0022784:	0f 85 54 ff ff ff    	jne    c00226de <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002278a:	83 c4 0c             	add    esp,0xc
c002278d:	5b                   	pop    ebx
c002278e:	5e                   	pop    esi
c002278f:	5f                   	pop    edi
c0022790:	5d                   	pop    ebp
c0022791:	c3                   	ret    

c0022792 <SATABus::open(int, int, void*)>:
c0022792:	83 ec 14             	sub    esp,0x14
c0022795:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022799:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c002279f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00227a5:	52                   	push   edx
c00227a6:	50                   	push   eax
c00227a7:	e8 1e ff ff ff       	call   c00226ca <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c00227ac:	31 c0                	xor    eax,eax
c00227ae:	83 c4 1c             	add    esp,0x1c
c00227b1:	c3                   	ret    

c00227b2 <ATA::close(int, int, void*)>:
c00227b2:	83 ec 0c             	sub    esp,0xc
c00227b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227b9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00227bf:	85 c0                	test   eax,eax
c00227c1:	74 0c                	je     c00227cf <ATA::close(int, int, void*)+0x1d>
c00227c3:	83 ec 0c             	sub    esp,0xc
c00227c6:	8b 10                	mov    edx,DWORD PTR [eax]
c00227c8:	50                   	push   eax
c00227c9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00227cc:	83 c4 10             	add    esp,0x10
c00227cf:	31 c0                	xor    eax,eax
c00227d1:	83 c4 0c             	add    esp,0xc
c00227d4:	c3                   	ret    
c00227d5:	90                   	nop

c00227d6 <ATA::powerSaving(PowerSavingLevel)>:
c00227d6:	c3                   	ret    
c00227d7:	90                   	nop

c00227d8 <ATA::ATA()>:
c00227d8:	83 ec 0c             	sub    esp,0xc
c00227db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227df:	83 ec 04             	sub    esp,0x4
c00227e2:	68 00 02 00 00       	push   0x200
c00227e7:	68 f0 ac 02 c0       	push   0xc002acf0
c00227ec:	50                   	push   eax
c00227ed:	e8 ae 16 ff ff       	call   c0013ea0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00227f2:	83 c4 10             	add    esp,0x10
c00227f5:	ba 3c ac 02 c0       	mov    edx,0xc002ac3c
c00227fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227fe:	89 10                	mov    DWORD PTR [eax],edx
c0022800:	90                   	nop
c0022801:	83 c4 0c             	add    esp,0xc
c0022804:	c3                   	ret    
c0022805:	90                   	nop

c0022806 <ATA::flush(bool)>:
c0022806:	53                   	push   ebx
c0022807:	83 ec 08             	sub    esp,0x8
c002280a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c002280f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022813:	19 c0                	sbb    eax,eax
c0022815:	83 e0 fd             	and    eax,0xfffffffd
c0022818:	05 ea 00 00 00       	add    eax,0xea
c002281d:	50                   	push   eax
c002281e:	6a 07                	push   0x7
c0022820:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022827:	50                   	push   eax
c0022828:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002282e:	e8 f3 ef ff ff       	call   c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022833:	83 c4 0c             	add    esp,0xc
c0022836:	6a 00                	push   0x0
c0022838:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002283f:	50                   	push   eax
c0022840:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022846:	e8 87 fb ff ff       	call   c00223d2 <IDE::polling(unsigned char, unsigned int)>
c002284b:	83 c4 18             	add    esp,0x18
c002284e:	5b                   	pop    ebx
c002284f:	c3                   	ret    

c0022850 <ATA::readyForCommand()>:
c0022850:	56                   	push   esi
c0022851:	53                   	push   ebx
c0022852:	31 db                	xor    ebx,ebx
c0022854:	50                   	push   eax
c0022855:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022859:	50                   	push   eax
c002285a:	6a 0c                	push   0xc
c002285c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0022863:	50                   	push   eax
c0022864:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002286a:	e8 77 f0 ff ff       	call   c00218e6 <IDE::read(unsigned char, unsigned char)>
c002286f:	83 c4 10             	add    esp,0x10
c0022872:	a8 88                	test   al,0x88
c0022874:	74 23                	je     c0022899 <ATA::readyForCommand()+0x49>
c0022876:	43                   	inc    ebx
c0022877:	83 fb 63             	cmp    ebx,0x63
c002287a:	7e dd                	jle    c0022859 <ATA::readyForCommand()+0x9>
c002287c:	51                   	push   ecx
c002287d:	51                   	push   ecx
c002287e:	6a 00                	push   0x0
c0022880:	68 40 42 0f 00       	push   0xf4240
c0022885:	e8 c0 a2 ff ff       	call   c001cb4a <nanoSleep(unsigned long long)>
c002288a:	83 c4 10             	add    esp,0x10
c002288d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0022893:	75 c4                	jne    c0022859 <ATA::readyForCommand()+0x9>
c0022895:	31 c0                	xor    eax,eax
c0022897:	eb 02                	jmp    c002289b <ATA::readyForCommand()+0x4b>
c0022899:	b0 01                	mov    al,0x1
c002289b:	5a                   	pop    edx
c002289c:	5b                   	pop    ebx
c002289d:	5e                   	pop    esi
c002289e:	c3                   	ret    
c002289f:	90                   	nop

c00228a0 <ATA::access(unsigned long long, int, void*, bool)>:
c00228a0:	55                   	push   ebp
c00228a1:	57                   	push   edi
c00228a2:	56                   	push   esi
c00228a3:	53                   	push   ebx
c00228a4:	83 ec 2c             	sub    esp,0x2c
c00228a7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00228ab:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00228af:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00228b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00228b7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00228bb:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00228bf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00228c3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00228c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00228cd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00228d3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00228d7:	c1 e0 06             	shl    eax,0x6
c00228da:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00228e2:	74 5d                	je     c0022941 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00228e4:	89 fa                	mov    edx,edi
c00228e6:	89 f0                	mov    eax,esi
c00228e8:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00228ec:	c1 ea 1c             	shr    edx,0x1c
c00228ef:	89 d1                	mov    ecx,edx
c00228f1:	09 c1                	or     ecx,eax
c00228f3:	74 25                	je     c002291a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00228f5:	31 ed                	xor    ebp,ebp
c00228f7:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00228fe:	89 fa                	mov    edx,edi
c0022900:	89 f0                	mov    eax,esi
c0022902:	0f ad d0             	shrd   eax,edx,cl
c0022905:	d3 ea                	shr    edx,cl
c0022907:	f6 c1 20             	test   cl,0x20
c002290a:	74 02                	je     c002290e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002290c:	89 d0                	mov    eax,edx
c002290e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0022912:	45                   	inc    ebp
c0022913:	83 fd 06             	cmp    ebp,0x6
c0022916:	75 df                	jne    c00228f7 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0022918:	eb 76                	jmp    c0022990 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002291a:	89 f0                	mov    eax,esi
c002291c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0022921:	89 fa                	mov    edx,edi
c0022923:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002292a:	0f ac d0 10          	shrd   eax,edx,0x10
c002292e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0022933:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0022937:	c1 ee 18             	shr    esi,0x18
c002293a:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002293f:	eb 56                	jmp    c0022997 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0022941:	6a 00                	push   0x0
c0022943:	6a 3f                	push   0x3f
c0022945:	57                   	push   edi
c0022946:	56                   	push   esi
c0022947:	e8 30 24 00 00       	call   c0024d7c <__umoddi3>
c002294c:	83 c4 10             	add    esp,0x10
c002294f:	40                   	inc    eax
c0022950:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0022954:	6a 00                	push   0x0
c0022956:	68 f0 03 00 00       	push   0x3f0
c002295b:	57                   	push   edi
c002295c:	56                   	push   esi
c002295d:	e8 1a 23 00 00       	call   c0024c7c <__udivdi3>
c0022962:	83 c4 10             	add    esp,0x10
c0022965:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002296a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0022971:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0022976:	6a 00                	push   0x0
c0022978:	6a 3f                	push   0x3f
c002297a:	57                   	push   edi
c002297b:	56                   	push   esi
c002297c:	e8 fb 22 00 00       	call   c0024c7c <__udivdi3>
c0022981:	83 c4 10             	add    esp,0x10
c0022984:	89 c6                	mov    esi,eax
c0022986:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002298b:	83 e6 0f             	and    esi,0xf
c002298e:	eb 07                	jmp    c0022997 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0022990:	31 f6                	xor    esi,esi
c0022992:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0022997:	bf 01 00 00 00       	mov    edi,0x1
c002299c:	50                   	push   eax
c002299d:	6a 00                	push   0x0
c002299f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00229a6:	50                   	push   eax
c00229a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229ab:	e8 82 f0 ff ff       	call   c0021a32 <IDE::enableIRQs(unsigned char, bool)>
c00229b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00229b3:	e8 98 fe ff ff       	call   c0022850 <ATA::readyForCommand()>
c00229b8:	83 c4 10             	add    esp,0x10
c00229bb:	84 c0                	test   al,al
c00229bd:	0f 84 50 02 00 00    	je     c0022c13 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c00229c3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00229c9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00229cf:	c1 e0 04             	shl    eax,0x4
c00229d2:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00229d9:	09 c6                	or     esi,eax
c00229db:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00229e0:	75 05                	jne    c00229e7 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00229e2:	83 ce a0             	or     esi,0xffffffa0
c00229e5:	eb 03                	jmp    c00229ea <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00229e7:	83 ce e0             	or     esi,0xffffffe0
c00229ea:	89 f0                	mov    eax,esi
c00229ec:	0f b6 f0             	movzx  esi,al
c00229ef:	56                   	push   esi
c00229f0:	6a 06                	push   0x6
c00229f2:	51                   	push   ecx
c00229f3:	52                   	push   edx
c00229f4:	e8 2d ee ff ff       	call   c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00229f9:	83 c4 10             	add    esp,0x10
c00229fc:	6a 00                	push   0x0
c00229fe:	6a 01                	push   0x1
c0022a00:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022a07:	50                   	push   eax
c0022a08:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022a0e:	e8 13 ee ff ff       	call   c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022a13:	83 c4 10             	add    esp,0x10
c0022a16:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0022a1b:	75 6e                	jne    c0022a8b <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0022a1d:	6a 00                	push   0x0
c0022a1f:	6a 08                	push   0x8
c0022a21:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022a28:	50                   	push   eax
c0022a29:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022a2f:	e8 f2 ed ff ff       	call   c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022a34:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0022a39:	50                   	push   eax
c0022a3a:	6a 09                	push   0x9
c0022a3c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022a43:	50                   	push   eax
c0022a44:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022a4a:	e8 d7 ed ff ff       	call   c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022a4f:	83 c4 20             	add    esp,0x20
c0022a52:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0022a57:	50                   	push   eax
c0022a58:	6a 0a                	push   0xa
c0022a5a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022a61:	50                   	push   eax
c0022a62:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022a68:	e8 b9 ed ff ff       	call   c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022a6d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0022a72:	50                   	push   eax
c0022a73:	6a 0b                	push   0xb
c0022a75:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022a7c:	50                   	push   eax
c0022a7d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022a83:	e8 9e ed ff ff       	call   c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022a88:	83 c4 20             	add    esp,0x20
c0022a8b:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0022a90:	50                   	push   eax
c0022a91:	6a 02                	push   0x2
c0022a93:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022a9a:	50                   	push   eax
c0022a9b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022aa1:	e8 80 ed ff ff       	call   c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022aa6:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0022aab:	50                   	push   eax
c0022aac:	6a 03                	push   0x3
c0022aae:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022ab5:	50                   	push   eax
c0022ab6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022abc:	e8 65 ed ff ff       	call   c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022ac1:	83 c4 20             	add    esp,0x20
c0022ac4:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0022ac9:	50                   	push   eax
c0022aca:	6a 04                	push   0x4
c0022acc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022ad3:	50                   	push   eax
c0022ad4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022ada:	e8 47 ed ff ff       	call   c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022adf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ae4:	50                   	push   eax
c0022ae5:	6a 05                	push   0x5
c0022ae7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022aee:	50                   	push   eax
c0022aef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022af5:	e8 2c ed ff ff       	call   c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022afa:	83 c4 20             	add    esp,0x20
c0022afd:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0022b02:	0f 94 c0             	sete   al
c0022b05:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0022b0a:	74 09                	je     c0022b15 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0022b0c:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0022b13:	eb 07                	jmp    c0022b1c <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0022b15:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0022b1c:	0f b6 c0             	movzx  eax,al
c0022b1f:	50                   	push   eax
c0022b20:	6a 07                	push   0x7
c0022b22:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022b29:	50                   	push   eax
c0022b2a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022b30:	e8 f1 ec ff ff       	call   c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022b35:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0022b39:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0022b3d:	83 c4 10             	add    esp,0x10
c0022b40:	85 f6                	test   esi,esi
c0022b42:	0f 84 ac 00 00 00    	je     c0022bf4 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c0022b48:	50                   	push   eax
c0022b49:	6a 01                	push   0x1
c0022b4b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022b52:	50                   	push   eax
c0022b53:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022b59:	e8 74 f8 ff ff       	call   c00223d2 <IDE::polling(unsigned char, unsigned int)>
c0022b5e:	83 c4 10             	add    esp,0x10
c0022b61:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0022b67:	84 c0                	test   al,al
c0022b69:	74 20                	je     c0022b8b <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c0022b6b:	0f b6 f8             	movzx  edi,al
c0022b6e:	0f b6 d2             	movzx  edx,dl
c0022b71:	57                   	push   edi
c0022b72:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0022b79:	50                   	push   eax
c0022b7a:	52                   	push   edx
c0022b7b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022b81:	e8 b6 f6 ff ff       	call   c002223c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0022b86:	e9 85 00 00 00       	jmp    c0022c10 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c0022b8b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0022b90:	74 41                	je     c0022bd3 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c0022b92:	31 c9                	xor    ecx,ecx
c0022b94:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c0022b98:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022b9c:	50                   	push   eax
c0022b9d:	50                   	push   eax
c0022b9e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022ba5:	50                   	push   eax
c0022ba6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022bac:	e8 63 ec ff ff       	call   c0021814 <IDE::getBase(unsigned char)>
c0022bb1:	89 c2                	mov    edx,eax
c0022bb3:	89 e8                	mov    eax,ebp
c0022bb5:	66 ef                	out    dx,ax
c0022bb7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022bbb:	83 c4 10             	add    esp,0x10
c0022bbe:	41                   	inc    ecx
c0022bbf:	81 f9 00 01 00 00    	cmp    ecx,0x100
c0022bc5:	75 cd                	jne    c0022b94 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c0022bc7:	4e                   	dec    esi
c0022bc8:	81 c7 00 02 00 00    	add    edi,0x200
c0022bce:	e9 6d ff ff ff       	jmp    c0022b40 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c0022bd3:	0f b6 d2             	movzx  edx,dl
c0022bd6:	51                   	push   ecx
c0022bd7:	51                   	push   ecx
c0022bd8:	52                   	push   edx
c0022bd9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022bdf:	e8 30 ec ff ff       	call   c0021814 <IDE::getBase(unsigned char)>
c0022be4:	b9 00 01 00 00       	mov    ecx,0x100
c0022be9:	89 c2                	mov    edx,eax
c0022beb:	fc                   	cld    
c0022bec:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0022bef:	83 c4 10             	add    esp,0x10
c0022bf2:	eb d3                	jmp    c0022bc7 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c0022bf4:	31 ff                	xor    edi,edi
c0022bf6:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0022bfb:	74 16                	je     c0022c13 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0022bfd:	50                   	push   eax
c0022bfe:	50                   	push   eax
c0022bff:	31 c0                	xor    eax,eax
c0022c01:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0022c06:	0f 94 c0             	sete   al
c0022c09:	50                   	push   eax
c0022c0a:	53                   	push   ebx
c0022c0b:	e8 f6 fb ff ff       	call   c0022806 <ATA::flush(bool)>
c0022c10:	83 c4 10             	add    esp,0x10
c0022c13:	83 c4 2c             	add    esp,0x2c
c0022c16:	89 f8                	mov    eax,edi
c0022c18:	5b                   	pop    ebx
c0022c19:	5e                   	pop    esi
c0022c1a:	5f                   	pop    edi
c0022c1b:	5d                   	pop    ebp
c0022c1c:	c3                   	ret    
c0022c1d:	90                   	nop

c0022c1e <ATA::read(unsigned long long, int, void*)>:
c0022c1e:	57                   	push   edi
c0022c1f:	b8 04 00 00 00       	mov    eax,0x4
c0022c24:	56                   	push   esi
c0022c25:	53                   	push   ebx
c0022c26:	83 ec 10             	sub    esp,0x10
c0022c29:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0022c2d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022c31:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0022c34:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022c38:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022c3c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0022c42:	77 3b                	ja     c0022c7f <ATA::read(unsigned long long, int, void*)+0x61>
c0022c44:	b8 06 00 00 00       	mov    eax,0x6
c0022c49:	85 d2                	test   edx,edx
c0022c4b:	74 32                	je     c0022c7f <ATA::read(unsigned long long, int, void*)+0x61>
c0022c4d:	50                   	push   eax
c0022c4e:	50                   	push   eax
c0022c4f:	6a 00                	push   0x0
c0022c51:	52                   	push   edx
c0022c52:	53                   	push   ebx
c0022c53:	57                   	push   edi
c0022c54:	56                   	push   esi
c0022c55:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022c59:	e8 42 fc ff ff       	call   c00228a0 <ATA::access(unsigned long long, int, void*, bool)>
c0022c5e:	83 c4 20             	add    esp,0x20
c0022c61:	85 c0                	test   eax,eax
c0022c63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022c67:	75 11                	jne    c0022c7a <ATA::read(unsigned long long, int, void*)+0x5c>
c0022c69:	01 1d 48 e5 02 c0    	add    DWORD PTR ds:0xc002e548,ebx
c0022c6f:	e8 96 d8 fe ff       	call   c001050a <VgaText::updateDiskUsage()>
c0022c74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022c78:	eb 05                	jmp    c0022c7f <ATA::read(unsigned long long, int, void*)+0x61>
c0022c7a:	b8 01 00 00 00       	mov    eax,0x1
c0022c7f:	83 c4 10             	add    esp,0x10
c0022c82:	5b                   	pop    ebx
c0022c83:	5e                   	pop    esi
c0022c84:	5f                   	pop    edi
c0022c85:	c3                   	ret    

c0022c86 <ATA::write(unsigned long long, int, void*)>:
c0022c86:	57                   	push   edi
c0022c87:	b8 04 00 00 00       	mov    eax,0x4
c0022c8c:	56                   	push   esi
c0022c8d:	53                   	push   ebx
c0022c8e:	83 ec 10             	sub    esp,0x10
c0022c91:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0022c95:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022c99:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0022c9c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022ca0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022ca4:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0022caa:	77 3b                	ja     c0022ce7 <ATA::write(unsigned long long, int, void*)+0x61>
c0022cac:	b8 06 00 00 00       	mov    eax,0x6
c0022cb1:	85 d2                	test   edx,edx
c0022cb3:	74 32                	je     c0022ce7 <ATA::write(unsigned long long, int, void*)+0x61>
c0022cb5:	50                   	push   eax
c0022cb6:	50                   	push   eax
c0022cb7:	6a 01                	push   0x1
c0022cb9:	52                   	push   edx
c0022cba:	53                   	push   ebx
c0022cbb:	57                   	push   edi
c0022cbc:	56                   	push   esi
c0022cbd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022cc1:	e8 da fb ff ff       	call   c00228a0 <ATA::access(unsigned long long, int, void*, bool)>
c0022cc6:	83 c4 20             	add    esp,0x20
c0022cc9:	85 c0                	test   eax,eax
c0022ccb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022ccf:	75 11                	jne    c0022ce2 <ATA::write(unsigned long long, int, void*)+0x5c>
c0022cd1:	01 1d 44 e5 02 c0    	add    DWORD PTR ds:0xc002e544,ebx
c0022cd7:	e8 2e d8 fe ff       	call   c001050a <VgaText::updateDiskUsage()>
c0022cdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022ce0:	eb 05                	jmp    c0022ce7 <ATA::write(unsigned long long, int, void*)+0x61>
c0022ce2:	b8 01 00 00 00       	mov    eax,0x1
c0022ce7:	83 c4 10             	add    esp,0x10
c0022cea:	5b                   	pop    ebx
c0022ceb:	5e                   	pop    esi
c0022cec:	5f                   	pop    edi
c0022ced:	c3                   	ret    

c0022cee <ATA::detectCHS()>:
c0022cee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022cf2:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0022cf8:	c1 e0 06             	shl    eax,0x6
c0022cfb:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0022d01:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0022d0b:	c7 44 24 04 20 ac 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ac20
c0022d13:	e9 64 68 ff ff       	jmp    c001957c <Krnl::panic(char const*)>

c0022d18 <ATA::open(int, int, void*)>:
c0022d18:	53                   	push   ebx
c0022d19:	83 ec 08             	sub    esp,0x8
c0022d1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022d20:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022d24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022d28:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0022d2e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0022d34:	c1 e0 06             	shl    eax,0x6
c0022d37:	01 d0                	add    eax,edx
c0022d39:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0022d40:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0022d46:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0022d4d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0022d57:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0022d5d:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0022d64:	75 0c                	jne    c0022d72 <ATA::open(int, int, void*)+0x5a>
c0022d66:	83 ec 0c             	sub    esp,0xc
c0022d69:	53                   	push   ebx
c0022d6a:	e8 7f ff ff ff       	call   c0022cee <ATA::detectCHS()>
c0022d6f:	83 c4 10             	add    esp,0x10
c0022d72:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0022d78:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0022d7e:	c1 e0 06             	shl    eax,0x6
c0022d81:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0022d88:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0022d92:	d1 e8                	shr    eax,1
c0022d94:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0022d9a:	6a 04                	push   0x4
c0022d9c:	6a 0c                	push   0xc
c0022d9e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022da5:	50                   	push   eax
c0022da6:	52                   	push   edx
c0022da7:	e8 7a ea ff ff       	call   c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022dac:	90                   	nop
c0022dad:	90                   	nop
c0022dae:	6a 00                	push   0x0
c0022db0:	6a 0c                	push   0xc
c0022db2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022db9:	50                   	push   eax
c0022dba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022dc0:	e8 61 ea ff ff       	call   c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022dc5:	83 c4 14             	add    esp,0x14
c0022dc8:	53                   	push   ebx
c0022dc9:	e8 3a 11 ff ff       	call   c0013f08 <PhysicalDisk::startCache()>
c0022dce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022dd1:	e8 5c 31 ff ff       	call   c0015f32 <createPartitionsForDisk(PhysicalDisk*)>
c0022dd6:	31 c0                	xor    eax,eax
c0022dd8:	83 c4 18             	add    esp,0x18
c0022ddb:	5b                   	pop    ebx
c0022ddc:	c3                   	ret    
c0022ddd:	90                   	nop

c0022dde <ATAPI::write(unsigned long long, int, void*)>:
c0022dde:	b8 03 00 00 00       	mov    eax,0x3
c0022de3:	c3                   	ret    

c0022de4 <ATAPI::close(int, int, void*)>:
c0022de4:	83 ec 0c             	sub    esp,0xc
c0022de7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022deb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022df1:	85 c0                	test   eax,eax
c0022df3:	74 0c                	je     c0022e01 <ATAPI::close(int, int, void*)+0x1d>
c0022df5:	83 ec 0c             	sub    esp,0xc
c0022df8:	8b 10                	mov    edx,DWORD PTR [eax]
c0022dfa:	50                   	push   eax
c0022dfb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0022dfe:	83 c4 10             	add    esp,0x10
c0022e01:	31 c0                	xor    eax,eax
c0022e03:	83 c4 0c             	add    esp,0xc
c0022e06:	c3                   	ret    
c0022e07:	90                   	nop

c0022e08 <ATAPI::ATAPI()>:
c0022e08:	83 ec 0c             	sub    esp,0xc
c0022e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e0f:	83 ec 04             	sub    esp,0x4
c0022e12:	68 00 08 00 00       	push   0x800
c0022e17:	68 68 ac 02 c0       	push   0xc002ac68
c0022e1c:	50                   	push   eax
c0022e1d:	e8 7e 10 ff ff       	call   c0013ea0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0022e22:	83 c4 10             	add    esp,0x10
c0022e25:	ba a8 ac 02 c0       	mov    edx,0xc002aca8
c0022e2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e2e:	89 10                	mov    DWORD PTR [eax],edx
c0022e30:	90                   	nop
c0022e31:	83 c4 0c             	add    esp,0xc
c0022e34:	c3                   	ret    
c0022e35:	90                   	nop

c0022e36 <ATAPI::readyForCommand()>:
c0022e36:	56                   	push   esi
c0022e37:	53                   	push   ebx
c0022e38:	31 db                	xor    ebx,ebx
c0022e3a:	50                   	push   eax
c0022e3b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022e3f:	50                   	push   eax
c0022e40:	6a 0c                	push   0xc
c0022e42:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0022e49:	50                   	push   eax
c0022e4a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0022e50:	e8 91 ea ff ff       	call   c00218e6 <IDE::read(unsigned char, unsigned char)>
c0022e55:	83 c4 10             	add    esp,0x10
c0022e58:	a8 88                	test   al,0x88
c0022e5a:	74 23                	je     c0022e7f <ATAPI::readyForCommand()+0x49>
c0022e5c:	43                   	inc    ebx
c0022e5d:	83 fb 63             	cmp    ebx,0x63
c0022e60:	7e dd                	jle    c0022e3f <ATAPI::readyForCommand()+0x9>
c0022e62:	51                   	push   ecx
c0022e63:	51                   	push   ecx
c0022e64:	6a 00                	push   0x0
c0022e66:	68 40 42 0f 00       	push   0xf4240
c0022e6b:	e8 da 9c ff ff       	call   c001cb4a <nanoSleep(unsigned long long)>
c0022e70:	83 c4 10             	add    esp,0x10
c0022e73:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0022e79:	75 c4                	jne    c0022e3f <ATAPI::readyForCommand()+0x9>
c0022e7b:	31 c0                	xor    eax,eax
c0022e7d:	eb 02                	jmp    c0022e81 <ATAPI::readyForCommand()+0x4b>
c0022e7f:	b0 01                	mov    al,0x1
c0022e81:	5a                   	pop    edx
c0022e82:	5b                   	pop    ebx
c0022e83:	5e                   	pop    esi
c0022e84:	c3                   	ret    
c0022e85:	90                   	nop

c0022e86 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0022e86:	55                   	push   ebp
c0022e87:	57                   	push   edi
c0022e88:	56                   	push   esi
c0022e89:	53                   	push   ebx
c0022e8a:	83 ec 20             	sub    esp,0x20
c0022e8d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022e91:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0022e95:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0022e99:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022e9d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0022ea1:	6a 01                	push   0x1
c0022ea3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022eaa:	50                   	push   eax
c0022eab:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022eb1:	e8 7c eb ff ff       	call   c0021a32 <IDE::enableIRQs(unsigned char, bool)>
c0022eb6:	5e                   	pop    esi
c0022eb7:	58                   	pop    eax
c0022eb8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022ebf:	50                   	push   eax
c0022ec0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022ec6:	e8 35 e9 ff ff       	call   c0021800 <IDE::prepareInterrupt(unsigned char)>
c0022ecb:	89 3c 24             	mov    DWORD PTR [esp],edi
c0022ece:	e8 63 ff ff ff       	call   c0022e36 <ATAPI::readyForCommand()>
c0022ed3:	83 c4 10             	add    esp,0x10
c0022ed6:	84 c0                	test   al,al
c0022ed8:	75 0a                	jne    c0022ee4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0022eda:	bb 01 00 00 00       	mov    ebx,0x1
c0022edf:	e9 57 02 00 00       	jmp    c002313b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0022ee4:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0022eea:	c1 e0 04             	shl    eax,0x4
c0022eed:	0f b6 c0             	movzx  eax,al
c0022ef0:	50                   	push   eax
c0022ef1:	6a 06                	push   0x6
c0022ef3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022efa:	50                   	push   eax
c0022efb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022f01:	e8 20 e9 ff ff       	call   c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f06:	6a 00                	push   0x0
c0022f08:	6a 01                	push   0x1
c0022f0a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022f11:	50                   	push   eax
c0022f12:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022f18:	e8 09 e9 ff ff       	call   c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f1d:	83 c4 20             	add    esp,0x20
c0022f20:	0f b6 c3             	movzx  eax,bl
c0022f23:	0f b6 df             	movzx  ebx,bh
c0022f26:	50                   	push   eax
c0022f27:	6a 04                	push   0x4
c0022f29:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022f30:	50                   	push   eax
c0022f31:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022f37:	e8 ea e8 ff ff       	call   c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f3c:	53                   	push   ebx
c0022f3d:	6a 05                	push   0x5
c0022f3f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022f46:	50                   	push   eax
c0022f47:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022f4d:	e8 d4 e8 ff ff       	call   c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f52:	83 c4 20             	add    esp,0x20
c0022f55:	68 a0 00 00 00       	push   0xa0
c0022f5a:	6a 07                	push   0x7
c0022f5c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022f63:	50                   	push   eax
c0022f64:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022f6a:	e8 b7 e8 ff ff       	call   c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f6f:	83 c4 0c             	add    esp,0xc
c0022f72:	6a 01                	push   0x1
c0022f74:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022f7b:	50                   	push   eax
c0022f7c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022f82:	e8 4b f4 ff ff       	call   c00223d2 <IDE::polling(unsigned char, unsigned int)>
c0022f87:	83 c4 10             	add    esp,0x10
c0022f8a:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0022f90:	84 c0                	test   al,al
c0022f92:	74 23                	je     c0022fb7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0022f94:	0f b6 d8             	movzx  ebx,al
c0022f97:	0f b6 d2             	movzx  edx,dl
c0022f9a:	53                   	push   ebx
c0022f9b:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0022fa2:	50                   	push   eax
c0022fa3:	52                   	push   edx
c0022fa4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022faa:	e8 8d f2 ff ff       	call   c002223c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0022faf:	83 c4 10             	add    esp,0x10
c0022fb2:	e9 84 01 00 00       	jmp    c002313b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0022fb7:	0f b6 d2             	movzx  edx,dl
c0022fba:	53                   	push   ebx
c0022fbb:	53                   	push   ebx
c0022fbc:	52                   	push   edx
c0022fbd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022fc3:	e8 4c e8 ff ff       	call   c0021814 <IDE::getBase(unsigned char)>
c0022fc8:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0022fcc:	b9 06 00 00 00       	mov    ecx,0x6
c0022fd1:	89 c2                	mov    edx,eax
c0022fd3:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0022fd6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0022fda:	83 c4 10             	add    esp,0x10
c0022fdd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0022fe3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0022fea:	85 db                	test   ebx,ebx
c0022fec:	0f 84 ec 00 00 00    	je     c00230de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0022ff2:	51                   	push   ecx
c0022ff3:	51                   	push   ecx
c0022ff4:	52                   	push   edx
c0022ff5:	50                   	push   eax
c0022ff6:	e8 99 e9 ff ff       	call   c0021994 <IDE::waitInterrupt(unsigned char)>
c0022ffb:	83 c4 10             	add    esp,0x10
c0022ffe:	84 c0                	test   al,al
c0023000:	0f 84 d4 fe ff ff    	je     c0022eda <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023006:	56                   	push   esi
c0023007:	56                   	push   esi
c0023008:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002300f:	50                   	push   eax
c0023010:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023016:	e8 e5 e7 ff ff       	call   c0021800 <IDE::prepareInterrupt(unsigned char)>
c002301b:	83 c4 0c             	add    esp,0xc
c002301e:	6a 04                	push   0x4
c0023020:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023027:	50                   	push   eax
c0023028:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002302e:	e8 b3 e8 ff ff       	call   c00218e6 <IDE::read(unsigned char, unsigned char)>
c0023033:	83 c4 0c             	add    esp,0xc
c0023036:	89 c6                	mov    esi,eax
c0023038:	6a 05                	push   0x5
c002303a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023041:	50                   	push   eax
c0023042:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023048:	e8 99 e8 ff ff       	call   c00218e6 <IDE::read(unsigned char, unsigned char)>
c002304d:	89 f1                	mov    ecx,esi
c002304f:	0f b6 c0             	movzx  eax,al
c0023052:	0f b6 f1             	movzx  esi,cl
c0023055:	c1 e0 08             	shl    eax,0x8
c0023058:	09 c6                	or     esi,eax
c002305a:	d1 fe                	sar    esi,1
c002305c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0023060:	83 c4 10             	add    esp,0x10
c0023063:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0023068:	74 41                	je     c00230ab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002306a:	31 c9                	xor    ecx,ecx
c002306c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023072:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023079:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002307d:	75 0a                	jne    c0023089 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002307f:	01 c9                	add    ecx,ecx
c0023081:	01 cd                	add    ebp,ecx
c0023083:	4b                   	dec    ebx
c0023084:	e9 54 ff ff ff       	jmp    c0022fdd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0023089:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002308e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023092:	51                   	push   ecx
c0023093:	51                   	push   ecx
c0023094:	52                   	push   edx
c0023095:	50                   	push   eax
c0023096:	e8 79 e7 ff ff       	call   c0021814 <IDE::getBase(unsigned char)>
c002309b:	89 c2                	mov    edx,eax
c002309d:	89 f0                	mov    eax,esi
c002309f:	66 ef                	out    dx,ax
c00230a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00230a5:	83 c4 10             	add    esp,0x10
c00230a8:	41                   	inc    ecx
c00230a9:	eb c1                	jmp    c002306c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00230ab:	31 f6                	xor    esi,esi
c00230ad:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00230b3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00230ba:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00230be:	75 06                	jne    c00230c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00230c0:	01 f6                	add    esi,esi
c00230c2:	01 f5                	add    ebp,esi
c00230c4:	eb bd                	jmp    c0023083 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00230c6:	51                   	push   ecx
c00230c7:	51                   	push   ecx
c00230c8:	52                   	push   edx
c00230c9:	50                   	push   eax
c00230ca:	e8 45 e7 ff ff       	call   c0021814 <IDE::getBase(unsigned char)>
c00230cf:	89 c2                	mov    edx,eax
c00230d1:	66 ed                	in     ax,dx
c00230d3:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00230d8:	83 c4 10             	add    esp,0x10
c00230db:	46                   	inc    esi
c00230dc:	eb cf                	jmp    c00230ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00230de:	51                   	push   ecx
c00230df:	51                   	push   ecx
c00230e0:	52                   	push   edx
c00230e1:	50                   	push   eax
c00230e2:	e8 ad e8 ff ff       	call   c0021994 <IDE::waitInterrupt(unsigned char)>
c00230e7:	83 c4 10             	add    esp,0x10
c00230ea:	84 c0                	test   al,al
c00230ec:	0f 84 e8 fd ff ff    	je     c0022eda <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00230f2:	bb a0 86 01 00       	mov    ebx,0x186a0
c00230f7:	52                   	push   edx
c00230f8:	52                   	push   edx
c00230f9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023100:	50                   	push   eax
c0023101:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023107:	e8 f4 e6 ff ff       	call   c0021800 <IDE::prepareInterrupt(unsigned char)>
c002310c:	83 c4 10             	add    esp,0x10
c002310f:	50                   	push   eax
c0023110:	50                   	push   eax
c0023111:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023118:	50                   	push   eax
c0023119:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002311f:	e8 f0 e6 ff ff       	call   c0021814 <IDE::getBase(unsigned char)>
c0023124:	8d 50 07             	lea    edx,[eax+0x7]
c0023127:	ec                   	in     al,dx
c0023128:	83 c4 10             	add    esp,0x10
c002312b:	a8 88                	test   al,0x88
c002312d:	74 0a                	je     c0023139 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002312f:	4b                   	dec    ebx
c0023130:	75 dd                	jne    c002310f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0023132:	bb 02 00 00 00       	mov    ebx,0x2
c0023137:	eb 02                	jmp    c002313b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023139:	31 db                	xor    ebx,ebx
c002313b:	83 c4 1c             	add    esp,0x1c
c002313e:	89 d8                	mov    eax,ebx
c0023140:	5b                   	pop    ebx
c0023141:	5e                   	pop    esi
c0023142:	5f                   	pop    edi
c0023143:	5d                   	pop    ebp
c0023144:	c3                   	ret    
c0023145:	90                   	nop

c0023146 <ATAPI::diskRemoved()>:
c0023146:	83 ec 18             	sub    esp,0x18
c0023149:	68 73 ac 02 c0       	push   0xc002ac73
c002314e:	e8 4e f5 fe ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0023153:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023157:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c002315e:	83 c4 1c             	add    esp,0x1c
c0023161:	c3                   	ret    

c0023162 <ATAPI::eject()>:
c0023162:	57                   	push   edi
c0023163:	b9 03 00 00 00       	mov    ecx,0x3
c0023168:	53                   	push   ebx
c0023169:	83 ec 14             	sub    esp,0x14
c002316c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0023170:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023174:	fc                   	cld    
c0023175:	31 c0                	xor    eax,eax
c0023177:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023179:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002317e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0023183:	50                   	push   eax
c0023184:	50                   	push   eax
c0023185:	6a 00                	push   0x0
c0023187:	6a 00                	push   0x0
c0023189:	6a 00                	push   0x0
c002318b:	6a 02                	push   0x2
c002318d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023191:	50                   	push   eax
c0023192:	53                   	push   ebx
c0023193:	e8 ee fc ff ff       	call   c0022e86 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023198:	83 c4 14             	add    esp,0x14
c002319b:	53                   	push   ebx
c002319c:	e8 a5 ff ff ff       	call   c0023146 <ATAPI::diskRemoved()>
c00231a1:	83 c4 24             	add    esp,0x24
c00231a4:	5b                   	pop    ebx
c00231a5:	5f                   	pop    edi
c00231a6:	c3                   	ret    
c00231a7:	90                   	nop

c00231a8 <ATAPI::diskInserted()>:
c00231a8:	53                   	push   ebx
c00231a9:	83 ec 14             	sub    esp,0x14
c00231ac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00231b0:	68 89 ac 02 c0       	push   0xc002ac89
c00231b5:	e8 e7 f4 fe ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00231ba:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00231c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00231c4:	e8 3f 0d ff ff       	call   c0013f08 <PhysicalDisk::startCache()>
c00231c9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00231cd:	83 c4 18             	add    esp,0x18
c00231d0:	5b                   	pop    ebx
c00231d1:	e9 5c 2d ff ff       	jmp    c0015f32 <createPartitionsForDisk(PhysicalDisk*)>

c00231d6 <ATAPI::detectMedia()>:
c00231d6:	56                   	push   esi
c00231d7:	53                   	push   ebx
c00231d8:	83 ec 28             	sub    esp,0x28
c00231db:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00231df:	6a 0c                	push   0xc
c00231e1:	6a 00                	push   0x0
c00231e3:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00231e7:	56                   	push   esi
c00231e8:	e8 9e d4 fd ff       	call   c000068b <memset>
c00231ed:	58                   	pop    eax
c00231ee:	5a                   	pop    edx
c00231ef:	6a 00                	push   0x0
c00231f1:	6a 00                	push   0x0
c00231f3:	6a 00                	push   0x0
c00231f5:	6a 00                	push   0x0
c00231f7:	56                   	push   esi
c00231f8:	53                   	push   ebx
c00231f9:	e8 88 fc ff ff       	call   c0022e86 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00231fe:	83 c4 1c             	add    esp,0x1c
c0023201:	6a 0c                	push   0xc
c0023203:	6a 00                	push   0x0
c0023205:	56                   	push   esi
c0023206:	e8 80 d4 fd ff       	call   c000068b <memset>
c002320b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0023210:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0023215:	59                   	pop    ecx
c0023216:	58                   	pop    eax
c0023217:	6a 01                	push   0x1
c0023219:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002321d:	50                   	push   eax
c002321e:	6a 00                	push   0x0
c0023220:	6a 12                	push   0x12
c0023222:	56                   	push   esi
c0023223:	53                   	push   ebx
c0023224:	e8 5d fc ff ff       	call   c0022e86 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023229:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002322d:	83 c4 20             	add    esp,0x20
c0023230:	83 e0 7f             	and    eax,0x7f
c0023233:	3c 70                	cmp    al,0x70
c0023235:	74 15                	je     c002324c <ATAPI::detectMedia()+0x76>
c0023237:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002323e:	75 0c                	jne    c002324c <ATAPI::detectMedia()+0x76>
c0023240:	83 ec 0c             	sub    esp,0xc
c0023243:	53                   	push   ebx
c0023244:	e8 5f ff ff ff       	call   c00231a8 <ATAPI::diskInserted()>
c0023249:	83 c4 10             	add    esp,0x10
c002324c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023250:	83 e0 0f             	and    eax,0xf
c0023253:	3c 02                	cmp    al,0x2
c0023255:	75 1b                	jne    c0023272 <ATAPI::detectMedia()+0x9c>
c0023257:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002325c:	75 2d                	jne    c002328b <ATAPI::detectMedia()+0xb5>
c002325e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023265:	74 24                	je     c002328b <ATAPI::detectMedia()+0xb5>
c0023267:	83 ec 0c             	sub    esp,0xc
c002326a:	53                   	push   ebx
c002326b:	e8 d6 fe ff ff       	call   c0023146 <ATAPI::diskRemoved()>
c0023270:	eb 16                	jmp    c0023288 <ATAPI::detectMedia()+0xb2>
c0023272:	84 c0                	test   al,al
c0023274:	75 15                	jne    c002328b <ATAPI::detectMedia()+0xb5>
c0023276:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002327d:	75 0c                	jne    c002328b <ATAPI::detectMedia()+0xb5>
c002327f:	83 ec 0c             	sub    esp,0xc
c0023282:	53                   	push   ebx
c0023283:	e8 20 ff ff ff       	call   c00231a8 <ATAPI::diskInserted()>
c0023288:	83 c4 10             	add    esp,0x10
c002328b:	83 c4 24             	add    esp,0x24
c002328e:	5b                   	pop    ebx
c002328f:	5e                   	pop    esi
c0023290:	c3                   	ret    
c0023291:	90                   	nop

c0023292 <ATAPI::open(int, int, void*)>:
c0023292:	53                   	push   ebx
c0023293:	83 ec 08             	sub    esp,0x8
c0023296:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002329a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002329e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00232a2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00232a8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00232ae:	c1 e0 06             	shl    eax,0x6
c00232b1:	01 d0                	add    eax,edx
c00232b3:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00232ba:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00232c0:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00232c7:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00232d1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00232d7:	6a 04                	push   0x4
c00232d9:	6a 0c                	push   0xc
c00232db:	51                   	push   ecx
c00232dc:	52                   	push   edx
c00232dd:	e8 44 e5 ff ff       	call   c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00232e2:	90                   	nop
c00232e3:	90                   	nop
c00232e4:	6a 00                	push   0x0
c00232e6:	6a 0c                	push   0xc
c00232e8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00232ef:	50                   	push   eax
c00232f0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00232f6:	e8 2b e5 ff ff       	call   c0021826 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00232fb:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0023302:	83 c4 14             	add    esp,0x14
c0023305:	53                   	push   ebx
c0023306:	e8 cb fe ff ff       	call   c00231d6 <ATAPI::detectMedia()>
c002330b:	31 c0                	xor    eax,eax
c002330d:	83 c4 18             	add    esp,0x18
c0023310:	5b                   	pop    ebx
c0023311:	c3                   	ret    

c0023312 <ATAPI::read(unsigned long long, int, void*)>:
c0023312:	55                   	push   ebp
c0023313:	57                   	push   edi
c0023314:	56                   	push   esi
c0023315:	53                   	push   ebx
c0023316:	83 ec 1c             	sub    esp,0x1c
c0023319:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002331d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023321:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0023325:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002332c:	74 41                	je     c002336f <ATAPI::read(unsigned long long, int, void*)+0x5d>
c002332e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023332:	b9 03 00 00 00       	mov    ecx,0x3
c0023337:	fc                   	cld    
c0023338:	31 c0                	xor    eax,eax
c002333a:	86 fb                	xchg   bl,bh
c002333c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002333e:	c1 c3 10             	rol    ebx,0x10
c0023341:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0023346:	89 e8                	mov    eax,ebp
c0023348:	86 fb                	xchg   bl,bh
c002334a:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002334e:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0023352:	50                   	push   eax
c0023353:	50                   	push   eax
c0023354:	55                   	push   ebp
c0023355:	c1 e5 0b             	shl    ebp,0xb
c0023358:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002335c:	6a 00                	push   0x0
c002335e:	55                   	push   ebp
c002335f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023363:	50                   	push   eax
c0023364:	56                   	push   esi
c0023365:	e8 1c fb ff ff       	call   c0022e86 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002336a:	83 c4 20             	add    esp,0x20
c002336d:	eb 1a                	jmp    c0023389 <ATAPI::read(unsigned long long, int, void*)+0x77>
c002336f:	83 ec 0c             	sub    esp,0xc
c0023372:	56                   	push   esi
c0023373:	e8 5e fe ff ff       	call   c00231d6 <ATAPI::detectMedia()>
c0023378:	83 c4 10             	add    esp,0x10
c002337b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023382:	75 aa                	jne    c002332e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0023384:	b8 02 00 00 00       	mov    eax,0x2
c0023389:	83 c4 1c             	add    esp,0x1c
c002338c:	5b                   	pop    ebx
c002338d:	5e                   	pop    esi
c002338e:	5f                   	pop    edi
c002338f:	5d                   	pop    ebp
c0023390:	c3                   	ret    
c0023391:	90                   	nop

c0023392 <SATA::close(int, int, void*)>:
c0023392:	83 ec 0c             	sub    esp,0xc
c0023395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023399:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002339f:	85 c0                	test   eax,eax
c00233a1:	74 0c                	je     c00233af <SATA::close(int, int, void*)+0x1d>
c00233a3:	83 ec 0c             	sub    esp,0xc
c00233a6:	8b 10                	mov    edx,DWORD PTR [eax]
c00233a8:	50                   	push   eax
c00233a9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00233ac:	83 c4 10             	add    esp,0x10
c00233af:	31 c0                	xor    eax,eax
c00233b1:	83 c4 0c             	add    esp,0xc
c00233b4:	c3                   	ret    
c00233b5:	90                   	nop

c00233b6 <SATA::powerSaving(PowerSavingLevel)>:
c00233b6:	c3                   	ret    
c00233b7:	90                   	nop

c00233b8 <SATA::open(int, int, void*)>:
c00233b8:	53                   	push   ebx
c00233b9:	83 ec 14             	sub    esp,0x14
c00233bc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00233c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00233c4:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00233ce:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00233d4:	c7 83 60 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x160],0x0
c00233de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00233e2:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00233ec:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00233f2:	68 d4 ac 02 c0       	push   0xc002acd4
c00233f7:	e8 a5 f2 fe ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00233fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00233ff:	e8 04 0b ff ff       	call   c0013f08 <PhysicalDisk::startCache()>
c0023404:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023407:	e8 26 2b ff ff       	call   c0015f32 <createPartitionsForDisk(PhysicalDisk*)>
c002340c:	31 c0                	xor    eax,eax
c002340e:	83 c4 18             	add    esp,0x18
c0023411:	5b                   	pop    ebx
c0023412:	c3                   	ret    
c0023413:	90                   	nop

c0023414 <SATA::SATA()>:
c0023414:	83 ec 0c             	sub    esp,0xc
c0023417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002341b:	83 ec 04             	sub    esp,0x4
c002341e:	68 00 02 00 00       	push   0x200
c0023423:	68 ef ac 02 c0       	push   0xc002acef
c0023428:	50                   	push   eax
c0023429:	e8 72 0a ff ff       	call   c0013ea0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002342e:	83 c4 10             	add    esp,0x10
c0023431:	ba cc ad 02 c0       	mov    edx,0xc002adcc
c0023436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002343a:	89 10                	mov    DWORD PTR [eax],edx
c002343c:	90                   	nop
c002343d:	83 c4 0c             	add    esp,0xc
c0023440:	c3                   	ret    
c0023441:	90                   	nop

c0023442 <SATA::access(unsigned long long, int, void*, bool)>:
c0023442:	55                   	push   ebp
c0023443:	57                   	push   edi
c0023444:	56                   	push   esi
c0023445:	53                   	push   ebx
c0023446:	81 ec 2c 04 00 00    	sub    esp,0x42c
c002344c:	8b 84 24 48 04 00 00 	mov    eax,DWORD PTR [esp+0x448]
c0023453:	8b bc 24 4c 04 00 00 	mov    edi,DWORD PTR [esp+0x44c]
c002345a:	8b 9c 24 40 04 00 00 	mov    ebx,DWORD PTR [esp+0x440]
c0023461:	8b b4 24 44 04 00 00 	mov    esi,DWORD PTR [esp+0x444]
c0023468:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002346c:	83 ff 08             	cmp    edi,0x8
c002346f:	7e 10                	jle    c0023481 <SATA::access(unsigned long long, int, void*, bool)+0x3f>
c0023471:	83 ec 0c             	sub    esp,0xc
c0023474:	68 ff ac 02 c0       	push   0xc002acff
c0023479:	e8 fe 60 ff ff       	call   c001957c <Krnl::panic(char const*)>
c002347e:	83 c4 10             	add    esp,0x10
c0023481:	51                   	push   ecx
c0023482:	68 00 02 00 00       	push   0x200
c0023487:	68 ee 00 00 00       	push   0xee
c002348c:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0023490:	55                   	push   ebp
c0023491:	e8 f5 d1 fd ff       	call   c000068b <memset>
c0023496:	83 c4 0c             	add    esp,0xc
c0023499:	68 00 02 00 00       	push   0x200
c002349e:	68 ee 00 00 00       	push   0xee
c00234a3:	8d 84 24 2c 02 00 00 	lea    eax,[esp+0x22c]
c00234aa:	50                   	push   eax
c00234ab:	e8 db d1 fd ff       	call   c000068b <memset>
c00234b0:	55                   	push   ebp
c00234b1:	57                   	push   edi
c00234b2:	56                   	push   esi
c00234b3:	68 31 ad 02 c0       	push   0xc002ad31
c00234b8:	e8 e4 f1 fe ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00234bd:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00234c3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00234c9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00234cd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00234d3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00234d7:	c1 e0 07             	shl    eax,0x7
c00234da:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
c00234de:	83 c4 18             	add    esp,0x18
c00234e1:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00234eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00234ef:	8d 50 02             	lea    edx,[eax+0x2]
c00234f2:	c1 e2 07             	shl    edx,0x7
c00234f5:	03 54 24 14          	add    edx,DWORD PTR [esp+0x14]
c00234f9:	52                   	push   edx
c00234fa:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00234fe:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0023504:	e8 e1 ef ff ff       	call   c00224ea <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0023509:	89 c1                	mov    ecx,eax
c002350b:	58                   	pop    eax
c002350c:	5a                   	pop    edx
c002350d:	51                   	push   ecx
c002350e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0023512:	68 66 ad 02 c0       	push   0xc002ad66
c0023517:	e8 85 f1 fe ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c002351c:	83 c4 10             	add    esp,0x10
c002351f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023523:	83 f9 ff             	cmp    ecx,0xffffffff
c0023526:	0f 84 9a 01 00 00    	je     c00236c6 <SATA::access(unsigned long long, int, void*, bool)+0x284>
c002352c:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0023532:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023536:	8b 12                	mov    edx,DWORD PTR [edx]
c0023538:	2b 90 5c 01 00 00    	sub    edx,DWORD PTR [eax+0x15c]
c002353e:	03 90 58 01 00 00    	add    edx,DWORD PTR [eax+0x158]
c0023544:	89 c8                	mov    eax,ecx
c0023546:	c1 e0 05             	shl    eax,0x5
c0023549:	01 c2                	add    edx,eax
c002354b:	8a 02                	mov    al,BYTE PTR [edx]
c002354d:	83 e0 a0             	and    eax,0xffffffa0
c0023550:	83 c8 05             	or     eax,0x5
c0023553:	88 02                	mov    BYTE PTR [edx],al
c0023555:	8d 47 ff             	lea    eax,[edi-0x1]
c0023558:	c1 f8 04             	sar    eax,0x4
c002355b:	40                   	inc    eax
c002355c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0023560:	0f b7 c0             	movzx  eax,ax
c0023563:	8b 9b 70 01 00 00    	mov    ebx,DWORD PTR [ebx+0x170]
c0023569:	83 c0 08             	add    eax,0x8
c002356c:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0023572:	c1 e0 04             	shl    eax,0x4
c0023575:	2b 8b 5c 01 00 00    	sub    ecx,DWORD PTR [ebx+0x15c]
c002357b:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
c002357e:	01 cb                	add    ebx,ecx
c0023580:	52                   	push   edx
c0023581:	50                   	push   eax
c0023582:	6a 00                	push   0x0
c0023584:	53                   	push   ebx
c0023585:	e8 01 d1 fd ff       	call   c000068b <memset>
c002358a:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0023590:	83 c4 10             	add    esp,0x10
c0023593:	89 ab 80 00 00 00    	mov    DWORD PTR [ebx+0x80],ebp
c0023599:	25 00 00 c0 7f       	and    eax,0x7fc00000
c002359e:	8d ac 24 20 02 00 00 	lea    ebp,[esp+0x220]
c00235a5:	0d ff 01 00 80       	or     eax,0x800001ff
c00235aa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00235ae:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00235b4:	b8 01 00 00 00       	mov    eax,0x1
c00235b9:	89 c2                	mov    edx,eax
c00235bb:	c1 e2 04             	shl    edx,0x4
c00235be:	89 ac 13 80 00 00 00 	mov    DWORD PTR [ebx+edx*1+0x80],ebp
c00235c5:	8d 50 08             	lea    edx,[eax+0x8]
c00235c8:	40                   	inc    eax
c00235c9:	c1 e2 04             	shl    edx,0x4
c00235cc:	81 64 13 0c 00 00 c0 7f 	and    DWORD PTR [ebx+edx*1+0xc],0x7fc00000
c00235d4:	83 f8 10             	cmp    eax,0x10
c00235d7:	75 e0                	jne    c00235b9 <SATA::access(unsigned long long, int, void*, bool)+0x177>
c00235d9:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00235dc:	c6 43 02 25          	mov    BYTE PTR [ebx+0x2],0x25
c00235e0:	66 25 00 7f          	and    ax,0x7f00
c00235e4:	66 89 73 04          	mov    WORD PTR [ebx+0x4],si
c00235e8:	66 0d 27 80          	or     ax,0x8027
c00235ec:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00235f0:	66 89 03             	mov    WORD PTR [ebx],ax
c00235f3:	66 89 7b 0c          	mov    WORD PTR [ebx+0xc],di
c00235f7:	89 f0                	mov    eax,esi
c00235f9:	31 d2                	xor    edx,edx
c00235fb:	c1 e8 10             	shr    eax,0x10
c00235fe:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0023601:	89 f0                	mov    eax,esi
c0023603:	c1 e8 18             	shr    eax,0x18
c0023606:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0023609:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c002360d:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0023610:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023614:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0023617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002361b:	c1 e0 07             	shl    eax,0x7
c002361e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0023622:	8b 98 20 01 00 00    	mov    ebx,DWORD PTR [eax+0x120]
c0023628:	80 e3 88             	and    bl,0x88
c002362b:	74 0b                	je     c0023638 <SATA::access(unsigned long long, int, void*, bool)+0x1f6>
c002362d:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0023633:	74 0b                	je     c0023640 <SATA::access(unsigned long long, int, void*, bool)+0x1fe>
c0023635:	42                   	inc    edx
c0023636:	eb ea                	jmp    c0023622 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c0023638:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c002363e:	75 0a                	jne    c002364a <SATA::access(unsigned long long, int, void*, bool)+0x208>
c0023640:	83 ec 0c             	sub    esp,0xc
c0023643:	68 6f ad 02 c0       	push   0xc002ad6f
c0023648:	eb 60                	jmp    c00236aa <SATA::access(unsigned long long, int, void*, bool)+0x268>
c002364a:	be 01 00 00 00       	mov    esi,0x1
c002364f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023653:	d3 e6                	shl    esi,cl
c0023655:	c1 e3 07             	shl    ebx,0x7
c0023658:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c002365e:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0023662:	83 ec 0c             	sub    esp,0xc
c0023665:	68 7d ad 02 c0       	push   0xc002ad7d
c002366a:	e8 32 f0 fe ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c002366f:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c0023675:	83 c4 10             	add    esp,0x10
c0023678:	85 c6                	test   esi,eax
c002367a:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0023680:	74 1a                	je     c002369c <SATA::access(unsigned long long, int, void*, bool)+0x25a>
c0023682:	0f ba e0 1e          	bt     eax,0x1e
c0023686:	73 da                	jae    c0023662 <SATA::access(unsigned long long, int, void*, bool)+0x220>
c0023688:	83 ec 0c             	sub    esp,0xc
c002368b:	68 8a ad 02 c0       	push   0xc002ad8a
c0023690:	e8 e7 5e ff ff       	call   c001957c <Krnl::panic(char const*)>
c0023695:	83 c4 10             	add    esp,0x10
c0023698:	31 c0                	xor    eax,eax
c002369a:	eb 2f                	jmp    c00236cb <SATA::access(unsigned long long, int, void*, bool)+0x289>
c002369c:	0f ba e0 1e          	bt     eax,0x1e
c00236a0:	73 12                	jae    c00236b4 <SATA::access(unsigned long long, int, void*, bool)+0x272>
c00236a2:	83 ec 0c             	sub    esp,0xc
c00236a5:	68 8a ad 02 c0       	push   0xc002ad8a
c00236aa:	e8 cd 5e ff ff       	call   c001957c <Krnl::panic(char const*)>
c00236af:	83 c4 10             	add    esp,0x10
c00236b2:	eb 12                	jmp    c00236c6 <SATA::access(unsigned long long, int, void*, bool)+0x284>
c00236b4:	83 ec 0c             	sub    esp,0xc
c00236b7:	68 9b ad 02 c0       	push   0xc002ad9b
c00236bc:	e8 bb 5e ff ff       	call   c001957c <Krnl::panic(char const*)>
c00236c1:	83 c4 10             	add    esp,0x10
c00236c4:	eb fe                	jmp    c00236c4 <SATA::access(unsigned long long, int, void*, bool)+0x282>
c00236c6:	b8 01 00 00 00       	mov    eax,0x1
c00236cb:	81 c4 2c 04 00 00    	add    esp,0x42c
c00236d1:	5b                   	pop    ebx
c00236d2:	5e                   	pop    esi
c00236d3:	5f                   	pop    edi
c00236d4:	5d                   	pop    ebp
c00236d5:	c3                   	ret    

c00236d6 <SATA::read(unsigned long long, int, void*)>:
c00236d6:	57                   	push   edi
c00236d7:	b8 04 00 00 00       	mov    eax,0x4
c00236dc:	56                   	push   esi
c00236dd:	53                   	push   ebx
c00236de:	83 ec 10             	sub    esp,0x10
c00236e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00236e5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00236e9:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00236ec:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00236f0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00236f4:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00236fa:	77 3b                	ja     c0023737 <SATA::read(unsigned long long, int, void*)+0x61>
c00236fc:	b8 06 00 00 00       	mov    eax,0x6
c0023701:	85 d2                	test   edx,edx
c0023703:	74 32                	je     c0023737 <SATA::read(unsigned long long, int, void*)+0x61>
c0023705:	50                   	push   eax
c0023706:	50                   	push   eax
c0023707:	6a 00                	push   0x0
c0023709:	52                   	push   edx
c002370a:	53                   	push   ebx
c002370b:	57                   	push   edi
c002370c:	56                   	push   esi
c002370d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023711:	e8 2c fd ff ff       	call   c0023442 <SATA::access(unsigned long long, int, void*, bool)>
c0023716:	83 c4 20             	add    esp,0x20
c0023719:	85 c0                	test   eax,eax
c002371b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002371f:	75 11                	jne    c0023732 <SATA::read(unsigned long long, int, void*)+0x5c>
c0023721:	01 1d 48 e5 02 c0    	add    DWORD PTR ds:0xc002e548,ebx
c0023727:	e8 de cd fe ff       	call   c001050a <VgaText::updateDiskUsage()>
c002372c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023730:	eb 05                	jmp    c0023737 <SATA::read(unsigned long long, int, void*)+0x61>
c0023732:	b8 01 00 00 00       	mov    eax,0x1
c0023737:	83 c4 10             	add    esp,0x10
c002373a:	5b                   	pop    ebx
c002373b:	5e                   	pop    esi
c002373c:	5f                   	pop    edi
c002373d:	c3                   	ret    

c002373e <SATA::write(unsigned long long, int, void*)>:
c002373e:	57                   	push   edi
c002373f:	b8 04 00 00 00       	mov    eax,0x4
c0023744:	56                   	push   esi
c0023745:	53                   	push   ebx
c0023746:	83 ec 10             	sub    esp,0x10
c0023749:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002374d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023751:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023754:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023758:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002375c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023762:	77 3b                	ja     c002379f <SATA::write(unsigned long long, int, void*)+0x61>
c0023764:	b8 06 00 00 00       	mov    eax,0x6
c0023769:	85 d2                	test   edx,edx
c002376b:	74 32                	je     c002379f <SATA::write(unsigned long long, int, void*)+0x61>
c002376d:	50                   	push   eax
c002376e:	50                   	push   eax
c002376f:	6a 01                	push   0x1
c0023771:	52                   	push   edx
c0023772:	53                   	push   ebx
c0023773:	57                   	push   edi
c0023774:	56                   	push   esi
c0023775:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023779:	e8 c4 fc ff ff       	call   c0023442 <SATA::access(unsigned long long, int, void*, bool)>
c002377e:	83 c4 20             	add    esp,0x20
c0023781:	85 c0                	test   eax,eax
c0023783:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023787:	75 11                	jne    c002379a <SATA::write(unsigned long long, int, void*)+0x5c>
c0023789:	01 1d 44 e5 02 c0    	add    DWORD PTR ds:0xc002e544,ebx
c002378f:	e8 76 cd fe ff       	call   c001050a <VgaText::updateDiskUsage()>
c0023794:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023798:	eb 05                	jmp    c002379f <SATA::write(unsigned long long, int, void*)+0x61>
c002379a:	b8 01 00 00 00       	mov    eax,0x1
c002379f:	83 c4 10             	add    esp,0x10
c00237a2:	5b                   	pop    ebx
c00237a3:	5e                   	pop    esi
c00237a4:	5f                   	pop    edi
c00237a5:	c3                   	ret    

c00237a6 <AVX::open(int, int, void*)>:
c00237a6:	83 ec 0c             	sub    esp,0xc
c00237a9:	e8 3a 11 00 00       	call   c00248e8 <avxInit>
c00237ae:	b8 00 00 00 00       	mov    eax,0x0
c00237b3:	83 c4 0c             	add    esp,0xc
c00237b6:	c3                   	ret    
c00237b7:	90                   	nop

c00237b8 <AVX::close(int, int, void*)>:
c00237b8:	83 ec 0c             	sub    esp,0xc
c00237bb:	e8 29 11 00 00       	call   c00248e9 <avxClose>
c00237c0:	b8 00 00 00 00       	mov    eax,0x0
c00237c5:	83 c4 0c             	add    esp,0xc
c00237c8:	c3                   	ret    
c00237c9:	90                   	nop

c00237ca <AVX::available()>:
c00237ca:	83 ec 0c             	sub    esp,0xc
c00237cd:	e8 0e 11 00 00       	call   c00248e0 <avxDetect>
c00237d2:	85 c0                	test   eax,eax
c00237d4:	0f 95 c0             	setne  al
c00237d7:	83 c4 0c             	add    esp,0xc
c00237da:	c3                   	ret    
c00237db:	90                   	nop

c00237dc <AVX::save(void*)>:
c00237dc:	83 ec 0c             	sub    esp,0xc
c00237df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00237e3:	83 ec 0c             	sub    esp,0xc
c00237e6:	50                   	push   eax
c00237e7:	e8 fa 10 00 00       	call   c00248e6 <avxSave>
c00237ec:	83 c4 10             	add    esp,0x10
c00237ef:	90                   	nop
c00237f0:	83 c4 0c             	add    esp,0xc
c00237f3:	c3                   	ret    

c00237f4 <AVX::load(void*)>:
c00237f4:	83 ec 0c             	sub    esp,0xc
c00237f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00237fb:	83 ec 0c             	sub    esp,0xc
c00237fe:	50                   	push   eax
c00237ff:	e8 e3 10 00 00       	call   c00248e7 <avxLoad>
c0023804:	83 c4 10             	add    esp,0x10
c0023807:	90                   	nop
c0023808:	83 c4 0c             	add    esp,0xc
c002380b:	c3                   	ret    

c002380c <AVX::AVX()>:
c002380c:	83 ec 0c             	sub    esp,0xc
c002380f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023813:	83 ec 08             	sub    esp,0x8
c0023816:	68 f8 ad 02 c0       	push   0xc002adf8
c002381b:	50                   	push   eax
c002381c:	e8 5d 07 ff ff       	call   c0013f7e <FPU::FPU(char const*)>
c0023821:	83 c4 10             	add    esp,0x10
c0023824:	ba 08 ae 02 c0       	mov    edx,0xc002ae08
c0023829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002382d:	89 10                	mov    DWORD PTR [eax],edx
c002382f:	90                   	nop
c0023830:	83 c4 0c             	add    esp,0xc
c0023833:	c3                   	ret    

c0023834 <MMX::available()>:
c0023834:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c0023839:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002383f:	83 e0 20             	and    eax,0x20
c0023842:	84 c0                	test   al,al
c0023844:	0f 95 c0             	setne  al
c0023847:	c3                   	ret    

c0023848 <MMX::open(int, int, void*)>:
c0023848:	83 ec 0c             	sub    esp,0xc
c002384b:	e8 1c 11 00 00       	call   c002496c <x87Init>
c0023850:	b8 00 00 00 00       	mov    eax,0x0
c0023855:	83 c4 0c             	add    esp,0xc
c0023858:	c3                   	ret    
c0023859:	90                   	nop

c002385a <MMX::close(int, int, void*)>:
c002385a:	83 ec 0c             	sub    esp,0xc
c002385d:	e8 24 11 00 00       	call   c0024986 <x87Close>
c0023862:	b8 00 00 00 00       	mov    eax,0x0
c0023867:	83 c4 0c             	add    esp,0xc
c002386a:	c3                   	ret    
c002386b:	90                   	nop

c002386c <MMX::save(void*)>:
c002386c:	83 ec 0c             	sub    esp,0xc
c002386f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023873:	83 ec 0c             	sub    esp,0xc
c0023876:	50                   	push   eax
c0023877:	e8 e5 10 00 00       	call   c0024961 <x87Save>
c002387c:	83 c4 10             	add    esp,0x10
c002387f:	90                   	nop
c0023880:	83 c4 0c             	add    esp,0xc
c0023883:	c3                   	ret    

c0023884 <MMX::load(void*)>:
c0023884:	83 ec 0c             	sub    esp,0xc
c0023887:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002388b:	83 ec 0c             	sub    esp,0xc
c002388e:	50                   	push   eax
c002388f:	e8 d3 10 00 00       	call   c0024967 <x87Load>
c0023894:	83 c4 10             	add    esp,0x10
c0023897:	90                   	nop
c0023898:	83 c4 0c             	add    esp,0xc
c002389b:	c3                   	ret    

c002389c <MMX::MMX()>:
c002389c:	83 ec 0c             	sub    esp,0xc
c002389f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238a3:	83 ec 08             	sub    esp,0x8
c00238a6:	68 38 ae 02 c0       	push   0xc002ae38
c00238ab:	50                   	push   eax
c00238ac:	e8 cd 06 ff ff       	call   c0013f7e <FPU::FPU(char const*)>
c00238b1:	83 c4 10             	add    esp,0x10
c00238b4:	ba 48 ae 02 c0       	mov    edx,0xc002ae48
c00238b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238bd:	89 10                	mov    DWORD PTR [eax],edx
c00238bf:	90                   	nop
c00238c0:	83 c4 0c             	add    esp,0xc
c00238c3:	c3                   	ret    

c00238c4 <SSE::open(int, int, void*)>:
c00238c4:	83 ec 0c             	sub    esp,0xc
c00238c7:	e8 58 10 00 00       	call   c0024924 <sseInit>
c00238cc:	b8 00 00 00 00       	mov    eax,0x0
c00238d1:	83 c4 0c             	add    esp,0xc
c00238d4:	c3                   	ret    
c00238d5:	90                   	nop

c00238d6 <SSE::close(int, int, void*)>:
c00238d6:	83 ec 0c             	sub    esp,0xc
c00238d9:	e8 56 10 00 00       	call   c0024934 <sseClose>
c00238de:	b8 00 00 00 00       	mov    eax,0x0
c00238e3:	83 c4 0c             	add    esp,0xc
c00238e6:	c3                   	ret    
c00238e7:	90                   	nop

c00238e8 <SSE::available()>:
c00238e8:	83 ec 1c             	sub    esp,0x1c
c00238eb:	e8 10 10 00 00       	call   c0024900 <absolutelyNoChanceInHell>
c00238f0:	85 c0                	test   eax,eax
c00238f2:	0f 95 c0             	setne  al
c00238f5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00238f9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00238fd:	83 c4 1c             	add    esp,0x1c
c0023900:	c3                   	ret    
c0023901:	90                   	nop

c0023902 <SSE::save(void*)>:
c0023902:	83 ec 0c             	sub    esp,0xc
c0023905:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023909:	83 ec 0c             	sub    esp,0xc
c002390c:	50                   	push   eax
c002390d:	e8 06 10 00 00       	call   c0024918 <sseSave>
c0023912:	83 c4 10             	add    esp,0x10
c0023915:	90                   	nop
c0023916:	83 c4 0c             	add    esp,0xc
c0023919:	c3                   	ret    

c002391a <SSE::load(void*)>:
c002391a:	83 ec 0c             	sub    esp,0xc
c002391d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023921:	83 ec 0c             	sub    esp,0xc
c0023924:	50                   	push   eax
c0023925:	e8 f4 0f 00 00       	call   c002491e <sseLoad>
c002392a:	83 c4 10             	add    esp,0x10
c002392d:	90                   	nop
c002392e:	83 c4 0c             	add    esp,0xc
c0023931:	c3                   	ret    

c0023932 <SSE::SSE()>:
c0023932:	83 ec 0c             	sub    esp,0xc
c0023935:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023939:	83 ec 08             	sub    esp,0x8
c002393c:	68 78 ae 02 c0       	push   0xc002ae78
c0023941:	50                   	push   eax
c0023942:	e8 37 06 ff ff       	call   c0013f7e <FPU::FPU(char const*)>
c0023947:	83 c4 10             	add    esp,0x10
c002394a:	ba 88 ae 02 c0       	mov    edx,0xc002ae88
c002394f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023953:	89 10                	mov    DWORD PTR [eax],edx
c0023955:	90                   	nop
c0023956:	83 c4 0c             	add    esp,0xc
c0023959:	c3                   	ret    

c002395a <x87::open(int, int, void*)>:
c002395a:	83 ec 0c             	sub    esp,0xc
c002395d:	e8 0a 10 00 00       	call   c002496c <x87Init>
c0023962:	b8 00 00 00 00       	mov    eax,0x0
c0023967:	83 c4 0c             	add    esp,0xc
c002396a:	c3                   	ret    
c002396b:	90                   	nop

c002396c <x87::close(int, int, void*)>:
c002396c:	83 ec 0c             	sub    esp,0xc
c002396f:	e8 12 10 00 00       	call   c0024986 <x87Close>
c0023974:	b8 00 00 00 00       	mov    eax,0x0
c0023979:	83 c4 0c             	add    esp,0xc
c002397c:	c3                   	ret    
c002397d:	90                   	nop

c002397e <x87::available()>:
c002397e:	83 ec 0c             	sub    esp,0xc
c0023981:	e8 c0 0f 00 00       	call   c0024946 <x87Detect>
c0023986:	85 c0                	test   eax,eax
c0023988:	0f 95 c0             	setne  al
c002398b:	83 c4 0c             	add    esp,0xc
c002398e:	c3                   	ret    
c002398f:	90                   	nop

c0023990 <x87::save(void*)>:
c0023990:	83 ec 0c             	sub    esp,0xc
c0023993:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023997:	83 ec 0c             	sub    esp,0xc
c002399a:	50                   	push   eax
c002399b:	e8 c1 0f 00 00       	call   c0024961 <x87Save>
c00239a0:	83 c4 10             	add    esp,0x10
c00239a3:	90                   	nop
c00239a4:	83 c4 0c             	add    esp,0xc
c00239a7:	c3                   	ret    

c00239a8 <x87::load(void*)>:
c00239a8:	83 ec 0c             	sub    esp,0xc
c00239ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00239af:	83 ec 0c             	sub    esp,0xc
c00239b2:	50                   	push   eax
c00239b3:	e8 af 0f 00 00       	call   c0024967 <x87Load>
c00239b8:	83 c4 10             	add    esp,0x10
c00239bb:	90                   	nop
c00239bc:	83 c4 0c             	add    esp,0xc
c00239bf:	c3                   	ret    

c00239c0 <x87::x87()>:
c00239c0:	83 ec 0c             	sub    esp,0xc
c00239c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239c7:	83 ec 08             	sub    esp,0x8
c00239ca:	68 b8 ae 02 c0       	push   0xc002aeb8
c00239cf:	50                   	push   eax
c00239d0:	e8 a9 05 ff ff       	call   c0013f7e <FPU::FPU(char const*)>
c00239d5:	83 c4 10             	add    esp,0x10
c00239d8:	ba c8 ae 02 c0       	mov    edx,0xc002aec8
c00239dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239e1:	89 10                	mov    DWORD PTR [eax],edx
c00239e3:	90                   	nop
c00239e4:	83 c4 0c             	add    esp,0xc
c00239e7:	c3                   	ret    

c00239e8 <APIC::disable()>:
c00239e8:	90                   	nop
c00239e9:	c3                   	ret    

c00239ea <APIC::close(int, int, void*)>:
c00239ea:	55                   	push   ebp
c00239eb:	89 e5                	mov    ebp,esp
c00239ed:	83 ec 08             	sub    esp,0x8
c00239f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00239f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00239f5:	83 c0 3c             	add    eax,0x3c
c00239f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00239fa:	83 ec 0c             	sub    esp,0xc
c00239fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023a00:	ff d0                	call   eax
c0023a02:	83 c4 10             	add    esp,0x10
c0023a05:	b8 00 00 00 00       	mov    eax,0x0
c0023a0a:	c9                   	leave  
c0023a0b:	c3                   	ret    

c0023a0c <IOAPIC::close(int, int, void*)>:
c0023a0c:	b8 00 00 00 00       	mov    eax,0x0
c0023a11:	c3                   	ret    

c0023a12 <APIC::io_wait()>:
c0023a12:	eb 00                	jmp    c0023a14 <APIC::io_wait()+0x2>
c0023a14:	eb 00                	jmp    c0023a16 <APIC::io_wait()+0x4>
c0023a16:	90                   	nop
c0023a17:	c3                   	ret    

c0023a18 <APIC::getBase()>:
c0023a18:	55                   	push   ebp
c0023a19:	89 e5                	mov    ebp,esp
c0023a1b:	83 ec 18             	sub    esp,0x18
c0023a1e:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c0023a23:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0023a29:	83 e0 08             	and    eax,0x8
c0023a2c:	84 c0                	test   al,al
c0023a2e:	75 07                	jne    c0023a37 <APIC::getBase()+0x1f>
c0023a30:	b8 00 00 00 00       	mov    eax,0x0
c0023a35:	eb 21                	jmp    c0023a58 <APIC::getBase()+0x40>
c0023a37:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c0023a3c:	83 ec 08             	sub    esp,0x8
c0023a3f:	6a 1b                	push   0x1b
c0023a41:	50                   	push   eax
c0023a42:	e8 35 b0 fe ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c0023a47:	83 c4 10             	add    esp,0x10
c0023a4a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023a4d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023a50:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023a53:	25 00 f0 ff ff       	and    eax,0xfffff000
c0023a58:	c9                   	leave  
c0023a59:	c3                   	ret    

c0023a5a <APIC::eoi(unsigned char)>:
c0023a5a:	55                   	push   ebp
c0023a5b:	89 e5                	mov    ebp,esp
c0023a5d:	83 ec 28             	sub    esp,0x28
c0023a60:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023a63:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0023a66:	83 ec 0c             	sub    esp,0xc
c0023a69:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023a6c:	e8 a7 ff ff ff       	call   c0023a18 <APIC::getBase()>
c0023a71:	83 c4 10             	add    esp,0x10
c0023a74:	05 b0 00 00 00       	add    eax,0xb0
c0023a79:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0023a7c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0023a7f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0023a85:	90                   	nop
c0023a86:	c9                   	leave  
c0023a87:	c3                   	ret    

c0023a88 <APIC::open(int, int, void*)>:
c0023a88:	55                   	push   ebp
c0023a89:	89 e5                	mov    ebp,esp
c0023a8b:	57                   	push   edi
c0023a8c:	56                   	push   esi
c0023a8d:	53                   	push   ebx
c0023a8e:	83 ec 2c             	sub    esp,0x2c
c0023a91:	83 ec 0c             	sub    esp,0xc
c0023a94:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023a97:	e8 7c ff ff ff       	call   c0023a18 <APIC::getBase()>
c0023a9c:	83 c4 10             	add    esp,0x10
c0023a9f:	89 c2                	mov    edx,eax
c0023aa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023aa4:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0023aaa:	0f b6 f8             	movzx  edi,al
c0023aad:	89 d0                	mov    eax,edx
c0023aaf:	ba 00 00 00 00       	mov    edx,0x0
c0023ab4:	89 c1                	mov    ecx,eax
c0023ab6:	80 e5 ff             	and    ch,0xff
c0023ab9:	89 cb                	mov    ebx,ecx
c0023abb:	0f b6 f2             	movzx  esi,dl
c0023abe:	89 d8                	mov    eax,ebx
c0023ac0:	89 f2                	mov    edx,esi
c0023ac2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0023ac5:	8d 5f 08             	lea    ebx,[edi+0x8]
c0023ac8:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0023acc:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0023ad0:	83 e0 00             	and    eax,0x0
c0023ad3:	09 d0                	or     eax,edx
c0023ad5:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0023ad9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023adc:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0023ae2:	8d 50 01             	lea    edx,[eax+0x1]
c0023ae5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0023ae8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0023aee:	0f b6 d0             	movzx  edx,al
c0023af1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023af4:	83 c2 08             	add    edx,0x8
c0023af7:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0023afb:	0f b6 c9             	movzx  ecx,cl
c0023afe:	81 c9 00 00 01 00    	or     ecx,0x10000
c0023b04:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0023b08:	83 ec 0c             	sub    esp,0xc
c0023b0b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023b0e:	e8 05 ff ff ff       	call   c0023a18 <APIC::getBase()>
c0023b13:	83 c4 10             	add    esp,0x10
c0023b16:	05 f0 00 00 00       	add    eax,0xf0
c0023b1b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0023b1e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0023b21:	8b 00                	mov    eax,DWORD PTR [eax]
c0023b23:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0023b26:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0023b2d:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0023b34:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0023b37:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0023b3a:	89 10                	mov    DWORD PTR [eax],edx
c0023b3c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0023b43:	a1 d0 ca 02 c0       	mov    eax,ds:0xc002cad0
c0023b48:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0023b4b:	7d 7c                	jge    c0023bc9 <APIC::open(int, int, void*)+0x141>
c0023b4d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0023b50:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0023b57:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0023b5a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0023b5d:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0023b64:	c1 e8 08             	shr    eax,0x8
c0023b67:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0023b6b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0023b6e:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0023b75:	c1 e8 18             	shr    eax,0x18
c0023b78:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0023b7b:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0023b7f:	75 40                	jne    c0023bc1 <APIC::open(int, int, void*)+0x139>
c0023b81:	83 ec 0c             	sub    esp,0xc
c0023b84:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023b87:	e8 8c fe ff ff       	call   c0023a18 <APIC::getBase()>
c0023b8c:	83 c4 10             	add    esp,0x10
c0023b8f:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0023b93:	75 07                	jne    c0023b9c <APIC::open(int, int, void*)+0x114>
c0023b95:	ba 60 03 00 00       	mov    edx,0x360
c0023b9a:	eb 05                	jmp    c0023ba1 <APIC::open(int, int, void*)+0x119>
c0023b9c:	ba 50 03 00 00       	mov    edx,0x350
c0023ba1:	01 d0                	add    eax,edx
c0023ba3:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0023ba6:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0023ba9:	8b 00                	mov    eax,DWORD PTR [eax]
c0023bab:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0023bae:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0023bb5:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0023bb9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0023bbc:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0023bbf:	89 10                	mov    DWORD PTR [eax],edx
c0023bc1:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0023bc4:	e9 7a ff ff ff       	jmp    c0023b43 <APIC::open(int, int, void*)+0xbb>
c0023bc9:	b8 00 00 00 00       	mov    eax,0x0
c0023bce:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023bd1:	5b                   	pop    ebx
c0023bd2:	5e                   	pop    esi
c0023bd3:	5f                   	pop    edi
c0023bd4:	5d                   	pop    ebp
c0023bd5:	c3                   	ret    

c0023bd6 <IOAPIC::IOAPIC()>:
c0023bd6:	83 ec 0c             	sub    esp,0xc
c0023bd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bdd:	83 ec 08             	sub    esp,0x8
c0023be0:	68 f8 ae 02 c0       	push   0xc002aef8
c0023be5:	50                   	push   eax
c0023be6:	e8 95 00 ff ff       	call   c0013c80 <Device::Device(char const*)>
c0023beb:	83 c4 10             	add    esp,0x10
c0023bee:	ba 20 b0 02 c0       	mov    edx,0xc002b020
c0023bf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bf7:	89 10                	mov    DWORD PTR [eax],edx
c0023bf9:	90                   	nop
c0023bfa:	83 c4 0c             	add    esp,0xc
c0023bfd:	c3                   	ret    

c0023bfe <APIC::APIC()>:
c0023bfe:	53                   	push   ebx
c0023bff:	83 ec 18             	sub    esp,0x18
c0023c02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023c06:	83 ec 08             	sub    esp,0x8
c0023c09:	68 00 af 02 c0       	push   0xc002af00
c0023c0e:	50                   	push   eax
c0023c0f:	e8 c4 07 ff ff       	call   c00143d8 <InterruptController::InterruptController(char const*)>
c0023c14:	83 c4 10             	add    esp,0x10
c0023c17:	ba d8 af 02 c0       	mov    edx,0xc002afd8
c0023c1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023c20:	89 10                	mov    DWORD PTR [eax],edx
c0023c22:	a0 a0 e5 02 c0       	mov    al,ds:0xc002e5a0
c0023c27:	83 f0 01             	xor    eax,0x1
c0023c2a:	84 c0                	test   al,al
c0023c2c:	0f 84 a1 00 00 00    	je     c0023cd3 <APIC::APIC()+0xd5>
c0023c32:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0023c37:	a0 80 cb 02 c0       	mov    al,ds:0xc002cb80
c0023c3c:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0023c40:	0f 83 86 00 00 00    	jae    c0023ccc <APIC::APIC()+0xce>
c0023c46:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0023c4e:	83 ec 0c             	sub    esp,0xc
c0023c51:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0023c55:	e8 7a b8 fe ff       	call   c000f4d4 <malloc>
c0023c5a:	83 c4 10             	add    esp,0x10
c0023c5d:	89 c3                	mov    ebx,eax
c0023c5f:	83 ec 0c             	sub    esp,0xc
c0023c62:	53                   	push   ebx
c0023c63:	e8 6e ff ff ff       	call   c0023bd6 <IOAPIC::IOAPIC()>
c0023c68:	83 c4 10             	add    esp,0x10
c0023c6b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0023c6f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0023c74:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023c78:	89 14 85 80 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1a80],edx
c0023c7f:	a1 60 e5 02 c0       	mov    eax,ds:0xc002e560
c0023c84:	40                   	inc    eax
c0023c85:	a3 60 e5 02 c0       	mov    ds:0xc002e560,eax
c0023c8a:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c0023c8f:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0023c95:	83 ec 08             	sub    esp,0x8
c0023c98:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0023c9c:	50                   	push   eax
c0023c9d:	e8 ee fd fe ff       	call   c0013a90 <Device::addChild(Device*)>
c0023ca2:	83 c4 10             	add    esp,0x10
c0023ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023ca9:	8b 00                	mov    eax,DWORD PTR [eax]
c0023cab:	83 c0 08             	add    eax,0x8
c0023cae:	8b 00                	mov    eax,DWORD PTR [eax]
c0023cb0:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0023cb5:	6a 00                	push   0x0
c0023cb7:	6a 00                	push   0x0
c0023cb9:	52                   	push   edx
c0023cba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023cbe:	ff d0                	call   eax
c0023cc0:	83 c4 10             	add    esp,0x10
c0023cc3:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0023cc7:	e9 6b ff ff ff       	jmp    c0023c37 <APIC::APIC()+0x39>
c0023ccc:	c6 05 a0 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e5a0,0x1
c0023cd3:	90                   	nop
c0023cd4:	83 c4 18             	add    esp,0x18
c0023cd7:	5b                   	pop    ebx
c0023cd8:	c3                   	ret    
c0023cd9:	90                   	nop

c0023cda <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0023cda:	55                   	push   ebp
c0023cdb:	89 e5                	mov    ebp,esp
c0023cdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023ce0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023ce6:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0023ce9:	72 1d                	jb     c0023d08 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0023ceb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023cee:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0023cf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023cf7:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0023cfd:	01 d0                	add    eax,edx
c0023cff:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0023d02:	73 04                	jae    c0023d08 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0023d04:	b0 01                	mov    al,0x1
c0023d06:	eb 02                	jmp    c0023d0a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0023d08:	b0 00                	mov    al,0x0
c0023d0a:	5d                   	pop    ebp
c0023d0b:	c3                   	ret    

c0023d0c <IOAPIC::read(int)>:
c0023d0c:	55                   	push   ebp
c0023d0d:	89 e5                	mov    ebp,esp
c0023d0f:	83 ec 10             	sub    esp,0x10
c0023d12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023d15:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023d1b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0023d1e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023d21:	0f b6 d0             	movzx  edx,al
c0023d24:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0023d27:	89 10                	mov    DWORD PTR [eax],edx
c0023d29:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0023d2c:	83 c0 10             	add    eax,0x10
c0023d2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0023d31:	c9                   	leave  
c0023d32:	c3                   	ret    
c0023d33:	90                   	nop

c0023d34 <IOAPIC::open(int, int, void*)>:
c0023d34:	55                   	push   ebp
c0023d35:	89 e5                	mov    ebp,esp
c0023d37:	57                   	push   edi
c0023d38:	56                   	push   esi
c0023d39:	53                   	push   ebx
c0023d3a:	83 ec 0c             	sub    esp,0xc
c0023d3d:	83 ec 0c             	sub    esp,0xc
c0023d40:	68 2b af 02 c0       	push   0xc002af2b
c0023d45:	e8 57 e9 fe ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0023d4a:	83 c4 10             	add    esp,0x10
c0023d4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023d50:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0023d53:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023d59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023d5c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023d62:	8b 14 85 c0 cb 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3440]
c0023d69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023d6c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023d72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023d75:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023d7b:	8b 14 85 40 cc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd33c0]
c0023d82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023d85:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023d8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023d8e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0023d94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023d97:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0023d9d:	0f b6 f8             	movzx  edi,al
c0023da0:	89 d0                	mov    eax,edx
c0023da2:	ba 00 00 00 00       	mov    edx,0x0
c0023da7:	89 c1                	mov    ecx,eax
c0023da9:	80 e5 ff             	and    ch,0xff
c0023dac:	89 cb                	mov    ebx,ecx
c0023dae:	0f b6 f2             	movzx  esi,dl
c0023db1:	89 d8                	mov    eax,ebx
c0023db3:	89 f2                	mov    edx,esi
c0023db5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0023db8:	8d 5f 08             	lea    ebx,[edi+0x8]
c0023dbb:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0023dbf:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0023dc3:	83 e0 00             	and    eax,0x0
c0023dc6:	09 d0                	or     eax,edx
c0023dc8:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0023dcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023dcf:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0023dd5:	8d 50 01             	lea    edx,[eax+0x1]
c0023dd8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0023ddb:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0023de1:	0f b6 d0             	movzx  edx,al
c0023de4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023de7:	83 c2 08             	add    edx,0x8
c0023dea:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0023dee:	0f b6 c9             	movzx  ecx,cl
c0023df1:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0023df7:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0023dfb:	83 ec 08             	sub    esp,0x8
c0023dfe:	6a 01                	push   0x1
c0023e00:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023e03:	e8 04 ff ff ff       	call   c0023d0c <IOAPIC::read(int)>
c0023e08:	83 c4 10             	add    esp,0x10
c0023e0b:	c1 f8 10             	sar    eax,0x10
c0023e0e:	0f b6 c0             	movzx  eax,al
c0023e11:	8d 50 01             	lea    edx,[eax+0x1]
c0023e14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023e17:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0023e1d:	b8 00 00 00 00       	mov    eax,0x0
c0023e22:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023e25:	5b                   	pop    ebx
c0023e26:	5e                   	pop    esi
c0023e27:	5f                   	pop    edi
c0023e28:	5d                   	pop    ebp
c0023e29:	c3                   	ret    

c0023e2a <IOAPIC::write(int, int)>:
c0023e2a:	55                   	push   ebp
c0023e2b:	89 e5                	mov    ebp,esp
c0023e2d:	83 ec 10             	sub    esp,0x10
c0023e30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023e33:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023e39:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0023e3c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023e3f:	0f b6 d0             	movzx  edx,al
c0023e42:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0023e45:	89 10                	mov    DWORD PTR [eax],edx
c0023e47:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0023e4a:	8d 50 10             	lea    edx,[eax+0x10]
c0023e4d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0023e50:	89 02                	mov    DWORD PTR [edx],eax
c0023e52:	90                   	nop
c0023e53:	c9                   	leave  
c0023e54:	c3                   	ret    
c0023e55:	90                   	nop

c0023e56 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0023e56:	55                   	push   ebp
c0023e57:	89 e5                	mov    ebp,esp
c0023e59:	53                   	push   ebx
c0023e5a:	83 ec 2c             	sub    esp,0x2c
c0023e5d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023e60:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0023e63:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0023e66:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0023e69:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0023e6c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0023e6f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0023e72:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0023e75:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0023e78:	88 d8                	mov    al,bl
c0023e7a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0023e7d:	88 c8                	mov    al,cl
c0023e7f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0023e82:	88 d0                	mov    al,dl
c0023e84:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0023e87:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0023e8b:	83 c0 08             	add    eax,0x8
c0023e8e:	01 c0                	add    eax,eax
c0023e90:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023e93:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0023e97:	83 c0 08             	add    eax,0x8
c0023e9a:	01 c0                	add    eax,eax
c0023e9c:	40                   	inc    eax
c0023e9d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0023ea0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0023ea3:	50                   	push   eax
c0023ea4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023ea7:	e8 60 fe ff ff       	call   c0023d0c <IOAPIC::read(int)>
c0023eac:	83 c4 08             	add    esp,0x8
c0023eaf:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023eb2:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0023eb9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0023ebc:	c1 e0 18             	shl    eax,0x18
c0023ebf:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0023ec2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0023ec5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0023ec8:	52                   	push   edx
c0023ec9:	50                   	push   eax
c0023eca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023ecd:	e8 58 ff ff ff       	call   c0023e2a <IOAPIC::write(int, int)>
c0023ed2:	83 c4 0c             	add    esp,0xc
c0023ed5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023ed8:	50                   	push   eax
c0023ed9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023edc:	e8 2b fe ff ff       	call   c0023d0c <IOAPIC::read(int)>
c0023ee1:	83 c4 08             	add    esp,0x8
c0023ee4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0023ee7:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0023eee:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0023ef5:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0023efc:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0023f00:	74 09                	je     c0023f0b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0023f02:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0023f09:	eb 07                	jmp    c0023f12 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0023f0b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0023f12:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0023f16:	74 09                	je     c0023f21 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0023f18:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0023f1f:	eb 07                	jmp    c0023f28 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0023f21:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0023f28:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0023f2f:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0023f33:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0023f36:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0023f39:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023f3c:	52                   	push   edx
c0023f3d:	50                   	push   eax
c0023f3e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023f41:	e8 e4 fe ff ff       	call   c0023e2a <IOAPIC::write(int, int)>
c0023f46:	83 c4 0c             	add    esp,0xc
c0023f49:	90                   	nop
c0023f4a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0023f4d:	c9                   	leave  
c0023f4e:	c3                   	ret    
c0023f4f:	90                   	nop

c0023f50 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0023f50:	55                   	push   ebp
c0023f51:	89 e5                	mov    ebp,esp
c0023f53:	57                   	push   edi
c0023f54:	56                   	push   esi
c0023f55:	53                   	push   ebx
c0023f56:	83 ec 2c             	sub    esp,0x2c
c0023f59:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0023f5c:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0023f5f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0023f63:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0023f67:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0023f6b:	74 5a                	je     c0023fc7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0023f6d:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0023f71:	7f 44                	jg     c0023fb7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0023f73:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023f76:	05 80 b4 02 c0       	add    eax,0xc002b480
c0023f7b:	8a 00                	mov    al,BYTE PTR [eax]
c0023f7d:	0f b6 c0             	movzx  eax,al
c0023f80:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0023f83:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023f86:	66 8b 84 00 60 cb 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd34a0]
c0023f8e:	0f b7 c0             	movzx  eax,ax
c0023f91:	83 e0 02             	and    eax,0x2
c0023f94:	85 c0                	test   eax,eax
c0023f96:	74 04                	je     c0023f9c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0023f98:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0023f9c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023f9f:	66 8b 84 00 60 cb 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd34a0]
c0023fa7:	0f b7 c0             	movzx  eax,ax
c0023faa:	83 e0 08             	and    eax,0x8
c0023fad:	85 c0                	test   eax,eax
c0023faf:	74 16                	je     c0023fc7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0023fb1:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0023fb5:	eb 10                	jmp    c0023fc7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0023fb7:	83 ec 0c             	sub    esp,0xc
c0023fba:	68 3c af 02 c0       	push   0xc002af3c
c0023fbf:	e8 b8 55 ff ff       	call   c001957c <Krnl::panic(char const*)>
c0023fc4:	83 c4 10             	add    esp,0x10
c0023fc7:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0023fcb:	a1 60 e5 02 c0       	mov    eax,ds:0xc002e560
c0023fd0:	83 ec 08             	sub    esp,0x8
c0023fd3:	50                   	push   eax
c0023fd4:	68 74 af 02 c0       	push   0xc002af74
c0023fd9:	e8 c3 e6 fe ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0023fde:	83 c4 10             	add    esp,0x10
c0023fe1:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0023fe8:	a1 60 e5 02 c0       	mov    eax,ds:0xc002e560
c0023fed:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0023ff0:	7d 67                	jge    c0024059 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0023ff2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0023ff5:	8b 04 85 80 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1a80]
c0023ffc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0023fff:	83 ec 08             	sub    esp,0x8
c0024002:	52                   	push   edx
c0024003:	50                   	push   eax
c0024004:	e8 d1 fc ff ff       	call   c0023cda <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0024009:	83 c4 10             	add    esp,0x10
c002400c:	84 c0                	test   al,al
c002400e:	74 44                	je     c0024054 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0024010:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024013:	8b 1c 85 80 e5 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd1a80]
c002401a:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c002401e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0024021:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0024025:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024028:	83 c0 20             	add    eax,0x20
c002402b:	0f b6 f0             	movzx  esi,al
c002402e:	b8 00 00 00 00       	mov    eax,0x0
c0024033:	99                   	cdq    
c0024034:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024037:	0f b6 c9             	movzx  ecx,cl
c002403a:	83 ec 04             	sub    esp,0x4
c002403d:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0024040:	57                   	push   edi
c0024041:	56                   	push   esi
c0024042:	52                   	push   edx
c0024043:	50                   	push   eax
c0024044:	51                   	push   ecx
c0024045:	53                   	push   ebx
c0024046:	e8 0b fe ff ff       	call   c0023e56 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c002404b:	83 c4 20             	add    esp,0x20
c002404e:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0024052:	eb 05                	jmp    c0024059 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0024054:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0024057:	eb 8f                	jmp    c0023fe8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0024059:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c002405c:	83 f0 01             	xor    eax,0x1
c002405f:	84 c0                	test   al,al
c0024061:	74 10                	je     c0024073 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0024063:	83 ec 0c             	sub    esp,0xc
c0024066:	68 8b af 02 c0       	push   0xc002af8b
c002406b:	e8 0c 55 ff ff       	call   c001957c <Krnl::panic(char const*)>
c0024070:	83 c4 10             	add    esp,0x10
c0024073:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0024077:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c002407e:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0024082:	7f 65                	jg     c00240e9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0024084:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024087:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002408a:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0024091:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024094:	01 ca                	add    edx,ecx
c0024096:	83 c2 54             	add    edx,0x54
c0024099:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c002409d:	85 c0                	test   eax,eax
c002409f:	75 43                	jne    c00240e4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00240a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00240a4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00240a7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00240ae:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00240b1:	01 ca                	add    edx,ecx
c00240b3:	8d 4a 54             	lea    ecx,[edx+0x54]
c00240b6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00240b9:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00240bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00240c0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00240c3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00240ca:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00240cd:	01 ca                	add    edx,ecx
c00240cf:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00240d5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00240d8:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00240dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00240df:	83 e8 20             	sub    eax,0x20
c00240e2:	eb 1a                	jmp    c00240fe <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00240e4:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00240e7:	eb 95                	jmp    c002407e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00240e9:	83 ec 0c             	sub    esp,0xc
c00240ec:	68 98 af 02 c0       	push   0xc002af98
c00240f1:	e8 86 54 ff ff       	call   c001957c <Krnl::panic(char const*)>
c00240f6:	83 c4 10             	add    esp,0x10
c00240f9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00240fe:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024101:	5b                   	pop    ebx
c0024102:	5e                   	pop    esi
c0024103:	5f                   	pop    edi
c0024104:	5d                   	pop    ebp
c0024105:	c3                   	ret    

c0024106 <PIC::disable()>:
c0024106:	55                   	push   ebp
c0024107:	89 e5                	mov    ebp,esp
c0024109:	83 ec 10             	sub    esp,0x10
c002410c:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0024112:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0024116:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024119:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002411d:	ee                   	out    dx,al
c002411e:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0024124:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0024128:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002412b:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c002412f:	ee                   	out    dx,al
c0024130:	90                   	nop
c0024131:	c9                   	leave  
c0024132:	c3                   	ret    
c0024133:	90                   	nop

c0024134 <PIC::close(int, int, void*)>:
c0024134:	55                   	push   ebp
c0024135:	89 e5                	mov    ebp,esp
c0024137:	83 ec 08             	sub    esp,0x8
c002413a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002413d:	8b 00                	mov    eax,DWORD PTR [eax]
c002413f:	83 c0 3c             	add    eax,0x3c
c0024142:	8b 00                	mov    eax,DWORD PTR [eax]
c0024144:	83 ec 0c             	sub    esp,0xc
c0024147:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002414a:	ff d0                	call   eax
c002414c:	83 c4 10             	add    esp,0x10
c002414f:	b8 00 00 00 00       	mov    eax,0x0
c0024154:	c9                   	leave  
c0024155:	c3                   	ret    

c0024156 <PIC::PIC()>:
c0024156:	83 ec 0c             	sub    esp,0xc
c0024159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002415d:	83 ec 08             	sub    esp,0x8
c0024160:	68 44 b0 02 c0       	push   0xc002b044
c0024165:	50                   	push   eax
c0024166:	e8 6d 02 ff ff       	call   c00143d8 <InterruptController::InterruptController(char const*)>
c002416b:	83 c4 10             	add    esp,0x10
c002416e:	ba 70 b0 02 c0       	mov    edx,0xc002b070
c0024173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024177:	89 10                	mov    DWORD PTR [eax],edx
c0024179:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002417d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024183:	0f b6 d0             	movzx  edx,al
c0024186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002418a:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0024191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024195:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002419b:	0f b6 d0             	movzx  edx,al
c002419e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241a2:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00241a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241ab:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00241b1:	8d 50 01             	lea    edx,[eax+0x1]
c00241b4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00241b8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00241be:	0f b6 d0             	movzx  edx,al
c00241c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241c5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00241c9:	83 e1 3f             	and    ecx,0x3f
c00241cc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00241d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241d4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00241da:	0f b6 d0             	movzx  edx,al
c00241dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241e1:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00241e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241ec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00241f2:	0f b6 d0             	movzx  edx,al
c00241f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241f9:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00241fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024202:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024208:	8d 50 01             	lea    edx,[eax+0x1]
c002420b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002420f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0024215:	0f b6 d0             	movzx  edx,al
c0024218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002421c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0024220:	83 e1 3f             	and    ecx,0x3f
c0024223:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024227:	90                   	nop
c0024228:	83 c4 0c             	add    esp,0xc
c002422b:	c3                   	ret    

c002422c <PIC::ioWait()>:
c002422c:	eb 00                	jmp    c002422e <PIC::ioWait()+0x2>
c002422e:	eb 00                	jmp    c0024230 <PIC::ioWait()+0x4>
c0024230:	90                   	nop
c0024231:	c3                   	ret    

c0024232 <PIC::getIRQReg(int)>:
c0024232:	55                   	push   ebp
c0024233:	89 e5                	mov    ebp,esp
c0024235:	83 ec 10             	sub    esp,0x10
c0024238:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002423b:	0f b6 c0             	movzx  eax,al
c002423e:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0024244:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0024247:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002424a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002424e:	ee                   	out    dx,al
c002424f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024252:	0f b6 c0             	movzx  eax,al
c0024255:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002425b:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002425e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024261:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024265:	ee                   	out    dx,al
c0024266:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c002426c:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0024270:	89 c2                	mov    edx,eax
c0024272:	ec                   	in     al,dx
c0024273:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0024276:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024279:	0f b6 c0             	movzx  eax,al
c002427c:	c1 e0 08             	shl    eax,0x8
c002427f:	89 c1                	mov    ecx,eax
c0024281:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0024287:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c002428b:	89 c2                	mov    edx,eax
c002428d:	ec                   	in     al,dx
c002428e:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0024291:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0024294:	0f b6 c0             	movzx  eax,al
c0024297:	09 c8                	or     eax,ecx
c0024299:	c9                   	leave  
c002429a:	c3                   	ret    
c002429b:	90                   	nop

c002429c <PIC::eoi(unsigned char)>:
c002429c:	55                   	push   ebp
c002429d:	89 e5                	mov    ebp,esp
c002429f:	83 ec 14             	sub    esp,0x14
c00242a2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00242a5:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00242a8:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00242ac:	75 1e                	jne    c00242cc <PIC::eoi(unsigned char)+0x30>
c00242ae:	6a 0b                	push   0xb
c00242b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00242b3:	e8 7a ff ff ff       	call   c0024232 <PIC::getIRQReg(int)>
c00242b8:	83 c4 08             	add    esp,0x8
c00242bb:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00242bf:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00242c3:	25 80 00 00 00       	and    eax,0x80
c00242c8:	85 c0                	test   eax,eax
c00242ca:	74 5f                	je     c002432b <PIC::eoi(unsigned char)+0x8f>
c00242cc:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00242d0:	75 2d                	jne    c00242ff <PIC::eoi(unsigned char)+0x63>
c00242d2:	6a 0b                	push   0xb
c00242d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00242d7:	e8 56 ff ff ff       	call   c0024232 <PIC::getIRQReg(int)>
c00242dc:	83 c4 08             	add    esp,0x8
c00242df:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00242e3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00242e6:	66 85 c0             	test   ax,ax
c00242e9:	78 14                	js     c00242ff <PIC::eoi(unsigned char)+0x63>
c00242eb:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00242f1:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00242f5:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00242f8:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00242fc:	ee                   	out    dx,al
c00242fd:	eb 2d                	jmp    c002432c <PIC::eoi(unsigned char)+0x90>
c00242ff:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0024303:	76 12                	jbe    c0024317 <PIC::eoi(unsigned char)+0x7b>
c0024305:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002430b:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c002430f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024312:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024316:	ee                   	out    dx,al
c0024317:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002431d:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0024321:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024324:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024328:	ee                   	out    dx,al
c0024329:	eb 01                	jmp    c002432c <PIC::eoi(unsigned char)+0x90>
c002432b:	90                   	nop
c002432c:	c9                   	leave  
c002432d:	c3                   	ret    

c002432e <PIC::remap()>:
c002432e:	55                   	push   ebp
c002432f:	89 e5                	mov    ebp,esp
c0024331:	83 ec 48             	sub    esp,0x48
c0024334:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c002433b:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0024342:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0024348:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c002434b:	89 c2                	mov    edx,eax
c002434d:	ec                   	in     al,dx
c002434e:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0024351:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0024354:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0024357:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c002435d:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0024360:	89 c2                	mov    edx,eax
c0024362:	ec                   	in     al,dx
c0024363:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0024366:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0024369:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002436c:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0024372:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0024376:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0024379:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c002437c:	ee                   	out    dx,al
c002437d:	83 ec 0c             	sub    esp,0xc
c0024380:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024383:	e8 a4 fe ff ff       	call   c002422c <PIC::ioWait()>
c0024388:	83 c4 10             	add    esp,0x10
c002438b:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0024391:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0024395:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0024398:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002439b:	ee                   	out    dx,al
c002439c:	83 ec 0c             	sub    esp,0xc
c002439f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00243a2:	e8 85 fe ff ff       	call   c002422c <PIC::ioWait()>
c00243a7:	83 c4 10             	add    esp,0x10
c00243aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00243ad:	0f b6 c0             	movzx  eax,al
c00243b0:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00243b6:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00243b9:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00243bc:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00243bf:	ee                   	out    dx,al
c00243c0:	83 ec 0c             	sub    esp,0xc
c00243c3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00243c6:	e8 61 fe ff ff       	call   c002422c <PIC::ioWait()>
c00243cb:	83 c4 10             	add    esp,0x10
c00243ce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00243d1:	0f b6 c0             	movzx  eax,al
c00243d4:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00243da:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00243dd:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00243e0:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00243e3:	ee                   	out    dx,al
c00243e4:	83 ec 0c             	sub    esp,0xc
c00243e7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00243ea:	e8 3d fe ff ff       	call   c002422c <PIC::ioWait()>
c00243ef:	83 c4 10             	add    esp,0x10
c00243f2:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00243f8:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00243fc:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00243ff:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0024402:	ee                   	out    dx,al
c0024403:	83 ec 0c             	sub    esp,0xc
c0024406:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024409:	e8 1e fe ff ff       	call   c002422c <PIC::ioWait()>
c002440e:	83 c4 10             	add    esp,0x10
c0024411:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0024417:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002441b:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002441e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024421:	ee                   	out    dx,al
c0024422:	83 ec 0c             	sub    esp,0xc
c0024425:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024428:	e8 ff fd ff ff       	call   c002422c <PIC::ioWait()>
c002442d:	83 c4 10             	add    esp,0x10
c0024430:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0024436:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c002443a:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c002443d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0024440:	ee                   	out    dx,al
c0024441:	83 ec 0c             	sub    esp,0xc
c0024444:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024447:	e8 e0 fd ff ff       	call   c002422c <PIC::ioWait()>
c002444c:	83 c4 10             	add    esp,0x10
c002444f:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0024455:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0024459:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002445c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002445f:	ee                   	out    dx,al
c0024460:	83 ec 0c             	sub    esp,0xc
c0024463:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024466:	e8 c1 fd ff ff       	call   c002422c <PIC::ioWait()>
c002446b:	83 c4 10             	add    esp,0x10
c002446e:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0024472:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0024478:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c002447b:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002447e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024481:	ee                   	out    dx,al
c0024482:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0024486:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002448c:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002448f:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0024492:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0024495:	ee                   	out    dx,al
c0024496:	90                   	nop
c0024497:	c9                   	leave  
c0024498:	c3                   	ret    
c0024499:	90                   	nop

c002449a <PIC::open(int, int, void*)>:
c002449a:	55                   	push   ebp
c002449b:	89 e5                	mov    ebp,esp
c002449d:	83 ec 18             	sub    esp,0x18
c00244a0:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00244a6:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00244aa:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00244ad:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00244b1:	ee                   	out    dx,al
c00244b2:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00244b8:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00244bc:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00244bf:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00244c3:	ee                   	out    dx,al
c00244c4:	83 ec 0c             	sub    esp,0xc
c00244c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00244ca:	e8 5f fe ff ff       	call   c002432e <PIC::remap()>
c00244cf:	83 c4 10             	add    esp,0x10
c00244d2:	b8 00 00 00 00       	mov    eax,0x0
c00244d7:	c9                   	leave  
c00244d8:	c3                   	ret    
c00244d9:	90                   	nop

c00244da <APICTimer::close(int, int, void*)>:
c00244da:	b8 00 00 00 00       	mov    eax,0x0
c00244df:	c3                   	ret    

c00244e0 <apicTimerHandler(regs*, void*)>:
c00244e0:	83 ec 0c             	sub    esp,0xc
c00244e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00244e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00244e9:	99                   	cdq    
c00244ea:	52                   	push   edx
c00244eb:	50                   	push   eax
c00244ec:	6a 00                	push   0x0
c00244ee:	68 00 ca 9a 3b       	push   0x3b9aca00
c00244f3:	e8 84 07 00 00       	call   c0024c7c <__udivdi3>
c00244f8:	83 c4 10             	add    esp,0x10
c00244fb:	83 ec 08             	sub    esp,0x8
c00244fe:	52                   	push   edx
c00244ff:	50                   	push   eax
c0024500:	e8 d2 1d ff ff       	call   c00162d7 <timerHandler(unsigned long long)>
c0024505:	83 c4 10             	add    esp,0x10
c0024508:	90                   	nop
c0024509:	83 c4 0c             	add    esp,0xc
c002450c:	c3                   	ret    
c002450d:	90                   	nop

c002450e <APICTimer::write(int)>:
c002450e:	53                   	push   ebx
c002450f:	83 ec 28             	sub    esp,0x28
c0024512:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024516:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002451a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024520:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c0024525:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002452b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0024531:	83 ec 0c             	sub    esp,0xc
c0024534:	50                   	push   eax
c0024535:	e8 de f4 ff ff       	call   c0023a18 <APIC::getBase()>
c002453a:	83 c4 10             	add    esp,0x10
c002453d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024541:	a1 90 c8 02 c0       	mov    eax,ds:0xc002c890
c0024546:	8b 15 94 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c894
c002454c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024550:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0024554:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024558:	05 e0 03 00 00       	add    eax,0x3e0
c002455d:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0024563:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024567:	05 80 03 00 00       	add    eax,0x380
c002456c:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0024572:	fb                   	sti    
c0024573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024577:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002457b:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0024580:	83 d2 00             	adc    edx,0x0
c0024583:	89 c1                	mov    ecx,eax
c0024585:	89 d3                	mov    ebx,edx
c0024587:	a1 90 c8 02 c0       	mov    eax,ds:0xc002c890
c002458c:	8b 15 94 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c894
c0024592:	39 c8                	cmp    eax,ecx
c0024594:	89 d0                	mov    eax,edx
c0024596:	19 d8                	sbb    eax,ebx
c0024598:	73 02                	jae    c002459c <APICTimer::write(int)+0x8e>
c002459a:	eb d7                	jmp    c0024573 <APICTimer::write(int)+0x65>
c002459c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00245a0:	05 20 03 00 00       	add    eax,0x320
c00245a5:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00245ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00245af:	05 90 03 00 00       	add    eax,0x390
c00245b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00245b6:	f7 d0                	not    eax
c00245b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00245bc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00245c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00245c4:	ba 00 00 00 00       	mov    edx,0x0
c00245c9:	f7 f3                	div    ebx
c00245cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00245cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00245d3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00245d9:	0d 00 00 02 00       	or     eax,0x20000
c00245de:	89 c2                	mov    edx,eax
c00245e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00245e4:	05 20 03 00 00       	add    eax,0x320
c00245e9:	89 10                	mov    DWORD PTR [eax],edx
c00245eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00245ef:	05 e0 03 00 00       	add    eax,0x3e0
c00245f4:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00245fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00245fe:	05 80 03 00 00       	add    eax,0x380
c0024603:	89 c2                	mov    edx,eax
c0024605:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024609:	89 02                	mov    DWORD PTR [edx],eax
c002460b:	90                   	nop
c002460c:	83 c4 28             	add    esp,0x28
c002460f:	5b                   	pop    ebx
c0024610:	c3                   	ret    
c0024611:	90                   	nop

c0024612 <APICTimer::open(int, int, void*)>:
c0024612:	57                   	push   edi
c0024613:	56                   	push   esi
c0024614:	53                   	push   ebx
c0024615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024619:	8b 00                	mov    eax,DWORD PTR [eax]
c002461b:	83 c0 24             	add    eax,0x24
c002461e:	8b 00                	mov    eax,DWORD PTR [eax]
c0024620:	83 ec 08             	sub    esp,0x8
c0024623:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024627:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002462b:	ff d0                	call   eax
c002462d:	83 c4 10             	add    esp,0x10
c0024630:	a1 28 c2 02 c0       	mov    eax,ds:0xc002c228
c0024635:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002463b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0024641:	83 ec 0c             	sub    esp,0xc
c0024644:	50                   	push   eax
c0024645:	e8 ce f3 ff ff       	call   c0023a18 <APIC::getBase()>
c002464a:	83 c4 10             	add    esp,0x10
c002464d:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0024653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024657:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002465d:	0f b6 f8             	movzx  edi,al
c0024660:	89 d0                	mov    eax,edx
c0024662:	ba 00 00 00 00       	mov    edx,0x0
c0024667:	89 c1                	mov    ecx,eax
c0024669:	80 e5 ff             	and    ch,0xff
c002466c:	89 cb                	mov    ebx,ecx
c002466e:	0f b6 f2             	movzx  esi,dl
c0024671:	89 d8                	mov    eax,ebx
c0024673:	89 f2                	mov    edx,esi
c0024675:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024679:	8d 5f 08             	lea    ebx,[edi+0x8]
c002467c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024680:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024684:	83 e0 00             	and    eax,0x0
c0024687:	09 d0                	or     eax,edx
c0024689:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002468d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024691:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024697:	8d 50 01             	lea    edx,[eax+0x1]
c002469a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002469e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00246a4:	0f b6 d0             	movzx  edx,al
c00246a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246ab:	83 c2 08             	add    edx,0x8
c00246ae:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00246b2:	0f b6 c9             	movzx  ecx,cl
c00246b5:	81 c9 00 00 01 00    	or     ecx,0x10000
c00246bb:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00246bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00246c7:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00246cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00246d5:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00246db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00246df:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00246e5:	83 ec 0c             	sub    esp,0xc
c00246e8:	51                   	push   ecx
c00246e9:	6a 01                	push   0x1
c00246eb:	68 e0 44 02 c0       	push   0xc00244e0
c00246f0:	52                   	push   edx
c00246f1:	50                   	push   eax
c00246f2:	e8 1d f3 fe ff       	call   c0013a14 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00246f7:	83 c4 20             	add    esp,0x20
c00246fa:	89 c2                	mov    edx,eax
c00246fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024700:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0024706:	b8 00 00 00 00       	mov    eax,0x0
c002470b:	5b                   	pop    ebx
c002470c:	5e                   	pop    esi
c002470d:	5f                   	pop    edi
c002470e:	c3                   	ret    
c002470f:	90                   	nop

c0024710 <APICTimer::APICTimer()>:
c0024710:	83 ec 0c             	sub    esp,0xc
c0024713:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024717:	83 ec 08             	sub    esp,0x8
c002471a:	68 b0 b0 02 c0       	push   0xc002b0b0
c002471f:	50                   	push   eax
c0024720:	e8 23 1b ff ff       	call   c0016248 <Timer::Timer(char const*)>
c0024725:	83 c4 10             	add    esp,0x10
c0024728:	ba c4 b0 02 c0       	mov    edx,0xc002b0c4
c002472d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024731:	89 10                	mov    DWORD PTR [eax],edx
c0024733:	90                   	nop
c0024734:	83 c4 0c             	add    esp,0xc
c0024737:	c3                   	ret    

c0024738 <PIT::write(int)>:
c0024738:	83 ec 10             	sub    esp,0x10
c002473b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002473f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0024743:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024749:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002474d:	a3 a4 e5 02 c0       	mov    ds:0xc002e5a4,eax
c0024752:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0024757:	99                   	cdq    
c0024758:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002475c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024760:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0024767:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002476c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0024770:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0024775:	ee                   	out    dx,al
c0024776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002477a:	0f b6 c0             	movzx  eax,al
c002477d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0024784:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0024788:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002478c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0024791:	ee                   	out    dx,al
c0024792:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024796:	c1 f8 08             	sar    eax,0x8
c0024799:	0f b6 c0             	movzx  eax,al
c002479c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00247a3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00247a7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00247ab:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00247b0:	ee                   	out    dx,al
c00247b1:	90                   	nop
c00247b2:	83 c4 10             	add    esp,0x10
c00247b5:	c3                   	ret    

c00247b6 <pitHandler(regs*, void*)>:
c00247b6:	83 ec 0c             	sub    esp,0xc
c00247b9:	a1 a4 e5 02 c0       	mov    eax,ds:0xc002e5a4
c00247be:	99                   	cdq    
c00247bf:	52                   	push   edx
c00247c0:	50                   	push   eax
c00247c1:	6a 00                	push   0x0
c00247c3:	68 00 ca 9a 3b       	push   0x3b9aca00
c00247c8:	e8 af 04 00 00       	call   c0024c7c <__udivdi3>
c00247cd:	83 c4 10             	add    esp,0x10
c00247d0:	83 ec 08             	sub    esp,0x8
c00247d3:	52                   	push   edx
c00247d4:	50                   	push   eax
c00247d5:	e8 fd 1a ff ff       	call   c00162d7 <timerHandler(unsigned long long)>
c00247da:	83 c4 10             	add    esp,0x10
c00247dd:	90                   	nop
c00247de:	83 c4 0c             	add    esp,0xc
c00247e1:	c3                   	ret    

c00247e2 <PIT::open(int, int, void*)>:
c00247e2:	83 ec 0c             	sub    esp,0xc
c00247e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00247eb:	83 c0 24             	add    eax,0x24
c00247ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00247f0:	83 ec 08             	sub    esp,0x8
c00247f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00247f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00247fb:	ff d0                	call   eax
c00247fd:	83 c4 10             	add    esp,0x10
c0024800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024804:	83 ec 0c             	sub    esp,0xc
c0024807:	6a 00                	push   0x0
c0024809:	6a 01                	push   0x1
c002480b:	68 b6 47 02 c0       	push   0xc00247b6
c0024810:	6a 00                	push   0x0
c0024812:	50                   	push   eax
c0024813:	e8 fc f1 fe ff       	call   c0013a14 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024818:	83 c4 20             	add    esp,0x20
c002481b:	89 c2                	mov    edx,eax
c002481d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024821:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0024827:	b8 00 00 00 00       	mov    eax,0x0
c002482c:	83 c4 0c             	add    esp,0xc
c002482f:	c3                   	ret    

c0024830 <PIT::close(int, int, void*)>:
c0024830:	83 ec 0c             	sub    esp,0xc
c0024833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024837:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0024841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024845:	6a 01                	push   0x1
c0024847:	68 b6 47 02 c0       	push   0xc00247b6
c002484c:	6a 00                	push   0x0
c002484e:	50                   	push   eax
c002484f:	e8 fe f1 fe ff       	call   c0013a52 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0024854:	83 c4 10             	add    esp,0x10
c0024857:	b8 00 00 00 00       	mov    eax,0x0
c002485c:	83 c4 0c             	add    esp,0xc
c002485f:	c3                   	ret    

c0024860 <PIT::PIT()>:
c0024860:	83 ec 0c             	sub    esp,0xc
c0024863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024867:	83 ec 08             	sub    esp,0x8
c002486a:	68 ec b0 02 c0       	push   0xc002b0ec
c002486f:	50                   	push   eax
c0024870:	e8 d3 19 ff ff       	call   c0016248 <Timer::Timer(char const*)>
c0024875:	83 c4 10             	add    esp,0x10
c0024878:	ba 14 b1 02 c0       	mov    edx,0xc002b114
c002487d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024881:	89 10                	mov    DWORD PTR [eax],edx
c0024883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024887:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002488d:	0f b6 d0             	movzx  edx,al
c0024890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024894:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002489b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002489f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00248a5:	0f b6 d0             	movzx  edx,al
c00248a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248ac:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00248b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248b5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00248bb:	8d 50 01             	lea    edx,[eax+0x1]
c00248be:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00248c2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00248c8:	0f b6 d0             	movzx  edx,al
c00248cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248cf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00248d3:	83 e1 3f             	and    ecx,0x3f
c00248d6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00248da:	90                   	nop
c00248db:	83 c4 0c             	add    esp,0xc
c00248de:	c3                   	ret    
c00248df:	90                   	nop

c00248e0 <avxDetect>:
c00248e0:	b8 00 00 00 00       	mov    eax,0x0
c00248e5:	c3                   	ret    

c00248e6 <avxSave>:
c00248e6:	c3                   	ret    

c00248e7 <avxLoad>:
c00248e7:	c3                   	ret    

c00248e8 <avxInit>:
c00248e8:	c3                   	ret    

c00248e9 <avxClose>:
c00248e9:	c3                   	ret    

c00248ea <wouldSheSayYes>:
c00248ea:	c3                   	ret    
c00248eb:	49                   	dec    ecx
c00248ec:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00248f0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00248f4:	75 20                	jne    c0024916 <sseDetect.noSSE+0x1>
c00248f6:	4e                   	dec    esi
c00248f7:	79 61                	jns    c002495a <x87Detect+0x14>
c00248f9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00248fe:	66 90                	xchg   ax,ax

c0024900 <absolutelyNoChanceInHell>:
c0024900:	b8 01 00 00 00       	mov    eax,0x1
c0024905:	0f a2                	cpuid  
c0024907:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002490d:	74 06                	je     c0024915 <sseDetect.noSSE>
c002490f:	b8 01 00 00 00       	mov    eax,0x1
c0024914:	c3                   	ret    

c0024915 <sseDetect.noSSE>:
c0024915:	31 c0                	xor    eax,eax
c0024917:	c3                   	ret    

c0024918 <sseSave>:
c0024918:	0f ae 44 24 08       	fxsave [esp+0x8]
c002491d:	c3                   	ret    

c002491e <sseLoad>:
c002491e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0024923:	c3                   	ret    

c0024924 <sseInit>:
c0024924:	e8 43 00 00 00       	call   c002496c <x87Init>
c0024929:	0f 20 e0             	mov    eax,cr4
c002492c:	66 0d 00 06          	or     ax,0x600
c0024930:	0f 22 e0             	mov    cr4,eax
c0024933:	c3                   	ret    

c0024934 <sseClose>:
c0024934:	c3                   	ret    
c0024935:	66 90                	xchg   ax,ax
c0024937:	66 90                	xchg   ax,ax
c0024939:	66 90                	xchg   ax,ax
c002493b:	66 90                	xchg   ax,ax
c002493d:	66 90                	xchg   ax,ax
c002493f:	90                   	nop

c0024940 <value_37F>:
c0024940:	7f 03                	jg     c0024945 <value_37A+0x1>

c0024942 <value_37E>:
c0024942:	7e 03                	jle    c0024947 <x87Detect+0x1>

c0024944 <value_37A>:
c0024944:	7a 03                	jp     c0024949 <x87Detect+0x3>

c0024946 <x87Detect>:
c0024946:	b8 01 00 00 00       	mov    eax,0x1
c002494b:	0f a2                	cpuid  
c002494d:	f7 c2 01 00 00 00    	test   edx,0x1
c0024953:	74 06                	je     c002495b <x87Detect.nox87>
c0024955:	b8 01 00 00 00       	mov    eax,0x1
c002495a:	c3                   	ret    

c002495b <x87Detect.nox87>:
c002495b:	b8 00 00 00 00       	mov    eax,0x0
c0024960:	c3                   	ret    

c0024961 <x87Save>:
c0024961:	9b dd 74 24 08       	fsave  [esp+0x8]
c0024966:	c3                   	ret    

c0024967 <x87Load>:
c0024967:	dd 64 24 08          	frstor [esp+0x8]
c002496b:	c3                   	ret    

c002496c <x87Init>:
c002496c:	9b db e3             	finit  
c002496f:	0f 20 c0             	mov    eax,cr0
c0024972:	66 25 fb ff          	and    ax,0xfffb
c0024976:	66 0d 22 00          	or     ax,0x22
c002497a:	0f 22 c0             	mov    cr0,eax
c002497d:	0f 06                	clts   
c002497f:	d9 2d 44 49 02 c0    	fldcw  WORD PTR ds:0xc0024944
c0024985:	c3                   	ret    

c0024986 <x87Close>:
c0024986:	c3                   	ret    
c0024987:	90                   	nop

c0024988 <__do_global_ctors_aux>:
c0024988:	a1 7c 74 02 c0       	mov    eax,ds:0xc002747c
c002498d:	83 f8 ff             	cmp    eax,0xffffffff
c0024990:	74 1a                	je     c00249ac <__do_global_ctors_aux+0x24>
c0024992:	55                   	push   ebp
c0024993:	89 e5                	mov    ebp,esp
c0024995:	53                   	push   ebx
c0024996:	52                   	push   edx
c0024997:	bb 7c 74 02 c0       	mov    ebx,0xc002747c
c002499c:	ff d0                	call   eax
c002499e:	83 eb 04             	sub    ebx,0x4
c00249a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00249a3:	83 f8 ff             	cmp    eax,0xffffffff
c00249a6:	75 f4                	jne    c002499c <__do_global_ctors_aux+0x14>
c00249a8:	58                   	pop    eax
c00249a9:	5b                   	pop    ebx
c00249aa:	5d                   	pop    ebp
c00249ab:	c3                   	ret    
c00249ac:	c3                   	ret    
c00249ad:	66 90                	xchg   ax,ax
c00249af:	90                   	nop

c00249b0 <__divdi3>:
c00249b0:	55                   	push   ebp
c00249b1:	57                   	push   edi
c00249b2:	56                   	push   esi
c00249b3:	53                   	push   ebx
c00249b4:	83 ec 1c             	sub    esp,0x1c
c00249b7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00249bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00249bf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00249c2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00249c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00249ca:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00249ce:	85 db                	test   ebx,ebx
c00249d0:	0f 88 8e 00 00 00    	js     c0024a64 <__divdi3+0xb4>
c00249d6:	89 dd                	mov    ebp,ebx
c00249d8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00249e0:	89 d3                	mov    ebx,edx
c00249e2:	85 d2                	test   edx,edx
c00249e4:	79 0d                	jns    c00249f3 <__divdi3+0x43>
c00249e6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00249ea:	f7 d8                	neg    eax
c00249ec:	83 d2 00             	adc    edx,0x0
c00249ef:	f7 da                	neg    edx
c00249f1:	89 d3                	mov    ebx,edx
c00249f3:	89 c7                	mov    edi,eax
c00249f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00249f8:	85 db                	test   ebx,ebx
c00249fa:	75 48                	jne    c0024a44 <__divdi3+0x94>
c00249fc:	39 ef                	cmp    edi,ebp
c00249fe:	76 24                	jbe    c0024a24 <__divdi3+0x74>
c0024a00:	89 ea                	mov    edx,ebp
c0024a02:	f7 f7                	div    edi
c0024a04:	89 c1                	mov    ecx,eax
c0024a06:	31 f6                	xor    esi,esi
c0024a08:	89 c8                	mov    eax,ecx
c0024a0a:	89 f2                	mov    edx,esi
c0024a0c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024a10:	85 c9                	test   ecx,ecx
c0024a12:	74 07                	je     c0024a1b <__divdi3+0x6b>
c0024a14:	f7 d8                	neg    eax
c0024a16:	83 d2 00             	adc    edx,0x0
c0024a19:	f7 da                	neg    edx
c0024a1b:	83 c4 1c             	add    esp,0x1c
c0024a1e:	5b                   	pop    ebx
c0024a1f:	5e                   	pop    esi
c0024a20:	5f                   	pop    edi
c0024a21:	5d                   	pop    ebp
c0024a22:	c3                   	ret    
c0024a23:	90                   	nop
c0024a24:	85 ff                	test   edi,edi
c0024a26:	75 0b                	jne    c0024a33 <__divdi3+0x83>
c0024a28:	b8 01 00 00 00       	mov    eax,0x1
c0024a2d:	31 d2                	xor    edx,edx
c0024a2f:	f7 f3                	div    ebx
c0024a31:	89 c7                	mov    edi,eax
c0024a33:	31 d2                	xor    edx,edx
c0024a35:	89 e8                	mov    eax,ebp
c0024a37:	f7 f7                	div    edi
c0024a39:	89 c6                	mov    esi,eax
c0024a3b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0024a3e:	f7 f7                	div    edi
c0024a40:	89 c1                	mov    ecx,eax
c0024a42:	eb c4                	jmp    c0024a08 <__divdi3+0x58>
c0024a44:	39 eb                	cmp    ebx,ebp
c0024a46:	77 3c                	ja     c0024a84 <__divdi3+0xd4>
c0024a48:	0f bd f3             	bsr    esi,ebx
c0024a4b:	83 f6 1f             	xor    esi,0x1f
c0024a4e:	75 40                	jne    c0024a90 <__divdi3+0xe0>
c0024a50:	39 eb                	cmp    ebx,ebp
c0024a52:	72 09                	jb     c0024a5d <__divdi3+0xad>
c0024a54:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0024a57:	0f 87 97 00 00 00    	ja     c0024af4 <__divdi3+0x144>
c0024a5d:	b9 01 00 00 00       	mov    ecx,0x1
c0024a62:	eb a4                	jmp    c0024a08 <__divdi3+0x58>
c0024a64:	f7 d9                	neg    ecx
c0024a66:	83 d3 00             	adc    ebx,0x0
c0024a69:	f7 db                	neg    ebx
c0024a6b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0024a6e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0024a72:	89 dd                	mov    ebp,ebx
c0024a74:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0024a7c:	e9 5f ff ff ff       	jmp    c00249e0 <__divdi3+0x30>
c0024a81:	8d 76 00             	lea    esi,[esi+0x0]
c0024a84:	31 f6                	xor    esi,esi
c0024a86:	31 c9                	xor    ecx,ecx
c0024a88:	e9 7b ff ff ff       	jmp    c0024a08 <__divdi3+0x58>
c0024a8d:	8d 76 00             	lea    esi,[esi+0x0]
c0024a90:	b8 20 00 00 00       	mov    eax,0x20
c0024a95:	29 f0                	sub    eax,esi
c0024a97:	89 f1                	mov    ecx,esi
c0024a99:	d3 e3                	shl    ebx,cl
c0024a9b:	89 fa                	mov    edx,edi
c0024a9d:	88 c1                	mov    cl,al
c0024a9f:	d3 ea                	shr    edx,cl
c0024aa1:	09 da                	or     edx,ebx
c0024aa3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024aa7:	89 f1                	mov    ecx,esi
c0024aa9:	d3 e7                	shl    edi,cl
c0024aab:	89 eb                	mov    ebx,ebp
c0024aad:	88 c1                	mov    cl,al
c0024aaf:	d3 eb                	shr    ebx,cl
c0024ab1:	89 f1                	mov    ecx,esi
c0024ab3:	d3 e5                	shl    ebp,cl
c0024ab5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0024ab8:	88 c1                	mov    cl,al
c0024aba:	d3 ea                	shr    edx,cl
c0024abc:	09 d5                	or     ebp,edx
c0024abe:	89 e8                	mov    eax,ebp
c0024ac0:	89 da                	mov    edx,ebx
c0024ac2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0024ac6:	89 d3                	mov    ebx,edx
c0024ac8:	89 c5                	mov    ebp,eax
c0024aca:	f7 e7                	mul    edi
c0024acc:	39 d3                	cmp    ebx,edx
c0024ace:	72 18                	jb     c0024ae8 <__divdi3+0x138>
c0024ad0:	74 0a                	je     c0024adc <__divdi3+0x12c>
c0024ad2:	89 e9                	mov    ecx,ebp
c0024ad4:	31 f6                	xor    esi,esi
c0024ad6:	e9 2d ff ff ff       	jmp    c0024a08 <__divdi3+0x58>
c0024adb:	90                   	nop
c0024adc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0024adf:	89 f1                	mov    ecx,esi
c0024ae1:	d3 e7                	shl    edi,cl
c0024ae3:	39 c7                	cmp    edi,eax
c0024ae5:	73 eb                	jae    c0024ad2 <__divdi3+0x122>
c0024ae7:	90                   	nop
c0024ae8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0024aeb:	31 f6                	xor    esi,esi
c0024aed:	e9 16 ff ff ff       	jmp    c0024a08 <__divdi3+0x58>
c0024af2:	66 90                	xchg   ax,ax
c0024af4:	31 c9                	xor    ecx,ecx
c0024af6:	e9 0d ff ff ff       	jmp    c0024a08 <__divdi3+0x58>
c0024afb:	90                   	nop

c0024afc <__moddi3>:
c0024afc:	55                   	push   ebp
c0024afd:	57                   	push   edi
c0024afe:	56                   	push   esi
c0024aff:	53                   	push   ebx
c0024b00:	83 ec 2c             	sub    esp,0x2c
c0024b03:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0024b07:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0024b0b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024b0f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0024b13:	85 db                	test   ebx,ebx
c0024b15:	0f 88 85 00 00 00    	js     c0024ba0 <__moddi3+0xa4>
c0024b1b:	89 de                	mov    esi,ebx
c0024b1d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0024b25:	89 d7                	mov    edi,edx
c0024b27:	85 d2                	test   edx,edx
c0024b29:	79 09                	jns    c0024b34 <__moddi3+0x38>
c0024b2b:	f7 d8                	neg    eax
c0024b2d:	83 d2 00             	adc    edx,0x0
c0024b30:	f7 da                	neg    edx
c0024b32:	89 d7                	mov    edi,edx
c0024b34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024b38:	89 cd                	mov    ebp,ecx
c0024b3a:	85 ff                	test   edi,edi
c0024b3c:	75 52                	jne    c0024b90 <__moddi3+0x94>
c0024b3e:	89 c3                	mov    ebx,eax
c0024b40:	39 f0                	cmp    eax,esi
c0024b42:	76 24                	jbe    c0024b68 <__moddi3+0x6c>
c0024b44:	89 c8                	mov    eax,ecx
c0024b46:	89 f2                	mov    edx,esi
c0024b48:	f7 f3                	div    ebx
c0024b4a:	89 d6                	mov    esi,edx
c0024b4c:	89 f0                	mov    eax,esi
c0024b4e:	31 d2                	xor    edx,edx
c0024b50:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024b54:	85 c9                	test   ecx,ecx
c0024b56:	74 07                	je     c0024b5f <__moddi3+0x63>
c0024b58:	f7 d8                	neg    eax
c0024b5a:	83 d2 00             	adc    edx,0x0
c0024b5d:	f7 da                	neg    edx
c0024b5f:	83 c4 2c             	add    esp,0x2c
c0024b62:	5b                   	pop    ebx
c0024b63:	5e                   	pop    esi
c0024b64:	5f                   	pop    edi
c0024b65:	5d                   	pop    ebp
c0024b66:	c3                   	ret    
c0024b67:	90                   	nop
c0024b68:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0024b6c:	85 db                	test   ebx,ebx
c0024b6e:	75 0d                	jne    c0024b7d <__moddi3+0x81>
c0024b70:	b8 01 00 00 00       	mov    eax,0x1
c0024b75:	31 d2                	xor    edx,edx
c0024b77:	f7 f7                	div    edi
c0024b79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024b7d:	89 f0                	mov    eax,esi
c0024b7f:	31 d2                	xor    edx,edx
c0024b81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0024b85:	f7 f7                	div    edi
c0024b87:	89 e8                	mov    eax,ebp
c0024b89:	f7 f7                	div    edi
c0024b8b:	89 d6                	mov    esi,edx
c0024b8d:	eb bd                	jmp    c0024b4c <__moddi3+0x50>
c0024b8f:	90                   	nop
c0024b90:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0024b94:	39 f7                	cmp    edi,esi
c0024b96:	76 20                	jbe    c0024bb8 <__moddi3+0xbc>
c0024b98:	89 c8                	mov    eax,ecx
c0024b9a:	89 f2                	mov    edx,esi
c0024b9c:	eb b2                	jmp    c0024b50 <__moddi3+0x54>
c0024b9e:	66 90                	xchg   ax,ax
c0024ba0:	f7 d9                	neg    ecx
c0024ba2:	83 d3 00             	adc    ebx,0x0
c0024ba5:	f7 db                	neg    ebx
c0024ba7:	89 de                	mov    esi,ebx
c0024ba9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0024bb1:	e9 6f ff ff ff       	jmp    c0024b25 <__moddi3+0x29>
c0024bb6:	66 90                	xchg   ax,ax
c0024bb8:	0f bd c7             	bsr    eax,edi
c0024bbb:	83 f0 1f             	xor    eax,0x1f
c0024bbe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024bc2:	75 24                	jne    c0024be8 <__moddi3+0xec>
c0024bc4:	39 f7                	cmp    edi,esi
c0024bc6:	72 06                	jb     c0024bce <__moddi3+0xd2>
c0024bc8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0024bcc:	77 0c                	ja     c0024bda <__moddi3+0xde>
c0024bce:	89 e9                	mov    ecx,ebp
c0024bd0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0024bd4:	19 fe                	sbb    esi,edi
c0024bd6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0024bda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024bde:	89 f2                	mov    edx,esi
c0024be0:	e9 6b ff ff ff       	jmp    c0024b50 <__moddi3+0x54>
c0024be5:	8d 76 00             	lea    esi,[esi+0x0]
c0024be8:	b8 20 00 00 00       	mov    eax,0x20
c0024bed:	89 c2                	mov    edx,eax
c0024bef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024bf3:	29 da                	sub    edx,ebx
c0024bf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024bf9:	88 d9                	mov    cl,bl
c0024bfb:	d3 e7                	shl    edi,cl
c0024bfd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024c01:	88 d1                	mov    cl,dl
c0024c03:	d3 e8                	shr    eax,cl
c0024c05:	09 c7                	or     edi,eax
c0024c07:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0024c0b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0024c0f:	89 d8                	mov    eax,ebx
c0024c11:	88 d9                	mov    cl,bl
c0024c13:	d3 e7                	shl    edi,cl
c0024c15:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0024c19:	89 f3                	mov    ebx,esi
c0024c1b:	88 d1                	mov    cl,dl
c0024c1d:	d3 eb                	shr    ebx,cl
c0024c1f:	89 c7                	mov    edi,eax
c0024c21:	88 c1                	mov    cl,al
c0024c23:	d3 e6                	shl    esi,cl
c0024c25:	89 e8                	mov    eax,ebp
c0024c27:	88 d1                	mov    cl,dl
c0024c29:	d3 e8                	shr    eax,cl
c0024c2b:	09 f0                	or     eax,esi
c0024c2d:	89 f9                	mov    ecx,edi
c0024c2f:	d3 e5                	shl    ebp,cl
c0024c31:	89 da                	mov    edx,ebx
c0024c33:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0024c37:	89 d3                	mov    ebx,edx
c0024c39:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0024c3d:	89 c6                	mov    esi,eax
c0024c3f:	89 d1                	mov    ecx,edx
c0024c41:	39 d3                	cmp    ebx,edx
c0024c43:	72 27                	jb     c0024c6c <__moddi3+0x170>
c0024c45:	74 21                	je     c0024c68 <__moddi3+0x16c>
c0024c47:	29 f5                	sub    ebp,esi
c0024c49:	19 cb                	sbb    ebx,ecx
c0024c4b:	89 de                	mov    esi,ebx
c0024c4d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0024c51:	d3 e6                	shl    esi,cl
c0024c53:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0024c57:	89 f9                	mov    ecx,edi
c0024c59:	d3 ed                	shr    ebp,cl
c0024c5b:	09 ee                	or     esi,ebp
c0024c5d:	89 f0                	mov    eax,esi
c0024c5f:	d3 eb                	shr    ebx,cl
c0024c61:	89 da                	mov    edx,ebx
c0024c63:	e9 e8 fe ff ff       	jmp    c0024b50 <__moddi3+0x54>
c0024c68:	39 c5                	cmp    ebp,eax
c0024c6a:	73 db                	jae    c0024c47 <__moddi3+0x14b>
c0024c6c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0024c70:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0024c74:	89 d1                	mov    ecx,edx
c0024c76:	89 c6                	mov    esi,eax
c0024c78:	eb cd                	jmp    c0024c47 <__moddi3+0x14b>
c0024c7a:	66 90                	xchg   ax,ax

c0024c7c <__udivdi3>:
c0024c7c:	55                   	push   ebp
c0024c7d:	57                   	push   edi
c0024c7e:	56                   	push   esi
c0024c7f:	53                   	push   ebx
c0024c80:	83 ec 1c             	sub    esp,0x1c
c0024c83:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024c87:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0024c8b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0024c8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0024c93:	85 d2                	test   edx,edx
c0024c95:	75 41                	jne    c0024cd8 <__udivdi3+0x5c>
c0024c97:	39 f7                	cmp    edi,esi
c0024c99:	76 15                	jbe    c0024cb0 <__udivdi3+0x34>
c0024c9b:	89 e8                	mov    eax,ebp
c0024c9d:	89 f2                	mov    edx,esi
c0024c9f:	f7 f7                	div    edi
c0024ca1:	31 db                	xor    ebx,ebx
c0024ca3:	89 da                	mov    edx,ebx
c0024ca5:	83 c4 1c             	add    esp,0x1c
c0024ca8:	5b                   	pop    ebx
c0024ca9:	5e                   	pop    esi
c0024caa:	5f                   	pop    edi
c0024cab:	5d                   	pop    ebp
c0024cac:	c3                   	ret    
c0024cad:	8d 76 00             	lea    esi,[esi+0x0]
c0024cb0:	89 f9                	mov    ecx,edi
c0024cb2:	85 ff                	test   edi,edi
c0024cb4:	75 0b                	jne    c0024cc1 <__udivdi3+0x45>
c0024cb6:	b8 01 00 00 00       	mov    eax,0x1
c0024cbb:	31 d2                	xor    edx,edx
c0024cbd:	f7 f7                	div    edi
c0024cbf:	89 c1                	mov    ecx,eax
c0024cc1:	31 d2                	xor    edx,edx
c0024cc3:	89 f0                	mov    eax,esi
c0024cc5:	f7 f1                	div    ecx
c0024cc7:	89 c3                	mov    ebx,eax
c0024cc9:	89 e8                	mov    eax,ebp
c0024ccb:	f7 f1                	div    ecx
c0024ccd:	89 da                	mov    edx,ebx
c0024ccf:	83 c4 1c             	add    esp,0x1c
c0024cd2:	5b                   	pop    ebx
c0024cd3:	5e                   	pop    esi
c0024cd4:	5f                   	pop    edi
c0024cd5:	5d                   	pop    ebp
c0024cd6:	c3                   	ret    
c0024cd7:	90                   	nop
c0024cd8:	39 f2                	cmp    edx,esi
c0024cda:	77 1c                	ja     c0024cf8 <__udivdi3+0x7c>
c0024cdc:	0f bd da             	bsr    ebx,edx
c0024cdf:	83 f3 1f             	xor    ebx,0x1f
c0024ce2:	75 24                	jne    c0024d08 <__udivdi3+0x8c>
c0024ce4:	39 f2                	cmp    edx,esi
c0024ce6:	72 08                	jb     c0024cf0 <__udivdi3+0x74>
c0024ce8:	39 ef                	cmp    edi,ebp
c0024cea:	0f 87 84 00 00 00    	ja     c0024d74 <__udivdi3+0xf8>
c0024cf0:	b8 01 00 00 00       	mov    eax,0x1
c0024cf5:	eb ac                	jmp    c0024ca3 <__udivdi3+0x27>
c0024cf7:	90                   	nop
c0024cf8:	31 db                	xor    ebx,ebx
c0024cfa:	31 c0                	xor    eax,eax
c0024cfc:	89 da                	mov    edx,ebx
c0024cfe:	83 c4 1c             	add    esp,0x1c
c0024d01:	5b                   	pop    ebx
c0024d02:	5e                   	pop    esi
c0024d03:	5f                   	pop    edi
c0024d04:	5d                   	pop    ebp
c0024d05:	c3                   	ret    
c0024d06:	66 90                	xchg   ax,ax
c0024d08:	b8 20 00 00 00       	mov    eax,0x20
c0024d0d:	29 d8                	sub    eax,ebx
c0024d0f:	88 d9                	mov    cl,bl
c0024d11:	d3 e2                	shl    edx,cl
c0024d13:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0024d17:	89 fa                	mov    edx,edi
c0024d19:	88 c1                	mov    cl,al
c0024d1b:	d3 ea                	shr    edx,cl
c0024d1d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024d21:	09 d1                	or     ecx,edx
c0024d23:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0024d27:	88 d9                	mov    cl,bl
c0024d29:	d3 e7                	shl    edi,cl
c0024d2b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0024d2f:	89 f7                	mov    edi,esi
c0024d31:	88 c1                	mov    cl,al
c0024d33:	d3 ef                	shr    edi,cl
c0024d35:	88 d9                	mov    cl,bl
c0024d37:	d3 e6                	shl    esi,cl
c0024d39:	89 ea                	mov    edx,ebp
c0024d3b:	88 c1                	mov    cl,al
c0024d3d:	d3 ea                	shr    edx,cl
c0024d3f:	09 d6                	or     esi,edx
c0024d41:	89 f0                	mov    eax,esi
c0024d43:	89 fa                	mov    edx,edi
c0024d45:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0024d49:	89 d7                	mov    edi,edx
c0024d4b:	89 c6                	mov    esi,eax
c0024d4d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0024d51:	39 d7                	cmp    edi,edx
c0024d53:	72 13                	jb     c0024d68 <__udivdi3+0xec>
c0024d55:	74 09                	je     c0024d60 <__udivdi3+0xe4>
c0024d57:	89 f0                	mov    eax,esi
c0024d59:	31 db                	xor    ebx,ebx
c0024d5b:	e9 43 ff ff ff       	jmp    c0024ca3 <__udivdi3+0x27>
c0024d60:	88 d9                	mov    cl,bl
c0024d62:	d3 e5                	shl    ebp,cl
c0024d64:	39 c5                	cmp    ebp,eax
c0024d66:	73 ef                	jae    c0024d57 <__udivdi3+0xdb>
c0024d68:	8d 46 ff             	lea    eax,[esi-0x1]
c0024d6b:	31 db                	xor    ebx,ebx
c0024d6d:	e9 31 ff ff ff       	jmp    c0024ca3 <__udivdi3+0x27>
c0024d72:	66 90                	xchg   ax,ax
c0024d74:	31 c0                	xor    eax,eax
c0024d76:	e9 28 ff ff ff       	jmp    c0024ca3 <__udivdi3+0x27>
c0024d7b:	90                   	nop

c0024d7c <__umoddi3>:
c0024d7c:	55                   	push   ebp
c0024d7d:	57                   	push   edi
c0024d7e:	56                   	push   esi
c0024d7f:	53                   	push   ebx
c0024d80:	83 ec 1c             	sub    esp,0x1c
c0024d83:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024d87:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024d8b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0024d8f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0024d93:	89 da                	mov    edx,ebx
c0024d95:	85 c0                	test   eax,eax
c0024d97:	75 37                	jne    c0024dd0 <__umoddi3+0x54>
c0024d99:	39 df                	cmp    edi,ebx
c0024d9b:	76 13                	jbe    c0024db0 <__umoddi3+0x34>
c0024d9d:	89 f0                	mov    eax,esi
c0024d9f:	f7 f7                	div    edi
c0024da1:	89 d0                	mov    eax,edx
c0024da3:	31 d2                	xor    edx,edx
c0024da5:	83 c4 1c             	add    esp,0x1c
c0024da8:	5b                   	pop    ebx
c0024da9:	5e                   	pop    esi
c0024daa:	5f                   	pop    edi
c0024dab:	5d                   	pop    ebp
c0024dac:	c3                   	ret    
c0024dad:	8d 76 00             	lea    esi,[esi+0x0]
c0024db0:	89 fd                	mov    ebp,edi
c0024db2:	85 ff                	test   edi,edi
c0024db4:	75 0b                	jne    c0024dc1 <__umoddi3+0x45>
c0024db6:	b8 01 00 00 00       	mov    eax,0x1
c0024dbb:	31 d2                	xor    edx,edx
c0024dbd:	f7 f7                	div    edi
c0024dbf:	89 c5                	mov    ebp,eax
c0024dc1:	89 d8                	mov    eax,ebx
c0024dc3:	31 d2                	xor    edx,edx
c0024dc5:	f7 f5                	div    ebp
c0024dc7:	89 f0                	mov    eax,esi
c0024dc9:	f7 f5                	div    ebp
c0024dcb:	89 d0                	mov    eax,edx
c0024dcd:	eb d4                	jmp    c0024da3 <__umoddi3+0x27>
c0024dcf:	90                   	nop
c0024dd0:	89 f1                	mov    ecx,esi
c0024dd2:	39 d8                	cmp    eax,ebx
c0024dd4:	76 0a                	jbe    c0024de0 <__umoddi3+0x64>
c0024dd6:	89 f0                	mov    eax,esi
c0024dd8:	83 c4 1c             	add    esp,0x1c
c0024ddb:	5b                   	pop    ebx
c0024ddc:	5e                   	pop    esi
c0024ddd:	5f                   	pop    edi
c0024dde:	5d                   	pop    ebp
c0024ddf:	c3                   	ret    
c0024de0:	0f bd e8             	bsr    ebp,eax
c0024de3:	83 f5 1f             	xor    ebp,0x1f
c0024de6:	75 1c                	jne    c0024e04 <__umoddi3+0x88>
c0024de8:	39 d8                	cmp    eax,ebx
c0024dea:	72 04                	jb     c0024df0 <__umoddi3+0x74>
c0024dec:	39 f7                	cmp    edi,esi
c0024dee:	77 08                	ja     c0024df8 <__umoddi3+0x7c>
c0024df0:	89 da                	mov    edx,ebx
c0024df2:	29 fe                	sub    esi,edi
c0024df4:	19 c2                	sbb    edx,eax
c0024df6:	89 f1                	mov    ecx,esi
c0024df8:	89 c8                	mov    eax,ecx
c0024dfa:	83 c4 1c             	add    esp,0x1c
c0024dfd:	5b                   	pop    ebx
c0024dfe:	5e                   	pop    esi
c0024dff:	5f                   	pop    edi
c0024e00:	5d                   	pop    ebp
c0024e01:	c3                   	ret    
c0024e02:	66 90                	xchg   ax,ax
c0024e04:	ba 20 00 00 00       	mov    edx,0x20
c0024e09:	29 ea                	sub    edx,ebp
c0024e0b:	89 e9                	mov    ecx,ebp
c0024e0d:	d3 e0                	shl    eax,cl
c0024e0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024e13:	89 f8                	mov    eax,edi
c0024e15:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0024e19:	88 d1                	mov    cl,dl
c0024e1b:	d3 e8                	shr    eax,cl
c0024e1d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024e21:	09 c1                	or     ecx,eax
c0024e23:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0024e27:	89 e9                	mov    ecx,ebp
c0024e29:	d3 e7                	shl    edi,cl
c0024e2b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0024e2f:	89 d8                	mov    eax,ebx
c0024e31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024e35:	88 d1                	mov    cl,dl
c0024e37:	d3 e8                	shr    eax,cl
c0024e39:	89 c7                	mov    edi,eax
c0024e3b:	89 e9                	mov    ecx,ebp
c0024e3d:	d3 e3                	shl    ebx,cl
c0024e3f:	89 f0                	mov    eax,esi
c0024e41:	88 d1                	mov    cl,dl
c0024e43:	d3 e8                	shr    eax,cl
c0024e45:	09 d8                	or     eax,ebx
c0024e47:	89 e9                	mov    ecx,ebp
c0024e49:	d3 e6                	shl    esi,cl
c0024e4b:	89 f3                	mov    ebx,esi
c0024e4d:	89 fa                	mov    edx,edi
c0024e4f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0024e53:	89 d1                	mov    ecx,edx
c0024e55:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0024e59:	89 c6                	mov    esi,eax
c0024e5b:	89 d7                	mov    edi,edx
c0024e5d:	39 d1                	cmp    ecx,edx
c0024e5f:	72 27                	jb     c0024e88 <__umoddi3+0x10c>
c0024e61:	74 21                	je     c0024e84 <__umoddi3+0x108>
c0024e63:	89 ca                	mov    edx,ecx
c0024e65:	29 f3                	sub    ebx,esi
c0024e67:	19 fa                	sbb    edx,edi
c0024e69:	89 d0                	mov    eax,edx
c0024e6b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0024e6f:	d3 e0                	shl    eax,cl
c0024e71:	89 e9                	mov    ecx,ebp
c0024e73:	d3 eb                	shr    ebx,cl
c0024e75:	09 d8                	or     eax,ebx
c0024e77:	d3 ea                	shr    edx,cl
c0024e79:	83 c4 1c             	add    esp,0x1c
c0024e7c:	5b                   	pop    ebx
c0024e7d:	5e                   	pop    esi
c0024e7e:	5f                   	pop    edi
c0024e7f:	5d                   	pop    ebp
c0024e80:	c3                   	ret    
c0024e81:	8d 76 00             	lea    esi,[esi+0x0]
c0024e84:	39 c3                	cmp    ebx,eax
c0024e86:	73 db                	jae    c0024e63 <__umoddi3+0xe7>
c0024e88:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0024e8c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0024e90:	89 d7                	mov    edi,edx
c0024e92:	89 c6                	mov    esi,eax
c0024e94:	eb cd                	jmp    c0024e63 <__umoddi3+0xe7>

c0024e96 <__addsf3>:
c0024e96:	55                   	push   ebp
c0024e97:	89 e5                	mov    ebp,esp
c0024e99:	57                   	push   edi
c0024e9a:	56                   	push   esi
c0024e9b:	53                   	push   ebx
c0024e9c:	83 ec 08             	sub    esp,0x8
c0024e9f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0024ea2:	89 fa                	mov    edx,edi
c0024ea4:	89 f8                	mov    eax,edi
c0024ea6:	c1 f8 17             	sar    eax,0x17
c0024ea9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0024eac:	c1 e2 08             	shl    edx,0x8
c0024eaf:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0024eb5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0024eb8:	89 de                	mov    esi,ebx
c0024eba:	c1 fe 17             	sar    esi,0x17
c0024ebd:	c1 e3 08             	shl    ebx,0x8
c0024ec0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0024ec6:	31 f0                	xor    eax,esi
c0024ec8:	0f 88 3b 01 00 00    	js     c0025009 <__addsf3+0x173>
c0024ece:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0024ed1:	29 f1                	sub    ecx,esi
c0024ed3:	85 c9                	test   ecx,ecx
c0024ed5:	7e 54                	jle    c0024f2b <__addsf3+0x95>
c0024ed7:	89 f0                	mov    eax,esi
c0024ed9:	84 c0                	test   al,al
c0024edb:	75 10                	jne    c0024eed <__addsf3+0x57>
c0024edd:	85 db                	test   ebx,ebx
c0024edf:	0f 84 aa 02 00 00    	je     c002518f <__addsf3+0x2f9>
c0024ee5:	49                   	dec    ecx
c0024ee6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0024ee9:	74 38                	je     c0024f23 <__addsf3+0x8d>
c0024eeb:	eb 13                	jmp    c0024f00 <__addsf3+0x6a>
c0024eed:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024ef0:	f7 d0                	not    eax
c0024ef2:	84 c0                	test   al,al
c0024ef4:	0f 84 95 02 00 00    	je     c002518f <__addsf3+0x2f9>
c0024efa:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0024f00:	83 f9 1f             	cmp    ecx,0x1f
c0024f03:	0f 8f 86 02 00 00    	jg     c002518f <__addsf3+0x2f9>
c0024f09:	89 de                	mov    esi,ebx
c0024f0b:	d3 ee                	shr    esi,cl
c0024f0d:	b8 20 00 00 00       	mov    eax,0x20
c0024f12:	29 c8                	sub    eax,ecx
c0024f14:	89 c1                	mov    ecx,eax
c0024f16:	d3 e3                	shl    ebx,cl
c0024f18:	31 c0                	xor    eax,eax
c0024f1a:	85 db                	test   ebx,ebx
c0024f1c:	0f 95 c0             	setne  al
c0024f1f:	09 f0                	or     eax,esi
c0024f21:	01 d0                	add    eax,edx
c0024f23:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0024f26:	e9 b6 00 00 00       	jmp    c0024fe1 <__addsf3+0x14b>
c0024f2b:	74 5c                	je     c0024f89 <__addsf3+0xf3>
c0024f2d:	89 f1                	mov    ecx,esi
c0024f2f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0024f32:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0024f35:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0024f39:	75 14                	jne    c0024f4f <__addsf3+0xb9>
c0024f3b:	85 d2                	test   edx,edx
c0024f3d:	0f 84 4c 02 00 00    	je     c002518f <__addsf3+0x2f9>
c0024f43:	49                   	dec    ecx
c0024f44:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0024f47:	0f 84 94 00 00 00    	je     c0024fe1 <__addsf3+0x14b>
c0024f4d:	eb 12                	jmp    c0024f61 <__addsf3+0xcb>
c0024f4f:	89 f0                	mov    eax,esi
c0024f51:	f7 d0                	not    eax
c0024f53:	84 c0                	test   al,al
c0024f55:	0f 84 34 02 00 00    	je     c002518f <__addsf3+0x2f9>
c0024f5b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024f61:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0024f64:	83 f9 1f             	cmp    ecx,0x1f
c0024f67:	0f 8f 22 02 00 00    	jg     c002518f <__addsf3+0x2f9>
c0024f6d:	89 d7                	mov    edi,edx
c0024f6f:	d3 ef                	shr    edi,cl
c0024f71:	b8 20 00 00 00       	mov    eax,0x20
c0024f76:	29 c8                	sub    eax,ecx
c0024f78:	89 c1                	mov    ecx,eax
c0024f7a:	d3 e2                	shl    edx,cl
c0024f7c:	31 c0                	xor    eax,eax
c0024f7e:	85 d2                	test   edx,edx
c0024f80:	0f 95 c0             	setne  al
c0024f83:	09 f8                	or     eax,edi
c0024f85:	01 d8                	add    eax,ebx
c0024f87:	eb 58                	jmp    c0024fe1 <__addsf3+0x14b>
c0024f89:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024f8c:	8d 70 01             	lea    esi,[eax+0x1]
c0024f8f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0024f95:	75 32                	jne    c0024fc9 <__addsf3+0x133>
c0024f97:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0024f9b:	75 1f                	jne    c0024fbc <__addsf3+0x126>
c0024f9d:	85 d2                	test   edx,edx
c0024f9f:	0f 84 e0 01 00 00    	je     c0025185 <__addsf3+0x2ef>
c0024fa5:	85 db                	test   ebx,ebx
c0024fa7:	0f 84 e2 01 00 00    	je     c002518f <__addsf3+0x2f9>
c0024fad:	89 d0                	mov    eax,edx
c0024faf:	01 d8                	add    eax,ebx
c0024fb1:	0f 89 a9 01 00 00    	jns    c0025160 <__addsf3+0x2ca>
c0024fb7:	e9 9d 01 00 00       	jmp    c0025159 <__addsf3+0x2c3>
c0024fbc:	85 d2                	test   edx,edx
c0024fbe:	0f 85 cb 01 00 00    	jne    c002518f <__addsf3+0x2f9>
c0024fc4:	e9 bc 01 00 00       	jmp    c0025185 <__addsf3+0x2ef>
c0024fc9:	31 c0                	xor    eax,eax
c0024fcb:	89 f1                	mov    ecx,esi
c0024fcd:	f7 d1                	not    ecx
c0024fcf:	84 c9                	test   cl,cl
c0024fd1:	0f 84 90 01 00 00    	je     c0025167 <__addsf3+0x2d1>
c0024fd7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0024fda:	d1 e8                	shr    eax,1
c0024fdc:	e9 86 01 00 00       	jmp    c0025167 <__addsf3+0x2d1>
c0024fe1:	85 c0                	test   eax,eax
c0024fe3:	0f 89 7e 01 00 00    	jns    c0025167 <__addsf3+0x2d1>
c0024fe9:	46                   	inc    esi
c0024fea:	89 f2                	mov    edx,esi
c0024fec:	f7 d2                	not    edx
c0024fee:	84 d2                	test   dl,dl
c0024ff0:	0f 84 6f 01 00 00    	je     c0025165 <__addsf3+0x2cf>
c0024ff6:	89 c2                	mov    edx,eax
c0024ff8:	83 e2 01             	and    edx,0x1
c0024ffb:	d1 e8                	shr    eax,1
c0024ffd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0025002:	09 d0                	or     eax,edx
c0025004:	e9 5e 01 00 00       	jmp    c0025167 <__addsf3+0x2d1>
c0025009:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c002500d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025010:	89 f0                	mov    eax,esi
c0025012:	0f b6 c0             	movzx  eax,al
c0025015:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025018:	29 c1                	sub    ecx,eax
c002501a:	85 c9                	test   ecx,ecx
c002501c:	7e 55                	jle    c0025073 <__addsf3+0x1dd>
c002501e:	85 c0                	test   eax,eax
c0025020:	75 11                	jne    c0025033 <__addsf3+0x19d>
c0025022:	85 db                	test   ebx,ebx
c0025024:	0f 84 65 01 00 00    	je     c002518f <__addsf3+0x2f9>
c002502a:	49                   	dec    ecx
c002502b:	75 19                	jne    c0025046 <__addsf3+0x1b0>
c002502d:	89 d0                	mov    eax,edx
c002502f:	29 d8                	sub    eax,ebx
c0025031:	eb 38                	jmp    c002506b <__addsf3+0x1d5>
c0025033:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025036:	f7 d0                	not    eax
c0025038:	84 c0                	test   al,al
c002503a:	0f 84 4f 01 00 00    	je     c002518f <__addsf3+0x2f9>
c0025040:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025046:	83 f9 1f             	cmp    ecx,0x1f
c0025049:	0f 8f 40 01 00 00    	jg     c002518f <__addsf3+0x2f9>
c002504f:	89 de                	mov    esi,ebx
c0025051:	d3 ee                	shr    esi,cl
c0025053:	b8 20 00 00 00       	mov    eax,0x20
c0025058:	29 c8                	sub    eax,ecx
c002505a:	89 c1                	mov    ecx,eax
c002505c:	d3 e3                	shl    ebx,cl
c002505e:	31 c0                	xor    eax,eax
c0025060:	85 db                	test   ebx,ebx
c0025062:	0f 95 c0             	setne  al
c0025065:	09 f0                	or     eax,esi
c0025067:	29 c2                	sub    edx,eax
c0025069:	89 d0                	mov    eax,edx
c002506b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002506e:	e9 af 00 00 00       	jmp    c0025122 <__addsf3+0x28c>
c0025073:	74 5c                	je     c00250d1 <__addsf3+0x23b>
c0025075:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0025078:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002507b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002507f:	75 14                	jne    c0025095 <__addsf3+0x1ff>
c0025081:	85 d2                	test   edx,edx
c0025083:	0f 84 06 01 00 00    	je     c002518f <__addsf3+0x2f9>
c0025089:	48                   	dec    eax
c002508a:	75 1b                	jne    c00250a7 <__addsf3+0x211>
c002508c:	89 d8                	mov    eax,ebx
c002508e:	29 d0                	sub    eax,edx
c0025090:	e9 8d 00 00 00       	jmp    c0025122 <__addsf3+0x28c>
c0025095:	89 f1                	mov    ecx,esi
c0025097:	f7 d1                	not    ecx
c0025099:	84 c9                	test   cl,cl
c002509b:	0f 84 ee 00 00 00    	je     c002518f <__addsf3+0x2f9>
c00250a1:	81 ca 00 00 00 80    	or     edx,0x80000000
c00250a7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00250aa:	83 f8 1f             	cmp    eax,0x1f
c00250ad:	0f 8f dc 00 00 00    	jg     c002518f <__addsf3+0x2f9>
c00250b3:	89 d7                	mov    edi,edx
c00250b5:	88 c1                	mov    cl,al
c00250b7:	d3 ef                	shr    edi,cl
c00250b9:	b9 20 00 00 00       	mov    ecx,0x20
c00250be:	29 c1                	sub    ecx,eax
c00250c0:	d3 e2                	shl    edx,cl
c00250c2:	31 c0                	xor    eax,eax
c00250c4:	85 d2                	test   edx,edx
c00250c6:	0f 95 c0             	setne  al
c00250c9:	09 f8                	or     eax,edi
c00250cb:	29 c3                	sub    ebx,eax
c00250cd:	89 d8                	mov    eax,ebx
c00250cf:	eb 51                	jmp    c0025122 <__addsf3+0x28c>
c00250d1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00250d4:	40                   	inc    eax
c00250d5:	a8 fe                	test   al,0xfe
c00250d7:	75 3d                	jne    c0025116 <__addsf3+0x280>
c00250d9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00250dd:	0f 85 a7 00 00 00    	jne    c002518a <__addsf3+0x2f4>
c00250e3:	85 d2                	test   edx,edx
c00250e5:	75 12                	jne    c00250f9 <__addsf3+0x263>
c00250e7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00250ea:	85 db                	test   ebx,ebx
c00250ec:	0f 85 9d 00 00 00    	jne    c002518f <__addsf3+0x2f9>
c00250f2:	31 ff                	xor    edi,edi
c00250f4:	e9 96 00 00 00       	jmp    c002518f <__addsf3+0x2f9>
c00250f9:	85 db                	test   ebx,ebx
c00250fb:	0f 84 8e 00 00 00    	je     c002518f <__addsf3+0x2f9>
c0025101:	89 d0                	mov    eax,edx
c0025103:	29 d8                	sub    eax,ebx
c0025105:	79 06                	jns    c002510d <__addsf3+0x277>
c0025107:	89 d8                	mov    eax,ebx
c0025109:	29 d0                	sub    eax,edx
c002510b:	eb 5a                	jmp    c0025167 <__addsf3+0x2d1>
c002510d:	bf 00 00 00 00       	mov    edi,0x0
c0025112:	74 7b                	je     c002518f <__addsf3+0x2f9>
c0025114:	eb 4a                	jmp    c0025160 <__addsf3+0x2ca>
c0025116:	89 d0                	mov    eax,edx
c0025118:	29 d8                	sub    eax,ebx
c002511a:	79 12                	jns    c002512e <__addsf3+0x298>
c002511c:	89 d8                	mov    eax,ebx
c002511e:	29 d0                	sub    eax,edx
c0025120:	eb 09                	jmp    c002512b <__addsf3+0x295>
c0025122:	85 c0                	test   eax,eax
c0025124:	79 41                	jns    c0025167 <__addsf3+0x2d1>
c0025126:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002512b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c002512e:	31 f6                	xor    esi,esi
c0025130:	85 c0                	test   eax,eax
c0025132:	74 33                	je     c0025167 <__addsf3+0x2d1>
c0025134:	0f bd c8             	bsr    ecx,eax
c0025137:	83 f1 1f             	xor    ecx,0x1f
c002513a:	d3 e0                	shl    eax,cl
c002513c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0025140:	39 ca                	cmp    edx,ecx
c0025142:	7f 10                	jg     c0025154 <__addsf3+0x2be>
c0025144:	29 d1                	sub    ecx,edx
c0025146:	41                   	inc    ecx
c0025147:	d3 e8                	shr    eax,cl
c0025149:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002514c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0025152:	eb 13                	jmp    c0025167 <__addsf3+0x2d1>
c0025154:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025157:	29 ce                	sub    esi,ecx
c0025159:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002515e:	eb 07                	jmp    c0025167 <__addsf3+0x2d1>
c0025160:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025163:	eb 02                	jmp    c0025167 <__addsf3+0x2d1>
c0025165:	31 c0                	xor    eax,eax
c0025167:	89 c2                	mov    edx,eax
c0025169:	c1 ea 08             	shr    edx,0x8
c002516c:	a8 7f                	test   al,0x7f
c002516e:	0f 95 c1             	setne  cl
c0025171:	09 d1                	or     ecx,edx
c0025173:	83 e1 01             	and    ecx,0x1
c0025176:	c1 e8 07             	shr    eax,0x7
c0025179:	21 c8                	and    eax,ecx
c002517b:	c1 e6 17             	shl    esi,0x17
c002517e:	09 d6                	or     esi,edx
c0025180:	8d 3c 30             	lea    edi,[eax+esi*1]
c0025183:	eb 0a                	jmp    c002518f <__addsf3+0x2f9>
c0025185:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025188:	eb 05                	jmp    c002518f <__addsf3+0x2f9>
c002518a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c002518f:	89 f8                	mov    eax,edi
c0025191:	5a                   	pop    edx
c0025192:	59                   	pop    ecx
c0025193:	5b                   	pop    ebx
c0025194:	5e                   	pop    esi
c0025195:	5f                   	pop    edi
c0025196:	5d                   	pop    ebp
c0025197:	c3                   	ret    

c0025198 <__subsf3>:
c0025198:	55                   	push   ebp
c0025199:	89 e5                	mov    ebp,esp
c002519b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002519e:	05 00 00 00 80       	add    eax,0x80000000
c00251a3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00251a6:	5d                   	pop    ebp
c00251a7:	e9 ea fc ff ff       	jmp    c0024e96 <__addsf3>

c00251ac <__negsf2>:
c00251ac:	55                   	push   ebp
c00251ad:	89 e5                	mov    ebp,esp
c00251af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00251b2:	05 00 00 00 80       	add    eax,0x80000000
c00251b7:	5d                   	pop    ebp
c00251b8:	c3                   	ret    

c00251b9 <__mulsf3>:
c00251b9:	55                   	push   ebp
c00251ba:	89 e5                	mov    ebp,esp
c00251bc:	57                   	push   edi
c00251bd:	56                   	push   esi
c00251be:	53                   	push   ebx
c00251bf:	83 ec 1c             	sub    esp,0x1c
c00251c2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00251c5:	89 f0                	mov    eax,esi
c00251c7:	89 f1                	mov    ecx,esi
c00251c9:	c1 f9 17             	sar    ecx,0x17
c00251cc:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00251cf:	c1 e0 08             	shl    eax,0x8
c00251d2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00251d7:	89 c1                	mov    ecx,eax
c00251d9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00251dc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00251df:	89 c7                	mov    edi,eax
c00251e1:	c1 ff 17             	sar    edi,0x17
c00251e4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00251e8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00251eb:	89 f8                	mov    eax,edi
c00251ed:	0f b6 c0             	movzx  eax,al
c00251f0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00251f3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00251f7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00251fa:	42                   	inc    edx
c00251fb:	80 e2 fe             	and    dl,0xfe
c00251fe:	75 7b                	jne    c002527b <__mulsf3+0xc2>
c0025200:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025204:	74 54                	je     c002525a <__mulsf3+0xa1>
c0025206:	85 c9                	test   ecx,ecx
c0025208:	0f 85 64 01 00 00    	jne    c0025372 <__mulsf3+0x1b9>
c002520e:	8d 57 01             	lea    edx,[edi+0x1]
c0025211:	80 e2 fe             	and    dl,0xfe
c0025214:	75 1f                	jne    c0025235 <__mulsf3+0x7c>
c0025216:	85 c0                	test   eax,eax
c0025218:	b8 00 00 00 00       	mov    eax,0x0
c002521d:	74 29                	je     c0025248 <__mulsf3+0x8f>
c002521f:	53                   	push   ebx
c0025220:	53                   	push   ebx
c0025221:	50                   	push   eax
c0025222:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025225:	e8 96 05 00 00       	call   c00257c0 <__nesf2>
c002522a:	83 c4 10             	add    esp,0x10
c002522d:	85 c0                	test   eax,eax
c002522f:	0f 85 3a 01 00 00    	jne    c002536f <__mulsf3+0x1b6>
c0025235:	85 ff                	test   edi,edi
c0025237:	0f 89 35 01 00 00    	jns    c0025372 <__mulsf3+0x1b9>
c002523d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0025243:	e9 2a 01 00 00       	jmp    c0025372 <__mulsf3+0x1b9>
c0025248:	51                   	push   ecx
c0025249:	51                   	push   ecx
c002524a:	50                   	push   eax
c002524b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002524e:	e8 6d 05 00 00       	call   c00257c0 <__nesf2>
c0025253:	83 c4 10             	add    esp,0x10
c0025256:	85 c0                	test   eax,eax
c0025258:	eb 15                	jmp    c002526f <__mulsf3+0xb6>
c002525a:	85 c9                	test   ecx,ecx
c002525c:	74 0b                	je     c0025269 <__mulsf3+0xb0>
c002525e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0025261:	01 c9                	add    ecx,ecx
c0025263:	78 16                	js     c002527b <__mulsf3+0xc2>
c0025265:	89 d3                	mov    ebx,edx
c0025267:	eb f5                	jmp    c002525e <__mulsf3+0xa5>
c0025269:	89 f8                	mov    eax,edi
c002526b:	f7 d0                	not    eax
c002526d:	84 c0                	test   al,al
c002526f:	75 c4                	jne    c0025235 <__mulsf3+0x7c>
c0025271:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0025276:	e9 f7 00 00 00       	jmp    c0025372 <__mulsf3+0x1b9>
c002527b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002527e:	c1 e6 08             	shl    esi,0x8
c0025281:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0025287:	8d 57 01             	lea    edx,[edi+0x1]
c002528a:	80 e2 fe             	and    dl,0xfe
c002528d:	75 63                	jne    c00252f2 <__mulsf3+0x139>
c002528f:	85 c0                	test   eax,eax
c0025291:	74 2f                	je     c00252c2 <__mulsf3+0x109>
c0025293:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0025297:	0f 89 d2 00 00 00    	jns    c002536f <__mulsf3+0x1b6>
c002529d:	52                   	push   edx
c002529e:	52                   	push   edx
c002529f:	6a 00                	push   0x0
c00252a1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00252a4:	e8 dc 04 00 00       	call   c0025785 <__eqsf2>
c00252a9:	83 c4 10             	add    esp,0x10
c00252ac:	85 c0                	test   eax,eax
c00252ae:	0f 85 bb 00 00 00    	jne    c002536f <__mulsf3+0x1b6>
c00252b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00252b7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00252bd:	e9 b0 00 00 00       	jmp    c0025372 <__mulsf3+0x1b9>
c00252c2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00252c5:	50                   	push   eax
c00252c6:	50                   	push   eax
c00252c7:	6a 00                	push   0x0
c00252c9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00252cc:	e8 b4 04 00 00       	call   c0025785 <__eqsf2>
c00252d1:	83 c4 10             	add    esp,0x10
c00252d4:	85 c0                	test   eax,eax
c00252d6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00252d9:	75 0c                	jne    c00252e7 <__mulsf3+0x12e>
c00252db:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00252df:	0f 89 8a 00 00 00    	jns    c002536f <__mulsf3+0x1b6>
c00252e5:	eb cd                	jmp    c00252b4 <__mulsf3+0xfb>
c00252e7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00252ea:	01 f6                	add    esi,esi
c00252ec:	78 04                	js     c00252f2 <__mulsf3+0x139>
c00252ee:	89 c3                	mov    ebx,eax
c00252f0:	eb f5                	jmp    c00252e7 <__mulsf3+0x12e>
c00252f2:	89 c8                	mov    eax,ecx
c00252f4:	0d 00 00 00 80       	or     eax,0x80000000
c00252f9:	81 ce 00 00 00 80    	or     esi,0x80000000
c00252ff:	f7 e6                	mul    esi
c0025301:	85 c0                	test   eax,eax
c0025303:	0f 95 c0             	setne  al
c0025306:	0f b6 c0             	movzx  eax,al
c0025309:	09 c2                	or     edx,eax
c002530b:	78 03                	js     c0025310 <__mulsf3+0x157>
c002530d:	01 d2                	add    edx,edx
c002530f:	4b                   	dec    ebx
c0025310:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0025316:	7f 22                	jg     c002533a <__mulsf3+0x181>
c0025318:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002531e:	85 db                	test   ebx,ebx
c0025320:	7f 23                	jg     c0025345 <__mulsf3+0x18c>
c0025322:	83 fb e9             	cmp    ebx,0xffffffe9
c0025325:	7c 1a                	jl     c0025341 <__mulsf3+0x188>
c0025327:	81 ca 00 00 00 80    	or     edx,0x80000000
c002532d:	b9 01 00 00 00       	mov    ecx,0x1
c0025332:	29 d9                	sub    ecx,ebx
c0025334:	d3 ea                	shr    edx,cl
c0025336:	31 db                	xor    ebx,ebx
c0025338:	eb 0b                	jmp    c0025345 <__mulsf3+0x18c>
c002533a:	bb ff 00 00 00       	mov    ebx,0xff
c002533f:	eb 02                	jmp    c0025343 <__mulsf3+0x18a>
c0025341:	31 db                	xor    ebx,ebx
c0025343:	31 d2                	xor    edx,edx
c0025345:	89 d0                	mov    eax,edx
c0025347:	c1 e8 08             	shr    eax,0x8
c002534a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002534d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025353:	09 fb                	or     ebx,edi
c0025355:	c1 e3 17             	shl    ebx,0x17
c0025358:	09 c3                	or     ebx,eax
c002535a:	f6 c2 7f             	test   dl,0x7f
c002535d:	0f 95 c1             	setne  cl
c0025360:	09 c8                	or     eax,ecx
c0025362:	83 e0 01             	and    eax,0x1
c0025365:	c1 ea 07             	shr    edx,0x7
c0025368:	21 c2                	and    edx,eax
c002536a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002536d:	eb 03                	jmp    c0025372 <__mulsf3+0x1b9>
c002536f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0025372:	89 f0                	mov    eax,esi
c0025374:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025377:	5b                   	pop    ebx
c0025378:	5e                   	pop    esi
c0025379:	5f                   	pop    edi
c002537a:	5d                   	pop    ebp
c002537b:	c3                   	ret    

c002537c <__divsf3>:
c002537c:	55                   	push   ebp
c002537d:	89 e5                	mov    ebp,esp
c002537f:	57                   	push   edi
c0025380:	56                   	push   esi
c0025381:	53                   	push   ebx
c0025382:	83 ec 1c             	sub    esp,0x1c
c0025385:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025388:	89 d8                	mov    eax,ebx
c002538a:	89 d9                	mov    ecx,ebx
c002538c:	c1 f9 17             	sar    ecx,0x17
c002538f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0025392:	c1 e0 08             	shl    eax,0x8
c0025395:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002539a:	89 c1                	mov    ecx,eax
c002539c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002539f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00253a2:	89 c7                	mov    edi,eax
c00253a4:	c1 ff 17             	sar    edi,0x17
c00253a7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00253ab:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00253ae:	89 f8                	mov    eax,edi
c00253b0:	0f b6 c0             	movzx  eax,al
c00253b3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00253b6:	29 c6                	sub    esi,eax
c00253b8:	83 c6 7f             	add    esi,0x7f
c00253bb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00253be:	42                   	inc    edx
c00253bf:	80 e2 fe             	and    dl,0xfe
c00253c2:	0f 85 9c 00 00 00    	jne    c0025464 <__divsf3+0xe8>
c00253c8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00253cc:	74 33                	je     c0025401 <__divsf3+0x85>
c00253ce:	85 c9                	test   ecx,ecx
c00253d0:	0f 85 c7 01 00 00    	jne    c002559d <__divsf3+0x221>
c00253d6:	8d 57 01             	lea    edx,[edi+0x1]
c00253d9:	80 e2 fe             	and    dl,0xfe
c00253dc:	75 2f                	jne    c002540d <__divsf3+0x91>
c00253de:	85 c0                	test   eax,eax
c00253e0:	74 2b                	je     c002540d <__divsf3+0x91>
c00253e2:	51                   	push   ecx
c00253e3:	51                   	push   ecx
c00253e4:	6a 00                	push   0x0
c00253e6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00253e9:	e8 d2 03 00 00       	call   c00257c0 <__nesf2>
c00253ee:	83 c4 10             	add    esp,0x10
c00253f1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00253f4:	85 c0                	test   eax,eax
c00253f6:	0f 85 a1 01 00 00    	jne    c002559d <__divsf3+0x221>
c00253fc:	e9 92 01 00 00       	jmp    c0025593 <__divsf3+0x217>
c0025401:	85 c9                	test   ecx,ecx
c0025403:	75 1b                	jne    c0025420 <__divsf3+0xa4>
c0025405:	8d 57 01             	lea    edx,[edi+0x1]
c0025408:	80 e2 fe             	and    dl,0xfe
c002540b:	74 1e                	je     c002542b <__divsf3+0xaf>
c002540d:	85 ff                	test   edi,edi
c002540f:	0f 89 88 01 00 00    	jns    c002559d <__divsf3+0x221>
c0025415:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002541b:	e9 7d 01 00 00       	jmp    c002559d <__divsf3+0x221>
c0025420:	8d 56 ff             	lea    edx,[esi-0x1]
c0025423:	01 c9                	add    ecx,ecx
c0025425:	78 3d                	js     c0025464 <__divsf3+0xe8>
c0025427:	89 d6                	mov    esi,edx
c0025429:	eb f5                	jmp    c0025420 <__divsf3+0xa4>
c002542b:	85 c0                	test   eax,eax
c002542d:	b8 00 00 00 00       	mov    eax,0x0
c0025432:	74 18                	je     c002544c <__divsf3+0xd0>
c0025434:	52                   	push   edx
c0025435:	52                   	push   edx
c0025436:	50                   	push   eax
c0025437:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002543a:	e8 81 03 00 00       	call   c00257c0 <__nesf2>
c002543f:	83 c4 10             	add    esp,0x10
c0025442:	85 c0                	test   eax,eax
c0025444:	0f 85 50 01 00 00    	jne    c002559a <__divsf3+0x21e>
c002544a:	eb c1                	jmp    c002540d <__divsf3+0x91>
c002544c:	56                   	push   esi
c002544d:	56                   	push   esi
c002544e:	50                   	push   eax
c002544f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025452:	e8 69 03 00 00       	call   c00257c0 <__nesf2>
c0025457:	83 c4 10             	add    esp,0x10
c002545a:	85 c0                	test   eax,eax
c002545c:	0f 84 31 01 00 00    	je     c0025593 <__divsf3+0x217>
c0025462:	eb a9                	jmp    c002540d <__divsf3+0x91>
c0025464:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0025467:	c1 e3 08             	shl    ebx,0x8
c002546a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025470:	8d 57 01             	lea    edx,[edi+0x1]
c0025473:	80 e2 fe             	and    dl,0xfe
c0025476:	75 71                	jne    c00254e9 <__divsf3+0x16d>
c0025478:	85 c0                	test   eax,eax
c002547a:	ba 00 00 00 00       	mov    edx,0x0
c002547f:	74 2f                	je     c00254b0 <__divsf3+0x134>
c0025481:	51                   	push   ecx
c0025482:	51                   	push   ecx
c0025483:	52                   	push   edx
c0025484:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025487:	e8 f9 02 00 00       	call   c0025785 <__eqsf2>
c002548c:	83 c4 10             	add    esp,0x10
c002548f:	85 c0                	test   eax,eax
c0025491:	0f 85 03 01 00 00    	jne    c002559a <__divsf3+0x21e>
c0025497:	31 d2                	xor    edx,edx
c0025499:	89 d3                	mov    ebx,edx
c002549b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002549e:	31 f8                	xor    eax,edi
c00254a0:	0f 89 f7 00 00 00    	jns    c002559d <__divsf3+0x221>
c00254a6:	bb 00 00 00 80       	mov    ebx,0x80000000
c00254ab:	e9 ed 00 00 00       	jmp    c002559d <__divsf3+0x221>
c00254b0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00254b3:	50                   	push   eax
c00254b4:	50                   	push   eax
c00254b5:	52                   	push   edx
c00254b6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00254b9:	e8 c7 02 00 00       	call   c0025785 <__eqsf2>
c00254be:	83 c4 10             	add    esp,0x10
c00254c1:	85 c0                	test   eax,eax
c00254c3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00254c6:	75 16                	jne    c00254de <__divsf3+0x162>
c00254c8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00254cb:	31 fb                	xor    ebx,edi
c00254cd:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00254d3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00254d9:	e9 bf 00 00 00       	jmp    c002559d <__divsf3+0x221>
c00254de:	8d 46 01             	lea    eax,[esi+0x1]
c00254e1:	01 db                	add    ebx,ebx
c00254e3:	78 04                	js     c00254e9 <__divsf3+0x16d>
c00254e5:	89 c6                	mov    esi,eax
c00254e7:	eb f5                	jmp    c00254de <__divsf3+0x162>
c00254e9:	89 c8                	mov    eax,ecx
c00254eb:	0d 00 00 00 80       	or     eax,0x80000000
c00254f0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00254f6:	31 d2                	xor    edx,edx
c00254f8:	39 d8                	cmp    eax,ebx
c00254fa:	72 07                	jb     c0025503 <__divsf3+0x187>
c00254fc:	29 d8                	sub    eax,ebx
c00254fe:	ba 01 00 00 00       	mov    edx,0x1
c0025503:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002550a:	01 d2                	add    edx,edx
c002550c:	89 c1                	mov    ecx,eax
c002550e:	01 c0                	add    eax,eax
c0025510:	85 c9                	test   ecx,ecx
c0025512:	78 04                	js     c0025518 <__divsf3+0x19c>
c0025514:	39 c3                	cmp    ebx,eax
c0025516:	77 05                	ja     c002551d <__divsf3+0x1a1>
c0025518:	29 d8                	sub    eax,ebx
c002551a:	83 ca 01             	or     edx,0x1
c002551d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0025520:	75 e8                	jne    c002550a <__divsf3+0x18e>
c0025522:	85 c0                	test   eax,eax
c0025524:	0f 95 c0             	setne  al
c0025527:	0f b6 c0             	movzx  eax,al
c002552a:	c1 e2 06             	shl    edx,0x6
c002552d:	09 c2                	or     edx,eax
c002552f:	78 03                	js     c0025534 <__divsf3+0x1b8>
c0025531:	01 d2                	add    edx,edx
c0025533:	4e                   	dec    esi
c0025534:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002553a:	7f 22                	jg     c002555e <__divsf3+0x1e2>
c002553c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025542:	85 f6                	test   esi,esi
c0025544:	7f 23                	jg     c0025569 <__divsf3+0x1ed>
c0025546:	83 fe e9             	cmp    esi,0xffffffe9
c0025549:	7c 1a                	jl     c0025565 <__divsf3+0x1e9>
c002554b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025551:	b9 01 00 00 00       	mov    ecx,0x1
c0025556:	29 f1                	sub    ecx,esi
c0025558:	d3 ea                	shr    edx,cl
c002555a:	31 f6                	xor    esi,esi
c002555c:	eb 0b                	jmp    c0025569 <__divsf3+0x1ed>
c002555e:	be ff 00 00 00       	mov    esi,0xff
c0025563:	eb 02                	jmp    c0025567 <__divsf3+0x1eb>
c0025565:	31 f6                	xor    esi,esi
c0025567:	31 d2                	xor    edx,edx
c0025569:	89 d0                	mov    eax,edx
c002556b:	c1 e8 08             	shr    eax,0x8
c002556e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0025571:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025577:	09 fe                	or     esi,edi
c0025579:	c1 e6 17             	shl    esi,0x17
c002557c:	09 c6                	or     esi,eax
c002557e:	f6 c2 7f             	test   dl,0x7f
c0025581:	0f 95 c1             	setne  cl
c0025584:	09 c8                	or     eax,ecx
c0025586:	83 e0 01             	and    eax,0x1
c0025589:	c1 ea 07             	shr    edx,0x7
c002558c:	21 c2                	and    edx,eax
c002558e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0025591:	eb 0a                	jmp    c002559d <__divsf3+0x221>
c0025593:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0025598:	eb 03                	jmp    c002559d <__divsf3+0x221>
c002559a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002559d:	89 d8                	mov    eax,ebx
c002559f:	8d 65 f4             	lea    esp,[ebp-0xc]
c00255a2:	5b                   	pop    ebx
c00255a3:	5e                   	pop    esi
c00255a4:	5f                   	pop    edi
c00255a5:	5d                   	pop    ebp
c00255a6:	c3                   	ret    

c00255a7 <__floatsisf>:
c00255a7:	55                   	push   ebp
c00255a8:	89 e5                	mov    ebp,esp
c00255aa:	53                   	push   ebx
c00255ab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00255ae:	85 d2                	test   edx,edx
c00255b0:	7e 2b                	jle    c00255dd <__floatsisf+0x36>
c00255b2:	0f bd ca             	bsr    ecx,edx
c00255b5:	83 f1 1f             	xor    ecx,0x1f
c00255b8:	d3 e2                	shl    edx,cl
c00255ba:	89 d0                	mov    eax,edx
c00255bc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00255c1:	89 c3                	mov    ebx,eax
c00255c3:	c1 eb 08             	shr    ebx,0x8
c00255c6:	80 e2 7f             	and    dl,0x7f
c00255c9:	0f 95 c2             	setne  dl
c00255cc:	09 da                	or     edx,ebx
c00255ce:	83 e2 01             	and    edx,0x1
c00255d1:	c1 e8 07             	shr    eax,0x7
c00255d4:	21 c2                	and    edx,eax
c00255d6:	b8 9e 00 00 00       	mov    eax,0x9e
c00255db:	eb 32                	jmp    c002560f <__floatsisf+0x68>
c00255dd:	b8 00 00 00 00       	mov    eax,0x0
c00255e2:	74 34                	je     c0025618 <__floatsisf+0x71>
c00255e4:	f7 da                	neg    edx
c00255e6:	0f bd ca             	bsr    ecx,edx
c00255e9:	83 f1 1f             	xor    ecx,0x1f
c00255ec:	d3 e2                	shl    edx,cl
c00255ee:	89 d0                	mov    eax,edx
c00255f0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00255f5:	89 c3                	mov    ebx,eax
c00255f7:	c1 eb 08             	shr    ebx,0x8
c00255fa:	80 e2 7f             	and    dl,0x7f
c00255fd:	0f 95 c2             	setne  dl
c0025600:	09 da                	or     edx,ebx
c0025602:	83 e2 01             	and    edx,0x1
c0025605:	c1 e8 07             	shr    eax,0x7
c0025608:	21 c2                	and    edx,eax
c002560a:	b8 9e 01 00 00       	mov    eax,0x19e
c002560f:	29 c8                	sub    eax,ecx
c0025611:	c1 e0 17             	shl    eax,0x17
c0025614:	09 d8                	or     eax,ebx
c0025616:	01 d0                	add    eax,edx
c0025618:	5b                   	pop    ebx
c0025619:	5d                   	pop    ebp
c002561a:	c3                   	ret    

c002561b <__floatunsisf>:
c002561b:	55                   	push   ebp
c002561c:	89 e5                	mov    ebp,esp
c002561e:	53                   	push   ebx
c002561f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025622:	31 c0                	xor    eax,eax
c0025624:	85 d2                	test   edx,edx
c0025626:	74 32                	je     c002565a <__floatunsisf+0x3f>
c0025628:	0f bd ca             	bsr    ecx,edx
c002562b:	83 f1 1f             	xor    ecx,0x1f
c002562e:	d3 e2                	shl    edx,cl
c0025630:	89 d0                	mov    eax,edx
c0025632:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025637:	89 c3                	mov    ebx,eax
c0025639:	c1 eb 08             	shr    ebx,0x8
c002563c:	80 e2 7f             	and    dl,0x7f
c002563f:	0f 95 c2             	setne  dl
c0025642:	09 da                	or     edx,ebx
c0025644:	83 e2 01             	and    edx,0x1
c0025647:	c1 e8 07             	shr    eax,0x7
c002564a:	21 c2                	and    edx,eax
c002564c:	b8 9e 00 00 00       	mov    eax,0x9e
c0025651:	29 c8                	sub    eax,ecx
c0025653:	c1 e0 17             	shl    eax,0x17
c0025656:	09 d8                	or     eax,ebx
c0025658:	01 d0                	add    eax,edx
c002565a:	5b                   	pop    ebx
c002565b:	5d                   	pop    ebp
c002565c:	c3                   	ret    

c002565d <__fixsfsi>:
c002565d:	55                   	push   ebp
c002565e:	89 e5                	mov    ebp,esp
c0025660:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025663:	89 d1                	mov    ecx,edx
c0025665:	c1 e1 08             	shl    ecx,0x8
c0025668:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002566e:	c1 fa 17             	sar    edx,0x17
c0025671:	78 1c                	js     c002568f <__fixsfsi+0x32>
c0025673:	83 ea 7f             	sub    edx,0x7f
c0025676:	31 c0                	xor    eax,eax
c0025678:	83 fa 1e             	cmp    edx,0x1e
c002567b:	77 40                	ja     c00256bd <__fixsfsi+0x60>
c002567d:	89 c8                	mov    eax,ecx
c002567f:	0d 00 00 00 80       	or     eax,0x80000000
c0025684:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025689:	29 d1                	sub    ecx,edx
c002568b:	d3 e8                	shr    eax,cl
c002568d:	eb 2e                	jmp    c00256bd <__fixsfsi+0x60>
c002568f:	31 c0                	xor    eax,eax
c0025691:	81 c2 81 00 00 00    	add    edx,0x81
c0025697:	78 24                	js     c00256bd <__fixsfsi+0x60>
c0025699:	83 fa 1e             	cmp    edx,0x1e
c002569c:	7e 09                	jle    c00256a7 <__fixsfsi+0x4a>
c002569e:	83 fa 1f             	cmp    edx,0x1f
c00256a1:	75 18                	jne    c00256bb <__fixsfsi+0x5e>
c00256a3:	85 c9                	test   ecx,ecx
c00256a5:	75 14                	jne    c00256bb <__fixsfsi+0x5e>
c00256a7:	89 c8                	mov    eax,ecx
c00256a9:	0d 00 00 00 80       	or     eax,0x80000000
c00256ae:	b9 1f 00 00 00       	mov    ecx,0x1f
c00256b3:	29 d1                	sub    ecx,edx
c00256b5:	d3 e8                	shr    eax,cl
c00256b7:	f7 d8                	neg    eax
c00256b9:	eb 02                	jmp    c00256bd <__fixsfsi+0x60>
c00256bb:	31 c0                	xor    eax,eax
c00256bd:	5d                   	pop    ebp
c00256be:	c3                   	ret    

c00256bf <__fixunssfsi>:
c00256bf:	55                   	push   ebp
c00256c0:	89 e5                	mov    ebp,esp
c00256c2:	53                   	push   ebx
c00256c3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00256c6:	89 d3                	mov    ebx,edx
c00256c8:	c1 fb 17             	sar    ebx,0x17
c00256cb:	83 eb 7f             	sub    ebx,0x7f
c00256ce:	31 c0                	xor    eax,eax
c00256d0:	83 fb 1f             	cmp    ebx,0x1f
c00256d3:	77 18                	ja     c00256ed <__fixunssfsi+0x2e>
c00256d5:	89 d0                	mov    eax,edx
c00256d7:	c1 e0 08             	shl    eax,0x8
c00256da:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00256df:	0d 00 00 00 80       	or     eax,0x80000000
c00256e4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00256e9:	29 d9                	sub    ecx,ebx
c00256eb:	d3 e8                	shr    eax,cl
c00256ed:	5b                   	pop    ebx
c00256ee:	5d                   	pop    ebp
c00256ef:	c3                   	ret    

c00256f0 <__cmpsf2>:
c00256f0:	55                   	push   ebp
c00256f1:	89 e5                	mov    ebp,esp
c00256f3:	57                   	push   edi
c00256f4:	56                   	push   esi
c00256f5:	53                   	push   ebx
c00256f6:	83 ec 24             	sub    esp,0x24
c00256f9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00256fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00256ff:	e8 4f 10 00 00       	call   c0026753 <__truncdfsf2>
c0025704:	5a                   	pop    edx
c0025705:	59                   	pop    ecx
c0025706:	89 c3                	mov    ebx,eax
c0025708:	c1 e8 17             	shr    eax,0x17
c002570b:	0f b6 f0             	movzx  esi,al
c002570e:	89 d8                	mov    eax,ebx
c0025710:	c1 e8 1f             	shr    eax,0x1f
c0025713:	31 c6                	xor    esi,eax
c0025715:	c1 e3 08             	shl    ebx,0x8
c0025718:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002571b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002571e:	e8 30 10 00 00       	call   c0026753 <__truncdfsf2>
c0025723:	83 c4 10             	add    esp,0x10
c0025726:	89 c1                	mov    ecx,eax
c0025728:	c1 e9 17             	shr    ecx,0x17
c002572b:	0f b6 c9             	movzx  ecx,cl
c002572e:	89 c7                	mov    edi,eax
c0025730:	c1 ef 1f             	shr    edi,0x1f
c0025733:	89 ca                	mov    edx,ecx
c0025735:	31 fa                	xor    edx,edi
c0025737:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002573a:	c1 e0 08             	shl    eax,0x8
c002573d:	89 c2                	mov    edx,eax
c002573f:	89 d8                	mov    eax,ebx
c0025741:	09 d0                	or     eax,edx
c0025743:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025748:	09 f0                	or     eax,esi
c002574a:	75 08                	jne    c0025754 <__cmpsf2+0x64>
c002574c:	31 c0                	xor    eax,eax
c002574e:	39 f9                	cmp    ecx,edi
c0025750:	75 0c                	jne    c002575e <__cmpsf2+0x6e>
c0025752:	eb 29                	jmp    c002577d <__cmpsf2+0x8d>
c0025754:	b8 01 00 00 00       	mov    eax,0x1
c0025759:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002575c:	7f 1f                	jg     c002577d <__cmpsf2+0x8d>
c002575e:	83 c8 ff             	or     eax,0xffffffff
c0025761:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0025764:	7c 17                	jl     c002577d <__cmpsf2+0x8d>
c0025766:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002576c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0025772:	b8 01 00 00 00       	mov    eax,0x1
c0025777:	39 d3                	cmp    ebx,edx
c0025779:	77 02                	ja     c002577d <__cmpsf2+0x8d>
c002577b:	19 c0                	sbb    eax,eax
c002577d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025780:	5b                   	pop    ebx
c0025781:	5e                   	pop    esi
c0025782:	5f                   	pop    edi
c0025783:	5d                   	pop    ebp
c0025784:	c3                   	ret    

c0025785 <__eqsf2>:
c0025785:	55                   	push   ebp
c0025786:	89 e5                	mov    ebp,esp
c0025788:	83 ec 24             	sub    esp,0x24
c002578b:	6a 01                	push   0x1
c002578d:	83 ec 0c             	sub    esp,0xc
c0025790:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025793:	e8 df 10 00 00       	call   c0026877 <__extendsfdf2>
c0025798:	83 c4 10             	add    esp,0x10
c002579b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002579e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00257a1:	52                   	push   edx
c00257a2:	50                   	push   eax
c00257a3:	50                   	push   eax
c00257a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257a7:	e8 cb 10 00 00       	call   c0026877 <__extendsfdf2>
c00257ac:	59                   	pop    ecx
c00257ad:	59                   	pop    ecx
c00257ae:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00257b1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00257b4:	52                   	push   edx
c00257b5:	50                   	push   eax
c00257b6:	e8 35 ff ff ff       	call   c00256f0 <__cmpsf2>
c00257bb:	83 c4 20             	add    esp,0x20
c00257be:	c9                   	leave  
c00257bf:	c3                   	ret    

c00257c0 <__nesf2>:
c00257c0:	eb c3                	jmp    c0025785 <__eqsf2>

c00257c2 <__gtsf2>:
c00257c2:	55                   	push   ebp
c00257c3:	89 e5                	mov    ebp,esp
c00257c5:	83 ec 24             	sub    esp,0x24
c00257c8:	6a ff                	push   0xffffffff
c00257ca:	83 ec 0c             	sub    esp,0xc
c00257cd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00257d0:	e8 a2 10 00 00       	call   c0026877 <__extendsfdf2>
c00257d5:	83 c4 10             	add    esp,0x10
c00257d8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00257db:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00257de:	52                   	push   edx
c00257df:	50                   	push   eax
c00257e0:	50                   	push   eax
c00257e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257e4:	e8 8e 10 00 00       	call   c0026877 <__extendsfdf2>
c00257e9:	59                   	pop    ecx
c00257ea:	59                   	pop    ecx
c00257eb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00257ee:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00257f1:	52                   	push   edx
c00257f2:	50                   	push   eax
c00257f3:	e8 f8 fe ff ff       	call   c00256f0 <__cmpsf2>
c00257f8:	83 c4 20             	add    esp,0x20
c00257fb:	c9                   	leave  
c00257fc:	c3                   	ret    

c00257fd <__gesf2>:
c00257fd:	eb c3                	jmp    c00257c2 <__gtsf2>

c00257ff <__ltsf2>:
c00257ff:	eb 84                	jmp    c0025785 <__eqsf2>

c0025801 <__lesf2>:
c0025801:	eb 82                	jmp    c0025785 <__eqsf2>

c0025803 <__adddf3>:
c0025803:	55                   	push   ebp
c0025804:	89 e5                	mov    ebp,esp
c0025806:	57                   	push   edi
c0025807:	56                   	push   esi
c0025808:	53                   	push   ebx
c0025809:	83 ec 24             	sub    esp,0x24
c002580c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002580f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025812:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025815:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025818:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002581b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002581e:	89 c8                	mov    eax,ecx
c0025820:	89 ce                	mov    esi,ecx
c0025822:	c1 fe 14             	sar    esi,0x14
c0025825:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0025828:	89 fb                	mov    ebx,edi
c002582a:	89 fa                	mov    edx,edi
c002582c:	c1 e2 0b             	shl    edx,0xb
c002582f:	c1 e0 0b             	shl    eax,0xb
c0025832:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0025837:	c1 eb 15             	shr    ebx,0x15
c002583a:	09 d8                	or     eax,ebx
c002583c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002583f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0025842:	c1 fe 14             	sar    esi,0x14
c0025845:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0025848:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002584b:	89 f3                	mov    ebx,esi
c002584d:	c1 e3 0b             	shl    ebx,0xb
c0025850:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0025853:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0025856:	c1 e3 0b             	shl    ebx,0xb
c0025859:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002585f:	c1 ee 15             	shr    esi,0x15
c0025862:	09 f3                	or     ebx,esi
c0025864:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0025867:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002586a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002586d:	0f 88 5f 02 00 00    	js     c0025ad2 <__adddf3+0x2cf>
c0025873:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025876:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0025879:	85 db                	test   ebx,ebx
c002587b:	0f 8e c7 00 00 00    	jle    c0025948 <__adddf3+0x145>
c0025881:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0025888:	75 1a                	jne    c00258a4 <__adddf3+0xa1>
c002588a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002588d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0025890:	0f 84 b2 05 00 00    	je     c0025e48 <__adddf3+0x645>
c0025896:	4b                   	dec    ebx
c0025897:	75 23                	jne    c00258bc <__adddf3+0xb9>
c0025899:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002589c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002589f:	e9 99 00 00 00       	jmp    c002593d <__adddf3+0x13a>
c00258a4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00258a7:	f7 d6                	not    esi
c00258a9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00258af:	0f 84 93 05 00 00    	je     c0025e48 <__adddf3+0x645>
c00258b5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00258bc:	83 fb 1f             	cmp    ebx,0x1f
c00258bf:	7e 42                	jle    c0025903 <__adddf3+0x100>
c00258c1:	83 fb 3f             	cmp    ebx,0x3f
c00258c4:	0f 8f 7e 05 00 00    	jg     c0025e48 <__adddf3+0x645>
c00258ca:	83 e3 1f             	and    ebx,0x1f
c00258cd:	89 d9                	mov    ecx,ebx
c00258cf:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00258d2:	d3 ef                	shr    edi,cl
c00258d4:	31 db                	xor    ebx,ebx
c00258d6:	85 c9                	test   ecx,ecx
c00258d8:	74 15                	je     c00258ef <__adddf3+0xec>
c00258da:	be 20 00 00 00       	mov    esi,0x20
c00258df:	29 ce                	sub    esi,ecx
c00258e1:	89 f1                	mov    ecx,esi
c00258e3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00258e6:	d3 e6                	shl    esi,cl
c00258e8:	31 db                	xor    ebx,ebx
c00258ea:	85 f6                	test   esi,esi
c00258ec:	0f 95 c3             	setne  bl
c00258ef:	31 c9                	xor    ecx,ecx
c00258f1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00258f5:	0f 95 c1             	setne  cl
c00258f8:	09 cf                	or     edi,ecx
c00258fa:	09 fb                	or     ebx,edi
c00258fc:	01 da                	add    edx,ebx
c00258fe:	83 d0 00             	adc    eax,0x0
c0025901:	eb 3a                	jmp    c002593d <__adddf3+0x13a>
c0025903:	bf 20 00 00 00       	mov    edi,0x20
c0025908:	29 df                	sub    edi,ebx
c002590a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002590d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025910:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0025913:	d3 e6                	shl    esi,cl
c0025915:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0025918:	88 d9                	mov    cl,bl
c002591a:	d3 ef                	shr    edi,cl
c002591c:	09 fe                	or     esi,edi
c002591e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0025921:	88 d9                	mov    cl,bl
c0025923:	d3 ef                	shr    edi,cl
c0025925:	89 fb                	mov    ebx,edi
c0025927:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002592a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002592d:	d3 e7                	shl    edi,cl
c002592f:	85 ff                	test   edi,edi
c0025931:	0f 95 c1             	setne  cl
c0025934:	0f b6 c9             	movzx  ecx,cl
c0025937:	09 ce                	or     esi,ecx
c0025939:	01 f2                	add    edx,esi
c002593b:	11 d8                	adc    eax,ebx
c002593d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0025940:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0025943:	e9 52 01 00 00       	jmp    c0025a9a <__adddf3+0x297>
c0025948:	0f 84 d5 00 00 00    	je     c0025a23 <__adddf3+0x220>
c002594e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0025951:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0025954:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0025957:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002595a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0025961:	75 20                	jne    c0025983 <__adddf3+0x180>
c0025963:	89 d6                	mov    esi,edx
c0025965:	09 c6                	or     esi,eax
c0025967:	0f 84 db 04 00 00    	je     c0025e48 <__adddf3+0x645>
c002596d:	4b                   	dec    ebx
c002596e:	75 29                	jne    c0025999 <__adddf3+0x196>
c0025970:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025973:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025976:	01 d1                	add    ecx,edx
c0025978:	11 c6                	adc    esi,eax
c002597a:	89 f0                	mov    eax,esi
c002597c:	89 ca                	mov    edx,ecx
c002597e:	e9 17 01 00 00       	jmp    c0025a9a <__adddf3+0x297>
c0025983:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0025986:	f7 d6                	not    esi
c0025988:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002598e:	0f 84 b4 04 00 00    	je     c0025e48 <__adddf3+0x645>
c0025994:	0d 00 00 00 80       	or     eax,0x80000000
c0025999:	83 fb 1f             	cmp    ebx,0x1f
c002599c:	7e 48                	jle    c00259e6 <__adddf3+0x1e3>
c002599e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00259a1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00259a4:	83 fb 3f             	cmp    ebx,0x3f
c00259a7:	0f 8f 9b 04 00 00    	jg     c0025e48 <__adddf3+0x645>
c00259ad:	83 e3 1f             	and    ebx,0x1f
c00259b0:	89 d9                	mov    ecx,ebx
c00259b2:	89 c7                	mov    edi,eax
c00259b4:	d3 ef                	shr    edi,cl
c00259b6:	31 db                	xor    ebx,ebx
c00259b8:	85 c9                	test   ecx,ecx
c00259ba:	74 12                	je     c00259ce <__adddf3+0x1cb>
c00259bc:	be 20 00 00 00       	mov    esi,0x20
c00259c1:	29 ce                	sub    esi,ecx
c00259c3:	89 f1                	mov    ecx,esi
c00259c5:	d3 e0                	shl    eax,cl
c00259c7:	31 db                	xor    ebx,ebx
c00259c9:	85 c0                	test   eax,eax
c00259cb:	0f 95 c3             	setne  bl
c00259ce:	31 c0                	xor    eax,eax
c00259d0:	85 d2                	test   edx,edx
c00259d2:	0f 95 c0             	setne  al
c00259d5:	09 c7                	or     edi,eax
c00259d7:	09 fb                	or     ebx,edi
c00259d9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00259dc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00259df:	01 da                	add    edx,ebx
c00259e1:	83 d6 00             	adc    esi,0x0
c00259e4:	eb 39                	jmp    c0025a1f <__adddf3+0x21c>
c00259e6:	be 20 00 00 00       	mov    esi,0x20
c00259eb:	29 de                	sub    esi,ebx
c00259ed:	89 c7                	mov    edi,eax
c00259ef:	89 f1                	mov    ecx,esi
c00259f1:	d3 e7                	shl    edi,cl
c00259f3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00259f6:	89 d7                	mov    edi,edx
c00259f8:	88 d9                	mov    cl,bl
c00259fa:	d3 ef                	shr    edi,cl
c00259fc:	89 f9                	mov    ecx,edi
c00259fe:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0025a01:	09 cf                	or     edi,ecx
c0025a03:	88 d9                	mov    cl,bl
c0025a05:	d3 e8                	shr    eax,cl
c0025a07:	89 f1                	mov    ecx,esi
c0025a09:	d3 e2                	shl    edx,cl
c0025a0b:	85 d2                	test   edx,edx
c0025a0d:	0f 95 c2             	setne  dl
c0025a10:	0f b6 d2             	movzx  edx,dl
c0025a13:	09 d7                	or     edi,edx
c0025a15:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025a18:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025a1b:	01 fa                	add    edx,edi
c0025a1d:	11 c6                	adc    esi,eax
c0025a1f:	89 f0                	mov    eax,esi
c0025a21:	eb 77                	jmp    c0025a9a <__adddf3+0x297>
c0025a23:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0025a26:	46                   	inc    esi
c0025a27:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0025a2a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0025a30:	75 41                	jne    c0025a73 <__adddf3+0x270>
c0025a32:	89 d3                	mov    ebx,edx
c0025a34:	09 c3                	or     ebx,eax
c0025a36:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0025a3d:	75 27                	jne    c0025a66 <__adddf3+0x263>
c0025a3f:	85 db                	test   ebx,ebx
c0025a41:	0f 84 fb 03 00 00    	je     c0025e42 <__adddf3+0x63f>
c0025a47:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025a4a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0025a4d:	0f 84 f5 03 00 00    	je     c0025e48 <__adddf3+0x645>
c0025a53:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0025a56:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0025a59:	85 c0                	test   eax,eax
c0025a5b:	0f 89 91 03 00 00    	jns    c0025df2 <__adddf3+0x5ef>
c0025a61:	e9 85 03 00 00       	jmp    c0025deb <__adddf3+0x5e8>
c0025a66:	85 db                	test   ebx,ebx
c0025a68:	0f 85 da 03 00 00    	jne    c0025e48 <__adddf3+0x645>
c0025a6e:	e9 cf 03 00 00       	jmp    c0025e42 <__adddf3+0x63f>
c0025a73:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0025a76:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0025a79:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025a7c:	f7 d1                	not    ecx
c0025a7e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0025a84:	0f 84 70 03 00 00    	je     c0025dfa <__adddf3+0x5f7>
c0025a8a:	d1 ea                	shr    edx,1
c0025a8c:	89 c1                	mov    ecx,eax
c0025a8e:	c1 e1 1f             	shl    ecx,0x1f
c0025a91:	09 ca                	or     edx,ecx
c0025a93:	d1 e8                	shr    eax,1
c0025a95:	e9 6f 03 00 00       	jmp    c0025e09 <__adddf3+0x606>
c0025a9a:	85 c0                	test   eax,eax
c0025a9c:	0f 89 67 03 00 00    	jns    c0025e09 <__adddf3+0x606>
c0025aa2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0025aa5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025aa8:	f7 d1                	not    ecx
c0025aaa:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0025ab0:	0f 84 44 03 00 00    	je     c0025dfa <__adddf3+0x5f7>
c0025ab6:	89 d1                	mov    ecx,edx
c0025ab8:	d1 e9                	shr    ecx,1
c0025aba:	83 e2 01             	and    edx,0x1
c0025abd:	09 ca                	or     edx,ecx
c0025abf:	89 c1                	mov    ecx,eax
c0025ac1:	c1 e1 1f             	shl    ecx,0x1f
c0025ac4:	09 ca                	or     edx,ecx
c0025ac6:	d1 e8                	shr    eax,1
c0025ac8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0025acd:	e9 37 03 00 00       	jmp    c0025e09 <__adddf3+0x606>
c0025ad2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0025ad5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0025adb:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0025ade:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0025ae1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0025ae7:	29 de                	sub    esi,ebx
c0025ae9:	85 f6                	test   esi,esi
c0025aeb:	0f 8e bd 00 00 00    	jle    c0025bae <__adddf3+0x3ab>
c0025af1:	85 db                	test   ebx,ebx
c0025af3:	75 17                	jne    c0025b0c <__adddf3+0x309>
c0025af5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0025af8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0025afb:	0f 84 47 03 00 00    	je     c0025e48 <__adddf3+0x645>
c0025b01:	4e                   	dec    esi
c0025b02:	75 20                	jne    c0025b24 <__adddf3+0x321>
c0025b04:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0025b07:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0025b0a:	eb 5b                	jmp    c0025b67 <__adddf3+0x364>
c0025b0c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025b0f:	f7 d3                	not    ebx
c0025b11:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0025b17:	0f 84 2b 03 00 00    	je     c0025e48 <__adddf3+0x645>
c0025b1d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0025b24:	83 fe 1f             	cmp    esi,0x1f
c0025b27:	7e 49                	jle    c0025b72 <__adddf3+0x36f>
c0025b29:	83 fe 3f             	cmp    esi,0x3f
c0025b2c:	0f 8f 16 03 00 00    	jg     c0025e48 <__adddf3+0x645>
c0025b32:	83 e6 1f             	and    esi,0x1f
c0025b35:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0025b38:	89 f1                	mov    ecx,esi
c0025b3a:	d3 ef                	shr    edi,cl
c0025b3c:	31 db                	xor    ebx,ebx
c0025b3e:	85 f6                	test   esi,esi
c0025b40:	74 13                	je     c0025b55 <__adddf3+0x352>
c0025b42:	b9 20 00 00 00       	mov    ecx,0x20
c0025b47:	29 f1                	sub    ecx,esi
c0025b49:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025b4c:	d3 e6                	shl    esi,cl
c0025b4e:	31 db                	xor    ebx,ebx
c0025b50:	85 f6                	test   esi,esi
c0025b52:	0f 95 c3             	setne  bl
c0025b55:	31 c9                	xor    ecx,ecx
c0025b57:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025b5b:	0f 95 c1             	setne  cl
c0025b5e:	09 cf                	or     edi,ecx
c0025b60:	09 fb                	or     ebx,edi
c0025b62:	29 da                	sub    edx,ebx
c0025b64:	83 d8 00             	sbb    eax,0x0
c0025b67:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0025b6a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0025b6d:	e9 aa 01 00 00       	jmp    c0025d1c <__adddf3+0x519>
c0025b72:	bf 20 00 00 00       	mov    edi,0x20
c0025b77:	29 f7                	sub    edi,esi
c0025b79:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0025b7c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0025b7f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0025b82:	d3 e3                	shl    ebx,cl
c0025b84:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0025b87:	89 f1                	mov    ecx,esi
c0025b89:	d3 ef                	shr    edi,cl
c0025b8b:	09 fb                	or     ebx,edi
c0025b8d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0025b90:	89 f1                	mov    ecx,esi
c0025b92:	d3 ef                	shr    edi,cl
c0025b94:	89 fe                	mov    esi,edi
c0025b96:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0025b99:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0025b9c:	d3 e7                	shl    edi,cl
c0025b9e:	85 ff                	test   edi,edi
c0025ba0:	0f 95 c1             	setne  cl
c0025ba3:	0f b6 c9             	movzx  ecx,cl
c0025ba6:	09 cb                	or     ebx,ecx
c0025ba8:	29 da                	sub    edx,ebx
c0025baa:	19 f0                	sbb    eax,esi
c0025bac:	eb b9                	jmp    c0025b67 <__adddf3+0x364>
c0025bae:	0f 84 cd 00 00 00    	je     c0025c81 <__adddf3+0x47e>
c0025bb4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0025bb7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0025bba:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0025bbd:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0025bc1:	75 1b                	jne    c0025bde <__adddf3+0x3db>
c0025bc3:	89 d6                	mov    esi,edx
c0025bc5:	09 c6                	or     esi,eax
c0025bc7:	0f 84 7b 02 00 00    	je     c0025e48 <__adddf3+0x645>
c0025bcd:	4b                   	dec    ebx
c0025bce:	75 24                	jne    c0025bf4 <__adddf3+0x3f1>
c0025bd0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025bd3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025bd6:	29 d1                	sub    ecx,edx
c0025bd8:	19 c6                	sbb    esi,eax
c0025bda:	89 ca                	mov    edx,ecx
c0025bdc:	eb 61                	jmp    c0025c3f <__adddf3+0x43c>
c0025bde:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0025be1:	f7 d6                	not    esi
c0025be3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0025be9:	0f 84 59 02 00 00    	je     c0025e48 <__adddf3+0x645>
c0025bef:	0d 00 00 00 80       	or     eax,0x80000000
c0025bf4:	83 fb 1f             	cmp    ebx,0x1f
c0025bf7:	7e 4d                	jle    c0025c46 <__adddf3+0x443>
c0025bf9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0025bfc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0025bff:	83 fb 3f             	cmp    ebx,0x3f
c0025c02:	0f 8f 40 02 00 00    	jg     c0025e48 <__adddf3+0x645>
c0025c08:	83 e3 1f             	and    ebx,0x1f
c0025c0b:	89 d9                	mov    ecx,ebx
c0025c0d:	89 c7                	mov    edi,eax
c0025c0f:	d3 ef                	shr    edi,cl
c0025c11:	31 db                	xor    ebx,ebx
c0025c13:	85 c9                	test   ecx,ecx
c0025c15:	74 12                	je     c0025c29 <__adddf3+0x426>
c0025c17:	be 20 00 00 00       	mov    esi,0x20
c0025c1c:	29 ce                	sub    esi,ecx
c0025c1e:	89 f1                	mov    ecx,esi
c0025c20:	d3 e0                	shl    eax,cl
c0025c22:	31 db                	xor    ebx,ebx
c0025c24:	85 c0                	test   eax,eax
c0025c26:	0f 95 c3             	setne  bl
c0025c29:	31 c0                	xor    eax,eax
c0025c2b:	85 d2                	test   edx,edx
c0025c2d:	0f 95 c0             	setne  al
c0025c30:	09 c7                	or     edi,eax
c0025c32:	09 fb                	or     ebx,edi
c0025c34:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025c37:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025c3a:	29 da                	sub    edx,ebx
c0025c3c:	83 de 00             	sbb    esi,0x0
c0025c3f:	89 f0                	mov    eax,esi
c0025c41:	e9 d6 00 00 00       	jmp    c0025d1c <__adddf3+0x519>
c0025c46:	be 20 00 00 00       	mov    esi,0x20
c0025c4b:	29 de                	sub    esi,ebx
c0025c4d:	89 c7                	mov    edi,eax
c0025c4f:	89 f1                	mov    ecx,esi
c0025c51:	d3 e7                	shl    edi,cl
c0025c53:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0025c56:	89 d7                	mov    edi,edx
c0025c58:	88 d9                	mov    cl,bl
c0025c5a:	d3 ef                	shr    edi,cl
c0025c5c:	89 f9                	mov    ecx,edi
c0025c5e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0025c61:	09 cf                	or     edi,ecx
c0025c63:	88 d9                	mov    cl,bl
c0025c65:	d3 e8                	shr    eax,cl
c0025c67:	89 f1                	mov    ecx,esi
c0025c69:	d3 e2                	shl    edx,cl
c0025c6b:	85 d2                	test   edx,edx
c0025c6d:	0f 95 c2             	setne  dl
c0025c70:	0f b6 d2             	movzx  edx,dl
c0025c73:	09 d7                	or     edi,edx
c0025c75:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025c78:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025c7b:	29 fa                	sub    edx,edi
c0025c7d:	19 c6                	sbb    esi,eax
c0025c7f:	eb be                	jmp    c0025c3f <__adddf3+0x43c>
c0025c81:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0025c84:	8d 5e 01             	lea    ebx,[esi+0x1]
c0025c87:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0025c8d:	75 6a                	jne    c0025cf9 <__adddf3+0x4f6>
c0025c8f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0025c93:	75 58                	jne    c0025ced <__adddf3+0x4ea>
c0025c95:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0025c98:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0025c9b:	89 d6                	mov    esi,edx
c0025c9d:	09 c6                	or     esi,eax
c0025c9f:	75 17                	jne    c0025cb8 <__adddf3+0x4b5>
c0025ca1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0025ca4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0025ca7:	85 db                	test   ebx,ebx
c0025ca9:	0f 85 99 01 00 00    	jne    c0025e48 <__adddf3+0x645>
c0025caf:	31 ff                	xor    edi,edi
c0025cb1:	31 c9                	xor    ecx,ecx
c0025cb3:	e9 90 01 00 00       	jmp    c0025e48 <__adddf3+0x645>
c0025cb8:	85 db                	test   ebx,ebx
c0025cba:	0f 84 88 01 00 00    	je     c0025e48 <__adddf3+0x645>
c0025cc0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0025cc3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0025cc6:	85 c0                	test   eax,eax
c0025cc8:	79 10                	jns    c0025cda <__adddf3+0x4d7>
c0025cca:	31 c9                	xor    ecx,ecx
c0025ccc:	f7 da                	neg    edx
c0025cce:	0f 95 c1             	setne  cl
c0025cd1:	01 c8                	add    eax,ecx
c0025cd3:	f7 d8                	neg    eax
c0025cd5:	e9 2f 01 00 00       	jmp    c0025e09 <__adddf3+0x606>
c0025cda:	31 ff                	xor    edi,edi
c0025cdc:	31 c9                	xor    ecx,ecx
c0025cde:	89 c3                	mov    ebx,eax
c0025ce0:	09 d3                	or     ebx,edx
c0025ce2:	0f 84 60 01 00 00    	je     c0025e48 <__adddf3+0x645>
c0025ce8:	e9 05 01 00 00       	jmp    c0025df2 <__adddf3+0x5ef>
c0025ced:	31 ff                	xor    edi,edi
c0025cef:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0025cf4:	e9 4f 01 00 00       	jmp    c0025e48 <__adddf3+0x645>
c0025cf9:	89 c1                	mov    ecx,eax
c0025cfb:	89 d0                	mov    eax,edx
c0025cfd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0025d00:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0025d03:	89 ca                	mov    edx,ecx
c0025d05:	85 c9                	test   ecx,ecx
c0025d07:	79 2c                	jns    c0025d35 <__adddf3+0x532>
c0025d09:	31 c9                	xor    ecx,ecx
c0025d0b:	f7 d8                	neg    eax
c0025d0d:	0f 95 c1             	setne  cl
c0025d10:	01 ca                	add    edx,ecx
c0025d12:	f7 da                	neg    edx
c0025d14:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0025d17:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0025d1a:	eb 19                	jmp    c0025d35 <__adddf3+0x532>
c0025d1c:	85 c0                	test   eax,eax
c0025d1e:	0f 89 e5 00 00 00    	jns    c0025e09 <__adddf3+0x606>
c0025d24:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025d29:	89 c1                	mov    ecx,eax
c0025d2b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025d2e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0025d31:	89 d0                	mov    eax,edx
c0025d33:	89 ca                	mov    edx,ecx
c0025d35:	85 d2                	test   edx,edx
c0025d37:	74 59                	je     c0025d92 <__adddf3+0x58f>
c0025d39:	0f bd da             	bsr    ebx,edx
c0025d3c:	83 f3 1f             	xor    ebx,0x1f
c0025d3f:	88 d9                	mov    cl,bl
c0025d41:	d3 e2                	shl    edx,cl
c0025d43:	bf 20 00 00 00       	mov    edi,0x20
c0025d48:	89 f9                	mov    ecx,edi
c0025d4a:	29 d9                	sub    ecx,ebx
c0025d4c:	89 c6                	mov    esi,eax
c0025d4e:	d3 ee                	shr    esi,cl
c0025d50:	09 d6                	or     esi,edx
c0025d52:	88 d9                	mov    cl,bl
c0025d54:	d3 e0                	shl    eax,cl
c0025d56:	89 c2                	mov    edx,eax
c0025d58:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025d5b:	25 ff 07 00 00       	and    eax,0x7ff
c0025d60:	39 d8                	cmp    eax,ebx
c0025d62:	7f 22                	jg     c0025d86 <__adddf3+0x583>
c0025d64:	29 c3                	sub    ebx,eax
c0025d66:	43                   	inc    ebx
c0025d67:	88 d9                	mov    cl,bl
c0025d69:	d3 ea                	shr    edx,cl
c0025d6b:	29 df                	sub    edi,ebx
c0025d6d:	89 f9                	mov    ecx,edi
c0025d6f:	89 f0                	mov    eax,esi
c0025d71:	d3 e0                	shl    eax,cl
c0025d73:	09 c2                	or     edx,eax
c0025d75:	89 f0                	mov    eax,esi
c0025d77:	88 d9                	mov    cl,bl
c0025d79:	d3 e8                	shr    eax,cl
c0025d7b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0025d7e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0025d84:	eb 6f                	jmp    c0025df5 <__adddf3+0x5f2>
c0025d86:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025d89:	29 d8                	sub    eax,ebx
c0025d8b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025d8e:	89 f0                	mov    eax,esi
c0025d90:	eb 59                	jmp    c0025deb <__adddf3+0x5e8>
c0025d92:	85 c0                	test   eax,eax
c0025d94:	74 6a                	je     c0025e00 <__adddf3+0x5fd>
c0025d96:	0f bd c8             	bsr    ecx,eax
c0025d99:	83 f1 1f             	xor    ecx,0x1f
c0025d9c:	d3 e0                	shl    eax,cl
c0025d9e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025da1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0025da7:	83 c1 20             	add    ecx,0x20
c0025daa:	39 cb                	cmp    ebx,ecx
c0025dac:	7f 35                	jg     c0025de3 <__adddf3+0x5e0>
c0025dae:	29 d9                	sub    ecx,ebx
c0025db0:	8d 71 01             	lea    esi,[ecx+0x1]
c0025db3:	83 fe 1f             	cmp    esi,0x1f
c0025db6:	7e 09                	jle    c0025dc1 <__adddf3+0x5be>
c0025db8:	83 e9 1f             	sub    ecx,0x1f
c0025dbb:	d3 e8                	shr    eax,cl
c0025dbd:	89 c3                	mov    ebx,eax
c0025dbf:	eb 11                	jmp    c0025dd2 <__adddf3+0x5cf>
c0025dc1:	b9 20 00 00 00       	mov    ecx,0x20
c0025dc6:	29 f1                	sub    ecx,esi
c0025dc8:	89 c3                	mov    ebx,eax
c0025dca:	d3 e3                	shl    ebx,cl
c0025dcc:	89 f1                	mov    ecx,esi
c0025dce:	d3 e8                	shr    eax,cl
c0025dd0:	89 c2                	mov    edx,eax
c0025dd2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025dd5:	25 00 f8 ff ff       	and    eax,0xfffff800
c0025dda:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025ddd:	89 d0                	mov    eax,edx
c0025ddf:	89 da                	mov    edx,ebx
c0025de1:	eb 26                	jmp    c0025e09 <__adddf3+0x606>
c0025de3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0025de6:	29 cf                	sub    edi,ecx
c0025de8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0025deb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025df0:	eb 17                	jmp    c0025e09 <__adddf3+0x606>
c0025df2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0025df5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0025df8:	eb 0f                	jmp    c0025e09 <__adddf3+0x606>
c0025dfa:	31 d2                	xor    edx,edx
c0025dfc:	31 c0                	xor    eax,eax
c0025dfe:	eb 09                	jmp    c0025e09 <__adddf3+0x606>
c0025e00:	89 c2                	mov    edx,eax
c0025e02:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0025e09:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025e0c:	c1 e1 14             	shl    ecx,0x14
c0025e0f:	89 c3                	mov    ebx,eax
c0025e11:	c1 eb 0b             	shr    ebx,0xb
c0025e14:	09 d9                	or     ecx,ebx
c0025e16:	89 d3                	mov    ebx,edx
c0025e18:	c1 eb 0b             	shr    ebx,0xb
c0025e1b:	c1 e0 15             	shl    eax,0x15
c0025e1e:	09 d8                	or     eax,ebx
c0025e20:	89 c7                	mov    edi,eax
c0025e22:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0025e28:	0f 95 c0             	setne  al
c0025e2b:	89 c6                	mov    esi,eax
c0025e2d:	09 f3                	or     ebx,esi
c0025e2f:	83 e3 01             	and    ebx,0x1
c0025e32:	c1 ea 0a             	shr    edx,0xa
c0025e35:	21 da                	and    edx,ebx
c0025e37:	89 f8                	mov    eax,edi
c0025e39:	01 d0                	add    eax,edx
c0025e3b:	83 d1 00             	adc    ecx,0x0
c0025e3e:	89 c7                	mov    edi,eax
c0025e40:	eb 06                	jmp    c0025e48 <__adddf3+0x645>
c0025e42:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0025e45:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0025e48:	89 f8                	mov    eax,edi
c0025e4a:	89 ca                	mov    edx,ecx
c0025e4c:	83 c4 24             	add    esp,0x24
c0025e4f:	5b                   	pop    ebx
c0025e50:	5e                   	pop    esi
c0025e51:	5f                   	pop    edi
c0025e52:	5d                   	pop    ebp
c0025e53:	c3                   	ret    

c0025e54 <__subdf3>:
c0025e54:	55                   	push   ebp
c0025e55:	89 e5                	mov    ebp,esp
c0025e57:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025e5a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0025e5d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0025e63:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0025e66:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0025e69:	5d                   	pop    ebp
c0025e6a:	e9 94 f9 ff ff       	jmp    c0025803 <__adddf3>

c0025e6f <__negdf2>:
c0025e6f:	55                   	push   ebp
c0025e70:	89 e5                	mov    ebp,esp
c0025e72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e75:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025e78:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0025e7e:	5d                   	pop    ebp
c0025e7f:	c3                   	ret    

c0025e80 <__muldf3>:
c0025e80:	55                   	push   ebp
c0025e81:	89 e5                	mov    ebp,esp
c0025e83:	57                   	push   edi
c0025e84:	56                   	push   esi
c0025e85:	53                   	push   ebx
c0025e86:	83 ec 24             	sub    esp,0x24
c0025e89:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0025e8c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e8f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025e92:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025e95:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025e98:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0025e9b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025e9e:	89 c8                	mov    eax,ecx
c0025ea0:	c1 f8 14             	sar    eax,0x14
c0025ea3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025ea6:	89 f8                	mov    eax,edi
c0025ea8:	89 fb                	mov    ebx,edi
c0025eaa:	c1 e3 0b             	shl    ebx,0xb
c0025ead:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0025eb0:	c1 e1 0b             	shl    ecx,0xb
c0025eb3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0025eb9:	c1 e8 15             	shr    eax,0x15
c0025ebc:	09 c1                	or     ecx,eax
c0025ebe:	89 d6                	mov    esi,edx
c0025ec0:	89 d0                	mov    eax,edx
c0025ec2:	c1 f8 14             	sar    eax,0x14
c0025ec5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025ec8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025ecb:	89 c3                	mov    ebx,eax
c0025ecd:	c1 e3 0b             	shl    ebx,0xb
c0025ed0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0025ed3:	c1 e6 0b             	shl    esi,0xb
c0025ed6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0025edc:	c1 e8 15             	shr    eax,0x15
c0025edf:	09 c6                	or     esi,eax
c0025ee1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0025ee4:	25 ff 07 00 00       	and    eax,0x7ff
c0025ee9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025eec:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0025eef:	25 ff 07 00 00       	and    eax,0x7ff
c0025ef4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0025ef7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025efa:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0025efd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0025f04:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0025f07:	40                   	inc    eax
c0025f08:	a9 fe 07 00 00       	test   eax,0x7fe
c0025f0d:	0f 85 8d 00 00 00    	jne    c0025fa0 <__muldf3+0x120>
c0025f13:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025f16:	09 c8                	or     eax,ecx
c0025f18:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0025f1c:	74 44                	je     c0025f62 <__muldf3+0xe2>
c0025f1e:	85 c0                	test   eax,eax
c0025f20:	0f 85 31 02 00 00    	jne    c0026157 <__muldf3+0x2d7>
c0025f26:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0025f29:	40                   	inc    eax
c0025f2a:	a9 fe 07 00 00       	test   eax,0x7fe
c0025f2f:	75 13                	jne    c0025f44 <__muldf3+0xc4>
c0025f31:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025f34:	09 f1                	or     ecx,esi
c0025f36:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0025f3a:	74 22                	je     c0025f5e <__muldf3+0xde>
c0025f3c:	85 c9                	test   ecx,ecx
c0025f3e:	0f 85 0d 02 00 00    	jne    c0026151 <__muldf3+0x2d1>
c0025f44:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0025f48:	0f 89 09 02 00 00    	jns    c0026157 <__muldf3+0x2d7>
c0025f4e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025f51:	05 00 00 00 80       	add    eax,0x80000000
c0025f56:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025f59:	e9 f9 01 00 00       	jmp    c0026157 <__muldf3+0x2d7>
c0025f5e:	85 c9                	test   ecx,ecx
c0025f60:	eb 2e                	jmp    c0025f90 <__muldf3+0x110>
c0025f62:	85 c0                	test   eax,eax
c0025f64:	74 20                	je     c0025f86 <__muldf3+0x106>
c0025f66:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0025f69:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025f6c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0025f6f:	c1 ef 1f             	shr    edi,0x1f
c0025f72:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0025f75:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0025f78:	8d 43 ff             	lea    eax,[ebx-0x1]
c0025f7b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025f7e:	09 f9                	or     ecx,edi
c0025f80:	78 1e                	js     c0025fa0 <__muldf3+0x120>
c0025f82:	89 c3                	mov    ebx,eax
c0025f84:	eb e0                	jmp    c0025f66 <__muldf3+0xe6>
c0025f86:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0025f89:	f7 d0                	not    eax
c0025f8b:	a9 ff 07 00 00       	test   eax,0x7ff
c0025f90:	75 b2                	jne    c0025f44 <__muldf3+0xc4>
c0025f92:	31 ff                	xor    edi,edi
c0025f94:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0025f9b:	e9 b7 01 00 00       	jmp    c0026157 <__muldf3+0x2d7>
c0025fa0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0025fa3:	40                   	inc    eax
c0025fa4:	a9 fe 07 00 00       	test   eax,0x7fe
c0025fa9:	75 57                	jne    c0026002 <__muldf3+0x182>
c0025fab:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025fae:	09 f0                	or     eax,esi
c0025fb0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0025fb4:	74 23                	je     c0025fd9 <__muldf3+0x159>
c0025fb6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0025fba:	0f 89 91 01 00 00    	jns    c0026151 <__muldf3+0x2d1>
c0025fc0:	85 c0                	test   eax,eax
c0025fc2:	0f 85 89 01 00 00    	jne    c0026151 <__muldf3+0x2d1>
c0025fc8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0025fcb:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0025fd1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025fd4:	e9 7e 01 00 00       	jmp    c0026157 <__muldf3+0x2d7>
c0025fd9:	85 c0                	test   eax,eax
c0025fdb:	75 0c                	jne    c0025fe9 <__muldf3+0x169>
c0025fdd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0025fe1:	0f 89 6a 01 00 00    	jns    c0026151 <__muldf3+0x2d1>
c0025fe7:	eb df                	jmp    c0025fc8 <__muldf3+0x148>
c0025fe9:	01 f6                	add    esi,esi
c0025feb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025fee:	c1 ea 1f             	shr    edx,0x1f
c0025ff1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0025ff4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0025ff7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0025ffa:	09 d6                	or     esi,edx
c0025ffc:	78 04                	js     c0026002 <__muldf3+0x182>
c0025ffe:	89 c3                	mov    ebx,eax
c0026000:	eb e7                	jmp    c0025fe9 <__muldf3+0x169>
c0026002:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0026008:	81 ce 00 00 00 80    	or     esi,0x80000000
c002600e:	89 c8                	mov    eax,ecx
c0026010:	f7 e6                	mul    esi
c0026012:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0026015:	89 c7                	mov    edi,eax
c0026017:	89 c8                	mov    eax,ecx
c0026019:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c002601c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c002601f:	89 c1                	mov    ecx,eax
c0026021:	89 f0                	mov    eax,esi
c0026023:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0026026:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0026029:	89 c6                	mov    esi,eax
c002602b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002602e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0026031:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0026034:	31 c0                	xor    eax,eax
c0026036:	01 f1                	add    ecx,esi
c0026038:	0f 92 c0             	setb   al
c002603b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c002603e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0026041:	83 d6 00             	adc    esi,0x0
c0026044:	01 c7                	add    edi,eax
c0026046:	83 d6 00             	adc    esi,0x0
c0026049:	01 ca                	add    edx,ecx
c002604b:	0f 92 c1             	setb   cl
c002604e:	0f b6 c9             	movzx  ecx,cl
c0026051:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0026054:	83 d6 00             	adc    esi,0x0
c0026057:	01 cf                	add    edi,ecx
c0026059:	83 d6 00             	adc    esi,0x0
c002605c:	31 c9                	xor    ecx,ecx
c002605e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0026061:	0f 95 c1             	setne  cl
c0026064:	09 cf                	or     edi,ecx
c0026066:	85 f6                	test   esi,esi
c0026068:	78 0c                	js     c0026076 <__muldf3+0x1f6>
c002606a:	01 f6                	add    esi,esi
c002606c:	89 f8                	mov    eax,edi
c002606e:	c1 e8 1f             	shr    eax,0x1f
c0026071:	09 c6                	or     esi,eax
c0026073:	01 ff                	add    edi,edi
c0026075:	4b                   	dec    ebx
c0026076:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c002607c:	0f 8f 85 00 00 00    	jg     c0026107 <__muldf3+0x287>
c0026082:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0026088:	85 db                	test   ebx,ebx
c002608a:	0f 8f 84 00 00 00    	jg     c0026114 <__muldf3+0x294>
c0026090:	83 fb cc             	cmp    ebx,0xffffffcc
c0026093:	7c 79                	jl     c002610e <__muldf3+0x28e>
c0026095:	ba 01 00 00 00       	mov    edx,0x1
c002609a:	29 da                	sub    edx,ebx
c002609c:	81 ce 00 00 00 80    	or     esi,0x80000000
c00260a2:	83 fa 1f             	cmp    edx,0x1f
c00260a5:	7e 30                	jle    c00260d7 <__muldf3+0x257>
c00260a7:	83 fa 20             	cmp    edx,0x20
c00260aa:	75 0b                	jne    c00260b7 <__muldf3+0x237>
c00260ac:	31 c0                	xor    eax,eax
c00260ae:	85 ff                	test   edi,edi
c00260b0:	0f 95 c0             	setne  al
c00260b3:	89 c7                	mov    edi,eax
c00260b5:	eb 1a                	jmp    c00260d1 <__muldf3+0x251>
c00260b7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c00260ba:	89 f0                	mov    eax,esi
c00260bc:	d3 e0                	shl    eax,cl
c00260be:	09 f8                	or     eax,edi
c00260c0:	0f 95 c0             	setne  al
c00260c3:	0f b6 c0             	movzx  eax,al
c00260c6:	89 c7                	mov    edi,eax
c00260c8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00260cd:	29 d9                	sub    ecx,ebx
c00260cf:	d3 ee                	shr    esi,cl
c00260d1:	09 f7                	or     edi,esi
c00260d3:	31 db                	xor    ebx,ebx
c00260d5:	eb 3b                	jmp    c0026112 <__muldf3+0x292>
c00260d7:	83 c3 1f             	add    ebx,0x1f
c00260da:	89 f0                	mov    eax,esi
c00260dc:	88 d9                	mov    cl,bl
c00260de:	d3 e0                	shl    eax,cl
c00260e0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00260e3:	89 f8                	mov    eax,edi
c00260e5:	88 d1                	mov    cl,dl
c00260e7:	d3 e8                	shr    eax,cl
c00260e9:	89 c1                	mov    ecx,eax
c00260eb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00260ee:	09 c8                	or     eax,ecx
c00260f0:	88 d9                	mov    cl,bl
c00260f2:	d3 e7                	shl    edi,cl
c00260f4:	31 db                	xor    ebx,ebx
c00260f6:	85 ff                	test   edi,edi
c00260f8:	0f 95 c3             	setne  bl
c00260fb:	89 df                	mov    edi,ebx
c00260fd:	09 c7                	or     edi,eax
c00260ff:	88 d1                	mov    cl,dl
c0026101:	d3 ee                	shr    esi,cl
c0026103:	31 db                	xor    ebx,ebx
c0026105:	eb 0d                	jmp    c0026114 <__muldf3+0x294>
c0026107:	bb ff 07 00 00       	mov    ebx,0x7ff
c002610c:	eb 02                	jmp    c0026110 <__muldf3+0x290>
c002610e:	31 db                	xor    ebx,ebx
c0026110:	31 ff                	xor    edi,edi
c0026112:	31 f6                	xor    esi,esi
c0026114:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026117:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c002611a:	25 00 f8 ff ff       	and    eax,0xfffff800
c002611f:	09 c3                	or     ebx,eax
c0026121:	c1 e3 14             	shl    ebx,0x14
c0026124:	89 f0                	mov    eax,esi
c0026126:	c1 e8 0b             	shr    eax,0xb
c0026129:	09 c3                	or     ebx,eax
c002612b:	89 f8                	mov    eax,edi
c002612d:	c1 e8 0b             	shr    eax,0xb
c0026130:	c1 e6 15             	shl    esi,0x15
c0026133:	09 c6                	or     esi,eax
c0026135:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c002613b:	0f 95 c1             	setne  cl
c002613e:	09 c8                	or     eax,ecx
c0026140:	83 e0 01             	and    eax,0x1
c0026143:	c1 ef 0a             	shr    edi,0xa
c0026146:	21 c7                	and    edi,eax
c0026148:	01 f7                	add    edi,esi
c002614a:	83 d3 00             	adc    ebx,0x0
c002614d:	89 da                	mov    edx,ebx
c002614f:	eb 03                	jmp    c0026154 <__muldf3+0x2d4>
c0026151:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0026154:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0026157:	89 f8                	mov    eax,edi
c0026159:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002615c:	83 c4 24             	add    esp,0x24
c002615f:	5b                   	pop    ebx
c0026160:	5e                   	pop    esi
c0026161:	5f                   	pop    edi
c0026162:	5d                   	pop    ebp
c0026163:	c3                   	ret    

c0026164 <__divdf3>:
c0026164:	55                   	push   ebp
c0026165:	89 e5                	mov    ebp,esp
c0026167:	57                   	push   edi
c0026168:	56                   	push   esi
c0026169:	53                   	push   ebx
c002616a:	83 ec 2c             	sub    esp,0x2c
c002616d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026173:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026176:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0026179:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002617c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002617f:	89 ce                	mov    esi,ecx
c0026181:	89 c8                	mov    eax,ecx
c0026183:	c1 f8 14             	sar    eax,0x14
c0026186:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026189:	89 f8                	mov    eax,edi
c002618b:	89 fb                	mov    ebx,edi
c002618d:	c1 e3 0b             	shl    ebx,0xb
c0026190:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0026193:	c1 e6 0b             	shl    esi,0xb
c0026196:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002619c:	c1 e8 15             	shr    eax,0x15
c002619f:	09 c6                	or     esi,eax
c00261a1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c00261a4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00261a7:	89 c2                	mov    edx,eax
c00261a9:	c1 fa 14             	sar    edx,0x14
c00261ac:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00261af:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00261b2:	89 de                	mov    esi,ebx
c00261b4:	c1 e6 0b             	shl    esi,0xb
c00261b7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00261ba:	c1 e0 0b             	shl    eax,0xb
c00261bd:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00261c2:	c1 eb 15             	shr    ebx,0x15
c00261c5:	09 d8                	or     eax,ebx
c00261c7:	89 c2                	mov    edx,eax
c00261c9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00261cc:	25 ff 07 00 00       	and    eax,0x7ff
c00261d1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00261d4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00261d7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00261dd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c00261e0:	29 d8                	sub    eax,ebx
c00261e2:	05 ff 03 00 00       	add    eax,0x3ff
c00261e7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00261ea:	46                   	inc    esi
c00261eb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00261f1:	0f 85 a5 00 00 00    	jne    c002629c <__divdf3+0x138>
c00261f7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00261fa:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00261fd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0026201:	74 2a                	je     c002622d <__divdf3+0xc9>
c0026203:	85 f6                	test   esi,esi
c0026205:	0f 85 cc 02 00 00    	jne    c00264d7 <__divdf3+0x373>
c002620b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002620e:	40                   	inc    eax
c002620f:	a9 fe 07 00 00       	test   eax,0x7fe
c0026214:	75 26                	jne    c002623c <__divdf3+0xd8>
c0026216:	85 db                	test   ebx,ebx
c0026218:	74 22                	je     c002623c <__divdf3+0xd8>
c002621a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002621d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026220:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026223:	09 d0                	or     eax,edx
c0026225:	0f 85 ac 02 00 00    	jne    c00264d7 <__divdf3+0x373>
c002622b:	eb 63                	jmp    c0026290 <__divdf3+0x12c>
c002622d:	85 f6                	test   esi,esi
c002622f:	75 22                	jne    c0026253 <__divdf3+0xef>
c0026231:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026234:	40                   	inc    eax
c0026235:	a9 fe 07 00 00       	test   eax,0x7fe
c002623a:	74 36                	je     c0026272 <__divdf3+0x10e>
c002623c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026240:	0f 89 91 02 00 00    	jns    c00264d7 <__divdf3+0x373>
c0026246:	89 f8                	mov    eax,edi
c0026248:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002624e:	e9 80 02 00 00       	jmp    c00264d3 <__divdf3+0x36f>
c0026253:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026256:	01 f6                	add    esi,esi
c0026258:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002625b:	c1 ef 1f             	shr    edi,0x1f
c002625e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026261:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0026264:	8d 48 ff             	lea    ecx,[eax-0x1]
c0026267:	09 f7                	or     edi,esi
c0026269:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c002626c:	78 2e                	js     c002629c <__divdf3+0x138>
c002626e:	89 c8                	mov    eax,ecx
c0026270:	eb e1                	jmp    c0026253 <__divdf3+0xef>
c0026272:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026275:	09 d0                	or     eax,edx
c0026277:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002627b:	74 0f                	je     c002628c <__divdf3+0x128>
c002627d:	85 c0                	test   eax,eax
c002627f:	74 bb                	je     c002623c <__divdf3+0xd8>
c0026281:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0026284:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026287:	e9 4b 02 00 00       	jmp    c00264d7 <__divdf3+0x373>
c002628c:	85 c0                	test   eax,eax
c002628e:	75 ac                	jne    c002623c <__divdf3+0xd8>
c0026290:	31 ff                	xor    edi,edi
c0026292:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0026297:	e9 3b 02 00 00       	jmp    c00264d7 <__divdf3+0x373>
c002629c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002629f:	8d 4f 01             	lea    ecx,[edi+0x1]
c00262a2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00262a8:	75 6b                	jne    c0026315 <__divdf3+0x1b1>
c00262aa:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00262ad:	09 d6                	or     esi,edx
c00262af:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00262b3:	74 28                	je     c00262dd <__divdf3+0x179>
c00262b5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00262b8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00262bb:	85 f6                	test   esi,esi
c00262bd:	0f 85 14 02 00 00    	jne    c00264d7 <__divdf3+0x373>
c00262c3:	31 ff                	xor    edi,edi
c00262c5:	31 c9                	xor    ecx,ecx
c00262c7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00262ca:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00262cd:	0f 89 04 02 00 00    	jns    c00264d7 <__divdf3+0x373>
c00262d3:	b9 00 00 00 80       	mov    ecx,0x80000000
c00262d8:	e9 fa 01 00 00       	jmp    c00264d7 <__divdf3+0x373>
c00262dd:	85 f6                	test   esi,esi
c00262df:	75 1b                	jne    c00262fc <__divdf3+0x198>
c00262e1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00262e4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00262e7:	25 00 00 00 80       	and    eax,0x80000000
c00262ec:	31 c9                	xor    ecx,ecx
c00262ee:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00262f3:	89 cf                	mov    edi,ecx
c00262f5:	89 c1                	mov    ecx,eax
c00262f7:	e9 db 01 00 00       	jmp    c00264d7 <__divdf3+0x373>
c00262fc:	01 d2                	add    edx,edx
c00262fe:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026301:	c1 eb 1f             	shr    ebx,0x1f
c0026304:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026307:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002630a:	8d 48 01             	lea    ecx,[eax+0x1]
c002630d:	09 da                	or     edx,ebx
c002630f:	78 04                	js     c0026315 <__divdf3+0x1b1>
c0026311:	89 c8                	mov    eax,ecx
c0026313:	eb e7                	jmp    c00262fc <__divdf3+0x198>
c0026315:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026318:	81 ce 00 00 00 80    	or     esi,0x80000000
c002631e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026324:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0026327:	39 d6                	cmp    esi,edx
c0026329:	77 0d                	ja     c0026338 <__divdf3+0x1d4>
c002632b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002632e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0026331:	72 1b                	jb     c002634e <__divdf3+0x1ea>
c0026333:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0026336:	75 16                	jne    c002634e <__divdf3+0x1ea>
c0026338:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002633b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002633e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0026341:	83 de 00             	sbb    esi,0x0
c0026344:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0026347:	ba 01 00 00 00       	mov    edx,0x1
c002634c:	eb 02                	jmp    c0026350 <__divdf3+0x1ec>
c002634e:	31 d2                	xor    edx,edx
c0026350:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0026357:	31 ff                	xor    edi,edi
c0026359:	01 ff                	add    edi,edi
c002635b:	89 d1                	mov    ecx,edx
c002635d:	c1 e9 1f             	shr    ecx,0x1f
c0026360:	09 cf                	or     edi,ecx
c0026362:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0026365:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0026368:	89 da                	mov    edx,ebx
c002636a:	89 f3                	mov    ebx,esi
c002636c:	8d 34 36             	lea    esi,[esi+esi*1]
c002636f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026372:	c1 e9 1f             	shr    ecx,0x1f
c0026375:	09 ce                	or     esi,ecx
c0026377:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002637a:	01 c9                	add    ecx,ecx
c002637c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c002637f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0026382:	85 db                	test   ebx,ebx
c0026384:	78 29                	js     c00263af <__divdf3+0x24b>
c0026386:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0026389:	72 07                	jb     c0026392 <__divdf3+0x22e>
c002638b:	75 3c                	jne    c00263c9 <__divdf3+0x265>
c002638d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026390:	77 37                	ja     c00263c9 <__divdf3+0x265>
c0026392:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026395:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0026398:	31 d2                	xor    edx,edx
c002639a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c002639d:	0f 97 c2             	seta   dl
c00263a0:	29 d6                	sub    esi,edx
c00263a2:	89 d9                	mov    ecx,ebx
c00263a4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00263a7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00263aa:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00263ad:	eb 17                	jmp    c00263c6 <__divdf3+0x262>
c00263af:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00263b2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00263b5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00263b8:	0f 97 c1             	seta   cl
c00263bb:	0f b6 c9             	movzx  ecx,cl
c00263be:	29 ce                	sub    esi,ecx
c00263c0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00263c3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00263c6:	83 ca 01             	or     edx,0x1
c00263c9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00263cc:	75 8b                	jne    c0026359 <__divdf3+0x1f5>
c00263ce:	c1 e7 09             	shl    edi,0x9
c00263d1:	89 d1                	mov    ecx,edx
c00263d3:	c1 e9 17             	shr    ecx,0x17
c00263d6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00263d9:	09 f3                	or     ebx,esi
c00263db:	0f 95 c3             	setne  bl
c00263de:	0f b6 db             	movzx  ebx,bl
c00263e1:	c1 e2 09             	shl    edx,0x9
c00263e4:	09 d3                	or     ebx,edx
c00263e6:	89 ca                	mov    edx,ecx
c00263e8:	09 fa                	or     edx,edi
c00263ea:	78 0c                	js     c00263f8 <__divdf3+0x294>
c00263ec:	01 d2                	add    edx,edx
c00263ee:	89 d9                	mov    ecx,ebx
c00263f0:	c1 e9 1f             	shr    ecx,0x1f
c00263f3:	09 ca                	or     edx,ecx
c00263f5:	01 db                	add    ebx,ebx
c00263f7:	48                   	dec    eax
c00263f8:	3d fe 07 00 00       	cmp    eax,0x7fe
c00263fd:	0f 8f 83 00 00 00    	jg     c0026486 <__divdf3+0x322>
c0026403:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026409:	85 c0                	test   eax,eax
c002640b:	0f 8f 82 00 00 00    	jg     c0026493 <__divdf3+0x32f>
c0026411:	83 f8 cc             	cmp    eax,0xffffffcc
c0026414:	7c 77                	jl     c002648d <__divdf3+0x329>
c0026416:	be 01 00 00 00       	mov    esi,0x1
c002641b:	29 c6                	sub    esi,eax
c002641d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026423:	83 fe 1f             	cmp    esi,0x1f
c0026426:	7e 2f                	jle    c0026457 <__divdf3+0x2f3>
c0026428:	83 fe 20             	cmp    esi,0x20
c002642b:	75 0a                	jne    c0026437 <__divdf3+0x2d3>
c002642d:	85 db                	test   ebx,ebx
c002642f:	0f 95 c3             	setne  bl
c0026432:	0f b6 db             	movzx  ebx,bl
c0026435:	eb 1a                	jmp    c0026451 <__divdf3+0x2ed>
c0026437:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002643a:	89 d7                	mov    edi,edx
c002643c:	d3 e7                	shl    edi,cl
c002643e:	89 f9                	mov    ecx,edi
c0026440:	09 d9                	or     ecx,ebx
c0026442:	0f 95 c3             	setne  bl
c0026445:	0f b6 db             	movzx  ebx,bl
c0026448:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002644d:	29 c1                	sub    ecx,eax
c002644f:	d3 ea                	shr    edx,cl
c0026451:	09 d3                	or     ebx,edx
c0026453:	31 c0                	xor    eax,eax
c0026455:	eb 3a                	jmp    c0026491 <__divdf3+0x32d>
c0026457:	83 c0 1f             	add    eax,0x1f
c002645a:	89 d7                	mov    edi,edx
c002645c:	88 c1                	mov    cl,al
c002645e:	d3 e7                	shl    edi,cl
c0026460:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026463:	89 df                	mov    edi,ebx
c0026465:	89 f1                	mov    ecx,esi
c0026467:	d3 ef                	shr    edi,cl
c0026469:	89 f9                	mov    ecx,edi
c002646b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002646e:	09 cf                	or     edi,ecx
c0026470:	88 c1                	mov    cl,al
c0026472:	d3 e3                	shl    ebx,cl
c0026474:	85 db                	test   ebx,ebx
c0026476:	0f 95 c3             	setne  bl
c0026479:	0f b6 db             	movzx  ebx,bl
c002647c:	09 fb                	or     ebx,edi
c002647e:	89 f1                	mov    ecx,esi
c0026480:	d3 ea                	shr    edx,cl
c0026482:	31 c0                	xor    eax,eax
c0026484:	eb 0d                	jmp    c0026493 <__divdf3+0x32f>
c0026486:	b8 ff 07 00 00       	mov    eax,0x7ff
c002648b:	eb 02                	jmp    c002648f <__divdf3+0x32b>
c002648d:	31 c0                	xor    eax,eax
c002648f:	31 db                	xor    ebx,ebx
c0026491:	31 d2                	xor    edx,edx
c0026493:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0026496:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0026499:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002649f:	09 c8                	or     eax,ecx
c00264a1:	c1 e0 14             	shl    eax,0x14
c00264a4:	89 d1                	mov    ecx,edx
c00264a6:	c1 e9 0b             	shr    ecx,0xb
c00264a9:	09 c8                	or     eax,ecx
c00264ab:	89 c6                	mov    esi,eax
c00264ad:	89 d9                	mov    ecx,ebx
c00264af:	c1 e9 0b             	shr    ecx,0xb
c00264b2:	c1 e2 15             	shl    edx,0x15
c00264b5:	09 ca                	or     edx,ecx
c00264b7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00264bd:	0f 95 c0             	setne  al
c00264c0:	09 c1                	or     ecx,eax
c00264c2:	83 e1 01             	and    ecx,0x1
c00264c5:	c1 eb 0a             	shr    ebx,0xa
c00264c8:	21 cb                	and    ebx,ecx
c00264ca:	01 d3                	add    ebx,edx
c00264cc:	89 d8                	mov    eax,ebx
c00264ce:	83 d6 00             	adc    esi,0x0
c00264d1:	89 f2                	mov    edx,esi
c00264d3:	89 c7                	mov    edi,eax
c00264d5:	89 d1                	mov    ecx,edx
c00264d7:	89 f8                	mov    eax,edi
c00264d9:	89 ca                	mov    edx,ecx
c00264db:	83 c4 2c             	add    esp,0x2c
c00264de:	5b                   	pop    ebx
c00264df:	5e                   	pop    esi
c00264e0:	5f                   	pop    edi
c00264e1:	5d                   	pop    ebp
c00264e2:	c3                   	ret    

c00264e3 <__floatsidf>:
c00264e3:	55                   	push   ebp
c00264e4:	89 e5                	mov    ebp,esp
c00264e6:	56                   	push   esi
c00264e7:	53                   	push   ebx
c00264e8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00264eb:	85 db                	test   ebx,ebx
c00264ed:	7e 15                	jle    c0026504 <__floatsidf+0x21>
c00264ef:	0f bd cb             	bsr    ecx,ebx
c00264f2:	83 f1 1f             	xor    ecx,0x1f
c00264f5:	d3 e3                	shl    ebx,cl
c00264f7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00264fd:	b8 1e 04 00 00       	mov    eax,0x41e
c0026502:	eb 21                	jmp    c0026525 <__floatsidf+0x42>
c0026504:	b8 00 00 00 00       	mov    eax,0x0
c0026509:	ba 00 00 00 00       	mov    edx,0x0
c002650e:	74 2a                	je     c002653a <__floatsidf+0x57>
c0026510:	f7 db                	neg    ebx
c0026512:	0f bd cb             	bsr    ecx,ebx
c0026515:	83 f1 1f             	xor    ecx,0x1f
c0026518:	d3 e3                	shl    ebx,cl
c002651a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026520:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0026525:	29 c8                	sub    eax,ecx
c0026527:	c1 e0 14             	shl    eax,0x14
c002652a:	89 c1                	mov    ecx,eax
c002652c:	89 de                	mov    esi,ebx
c002652e:	c1 ee 0b             	shr    esi,0xb
c0026531:	09 f1                	or     ecx,esi
c0026533:	89 ca                	mov    edx,ecx
c0026535:	c1 e3 15             	shl    ebx,0x15
c0026538:	89 d8                	mov    eax,ebx
c002653a:	5b                   	pop    ebx
c002653b:	5e                   	pop    esi
c002653c:	5d                   	pop    ebp
c002653d:	c3                   	ret    

c002653e <__floatunsidf>:
c002653e:	55                   	push   ebp
c002653f:	89 e5                	mov    ebp,esp
c0026541:	56                   	push   esi
c0026542:	53                   	push   ebx
c0026543:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026546:	85 db                	test   ebx,ebx
c0026548:	74 2a                	je     c0026574 <__floatunsidf+0x36>
c002654a:	0f bd cb             	bsr    ecx,ebx
c002654d:	83 f1 1f             	xor    ecx,0x1f
c0026550:	d3 e3                	shl    ebx,cl
c0026552:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026558:	b8 1e 04 00 00       	mov    eax,0x41e
c002655d:	29 c8                	sub    eax,ecx
c002655f:	c1 e0 14             	shl    eax,0x14
c0026562:	89 c1                	mov    ecx,eax
c0026564:	89 de                	mov    esi,ebx
c0026566:	c1 ee 0b             	shr    esi,0xb
c0026569:	09 f1                	or     ecx,esi
c002656b:	89 ca                	mov    edx,ecx
c002656d:	c1 e3 15             	shl    ebx,0x15
c0026570:	89 d8                	mov    eax,ebx
c0026572:	eb 04                	jmp    c0026578 <__floatunsidf+0x3a>
c0026574:	31 c0                	xor    eax,eax
c0026576:	31 d2                	xor    edx,edx
c0026578:	5b                   	pop    ebx
c0026579:	5e                   	pop    esi
c002657a:	5d                   	pop    ebp
c002657b:	c3                   	ret    

c002657c <__fixdfsi>:
c002657c:	55                   	push   ebp
c002657d:	89 e5                	mov    ebp,esp
c002657f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026582:	89 d1                	mov    ecx,edx
c0026584:	c1 e1 0b             	shl    ecx,0xb
c0026587:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002658d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026590:	c1 e8 15             	shr    eax,0x15
c0026593:	09 c1                	or     ecx,eax
c0026595:	c1 fa 14             	sar    edx,0x14
c0026598:	78 1f                	js     c00265b9 <__fixdfsi+0x3d>
c002659a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00265a0:	31 c0                	xor    eax,eax
c00265a2:	83 fa 1e             	cmp    edx,0x1e
c00265a5:	77 40                	ja     c00265e7 <__fixdfsi+0x6b>
c00265a7:	89 c8                	mov    eax,ecx
c00265a9:	0d 00 00 00 80       	or     eax,0x80000000
c00265ae:	b9 1f 00 00 00       	mov    ecx,0x1f
c00265b3:	29 d1                	sub    ecx,edx
c00265b5:	d3 e8                	shr    eax,cl
c00265b7:	eb 2e                	jmp    c00265e7 <__fixdfsi+0x6b>
c00265b9:	31 c0                	xor    eax,eax
c00265bb:	81 c2 01 04 00 00    	add    edx,0x401
c00265c1:	78 24                	js     c00265e7 <__fixdfsi+0x6b>
c00265c3:	83 fa 1e             	cmp    edx,0x1e
c00265c6:	7e 09                	jle    c00265d1 <__fixdfsi+0x55>
c00265c8:	83 fa 1f             	cmp    edx,0x1f
c00265cb:	75 18                	jne    c00265e5 <__fixdfsi+0x69>
c00265cd:	85 c9                	test   ecx,ecx
c00265cf:	75 14                	jne    c00265e5 <__fixdfsi+0x69>
c00265d1:	89 c8                	mov    eax,ecx
c00265d3:	0d 00 00 00 80       	or     eax,0x80000000
c00265d8:	b9 1f 00 00 00       	mov    ecx,0x1f
c00265dd:	29 d1                	sub    ecx,edx
c00265df:	d3 e8                	shr    eax,cl
c00265e1:	f7 d8                	neg    eax
c00265e3:	eb 02                	jmp    c00265e7 <__fixdfsi+0x6b>
c00265e5:	31 c0                	xor    eax,eax
c00265e7:	5d                   	pop    ebp
c00265e8:	c3                   	ret    

c00265e9 <__fixunsdfsi>:
c00265e9:	55                   	push   ebp
c00265ea:	89 e5                	mov    ebp,esp
c00265ec:	53                   	push   ebx
c00265ed:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00265f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00265f3:	89 d3                	mov    ebx,edx
c00265f5:	c1 fb 14             	sar    ebx,0x14
c00265f8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00265fe:	31 c0                	xor    eax,eax
c0026600:	83 fb 1f             	cmp    ebx,0x1f
c0026603:	77 1d                	ja     c0026622 <__fixunsdfsi+0x39>
c0026605:	89 d0                	mov    eax,edx
c0026607:	c1 e0 0b             	shl    eax,0xb
c002660a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002660f:	c1 e9 15             	shr    ecx,0x15
c0026612:	09 c8                	or     eax,ecx
c0026614:	0d 00 00 00 80       	or     eax,0x80000000
c0026619:	b9 1f 00 00 00       	mov    ecx,0x1f
c002661e:	29 d9                	sub    ecx,ebx
c0026620:	d3 e8                	shr    eax,cl
c0026622:	5b                   	pop    ebx
c0026623:	5d                   	pop    ebp
c0026624:	c3                   	ret    

c0026625 <__cmpdf2>:
c0026625:	55                   	push   ebp
c0026626:	89 e5                	mov    ebp,esp
c0026628:	57                   	push   edi
c0026629:	56                   	push   esi
c002662a:	53                   	push   ebx
c002662b:	83 ec 0c             	sub    esp,0xc
c002662e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0026631:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026634:	89 ca                	mov    edx,ecx
c0026636:	c1 ea 14             	shr    edx,0x14
c0026639:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002663f:	89 cb                	mov    ebx,ecx
c0026641:	c1 fb 1f             	sar    ebx,0x1f
c0026644:	31 da                	xor    edx,ebx
c0026646:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026649:	89 df                	mov    edi,ebx
c002664b:	c1 e7 0b             	shl    edi,0xb
c002664e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026651:	c1 e1 0b             	shl    ecx,0xb
c0026654:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002665a:	c1 eb 15             	shr    ebx,0x15
c002665d:	09 d9                	or     ecx,ebx
c002665f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0026662:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0026665:	89 ce                	mov    esi,ecx
c0026667:	c1 ee 14             	shr    esi,0x14
c002666a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026670:	89 cb                	mov    ebx,ecx
c0026672:	c1 fb 1f             	sar    ebx,0x1f
c0026675:	31 de                	xor    esi,ebx
c0026677:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002667a:	89 df                	mov    edi,ebx
c002667c:	c1 e7 0b             	shl    edi,0xb
c002667f:	c1 e1 0b             	shl    ecx,0xb
c0026682:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026688:	c1 eb 15             	shr    ebx,0x15
c002668b:	09 d9                	or     ecx,ebx
c002668d:	89 d3                	mov    ebx,edx
c002668f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0026695:	43                   	inc    ebx
c0026696:	83 fb 01             	cmp    ebx,0x1
c0026699:	77 08                	ja     c00266a3 <__cmpdf2+0x7e>
c002669b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002669e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00266a1:	75 68                	jne    c002670b <__cmpdf2+0xe6>
c00266a3:	89 f3                	mov    ebx,esi
c00266a5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00266ab:	43                   	inc    ebx
c00266ac:	83 fb 01             	cmp    ebx,0x1
c00266af:	77 06                	ja     c00266b7 <__cmpdf2+0x92>
c00266b1:	89 fb                	mov    ebx,edi
c00266b3:	09 cb                	or     ebx,ecx
c00266b5:	75 54                	jne    c002670b <__cmpdf2+0xe6>
c00266b7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00266ba:	09 f8                	or     eax,edi
c00266bc:	09 c8                	or     eax,ecx
c00266be:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00266c1:	75 12                	jne    c00266d5 <__cmpdf2+0xb0>
c00266c3:	8d 42 01             	lea    eax,[edx+0x1]
c00266c6:	83 f8 01             	cmp    eax,0x1
c00266c9:	77 0a                	ja     c00266d5 <__cmpdf2+0xb0>
c00266cb:	8d 5e 01             	lea    ebx,[esi+0x1]
c00266ce:	31 c0                	xor    eax,eax
c00266d0:	83 fb 01             	cmp    ebx,0x1
c00266d3:	76 36                	jbe    c002670b <__cmpdf2+0xe6>
c00266d5:	b8 01 00 00 00       	mov    eax,0x1
c00266da:	39 f2                	cmp    edx,esi
c00266dc:	7f 2d                	jg     c002670b <__cmpdf2+0xe6>
c00266de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00266e3:	7c 26                	jl     c002670b <__cmpdf2+0xe6>
c00266e5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00266e8:	77 07                	ja     c00266f1 <__cmpdf2+0xcc>
c00266ea:	72 16                	jb     c0026702 <__cmpdf2+0xdd>
c00266ec:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00266ef:	76 0a                	jbe    c00266fb <__cmpdf2+0xd6>
c00266f1:	89 d0                	mov    eax,edx
c00266f3:	c1 f8 1f             	sar    eax,0x1f
c00266f6:	83 c8 01             	or     eax,0x1
c00266f9:	eb 10                	jmp    c002670b <__cmpdf2+0xe6>
c00266fb:	b8 00 00 00 00       	mov    eax,0x0
c0026700:	73 09                	jae    c002670b <__cmpdf2+0xe6>
c0026702:	89 d0                	mov    eax,edx
c0026704:	c1 f8 1f             	sar    eax,0x1f
c0026707:	83 e0 02             	and    eax,0x2
c002670a:	48                   	dec    eax
c002670b:	83 c4 0c             	add    esp,0xc
c002670e:	5b                   	pop    ebx
c002670f:	5e                   	pop    esi
c0026710:	5f                   	pop    edi
c0026711:	5d                   	pop    ebp
c0026712:	c3                   	ret    

c0026713 <__eqdf2>:
c0026713:	55                   	push   ebp
c0026714:	89 e5                	mov    ebp,esp
c0026716:	50                   	push   eax
c0026717:	6a 01                	push   0x1
c0026719:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002671c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002671f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026722:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026725:	e8 fb fe ff ff       	call   c0026625 <__cmpdf2>
c002672a:	83 c4 18             	add    esp,0x18
c002672d:	c9                   	leave  
c002672e:	c3                   	ret    

c002672f <__nedf2>:
c002672f:	eb e2                	jmp    c0026713 <__eqdf2>

c0026731 <__gtdf2>:
c0026731:	55                   	push   ebp
c0026732:	89 e5                	mov    ebp,esp
c0026734:	50                   	push   eax
c0026735:	6a ff                	push   0xffffffff
c0026737:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002673a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002673d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026740:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026743:	e8 dd fe ff ff       	call   c0026625 <__cmpdf2>
c0026748:	83 c4 18             	add    esp,0x18
c002674b:	c9                   	leave  
c002674c:	c3                   	ret    

c002674d <__gedf2>:
c002674d:	eb e2                	jmp    c0026731 <__gtdf2>

c002674f <__ltdf2>:
c002674f:	eb c2                	jmp    c0026713 <__eqdf2>

c0026751 <__ledf2>:
c0026751:	eb c0                	jmp    c0026713 <__eqdf2>

c0026753 <__truncdfsf2>:
c0026753:	55                   	push   ebp
c0026754:	89 e5                	mov    ebp,esp
c0026756:	57                   	push   edi
c0026757:	56                   	push   esi
c0026758:	53                   	push   ebx
c0026759:	83 ec 0c             	sub    esp,0xc
c002675c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002675f:	89 d1                	mov    ecx,edx
c0026761:	c1 f9 14             	sar    ecx,0x14
c0026764:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026767:	89 df                	mov    edi,ebx
c0026769:	c1 e7 0b             	shl    edi,0xb
c002676c:	89 d0                	mov    eax,edx
c002676e:	c1 e0 0b             	shl    eax,0xb
c0026771:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026776:	c1 eb 15             	shr    ebx,0x15
c0026779:	09 d8                	or     eax,ebx
c002677b:	89 cb                	mov    ebx,ecx
c002677d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026783:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0026789:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002678f:	0f 86 9e 00 00 00    	jbe    c0026833 <__truncdfsf2+0xe0>
c0026795:	85 db                	test   ebx,ebx
c0026797:	75 0a                	jne    c00267a3 <__truncdfsf2+0x50>
c0026799:	c1 fa 17             	sar    edx,0x17
c002679c:	30 d2                	xor    dl,dl
c002679e:	e9 84 00 00 00       	jmp    c0026827 <__truncdfsf2+0xd4>
c00267a3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00267a9:	83 fe 83             	cmp    esi,0xffffff83
c00267ac:	7d 4b                	jge    c00267f9 <__truncdfsf2+0xa6>
c00267ae:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00267b3:	29 f1                	sub    ecx,esi
c00267b5:	83 f9 1f             	cmp    ecx,0x1f
c00267b8:	7f 6b                	jg     c0026825 <__truncdfsf2+0xd2>
c00267ba:	0d 00 00 00 80       	or     eax,0x80000000
c00267bf:	89 c3                	mov    ebx,eax
c00267c1:	d3 eb                	shr    ebx,cl
c00267c3:	be 01 00 00 00       	mov    esi,0x1
c00267c8:	d3 e6                	shl    esi,cl
c00267ca:	4e                   	dec    esi
c00267cb:	21 f0                	and    eax,esi
c00267cd:	09 f8                	or     eax,edi
c00267cf:	0f 95 c0             	setne  al
c00267d2:	0f b6 c0             	movzx  eax,al
c00267d5:	09 c3                	or     ebx,eax
c00267d7:	89 d9                	mov    ecx,ebx
c00267d9:	c1 e9 08             	shr    ecx,0x8
c00267dc:	f6 c3 7f             	test   bl,0x7f
c00267df:	0f 95 c0             	setne  al
c00267e2:	09 c8                	or     eax,ecx
c00267e4:	83 e0 01             	and    eax,0x1
c00267e7:	c1 eb 07             	shr    ebx,0x7
c00267ea:	21 c3                	and    ebx,eax
c00267ec:	81 e2 00 00 00 80    	and    edx,0x80000000
c00267f2:	09 d1                	or     ecx,edx
c00267f4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00267f7:	eb 76                	jmp    c002686f <__truncdfsf2+0x11c>
c00267f9:	83 c6 80             	add    esi,0xffffff80
c00267fc:	7e 1d                	jle    c002681b <__truncdfsf2+0xc8>
c00267fe:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0026804:	75 0b                	jne    c0026811 <__truncdfsf2+0xbe>
c0026806:	09 f8                	or     eax,edi
c0026808:	74 09                	je     c0026813 <__truncdfsf2+0xc0>
c002680a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002680f:	eb 02                	jmp    c0026813 <__truncdfsf2+0xc0>
c0026811:	31 c0                	xor    eax,eax
c0026813:	c1 fa 17             	sar    edx,0x17
c0026816:	80 ca ff             	or     dl,0xff
c0026819:	eb 0e                	jmp    c0026829 <__truncdfsf2+0xd6>
c002681b:	c1 fa 1f             	sar    edx,0x1f
c002681e:	c1 e2 08             	shl    edx,0x8
c0026821:	09 ca                	or     edx,ecx
c0026823:	eb 04                	jmp    c0026829 <__truncdfsf2+0xd6>
c0026825:	31 d2                	xor    edx,edx
c0026827:	31 c0                	xor    eax,eax
c0026829:	c1 e2 17             	shl    edx,0x17
c002682c:	c1 e8 08             	shr    eax,0x8
c002682f:	09 d0                	or     eax,edx
c0026831:	eb 3c                	jmp    c002686f <__truncdfsf2+0x11c>
c0026833:	81 e9 80 03 00 00    	sub    ecx,0x380
c0026839:	89 ca                	mov    edx,ecx
c002683b:	c1 fa 0b             	sar    edx,0xb
c002683e:	c1 e2 08             	shl    edx,0x8
c0026841:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0026844:	31 db                	xor    ebx,ebx
c0026846:	85 ff                	test   edi,edi
c0026848:	0f 95 c3             	setne  bl
c002684b:	09 d8                	or     eax,ebx
c002684d:	89 c3                	mov    ebx,eax
c002684f:	c1 eb 08             	shr    ebx,0x8
c0026852:	a8 7f                	test   al,0x7f
c0026854:	0f 95 c2             	setne  dl
c0026857:	89 d6                	mov    esi,edx
c0026859:	09 de                	or     esi,ebx
c002685b:	83 e6 01             	and    esi,0x1
c002685e:	c1 e8 07             	shr    eax,0x7
c0026861:	21 f0                	and    eax,esi
c0026863:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026866:	09 ca                	or     edx,ecx
c0026868:	c1 e2 17             	shl    edx,0x17
c002686b:	09 da                	or     edx,ebx
c002686d:	01 d0                	add    eax,edx
c002686f:	83 c4 0c             	add    esp,0xc
c0026872:	5b                   	pop    ebx
c0026873:	5e                   	pop    esi
c0026874:	5f                   	pop    edi
c0026875:	5d                   	pop    ebp
c0026876:	c3                   	ret    

c0026877 <__extendsfdf2>:
c0026877:	55                   	push   ebp
c0026878:	89 e5                	mov    ebp,esp
c002687a:	57                   	push   edi
c002687b:	56                   	push   esi
c002687c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002687f:	89 d1                	mov    ecx,edx
c0026881:	c1 f9 17             	sar    ecx,0x17
c0026884:	c1 e2 08             	shl    edx,0x8
c0026887:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002688d:	89 c8                	mov    eax,ecx
c002688f:	80 e4 f8             	and    ah,0xf8
c0026892:	8d 71 01             	lea    esi,[ecx+0x1]
c0026895:	81 e6 fe 00 00 00    	and    esi,0xfe
c002689b:	75 27                	jne    c00268c4 <__extendsfdf2+0x4d>
c002689d:	81 e1 ff 00 00 00    	and    ecx,0xff
c00268a3:	75 18                	jne    c00268bd <__extendsfdf2+0x46>
c00268a5:	85 d2                	test   edx,edx
c00268a7:	74 20                	je     c00268c9 <__extendsfdf2+0x52>
c00268a9:	41                   	inc    ecx
c00268aa:	01 d2                	add    edx,edx
c00268ac:	79 fb                	jns    c00268a9 <__extendsfdf2+0x32>
c00268ae:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00268b4:	29 c8                	sub    eax,ecx
c00268b6:	05 81 03 00 00       	add    eax,0x381
c00268bb:	eb 0c                	jmp    c00268c9 <__extendsfdf2+0x52>
c00268bd:	05 00 07 00 00       	add    eax,0x700
c00268c2:	eb 05                	jmp    c00268c9 <__extendsfdf2+0x52>
c00268c4:	05 80 03 00 00       	add    eax,0x380
c00268c9:	c1 e0 14             	shl    eax,0x14
c00268cc:	89 c1                	mov    ecx,eax
c00268ce:	89 d0                	mov    eax,edx
c00268d0:	c1 e8 0b             	shr    eax,0xb
c00268d3:	09 c1                	or     ecx,eax
c00268d5:	c1 e2 15             	shl    edx,0x15
c00268d8:	89 d0                	mov    eax,edx
c00268da:	89 ca                	mov    edx,ecx
c00268dc:	5e                   	pop    esi
c00268dd:	5f                   	pop    edi
c00268de:	5d                   	pop    ebp
c00268df:	c3                   	ret    

c00268e0 <fabs>:
c00268e0:	83 ec 0c             	sub    esp,0xc
c00268e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00268ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00268ee:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00268f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00268f7:	dd 04 24             	fld    QWORD PTR [esp]
c00268fa:	83 c4 0c             	add    esp,0xc
c00268fd:	c3                   	ret    
c00268fe:	66 90                	xchg   ax,ax

c0026900 <lrint>:
c0026900:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0026904:	83 ec 04             	sub    esp,0x4
c0026907:	db 1c 24             	fistp  DWORD PTR [esp]
c002690a:	58                   	pop    eax
c002690b:	c3                   	ret    

c002690c <lrintf>:
c002690c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0026910:	83 ec 04             	sub    esp,0x4
c0026913:	db 1c 24             	fistp  DWORD PTR [esp]
c0026916:	58                   	pop    eax
c0026917:	c3                   	ret    

Disassembly of section .init:

c0026918 <_init>:
c0026918:	55                   	push   ebp
c0026919:	89 e5                	mov    ebp,esp
c002691b:	e8 f8 97 fd ff       	call   c0000118 <frame_dummy>
c0026920:	e8 63 e0 ff ff       	call   c0024988 <__do_global_ctors_aux>
c0026925:	5d                   	pop    ebp
c0026926:	c3                   	ret    

Disassembly of section .fini:

c0026927 <_fini>:
c0026927:	55                   	push   ebp
c0026928:	89 e5                	mov    ebp,esp
c002692a:	e8 79 97 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002692f:	5d                   	pop    ebp
c0026930:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0026932 <Computer::~Computer()>:
c0026932:	83 ec 0c             	sub    esp,0xc
c0026935:	ba d0 83 02 c0       	mov    edx,0xc00283d0
c002693a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002693e:	89 10                	mov    DWORD PTR [eax],edx
c0026940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026944:	83 ec 0c             	sub    esp,0xc
c0026947:	50                   	push   eax
c0026948:	e8 15 d0 fe ff       	call   c0013962 <Device::~Device()>
c002694d:	83 c4 10             	add    esp,0x10
c0026950:	90                   	nop
c0026951:	83 c4 0c             	add    esp,0xc
c0026954:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0026956 <Computer::~Computer()>:
c0026956:	83 ec 0c             	sub    esp,0xc
c0026959:	83 ec 0c             	sub    esp,0xc
c002695c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026960:	e8 cd ff ff ff       	call   c0026932 <Computer::~Computer()>
c0026965:	83 c4 10             	add    esp,0x10
c0026968:	83 ec 08             	sub    esp,0x8
c002696b:	68 ec 01 00 00       	push   0x1ec
c0026970:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026974:	e8 48 bc fe ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c0026979:	83 c4 10             	add    esp,0x10
c002697c:	83 c4 0c             	add    esp,0xc
c002697f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0026980 <idleCommon()>:
c0026980:	83 ec 0c             	sub    esp,0xc
c0026983:	e8 72 5c ff ff       	call   c001c5fa <lockScheduler()>
c0026988:	e8 a9 5f ff ff       	call   c001c936 <schedule()>
c002698d:	83 c4 0c             	add    esp,0xc
c0026990:	e9 67 5c ff ff       	jmp    c001c5fc <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0026996 <LinkedList<UnixFile>::~LinkedList()>:
c0026996:	90                   	nop
c0026997:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0026998 <LinkedList<UnixFile>::LinkedList()>:
c0026998:	83 ec 0c             	sub    esp,0xc
c002699b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002699f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00269a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00269b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269b4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00269bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00269c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00269d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269d4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00269db:	83 ec 0c             	sub    esp,0xc
c00269de:	68 46 86 02 c0       	push   0xc0028646
c00269e3:	e8 b9 bc fe ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00269e8:	83 c4 10             	add    esp,0x10
c00269eb:	90                   	nop
c00269ec:	83 c4 0c             	add    esp,0xc
c00269ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00269f0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00269f0:	83 ec 0c             	sub    esp,0xc
c00269f3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00269f8:	75 10                	jne    c0026a0a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00269fa:	83 ec 0c             	sub    esp,0xc
c00269fd:	68 60 86 02 c0       	push   0xc0028660
c0026a02:	e8 75 2b ff ff       	call   c001957c <Krnl::panic(char const*)>
c0026a07:	83 c4 10             	add    esp,0x10
c0026a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026a10:	85 c0                	test   eax,eax
c0026a12:	74 34                	je     c0026a48 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0026a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026a1b:	85 c0                	test   eax,eax
c0026a1d:	74 29                	je     c0026a48 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0026a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026a26:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026a2a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a31:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026a35:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026a3f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026a46:	eb 65                	jmp    c0026aad <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0026a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0026a4e:	85 c0                	test   eax,eax
c0026a50:	75 4b                	jne    c0026a9d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0026a52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026a59:	85 c0                	test   eax,eax
c0026a5b:	75 40                	jne    c0026a9d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0026a5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a61:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026a65:	89 10                	mov    DWORD PTR [eax],edx
c0026a67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a6b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026a6f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026a72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026a79:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026a80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026a87:	85 c0                	test   eax,eax
c0026a89:	74 22                	je     c0026aad <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0026a8b:	83 ec 0c             	sub    esp,0xc
c0026a8e:	68 82 86 02 c0       	push   0xc0028682
c0026a93:	e8 e4 2a ff ff       	call   c001957c <Krnl::panic(char const*)>
c0026a98:	83 c4 10             	add    esp,0x10
c0026a9b:	eb 10                	jmp    c0026aad <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0026a9d:	83 ec 0c             	sub    esp,0xc
c0026aa0:	68 8c 86 02 c0       	push   0xc002868c
c0026aa5:	e8 d2 2a ff ff       	call   c001957c <Krnl::panic(char const*)>
c0026aaa:	83 c4 10             	add    esp,0x10
c0026aad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ab1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026ab4:	8d 50 01             	lea    edx,[eax+0x1]
c0026ab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026abb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026abe:	90                   	nop
c0026abf:	83 c4 0c             	add    esp,0xc
c0026ac2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0026ac4 <LinkedList<UnixFile>::getFirstElement()>:
c0026ac4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026ac8:	8b 00                	mov    eax,DWORD PTR [eax]
c0026aca:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0026acc <LinkedList<UnixFile>::removeFirst()>:
c0026acc:	83 ec 0c             	sub    esp,0xc
c0026acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ad3:	8b 00                	mov    eax,DWORD PTR [eax]
c0026ad5:	85 c0                	test   eax,eax
c0026ad7:	75 12                	jne    c0026aeb <LinkedList<UnixFile>::removeFirst()+0x1f>
c0026ad9:	83 ec 0c             	sub    esp,0xc
c0026adc:	68 98 86 02 c0       	push   0xc0028698
c0026ae1:	e8 96 2a ff ff       	call   c001957c <Krnl::panic(char const*)>
c0026ae6:	83 c4 10             	add    esp,0x10
c0026ae9:	eb 7e                	jmp    c0026b69 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0026aeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026aef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026af2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026af5:	85 c0                	test   eax,eax
c0026af7:	74 10                	je     c0026b09 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0026af9:	83 ec 0c             	sub    esp,0xc
c0026afc:	68 e3 86 02 c0       	push   0xc00286e3
c0026b01:	e8 76 2a ff ff       	call   c001957c <Krnl::panic(char const*)>
c0026b06:	83 c4 10             	add    esp,0x10
c0026b09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b0f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026b12:	85 c0                	test   eax,eax
c0026b14:	75 33                	jne    c0026b49 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0026b16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b1a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b24:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026b2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b2f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026b32:	83 f8 01             	cmp    eax,0x1
c0026b35:	74 21                	je     c0026b58 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0026b37:	83 ec 0c             	sub    esp,0xc
c0026b3a:	68 bc 86 02 c0       	push   0xc00286bc
c0026b3f:	e8 38 2a ff ff       	call   c001957c <Krnl::panic(char const*)>
c0026b44:	83 c4 10             	add    esp,0x10
c0026b47:	eb 0f                	jmp    c0026b58 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0026b49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b4f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0026b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b56:	89 10                	mov    DWORD PTR [eax],edx
c0026b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b5c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026b5f:	8d 50 ff             	lea    edx,[eax-0x1]
c0026b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b66:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026b69:	83 c4 0c             	add    esp,0xc
c0026b6c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0026b6e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0026b6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026b72:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026b75:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0026b76 <DriverlessDevice::~DriverlessDevice()>:
c0026b76:	ba a4 8d 02 c0       	mov    edx,0xc0028da4
c0026b7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026b7f:	89 10                	mov    DWORD PTR [eax],edx
c0026b81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026b85:	50                   	push   eax
c0026b86:	e8 d7 cd fe ff       	call   c0013962 <Device::~Device()>
c0026b8b:	83 c4 04             	add    esp,0x4
c0026b8e:	90                   	nop
c0026b8f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0026b90 <DriverlessDevice::~DriverlessDevice()>:
c0026b90:	83 ec 0c             	sub    esp,0xc
c0026b93:	83 ec 0c             	sub    esp,0xc
c0026b96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b9a:	e8 d7 ff ff ff       	call   c0026b76 <DriverlessDevice::~DriverlessDevice()>
c0026b9f:	83 c4 10             	add    esp,0x10
c0026ba2:	83 ec 08             	sub    esp,0x8
c0026ba5:	68 58 01 00 00       	push   0x158
c0026baa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026bae:	e8 0e ba fe ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c0026bb3:	83 c4 10             	add    esp,0x10
c0026bb6:	83 c4 0c             	add    esp,0xc
c0026bb9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0026bba <LinkedList<Device>::addElement(Device*)>:
c0026bba:	83 ec 0c             	sub    esp,0xc
c0026bbd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0026bc2:	75 10                	jne    c0026bd4 <LinkedList<Device>::addElement(Device*)+0x1a>
c0026bc4:	83 ec 0c             	sub    esp,0xc
c0026bc7:	68 60 86 02 c0       	push   0xc0028660
c0026bcc:	e8 ab 29 ff ff       	call   c001957c <Krnl::panic(char const*)>
c0026bd1:	83 c4 10             	add    esp,0x10
c0026bd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0026bda:	85 c0                	test   eax,eax
c0026bdc:	74 3a                	je     c0026c18 <LinkedList<Device>::addElement(Device*)+0x5e>
c0026bde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026be2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026be5:	85 c0                	test   eax,eax
c0026be7:	74 2f                	je     c0026c18 <LinkedList<Device>::addElement(Device*)+0x5e>
c0026be9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026bf0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026bf4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0026bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bfe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026c02:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026c05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c09:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026c0c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0026c16:	eb 68                	jmp    c0026c80 <LinkedList<Device>::addElement(Device*)+0xc6>
c0026c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c1e:	85 c0                	test   eax,eax
c0026c20:	75 4e                	jne    c0026c70 <LinkedList<Device>::addElement(Device*)+0xb6>
c0026c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026c29:	85 c0                	test   eax,eax
c0026c2b:	75 43                	jne    c0026c70 <LinkedList<Device>::addElement(Device*)+0xb6>
c0026c2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c31:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026c35:	89 10                	mov    DWORD PTR [eax],edx
c0026c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c3b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026c3f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026c49:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0026c53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026c5a:	85 c0                	test   eax,eax
c0026c5c:	74 22                	je     c0026c80 <LinkedList<Device>::addElement(Device*)+0xc6>
c0026c5e:	83 ec 0c             	sub    esp,0xc
c0026c61:	68 82 86 02 c0       	push   0xc0028682
c0026c66:	e8 11 29 ff ff       	call   c001957c <Krnl::panic(char const*)>
c0026c6b:	83 c4 10             	add    esp,0x10
c0026c6e:	eb 10                	jmp    c0026c80 <LinkedList<Device>::addElement(Device*)+0xc6>
c0026c70:	83 ec 0c             	sub    esp,0xc
c0026c73:	68 8c 86 02 c0       	push   0xc002868c
c0026c78:	e8 ff 28 ff ff       	call   c001957c <Krnl::panic(char const*)>
c0026c7d:	83 c4 10             	add    esp,0x10
c0026c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026c87:	8d 50 01             	lea    edx,[eax+0x1]
c0026c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c8e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026c91:	90                   	nop
c0026c92:	83 c4 0c             	add    esp,0xc
c0026c95:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0026c96 <LinkedList<Device>::LinkedList()>:
c0026c96:	83 ec 0c             	sub    esp,0xc
c0026c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c9d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026ca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ca7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cb2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cbd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026cc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cc7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cd2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026cd9:	83 ec 0c             	sub    esp,0xc
c0026cdc:	68 46 86 02 c0       	push   0xc0028646
c0026ce1:	e8 bb b9 fe ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0026ce6:	83 c4 10             	add    esp,0x10
c0026ce9:	90                   	nop
c0026cea:	83 c4 0c             	add    esp,0xc
c0026ced:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0026cee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0026cee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026cf2:	8b 00                	mov    eax,DWORD PTR [eax]
c0026cf4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0026cf6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0026cf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026cfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0026cfc:	85 c0                	test   eax,eax
c0026cfe:	75 0e                	jne    c0026d0e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0026d00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026d04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026d07:	85 c0                	test   eax,eax
c0026d09:	75 03                	jne    c0026d0e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0026d0b:	b0 01                	mov    al,0x1
c0026d0d:	c3                   	ret    
c0026d0e:	b0 00                	mov    al,0x0
c0026d10:	90                   	nop
c0026d11:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0026d12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0026d12:	83 ec 0c             	sub    esp,0xc
c0026d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d19:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d1b:	85 c0                	test   eax,eax
c0026d1d:	75 15                	jne    c0026d34 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0026d1f:	83 ec 0c             	sub    esp,0xc
c0026d22:	68 98 86 02 c0       	push   0xc0028698
c0026d27:	e8 50 28 ff ff       	call   c001957c <Krnl::panic(char const*)>
c0026d2c:	83 c4 10             	add    esp,0x10
c0026d2f:	e9 88 00 00 00       	jmp    c0026dbc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0026d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026d3b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0026d3e:	85 c0                	test   eax,eax
c0026d40:	0f 95 c0             	setne  al
c0026d43:	84 c0                	test   al,al
c0026d45:	74 10                	je     c0026d57 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0026d47:	83 ec 0c             	sub    esp,0xc
c0026d4a:	68 e3 86 02 c0       	push   0xc00286e3
c0026d4f:	e8 28 28 ff ff       	call   c001957c <Krnl::panic(char const*)>
c0026d54:	83 c4 10             	add    esp,0x10
c0026d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d5d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0026d60:	85 c0                	test   eax,eax
c0026d62:	0f 94 c0             	sete   al
c0026d65:	84 c0                	test   al,al
c0026d67:	74 33                	je     c0026d9c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0026d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d6d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026d73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d77:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026d7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d82:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026d85:	83 f8 01             	cmp    eax,0x1
c0026d88:	74 21                	je     c0026dab <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0026d8a:	83 ec 0c             	sub    esp,0xc
c0026d8d:	68 bc 86 02 c0       	push   0xc00286bc
c0026d92:	e8 e5 27 ff ff       	call   c001957c <Krnl::panic(char const*)>
c0026d97:	83 c4 10             	add    esp,0x10
c0026d9a:	eb 0f                	jmp    c0026dab <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0026d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026da0:	8b 00                	mov    eax,DWORD PTR [eax]
c0026da2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0026da5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026da9:	89 10                	mov    DWORD PTR [eax],edx
c0026dab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026daf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026db2:	8d 50 ff             	lea    edx,[eax-0x1]
c0026db5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026db9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026dbc:	83 c4 0c             	add    esp,0xc
c0026dbf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0026dc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0026dc0:	83 ec 0c             	sub    esp,0xc
c0026dc3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0026dc8:	75 10                	jne    c0026dda <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0026dca:	83 ec 0c             	sub    esp,0xc
c0026dcd:	68 60 86 02 c0       	push   0xc0028660
c0026dd2:	e8 a5 27 ff ff       	call   c001957c <Krnl::panic(char const*)>
c0026dd7:	83 c4 10             	add    esp,0x10
c0026dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dde:	8b 00                	mov    eax,DWORD PTR [eax]
c0026de0:	85 c0                	test   eax,eax
c0026de2:	74 34                	je     c0026e18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0026de4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026de8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026deb:	85 c0                	test   eax,eax
c0026ded:	74 29                	je     c0026e18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0026def:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026df3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026df6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026dfa:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0026dfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e01:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026e05:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026e08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026e0f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0026e16:	eb 65                	jmp    c0026e7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0026e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0026e1e:	85 c0                	test   eax,eax
c0026e20:	75 4b                	jne    c0026e6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0026e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026e29:	85 c0                	test   eax,eax
c0026e2b:	75 40                	jne    c0026e6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0026e2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e31:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026e35:	89 10                	mov    DWORD PTR [eax],edx
c0026e37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e3b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026e3f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026e42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026e49:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0026e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026e57:	85 c0                	test   eax,eax
c0026e59:	74 22                	je     c0026e7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0026e5b:	83 ec 0c             	sub    esp,0xc
c0026e5e:	68 82 86 02 c0       	push   0xc0028682
c0026e63:	e8 14 27 ff ff       	call   c001957c <Krnl::panic(char const*)>
c0026e68:	83 c4 10             	add    esp,0x10
c0026e6b:	eb 10                	jmp    c0026e7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0026e6d:	83 ec 0c             	sub    esp,0xc
c0026e70:	68 8c 86 02 c0       	push   0xc002868c
c0026e75:	e8 02 27 ff ff       	call   c001957c <Krnl::panic(char const*)>
c0026e7a:	83 c4 10             	add    esp,0x10
c0026e7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e81:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026e84:	8d 50 01             	lea    edx,[eax+0x1]
c0026e87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e8b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026e8e:	90                   	nop
c0026e8f:	83 c4 0c             	add    esp,0xc
c0026e92:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0026e94 <ACPI::~ACPI()>:
c0026e94:	83 ec 0c             	sub    esp,0xc
c0026e97:	ba 48 96 02 c0       	mov    edx,0xc0029648
c0026e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ea0:	89 10                	mov    DWORD PTR [eax],edx
c0026ea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ea6:	83 ec 0c             	sub    esp,0xc
c0026ea9:	50                   	push   eax
c0026eaa:	e8 b3 ca fe ff       	call   c0013962 <Device::~Device()>
c0026eaf:	83 c4 10             	add    esp,0x10
c0026eb2:	90                   	nop
c0026eb3:	83 c4 0c             	add    esp,0xc
c0026eb6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0026eb8 <ACPI::~ACPI()>:
c0026eb8:	83 ec 0c             	sub    esp,0xc
c0026ebb:	83 ec 0c             	sub    esp,0xc
c0026ebe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026ec2:	e8 cd ff ff ff       	call   c0026e94 <ACPI::~ACPI()>
c0026ec7:	83 c4 10             	add    esp,0x10
c0026eca:	83 ec 08             	sub    esp,0x8
c0026ecd:	68 68 22 00 00       	push   0x2268
c0026ed2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026ed6:	e8 e6 b6 fe ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c0026edb:	83 c4 10             	add    esp,0x10
c0026ede:	83 c4 0c             	add    esp,0xc
c0026ee1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0026ee2 <CPU::~CPU()>:
c0026ee2:	83 ec 0c             	sub    esp,0xc
c0026ee5:	ba 38 9a 02 c0       	mov    edx,0xc0029a38
c0026eea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026eee:	89 10                	mov    DWORD PTR [eax],edx
c0026ef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ef4:	83 ec 0c             	sub    esp,0xc
c0026ef7:	50                   	push   eax
c0026ef8:	e8 65 ca fe ff       	call   c0013962 <Device::~Device()>
c0026efd:	83 c4 10             	add    esp,0x10
c0026f00:	90                   	nop
c0026f01:	83 c4 0c             	add    esp,0xc
c0026f04:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0026f06 <CPU::~CPU()>:
c0026f06:	83 ec 0c             	sub    esp,0xc
c0026f09:	83 ec 0c             	sub    esp,0xc
c0026f0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026f10:	e8 cd ff ff ff       	call   c0026ee2 <CPU::~CPU()>
c0026f15:	83 c4 10             	add    esp,0x10
c0026f18:	83 ec 08             	sub    esp,0x8
c0026f1b:	68 98 11 00 00       	push   0x1198
c0026f20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026f24:	e8 98 b6 fe ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c0026f29:	83 c4 10             	add    esp,0x10
c0026f2c:	83 c4 0c             	add    esp,0xc
c0026f2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0026f30 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0026f30:	90                   	nop
c0026f31:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0026f32 <ThreadControlBlock::ThreadControlBlock()>:
c0026f32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026f36:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0026f3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026f41:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0026f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026f4c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0026f53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026f57:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0026f5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026f62:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0026f66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026f6a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0026f6e:	90                   	nop
c0026f6f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0026f70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0026f70:	83 ec 0c             	sub    esp,0xc
c0026f73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f77:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026f7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f81:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f8c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026f93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f97:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026f9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fa1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fac:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026fb3:	83 ec 0c             	sub    esp,0xc
c0026fb6:	68 46 86 02 c0       	push   0xc0028646
c0026fbb:	e8 e1 b6 fe ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0026fc0:	83 c4 10             	add    esp,0x10
c0026fc3:	90                   	nop
c0026fc4:	83 c4 0c             	add    esp,0xc
c0026fc7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0026fc8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0026fc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026fcc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0026fcf:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0026fd0 <Vm::_FPUState::_FPUState()>:
c0026fd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026fd4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0026fdb:	90                   	nop
c0026fdc:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0026fde <PCI::~PCI()>:
c0026fde:	83 ec 0c             	sub    esp,0xc
c0026fe1:	ba b8 a8 02 c0       	mov    edx,0xc002a8b8
c0026fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fea:	89 10                	mov    DWORD PTR [eax],edx
c0026fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ff0:	83 ec 0c             	sub    esp,0xc
c0026ff3:	50                   	push   eax
c0026ff4:	e8 79 c3 fe ff       	call   c0013372 <Bus::~Bus()>
c0026ff9:	83 c4 10             	add    esp,0x10
c0026ffc:	90                   	nop
c0026ffd:	83 c4 0c             	add    esp,0xc
c0027000:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0027002 <PCI::~PCI()>:
c0027002:	83 ec 0c             	sub    esp,0xc
c0027005:	83 ec 0c             	sub    esp,0xc
c0027008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002700c:	e8 cd ff ff ff       	call   c0026fde <PCI::~PCI()>
c0027011:	83 c4 10             	add    esp,0x10
c0027014:	83 ec 08             	sub    esp,0x8
c0027017:	68 58 01 00 00       	push   0x158
c002701c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027020:	e8 9c b5 fe ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c0027025:	83 c4 10             	add    esp,0x10
c0027028:	83 c4 0c             	add    esp,0xc
c002702b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002702c <IDE::~IDE()>:
c002702c:	83 ec 0c             	sub    esp,0xc
c002702f:	ba 1c ab 02 c0       	mov    edx,0xc002ab1c
c0027034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027038:	89 10                	mov    DWORD PTR [eax],edx
c002703a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002703e:	83 ec 0c             	sub    esp,0xc
c0027041:	50                   	push   eax
c0027042:	e8 0b ce fe ff       	call   c0013e52 <HardDiskController::~HardDiskController()>
c0027047:	83 c4 10             	add    esp,0x10
c002704a:	90                   	nop
c002704b:	83 c4 0c             	add    esp,0xc
c002704e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0027050 <IDE::~IDE()>:
c0027050:	83 ec 0c             	sub    esp,0xc
c0027053:	83 ec 0c             	sub    esp,0xc
c0027056:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002705a:	e8 cd ff ff ff       	call   c002702c <IDE::~IDE()>
c002705f:	83 c4 10             	add    esp,0x10
c0027062:	83 ec 08             	sub    esp,0x8
c0027065:	68 70 02 00 00       	push   0x270
c002706a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002706e:	e8 4e b5 fe ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c0027073:	83 c4 10             	add    esp,0x10
c0027076:	83 c4 0c             	add    esp,0xc
c0027079:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002707a <SATABus::~SATABus()>:
c002707a:	83 ec 0c             	sub    esp,0xc
c002707d:	ba fc ab 02 c0       	mov    edx,0xc002abfc
c0027082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027086:	89 10                	mov    DWORD PTR [eax],edx
c0027088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002708c:	83 ec 0c             	sub    esp,0xc
c002708f:	50                   	push   eax
c0027090:	e8 bd cd fe ff       	call   c0013e52 <HardDiskController::~HardDiskController()>
c0027095:	83 c4 10             	add    esp,0x10
c0027098:	90                   	nop
c0027099:	83 c4 0c             	add    esp,0xc
c002709c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002709e <SATABus::~SATABus()>:
c002709e:	83 ec 0c             	sub    esp,0xc
c00270a1:	83 ec 0c             	sub    esp,0xc
c00270a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00270a8:	e8 cd ff ff ff       	call   c002707a <SATABus::~SATABus()>
c00270ad:	83 c4 10             	add    esp,0x10
c00270b0:	83 ec 08             	sub    esp,0x8
c00270b3:	68 64 01 00 00       	push   0x164
c00270b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00270bc:	e8 00 b5 fe ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c00270c1:	83 c4 10             	add    esp,0x10
c00270c4:	83 c4 0c             	add    esp,0xc
c00270c7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00270c8 <ATA::~ATA()>:
c00270c8:	83 ec 0c             	sub    esp,0xc
c00270cb:	ba 3c ac 02 c0       	mov    edx,0xc002ac3c
c00270d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270d4:	89 10                	mov    DWORD PTR [eax],edx
c00270d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270da:	83 ec 0c             	sub    esp,0xc
c00270dd:	50                   	push   eax
c00270de:	e8 4d ce fe ff       	call   c0013f30 <PhysicalDisk::~PhysicalDisk()>
c00270e3:	83 c4 10             	add    esp,0x10
c00270e6:	90                   	nop
c00270e7:	83 c4 0c             	add    esp,0xc
c00270ea:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00270ec <ATA::~ATA()>:
c00270ec:	83 ec 0c             	sub    esp,0xc
c00270ef:	83 ec 0c             	sub    esp,0xc
c00270f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00270f6:	e8 cd ff ff ff       	call   c00270c8 <ATA::~ATA()>
c00270fb:	83 c4 10             	add    esp,0x10
c00270fe:	83 ec 08             	sub    esp,0x8
c0027101:	68 7c 01 00 00       	push   0x17c
c0027106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002710a:	e8 b2 b4 fe ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c002710f:	83 c4 10             	add    esp,0x10
c0027112:	83 c4 0c             	add    esp,0xc
c0027115:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0027116 <ATAPI::~ATAPI()>:
c0027116:	83 ec 0c             	sub    esp,0xc
c0027119:	ba a8 ac 02 c0       	mov    edx,0xc002aca8
c002711e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027122:	89 10                	mov    DWORD PTR [eax],edx
c0027124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027128:	83 ec 0c             	sub    esp,0xc
c002712b:	50                   	push   eax
c002712c:	e8 ff cd fe ff       	call   c0013f30 <PhysicalDisk::~PhysicalDisk()>
c0027131:	83 c4 10             	add    esp,0x10
c0027134:	90                   	nop
c0027135:	83 c4 0c             	add    esp,0xc
c0027138:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002713a <ATAPI::~ATAPI()>:
c002713a:	83 ec 0c             	sub    esp,0xc
c002713d:	83 ec 0c             	sub    esp,0xc
c0027140:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027144:	e8 cd ff ff ff       	call   c0027116 <ATAPI::~ATAPI()>
c0027149:	83 c4 10             	add    esp,0x10
c002714c:	83 ec 08             	sub    esp,0x8
c002714f:	68 80 01 00 00       	push   0x180
c0027154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027158:	e8 64 b4 fe ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c002715d:	83 c4 10             	add    esp,0x10
c0027160:	83 c4 0c             	add    esp,0xc
c0027163:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0027164 <SATA::~SATA()>:
c0027164:	83 ec 0c             	sub    esp,0xc
c0027167:	ba cc ad 02 c0       	mov    edx,0xc002adcc
c002716c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027170:	89 10                	mov    DWORD PTR [eax],edx
c0027172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027176:	83 ec 0c             	sub    esp,0xc
c0027179:	50                   	push   eax
c002717a:	e8 b1 cd fe ff       	call   c0013f30 <PhysicalDisk::~PhysicalDisk()>
c002717f:	83 c4 10             	add    esp,0x10
c0027182:	90                   	nop
c0027183:	83 c4 0c             	add    esp,0xc
c0027186:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0027188 <SATA::~SATA()>:
c0027188:	83 ec 0c             	sub    esp,0xc
c002718b:	83 ec 0c             	sub    esp,0xc
c002718e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027192:	e8 cd ff ff ff       	call   c0027164 <SATA::~SATA()>
c0027197:	83 c4 10             	add    esp,0x10
c002719a:	83 ec 08             	sub    esp,0x8
c002719d:	68 74 01 00 00       	push   0x174
c00271a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00271a6:	e8 16 b4 fe ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c00271ab:	83 c4 10             	add    esp,0x10
c00271ae:	83 c4 0c             	add    esp,0xc
c00271b1:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00271b2 <AVX::~AVX()>:
c00271b2:	83 ec 0c             	sub    esp,0xc
c00271b5:	ba 08 ae 02 c0       	mov    edx,0xc002ae08
c00271ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271be:	89 10                	mov    DWORD PTR [eax],edx
c00271c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271c4:	83 ec 0c             	sub    esp,0xc
c00271c7:	50                   	push   eax
c00271c8:	e8 e7 cd fe ff       	call   c0013fb4 <FPU::~FPU()>
c00271cd:	83 c4 10             	add    esp,0x10
c00271d0:	90                   	nop
c00271d1:	83 c4 0c             	add    esp,0xc
c00271d4:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00271d6 <AVX::~AVX()>:
c00271d6:	83 ec 0c             	sub    esp,0xc
c00271d9:	83 ec 0c             	sub    esp,0xc
c00271dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00271e0:	e8 cd ff ff ff       	call   c00271b2 <AVX::~AVX()>
c00271e5:	83 c4 10             	add    esp,0x10
c00271e8:	83 ec 08             	sub    esp,0x8
c00271eb:	68 58 01 00 00       	push   0x158
c00271f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00271f4:	e8 c8 b3 fe ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c00271f9:	83 c4 10             	add    esp,0x10
c00271fc:	83 c4 0c             	add    esp,0xc
c00271ff:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0027200 <MMX::~MMX()>:
c0027200:	83 ec 0c             	sub    esp,0xc
c0027203:	ba 48 ae 02 c0       	mov    edx,0xc002ae48
c0027208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002720c:	89 10                	mov    DWORD PTR [eax],edx
c002720e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027212:	83 ec 0c             	sub    esp,0xc
c0027215:	50                   	push   eax
c0027216:	e8 99 cd fe ff       	call   c0013fb4 <FPU::~FPU()>
c002721b:	83 c4 10             	add    esp,0x10
c002721e:	90                   	nop
c002721f:	83 c4 0c             	add    esp,0xc
c0027222:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0027224 <MMX::~MMX()>:
c0027224:	83 ec 0c             	sub    esp,0xc
c0027227:	83 ec 0c             	sub    esp,0xc
c002722a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002722e:	e8 cd ff ff ff       	call   c0027200 <MMX::~MMX()>
c0027233:	83 c4 10             	add    esp,0x10
c0027236:	83 ec 08             	sub    esp,0x8
c0027239:	68 58 01 00 00       	push   0x158
c002723e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027242:	e8 7a b3 fe ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c0027247:	83 c4 10             	add    esp,0x10
c002724a:	83 c4 0c             	add    esp,0xc
c002724d:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002724e <SSE::~SSE()>:
c002724e:	83 ec 0c             	sub    esp,0xc
c0027251:	ba 88 ae 02 c0       	mov    edx,0xc002ae88
c0027256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002725a:	89 10                	mov    DWORD PTR [eax],edx
c002725c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027260:	83 ec 0c             	sub    esp,0xc
c0027263:	50                   	push   eax
c0027264:	e8 4b cd fe ff       	call   c0013fb4 <FPU::~FPU()>
c0027269:	83 c4 10             	add    esp,0x10
c002726c:	90                   	nop
c002726d:	83 c4 0c             	add    esp,0xc
c0027270:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0027272 <SSE::~SSE()>:
c0027272:	83 ec 0c             	sub    esp,0xc
c0027275:	83 ec 0c             	sub    esp,0xc
c0027278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002727c:	e8 cd ff ff ff       	call   c002724e <SSE::~SSE()>
c0027281:	83 c4 10             	add    esp,0x10
c0027284:	83 ec 08             	sub    esp,0x8
c0027287:	68 58 01 00 00       	push   0x158
c002728c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027290:	e8 2c b3 fe ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c0027295:	83 c4 10             	add    esp,0x10
c0027298:	83 c4 0c             	add    esp,0xc
c002729b:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002729c <x87::~x87()>:
c002729c:	83 ec 0c             	sub    esp,0xc
c002729f:	ba c8 ae 02 c0       	mov    edx,0xc002aec8
c00272a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272a8:	89 10                	mov    DWORD PTR [eax],edx
c00272aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272ae:	83 ec 0c             	sub    esp,0xc
c00272b1:	50                   	push   eax
c00272b2:	e8 fd cc fe ff       	call   c0013fb4 <FPU::~FPU()>
c00272b7:	83 c4 10             	add    esp,0x10
c00272ba:	90                   	nop
c00272bb:	83 c4 0c             	add    esp,0xc
c00272be:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00272c0 <x87::~x87()>:
c00272c0:	83 ec 0c             	sub    esp,0xc
c00272c3:	83 ec 0c             	sub    esp,0xc
c00272c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00272ca:	e8 cd ff ff ff       	call   c002729c <x87::~x87()>
c00272cf:	83 c4 10             	add    esp,0x10
c00272d2:	83 ec 08             	sub    esp,0x8
c00272d5:	68 58 01 00 00       	push   0x158
c00272da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00272de:	e8 de b2 fe ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c00272e3:	83 c4 10             	add    esp,0x10
c00272e6:	83 c4 0c             	add    esp,0xc
c00272e9:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00272ea <IOAPIC::~IOAPIC()>:
c00272ea:	83 ec 0c             	sub    esp,0xc
c00272ed:	ba 20 b0 02 c0       	mov    edx,0xc002b020
c00272f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272f6:	89 10                	mov    DWORD PTR [eax],edx
c00272f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272fc:	83 ec 0c             	sub    esp,0xc
c00272ff:	50                   	push   eax
c0027300:	e8 5d c6 fe ff       	call   c0013962 <Device::~Device()>
c0027305:	83 c4 10             	add    esp,0x10
c0027308:	90                   	nop
c0027309:	83 c4 0c             	add    esp,0xc
c002730c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002730e <IOAPIC::~IOAPIC()>:
c002730e:	83 ec 0c             	sub    esp,0xc
c0027311:	83 ec 0c             	sub    esp,0xc
c0027314:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027318:	e8 cd ff ff ff       	call   c00272ea <IOAPIC::~IOAPIC()>
c002731d:	83 c4 10             	add    esp,0x10
c0027320:	83 ec 08             	sub    esp,0x8
c0027323:	68 68 01 00 00       	push   0x168
c0027328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002732c:	e8 90 b2 fe ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c0027331:	83 c4 10             	add    esp,0x10
c0027334:	83 c4 0c             	add    esp,0xc
c0027337:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0027338 <APIC::~APIC()>:
c0027338:	83 ec 0c             	sub    esp,0xc
c002733b:	ba d8 af 02 c0       	mov    edx,0xc002afd8
c0027340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027344:	89 10                	mov    DWORD PTR [eax],edx
c0027346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002734a:	83 ec 0c             	sub    esp,0xc
c002734d:	50                   	push   eax
c002734e:	e8 2b d1 fe ff       	call   c001447e <InterruptController::~InterruptController()>
c0027353:	83 c4 10             	add    esp,0x10
c0027356:	90                   	nop
c0027357:	83 c4 0c             	add    esp,0xc
c002735a:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002735c <APIC::~APIC()>:
c002735c:	83 ec 0c             	sub    esp,0xc
c002735f:	83 ec 0c             	sub    esp,0xc
c0027362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027366:	e8 cd ff ff ff       	call   c0027338 <APIC::~APIC()>
c002736b:	83 c4 10             	add    esp,0x10
c002736e:	83 ec 08             	sub    esp,0x8
c0027371:	68 58 21 00 00       	push   0x2158
c0027376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002737a:	e8 42 b2 fe ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c002737f:	83 c4 10             	add    esp,0x10
c0027382:	83 c4 0c             	add    esp,0xc
c0027385:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0027386 <PIC::~PIC()>:
c0027386:	83 ec 0c             	sub    esp,0xc
c0027389:	ba 70 b0 02 c0       	mov    edx,0xc002b070
c002738e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027392:	89 10                	mov    DWORD PTR [eax],edx
c0027394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027398:	83 ec 0c             	sub    esp,0xc
c002739b:	50                   	push   eax
c002739c:	e8 dd d0 fe ff       	call   c001447e <InterruptController::~InterruptController()>
c00273a1:	83 c4 10             	add    esp,0x10
c00273a4:	90                   	nop
c00273a5:	83 c4 0c             	add    esp,0xc
c00273a8:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00273aa <PIC::~PIC()>:
c00273aa:	83 ec 0c             	sub    esp,0xc
c00273ad:	83 ec 0c             	sub    esp,0xc
c00273b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00273b4:	e8 cd ff ff ff       	call   c0027386 <PIC::~PIC()>
c00273b9:	83 c4 10             	add    esp,0x10
c00273bc:	83 ec 08             	sub    esp,0x8
c00273bf:	68 58 21 00 00       	push   0x2158
c00273c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00273c8:	e8 f4 b1 fe ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c00273cd:	83 c4 10             	add    esp,0x10
c00273d0:	83 c4 0c             	add    esp,0xc
c00273d3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00273d4 <APICTimer::~APICTimer()>:
c00273d4:	83 ec 0c             	sub    esp,0xc
c00273d7:	ba c4 b0 02 c0       	mov    edx,0xc002b0c4
c00273dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273e0:	89 10                	mov    DWORD PTR [eax],edx
c00273e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273e6:	83 ec 0c             	sub    esp,0xc
c00273e9:	50                   	push   eax
c00273ea:	e8 8f ee fe ff       	call   c001627e <Timer::~Timer()>
c00273ef:	83 c4 10             	add    esp,0x10
c00273f2:	90                   	nop
c00273f3:	83 c4 0c             	add    esp,0xc
c00273f6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00273f8 <APICTimer::~APICTimer()>:
c00273f8:	83 ec 0c             	sub    esp,0xc
c00273fb:	83 ec 0c             	sub    esp,0xc
c00273fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027402:	e8 cd ff ff ff       	call   c00273d4 <APICTimer::~APICTimer()>
c0027407:	83 c4 10             	add    esp,0x10
c002740a:	83 ec 08             	sub    esp,0x8
c002740d:	68 60 01 00 00       	push   0x160
c0027412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027416:	e8 a6 b1 fe ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c002741b:	83 c4 10             	add    esp,0x10
c002741e:	83 c4 0c             	add    esp,0xc
c0027421:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0027422 <PIT::~PIT()>:
c0027422:	83 ec 0c             	sub    esp,0xc
c0027425:	ba 14 b1 02 c0       	mov    edx,0xc002b114
c002742a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002742e:	89 10                	mov    DWORD PTR [eax],edx
c0027430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027434:	83 ec 0c             	sub    esp,0xc
c0027437:	50                   	push   eax
c0027438:	e8 41 ee fe ff       	call   c001627e <Timer::~Timer()>
c002743d:	83 c4 10             	add    esp,0x10
c0027440:	90                   	nop
c0027441:	83 c4 0c             	add    esp,0xc
c0027444:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0027446 <PIT::~PIT()>:
c0027446:	83 ec 0c             	sub    esp,0xc
c0027449:	83 ec 0c             	sub    esp,0xc
c002744c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027450:	e8 cd ff ff ff       	call   c0027422 <PIT::~PIT()>
c0027455:	83 c4 10             	add    esp,0x10
c0027458:	83 ec 08             	sub    esp,0x8
c002745b:	68 5c 01 00 00       	push   0x15c
c0027460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027464:	e8 58 b1 fe ff       	call   c00125c1 <operator delete(void*, unsigned long)>
c0027469:	83 c4 10             	add    esp,0x10
c002746c:	83 c4 0c             	add    esp,0xc
c002746f:	c3                   	ret    
